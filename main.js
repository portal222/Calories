/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var __webpack_modules__={154:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(294),_Display__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(417),_KeyPadComponent__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(942);function _typeof(e){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,_toPropertyKey(r.key),r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},_setPrototypeOf(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var a=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){if(t&&("object"===_typeof(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(e)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},_getPrototypeOf(e)}function _defineProperty(e,t,n){return(t=_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _toPropertyKey(e){var t=_toPrimitive(e,"string");return"symbol"===_typeof(t)?t:String(t)}function _toPrimitive(e,t){if("object"!==_typeof(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!==_typeof(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}var Digitron=function(_Component){_inherits(Digitron,_Component);var _super=_createSuper(Digitron);function Digitron(){var _this;_classCallCheck(this,Digitron);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _this=_super.call.apply(_super,[this].concat(args)),_defineProperty(_assertThisInitialized(_this),"state",{result:""}),_defineProperty(_assertThisInitialized(_this),"onClick",(function(e){"="===e?_this.calculate():"C"===e?_this.reset():"CE"===e?_this.backspace():_this.setState({result:_this.state.result+e})})),_defineProperty(_assertThisInitialized(_this),"calculate",(function(){var checkResult="";checkResult=_this.state.result.includes("--")?_this.state.result.replace("--","+"):_this.state.result;try{_this.setState({result:(eval(checkResult)||"")+""})}catch(e){_this.setState({result:"error"})}})),_defineProperty(_assertThisInitialized(_this),"reset",(function(){_this.setState({result:""})})),_defineProperty(_assertThisInitialized(_this),"backspace",(function(){_this.setState({result:_this.state.result.slice(0,-1)})})),_this}return _createClass(Digitron,[{key:"render",value:function(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"calculator-body"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Display__WEBPACK_IMPORTED_MODULE_1__.Z,{result:this.state.result}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_KeyPadComponent__WEBPACK_IMPORTED_MODULE_2__.Z,{onClick:this.onClick})))}}]),Digitron}(react__WEBPACK_IMPORTED_MODULE_0__.Component);const __WEBPACK_DEFAULT_EXPORT__=Digitron},417:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(294);function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==a(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==a(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===a(o)?o:String(o)),r)}var o}function i(e,t){return i=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},i(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}const s=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&i(e,t)}(d,e);var t,n,s,u,c=(s=d,u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=l(s);if(u){var n=l(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===a(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function d(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,d),c.apply(this,arguments)}return t=d,(n=[{key:"render",value:function(){var e=this.props.result;return r.createElement("div",{className:"result"}," ",e," ")}}])&&o(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),d}(r.Component)},942:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(294);function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==a(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==a(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===a(o)?o:String(o)),r)}var o}function i(e,t){return i=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},i(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}const s=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&i(e,t)}(d,e);var t,n,s,u,c=(s=d,u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=l(s);if(u){var n=l(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===a(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function d(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,d),c.apply(this,arguments)}return t=d,(n=[{key:"render",value:function(){var e=this;return r.createElement("div",{className:"button"},r.createElement("button",{name:"C",onClick:function(t){return e.props.onClick(t.target.name)},label:"C",value:"clear"},"C"),r.createElement("button",{name:"CE",onClick:function(t){return e.props.onClick(t.target.name)}},"CE"),r.createElement("button",{name:"(",onClick:function(t){return e.props.onClick(t.target.name)}},"("),r.createElement("button",{name:")",onClick:function(t){return e.props.onClick(t.target.name)}},")"),r.createElement("button",{name:"7",onClick:function(t){return e.props.onClick(t.target.name)},label:"7",value:"7"},"7"),r.createElement("button",{name:"8",onClick:function(t){return e.props.onClick(t.target.name)},label:"8",value:"8"},"8"),r.createElement("button",{name:"9",onClick:function(t){return e.props.onClick(t.target.name)},label:"9",value:"9"},"9"),r.createElement("button",{name:"+",onClick:function(t){return e.props.onClick(t.target.name)},label:"+",size:"2",value:"+"},"+"),r.createElement("button",{name:"4",onClick:function(t){return e.props.onClick(t.target.name)},label:"4",value:"4"},"4"),r.createElement("button",{name:"5",onClick:function(t){return e.props.onClick(t.target.name)},label:"5",value:"5"},"5"),r.createElement("button",{name:"6",onClick:function(t){return e.props.onClick(t.target.name)},label:"6",value:"6"},"6"),r.createElement("button",{name:"-",onClick:function(t){return e.props.onClick(t.target.name)},label:"-",value:"-"},"-"),r.createElement("button",{name:"1",onClick:function(t){return e.props.onClick(t.target.name)},label:"1",value:"1"},"1"),r.createElement("button",{name:"2",onClick:function(t){return e.props.onClick(t.target.name)},label:"2",value:"2"},"2"),r.createElement("button",{name:"3",onClick:function(t){return e.props.onClick(t.target.name)},label:"3",value:"3"},"3"),r.createElement("button",{name:"*",onClick:function(t){return e.props.onClick(t.target.name)},label:"x",value:"*"},"*"),r.createElement("button",{name:".",onClick:function(t){return e.props.onClick(t.target.name)},label:".",value:"."},"."),r.createElement("button",{name:"0",onClick:function(t){return e.props.onClick(t.target.name)},label:"0",value:"0"},"0"),r.createElement("button",{name:"=",onClick:function(t){return e.props.onClick(t.target.name)},label:"=",size:"2",value:"equal"},"="),r.createElement("button",{name:"/",onClick:function(t){return e.props.onClick(t.target.name)},label:"/",value:"/"},"/"))}}])&&o(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),d}(r.Component)},528:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,".container{display:flex;flex-direction:column;margin:auto;max-width:650px;min-width:650px;height:1200px;background-color:#e0b8a0;text-align:center;align-items:center;justify-content:center}.container hr{width:645px}.container .colorBox{display:flex;justify-content:baseline;align-items:end;width:500px;height:345px;background-color:bisque;border:8px solid #9e9e9e;border-radius:12px}.container .colorBox .box{width:100px;background-color:#2920d4}.container .colorBox .box1{width:100px;background-color:#382fd9}.container .colorBox .box2{width:100px;background-color:#5751d2}.container .colorBox .box3{width:100px;background-color:#746fd2}.container .colorBox .box4{width:100px;background-color:#9794d3}.container .colorBox .boxBat{height:20px;padding:4px;border:solid 1px green;border-radius:5px;background-color:#ffd27d;cursor:pointer}.container .colorBox .boxBat:hover{background-color:#ebab6c}.container .colorBox .title{height:22px;padding:4px;background-color:#d0f0e6;color:#191949}.container .boxBatAll{height:24px;padding:4px 30px;border:solid 2px green;border-radius:7px;background-color:#ffd27d;margin:10px;cursor:pointer}.container .boxBatAll:hover{background-color:#ebab6c}.container .inputText{color:#40433f;font-size:20px;margin:10px}.container .inputText .inputPlace{max-width:100px;height:20px;background-color:aliceblue}@media screen and (max-width: 500px){.container{max-width:358px;min-width:358px}.container hr{width:355px}.container .colorBox{max-width:325px;min-width:325px;border:solid 3px grey;border-radius:8px}.container .colorBox .box,.container .colorBox .box1,.container .colorBox .box2,.container .colorBox .box3,.container .colorBox .box4{width:65px}.container .colorBox .boxBat{border-radius:5px}}body{background-color:seashell}.result{display:flex;justify-content:left;align-items:center;height:60px;background-color:#e7f6fd;border:1px solid black;width:97%;font-size:40px;font-family:'Comfortaa', cursive;padding-left:7px;overflow:hidden}.calculator-body{max-width:400px;margin:auto}.button{background-color:#bbb}button{width:25%;height:60px;font-size:30px;font-family:'Comfortaa', cursive;background-color:#f1f1f1;cursor:pointer}button:hover{background-color:#fbd590}@media screen and (max-width: 500px){.result{height:40px;width:93%;font-size:24px;font-family:'Comfortaa', cursive;padding-right:8px}.calculator-body{max-width:250px}button{height:40px;font-size:18px;font-family:'Comfortaa', cursive}}body{font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;font-size:18px;background-color:#d7ccc8}.navContainer{background-color:#bcaaa4;display:flex;flex-direction:row;margin:auto;height:60px;max-width:650px;min-width:650px;justify-content:space-around;align-items:center}.navContainer .linker{color:#cdcdcd;text-decoration:none;font-weight:bold}.navContainer .linker:hover{color:#a8dbd7}.home{margin-top:0;margin:auto;width:650px;height:880px;background-color:#d7ccc8;padding-top:100px}.home .img{margin:auto;background-size:cover;background-image:url(\"https://freepngimg.com/thumb/shape/81500-golden-ratio-spiral-number-fibonacci-white-circle.png\");width:640px;height:395px}.odnosi{border-collapse:collapse;max-width:650px;min-width:650px;margin:auto;background-color:#d7ccc8;margin-bottom:12px}.odnosi .proc{padding-left:20px}.odnosi th{background-color:#8f7a6f;color:#f5f5f5;font-size:18px;padding:12px}.odnosi .relacija{min-width:50px;max-width:50px;overflow:hidden;text-overflow:ellipsis}.odnosi td{font-family:Verdana, Geneva, Tahoma, sans-serif;font-size:16px;text-align:center;min-width:50px;max-width:50px;padding:10px 0px}.odnosi input{text-align:center;height:20px;min-width:50px;max-width:50px;background-color:#e7f6fd;border-radius:4px;border-color:burlywood}model-viewer{margin:auto;cursor:grab;display:flex;height:500px;width:650px;overflow:hidden;position:relative;user-select:none}.view-button{background-color:transparent;border-color:transparent}.calc{margin:auto;margin-top:30px;width:300px}.hrana{border-collapse:collapse;max-width:650px;min-width:650px;background-color:#cdcdcd;margin:auto}.hrana .naslov{font-size:20px;min-width:150px;max-width:150px}.hrana input{text-align:left;height:20px;min-width:60px;max-width:60px;background-color:#e7f6fd;border-radius:4px;border-color:burlywood}.hrana .hidrati{background-color:#b8c6b8}.hrana .hidrati .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana .hidrati .ugHid,.hrana .hidrati .mast{min-width:60px}.hrana .prot{background-color:#eed0aa}.hrana .prot .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana .mleko{background-color:#e8e8e8}.hrana .mleko .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana .oil{background-color:#e0db97}.hrana .oil .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana .orah{background-color:#a1c4b2}.hrana .orah .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana .voce{background-color:#a590b6}.hrana .voce .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana .kupus{background-color:#b9f3b2}.hrana .kupus .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana .alcohol{background-color:#cefff7}.hrana .alcohol .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana thead{font-size:20px}.hrana thead th{text-align:center;background-color:#4c6a4b;color:#cdcdcd;padding:10px 3px;min-width:26px}.hrana tr{background-color:#d7ccc8}.hrana tfoot{color:#a8dbd7}.hrana tfoot tr{background-color:#92a192}.hrana tfoot tr .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana td{padding:8px;font-size:24}.back-to-top{position:fixed;bottom:20px;right:20px;color:#84867b;cursor:pointer;border-radius:400px}.back-to-top .arrowup{width:24px;height:24px;color:#7a9c99ac;background-color:rgba(165,206,195,0.43);font-size:38px;padding-left:5px;border-radius:12px;border:solid 3px #95beba7c}@media screen and (max-width: 500px){body{font-size:16px;margin:0;padding:0}.navContainer{max-width:358px;min-width:358px;margin:auto}.home{margin-top:0;margin:auto;width:358px;height:880px;padding-top:80px}.home .img{height:221px;width:358px}.odnosi{max-width:358px;min-width:358px}.odnosi tr{padding:12px 8px}.odnosi th{font-size:14px;padding:7px}.odnosi .relacija{min-width:30px;max-width:30px}.odnosi td{font-size:14px;min-width:30px;max-width:30px}.odnosi input{height:18px;min-width:30px;max-width:30px}model-viewer{width:360px;height:400px}.hrana{max-width:358px;min-width:358px;margin:auto;font-size:14px}.hrana thead{font-size:14px;padding:6px 2px}.hrana .hidrati .ugHid{min-width:37px}.hrana .hidrati .mast{min-width:37px}.hrana .naslov{font-size:14px;min-width:50px;max-width:50px}.hrana input{font-size:14px;min-width:47px;max-width:47px;border-radius:3px}.hrana td{padding:3px 5px}}\n","",{version:3,sources:["webpack://./src/scss/_tajmer.scss","webpack://./src/scss/_digitron.scss","webpack://./src/scss/main.scss"],names:[],mappings:"AAKA,WACI,YAAa,CACb,qBAAsB,CAEtB,WAAY,CACZ,eAAgB,CAChB,eAAgB,CAChB,aAAc,CACd,wBAAoC,CACpC,iBAAkB,CAClB,kBAAmB,CACnB,sBAAuB,CAX3B,cAeO,WAAY,CAfnB,qBAoBQ,YAAa,CACb,wBAAyB,CACzB,eAAgB,CAChB,WAAY,CACZ,YAAa,CACb,uBAAwB,CACxB,wBAAyB,CACzB,kBAAmB,CA3B3B,0BA8BY,WAAY,CACZ,wBApCc,CAK1B,2BAkCY,WAAY,CACZ,wBAvCc,CAI1B,2BAsCY,WAAY,CACZ,wBA1Cc,CAG1B,2BA0CY,WAAY,CACZ,wBA7CgB,CAE5B,2BA8CY,WAAY,CACZ,wBAhDgB,CAC5B,6BAmDY,WAAY,CACZ,WAAY,CACZ,sBAAuB,CACvB,iBAAkB,CAClB,wBAAoC,CACpC,cAAe,CAxD3B,mCA2DgB,wBAAoC,CA3DpD,4BAgEY,WAAY,CACZ,WAAY,CACZ,wBAAoC,CACpC,aAAsB,CAnElC,sBAwEQ,WAAY,CACZ,gBAAiB,CACjB,sBAAuB,CACvB,iBAAkB,CAClB,wBAAoC,CACpC,WAAY,CACZ,cAAe,CA9EvB,4BAiFY,wBAAoC,CAjFhD,sBAuFQ,aAAc,CACd,cAAe,CACf,WAAY,CAzFpB,kCA4FY,eAAgB,CAChB,WAAY,CACZ,0BAA2B,CAC9B,qCAOL,WACI,eAAgB,CAChB,eAAgB,CAFpB,cAKQ,WAAY,CALpB,qBASQ,eAAgB,CAChB,eAAgB,CAChB,qBAAsB,CACtB,iBAAkB,CAZ1B,sIAoBY,UAAW,CApBvB,6BAuBY,iBAAkB,CACrB,CCnIb,KACI,yBAA0B,CAC7B,QAIG,YAAa,CACb,oBAAqB,CACrB,kBAAmB,CACnB,WAAY,CACZ,wBAAoC,CACpC,sBAAuB,CACvB,SAAU,CACV,cAAe,CACf,gCAAiC,CACjC,gBAAiB,CACjB,eAAgB,CAEnB,iBAKG,eAAgB,CAChB,WAAY,CACf,QAIG,qBAAsB,CACzB,OAGG,SAAU,CACV,WAAY,CACZ,cAAe,CACf,gCAAiC,CACjC,wBAAoC,CACpC,cAAe,CANnB,aASQ,wBAAoC,CAEvC,qCAKD,QAEI,WAAY,CAEZ,SAAU,CACV,cAAe,CACf,gCAAiC,CACjC,iBAAkB,CAErB,iBAGG,eAAgB,CAEnB,OAIG,WAAY,CACZ,cAAe,CACf,gCAAiC,CAGpC,CClDL,KACI,oGAAqG,CACrG,cAAe,CAEf,wBAhBY,CAkBf,cAMG,wBAAyB,CACzB,YAAa,CACb,kBAAmB,CACnB,WAAY,CACZ,WAAY,CACZ,eAAgB,CAChB,eAAgB,CAChB,4BAA6B,CAC7B,kBAAmB,CATvB,sBAYQ,aAxCW,CAyCX,oBAAqB,CACrB,gBAAiB,CAdzB,4BAkBQ,aAAc,CACjB,MAMD,YAAa,CACb,WAAY,CACZ,WAAY,CACZ,YAAa,CACb,wBApDY,CAqDZ,iBAAkB,CANtB,WASQ,WAAY,CACZ,qBAAsB,CACtB,sHAAuH,CACvH,WAAY,CACZ,YAAa,CAChB,QAID,wBAAyB,CAEzB,eAAgB,CAChB,eAAgB,CAChB,WAAY,CACZ,wBAtEY,CAuEZ,kBAAmB,CAPvB,cAWK,iBAAkB,CAXvB,WAeQ,wBA9EmB,CA+EnB,aAAc,CACd,cAAe,CACf,YAAa,CAlBrB,kBAsBQ,cAAe,CACf,cAAe,CACf,eAAgB,CAChB,sBAAuB,CAzB/B,WA6BQ,+CAAgD,CAChD,cAAe,CACf,iBAAkB,CAClB,cAAe,CACf,cAAe,CAChB,gBAAiB,CAlCxB,cAwCQ,iBAAkB,CAClB,WAAY,CACZ,cAAe,CACf,cAAe,CACf,wBA9GmB,CA+GnB,iBAAkB,CAClB,sBAAuB,CAE1B,aAGD,WAAY,CACZ,WAAY,CACZ,YAAa,CACb,YAAa,CACb,WAAY,CACZ,eAAgB,CAChB,iBAAkB,CAClB,gBAAiB,CACpB,aAEG,4BAA6B,CAC7B,wBAAyB,CAE5B,MAEG,WAAY,CAChB,eAAgB,CACZ,WAAY,CACf,OAIG,wBAAyB,CACzB,eAAgB,CAChB,eAAgB,CAChB,wBAjJe,CAkJf,WAAY,CANhB,eASQ,cAAe,CACf,eAAgB,CAChB,eAAgB,CAXxB,aAeQ,eAAgB,CAChB,WAAY,CACZ,cAAe,CACf,cAAe,CACf,wBA5JmB,CA6JnB,iBAAkB,CAClB,sBAAuB,CArB/B,gBAyBQ,wBA9JqB,CAqI7B,yBA4BY,WAAY,CACZ,cAAe,CACf,cAAe,CACf,eAAgB,CAChB,sBAAuB,CAhCnC,6CAsCY,cAAe,CAtC3B,aA4CQ,wBAhLsB,CAoI9B,sBA+CY,WAAY,CACZ,cAAe,CACf,cAAe,CACf,eAAgB,CAChB,sBAAuB,CAnDnC,cAyDQ,wBA5LoB,CAmI5B,uBA4DY,WAAY,CACZ,cAAe,CACf,cAAe,CACf,eAAgB,CAChB,sBAAuB,CAhEnC,YAqEQ,wBAvMoB,CAkI5B,qBAwEY,WAAY,CACZ,cAAe,CACf,cAAe,CACf,eAAgB,CAChB,sBAAuB,CA5EnC,aAiFQ,wBAlNoB,CAiI5B,sBAoFY,WAAY,CACZ,cAAe,CACf,cAAe,CACf,eAAgB,CAChB,sBAAuB,CAxFnC,aA6FQ,wBA7NsB,CAgI9B,sBAgGY,WAAY,CACZ,cAAe,CACf,cAAe,CACf,eAAgB,CAChB,sBAAuB,CApGnC,cAyGQ,wBAxOqB,CA+H7B,uBA4GY,WAAY,CACZ,cAAe,CACf,cAAe,CACf,eAAgB,CAChB,sBAAuB,CAhHnC,gBAqHQ,wBAnPoB,CA8H5B,yBAwHY,WAAY,CACZ,cAAe,CACf,cAAe,CACf,eAAgB,CAChB,sBAAuB,CA5HnC,aAkIQ,cAAe,CAlIvB,gBAqIY,iBAAkB,CAClB,wBAAyB,CACzB,aAnRO,CAoRP,gBAAiB,CACjB,cAAe,CAzI3B,UA+IQ,wBAtRQ,CAuIhB,aAuJQ,aAAc,CAvJtB,gBA2JY,wBAAyB,CA3JrC,yBA8JgB,WAAY,CACZ,cAAe,CACf,cAAe,CACf,eAAgB,CAChB,sBAAuB,CAlKvC,UA0KQ,WAAY,CACZ,YAAa,CAChB,aAID,cAAe,CACf,WAAY,CACZ,UAAW,CAEX,aAAc,CACd,cAAe,CACf,mBAAoB,CAPxB,sBAUQ,UAAW,CACX,WAAY,CACZ,eAAgB,CAChB,uCAA2C,CAC3C,cAAe,CACf,gBAAiB,CAEjB,kBAAmB,CACnB,0BAA2B,CAC9B,qCAKD,KACI,cAAe,CACf,QAAS,CACT,SAAU,CACb,cAGG,eAAgB,CAChB,eAAgB,CAChB,WAAY,CACf,MAGG,YAAa,CACb,WAAY,CACZ,WAAY,CACZ,YAAa,CAEb,gBAAiB,CANrB,WASQ,YAAa,CACb,WAAY,CAIf,QAKD,eAAgB,CAChB,eAAgB,CAFpB,WAMQ,gBAAiB,CANzB,WAWQ,cAAe,CACf,WAAY,CAZpB,kBAgBQ,cAAe,CACf,cAAe,CAjBvB,WAuBQ,cAAe,CAEf,cAAe,CACf,cAAe,CA1BvB,cAgCQ,WAAY,CACZ,cAAe,CACf,cAAe,CAGlB,aAID,WAAY,CACZ,YAAa,CAChB,OAGG,eAAgB,CAChB,eAAgB,CAChB,WAAY,CACZ,cAAe,CAJnB,aAOQ,cAAe,CACf,eAAgB,CARxB,uBAaY,cAAe,CAb3B,sBAgBY,cAAe,CAhB3B,eAqBQ,cAAe,CACf,cAAe,CACf,cAAe,CAvBvB,aA2BQ,cAAe,CACf,cAAe,CACf,cAAe,CACf,iBAAkB,CA9B1B,UAkCQ,eAAgB,CAEnB",sourcesContent:["$color01: rgb(41, 32, 212);\r\n$color02: rgb(56, 47, 217);\r\n$color03: rgb(87, 81, 210);\r\n$color04: rgb(116, 111, 210);\r\n$color05: rgb(151, 148, 211);\r\n.container {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    margin: auto;\r\n    max-width: 650px;\r\n    min-width: 650px;\r\n    height: 1200px;\r\n    background-color: rgb(224, 184, 160);\r\n    text-align: center;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    hr {\r\n       \r\n       width: 645px;\r\n    }\r\n\r\n\r\n    .colorBox {\r\n        display: flex;\r\n        justify-content: baseline;\r\n        align-items: end;\r\n        width: 500px;\r\n        height: 345px;\r\n        background-color: bisque;\r\n        border: 8px solid #9e9e9e;\r\n        border-radius: 12px;\r\n\r\n        .box {\r\n            width: 100px;\r\n            background-color: $color01;\r\n        }\r\n        .box1 {\r\n            width: 100px;\r\n            background-color: $color02;\r\n        }\r\n        .box2 {\r\n            width: 100px;\r\n            background-color: $color03;\r\n        }\r\n        .box3  {\r\n            width: 100px;\r\n            background-color: $color04;\r\n        }\r\n        .box4 {\r\n            width: 100px;\r\n            background-color: $color05;\r\n        }\r\n\r\n        .boxBat {\r\n            height: 20px;\r\n            padding: 4px;\r\n            border: solid 1px green;\r\n            border-radius: 5px;\r\n            background-color: rgb(255, 210, 125);\r\n            cursor: pointer;\r\n\r\n            &:hover {\r\n                background-color: rgb(235, 171, 108);\r\n            }\r\n\r\n        }\r\n        .title {\r\n            height: 22px;\r\n            padding: 4px;\r\n            background-color: rgb(208, 240, 230);\r\n            color: rgb(25, 25, 73);\r\n        }\r\n    }\r\n\r\n    .boxBatAll {\r\n        height: 24px;\r\n        padding: 4px 30px;\r\n        border: solid 2px green;\r\n        border-radius: 7px;\r\n        background-color: rgb(255, 210, 125);\r\n        margin: 10px;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            background-color: rgb(235, 171, 108);\r\n        }\r\n\r\n    }\r\n\r\n    .inputText {\r\n        color: #40433f;\r\n        font-size: 20px;\r\n        margin: 10px;\r\n\r\n        .inputPlace {\r\n            max-width: 100px;\r\n            height: 20px;\r\n            background-color: aliceblue;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n@media screen and (max-width: 500px) {\r\n    .container {\r\n        max-width: 358px;\r\n        min-width: 358px;\r\n\r\n        hr {\r\n            width: 355px;\r\n        }\r\n\r\n        .colorBox {\r\n            max-width: 325px;\r\n            min-width: 325px;\r\n            border: solid 3px grey;\r\n            border-radius: 8px;\r\n\r\n\r\n            .box,\r\n            .box1,\r\n            .box2,\r\n            .box3,\r\n            .box4 {\r\n                width: 65px;\r\n            }\r\n            .boxBat {\r\n                border-radius: 5px;\r\n            }\r\n        }\r\n    }\r\n}","body {\r\n    background-color: seashell;\r\n}\r\n\r\n\r\n.result {\r\n    display: flex;\r\n    justify-content: left;\r\n    align-items: center;\r\n    height: 60px;\r\n    background-color: rgb(231, 246, 253);\r\n    border: 1px solid black;\r\n    width: 97%;\r\n    font-size: 40px;\r\n    font-family: 'Comfortaa', cursive;\r\n    padding-left: 7px;\r\n    overflow: hidden;\r\n\r\n}\r\n\r\n\r\n\r\n.calculator-body {\r\n    max-width: 400px;\r\n    margin: auto;\r\n}\r\n\r\n.button {\r\n    // display: block;\r\n    background-color: #bbb;\r\n}\r\n\r\nbutton {\r\n    width: 25%;\r\n    height: 60px;\r\n    font-size: 30px;\r\n    font-family: 'Comfortaa', cursive;\r\n    background-color: rgb(241, 241, 241);\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        background-color: rgb(251, 213, 144);\r\n\r\n    }\r\n}\r\n\r\n@media screen and (max-width: 500px) {\r\n\r\n    .result {\r\n\r\n        height: 40px;\r\n     \r\n        width: 93%;\r\n        font-size: 24px;\r\n        font-family: 'Comfortaa', cursive;\r\n        padding-right: 8px;\r\n\r\n    }\r\n\r\n    .calculator-body {\r\n        max-width: 250px;\r\n\r\n    }\r\n\r\n    button {\r\n\r\n        height: 40px;\r\n        font-size: 18px;\r\n        font-family: 'Comfortaa', cursive;\r\n\r\n\r\n    }\r\n\r\n\r\n}","@import '../scss/_tajmer.scss';\r\n@import '../scss/_digitron.scss';\r\n\r\n\r\n$color-one: #cdcdcd;\r\n$color-two: #a7abb0;\r\n$color-three: rgb(164, 168, 206);\r\n$color4: rgb(231, 246, 253);\r\n// $color5: rgb(241, 241, 241);\r\n$color5: #d7ccc8;\r\n$color6: rgb(143, 122, 111);\r\n$colorHid: rgb(184, 198, 184);\r\n$colorProt: rgb(238, 208, 170);\r\n$colorMl: rgb(232, 232, 232);\r\n$colorOil:rgb(224, 219, 151);\r\n$colorNut:rgb(161, 196, 178);\r\n$colorVoce: rgb(165, 144, 182);\r\n$colorKup: rgb(185, 243, 178);\r\n$colorAlc:rgb(206, 255, 247);\r\n;\r\n\r\nbody {\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n    font-size: 18px;\r\n    // background-color: rgb(251, 213, 144);\r\n    background-color: $color5;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n.navContainer {\r\n    background-color: #bcaaa4;\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin: auto;\r\n    height: 60px;\r\n    max-width: 650px;\r\n    min-width: 650px;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n\r\n    .linker {\r\n        color: $color-one;\r\n        text-decoration: none;\r\n        font-weight: bold;\r\n    }\r\n\r\n    .linker:hover {\r\n        color: #a8dbd7;\r\n    }\r\n\r\n\r\n}\r\n\r\n.home {\r\n    margin-top: 0;\r\n    margin: auto;\r\n    width: 650px;\r\n    height: 880px;\r\n    background-color: $color5;\r\n    padding-top: 100px;\r\n\r\n    .img {\r\n        margin: auto;\r\n        background-size: cover;\r\n        background-image: url(\"https://freepngimg.com/thumb/shape/81500-golden-ratio-spiral-number-fibonacci-white-circle.png\");\r\n        width: 640px;\r\n        height: 395px;\r\n    }\r\n}\r\n\r\n.odnosi {\r\n    border-collapse: collapse;\r\n\r\n    max-width: 650px;\r\n    min-width: 650px;\r\n    margin: auto;\r\n    background-color: $color5;\r\n    margin-bottom: 12px;\r\n  \r\n\r\n    .proc {\r\n     padding-left: 20px;\r\n    }\r\n\r\n    th {\r\n        background-color: $color6;\r\n        color: #f5f5f5;\r\n        font-size: 18px;\r\n        padding: 12px;\r\n    }\r\n\r\n    .relacija {\r\n        min-width: 50px;\r\n        max-width: 50px;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n    }\r\n\r\n    td {\r\n        font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n        font-size: 16px;\r\n        text-align: center;\r\n        min-width: 50px;\r\n        max-width: 50px;\r\n       padding: 10px 0px;\r\n       \r\n\r\n    }\r\n\r\n    input {\r\n        text-align: center;\r\n        height: 20px;\r\n        min-width: 50px;\r\n        max-width: 50px;\r\n        background-color: $color4;\r\n        border-radius: 4px;\r\n        border-color: burlywood;\r\n \r\n    }\r\n}\r\nmodel-viewer {\r\n    margin: auto;\r\n    cursor: grab;\r\n    display: flex;\r\n    height: 500px;\r\n    width: 650px;\r\n    overflow: hidden;\r\n    position: relative;\r\n    user-select: none;\r\n}\r\n.view-button {\r\n    background-color: transparent;\r\n    border-color: transparent;\r\n\r\n}\r\n.calc {\r\n    margin: auto;\r\nmargin-top: 30px;\r\n    width: 300px;\r\n}\r\n\r\n.hrana {\r\n\r\n    border-collapse: collapse;\r\n    max-width: 650px;\r\n    min-width: 650px;\r\n    background-color: $color-one;\r\n    margin: auto;\r\n\r\n    .naslov {\r\n        font-size: 20px;\r\n        min-width: 150px;\r\n        max-width: 150px;\r\n    }\r\n\r\n    input {\r\n        text-align: left;\r\n        height: 20px;\r\n        min-width: 60px;\r\n        max-width: 60px;\r\n        background-color: $color4;\r\n        border-radius: 4px;\r\n        border-color: burlywood;\r\n    }\r\n\r\n    .hidrati {\r\n        background-color: $colorHid;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n\r\n        .ugHid, \r\n        .mast {\r\n            min-width: 60px;\r\n        }\r\n     \r\n    }\r\n\r\n    .prot {\r\n        background-color: $colorProt;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n    }\r\n\r\n    .mleko {\r\n        background-color: $colorMl;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n    }\r\n    .oil {\r\n        background-color: $colorOil;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n    }\r\n    .orah {\r\n        background-color: $colorNut;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n    }\r\n    .voce {\r\n        background-color: $colorVoce;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n    }\r\n    .kupus {\r\n        background-color: $colorKup;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n    }\r\n    .alcohol {\r\n        background-color: $colorAlc;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n    }\r\n\r\n    thead {\r\n        font-size: 20px;\r\n\r\n        th {\r\n            text-align: center;\r\n            background-color: #4c6a4b;\r\n            color: $color-one;\r\n            padding: 10px 3px;\r\n            min-width: 26px;\r\n        }\r\n\r\n    }\r\n\r\n    tr {\r\n        background-color: $color5;\r\n\r\n        // &:nth-child(even) {\r\n        //     background-color: #adadad;\r\n        // }\r\n    }\r\n\r\n    tfoot {\r\n        color: #a8dbd7;\r\n\r\n        tr {\r\n\r\n            background-color: #92a192;\r\n\r\n            .protein {\r\n                height: 25px;\r\n                min-width: 27px;\r\n                max-width: 27px;\r\n                overflow: hidden;\r\n                text-overflow: ellipsis;\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    td {\r\n        padding: 8px;\r\n        font-size: 24;\r\n    }\r\n}\r\n\r\n.back-to-top {\r\n    position: fixed;\r\n    bottom: 20px;\r\n    right: 20px;\r\n\r\n    color: #84867b;\r\n    cursor: pointer;\r\n    border-radius: 400px;\r\n\r\n    .arrowup {\r\n        width: 24px;\r\n        height: 24px;\r\n        color: #7a9c99ac;\r\n        background-color: rgba(165, 206, 195, 0.43);\r\n        font-size: 38px;\r\n        padding-left: 5px;\r\n\r\n        border-radius: 12px;\r\n        border: solid 3px #95beba7c;\r\n    }\r\n}\r\n\r\n\r\n@media screen and (max-width: 500px) {\r\n    body {\r\n        font-size: 16px;\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n\r\n    .navContainer {\r\n        max-width: 358px;\r\n        min-width: 358px;\r\n        margin: auto;\r\n    }\r\n\r\n    .home {\r\n        margin-top: 0;\r\n        margin: auto;\r\n        width: 358px;\r\n        height: 880px;\r\n\r\n        padding-top: 80px;\r\n\r\n        .img {\r\n            height: 221px;\r\n            width: 358px;\r\n\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    .odnosi {\r\n        max-width: 358px;\r\n        min-width: 358px;\r\n      \r\n    \r\n        tr {\r\n            padding: 12px 8px;\r\n        }\r\n    \r\n        th {\r\n       \r\n            font-size: 14px;\r\n            padding: 7px;\r\n        }\r\n    \r\n        .relacija {\r\n            min-width: 30px;\r\n            max-width: 30px;\r\n     \r\n        }\r\n    \r\n        td {\r\n         \r\n            font-size: 14px;\r\n       \r\n            min-width: 30px;\r\n            max-width :30px;\r\n    \r\n        }\r\n    \r\n        input {\r\n        \r\n            height: 18px;\r\n            min-width: 30px;\r\n            max-width: 30px;\r\n          \r\n \r\n        }\r\n    }\r\n\r\n    model-viewer {\r\n        width: 360px;\r\n        height: 400px;\r\n    }\r\n\r\n    .hrana {\r\n        max-width: 358px;\r\n        min-width: 358px;\r\n        margin: auto;\r\n        font-size: 14px;\r\n\r\n        thead {\r\n            font-size: 14px;\r\n            padding: 6px 2px;\r\n        }\r\n\r\n        .hidrati {\r\n            .ugHid {\r\n                min-width: 37px;\r\n            }\r\n            .mast {\r\n                min-width: 37px;\r\n            }\r\n        }\r\n\r\n        .naslov {\r\n            font-size: 14px;\r\n            min-width: 50px;\r\n            max-width: 50px;\r\n        }\r\n\r\n        input {\r\n            font-size: 14px;\r\n            min-width: 47px;\r\n            max-width: 47px;\r\n            border-radius: 3px;\r\n        }\r\n\r\n        td {\r\n            padding: 3px 5px;\r\n          \r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n}"],sourceRoot:""}]);const l=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},448:(e,t,n)=>{var r=n(294),a=n(840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function s(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f={},m={};function h(e,t,n,r,a,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new h(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new h(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new h(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new h(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new h(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new h(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new h(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new h(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new h(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var a=g.hasOwnProperty(t)?g[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!d.call(m,e)||!d.call(f,e)&&(p.test(e)?m[e]=!0:(f[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new h(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new h(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,y);g[t]=new h(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new h(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new h("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new h(e,1,!1,e.toLowerCase(),null,!0,!0)}));var x=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,A=Symbol.for("react.element"),C=Symbol.for("react.portal"),E=Symbol.for("react.fragment"),w=Symbol.for("react.strict_mode"),k=Symbol.for("react.profiler"),S=Symbol.for("react.provider"),N=Symbol.for("react.context"),_=Symbol.for("react.forward_ref"),P=Symbol.for("react.suspense"),B=Symbol.for("react.suspense_list"),T=Symbol.for("react.memo"),F=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var R=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var L=Symbol.iterator;function M(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=L&&e[L]||e["@@iterator"])?e:null}var D,O=Object.assign;function j(e){if(void 0===D)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);D=t&&t[1]||""}return"\n"+D+e}var z=!1;function V(e,t){if(!e||z)return"";z=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,l=o.length-1;1<=i&&0<=l&&a[i]!==o[l];)l--;for(;1<=i&&0<=l;i--,l--)if(a[i]!==o[l]){if(1!==i||1!==l)do{if(i--,0>--l||a[i]!==o[l]){var s="\n"+a[i].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}}while(1<=i&&0<=l);break}}}finally{z=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?j(e):""}function I(e){switch(e.tag){case 5:return j(e.type);case 16:return j("Lazy");case 13:return j("Suspense");case 19:return j("SuspenseList");case 0:case 2:case 15:return V(e.type,!1);case 11:return V(e.type.render,!1);case 1:return V(e.type,!0);default:return""}}function U(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case C:return"Portal";case k:return"Profiler";case w:return"StrictMode";case P:return"Suspense";case B:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case N:return(e.displayName||"Context")+".Consumer";case S:return(e._context.displayName||"Context")+".Provider";case _:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case T:return null!==(t=e.displayName||null)?t:U(e.type)||"Memo";case F:t=e._payload,e=e._init;try{return U(e(t))}catch(e){}}return null}function W(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return U(t);case 8:return t===w?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function $(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function H(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Y(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function K(e,t){var n=t.checked;return O({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Z(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=$(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function G(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function X(e,t){G(e,t);var n=$(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,$(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+$(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return O({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:$(n)}}function oe(e,t){var n=$(t.value),r=$(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function se(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,de=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function pe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var fe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},me=["Webkit","ms","Moz","O"];function he(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||fe.hasOwnProperty(e)&&fe[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=he(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(fe).forEach((function(e){me.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),fe[t]=fe[e]}))}));var ve=O({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var xe=null;function Ae(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,Ee=null,we=null;function ke(e){if(e=ba(e)){if("function"!=typeof Ce)throw Error(o(280));var t=e.stateNode;t&&(t=Aa(t),Ce(e.stateNode,e.type,t))}}function Se(e){Ee?we?we.push(e):we=[e]:Ee=e}function Ne(){if(Ee){var e=Ee,t=we;if(we=Ee=null,ke(e),t)for(e=0;e<t.length;e++)ke(t[e])}}function _e(e,t){return e(t)}function Pe(){}var Be=!1;function Te(e,t,n){if(Be)return e(t,n);Be=!0;try{return _e(e,t,n)}finally{Be=!1,(null!==Ee||null!==we)&&(Pe(),Ne())}}function Fe(e,t){var n=e.stateNode;if(null===n)return null;var r=Aa(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Re=!1;if(c)try{var Le={};Object.defineProperty(Le,"passive",{get:function(){Re=!0}}),window.addEventListener("test",Le,Le),window.removeEventListener("test",Le,Le)}catch(ce){Re=!1}function Me(e,t,n,r,a,o,i,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var De=!1,Oe=null,je=!1,ze=null,Ve={onError:function(e){De=!0,Oe=e}};function Ie(e,t,n,r,a,o,i,l,s){De=!1,Oe=null,Me.apply(Ve,arguments)}function Ue(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function We(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function $e(e){if(Ue(e)!==e)throw Error(o(188))}function Ye(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ue(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return $e(a),e;if(i===r)return $e(a),t;i=i.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=i;else{for(var l=!1,s=a.child;s;){if(s===n){l=!0,n=a,r=i;break}if(s===r){l=!0,r=a,n=i;break}s=s.sibling}if(!l){for(s=i.child;s;){if(s===n){l=!0,n=i,r=a;break}if(s===r){l=!0,r=i,n=a;break}s=s.sibling}if(!l)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?He(e):null}function He(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=He(e);if(null!==t)return t;e=e.sibling}return null}var qe=a.unstable_scheduleCallback,Qe=a.unstable_cancelCallback,Ke=a.unstable_shouldYield,Ze=a.unstable_requestPaint,Ge=a.unstable_now,Xe=a.unstable_getCurrentPriorityLevel,Je=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,ot=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/st|0)|0},lt=Math.log,st=Math.LN2,ut=64,ct=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function pt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~a;0!==l?r=dt(l):0!=(o&=i)&&(r=dt(o))}else 0!=(i=n&~a)?r=dt(i):0!==o&&(r=dt(o));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&a)&&((a=r&-r)>=(o=t&-t)||16===a&&0!=(4194240&o)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-it(t)),r|=e[n],t&=~a;return r}function ft(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function mt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function ht(){var e=ut;return 0==(4194240&(ut<<=1))&&(ut=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function vt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var bt=0;function xt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var At,Ct,Et,wt,kt,St=!1,Nt=[],_t=null,Pt=null,Bt=null,Tt=new Map,Ft=new Map,Rt=[],Lt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Mt(e,t){switch(e){case"focusin":case"focusout":_t=null;break;case"dragenter":case"dragleave":Pt=null;break;case"mouseover":case"mouseout":Bt=null;break;case"pointerover":case"pointerout":Tt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Ft.delete(t.pointerId)}}function Dt(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=ba(t))&&Ct(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function Ot(e){var t=ya(e.target);if(null!==t){var n=Ue(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=We(n)))return e.blockedOn=t,void kt(e.priority,(function(){Et(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function jt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ba(n))&&Ct(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);xe=r,n.target.dispatchEvent(r),xe=null,t.shift()}return!0}function zt(e,t,n){jt(e)&&n.delete(t)}function Vt(){St=!1,null!==_t&&jt(_t)&&(_t=null),null!==Pt&&jt(Pt)&&(Pt=null),null!==Bt&&jt(Bt)&&(Bt=null),Tt.forEach(zt),Ft.forEach(zt)}function It(e,t){e.blockedOn===t&&(e.blockedOn=null,St||(St=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Vt)))}function Ut(e){function t(t){return It(t,e)}if(0<Nt.length){It(Nt[0],e);for(var n=1;n<Nt.length;n++){var r=Nt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==_t&&It(_t,e),null!==Pt&&It(Pt,e),null!==Bt&&It(Bt,e),Tt.forEach(t),Ft.forEach(t),n=0;n<Rt.length;n++)(r=Rt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Rt.length&&null===(n=Rt[0]).blockedOn;)Ot(n),null===n.blockedOn&&Rt.shift()}var Wt=x.ReactCurrentBatchConfig,$t=!0;function Yt(e,t,n,r){var a=bt,o=Wt.transition;Wt.transition=null;try{bt=1,qt(e,t,n,r)}finally{bt=a,Wt.transition=o}}function Ht(e,t,n,r){var a=bt,o=Wt.transition;Wt.transition=null;try{bt=4,qt(e,t,n,r)}finally{bt=a,Wt.transition=o}}function qt(e,t,n,r){if($t){var a=Kt(e,t,n,r);if(null===a)$r(e,t,r,Qt,n),Mt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return _t=Dt(_t,e,t,n,r,a),!0;case"dragenter":return Pt=Dt(Pt,e,t,n,r,a),!0;case"mouseover":return Bt=Dt(Bt,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return Tt.set(o,Dt(Tt.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,Ft.set(o,Dt(Ft.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Mt(e,r),4&t&&-1<Lt.indexOf(e)){for(;null!==a;){var o=ba(a);if(null!==o&&At(o),null===(o=Kt(e,t,n,r))&&$r(e,t,r,Qt,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else $r(e,t,r,null,n)}}var Qt=null;function Kt(e,t,n,r){if(Qt=null,null!==(e=ya(e=Ae(r))))if(null===(t=Ue(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=We(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Qt=e,null}function Zt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Xe()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Gt=null,Xt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Xt,r=n.length,a="value"in Gt?Gt.value:Gt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return Jt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return O(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,ln,sn,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(un),dn=O({},un,{view:0,detail:0}),pn=an(dn),fn=O({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sn&&(sn&&"mousemove"===e.type?(on=e.screenX-sn.screenX,ln=e.screenY-sn.screenY):ln=on=0,sn=e),on)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),mn=an(fn),hn=an(O({},fn,{dataTransfer:0})),gn=an(O({},dn,{relatedTarget:0})),vn=an(O({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=O({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=an(yn),xn=an(O({},un,{data:0})),An={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function wn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function kn(){return wn}var Sn=O({},dn,{key:function(e){if(e.key){var t=An[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Cn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Nn=an(Sn),_n=an(O({},fn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pn=an(O({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kn})),Bn=an(O({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=O({},fn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Fn=an(Tn),Rn=[9,13,27,32],Ln=c&&"CompositionEvent"in window,Mn=null;c&&"documentMode"in document&&(Mn=document.documentMode);var Dn=c&&"TextEvent"in window&&!Mn,On=c&&(!Ln||Mn&&8<Mn&&11>=Mn),jn=String.fromCharCode(32),zn=!1;function Vn(e,t){switch(e){case"keyup":return-1!==Rn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function In(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Un=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function Yn(e,t,n,r){Se(r),0<(t=Hr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Hn=null,qn=null;function Qn(e){jr(e,0)}function Kn(e){if(q(xa(e)))return e}function Zn(e,t){if("change"===e)return t}var Gn=!1;if(c){var Xn;if(c){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Xn=Jn}else Xn=!1;Gn=Xn&&(!document.documentMode||9<document.documentMode)}function tr(){Hn&&(Hn.detachEvent("onpropertychange",nr),qn=Hn=null)}function nr(e){if("value"===e.propertyName&&Kn(qn)){var t=[];Yn(t,qn,e,Ae(e)),Te(Qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),qn=n,(Hn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(qn)}function or(e,t){if("click"===e)return Kn(t)}function ir(e,t){if("input"===e||"change"===e)return Kn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function sr(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!d.call(t,a)||!lr(e[a],t[a]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pr(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Q((e=t.contentWindow).document)}return t}function fr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function mr(e){var t=pr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&fr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=cr(n,o);var i=cr(n,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var hr=c&&"documentMode"in document&&11>=document.documentMode,gr=null,vr=null,yr=null,br=!1;function xr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==gr||gr!==Q(r)||(r="selectionStart"in(r=gr)&&fr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&sr(yr,r)||(yr=r,0<(r=Hr(vr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function Ar(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Cr={animationend:Ar("Animation","AnimationEnd"),animationiteration:Ar("Animation","AnimationIteration"),animationstart:Ar("Animation","AnimationStart"),transitionend:Ar("Transition","TransitionEnd")},Er={},wr={};function kr(e){if(Er[e])return Er[e];if(!Cr[e])return e;var t,n=Cr[e];for(t in n)if(n.hasOwnProperty(t)&&t in wr)return Er[e]=n[t];return e}c&&(wr=document.createElement("div").style,"AnimationEvent"in window||(delete Cr.animationend.animation,delete Cr.animationiteration.animation,delete Cr.animationstart.animation),"TransitionEvent"in window||delete Cr.transitionend.transition);var Sr=kr("animationend"),Nr=kr("animationiteration"),_r=kr("animationstart"),Pr=kr("transitionend"),Br=new Map,Tr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Fr(e,t){Br.set(e,t),s(t,[e])}for(var Rr=0;Rr<Tr.length;Rr++){var Lr=Tr[Rr];Fr(Lr.toLowerCase(),"on"+(Lr[0].toUpperCase()+Lr.slice(1)))}Fr(Sr,"onAnimationEnd"),Fr(Nr,"onAnimationIteration"),Fr(_r,"onAnimationStart"),Fr("dblclick","onDoubleClick"),Fr("focusin","onFocus"),Fr("focusout","onBlur"),Fr(Pr,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Mr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Dr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Mr));function Or(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,i,l,s,u){if(Ie.apply(this,arguments),De){if(!De)throw Error(o(198));var c=Oe;De=!1,Oe=null,je||(je=!0,ze=c)}}(r,t,void 0,e),e.currentTarget=null}function jr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==o&&a.isPropagationStopped())break e;Or(a,l,u),o=s}else for(i=0;i<r.length;i++){if(s=(l=r[i]).instance,u=l.currentTarget,l=l.listener,s!==o&&a.isPropagationStopped())break e;Or(a,l,u),o=s}}}if(je)throw e=ze,je=!1,ze=null,e}function zr(e,t){var n=t[ha];void 0===n&&(n=t[ha]=new Set);var r=e+"__bubble";n.has(r)||(Wr(t,e,2,!1),n.add(r))}function Vr(e,t,n){var r=0;t&&(r|=4),Wr(n,e,r,t)}var Ir="_reactListening"+Math.random().toString(36).slice(2);function Ur(e){if(!e[Ir]){e[Ir]=!0,i.forEach((function(t){"selectionchange"!==t&&(Dr.has(t)||Vr(t,!1,e),Vr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ir]||(t[Ir]=!0,Vr("selectionchange",!1,t))}}function Wr(e,t,n,r){switch(Zt(t)){case 1:var a=Yt;break;case 4:a=Ht;break;default:a=qt}n=a.bind(null,t,n,e),a=void 0,!Re||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function $r(e,t,n,r,a){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===a||8===s.nodeType&&s.parentNode===a))return;i=i.return}for(;null!==l;){if(null===(i=ya(l)))return;if(5===(s=i.tag)||6===s){r=o=i;continue e}l=l.parentNode}}r=r.return}Te((function(){var r=o,a=Ae(n),i=[];e:{var l=Br.get(e);if(void 0!==l){var s=cn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":s=Nn;break;case"focusin":u="focus",s=gn;break;case"focusout":u="blur",s=gn;break;case"beforeblur":case"afterblur":s=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=hn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Pn;break;case Sr:case Nr:case _r:s=vn;break;case Pr:s=Bn;break;case"scroll":s=pn;break;case"wheel":s=Fn;break;case"copy":case"cut":case"paste":s=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=_n}var c=0!=(4&t),d=!c&&"scroll"===e,p=c?null!==l?l+"Capture":null:l;c=[];for(var f,m=r;null!==m;){var h=(f=m).stateNode;if(5===f.tag&&null!==h&&(f=h,null!==p&&null!=(h=Fe(m,p))&&c.push(Yr(m,h,f))),d)break;m=m.return}0<c.length&&(l=new s(l,u,null,n,a),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===xe||!(u=n.relatedTarget||n.fromElement)||!ya(u)&&!u[ma])&&(s||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?ya(u):null)&&(u!==(d=Ue(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(s=null,u=r),s!==u)){if(c=mn,h="onMouseLeave",p="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(c=_n,h="onPointerLeave",p="onPointerEnter",m="pointer"),d=null==s?l:xa(s),f=null==u?l:xa(u),(l=new c(h,m+"leave",s,n,a)).target=d,l.relatedTarget=f,h=null,ya(a)===r&&((c=new c(p,m+"enter",u,n,a)).target=f,c.relatedTarget=d,h=c),d=h,s&&u)e:{for(p=u,m=0,f=c=s;f;f=qr(f))m++;for(f=0,h=p;h;h=qr(h))f++;for(;0<m-f;)c=qr(c),m--;for(;0<f-m;)p=qr(p),f--;for(;m--;){if(c===p||null!==p&&c===p.alternate)break e;c=qr(c),p=qr(p)}c=null}else c=null;null!==s&&Qr(i,l,s,c,!1),null!==u&&null!==d&&Qr(i,d,u,c,!0)}if("select"===(s=(l=r?xa(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var g=Zn;else if($n(l))if(Gn)g=ir;else{g=ar;var v=rr}else(s=l.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=or);switch(g&&(g=g(e,r))?Yn(i,g,n,a):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&ee(l,"number",l.value)),v=r?xa(r):window,e){case"focusin":($n(v)||"true"===v.contentEditable)&&(gr=v,vr=r,yr=null);break;case"focusout":yr=vr=gr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,xr(i,n,a);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":xr(i,n,a)}var y;if(Ln)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Un?Vn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(On&&"ko"!==n.locale&&(Un||"onCompositionStart"!==b?"onCompositionEnd"===b&&Un&&(y=en()):(Xt="value"in(Gt=a)?Gt.value:Gt.textContent,Un=!0)),0<(v=Hr(r,b)).length&&(b=new xn(b,e,null,n,a),i.push({event:b,listeners:v}),(y||null!==(y=In(n)))&&(b.data=y))),(y=Dn?function(e,t){switch(e){case"compositionend":return In(t);case"keypress":return 32!==t.which?null:(zn=!0,jn);case"textInput":return(e=t.data)===jn&&zn?null:e;default:return null}}(e,n):function(e,t){if(Un)return"compositionend"===e||!Ln&&Vn(e,t)?(e=en(),Jt=Xt=Gt=null,Un=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return On&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Hr(r,"onBeforeInput")).length&&(a=new xn("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=y)}jr(i,t)}))}function Yr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Hr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Fe(e,n))&&r.unshift(Yr(e,o,a)),null!=(o=Fe(e,t))&&r.push(Yr(e,o,a))),e=e.return}return r}function qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Qr(e,t,n,r,a){for(var o=t._reactName,i=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(null!==s&&s===r)break;5===l.tag&&null!==u&&(l=u,a?null!=(s=Fe(n,o))&&i.unshift(Yr(n,s,l)):a||null!=(s=Fe(n,o))&&i.push(Yr(n,s,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Kr=/\r\n?/g,Zr=/\u0000|\uFFFD/g;function Gr(e){return("string"==typeof e?e:""+e).replace(Kr,"\n").replace(Zr,"")}function Xr(e,t,n){if(t=Gr(t),Gr(e)!==t&&n)throw Error(o(425))}function Jr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,ia="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(la)}:ra;function la(e){setTimeout((function(){throw e}))}function sa(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Ut(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Ut(t)}function ua(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var da=Math.random().toString(36).slice(2),pa="__reactFiber$"+da,fa="__reactProps$"+da,ma="__reactContainer$"+da,ha="__reactEvents$"+da,ga="__reactListeners$"+da,va="__reactHandles$"+da;function ya(e){var t=e[pa];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ma]||n[pa]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ca(e);null!==e;){if(n=e[pa])return n;e=ca(e)}return t}n=(e=n).parentNode}return null}function ba(e){return!(e=e[pa]||e[ma])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function xa(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function Aa(e){return e[fa]||null}var Ca=[],Ea=-1;function wa(e){return{current:e}}function ka(e){0>Ea||(e.current=Ca[Ea],Ca[Ea]=null,Ea--)}function Sa(e,t){Ea++,Ca[Ea]=e.current,e.current=t}var Na={},_a=wa(Na),Pa=wa(!1),Ba=Na;function Ta(e,t){var n=e.type.contextTypes;if(!n)return Na;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Fa(e){return null!=e.childContextTypes}function Ra(){ka(Pa),ka(_a)}function La(e,t,n){if(_a.current!==Na)throw Error(o(168));Sa(_a,t),Sa(Pa,n)}function Ma(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(o(108,W(e)||"Unknown",a));return O({},n,r)}function Da(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Na,Ba=_a.current,Sa(_a,e),Sa(Pa,Pa.current),!0}function Oa(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=Ma(e,t,Ba),r.__reactInternalMemoizedMergedChildContext=e,ka(Pa),ka(_a),Sa(_a,e)):ka(Pa),Sa(Pa,n)}var ja=null,za=!1,Va=!1;function Ia(e){null===ja?ja=[e]:ja.push(e)}function Ua(){if(!Va&&null!==ja){Va=!0;var e=0,t=bt;try{var n=ja;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}ja=null,za=!1}catch(t){throw null!==ja&&(ja=ja.slice(e+1)),qe(Je,Ua),t}finally{bt=t,Va=!1}}return null}var Wa=[],$a=0,Ya=null,Ha=0,qa=[],Qa=0,Ka=null,Za=1,Ga="";function Xa(e,t){Wa[$a++]=Ha,Wa[$a++]=Ya,Ya=e,Ha=t}function Ja(e,t,n){qa[Qa++]=Za,qa[Qa++]=Ga,qa[Qa++]=Ka,Ka=e;var r=Za;e=Ga;var a=32-it(r)-1;r&=~(1<<a),n+=1;var o=32-it(t)+a;if(30<o){var i=a-a%5;o=(r&(1<<i)-1).toString(32),r>>=i,a-=i,Za=1<<32-it(t)+a|n<<a|r,Ga=o+e}else Za=1<<o|n<<a|r,Ga=e}function eo(e){null!==e.return&&(Xa(e,1),Ja(e,1,0))}function to(e){for(;e===Ya;)Ya=Wa[--$a],Wa[$a]=null,Ha=Wa[--$a],Wa[$a]=null;for(;e===Ka;)Ka=qa[--Qa],qa[Qa]=null,Ga=qa[--Qa],qa[Qa]=null,Za=qa[--Qa],qa[Qa]=null}var no=null,ro=null,ao=!1,oo=null;function io(e,t){var n=Fu(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function lo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ro=ua(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ka?{id:Za,overflow:Ga}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Fu(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ro=null,!0);default:return!1}}function so(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function uo(e){if(ao){var t=ro;if(t){var n=t;if(!lo(e,t)){if(so(e))throw Error(o(418));t=ua(n.nextSibling);var r=no;t&&lo(e,t)?io(r,n):(e.flags=-4097&e.flags|2,ao=!1,no=e)}}else{if(so(e))throw Error(o(418));e.flags=-4097&e.flags|2,ao=!1,no=e}}}function co(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function po(e){if(e!==no)return!1;if(!ao)return co(e),ao=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=ro)){if(so(e))throw fo(),Error(o(418));for(;t;)io(e,t),t=ua(t.nextSibling)}if(co(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ro=ua(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ro=null}}else ro=no?ua(e.stateNode.nextSibling):null;return!0}function fo(){for(var e=ro;e;)e=ua(e.nextSibling)}function mo(){ro=no=null,ao=!1}function ho(e){null===oo?oo=[e]:oo.push(e)}var go=x.ReactCurrentBatchConfig;function vo(e,t){if(e&&e.defaultProps){for(var n in t=O({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var yo=wa(null),bo=null,xo=null,Ao=null;function Co(){Ao=xo=bo=null}function Eo(e){var t=yo.current;ka(yo),e._currentValue=t}function wo(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function ko(e,t){bo=e,Ao=xo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(xl=!0),e.firstContext=null)}function So(e){var t=e._currentValue;if(Ao!==e)if(e={context:e,memoizedValue:t,next:null},null===xo){if(null===bo)throw Error(o(308));xo=e,bo.dependencies={lanes:0,firstContext:e}}else xo=xo.next=e;return t}var No=null;function _o(e){null===No?No=[e]:No.push(e)}function Po(e,t,n,r){var a=t.interleaved;return null===a?(n.next=n,_o(t)):(n.next=a.next,a.next=n),t.interleaved=n,Bo(e,r)}function Bo(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var To=!1;function Fo(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ro(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Lo(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Mo(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Ps)){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,Bo(e,n)}return null===(a=r.interleaved)?(t.next=t,_o(r)):(t.next=a.next,a.next=t),r.interleaved=t,Bo(e,n)}function Do(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function Oo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=i:o=o.next=i,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function jo(e,t,n,r){var a=e.updateQueue;To=!1;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var s=l,u=s.next;s.next=null,null===i?o=u:i.next=u,i=s;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=s)}if(null!==o){var d=a.baseState;for(i=0,c=u=s=null,l=o;;){var p=l.lane,f=l.eventTime;if((r&p)===p){null!==c&&(c=c.next={eventTime:f,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var m=e,h=l;switch(p=t,f=n,h.tag){case 1:if("function"==typeof(m=h.payload)){d=m.call(f,d,p);break e}d=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(p="function"==typeof(m=h.payload)?m.call(f,d,p):m))break e;d=O({},d,p);break e;case 2:To=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(p=a.effects)?a.effects=[l]:p.push(l))}else f={eventTime:f,lane:p,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(u=c=f,s=d):c=c.next=f,i|=p;if(null===(l=l.next)){if(null===(l=a.shared.pending))break;l=(p=l).next,p.next=null,a.lastBaseUpdate=p,a.shared.pending=null}}if(null===c&&(s=d),a.baseState=s,a.firstBaseUpdate=u,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{i|=a.lane,a=a.next}while(a!==t)}else null===o&&(a.shared.lanes=0);Os|=i,e.lanes=i,e.memoizedState=d}}function zo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var Vo=(new r.Component).refs;function Io(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:O({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Uo={isMounted:function(e){return!!(e=e._reactInternals)&&Ue(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=tu(),a=nu(e),o=Lo(r,a);o.payload=t,null!=n&&(o.callback=n),null!==(t=Mo(e,o,a))&&(ru(t,e,a,r),Do(t,e,a))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=tu(),a=nu(e),o=Lo(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=Mo(e,o,a))&&(ru(t,e,a,r),Do(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tu(),r=nu(e),a=Lo(n,r);a.tag=2,null!=t&&(a.callback=t),null!==(t=Mo(e,a,r))&&(ru(t,e,r,n),Do(t,e,r))}};function Wo(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&sr(n,r)&&sr(a,o))}function $o(e,t,n){var r=!1,a=Na,o=t.contextType;return"object"==typeof o&&null!==o?o=So(o):(a=Fa(t)?Ba:_a.current,o=(r=null!=(r=t.contextTypes))?Ta(e,a):Na),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Uo,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function Yo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Uo.enqueueReplaceState(t,t.state,null)}function Ho(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=Vo,Fo(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=So(o):(o=Fa(t)?Ba:_a.current,a.context=Ta(e,o)),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(Io(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&Uo.enqueueReplaceState(a,a.state,null),jo(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function qo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=a.refs;t===Vo&&(t=a.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Qo(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ko(e){return(0,e._init)(e._payload)}function Zo(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Lu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=ju(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function u(e,t,n,r){var o=n.type;return o===E?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===F&&Ko(o)===t.type)?((r=a(t,n.props)).ref=qo(e,t,n),r.return=e,r):((r=Mu(n.type,n.key,n.props,null,e.mode,r)).ref=qo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=zu(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=Du(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=ju(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case A:return(n=Mu(t.type,t.key,t.props,null,e.mode,n)).ref=qo(e,null,t),n.return=e,n;case C:return(t=zu(t,e.mode,n)).return=e,t;case F:return p(e,(0,t._init)(t._payload),n)}if(te(t)||M(t))return(t=Du(t,e.mode,n,null)).return=e,t;Qo(e,t)}return null}function f(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case A:return n.key===a?u(e,t,n,r):null;case C:return n.key===a?c(e,t,n,r):null;case F:return f(e,t,(a=n._init)(n._payload),r)}if(te(n)||M(n))return null!==a?null:d(e,t,n,r,null);Qo(e,n)}return null}function m(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case A:return u(t,e=e.get(null===r.key?n:r.key)||null,r,a);case C:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case F:return m(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||M(r))return d(t,e=e.get(n)||null,r,a,null);Qo(t,r)}return null}function h(a,o,l,s){for(var u=null,c=null,d=o,h=o=0,g=null;null!==d&&h<l.length;h++){d.index>h?(g=d,d=null):g=d.sibling;var v=f(a,d,l[h],s);if(null===v){null===d&&(d=g);break}e&&d&&null===v.alternate&&t(a,d),o=i(v,o,h),null===c?u=v:c.sibling=v,c=v,d=g}if(h===l.length)return n(a,d),ao&&Xa(a,h),u;if(null===d){for(;h<l.length;h++)null!==(d=p(a,l[h],s))&&(o=i(d,o,h),null===c?u=d:c.sibling=d,c=d);return ao&&Xa(a,h),u}for(d=r(a,d);h<l.length;h++)null!==(g=m(d,a,h,l[h],s))&&(e&&null!==g.alternate&&d.delete(null===g.key?h:g.key),o=i(g,o,h),null===c?u=g:c.sibling=g,c=g);return e&&d.forEach((function(e){return t(a,e)})),ao&&Xa(a,h),u}function g(a,l,s,u){var c=M(s);if("function"!=typeof c)throw Error(o(150));if(null==(s=c.call(s)))throw Error(o(151));for(var d=c=null,h=l,g=l=0,v=null,y=s.next();null!==h&&!y.done;g++,y=s.next()){h.index>g?(v=h,h=null):v=h.sibling;var b=f(a,h,y.value,u);if(null===b){null===h&&(h=v);break}e&&h&&null===b.alternate&&t(a,h),l=i(b,l,g),null===d?c=b:d.sibling=b,d=b,h=v}if(y.done)return n(a,h),ao&&Xa(a,g),c;if(null===h){for(;!y.done;g++,y=s.next())null!==(y=p(a,y.value,u))&&(l=i(y,l,g),null===d?c=y:d.sibling=y,d=y);return ao&&Xa(a,g),c}for(h=r(a,h);!y.done;g++,y=s.next())null!==(y=m(h,a,g,y.value,u))&&(e&&null!==y.alternate&&h.delete(null===y.key?g:y.key),l=i(y,l,g),null===d?c=y:d.sibling=y,d=y);return e&&h.forEach((function(e){return t(a,e)})),ao&&Xa(a,g),c}return function e(r,o,i,s){if("object"==typeof i&&null!==i&&i.type===E&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case A:e:{for(var u=i.key,c=o;null!==c;){if(c.key===u){if((u=i.type)===E){if(7===c.tag){n(r,c.sibling),(o=a(c,i.props.children)).return=r,r=o;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===F&&Ko(u)===c.type){n(r,c.sibling),(o=a(c,i.props)).ref=qo(r,c,i),o.return=r,r=o;break e}n(r,c);break}t(r,c),c=c.sibling}i.type===E?((o=Du(i.props.children,r.mode,s,i.key)).return=r,r=o):((s=Mu(i.type,i.key,i.props,null,r.mode,s)).ref=qo(r,o,i),s.return=r,r=s)}return l(r);case C:e:{for(c=i.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){n(r,o.sibling),(o=a(o,i.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=zu(i,r.mode,s)).return=r,r=o}return l(r);case F:return e(r,o,(c=i._init)(i._payload),s)}if(te(i))return h(r,o,i,s);if(M(i))return g(r,o,i,s);Qo(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==o&&6===o.tag?(n(r,o.sibling),(o=a(o,i)).return=r,r=o):(n(r,o),(o=ju(i,r.mode,s)).return=r,r=o),l(r)):n(r,o)}}var Go=Zo(!0),Xo=Zo(!1),Jo={},ei=wa(Jo),ti=wa(Jo),ni=wa(Jo);function ri(e){if(e===Jo)throw Error(o(174));return e}function ai(e,t){switch(Sa(ni,t),Sa(ti,e),Sa(ei,Jo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:se(null,"");break;default:t=se(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ka(ei),Sa(ei,t)}function oi(){ka(ei),ka(ti),ka(ni)}function ii(e){ri(ni.current);var t=ri(ei.current),n=se(t,e.type);t!==n&&(Sa(ti,e),Sa(ei,n))}function li(e){ti.current===e&&(ka(ei),ka(ti))}var si=wa(0);function ui(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ci=[];function di(){for(var e=0;e<ci.length;e++)ci[e]._workInProgressVersionPrimary=null;ci.length=0}var pi=x.ReactCurrentDispatcher,fi=x.ReactCurrentBatchConfig,mi=0,hi=null,gi=null,vi=null,yi=!1,bi=!1,xi=0,Ai=0;function Ci(){throw Error(o(321))}function Ei(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function wi(e,t,n,r,a,i){if(mi=i,hi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,pi.current=null===e||null===e.memoizedState?ll:sl,e=n(r,a),bi){i=0;do{if(bi=!1,xi=0,25<=i)throw Error(o(301));i+=1,vi=gi=null,t.updateQueue=null,pi.current=ul,e=n(r,a)}while(bi)}if(pi.current=il,t=null!==gi&&null!==gi.next,mi=0,vi=gi=hi=null,yi=!1,t)throw Error(o(300));return e}function ki(){var e=0!==xi;return xi=0,e}function Si(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===vi?hi.memoizedState=vi=e:vi=vi.next=e,vi}function Ni(){if(null===gi){var e=hi.alternate;e=null!==e?e.memoizedState:null}else e=gi.next;var t=null===vi?hi.memoizedState:vi.next;if(null!==t)vi=t,gi=e;else{if(null===e)throw Error(o(310));e={memoizedState:(gi=e).memoizedState,baseState:gi.baseState,baseQueue:gi.baseQueue,queue:gi.queue,next:null},null===vi?hi.memoizedState=vi=e:vi=vi.next=e}return vi}function _i(e,t){return"function"==typeof t?t(e):t}function Pi(e){var t=Ni(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=gi,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var l=a.next;a.next=i.next,i.next=l}r.baseQueue=a=i,n.pending=null}if(null!==a){i=a.next,r=r.baseState;var s=l=null,u=null,c=i;do{var d=c.lane;if((mi&d)===d)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var p={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(s=u=p,l=r):u=u.next=p,hi.lanes|=d,Os|=d}c=c.next}while(null!==c&&c!==i);null===u?l=r:u.next=s,lr(r,t.memoizedState)||(xl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=u,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{i=a.lane,hi.lanes|=i,Os|=i,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Bi(e){var t=Ni(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{i=e(i,l.action),l=l.next}while(l!==a);lr(i,t.memoizedState)||(xl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Ti(){}function Fi(e,t){var n=hi,r=Ni(),a=t(),i=!lr(r.memoizedState,a);if(i&&(r.memoizedState=a,xl=!0),r=r.queue,$i(Mi.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==vi&&1&vi.memoizedState.tag){if(n.flags|=2048,zi(9,Li.bind(null,n,r,a,t),void 0,null),null===Bs)throw Error(o(349));0!=(30&mi)||Ri(n,t,a)}return a}function Ri(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=hi.updateQueue)?(t={lastEffect:null,stores:null},hi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Li(e,t,n,r){t.value=n,t.getSnapshot=r,Di(t)&&Oi(e)}function Mi(e,t,n){return n((function(){Di(t)&&Oi(e)}))}function Di(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Oi(e){var t=Bo(e,1);null!==t&&ru(t,e,1,-1)}function ji(e){var t=Si();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:_i,lastRenderedState:e},t.queue=e,e=e.dispatch=nl.bind(null,hi,e),[t.memoizedState,e]}function zi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=hi.updateQueue)?(t={lastEffect:null,stores:null},hi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Vi(){return Ni().memoizedState}function Ii(e,t,n,r){var a=Si();hi.flags|=e,a.memoizedState=zi(1|t,n,void 0,void 0===r?null:r)}function Ui(e,t,n,r){var a=Ni();r=void 0===r?null:r;var o=void 0;if(null!==gi){var i=gi.memoizedState;if(o=i.destroy,null!==r&&Ei(r,i.deps))return void(a.memoizedState=zi(t,n,o,r))}hi.flags|=e,a.memoizedState=zi(1|t,n,o,r)}function Wi(e,t){return Ii(8390656,8,e,t)}function $i(e,t){return Ui(2048,8,e,t)}function Yi(e,t){return Ui(4,2,e,t)}function Hi(e,t){return Ui(4,4,e,t)}function qi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Qi(e,t,n){return n=null!=n?n.concat([e]):null,Ui(4,4,qi.bind(null,t,e),n)}function Ki(){}function Zi(e,t){var n=Ni();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ei(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Gi(e,t){var n=Ni();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ei(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Xi(e,t,n){return 0==(21&mi)?(e.baseState&&(e.baseState=!1,xl=!0),e.memoizedState=n):(lr(n,t)||(n=ht(),hi.lanes|=n,Os|=n,e.baseState=!0),t)}function Ji(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=fi.transition;fi.transition={};try{e(!1),t()}finally{bt=n,fi.transition=r}}function el(){return Ni().memoizedState}function tl(e,t,n){var r=nu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rl(e)?al(t,n):null!==(n=Po(e,t,n,r))&&(ru(n,e,r,tu()),ol(n,t,r))}function nl(e,t,n){var r=nu(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rl(e))al(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=o(i,n);if(a.hasEagerState=!0,a.eagerState=l,lr(l,i)){var s=t.interleaved;return null===s?(a.next=a,_o(t)):(a.next=s.next,s.next=a),void(t.interleaved=a)}}catch(e){}null!==(n=Po(e,t,a,r))&&(ru(n,e,r,a=tu()),ol(n,t,r))}}function rl(e){var t=e.alternate;return e===hi||null!==t&&t===hi}function al(e,t){bi=yi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function ol(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var il={readContext:So,useCallback:Ci,useContext:Ci,useEffect:Ci,useImperativeHandle:Ci,useInsertionEffect:Ci,useLayoutEffect:Ci,useMemo:Ci,useReducer:Ci,useRef:Ci,useState:Ci,useDebugValue:Ci,useDeferredValue:Ci,useTransition:Ci,useMutableSource:Ci,useSyncExternalStore:Ci,useId:Ci,unstable_isNewReconciler:!1},ll={readContext:So,useCallback:function(e,t){return Si().memoizedState=[e,void 0===t?null:t],e},useContext:So,useEffect:Wi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ii(4194308,4,qi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ii(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ii(4,2,e,t)},useMemo:function(e,t){var n=Si();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Si();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tl.bind(null,hi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Si().memoizedState=e},useState:ji,useDebugValue:Ki,useDeferredValue:function(e){return Si().memoizedState=e},useTransition:function(){var e=ji(!1),t=e[0];return e=Ji.bind(null,e[1]),Si().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=hi,a=Si();if(ao){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Bs)throw Error(o(349));0!=(30&mi)||Ri(r,t,n)}a.memoizedState=n;var i={value:n,getSnapshot:t};return a.queue=i,Wi(Mi.bind(null,r,i,e),[e]),r.flags|=2048,zi(9,Li.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=Si(),t=Bs.identifierPrefix;if(ao){var n=Ga;t=":"+t+"R"+(n=(Za&~(1<<32-it(Za)-1)).toString(32)+n),0<(n=xi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=Ai++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},sl={readContext:So,useCallback:Zi,useContext:So,useEffect:$i,useImperativeHandle:Qi,useInsertionEffect:Yi,useLayoutEffect:Hi,useMemo:Gi,useReducer:Pi,useRef:Vi,useState:function(){return Pi(_i)},useDebugValue:Ki,useDeferredValue:function(e){return Xi(Ni(),gi.memoizedState,e)},useTransition:function(){return[Pi(_i)[0],Ni().memoizedState]},useMutableSource:Ti,useSyncExternalStore:Fi,useId:el,unstable_isNewReconciler:!1},ul={readContext:So,useCallback:Zi,useContext:So,useEffect:$i,useImperativeHandle:Qi,useInsertionEffect:Yi,useLayoutEffect:Hi,useMemo:Gi,useReducer:Bi,useRef:Vi,useState:function(){return Bi(_i)},useDebugValue:Ki,useDeferredValue:function(e){var t=Ni();return null===gi?t.memoizedState=e:Xi(t,gi.memoizedState,e)},useTransition:function(){return[Bi(_i)[0],Ni().memoizedState]},useMutableSource:Ti,useSyncExternalStore:Fi,useId:el,unstable_isNewReconciler:!1};function cl(e,t){try{var n="",r=t;do{n+=I(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function dl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function pl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var fl="function"==typeof WeakMap?WeakMap:Map;function ml(e,t,n){(n=Lo(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ys||(Ys=!0,Hs=r),pl(0,t)},n}function hl(e,t,n){(n=Lo(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){pl(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){pl(0,t),"function"!=typeof r&&(null===qs?qs=new Set([this]):qs.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function gl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new fl;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=Su.bind(null,e,t,n),t.then(e,e))}function vl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function yl(e,t,n,r,a){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Lo(-1,1)).tag=2,Mo(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}var bl=x.ReactCurrentOwner,xl=!1;function Al(e,t,n,r){t.child=null===e?Xo(t,null,n,r):Go(t,e.child,n,r)}function Cl(e,t,n,r,a){n=n.render;var o=t.ref;return ko(t,a),r=wi(e,t,n,r,o,a),n=ki(),null===e||xl?(ao&&n&&eo(t),t.flags|=1,Al(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Yl(e,t,a))}function El(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||Ru(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Mu(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,wl(e,t,o,r,a))}if(o=e.child,0==(e.lanes&a)){var i=o.memoizedProps;if((n=null!==(n=n.compare)?n:sr)(i,r)&&e.ref===t.ref)return Yl(e,t,a)}return t.flags|=1,(e=Lu(o,r)).ref=t.ref,e.return=t,t.child=e}function wl(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(sr(o,r)&&e.ref===t.ref){if(xl=!1,t.pendingProps=r=o,0==(e.lanes&a))return t.lanes=e.lanes,Yl(e,t,a);0!=(131072&e.flags)&&(xl=!0)}}return Nl(e,t,n,r,a)}function kl(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Sa(Ls,Rs),Rs|=n;else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Sa(Ls,Rs),Rs|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,Sa(Ls,Rs),Rs|=r}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,Sa(Ls,Rs),Rs|=r;return Al(e,t,a,n),t.child}function Sl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Nl(e,t,n,r,a){var o=Fa(n)?Ba:_a.current;return o=Ta(t,o),ko(t,a),n=wi(e,t,n,r,o,a),r=ki(),null===e||xl?(ao&&r&&eo(t),t.flags|=1,Al(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Yl(e,t,a))}function _l(e,t,n,r,a){if(Fa(n)){var o=!0;Da(t)}else o=!1;if(ko(t,a),null===t.stateNode)$l(e,t),$o(t,n,r),Ho(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var s=i.context,u=n.contextType;u="object"==typeof u&&null!==u?So(u):Ta(t,u=Fa(n)?Ba:_a.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||s!==u)&&Yo(t,i,r,u),To=!1;var p=t.memoizedState;i.state=p,jo(t,r,i,a),s=t.memoizedState,l!==r||p!==s||Pa.current||To?("function"==typeof c&&(Io(t,n,c,r),s=t.memoizedState),(l=To||Wo(t,n,l,r,p,s,u))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),i.props=r,i.state=s,i.context=u,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Ro(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:vo(t.type,l),i.props=u,d=t.pendingProps,p=i.context,s="object"==typeof(s=n.contextType)&&null!==s?So(s):Ta(t,s=Fa(n)?Ba:_a.current);var f=n.getDerivedStateFromProps;(c="function"==typeof f||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==d||p!==s)&&Yo(t,i,r,s),To=!1,p=t.memoizedState,i.state=p,jo(t,r,i,a);var m=t.memoizedState;l!==d||p!==m||Pa.current||To?("function"==typeof f&&(Io(t,n,f,r),m=t.memoizedState),(u=To||Wo(t,n,u,r,p,m,s)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,m,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,m,s)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=m),i.props=r,i.state=m,i.context=s,r=u):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),r=!1)}return Pl(e,t,n,r,o,a)}function Pl(e,t,n,r,a,o){Sl(e,t);var i=0!=(128&t.flags);if(!r&&!i)return a&&Oa(t,n,!1),Yl(e,t,o);r=t.stateNode,bl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Go(t,e.child,null,o),t.child=Go(t,null,l,o)):Al(e,t,l,o),t.memoizedState=r.state,a&&Oa(t,n,!0),t.child}function Bl(e){var t=e.stateNode;t.pendingContext?La(0,t.pendingContext,t.pendingContext!==t.context):t.context&&La(0,t.context,!1),ai(e,t.containerInfo)}function Tl(e,t,n,r,a){return mo(),ho(a),t.flags|=256,Al(e,t,n,r),t.child}var Fl,Rl,Ll,Ml,Dl={dehydrated:null,treeContext:null,retryLane:0};function Ol(e){return{baseLanes:e,cachePool:null,transitions:null}}function jl(e,t,n){var r,a=t.pendingProps,i=si.current,l=!1,s=0!=(128&t.flags);if((r=s)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Sa(si,1&i),null===e)return uo(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(s=a.children,e=a.fallback,l?(a=t.mode,l=t.child,s={mode:"hidden",children:s},0==(1&a)&&null!==l?(l.childLanes=0,l.pendingProps=s):l=Ou(s,a,0,null),e=Du(e,a,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Ol(n),t.memoizedState=Dl,e):zl(t,s));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,a,i,l){if(n)return 256&t.flags?(t.flags&=-257,Vl(e,t,l,r=dl(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,a=t.mode,r=Ou({mode:"visible",children:r.children},a,0,null),(i=Du(i,a,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,0!=(1&t.mode)&&Go(t,e.child,null,l),t.child.memoizedState=Ol(l),t.memoizedState=Dl,i);if(0==(1&t.mode))return Vl(e,t,l,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var s=r.dgst;return r=s,Vl(e,t,l,r=dl(i=Error(o(419)),r,void 0))}if(s=0!=(l&e.childLanes),xl||s){if(null!==(r=Bs)){switch(l&-l){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=0!=(a&(r.suspendedLanes|l))?0:a)&&a!==i.retryLane&&(i.retryLane=a,Bo(e,a),ru(r,e,a,-1))}return gu(),Vl(e,t,l,r=dl(Error(o(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=_u.bind(null,e),a._reactRetry=t,null):(e=i.treeContext,ro=ua(a.nextSibling),no=t,ao=!0,oo=null,null!==e&&(qa[Qa++]=Za,qa[Qa++]=Ga,qa[Qa++]=Ka,Za=e.id,Ga=e.overflow,Ka=t),(t=zl(t,r.children)).flags|=4096,t)}(e,t,s,a,r,i,n);if(l){l=a.fallback,s=t.mode,r=(i=e.child).sibling;var u={mode:"hidden",children:a.children};return 0==(1&s)&&t.child!==i?((a=t.child).childLanes=0,a.pendingProps=u,t.deletions=null):(a=Lu(i,u)).subtreeFlags=14680064&i.subtreeFlags,null!==r?l=Lu(r,l):(l=Du(l,s,n,null)).flags|=2,l.return=t,a.return=t,a.sibling=l,t.child=a,a=l,l=t.child,s=null===(s=e.child.memoizedState)?Ol(n):{baseLanes:s.baseLanes|n,cachePool:null,transitions:s.transitions},l.memoizedState=s,l.childLanes=e.childLanes&~n,t.memoizedState=Dl,a}return e=(l=e.child).sibling,a=Lu(l,{mode:"visible",children:a.children}),0==(1&t.mode)&&(a.lanes=n),a.return=t,a.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=a,t.memoizedState=null,a}function zl(e,t){return(t=Ou({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Vl(e,t,n,r){return null!==r&&ho(r),Go(t,e.child,null,n),(e=zl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Il(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),wo(e.return,t,n)}function Ul(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function Wl(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Al(e,t,r.children,n),0!=(2&(r=si.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Il(e,n,t);else if(19===e.tag)Il(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Sa(si,r),0==(1&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===ui(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Ul(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===ui(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Ul(t,!0,n,null,o);break;case"together":Ul(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function $l(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Yl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Os|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Lu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Lu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Hl(e,t){if(!ao)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ql(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Ql(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return ql(t),null;case 1:case 17:return Fa(t.type)&&Ra(),ql(t),null;case 3:return r=t.stateNode,oi(),ka(Pa),ka(_a),di(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(po(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==oo&&(lu(oo),oo=null))),Rl(e,t),ql(t),null;case 5:li(t);var a=ri(ni.current);if(n=t.type,null!==e&&null!=t.stateNode)Ll(e,t,n,r,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return ql(t),null}if(e=ri(ei.current),po(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[pa]=t,r[fa]=i,e=0!=(1&t.mode),n){case"dialog":zr("cancel",r),zr("close",r);break;case"iframe":case"object":case"embed":zr("load",r);break;case"video":case"audio":for(a=0;a<Mr.length;a++)zr(Mr[a],r);break;case"source":zr("error",r);break;case"img":case"image":case"link":zr("error",r),zr("load",r);break;case"details":zr("toggle",r);break;case"input":Z(r,i),zr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},zr("invalid",r);break;case"textarea":ae(r,i),zr("invalid",r)}for(var s in ye(n,i),a=null,i)if(i.hasOwnProperty(s)){var u=i[s];"children"===s?"string"==typeof u?r.textContent!==u&&(!0!==i.suppressHydrationWarning&&Xr(r.textContent,u,e),a=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==i.suppressHydrationWarning&&Xr(r.textContent,u,e),a=["children",""+u]):l.hasOwnProperty(s)&&null!=u&&"onScroll"===s&&zr("scroll",r)}switch(n){case"input":H(r),J(r,i,!0);break;case"textarea":H(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Jr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{s=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[pa]=t,e[fa]=r,Fl(e,t,!1,!1),t.stateNode=e;e:{switch(s=be(n,r),n){case"dialog":zr("cancel",e),zr("close",e),a=r;break;case"iframe":case"object":case"embed":zr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Mr.length;a++)zr(Mr[a],e);a=r;break;case"source":zr("error",e),a=r;break;case"img":case"image":case"link":zr("error",e),zr("load",e),a=r;break;case"details":zr("toggle",e),a=r;break;case"input":Z(e,r),a=K(e,r),zr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=O({},r,{value:void 0}),zr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),zr("invalid",e)}for(i in ye(n,a),u=a)if(u.hasOwnProperty(i)){var c=u[i];"style"===i?ge(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===i?"string"==typeof c?("textarea"!==n||""!==c)&&pe(e,c):"number"==typeof c&&pe(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=c&&"onScroll"===i&&zr("scroll",e):null!=c&&b(e,i,c,s))}switch(n){case"input":H(e),J(e,r,!1);break;case"textarea":H(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+$(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return ql(t),null;case 6:if(e&&null!=t.stateNode)Ml(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=ri(ni.current),ri(ei.current),po(t)){if(r=t.stateNode,n=t.memoizedProps,r[pa]=t,(i=r.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Xr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Xr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[pa]=t,t.stateNode=r}return ql(t),null;case 13:if(ka(si),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ao&&null!==ro&&0!=(1&t.mode)&&0==(128&t.flags))fo(),mo(),t.flags|=98560,i=!1;else if(i=po(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(o(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(o(317));i[pa]=t}else mo(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;ql(t),i=!1}else null!==oo&&(lu(oo),oo=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&si.current)?0===Ms&&(Ms=3):gu())),null!==t.updateQueue&&(t.flags|=4),ql(t),null);case 4:return oi(),Rl(e,t),null===e&&Ur(t.stateNode.containerInfo),ql(t),null;case 10:return Eo(t.type._context),ql(t),null;case 19:if(ka(si),null===(i=t.memoizedState))return ql(t),null;if(r=0!=(128&t.flags),null===(s=i.rendering))if(r)Hl(i,!1);else{if(0!==Ms||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(s=ui(e))){for(t.flags|=128,Hl(i,!1),null!==(r=s.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(s=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=s.childLanes,i.lanes=s.lanes,i.child=s.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=s.memoizedProps,i.memoizedState=s.memoizedState,i.updateQueue=s.updateQueue,i.type=s.type,e=s.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Sa(si,1&si.current|2),t.child}e=e.sibling}null!==i.tail&&Ge()>Ws&&(t.flags|=128,r=!0,Hl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ui(s))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Hl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!s.alternate&&!ao)return ql(t),null}else 2*Ge()-i.renderingStartTime>Ws&&1073741824!==n&&(t.flags|=128,r=!0,Hl(i,!1),t.lanes=4194304);i.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=i.last)?n.sibling=s:t.child=s,i.last=s)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Ge(),t.sibling=null,n=si.current,Sa(si,r?1&n|2:1&n),t):(ql(t),null);case 22:case 23:return pu(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Rs)&&(ql(t),6&t.subtreeFlags&&(t.flags|=8192)):ql(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Kl(e,t){switch(to(t),t.tag){case 1:return Fa(t.type)&&Ra(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return oi(),ka(Pa),ka(_a),di(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return li(t),null;case 13:if(ka(si),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));mo()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return ka(si),null;case 4:return oi(),null;case 10:return Eo(t.type._context),null;case 22:case 23:return pu(),null;default:return null}}Fl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Rl=function(){},Ll=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,ri(ei.current);var o,i=null;switch(n){case"input":a=K(e,a),r=K(e,r),i=[];break;case"select":a=O({},a,{value:void 0}),r=O({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ye(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var s=a[c];for(o in s)s.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var u=r[c];if(s=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&u!==s&&(null!=u||null!=s))if("style"===c)if(s){for(o in s)!s.hasOwnProperty(o)||u&&u.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in u)u.hasOwnProperty(o)&&s[o]!==u[o]&&(n||(n={}),n[o]=u[o])}else n||(i||(i=[]),i.push(c,n)),n=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,s=s?s.__html:void 0,null!=u&&s!==u&&(i=i||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(i=i||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&zr("scroll",e),i||s===u||(i=[])):(i=i||[]).push(c,u))}n&&(i=i||[]).push("style",n);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},Ml=function(e,t,n,r){n!==r&&(t.flags|=4)};var Zl=!1,Gl=!1,Xl="function"==typeof WeakSet?WeakSet:Set,Jl=null;function es(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){ku(e,t,n)}else n.current=null}function ts(e,t,n){try{n()}catch(n){ku(e,t,n)}}var ns=!1;function rs(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&ts(t,n,o)}a=a.next}while(a!==r)}}function as(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function os(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function is(e){var t=e.alternate;null!==t&&(e.alternate=null,is(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[pa],delete t[fa],delete t[ha],delete t[ga],delete t[va]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ls(e){return 5===e.tag||3===e.tag||4===e.tag}function ss(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ls(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function us(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(us(e,t,n),e=e.sibling;null!==e;)us(e,t,n),e=e.sibling}function cs(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cs(e,t,n),e=e.sibling;null!==e;)cs(e,t,n),e=e.sibling}var ds=null,ps=!1;function fs(e,t,n){for(n=n.child;null!==n;)ms(e,t,n),n=n.sibling}function ms(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Gl||es(n,t);case 6:var r=ds,a=ps;ds=null,fs(e,t,n),ps=a,null!==(ds=r)&&(ps?(e=ds,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):ds.removeChild(n.stateNode));break;case 18:null!==ds&&(ps?(e=ds,n=n.stateNode,8===e.nodeType?sa(e.parentNode,n):1===e.nodeType&&sa(e,n),Ut(e)):sa(ds,n.stateNode));break;case 4:r=ds,a=ps,ds=n.stateNode.containerInfo,ps=!0,fs(e,t,n),ds=r,ps=a;break;case 0:case 11:case 14:case 15:if(!Gl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,i=o.destroy;o=o.tag,void 0!==i&&(0!=(2&o)||0!=(4&o))&&ts(n,t,i),a=a.next}while(a!==r)}fs(e,t,n);break;case 1:if(!Gl&&(es(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){ku(n,t,e)}fs(e,t,n);break;case 21:fs(e,t,n);break;case 22:1&n.mode?(Gl=(r=Gl)||null!==n.memoizedState,fs(e,t,n),Gl=r):fs(e,t,n);break;default:fs(e,t,n)}}function hs(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xl),t.forEach((function(t){var r=Pu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function gs(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var i=e,l=t,s=l;e:for(;null!==s;){switch(s.tag){case 5:ds=s.stateNode,ps=!1;break e;case 3:case 4:ds=s.stateNode.containerInfo,ps=!0;break e}s=s.return}if(null===ds)throw Error(o(160));ms(i,l,a),ds=null,ps=!1;var u=a.alternate;null!==u&&(u.return=null),a.return=null}catch(e){ku(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)vs(t,e),t=t.sibling}function vs(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gs(t,e),ys(e),4&r){try{rs(3,e,e.return),as(3,e)}catch(t){ku(e,e.return,t)}try{rs(5,e,e.return)}catch(t){ku(e,e.return,t)}}break;case 1:gs(t,e),ys(e),512&r&&null!==n&&es(n,n.return);break;case 5:if(gs(t,e),ys(e),512&r&&null!==n&&es(n,n.return),32&e.flags){var a=e.stateNode;try{pe(a,"")}catch(t){ku(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,s=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===s&&"radio"===i.type&&null!=i.name&&G(a,i),be(s,l);var c=be(s,i);for(l=0;l<u.length;l+=2){var d=u[l],p=u[l+1];"style"===d?ge(a,p):"dangerouslySetInnerHTML"===d?de(a,p):"children"===d?pe(a,p):b(a,d,p,c)}switch(s){case"input":X(a,i);break;case"textarea":oe(a,i);break;case"select":var f=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!i.multiple;var m=i.value;null!=m?ne(a,!!i.multiple,m,!1):f!==!!i.multiple&&(null!=i.defaultValue?ne(a,!!i.multiple,i.defaultValue,!0):ne(a,!!i.multiple,i.multiple?[]:"",!1))}a[fa]=i}catch(t){ku(e,e.return,t)}}break;case 6:if(gs(t,e),ys(e),4&r){if(null===e.stateNode)throw Error(o(162));a=e.stateNode,i=e.memoizedProps;try{a.nodeValue=i}catch(t){ku(e,e.return,t)}}break;case 3:if(gs(t,e),ys(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Ut(t.containerInfo)}catch(t){ku(e,e.return,t)}break;case 4:default:gs(t,e),ys(e);break;case 13:gs(t,e),ys(e),8192&(a=e.child).flags&&(i=null!==a.memoizedState,a.stateNode.isHidden=i,!i||null!==a.alternate&&null!==a.alternate.memoizedState||(Us=Ge())),4&r&&hs(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Gl=(c=Gl)||d,gs(t,e),Gl=c):gs(t,e),ys(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&0!=(1&e.mode))for(Jl=e,d=e.child;null!==d;){for(p=Jl=d;null!==Jl;){switch(m=(f=Jl).child,f.tag){case 0:case 11:case 14:case 15:rs(4,f,f.return);break;case 1:es(f,f.return);var h=f.stateNode;if("function"==typeof h.componentWillUnmount){r=f,n=f.return;try{t=r,h.props=t.memoizedProps,h.state=t.memoizedState,h.componentWillUnmount()}catch(e){ku(r,n,e)}}break;case 5:es(f,f.return);break;case 22:if(null!==f.memoizedState){Cs(p);continue}}null!==m?(m.return=f,Jl=m):Cs(p)}d=d.sibling}e:for(d=null,p=e;;){if(5===p.tag){if(null===d){d=p;try{a=p.stateNode,c?"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none":(s=p.stateNode,l=null!=(u=p.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,s.style.display=he("display",l))}catch(t){ku(e,e.return,t)}}}else if(6===p.tag){if(null===d)try{p.stateNode.nodeValue=c?"":p.memoizedProps}catch(t){ku(e,e.return,t)}}else if((22!==p.tag&&23!==p.tag||null===p.memoizedState||p===e)&&null!==p.child){p.child.return=p,p=p.child;continue}if(p===e)break e;for(;null===p.sibling;){if(null===p.return||p.return===e)break e;d===p&&(d=null),p=p.return}d===p&&(d=null),p.sibling.return=p.return,p=p.sibling}}break;case 19:gs(t,e),ys(e),4&r&&hs(e);case 21:}}function ys(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ls(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(pe(a,""),r.flags&=-33),cs(e,ss(e),a);break;case 3:case 4:var i=r.stateNode.containerInfo;us(e,ss(e),i);break;default:throw Error(o(161))}}catch(t){ku(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bs(e,t,n){Jl=e,xs(e,t,n)}function xs(e,t,n){for(var r=0!=(1&e.mode);null!==Jl;){var a=Jl,o=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||Zl;if(!i){var l=a.alternate,s=null!==l&&null!==l.memoizedState||Gl;l=Zl;var u=Gl;if(Zl=i,(Gl=s)&&!u)for(Jl=a;null!==Jl;)s=(i=Jl).child,22===i.tag&&null!==i.memoizedState?Es(a):null!==s?(s.return=i,Jl=s):Es(a);for(;null!==o;)Jl=o,xs(o,t,n),o=o.sibling;Jl=a,Zl=l,Gl=u}As(e)}else 0!=(8772&a.subtreeFlags)&&null!==o?(o.return=a,Jl=o):As(e)}}function As(e){for(;null!==Jl;){var t=Jl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Gl||as(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Gl)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:vo(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&zo(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}zo(t,l,n)}break;case 5:var s=t.stateNode;if(null===n&&4&t.flags){n=s;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var p=d.dehydrated;null!==p&&Ut(p)}}}break;default:throw Error(o(163))}Gl||512&t.flags&&os(t)}catch(e){ku(t,t.return,e)}}if(t===e){Jl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Jl=n;break}Jl=t.return}}function Cs(e){for(;null!==Jl;){var t=Jl;if(t===e){Jl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Jl=n;break}Jl=t.return}}function Es(e){for(;null!==Jl;){var t=Jl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{as(4,t)}catch(e){ku(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){ku(t,a,e)}}var o=t.return;try{os(t)}catch(e){ku(t,o,e)}break;case 5:var i=t.return;try{os(t)}catch(e){ku(t,i,e)}}}catch(e){ku(t,t.return,e)}if(t===e){Jl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Jl=l;break}Jl=t.return}}var ws,ks=Math.ceil,Ss=x.ReactCurrentDispatcher,Ns=x.ReactCurrentOwner,_s=x.ReactCurrentBatchConfig,Ps=0,Bs=null,Ts=null,Fs=0,Rs=0,Ls=wa(0),Ms=0,Ds=null,Os=0,js=0,zs=0,Vs=null,Is=null,Us=0,Ws=1/0,$s=null,Ys=!1,Hs=null,qs=null,Qs=!1,Ks=null,Zs=0,Gs=0,Xs=null,Js=-1,eu=0;function tu(){return 0!=(6&Ps)?Ge():-1!==Js?Js:Js=Ge()}function nu(e){return 0==(1&e.mode)?1:0!=(2&Ps)&&0!==Fs?Fs&-Fs:null!==go.transition?(0===eu&&(eu=ht()),eu):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Zt(e.type)}function ru(e,t,n,r){if(50<Gs)throw Gs=0,Xs=null,Error(o(185));vt(e,n,r),0!=(2&Ps)&&e===Bs||(e===Bs&&(0==(2&Ps)&&(js|=n),4===Ms&&su(e,Fs)),au(e,r),1===n&&0===Ps&&0==(1&t.mode)&&(Ws=Ge()+500,za&&Ua()))}function au(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var i=31-it(o),l=1<<i,s=a[i];-1===s?0!=(l&n)&&0==(l&r)||(a[i]=ft(l,t)):s<=t&&(e.expiredLanes|=l),o&=~l}}(e,t);var r=pt(e,e===Bs?Fs:0);if(0===r)null!==n&&Qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Qe(n),1===t)0===e.tag?function(e){za=!0,Ia(e)}(uu.bind(null,e)):Ia(uu.bind(null,e)),ia((function(){0==(6&Ps)&&Ua()})),n=null;else{switch(xt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Bu(n,ou.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ou(e,t){if(Js=-1,eu=0,0!=(6&Ps))throw Error(o(327));var n=e.callbackNode;if(Eu()&&e.callbackNode!==n)return null;var r=pt(e,e===Bs?Fs:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=vu(e,r);else{t=r;var a=Ps;Ps|=2;var i=hu();for(Bs===e&&Fs===t||($s=null,Ws=Ge()+500,fu(e,t));;)try{bu();break}catch(t){mu(e,t)}Co(),Ss.current=i,Ps=a,null!==Ts?t=0:(Bs=null,Fs=0,t=Ms)}if(0!==t){if(2===t&&0!==(a=mt(e))&&(r=a,t=iu(e,a)),1===t)throw n=Ds,fu(e,0),su(e,r),au(e,Ge()),n;if(6===t)su(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!lr(o(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)&&(2===(t=vu(e,r))&&0!==(i=mt(e))&&(r=i,t=iu(e,i)),1===t))throw n=Ds,fu(e,0),su(e,r),au(e,Ge()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:Cu(e,Is,$s);break;case 3:if(su(e,r),(130023424&r)===r&&10<(t=Us+500-Ge())){if(0!==pt(e,0))break;if(((a=e.suspendedLanes)&r)!==r){tu(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(Cu.bind(null,e,Is,$s),t);break}Cu(e,Is,$s);break;case 4:if(su(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>a&&(a=l),r&=~i}if(r=a,10<(r=(120>(r=Ge()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*ks(r/1960))-r)){e.timeoutHandle=ra(Cu.bind(null,e,Is,$s),r);break}Cu(e,Is,$s);break;default:throw Error(o(329))}}}return au(e,Ge()),e.callbackNode===n?ou.bind(null,e):null}function iu(e,t){var n=Vs;return e.current.memoizedState.isDehydrated&&(fu(e,t).flags|=256),2!==(e=vu(e,t))&&(t=Is,Is=n,null!==t&&lu(t)),e}function lu(e){null===Is?Is=e:Is.push.apply(Is,e)}function su(e,t){for(t&=~zs,t&=~js,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function uu(e){if(0!=(6&Ps))throw Error(o(327));Eu();var t=pt(e,0);if(0==(1&t))return au(e,Ge()),null;var n=vu(e,t);if(0!==e.tag&&2===n){var r=mt(e);0!==r&&(t=r,n=iu(e,r))}if(1===n)throw n=Ds,fu(e,0),su(e,t),au(e,Ge()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Cu(e,Is,$s),au(e,Ge()),null}function cu(e,t){var n=Ps;Ps|=1;try{return e(t)}finally{0===(Ps=n)&&(Ws=Ge()+500,za&&Ua())}}function du(e){null!==Ks&&0===Ks.tag&&0==(6&Ps)&&Eu();var t=Ps;Ps|=1;var n=_s.transition,r=bt;try{if(_s.transition=null,bt=1,e)return e()}finally{bt=r,_s.transition=n,0==(6&(Ps=t))&&Ua()}}function pu(){Rs=Ls.current,ka(Ls)}function fu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==Ts)for(n=Ts.return;null!==n;){var r=n;switch(to(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ra();break;case 3:oi(),ka(Pa),ka(_a),di();break;case 5:li(r);break;case 4:oi();break;case 13:case 19:ka(si);break;case 10:Eo(r.type._context);break;case 22:case 23:pu()}n=n.return}if(Bs=e,Ts=e=Lu(e.current,null),Fs=Rs=t,Ms=0,Ds=null,zs=js=Os=0,Is=Vs=null,null!==No){for(t=0;t<No.length;t++)if(null!==(r=(n=No[t]).interleaved)){n.interleaved=null;var a=r.next,o=n.pending;if(null!==o){var i=o.next;o.next=a,r.next=i}n.pending=r}No=null}return e}function mu(e,t){for(;;){var n=Ts;try{if(Co(),pi.current=il,yi){for(var r=hi.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}yi=!1}if(mi=0,vi=gi=hi=null,bi=!1,xi=0,Ns.current=null,null===n||null===n.return){Ms=1,Ds=t,Ts=null;break}e:{var i=e,l=n.return,s=n,u=t;if(t=Fs,s.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,d=s,p=d.tag;if(0==(1&d.mode)&&(0===p||11===p||15===p)){var f=d.alternate;f?(d.updateQueue=f.updateQueue,d.memoizedState=f.memoizedState,d.lanes=f.lanes):(d.updateQueue=null,d.memoizedState=null)}var m=vl(l);if(null!==m){m.flags&=-257,yl(m,l,s,0,t),1&m.mode&&gl(i,c,t),u=c;var h=(t=m).updateQueue;if(null===h){var g=new Set;g.add(u),t.updateQueue=g}else h.add(u);break e}if(0==(1&t)){gl(i,c,t),gu();break e}u=Error(o(426))}else if(ao&&1&s.mode){var v=vl(l);if(null!==v){0==(65536&v.flags)&&(v.flags|=256),yl(v,l,s,0,t),ho(cl(u,s));break e}}i=u=cl(u,s),4!==Ms&&(Ms=2),null===Vs?Vs=[i]:Vs.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Oo(i,ml(0,u,t));break e;case 1:s=u;var y=i.type,b=i.stateNode;if(0==(128&i.flags)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===qs||!qs.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,Oo(i,hl(i,s,t));break e}}i=i.return}while(null!==i)}Au(n)}catch(e){t=e,Ts===n&&null!==n&&(Ts=n=n.return);continue}break}}function hu(){var e=Ss.current;return Ss.current=il,null===e?il:e}function gu(){0!==Ms&&3!==Ms&&2!==Ms||(Ms=4),null===Bs||0==(268435455&Os)&&0==(268435455&js)||su(Bs,Fs)}function vu(e,t){var n=Ps;Ps|=2;var r=hu();for(Bs===e&&Fs===t||($s=null,fu(e,t));;)try{yu();break}catch(t){mu(e,t)}if(Co(),Ps=n,Ss.current=r,null!==Ts)throw Error(o(261));return Bs=null,Fs=0,Ms}function yu(){for(;null!==Ts;)xu(Ts)}function bu(){for(;null!==Ts&&!Ke();)xu(Ts)}function xu(e){var t=ws(e.alternate,e,Rs);e.memoizedProps=e.pendingProps,null===t?Au(e):Ts=t,Ns.current=null}function Au(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Ql(n,t,Rs)))return void(Ts=n)}else{if(null!==(n=Kl(n,t)))return n.flags&=32767,void(Ts=n);if(null===e)return Ms=6,void(Ts=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Ts=t);Ts=t=e}while(null!==t);0===Ms&&(Ms=5)}function Cu(e,t,n){var r=bt,a=_s.transition;try{_s.transition=null,bt=1,function(e,t,n,r){do{Eu()}while(null!==Ks);if(0!=(6&Ps))throw Error(o(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-it(n),o=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~o}}(e,i),e===Bs&&(Ts=Bs=null,Fs=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Qs||(Qs=!0,Bu(tt,(function(){return Eu(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=_s.transition,_s.transition=null;var l=bt;bt=1;var s=Ps;Ps|=4,Ns.current=null,function(e,t){if(ea=$t,fr(e=pr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,s=-1,u=-1,c=0,d=0,p=e,f=null;t:for(;;){for(var m;p!==n||0!==a&&3!==p.nodeType||(s=l+a),p!==i||0!==r&&3!==p.nodeType||(u=l+r),3===p.nodeType&&(l+=p.nodeValue.length),null!==(m=p.firstChild);)f=p,p=m;for(;;){if(p===e)break t;if(f===n&&++c===a&&(s=l),f===i&&++d===r&&(u=l),null!==(m=p.nextSibling))break;f=(p=f).parentNode}p=m}n=-1===s||-1===u?null:{start:s,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},$t=!1,Jl=t;null!==Jl;)if(e=(t=Jl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Jl=e;else for(;null!==Jl;){t=Jl;try{var h=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==h){var g=h.memoizedProps,v=h.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?g:vo(t.type,g),v);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var x=t.stateNode.containerInfo;1===x.nodeType?x.textContent="":9===x.nodeType&&x.documentElement&&x.removeChild(x.documentElement);break;default:throw Error(o(163))}}catch(e){ku(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Jl=e;break}Jl=t.return}h=ns,ns=!1}(e,n),vs(n,e),mr(ta),$t=!!ea,ta=ea=null,e.current=n,bs(n,e,a),Ze(),Ps=s,bt=l,_s.transition=i}else e.current=n;if(Qs&&(Qs=!1,Ks=e,Zs=a),0===(i=e.pendingLanes)&&(qs=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(at,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),au(e,Ge()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((a=t[n]).value,{componentStack:a.stack,digest:a.digest});if(Ys)throw Ys=!1,e=Hs,Hs=null,e;0!=(1&Zs)&&0!==e.tag&&Eu(),0!=(1&(i=e.pendingLanes))?e===Xs?Gs++:(Gs=0,Xs=e):Gs=0,Ua()}(e,t,n,r)}finally{_s.transition=a,bt=r}return null}function Eu(){if(null!==Ks){var e=xt(Zs),t=_s.transition,n=bt;try{if(_s.transition=null,bt=16>e?16:e,null===Ks)var r=!1;else{if(e=Ks,Ks=null,Zs=0,0!=(6&Ps))throw Error(o(331));var a=Ps;for(Ps|=4,Jl=e.current;null!==Jl;){var i=Jl,l=i.child;if(0!=(16&Jl.flags)){var s=i.deletions;if(null!==s){for(var u=0;u<s.length;u++){var c=s[u];for(Jl=c;null!==Jl;){var d=Jl;switch(d.tag){case 0:case 11:case 15:rs(8,d,i)}var p=d.child;if(null!==p)p.return=d,Jl=p;else for(;null!==Jl;){var f=(d=Jl).sibling,m=d.return;if(is(d),d===c){Jl=null;break}if(null!==f){f.return=m,Jl=f;break}Jl=m}}}var h=i.alternate;if(null!==h){var g=h.child;if(null!==g){h.child=null;do{var v=g.sibling;g.sibling=null,g=v}while(null!==g)}}Jl=i}}if(0!=(2064&i.subtreeFlags)&&null!==l)l.return=i,Jl=l;else e:for(;null!==Jl;){if(0!=(2048&(i=Jl).flags))switch(i.tag){case 0:case 11:case 15:rs(9,i,i.return)}var y=i.sibling;if(null!==y){y.return=i.return,Jl=y;break e}Jl=i.return}}var b=e.current;for(Jl=b;null!==Jl;){var x=(l=Jl).child;if(0!=(2064&l.subtreeFlags)&&null!==x)x.return=l,Jl=x;else e:for(l=b;null!==Jl;){if(0!=(2048&(s=Jl).flags))try{switch(s.tag){case 0:case 11:case 15:as(9,s)}}catch(e){ku(s,s.return,e)}if(s===l){Jl=null;break e}var A=s.sibling;if(null!==A){A.return=s.return,Jl=A;break e}Jl=s.return}}if(Ps=a,Ua(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{bt=n,_s.transition=t}}return!1}function wu(e,t,n){e=Mo(e,t=ml(0,t=cl(n,t),1),1),t=tu(),null!==e&&(vt(e,1,t),au(e,t))}function ku(e,t,n){if(3===e.tag)wu(e,e,n);else for(;null!==t;){if(3===t.tag){wu(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===qs||!qs.has(r))){t=Mo(t,e=hl(t,e=cl(n,e),1),1),e=tu(),null!==t&&(vt(t,1,e),au(t,e));break}}t=t.return}}function Su(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=tu(),e.pingedLanes|=e.suspendedLanes&n,Bs===e&&(Fs&n)===n&&(4===Ms||3===Ms&&(130023424&Fs)===Fs&&500>Ge()-Us?fu(e,0):zs|=n),au(e,t)}function Nu(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=tu();null!==(e=Bo(e,t))&&(vt(e,t,n),au(e,n))}function _u(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Nu(e,n)}function Pu(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),Nu(e,n)}function Bu(e,t){return qe(e,t)}function Tu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Fu(e,t,n,r){return new Tu(e,t,n,r)}function Ru(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Lu(e,t){var n=e.alternate;return null===n?((n=Fu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Mu(e,t,n,r,a,i){var l=2;if(r=e,"function"==typeof e)Ru(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case E:return Du(n.children,a,i,t);case w:l=8,a|=8;break;case k:return(e=Fu(12,n,t,2|a)).elementType=k,e.lanes=i,e;case P:return(e=Fu(13,n,t,a)).elementType=P,e.lanes=i,e;case B:return(e=Fu(19,n,t,a)).elementType=B,e.lanes=i,e;case R:return Ou(n,a,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case S:l=10;break e;case N:l=9;break e;case _:l=11;break e;case T:l=14;break e;case F:l=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Fu(l,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function Du(e,t,n,r){return(e=Fu(7,e,r,t)).lanes=n,e}function Ou(e,t,n,r){return(e=Fu(22,e,r,t)).elementType=R,e.lanes=n,e.stateNode={isHidden:!1},e}function ju(e,t,n){return(e=Fu(6,e,null,t)).lanes=n,e}function zu(e,t,n){return(t=Fu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Vu(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Iu(e,t,n,r,a,o,i,l,s){return e=new Vu(e,t,n,l,s),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Fu(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Fo(o),e}function Uu(e){if(!e)return Na;e:{if(Ue(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Fa(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Fa(n))return Ma(e,n,t)}return t}function Wu(e,t,n,r,a,o,i,l,s){return(e=Iu(n,r,!0,e,0,o,0,l,s)).context=Uu(null),n=e.current,(o=Lo(r=tu(),a=nu(n))).callback=null!=t?t:null,Mo(n,o,a),e.current.lanes=a,vt(e,a,r),au(e,r),e}function $u(e,t,n,r){var a=t.current,o=tu(),i=nu(a);return n=Uu(n),null===t.context?t.context=n:t.pendingContext=n,(t=Lo(o,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Mo(a,t,i))&&(ru(e,a,i,o),Do(e,a,i)),i}function Yu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Hu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function qu(e,t){Hu(e,t),(e=e.alternate)&&Hu(e,t)}ws=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Pa.current)xl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return xl=!1,function(e,t,n){switch(t.tag){case 3:Bl(t),mo();break;case 5:ii(t);break;case 1:Fa(t.type)&&Da(t);break;case 4:ai(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;Sa(yo,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Sa(si,1&si.current),t.flags|=128,null):0!=(n&t.child.childLanes)?jl(e,t,n):(Sa(si,1&si.current),null!==(e=Yl(e,t,n))?e.sibling:null);Sa(si,1&si.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Wl(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Sa(si,si.current),r)break;return null;case 22:case 23:return t.lanes=0,kl(e,t,n)}return Yl(e,t,n)}(e,t,n);xl=0!=(131072&e.flags)}else xl=!1,ao&&0!=(1048576&t.flags)&&Ja(t,Ha,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;$l(e,t),e=t.pendingProps;var a=Ta(t,_a.current);ko(t,n),a=wi(null,t,r,e,a,n);var i=ki();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Fa(r)?(i=!0,Da(t)):i=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Fo(t),a.updater=Uo,t.stateNode=a,a._reactInternals=t,Ho(t,r,e,n),t=Pl(null,t,r,!0,i,n)):(t.tag=0,ao&&i&&eo(t),Al(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch($l(e,t),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return Ru(e)?1:0;if(null!=e){if((e=e.$$typeof)===_)return 11;if(e===T)return 14}return 2}(r),e=vo(r,e),a){case 0:t=Nl(null,t,r,e,n);break e;case 1:t=_l(null,t,r,e,n);break e;case 11:t=Cl(null,t,r,e,n);break e;case 14:t=El(null,t,r,vo(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,Nl(e,t,r,a=t.elementType===r?a:vo(r,a),n);case 1:return r=t.type,a=t.pendingProps,_l(e,t,r,a=t.elementType===r?a:vo(r,a),n);case 3:e:{if(Bl(t),null===e)throw Error(o(387));r=t.pendingProps,a=(i=t.memoizedState).element,Ro(e,t),jo(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Tl(e,t,r,n,a=cl(Error(o(423)),t));break e}if(r!==a){t=Tl(e,t,r,n,a=cl(Error(o(424)),t));break e}for(ro=ua(t.stateNode.containerInfo.firstChild),no=t,ao=!0,oo=null,n=Xo(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(mo(),r===a){t=Yl(e,t,n);break e}Al(e,t,r,n)}t=t.child}return t;case 5:return ii(t),null===e&&uo(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,l=a.children,na(r,a)?l=null:null!==i&&na(r,i)&&(t.flags|=32),Sl(e,t),Al(e,t,l,n),t.child;case 6:return null===e&&uo(t),null;case 13:return jl(e,t,n);case 4:return ai(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Go(t,null,r,n):Al(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Cl(e,t,r,a=t.elementType===r?a:vo(r,a),n);case 7:return Al(e,t,t.pendingProps,n),t.child;case 8:case 12:return Al(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,i=t.memoizedProps,l=a.value,Sa(yo,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===a.children&&!Pa.current){t=Yl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var s=i.dependencies;if(null!==s){l=i.child;for(var u=s.firstContext;null!==u;){if(u.context===r){if(1===i.tag){(u=Lo(-1,n&-n)).tag=2;var c=i.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?u.next=u:(u.next=d.next,d.next=u),c.pending=u}}i.lanes|=n,null!==(u=i.alternate)&&(u.lanes|=n),wo(i.return,n,t),s.lanes|=n;break}u=u.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(o(341));l.lanes|=n,null!==(s=l.alternate)&&(s.lanes|=n),wo(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}Al(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,ko(t,n),r=r(a=So(a)),t.flags|=1,Al(e,t,r,n),t.child;case 14:return a=vo(r=t.type,t.pendingProps),El(e,t,r,a=vo(r.type,a),n);case 15:return wl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:vo(r,a),$l(e,t),t.tag=1,Fa(r)?(e=!0,Da(t)):e=!1,ko(t,n),$o(t,r,a),Ho(t,r,a,n),Pl(null,t,r,!0,e,n);case 19:return Wl(e,t,n);case 22:return kl(e,t,n)}throw Error(o(156,t.tag))};var Qu="function"==typeof reportError?reportError:function(e){console.error(e)};function Ku(e){this._internalRoot=e}function Zu(e){this._internalRoot=e}function Gu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Xu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ju(){}function ec(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o;if("function"==typeof a){var l=a;a=function(){var e=Yu(i);l.call(e)}}$u(t,i,e,a)}else i=function(e,t,n,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=Yu(i);o.call(e)}}var i=Wu(t,r,e,0,null,!1,0,"",Ju);return e._reactRootContainer=i,e[ma]=i.current,Ur(8===e.nodeType?e.parentNode:e),du(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var l=r;r=function(){var e=Yu(s);l.call(e)}}var s=Iu(e,0,!1,null,0,!1,0,"",Ju);return e._reactRootContainer=s,e[ma]=s.current,Ur(8===e.nodeType?e.parentNode:e),du((function(){$u(t,s,n,r)})),s}(n,t,e,a,r);return Yu(i)}Zu.prototype.render=Ku.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));$u(e,t,null,null)},Zu.prototype.unmount=Ku.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;du((function(){$u(null,e,null,null)})),t[ma]=null}},Zu.prototype.unstable_scheduleHydration=function(e){if(e){var t=wt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Rt.length&&0!==t&&t<Rt[n].priority;n++);Rt.splice(n,0,e),0===n&&Ot(e)}},At=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(yt(t,1|n),au(t,Ge()),0==(6&Ps)&&(Ws=Ge()+500,Ua()))}break;case 13:du((function(){var t=Bo(e,1);if(null!==t){var n=tu();ru(t,e,1,n)}})),qu(e,1)}},Ct=function(e){if(13===e.tag){var t=Bo(e,134217728);null!==t&&ru(t,e,134217728,tu()),qu(e,134217728)}},Et=function(e){if(13===e.tag){var t=nu(e),n=Bo(e,t);null!==n&&ru(n,e,t,tu()),qu(e,t)}},wt=function(){return bt},kt=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Ce=function(e,t,n){switch(t){case"input":if(X(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=Aa(r);if(!a)throw Error(o(90));q(r),X(r,a)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},_e=cu,Pe=du;var tc={usingClientEntryPoint:!1,Events:[ba,xa,Aa,Se,Ne,cu]},nc={findFiberByHostInstance:ya,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:x.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ye(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ac=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ac.isDisabled&&ac.supportsFiber)try{at=ac.inject(rc),ot=ac}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Gu(t))throw Error(o(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:C,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Gu(e))throw Error(o(299));var n=!1,r="",a=Qu;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Iu(e,1,!1,null,0,n,0,r,a),e[ma]=t.current,Ur(8===e.nodeType?e.parentNode:e),new Ku(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=Ye(t))?null:e.stateNode},t.flushSync=function(e){return du(e)},t.hydrate=function(e,t,n){if(!Xu(t))throw Error(o(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Gu(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,a=!1,i="",l=Qu;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Wu(t,null,e,1,null!=n?n:null,a,0,i,l),e[ma]=t.current,Ur(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Zu(t)},t.render=function(e,t,n){if(!Xu(t))throw Error(o(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Xu(e))throw Error(o(40));return!!e._reactRootContainer&&(du((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[ma]=null}))})),!0)},t.unstable_batchedUpdates=cu,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Xu(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{var r=n(935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},935:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},408:(e,t)=>{var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),s=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),f=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,g={};function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var x=b.prototype=new y;x.constructor=b,h(x,v.prototype),x.isPureReactComponent=!0;var A=Array.isArray,C=Object.prototype.hasOwnProperty,E={current:null},w={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,r){var a,o={},i=null,l=null;if(null!=t)for(a in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)C.call(t,a)&&!w.hasOwnProperty(a)&&(o[a]=t[a]);var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];o.children=u}if(e&&e.defaultProps)for(a in s=e.defaultProps)void 0===o[a]&&(o[a]=s[a]);return{$$typeof:n,type:e,key:i,ref:l,props:o,_owner:E.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var N=/\/+/g;function _(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,a,o,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case n:case r:s=!0}}if(s)return i=i(s=e),e=""===o?"."+_(s,0):o,A(i)?(a="",null!=e&&(a=e.replace(N,"$&/")+"/"),P(i,t,a,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||s&&s.key===i.key?"":(""+i.key).replace(N,"$&/")+"/")+e)),t.push(i)),1;if(s=0,o=""===o?".":o+":",A(e))for(var u=0;u<e.length;u++){var c=o+_(l=e[u],u);s+=P(l,t,a,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(l=e.next()).done;)s+=P(l=l.value,t,a,c=o+_(l,u++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function B(e,t,n){if(null==e)return e;var r=[],a=0;return P(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function T(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var F={current:null},R={transition:null},L={ReactCurrentDispatcher:F,ReactCurrentBatchConfig:R,ReactCurrentOwner:E};t.Children={map:B,forEach:function(e,t,n){B(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return B(e,(function(){t++})),t},toArray:function(e){return B(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=a,t.Profiler=i,t.PureComponent=b,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=h({},e.props),o=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=E.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(u in t)C.call(t,u)&&!w.hasOwnProperty(u)&&(a[u]=void 0===t[u]&&void 0!==s?s[u]:t[u])}var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){s=Array(u);for(var c=0;c<u;c++)s[c]=arguments[c+2];a.children=s}return{$$typeof:n,type:e.type,key:o,ref:i,props:a,_owner:l}},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:p,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=R.transition;R.transition={};try{e()}finally{R.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return F.current.useCallback(e,t)},t.useContext=function(e){return F.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return F.current.useDeferredValue(e)},t.useEffect=function(e,t){return F.current.useEffect(e,t)},t.useId=function(){return F.current.useId()},t.useImperativeHandle=function(e,t,n){return F.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return F.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return F.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return F.current.useMemo(e,t)},t.useReducer=function(e,t,n){return F.current.useReducer(e,t,n)},t.useRef=function(e){return F.current.useRef(e)},t.useState=function(e){return F.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return F.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return F.current.useTransition()},t.version="18.2.0"},294:(e,t,n)=>{e.exports=n(408)},53:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var l=2*(r+1)-1,s=e[l],u=l+1,c=e[u];if(0>o(s,n))u<a&&0>o(c,s)?(e[r]=c,e[u]=n,r=u):(e[r]=s,e[l]=n,r=l);else{if(!(u<a&&0>o(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}var u=[],c=[],d=1,p=null,f=3,m=!1,h=!1,g=!1,v="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function x(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function A(e){if(g=!1,x(e),!h)if(null!==r(u))h=!0,R(C);else{var t=r(c);null!==t&&L(A,t.startTime-e)}}function C(e,n){h=!1,g&&(g=!1,y(S),S=-1),m=!0;var o=f;try{for(x(n),p=r(u);null!==p&&(!(p.expirationTime>n)||e&&!P());){var i=p.callback;if("function"==typeof i){p.callback=null,f=p.priorityLevel;var l=i(p.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?p.callback=l:p===r(u)&&a(u),x(n)}else a(u);p=r(u)}if(null!==p)var s=!0;else{var d=r(c);null!==d&&L(A,d.startTime-n),s=!1}return s}finally{p=null,f=o,m=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var E,w=!1,k=null,S=-1,N=5,_=-1;function P(){return!(t.unstable_now()-_<N)}function B(){if(null!==k){var e=t.unstable_now();_=e;var n=!0;try{n=k(!0,e)}finally{n?E():(w=!1,k=null)}}else w=!1}if("function"==typeof b)E=function(){b(B)};else if("undefined"!=typeof MessageChannel){var T=new MessageChannel,F=T.port2;T.port1.onmessage=B,E=function(){F.postMessage(null)}}else E=function(){v(B,0)};function R(e){k=e,w||(w=!0,E())}function L(e,n){S=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){h||m||(h=!0,R(C))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):N=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return f},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(f){case 1:case 2:case 3:var t=3;break;default:t=f}var n=f;f=t;try{return e()}finally{f=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=f;f=e;try{return t()}finally{f=n}},t.unstable_scheduleCallback=function(e,a,o){var i=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:o,expirationTime:l=o+l,sortIndex:-1},o>i?(e.sortIndex=o,n(c,e),null===r(u)&&e===r(c)&&(g?(y(S),S=-1):g=!0,L(A,o-i))):(e.sortIndex=l,n(u,e),h||m||(h=!0,R(C))),e},t.unstable_shouldYield=P,t.unstable_wrapCallback=function(e){var t=f;return function(){var n=f;f=t;try{return e.apply(this,arguments)}finally{f=n}}}},840:(e,t,n)=>{e.exports=n(53)},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],l=0;l<e.length;l++){var s=e[l],u=r.base?s[0]+r.base:s[0],c=o[u]||0,d="".concat(u," ").concat(c);o[u]=c+1;var p=n(d),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(f);else{var m=a(f,r);r.byIndex=l,t.splice(l,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var l=n(o[i]);t[l].references--}for(var s=r(e,a),u=0;u<o.length;u++){var c=n(o[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=s}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},__webpack_module_cache__={},leafPrototypes,getProto;function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={id:e,exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(t,{a:t}),t},getProto=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,__webpack_require__.t=function(e,t){if(1&t&&(e=this(e)),8&t)return e;if("object"==typeof e&&e){if(4&t&&e.__esModule)return e;if(16&t&&"function"==typeof e.then)return e}var n=Object.create(null);__webpack_require__.r(n);var r={};leafPrototypes=leafPrototypes||[null,getProto({}),getProto([]),getProto(getProto)];for(var a=2&t&&e;"object"==typeof a&&!~leafPrototypes.indexOf(a);a=getProto(a))Object.getOwnPropertyNames(a).forEach((t=>r[t]=()=>e[t]));return r.default=()=>e,__webpack_require__.d(n,r),n},__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},__webpack_require__.nc=void 0;var __webpack_exports__={};(()=>{var e,t=__webpack_require__(294),n=__webpack_require__.t(t,2),r=__webpack_require__(745),a=__webpack_require__(379),o=__webpack_require__.n(a),i=__webpack_require__(795),l=__webpack_require__.n(i),s=__webpack_require__(569),u=__webpack_require__.n(s),c=__webpack_require__(565),d=__webpack_require__.n(c),p=__webpack_require__(216),f=__webpack_require__.n(p),m=__webpack_require__(589),h=__webpack_require__.n(m),g=__webpack_require__(528),v={};function y(){return y=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},y.apply(this,arguments)}v.styleTagTransform=h(),v.setAttributes=d(),v.insert=u().bind(null,"head"),v.domAPI=l(),v.insertStyleElement=f(),o()(g.Z,v),g.Z&&g.Z.locals&&g.Z.locals,function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));const b="popstate";function x(e,t){if(!1===e||null==e)throw new Error(t)}function A(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function C(e,t){return{usr:e.state,key:e.key,idx:t}}function E(e,t,n,r){return void 0===n&&(n=null),y({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?k(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function w(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function k(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var S;function N(e,t,n){void 0===n&&(n="/");let r=I(("string"==typeof t?k(t):t).pathname||"/",n);if(null==r)return null;let a=_(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(a);let o=null;for(let e=0;null==o&&e<a.length;++e)o=j(a[e],V(r));return o}function _(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let a=(e,a,o)=>{let i={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};i.relativePath.startsWith("/")&&(x(i.relativePath.startsWith(r),'Absolute route path "'+i.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(r.length));let l=Y([r,i.relativePath]),s=n.concat(i);e.children&&e.children.length>0&&(x(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),_(e.children,t,s,l)),(null!=e.path||e.index)&&t.push({path:l,score:O(l,e.index),routesMeta:s})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of P(e.path))a(e,t,n);else a(e,t)})),t}function P(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,a=n.endsWith("?"),o=n.replace(/\?$/,"");if(0===r.length)return a?[o,""]:[o];let i=P(r.join("/")),l=[];return l.push(...i.map((e=>""===e?o:[o,e].join("/")))),a&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(S||(S={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const B=/^:\w+$/,T=3,F=2,R=1,L=10,M=-2,D=e=>"*"===e;function O(e,t){let n=e.split("/"),r=n.length;return n.some(D)&&(r+=M),t&&(r+=F),n.filter((e=>!D(e))).reduce(((e,t)=>e+(B.test(t)?T:""===t?R:L)),r)}function j(e,t){let{routesMeta:n}=e,r={},a="/",o=[];for(let e=0;e<n.length;++e){let i=n[e],l=e===n.length-1,s="/"===a?t:t.slice(a.length)||"/",u=z({path:i.relativePath,caseSensitive:i.caseSensitive,end:l},s);if(!u)return null;Object.assign(r,u.params);let c=i.route;o.push({params:r,pathname:Y([a,u.pathname]),pathnameBase:H(Y([a,u.pathnameBase])),route:c}),"/"!==u.pathnameBase&&(a=Y([a,u.pathnameBase]))}return o}function z(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),A("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,((e,t)=>(r.push(t),"/([^\\/]+)")));return e.endsWith("*")?(r.push("*"),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let o=a[0],i=o.replace(/(.)\/+$/,"$1"),l=a.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=l[n]||"";i=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return A(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(l[n]||"",t),e}),{}),pathname:o,pathnameBase:i,pattern:e}}function V(e){try{return decodeURI(e)}catch(t){return A(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function I(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function U(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function W(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function $(e,t,n,r){let a;void 0===r&&(r=!1),"string"==typeof e?a=k(e):(a=y({},e),x(!a.pathname||!a.pathname.includes("?"),U("?","pathname","search",a)),x(!a.pathname||!a.pathname.includes("#"),U("#","pathname","hash",a)),x(!a.search||!a.search.includes("#"),U("#","search","hash",a)));let o,i=""===e||""===a.pathname,l=i?"/":a.pathname;if(r||null==l)o=n;else{let e=t.length-1;if(l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}o=e>=0?t[e]:"/"}let s=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?k(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:q(r),hash:Q(a)}}(a,o),u=l&&"/"!==l&&l.endsWith("/"),c=(i||"."===l)&&n.endsWith("/");return s.pathname.endsWith("/")||!u&&!c||(s.pathname+="/"),s}const Y=e=>e.join("/").replace(/\/\/+/g,"/"),H=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),q=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",Q=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const K=["post","put","patch","delete"],Z=(new Set(K),["get",...K]);function G(){return G=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},G.apply(this,arguments)}new Set(Z),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const X=t.createContext(null),J=t.createContext(null),ee=t.createContext(null),te=t.createContext(null),ne=t.createContext({outlet:null,matches:[],isDataRoute:!1}),re=t.createContext(null);function ae(){return null!=t.useContext(te)}function oe(){return ae()||x(!1),t.useContext(te).location}function ie(e){t.useContext(ee).static||t.useLayoutEffect(e)}function le(){let{isDataRoute:e}=t.useContext(ne);return e?function(){let{router:e}=function(e){let n=t.useContext(X);return n||x(!1),n}(me.UseNavigateStable),n=ge(he.UseNavigateStable),r=t.useRef(!1);ie((()=>{r.current=!0}));let a=t.useCallback((function(t,a){void 0===a&&(a={}),r.current&&("number"==typeof t?e.navigate(t):e.navigate(t,G({fromRouteId:n},a)))}),[e,n]);return a}():function(){ae()||x(!1);let e=t.useContext(X),{basename:n,navigator:r}=t.useContext(ee),{matches:a}=t.useContext(ne),{pathname:o}=oe(),i=JSON.stringify(W(a).map((e=>e.pathnameBase))),l=t.useRef(!1);ie((()=>{l.current=!0}));let s=t.useCallback((function(t,a){if(void 0===a&&(a={}),!l.current)return;if("number"==typeof t)return void r.go(t);let s=$(t,JSON.parse(i),o,"path"===a.relative);null==e&&"/"!==n&&(s.pathname="/"===s.pathname?n:Y([n,s.pathname])),(a.replace?r.replace:r.push)(s,a.state,a)}),[n,r,i,o,e]);return s}()}function se(e,n){let{relative:r}=void 0===n?{}:n,{matches:a}=t.useContext(ne),{pathname:o}=oe(),i=JSON.stringify(W(a).map((e=>e.pathnameBase)));return t.useMemo((()=>$(e,JSON.parse(i),o,"path"===r)),[e,i,o,r])}function ue(n,r,a){ae()||x(!1);let{navigator:o}=t.useContext(ee),{matches:i}=t.useContext(ne),l=i[i.length-1],s=l?l.params:{},u=(l&&l.pathname,l?l.pathnameBase:"/");l&&l.route;let c,d=oe();if(r){var p;let e="string"==typeof r?k(r):r;"/"===u||(null==(p=e.pathname)?void 0:p.startsWith(u))||x(!1),c=e}else c=d;let f=c.pathname||"/",m=N(n,{pathname:"/"===u?f:f.slice(u.length)||"/"}),h=function(e,n,r){var a;if(void 0===n&&(n=[]),void 0===r&&(r=null),null==e){var o;if(null==(o=r)||!o.errors)return null;e=r.matches}let i=e,l=null==(a=r)?void 0:a.errors;if(null!=l){let e=i.findIndex((e=>e.route.id&&(null==l?void 0:l[e.route.id])));e>=0||x(!1),i=i.slice(0,Math.min(i.length,e+1))}return i.reduceRight(((e,a,o)=>{let s=a.route.id?null==l?void 0:l[a.route.id]:null,u=null;r&&(u=a.route.errorElement||de);let c=n.concat(i.slice(0,o+1)),d=()=>{let n;return n=s?u:a.route.Component?t.createElement(a.route.Component,null):a.route.element?a.route.element:e,t.createElement(fe,{match:a,routeContext:{outlet:e,matches:c,isDataRoute:null!=r},children:n})};return r&&(a.route.ErrorBoundary||a.route.errorElement||0===o)?t.createElement(pe,{location:r.location,revalidation:r.revalidation,component:u,error:s,children:d(),routeContext:{outlet:null,matches:c,isDataRoute:!0}}):d()}),null)}(m&&m.map((e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:Y([u,o.encodeLocation?o.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?u:Y([u,o.encodeLocation?o.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),i,a);return r&&h?t.createElement(te.Provider,{value:{location:G({pathname:"/",search:"",hash:"",state:null,key:"default"},c),navigationType:e.Pop}},h):h}function ce(){let e=function(){var e;let n=t.useContext(re),r=function(e){let n=t.useContext(J);return n||x(!1),n}(he.UseRouteError),a=ge(he.UseRouteError);return n||(null==(e=r.errors)?void 0:e[a])}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,a={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:a},r):null,null)}const de=t.createElement(ce,null);class pe extends t.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:e.error||t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?t.createElement(ne.Provider,{value:this.props.routeContext},t.createElement(re.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function fe(e){let{routeContext:n,match:r,children:a}=e,o=t.useContext(X);return o&&o.static&&o.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(o.staticContext._deepestRenderedBoundaryId=r.route.id),t.createElement(ne.Provider,{value:n},a)}var me=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(me||{}),he=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(he||{});function ge(e){let n=function(e){let n=t.useContext(ne);return n||x(!1),n}(),r=n.matches[n.matches.length-1];return r.route.id||x(!1),r.route.id}function ve(e){x(!1)}function ye(n){let{basename:r="/",children:a=null,location:o,navigationType:i=e.Pop,navigator:l,static:s=!1}=n;ae()&&x(!1);let u=r.replace(/^\/*/,"/"),c=t.useMemo((()=>({basename:u,navigator:l,static:s})),[u,l,s]);"string"==typeof o&&(o=k(o));let{pathname:d="/",search:p="",hash:f="",state:m=null,key:h="default"}=o,g=t.useMemo((()=>{let e=I(d,u);return null==e?null:{location:{pathname:e,search:p,hash:f,state:m,key:h},navigationType:i}}),[u,d,p,f,m,h,i]);return null==g?null:t.createElement(ee.Provider,{value:c},t.createElement(te.Provider,{children:a,value:g}))}function be(e){let{children:t,location:n}=e;return ue(xe(t),n)}function xe(e,n){void 0===n&&(n=[]);let r=[];return t.Children.forEach(e,((e,a)=>{if(!t.isValidElement(e))return;let o=[...n,a];if(e.type===t.Fragment)return void r.push.apply(r,xe(e.props.children,o));e.type!==ve&&x(!1),e.props.index&&e.props.children&&x(!1);let i={id:e.props.id||o.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(i.children=xe(e.props.children,o)),r.push(i)})),r}function Ae(){return Ae=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ae.apply(this,arguments)}function Ce(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}n.startTransition,new Promise((()=>{})),t.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const Ee=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset"],we=["aria-current","caseSensitive","className","end","style","to","children"],ke=n.startTransition;function Se(n){let{basename:r,children:a,future:o,window:i}=n,l=t.useRef();null==l.current&&(l.current=function(t){return void 0===t&&(t={}),function(t,n,r,a){void 0===a&&(a={});let{window:o=document.defaultView,v5Compat:i=!1}=a,l=o.history,s=e.Pop,u=null,c=d();function d(){return(l.state||{idx:null}).idx}function p(){s=e.Pop;let t=d(),n=null==t?null:t-c;c=t,u&&u({action:s,location:m.location,delta:n})}function f(e){let t="null"!==o.location.origin?o.location.origin:o.location.href,n="string"==typeof e?e:w(e);return x(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==c&&(c=0,l.replaceState(y({},l.state,{idx:c}),""));let m={get action(){return s},get location(){return t(o,l)},listen(e){if(u)throw new Error("A history only accepts one active listener");return o.addEventListener(b,p),u=e,()=>{o.removeEventListener(b,p),u=null}},createHref:e=>n(o,e),createURL:f,encodeLocation(e){let t=f(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(t,n){s=e.Push;let a=E(m.location,t,n);r&&r(a,t),c=d()+1;let p=C(a,c),f=m.createHref(a);try{l.pushState(p,"",f)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;o.location.assign(f)}i&&u&&u({action:s,location:m.location,delta:1})},replace:function(t,n){s=e.Replace;let a=E(m.location,t,n);r&&r(a,t),c=d();let o=C(a,c),p=m.createHref(a);l.replaceState(o,"",p),i&&u&&u({action:s,location:m.location,delta:0})},go:e=>l.go(e)};return m}((function(e,t){let{pathname:n="/",search:r="",hash:a=""}=k(e.location.hash.substr(1));return n.startsWith("/")||n.startsWith(".")||(n="/"+n),E("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),r="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");r=-1===n?t:t.slice(0,n)}return r+"#"+("string"==typeof t?t:w(t))}),(function(e,t){A("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),t)}({window:i,v5Compat:!0}));let s=l.current,[u,c]=t.useState({action:s.action,location:s.location}),{v7_startTransition:d}=o||{},p=t.useCallback((e=>{d&&ke?ke((()=>c(e))):c(e)}),[c,d]);return t.useLayoutEffect((()=>s.listen(p)),[s,p]),t.createElement(ye,{basename:r,children:a,location:u.location,navigationType:u.action,navigator:s})}const Ne="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,_e=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Pe=t.forwardRef((function(e,n){let r,{onClick:a,relative:o,reloadDocument:i,replace:l,state:s,target:u,to:c,preventScrollReset:d}=e,p=Ce(e,Ee),{basename:f}=t.useContext(ee),m=!1;if("string"==typeof c&&_e.test(c)&&(r=c,Ne))try{let e=new URL(window.location.href),t=c.startsWith("//")?new URL(e.protocol+c):new URL(c),n=I(t.pathname,f);t.origin===e.origin&&null!=n?c=n+t.search+t.hash:m=!0}catch(e){}let h=function(e,n){let{relative:r}=void 0===n?{}:n;ae()||x(!1);let{basename:a,navigator:o}=t.useContext(ee),{hash:i,pathname:l,search:s}=se(e,{relative:r}),u=l;return"/"!==a&&(u="/"===l?a:Y([a,l])),o.createHref({pathname:u,search:s,hash:i})}(c,{relative:o}),g=function(e,n){let{target:r,replace:a,state:o,preventScrollReset:i,relative:l}=void 0===n?{}:n,s=le(),u=oe(),c=se(e,{relative:l});return t.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==a?a:w(u)===w(c);s(e,{replace:n,state:o,preventScrollReset:i,relative:l})}}),[u,s,c,a,o,r,e,i,l])}(c,{replace:l,state:s,target:u,preventScrollReset:d,relative:o});return t.createElement("a",Ae({},p,{href:r||h,onClick:m||i?a:function(e){a&&a(e),e.defaultPrevented||g(e)},ref:n,target:u}))})),Be=t.forwardRef((function(e,n){let{"aria-current":r="page",caseSensitive:a=!1,className:o="",end:i=!1,style:l,to:s,children:u}=e,c=Ce(e,we),d=se(s,{relative:c.relative}),p=oe(),f=t.useContext(J),{navigator:m}=t.useContext(ee),h=m.encodeLocation?m.encodeLocation(d).pathname:d.pathname,g=p.pathname,v=f&&f.navigation&&f.navigation.location?f.navigation.location.pathname:null;a||(g=g.toLowerCase(),v=v?v.toLowerCase():null,h=h.toLowerCase());let y,b=g===h||!i&&g.startsWith(h)&&"/"===g.charAt(h.length),x=null!=v&&(v===h||!i&&v.startsWith(h)&&"/"===v.charAt(h.length)),A=b?r:void 0;y="function"==typeof o?o({isActive:b,isPending:x}):[o,b?"active":null,x?"pending":null].filter(Boolean).join(" ");let C="function"==typeof l?l({isActive:b,isPending:x}):l;return t.createElement(Pe,Ae({},c,{"aria-current":A,className:y,ref:n,style:C,to:s}),"function"==typeof u?u({isActive:b,isPending:x}):u)}));var Te,Fe;function Re(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Le(){var e,n,r=(e=(0,t.useState)(!1),n=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],s=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,a=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw a}}return l}}(e,n)||function(e,t){if(e){if("string"==typeof e)return Re(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Re(e,t):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=r[0],o=r[1];return(0,t.useEffect)((function(){var e=function(){window.pageYOffset>300?o(!0):o(!1)};return window.addEventListener("scroll",e),function(){window.removeEventListener("scroll",e)}}),[]),t.createElement("div",null,a&&t.createElement("span",null,t.createElement("div",{onClick:function(){window.scrollTo({top:0,behavior:"smooth"})},className:"back-to-top"},t.createElement("div",{className:"arrowup"},"^"))))}function Me(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],s=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,a=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return De(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?De(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function De(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher"})(Te||(Te={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(Fe||(Fe={}));const Oe=function(){var e=Me((0,t.useState)(""),2),n=e[0],r=e[1],a=Me((0,t.useState)(""),2),o=a[0],i=a[1],l=Me((0,t.useState)(""),2),s=l[0],u=l[1],c=Me((0,t.useState)(""),2),d=c[0],p=c[1],f=Me((0,t.useState)(""),2),m=f[0],h=f[1],g=Me((0,t.useState)(""),2),v=g[0],y=g[1],b=Me((0,t.useState)(""),2),x=b[0],A=b[1],C=Me((0,t.useState)(""),2),E=C[0],w=C[1],k=Me((0,t.useState)(""),2),S=k[0],N=k[1],_=Me((0,t.useState)(""),2),P=_[0],B=_[1],T=Me((0,t.useState)(""),2),F=T[0],R=T[1],L=Me((0,t.useState)(""),2),M=L[0],D=L[1],O=Me((0,t.useState)(""),2),j=O[0],z=O[1],V=Me((0,t.useState)(""),2),I=V[0],U=V[1],W=Me((0,t.useState)(""),2),$=W[0],Y=W[1],H=Me((0,t.useState)(""),2),q=H[0],Q=H[1],K=Me((0,t.useState)(""),2),Z=K[0],G=K[1],X=Me((0,t.useState)(""),2),J=X[0],ee=X[1],te=Me((0,t.useState)(""),2),ne=te[0],re=te[1],ae=Me((0,t.useState)(""),2),oe=ae[0],ie=ae[1],se=Me((0,t.useState)(""),2),ue=se[0],ce=se[1],de=Me((0,t.useState)(""),2),pe=de[0],fe=de[1],me=Me((0,t.useState)(""),2),he=me[0],ge=me[1],ve=Me((0,t.useState)(""),2),ye=ve[0],be=ve[1],xe=Me((0,t.useState)(""),2),Ae=xe[0],Ce=xe[1],Ee=Me((0,t.useState)(""),2),we=Ee[0],ke=Ee[1],Se=Me((0,t.useState)(""),2),Ne=Se[0],_e=Se[1],Pe=Me((0,t.useState)(""),2),Be=Pe[0],Te=Pe[1],Fe=Me((0,t.useState)(""),2),Re=Fe[0],De=Fe[1],Oe=Me((0,t.useState)(""),2),je=Oe[0],ze=Oe[1],Ve=Me((0,t.useState)(""),2),Ie=Ve[0],Ue=Ve[1],We=Me((0,t.useState)(""),2),$e=We[0],Ye=We[1],He=Me((0,t.useState)(""),2),qe=He[0],Qe=He[1],Ke=Me((0,t.useState)(""),2),Ze=Ke[0],Ge=Ke[1],Xe=Me((0,t.useState)(""),2),Je=Xe[0],et=Xe[1],tt=Me((0,t.useState)(""),2),nt=tt[0],rt=tt[1],at=Me((0,t.useState)(""),2),ot=at[0],it=at[1],lt=Me((0,t.useState)(""),2),st=lt[0],ut=lt[1],ct=Me((0,t.useState)(""),2),dt=ct[0],pt=ct[1],ft=Me((0,t.useState)(""),2),mt=ft[0],ht=ft[1],gt=Me((0,t.useState)(""),2),vt=gt[0],yt=gt[1],bt=Me((0,t.useState)(""),2),xt=bt[0],At=bt[1],Ct=Me((0,t.useState)(""),2),Et=Ct[0],wt=Ct[1],kt=Me((0,t.useState)(""),2),St=kt[0],Nt=kt[1],_t=Me((0,t.useState)(""),2),Pt=_t[0],Bt=_t[1],Tt=Me((0,t.useState)(""),2),Ft=Tt[0],Rt=Tt[1],Lt=Me((0,t.useState)(""),2),Mt=Lt[0],Dt=Lt[1],Ot=Me((0,t.useState)(""),2),jt=Ot[0],zt=Ot[1],Vt=Me((0,t.useState)(""),2),It=Vt[0],Ut=Vt[1],Wt=Me((0,t.useState)(""),2),$t=Wt[0],Yt=Wt[1];return le(),t.createElement(t.Fragment,null,t.createElement("table",{className:"hrana"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,"Hrana"),t.createElement("th",null,"g ml"),t.createElement("th",null,"Protein"),t.createElement("th",null,"UH"),t.createElement("th",null,"Mast"),t.createElement("th",null,"Kalorije"))),t.createElement("tbody",null,t.createElement("tr",{className:"hidrati"},t.createElement("td",{className:"naslov"},"Pirinač"),t.createElement("td",null,t.createElement("input",{name:"value1",type:"number",value:n,onChange:function(e){r(e.target.value)}})),t.createElement("td",{className:"protein"},(.076*n).toFixed(1)),t.createElement("td",{className:"ugHid"},(.78*n).toFixed(1)),t.createElement("td",{className:"mast"}),t.createElement("td",{className:"protein"},(3.51*n).toFixed(1))),t.createElement("tr",{className:"hidrati"},t.createElement("td",{className:"naslov"},"Ovsene pahuljice"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value2",value:o,onChange:function(e){i(e.target.value)}})),t.createElement("td",{className:"protein"},(.139*o).toFixed(1)),t.createElement("td",{className:"protein"},(.644*o).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(3.74*o).toFixed(1))),t.createElement("tr",{className:"hidrati"},t.createElement("td",{className:"naslov"},"Krompir"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value3",value:s,onChange:function(e){u(e.target.value)}})),t.createElement("td",{className:"protein"},(.09*s).toFixed(1)),t.createElement("td",{className:"protein"},(.2*s).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.85*s).toFixed(1))),t.createElement("tr",{className:"hidrati"},t.createElement("td",{className:"naslov"},"Kukuruzni griz"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value4",value:d,onChange:function(e){p(e.target.value)}})),t.createElement("td",{className:"protein"},(.07*d).toFixed(1)),t.createElement("td",{className:"protein"},(.77*d).toFixed(1)),t.createElement("td",{className:"protein"},(.015*d).toFixed(1)),t.createElement("td",{className:"protein"},(3.5*d).toFixed(1))),t.createElement("tr",{className:"hidrati"},t.createElement("td",{className:"naslov"},"Špagete durum"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value5",value:m,onChange:function(e){h(e.target.value)}})),t.createElement("td",{className:"protein"},(.12*m).toFixed(1)),t.createElement("td",{className:"protein"},(.63*m).toFixed(1)),t.createElement("td",{className:"protein"},(.018*m).toFixed(1)),t.createElement("td",{className:"protein"},(3.37*m).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement("td",{className:"naslov"},"Sočivo"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value6",value:v,onChange:function(e){y(e.target.value)}})),t.createElement("td",{className:"protein"},(.25*v).toFixed(1)),t.createElement("td",{className:"protein"},(.6*v).toFixed(1)),t.createElement("td",{className:"protein"},(.01*v).toFixed(1)),t.createElement("td",{className:"protein"},(3.4*v).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement("td",{className:"naslov"},"Žuti grašak"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value7",value:x,onChange:function(e){A(e.target.value)}})),t.createElement("td",{className:"protein"},(.22*x).toFixed(1)),t.createElement("td",{className:"protein"},(.56*x).toFixed(1)),t.createElement("td",{className:"protein"},(.01*x).toFixed(1)),t.createElement("td",{className:"protein"},(3.1*x).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement("td",{className:"naslov"},"Pasulj"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value8",value:E,onChange:function(e){w(e.target.value)}})),t.createElement("td",{className:"protein"},(.21*E).toFixed(1)),t.createElement("td",{className:"protein"},(.45*E).toFixed(1)),t.createElement("td",{className:"protein"},(.016*E).toFixed(1)),t.createElement("td",{className:"protein"},(2.7*E).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement("td",{className:"naslov"},"Tuna konzerva"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value9",value:S,onChange:function(e){N(e.target.value)}})),t.createElement("td",{className:"protein"},(.23*S).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.209*S).toFixed(1)),t.createElement("td",{className:"protein"},(2.84*S).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement("td",{className:"naslov"},"Piletina"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value10",value:P,onChange:function(e){B(e.target.value)}})),t.createElement("td",{className:"protein"},(.208*P).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.068*P).toFixed(1)),t.createElement("td",{className:"protein"},(1.45*P).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement("td",{className:"naslov"},"Ćureća prsa"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value11",value:F,onChange:function(e){R(e.target.value)}})),t.createElement("td",{className:"protein"},(.19*F).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.01*F).toFixed(1)),t.createElement("td",{className:"protein"},(.95*F).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement("td",{className:"naslov"},"Govedina nemasna"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value12",value:M,onChange:function(e){D(e.target.value)}})),t.createElement("td",{className:"protein"},(.195*M).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.125*M).toFixed(1)),t.createElement("td",{className:"protein"},(1.19*M).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement("td",{className:"naslov"},"Junetina (but)"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value13",value:j,onChange:function(e){z(e.target.value)}})),t.createElement("td",{className:"protein"},(.195*j).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.125*j).toFixed(1)),t.createElement("td",{className:"protein"},(1.91*j).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement("td",{className:"naslov"},"Svinjetina nemasna"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value14",value:I,onChange:function(e){U(e.target.value)}})),t.createElement("td",{className:"protein"},(.2*I).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.09*I).toFixed(1)),t.createElement("td",{className:"protein"},(1.61*I).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement("td",{className:"naslov"},"Jaje celo"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value15",value:$,onChange:function(e){Y(e.target.value)}})),t.createElement("td",{className:"protein"},(6*$).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(5*$).toFixed(1)),t.createElement("td",{className:"protein"},(55*$*1.62).toFixed(1))),t.createElement("tr",{className:"mleko"},t.createElement("td",{className:"naslov"},"Maslac"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value16",value:q,onChange:function(e){Q(e.target.value)}})),t.createElement("td",{className:"protein"},(.01*q).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.83*q).toFixed(1)),t.createElement("td",{className:"protein"},(7.5*q).toFixed(1))),t.createElement("tr",{className:"mleko"},t.createElement("td",{className:"naslov"},"Mleko 2.8%"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value17",value:Z,onChange:function(e){G(e.target.value)}})),t.createElement("td",{className:"protein"},(.03*Z).toFixed(1)),t.createElement("td",{className:"protein"},(.045*Z).toFixed(1)),t.createElement("td",{className:"protein"},(.28*Z).toFixed(1)),t.createElement("td",{className:"protein"},(.56*Z).toFixed(1))),t.createElement("tr",{className:"mleko"},t.createElement("td",{className:"naslov"},"Mladi sir"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value18",value:J,onChange:function(e){ee(e.target.value)}})),t.createElement("td",{className:"protein"},(.125*J).toFixed(1)),t.createElement("td",{className:"protein"},(.04*J).toFixed(1)),t.createElement("td",{className:"protein"},(.055*J).toFixed(1)),t.createElement("td",{className:"protein"},(1.15*J).toFixed(1))),t.createElement("tr",{className:"mleko"},t.createElement("td",{className:"naslov"},"Jogurt 2.8%"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value19",value:ne,onChange:function(e){re(e.target.value)}})),t.createElement("td",{className:"protein"},(.032*ne).toFixed(1)),t.createElement("td",{className:"protein"},(.035*ne).toFixed(1)),t.createElement("td",{className:"protein"},(.028*ne).toFixed(1)),t.createElement("td",{className:"protein"},(.52*ne).toFixed(1))),t.createElement("tr",{className:"mleko"},t.createElement("td",{className:"naslov"},"Parmezan"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value20",value:oe,onChange:function(e){ie(e.target.value)}})),t.createElement("td",{className:"protein"},(.43*oe).toFixed(1)),t.createElement("td",{className:"protein"},(.03*oe).toFixed(1)),t.createElement("td",{className:"protein"},(.35*oe).toFixed(1)),t.createElement("td",{className:"protein"},(5*oe).toFixed(1))),t.createElement("tr",{className:"oil"},t.createElement("td",{className:"naslov"},"Maslinovo ulje"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value21",value:ue,onChange:function(e){ce(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(1*ue).toFixed(1)),t.createElement("td",{className:"protein"},(8.84*ue).toFixed(1))),t.createElement("tr",{className:"oil"},t.createElement("td",{className:"naslov"},"Masline zelene"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value22",value:pe,onChange:function(e){fe(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.14*pe).toFixed(1)),t.createElement("td",{className:"protein"},(1.46*pe).toFixed(1))),t.createElement("tr",{className:"oil"},t.createElement("td",{className:"naslov"},"Kokosovo ulje"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value23",value:he,onChange:function(e){ge(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(1*he).toFixed(1)),t.createElement("td",{className:"protein"},(8.9*he).toFixed(1))),t.createElement("tr",{className:"orah"},t.createElement("td",{className:"naslov"},"Kokos"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value24",value:ye,onChange:function(e){be(e.target.value)}})),t.createElement("td",{className:"protein"},(.03*ye).toFixed(1)),t.createElement("td",{className:"protein"},(.15*ye).toFixed(1)),t.createElement("td",{className:"protein"},(.335*ye).toFixed(1)),t.createElement("td",{className:"protein"},(3.54*ye).toFixed(1))),t.createElement("tr",{className:"orah"},t.createElement("td",{className:"naslov"},"Badem"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value25",value:Ae,onChange:function(e){Ce(e.target.value)}})),t.createElement("td",{className:"protein"},(.22*Ae).toFixed(1)),t.createElement("td",{className:"protein"},(.2*Ae).toFixed(1)),t.createElement("td",{className:"protein"},(.54*Ae).toFixed(1)),t.createElement("td",{className:"protein"},(6.34*Ae).toFixed(1))),t.createElement("tr",{className:"orah"},t.createElement("td",{className:"naslov"},"Orah"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value26",value:we,onChange:function(e){ke(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.622*we).toFixed(1)),t.createElement("td",{className:"protein"},(6.77*we).toFixed(1))),t.createElement("tr",{className:"orah"},t.createElement("td",{className:"naslov"},"Lešnik"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value27",value:Ne,onChange:function(e){_e(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.605*Ne).toFixed(1)),t.createElement("td",{className:"protein"},(6.57*Ne).toFixed(1))),t.createElement("tr",{className:"orah"},t.createElement("td",{className:"naslov"},"Suncokret seme"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value28",value:Be,onChange:function(e){Te(e.target.value)}})),t.createElement("td",{className:"protein"},(.2*Be).toFixed(1)),t.createElement("td",{className:"protein"},(.2*Be).toFixed(1)),t.createElement("td",{className:"protein"},(.515*Be).toFixed(1)),t.createElement("td",{className:"protein"},(5.84*Be).toFixed(1))),t.createElement("tr",{className:"orah"},t.createElement("td",{className:"naslov"},"Lan seme"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value29",value:Re,onChange:function(e){De(e.target.value)}})),t.createElement("td",{className:"protein"},(.18*Re).toFixed(1)),t.createElement("td",{className:"protein"},(.28*Re).toFixed(1)),t.createElement("td",{className:"protein"},(.42*Re).toFixed(1)),t.createElement("td",{className:"protein"},(5.34*Re).toFixed(1))),t.createElement("tr",{className:"voce"},t.createElement("td",{className:"naslov"},"Banana"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value30",value:je,onChange:function(e){ze(e.target.value)}})),t.createElement("td",{className:"protein"},(.01*je).toFixed(1)),t.createElement("td",{className:"protein"},(.23*je).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.89*je).toFixed(1))),t.createElement("tr",{className:"voce"},t.createElement("td",{className:"naslov"},"Jabuka"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value31",value:Ie,onChange:function(e){Ue(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.13*Ie).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.5*Ie).toFixed(1))),t.createElement("tr",{className:"voce"},t.createElement("td",{className:"naslov"},"Narandža"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value32",value:$e,onChange:function(e){Ye(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.117*$e).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.47*$e).toFixed(1))),t.createElement("tr",{className:"voce"},t.createElement("td",{className:"naslov"},"Dinja"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value33",value:qe,onChange:function(e){Qe(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.816*qe).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.34*qe).toFixed(1))),t.createElement("tr",{className:"voce"},t.createElement("td",{className:"naslov"},"Grejpfrut"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value34",value:Ze,onChange:function(e){Ge(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.07*Ze).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.28*Ze).toFixed(1))),t.createElement("tr",{className:"voce"},t.createElement("td",{className:"naslov"},"Ananas"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value35",value:Je,onChange:function(e){et(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.126*Je).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.48*Je).toFixed(1))),t.createElement("tr",{className:"voce"},t.createElement("td",{className:"naslov"},"Suvo groždje"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value36",value:nt,onChange:function(e){rt(e.target.value)}})),t.createElement("td",{className:"protein"},(.016*nt).toFixed(1)),t.createElement("td",{className:"protein"},(.66*nt).toFixed(1)),t.createElement("td",{className:"protein"},(.01*nt).toFixed(1)),t.createElement("td",{className:"protein"},(2.7*nt).toFixed(1))),t.createElement("tr",{className:"kupus"},t.createElement("td",{className:"naslov"},"Kupus"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value37",value:ot,onChange:function(e){it(e.target.value)}})),t.createElement("td",{className:"protein"},(.02*ot).toFixed(1)),t.createElement("td",{className:"protein"},(.03*ot).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.22*ot).toFixed(1))),t.createElement("tr",{className:"kupus"},t.createElement("td",{className:"naslov"},"Šargarepa"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value38",value:st,onChange:function(e){ut(e.target.value)}})),t.createElement("td",{className:"protein"},(.01*st).toFixed(1)),t.createElement("td",{className:"protein"},(.09*st).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.4*st).toFixed(1))),t.createElement("tr",{className:"kupus"},t.createElement("td",{className:"naslov"},"Cvekla"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value39",value:dt,onChange:function(e){pt(e.target.value)}})),t.createElement("td",{className:"protein"},(.016*dt).toFixed(1)),t.createElement("td",{className:"protein"},(.1*dt).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.43*dt).toFixed(1))),t.createElement("tr",{className:"kupus"},t.createElement("td",{className:"naslov"},"Brokoli"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value40",value:mt,onChange:function(e){ht(e.target.value)}})),t.createElement("td",{className:"protein"},(.03*mt).toFixed(1)),t.createElement("td",{className:"protein"},(.07*mt).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.34*mt).toFixed(1))),t.createElement("tr",{className:"kupus"},t.createElement("td",{className:"naslov"},"Kelj"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value41",value:vt,onChange:function(e){yt(e.target.value)}})),t.createElement("td",{className:"protein"},(.02*vt).toFixed(1)),t.createElement("td",{className:"protein"},(.1*vt).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.5*vt).toFixed(1))),t.createElement("tr",{className:"kupus"},t.createElement("td",{className:"naslov"},"Španat"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value42",value:xt,onChange:function(e){At(e.target.value)}})),t.createElement("td",{className:"protein"},(.029*xt).toFixed(1)),t.createElement("td",{className:"protein"},(.036*xt).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.23*xt).toFixed(1))),t.createElement("tr",{className:"kupus"},t.createElement("td",{className:"naslov"},"Tikvica"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value43",value:Et,onChange:function(e){wt(e.target.value)}})),t.createElement("td",{className:"protein"},(.01*Et).toFixed(1)),t.createElement("td",{className:"protein"},(.03*Et).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.16*Et).toFixed(1))),t.createElement("tr",{className:"kupus"},t.createElement("td",{className:"naslov"},"Praziluk"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value44",value:St,onChange:function(e){Nt(e.target.value)}})),t.createElement("td",{className:"protein"},(.01*St).toFixed(1)),t.createElement("td",{className:"protein"},(.14*St).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.61*St).toFixed(1))),t.createElement("tr",{className:"kupus"},t.createElement("td",{className:"naslov"},"Patlidžan"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value45",value:Pt,onChange:function(e){Bt(e.target.value)}})),t.createElement("td",{className:"protein"},(.011*Pt).toFixed(1)),t.createElement("td",{className:"protein"},(.029*Pt).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.16*Pt).toFixed(1))),t.createElement("tr",{className:"kupus"},t.createElement("td",{className:"naslov"},"Paradajz"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value46",value:Ft,onChange:function(e){Rt(e.target.value)}})),t.createElement("td",{className:"protein"},(.0088*Ft).toFixed(1)),t.createElement("td",{className:"protein"},(.039*Ft).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.18*Ft).toFixed(1))),t.createElement("tr",{className:"kupus"},t.createElement("td",{className:"naslov"},"Paradajz sok"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value47",value:Mt,onChange:function(e){Dt(e.target.value)}})),t.createElement("td",{className:"protein"},(.008*Mt).toFixed(1)),t.createElement("td",{className:"protein"},(.059*Mt).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.27*Mt).toFixed(1))),t.createElement("tr",{className:"alcohol"},t.createElement("td",{className:"naslov"},"Vino crno"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value48",value:jt,onChange:function(e){zt(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.026*jt).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.85*jt).toFixed(1))),t.createElement("tr",{className:"alcohol"},t.createElement("td",{className:"naslov"},"Pivo svetlo"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value49",value:It,onChange:function(e){Ut(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.035*It).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.43*It).toFixed(1))),t.createElement("tr",{className:"alcohol"},t.createElement("td",{className:"naslov"},"Rakija"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value50",value:$t,onChange:function(e){Yt(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(3.5*$t).toFixed(1)))),t.createElement("tfoot",null,t.createElement("tr",null,t.createElement("td",{className:"naslov"},"Ukupno"),t.createElement("td",null),t.createElement("td",{className:"protein"},(Number(.076*n)+Number(.139*o)+Number(.09*s)+Number(.07*d)+Number(.012*m)+Number(.25*v)+Number(.22*x)+Number(.21*E)+Number(.023*S)+Number(.208*P)+Number(.19*F)+Number(.195*M)+Number(.195*j)+Number(.2*I)+Number(6*$)+Number(.01*q)+Number(.03*Z)+Number(.125*J)+Number(.032*ne)+Number(.43*oe)+Number(.03*ye)+Number(.22*Ae)+Number(.2*Be)+Number(.18*Re)+Number(.01*je)+Number(.016*nt)+Number(.02*ot)+Number(.01*st)+Number(.016*dt)+Number(.03*mt)+Number(.02*vt)+Number(.029*xt)+Number(.01*Et)+Number(.01*St)+Number(.011*Pt)+Number(.0088*Ft)+Number(.008*Mt)).toFixed(1)),t.createElement("td",{className:"protein"},(Number(.78*n)+Number(.644*o)+Number(.2*s)+Number(.77*d)+Number(.063*m)+Number(.6*v)+Number(.56*x)+Number(.45*E)+Number(.045*Z)+Number(.04*J)+.035*ne+Number(.03*oe)+Number(.15*ye)+Number(.2*Ae)+Number(.2*Be)+Number(.28*Re)+Number(.23*je)+Number(.13*Ie)+Number(.117*$e)+Number(.816*qe)+Number(.07*Ze)+Number(.126*Je)+Number(.66*nt)+Number(.03*ot)+Number(.09*st)+Number(.1*dt)+Number(.07*mt)+Number(.1*vt)+Number(.036*xt)+Number(.03*Et)+Number(.14*St)+Number(.029*Pt)+Number(.039*Ft)+Number(.059*Mt)+Number(.026*jt)+Number(.035*It)).toFixed(1)),t.createElement("td",{className:"protein"},(Number(.015*d)+Number(.018*m)+Number(.01*v)+Number(.01*x)+Number(.016*E)+Number(.209*S)+Number(.068*P)+Number(.01*F)+Number(.125*M)+Number(.125*j)+Number(.09*I)+Number(5*$)+Number(.83*q)+Number(.28*Z)+Number(.055*J)+Number(.028*ne)+Number(.35*oe)+Number(1*ue)+Number(.14*pe)+Number(1*he)+Number(.335*ye)+Number(.54*Ae)+Number(.622*we)+Number(.605*Ne)+Number(.515*Be)+Number(.42*Re)+Number(.01*nt)).toFixed(1)),t.createElement("td",{className:"protein"},(Number(3.51*n)+Number(3.74*o)+Number(.85*s)+Number(3.5*d)+Number(3.37*m)+Number(3.4*v)+Number(3.1*x)+Number(2.7*E)+Number(2.84*S)+Number(1.45*P)+Number(.95*F)+Number(1.19*M)+Number(1.91*j)+Number(1.61*I)+Number(55*$*1.62)+Number(7.5*q)+Number(.56*Z)+Number(1.15*J)+Number(.52*ne)+Number(5*oe)+Number(8.84*ue)+Number(1.46*pe)+Number(8.9*he)+Number(3.54*ye)+Number(6.34*Ae)+Number(6.77*we)+Number(6.57*Ne)+Number(5.84*Be)+Number(5.34*Re)+Number(.89*je)+Number(.5*Ie)+Number(.47*$e)+Number(.34*qe)+Number(.28*Ze)+Number(.48*Je)+Number(2.7*nt)+Number(.22*ot)+Number(.4*st)+Number(.43*dt)+Number(.34*mt)+Number(.5*vt)+Number(.23*xt)+Number(.16*Et)+Number(.61*St)+Number(.16*Pt)+Number(.18*Ft)+Number(.27*Mt)+Number(.85*jt)+Number(.43*It)+Number(3.5*$t)).toFixed(1))))),t.createElement("div",null,t.createElement(Le,null)))};var je=__webpack_require__(154);function ze(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],s=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,a=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw a}}return l}}(e,t)||Ve(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ve(e,t){if(e){if("string"==typeof e)return Ie(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ie(e,t):void 0}}function Ie(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Ue=function(){var e=ze((0,t.useState)(),2),n=e[0],r=e[1],a=ze((0,t.useState)(),2),o=a[0],i=a[1],l=ze((0,t.useState)(),2),s=l[0],u=l[1],c=ze((0,t.useState)(),2),d=c[0],p=c[1],f=ze((0,t.useState)(),2),m=f[0],h=f[1],g=ze((0,t.useState)(),2),v=g[0],y=g[1],b=ze((0,t.useState)(),2),x=b[0],A=b[1],C=ze((0,t.useState)(),2),E=C[0],w=C[1],k=ze((0,t.useState)(),2),S=k[0],N=k[1],_=ze((0,t.useState)(),2),P=_[0],B=_[1],T=t.useRef(),F=ze((0,t.useState)([]),2),R=F[0],L=F[1],M=function(e){return"".concat(e.position.x," ").concat(e.position.y," ").concat(e.position.z)},D=function(e){return"".concat(e.normal.x," ").concat(e.normal.y," ").concat(e.normal.z)};return t.createElement(t.Fragment,null,t.createElement("table",{className:"odnosi"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:7},"Odnosi"))),t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",null,t.createElement("input",{type:"number",name:"value1",value:n,onChange:function(e){r(e.target.value)}})),t.createElement("td",null,"prema"),t.createElement("td",null,t.createElement("input",{type:"number",name:"value2",value:o,onChange:function(e){i(e.target.value)}})),t.createElement("td",null,"isto je kao"),t.createElement("td",null,t.createElement("input",{type:"number",name:"value3",value:s,onChange:function(e){u(e.target.value)}})),t.createElement("td",null,"prema"),t.createElement("td",{className:"relacija"},(s*o/n).toFixed(1))),t.createElement("tr",null,t.createElement("td",null,t.createElement("input",{type:"number",name:"value4",value:d,onChange:function(e){p(e.target.value)}})),t.createElement("td",null,"prema"),t.createElement("td",null,t.createElement("input",{type:"number",name:"value5",value:m,onChange:function(e){h(e.target.value)}})),t.createElement("td",null,"isto je kao"),t.createElement("td",{className:"relacija"},(d*v/m).toFixed(1)),t.createElement("td",null,"prema"),t.createElement("td",null,t.createElement("input",{type:"number",name:"value6",value:v,onChange:function(e){y(e.target.value)}}))))),t.createElement("table",{className:"odnosi"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:5},"Procenti"))),t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",null,t.createElement("input",{type:"number",name:"value7",value:x,onChange:function(e){A(e.target.value)}})),t.createElement("td",null,"Od"),t.createElement("td",null,t.createElement("input",{type:"number",name:"value8",value:E,onChange:function(e){w(e.target.value)}})),t.createElement("td",null,"Iznosi"),t.createElement("td",{className:"relacija"},(x/E*100).toFixed(1)," %")),t.createElement("tr",null,t.createElement("td",{className:"proc"},t.createElement("input",{type:"number",name:"value9",value:S,onChange:function(e){N(e.target.value)}}),"%"),t.createElement("td",null,"Od"),t.createElement("td",null,t.createElement("input",{type:"number",name:"value10",value:P,onChange:function(e){B(e.target.value)}})),t.createElement("td",null,"Iznosi"),t.createElement("td",{className:"relacija"},(S*P/100).toFixed(1))))),t.createElement("div",{className:"calc"},t.createElement(je.Z,null)),t.createElement("br",null),t.createElement("model-viewer",{src:"AutomatBiepi.glb","shadow-intensity":"1","camera-controls":!0,ar:!0,"ar-modes":"webxr",onClick:function(e){var t=e.clientX,n=e.clientY;if(T.current){var r=T.current.positionAndNormalFromPoint(t,n);r&&L((function(e){return[].concat(function(e){if(Array.isArray(e))return Ie(e)}(t=e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||Ve(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[r]);var t}))}},ref:function(e){T.current=e},className:"moduleView"},R.map((function(e,n){return t.createElement("button",{key:"hotspot-".concat(n),className:"view-button",slot:"hotspot-".concat(n),"data-position":M(e),"data-normal":D(e)})}))))},We=(0,t.createContext)({transformPagePoint:e=>e,isStatic:!1,reducedMotion:"never"}),$e=(0,t.createContext)({}),Ye=(0,t.createContext)(null),He="undefined"!=typeof document,qe=He?t.useLayoutEffect:t.useEffect,Qe=(0,t.createContext)({strict:!1});function Ke(e){return"object"==typeof e&&Object.prototype.hasOwnProperty.call(e,"current")}function Ze(e){return"string"==typeof e||Array.isArray(e)}function Ge(e){return"object"==typeof e&&"function"==typeof e.start}const Xe=["animate","whileInView","whileFocus","whileHover","whileTap","whileDrag","exit"],Je=["initial",...Xe];function et(e){return Ge(e.animate)||Je.some((t=>Ze(e[t])))}function tt(e){return Boolean(et(e)||e.variants)}function nt(e){return Array.isArray(e)?e.join(" "):e}const rt={animation:["animate","variants","whileHover","whileTap","exit","whileInView","whileFocus","whileDrag"],exit:["exit"],drag:["drag","dragControls"],focus:["whileFocus"],hover:["whileHover","onHoverStart","onHoverEnd"],tap:["whileTap","onTap","onTapStart","onTapCancel"],pan:["onPan","onPanStart","onPanSessionStart","onPanEnd"],inView:["whileInView","onViewportEnter","onViewportLeave"],layout:["layout","layoutId"]},at={};for(const e in rt)at[e]={isEnabled:t=>rt[e].some((e=>!!t[e]))};const ot=(0,t.createContext)({}),it=(0,t.createContext)({}),lt=Symbol.for("motionComponentSymbol");function st({preloadedFeatures:e,createVisualElement:n,useRender:r,useVisualState:a,Component:o}){e&&function(e){for(const t in e)at[t]={...at[t],...e[t]}}(e);const i=(0,t.forwardRef)((function(i,l){let s;const u={...(0,t.useContext)(We),...i,layoutId:ut(i)},{isStatic:c}=u,d=function(e){const{initial:n,animate:r}=function(e,t){if(et(e)){const{initial:t,animate:n}=e;return{initial:!1===t||Ze(t)?t:void 0,animate:Ze(n)?n:void 0}}return!1!==e.inherit?t:{}}(e,(0,t.useContext)($e));return(0,t.useMemo)((()=>({initial:n,animate:r})),[nt(n),nt(r)])}(i),p=a(i,c);if(!c&&He){d.visualElement=function(e,n,r,a){const{visualElement:o}=(0,t.useContext)($e),i=(0,t.useContext)(Qe),l=(0,t.useContext)(Ye),s=(0,t.useContext)(We).reducedMotion,u=(0,t.useRef)();a=a||i.renderer,!u.current&&a&&(u.current=a(e,{visualState:n,parent:o,props:r,presenceContext:l,blockInitialAnimation:!!l&&!1===l.initial,reducedMotionConfig:s}));const c=u.current;(0,t.useInsertionEffect)((()=>{c&&c.update(r,l)}));const d=(0,t.useRef)(Boolean(window.HandoffAppearAnimations));return qe((()=>{c&&(c.render(),d.current&&c.animationState&&c.animationState.animateChanges())})),(0,t.useEffect)((()=>{c&&(c.updateFeatures(),!d.current&&c.animationState&&c.animationState.animateChanges(),window.HandoffAppearAnimations=void 0,d.current=!1)})),c}(o,p,u,n);const r=(0,t.useContext)(it),a=(0,t.useContext)(Qe).strict;d.visualElement&&(s=d.visualElement.loadFeatures(u,a,e,r))}return t.createElement($e.Provider,{value:d},s&&d.visualElement?t.createElement(s,{visualElement:d.visualElement,...u}):null,r(o,i,function(e,n,r){return(0,t.useCallback)((t=>{t&&e.mount&&e.mount(t),n&&(t?n.mount(t):n.unmount()),r&&("function"==typeof r?r(t):Ke(r)&&(r.current=t))}),[n])}(p,d.visualElement,l),p,c,d.visualElement))}));return i[lt]=o,i}function ut({layoutId:e}){const n=(0,t.useContext)(ot).id;return n&&void 0!==e?n+"-"+e:e}function ct(e){function t(t,n={}){return st(e(t,n))}if("undefined"==typeof Proxy)return t;const n=new Map;return new Proxy(t,{get:(e,r)=>(n.has(r)||n.set(r,t(r)),n.get(r))})}const dt=["animate","circle","defs","desc","ellipse","g","image","line","filter","marker","mask","metadata","path","pattern","polygon","polyline","rect","stop","switch","symbol","svg","text","tspan","use","view"];function pt(e){return"string"==typeof e&&!e.includes("-")&&!!(dt.indexOf(e)>-1||/[A-Z]/.test(e))}const ft={},mt=["transformPerspective","x","y","z","translateX","translateY","translateZ","scale","scaleX","scaleY","rotate","rotateX","rotateY","rotateZ","skew","skewX","skewY"],ht=new Set(mt);function gt(e,{layout:t,layoutId:n}){return ht.has(e)||e.startsWith("origin")||(t||void 0!==n)&&(!!ft[e]||"opacity"===e)}const vt=e=>Boolean(e&&e.getVelocity),yt={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"},bt=mt.length,xt=e=>t=>"string"==typeof t&&t.startsWith(e),At=xt("--"),Ct=xt("var(--"),Et=(e,t)=>t&&"number"==typeof e?t.transform(e):e,wt=(e,t,n)=>Math.min(Math.max(n,e),t),kt={test:e=>"number"==typeof e,parse:parseFloat,transform:e=>e},St={...kt,transform:e=>wt(0,1,e)},Nt={...kt,default:1},_t=e=>Math.round(1e5*e)/1e5,Pt=/(-)?([\d]*\.?[\d])+/g,Bt=/(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi,Tt=/^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;function Ft(e){return"string"==typeof e}const Rt=e=>({test:t=>Ft(t)&&t.endsWith(e)&&1===t.split(" ").length,parse:parseFloat,transform:t=>`${t}${e}`}),Lt=Rt("deg"),Mt=Rt("%"),Dt=Rt("px"),Ot=Rt("vh"),jt=Rt("vw"),zt={...Mt,parse:e=>Mt.parse(e)/100,transform:e=>Mt.transform(100*e)},Vt={...kt,transform:Math.round},It={borderWidth:Dt,borderTopWidth:Dt,borderRightWidth:Dt,borderBottomWidth:Dt,borderLeftWidth:Dt,borderRadius:Dt,radius:Dt,borderTopLeftRadius:Dt,borderTopRightRadius:Dt,borderBottomRightRadius:Dt,borderBottomLeftRadius:Dt,width:Dt,maxWidth:Dt,height:Dt,maxHeight:Dt,size:Dt,top:Dt,right:Dt,bottom:Dt,left:Dt,padding:Dt,paddingTop:Dt,paddingRight:Dt,paddingBottom:Dt,paddingLeft:Dt,margin:Dt,marginTop:Dt,marginRight:Dt,marginBottom:Dt,marginLeft:Dt,rotate:Lt,rotateX:Lt,rotateY:Lt,rotateZ:Lt,scale:Nt,scaleX:Nt,scaleY:Nt,scaleZ:Nt,skew:Lt,skewX:Lt,skewY:Lt,distance:Dt,translateX:Dt,translateY:Dt,translateZ:Dt,x:Dt,y:Dt,z:Dt,perspective:Dt,transformPerspective:Dt,opacity:St,originX:zt,originY:zt,originZ:Dt,zIndex:Vt,fillOpacity:St,strokeOpacity:St,numOctaves:Vt};function Ut(e,t,n,r){const{style:a,vars:o,transform:i,transformOrigin:l}=e;let s=!1,u=!1,c=!0;for(const e in t){const n=t[e];if(At(e)){o[e]=n;continue}const r=It[e],d=Et(n,r);if(ht.has(e)){if(s=!0,i[e]=d,!c)continue;n!==(r.default||0)&&(c=!1)}else e.startsWith("origin")?(u=!0,l[e]=d):a[e]=d}if(t.transform||(s||r?a.transform=function(e,{enableHardwareAcceleration:t=!0,allowTransformNone:n=!0},r,a){let o="";for(let t=0;t<bt;t++){const n=mt[t];void 0!==e[n]&&(o+=`${yt[n]||n}(${e[n]}) `)}return t&&!e.z&&(o+="translateZ(0)"),o=o.trim(),a?o=a(e,r?"":o):n&&r&&(o="none"),o}(e.transform,n,c,r):a.transform&&(a.transform="none")),u){const{originX:e="50%",originY:t="50%",originZ:n=0}=l;a.transformOrigin=`${e} ${t} ${n}`}}const Wt=()=>({style:{},transform:{},transformOrigin:{},vars:{}});function $t(e,t,n){for(const r in t)vt(t[r])||gt(r,n)||(e[r]=t[r])}function Yt(e,n,r){const a={},o=function(e,n,r){const a={};return $t(a,e.style||{},e),Object.assign(a,function({transformTemplate:e},n,r){return(0,t.useMemo)((()=>{const t=Wt();return Ut(t,n,{enableHardwareAcceleration:!r},e),Object.assign({},t.vars,t.style)}),[n])}(e,n,r)),e.transformValues?e.transformValues(a):a}(e,n,r);return e.drag&&!1!==e.dragListener&&(a.draggable=!1,o.userSelect=o.WebkitUserSelect=o.WebkitTouchCallout="none",o.touchAction=!0===e.drag?"none":"pan-"+("x"===e.drag?"y":"x")),void 0===e.tabIndex&&(e.onTap||e.onTapStart||e.whileTap)&&(a.tabIndex=0),a.style=o,a}const Ht=new Set(["animate","exit","variants","initial","style","values","variants","transition","transformTemplate","transformValues","custom","inherit","onLayoutAnimationStart","onLayoutAnimationComplete","onLayoutMeasure","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","_dragX","_dragY","onHoverStart","onHoverEnd","onViewportEnter","onViewportLeave","ignoreStrict","viewport"]);function qt(e){return e.startsWith("while")||e.startsWith("drag")&&"draggable"!==e||e.startsWith("layout")||e.startsWith("onTap")||e.startsWith("onPan")||Ht.has(e)}let Qt=e=>!qt(e);try{(Kt=require("@emotion/is-prop-valid").default)&&(Qt=e=>e.startsWith("on")?!qt(e):Kt(e))}catch(e){}var Kt;function Zt(e,t,n){return"string"==typeof e?e:Dt.transform(t+n*e)}const Gt={offset:"stroke-dashoffset",array:"stroke-dasharray"},Xt={offset:"strokeDashoffset",array:"strokeDasharray"};function Jt(e,{attrX:t,attrY:n,attrScale:r,originX:a,originY:o,pathLength:i,pathSpacing:l=1,pathOffset:s=0,...u},c,d,p){if(Ut(e,u,c,p),d)return void(e.style.viewBox&&(e.attrs.viewBox=e.style.viewBox));e.attrs=e.style,e.style={};const{attrs:f,style:m,dimensions:h}=e;f.transform&&(h&&(m.transform=f.transform),delete f.transform),h&&(void 0!==a||void 0!==o||m.transform)&&(m.transformOrigin=function(e,t,n){return`${Zt(t,e.x,e.width)} ${Zt(n,e.y,e.height)}`}(h,void 0!==a?a:.5,void 0!==o?o:.5)),void 0!==t&&(f.x=t),void 0!==n&&(f.y=n),void 0!==r&&(f.scale=r),void 0!==i&&function(e,t,n=1,r=0,a=!0){e.pathLength=1;const o=a?Gt:Xt;e[o.offset]=Dt.transform(-r);const i=Dt.transform(t),l=Dt.transform(n);e[o.array]=`${i} ${l}`}(f,i,l,s,!1)}const en=()=>({...Wt(),attrs:{}}),tn=e=>"string"==typeof e&&"svg"===e.toLowerCase();function nn(e,n,r,a){const o=(0,t.useMemo)((()=>{const t=en();return Jt(t,n,{enableHardwareAcceleration:!1},tn(a),e.transformTemplate),{...t.attrs,style:{...t.style}}}),[n]);if(e.style){const t={};$t(t,e.style,e),o.style={...t,...o.style}}return o}function rn(e=!1){return(n,r,a,{latestValues:o},i)=>{const l=(pt(n)?nn:Yt)(r,o,i,n),s=function(e,t,n){const r={};for(const a in e)"values"===a&&"object"==typeof e.values||(Qt(a)||!0===n&&qt(a)||!t&&!qt(a)||e.draggable&&a.startsWith("onDrag"))&&(r[a]=e[a]);return r}(r,"string"==typeof n,e),u={...s,...l,ref:a},{children:c}=r,d=(0,t.useMemo)((()=>vt(c)?c.get():c),[c]);return(0,t.createElement)(n,{...u,children:d})}}const an=e=>e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase();function on(e,{style:t,vars:n},r,a){Object.assign(e.style,t,a&&a.getProjectionStyles(r));for(const t in n)e.style.setProperty(t,n[t])}const ln=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox","gradientTransform","pathLength","startOffset","textLength","lengthAdjust"]);function sn(e,t,n,r){on(e,t,void 0,r);for(const n in t.attrs)e.setAttribute(ln.has(n)?n:an(n),t.attrs[n])}function un(e,t){const{style:n}=e,r={};for(const a in n)(vt(n[a])||t.style&&vt(t.style[a])||gt(a,e))&&(r[a]=n[a]);return r}function cn(e,t){const n=un(e,t);for(const r in e)(vt(e[r])||vt(t[r]))&&(n[-1!==mt.indexOf(r)?"attr"+r.charAt(0).toUpperCase()+r.substring(1):r]=e[r]);return n}function dn(e,t,n,r={},a={}){return"function"==typeof t&&(t=t(void 0!==n?n:e.custom,r,a)),"string"==typeof t&&(t=e.variants&&e.variants[t]),"function"==typeof t&&(t=t(void 0!==n?n:e.custom,r,a)),t}const pn=e=>Array.isArray(e),fn=e=>Boolean(e&&"object"==typeof e&&e.mix&&e.toValue),mn=e=>pn(e)?e[e.length-1]||0:e;function hn(e){const t=vt(e)?e.get():e;return fn(t)?t.toValue():t}const gn=e=>(n,r)=>{const a=(0,t.useContext)($e),o=(0,t.useContext)(Ye),i=()=>function({scrapeMotionValuesFromProps:e,createRenderState:t,onMount:n},r,a,o){const i={latestValues:vn(r,a,o,e),renderState:t()};return n&&(i.mount=e=>n(r,e,i)),i}(e,n,a,o);return r?i():function(e){const n=(0,t.useRef)(null);return null===n.current&&(n.current=e()),n.current}(i)};function vn(e,t,n,r){const a={},o=r(e,{});for(const e in o)a[e]=hn(o[e]);let{initial:i,animate:l}=e;const s=et(e),u=tt(e);t&&u&&!s&&!1!==e.inherit&&(void 0===i&&(i=t.initial),void 0===l&&(l=t.animate));let c=!!n&&!1===n.initial;c=c||!1===i;const d=c?l:i;return d&&"boolean"!=typeof d&&!Ge(d)&&(Array.isArray(d)?d:[d]).forEach((t=>{const n=dn(e,t);if(!n)return;const{transitionEnd:r,transition:o,...i}=n;for(const e in i){let t=i[e];Array.isArray(t)&&(t=t[c?t.length-1:0]),null!==t&&(a[e]=t)}for(const e in r)a[e]=r[e]})),a}const yn=e=>e;class bn{constructor(){this.order=[],this.scheduled=new Set}add(e){if(!this.scheduled.has(e))return this.scheduled.add(e),this.order.push(e),!0}remove(e){const t=this.order.indexOf(e);-1!==t&&(this.order.splice(t,1),this.scheduled.delete(e))}clear(){this.order.length=0,this.scheduled.clear()}}const xn=["prepare","read","update","preRender","render","postRender"],{schedule:An,cancel:Cn,state:En,steps:wn}=function(e,t){let n=!1,r=!0;const a={delta:0,timestamp:0,isProcessing:!1},o=xn.reduce(((e,t)=>(e[t]=function(e){let t=new bn,n=new bn,r=0,a=!1,o=!1;const i=new WeakSet,l={schedule:(e,o=!1,l=!1)=>{const s=l&&a,u=s?t:n;return o&&i.add(e),u.add(e)&&s&&a&&(r=t.order.length),e},cancel:e=>{n.remove(e),i.delete(e)},process:s=>{if(a)o=!0;else{if(a=!0,[t,n]=[n,t],n.clear(),r=t.order.length,r)for(let n=0;n<r;n++){const r=t.order[n];r(s),i.has(r)&&(l.schedule(r),e())}a=!1,o&&(o=!1,l.process(s))}}};return l}((()=>n=!0)),e)),{}),i=e=>o[e].process(a),l=()=>{const t=performance.now();n=!1,a.delta=r?1e3/60:Math.max(Math.min(t-a.timestamp,40),1),a.timestamp=t,a.isProcessing=!0,xn.forEach(i),a.isProcessing=!1,n&&(r=!1,e(l))};return{schedule:xn.reduce(((t,i)=>{const s=o[i];return t[i]=(t,o=!1,i=!1)=>(n||(n=!0,r=!0,a.isProcessing||e(l)),s.schedule(t,o,i)),t}),{}),cancel:e=>xn.forEach((t=>o[t].cancel(e))),state:a,steps:o}}("undefined"!=typeof requestAnimationFrame?requestAnimationFrame:yn),kn={useVisualState:gn({scrapeMotionValuesFromProps:cn,createRenderState:en,onMount:(e,t,{renderState:n,latestValues:r})=>{An.read((()=>{try{n.dimensions="function"==typeof t.getBBox?t.getBBox():t.getBoundingClientRect()}catch(e){n.dimensions={x:0,y:0,width:0,height:0}}})),An.render((()=>{Jt(n,r,{enableHardwareAcceleration:!1},tn(t.tagName),e.transformTemplate),sn(t,n)}))}})},Sn={useVisualState:gn({scrapeMotionValuesFromProps:un,createRenderState:Wt})};function Nn(e,t,n,r={passive:!0}){return e.addEventListener(t,n,r),()=>e.removeEventListener(t,n)}const _n=e=>"mouse"===e.pointerType?"number"!=typeof e.button||e.button<=0:!1!==e.isPrimary;function Pn(e,t="page"){return{point:{x:e[t+"X"],y:e[t+"Y"]}}}const Bn=e=>t=>_n(t)&&e(t,Pn(t));function Tn(e,t,n,r){return Nn(e,t,Bn(n),r)}const Fn=(e,t)=>n=>t(e(n)),Rn=(...e)=>e.reduce(Fn);function Ln(e){let t=null;return()=>null===t&&(t=e,()=>{t=null})}const Mn=Ln("dragHorizontal"),Dn=Ln("dragVertical");function On(e){let t=!1;if("y"===e)t=Dn();else if("x"===e)t=Mn();else{const e=Mn(),n=Dn();e&&n?t=()=>{e(),n()}:(e&&e(),n&&n())}return t}function jn(){const e=On(!0);return!e||(e(),!1)}class zn{constructor(e){this.isMounted=!1,this.node=e}update(){}}function Vn(e,t){const n="pointer"+(t?"enter":"leave"),r="onHover"+(t?"Start":"End");return Tn(e.current,n,((n,a)=>{if("touch"===n.type||jn())return;const o=e.getProps();e.animationState&&o.whileHover&&e.animationState.setActive("whileHover",t),o[r]&&An.update((()=>o[r](n,a)))}),{passive:!e.getProps()[r]})}const In=(e,t)=>!!t&&(e===t||In(e,t.parentElement));function Un(e,t){if(!t)return;const n=new PointerEvent("pointer"+e);t(n,Pn(n))}const Wn=new WeakMap,$n=new WeakMap,Yn=e=>{const t=Wn.get(e.target);t&&t(e)},Hn=e=>{e.forEach(Yn)};const qn={some:0,all:1},Qn={inView:{Feature:class extends zn{constructor(){super(...arguments),this.hasEnteredView=!1,this.isInView=!1}startObserver(){this.unmount();const{viewport:e={}}=this.node.getProps(),{root:t,margin:n,amount:r="some",once:a}=e,o={root:t?t.current:void 0,rootMargin:n,threshold:"number"==typeof r?r:qn[r]};return function(e,t,n){const r=function({root:e,...t}){const n=e||document;$n.has(n)||$n.set(n,{});const r=$n.get(n),a=JSON.stringify(t);return r[a]||(r[a]=new IntersectionObserver(Hn,{root:e,...t})),r[a]}(t);return Wn.set(e,n),r.observe(e),()=>{Wn.delete(e),r.unobserve(e)}}(this.node.current,o,(e=>{const{isIntersecting:t}=e;if(this.isInView===t)return;if(this.isInView=t,a&&!t&&this.hasEnteredView)return;t&&(this.hasEnteredView=!0),this.node.animationState&&this.node.animationState.setActive("whileInView",t);const{onViewportEnter:n,onViewportLeave:r}=this.node.getProps(),o=t?n:r;o&&o(e)}))}mount(){this.startObserver()}update(){if("undefined"==typeof IntersectionObserver)return;const{props:e,prevProps:t}=this.node;["amount","margin","root"].some(function({viewport:e={}},{viewport:t={}}={}){return n=>e[n]!==t[n]}(e,t))&&this.startObserver()}unmount(){}}},tap:{Feature:class extends zn{constructor(){super(...arguments),this.removeStartListeners=yn,this.removeEndListeners=yn,this.removeAccessibleListeners=yn,this.startPointerPress=(e,t)=>{if(this.removeEndListeners(),this.isPressing)return;const n=this.node.getProps(),r=Tn(window,"pointerup",((e,t)=>{if(!this.checkPressEnd())return;const{onTap:n,onTapCancel:r}=this.node.getProps();An.update((()=>{In(this.node.current,e.target)?n&&n(e,t):r&&r(e,t)}))}),{passive:!(n.onTap||n.onPointerUp)}),a=Tn(window,"pointercancel",((e,t)=>this.cancelPress(e,t)),{passive:!(n.onTapCancel||n.onPointerCancel)});this.removeEndListeners=Rn(r,a),this.startPress(e,t)},this.startAccessiblePress=()=>{const e=Nn(this.node.current,"keydown",(e=>{"Enter"!==e.key||this.isPressing||(this.removeEndListeners(),this.removeEndListeners=Nn(this.node.current,"keyup",(e=>{"Enter"===e.key&&this.checkPressEnd()&&Un("up",((e,t)=>{const{onTap:n}=this.node.getProps();n&&An.update((()=>n(e,t)))}))})),Un("down",((e,t)=>{this.startPress(e,t)})))})),t=Nn(this.node.current,"blur",(()=>{this.isPressing&&Un("cancel",((e,t)=>this.cancelPress(e,t)))}));this.removeAccessibleListeners=Rn(e,t)}}startPress(e,t){this.isPressing=!0;const{onTapStart:n,whileTap:r}=this.node.getProps();r&&this.node.animationState&&this.node.animationState.setActive("whileTap",!0),n&&An.update((()=>n(e,t)))}checkPressEnd(){return this.removeEndListeners(),this.isPressing=!1,this.node.getProps().whileTap&&this.node.animationState&&this.node.animationState.setActive("whileTap",!1),!jn()}cancelPress(e,t){if(!this.checkPressEnd())return;const{onTapCancel:n}=this.node.getProps();n&&An.update((()=>n(e,t)))}mount(){const e=this.node.getProps(),t=Tn(this.node.current,"pointerdown",this.startPointerPress,{passive:!(e.onTapStart||e.onPointerStart)}),n=Nn(this.node.current,"focus",this.startAccessiblePress);this.removeStartListeners=Rn(t,n)}unmount(){this.removeStartListeners(),this.removeEndListeners(),this.removeAccessibleListeners()}}},focus:{Feature:class extends zn{constructor(){super(...arguments),this.isActive=!1}onFocus(){let e=!1;try{e=this.node.current.matches(":focus-visible")}catch(t){e=!0}e&&this.node.animationState&&(this.node.animationState.setActive("whileFocus",!0),this.isActive=!0)}onBlur(){this.isActive&&this.node.animationState&&(this.node.animationState.setActive("whileFocus",!1),this.isActive=!1)}mount(){this.unmount=Rn(Nn(this.node.current,"focus",(()=>this.onFocus())),Nn(this.node.current,"blur",(()=>this.onBlur())))}unmount(){}}},hover:{Feature:class extends zn{mount(){this.unmount=Rn(Vn(this.node,!0),Vn(this.node,!1))}unmount(){}}}};function Kn(e,t){if(!Array.isArray(t))return!1;const n=t.length;if(n!==e.length)return!1;for(let r=0;r<n;r++)if(t[r]!==e[r])return!1;return!0}function Zn(e,t,n){const r=e.getProps();return dn(r,t,void 0!==n?n:r.custom,function(e){const t={};return e.values.forEach(((e,n)=>t[n]=e.get())),t}(e),function(e){const t={};return e.values.forEach(((e,n)=>t[n]=e.getVelocity())),t}(e))}const Gn="data-"+an("framerAppearId");let Xn=yn,Jn=yn;const er=e=>1e3*e,tr=e=>e/1e3,nr=e=>Array.isArray(e)&&"number"==typeof e[0];function rr(e){return Boolean(!e||"string"==typeof e&&or[e]||nr(e)||Array.isArray(e)&&e.every(rr))}const ar=([e,t,n,r])=>`cubic-bezier(${e}, ${t}, ${n}, ${r})`,or={linear:"linear",ease:"ease",easeIn:"ease-in",easeOut:"ease-out",easeInOut:"ease-in-out",circIn:ar([0,.65,.55,1]),circOut:ar([.55,0,1,.45]),backIn:ar([.31,.01,.66,-.59]),backOut:ar([.33,1.53,.69,.99])};function ir(e){if(e)return nr(e)?ar(e):Array.isArray(e)?e.map(ir):or[e]}const lr=(e,t,n)=>(((1-3*n+3*t)*e+(3*n-6*t))*e+3*t)*e;function sr(e,t,n,r){if(e===t&&n===r)return yn;return a=>0===a||1===a?a:lr(function(e,t,n,r,a){let o,i,l=0;do{i=t+(n-t)/2,o=lr(i,r,a)-e,o>0?n=i:t=i}while(Math.abs(o)>1e-7&&++l<12);return i}(a,0,1,e,n),t,r)}const ur=sr(.42,0,1,1),cr=sr(0,0,.58,1),dr=sr(.42,0,.58,1),pr=e=>Array.isArray(e)&&"number"!=typeof e[0],fr=e=>t=>t<=.5?e(2*t)/2:(2-e(2*(1-t)))/2,mr=e=>t=>1-e(1-t),hr=e=>1-Math.sin(Math.acos(e)),gr=mr(hr),vr=fr(gr),yr=sr(.33,1.53,.69,.99),br=mr(yr),xr=fr(br),Ar={linear:yn,easeIn:ur,easeInOut:dr,easeOut:cr,circIn:hr,circInOut:vr,circOut:gr,backIn:br,backInOut:xr,backOut:yr,anticipate:e=>(e*=2)<1?.5*br(e):.5*(2-Math.pow(2,-10*(e-1)))},Cr=e=>{if(Array.isArray(e)){Jn(4===e.length,"Cubic bezier arrays must contain four numerical values.");const[t,n,r,a]=e;return sr(t,n,r,a)}return"string"==typeof e?(Jn(void 0!==Ar[e],`Invalid easing type '${e}'`),Ar[e]):e},Er=(e,t)=>n=>Boolean(Ft(n)&&Tt.test(n)&&n.startsWith(e)||t&&Object.prototype.hasOwnProperty.call(n,t)),wr=(e,t,n)=>r=>{if(!Ft(r))return r;const[a,o,i,l]=r.match(Pt);return{[e]:parseFloat(a),[t]:parseFloat(o),[n]:parseFloat(i),alpha:void 0!==l?parseFloat(l):1}},kr={...kt,transform:e=>Math.round((e=>wt(0,255,e))(e))},Sr={test:Er("rgb","red"),parse:wr("red","green","blue"),transform:({red:e,green:t,blue:n,alpha:r=1})=>"rgba("+kr.transform(e)+", "+kr.transform(t)+", "+kr.transform(n)+", "+_t(St.transform(r))+")"},Nr={test:Er("#"),parse:function(e){let t="",n="",r="",a="";return e.length>5?(t=e.substring(1,3),n=e.substring(3,5),r=e.substring(5,7),a=e.substring(7,9)):(t=e.substring(1,2),n=e.substring(2,3),r=e.substring(3,4),a=e.substring(4,5),t+=t,n+=n,r+=r,a+=a),{red:parseInt(t,16),green:parseInt(n,16),blue:parseInt(r,16),alpha:a?parseInt(a,16)/255:1}},transform:Sr.transform},_r={test:Er("hsl","hue"),parse:wr("hue","saturation","lightness"),transform:({hue:e,saturation:t,lightness:n,alpha:r=1})=>"hsla("+Math.round(e)+", "+Mt.transform(_t(t))+", "+Mt.transform(_t(n))+", "+_t(St.transform(r))+")"},Pr={test:e=>Sr.test(e)||Nr.test(e)||_r.test(e),parse:e=>Sr.test(e)?Sr.parse(e):_r.test(e)?_r.parse(e):Nr.parse(e),transform:e=>Ft(e)?e:e.hasOwnProperty("red")?Sr.transform(e):_r.transform(e)},Br=(e,t,n)=>-n*e+n*t+e;function Tr(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}const Fr=(e,t,n)=>{const r=e*e;return Math.sqrt(Math.max(0,n*(t*t-r)+r))},Rr=[Nr,Sr,_r];function Lr(e){const t=(n=e,Rr.find((e=>e.test(n))));var n;Jn(Boolean(t),`'${e}' is not an animatable color. Use the equivalent color code instead.`);let r=t.parse(e);return t===_r&&(r=function({hue:e,saturation:t,lightness:n,alpha:r}){e/=360,n/=100;let a=0,o=0,i=0;if(t/=100){const r=n<.5?n*(1+t):n+t-n*t,l=2*n-r;a=Tr(l,r,e+1/3),o=Tr(l,r,e),i=Tr(l,r,e-1/3)}else a=o=i=n;return{red:Math.round(255*a),green:Math.round(255*o),blue:Math.round(255*i),alpha:r}}(r)),r}const Mr=(e,t)=>{const n=Lr(e),r=Lr(t),a={...n};return e=>(a.red=Fr(n.red,r.red,e),a.green=Fr(n.green,r.green,e),a.blue=Fr(n.blue,r.blue,e),a.alpha=Br(n.alpha,r.alpha,e),Sr.transform(a))},Dr={regex:/var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\)/g,countKey:"Vars",token:"${v}",parse:yn},Or={regex:Bt,countKey:"Colors",token:"${c}",parse:Pr.parse},jr={regex:Pt,countKey:"Numbers",token:"${n}",parse:kt.parse};function zr(e,{regex:t,countKey:n,token:r,parse:a}){const o=e.tokenised.match(t);o&&(e["num"+n]=o.length,e.tokenised=e.tokenised.replace(t,r),e.values.push(...o.map(a)))}function Vr(e){const t=e.toString(),n={value:t,tokenised:t,values:[],numVars:0,numColors:0,numNumbers:0};return n.value.includes("var(--")&&zr(n,Dr),zr(n,Or),zr(n,jr),n}function Ir(e){return Vr(e).values}function Ur(e){const{values:t,numColors:n,numVars:r,tokenised:a}=Vr(e),o=t.length;return e=>{let t=a;for(let a=0;a<o;a++)t=a<r?t.replace(Dr.token,e[a]):a<r+n?t.replace(Or.token,Pr.transform(e[a])):t.replace(jr.token,_t(e[a]));return t}}const Wr=e=>"number"==typeof e?0:e,$r={test:function(e){var t,n;return isNaN(e)&&Ft(e)&&((null===(t=e.match(Pt))||void 0===t?void 0:t.length)||0)+((null===(n=e.match(Bt))||void 0===n?void 0:n.length)||0)>0},parse:Ir,createTransformer:Ur,getAnimatableNone:function(e){const t=Ir(e);return Ur(e)(t.map(Wr))}},Yr=(e,t)=>n=>`${n>0?t:e}`;function Hr(e,t){return"number"==typeof e?n=>Br(e,t,n):Pr.test(e)?Mr(e,t):e.startsWith("var(")?Yr(e,t):Kr(e,t)}const qr=(e,t)=>{const n=[...e],r=n.length,a=e.map(((e,n)=>Hr(e,t[n])));return e=>{for(let t=0;t<r;t++)n[t]=a[t](e);return n}},Qr=(e,t)=>{const n={...e,...t},r={};for(const a in n)void 0!==e[a]&&void 0!==t[a]&&(r[a]=Hr(e[a],t[a]));return e=>{for(const t in r)n[t]=r[t](e);return n}},Kr=(e,t)=>{const n=$r.createTransformer(t),r=Vr(e),a=Vr(t);return r.numVars===a.numVars&&r.numColors===a.numColors&&r.numNumbers>=a.numNumbers?Rn(qr(r.values,a.values),n):(Xn(!0,`Complex values '${e}' and '${t}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`),Yr(e,t))},Zr=(e,t,n)=>{const r=t-e;return 0===r?1:(n-e)/r},Gr=(e,t)=>n=>Br(e,t,n);function Xr(e,t,{clamp:n=!0,ease:r,mixer:a}={}){const o=e.length;if(Jn(o===t.length,"Both input and output ranges must be the same length"),1===o)return()=>t[0];e[0]>e[o-1]&&(e=[...e].reverse(),t=[...t].reverse());const i=function(e,t,n){const r=[],a=n||("number"==typeof(o=e[0])?Gr:"string"==typeof o?Pr.test(o)?Mr:Kr:Array.isArray(o)?qr:"object"==typeof o?Qr:Gr);var o;const i=e.length-1;for(let n=0;n<i;n++){let o=a(e[n],e[n+1]);if(t){const e=Array.isArray(t)?t[n]||yn:t;o=Rn(e,o)}r.push(o)}return r}(t,r,a),l=i.length,s=t=>{let n=0;if(l>1)for(;n<e.length-2&&!(t<e[n+1]);n++);const r=Zr(e[n],e[n+1],t);return i[n](r)};return n?t=>s(wt(e[0],e[o-1],t)):s}function Jr({duration:e=300,keyframes:t,times:n,ease:r="easeInOut"}){const a=pr(r)?r.map(Cr):Cr(r),o={done:!1,value:t[0]},i=function(e,t){return e.map((e=>e*t))}(n&&n.length===t.length?n:function(e){const t=[0];return function(e,t){const n=e[e.length-1];for(let r=1;r<=t;r++){const a=Zr(0,t,r);e.push(Br(n,1,a))}}(t,e.length-1),t}(t),e),l=Xr(i,t,{ease:Array.isArray(a)?a:(s=t,u=a,s.map((()=>u||dr)).splice(0,s.length-1))});var s,u;return{calculatedDuration:e,next:t=>(o.value=l(t),o.done=t>=e,o)}}function ea(e,t){return t?e*(1e3/t):0}const ta=5;function na(e,t,n){const r=Math.max(t-ta,0);return ea(n-e(r),t-r)}const ra=.001,aa=.01,oa=10,ia=.05,la=1;const sa=12;function ua(e,t){return e*Math.sqrt(1-t*t)}const ca=["duration","bounce"],da=["stiffness","damping","mass"];function pa(e,t){return t.some((t=>void 0!==e[t]))}function fa({keyframes:e,restDelta:t,restSpeed:n,...r}){const a=e[0],o=e[e.length-1],i={done:!1,value:a},{stiffness:l,damping:s,mass:u,velocity:c,duration:d,isResolvedFromDuration:p}=function(e){let t={velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1,...e};if(!pa(e,da)&&pa(e,ca)){const n=function({duration:e=800,bounce:t=.25,velocity:n=0,mass:r=1}){let a,o;Xn(e<=er(oa),"Spring duration must be 10 seconds or less");let i=1-t;i=wt(ia,la,i),e=wt(aa,oa,tr(e)),i<1?(a=t=>{const r=t*i,a=r*e,o=r-n,l=ua(t,i),s=Math.exp(-a);return ra-o/l*s},o=t=>{const r=t*i*e,o=r*n+n,l=Math.pow(i,2)*Math.pow(t,2)*e,s=Math.exp(-r),u=ua(Math.pow(t,2),i);return(-a(t)+ra>0?-1:1)*((o-l)*s)/u}):(a=t=>Math.exp(-t*e)*((t-n)*e+1)-ra,o=t=>Math.exp(-t*e)*(e*e*(n-t)));const l=function(e,t,n){let r=n;for(let n=1;n<sa;n++)r-=e(r)/t(r);return r}(a,o,5/e);if(e=er(e),isNaN(l))return{stiffness:100,damping:10,duration:e};{const t=Math.pow(l,2)*r;return{stiffness:t,damping:2*i*Math.sqrt(r*t),duration:e}}}(e);t={...t,...n,velocity:0,mass:1},t.isResolvedFromDuration=!0}return t}(r),f=c?-tr(c):0,m=s/(2*Math.sqrt(l*u)),h=o-a,g=tr(Math.sqrt(l/u)),v=Math.abs(h)<5;let y;if(n||(n=v?.01:2),t||(t=v?.005:.5),m<1){const e=ua(g,m);y=t=>{const n=Math.exp(-m*g*t);return o-n*((f+m*g*h)/e*Math.sin(e*t)+h*Math.cos(e*t))}}else if(1===m)y=e=>o-Math.exp(-g*e)*(h+(f+g*h)*e);else{const e=g*Math.sqrt(m*m-1);y=t=>{const n=Math.exp(-m*g*t),r=Math.min(e*t,300);return o-n*((f+m*g*h)*Math.sinh(r)+e*h*Math.cosh(r))/e}}return{calculatedDuration:p&&d||null,next:e=>{const r=y(e);if(p)i.done=e>=d;else{let a=f;0!==e&&(a=m<1?na(y,e,r):0);const l=Math.abs(a)<=n,s=Math.abs(o-r)<=t;i.done=l&&s}return i.value=i.done?o:r,i}}}function ma({keyframes:e,velocity:t=0,power:n=.8,timeConstant:r=325,bounceDamping:a=10,bounceStiffness:o=500,modifyTarget:i,min:l,max:s,restDelta:u=.5,restSpeed:c}){const d=e[0],p={done:!1,value:d},f=e=>void 0===l?s:void 0===s||Math.abs(l-e)<Math.abs(s-e)?l:s;let m=n*t;const h=d+m,g=void 0===i?h:i(h);g!==h&&(m=g-d);const v=e=>-m*Math.exp(-e/r),y=e=>g+v(e),b=e=>{const t=v(e),n=y(e);p.done=Math.abs(t)<=u,p.value=p.done?g:n};let x,A;const C=e=>{var t;t=p.value,(void 0!==l&&t<l||void 0!==s&&t>s)&&(x=e,A=fa({keyframes:[p.value,f(p.value)],velocity:na(y,e,p.value),damping:a,stiffness:o,restDelta:u,restSpeed:c}))};return C(0),{calculatedDuration:null,next:e=>{let t=!1;return A||void 0!==x||(t=!0,b(e),C(e)),void 0!==x&&e>x?A.next(e-x):(!t&&b(e),p)}}}const ha=e=>{const t=({timestamp:t})=>e(t);return{start:()=>An.update(t,!0),stop:()=>Cn(t),now:()=>En.isProcessing?En.timestamp:performance.now()}},ga=2e4;function va(e){let t=0,n=e.next(t);for(;!n.done&&t<ga;)t+=50,n=e.next(t);return t>=ga?1/0:t}const ya={decay:ma,inertia:ma,tween:Jr,keyframes:Jr,spring:fa};function ba({autoplay:e=!0,delay:t=0,driver:n=ha,keyframes:r,type:a="keyframes",repeat:o=0,repeatDelay:i=0,repeatType:l="loop",onPlay:s,onStop:u,onComplete:c,onUpdate:d,...p}){let f,m,h=1,g=!1;const v=()=>{m=new Promise((e=>{f=e}))};let y;v();const b=ya[a]||Jr;let x;b!==Jr&&"number"!=typeof r[0]&&(x=Xr([0,100],r,{clamp:!1}),r=[0,100]);const A=b({...p,keyframes:r});let C;"mirror"===l&&(C=b({...p,keyframes:[...r].reverse(),velocity:-(p.velocity||0)}));let E="idle",w=null,k=null,S=null;null===A.calculatedDuration&&o&&(A.calculatedDuration=va(A));const{calculatedDuration:N}=A;let _=1/0,P=1/0;null!==N&&(_=N+i,P=_*(o+1)-i);let B=0;const T=e=>{if(null===k)return;h>0&&(k=Math.min(k,e)),h<0&&(k=Math.min(e-P/h,k)),B=null!==w?w:Math.round(e-k)*h;const n=B-t*(h>=0?1:-1),a=h>=0?n<0:n>P;B=Math.max(n,0),"finished"===E&&null===w&&(B=P);let s=B,u=A;if(o){const e=B/_;let t=Math.floor(e),n=e%1;!n&&e>=1&&(n=1),1===n&&t--,t=Math.min(t,o+1);const r=Boolean(t%2);r&&("reverse"===l?(n=1-n,i&&(n-=i/_)):"mirror"===l&&(u=C));let a=wt(0,1,n);B>P&&(a="reverse"===l&&r?1:0),s=a*_}const c=a?{done:!1,value:r[0]}:u.next(s);x&&(c.value=x(c.value));let{done:p}=c;a||null===N||(p=h>=0?B>=P:B<=0);const f=null===w&&("finished"===E||"running"===E&&p);return d&&d(c.value),f&&L(),c},F=()=>{y&&y.stop(),y=void 0},R=()=>{E="idle",F(),f(),v(),k=S=null},L=()=>{E="finished",c&&c(),F(),f()},M=()=>{if(g)return;y||(y=n(T));const e=y.now();s&&s(),null!==w?k=e-w:k&&"finished"!==E||(k=e),"finished"===E&&v(),S=k,w=null,E="running",y.start()};e&&M();const D={then:(e,t)=>m.then(e,t),get time(){return tr(B)},set time(e){e=er(e),B=e,null===w&&y&&0!==h?k=y.now()-e/h:w=e},get duration(){const e=null===A.calculatedDuration?va(A):A.calculatedDuration;return tr(e)},get speed(){return h},set speed(e){e!==h&&y&&(h=e,D.time=tr(B))},get state(){return E},play:M,pause:()=>{E="paused",w=B},stop:()=>{g=!0,"idle"!==E&&(E="idle",u&&u(),R())},cancel:()=>{null!==S&&T(S),R()},complete:()=>{E="finished"},sample:e=>(k=0,T(e))};return D}const xa=function(e){let t;return()=>(void 0===t&&(t=Object.hasOwnProperty.call(Element.prototype,"animate")),t)}(),Aa=new Set(["opacity","clipPath","filter","transform","backgroundColor"]);const Ca={type:"spring",stiffness:500,damping:25,restSpeed:10},Ea={type:"keyframes",duration:.8},wa={type:"keyframes",ease:[.25,.1,.35,1],duration:.3},ka=(e,{keyframes:t})=>t.length>2?Ea:ht.has(e)?e.startsWith("scale")?{type:"spring",stiffness:550,damping:0===t[1]?2*Math.sqrt(550):30,restSpeed:10}:Ca:wa,Sa=(e,t)=>!("zIndex"===e||"number"!=typeof t&&!Array.isArray(t)&&("string"!=typeof t||!$r.test(t)&&"0"!==t||t.startsWith("url("))),Na=new Set(["brightness","contrast","saturate","opacity"]);function _a(e){const[t,n]=e.slice(0,-1).split("(");if("drop-shadow"===t)return e;const[r]=n.match(Pt)||[];if(!r)return e;const a=n.replace(r,"");let o=Na.has(t)?1:0;return r!==n&&(o*=100),t+"("+o+a+")"}const Pa=/([a-z-]*)\(.*?\)/g,Ba={...$r,getAnimatableNone:e=>{const t=e.match(Pa);return t?t.map(_a).join(" "):e}},Ta={...It,color:Pr,backgroundColor:Pr,outlineColor:Pr,fill:Pr,stroke:Pr,borderColor:Pr,borderTopColor:Pr,borderRightColor:Pr,borderBottomColor:Pr,borderLeftColor:Pr,filter:Ba,WebkitFilter:Ba},Fa=e=>Ta[e];function Ra(e,t){let n=Fa(e);return n!==Ba&&(n=$r),n.getAnimatableNone?n.getAnimatableNone(t):void 0}const La=e=>/^0[^.\s]+$/.test(e);function Ma(e){return"number"==typeof e?0===e:null!==e?"none"===e||"0"===e||La(e):void 0}function Da(e,t){return e[t]||e.default||e}const Oa=(e,t,n,r={})=>a=>{const o=Da(r,e)||{},i=o.delay||r.delay||0;let{elapsed:l=0}=r;l-=er(i);const s=function(e,t,n,r){const a=Sa(t,n);let o;o=Array.isArray(n)?[...n]:[null,n];const i=void 0!==r.from?r.from:e.get();let l;const s=[];for(let e=0;e<o.length;e++)null===o[e]&&(o[e]=0===e?i:o[e-1]),Ma(o[e])&&s.push(e),"string"==typeof o[e]&&"none"!==o[e]&&"0"!==o[e]&&(l=o[e]);if(a&&s.length&&l)for(let e=0;e<s.length;e++)o[s[e]]=Ra(t,l);return o}(t,e,n,o),u=s[0],c=s[s.length-1],d=Sa(e,u),p=Sa(e,c);Xn(d===p,`You are trying to animate ${e} from "${u}" to "${c}". ${u} is not an animatable value - to enable this animation set ${u} to a value animatable to ${c} via the \`style\` property.`);let f={keyframes:s,velocity:t.getVelocity(),ease:"easeOut",...o,delay:-l,onUpdate:e=>{t.set(e),o.onUpdate&&o.onUpdate(e)},onComplete:()=>{a(),o.onComplete&&o.onComplete()}};if(function({when:e,delay:t,delayChildren:n,staggerChildren:r,staggerDirection:a,repeat:o,repeatType:i,repeatDelay:l,from:s,elapsed:u,...c}){return!!Object.keys(c).length}(o)||(f={...f,...ka(e,f)}),f.duration&&(f.duration=er(f.duration)),f.repeatDelay&&(f.repeatDelay=er(f.repeatDelay)),!d||!p||!1===o.type)return function({keyframes:e,delay:t,onUpdate:n,onComplete:r}){const a=()=>(n&&n(e[e.length-1]),r&&r(),{time:0,speed:1,duration:0,play:yn,pause:yn,stop:yn,then:e=>(e(),Promise.resolve()),cancel:yn,complete:yn});return t?ba({keyframes:[0,1],duration:0,delay:t,onComplete:a}):a()}(f);if(t.owner&&t.owner.current instanceof HTMLElement&&!t.owner.getProps().onUpdate){const n=function(e,t,{onUpdate:n,onComplete:r,...a}){if(!xa()||!Aa.has(t)||a.repeatDelay||"mirror"===a.repeatType||0===a.damping||"inertia"===a.type)return!1;let o,i,l=!1;const s=()=>{i=new Promise((e=>{o=e}))};s();let{keyframes:u,duration:c=300,ease:d,times:p}=a;if(((e,t)=>"spring"===t.type||"backgroundColor"===e||!rr(t.ease))(t,a)){const e=ba({...a,repeat:0,delay:0});let t={done:!1,value:u[0]};const n=[];let r=0;for(;!t.done&&r<2e4;)t=e.sample(r),n.push(t.value),r+=10;p=void 0,u=n,c=r-10,d="linear"}const f=function(e,t,n,{delay:r=0,duration:a,repeat:o=0,repeatType:i="loop",ease:l,times:s}={}){const u={[t]:n};s&&(u.offset=s);const c=ir(l);return Array.isArray(c)&&(u.easing=c),e.animate(u,{delay:r,duration:a,easing:Array.isArray(c)?"linear":c,fill:"both",iterations:o+1,direction:"reverse"===i?"alternate":"normal"})}(e.owner.current,t,u,{...a,duration:c,ease:d,times:p});a.syncStart&&(f.startTime=En.isProcessing?En.timestamp:document.timeline?document.timeline.currentTime:performance.now());const m=()=>f.cancel(),h=()=>{An.update(m),o(),s()};return f.onfinish=()=>{e.set(function(e,{repeat:t,repeatType:n="loop"}){return e[t&&"loop"!==n&&t%2==1?0:e.length-1]}(u,a)),r&&r(),h()},{then:(e,t)=>i.then(e,t),attachTimeline:e=>(f.timeline=e,f.onfinish=null,yn),get time(){return tr(f.currentTime||0)},set time(e){f.currentTime=er(e)},get speed(){return f.playbackRate},set speed(e){f.playbackRate=e},get duration(){return tr(c)},play:()=>{l||(f.play(),Cn(m))},pause:()=>f.pause(),stop:()=>{if(l=!0,"idle"===f.playState)return;const{currentTime:t}=f;if(t){const n=ba({...a,autoplay:!1});e.setWithVelocity(n.sample(t-10).value,n.sample(t).value,10)}h()},complete:()=>f.finish(),cancel:h}}(t,e,f);if(n)return n}return ba(f)};function ja(e){return Boolean(vt(e)&&e.add)}const za=e=>/^\-?\d*\.?\d+$/.test(e);function Va(e,t){-1===e.indexOf(t)&&e.push(t)}function Ia(e,t){const n=e.indexOf(t);n>-1&&e.splice(n,1)}class Ua{constructor(){this.subscriptions=[]}add(e){return Va(this.subscriptions,e),()=>Ia(this.subscriptions,e)}notify(e,t,n){const r=this.subscriptions.length;if(r)if(1===r)this.subscriptions[0](e,t,n);else for(let a=0;a<r;a++){const r=this.subscriptions[a];r&&r(e,t,n)}}getSize(){return this.subscriptions.length}clear(){this.subscriptions.length=0}}const Wa={current:void 0};class $a{constructor(e,t={}){var n;this.version="10.16.4",this.timeDelta=0,this.lastUpdated=0,this.canTrackVelocity=!1,this.events={},this.updateAndNotify=(e,t=!0)=>{this.prev=this.current,this.current=e;const{delta:n,timestamp:r}=En;this.lastUpdated!==r&&(this.timeDelta=n,this.lastUpdated=r,An.postRender(this.scheduleVelocityCheck)),this.prev!==this.current&&this.events.change&&this.events.change.notify(this.current),this.events.velocityChange&&this.events.velocityChange.notify(this.getVelocity()),t&&this.events.renderRequest&&this.events.renderRequest.notify(this.current)},this.scheduleVelocityCheck=()=>An.postRender(this.velocityCheck),this.velocityCheck=({timestamp:e})=>{e!==this.lastUpdated&&(this.prev=this.current,this.events.velocityChange&&this.events.velocityChange.notify(this.getVelocity()))},this.hasAnimated=!1,this.prev=this.current=e,this.canTrackVelocity=(n=this.current,!isNaN(parseFloat(n))),this.owner=t.owner}onChange(e){return this.on("change",e)}on(e,t){this.events[e]||(this.events[e]=new Ua);const n=this.events[e].add(t);return"change"===e?()=>{n(),An.read((()=>{this.events.change.getSize()||this.stop()}))}:n}clearListeners(){for(const e in this.events)this.events[e].clear()}attach(e,t){this.passiveEffect=e,this.stopPassiveEffect=t}set(e,t=!0){t&&this.passiveEffect?this.passiveEffect(e,this.updateAndNotify):this.updateAndNotify(e,t)}setWithVelocity(e,t,n){this.set(t),this.prev=e,this.timeDelta=n}jump(e){this.updateAndNotify(e),this.prev=e,this.stop(),this.stopPassiveEffect&&this.stopPassiveEffect()}get(){return Wa.current&&Wa.current.push(this),this.current}getPrevious(){return this.prev}getVelocity(){return this.canTrackVelocity?ea(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0}start(e){return this.stop(),new Promise((t=>{this.hasAnimated=!0,this.animation=e(t),this.events.animationStart&&this.events.animationStart.notify()})).then((()=>{this.events.animationComplete&&this.events.animationComplete.notify(),this.clearAnimation()}))}stop(){this.animation&&(this.animation.stop(),this.events.animationCancel&&this.events.animationCancel.notify()),this.clearAnimation()}isAnimating(){return!!this.animation}clearAnimation(){delete this.animation}destroy(){this.clearListeners(),this.stop(),this.stopPassiveEffect&&this.stopPassiveEffect()}}function Ya(e,t){return new $a(e,t)}const Ha=e=>t=>t.test(e),qa=[kt,Dt,Mt,Lt,jt,Ot,{test:e=>"auto"===e,parse:e=>e}],Qa=e=>qa.find(Ha(e)),Ka=[...qa,Pr,$r];function Za(e,t,n){e.hasValue(t)?e.getValue(t).set(n):e.addValue(t,Ya(n))}function Ga(e,t){if(t)return(t[e]||t.default||t).from}function Xa({protectedKeys:e,needsAnimating:t},n){const r=e.hasOwnProperty(n)&&!0!==t[n];return t[n]=!1,r}function Ja(e,t,{delay:n=0,transitionOverride:r,type:a}={}){let{transition:o=e.getDefaultTransition(),transitionEnd:i,...l}=e.makeTargetAnimatable(t);const s=e.getValue("willChange");r&&(o=r);const u=[],c=a&&e.animationState&&e.animationState.getState()[a];for(const t in l){const r=e.getValue(t),a=l[t];if(!r||void 0===a||c&&Xa(c,t))continue;const i={delay:n,elapsed:0,...o};if(window.HandoffAppearAnimations&&!r.hasAnimated){const n=e.getProps()[Gn];n&&(i.elapsed=window.HandoffAppearAnimations(n,t,r,An),i.syncStart=!0)}r.start(Oa(t,r,a,e.shouldReduceMotion&&ht.has(t)?{type:!1}:i));const d=r.animation;ja(s)&&(s.add(t),d.then((()=>s.remove(t)))),u.push(d)}return i&&Promise.all(u).then((()=>{i&&function(e,t){const n=Zn(e,t);let{transitionEnd:r={},transition:a={},...o}=n?e.makeTargetAnimatable(n,!1):{};o={...o,...r};for(const t in o)Za(e,t,mn(o[t]))}(e,i)})),u}function eo(e,t,n={}){const r=Zn(e,t,n.custom);let{transition:a=e.getDefaultTransition()||{}}=r||{};n.transitionOverride&&(a=n.transitionOverride);const o=r?()=>Promise.all(Ja(e,r,n)):()=>Promise.resolve(),i=e.variantChildren&&e.variantChildren.size?(r=0)=>{const{delayChildren:o=0,staggerChildren:i,staggerDirection:l}=a;return function(e,t,n=0,r=0,a=1,o){const i=[],l=(e.variantChildren.size-1)*r,s=1===a?(e=0)=>e*r:(e=0)=>l-e*r;return Array.from(e.variantChildren).sort(to).forEach(((e,r)=>{e.notify("AnimationStart",t),i.push(eo(e,t,{...o,delay:n+s(r)}).then((()=>e.notify("AnimationComplete",t))))})),Promise.all(i)}(e,t,o+r,i,l,n)}:()=>Promise.resolve(),{when:l}=a;if(l){const[e,t]="beforeChildren"===l?[o,i]:[i,o];return e().then((()=>t()))}return Promise.all([o(),i(n.delay)])}function to(e,t){return e.sortNodePosition(t)}const no=[...Xe].reverse(),ro=Xe.length;function ao(e){let t=function(e){return t=>Promise.all(t.map((({animation:t,options:n})=>function(e,t,n={}){let r;if(e.notify("AnimationStart",t),Array.isArray(t)){const a=t.map((t=>eo(e,t,n)));r=Promise.all(a)}else if("string"==typeof t)r=eo(e,t,n);else{const a="function"==typeof t?Zn(e,t,n.custom):t;r=Promise.all(Ja(e,a,n))}return r.then((()=>e.notify("AnimationComplete",t)))}(e,t,n))))}(e);const n={animate:oo(!0),whileInView:oo(),whileHover:oo(),whileTap:oo(),whileDrag:oo(),whileFocus:oo(),exit:oo()};let r=!0;const a=(t,n)=>{const r=Zn(e,n);if(r){const{transition:e,transitionEnd:n,...a}=r;t={...t,...a,...n}}return t};function o(o,i){const l=e.getProps(),s=e.getVariantContext(!0)||{},u=[],c=new Set;let d={},p=1/0;for(let t=0;t<ro;t++){const h=no[t],g=n[h],v=void 0!==l[h]?l[h]:s[h],y=Ze(v),b=h===i?g.isActive:null;!1===b&&(p=t);let x=v===s[h]&&v!==l[h]&&y;if(x&&r&&e.manuallyAnimateOnMount&&(x=!1),g.protectedKeys={...d},!g.isActive&&null===b||!v&&!g.prevProp||Ge(v)||"boolean"==typeof v)continue;const A=(f=g.prevProp,"string"==typeof(m=v)?m!==f:!!Array.isArray(m)&&!Kn(m,f));let C=A||h===i&&g.isActive&&!x&&y||t>p&&y;const E=Array.isArray(v)?v:[v];let w=E.reduce(a,{});!1===b&&(w={});const{prevResolvedValues:k={}}=g,S={...k,...w},N=e=>{C=!0,c.delete(e),g.needsAnimating[e]=!0};for(const e in S){const t=w[e],n=k[e];d.hasOwnProperty(e)||(t!==n?pn(t)&&pn(n)?!Kn(t,n)||A?N(e):g.protectedKeys[e]=!0:void 0!==t?N(e):c.add(e):void 0!==t&&c.has(e)?N(e):g.protectedKeys[e]=!0)}g.prevProp=v,g.prevResolvedValues=w,g.isActive&&(d={...d,...w}),r&&e.blockInitialAnimation&&(C=!1),C&&!x&&u.push(...E.map((e=>({animation:e,options:{type:h,...o}}))))}var f,m;if(c.size){const t={};c.forEach((n=>{const r=e.getBaseTarget(n);void 0!==r&&(t[n]=r)})),u.push({animation:t})}let h=Boolean(u.length);return r&&!1===l.initial&&!e.manuallyAnimateOnMount&&(h=!1),r=!1,h?t(u):Promise.resolve()}return{animateChanges:o,setActive:function(t,r,a){var i;if(n[t].isActive===r)return Promise.resolve();null===(i=e.variantChildren)||void 0===i||i.forEach((e=>{var n;return null===(n=e.animationState)||void 0===n?void 0:n.setActive(t,r)})),n[t].isActive=r;const l=o(a,t);for(const e in n)n[e].protectedKeys={};return l},setAnimateFunction:function(n){t=n(e)},getState:()=>n}}function oo(e=!1){return{isActive:e,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}let io=0;const lo={animation:{Feature:class extends zn{constructor(e){super(e),e.animationState||(e.animationState=ao(e))}updateAnimationControlsSubscription(){const{animate:e}=this.node.getProps();this.unmount(),Ge(e)&&(this.unmount=e.subscribe(this.node))}mount(){this.updateAnimationControlsSubscription()}update(){const{animate:e}=this.node.getProps(),{animate:t}=this.node.prevProps||{};e!==t&&this.updateAnimationControlsSubscription()}unmount(){}}},exit:{Feature:class extends zn{constructor(){super(...arguments),this.id=io++}update(){if(!this.node.presenceContext)return;const{isPresent:e,onExitComplete:t,custom:n}=this.node.presenceContext,{isPresent:r}=this.node.prevPresenceContext||{};if(!this.node.animationState||e===r)return;const a=this.node.animationState.setActive("exit",!e,{custom:null!=n?n:this.node.getProps().custom});t&&!e&&a.then((()=>t(this.id)))}mount(){const{register:e}=this.node.presenceContext||{};e&&(this.unmount=e(this.id))}unmount(){}}}},so=(e,t)=>Math.abs(e-t);class uo{constructor(e,t,{transformPagePoint:n}={}){if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.updatePoint=()=>{if(!this.lastMoveEvent||!this.lastMoveEventInfo)return;const e=fo(this.lastMoveEventInfo,this.history),t=null!==this.startEvent,n=function(e,t){const n=so(e.x,t.x),r=so(e.y,t.y);return Math.sqrt(n**2+r**2)}(e.offset,{x:0,y:0})>=3;if(!t&&!n)return;const{point:r}=e,{timestamp:a}=En;this.history.push({...r,timestamp:a});const{onStart:o,onMove:i}=this.handlers;t||(o&&o(this.lastMoveEvent,e),this.startEvent=this.lastMoveEvent),i&&i(this.lastMoveEvent,e)},this.handlePointerMove=(e,t)=>{this.lastMoveEvent=e,this.lastMoveEventInfo=co(t,this.transformPagePoint),An.update(this.updatePoint,!0)},this.handlePointerUp=(e,t)=>{if(this.end(),!this.lastMoveEvent||!this.lastMoveEventInfo)return;const{onEnd:n,onSessionEnd:r}=this.handlers,a=fo("pointercancel"===e.type?this.lastMoveEventInfo:co(t,this.transformPagePoint),this.history);this.startEvent&&n&&n(e,a),r&&r(e,a)},!_n(e))return;this.handlers=t,this.transformPagePoint=n;const r=co(Pn(e),this.transformPagePoint),{point:a}=r,{timestamp:o}=En;this.history=[{...a,timestamp:o}];const{onSessionStart:i}=t;i&&i(e,fo(r,this.history)),this.removeListeners=Rn(Tn(window,"pointermove",this.handlePointerMove),Tn(window,"pointerup",this.handlePointerUp),Tn(window,"pointercancel",this.handlePointerUp))}updateHandlers(e){this.handlers=e}end(){this.removeListeners&&this.removeListeners(),Cn(this.updatePoint)}}function co(e,t){return t?{point:t(e.point)}:e}function po(e,t){return{x:e.x-t.x,y:e.y-t.y}}function fo({point:e},t){return{point:e,delta:po(e,ho(t)),offset:po(e,mo(t)),velocity:go(t,.1)}}function mo(e){return e[0]}function ho(e){return e[e.length-1]}function go(e,t){if(e.length<2)return{x:0,y:0};let n=e.length-1,r=null;const a=ho(e);for(;n>=0&&(r=e[n],!(a.timestamp-r.timestamp>er(t)));)n--;if(!r)return{x:0,y:0};const o=tr(a.timestamp-r.timestamp);if(0===o)return{x:0,y:0};const i={x:(a.x-r.x)/o,y:(a.y-r.y)/o};return i.x===1/0&&(i.x=0),i.y===1/0&&(i.y=0),i}function vo(e){return e.max-e.min}function yo(e,t=0,n=.01){return Math.abs(e-t)<=n}function bo(e,t,n,r=.5){e.origin=r,e.originPoint=Br(t.min,t.max,e.origin),e.scale=vo(n)/vo(t),(yo(e.scale,1,1e-4)||isNaN(e.scale))&&(e.scale=1),e.translate=Br(n.min,n.max,e.origin)-e.originPoint,(yo(e.translate)||isNaN(e.translate))&&(e.translate=0)}function xo(e,t,n,r){bo(e.x,t.x,n.x,r?r.originX:void 0),bo(e.y,t.y,n.y,r?r.originY:void 0)}function Ao(e,t,n){e.min=n.min+t.min,e.max=e.min+vo(t)}function Co(e,t,n){e.min=t.min-n.min,e.max=e.min+vo(t)}function Eo(e,t,n){Co(e.x,t.x,n.x),Co(e.y,t.y,n.y)}function wo(e,t,n){return{min:void 0!==t?e.min+t:void 0,max:void 0!==n?e.max+n-(e.max-e.min):void 0}}function ko(e,t){let n=t.min-e.min,r=t.max-e.max;return t.max-t.min<e.max-e.min&&([n,r]=[r,n]),{min:n,max:r}}const So=.35;function No(e,t,n){return{min:_o(e,t),max:_o(e,n)}}function _o(e,t){return"number"==typeof e?e:e[t]||0}const Po=()=>({x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}}),Bo=()=>({x:{min:0,max:0},y:{min:0,max:0}});function To(e){return[e("x"),e("y")]}function Fo({top:e,left:t,right:n,bottom:r}){return{x:{min:t,max:n},y:{min:e,max:r}}}function Ro(e){return void 0===e||1===e}function Lo({scale:e,scaleX:t,scaleY:n}){return!Ro(e)||!Ro(t)||!Ro(n)}function Mo(e){return Lo(e)||Do(e)||e.z||e.rotate||e.rotateX||e.rotateY}function Do(e){return Oo(e.x)||Oo(e.y)}function Oo(e){return e&&"0%"!==e}function jo(e,t,n){return n+t*(e-n)}function zo(e,t,n,r,a){return void 0!==a&&(e=jo(e,a,r)),jo(e,n,r)+t}function Vo(e,t=0,n=1,r,a){e.min=zo(e.min,t,n,r,a),e.max=zo(e.max,t,n,r,a)}function Io(e,{x:t,y:n}){Vo(e.x,t.translate,t.scale,t.originPoint),Vo(e.y,n.translate,n.scale,n.originPoint)}function Uo(e){return Number.isInteger(e)||e>1.0000000000001||e<.999999999999?e:1}function Wo(e,t){e.min=e.min+t,e.max=e.max+t}function $o(e,t,[n,r,a]){const o=void 0!==t[a]?t[a]:.5,i=Br(e.min,e.max,o);Vo(e,t[n],t[r],i,t.scale)}const Yo=["x","scaleX","originX"],Ho=["y","scaleY","originY"];function qo(e,t){$o(e.x,t,Yo),$o(e.y,t,Ho)}function Qo(e,t){return Fo(function(e,t){if(!t)return e;const n=t({x:e.left,y:e.top}),r=t({x:e.right,y:e.bottom});return{top:n.y,left:n.x,bottom:r.y,right:r.x}}(e.getBoundingClientRect(),t))}const Ko=new WeakMap;class Zo{constructor(e){this.openGlobalLock=null,this.isDragging=!1,this.currentDirection=null,this.originPoint={x:0,y:0},this.constraints=!1,this.hasMutatedConstraints=!1,this.elastic=Bo(),this.visualElement=e}start(e,{snapToCursor:t=!1}={}){const{presenceContext:n}=this.visualElement;n&&!1===n.isPresent||(this.panSession=new uo(e,{onSessionStart:e=>{this.stopAnimation(),t&&this.snapToCursor(Pn(e,"page").point)},onStart:(e,t)=>{const{drag:n,dragPropagation:r,onDragStart:a}=this.getProps();if(n&&!r&&(this.openGlobalLock&&this.openGlobalLock(),this.openGlobalLock=On(n),!this.openGlobalLock))return;this.isDragging=!0,this.currentDirection=null,this.resolveConstraints(),this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!0,this.visualElement.projection.target=void 0),To((e=>{let t=this.getAxisMotionValue(e).get()||0;if(Mt.test(t)){const{projection:n}=this.visualElement;if(n&&n.layout){const r=n.layout.layoutBox[e];r&&(t=vo(r)*(parseFloat(t)/100))}}this.originPoint[e]=t})),a&&An.update((()=>a(e,t)),!1,!0);const{animationState:o}=this.visualElement;o&&o.setActive("whileDrag",!0)},onMove:(e,t)=>{const{dragPropagation:n,dragDirectionLock:r,onDirectionLock:a,onDrag:o}=this.getProps();if(!n&&!this.openGlobalLock)return;const{offset:i}=t;if(r&&null===this.currentDirection)return this.currentDirection=function(e,t=10){let n=null;return Math.abs(e.y)>t?n="y":Math.abs(e.x)>t&&(n="x"),n}(i),void(null!==this.currentDirection&&a&&a(this.currentDirection));this.updateAxis("x",t.point,i),this.updateAxis("y",t.point,i),this.visualElement.render(),o&&o(e,t)},onSessionEnd:(e,t)=>this.stop(e,t)},{transformPagePoint:this.visualElement.getTransformPagePoint()}))}stop(e,t){const n=this.isDragging;if(this.cancel(),!n)return;const{velocity:r}=t;this.startAnimation(r);const{onDragEnd:a}=this.getProps();a&&An.update((()=>a(e,t)))}cancel(){this.isDragging=!1;const{projection:e,animationState:t}=this.visualElement;e&&(e.isAnimationBlocked=!1),this.panSession&&this.panSession.end(),this.panSession=void 0;const{dragPropagation:n}=this.getProps();!n&&this.openGlobalLock&&(this.openGlobalLock(),this.openGlobalLock=null),t&&t.setActive("whileDrag",!1)}updateAxis(e,t,n){const{drag:r}=this.getProps();if(!n||!Go(e,r,this.currentDirection))return;const a=this.getAxisMotionValue(e);let o=this.originPoint[e]+n[e];this.constraints&&this.constraints[e]&&(o=function(e,{min:t,max:n},r){return void 0!==t&&e<t?e=r?Br(t,e,r.min):Math.max(e,t):void 0!==n&&e>n&&(e=r?Br(n,e,r.max):Math.min(e,n)),e}(o,this.constraints[e],this.elastic[e])),a.set(o)}resolveConstraints(){const{dragConstraints:e,dragElastic:t}=this.getProps(),{layout:n}=this.visualElement.projection||{},r=this.constraints;e&&Ke(e)?this.constraints||(this.constraints=this.resolveRefConstraints()):this.constraints=!(!e||!n)&&function(e,{top:t,left:n,bottom:r,right:a}){return{x:wo(e.x,n,a),y:wo(e.y,t,r)}}(n.layoutBox,e),this.elastic=function(e=So){return!1===e?e=0:!0===e&&(e=So),{x:No(e,"left","right"),y:No(e,"top","bottom")}}(t),r!==this.constraints&&n&&this.constraints&&!this.hasMutatedConstraints&&To((e=>{this.getAxisMotionValue(e)&&(this.constraints[e]=function(e,t){const n={};return void 0!==t.min&&(n.min=t.min-e.min),void 0!==t.max&&(n.max=t.max-e.min),n}(n.layoutBox[e],this.constraints[e]))}))}resolveRefConstraints(){const{dragConstraints:e,onMeasureDragConstraints:t}=this.getProps();if(!e||!Ke(e))return!1;const n=e.current;Jn(null!==n,"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");const{projection:r}=this.visualElement;if(!r||!r.layout)return!1;const a=function(e,t,n){const r=Qo(e,n),{scroll:a}=t;return a&&(Wo(r.x,a.offset.x),Wo(r.y,a.offset.y)),r}(n,r.root,this.visualElement.getTransformPagePoint());let o=function(e,t){return{x:ko(e.x,t.x),y:ko(e.y,t.y)}}(r.layout.layoutBox,a);if(t){const e=t(function({x:e,y:t}){return{top:t.min,right:e.max,bottom:t.max,left:e.min}}(o));this.hasMutatedConstraints=!!e,e&&(o=Fo(e))}return o}startAnimation(e){const{drag:t,dragMomentum:n,dragElastic:r,dragTransition:a,dragSnapToOrigin:o,onDragTransitionEnd:i}=this.getProps(),l=this.constraints||{},s=To((i=>{if(!Go(i,t,this.currentDirection))return;let s=l&&l[i]||{};o&&(s={min:0,max:0});const u=r?200:1e6,c=r?40:1e7,d={type:"inertia",velocity:n?e[i]:0,bounceStiffness:u,bounceDamping:c,timeConstant:750,restDelta:1,restSpeed:10,...a,...s};return this.startAxisValueAnimation(i,d)}));return Promise.all(s).then(i)}startAxisValueAnimation(e,t){const n=this.getAxisMotionValue(e);return n.start(Oa(e,n,0,t))}stopAnimation(){To((e=>this.getAxisMotionValue(e).stop()))}getAxisMotionValue(e){const t="_drag"+e.toUpperCase(),n=this.visualElement.getProps();return n[t]||this.visualElement.getValue(e,(n.initial?n.initial[e]:void 0)||0)}snapToCursor(e){To((t=>{const{drag:n}=this.getProps();if(!Go(t,n,this.currentDirection))return;const{projection:r}=this.visualElement,a=this.getAxisMotionValue(t);if(r&&r.layout){const{min:n,max:o}=r.layout.layoutBox[t];a.set(e[t]-Br(n,o,.5))}}))}scalePositionWithinConstraints(){if(!this.visualElement.current)return;const{drag:e,dragConstraints:t}=this.getProps(),{projection:n}=this.visualElement;if(!Ke(t)||!n||!this.constraints)return;this.stopAnimation();const r={x:0,y:0};To((e=>{const t=this.getAxisMotionValue(e);if(t){const n=t.get();r[e]=function(e,t){let n=.5;const r=vo(e),a=vo(t);return a>r?n=Zr(t.min,t.max-r,e.min):r>a&&(n=Zr(e.min,e.max-a,t.min)),wt(0,1,n)}({min:n,max:n},this.constraints[e])}}));const{transformTemplate:a}=this.visualElement.getProps();this.visualElement.current.style.transform=a?a({},""):"none",n.root&&n.root.updateScroll(),n.updateLayout(),this.resolveConstraints(),To((t=>{if(!Go(t,e,null))return;const n=this.getAxisMotionValue(t),{min:a,max:o}=this.constraints[t];n.set(Br(a,o,r[t]))}))}addListeners(){if(!this.visualElement.current)return;Ko.set(this.visualElement,this);const e=Tn(this.visualElement.current,"pointerdown",(e=>{const{drag:t,dragListener:n=!0}=this.getProps();t&&n&&this.start(e)})),t=()=>{const{dragConstraints:e}=this.getProps();Ke(e)&&(this.constraints=this.resolveRefConstraints())},{projection:n}=this.visualElement,r=n.addEventListener("measure",t);n&&!n.layout&&(n.root&&n.root.updateScroll(),n.updateLayout()),t();const a=Nn(window,"resize",(()=>this.scalePositionWithinConstraints())),o=n.addEventListener("didUpdate",(({delta:e,hasLayoutChanged:t})=>{this.isDragging&&t&&(To((t=>{const n=this.getAxisMotionValue(t);n&&(this.originPoint[t]+=e[t].translate,n.set(n.get()+e[t].translate))})),this.visualElement.render())}));return()=>{a(),e(),r(),o&&o()}}getProps(){const e=this.visualElement.getProps(),{drag:t=!1,dragDirectionLock:n=!1,dragPropagation:r=!1,dragConstraints:a=!1,dragElastic:o=So,dragMomentum:i=!0}=e;return{...e,drag:t,dragDirectionLock:n,dragPropagation:r,dragConstraints:a,dragElastic:o,dragMomentum:i}}}function Go(e,t,n){return!(!0!==t&&t!==e||null!==n&&n!==e)}const Xo=e=>(t,n)=>{e&&An.update((()=>e(t,n)))},Jo={hasAnimatedSinceResize:!0,hasEverUpdated:!1};function ei(e,t){return t.max===t.min?0:e/(t.max-t.min)*100}const ti={correct:(e,t)=>{if(!t.target)return e;if("string"==typeof e){if(!Dt.test(e))return e;e=parseFloat(e)}return`${ei(e,t.target.x)}% ${ei(e,t.target.y)}%`}},ni={correct:(e,{treeScale:t,projectionDelta:n})=>{const r=e,a=$r.parse(e);if(a.length>5)return r;const o=$r.createTransformer(e),i="number"!=typeof a[0]?1:0,l=n.x.scale*t.x,s=n.y.scale*t.y;a[0+i]/=l,a[1+i]/=s;const u=Br(l,s,.5);return"number"==typeof a[2+i]&&(a[2+i]/=u),"number"==typeof a[3+i]&&(a[3+i]/=u),o(a)}};class ri extends t.Component{componentDidMount(){const{visualElement:e,layoutGroup:t,switchLayoutGroup:n,layoutId:r}=this.props,{projection:a}=e;var o;o=oi,Object.assign(ft,o),a&&(t.group&&t.group.add(a),n&&n.register&&r&&n.register(a),a.root.didUpdate(),a.addEventListener("animationComplete",(()=>{this.safeToRemove()})),a.setOptions({...a.options,onExitComplete:()=>this.safeToRemove()})),Jo.hasEverUpdated=!0}getSnapshotBeforeUpdate(e){const{layoutDependency:t,visualElement:n,drag:r,isPresent:a}=this.props,o=n.projection;return o?(o.isPresent=a,r||e.layoutDependency!==t||void 0===t?o.willUpdate():this.safeToRemove(),e.isPresent!==a&&(a?o.promote():o.relegate()||An.postRender((()=>{const e=o.getStack();e&&e.members.length||this.safeToRemove()}))),null):null}componentDidUpdate(){const{projection:e}=this.props.visualElement;e&&(e.root.didUpdate(),queueMicrotask((()=>{!e.currentAnimation&&e.isLead()&&this.safeToRemove()})))}componentWillUnmount(){const{visualElement:e,layoutGroup:t,switchLayoutGroup:n}=this.props,{projection:r}=e;r&&(r.scheduleCheckAfterUnmount(),t&&t.group&&t.group.remove(r),n&&n.deregister&&n.deregister(r))}safeToRemove(){const{safeToRemove:e}=this.props;e&&e()}render(){return null}}function ai(e){const[n,r]=function(){const e=(0,t.useContext)(Ye);if(null===e)return[!0,null];const{isPresent:n,onExitComplete:r,register:a}=e,o=(0,t.useId)();return(0,t.useEffect)((()=>a(o)),[]),!n&&r?[!1,()=>r&&r(o)]:[!0]}(),a=(0,t.useContext)(ot);return t.createElement(ri,{...e,layoutGroup:a,switchLayoutGroup:(0,t.useContext)(it),isPresent:n,safeToRemove:r})}const oi={borderRadius:{...ti,applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]},borderTopLeftRadius:ti,borderTopRightRadius:ti,borderBottomLeftRadius:ti,borderBottomRightRadius:ti,boxShadow:ni},ii=["TopLeft","TopRight","BottomLeft","BottomRight"],li=ii.length,si=e=>"string"==typeof e?parseFloat(e):e,ui=e=>"number"==typeof e||Dt.test(e);function ci(e,t){return void 0!==e[t]?e[t]:e.borderRadius}const di=fi(0,.5,gr),pi=fi(.5,.95,yn);function fi(e,t,n){return r=>r<e?0:r>t?1:n(Zr(e,t,r))}function mi(e,t){e.min=t.min,e.max=t.max}function hi(e,t){mi(e.x,t.x),mi(e.y,t.y)}function gi(e,t,n,r,a){return e=jo(e-=t,1/n,r),void 0!==a&&(e=jo(e,1/a,r)),e}function vi(e,t,[n,r,a],o,i){!function(e,t=0,n=1,r=.5,a,o=e,i=e){if(Mt.test(t)&&(t=parseFloat(t),t=Br(i.min,i.max,t/100)-i.min),"number"!=typeof t)return;let l=Br(o.min,o.max,r);e===o&&(l-=t),e.min=gi(e.min,t,n,l,a),e.max=gi(e.max,t,n,l,a)}(e,t[n],t[r],t[a],t.scale,o,i)}const yi=["x","scaleX","originX"],bi=["y","scaleY","originY"];function xi(e,t,n,r){vi(e.x,t,yi,n?n.x:void 0,r?r.x:void 0),vi(e.y,t,bi,n?n.y:void 0,r?r.y:void 0)}function Ai(e){return 0===e.translate&&1===e.scale}function Ci(e){return Ai(e.x)&&Ai(e.y)}function Ei(e,t){return Math.round(e.x.min)===Math.round(t.x.min)&&Math.round(e.x.max)===Math.round(t.x.max)&&Math.round(e.y.min)===Math.round(t.y.min)&&Math.round(e.y.max)===Math.round(t.y.max)}function wi(e){return vo(e.x)/vo(e.y)}class ki{constructor(){this.members=[]}add(e){Va(this.members,e),e.scheduleRender()}remove(e){if(Ia(this.members,e),e===this.prevLead&&(this.prevLead=void 0),e===this.lead){const e=this.members[this.members.length-1];e&&this.promote(e)}}relegate(e){const t=this.members.findIndex((t=>e===t));if(0===t)return!1;let n;for(let e=t;e>=0;e--){const t=this.members[e];if(!1!==t.isPresent){n=t;break}}return!!n&&(this.promote(n),!0)}promote(e,t){const n=this.lead;if(e!==n&&(this.prevLead=n,this.lead=e,e.show(),n)){n.instance&&n.scheduleRender(),e.scheduleRender(),e.resumeFrom=n,t&&(e.resumeFrom.preserveOpacity=!0),n.snapshot&&(e.snapshot=n.snapshot,e.snapshot.latestValues=n.animationValues||n.latestValues),e.root&&e.root.isUpdating&&(e.isLayoutDirty=!0);const{crossfade:r}=e.options;!1===r&&n.hide()}}exitAnimationComplete(){this.members.forEach((e=>{const{options:t,resumingFrom:n}=e;t.onExitComplete&&t.onExitComplete(),n&&n.options.onExitComplete&&n.options.onExitComplete()}))}scheduleRender(){this.members.forEach((e=>{e.instance&&e.scheduleRender(!1)}))}removeLeadSnapshot(){this.lead&&this.lead.snapshot&&(this.lead.snapshot=void 0)}}function Si(e,t,n){let r="";const a=e.x.translate/t.x,o=e.y.translate/t.y;if((a||o)&&(r=`translate3d(${a}px, ${o}px, 0) `),1===t.x&&1===t.y||(r+=`scale(${1/t.x}, ${1/t.y}) `),n){const{rotate:e,rotateX:t,rotateY:a}=n;e&&(r+=`rotate(${e}deg) `),t&&(r+=`rotateX(${t}deg) `),a&&(r+=`rotateY(${a}deg) `)}const i=e.x.scale*t.x,l=e.y.scale*t.y;return 1===i&&1===l||(r+=`scale(${i}, ${l})`),r||"none"}const Ni=(e,t)=>e.depth-t.depth;class _i{constructor(){this.children=[],this.isDirty=!1}add(e){Va(this.children,e),this.isDirty=!0}remove(e){Ia(this.children,e),this.isDirty=!0}forEach(e){this.isDirty&&this.children.sort(Ni),this.isDirty=!1,this.children.forEach(e)}}const Pi=["","X","Y","Z"];let Bi=0;const Ti={type:"projectionFrame",totalNodes:0,resolvedTargetDeltas:0,recalculatedProjection:0};function Fi({attachResizeListener:e,defaultParent:t,measureScroll:n,checkIsScrollRoot:r,resetTransform:a}){return class{constructor(e={},n=(null==t?void 0:t())){this.id=Bi++,this.animationId=0,this.children=new Set,this.options={},this.isTreeAnimating=!1,this.isAnimationBlocked=!1,this.isLayoutDirty=!1,this.isProjectionDirty=!1,this.isSharedProjectionDirty=!1,this.isTransformDirty=!1,this.updateManuallyBlocked=!1,this.updateBlockedByResize=!1,this.isUpdating=!1,this.isSVG=!1,this.needsReset=!1,this.shouldResetTransform=!1,this.treeScale={x:1,y:1},this.eventHandlers=new Map,this.hasTreeAnimated=!1,this.updateScheduled=!1,this.checkUpdateFailed=()=>{this.isUpdating&&(this.isUpdating=!1,this.clearAllSnapshots())},this.updateProjection=()=>{var e;Ti.totalNodes=Ti.resolvedTargetDeltas=Ti.recalculatedProjection=0,this.nodes.forEach(Mi),this.nodes.forEach(Ui),this.nodes.forEach(Wi),this.nodes.forEach(Di),e=Ti,window.MotionDebug&&window.MotionDebug.record(e)},this.hasProjected=!1,this.isVisible=!0,this.animationProgress=0,this.sharedNodes=new Map,this.latestValues=e,this.root=n?n.root||n:this,this.path=n?[...n.path,n]:[],this.parent=n,this.depth=n?n.depth+1:0;for(let e=0;e<this.path.length;e++)this.path[e].shouldResetTransform=!0;this.root===this&&(this.nodes=new _i)}addEventListener(e,t){return this.eventHandlers.has(e)||this.eventHandlers.set(e,new Ua),this.eventHandlers.get(e).add(t)}notifyListeners(e,...t){const n=this.eventHandlers.get(e);n&&n.notify(...t)}hasListeners(e){return this.eventHandlers.has(e)}mount(t,n=this.root.hasTreeAnimated){if(this.instance)return;var r;this.isSVG=(r=t)instanceof SVGElement&&"svg"!==r.tagName,this.instance=t;const{layoutId:a,layout:o,visualElement:i}=this.options;if(i&&!i.current&&i.mount(t),this.root.nodes.add(this),this.parent&&this.parent.children.add(this),n&&(o||a)&&(this.isLayoutDirty=!0),e){let n;const r=()=>this.root.updateBlockedByResize=!1;e(t,(()=>{this.root.updateBlockedByResize=!0,n&&n(),n=function(e,t){const n=performance.now(),r=({timestamp:t})=>{const a=t-n;a>=250&&(Cn(r),e(a-250))};return An.read(r,!0),()=>Cn(r)}(r),Jo.hasAnimatedSinceResize&&(Jo.hasAnimatedSinceResize=!1,this.nodes.forEach(Ii))}))}a&&this.root.registerSharedNode(a,this),!1!==this.options.animate&&i&&(a||o)&&this.addEventListener("didUpdate",(({delta:e,hasLayoutChanged:t,hasRelativeTargetChanged:n,layout:r})=>{if(this.isTreeAnimationBlocked())return this.target=void 0,void(this.relativeTarget=void 0);const a=this.options.transition||i.getDefaultTransition()||Ki,{onLayoutAnimationStart:o,onLayoutAnimationComplete:l}=i.getProps(),s=!this.targetLayout||!Ei(this.targetLayout,r)||n,u=!t&&n;if(this.options.layoutRoot||this.resumeFrom&&this.resumeFrom.instance||u||t&&(s||!this.currentAnimation)){this.resumeFrom&&(this.resumingFrom=this.resumeFrom,this.resumingFrom.resumingFrom=void 0),this.setAnimationOrigin(e,u);const t={...Da(a,"layout"),onPlay:o,onComplete:l};(i.shouldReduceMotion||this.options.layoutRoot)&&(t.delay=0,t.type=!1),this.startAnimation(t)}else t||Ii(this),this.isLead()&&this.options.onExitComplete&&this.options.onExitComplete();this.targetLayout=r}))}unmount(){this.options.layoutId&&this.willUpdate(),this.root.nodes.remove(this);const e=this.getStack();e&&e.remove(this),this.parent&&this.parent.children.delete(this),this.instance=void 0,Cn(this.updateProjection)}blockUpdate(){this.updateManuallyBlocked=!0}unblockUpdate(){this.updateManuallyBlocked=!1}isUpdateBlocked(){return this.updateManuallyBlocked||this.updateBlockedByResize}isTreeAnimationBlocked(){return this.isAnimationBlocked||this.parent&&this.parent.isTreeAnimationBlocked()||!1}startUpdate(){this.isUpdateBlocked()||(this.isUpdating=!0,this.nodes&&this.nodes.forEach($i),this.animationId++)}getTransformTemplate(){const{visualElement:e}=this.options;return e&&e.getProps().transformTemplate}willUpdate(e=!0){if(this.root.hasTreeAnimated=!0,this.root.isUpdateBlocked())return void(this.options.onExitComplete&&this.options.onExitComplete());if(!this.root.isUpdating&&this.root.startUpdate(),this.isLayoutDirty)return;this.isLayoutDirty=!0;for(let e=0;e<this.path.length;e++){const t=this.path[e];t.shouldResetTransform=!0,t.updateScroll("snapshot"),t.options.layoutRoot&&t.willUpdate(!1)}const{layoutId:t,layout:n}=this.options;if(void 0===t&&!n)return;const r=this.getTransformTemplate();this.prevTransformTemplateValue=r?r(this.latestValues,""):void 0,this.updateSnapshot(),e&&this.notifyListeners("willUpdate")}update(){if(this.updateScheduled=!1,this.isUpdateBlocked())return this.unblockUpdate(),this.clearAllSnapshots(),void this.nodes.forEach(ji);this.isUpdating||this.nodes.forEach(zi),this.isUpdating=!1,this.nodes.forEach(Vi),this.nodes.forEach(Ri),this.nodes.forEach(Li),this.clearAllSnapshots();const e=performance.now();En.delta=wt(0,1e3/60,e-En.timestamp),En.timestamp=e,En.isProcessing=!0,wn.update.process(En),wn.preRender.process(En),wn.render.process(En),En.isProcessing=!1}didUpdate(){this.updateScheduled||(this.updateScheduled=!0,queueMicrotask((()=>this.update())))}clearAllSnapshots(){this.nodes.forEach(Oi),this.sharedNodes.forEach(Yi)}scheduleUpdateProjection(){An.preRender(this.updateProjection,!1,!0)}scheduleCheckAfterUnmount(){An.postRender((()=>{this.isLayoutDirty?this.root.didUpdate():this.root.checkUpdateFailed()}))}updateSnapshot(){!this.snapshot&&this.instance&&(this.snapshot=this.measure())}updateLayout(){if(!this.instance)return;if(this.updateScroll(),!(this.options.alwaysMeasureLayout&&this.isLead()||this.isLayoutDirty))return;if(this.resumeFrom&&!this.resumeFrom.instance)for(let e=0;e<this.path.length;e++)this.path[e].updateScroll();const e=this.layout;this.layout=this.measure(!1),this.layoutCorrected=Bo(),this.isLayoutDirty=!1,this.projectionDelta=void 0,this.notifyListeners("measure",this.layout.layoutBox);const{visualElement:t}=this.options;t&&t.notify("LayoutMeasure",this.layout.layoutBox,e?e.layoutBox:void 0)}updateScroll(e="measure"){let t=Boolean(this.options.layoutScroll&&this.instance);this.scroll&&this.scroll.animationId===this.root.animationId&&this.scroll.phase===e&&(t=!1),t&&(this.scroll={animationId:this.root.animationId,phase:e,isRoot:r(this.instance),offset:n(this.instance)})}resetTransform(){if(!a)return;const e=this.isLayoutDirty||this.shouldResetTransform,t=this.projectionDelta&&!Ci(this.projectionDelta),n=this.getTransformTemplate(),r=n?n(this.latestValues,""):void 0,o=r!==this.prevTransformTemplateValue;e&&(t||Mo(this.latestValues)||o)&&(a(this.instance,r),this.shouldResetTransform=!1,this.scheduleRender())}measure(e=!0){const t=this.measurePageBox();let n=this.removeElementScroll(t);var r;return e&&(n=this.removeTransform(n)),Xi((r=n).x),Xi(r.y),{animationId:this.root.animationId,measuredBox:t,layoutBox:n,latestValues:{},source:this.id}}measurePageBox(){const{visualElement:e}=this.options;if(!e)return Bo();const t=e.measureViewportBox(),{scroll:n}=this.root;return n&&(Wo(t.x,n.offset.x),Wo(t.y,n.offset.y)),t}removeElementScroll(e){const t=Bo();hi(t,e);for(let n=0;n<this.path.length;n++){const r=this.path[n],{scroll:a,options:o}=r;if(r!==this.root&&a&&o.layoutScroll){if(a.isRoot){hi(t,e);const{scroll:n}=this.root;n&&(Wo(t.x,-n.offset.x),Wo(t.y,-n.offset.y))}Wo(t.x,a.offset.x),Wo(t.y,a.offset.y)}}return t}applyTransform(e,t=!1){const n=Bo();hi(n,e);for(let e=0;e<this.path.length;e++){const r=this.path[e];!t&&r.options.layoutScroll&&r.scroll&&r!==r.root&&qo(n,{x:-r.scroll.offset.x,y:-r.scroll.offset.y}),Mo(r.latestValues)&&qo(n,r.latestValues)}return Mo(this.latestValues)&&qo(n,this.latestValues),n}removeTransform(e){const t=Bo();hi(t,e);for(let e=0;e<this.path.length;e++){const n=this.path[e];if(!n.instance)continue;if(!Mo(n.latestValues))continue;Lo(n.latestValues)&&n.updateSnapshot();const r=Bo();hi(r,n.measurePageBox()),xi(t,n.latestValues,n.snapshot?n.snapshot.layoutBox:void 0,r)}return Mo(this.latestValues)&&xi(t,this.latestValues),t}setTargetDelta(e){this.targetDelta=e,this.root.scheduleUpdateProjection(),this.isProjectionDirty=!0}setOptions(e){this.options={...this.options,...e,crossfade:void 0===e.crossfade||e.crossfade}}clearMeasurements(){this.scroll=void 0,this.layout=void 0,this.snapshot=void 0,this.prevTransformTemplateValue=void 0,this.targetDelta=void 0,this.target=void 0,this.isLayoutDirty=!1}forceRelativeParentToResolveTarget(){this.relativeParent&&this.relativeParent.resolvedRelativeTargetAt!==En.timestamp&&this.relativeParent.resolveTargetDelta(!0)}resolveTargetDelta(e=!1){var t;const n=this.getLead();this.isProjectionDirty||(this.isProjectionDirty=n.isProjectionDirty),this.isTransformDirty||(this.isTransformDirty=n.isTransformDirty),this.isSharedProjectionDirty||(this.isSharedProjectionDirty=n.isSharedProjectionDirty);const r=Boolean(this.resumingFrom)||this!==n;if(!(e||r&&this.isSharedProjectionDirty||this.isProjectionDirty||(null===(t=this.parent)||void 0===t?void 0:t.isProjectionDirty)||this.attemptToResolveRelativeTarget))return;const{layout:a,layoutId:o}=this.options;if(this.layout&&(a||o)){if(this.resolvedRelativeTargetAt=En.timestamp,!this.targetDelta&&!this.relativeTarget){const e=this.getClosestProjectingParent();e&&e.layout&&1!==this.animationProgress?(this.relativeParent=e,this.forceRelativeParentToResolveTarget(),this.relativeTarget=Bo(),this.relativeTargetOrigin=Bo(),Eo(this.relativeTargetOrigin,this.layout.layoutBox,e.layout.layoutBox),hi(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}if(this.relativeTarget||this.targetDelta){var i,l,s;if(this.target||(this.target=Bo(),this.targetWithTransforms=Bo()),this.relativeTarget&&this.relativeTargetOrigin&&this.relativeParent&&this.relativeParent.target?(this.forceRelativeParentToResolveTarget(),i=this.target,l=this.relativeTarget,s=this.relativeParent.target,Ao(i.x,l.x,s.x),Ao(i.y,l.y,s.y)):this.targetDelta?(Boolean(this.resumingFrom)?this.target=this.applyTransform(this.layout.layoutBox):hi(this.target,this.layout.layoutBox),Io(this.target,this.targetDelta)):hi(this.target,this.layout.layoutBox),this.attemptToResolveRelativeTarget){this.attemptToResolveRelativeTarget=!1;const e=this.getClosestProjectingParent();e&&Boolean(e.resumingFrom)===Boolean(this.resumingFrom)&&!e.options.layoutScroll&&e.target&&1!==this.animationProgress?(this.relativeParent=e,this.forceRelativeParentToResolveTarget(),this.relativeTarget=Bo(),this.relativeTargetOrigin=Bo(),Eo(this.relativeTargetOrigin,this.target,e.target),hi(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}Ti.resolvedTargetDeltas++}}}getClosestProjectingParent(){if(this.parent&&!Lo(this.parent.latestValues)&&!Do(this.parent.latestValues))return this.parent.isProjecting()?this.parent:this.parent.getClosestProjectingParent()}isProjecting(){return Boolean((this.relativeTarget||this.targetDelta||this.options.layoutRoot)&&this.layout)}calcProjection(){var e;const t=this.getLead(),n=Boolean(this.resumingFrom)||this!==t;let r=!0;if((this.isProjectionDirty||(null===(e=this.parent)||void 0===e?void 0:e.isProjectionDirty))&&(r=!1),n&&(this.isSharedProjectionDirty||this.isTransformDirty)&&(r=!1),this.resolvedRelativeTargetAt===En.timestamp&&(r=!1),r)return;const{layout:a,layoutId:o}=this.options;if(this.isTreeAnimating=Boolean(this.parent&&this.parent.isTreeAnimating||this.currentAnimation||this.pendingAnimation),this.isTreeAnimating||(this.targetDelta=this.relativeTarget=void 0),!this.layout||!a&&!o)return;hi(this.layoutCorrected,this.layout.layoutBox);const i=this.treeScale.x,l=this.treeScale.y;!function(e,t,n,r=!1){const a=n.length;if(!a)return;let o,i;t.x=t.y=1;for(let l=0;l<a;l++){o=n[l],i=o.projectionDelta;const a=o.instance;a&&a.style&&"contents"===a.style.display||(r&&o.options.layoutScroll&&o.scroll&&o!==o.root&&qo(e,{x:-o.scroll.offset.x,y:-o.scroll.offset.y}),i&&(t.x*=i.x.scale,t.y*=i.y.scale,Io(e,i)),r&&Mo(o.latestValues)&&qo(e,o.latestValues))}t.x=Uo(t.x),t.y=Uo(t.y)}(this.layoutCorrected,this.treeScale,this.path,n),!t.layout||t.target||1===this.treeScale.x&&1===this.treeScale.y||(t.target=t.layout.layoutBox);const{target:s}=t;if(!s)return void(this.projectionTransform&&(this.projectionDelta=Po(),this.projectionTransform="none",this.scheduleRender()));this.projectionDelta||(this.projectionDelta=Po(),this.projectionDeltaWithTransform=Po());const u=this.projectionTransform;xo(this.projectionDelta,this.layoutCorrected,s,this.latestValues),this.projectionTransform=Si(this.projectionDelta,this.treeScale),this.projectionTransform===u&&this.treeScale.x===i&&this.treeScale.y===l||(this.hasProjected=!0,this.scheduleRender(),this.notifyListeners("projectionUpdate",s)),Ti.recalculatedProjection++}hide(){this.isVisible=!1}show(){this.isVisible=!0}scheduleRender(e=!0){if(this.options.scheduleRender&&this.options.scheduleRender(),e){const e=this.getStack();e&&e.scheduleRender()}this.resumingFrom&&!this.resumingFrom.instance&&(this.resumingFrom=void 0)}setAnimationOrigin(e,t=!1){const n=this.snapshot,r=n?n.latestValues:{},a={...this.latestValues},o=Po();this.relativeParent&&this.relativeParent.options.layoutRoot||(this.relativeTarget=this.relativeTargetOrigin=void 0),this.attemptToResolveRelativeTarget=!t;const i=Bo(),l=(n?n.source:void 0)!==(this.layout?this.layout.source:void 0),s=this.getStack(),u=!s||s.members.length<=1,c=Boolean(l&&!u&&!0===this.options.crossfade&&!this.path.some(Qi));let d;this.animationProgress=0,this.mixTargetDelta=t=>{const n=t/1e3;var s,p,f,m,h,g;Hi(o.x,e.x,n),Hi(o.y,e.y,n),this.setTargetDelta(o),this.relativeTarget&&this.relativeTargetOrigin&&this.layout&&this.relativeParent&&this.relativeParent.layout&&(Eo(i,this.layout.layoutBox,this.relativeParent.layout.layoutBox),f=this.relativeTarget,m=this.relativeTargetOrigin,h=i,g=n,qi(f.x,m.x,h.x,g),qi(f.y,m.y,h.y,g),d&&(s=this.relativeTarget,p=d,s.x.min===p.x.min&&s.x.max===p.x.max&&s.y.min===p.y.min&&s.y.max===p.y.max)&&(this.isProjectionDirty=!1),d||(d=Bo()),hi(d,this.relativeTarget)),l&&(this.animationValues=a,function(e,t,n,r,a,o){a?(e.opacity=Br(0,void 0!==n.opacity?n.opacity:1,di(r)),e.opacityExit=Br(void 0!==t.opacity?t.opacity:1,0,pi(r))):o&&(e.opacity=Br(void 0!==t.opacity?t.opacity:1,void 0!==n.opacity?n.opacity:1,r));for(let a=0;a<li;a++){const o=`border${ii[a]}Radius`;let i=ci(t,o),l=ci(n,o);void 0===i&&void 0===l||(i||(i=0),l||(l=0),0===i||0===l||ui(i)===ui(l)?(e[o]=Math.max(Br(si(i),si(l),r),0),(Mt.test(l)||Mt.test(i))&&(e[o]+="%")):e[o]=l)}(t.rotate||n.rotate)&&(e.rotate=Br(t.rotate||0,n.rotate||0,r))}(a,r,this.latestValues,n,c,u)),this.root.scheduleUpdateProjection(),this.scheduleRender(),this.animationProgress=n},this.mixTargetDelta(this.options.layoutRoot?1e3:0)}startAnimation(e){this.notifyListeners("animationStart"),this.currentAnimation&&this.currentAnimation.stop(),this.resumingFrom&&this.resumingFrom.currentAnimation&&this.resumingFrom.currentAnimation.stop(),this.pendingAnimation&&(Cn(this.pendingAnimation),this.pendingAnimation=void 0),this.pendingAnimation=An.update((()=>{Jo.hasAnimatedSinceResize=!0,this.currentAnimation=function(e,t,n){const r=vt(0)?0:Ya(0);return r.start(Oa("",r,1e3,n)),r.animation}(0,0,{...e,onUpdate:t=>{this.mixTargetDelta(t),e.onUpdate&&e.onUpdate(t)},onComplete:()=>{e.onComplete&&e.onComplete(),this.completeAnimation()}}),this.resumingFrom&&(this.resumingFrom.currentAnimation=this.currentAnimation),this.pendingAnimation=void 0}))}completeAnimation(){this.resumingFrom&&(this.resumingFrom.currentAnimation=void 0,this.resumingFrom.preserveOpacity=void 0);const e=this.getStack();e&&e.exitAnimationComplete(),this.resumingFrom=this.currentAnimation=this.animationValues=void 0,this.notifyListeners("animationComplete")}finishAnimation(){this.currentAnimation&&(this.mixTargetDelta&&this.mixTargetDelta(1e3),this.currentAnimation.stop()),this.completeAnimation()}applyTransformsToTarget(){const e=this.getLead();let{targetWithTransforms:t,target:n,layout:r,latestValues:a}=e;if(t&&n&&r){if(this!==e&&this.layout&&r&&Ji(this.options.animationType,this.layout.layoutBox,r.layoutBox)){n=this.target||Bo();const t=vo(this.layout.layoutBox.x);n.x.min=e.target.x.min,n.x.max=n.x.min+t;const r=vo(this.layout.layoutBox.y);n.y.min=e.target.y.min,n.y.max=n.y.min+r}hi(t,n),qo(t,a),xo(this.projectionDeltaWithTransform,this.layoutCorrected,t,a)}}registerSharedNode(e,t){this.sharedNodes.has(e)||this.sharedNodes.set(e,new ki),this.sharedNodes.get(e).add(t);const n=t.options.initialPromotionConfig;t.promote({transition:n?n.transition:void 0,preserveFollowOpacity:n&&n.shouldPreserveFollowOpacity?n.shouldPreserveFollowOpacity(t):void 0})}isLead(){const e=this.getStack();return!e||e.lead===this}getLead(){var e;const{layoutId:t}=this.options;return t&&(null===(e=this.getStack())||void 0===e?void 0:e.lead)||this}getPrevLead(){var e;const{layoutId:t}=this.options;return t?null===(e=this.getStack())||void 0===e?void 0:e.prevLead:void 0}getStack(){const{layoutId:e}=this.options;if(e)return this.root.sharedNodes.get(e)}promote({needsReset:e,transition:t,preserveFollowOpacity:n}={}){const r=this.getStack();r&&r.promote(this,n),e&&(this.projectionDelta=void 0,this.needsReset=!0),t&&this.setOptions({transition:t})}relegate(){const e=this.getStack();return!!e&&e.relegate(this)}resetRotation(){const{visualElement:e}=this.options;if(!e)return;let t=!1;const{latestValues:n}=e;if((n.rotate||n.rotateX||n.rotateY||n.rotateZ)&&(t=!0),!t)return;const r={};for(let t=0;t<Pi.length;t++){const a="rotate"+Pi[t];n[a]&&(r[a]=n[a],e.setStaticValue(a,0))}e.render();for(const t in r)e.setStaticValue(t,r[t]);e.scheduleRender()}getProjectionStyles(e={}){var t,n;const r={};if(!this.instance||this.isSVG)return r;if(!this.isVisible)return{visibility:"hidden"};r.visibility="";const a=this.getTransformTemplate();if(this.needsReset)return this.needsReset=!1,r.opacity="",r.pointerEvents=hn(e.pointerEvents)||"",r.transform=a?a(this.latestValues,""):"none",r;const o=this.getLead();if(!this.projectionDelta||!this.layout||!o.target){const t={};return this.options.layoutId&&(t.opacity=void 0!==this.latestValues.opacity?this.latestValues.opacity:1,t.pointerEvents=hn(e.pointerEvents)||""),this.hasProjected&&!Mo(this.latestValues)&&(t.transform=a?a({},""):"none",this.hasProjected=!1),t}const i=o.animationValues||o.latestValues;this.applyTransformsToTarget(),r.transform=Si(this.projectionDeltaWithTransform,this.treeScale,i),a&&(r.transform=a(i,r.transform));const{x:l,y:s}=this.projectionDelta;r.transformOrigin=`${100*l.origin}% ${100*s.origin}% 0`,o.animationValues?r.opacity=o===this?null!==(n=null!==(t=i.opacity)&&void 0!==t?t:this.latestValues.opacity)&&void 0!==n?n:1:this.preserveOpacity?this.latestValues.opacity:i.opacityExit:r.opacity=o===this?void 0!==i.opacity?i.opacity:"":void 0!==i.opacityExit?i.opacityExit:0;for(const e in ft){if(void 0===i[e])continue;const{correct:t,applyTo:n}=ft[e],a="none"===r.transform?i[e]:t(i[e],o);if(n){const e=n.length;for(let t=0;t<e;t++)r[n[t]]=a}else r[e]=a}return this.options.layoutId&&(r.pointerEvents=o===this?hn(e.pointerEvents)||"":"none"),r}clearSnapshot(){this.resumeFrom=this.snapshot=void 0}resetTree(){this.root.nodes.forEach((e=>{var t;return null===(t=e.currentAnimation)||void 0===t?void 0:t.stop()})),this.root.nodes.forEach(ji),this.root.sharedNodes.clear()}}}function Ri(e){e.updateLayout()}function Li(e){var t;const n=(null===(t=e.resumeFrom)||void 0===t?void 0:t.snapshot)||e.snapshot;if(e.isLead()&&e.layout&&n&&e.hasListeners("didUpdate")){const{layoutBox:t,measuredBox:r}=e.layout,{animationType:a}=e.options,o=n.source!==e.layout.source;"size"===a?To((e=>{const r=o?n.measuredBox[e]:n.layoutBox[e],a=vo(r);r.min=t[e].min,r.max=r.min+a})):Ji(a,n.layoutBox,t)&&To((r=>{const a=o?n.measuredBox[r]:n.layoutBox[r],i=vo(t[r]);a.max=a.min+i,e.relativeTarget&&!e.currentAnimation&&(e.isProjectionDirty=!0,e.relativeTarget[r].max=e.relativeTarget[r].min+i)}));const i=Po();xo(i,t,n.layoutBox);const l=Po();o?xo(l,e.applyTransform(r,!0),n.measuredBox):xo(l,t,n.layoutBox);const s=!Ci(i);let u=!1;if(!e.resumeFrom){const r=e.getClosestProjectingParent();if(r&&!r.resumeFrom){const{snapshot:a,layout:o}=r;if(a&&o){const i=Bo();Eo(i,n.layoutBox,a.layoutBox);const l=Bo();Eo(l,t,o.layoutBox),Ei(i,l)||(u=!0),r.options.layoutRoot&&(e.relativeTarget=l,e.relativeTargetOrigin=i,e.relativeParent=r)}}}e.notifyListeners("didUpdate",{layout:t,snapshot:n,delta:l,layoutDelta:i,hasLayoutChanged:s,hasRelativeTargetChanged:u})}else if(e.isLead()){const{onExitComplete:t}=e.options;t&&t()}e.options.transition=void 0}function Mi(e){Ti.totalNodes++,e.parent&&(e.isProjecting()||(e.isProjectionDirty=e.parent.isProjectionDirty),e.isSharedProjectionDirty||(e.isSharedProjectionDirty=Boolean(e.isProjectionDirty||e.parent.isProjectionDirty||e.parent.isSharedProjectionDirty)),e.isTransformDirty||(e.isTransformDirty=e.parent.isTransformDirty))}function Di(e){e.isProjectionDirty=e.isSharedProjectionDirty=e.isTransformDirty=!1}function Oi(e){e.clearSnapshot()}function ji(e){e.clearMeasurements()}function zi(e){e.isLayoutDirty=!1}function Vi(e){const{visualElement:t}=e.options;t&&t.getProps().onBeforeLayoutMeasure&&t.notify("BeforeLayoutMeasure"),e.resetTransform()}function Ii(e){e.finishAnimation(),e.targetDelta=e.relativeTarget=e.target=void 0,e.isProjectionDirty=!0}function Ui(e){e.resolveTargetDelta()}function Wi(e){e.calcProjection()}function $i(e){e.resetRotation()}function Yi(e){e.removeLeadSnapshot()}function Hi(e,t,n){e.translate=Br(t.translate,0,n),e.scale=Br(t.scale,1,n),e.origin=t.origin,e.originPoint=t.originPoint}function qi(e,t,n,r){e.min=Br(t.min,n.min,r),e.max=Br(t.max,n.max,r)}function Qi(e){return e.animationValues&&void 0!==e.animationValues.opacityExit}const Ki={duration:.45,ease:[.4,0,.1,1]},Zi=e=>"undefined"!=typeof navigator&&navigator.userAgent.toLowerCase().includes(e),Gi=Zi("applewebkit/")&&!Zi("chrome/")?Math.round:yn;function Xi(e){e.min=Gi(e.min),e.max=Gi(e.max)}function Ji(e,t,n){return"position"===e||"preserve-aspect"===e&&!yo(wi(t),wi(n),.2)}const el=Fi({attachResizeListener:(e,t)=>Nn(e,"resize",t),measureScroll:()=>({x:document.documentElement.scrollLeft||document.body.scrollLeft,y:document.documentElement.scrollTop||document.body.scrollTop}),checkIsScrollRoot:()=>!0}),tl={current:void 0},nl=Fi({measureScroll:e=>({x:e.scrollLeft,y:e.scrollTop}),defaultParent:()=>{if(!tl.current){const e=new el({});e.mount(window),e.setOptions({layoutScroll:!0}),tl.current=e}return tl.current},resetTransform:(e,t)=>{e.style.transform=void 0!==t?t:"none"},checkIsScrollRoot:e=>Boolean("fixed"===window.getComputedStyle(e).position)}),rl={pan:{Feature:class extends zn{constructor(){super(...arguments),this.removePointerDownListener=yn}onPointerDown(e){this.session=new uo(e,this.createPanHandlers(),{transformPagePoint:this.node.getTransformPagePoint()})}createPanHandlers(){const{onPanSessionStart:e,onPanStart:t,onPan:n,onPanEnd:r}=this.node.getProps();return{onSessionStart:Xo(e),onStart:Xo(t),onMove:n,onEnd:(e,t)=>{delete this.session,r&&An.update((()=>r(e,t)))}}}mount(){this.removePointerDownListener=Tn(this.node.current,"pointerdown",(e=>this.onPointerDown(e)))}update(){this.session&&this.session.updateHandlers(this.createPanHandlers())}unmount(){this.removePointerDownListener(),this.session&&this.session.end()}}},drag:{Feature:class extends zn{constructor(e){super(e),this.removeGroupControls=yn,this.removeListeners=yn,this.controls=new Zo(e)}mount(){const{dragControls:e}=this.node.getProps();e&&(this.removeGroupControls=e.subscribe(this.controls)),this.removeListeners=this.controls.addListeners()||yn}unmount(){this.removeGroupControls(),this.removeListeners()}},ProjectionNode:nl,MeasureLayout:ai}},al=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function ol(e,t,n=1){Jn(n<=4,`Max CSS variable fallback depth detected in property "${e}". This may indicate a circular fallback dependency.`);const[r,a]=function(e){const t=al.exec(e);if(!t)return[,];const[,n,r]=t;return[n,r]}(e);if(!r)return;const o=window.getComputedStyle(t).getPropertyValue(r);if(o){const e=o.trim();return za(e)?parseFloat(e):e}return Ct(a)?ol(a,t,n+1):a}const il=new Set(["width","height","top","left","right","bottom","x","y","translateX","translateY"]),ll=e=>il.has(e),sl=e=>e===kt||e===Dt,ul=(e,t)=>parseFloat(e.split(", ")[t]),cl=(e,t)=>(n,{transform:r})=>{if("none"===r||!r)return 0;const a=r.match(/^matrix3d\((.+)\)$/);if(a)return ul(a[1],t);{const t=r.match(/^matrix\((.+)\)$/);return t?ul(t[1],e):0}},dl=new Set(["x","y","z"]),pl=mt.filter((e=>!dl.has(e))),fl={width:({x:e},{paddingLeft:t="0",paddingRight:n="0"})=>e.max-e.min-parseFloat(t)-parseFloat(n),height:({y:e},{paddingTop:t="0",paddingBottom:n="0"})=>e.max-e.min-parseFloat(t)-parseFloat(n),top:(e,{top:t})=>parseFloat(t),left:(e,{left:t})=>parseFloat(t),bottom:({y:e},{top:t})=>parseFloat(t)+(e.max-e.min),right:({x:e},{left:t})=>parseFloat(t)+(e.max-e.min),x:cl(4,13),y:cl(5,14)};fl.translateX=fl.x,fl.translateY=fl.y;function ml(e,t,n,r){return(e=>Object.keys(e).some(ll))(t)?((e,t,n={},r={})=>{t={...t},r={...r};const a=Object.keys(t).filter(ll);let o=[],i=!1;const l=[];if(a.forEach((a=>{const s=e.getValue(a);if(!e.hasValue(a))return;let u=n[a],c=Qa(u);const d=t[a];let p;if(pn(d)){const e=d.length,t=null===d[0]?1:0;u=d[t],c=Qa(u);for(let n=t;n<e&&null!==d[n];n++)p?Jn(Qa(d[n])===p,"All keyframes must be of the same type"):(p=Qa(d[n]),Jn(p===c||sl(c)&&sl(p),"Keyframes must be of the same dimension as the current value"))}else p=Qa(d);if(c!==p)if(sl(c)&&sl(p)){const e=s.get();"string"==typeof e&&s.set(parseFloat(e)),"string"==typeof d?t[a]=parseFloat(d):Array.isArray(d)&&p===Dt&&(t[a]=d.map(parseFloat))}else(null==c?void 0:c.transform)&&(null==p?void 0:p.transform)&&(0===u||0===d)?0===u?s.set(p.transform(u)):t[a]=c.transform(d):(i||(o=function(e){const t=[];return pl.forEach((n=>{const r=e.getValue(n);void 0!==r&&(t.push([n,r.get()]),r.set(n.startsWith("scale")?1:0))})),t.length&&e.render(),t}(e),i=!0),l.push(a),r[a]=void 0!==r[a]?r[a]:t[a],s.jump(d))})),l.length){const n=l.indexOf("height")>=0?window.pageYOffset:null,a=((e,t,n)=>{const r=t.measureViewportBox(),a=t.current,o=getComputedStyle(a),{display:i}=o,l={};"none"===i&&t.setStaticValue("display",e.display||"block"),n.forEach((e=>{l[e]=fl[e](r,o)})),t.render();const s=t.measureViewportBox();return n.forEach((n=>{const r=t.getValue(n);r&&r.jump(l[n]),e[n]=fl[n](s,o)})),e})(t,e,l);return o.length&&o.forEach((([t,n])=>{e.getValue(t).set(n)})),e.render(),He&&null!==n&&window.scrollTo({top:n}),{target:a,transitionEnd:r}}return{target:t,transitionEnd:r}})(e,t,n,r):{target:t,transitionEnd:r}}const hl={current:null},gl={current:!1},vl=new WeakMap,yl=Object.keys(at),bl=yl.length,xl=["AnimationStart","AnimationComplete","Update","BeforeLayoutMeasure","LayoutMeasure","LayoutAnimationStart","LayoutAnimationComplete"],Al=Je.length;class Cl{constructor({parent:e,props:t,presenceContext:n,reducedMotionConfig:r,visualState:a},o={}){this.current=null,this.children=new Set,this.isVariantNode=!1,this.isControllingVariants=!1,this.shouldReduceMotion=null,this.values=new Map,this.features={},this.valueSubscriptions=new Map,this.prevMotionValues={},this.events={},this.propEventSubscriptions={},this.notifyUpdate=()=>this.notify("Update",this.latestValues),this.render=()=>{this.current&&(this.triggerBuild(),this.renderInstance(this.current,this.renderState,this.props.style,this.projection))},this.scheduleRender=()=>An.render(this.render,!1,!0);const{latestValues:i,renderState:l}=a;this.latestValues=i,this.baseTarget={...i},this.initialValues=t.initial?{...i}:{},this.renderState=l,this.parent=e,this.props=t,this.presenceContext=n,this.depth=e?e.depth+1:0,this.reducedMotionConfig=r,this.options=o,this.isControllingVariants=et(t),this.isVariantNode=tt(t),this.isVariantNode&&(this.variantChildren=new Set),this.manuallyAnimateOnMount=Boolean(e&&e.current);const{willChange:s,...u}=this.scrapeMotionValuesFromProps(t,{});for(const e in u){const t=u[e];void 0!==i[e]&&vt(t)&&(t.set(i[e],!1),ja(s)&&s.add(e))}}scrapeMotionValuesFromProps(e,t){return{}}mount(e){this.current=e,vl.set(e,this),this.projection&&!this.projection.instance&&this.projection.mount(e),this.parent&&this.isVariantNode&&!this.isControllingVariants&&(this.removeFromVariantTree=this.parent.addVariantChild(this)),this.values.forEach(((e,t)=>this.bindToMotionValue(t,e))),gl.current||function(){if(gl.current=!0,He)if(window.matchMedia){const e=window.matchMedia("(prefers-reduced-motion)"),t=()=>hl.current=e.matches;e.addListener(t),t()}else hl.current=!1}(),this.shouldReduceMotion="never"!==this.reducedMotionConfig&&("always"===this.reducedMotionConfig||hl.current),this.parent&&this.parent.children.add(this),this.update(this.props,this.presenceContext)}unmount(){vl.delete(this.current),this.projection&&this.projection.unmount(),Cn(this.notifyUpdate),Cn(this.render),this.valueSubscriptions.forEach((e=>e())),this.removeFromVariantTree&&this.removeFromVariantTree(),this.parent&&this.parent.children.delete(this);for(const e in this.events)this.events[e].clear();for(const e in this.features)this.features[e].unmount();this.current=null}bindToMotionValue(e,t){const n=ht.has(e),r=t.on("change",(t=>{this.latestValues[e]=t,this.props.onUpdate&&An.update(this.notifyUpdate,!1,!0),n&&this.projection&&(this.projection.isTransformDirty=!0)})),a=t.on("renderRequest",this.scheduleRender);this.valueSubscriptions.set(e,(()=>{r(),a()}))}sortNodePosition(e){return this.current&&this.sortInstanceNodePosition&&this.type===e.type?this.sortInstanceNodePosition(this.current,e.current):0}loadFeatures({children:e,...t},n,r,a){let o,i;for(let e=0;e<bl;e++){const n=yl[e],{isEnabled:r,Feature:a,ProjectionNode:l,MeasureLayout:s}=at[n];l&&(o=l),r(t)&&(!this.features[n]&&a&&(this.features[n]=new a(this)),s&&(i=s))}if(!this.projection&&o){this.projection=new o(this.latestValues,this.parent&&this.parent.projection);const{layoutId:e,layout:n,drag:r,dragConstraints:i,layoutScroll:l,layoutRoot:s}=t;this.projection.setOptions({layoutId:e,layout:n,alwaysMeasureLayout:Boolean(r)||i&&Ke(i),visualElement:this,scheduleRender:()=>this.scheduleRender(),animationType:"string"==typeof n?n:"both",initialPromotionConfig:a,layoutScroll:l,layoutRoot:s})}return i}updateFeatures(){for(const e in this.features){const t=this.features[e];t.isMounted?t.update():(t.mount(),t.isMounted=!0)}}triggerBuild(){this.build(this.renderState,this.latestValues,this.options,this.props)}measureViewportBox(){return this.current?this.measureInstanceViewportBox(this.current,this.props):Bo()}getStaticValue(e){return this.latestValues[e]}setStaticValue(e,t){this.latestValues[e]=t}makeTargetAnimatable(e,t=!0){return this.makeTargetAnimatableFromInstance(e,this.props,t)}update(e,t){(e.transformTemplate||this.props.transformTemplate)&&this.scheduleRender(),this.prevProps=this.props,this.props=e,this.prevPresenceContext=this.presenceContext,this.presenceContext=t;for(let t=0;t<xl.length;t++){const n=xl[t];this.propEventSubscriptions[n]&&(this.propEventSubscriptions[n](),delete this.propEventSubscriptions[n]);const r=e["on"+n];r&&(this.propEventSubscriptions[n]=this.on(n,r))}this.prevMotionValues=function(e,t,n){const{willChange:r}=t;for(const a in t){const o=t[a],i=n[a];if(vt(o))e.addValue(a,o),ja(r)&&r.add(a);else if(vt(i))e.addValue(a,Ya(o,{owner:e})),ja(r)&&r.remove(a);else if(i!==o)if(e.hasValue(a)){const t=e.getValue(a);!t.hasAnimated&&t.set(o)}else{const t=e.getStaticValue(a);e.addValue(a,Ya(void 0!==t?t:o,{owner:e}))}}for(const r in n)void 0===t[r]&&e.removeValue(r);return t}(this,this.scrapeMotionValuesFromProps(e,this.prevProps),this.prevMotionValues),this.handleChildMotionValue&&this.handleChildMotionValue()}getProps(){return this.props}getVariant(e){return this.props.variants?this.props.variants[e]:void 0}getDefaultTransition(){return this.props.transition}getTransformPagePoint(){return this.props.transformPagePoint}getClosestVariantNode(){return this.isVariantNode?this:this.parent?this.parent.getClosestVariantNode():void 0}getVariantContext(e=!1){if(e)return this.parent?this.parent.getVariantContext():void 0;if(!this.isControllingVariants){const e=this.parent&&this.parent.getVariantContext()||{};return void 0!==this.props.initial&&(e.initial=this.props.initial),e}const t={};for(let e=0;e<Al;e++){const n=Je[e],r=this.props[n];(Ze(r)||!1===r)&&(t[n]=r)}return t}addVariantChild(e){const t=this.getClosestVariantNode();if(t)return t.variantChildren&&t.variantChildren.add(e),()=>t.variantChildren.delete(e)}addValue(e,t){t!==this.values.get(e)&&(this.removeValue(e),this.bindToMotionValue(e,t)),this.values.set(e,t),this.latestValues[e]=t.get()}removeValue(e){this.values.delete(e);const t=this.valueSubscriptions.get(e);t&&(t(),this.valueSubscriptions.delete(e)),delete this.latestValues[e],this.removeValueFromRenderState(e,this.renderState)}hasValue(e){return this.values.has(e)}getValue(e,t){if(this.props.values&&this.props.values[e])return this.props.values[e];let n=this.values.get(e);return void 0===n&&void 0!==t&&(n=Ya(t,{owner:this}),this.addValue(e,n)),n}readValue(e){var t;return void 0===this.latestValues[e]&&this.current?null!==(t=this.getBaseTargetFromProps(this.props,e))&&void 0!==t?t:this.readValueFromInstance(this.current,e,this.options):this.latestValues[e]}setBaseTarget(e,t){this.baseTarget[e]=t}getBaseTarget(e){var t;const{initial:n}=this.props,r="string"==typeof n||"object"==typeof n?null===(t=dn(this.props,n))||void 0===t?void 0:t[e]:void 0;if(n&&void 0!==r)return r;const a=this.getBaseTargetFromProps(this.props,e);return void 0===a||vt(a)?void 0!==this.initialValues[e]&&void 0===r?void 0:this.baseTarget[e]:a}on(e,t){return this.events[e]||(this.events[e]=new Ua),this.events[e].add(t)}notify(e,...t){this.events[e]&&this.events[e].notify(...t)}}class El extends Cl{sortInstanceNodePosition(e,t){return 2&e.compareDocumentPosition(t)?1:-1}getBaseTargetFromProps(e,t){return e.style?e.style[t]:void 0}removeValueFromRenderState(e,{vars:t,style:n}){delete t[e],delete n[e]}makeTargetAnimatableFromInstance({transition:e,transitionEnd:t,...n},{transformValues:r},a){let o=function(e,t,n){const r={};for(const a in e){const e=Ga(a,t);if(void 0!==e)r[a]=e;else{const e=n.getValue(a);e&&(r[a]=e.get())}}return r}(n,e||{},this);if(r&&(t&&(t=r(t)),n&&(n=r(n)),o&&(o=r(o))),a){!function(e,t,n){var r,a;const o=Object.keys(t).filter((t=>!e.hasValue(t))),i=o.length;var l;if(i)for(let s=0;s<i;s++){const i=o[s],u=t[i];let c=null;Array.isArray(u)&&(c=u[0]),null===c&&(c=null!==(a=null!==(r=n[i])&&void 0!==r?r:e.readValue(i))&&void 0!==a?a:t[i]),null!=c&&("string"==typeof c&&(za(c)||La(c))?c=parseFloat(c):(l=c,!Ka.find(Ha(l))&&$r.test(u)&&(c=Ra(i,u))),e.addValue(i,Ya(c,{owner:e})),void 0===n[i]&&(n[i]=c),null!==c&&e.setBaseTarget(i,c))}}(this,n,o);const e=((e,t,n,r)=>{const a=function(e,{...t},n){const r=e.current;if(!(r instanceof Element))return{target:t,transitionEnd:n};n&&(n={...n}),e.values.forEach((e=>{const t=e.get();if(!Ct(t))return;const n=ol(t,r);n&&e.set(n)}));for(const e in t){const a=t[e];if(!Ct(a))continue;const o=ol(a,r);o&&(t[e]=o,n||(n={}),void 0===n[e]&&(n[e]=a))}return{target:t,transitionEnd:n}}(e,t,r);return ml(e,t=a.target,n,r=a.transitionEnd)})(this,n,o,t);t=e.transitionEnd,n=e.target}return{transition:e,transitionEnd:t,...n}}}class wl extends El{readValueFromInstance(e,t){if(ht.has(t)){const e=Fa(t);return e&&e.default||0}{const r=(n=e,window.getComputedStyle(n)),a=(At(t)?r.getPropertyValue(t):r[t])||0;return"string"==typeof a?a.trim():a}var n}measureInstanceViewportBox(e,{transformPagePoint:t}){return Qo(e,t)}build(e,t,n,r){Ut(e,t,n,r.transformTemplate)}scrapeMotionValuesFromProps(e,t){return un(e,t)}handleChildMotionValue(){this.childSubscription&&(this.childSubscription(),delete this.childSubscription);const{children:e}=this.props;vt(e)&&(this.childSubscription=e.on("change",(e=>{this.current&&(this.current.textContent=`${e}`)})))}renderInstance(e,t,n,r){on(e,t,n,r)}}class kl extends El{constructor(){super(...arguments),this.isSVGTag=!1}getBaseTargetFromProps(e,t){return e[t]}readValueFromInstance(e,t){if(ht.has(t)){const e=Fa(t);return e&&e.default||0}return t=ln.has(t)?t:an(t),e.getAttribute(t)}measureInstanceViewportBox(){return Bo()}scrapeMotionValuesFromProps(e,t){return cn(e,t)}build(e,t,n,r){Jt(e,t,n,this.isSVGTag,r.transformTemplate)}renderInstance(e,t,n,r){sn(e,t,0,r)}mount(e){this.isSVGTag=tn(e.tagName),super.mount(e)}}const Sl=(e,t)=>pt(e)?new kl(t,{enableHardwareAcceleration:!1}):new wl(t,{enableHardwareAcceleration:!0}),Nl={...lo,...Qn,...rl,layout:{ProjectionNode:nl,MeasureLayout:ai}},_l=ct(((e,t)=>function(e,{forwardMotionProps:t=!1},n,r){return{...pt(e)?kn:Sn,preloadedFeatures:n,useRender:rn(t),createVisualElement:r,Component:e}}(e,t,Nl,Sl)));function Pl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],s=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,a=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Bl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Bl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Bl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Tl=function(){var e=Pl((0,t.useState)(!1),2),n=e[0],r=e[1],a=Pl((0,t.useState)(!1),2),o=a[0],i=a[1],l=Pl((0,t.useState)(!1),2),s=l[0],u=l[1],c=Pl((0,t.useState)(!1),2),d=c[0],p=c[1],f=Pl((0,t.useState)(!1),2),m=f[0],h=f[1],g=Pl((0,t.useState)(!1),2),v=g[0],y=g[1],b=Pl((0,t.useState)(!1),2),x=b[0],A=b[1],C=Pl((0,t.useState)(!1),2),E=C[0],w=C[1],k=Pl((0,t.useState)(!1),2),S=k[0],N=k[1],_=Pl((0,t.useState)(!1),2),P=_[0],B=_[1],T=Pl((0,t.useState)(0),2),F=T[0],R=T[1],L=Pl((0,t.useState)(0),2),M=L[0],D=L[1];return t.createElement(t.Fragment,null,t.createElement("div",{className:"container"},t.createElement("div",{className:"colorBox"},t.createElement("div",null,t.createElement(_l.div,{className:"box",layout:!0,style:{height:n?"315px":"0px"},transition:{ease:"linear",duration:5,repeat:1/0}}),t.createElement("div",{onClick:function(){return r(!n)},className:"boxBat"},"5 sek")),t.createElement("div",null,t.createElement(_l.div,{className:"box1",layout:!0,style:{height:o?"315px":"0px"},transition:{ease:"linear",duration:10,repeat:1/0}}),t.createElement("div",{onClick:function(){return i(!o)},className:"boxBat"},"10 sek")),t.createElement("div",null,t.createElement(_l.div,{className:"box2",layout:!0,style:{height:s?"315px":"0px"},transition:{ease:"linear",repeat:1/0,duration:20}}),t.createElement("div",{onClick:function(){return u(!s)},className:"boxBat"},"20 sek")),t.createElement("div",null,t.createElement(_l.div,{className:"box3",layout:!0,style:{height:d?"315px":"0px"},transition:{ease:"linear",duration:F,repeat:1/0}}),t.createElement("div",{onClick:function(){return p(!d)},className:"boxBat"},F)),t.createElement("div",null,t.createElement(_l.div,{className:"box4",layout:!0,style:{height:m?"315px":"0px"},transition:{ease:"linear",duration:M,repeat:1/0}}),t.createElement("div",{onClick:function(){return h(!m)},className:"boxBat"},M))),t.createElement("div",{className:"inputText"}," Upiši broj sekundi ",t.createElement("span",null),t.createElement("input",{type:"number",className:"inputPlace",name:"broj",value:F,onChange:function(e){R(e.target.value)}})),t.createElement("div",{className:"inputText"}," Upiši broj sekundi ",t.createElement("span",null),t.createElement("input",{type:"number",className:"inputPlace",name:"broj",value:M,onChange:function(e){D(e.target.value)}})),t.createElement("div",{onClick:function(){return[h(!m),p(!d),u(!s),i(!o),r(!n)]},className:"boxBatAll"},"sve"),t.createElement("hr",null),t.createElement("h1",null,"Ceo dan u prolazu "),t.createElement("div",{className:"colorBox"},t.createElement("div",null,t.createElement(_l.div,{className:"box4",layout:!0,style:{height:v?"308px":"0px"},transition:{ease:"easeInOut",type:"spring",duration:1,repeat:1/0}}),t.createElement("div",{className:"title"},"1 sek")),t.createElement("div",null,t.createElement(_l.div,{className:"box3",layout:!0,style:{height:x?"315px":"0px"},transition:{ease:"linear",duration:15,repeat:1/0}}),t.createElement("div",{className:"title"},"15 sek")),t.createElement("div",null,t.createElement(_l.div,{className:"box2",layout:!0,style:{height:E?"315px":"0px"},transition:{ease:"linear",duration:60,repeat:1/0}}),t.createElement("div",{className:"title"},"1 minut")),t.createElement("div",null,t.createElement(_l.div,{className:"box1",layout:!0,style:{height:S?"315px":"0px"},transition:{ease:"linear",duration:3600,repeat:1/0}}),t.createElement("div",{className:"title"},"1 sat")),t.createElement("div",null,t.createElement(_l.div,{className:"box",layout:!0,style:{height:P?"315px":"0px"},transition:{ease:"linear",duration:86400,repeat:1/0}}),t.createElement("div",{className:"title"},"1 dan"))),t.createElement("div",{onClick:function(){return[y(!v),A(!x),w(!E),N(!S),B(!P)]},className:"boxBatAll"},"POKRENI DAN")))};function Fl(){return t.createElement(Se,{basename:"/"},t.createElement("div",{className:"navContainer"},t.createElement("div",null,t.createElement(Be,{to:"/",className:"linker",style:function(e){return{color:e.isActive?"white":"rgb(83, 85, 83)"}}},"ODNOSI")),t.createElement("div",null,t.createElement(Be,{to:"kalorije",className:"linker",style:function(e){return{color:e.isActive?"white":"rgb(83, 85, 83)"}}},"KALORIJE")),t.createElement("div",null,t.createElement(Be,{to:"tajmer",className:"linker",style:function(e){return{color:e.isActive?"white":"rgb(83, 85, 83)"}}},"TAJMER"))),t.createElement(be,null,t.createElement(ve,{path:"/",element:t.createElement(Ue,null)}),t.createElement(ve,{path:"/kalorije",element:t.createElement(Oe,null)}),t.createElement(ve,{path:"/tajmer",element:t.createElement(Tl,null)})),t.createElement("div",{className:"home"},t.createElement("div",{className:"img"})))}function Rl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Ll=function(){var e,n,r=(e=(0,t.useState)("Enter search criterium!"),n=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],s=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,a=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw a}}return l}}(e,n)||function(e,t){if(e){if("string"==typeof e)return Rl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Rl(e,t):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());return r[0],r[1],t.createElement(Fl,null)};r.createRoot(document.getElementById("root")).render(t.createElement(Ll,{number:10,title:"String from index file",text:"Text from index file"}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,