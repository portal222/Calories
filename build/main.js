/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var __webpack_modules__={154:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(294),_Display__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(417),_KeyPadComponent__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(942);function _typeof(e){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,_toPropertyKey(r.key),r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},_setPrototypeOf(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){if(t&&("object"===_typeof(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(e)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},_getPrototypeOf(e)}function _defineProperty(e,t,n){return(t=_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _toPropertyKey(e){var t=_toPrimitive(e,"string");return"symbol"===_typeof(t)?t:String(t)}function _toPrimitive(e,t){if("object"!==_typeof(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!==_typeof(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}var Digitron=function(_Component){_inherits(Digitron,_Component);var _super=_createSuper(Digitron);function Digitron(){var _this;_classCallCheck(this,Digitron);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _this=_super.call.apply(_super,[this].concat(args)),_defineProperty(_assertThisInitialized(_this),"state",{result:""}),_defineProperty(_assertThisInitialized(_this),"onClick",(function(e){"="===e?_this.calculate():"C"===e?_this.reset():"CE"===e?_this.backspace():_this.setState({result:_this.state.result+e})})),_defineProperty(_assertThisInitialized(_this),"calculate",(function(){var checkResult="";checkResult=_this.state.result.includes("--")?_this.state.result.replace("--","+"):_this.state.result;try{_this.setState({result:(eval(checkResult)||"")+""})}catch(e){_this.setState({result:"error"})}})),_defineProperty(_assertThisInitialized(_this),"reset",(function(){_this.setState({result:""})})),_defineProperty(_assertThisInitialized(_this),"backspace",(function(){_this.setState({result:_this.state.result.slice(0,-1)})})),_this}return _createClass(Digitron,[{key:"render",value:function(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"calculator-body"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Display__WEBPACK_IMPORTED_MODULE_1__.Z,{result:this.state.result}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_KeyPadComponent__WEBPACK_IMPORTED_MODULE_2__.Z,{onClick:this.onClick})))}}]),Digitron}(react__WEBPACK_IMPORTED_MODULE_0__.Component);const __WEBPACK_DEFAULT_EXPORT__=Digitron},417:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(294);function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,a=function(e,t){if("object"!==o(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==o(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===o(a)?a:String(a)),r)}var a}function i(e,t){return i=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},i(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}const s=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&i(e,t)}(d,e);var t,n,s,u,c=(s=d,u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=l(s);if(u){var n=l(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===o(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function d(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,d),c.apply(this,arguments)}return t=d,(n=[{key:"render",value:function(){var e=this.props.result;return r.createElement("div",{className:"result"}," ",e," ")}}])&&a(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),d}(r.Component)},942:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(294);function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,a=function(e,t){if("object"!==o(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==o(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===o(a)?a:String(a)),r)}var a}function i(e,t){return i=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},i(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}const s=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&i(e,t)}(d,e);var t,n,s,u,c=(s=d,u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=l(s);if(u){var n=l(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===o(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function d(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,d),c.apply(this,arguments)}return t=d,(n=[{key:"render",value:function(){var e=this;return r.createElement("div",{className:"button"},r.createElement("button",{name:"C",onClick:function(t){return e.props.onClick(t.target.name)},label:"C",value:"clear"},"C"),r.createElement("button",{name:"CE",onClick:function(t){return e.props.onClick(t.target.name)}},"CE"),r.createElement("button",{name:"(",onClick:function(t){return e.props.onClick(t.target.name)}},"("),r.createElement("button",{name:")",onClick:function(t){return e.props.onClick(t.target.name)}},")"),r.createElement("button",{name:"7",onClick:function(t){return e.props.onClick(t.target.name)},label:"7",value:"7"},"7"),r.createElement("button",{name:"8",onClick:function(t){return e.props.onClick(t.target.name)},label:"8",value:"8"},"8"),r.createElement("button",{name:"9",onClick:function(t){return e.props.onClick(t.target.name)},label:"9",value:"9"},"9"),r.createElement("button",{name:"+",onClick:function(t){return e.props.onClick(t.target.name)},label:"+",size:"2",value:"+"},"+"),r.createElement("button",{name:"4",onClick:function(t){return e.props.onClick(t.target.name)},label:"4",value:"4"},"4"),r.createElement("button",{name:"5",onClick:function(t){return e.props.onClick(t.target.name)},label:"5",value:"5"},"5"),r.createElement("button",{name:"6",onClick:function(t){return e.props.onClick(t.target.name)},label:"6",value:"6"},"6"),r.createElement("button",{name:"-",onClick:function(t){return e.props.onClick(t.target.name)},label:"-",value:"-"},"-"),r.createElement("button",{name:"1",onClick:function(t){return e.props.onClick(t.target.name)},label:"1",value:"1"},"1"),r.createElement("button",{name:"2",onClick:function(t){return e.props.onClick(t.target.name)},label:"2",value:"2"},"2"),r.createElement("button",{name:"3",onClick:function(t){return e.props.onClick(t.target.name)},label:"3",value:"3"},"3"),r.createElement("button",{name:"*",onClick:function(t){return e.props.onClick(t.target.name)},label:"x",value:"*"},"*"),r.createElement("button",{name:".",onClick:function(t){return e.props.onClick(t.target.name)},label:".",value:"."},"."),r.createElement("button",{name:"0",onClick:function(t){return e.props.onClick(t.target.name)},label:"0",value:"0"},"0"),r.createElement("button",{name:"=",onClick:function(t){return e.props.onClick(t.target.name)},label:"=",size:"2",value:"equal"},"="),r.createElement("button",{name:"/",onClick:function(t){return e.props.onClick(t.target.name)},label:"/",value:"/"},"/"))}}])&&a(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),d}(r.Component)},528:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,".container{display:flex;flex-direction:column;margin:auto;max-width:650px;min-width:650px;height:1200px;background-color:#e0b8a0;text-align:center;align-items:center;justify-content:center}.container hr{width:645px}.container .colorBox{display:flex;justify-content:baseline;align-items:end;width:500px;height:345px;background-color:bisque;border:8px solid #9e9e9e;border-radius:12px}.container .colorBox .box{width:100px;background-color:#2920d4}.container .colorBox .box1{width:100px;background-color:#382fd9}.container .colorBox .box2{width:100px;background-color:#5751d2}.container .colorBox .box3{width:100px;background-color:#746fd2}.container .colorBox .box4{width:100px;background-color:#9794d3}.container .colorBox .boxBat{height:20px;padding:4px;border:solid 1px green;border-radius:5px;background-color:#ffd27d;cursor:pointer}.container .colorBox .boxBat:hover{background-color:#ebab6c}.container .colorBox .title{height:22px;padding:4px;background-color:#d0f0e6;color:#191949}.container .boxBatAll{height:24px;padding:4px 30px;border:solid 2px green;border-radius:7px;background-color:#ffd27d;margin:10px;cursor:pointer}.container .boxBatAll:hover{background-color:#ebab6c}.container .inputText{color:#40433f;font-size:20px;margin:10px}.container .inputText .inputPlace{max-width:100px;height:20px;background-color:aliceblue}.sati{display:flex;align-items:end;padding:0px;border-color:#9e9e9e;border-radius:3px;border-width:3px;border-style:solid;height:120px;background-color:#fffce9;width:200px;margin:auto}.sati .minut{margin:0px;width:50px;color:transparent}.sati .dan{margin:0px;width:50px;color:transparent;cursor:pointer}.sati .dan .content{display:none;font-size:14px;font-weight:lighter;position:absolute;min-width:30px}.sati .dan .content span{position:relative;top:-2px;width:40px;padding-left:10px;box-shadow:2px 8px 16px 0px rgba(0,0,0,0.7);background-color:#f9f9f9;display:flex;text-align:center}.sati .dan:hover .content{display:block;color:black;text-shadow:none}.sati .title{height:25px}.sati .sekunde{width:50px;background-color:#80cbc4}.casovnik{text-align:center;font-size:18px;padding:10px 3px;font-weight:bold}.boxBatAll{height:18px;padding:0px 10px;border:solid 2px green;font-size:16px;border-radius:7px;background-color:#ffd27d;cursor:pointer}.boxBatAll:hover{background-color:#ebab6c}.satovi{height:450px;padding-left:200px;padding-bottom:30px;padding-top:30px}@media screen and (max-width: 500px){.container{max-width:358px;min-width:358px}.container hr{width:355px}.container .colorBox{max-width:325px;min-width:325px;border:solid 3px grey;border-radius:8px}.container .colorBox .box,.container .colorBox .box1,.container .colorBox .box2,.container .colorBox .box3,.container .colorBox .box4{width:65px}.container .colorBox .boxBat{border-radius:5px}}body{background-color:seashell}.result{display:flex;justify-content:left;align-items:center;height:60px;background-color:#e7f6fd;border:1px solid #8f7a6f;width:97%;font-size:40px;font-family:'Comfortaa', cursive;padding-left:7px;overflow:hidden}.calculator-body{max-width:400px;margin:auto}.button{background-color:#bbb;border:1px solid #8f7a6f}button{width:25%;height:60px;font-size:30px;border:0.02px solid #8f7a6f;font-family:'Comfortaa', cursive;background-color:#f1f1f1;cursor:pointer}button:hover{background-color:#fbd590}@media screen and (max-width: 500px){.result{height:40px;width:93%;font-size:24px;font-family:'Comfortaa', cursive;padding-right:8px}.calculator-body{max-width:250px}button{height:40px;font-size:18px;font-family:'Comfortaa', cursive}}body{font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;font-size:18px;background-color:#d7ccc8}.navContainer{background-color:#bcaaa4;display:flex;flex-direction:row;margin:auto;height:60px;max-width:650px;min-width:650px;justify-content:space-around;align-items:center}.navContainer .linker{color:#cdcdcd;text-decoration:none;font-weight:bold}.navContainer .linker:hover{color:#a8dbd7}.home{margin-top:0;margin:auto;width:650px;height:880px;background-color:#d7ccc8;padding-top:100px}.home .img{margin:auto;background-size:cover;background-image:url(\"https://freepngimg.com/thumb/shape/81500-golden-ratio-spiral-number-fibonacci-white-circle.png\");width:640px;height:395px}.odnosi{border-collapse:collapse;max-width:650px;min-width:650px;margin:auto;background-color:#d7ccc8;margin-bottom:12px}.odnosi .proc{padding-left:20px}.odnosi th{background-color:#8f7a6f;color:#f5f5f5;font-size:18px;padding:12px}.odnosi .relacija{min-width:50px;max-width:50px;overflow:hidden;text-overflow:ellipsis}.odnosi td{font-family:Verdana, Geneva, Tahoma, sans-serif;font-size:16px;text-align:center;min-width:50px;max-width:50px;padding:10px 0px}.odnosi input{text-align:center;height:20px;min-width:50px;max-width:50px;background-color:#e7f6fd;border-radius:4px;border-color:burlywood}.odnosi .recipe{text-align:left;padding-right:5px;padding-left:5px;font-size:18px;color:#84867b;width:120px}.odnosi .title{font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;font-size:24px;padding-right:5px;padding-left:10px;font-weight:bold;text-align:center}.odnosi .nameComm{padding-left:5px;font-size:20px;color:black;text-align:left}model-viewer{margin:auto;cursor:grab;display:flex;height:500px;width:650px;overflow:hidden;position:relative;user-select:none}.view-button{background-color:transparent;border-color:transparent}.calc{margin:auto;margin-top:30px;width:300px}.hrana{border-collapse:collapse;max-width:650px;min-width:650px;background-color:#cdcdcd;margin:auto}.hrana .naslov{font-size:20px;min-width:150px;max-width:150px}.hrana input{text-align:left;height:20px;min-width:60px;max-width:60px;background-color:#e7f6fd;border-radius:4px;border-color:burlywood}.hrana .hidrati{background-color:#b8c6b8}.hrana .hidrati .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana .hidrati .ugHid,.hrana .hidrati .mast{min-width:60px}.hrana .prot{background-color:#eed0aa}.hrana .prot .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana .mleko{background-color:#e8e8e8}.hrana .mleko .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana .oil{background-color:#e0db97}.hrana .oil .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana .orah{background-color:#a1c4b2}.hrana .orah .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana .voce{background-color:#a590b6}.hrana .voce .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana .kupus{background-color:#b9f3b2}.hrana .kupus .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana .alcohol{background-color:#cefff7}.hrana .alcohol .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana thead{font-size:20px}.hrana thead th{text-align:center;background-color:#4c6a4b;color:#cdcdcd;padding:10px 3px;min-width:26px}.hrana tr{background-color:#d7ccc8}.hrana tfoot{color:#a8dbd7}.hrana tfoot tr{background-color:#92a192}.hrana tfoot tr .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana td{padding:8px;font-size:24}.back-to-top{position:fixed;bottom:20px;right:20px;color:#84867b;cursor:pointer;border-radius:400px}.back-to-top .arrowup{width:24px;height:24px;color:#7a9c99ac;background-color:rgba(165,206,195,0.43);font-size:38px;padding-left:5px;border-radius:12px;border:solid 3px #95beba7c}@media screen and (max-width: 500px){body{font-size:16px;margin:0;padding:0}.navContainer{max-width:358px;min-width:358px;margin:auto}.home{margin-top:0;margin:auto;width:358px;height:880px;padding-top:80px}.home .img{height:221px;width:358px}.odnosi{max-width:348px;min-width:348px}.odnosi tr{padding:12px 8px}.odnosi th{font-size:14px;padding:7px}.odnosi .relacija{min-width:30px;max-width:30px}.odnosi td{font-size:14px;min-width:30px;max-width:30px}.odnosi input{height:18px;min-width:30px;max-width:30px}.odnosi .recipe{text-align:left;font-size:16px;color:#84867b}.odnosi .title{font-size:20px}.odnosi .nameComm{padding-left:4px;font-size:17px}model-viewer{width:360px;height:400px}.hrana{max-width:358px;min-width:358px;margin:auto;font-size:14px}.hrana thead{font-size:14px;padding:6px 2px}.hrana .hidrati .ugHid{min-width:37px}.hrana .hidrati .mast{min-width:37px}.hrana .naslov{font-size:14px;min-width:50px;max-width:50px}.hrana input{font-size:14px;min-width:47px;max-width:47px;border-radius:3px}.hrana td{padding:3px 5px}.hrana .base{min-width:400px;padding-left:15px;background-color:chocolate}}\n","",{version:3,sources:["webpack://./src/scss/_tajmer.scss","webpack://./src/scss/_digitron.scss","webpack://./src/scss/main.scss"],names:[],mappings:"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",sourcesContent:["$color01: rgb(41, 32, 212);\r\n$color02: rgb(56, 47, 217);\r\n$color03: rgb(87, 81, 210);\r\n$color04: rgb(116, 111, 210);\r\n$color05: rgb(151, 148, 211);\r\n\r\n.container {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    margin: auto;\r\n    max-width: 650px;\r\n    min-width: 650px;\r\n    height: 1200px;\r\n    background-color: rgb(224, 184, 160);\r\n    text-align: center;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    hr {\r\n\r\n        width: 645px;\r\n    }\r\n\r\n\r\n    .colorBox {\r\n        display: flex;\r\n        justify-content: baseline;\r\n        align-items: end;\r\n        width: 500px;\r\n        height: 345px;\r\n        background-color: bisque;\r\n        border: 8px solid #9e9e9e;\r\n        border-radius: 12px;\r\n\r\n        .box {\r\n            width: 100px;\r\n            background-color: $color01;\r\n        }\r\n\r\n        .box1 {\r\n            width: 100px;\r\n            background-color: $color02;\r\n        }\r\n\r\n        .box2 {\r\n            width: 100px;\r\n            background-color: $color03;\r\n        }\r\n\r\n        .box3 {\r\n            width: 100px;\r\n            background-color: $color04;\r\n        }\r\n\r\n        .box4 {\r\n            width: 100px;\r\n            background-color: $color05;\r\n        }\r\n\r\n        .boxBat {\r\n            height: 20px;\r\n            padding: 4px;\r\n            border: solid 1px green;\r\n            border-radius: 5px;\r\n            background-color: rgb(255, 210, 125);\r\n            cursor: pointer;\r\n\r\n            &:hover {\r\n                background-color: rgb(235, 171, 108);\r\n            }\r\n\r\n        }\r\n\r\n        .title {\r\n            height: 22px;\r\n            padding: 4px;\r\n            background-color: rgb(208, 240, 230);\r\n            color: rgb(25, 25, 73);\r\n        }\r\n    }\r\n\r\n    .boxBatAll {\r\n        height: 24px;\r\n        padding: 4px 30px;\r\n        border: solid 2px green;\r\n        border-radius: 7px;\r\n        background-color: rgb(255, 210, 125);\r\n        margin: 10px;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            background-color: rgb(235, 171, 108);\r\n        }\r\n\r\n    }\r\n\r\n    .inputText {\r\n        color: #40433f;\r\n        font-size: 20px;\r\n        margin: 10px;\r\n\r\n        .inputPlace {\r\n            max-width: 100px;\r\n            height: 20px;\r\n            background-color: aliceblue;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n.sati {\r\n    display: flex;\r\n    // justify-content: baseline;\r\n    align-items: end;\r\n    padding: 0px;\r\n    // border-image-repeat: linear-gradient(#e71c05, #d7c4bd);\r\n    border-color: #9e9e9e;\r\n    border-radius: 3px;\r\n    border-width: 3px;\r\n    border-style: solid;\r\n    height: 120px;\r\n    background-color: #fffce9;\r\n    width: 200px;\r\n    margin: auto;\r\n\r\n    // vertical-align: baseline;\r\n    .minut {\r\n\r\n\r\n        margin: 0px;\r\n        width: 50px;\r\n        color: transparent;\r\n\r\n    }\r\n\r\n    .dan {\r\n        margin: 0px;\r\n        width: 50px;\r\n        color: transparent;\r\n        cursor: pointer;\r\n\r\n        .content {\r\n            display: none;\r\n            font-size: 14px;\r\n            font-weight: lighter;\r\n            position: absolute;\r\n            min-width: 30px;\r\n\r\n            span {\r\n                position: relative;\r\n                top: -2px;\r\n                width: 40px;\r\n         padding-left: 10px;\r\n                box-shadow: 2px 8px 16px 0px rgba(0, 0, 0, 0.7);\r\n                background-color: #f9f9f9;\r\n                display: flex;\r\n                // align-content: center;\r\n                text-align: center;\r\n            }\r\n        }\r\n        &:hover .content {\r\n            display: block;\r\n            color: black;\r\n            text-shadow: none;\r\n        }\r\n    }\r\n    .title {\r\n        height: 25px;\r\n    }\r\n    .sekunde {\r\n        width: 50px;\r\n        background-color: #80cbc4;\r\n    }\r\n}\r\n\r\n.casovnik {\r\n    text-align: center;\r\n    font-size: 18px;\r\n    padding: 10px 3px;\r\n    font-weight: bold;\r\n}\r\n\r\n.boxBatAll {\r\n    height: 18px;\r\n    padding: 0px 10px;\r\n    border: solid 2px green;\r\n    font-size: 16px;\r\n    border-radius: 7px;\r\n    background-color: rgb(255, 210, 125);\r\n\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        background-color: rgb(235, 171, 108);\r\n    }\r\n\r\n}\r\n\r\n.satovi {\r\n    height: 450px;\r\n    padding-left: 200px;\r\n    padding-bottom: 30px;\r\n    padding-top: 30px;\r\n\r\n}\r\n\r\n@media screen and (max-width: 500px) {\r\n    .container {\r\n        max-width: 358px;\r\n        min-width: 358px;\r\n\r\n        hr {\r\n            width: 355px;\r\n        }\r\n\r\n        .colorBox {\r\n            max-width: 325px;\r\n            min-width: 325px;\r\n            border: solid 3px grey;\r\n            border-radius: 8px;\r\n\r\n\r\n            .box,\r\n            .box1,\r\n            .box2,\r\n            .box3,\r\n            .box4 {\r\n                width: 65px;\r\n            }\r\n\r\n            .boxBat {\r\n                border-radius: 5px;\r\n            }\r\n        }\r\n    }\r\n}","body {\r\n    background-color: seashell;\r\n}\r\n\r\n\r\n.result {\r\n    display: flex;\r\n    justify-content: left;\r\n    align-items: center;\r\n    height: 60px;\r\n    background-color: rgb(231, 246, 253);\r\n    border: 1px solid rgb(143, 122, 111);\r\n    width: 97%;\r\n    font-size: 40px;\r\n    font-family: 'Comfortaa', cursive;\r\n    padding-left: 7px;\r\n    overflow: hidden;\r\n\r\n}\r\n\r\n\r\n\r\n.calculator-body {\r\n    max-width: 400px;\r\n    margin: auto;\r\n}\r\n\r\n.button {\r\n    // display: block;\r\n    background-color: #bbb;\r\n    border: 1px solid rgb(143, 122, 111);\r\n}\r\n\r\nbutton {\r\n    width: 25%;\r\n    height: 60px;\r\n    font-size: 30px;\r\n    border: 0.02px solid rgb(143, 122, 111);\r\n    font-family: 'Comfortaa', cursive;\r\n    background-color: rgb(241, 241, 241);\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        background-color: rgb(251, 213, 144);\r\n\r\n    }\r\n}\r\n\r\n@media screen and (max-width: 500px) {\r\n\r\n    .result {\r\n\r\n        height: 40px;\r\n     \r\n        width: 93%;\r\n        font-size: 24px;\r\n        font-family: 'Comfortaa', cursive;\r\n        padding-right: 8px;\r\n\r\n    }\r\n\r\n    .calculator-body {\r\n        max-width: 250px;\r\n\r\n    }\r\n\r\n    button {\r\n\r\n        height: 40px;\r\n        font-size: 18px;\r\n        font-family: 'Comfortaa', cursive;\r\n\r\n\r\n    }\r\n\r\n\r\n}","@import '../scss/_tajmer.scss';\r\n@import '../scss/_digitron.scss';\r\n\r\n\r\n$color-one: #cdcdcd;\r\n$color-two: #a7abb0;\r\n$color-three: rgb(164, 168, 206);\r\n$color4: rgb(231, 246, 253);\r\n// $color5: rgb(241, 241, 241);\r\n$color5: #d7ccc8;\r\n$color6: rgb(143, 122, 111);\r\n$colorHid: rgb(184, 198, 184);\r\n$colorProt: rgb(238, 208, 170);\r\n$colorMl: rgb(232, 232, 232);\r\n$colorOil: rgb(224, 219, 151);\r\n$colorNut: rgb(161, 196, 178);\r\n$colorVoce: rgb(165, 144, 182);\r\n$colorKup: rgb(185, 243, 178);\r\n$colorAlc: rgb(206, 255, 247);\r\n;\r\n\r\nbody {\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n    font-size: 18px;\r\n    // background-color: rgb(251, 213, 144);\r\n    background-color: $color5;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n.navContainer {\r\n    background-color: #bcaaa4;\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin: auto;\r\n    height: 60px;\r\n    max-width: 650px;\r\n    min-width: 650px;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n\r\n    .linker {\r\n        color: $color-one;\r\n        text-decoration: none;\r\n        font-weight: bold;\r\n    }\r\n\r\n    .linker:hover {\r\n        color: #a8dbd7;\r\n    }\r\n\r\n\r\n}\r\n\r\n.home {\r\n    margin-top: 0;\r\n    margin: auto;\r\n    width: 650px;\r\n    height: 880px;\r\n    background-color: $color5;\r\n    padding-top: 100px;\r\n\r\n    .img {\r\n        margin: auto;\r\n        background-size: cover;\r\n        background-image: url(\"https://freepngimg.com/thumb/shape/81500-golden-ratio-spiral-number-fibonacci-white-circle.png\");\r\n        width: 640px;\r\n        height: 395px;\r\n    }\r\n}\r\n\r\n.odnosi {\r\n    border-collapse: collapse;\r\n\r\n    max-width: 650px;\r\n    min-width: 650px;\r\n    margin: auto;\r\n    background-color: $color5;\r\n    margin-bottom: 12px;\r\n\r\n\r\n    .proc {\r\n        padding-left: 20px;\r\n    }\r\n\r\n    th {\r\n        background-color: $color6;\r\n        color: #f5f5f5;\r\n        font-size: 18px;\r\n        padding: 12px;\r\n    }\r\n\r\n    .relacija {\r\n        min-width: 50px;\r\n        max-width: 50px;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n    }\r\n\r\n    td {\r\n        font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n        font-size: 16px;\r\n        text-align: center;\r\n        min-width: 50px;\r\n        max-width: 50px;\r\n        padding: 10px 0px;\r\n\r\n\r\n    }\r\n\r\n    input {\r\n        text-align: center;\r\n        height: 20px;\r\n        min-width: 50px;\r\n        max-width: 50px;\r\n        background-color: $color4;\r\n        border-radius: 4px;\r\n        border-color: burlywood;\r\n\r\n    }\r\n    .recipe {\r\n        text-align: left;\r\n        padding-right: 5px;\r\n        padding-left: 5px;\r\n        font-size: 18px;\r\n        color: #84867b;\r\n        width: 120px;\r\n    }\r\n    .title {\r\n        font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n        font-size: 24px;\r\n        padding-right: 5px;\r\n        padding-left: 10px;\r\n        font-weight: bold;\r\n        text-align: center;\r\n        // width: 300px;\r\n    }\r\n    .nameComm {\r\n        padding-left: 5px;\r\n        font-size: 20px;\r\n        color: black;\r\n        text-align: left;\r\n    }\r\n}\r\n\r\nmodel-viewer {\r\n    margin: auto;\r\n    cursor: grab;\r\n    display: flex;\r\n    height: 500px;\r\n    width: 650px;\r\n    overflow: hidden;\r\n    position: relative;\r\n    user-select: none;\r\n}\r\n\r\n.view-button {\r\n    background-color: transparent;\r\n    border-color: transparent;\r\n\r\n}\r\n\r\n.calc {\r\n    margin: auto;\r\n    margin-top: 30px;\r\n    width: 300px;\r\n}\r\n\r\n.hrana {\r\n\r\n    border-collapse: collapse;\r\n    max-width: 650px;\r\n    min-width: 650px;\r\n    background-color: $color-one;\r\n    margin: auto;\r\n\r\n    .naslov {\r\n        font-size: 20px;\r\n        min-width: 150px;\r\n        max-width: 150px;\r\n    }\r\n\r\n    input {\r\n        text-align: left;\r\n        height: 20px;\r\n        min-width: 60px;\r\n        max-width: 60px;\r\n        background-color: $color4;\r\n        border-radius: 4px;\r\n        border-color: burlywood;\r\n    }\r\n\r\n    .hidrati {\r\n        background-color: $colorHid;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n\r\n        .ugHid,\r\n        .mast {\r\n            min-width: 60px;\r\n        }\r\n\r\n    }\r\n\r\n    .prot {\r\n        background-color: $colorProt;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n    }\r\n\r\n    .mleko {\r\n        background-color: $colorMl;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n    }\r\n\r\n    .oil {\r\n        background-color: $colorOil;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n    }\r\n\r\n    .orah {\r\n        background-color: $colorNut;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n    }\r\n\r\n    .voce {\r\n        background-color: $colorVoce;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n    }\r\n\r\n    .kupus {\r\n        background-color: $colorKup;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n    }\r\n\r\n    .alcohol {\r\n        background-color: $colorAlc;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n    }\r\n\r\n    thead {\r\n        font-size: 20px;\r\n\r\n        th {\r\n            text-align: center;\r\n            background-color: #4c6a4b;\r\n            color: $color-one;\r\n            padding: 10px 3px;\r\n            min-width: 26px;\r\n        }\r\n\r\n    }\r\n\r\n    tr {\r\n        background-color: $color5;\r\n\r\n\r\n    }\r\n\r\n    tfoot {\r\n        color: #a8dbd7;\r\n\r\n        tr {\r\n\r\n            background-color: #92a192;\r\n\r\n            .protein {\r\n                height: 25px;\r\n                min-width: 27px;\r\n                max-width: 27px;\r\n                overflow: hidden;\r\n                text-overflow: ellipsis;\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    td {\r\n        padding: 8px;\r\n        font-size: 24;\r\n    }\r\n}\r\n\r\n.back-to-top {\r\n    position: fixed;\r\n    bottom: 20px;\r\n    right: 20px;\r\n\r\n    color: #84867b;\r\n    cursor: pointer;\r\n    border-radius: 400px;\r\n\r\n    .arrowup {\r\n        width: 24px;\r\n        height: 24px;\r\n        color: #7a9c99ac;\r\n        background-color: rgba(165, 206, 195, 0.43);\r\n        font-size: 38px;\r\n        padding-left: 5px;\r\n\r\n        border-radius: 12px;\r\n        border: solid 3px #95beba7c;\r\n    }\r\n}\r\n\r\n\r\n@media screen and (max-width: 500px) {\r\n    body {\r\n        font-size: 16px;\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n\r\n    .navContainer {\r\n        max-width: 358px;\r\n        min-width: 358px;\r\n        margin: auto;\r\n    }\r\n\r\n    .home {\r\n        margin-top: 0;\r\n        margin: auto;\r\n        width: 358px;\r\n        height: 880px;\r\n\r\n        padding-top: 80px;\r\n\r\n        .img {\r\n            height: 221px;\r\n            width: 358px;\r\n\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    .odnosi {\r\n        max-width: 348px;\r\n        min-width: 348px;\r\n\r\n\r\n        tr {\r\n            padding: 12px 8px;\r\n        }\r\n\r\n        th {\r\n\r\n            font-size: 14px;\r\n            padding: 7px;\r\n        }\r\n\r\n        .relacija {\r\n            min-width: 30px;\r\n            max-width: 30px;\r\n\r\n        }\r\n\r\n        td {\r\n\r\n            font-size: 14px;\r\n\r\n            min-width: 30px;\r\n            max-width: 30px;\r\n\r\n        }\r\n\r\n        input {\r\n\r\n            height: 18px;\r\n            min-width: 30px;\r\n            max-width: 30px;\r\n\r\n\r\n        }\r\n        .recipe {\r\n            text-align: left;\r\n          \r\n            font-size: 16px;\r\n            color: #84867b;\r\n          \r\n        }\r\n        .title {\r\n          \r\n            font-size: 20px;\r\n         \r\n        }\r\n        .nameComm {\r\n            padding-left: 4px;\r\n            font-size: 17px;\r\n       \r\n        }\r\n    }\r\n\r\n    model-viewer {\r\n        width: 360px;\r\n        height: 400px;\r\n    }\r\n\r\n    .hrana {\r\n        max-width: 358px;\r\n        min-width: 358px;\r\n        margin: auto;\r\n        font-size: 14px;\r\n\r\n        thead {\r\n            font-size: 14px;\r\n            padding: 6px 2px;\r\n        }\r\n\r\n        .hidrati {\r\n            .ugHid {\r\n                min-width: 37px;\r\n            }\r\n\r\n            .mast {\r\n                min-width: 37px;\r\n            }\r\n        }\r\n\r\n        .naslov {\r\n            font-size: 14px;\r\n            min-width: 50px;\r\n            max-width: 50px;\r\n        }\r\n\r\n        input {\r\n            font-size: 14px;\r\n            min-width: 47px;\r\n            max-width: 47px;\r\n            border-radius: 3px;\r\n        }\r\n\r\n        td {\r\n            padding: 3px 5px;\r\n\r\n        }\r\n\r\n\r\n        .base {\r\n            min-width: 400px;\r\n            padding-left: 15px;\r\n            background-color: chocolate;\r\n        }\r\n    }\r\n\r\n\r\n\r\n}"],sourceRoot:""}]);const l=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},679:(e,t,n)=>{var r=n(864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function s(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var u=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var o=f(n);o&&o!==m&&e(t,o,r)}var i=c(n);d&&(i=i.concat(d(n)));for(var l=s(t),h=s(n),g=0;g<i.length;++g){var y=i[g];if(!(a[y]||r&&r[y]||h&&h[y]||l&&l[y])){var v=p(n,y);try{u(t,y,v)}catch(e){}}}}return t}},448:(e,t,n)=>{var r=n(294),o=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function s(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f={},m={};function h(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new h(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new h(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new h(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new h(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new h(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new h(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new h(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new h(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new h(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!d.call(m,e)||!d.call(f,e)&&(p.test(e)?m[e]=!0:(f[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,v);g[t]=new h(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,v);g[t]=new h(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,v);g[t]=new h(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new h(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new h("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new h(e,1,!1,e.toLowerCase(),null,!0,!0)}));var x=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,A=Symbol.for("react.element"),w=Symbol.for("react.portal"),C=Symbol.for("react.fragment"),E=Symbol.for("react.strict_mode"),k=Symbol.for("react.profiler"),S=Symbol.for("react.provider"),N=Symbol.for("react.context"),_=Symbol.for("react.forward_ref"),B=Symbol.for("react.suspense"),P=Symbol.for("react.suspense_list"),T=Symbol.for("react.memo"),O=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var R=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var F=Symbol.iterator;function L(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=F&&e[F]||e["@@iterator"])?e:null}var j,M=Object.assign;function D(e){if(void 0===j)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);j=t&&t[1]||""}return"\n"+j+e}var z=!1;function I(e,t){if(!e||z)return"";z=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l]){var s="\n"+o[i].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}}while(1<=i&&0<=l);break}}}finally{z=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?D(e):""}function V(e){switch(e.tag){case 5:return D(e.type);case 16:return D("Lazy");case 13:return D("Suspense");case 19:return D("SuspenseList");case 0:case 2:case 15:return I(e.type,!1);case 11:return I(e.type.render,!1);case 1:return I(e.type,!0);default:return""}}function $(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case C:return"Fragment";case w:return"Portal";case k:return"Profiler";case E:return"StrictMode";case B:return"Suspense";case P:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case N:return(e.displayName||"Context")+".Consumer";case S:return(e._context.displayName||"Context")+".Provider";case _:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case T:return null!==(t=e.displayName||null)?t:$(e.type)||"Memo";case O:t=e._payload,e=e._init;try{return $(e(t))}catch(e){}}return null}function U(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return $(t);case 8:return t===E?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function G(e,t){var n=t.checked;return M({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Q(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=W(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function Z(e,t){X(e,t);var n=W(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,W(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+W(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return M({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:W(n)}}function ae(e,t){var n=W(t.value),r=W(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function se(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,de=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function pe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var fe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},me=["Webkit","ms","Moz","O"];function he(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||fe.hasOwnProperty(e)&&fe[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=he(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(fe).forEach((function(e){me.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),fe[t]=fe[e]}))}));var ye=M({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,t){if(t){if(ye[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var xe=null;function Ae(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var we=null,Ce=null,Ee=null;function ke(e){if(e=xo(e)){if("function"!=typeof we)throw Error(a(280));var t=e.stateNode;t&&(t=wo(t),we(e.stateNode,e.type,t))}}function Se(e){Ce?Ee?Ee.push(e):Ee=[e]:Ce=e}function Ne(){if(Ce){var e=Ce,t=Ee;if(Ee=Ce=null,ke(e),t)for(e=0;e<t.length;e++)ke(t[e])}}function _e(e,t){return e(t)}function Be(){}var Pe=!1;function Te(e,t,n){if(Pe)return e(t,n);Pe=!0;try{return _e(e,t,n)}finally{Pe=!1,(null!==Ce||null!==Ee)&&(Be(),Ne())}}function Oe(e,t){var n=e.stateNode;if(null===n)return null;var r=wo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Re=!1;if(c)try{var Fe={};Object.defineProperty(Fe,"passive",{get:function(){Re=!0}}),window.addEventListener("test",Fe,Fe),window.removeEventListener("test",Fe,Fe)}catch(ce){Re=!1}function Le(e,t,n,r,o,a,i,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var je=!1,Me=null,De=!1,ze=null,Ie={onError:function(e){je=!0,Me=e}};function Ve(e,t,n,r,o,a,i,l,s){je=!1,Me=null,Le.apply(Ie,arguments)}function $e(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ue(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function We(e){if($e(e)!==e)throw Error(a(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=$e(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return We(o),e;if(i===r)return We(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,s=o.child;s;){if(s===n){l=!0,n=o,r=i;break}if(s===r){l=!0,r=o,n=i;break}s=s.sibling}if(!l){for(s=i.child;s;){if(s===n){l=!0,n=i,r=o;break}if(s===r){l=!0,r=i,n=o;break}s=s.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?Ye(e):null}function Ye(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ye(e);if(null!==t)return t;e=e.sibling}return null}var qe=o.unstable_scheduleCallback,Ke=o.unstable_cancelCallback,Ge=o.unstable_shouldYield,Qe=o.unstable_requestPaint,Xe=o.unstable_now,Ze=o.unstable_getCurrentPriorityLevel,Je=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,at=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/st|0)|0},lt=Math.log,st=Math.LN2,ut=64,ct=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function pt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,a=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~o;0!==l?r=dt(l):0!=(a&=i)&&(r=dt(a))}else 0!=(i=n&~o)?r=dt(i):0!==a&&(r=dt(a));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(a=t&-t)||16===o&&0!=(4194240&a)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-it(t)),r|=e[n],t&=~o;return r}function ft(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function mt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function ht(){var e=ut;return 0==(4194240&(ut<<=1))&&(ut=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function vt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function xt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var At,wt,Ct,Et,kt,St=!1,Nt=[],_t=null,Bt=null,Pt=null,Tt=new Map,Ot=new Map,Rt=[],Ft="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Lt(e,t){switch(e){case"focusin":case"focusout":_t=null;break;case"dragenter":case"dragleave":Bt=null;break;case"mouseover":case"mouseout":Pt=null;break;case"pointerover":case"pointerout":Tt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Ot.delete(t.pointerId)}}function jt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=xo(t))&&wt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Mt(e){var t=bo(e.target);if(null!==t){var n=$e(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ue(n)))return e.blockedOn=t,void kt(e.priority,(function(){Ct(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Dt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=xo(n))&&wt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);xe=r,n.target.dispatchEvent(r),xe=null,t.shift()}return!0}function zt(e,t,n){Dt(e)&&n.delete(t)}function It(){St=!1,null!==_t&&Dt(_t)&&(_t=null),null!==Bt&&Dt(Bt)&&(Bt=null),null!==Pt&&Dt(Pt)&&(Pt=null),Tt.forEach(zt),Ot.forEach(zt)}function Vt(e,t){e.blockedOn===t&&(e.blockedOn=null,St||(St=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,It)))}function $t(e){function t(t){return Vt(t,e)}if(0<Nt.length){Vt(Nt[0],e);for(var n=1;n<Nt.length;n++){var r=Nt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==_t&&Vt(_t,e),null!==Bt&&Vt(Bt,e),null!==Pt&&Vt(Pt,e),Tt.forEach(t),Ot.forEach(t),n=0;n<Rt.length;n++)(r=Rt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Rt.length&&null===(n=Rt[0]).blockedOn;)Mt(n),null===n.blockedOn&&Rt.shift()}var Ut=x.ReactCurrentBatchConfig,Wt=!0;function Ht(e,t,n,r){var o=bt,a=Ut.transition;Ut.transition=null;try{bt=1,qt(e,t,n,r)}finally{bt=o,Ut.transition=a}}function Yt(e,t,n,r){var o=bt,a=Ut.transition;Ut.transition=null;try{bt=4,qt(e,t,n,r)}finally{bt=o,Ut.transition=a}}function qt(e,t,n,r){if(Wt){var o=Gt(e,t,n,r);if(null===o)Wr(e,t,r,Kt,n),Lt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return _t=jt(_t,e,t,n,r,o),!0;case"dragenter":return Bt=jt(Bt,e,t,n,r,o),!0;case"mouseover":return Pt=jt(Pt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return Tt.set(a,jt(Tt.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,Ot.set(a,jt(Ot.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(Lt(e,r),4&t&&-1<Ft.indexOf(e)){for(;null!==o;){var a=xo(o);if(null!==a&&At(a),null===(a=Gt(e,t,n,r))&&Wr(e,t,r,Kt,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else Wr(e,t,r,null,n)}}var Kt=null;function Gt(e,t,n,r){if(Kt=null,null!==(e=bo(e=Ae(r))))if(null===(t=$e(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ue(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Kt=e,null}function Qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Zt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Zt,r=n.length,o="value"in Xt?Xt.value:Xt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Jt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return M(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,ln,sn,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=on(un),dn=M({},un,{view:0,detail:0}),pn=on(dn),fn=M({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sn&&(sn&&"mousemove"===e.type?(an=e.screenX-sn.screenX,ln=e.screenY-sn.screenY):ln=an=0,sn=e),an)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),mn=on(fn),hn=on(M({},fn,{dataTransfer:0})),gn=on(M({},dn,{relatedTarget:0})),yn=on(M({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),vn=M({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(vn),xn=on(M({},un,{data:0})),An={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},wn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function En(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function kn(){return En}var Sn=M({},dn,{key:function(e){if(e.key){var t=An[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?wn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Nn=on(Sn),_n=on(M({},fn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Bn=on(M({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kn})),Pn=on(M({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=M({},fn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),On=on(Tn),Rn=[9,13,27,32],Fn=c&&"CompositionEvent"in window,Ln=null;c&&"documentMode"in document&&(Ln=document.documentMode);var jn=c&&"TextEvent"in window&&!Ln,Mn=c&&(!Fn||Ln&&8<Ln&&11>=Ln),Dn=String.fromCharCode(32),zn=!1;function In(e,t){switch(e){case"keyup":return-1!==Rn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Vn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var $n=!1,Un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Un[e.type]:"textarea"===t}function Hn(e,t,n,r){Se(r),0<(t=Yr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Yn=null,qn=null;function Kn(e){Dr(e,0)}function Gn(e){if(q(Ao(e)))return e}function Qn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Zn;if(c){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Zn=Jn}else Zn=!1;Xn=Zn&&(!document.documentMode||9<document.documentMode)}function tr(){Yn&&(Yn.detachEvent("onpropertychange",nr),qn=Yn=null)}function nr(e){if("value"===e.propertyName&&Gn(qn)){var t=[];Hn(t,qn,e,Ae(e)),Te(Kn,t)}}function rr(e,t,n){"focusin"===e?(tr(),qn=n,(Yn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(qn)}function ar(e,t){if("click"===e)return Gn(t)}function ir(e,t){if("input"===e||"change"===e)return Gn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function sr(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!d.call(t,o)||!lr(e[o],t[o]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pr(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function fr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function mr(e){var t=pr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&fr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,a=Math.min(r.start,o);r=void 0===r.end?a:Math.min(r.end,o),!e.extend&&a>r&&(o=r,r=a,a=o),o=cr(n,a);var i=cr(n,r);o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var hr=c&&"documentMode"in document&&11>=document.documentMode,gr=null,yr=null,vr=null,br=!1;function xr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==gr||gr!==K(r)||(r="selectionStart"in(r=gr)&&fr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&sr(vr,r)||(vr=r,0<(r=Yr(yr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function Ar(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var wr={animationend:Ar("Animation","AnimationEnd"),animationiteration:Ar("Animation","AnimationIteration"),animationstart:Ar("Animation","AnimationStart"),transitionend:Ar("Transition","TransitionEnd")},Cr={},Er={};function kr(e){if(Cr[e])return Cr[e];if(!wr[e])return e;var t,n=wr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Er)return Cr[e]=n[t];return e}c&&(Er=document.createElement("div").style,"AnimationEvent"in window||(delete wr.animationend.animation,delete wr.animationiteration.animation,delete wr.animationstart.animation),"TransitionEvent"in window||delete wr.transitionend.transition);var Sr=kr("animationend"),Nr=kr("animationiteration"),_r=kr("animationstart"),Br=kr("transitionend"),Pr=new Map,Tr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Or(e,t){Pr.set(e,t),s(t,[e])}for(var Rr=0;Rr<Tr.length;Rr++){var Fr=Tr[Rr];Or(Fr.toLowerCase(),"on"+(Fr[0].toUpperCase()+Fr.slice(1)))}Or(Sr,"onAnimationEnd"),Or(Nr,"onAnimationIteration"),Or(_r,"onAnimationStart"),Or("dblclick","onDoubleClick"),Or("focusin","onFocus"),Or("focusout","onBlur"),Or(Br,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Lr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),jr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Lr));function Mr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,s,u){if(Ve.apply(this,arguments),je){if(!je)throw Error(a(198));var c=Me;je=!1,Me=null,De||(De=!0,ze=c)}}(r,t,void 0,e),e.currentTarget=null}function Dr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==a&&o.isPropagationStopped())break e;Mr(o,l,u),a=s}else for(i=0;i<r.length;i++){if(s=(l=r[i]).instance,u=l.currentTarget,l=l.listener,s!==a&&o.isPropagationStopped())break e;Mr(o,l,u),a=s}}}if(De)throw e=ze,De=!1,ze=null,e}function zr(e,t){var n=t[go];void 0===n&&(n=t[go]=new Set);var r=e+"__bubble";n.has(r)||(Ur(t,e,2,!1),n.add(r))}function Ir(e,t,n){var r=0;t&&(r|=4),Ur(n,e,r,t)}var Vr="_reactListening"+Math.random().toString(36).slice(2);function $r(e){if(!e[Vr]){e[Vr]=!0,i.forEach((function(t){"selectionchange"!==t&&(jr.has(t)||Ir(t,!1,e),Ir(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Vr]||(t[Vr]=!0,Ir("selectionchange",!1,t))}}function Ur(e,t,n,r){switch(Qt(t)){case 1:var o=Ht;break;case 4:o=Yt;break;default:o=qt}n=o.bind(null,t,n,e),o=void 0,!Re||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Wr(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===o||8===s.nodeType&&s.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=bo(l)))return;if(5===(s=i.tag)||6===s){r=a=i;continue e}l=l.parentNode}}r=r.return}Te((function(){var r=a,o=Ae(n),i=[];e:{var l=Pr.get(e);if(void 0!==l){var s=cn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":s=Nn;break;case"focusin":u="focus",s=gn;break;case"focusout":u="blur",s=gn;break;case"beforeblur":case"afterblur":s=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=hn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Bn;break;case Sr:case Nr:case _r:s=yn;break;case Br:s=Pn;break;case"scroll":s=pn;break;case"wheel":s=On;break;case"copy":case"cut":case"paste":s=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=_n}var c=0!=(4&t),d=!c&&"scroll"===e,p=c?null!==l?l+"Capture":null:l;c=[];for(var f,m=r;null!==m;){var h=(f=m).stateNode;if(5===f.tag&&null!==h&&(f=h,null!==p&&null!=(h=Oe(m,p))&&c.push(Hr(m,h,f))),d)break;m=m.return}0<c.length&&(l=new s(l,u,null,n,o),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===xe||!(u=n.relatedTarget||n.fromElement)||!bo(u)&&!u[ho])&&(s||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?bo(u):null)&&(u!==(d=$e(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(s=null,u=r),s!==u)){if(c=mn,h="onMouseLeave",p="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(c=_n,h="onPointerLeave",p="onPointerEnter",m="pointer"),d=null==s?l:Ao(s),f=null==u?l:Ao(u),(l=new c(h,m+"leave",s,n,o)).target=d,l.relatedTarget=f,h=null,bo(o)===r&&((c=new c(p,m+"enter",u,n,o)).target=f,c.relatedTarget=d,h=c),d=h,s&&u)e:{for(p=u,m=0,f=c=s;f;f=qr(f))m++;for(f=0,h=p;h;h=qr(h))f++;for(;0<m-f;)c=qr(c),m--;for(;0<f-m;)p=qr(p),f--;for(;m--;){if(c===p||null!==p&&c===p.alternate)break e;c=qr(c),p=qr(p)}c=null}else c=null;null!==s&&Kr(i,l,s,c,!1),null!==u&&null!==d&&Kr(i,d,u,c,!0)}if("select"===(s=(l=r?Ao(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var g=Qn;else if(Wn(l))if(Xn)g=ir;else{g=or;var y=rr}else(s=l.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=ar);switch(g&&(g=g(e,r))?Hn(i,g,n,o):(y&&y(e,l,r),"focusout"===e&&(y=l._wrapperState)&&y.controlled&&"number"===l.type&&ee(l,"number",l.value)),y=r?Ao(r):window,e){case"focusin":(Wn(y)||"true"===y.contentEditable)&&(gr=y,yr=r,vr=null);break;case"focusout":vr=yr=gr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,xr(i,n,o);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":xr(i,n,o)}var v;if(Fn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else $n?In(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Mn&&"ko"!==n.locale&&($n||"onCompositionStart"!==b?"onCompositionEnd"===b&&$n&&(v=en()):(Zt="value"in(Xt=o)?Xt.value:Xt.textContent,$n=!0)),0<(y=Yr(r,b)).length&&(b=new xn(b,e,null,n,o),i.push({event:b,listeners:y}),(v||null!==(v=Vn(n)))&&(b.data=v))),(v=jn?function(e,t){switch(e){case"compositionend":return Vn(t);case"keypress":return 32!==t.which?null:(zn=!0,Dn);case"textInput":return(e=t.data)===Dn&&zn?null:e;default:return null}}(e,n):function(e,t){if($n)return"compositionend"===e||!Fn&&In(e,t)?(e=en(),Jt=Zt=Xt=null,$n=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Mn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Yr(r,"onBeforeInput")).length&&(o=new xn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=v)}Dr(i,t)}))}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Yr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Oe(e,n))&&r.unshift(Hr(e,a,o)),null!=(a=Oe(e,t))&&r.push(Hr(e,a,o))),e=e.return}return r}function qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Kr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(null!==s&&s===r)break;5===l.tag&&null!==u&&(l=u,o?null!=(s=Oe(n,a))&&i.unshift(Hr(n,s,l)):o||null!=(s=Oe(n,a))&&i.push(Hr(n,s,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Gr=/\r\n?/g,Qr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Gr,"\n").replace(Qr,"")}function Zr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(a(425))}function Jr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,ao="function"==typeof Promise?Promise:void 0,io="function"==typeof queueMicrotask?queueMicrotask:void 0!==ao?function(e){return ao.resolve(null).then(e).catch(lo)}:ro;function lo(e){setTimeout((function(){throw e}))}function so(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void $t(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);$t(t)}function uo(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function co(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var po=Math.random().toString(36).slice(2),fo="__reactFiber$"+po,mo="__reactProps$"+po,ho="__reactContainer$"+po,go="__reactEvents$"+po,yo="__reactListeners$"+po,vo="__reactHandles$"+po;function bo(e){var t=e[fo];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ho]||n[fo]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=co(e);null!==e;){if(n=e[fo])return n;e=co(e)}return t}n=(e=n).parentNode}return null}function xo(e){return!(e=e[fo]||e[ho])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Ao(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function wo(e){return e[mo]||null}var Co=[],Eo=-1;function ko(e){return{current:e}}function So(e){0>Eo||(e.current=Co[Eo],Co[Eo]=null,Eo--)}function No(e,t){Eo++,Co[Eo]=e.current,e.current=t}var _o={},Bo=ko(_o),Po=ko(!1),To=_o;function Oo(e,t){var n=e.type.contextTypes;if(!n)return _o;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Ro(e){return null!=e.childContextTypes}function Fo(){So(Po),So(Bo)}function Lo(e,t,n){if(Bo.current!==_o)throw Error(a(168));No(Bo,t),No(Po,n)}function jo(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,U(e)||"Unknown",o));return M({},n,r)}function Mo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||_o,To=Bo.current,No(Bo,e),No(Po,Po.current),!0}function Do(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=jo(e,t,To),r.__reactInternalMemoizedMergedChildContext=e,So(Po),So(Bo),No(Bo,e)):So(Po),No(Po,n)}var zo=null,Io=!1,Vo=!1;function $o(e){null===zo?zo=[e]:zo.push(e)}function Uo(){if(!Vo&&null!==zo){Vo=!0;var e=0,t=bt;try{var n=zo;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}zo=null,Io=!1}catch(t){throw null!==zo&&(zo=zo.slice(e+1)),qe(Je,Uo),t}finally{bt=t,Vo=!1}}return null}var Wo=[],Ho=0,Yo=null,qo=0,Ko=[],Go=0,Qo=null,Xo=1,Zo="";function Jo(e,t){Wo[Ho++]=qo,Wo[Ho++]=Yo,Yo=e,qo=t}function ea(e,t,n){Ko[Go++]=Xo,Ko[Go++]=Zo,Ko[Go++]=Qo,Qo=e;var r=Xo;e=Zo;var o=32-it(r)-1;r&=~(1<<o),n+=1;var a=32-it(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,Xo=1<<32-it(t)+o|n<<o|r,Zo=a+e}else Xo=1<<a|n<<o|r,Zo=e}function ta(e){null!==e.return&&(Jo(e,1),ea(e,1,0))}function na(e){for(;e===Yo;)Yo=Wo[--Ho],Wo[Ho]=null,qo=Wo[--Ho],Wo[Ho]=null;for(;e===Qo;)Qo=Ko[--Go],Ko[Go]=null,Zo=Ko[--Go],Ko[Go]=null,Xo=Ko[--Go],Ko[Go]=null}var ra=null,oa=null,aa=!1,ia=null;function la(e,t){var n=Ou(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function sa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ra=e,oa=uo(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ra=e,oa=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Qo?{id:Xo,overflow:Zo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ou(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ra=e,oa=null,!0);default:return!1}}function ua(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function ca(e){if(aa){var t=oa;if(t){var n=t;if(!sa(e,t)){if(ua(e))throw Error(a(418));t=uo(n.nextSibling);var r=ra;t&&sa(e,t)?la(r,n):(e.flags=-4097&e.flags|2,aa=!1,ra=e)}}else{if(ua(e))throw Error(a(418));e.flags=-4097&e.flags|2,aa=!1,ra=e}}}function da(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ra=e}function pa(e){if(e!==ra)return!1;if(!aa)return da(e),aa=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oa)){if(ua(e))throw fa(),Error(a(418));for(;t;)la(e,t),t=uo(t.nextSibling)}if(da(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oa=uo(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oa=null}}else oa=ra?uo(e.stateNode.nextSibling):null;return!0}function fa(){for(var e=oa;e;)e=uo(e.nextSibling)}function ma(){oa=ra=null,aa=!1}function ha(e){null===ia?ia=[e]:ia.push(e)}var ga=x.ReactCurrentBatchConfig;function ya(e,t){if(e&&e.defaultProps){for(var n in t=M({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var va=ko(null),ba=null,xa=null,Aa=null;function wa(){Aa=xa=ba=null}function Ca(e){var t=va.current;So(va),e._currentValue=t}function Ea(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function ka(e,t){ba=e,Aa=xa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(xl=!0),e.firstContext=null)}function Sa(e){var t=e._currentValue;if(Aa!==e)if(e={context:e,memoizedValue:t,next:null},null===xa){if(null===ba)throw Error(a(308));xa=e,ba.dependencies={lanes:0,firstContext:e}}else xa=xa.next=e;return t}var Na=null;function _a(e){null===Na?Na=[e]:Na.push(e)}function Ba(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,_a(t)):(n.next=o.next,o.next=n),t.interleaved=n,Pa(e,r)}function Pa(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Ta=!1;function Oa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ra(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Fa(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function La(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Bs)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Pa(e,n)}return null===(o=r.interleaved)?(t.next=t,_a(r)):(t.next=o.next,o.next=t),r.interleaved=t,Pa(e,n)}function ja(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}function Ma(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Da(e,t,n,r){var o=e.updateQueue;Ta=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var s=l,u=s.next;s.next=null,null===i?a=u:i.next=u,i=s;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=s)}if(null!==a){var d=o.baseState;for(i=0,c=u=s=null,l=a;;){var p=l.lane,f=l.eventTime;if((r&p)===p){null!==c&&(c=c.next={eventTime:f,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var m=e,h=l;switch(p=t,f=n,h.tag){case 1:if("function"==typeof(m=h.payload)){d=m.call(f,d,p);break e}d=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(p="function"==typeof(m=h.payload)?m.call(f,d,p):m))break e;d=M({},d,p);break e;case 2:Ta=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(p=o.effects)?o.effects=[l]:p.push(l))}else f={eventTime:f,lane:p,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(u=c=f,s=d):c=c.next=f,i|=p;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(p=l).next,p.next=null,o.lastBaseUpdate=p,o.shared.pending=null}}if(null===c&&(s=d),o.baseState=s,o.firstBaseUpdate=u,o.lastBaseUpdate=c,null!==(t=o.shared.interleaved)){o=t;do{i|=o.lane,o=o.next}while(o!==t)}else null===a&&(o.shared.lanes=0);Ms|=i,e.lanes=i,e.memoizedState=d}}function za(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var Ia=(new r.Component).refs;function Va(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:M({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var $a={isMounted:function(e){return!!(e=e._reactInternals)&&$e(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=tu(),o=nu(e),a=Fa(r,o);a.payload=t,null!=n&&(a.callback=n),null!==(t=La(e,a,o))&&(ru(t,e,o,r),ja(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=tu(),o=nu(e),a=Fa(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=La(e,a,o))&&(ru(t,e,o,r),ja(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tu(),r=nu(e),o=Fa(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=La(e,o,r))&&(ru(t,e,r,n),ja(t,e,r))}};function Ua(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&sr(n,r)&&sr(o,a))}function Wa(e,t,n){var r=!1,o=_o,a=t.contextType;return"object"==typeof a&&null!==a?a=Sa(a):(o=Ro(t)?To:Bo.current,a=(r=null!=(r=t.contextTypes))?Oo(e,o):_o),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=$a,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function Ha(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&$a.enqueueReplaceState(t,t.state,null)}function Ya(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Ia,Oa(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=Sa(a):(a=Ro(t)?To:Bo.current,o.context=Oo(e,a)),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(Va(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&$a.enqueueReplaceState(o,o.state,null),Da(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function qa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=o.refs;t===Ia&&(t=o.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Ka(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ga(e){return(0,e._init)(e._payload)}function Qa(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Fu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Du(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){var a=n.type;return a===C?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===O&&Ga(a)===t.type)?((r=o(t,n.props)).ref=qa(e,t,n),r.return=e,r):((r=Lu(n.type,n.key,n.props,null,e.mode,r)).ref=qa(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=zu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,a){return null===t||7!==t.tag?((t=ju(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Du(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case A:return(n=Lu(t.type,t.key,t.props,null,e.mode,n)).ref=qa(e,null,t),n.return=e,n;case w:return(t=zu(t,e.mode,n)).return=e,t;case O:return p(e,(0,t._init)(t._payload),n)}if(te(t)||L(t))return(t=ju(t,e.mode,n,null)).return=e,t;Ka(e,t)}return null}function f(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case A:return n.key===o?u(e,t,n,r):null;case w:return n.key===o?c(e,t,n,r):null;case O:return f(e,t,(o=n._init)(n._payload),r)}if(te(n)||L(n))return null!==o?null:d(e,t,n,r,null);Ka(e,n)}return null}function m(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case A:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o);case w:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case O:return m(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||L(r))return d(t,e=e.get(n)||null,r,o,null);Ka(t,r)}return null}function h(o,a,l,s){for(var u=null,c=null,d=a,h=a=0,g=null;null!==d&&h<l.length;h++){d.index>h?(g=d,d=null):g=d.sibling;var y=f(o,d,l[h],s);if(null===y){null===d&&(d=g);break}e&&d&&null===y.alternate&&t(o,d),a=i(y,a,h),null===c?u=y:c.sibling=y,c=y,d=g}if(h===l.length)return n(o,d),aa&&Jo(o,h),u;if(null===d){for(;h<l.length;h++)null!==(d=p(o,l[h],s))&&(a=i(d,a,h),null===c?u=d:c.sibling=d,c=d);return aa&&Jo(o,h),u}for(d=r(o,d);h<l.length;h++)null!==(g=m(d,o,h,l[h],s))&&(e&&null!==g.alternate&&d.delete(null===g.key?h:g.key),a=i(g,a,h),null===c?u=g:c.sibling=g,c=g);return e&&d.forEach((function(e){return t(o,e)})),aa&&Jo(o,h),u}function g(o,l,s,u){var c=L(s);if("function"!=typeof c)throw Error(a(150));if(null==(s=c.call(s)))throw Error(a(151));for(var d=c=null,h=l,g=l=0,y=null,v=s.next();null!==h&&!v.done;g++,v=s.next()){h.index>g?(y=h,h=null):y=h.sibling;var b=f(o,h,v.value,u);if(null===b){null===h&&(h=y);break}e&&h&&null===b.alternate&&t(o,h),l=i(b,l,g),null===d?c=b:d.sibling=b,d=b,h=y}if(v.done)return n(o,h),aa&&Jo(o,g),c;if(null===h){for(;!v.done;g++,v=s.next())null!==(v=p(o,v.value,u))&&(l=i(v,l,g),null===d?c=v:d.sibling=v,d=v);return aa&&Jo(o,g),c}for(h=r(o,h);!v.done;g++,v=s.next())null!==(v=m(h,o,g,v.value,u))&&(e&&null!==v.alternate&&h.delete(null===v.key?g:v.key),l=i(v,l,g),null===d?c=v:d.sibling=v,d=v);return e&&h.forEach((function(e){return t(o,e)})),aa&&Jo(o,g),c}return function e(r,a,i,s){if("object"==typeof i&&null!==i&&i.type===C&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case A:e:{for(var u=i.key,c=a;null!==c;){if(c.key===u){if((u=i.type)===C){if(7===c.tag){n(r,c.sibling),(a=o(c,i.props.children)).return=r,r=a;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===O&&Ga(u)===c.type){n(r,c.sibling),(a=o(c,i.props)).ref=qa(r,c,i),a.return=r,r=a;break e}n(r,c);break}t(r,c),c=c.sibling}i.type===C?((a=ju(i.props.children,r.mode,s,i.key)).return=r,r=a):((s=Lu(i.type,i.key,i.props,null,r.mode,s)).ref=qa(r,a,i),s.return=r,r=s)}return l(r);case w:e:{for(c=i.key;null!==a;){if(a.key===c){if(4===a.tag&&a.stateNode.containerInfo===i.containerInfo&&a.stateNode.implementation===i.implementation){n(r,a.sibling),(a=o(a,i.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=zu(i,r.mode,s)).return=r,r=a}return l(r);case O:return e(r,a,(c=i._init)(i._payload),s)}if(te(i))return h(r,a,i,s);if(L(i))return g(r,a,i,s);Ka(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==a&&6===a.tag?(n(r,a.sibling),(a=o(a,i)).return=r,r=a):(n(r,a),(a=Du(i,r.mode,s)).return=r,r=a),l(r)):n(r,a)}}var Xa=Qa(!0),Za=Qa(!1),Ja={},ei=ko(Ja),ti=ko(Ja),ni=ko(Ja);function ri(e){if(e===Ja)throw Error(a(174));return e}function oi(e,t){switch(No(ni,t),No(ti,e),No(ei,Ja),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:se(null,"");break;default:t=se(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}So(ei),No(ei,t)}function ai(){So(ei),So(ti),So(ni)}function ii(e){ri(ni.current);var t=ri(ei.current),n=se(t,e.type);t!==n&&(No(ti,e),No(ei,n))}function li(e){ti.current===e&&(So(ei),So(ti))}var si=ko(0);function ui(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ci=[];function di(){for(var e=0;e<ci.length;e++)ci[e]._workInProgressVersionPrimary=null;ci.length=0}var pi=x.ReactCurrentDispatcher,fi=x.ReactCurrentBatchConfig,mi=0,hi=null,gi=null,yi=null,vi=!1,bi=!1,xi=0,Ai=0;function wi(){throw Error(a(321))}function Ci(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function Ei(e,t,n,r,o,i){if(mi=i,hi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,pi.current=null===e||null===e.memoizedState?ll:sl,e=n(r,o),bi){i=0;do{if(bi=!1,xi=0,25<=i)throw Error(a(301));i+=1,yi=gi=null,t.updateQueue=null,pi.current=ul,e=n(r,o)}while(bi)}if(pi.current=il,t=null!==gi&&null!==gi.next,mi=0,yi=gi=hi=null,vi=!1,t)throw Error(a(300));return e}function ki(){var e=0!==xi;return xi=0,e}function Si(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===yi?hi.memoizedState=yi=e:yi=yi.next=e,yi}function Ni(){if(null===gi){var e=hi.alternate;e=null!==e?e.memoizedState:null}else e=gi.next;var t=null===yi?hi.memoizedState:yi.next;if(null!==t)yi=t,gi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(gi=e).memoizedState,baseState:gi.baseState,baseQueue:gi.baseQueue,queue:gi.queue,next:null},null===yi?hi.memoizedState=yi=e:yi=yi.next=e}return yi}function _i(e,t){return"function"==typeof t?t(e):t}function Bi(e){var t=Ni(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=gi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){i=o.next,r=r.baseState;var s=l=null,u=null,c=i;do{var d=c.lane;if((mi&d)===d)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var p={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(s=u=p,l=r):u=u.next=p,hi.lanes|=d,Ms|=d}c=c.next}while(null!==c&&c!==i);null===u?l=r:u.next=s,lr(r,t.memoizedState)||(xl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=u,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{i=o.lane,hi.lanes|=i,Ms|=i,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Pi(e){var t=Ni(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);lr(i,t.memoizedState)||(xl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Ti(){}function Oi(e,t){var n=hi,r=Ni(),o=t(),i=!lr(r.memoizedState,o);if(i&&(r.memoizedState=o,xl=!0),r=r.queue,Wi(Li.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==yi&&1&yi.memoizedState.tag){if(n.flags|=2048,zi(9,Fi.bind(null,n,r,o,t),void 0,null),null===Ps)throw Error(a(349));0!=(30&mi)||Ri(n,t,o)}return o}function Ri(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=hi.updateQueue)?(t={lastEffect:null,stores:null},hi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Fi(e,t,n,r){t.value=n,t.getSnapshot=r,ji(t)&&Mi(e)}function Li(e,t,n){return n((function(){ji(t)&&Mi(e)}))}function ji(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Mi(e){var t=Pa(e,1);null!==t&&ru(t,e,1,-1)}function Di(e){var t=Si();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:_i,lastRenderedState:e},t.queue=e,e=e.dispatch=nl.bind(null,hi,e),[t.memoizedState,e]}function zi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=hi.updateQueue)?(t={lastEffect:null,stores:null},hi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Ii(){return Ni().memoizedState}function Vi(e,t,n,r){var o=Si();hi.flags|=e,o.memoizedState=zi(1|t,n,void 0,void 0===r?null:r)}function $i(e,t,n,r){var o=Ni();r=void 0===r?null:r;var a=void 0;if(null!==gi){var i=gi.memoizedState;if(a=i.destroy,null!==r&&Ci(r,i.deps))return void(o.memoizedState=zi(t,n,a,r))}hi.flags|=e,o.memoizedState=zi(1|t,n,a,r)}function Ui(e,t){return Vi(8390656,8,e,t)}function Wi(e,t){return $i(2048,8,e,t)}function Hi(e,t){return $i(4,2,e,t)}function Yi(e,t){return $i(4,4,e,t)}function qi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ki(e,t,n){return n=null!=n?n.concat([e]):null,$i(4,4,qi.bind(null,t,e),n)}function Gi(){}function Qi(e,t){var n=Ni();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ci(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Xi(e,t){var n=Ni();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ci(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Zi(e,t,n){return 0==(21&mi)?(e.baseState&&(e.baseState=!1,xl=!0),e.memoizedState=n):(lr(n,t)||(n=ht(),hi.lanes|=n,Ms|=n,e.baseState=!0),t)}function Ji(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=fi.transition;fi.transition={};try{e(!1),t()}finally{bt=n,fi.transition=r}}function el(){return Ni().memoizedState}function tl(e,t,n){var r=nu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rl(e)?ol(t,n):null!==(n=Ba(e,t,n,r))&&(ru(n,e,r,tu()),al(n,t,r))}function nl(e,t,n){var r=nu(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rl(e))ol(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.hasEagerState=!0,o.eagerState=l,lr(l,i)){var s=t.interleaved;return null===s?(o.next=o,_a(t)):(o.next=s.next,s.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Ba(e,t,o,r))&&(ru(n,e,r,o=tu()),al(n,t,r))}}function rl(e){var t=e.alternate;return e===hi||null!==t&&t===hi}function ol(e,t){bi=vi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function al(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}var il={readContext:Sa,useCallback:wi,useContext:wi,useEffect:wi,useImperativeHandle:wi,useInsertionEffect:wi,useLayoutEffect:wi,useMemo:wi,useReducer:wi,useRef:wi,useState:wi,useDebugValue:wi,useDeferredValue:wi,useTransition:wi,useMutableSource:wi,useSyncExternalStore:wi,useId:wi,unstable_isNewReconciler:!1},ll={readContext:Sa,useCallback:function(e,t){return Si().memoizedState=[e,void 0===t?null:t],e},useContext:Sa,useEffect:Ui,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Vi(4194308,4,qi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Vi(4194308,4,e,t)},useInsertionEffect:function(e,t){return Vi(4,2,e,t)},useMemo:function(e,t){var n=Si();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Si();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tl.bind(null,hi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Si().memoizedState=e},useState:Di,useDebugValue:Gi,useDeferredValue:function(e){return Si().memoizedState=e},useTransition:function(){var e=Di(!1),t=e[0];return e=Ji.bind(null,e[1]),Si().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=hi,o=Si();if(aa){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Ps)throw Error(a(349));0!=(30&mi)||Ri(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,Ui(Li.bind(null,r,i,e),[e]),r.flags|=2048,zi(9,Fi.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=Si(),t=Ps.identifierPrefix;if(aa){var n=Zo;t=":"+t+"R"+(n=(Xo&~(1<<32-it(Xo)-1)).toString(32)+n),0<(n=xi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=Ai++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},sl={readContext:Sa,useCallback:Qi,useContext:Sa,useEffect:Wi,useImperativeHandle:Ki,useInsertionEffect:Hi,useLayoutEffect:Yi,useMemo:Xi,useReducer:Bi,useRef:Ii,useState:function(){return Bi(_i)},useDebugValue:Gi,useDeferredValue:function(e){return Zi(Ni(),gi.memoizedState,e)},useTransition:function(){return[Bi(_i)[0],Ni().memoizedState]},useMutableSource:Ti,useSyncExternalStore:Oi,useId:el,unstable_isNewReconciler:!1},ul={readContext:Sa,useCallback:Qi,useContext:Sa,useEffect:Wi,useImperativeHandle:Ki,useInsertionEffect:Hi,useLayoutEffect:Yi,useMemo:Xi,useReducer:Pi,useRef:Ii,useState:function(){return Pi(_i)},useDebugValue:Gi,useDeferredValue:function(e){var t=Ni();return null===gi?t.memoizedState=e:Zi(t,gi.memoizedState,e)},useTransition:function(){return[Pi(_i)[0],Ni().memoizedState]},useMutableSource:Ti,useSyncExternalStore:Oi,useId:el,unstable_isNewReconciler:!1};function cl(e,t){try{var n="",r=t;do{n+=V(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function dl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function pl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var fl="function"==typeof WeakMap?WeakMap:Map;function ml(e,t,n){(n=Fa(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Hs||(Hs=!0,Ys=r),pl(0,t)},n}function hl(e,t,n){(n=Fa(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){pl(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){pl(0,t),"function"!=typeof r&&(null===qs?qs=new Set([this]):qs.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function gl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new fl;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Su.bind(null,e,t,n),t.then(e,e))}function yl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function vl(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Fa(-1,1)).tag=2,La(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bl=x.ReactCurrentOwner,xl=!1;function Al(e,t,n,r){t.child=null===e?Za(t,null,n,r):Xa(t,e.child,n,r)}function wl(e,t,n,r,o){n=n.render;var a=t.ref;return ka(t,o),r=Ei(e,t,n,r,a,o),n=ki(),null===e||xl?(aa&&n&&ta(t),t.flags|=1,Al(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Hl(e,t,o))}function Cl(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||Ru(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Lu(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,El(e,t,a,r,o))}if(a=e.child,0==(e.lanes&o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:sr)(i,r)&&e.ref===t.ref)return Hl(e,t,o)}return t.flags|=1,(e=Fu(a,r)).ref=t.ref,e.return=t,t.child=e}function El(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(sr(a,r)&&e.ref===t.ref){if(xl=!1,t.pendingProps=r=a,0==(e.lanes&o))return t.lanes=e.lanes,Hl(e,t,o);0!=(131072&e.flags)&&(xl=!0)}}return Nl(e,t,n,r,o)}function kl(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},No(Fs,Rs),Rs|=n;else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,No(Fs,Rs),Rs|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,No(Fs,Rs),Rs|=r}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,No(Fs,Rs),Rs|=r;return Al(e,t,o,n),t.child}function Sl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Nl(e,t,n,r,o){var a=Ro(n)?To:Bo.current;return a=Oo(t,a),ka(t,o),n=Ei(e,t,n,r,a,o),r=ki(),null===e||xl?(aa&&r&&ta(t),t.flags|=1,Al(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Hl(e,t,o))}function _l(e,t,n,r,o){if(Ro(n)){var a=!0;Mo(t)}else a=!1;if(ka(t,o),null===t.stateNode)Wl(e,t),Wa(t,n,r),Ya(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var s=i.context,u=n.contextType;u="object"==typeof u&&null!==u?Sa(u):Oo(t,u=Ro(n)?To:Bo.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||s!==u)&&Ha(t,i,r,u),Ta=!1;var p=t.memoizedState;i.state=p,Da(t,r,i,o),s=t.memoizedState,l!==r||p!==s||Po.current||Ta?("function"==typeof c&&(Va(t,n,c,r),s=t.memoizedState),(l=Ta||Ua(t,n,l,r,p,s,u))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),i.props=r,i.state=s,i.context=u,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Ra(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:ya(t.type,l),i.props=u,d=t.pendingProps,p=i.context,s="object"==typeof(s=n.contextType)&&null!==s?Sa(s):Oo(t,s=Ro(n)?To:Bo.current);var f=n.getDerivedStateFromProps;(c="function"==typeof f||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==d||p!==s)&&Ha(t,i,r,s),Ta=!1,p=t.memoizedState,i.state=p,Da(t,r,i,o);var m=t.memoizedState;l!==d||p!==m||Po.current||Ta?("function"==typeof f&&(Va(t,n,f,r),m=t.memoizedState),(u=Ta||Ua(t,n,u,r,p,m,s)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,m,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,m,s)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=m),i.props=r,i.state=m,i.context=s,r=u):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),r=!1)}return Bl(e,t,n,r,a,o)}function Bl(e,t,n,r,o,a){Sl(e,t);var i=0!=(128&t.flags);if(!r&&!i)return o&&Do(t,n,!1),Hl(e,t,a);r=t.stateNode,bl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Xa(t,e.child,null,a),t.child=Xa(t,null,l,a)):Al(e,t,l,a),t.memoizedState=r.state,o&&Do(t,n,!0),t.child}function Pl(e){var t=e.stateNode;t.pendingContext?Lo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Lo(0,t.context,!1),oi(e,t.containerInfo)}function Tl(e,t,n,r,o){return ma(),ha(o),t.flags|=256,Al(e,t,n,r),t.child}var Ol,Rl,Fl,Ll,jl={dehydrated:null,treeContext:null,retryLane:0};function Ml(e){return{baseLanes:e,cachePool:null,transitions:null}}function Dl(e,t,n){var r,o=t.pendingProps,i=si.current,l=!1,s=0!=(128&t.flags);if((r=s)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),No(si,1&i),null===e)return ca(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(s=o.children,e=o.fallback,l?(o=t.mode,l=t.child,s={mode:"hidden",children:s},0==(1&o)&&null!==l?(l.childLanes=0,l.pendingProps=s):l=Mu(s,o,0,null),e=ju(e,o,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Ml(n),t.memoizedState=jl,e):zl(t,s));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,o,i,l){if(n)return 256&t.flags?(t.flags&=-257,Il(e,t,l,r=dl(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=Mu({mode:"visible",children:r.children},o,0,null),(i=ju(i,o,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,0!=(1&t.mode)&&Xa(t,e.child,null,l),t.child.memoizedState=Ml(l),t.memoizedState=jl,i);if(0==(1&t.mode))return Il(e,t,l,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var s=r.dgst;return r=s,Il(e,t,l,r=dl(i=Error(a(419)),r,void 0))}if(s=0!=(l&e.childLanes),xl||s){if(null!==(r=Ps)){switch(l&-l){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|l))?0:o)&&o!==i.retryLane&&(i.retryLane=o,Pa(e,o),ru(r,e,o,-1))}return gu(),Il(e,t,l,r=dl(Error(a(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=_u.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,oa=uo(o.nextSibling),ra=t,aa=!0,ia=null,null!==e&&(Ko[Go++]=Xo,Ko[Go++]=Zo,Ko[Go++]=Qo,Xo=e.id,Zo=e.overflow,Qo=t),(t=zl(t,r.children)).flags|=4096,t)}(e,t,s,o,r,i,n);if(l){l=o.fallback,s=t.mode,r=(i=e.child).sibling;var u={mode:"hidden",children:o.children};return 0==(1&s)&&t.child!==i?((o=t.child).childLanes=0,o.pendingProps=u,t.deletions=null):(o=Fu(i,u)).subtreeFlags=14680064&i.subtreeFlags,null!==r?l=Fu(r,l):(l=ju(l,s,n,null)).flags|=2,l.return=t,o.return=t,o.sibling=l,t.child=o,o=l,l=t.child,s=null===(s=e.child.memoizedState)?Ml(n):{baseLanes:s.baseLanes|n,cachePool:null,transitions:s.transitions},l.memoizedState=s,l.childLanes=e.childLanes&~n,t.memoizedState=jl,o}return e=(l=e.child).sibling,o=Fu(l,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function zl(e,t){return(t=Mu({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Il(e,t,n,r){return null!==r&&ha(r),Xa(t,e.child,null,n),(e=zl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Vl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Ea(e.return,t,n)}function $l(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function Ul(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Al(e,t,r.children,n),0!=(2&(r=si.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Vl(e,n,t);else if(19===e.tag)Vl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(No(si,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ui(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),$l(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ui(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}$l(t,!0,n,null,a);break;case"together":$l(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Wl(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Hl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ms|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Fu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Fu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Yl(e,t){if(!aa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ql(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Kl(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return ql(t),null;case 1:case 17:return Ro(t.type)&&Fo(),ql(t),null;case 3:return r=t.stateNode,ai(),So(Po),So(Bo),di(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(pa(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ia&&(lu(ia),ia=null))),Rl(e,t),ql(t),null;case 5:li(t);var o=ri(ni.current);if(n=t.type,null!==e&&null!=t.stateNode)Fl(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return ql(t),null}if(e=ri(ei.current),pa(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[fo]=t,r[mo]=i,e=0!=(1&t.mode),n){case"dialog":zr("cancel",r),zr("close",r);break;case"iframe":case"object":case"embed":zr("load",r);break;case"video":case"audio":for(o=0;o<Lr.length;o++)zr(Lr[o],r);break;case"source":zr("error",r);break;case"img":case"image":case"link":zr("error",r),zr("load",r);break;case"details":zr("toggle",r);break;case"input":Q(r,i),zr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},zr("invalid",r);break;case"textarea":oe(r,i),zr("invalid",r)}for(var s in ve(n,i),o=null,i)if(i.hasOwnProperty(s)){var u=i[s];"children"===s?"string"==typeof u?r.textContent!==u&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,u,e),o=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,u,e),o=["children",""+u]):l.hasOwnProperty(s)&&null!=u&&"onScroll"===s&&zr("scroll",r)}switch(n){case"input":Y(r),J(r,i,!0);break;case"textarea":Y(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Jr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{s=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[fo]=t,e[mo]=r,Ol(e,t,!1,!1),t.stateNode=e;e:{switch(s=be(n,r),n){case"dialog":zr("cancel",e),zr("close",e),o=r;break;case"iframe":case"object":case"embed":zr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Lr.length;o++)zr(Lr[o],e);o=r;break;case"source":zr("error",e),o=r;break;case"img":case"image":case"link":zr("error",e),zr("load",e),o=r;break;case"details":zr("toggle",e),o=r;break;case"input":Q(e,r),o=G(e,r),zr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=M({},r,{value:void 0}),zr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),zr("invalid",e)}for(i in ve(n,o),u=o)if(u.hasOwnProperty(i)){var c=u[i];"style"===i?ge(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===i?"string"==typeof c?("textarea"!==n||""!==c)&&pe(e,c):"number"==typeof c&&pe(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=c&&"onScroll"===i&&zr("scroll",e):null!=c&&b(e,i,c,s))}switch(n){case"input":Y(e),J(e,r,!1);break;case"textarea":Y(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return ql(t),null;case 6:if(e&&null!=t.stateNode)Ll(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=ri(ni.current),ri(ei.current),pa(t)){if(r=t.stateNode,n=t.memoizedProps,r[fo]=t,(i=r.nodeValue!==n)&&null!==(e=ra))switch(e.tag){case 3:Zr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[fo]=t,t.stateNode=r}return ql(t),null;case 13:if(So(si),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(aa&&null!==oa&&0!=(1&t.mode)&&0==(128&t.flags))fa(),ma(),t.flags|=98560,i=!1;else if(i=pa(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(a(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(a(317));i[fo]=t}else ma(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;ql(t),i=!1}else null!==ia&&(lu(ia),ia=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&si.current)?0===Ls&&(Ls=3):gu())),null!==t.updateQueue&&(t.flags|=4),ql(t),null);case 4:return ai(),Rl(e,t),null===e&&$r(t.stateNode.containerInfo),ql(t),null;case 10:return Ca(t.type._context),ql(t),null;case 19:if(So(si),null===(i=t.memoizedState))return ql(t),null;if(r=0!=(128&t.flags),null===(s=i.rendering))if(r)Yl(i,!1);else{if(0!==Ls||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(s=ui(e))){for(t.flags|=128,Yl(i,!1),null!==(r=s.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(s=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=s.childLanes,i.lanes=s.lanes,i.child=s.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=s.memoizedProps,i.memoizedState=s.memoizedState,i.updateQueue=s.updateQueue,i.type=s.type,e=s.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return No(si,1&si.current|2),t.child}e=e.sibling}null!==i.tail&&Xe()>Us&&(t.flags|=128,r=!0,Yl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ui(s))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Yl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!s.alternate&&!aa)return ql(t),null}else 2*Xe()-i.renderingStartTime>Us&&1073741824!==n&&(t.flags|=128,r=!0,Yl(i,!1),t.lanes=4194304);i.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=i.last)?n.sibling=s:t.child=s,i.last=s)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Xe(),t.sibling=null,n=si.current,No(si,r?1&n|2:1&n),t):(ql(t),null);case 22:case 23:return pu(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Rs)&&(ql(t),6&t.subtreeFlags&&(t.flags|=8192)):ql(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function Gl(e,t){switch(na(t),t.tag){case 1:return Ro(t.type)&&Fo(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ai(),So(Po),So(Bo),di(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return li(t),null;case 13:if(So(si),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));ma()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return So(si),null;case 4:return ai(),null;case 10:return Ca(t.type._context),null;case 22:case 23:return pu(),null;default:return null}}Ol=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Rl=function(){},Fl=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ri(ei.current);var a,i=null;switch(n){case"input":o=G(e,o),r=G(e,r),i=[];break;case"select":o=M({},o,{value:void 0}),r=M({},r,{value:void 0}),i=[];break;case"textarea":o=re(e,o),r=re(e,r),i=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ve(n,r),n=null,o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&null!=o[c])if("style"===c){var s=o[c];for(a in s)s.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var u=r[c];if(s=null!=o?o[c]:void 0,r.hasOwnProperty(c)&&u!==s&&(null!=u||null!=s))if("style"===c)if(s){for(a in s)!s.hasOwnProperty(a)||u&&u.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in u)u.hasOwnProperty(a)&&s[a]!==u[a]&&(n||(n={}),n[a]=u[a])}else n||(i||(i=[]),i.push(c,n)),n=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,s=s?s.__html:void 0,null!=u&&s!==u&&(i=i||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(i=i||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&zr("scroll",e),i||s===u||(i=[])):(i=i||[]).push(c,u))}n&&(i=i||[]).push("style",n);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},Ll=function(e,t,n,r){n!==r&&(t.flags|=4)};var Ql=!1,Xl=!1,Zl="function"==typeof WeakSet?WeakSet:Set,Jl=null;function es(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){ku(e,t,n)}else n.current=null}function ts(e,t,n){try{n()}catch(n){ku(e,t,n)}}var ns=!1;function rs(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var a=o.destroy;o.destroy=void 0,void 0!==a&&ts(t,n,a)}o=o.next}while(o!==r)}}function os(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function as(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function is(e){var t=e.alternate;null!==t&&(e.alternate=null,is(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[fo],delete t[mo],delete t[go],delete t[yo],delete t[vo]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ls(e){return 5===e.tag||3===e.tag||4===e.tag}function ss(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ls(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function us(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(us(e,t,n),e=e.sibling;null!==e;)us(e,t,n),e=e.sibling}function cs(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cs(e,t,n),e=e.sibling;null!==e;)cs(e,t,n),e=e.sibling}var ds=null,ps=!1;function fs(e,t,n){for(n=n.child;null!==n;)ms(e,t,n),n=n.sibling}function ms(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Xl||es(n,t);case 6:var r=ds,o=ps;ds=null,fs(e,t,n),ps=o,null!==(ds=r)&&(ps?(e=ds,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):ds.removeChild(n.stateNode));break;case 18:null!==ds&&(ps?(e=ds,n=n.stateNode,8===e.nodeType?so(e.parentNode,n):1===e.nodeType&&so(e,n),$t(e)):so(ds,n.stateNode));break;case 4:r=ds,o=ps,ds=n.stateNode.containerInfo,ps=!0,fs(e,t,n),ds=r,ps=o;break;case 0:case 11:case 14:case 15:if(!Xl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var a=o,i=a.destroy;a=a.tag,void 0!==i&&(0!=(2&a)||0!=(4&a))&&ts(n,t,i),o=o.next}while(o!==r)}fs(e,t,n);break;case 1:if(!Xl&&(es(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){ku(n,t,e)}fs(e,t,n);break;case 21:fs(e,t,n);break;case 22:1&n.mode?(Xl=(r=Xl)||null!==n.memoizedState,fs(e,t,n),Xl=r):fs(e,t,n);break;default:fs(e,t,n)}}function hs(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Zl),t.forEach((function(t){var r=Bu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function gs(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,l=t,s=l;e:for(;null!==s;){switch(s.tag){case 5:ds=s.stateNode,ps=!1;break e;case 3:case 4:ds=s.stateNode.containerInfo,ps=!0;break e}s=s.return}if(null===ds)throw Error(a(160));ms(i,l,o),ds=null,ps=!1;var u=o.alternate;null!==u&&(u.return=null),o.return=null}catch(e){ku(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)ys(t,e),t=t.sibling}function ys(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gs(t,e),vs(e),4&r){try{rs(3,e,e.return),os(3,e)}catch(t){ku(e,e.return,t)}try{rs(5,e,e.return)}catch(t){ku(e,e.return,t)}}break;case 1:gs(t,e),vs(e),512&r&&null!==n&&es(n,n.return);break;case 5:if(gs(t,e),vs(e),512&r&&null!==n&&es(n,n.return),32&e.flags){var o=e.stateNode;try{pe(o,"")}catch(t){ku(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,s=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===s&&"radio"===i.type&&null!=i.name&&X(o,i),be(s,l);var c=be(s,i);for(l=0;l<u.length;l+=2){var d=u[l],p=u[l+1];"style"===d?ge(o,p):"dangerouslySetInnerHTML"===d?de(o,p):"children"===d?pe(o,p):b(o,d,p,c)}switch(s){case"input":Z(o,i);break;case"textarea":ae(o,i);break;case"select":var f=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var m=i.value;null!=m?ne(o,!!i.multiple,m,!1):f!==!!i.multiple&&(null!=i.defaultValue?ne(o,!!i.multiple,i.defaultValue,!0):ne(o,!!i.multiple,i.multiple?[]:"",!1))}o[mo]=i}catch(t){ku(e,e.return,t)}}break;case 6:if(gs(t,e),vs(e),4&r){if(null===e.stateNode)throw Error(a(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(t){ku(e,e.return,t)}}break;case 3:if(gs(t,e),vs(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{$t(t.containerInfo)}catch(t){ku(e,e.return,t)}break;case 4:default:gs(t,e),vs(e);break;case 13:gs(t,e),vs(e),8192&(o=e.child).flags&&(i=null!==o.memoizedState,o.stateNode.isHidden=i,!i||null!==o.alternate&&null!==o.alternate.memoizedState||($s=Xe())),4&r&&hs(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Xl=(c=Xl)||d,gs(t,e),Xl=c):gs(t,e),vs(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&0!=(1&e.mode))for(Jl=e,d=e.child;null!==d;){for(p=Jl=d;null!==Jl;){switch(m=(f=Jl).child,f.tag){case 0:case 11:case 14:case 15:rs(4,f,f.return);break;case 1:es(f,f.return);var h=f.stateNode;if("function"==typeof h.componentWillUnmount){r=f,n=f.return;try{t=r,h.props=t.memoizedProps,h.state=t.memoizedState,h.componentWillUnmount()}catch(e){ku(r,n,e)}}break;case 5:es(f,f.return);break;case 22:if(null!==f.memoizedState){ws(p);continue}}null!==m?(m.return=f,Jl=m):ws(p)}d=d.sibling}e:for(d=null,p=e;;){if(5===p.tag){if(null===d){d=p;try{o=p.stateNode,c?"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none":(s=p.stateNode,l=null!=(u=p.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,s.style.display=he("display",l))}catch(t){ku(e,e.return,t)}}}else if(6===p.tag){if(null===d)try{p.stateNode.nodeValue=c?"":p.memoizedProps}catch(t){ku(e,e.return,t)}}else if((22!==p.tag&&23!==p.tag||null===p.memoizedState||p===e)&&null!==p.child){p.child.return=p,p=p.child;continue}if(p===e)break e;for(;null===p.sibling;){if(null===p.return||p.return===e)break e;d===p&&(d=null),p=p.return}d===p&&(d=null),p.sibling.return=p.return,p=p.sibling}}break;case 19:gs(t,e),vs(e),4&r&&hs(e);case 21:}}function vs(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ls(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(pe(o,""),r.flags&=-33),cs(e,ss(e),o);break;case 3:case 4:var i=r.stateNode.containerInfo;us(e,ss(e),i);break;default:throw Error(a(161))}}catch(t){ku(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bs(e,t,n){Jl=e,xs(e,t,n)}function xs(e,t,n){for(var r=0!=(1&e.mode);null!==Jl;){var o=Jl,a=o.child;if(22===o.tag&&r){var i=null!==o.memoizedState||Ql;if(!i){var l=o.alternate,s=null!==l&&null!==l.memoizedState||Xl;l=Ql;var u=Xl;if(Ql=i,(Xl=s)&&!u)for(Jl=o;null!==Jl;)s=(i=Jl).child,22===i.tag&&null!==i.memoizedState?Cs(o):null!==s?(s.return=i,Jl=s):Cs(o);for(;null!==a;)Jl=a,xs(a,t,n),a=a.sibling;Jl=o,Ql=l,Xl=u}As(e)}else 0!=(8772&o.subtreeFlags)&&null!==a?(a.return=o,Jl=a):As(e)}}function As(e){for(;null!==Jl;){var t=Jl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Xl||os(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Xl)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:ya(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&za(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}za(t,l,n)}break;case 5:var s=t.stateNode;if(null===n&&4&t.flags){n=s;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var p=d.dehydrated;null!==p&&$t(p)}}}break;default:throw Error(a(163))}Xl||512&t.flags&&as(t)}catch(e){ku(t,t.return,e)}}if(t===e){Jl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Jl=n;break}Jl=t.return}}function ws(e){for(;null!==Jl;){var t=Jl;if(t===e){Jl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Jl=n;break}Jl=t.return}}function Cs(e){for(;null!==Jl;){var t=Jl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{os(4,t)}catch(e){ku(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){ku(t,o,e)}}var a=t.return;try{as(t)}catch(e){ku(t,a,e)}break;case 5:var i=t.return;try{as(t)}catch(e){ku(t,i,e)}}}catch(e){ku(t,t.return,e)}if(t===e){Jl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Jl=l;break}Jl=t.return}}var Es,ks=Math.ceil,Ss=x.ReactCurrentDispatcher,Ns=x.ReactCurrentOwner,_s=x.ReactCurrentBatchConfig,Bs=0,Ps=null,Ts=null,Os=0,Rs=0,Fs=ko(0),Ls=0,js=null,Ms=0,Ds=0,zs=0,Is=null,Vs=null,$s=0,Us=1/0,Ws=null,Hs=!1,Ys=null,qs=null,Ks=!1,Gs=null,Qs=0,Xs=0,Zs=null,Js=-1,eu=0;function tu(){return 0!=(6&Bs)?Xe():-1!==Js?Js:Js=Xe()}function nu(e){return 0==(1&e.mode)?1:0!=(2&Bs)&&0!==Os?Os&-Os:null!==ga.transition?(0===eu&&(eu=ht()),eu):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Qt(e.type)}function ru(e,t,n,r){if(50<Xs)throw Xs=0,Zs=null,Error(a(185));yt(e,n,r),0!=(2&Bs)&&e===Ps||(e===Ps&&(0==(2&Bs)&&(Ds|=n),4===Ls&&su(e,Os)),ou(e,r),1===n&&0===Bs&&0==(1&t.mode)&&(Us=Xe()+500,Io&&Uo()))}function ou(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=e.pendingLanes;0<a;){var i=31-it(a),l=1<<i,s=o[i];-1===s?0!=(l&n)&&0==(l&r)||(o[i]=ft(l,t)):s<=t&&(e.expiredLanes|=l),a&=~l}}(e,t);var r=pt(e,e===Ps?Os:0);if(0===r)null!==n&&Ke(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ke(n),1===t)0===e.tag?function(e){Io=!0,$o(e)}(uu.bind(null,e)):$o(uu.bind(null,e)),io((function(){0==(6&Bs)&&Uo()})),n=null;else{switch(xt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Pu(n,au.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function au(e,t){if(Js=-1,eu=0,0!=(6&Bs))throw Error(a(327));var n=e.callbackNode;if(Cu()&&e.callbackNode!==n)return null;var r=pt(e,e===Ps?Os:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=yu(e,r);else{t=r;var o=Bs;Bs|=2;var i=hu();for(Ps===e&&Os===t||(Ws=null,Us=Xe()+500,fu(e,t));;)try{bu();break}catch(t){mu(e,t)}wa(),Ss.current=i,Bs=o,null!==Ts?t=0:(Ps=null,Os=0,t=Ls)}if(0!==t){if(2===t&&0!==(o=mt(e))&&(r=o,t=iu(e,o)),1===t)throw n=js,fu(e,0),su(e,r),ou(e,Xe()),n;if(6===t)su(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!lr(a(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=yu(e,r))&&0!==(i=mt(e))&&(r=i,t=iu(e,i)),1===t))throw n=js,fu(e,0),su(e,r),ou(e,Xe()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:wu(e,Vs,Ws);break;case 3:if(su(e,r),(130023424&r)===r&&10<(t=$s+500-Xe())){if(0!==pt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){tu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(wu.bind(null,e,Vs,Ws),t);break}wu(e,Vs,Ws);break;case 4:if(su(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>o&&(o=l),r&=~i}if(r=o,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*ks(r/1960))-r)){e.timeoutHandle=ro(wu.bind(null,e,Vs,Ws),r);break}wu(e,Vs,Ws);break;default:throw Error(a(329))}}}return ou(e,Xe()),e.callbackNode===n?au.bind(null,e):null}function iu(e,t){var n=Is;return e.current.memoizedState.isDehydrated&&(fu(e,t).flags|=256),2!==(e=yu(e,t))&&(t=Vs,Vs=n,null!==t&&lu(t)),e}function lu(e){null===Vs?Vs=e:Vs.push.apply(Vs,e)}function su(e,t){for(t&=~zs,t&=~Ds,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function uu(e){if(0!=(6&Bs))throw Error(a(327));Cu();var t=pt(e,0);if(0==(1&t))return ou(e,Xe()),null;var n=yu(e,t);if(0!==e.tag&&2===n){var r=mt(e);0!==r&&(t=r,n=iu(e,r))}if(1===n)throw n=js,fu(e,0),su(e,t),ou(e,Xe()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,wu(e,Vs,Ws),ou(e,Xe()),null}function cu(e,t){var n=Bs;Bs|=1;try{return e(t)}finally{0===(Bs=n)&&(Us=Xe()+500,Io&&Uo())}}function du(e){null!==Gs&&0===Gs.tag&&0==(6&Bs)&&Cu();var t=Bs;Bs|=1;var n=_s.transition,r=bt;try{if(_s.transition=null,bt=1,e)return e()}finally{bt=r,_s.transition=n,0==(6&(Bs=t))&&Uo()}}function pu(){Rs=Fs.current,So(Fs)}function fu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Ts)for(n=Ts.return;null!==n;){var r=n;switch(na(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Fo();break;case 3:ai(),So(Po),So(Bo),di();break;case 5:li(r);break;case 4:ai();break;case 13:case 19:So(si);break;case 10:Ca(r.type._context);break;case 22:case 23:pu()}n=n.return}if(Ps=e,Ts=e=Fu(e.current,null),Os=Rs=t,Ls=0,js=null,zs=Ds=Ms=0,Vs=Is=null,null!==Na){for(t=0;t<Na.length;t++)if(null!==(r=(n=Na[t]).interleaved)){n.interleaved=null;var o=r.next,a=n.pending;if(null!==a){var i=a.next;a.next=o,r.next=i}n.pending=r}Na=null}return e}function mu(e,t){for(;;){var n=Ts;try{if(wa(),pi.current=il,vi){for(var r=hi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}vi=!1}if(mi=0,yi=gi=hi=null,bi=!1,xi=0,Ns.current=null,null===n||null===n.return){Ls=1,js=t,Ts=null;break}e:{var i=e,l=n.return,s=n,u=t;if(t=Os,s.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,d=s,p=d.tag;if(0==(1&d.mode)&&(0===p||11===p||15===p)){var f=d.alternate;f?(d.updateQueue=f.updateQueue,d.memoizedState=f.memoizedState,d.lanes=f.lanes):(d.updateQueue=null,d.memoizedState=null)}var m=yl(l);if(null!==m){m.flags&=-257,vl(m,l,s,0,t),1&m.mode&&gl(i,c,t),u=c;var h=(t=m).updateQueue;if(null===h){var g=new Set;g.add(u),t.updateQueue=g}else h.add(u);break e}if(0==(1&t)){gl(i,c,t),gu();break e}u=Error(a(426))}else if(aa&&1&s.mode){var y=yl(l);if(null!==y){0==(65536&y.flags)&&(y.flags|=256),vl(y,l,s,0,t),ha(cl(u,s));break e}}i=u=cl(u,s),4!==Ls&&(Ls=2),null===Is?Is=[i]:Is.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Ma(i,ml(0,u,t));break e;case 1:s=u;var v=i.type,b=i.stateNode;if(0==(128&i.flags)&&("function"==typeof v.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===qs||!qs.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,Ma(i,hl(i,s,t));break e}}i=i.return}while(null!==i)}Au(n)}catch(e){t=e,Ts===n&&null!==n&&(Ts=n=n.return);continue}break}}function hu(){var e=Ss.current;return Ss.current=il,null===e?il:e}function gu(){0!==Ls&&3!==Ls&&2!==Ls||(Ls=4),null===Ps||0==(268435455&Ms)&&0==(268435455&Ds)||su(Ps,Os)}function yu(e,t){var n=Bs;Bs|=2;var r=hu();for(Ps===e&&Os===t||(Ws=null,fu(e,t));;)try{vu();break}catch(t){mu(e,t)}if(wa(),Bs=n,Ss.current=r,null!==Ts)throw Error(a(261));return Ps=null,Os=0,Ls}function vu(){for(;null!==Ts;)xu(Ts)}function bu(){for(;null!==Ts&&!Ge();)xu(Ts)}function xu(e){var t=Es(e.alternate,e,Rs);e.memoizedProps=e.pendingProps,null===t?Au(e):Ts=t,Ns.current=null}function Au(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Kl(n,t,Rs)))return void(Ts=n)}else{if(null!==(n=Gl(n,t)))return n.flags&=32767,void(Ts=n);if(null===e)return Ls=6,void(Ts=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Ts=t);Ts=t=e}while(null!==t);0===Ls&&(Ls=5)}function wu(e,t,n){var r=bt,o=_s.transition;try{_s.transition=null,bt=1,function(e,t,n,r){do{Cu()}while(null!==Gs);if(0!=(6&Bs))throw Error(a(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-it(n),a=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~a}}(e,i),e===Ps&&(Ts=Ps=null,Os=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Ks||(Ks=!0,Pu(tt,(function(){return Cu(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=_s.transition,_s.transition=null;var l=bt;bt=1;var s=Bs;Bs|=4,Ns.current=null,function(e,t){if(eo=Wt,fr(e=pr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,s=-1,u=-1,c=0,d=0,p=e,f=null;t:for(;;){for(var m;p!==n||0!==o&&3!==p.nodeType||(s=l+o),p!==i||0!==r&&3!==p.nodeType||(u=l+r),3===p.nodeType&&(l+=p.nodeValue.length),null!==(m=p.firstChild);)f=p,p=m;for(;;){if(p===e)break t;if(f===n&&++c===o&&(s=l),f===i&&++d===r&&(u=l),null!==(m=p.nextSibling))break;f=(p=f).parentNode}p=m}n=-1===s||-1===u?null:{start:s,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Wt=!1,Jl=t;null!==Jl;)if(e=(t=Jl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Jl=e;else for(;null!==Jl;){t=Jl;try{var h=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==h){var g=h.memoizedProps,y=h.memoizedState,v=t.stateNode,b=v.getSnapshotBeforeUpdate(t.elementType===t.type?g:ya(t.type,g),y);v.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var x=t.stateNode.containerInfo;1===x.nodeType?x.textContent="":9===x.nodeType&&x.documentElement&&x.removeChild(x.documentElement);break;default:throw Error(a(163))}}catch(e){ku(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Jl=e;break}Jl=t.return}h=ns,ns=!1}(e,n),ys(n,e),mr(to),Wt=!!eo,to=eo=null,e.current=n,bs(n,e,o),Qe(),Bs=s,bt=l,_s.transition=i}else e.current=n;if(Ks&&(Ks=!1,Gs=e,Qs=o),0===(i=e.pendingLanes)&&(qs=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ou(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(Hs)throw Hs=!1,e=Ys,Ys=null,e;0!=(1&Qs)&&0!==e.tag&&Cu(),0!=(1&(i=e.pendingLanes))?e===Zs?Xs++:(Xs=0,Zs=e):Xs=0,Uo()}(e,t,n,r)}finally{_s.transition=o,bt=r}return null}function Cu(){if(null!==Gs){var e=xt(Qs),t=_s.transition,n=bt;try{if(_s.transition=null,bt=16>e?16:e,null===Gs)var r=!1;else{if(e=Gs,Gs=null,Qs=0,0!=(6&Bs))throw Error(a(331));var o=Bs;for(Bs|=4,Jl=e.current;null!==Jl;){var i=Jl,l=i.child;if(0!=(16&Jl.flags)){var s=i.deletions;if(null!==s){for(var u=0;u<s.length;u++){var c=s[u];for(Jl=c;null!==Jl;){var d=Jl;switch(d.tag){case 0:case 11:case 15:rs(8,d,i)}var p=d.child;if(null!==p)p.return=d,Jl=p;else for(;null!==Jl;){var f=(d=Jl).sibling,m=d.return;if(is(d),d===c){Jl=null;break}if(null!==f){f.return=m,Jl=f;break}Jl=m}}}var h=i.alternate;if(null!==h){var g=h.child;if(null!==g){h.child=null;do{var y=g.sibling;g.sibling=null,g=y}while(null!==g)}}Jl=i}}if(0!=(2064&i.subtreeFlags)&&null!==l)l.return=i,Jl=l;else e:for(;null!==Jl;){if(0!=(2048&(i=Jl).flags))switch(i.tag){case 0:case 11:case 15:rs(9,i,i.return)}var v=i.sibling;if(null!==v){v.return=i.return,Jl=v;break e}Jl=i.return}}var b=e.current;for(Jl=b;null!==Jl;){var x=(l=Jl).child;if(0!=(2064&l.subtreeFlags)&&null!==x)x.return=l,Jl=x;else e:for(l=b;null!==Jl;){if(0!=(2048&(s=Jl).flags))try{switch(s.tag){case 0:case 11:case 15:os(9,s)}}catch(e){ku(s,s.return,e)}if(s===l){Jl=null;break e}var A=s.sibling;if(null!==A){A.return=s.return,Jl=A;break e}Jl=s.return}}if(Bs=o,Uo(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,_s.transition=t}}return!1}function Eu(e,t,n){e=La(e,t=ml(0,t=cl(n,t),1),1),t=tu(),null!==e&&(yt(e,1,t),ou(e,t))}function ku(e,t,n){if(3===e.tag)Eu(e,e,n);else for(;null!==t;){if(3===t.tag){Eu(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===qs||!qs.has(r))){t=La(t,e=hl(t,e=cl(n,e),1),1),e=tu(),null!==t&&(yt(t,1,e),ou(t,e));break}}t=t.return}}function Su(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=tu(),e.pingedLanes|=e.suspendedLanes&n,Ps===e&&(Os&n)===n&&(4===Ls||3===Ls&&(130023424&Os)===Os&&500>Xe()-$s?fu(e,0):zs|=n),ou(e,t)}function Nu(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=tu();null!==(e=Pa(e,t))&&(yt(e,t,n),ou(e,n))}function _u(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Nu(e,n)}function Bu(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),Nu(e,n)}function Pu(e,t){return qe(e,t)}function Tu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ou(e,t,n,r){return new Tu(e,t,n,r)}function Ru(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Fu(e,t){var n=e.alternate;return null===n?((n=Ou(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Lu(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Ru(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case C:return ju(n.children,o,i,t);case E:l=8,o|=8;break;case k:return(e=Ou(12,n,t,2|o)).elementType=k,e.lanes=i,e;case B:return(e=Ou(13,n,t,o)).elementType=B,e.lanes=i,e;case P:return(e=Ou(19,n,t,o)).elementType=P,e.lanes=i,e;case R:return Mu(n,o,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case S:l=10;break e;case N:l=9;break e;case _:l=11;break e;case T:l=14;break e;case O:l=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Ou(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function ju(e,t,n,r){return(e=Ou(7,e,r,t)).lanes=n,e}function Mu(e,t,n,r){return(e=Ou(22,e,r,t)).elementType=R,e.lanes=n,e.stateNode={isHidden:!1},e}function Du(e,t,n){return(e=Ou(6,e,null,t)).lanes=n,e}function zu(e,t,n){return(t=Ou(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Iu(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Vu(e,t,n,r,o,a,i,l,s){return e=new Iu(e,t,n,l,s),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Ou(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Oa(a),e}function $u(e){if(!e)return _o;e:{if($e(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ro(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(Ro(n))return jo(e,n,t)}return t}function Uu(e,t,n,r,o,a,i,l,s){return(e=Vu(n,r,!0,e,0,a,0,l,s)).context=$u(null),n=e.current,(a=Fa(r=tu(),o=nu(n))).callback=null!=t?t:null,La(n,a,o),e.current.lanes=o,yt(e,o,r),ou(e,r),e}function Wu(e,t,n,r){var o=t.current,a=tu(),i=nu(o);return n=$u(n),null===t.context?t.context=n:t.pendingContext=n,(t=Fa(a,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=La(o,t,i))&&(ru(e,o,i,a),ja(e,o,i)),i}function Hu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Yu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function qu(e,t){Yu(e,t),(e=e.alternate)&&Yu(e,t)}Es=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Po.current)xl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return xl=!1,function(e,t,n){switch(t.tag){case 3:Pl(t),ma();break;case 5:ii(t);break;case 1:Ro(t.type)&&Mo(t);break;case 4:oi(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;No(va,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(No(si,1&si.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Dl(e,t,n):(No(si,1&si.current),null!==(e=Hl(e,t,n))?e.sibling:null);No(si,1&si.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Ul(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),No(si,si.current),r)break;return null;case 22:case 23:return t.lanes=0,kl(e,t,n)}return Hl(e,t,n)}(e,t,n);xl=0!=(131072&e.flags)}else xl=!1,aa&&0!=(1048576&t.flags)&&ea(t,qo,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Wl(e,t),e=t.pendingProps;var o=Oo(t,Bo.current);ka(t,n),o=Ei(null,t,r,e,o,n);var i=ki();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ro(r)?(i=!0,Mo(t)):i=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Oa(t),o.updater=$a,t.stateNode=o,o._reactInternals=t,Ya(t,r,e,n),t=Bl(null,t,r,!0,i,n)):(t.tag=0,aa&&i&&ta(t),Al(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Wl(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Ru(e)?1:0;if(null!=e){if((e=e.$$typeof)===_)return 11;if(e===T)return 14}return 2}(r),e=ya(r,e),o){case 0:t=Nl(null,t,r,e,n);break e;case 1:t=_l(null,t,r,e,n);break e;case 11:t=wl(null,t,r,e,n);break e;case 14:t=Cl(null,t,r,ya(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Nl(e,t,r,o=t.elementType===r?o:ya(r,o),n);case 1:return r=t.type,o=t.pendingProps,_l(e,t,r,o=t.elementType===r?o:ya(r,o),n);case 3:e:{if(Pl(t),null===e)throw Error(a(387));r=t.pendingProps,o=(i=t.memoizedState).element,Ra(e,t),Da(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Tl(e,t,r,n,o=cl(Error(a(423)),t));break e}if(r!==o){t=Tl(e,t,r,n,o=cl(Error(a(424)),t));break e}for(oa=uo(t.stateNode.containerInfo.firstChild),ra=t,aa=!0,ia=null,n=Za(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ma(),r===o){t=Hl(e,t,n);break e}Al(e,t,r,n)}t=t.child}return t;case 5:return ii(t),null===e&&ca(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,no(r,o)?l=null:null!==i&&no(r,i)&&(t.flags|=32),Sl(e,t),Al(e,t,l,n),t.child;case 6:return null===e&&ca(t),null;case 13:return Dl(e,t,n);case 4:return oi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Xa(t,null,r,n):Al(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,wl(e,t,r,o=t.elementType===r?o:ya(r,o),n);case 7:return Al(e,t,t.pendingProps,n),t.child;case 8:case 12:return Al(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,l=o.value,No(va,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===o.children&&!Po.current){t=Hl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var s=i.dependencies;if(null!==s){l=i.child;for(var u=s.firstContext;null!==u;){if(u.context===r){if(1===i.tag){(u=Fa(-1,n&-n)).tag=2;var c=i.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?u.next=u:(u.next=d.next,d.next=u),c.pending=u}}i.lanes|=n,null!==(u=i.alternate)&&(u.lanes|=n),Ea(i.return,n,t),s.lanes|=n;break}u=u.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(a(341));l.lanes|=n,null!==(s=l.alternate)&&(s.lanes|=n),Ea(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}Al(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,ka(t,n),r=r(o=Sa(o)),t.flags|=1,Al(e,t,r,n),t.child;case 14:return o=ya(r=t.type,t.pendingProps),Cl(e,t,r,o=ya(r.type,o),n);case 15:return El(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:ya(r,o),Wl(e,t),t.tag=1,Ro(r)?(e=!0,Mo(t)):e=!1,ka(t,n),Wa(t,r,o),Ya(t,r,o,n),Bl(null,t,r,!0,e,n);case 19:return Ul(e,t,n);case 22:return kl(e,t,n)}throw Error(a(156,t.tag))};var Ku="function"==typeof reportError?reportError:function(e){console.error(e)};function Gu(e){this._internalRoot=e}function Qu(e){this._internalRoot=e}function Xu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Zu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ju(){}function ec(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a;if("function"==typeof o){var l=o;o=function(){var e=Hu(i);l.call(e)}}Wu(t,i,e,o)}else i=function(e,t,n,r,o){if(o){if("function"==typeof r){var a=r;r=function(){var e=Hu(i);a.call(e)}}var i=Uu(t,r,e,0,null,!1,0,"",Ju);return e._reactRootContainer=i,e[ho]=i.current,$r(8===e.nodeType?e.parentNode:e),du(),i}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var l=r;r=function(){var e=Hu(s);l.call(e)}}var s=Vu(e,0,!1,null,0,!1,0,"",Ju);return e._reactRootContainer=s,e[ho]=s.current,$r(8===e.nodeType?e.parentNode:e),du((function(){Wu(t,s,n,r)})),s}(n,t,e,o,r);return Hu(i)}Qu.prototype.render=Gu.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Wu(e,t,null,null)},Qu.prototype.unmount=Gu.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;du((function(){Wu(null,e,null,null)})),t[ho]=null}},Qu.prototype.unstable_scheduleHydration=function(e){if(e){var t=Et();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Rt.length&&0!==t&&t<Rt[n].priority;n++);Rt.splice(n,0,e),0===n&&Mt(e)}},At=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(vt(t,1|n),ou(t,Xe()),0==(6&Bs)&&(Us=Xe()+500,Uo()))}break;case 13:du((function(){var t=Pa(e,1);if(null!==t){var n=tu();ru(t,e,1,n)}})),qu(e,1)}},wt=function(e){if(13===e.tag){var t=Pa(e,134217728);null!==t&&ru(t,e,134217728,tu()),qu(e,134217728)}},Ct=function(e){if(13===e.tag){var t=nu(e),n=Pa(e,t);null!==n&&ru(n,e,t,tu()),qu(e,t)}},Et=function(){return bt},kt=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},we=function(e,t,n){switch(t){case"input":if(Z(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=wo(r);if(!o)throw Error(a(90));q(r),Z(r,o)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},_e=cu,Be=du;var tc={usingClientEntryPoint:!1,Events:[xo,Ao,wo,Se,Ne,cu]},nc={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:x.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var oc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!oc.isDisabled&&oc.supportsFiber)try{ot=oc.inject(rc),at=oc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xu(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:w,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xu(e))throw Error(a(299));var n=!1,r="",o=Ku;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Vu(e,1,!1,null,0,n,0,r,o),e[ho]=t.current,$r(8===e.nodeType?e.parentNode:e),new Gu(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return du(e)},t.hydrate=function(e,t,n){if(!Zu(t))throw Error(a(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xu(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,o=!1,i="",l=Ku;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Uu(t,null,e,1,null!=n?n:null,o,0,i,l),e[ho]=t.current,$r(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Qu(t)},t.render=function(e,t,n){if(!Zu(t))throw Error(a(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zu(e))throw Error(a(40));return!!e._reactRootContainer&&(du((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[ho]=null}))})),!0)},t.unstable_batchedUpdates=cu,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zu(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{var r=n(935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},935:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:(e,t)=>{var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,p=n?Symbol.for("react.forward_ref"):60112,f=n?Symbol.for("react.suspense"):60113,m=n?Symbol.for("react.suspense_list"):60120,h=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,v=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,x=n?Symbol.for("react.scope"):60119;function A(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case d:case a:case l:case i:case f:return e;default:switch(e=e&&e.$$typeof){case u:case p:case g:case h:case s:return e;default:return t}}case o:return t}}}function w(e){return A(e)===d}t.AsyncMode=c,t.ConcurrentMode=d,t.ContextConsumer=u,t.ContextProvider=s,t.Element=r,t.ForwardRef=p,t.Fragment=a,t.Lazy=g,t.Memo=h,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=f,t.isAsyncMode=function(e){return w(e)||A(e)===c},t.isConcurrentMode=w,t.isContextConsumer=function(e){return A(e)===u},t.isContextProvider=function(e){return A(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return A(e)===p},t.isFragment=function(e){return A(e)===a},t.isLazy=function(e){return A(e)===g},t.isMemo=function(e){return A(e)===h},t.isPortal=function(e){return A(e)===o},t.isProfiler=function(e){return A(e)===l},t.isStrictMode=function(e){return A(e)===i},t.isSuspense=function(e){return A(e)===f},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===l||e===i||e===f||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===h||e.$$typeof===s||e.$$typeof===u||e.$$typeof===p||e.$$typeof===v||e.$$typeof===b||e.$$typeof===x||e.$$typeof===y)},t.typeOf=A},864:(e,t,n)=>{e.exports=n(921)},251:(e,t,n)=>{var r=n(294),o=Symbol.for("react.element"),a=(Symbol.for("react.fragment"),Object.prototype.hasOwnProperty),i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function s(e,t,n){var r,s={},u=null,c=null;for(r in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(c=t.ref),t)a.call(t,r)&&!l.hasOwnProperty(r)&&(s[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===s[r]&&(s[r]=t[r]);return{$$typeof:o,type:e,key:u,ref:c,props:s,_owner:i.current}}t.jsx=s,t.jsxs=s},408:(e,t)=>{var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),s=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),f=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,g={};function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var x=b.prototype=new v;x.constructor=b,h(x,y.prototype),x.isPureReactComponent=!0;var A=Array.isArray,w=Object.prototype.hasOwnProperty,C={current:null},E={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,r){var o,a={},i=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)w.call(t,o)&&!E.hasOwnProperty(o)&&(a[o]=t[o]);var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}if(e&&e.defaultProps)for(o in s=e.defaultProps)void 0===a[o]&&(a[o]=s[o]);return{$$typeof:n,type:e,key:i,ref:l,props:a,_owner:C.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var N=/\/+/g;function _(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function B(e,t,o,a,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case n:case r:s=!0}}if(s)return i=i(s=e),e=""===a?"."+_(s,0):a,A(i)?(o="",null!=e&&(o=e.replace(N,"$&/")+"/"),B(i,t,o,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||s&&s.key===i.key?"":(""+i.key).replace(N,"$&/")+"/")+e)),t.push(i)),1;if(s=0,a=""===a?".":a+":",A(e))for(var u=0;u<e.length;u++){var c=a+_(l=e[u],u);s+=B(l,t,o,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(l=e.next()).done;)s+=B(l=l.value,t,o,c=a+_(l,u++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function P(e,t,n){if(null==e)return e;var r=[],o=0;return B(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function T(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var O={current:null},R={transition:null},F={ReactCurrentDispatcher:O,ReactCurrentBatchConfig:R,ReactCurrentOwner:C};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=o,t.Profiler=i,t.PureComponent=b,t.StrictMode=a,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=F,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=h({},e.props),a=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=C.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(u in t)w.call(t,u)&&!E.hasOwnProperty(u)&&(o[u]=void 0===t[u]&&void 0!==s?s[u]:t[u])}var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){s=Array(u);for(var c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}return{$$typeof:n,type:e.type,key:a,ref:i,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:p,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=R.transition;R.transition={};try{e()}finally{R.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return O.current.useCallback(e,t)},t.useContext=function(e){return O.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return O.current.useDeferredValue(e)},t.useEffect=function(e,t){return O.current.useEffect(e,t)},t.useId=function(){return O.current.useId()},t.useImperativeHandle=function(e,t,n){return O.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return O.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return O.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return O.current.useMemo(e,t)},t.useReducer=function(e,t,n){return O.current.useReducer(e,t,n)},t.useRef=function(e){return O.current.useRef(e)},t.useState=function(e){return O.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return O.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return O.current.useTransition()},t.version="18.2.0"},294:(e,t,n)=>{e.exports=n(408)},893:(e,t,n)=>{e.exports=n(251)},53:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var l=2*(r+1)-1,s=e[l],u=l+1,c=e[u];if(0>a(s,n))u<o&&0>a(c,s)?(e[r]=c,e[u]=n,r=u):(e[r]=s,e[l]=n,r=l);else{if(!(u<o&&0>a(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}var u=[],c=[],d=1,p=null,f=3,m=!1,h=!1,g=!1,y="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function x(e){for(var t=r(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function A(e){if(g=!1,x(e),!h)if(null!==r(u))h=!0,R(w);else{var t=r(c);null!==t&&F(A,t.startTime-e)}}function w(e,n){h=!1,g&&(g=!1,v(S),S=-1),m=!0;var a=f;try{for(x(n),p=r(u);null!==p&&(!(p.expirationTime>n)||e&&!B());){var i=p.callback;if("function"==typeof i){p.callback=null,f=p.priorityLevel;var l=i(p.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?p.callback=l:p===r(u)&&o(u),x(n)}else o(u);p=r(u)}if(null!==p)var s=!0;else{var d=r(c);null!==d&&F(A,d.startTime-n),s=!1}return s}finally{p=null,f=a,m=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var C,E=!1,k=null,S=-1,N=5,_=-1;function B(){return!(t.unstable_now()-_<N)}function P(){if(null!==k){var e=t.unstable_now();_=e;var n=!0;try{n=k(!0,e)}finally{n?C():(E=!1,k=null)}}else E=!1}if("function"==typeof b)C=function(){b(P)};else if("undefined"!=typeof MessageChannel){var T=new MessageChannel,O=T.port2;T.port1.onmessage=P,C=function(){O.postMessage(null)}}else C=function(){y(P,0)};function R(e){k=e,E||(E=!0,C())}function F(e,n){S=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){h||m||(h=!0,R(w))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):N=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return f},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(f){case 1:case 2:case 3:var t=3;break;default:t=f}var n=f;f=t;try{return e()}finally{f=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=f;f=e;try{return t()}finally{f=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>i?(e.sortIndex=a,n(c,e),null===r(u)&&e===r(c)&&(g?(v(S),S=-1):g=!0,F(A,a-i))):(e.sortIndex=l,n(u,e),h||m||(h=!0,R(w))),e},t.unstable_shouldYield=B,t.unstable_wrapCallback=function(e){var t=f;return function(){var n=f;f=t;try{return e.apply(this,arguments)}finally{f=n}}}},840:(e,t,n)=>{e.exports=n(53)},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],l=0;l<e.length;l++){var s=e[l],u=r.base?s[0]+r.base:s[0],c=a[u]||0,d="".concat(u," ").concat(c);a[u]=c+1;var p=n(d),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(f);else{var m=o(f,r);r.byIndex=l,t.splice(l,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var l=n(a[i]);t[l].references--}for(var s=r(e,o),u=0;u<a.length;u++){var c=n(a[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}a=s}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},__webpack_module_cache__={},leafPrototypes,getProto;function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={id:e,exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(t,{a:t}),t},getProto=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,__webpack_require__.t=function(e,t){if(1&t&&(e=this(e)),8&t)return e;if("object"==typeof e&&e){if(4&t&&e.__esModule)return e;if(16&t&&"function"==typeof e.then)return e}var n=Object.create(null);__webpack_require__.r(n);var r={};leafPrototypes=leafPrototypes||[null,getProto({}),getProto([]),getProto(getProto)];for(var o=2&t&&e;"object"==typeof o&&!~leafPrototypes.indexOf(o);o=getProto(o))Object.getOwnPropertyNames(o).forEach((t=>r[t]=()=>e[t]));return r.default=()=>e,__webpack_require__.d(n,r),n},__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},__webpack_require__.nc=void 0;var __webpack_exports__={};(()=>{var e={};__webpack_require__.r(e),__webpack_require__.d(e,{hasBrowserEnv:()=>Fs,hasStandardBrowserEnv:()=>Ls,hasStandardBrowserWebWorkerEnv:()=>Ms});var t,n=__webpack_require__(294),r=__webpack_require__.t(n,2),o=__webpack_require__(745),a=__webpack_require__(379),i=__webpack_require__.n(a),l=__webpack_require__(795),s=__webpack_require__.n(l),u=__webpack_require__(569),c=__webpack_require__.n(u),d=__webpack_require__(565),p=__webpack_require__.n(d),f=__webpack_require__(216),m=__webpack_require__.n(f),h=__webpack_require__(589),g=__webpack_require__.n(h),y=__webpack_require__(528),v={};function b(){return b=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},b.apply(this,arguments)}v.styleTagTransform=g(),v.setAttributes=p(),v.insert=c().bind(null,"head"),v.domAPI=s(),v.insertStyleElement=m(),i()(y.Z,v),y.Z&&y.Z.locals&&y.Z.locals,function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(t||(t={}));const x="popstate";function A(e,t){if(!1===e||null==e)throw new Error(t)}function w(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function C(e,t){return{usr:e.state,key:e.key,idx:t}}function E(e,t,n,r){return void 0===n&&(n=null),b({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?S(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function k(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function S(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var N;function _(e,t,n){void 0===n&&(n="/");let r=$(("string"==typeof t?S(t):t).pathname||"/",n);if(null==r)return null;let o=B(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let a=null;for(let e=0;null==a&&e<o.length;++e)a=z(o[e],V(r));return a}function B(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let o=(e,o,a)=>{let i={relativePath:void 0===a?e.path||"":a,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};i.relativePath.startsWith("/")&&(A(i.relativePath.startsWith(r),'Absolute route path "'+i.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(r.length));let l=Y([r,i.relativePath]),s=n.concat(i);e.children&&e.children.length>0&&(A(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),B(e.children,t,s,l)),(null!=e.path||e.index)&&t.push({path:l,score:D(l,e.index),routesMeta:s})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of P(e.path))o(e,t,n);else o(e,t)})),t}function P(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,o=n.endsWith("?"),a=n.replace(/\?$/,"");if(0===r.length)return o?[a,""]:[a];let i=P(r.join("/")),l=[];return l.push(...i.map((e=>""===e?a:[a,e].join("/")))),o&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(N||(N={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const T=/^:\w+$/,O=3,R=2,F=1,L=10,j=-2,M=e=>"*"===e;function D(e,t){let n=e.split("/"),r=n.length;return n.some(M)&&(r+=j),t&&(r+=R),n.filter((e=>!M(e))).reduce(((e,t)=>e+(T.test(t)?O:""===t?F:L)),r)}function z(e,t){let{routesMeta:n}=e,r={},o="/",a=[];for(let e=0;e<n.length;++e){let i=n[e],l=e===n.length-1,s="/"===o?t:t.slice(o.length)||"/",u=I({path:i.relativePath,caseSensitive:i.caseSensitive,end:l},s);if(!u)return null;Object.assign(r,u.params);let c=i.route;a.push({params:r,pathname:Y([o,u.pathname]),pathnameBase:q(Y([o,u.pathnameBase])),route:c}),"/"!==u.pathnameBase&&(o=Y([o,u.pathnameBase]))}return a}function I(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),w("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,((e,t)=>(r.push(t),"/([^\\/]+)")));return e.endsWith("*")?(r.push("*"),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))"),[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let a=o[0],i=a.replace(/(.)\/+$/,"$1"),l=o.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=l[n]||"";i=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return w(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(l[n]||"",t),e}),{}),pathname:a,pathnameBase:i,pattern:e}}function V(e){try{return decodeURI(e)}catch(t){return w(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function $(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function U(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function W(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function H(e,t,n,r){let o;void 0===r&&(r=!1),"string"==typeof e?o=S(e):(o=b({},e),A(!o.pathname||!o.pathname.includes("?"),U("?","pathname","search",o)),A(!o.pathname||!o.pathname.includes("#"),U("#","pathname","hash",o)),A(!o.search||!o.search.includes("#"),U("#","search","hash",o)));let a,i=""===e||""===o.pathname,l=i?"/":o.pathname;if(r||null==l)a=n;else{let e=t.length-1;if(l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}a=e>=0?t[e]:"/"}let s=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:o=""}="string"==typeof e?S(e):e,a=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:a,search:K(r),hash:G(o)}}(o,a),u=l&&"/"!==l&&l.endsWith("/"),c=(i||"."===l)&&n.endsWith("/");return s.pathname.endsWith("/")||!u&&!c||(s.pathname+="/"),s}const Y=e=>e.join("/").replace(/\/\/+/g,"/"),q=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),K=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",G=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const Q=["post","put","patch","delete"],X=(new Set(Q),["get",...Q]);function Z(){return Z=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Z.apply(this,arguments)}new Set(X),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const J=n.createContext(null),ee=n.createContext(null),te=n.createContext(null),ne=n.createContext(null),re=n.createContext({outlet:null,matches:[],isDataRoute:!1}),oe=n.createContext(null);function ae(){return null!=n.useContext(ne)}function ie(){return ae()||A(!1),n.useContext(ne).location}function le(e){n.useContext(te).static||n.useLayoutEffect(e)}function se(){let{isDataRoute:e}=n.useContext(re);return e?function(){let{router:e}=function(e){let t=n.useContext(J);return t||A(!1),t}(he.UseNavigateStable),t=ye(ge.UseNavigateStable),r=n.useRef(!1);le((()=>{r.current=!0}));let o=n.useCallback((function(n,o){void 0===o&&(o={}),r.current&&("number"==typeof n?e.navigate(n):e.navigate(n,Z({fromRouteId:t},o)))}),[e,t]);return o}():function(){ae()||A(!1);let e=n.useContext(J),{basename:t,navigator:r}=n.useContext(te),{matches:o}=n.useContext(re),{pathname:a}=ie(),i=JSON.stringify(W(o).map((e=>e.pathnameBase))),l=n.useRef(!1);le((()=>{l.current=!0}));let s=n.useCallback((function(n,o){if(void 0===o&&(o={}),!l.current)return;if("number"==typeof n)return void r.go(n);let s=H(n,JSON.parse(i),a,"path"===o.relative);null==e&&"/"!==t&&(s.pathname="/"===s.pathname?t:Y([t,s.pathname])),(o.replace?r.replace:r.push)(s,o.state,o)}),[t,r,i,a,e]);return s}()}function ue(e,t){let{relative:r}=void 0===t?{}:t,{matches:o}=n.useContext(re),{pathname:a}=ie(),i=JSON.stringify(W(o).map((e=>e.pathnameBase)));return n.useMemo((()=>H(e,JSON.parse(i),a,"path"===r)),[e,i,a,r])}function ce(e,r,o){ae()||A(!1);let{navigator:a}=n.useContext(te),{matches:i}=n.useContext(re),l=i[i.length-1],s=l?l.params:{},u=(l&&l.pathname,l?l.pathnameBase:"/");l&&l.route;let c,d=ie();if(r){var p;let e="string"==typeof r?S(r):r;"/"===u||(null==(p=e.pathname)?void 0:p.startsWith(u))||A(!1),c=e}else c=d;let f=c.pathname||"/",m=_(e,{pathname:"/"===u?f:f.slice(u.length)||"/"}),h=function(e,t,r){var o;if(void 0===t&&(t=[]),void 0===r&&(r=null),null==e){var a;if(null==(a=r)||!a.errors)return null;e=r.matches}let i=e,l=null==(o=r)?void 0:o.errors;if(null!=l){let e=i.findIndex((e=>e.route.id&&(null==l?void 0:l[e.route.id])));e>=0||A(!1),i=i.slice(0,Math.min(i.length,e+1))}return i.reduceRight(((e,o,a)=>{let s=o.route.id?null==l?void 0:l[o.route.id]:null,u=null;r&&(u=o.route.errorElement||pe);let c=t.concat(i.slice(0,a+1)),d=()=>{let t;return t=s?u:o.route.Component?n.createElement(o.route.Component,null):o.route.element?o.route.element:e,n.createElement(me,{match:o,routeContext:{outlet:e,matches:c,isDataRoute:null!=r},children:t})};return r&&(o.route.ErrorBoundary||o.route.errorElement||0===a)?n.createElement(fe,{location:r.location,revalidation:r.revalidation,component:u,error:s,children:d(),routeContext:{outlet:null,matches:c,isDataRoute:!0}}):d()}),null)}(m&&m.map((e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:Y([u,a.encodeLocation?a.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?u:Y([u,a.encodeLocation?a.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),i,o);return r&&h?n.createElement(ne.Provider,{value:{location:Z({pathname:"/",search:"",hash:"",state:null,key:"default"},c),navigationType:t.Pop}},h):h}function de(){let e=function(){var e;let t=n.useContext(oe),r=function(e){let t=n.useContext(ee);return t||A(!1),t}(ge.UseRouteError),o=ye(ge.UseRouteError);return t||(null==(e=r.errors)?void 0:e[o])}(),t=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,o={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return n.createElement(n.Fragment,null,n.createElement("h2",null,"Unexpected Application Error!"),n.createElement("h3",{style:{fontStyle:"italic"}},t),r?n.createElement("pre",{style:o},r):null,null)}const pe=n.createElement(de,null);class fe extends n.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:e.error||t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?n.createElement(re.Provider,{value:this.props.routeContext},n.createElement(oe.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function me(e){let{routeContext:t,match:r,children:o}=e,a=n.useContext(J);return a&&a.static&&a.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(a.staticContext._deepestRenderedBoundaryId=r.route.id),n.createElement(re.Provider,{value:t},o)}var he=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(he||{}),ge=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(ge||{});function ye(e){let t=function(e){let t=n.useContext(re);return t||A(!1),t}(),r=t.matches[t.matches.length-1];return r.route.id||A(!1),r.route.id}function ve(e){A(!1)}function be(e){let{basename:r="/",children:o=null,location:a,navigationType:i=t.Pop,navigator:l,static:s=!1}=e;ae()&&A(!1);let u=r.replace(/^\/*/,"/"),c=n.useMemo((()=>({basename:u,navigator:l,static:s})),[u,l,s]);"string"==typeof a&&(a=S(a));let{pathname:d="/",search:p="",hash:f="",state:m=null,key:h="default"}=a,g=n.useMemo((()=>{let e=$(d,u);return null==e?null:{location:{pathname:e,search:p,hash:f,state:m,key:h},navigationType:i}}),[u,d,p,f,m,h,i]);return null==g?null:n.createElement(te.Provider,{value:c},n.createElement(ne.Provider,{children:o,value:g}))}function xe(e){let{children:t,location:n}=e;return ce(Ae(t),n)}function Ae(e,t){void 0===t&&(t=[]);let r=[];return n.Children.forEach(e,((e,o)=>{if(!n.isValidElement(e))return;let a=[...t,o];if(e.type===n.Fragment)return void r.push.apply(r,Ae(e.props.children,a));e.type!==ve&&A(!1),e.props.index&&e.props.children&&A(!1);let i={id:e.props.id||a.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(i.children=Ae(e.props.children,a)),r.push(i)})),r}function we(){return we=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},we.apply(this,arguments)}function Ce(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}r.startTransition,new Promise((()=>{})),n.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const Ee=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset"],ke=["aria-current","caseSensitive","className","end","style","to","children"],Se=r.startTransition;function Ne(e){let{basename:r,children:o,future:a,window:i}=e,l=n.useRef();null==l.current&&(l.current=function(e){return void 0===e&&(e={}),function(e,n,r,o){void 0===o&&(o={});let{window:a=document.defaultView,v5Compat:i=!1}=o,l=a.history,s=t.Pop,u=null,c=d();function d(){return(l.state||{idx:null}).idx}function p(){s=t.Pop;let e=d(),n=null==e?null:e-c;c=e,u&&u({action:s,location:m.location,delta:n})}function f(e){let t="null"!==a.location.origin?a.location.origin:a.location.href,n="string"==typeof e?e:k(e);return A(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==c&&(c=0,l.replaceState(b({},l.state,{idx:c}),""));let m={get action(){return s},get location(){return e(a,l)},listen(e){if(u)throw new Error("A history only accepts one active listener");return a.addEventListener(x,p),u=e,()=>{a.removeEventListener(x,p),u=null}},createHref:e=>n(a,e),createURL:f,encodeLocation(e){let t=f(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,n){s=t.Push;let o=E(m.location,e,n);r&&r(o,e),c=d()+1;let p=C(o,c),f=m.createHref(o);try{l.pushState(p,"",f)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;a.location.assign(f)}i&&u&&u({action:s,location:m.location,delta:1})},replace:function(e,n){s=t.Replace;let o=E(m.location,e,n);r&&r(o,e),c=d();let a=C(o,c),p=m.createHref(o);l.replaceState(a,"",p),i&&u&&u({action:s,location:m.location,delta:0})},go:e=>l.go(e)};return m}((function(e,t){let{pathname:n="/",search:r="",hash:o=""}=S(e.location.hash.substr(1));return n.startsWith("/")||n.startsWith(".")||(n="/"+n),E("",{pathname:n,search:r,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),r="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");r=-1===n?t:t.slice(0,n)}return r+"#"+("string"==typeof t?t:k(t))}),(function(e,t){w("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),e)}({window:i,v5Compat:!0}));let s=l.current,[u,c]=n.useState({action:s.action,location:s.location}),{v7_startTransition:d}=a||{},p=n.useCallback((e=>{d&&Se?Se((()=>c(e))):c(e)}),[c,d]);return n.useLayoutEffect((()=>s.listen(p)),[s,p]),n.createElement(be,{basename:r,children:o,location:u.location,navigationType:u.action,navigator:s})}const _e="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,Be=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Pe=n.forwardRef((function(e,t){let r,{onClick:o,relative:a,reloadDocument:i,replace:l,state:s,target:u,to:c,preventScrollReset:d}=e,p=Ce(e,Ee),{basename:f}=n.useContext(te),m=!1;if("string"==typeof c&&Be.test(c)&&(r=c,_e))try{let e=new URL(window.location.href),t=c.startsWith("//")?new URL(e.protocol+c):new URL(c),n=$(t.pathname,f);t.origin===e.origin&&null!=n?c=n+t.search+t.hash:m=!0}catch(e){}let h=function(e,t){let{relative:r}=void 0===t?{}:t;ae()||A(!1);let{basename:o,navigator:a}=n.useContext(te),{hash:i,pathname:l,search:s}=ue(e,{relative:r}),u=l;return"/"!==o&&(u="/"===l?o:Y([o,l])),a.createHref({pathname:u,search:s,hash:i})}(c,{relative:a}),g=function(e,t){let{target:r,replace:o,state:a,preventScrollReset:i,relative:l}=void 0===t?{}:t,s=se(),u=ie(),c=ue(e,{relative:l});return n.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==o?o:k(u)===k(c);s(e,{replace:n,state:a,preventScrollReset:i,relative:l})}}),[u,s,c,o,a,r,e,i,l])}(c,{replace:l,state:s,target:u,preventScrollReset:d,relative:a});return n.createElement("a",we({},p,{href:r||h,onClick:m||i?o:function(e){o&&o(e),e.defaultPrevented||g(e)},ref:t,target:u}))})),Te=n.forwardRef((function(e,t){let{"aria-current":r="page",caseSensitive:o=!1,className:a="",end:i=!1,style:l,to:s,children:u}=e,c=Ce(e,ke),d=ue(s,{relative:c.relative}),p=ie(),f=n.useContext(ee),{navigator:m}=n.useContext(te),h=m.encodeLocation?m.encodeLocation(d).pathname:d.pathname,g=p.pathname,y=f&&f.navigation&&f.navigation.location?f.navigation.location.pathname:null;o||(g=g.toLowerCase(),y=y?y.toLowerCase():null,h=h.toLowerCase());let v,b=g===h||!i&&g.startsWith(h)&&"/"===g.charAt(h.length),x=null!=y&&(y===h||!i&&y.startsWith(h)&&"/"===y.charAt(h.length)),A=b?r:void 0;v="function"==typeof a?a({isActive:b,isPending:x}):[a,b?"active":null,x?"pending":null].filter(Boolean).join(" ");let w="function"==typeof l?l({isActive:b,isPending:x}):l;return n.createElement(Pe,we({},c,{"aria-current":A,className:v,ref:t,style:w,to:s}),"function"==typeof u?u({isActive:b,isPending:x}):u)}));var Oe,Re;function Fe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Le(){var e,t,r=(e=(0,n.useState)(!1),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],s=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Fe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Fe(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],a=r[1];return(0,n.useEffect)((function(){var e=function(){window.pageYOffset>300?a(!0):a(!1)};return window.addEventListener("scroll",e),function(){window.removeEventListener("scroll",e)}}),[]),n.createElement("div",null,o&&n.createElement("span",null,n.createElement("div",{onClick:function(){window.scrollTo({top:0,behavior:"smooth"})},className:"back-to-top"},n.createElement("div",{className:"arrowup"},"^"))))}function je(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],s=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Me(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Me(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Me(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher"})(Oe||(Oe={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(Re||(Re={}));const De=function(){var e=je((0,n.useState)(""),2),t=e[0],r=e[1],o=je((0,n.useState)(""),2),a=o[0],i=o[1],l=je((0,n.useState)(""),2),s=l[0],u=l[1],c=je((0,n.useState)(""),2),d=c[0],p=c[1],f=je((0,n.useState)(""),2),m=f[0],h=f[1],g=je((0,n.useState)(""),2),y=g[0],v=g[1],b=je((0,n.useState)(""),2),x=b[0],A=b[1],w=je((0,n.useState)(""),2),C=w[0],E=w[1],k=je((0,n.useState)(""),2),S=k[0],N=k[1],_=je((0,n.useState)(""),2),B=_[0],P=_[1],T=je((0,n.useState)(""),2),O=T[0],R=T[1],F=je((0,n.useState)(""),2),L=F[0],j=F[1],M=je((0,n.useState)(""),2),D=M[0],z=M[1],I=je((0,n.useState)(""),2),V=I[0],$=I[1],U=je((0,n.useState)(""),2),W=U[0],H=U[1],Y=je((0,n.useState)(""),2),q=Y[0],K=Y[1],G=je((0,n.useState)(""),2),Q=G[0],X=G[1],Z=je((0,n.useState)(""),2),J=Z[0],ee=Z[1],te=je((0,n.useState)(""),2),ne=te[0],re=te[1],oe=je((0,n.useState)(""),2),ae=oe[0],ie=oe[1],le=je((0,n.useState)(""),2),ue=le[0],ce=le[1],de=je((0,n.useState)(""),2),pe=de[0],fe=de[1],me=je((0,n.useState)(""),2),he=me[0],ge=me[1],ye=je((0,n.useState)(""),2),ve=ye[0],be=ye[1],xe=je((0,n.useState)(""),2),Ae=xe[0],we=xe[1],Ce=je((0,n.useState)(""),2),Ee=Ce[0],ke=Ce[1],Se=je((0,n.useState)(""),2),Ne=Se[0],_e=Se[1],Be=je((0,n.useState)(""),2),Pe=Be[0],Te=Be[1],Oe=je((0,n.useState)(""),2),Re=Oe[0],Fe=Oe[1],Me=je((0,n.useState)(""),2),De=Me[0],ze=Me[1],Ie=je((0,n.useState)(""),2),Ve=Ie[0],$e=Ie[1],Ue=je((0,n.useState)(""),2),We=Ue[0],He=Ue[1],Ye=je((0,n.useState)(""),2),qe=Ye[0],Ke=Ye[1],Ge=je((0,n.useState)(""),2),Qe=Ge[0],Xe=Ge[1],Ze=je((0,n.useState)(""),2),Je=Ze[0],et=Ze[1],tt=je((0,n.useState)(""),2),nt=tt[0],rt=tt[1],ot=je((0,n.useState)(""),2),at=ot[0],it=ot[1],lt=je((0,n.useState)(""),2),st=lt[0],ut=lt[1],ct=je((0,n.useState)(""),2),dt=ct[0],pt=ct[1],ft=je((0,n.useState)(""),2),mt=ft[0],ht=ft[1],gt=je((0,n.useState)(""),2),yt=gt[0],vt=gt[1],bt=je((0,n.useState)(""),2),xt=bt[0],At=bt[1],wt=je((0,n.useState)(""),2),Ct=wt[0],Et=wt[1],kt=je((0,n.useState)(""),2),St=kt[0],Nt=kt[1],_t=je((0,n.useState)(""),2),Bt=_t[0],Pt=_t[1],Tt=je((0,n.useState)(""),2),Ot=Tt[0],Rt=Tt[1],Ft=je((0,n.useState)(""),2),Lt=Ft[0],jt=Ft[1],Mt=je((0,n.useState)(""),2),Dt=Mt[0],zt=Mt[1],It=je((0,n.useState)(""),2),Vt=It[0],$t=It[1],Ut=je((0,n.useState)(""),2),Wt=Ut[0],Ht=Ut[1];return se(),n.createElement(n.Fragment,null,n.createElement("table",{className:"hrana"},n.createElement("thead",null,n.createElement("tr",null,n.createElement("th",null,"Hrana"),n.createElement("th",null,"g ml"),n.createElement("th",null,"Protein"),n.createElement("th",null,"UH"),n.createElement("th",null,"Mast"),n.createElement("th",null,"Kalorije"))),n.createElement("tbody",null,n.createElement("tr",{className:"hidrati"},n.createElement("td",{className:"naslov"},"Pirinač"),n.createElement("td",null,n.createElement("input",{name:"value1",type:"number",value:t,onChange:function(e){r(e.target.value)}})),n.createElement("td",{className:"protein"},(.076*t).toFixed(1)),n.createElement("td",{className:"ugHid"},(.78*t).toFixed(1)),n.createElement("td",{className:"mast"}),n.createElement("td",{className:"protein"},(3.51*t).toFixed(1))),n.createElement("tr",{className:"hidrati"},n.createElement("td",{className:"naslov"},"Ovsene pahuljice"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value2",value:a,onChange:function(e){i(e.target.value)}})),n.createElement("td",{className:"protein"},(.139*a).toFixed(1)),n.createElement("td",{className:"protein"},(.644*a).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(3.74*a).toFixed(1))),n.createElement("tr",{className:"hidrati"},n.createElement("td",{className:"naslov"},"Krompir"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value3",value:s,onChange:function(e){u(e.target.value)}})),n.createElement("td",{className:"protein"},(.09*s).toFixed(1)),n.createElement("td",{className:"protein"},(.2*s).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.85*s).toFixed(1))),n.createElement("tr",{className:"hidrati"},n.createElement("td",{className:"naslov"},"Kukuruzni griz"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value4",value:d,onChange:function(e){p(e.target.value)}})),n.createElement("td",{className:"protein"},(.07*d).toFixed(1)),n.createElement("td",{className:"protein"},(.77*d).toFixed(1)),n.createElement("td",{className:"protein"},(.015*d).toFixed(1)),n.createElement("td",{className:"protein"},(3.5*d).toFixed(1))),n.createElement("tr",{className:"hidrati"},n.createElement("td",{className:"naslov"},"Špagete durum"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value5",value:m,onChange:function(e){h(e.target.value)}})),n.createElement("td",{className:"protein"},(.12*m).toFixed(1)),n.createElement("td",{className:"protein"},(.63*m).toFixed(1)),n.createElement("td",{className:"protein"},(.018*m).toFixed(1)),n.createElement("td",{className:"protein"},(3.37*m).toFixed(1))),n.createElement("tr",{className:"prot"},n.createElement("td",{className:"naslov"},"Sočivo"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value6",value:y,onChange:function(e){v(e.target.value)}})),n.createElement("td",{className:"protein"},(.25*y).toFixed(1)),n.createElement("td",{className:"protein"},(.6*y).toFixed(1)),n.createElement("td",{className:"protein"},(.01*y).toFixed(1)),n.createElement("td",{className:"protein"},(3.4*y).toFixed(1))),n.createElement("tr",{className:"prot"},n.createElement("td",{className:"naslov"},"Žuti grašak"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value7",value:x,onChange:function(e){A(e.target.value)}})),n.createElement("td",{className:"protein"},(.22*x).toFixed(1)),n.createElement("td",{className:"protein"},(.56*x).toFixed(1)),n.createElement("td",{className:"protein"},(.01*x).toFixed(1)),n.createElement("td",{className:"protein"},(3.1*x).toFixed(1))),n.createElement("tr",{className:"prot"},n.createElement("td",{className:"naslov"},"Pasulj"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value8",value:C,onChange:function(e){E(e.target.value)}})),n.createElement("td",{className:"protein"},(.21*C).toFixed(1)),n.createElement("td",{className:"protein"},(.45*C).toFixed(1)),n.createElement("td",{className:"protein"},(.016*C).toFixed(1)),n.createElement("td",{className:"protein"},(2.7*C).toFixed(1))),n.createElement("tr",{className:"prot"},n.createElement("td",{className:"naslov"},"Tuna konzerva"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value9",value:S,onChange:function(e){N(e.target.value)}})),n.createElement("td",{className:"protein"},(.23*S).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.209*S).toFixed(1)),n.createElement("td",{className:"protein"},(2.84*S).toFixed(1))),n.createElement("tr",{className:"prot"},n.createElement("td",{className:"naslov"},"Piletina"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value10",value:B,onChange:function(e){P(e.target.value)}})),n.createElement("td",{className:"protein"},(.208*B).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.068*B).toFixed(1)),n.createElement("td",{className:"protein"},(1.45*B).toFixed(1))),n.createElement("tr",{className:"prot"},n.createElement("td",{className:"naslov"},"Ćureća prsa"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value11",value:O,onChange:function(e){R(e.target.value)}})),n.createElement("td",{className:"protein"},(.19*O).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.01*O).toFixed(1)),n.createElement("td",{className:"protein"},(.95*O).toFixed(1))),n.createElement("tr",{className:"prot"},n.createElement("td",{className:"naslov"},"Govedina nemasna"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value12",value:L,onChange:function(e){j(e.target.value)}})),n.createElement("td",{className:"protein"},(.195*L).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.125*L).toFixed(1)),n.createElement("td",{className:"protein"},(1.19*L).toFixed(1))),n.createElement("tr",{className:"prot"},n.createElement("td",{className:"naslov"},"Junetina (but)"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value13",value:D,onChange:function(e){z(e.target.value)}})),n.createElement("td",{className:"protein"},(.195*D).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.125*D).toFixed(1)),n.createElement("td",{className:"protein"},(1.91*D).toFixed(1))),n.createElement("tr",{className:"prot"},n.createElement("td",{className:"naslov"},"Svinjetina nemasna"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value14",value:V,onChange:function(e){$(e.target.value)}})),n.createElement("td",{className:"protein"},(.2*V).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.09*V).toFixed(1)),n.createElement("td",{className:"protein"},(1.61*V).toFixed(1))),n.createElement("tr",{className:"prot"},n.createElement("td",{className:"naslov"},"Jaje celo"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value15",value:W,onChange:function(e){H(e.target.value)}})),n.createElement("td",{className:"protein"},(6*W).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(5*W).toFixed(1)),n.createElement("td",{className:"protein"},(55*W*1.62).toFixed(1))),n.createElement("tr",{className:"mleko"},n.createElement("td",{className:"naslov"},"Maslac"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value16",value:q,onChange:function(e){K(e.target.value)}})),n.createElement("td",{className:"protein"},(.01*q).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.83*q).toFixed(1)),n.createElement("td",{className:"protein"},(7.5*q).toFixed(1))),n.createElement("tr",{className:"mleko"},n.createElement("td",{className:"naslov"},"Mleko 2.8%"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value17",value:Q,onChange:function(e){X(e.target.value)}})),n.createElement("td",{className:"protein"},(.03*Q).toFixed(1)),n.createElement("td",{className:"protein"},(.045*Q).toFixed(1)),n.createElement("td",{className:"protein"},(.28*Q).toFixed(1)),n.createElement("td",{className:"protein"},(.56*Q).toFixed(1))),n.createElement("tr",{className:"mleko"},n.createElement("td",{className:"naslov"},"Mladi sir"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value18",value:J,onChange:function(e){ee(e.target.value)}})),n.createElement("td",{className:"protein"},(.125*J).toFixed(1)),n.createElement("td",{className:"protein"},(.04*J).toFixed(1)),n.createElement("td",{className:"protein"},(.055*J).toFixed(1)),n.createElement("td",{className:"protein"},(1.15*J).toFixed(1))),n.createElement("tr",{className:"mleko"},n.createElement("td",{className:"naslov"},"Jogurt 2.8%"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value19",value:ne,onChange:function(e){re(e.target.value)}})),n.createElement("td",{className:"protein"},(.032*ne).toFixed(1)),n.createElement("td",{className:"protein"},(.035*ne).toFixed(1)),n.createElement("td",{className:"protein"},(.028*ne).toFixed(1)),n.createElement("td",{className:"protein"},(.52*ne).toFixed(1))),n.createElement("tr",{className:"mleko"},n.createElement("td",{className:"naslov"},"Parmezan"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value20",value:ae,onChange:function(e){ie(e.target.value)}})),n.createElement("td",{className:"protein"},(.43*ae).toFixed(1)),n.createElement("td",{className:"protein"},(.03*ae).toFixed(1)),n.createElement("td",{className:"protein"},(.35*ae).toFixed(1)),n.createElement("td",{className:"protein"},(5*ae).toFixed(1))),n.createElement("tr",{className:"oil"},n.createElement("td",{className:"naslov"},"Maslinovo ulje"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value21",value:ue,onChange:function(e){ce(e.target.value)}})),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(1*ue).toFixed(1)),n.createElement("td",{className:"protein"},(8.84*ue).toFixed(1))),n.createElement("tr",{className:"oil"},n.createElement("td",{className:"naslov"},"Masline zelene"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value22",value:pe,onChange:function(e){fe(e.target.value)}})),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.14*pe).toFixed(1)),n.createElement("td",{className:"protein"},(1.46*pe).toFixed(1))),n.createElement("tr",{className:"oil"},n.createElement("td",{className:"naslov"},"Kokosovo ulje"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value23",value:he,onChange:function(e){ge(e.target.value)}})),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(1*he).toFixed(1)),n.createElement("td",{className:"protein"},(8.9*he).toFixed(1))),n.createElement("tr",{className:"orah"},n.createElement("td",{className:"naslov"},"Kokos"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value24",value:ve,onChange:function(e){be(e.target.value)}})),n.createElement("td",{className:"protein"},(.03*ve).toFixed(1)),n.createElement("td",{className:"protein"},(.15*ve).toFixed(1)),n.createElement("td",{className:"protein"},(.335*ve).toFixed(1)),n.createElement("td",{className:"protein"},(3.54*ve).toFixed(1))),n.createElement("tr",{className:"orah"},n.createElement("td",{className:"naslov"},"Badem"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value25",value:Ae,onChange:function(e){we(e.target.value)}})),n.createElement("td",{className:"protein"},(.22*Ae).toFixed(1)),n.createElement("td",{className:"protein"},(.2*Ae).toFixed(1)),n.createElement("td",{className:"protein"},(.54*Ae).toFixed(1)),n.createElement("td",{className:"protein"},(6.34*Ae).toFixed(1))),n.createElement("tr",{className:"orah"},n.createElement("td",{className:"naslov"},"Orah"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value26",value:Ee,onChange:function(e){ke(e.target.value)}})),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.622*Ee).toFixed(1)),n.createElement("td",{className:"protein"},(6.77*Ee).toFixed(1))),n.createElement("tr",{className:"orah"},n.createElement("td",{className:"naslov"},"Lešnik"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value27",value:Ne,onChange:function(e){_e(e.target.value)}})),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.605*Ne).toFixed(1)),n.createElement("td",{className:"protein"},(6.57*Ne).toFixed(1))),n.createElement("tr",{className:"orah"},n.createElement("td",{className:"naslov"},"Suncokret seme"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value28",value:Pe,onChange:function(e){Te(e.target.value)}})),n.createElement("td",{className:"protein"},(.2*Pe).toFixed(1)),n.createElement("td",{className:"protein"},(.2*Pe).toFixed(1)),n.createElement("td",{className:"protein"},(.515*Pe).toFixed(1)),n.createElement("td",{className:"protein"},(5.84*Pe).toFixed(1))),n.createElement("tr",{className:"orah"},n.createElement("td",{className:"naslov"},"Lan seme"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value29",value:Re,onChange:function(e){Fe(e.target.value)}})),n.createElement("td",{className:"protein"},(.18*Re).toFixed(1)),n.createElement("td",{className:"protein"},(.28*Re).toFixed(1)),n.createElement("td",{className:"protein"},(.42*Re).toFixed(1)),n.createElement("td",{className:"protein"},(5.34*Re).toFixed(1))),n.createElement("tr",{className:"voce"},n.createElement("td",{className:"naslov"},"Banana"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value30",value:De,onChange:function(e){ze(e.target.value)}})),n.createElement("td",{className:"protein"},(.01*De).toFixed(1)),n.createElement("td",{className:"protein"},(.23*De).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.89*De).toFixed(1))),n.createElement("tr",{className:"voce"},n.createElement("td",{className:"naslov"},"Jabuka"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value31",value:Ve,onChange:function(e){$e(e.target.value)}})),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.13*Ve).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.5*Ve).toFixed(1))),n.createElement("tr",{className:"voce"},n.createElement("td",{className:"naslov"},"Narandža"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value32",value:We,onChange:function(e){He(e.target.value)}})),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.117*We).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.47*We).toFixed(1))),n.createElement("tr",{className:"voce"},n.createElement("td",{className:"naslov"},"Dinja"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value33",value:qe,onChange:function(e){Ke(e.target.value)}})),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.816*qe).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.34*qe).toFixed(1))),n.createElement("tr",{className:"voce"},n.createElement("td",{className:"naslov"},"Grejpfrut"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value34",value:Qe,onChange:function(e){Xe(e.target.value)}})),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.07*Qe).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.28*Qe).toFixed(1))),n.createElement("tr",{className:"voce"},n.createElement("td",{className:"naslov"},"Ananas"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value35",value:Je,onChange:function(e){et(e.target.value)}})),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.126*Je).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.48*Je).toFixed(1))),n.createElement("tr",{className:"voce"},n.createElement("td",{className:"naslov"},"Suvo groždje"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value36",value:nt,onChange:function(e){rt(e.target.value)}})),n.createElement("td",{className:"protein"},(.016*nt).toFixed(1)),n.createElement("td",{className:"protein"},(.66*nt).toFixed(1)),n.createElement("td",{className:"protein"},(.01*nt).toFixed(1)),n.createElement("td",{className:"protein"},(2.7*nt).toFixed(1))),n.createElement("tr",{className:"kupus"},n.createElement("td",{className:"naslov"},"Kupus"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value37",value:at,onChange:function(e){it(e.target.value)}})),n.createElement("td",{className:"protein"},(.02*at).toFixed(1)),n.createElement("td",{className:"protein"},(.03*at).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.22*at).toFixed(1))),n.createElement("tr",{className:"kupus"},n.createElement("td",{className:"naslov"},"Šargarepa"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value38",value:st,onChange:function(e){ut(e.target.value)}})),n.createElement("td",{className:"protein"},(.01*st).toFixed(1)),n.createElement("td",{className:"protein"},(.09*st).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.4*st).toFixed(1))),n.createElement("tr",{className:"kupus"},n.createElement("td",{className:"naslov"},"Cvekla"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value39",value:dt,onChange:function(e){pt(e.target.value)}})),n.createElement("td",{className:"protein"},(.016*dt).toFixed(1)),n.createElement("td",{className:"protein"},(.1*dt).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.43*dt).toFixed(1))),n.createElement("tr",{className:"kupus"},n.createElement("td",{className:"naslov"},"Brokoli"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value40",value:mt,onChange:function(e){ht(e.target.value)}})),n.createElement("td",{className:"protein"},(.03*mt).toFixed(1)),n.createElement("td",{className:"protein"},(.07*mt).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.34*mt).toFixed(1))),n.createElement("tr",{className:"kupus"},n.createElement("td",{className:"naslov"},"Kelj"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value41",value:yt,onChange:function(e){vt(e.target.value)}})),n.createElement("td",{className:"protein"},(.02*yt).toFixed(1)),n.createElement("td",{className:"protein"},(.1*yt).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.5*yt).toFixed(1))),n.createElement("tr",{className:"kupus"},n.createElement("td",{className:"naslov"},"Španat"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value42",value:xt,onChange:function(e){At(e.target.value)}})),n.createElement("td",{className:"protein"},(.029*xt).toFixed(1)),n.createElement("td",{className:"protein"},(.036*xt).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.23*xt).toFixed(1))),n.createElement("tr",{className:"kupus"},n.createElement("td",{className:"naslov"},"Tikvica"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value43",value:Ct,onChange:function(e){Et(e.target.value)}})),n.createElement("td",{className:"protein"},(.01*Ct).toFixed(1)),n.createElement("td",{className:"protein"},(.03*Ct).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.16*Ct).toFixed(1))),n.createElement("tr",{className:"kupus"},n.createElement("td",{className:"naslov"},"Praziluk"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value44",value:St,onChange:function(e){Nt(e.target.value)}})),n.createElement("td",{className:"protein"},(.01*St).toFixed(1)),n.createElement("td",{className:"protein"},(.14*St).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.61*St).toFixed(1))),n.createElement("tr",{className:"kupus"},n.createElement("td",{className:"naslov"},"Patlidžan"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value45",value:Bt,onChange:function(e){Pt(e.target.value)}})),n.createElement("td",{className:"protein"},(.011*Bt).toFixed(1)),n.createElement("td",{className:"protein"},(.029*Bt).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.16*Bt).toFixed(1))),n.createElement("tr",{className:"kupus"},n.createElement("td",{className:"naslov"},"Paradajz"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value46",value:Ot,onChange:function(e){Rt(e.target.value)}})),n.createElement("td",{className:"protein"},(.0088*Ot).toFixed(1)),n.createElement("td",{className:"protein"},(.039*Ot).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.18*Ot).toFixed(1))),n.createElement("tr",{className:"kupus"},n.createElement("td",{className:"naslov"},"Paradajz sok"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value47",value:Lt,onChange:function(e){jt(e.target.value)}})),n.createElement("td",{className:"protein"},(.008*Lt).toFixed(1)),n.createElement("td",{className:"protein"},(.059*Lt).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.27*Lt).toFixed(1))),n.createElement("tr",{className:"alcohol"},n.createElement("td",{className:"naslov"},"Vino crno"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value48",value:Dt,onChange:function(e){zt(e.target.value)}})),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.026*Dt).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.85*Dt).toFixed(1))),n.createElement("tr",{className:"alcohol"},n.createElement("td",{className:"naslov"},"Pivo svetlo"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value49",value:Vt,onChange:function(e){$t(e.target.value)}})),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.035*Vt).toFixed(1)),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(.43*Vt).toFixed(1))),n.createElement("tr",{className:"alcohol"},n.createElement("td",{className:"naslov"},"Rakija"),n.createElement("td",{className:"protein"},n.createElement("input",{type:"number",name:"value50",value:Wt,onChange:function(e){Ht(e.target.value)}})),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"}),n.createElement("td",{className:"protein"},(3.5*Wt).toFixed(1)))),n.createElement("tfoot",null,n.createElement("tr",null,n.createElement("td",{className:"naslov"},"Ukupno"),n.createElement("td",null),n.createElement("td",{className:"protein"},(Number(.076*t)+Number(.139*a)+Number(.09*s)+Number(.07*d)+Number(.012*m)+Number(.25*y)+Number(.22*x)+Number(.21*C)+Number(.023*S)+Number(.208*B)+Number(.19*O)+Number(.195*L)+Number(.195*D)+Number(.2*V)+Number(6*W)+Number(.01*q)+Number(.03*Q)+Number(.125*J)+Number(.032*ne)+Number(.43*ae)+Number(.03*ve)+Number(.22*Ae)+Number(.2*Pe)+Number(.18*Re)+Number(.01*De)+Number(.016*nt)+Number(.02*at)+Number(.01*st)+Number(.016*dt)+Number(.03*mt)+Number(.02*yt)+Number(.029*xt)+Number(.01*Ct)+Number(.01*St)+Number(.011*Bt)+Number(.0088*Ot)+Number(.008*Lt)).toFixed(1)),n.createElement("td",{className:"protein"},(Number(.78*t)+Number(.644*a)+Number(.2*s)+Number(.77*d)+Number(.063*m)+Number(.6*y)+Number(.56*x)+Number(.45*C)+Number(.045*Q)+Number(.04*J)+.035*ne+Number(.03*ae)+Number(.15*ve)+Number(.2*Ae)+Number(.2*Pe)+Number(.28*Re)+Number(.23*De)+Number(.13*Ve)+Number(.117*We)+Number(.816*qe)+Number(.07*Qe)+Number(.126*Je)+Number(.66*nt)+Number(.03*at)+Number(.09*st)+Number(.1*dt)+Number(.07*mt)+Number(.1*yt)+Number(.036*xt)+Number(.03*Ct)+Number(.14*St)+Number(.029*Bt)+Number(.039*Ot)+Number(.059*Lt)+Number(.026*Dt)+Number(.035*Vt)).toFixed(1)),n.createElement("td",{className:"protein"},(Number(.015*d)+Number(.018*m)+Number(.01*y)+Number(.01*x)+Number(.016*C)+Number(.209*S)+Number(.068*B)+Number(.01*O)+Number(.125*L)+Number(.125*D)+Number(.09*V)+Number(5*W)+Number(.83*q)+Number(.28*Q)+Number(.055*J)+Number(.028*ne)+Number(.35*ae)+Number(1*ue)+Number(.14*pe)+Number(1*he)+Number(.335*ve)+Number(.54*Ae)+Number(.622*Ee)+Number(.605*Ne)+Number(.515*Pe)+Number(.42*Re)+Number(.01*nt)).toFixed(1)),n.createElement("td",{className:"protein"},(Number(3.51*t)+Number(3.74*a)+Number(.85*s)+Number(3.5*d)+Number(3.37*m)+Number(3.4*y)+Number(3.1*x)+Number(2.7*C)+Number(2.84*S)+Number(1.45*B)+Number(.95*O)+Number(1.19*L)+Number(1.91*D)+Number(1.61*V)+Number(55*W*1.62)+Number(7.5*q)+Number(.56*Q)+Number(1.15*J)+Number(.52*ne)+Number(5*ae)+Number(8.84*ue)+Number(1.46*pe)+Number(8.9*he)+Number(3.54*ve)+Number(6.34*Ae)+Number(6.77*Ee)+Number(6.57*Ne)+Number(5.84*Pe)+Number(5.34*Re)+Number(.89*De)+Number(.5*Ve)+Number(.47*We)+Number(.34*qe)+Number(.28*Qe)+Number(.48*Je)+Number(2.7*nt)+Number(.22*at)+Number(.4*st)+Number(.43*dt)+Number(.34*mt)+Number(.5*yt)+Number(.23*xt)+Number(.16*Ct)+Number(.61*St)+Number(.16*Bt)+Number(.18*Ot)+Number(.27*Lt)+Number(.85*Dt)+Number(.43*Vt)+Number(3.5*Wt)).toFixed(1))))),n.createElement("div",null),n.createElement("div",null,n.createElement(Le,null)))};var ze=__webpack_require__(154);function Ie(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],s=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||Ve(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ve(e,t){if(e){if("string"==typeof e)return $e(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?$e(e,t):void 0}}function $e(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Ue=function(){var e=Ie((0,n.useState)(),2),t=e[0],r=e[1],o=Ie((0,n.useState)(),2),a=o[0],i=o[1],l=Ie((0,n.useState)(),2),s=l[0],u=l[1],c=Ie((0,n.useState)(),2),d=c[0],p=c[1],f=Ie((0,n.useState)(),2),m=f[0],h=f[1],g=Ie((0,n.useState)(),2),y=g[0],v=g[1],b=Ie((0,n.useState)(),2),x=b[0],A=b[1],w=Ie((0,n.useState)(),2),C=w[0],E=w[1],k=Ie((0,n.useState)(),2),S=k[0],N=k[1],_=Ie((0,n.useState)(),2),B=_[0],P=_[1],T=n.useRef(),O=Ie((0,n.useState)([]),2),R=O[0],F=O[1],L=function(e){return"".concat(e.position.x," ").concat(e.position.y," ").concat(e.position.z)},j=function(e){return"".concat(e.normal.x," ").concat(e.normal.y," ").concat(e.normal.z)};return n.createElement(n.Fragment,null,n.createElement("table",{className:"odnosi"},n.createElement("thead",null,n.createElement("tr",null,n.createElement("th",{colSpan:7},"Odnosi"))),n.createElement("tbody",null,n.createElement("tr",null,n.createElement("td",null,n.createElement("input",{type:"number",name:"value1",value:t,onChange:function(e){r(e.target.value)}})),n.createElement("td",null,"prema"),n.createElement("td",null,n.createElement("input",{type:"number",name:"value2",value:a,onChange:function(e){i(e.target.value)}})),n.createElement("td",null,"isto je kao"),n.createElement("td",null,n.createElement("input",{type:"number",name:"value3",value:s,onChange:function(e){u(e.target.value)}})),n.createElement("td",null,"prema"),n.createElement("td",{className:"relacija"},(s*a/t).toFixed(1))),n.createElement("tr",null,n.createElement("td",null,n.createElement("input",{type:"number",name:"value4",value:d,onChange:function(e){p(e.target.value)}})),n.createElement("td",null,"prema"),n.createElement("td",null,n.createElement("input",{type:"number",name:"value5",value:m,onChange:function(e){h(e.target.value)}})),n.createElement("td",null,"isto je kao"),n.createElement("td",{className:"relacija"},(d*y/m).toFixed(1)),n.createElement("td",null,"prema"),n.createElement("td",null,n.createElement("input",{type:"number",name:"value6",value:y,onChange:function(e){v(e.target.value)}}))))),n.createElement("table",{className:"odnosi"},n.createElement("thead",null,n.createElement("tr",null,n.createElement("th",{colSpan:5},"Procenti"))),n.createElement("tbody",null,n.createElement("tr",null,n.createElement("td",null,n.createElement("input",{type:"number",name:"value7",value:x,onChange:function(e){A(e.target.value)}})),n.createElement("td",null,"Od"),n.createElement("td",null,n.createElement("input",{type:"number",name:"value8",value:C,onChange:function(e){E(e.target.value)}})),n.createElement("td",null,"Iznosi"),n.createElement("td",{className:"relacija"},(x/C*100).toFixed(1)," %")),n.createElement("tr",null,n.createElement("td",{className:"proc"},n.createElement("input",{type:"number",name:"value9",value:S,onChange:function(e){N(e.target.value)}}),"%"),n.createElement("td",null,"Od"),n.createElement("td",null,n.createElement("input",{type:"number",name:"value10",value:B,onChange:function(e){P(e.target.value)}})),n.createElement("td",null,"Iznosi"),n.createElement("td",{className:"relacija"},(S*B/100).toFixed(1))))),n.createElement("div",{className:"calc"},n.createElement(ze.Z,null)),n.createElement("br",null),n.createElement("model-viewer",{src:"https://storage.googleapis.com/search-ar-edu/periodic-table/element_006_carbon/element_006_carbon.glb","shadow-intensity":"1","camera-controls":!0,ar:!0,"ar-modes":"webxr",onClick:function(e){var t=e.clientX,n=e.clientY;if(T.current){var r=T.current.positionAndNormalFromPoint(t,n);r&&F((function(e){return[].concat(function(e){if(Array.isArray(e))return $e(e)}(t=e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||Ve(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[r]);var t}))}},ref:function(e){T.current=e},className:"moduleView"},R.map((function(e,t){return n.createElement("button",{key:"hotspot-".concat(t),className:"view-button",slot:"hotspot-".concat(t),"data-position":L(e),"data-normal":j(e)})}))))},We=(0,n.createContext)({transformPagePoint:e=>e,isStatic:!1,reducedMotion:"never"}),He=(0,n.createContext)({}),Ye=(0,n.createContext)(null),qe="undefined"!=typeof document,Ke=qe?n.useLayoutEffect:n.useEffect,Ge=(0,n.createContext)({strict:!1});function Qe(e){return"object"==typeof e&&Object.prototype.hasOwnProperty.call(e,"current")}function Xe(e){return"string"==typeof e||Array.isArray(e)}function Ze(e){return"object"==typeof e&&"function"==typeof e.start}const Je=["animate","whileInView","whileFocus","whileHover","whileTap","whileDrag","exit"],et=["initial",...Je];function tt(e){return Ze(e.animate)||et.some((t=>Xe(e[t])))}function nt(e){return Boolean(tt(e)||e.variants)}function rt(e){return Array.isArray(e)?e.join(" "):e}const ot={animation:["animate","variants","whileHover","whileTap","exit","whileInView","whileFocus","whileDrag"],exit:["exit"],drag:["drag","dragControls"],focus:["whileFocus"],hover:["whileHover","onHoverStart","onHoverEnd"],tap:["whileTap","onTap","onTapStart","onTapCancel"],pan:["onPan","onPanStart","onPanSessionStart","onPanEnd"],inView:["whileInView","onViewportEnter","onViewportLeave"],layout:["layout","layoutId"]},at={};for(const e in ot)at[e]={isEnabled:t=>ot[e].some((e=>!!t[e]))};const it=(0,n.createContext)({}),lt=(0,n.createContext)({}),st=Symbol.for("motionComponentSymbol");function ut({preloadedFeatures:e,createVisualElement:t,useRender:r,useVisualState:o,Component:a}){e&&function(e){for(const t in e)at[t]={...at[t],...e[t]}}(e);const i=(0,n.forwardRef)((function(i,l){let s;const u={...(0,n.useContext)(We),...i,layoutId:ct(i)},{isStatic:c}=u,d=function(e){const{initial:t,animate:r}=function(e,t){if(tt(e)){const{initial:t,animate:n}=e;return{initial:!1===t||Xe(t)?t:void 0,animate:Xe(n)?n:void 0}}return!1!==e.inherit?t:{}}(e,(0,n.useContext)(He));return(0,n.useMemo)((()=>({initial:t,animate:r})),[rt(t),rt(r)])}(i),p=o(i,c);if(!c&&qe){d.visualElement=function(e,t,r,o){const{visualElement:a}=(0,n.useContext)(He),i=(0,n.useContext)(Ge),l=(0,n.useContext)(Ye),s=(0,n.useContext)(We).reducedMotion,u=(0,n.useRef)();o=o||i.renderer,!u.current&&o&&(u.current=o(e,{visualState:t,parent:a,props:r,presenceContext:l,blockInitialAnimation:!!l&&!1===l.initial,reducedMotionConfig:s}));const c=u.current;(0,n.useInsertionEffect)((()=>{c&&c.update(r,l)}));const d=(0,n.useRef)(Boolean(window.HandoffAppearAnimations));return Ke((()=>{c&&(c.render(),d.current&&c.animationState&&c.animationState.animateChanges())})),(0,n.useEffect)((()=>{c&&(c.updateFeatures(),!d.current&&c.animationState&&c.animationState.animateChanges(),window.HandoffAppearAnimations=void 0,d.current=!1)})),c}(a,p,u,t);const r=(0,n.useContext)(lt),o=(0,n.useContext)(Ge).strict;d.visualElement&&(s=d.visualElement.loadFeatures(u,o,e,r))}return n.createElement(He.Provider,{value:d},s&&d.visualElement?n.createElement(s,{visualElement:d.visualElement,...u}):null,r(a,i,function(e,t,r){return(0,n.useCallback)((n=>{n&&e.mount&&e.mount(n),t&&(n?t.mount(n):t.unmount()),r&&("function"==typeof r?r(n):Qe(r)&&(r.current=n))}),[t])}(p,d.visualElement,l),p,c,d.visualElement))}));return i[st]=a,i}function ct({layoutId:e}){const t=(0,n.useContext)(it).id;return t&&void 0!==e?t+"-"+e:e}function dt(e){function t(t,n={}){return ut(e(t,n))}if("undefined"==typeof Proxy)return t;const n=new Map;return new Proxy(t,{get:(e,r)=>(n.has(r)||n.set(r,t(r)),n.get(r))})}const pt=["animate","circle","defs","desc","ellipse","g","image","line","filter","marker","mask","metadata","path","pattern","polygon","polyline","rect","stop","switch","symbol","svg","text","tspan","use","view"];function ft(e){return"string"==typeof e&&!e.includes("-")&&!!(pt.indexOf(e)>-1||/[A-Z]/.test(e))}const mt={},ht=["transformPerspective","x","y","z","translateX","translateY","translateZ","scale","scaleX","scaleY","rotate","rotateX","rotateY","rotateZ","skew","skewX","skewY"],gt=new Set(ht);function yt(e,{layout:t,layoutId:n}){return gt.has(e)||e.startsWith("origin")||(t||void 0!==n)&&(!!mt[e]||"opacity"===e)}const vt=e=>Boolean(e&&e.getVelocity),bt={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"},xt=ht.length,At=e=>t=>"string"==typeof t&&t.startsWith(e),wt=At("--"),Ct=At("var(--"),Et=(e,t)=>t&&"number"==typeof e?t.transform(e):e,kt=(e,t,n)=>Math.min(Math.max(n,e),t),St={test:e=>"number"==typeof e,parse:parseFloat,transform:e=>e},Nt={...St,transform:e=>kt(0,1,e)},_t={...St,default:1},Bt=e=>Math.round(1e5*e)/1e5,Pt=/(-)?([\d]*\.?[\d])+/g,Tt=/(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi,Ot=/^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;function Rt(e){return"string"==typeof e}const Ft=e=>({test:t=>Rt(t)&&t.endsWith(e)&&1===t.split(" ").length,parse:parseFloat,transform:t=>`${t}${e}`}),Lt=Ft("deg"),jt=Ft("%"),Mt=Ft("px"),Dt=Ft("vh"),zt=Ft("vw"),It={...jt,parse:e=>jt.parse(e)/100,transform:e=>jt.transform(100*e)},Vt={...St,transform:Math.round},$t={borderWidth:Mt,borderTopWidth:Mt,borderRightWidth:Mt,borderBottomWidth:Mt,borderLeftWidth:Mt,borderRadius:Mt,radius:Mt,borderTopLeftRadius:Mt,borderTopRightRadius:Mt,borderBottomRightRadius:Mt,borderBottomLeftRadius:Mt,width:Mt,maxWidth:Mt,height:Mt,maxHeight:Mt,size:Mt,top:Mt,right:Mt,bottom:Mt,left:Mt,padding:Mt,paddingTop:Mt,paddingRight:Mt,paddingBottom:Mt,paddingLeft:Mt,margin:Mt,marginTop:Mt,marginRight:Mt,marginBottom:Mt,marginLeft:Mt,rotate:Lt,rotateX:Lt,rotateY:Lt,rotateZ:Lt,scale:_t,scaleX:_t,scaleY:_t,scaleZ:_t,skew:Lt,skewX:Lt,skewY:Lt,distance:Mt,translateX:Mt,translateY:Mt,translateZ:Mt,x:Mt,y:Mt,z:Mt,perspective:Mt,transformPerspective:Mt,opacity:Nt,originX:It,originY:It,originZ:Mt,zIndex:Vt,fillOpacity:Nt,strokeOpacity:Nt,numOctaves:Vt};function Ut(e,t,n,r){const{style:o,vars:a,transform:i,transformOrigin:l}=e;let s=!1,u=!1,c=!0;for(const e in t){const n=t[e];if(wt(e)){a[e]=n;continue}const r=$t[e],d=Et(n,r);if(gt.has(e)){if(s=!0,i[e]=d,!c)continue;n!==(r.default||0)&&(c=!1)}else e.startsWith("origin")?(u=!0,l[e]=d):o[e]=d}if(t.transform||(s||r?o.transform=function(e,{enableHardwareAcceleration:t=!0,allowTransformNone:n=!0},r,o){let a="";for(let t=0;t<xt;t++){const n=ht[t];void 0!==e[n]&&(a+=`${bt[n]||n}(${e[n]}) `)}return t&&!e.z&&(a+="translateZ(0)"),a=a.trim(),o?a=o(e,r?"":a):n&&r&&(a="none"),a}(e.transform,n,c,r):o.transform&&(o.transform="none")),u){const{originX:e="50%",originY:t="50%",originZ:n=0}=l;o.transformOrigin=`${e} ${t} ${n}`}}const Wt=()=>({style:{},transform:{},transformOrigin:{},vars:{}});function Ht(e,t,n){for(const r in t)vt(t[r])||yt(r,n)||(e[r]=t[r])}function Yt(e,t,r){const o={},a=function(e,t,r){const o={};return Ht(o,e.style||{},e),Object.assign(o,function({transformTemplate:e},t,r){return(0,n.useMemo)((()=>{const n=Wt();return Ut(n,t,{enableHardwareAcceleration:!r},e),Object.assign({},n.vars,n.style)}),[t])}(e,t,r)),e.transformValues?e.transformValues(o):o}(e,t,r);return e.drag&&!1!==e.dragListener&&(o.draggable=!1,a.userSelect=a.WebkitUserSelect=a.WebkitTouchCallout="none",a.touchAction=!0===e.drag?"none":"pan-"+("x"===e.drag?"y":"x")),void 0===e.tabIndex&&(e.onTap||e.onTapStart||e.whileTap)&&(o.tabIndex=0),o.style=a,o}const qt=new Set(["animate","exit","variants","initial","style","values","variants","transition","transformTemplate","transformValues","custom","inherit","onLayoutAnimationStart","onLayoutAnimationComplete","onLayoutMeasure","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","_dragX","_dragY","onHoverStart","onHoverEnd","onViewportEnter","onViewportLeave","ignoreStrict","viewport"]);function Kt(e){return e.startsWith("while")||e.startsWith("drag")&&"draggable"!==e||e.startsWith("layout")||e.startsWith("onTap")||e.startsWith("onPan")||qt.has(e)}let Gt=e=>!Kt(e);try{(Qt=require("@emotion/is-prop-valid").default)&&(Gt=e=>e.startsWith("on")?!Kt(e):Qt(e))}catch(e){}var Qt;function Xt(e,t,n){return"string"==typeof e?e:Mt.transform(t+n*e)}const Zt={offset:"stroke-dashoffset",array:"stroke-dasharray"},Jt={offset:"strokeDashoffset",array:"strokeDasharray"};function en(e,{attrX:t,attrY:n,attrScale:r,originX:o,originY:a,pathLength:i,pathSpacing:l=1,pathOffset:s=0,...u},c,d,p){if(Ut(e,u,c,p),d)return void(e.style.viewBox&&(e.attrs.viewBox=e.style.viewBox));e.attrs=e.style,e.style={};const{attrs:f,style:m,dimensions:h}=e;f.transform&&(h&&(m.transform=f.transform),delete f.transform),h&&(void 0!==o||void 0!==a||m.transform)&&(m.transformOrigin=function(e,t,n){return`${Xt(t,e.x,e.width)} ${Xt(n,e.y,e.height)}`}(h,void 0!==o?o:.5,void 0!==a?a:.5)),void 0!==t&&(f.x=t),void 0!==n&&(f.y=n),void 0!==r&&(f.scale=r),void 0!==i&&function(e,t,n=1,r=0,o=!0){e.pathLength=1;const a=o?Zt:Jt;e[a.offset]=Mt.transform(-r);const i=Mt.transform(t),l=Mt.transform(n);e[a.array]=`${i} ${l}`}(f,i,l,s,!1)}const tn=()=>({...Wt(),attrs:{}}),nn=e=>"string"==typeof e&&"svg"===e.toLowerCase();function rn(e,t,r,o){const a=(0,n.useMemo)((()=>{const n=tn();return en(n,t,{enableHardwareAcceleration:!1},nn(o),e.transformTemplate),{...n.attrs,style:{...n.style}}}),[t]);if(e.style){const t={};Ht(t,e.style,e),a.style={...t,...a.style}}return a}function on(e=!1){return(t,r,o,{latestValues:a},i)=>{const l=(ft(t)?rn:Yt)(r,a,i,t),s=function(e,t,n){const r={};for(const o in e)"values"===o&&"object"==typeof e.values||(Gt(o)||!0===n&&Kt(o)||!t&&!Kt(o)||e.draggable&&o.startsWith("onDrag"))&&(r[o]=e[o]);return r}(r,"string"==typeof t,e),u={...s,...l,ref:o},{children:c}=r,d=(0,n.useMemo)((()=>vt(c)?c.get():c),[c]);return(0,n.createElement)(t,{...u,children:d})}}const an=e=>e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase();function ln(e,{style:t,vars:n},r,o){Object.assign(e.style,t,o&&o.getProjectionStyles(r));for(const t in n)e.style.setProperty(t,n[t])}const sn=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox","gradientTransform","pathLength","startOffset","textLength","lengthAdjust"]);function un(e,t,n,r){ln(e,t,void 0,r);for(const n in t.attrs)e.setAttribute(sn.has(n)?n:an(n),t.attrs[n])}function cn(e,t){const{style:n}=e,r={};for(const o in n)(vt(n[o])||t.style&&vt(t.style[o])||yt(o,e))&&(r[o]=n[o]);return r}function dn(e,t){const n=cn(e,t);for(const r in e)(vt(e[r])||vt(t[r]))&&(n[-1!==ht.indexOf(r)?"attr"+r.charAt(0).toUpperCase()+r.substring(1):r]=e[r]);return n}function pn(e,t,n,r={},o={}){return"function"==typeof t&&(t=t(void 0!==n?n:e.custom,r,o)),"string"==typeof t&&(t=e.variants&&e.variants[t]),"function"==typeof t&&(t=t(void 0!==n?n:e.custom,r,o)),t}const fn=e=>Array.isArray(e),mn=e=>Boolean(e&&"object"==typeof e&&e.mix&&e.toValue),hn=e=>fn(e)?e[e.length-1]||0:e;function gn(e){const t=vt(e)?e.get():e;return mn(t)?t.toValue():t}const yn=e=>(t,r)=>{const o=(0,n.useContext)(He),a=(0,n.useContext)(Ye),i=()=>function({scrapeMotionValuesFromProps:e,createRenderState:t,onMount:n},r,o,a){const i={latestValues:vn(r,o,a,e),renderState:t()};return n&&(i.mount=e=>n(r,e,i)),i}(e,t,o,a);return r?i():function(e){const t=(0,n.useRef)(null);return null===t.current&&(t.current=e()),t.current}(i)};function vn(e,t,n,r){const o={},a=r(e,{});for(const e in a)o[e]=gn(a[e]);let{initial:i,animate:l}=e;const s=tt(e),u=nt(e);t&&u&&!s&&!1!==e.inherit&&(void 0===i&&(i=t.initial),void 0===l&&(l=t.animate));let c=!!n&&!1===n.initial;c=c||!1===i;const d=c?l:i;return d&&"boolean"!=typeof d&&!Ze(d)&&(Array.isArray(d)?d:[d]).forEach((t=>{const n=pn(e,t);if(!n)return;const{transitionEnd:r,transition:a,...i}=n;for(const e in i){let t=i[e];Array.isArray(t)&&(t=t[c?t.length-1:0]),null!==t&&(o[e]=t)}for(const e in r)o[e]=r[e]})),o}const bn=e=>e;class xn{constructor(){this.order=[],this.scheduled=new Set}add(e){if(!this.scheduled.has(e))return this.scheduled.add(e),this.order.push(e),!0}remove(e){const t=this.order.indexOf(e);-1!==t&&(this.order.splice(t,1),this.scheduled.delete(e))}clear(){this.order.length=0,this.scheduled.clear()}}const An=["prepare","read","update","preRender","render","postRender"],{schedule:wn,cancel:Cn,state:En,steps:kn}=function(e,t){let n=!1,r=!0;const o={delta:0,timestamp:0,isProcessing:!1},a=An.reduce(((e,t)=>(e[t]=function(e){let t=new xn,n=new xn,r=0,o=!1,a=!1;const i=new WeakSet,l={schedule:(e,a=!1,l=!1)=>{const s=l&&o,u=s?t:n;return a&&i.add(e),u.add(e)&&s&&o&&(r=t.order.length),e},cancel:e=>{n.remove(e),i.delete(e)},process:s=>{if(o)a=!0;else{if(o=!0,[t,n]=[n,t],n.clear(),r=t.order.length,r)for(let n=0;n<r;n++){const r=t.order[n];r(s),i.has(r)&&(l.schedule(r),e())}o=!1,a&&(a=!1,l.process(s))}}};return l}((()=>n=!0)),e)),{}),i=e=>a[e].process(o),l=()=>{const t=performance.now();n=!1,o.delta=r?1e3/60:Math.max(Math.min(t-o.timestamp,40),1),o.timestamp=t,o.isProcessing=!0,An.forEach(i),o.isProcessing=!1,n&&(r=!1,e(l))};return{schedule:An.reduce(((t,i)=>{const s=a[i];return t[i]=(t,a=!1,i=!1)=>(n||(n=!0,r=!0,o.isProcessing||e(l)),s.schedule(t,a,i)),t}),{}),cancel:e=>An.forEach((t=>a[t].cancel(e))),state:o,steps:a}}("undefined"!=typeof requestAnimationFrame?requestAnimationFrame:bn),Sn={useVisualState:yn({scrapeMotionValuesFromProps:dn,createRenderState:tn,onMount:(e,t,{renderState:n,latestValues:r})=>{wn.read((()=>{try{n.dimensions="function"==typeof t.getBBox?t.getBBox():t.getBoundingClientRect()}catch(e){n.dimensions={x:0,y:0,width:0,height:0}}})),wn.render((()=>{en(n,r,{enableHardwareAcceleration:!1},nn(t.tagName),e.transformTemplate),un(t,n)}))}})},Nn={useVisualState:yn({scrapeMotionValuesFromProps:cn,createRenderState:Wt})};function _n(e,t,n,r={passive:!0}){return e.addEventListener(t,n,r),()=>e.removeEventListener(t,n)}const Bn=e=>"mouse"===e.pointerType?"number"!=typeof e.button||e.button<=0:!1!==e.isPrimary;function Pn(e,t="page"){return{point:{x:e[t+"X"],y:e[t+"Y"]}}}const Tn=e=>t=>Bn(t)&&e(t,Pn(t));function On(e,t,n,r){return _n(e,t,Tn(n),r)}const Rn=(e,t)=>n=>t(e(n)),Fn=(...e)=>e.reduce(Rn);function Ln(e){let t=null;return()=>null===t&&(t=e,()=>{t=null})}const jn=Ln("dragHorizontal"),Mn=Ln("dragVertical");function Dn(e){let t=!1;if("y"===e)t=Mn();else if("x"===e)t=jn();else{const e=jn(),n=Mn();e&&n?t=()=>{e(),n()}:(e&&e(),n&&n())}return t}function zn(){const e=Dn(!0);return!e||(e(),!1)}class In{constructor(e){this.isMounted=!1,this.node=e}update(){}}function Vn(e,t){const n="pointer"+(t?"enter":"leave"),r="onHover"+(t?"Start":"End");return On(e.current,n,((n,o)=>{if("touch"===n.type||zn())return;const a=e.getProps();e.animationState&&a.whileHover&&e.animationState.setActive("whileHover",t),a[r]&&wn.update((()=>a[r](n,o)))}),{passive:!e.getProps()[r]})}const $n=(e,t)=>!!t&&(e===t||$n(e,t.parentElement));function Un(e,t){if(!t)return;const n=new PointerEvent("pointer"+e);t(n,Pn(n))}const Wn=new WeakMap,Hn=new WeakMap,Yn=e=>{const t=Wn.get(e.target);t&&t(e)},qn=e=>{e.forEach(Yn)};const Kn={some:0,all:1},Gn={inView:{Feature:class extends In{constructor(){super(...arguments),this.hasEnteredView=!1,this.isInView=!1}startObserver(){this.unmount();const{viewport:e={}}=this.node.getProps(),{root:t,margin:n,amount:r="some",once:o}=e,a={root:t?t.current:void 0,rootMargin:n,threshold:"number"==typeof r?r:Kn[r]};return function(e,t,n){const r=function({root:e,...t}){const n=e||document;Hn.has(n)||Hn.set(n,{});const r=Hn.get(n),o=JSON.stringify(t);return r[o]||(r[o]=new IntersectionObserver(qn,{root:e,...t})),r[o]}(t);return Wn.set(e,n),r.observe(e),()=>{Wn.delete(e),r.unobserve(e)}}(this.node.current,a,(e=>{const{isIntersecting:t}=e;if(this.isInView===t)return;if(this.isInView=t,o&&!t&&this.hasEnteredView)return;t&&(this.hasEnteredView=!0),this.node.animationState&&this.node.animationState.setActive("whileInView",t);const{onViewportEnter:n,onViewportLeave:r}=this.node.getProps(),a=t?n:r;a&&a(e)}))}mount(){this.startObserver()}update(){if("undefined"==typeof IntersectionObserver)return;const{props:e,prevProps:t}=this.node;["amount","margin","root"].some(function({viewport:e={}},{viewport:t={}}={}){return n=>e[n]!==t[n]}(e,t))&&this.startObserver()}unmount(){}}},tap:{Feature:class extends In{constructor(){super(...arguments),this.removeStartListeners=bn,this.removeEndListeners=bn,this.removeAccessibleListeners=bn,this.startPointerPress=(e,t)=>{if(this.removeEndListeners(),this.isPressing)return;const n=this.node.getProps(),r=On(window,"pointerup",((e,t)=>{if(!this.checkPressEnd())return;const{onTap:n,onTapCancel:r}=this.node.getProps();wn.update((()=>{$n(this.node.current,e.target)?n&&n(e,t):r&&r(e,t)}))}),{passive:!(n.onTap||n.onPointerUp)}),o=On(window,"pointercancel",((e,t)=>this.cancelPress(e,t)),{passive:!(n.onTapCancel||n.onPointerCancel)});this.removeEndListeners=Fn(r,o),this.startPress(e,t)},this.startAccessiblePress=()=>{const e=_n(this.node.current,"keydown",(e=>{"Enter"!==e.key||this.isPressing||(this.removeEndListeners(),this.removeEndListeners=_n(this.node.current,"keyup",(e=>{"Enter"===e.key&&this.checkPressEnd()&&Un("up",((e,t)=>{const{onTap:n}=this.node.getProps();n&&wn.update((()=>n(e,t)))}))})),Un("down",((e,t)=>{this.startPress(e,t)})))})),t=_n(this.node.current,"blur",(()=>{this.isPressing&&Un("cancel",((e,t)=>this.cancelPress(e,t)))}));this.removeAccessibleListeners=Fn(e,t)}}startPress(e,t){this.isPressing=!0;const{onTapStart:n,whileTap:r}=this.node.getProps();r&&this.node.animationState&&this.node.animationState.setActive("whileTap",!0),n&&wn.update((()=>n(e,t)))}checkPressEnd(){return this.removeEndListeners(),this.isPressing=!1,this.node.getProps().whileTap&&this.node.animationState&&this.node.animationState.setActive("whileTap",!1),!zn()}cancelPress(e,t){if(!this.checkPressEnd())return;const{onTapCancel:n}=this.node.getProps();n&&wn.update((()=>n(e,t)))}mount(){const e=this.node.getProps(),t=On(this.node.current,"pointerdown",this.startPointerPress,{passive:!(e.onTapStart||e.onPointerStart)}),n=_n(this.node.current,"focus",this.startAccessiblePress);this.removeStartListeners=Fn(t,n)}unmount(){this.removeStartListeners(),this.removeEndListeners(),this.removeAccessibleListeners()}}},focus:{Feature:class extends In{constructor(){super(...arguments),this.isActive=!1}onFocus(){let e=!1;try{e=this.node.current.matches(":focus-visible")}catch(t){e=!0}e&&this.node.animationState&&(this.node.animationState.setActive("whileFocus",!0),this.isActive=!0)}onBlur(){this.isActive&&this.node.animationState&&(this.node.animationState.setActive("whileFocus",!1),this.isActive=!1)}mount(){this.unmount=Fn(_n(this.node.current,"focus",(()=>this.onFocus())),_n(this.node.current,"blur",(()=>this.onBlur())))}unmount(){}}},hover:{Feature:class extends In{mount(){this.unmount=Fn(Vn(this.node,!0),Vn(this.node,!1))}unmount(){}}}};function Qn(e,t){if(!Array.isArray(t))return!1;const n=t.length;if(n!==e.length)return!1;for(let r=0;r<n;r++)if(t[r]!==e[r])return!1;return!0}function Xn(e,t,n){const r=e.getProps();return pn(r,t,void 0!==n?n:r.custom,function(e){const t={};return e.values.forEach(((e,n)=>t[n]=e.get())),t}(e),function(e){const t={};return e.values.forEach(((e,n)=>t[n]=e.getVelocity())),t}(e))}const Zn="data-"+an("framerAppearId");let Jn=bn,er=bn;const tr=e=>1e3*e,nr=e=>e/1e3,rr=e=>Array.isArray(e)&&"number"==typeof e[0];function or(e){return Boolean(!e||"string"==typeof e&&ir[e]||rr(e)||Array.isArray(e)&&e.every(or))}const ar=([e,t,n,r])=>`cubic-bezier(${e}, ${t}, ${n}, ${r})`,ir={linear:"linear",ease:"ease",easeIn:"ease-in",easeOut:"ease-out",easeInOut:"ease-in-out",circIn:ar([0,.65,.55,1]),circOut:ar([.55,0,1,.45]),backIn:ar([.31,.01,.66,-.59]),backOut:ar([.33,1.53,.69,.99])};function lr(e){if(e)return rr(e)?ar(e):Array.isArray(e)?e.map(lr):ir[e]}const sr=(e,t,n)=>(((1-3*n+3*t)*e+(3*n-6*t))*e+3*t)*e;function ur(e,t,n,r){if(e===t&&n===r)return bn;return o=>0===o||1===o?o:sr(function(e,t,n,r,o){let a,i,l=0;do{i=t+(n-t)/2,a=sr(i,r,o)-e,a>0?n=i:t=i}while(Math.abs(a)>1e-7&&++l<12);return i}(o,0,1,e,n),t,r)}const cr=ur(.42,0,1,1),dr=ur(0,0,.58,1),pr=ur(.42,0,.58,1),fr=e=>Array.isArray(e)&&"number"!=typeof e[0],mr=e=>t=>t<=.5?e(2*t)/2:(2-e(2*(1-t)))/2,hr=e=>t=>1-e(1-t),gr=e=>1-Math.sin(Math.acos(e)),yr=hr(gr),vr=mr(yr),br=ur(.33,1.53,.69,.99),xr=hr(br),Ar=mr(xr),wr={linear:bn,easeIn:cr,easeInOut:pr,easeOut:dr,circIn:gr,circInOut:vr,circOut:yr,backIn:xr,backInOut:Ar,backOut:br,anticipate:e=>(e*=2)<1?.5*xr(e):.5*(2-Math.pow(2,-10*(e-1)))},Cr=e=>{if(Array.isArray(e)){er(4===e.length,"Cubic bezier arrays must contain four numerical values.");const[t,n,r,o]=e;return ur(t,n,r,o)}return"string"==typeof e?(er(void 0!==wr[e],`Invalid easing type '${e}'`),wr[e]):e},Er=(e,t)=>n=>Boolean(Rt(n)&&Ot.test(n)&&n.startsWith(e)||t&&Object.prototype.hasOwnProperty.call(n,t)),kr=(e,t,n)=>r=>{if(!Rt(r))return r;const[o,a,i,l]=r.match(Pt);return{[e]:parseFloat(o),[t]:parseFloat(a),[n]:parseFloat(i),alpha:void 0!==l?parseFloat(l):1}},Sr={...St,transform:e=>Math.round((e=>kt(0,255,e))(e))},Nr={test:Er("rgb","red"),parse:kr("red","green","blue"),transform:({red:e,green:t,blue:n,alpha:r=1})=>"rgba("+Sr.transform(e)+", "+Sr.transform(t)+", "+Sr.transform(n)+", "+Bt(Nt.transform(r))+")"},_r={test:Er("#"),parse:function(e){let t="",n="",r="",o="";return e.length>5?(t=e.substring(1,3),n=e.substring(3,5),r=e.substring(5,7),o=e.substring(7,9)):(t=e.substring(1,2),n=e.substring(2,3),r=e.substring(3,4),o=e.substring(4,5),t+=t,n+=n,r+=r,o+=o),{red:parseInt(t,16),green:parseInt(n,16),blue:parseInt(r,16),alpha:o?parseInt(o,16)/255:1}},transform:Nr.transform},Br={test:Er("hsl","hue"),parse:kr("hue","saturation","lightness"),transform:({hue:e,saturation:t,lightness:n,alpha:r=1})=>"hsla("+Math.round(e)+", "+jt.transform(Bt(t))+", "+jt.transform(Bt(n))+", "+Bt(Nt.transform(r))+")"},Pr={test:e=>Nr.test(e)||_r.test(e)||Br.test(e),parse:e=>Nr.test(e)?Nr.parse(e):Br.test(e)?Br.parse(e):_r.parse(e),transform:e=>Rt(e)?e:e.hasOwnProperty("red")?Nr.transform(e):Br.transform(e)},Tr=(e,t,n)=>-n*e+n*t+e;function Or(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}const Rr=(e,t,n)=>{const r=e*e;return Math.sqrt(Math.max(0,n*(t*t-r)+r))},Fr=[_r,Nr,Br];function Lr(e){const t=(n=e,Fr.find((e=>e.test(n))));var n;er(Boolean(t),`'${e}' is not an animatable color. Use the equivalent color code instead.`);let r=t.parse(e);return t===Br&&(r=function({hue:e,saturation:t,lightness:n,alpha:r}){e/=360,n/=100;let o=0,a=0,i=0;if(t/=100){const r=n<.5?n*(1+t):n+t-n*t,l=2*n-r;o=Or(l,r,e+1/3),a=Or(l,r,e),i=Or(l,r,e-1/3)}else o=a=i=n;return{red:Math.round(255*o),green:Math.round(255*a),blue:Math.round(255*i),alpha:r}}(r)),r}const jr=(e,t)=>{const n=Lr(e),r=Lr(t),o={...n};return e=>(o.red=Rr(n.red,r.red,e),o.green=Rr(n.green,r.green,e),o.blue=Rr(n.blue,r.blue,e),o.alpha=Tr(n.alpha,r.alpha,e),Nr.transform(o))},Mr={regex:/var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\)/g,countKey:"Vars",token:"${v}",parse:bn},Dr={regex:Tt,countKey:"Colors",token:"${c}",parse:Pr.parse},zr={regex:Pt,countKey:"Numbers",token:"${n}",parse:St.parse};function Ir(e,{regex:t,countKey:n,token:r,parse:o}){const a=e.tokenised.match(t);a&&(e["num"+n]=a.length,e.tokenised=e.tokenised.replace(t,r),e.values.push(...a.map(o)))}function Vr(e){const t=e.toString(),n={value:t,tokenised:t,values:[],numVars:0,numColors:0,numNumbers:0};return n.value.includes("var(--")&&Ir(n,Mr),Ir(n,Dr),Ir(n,zr),n}function $r(e){return Vr(e).values}function Ur(e){const{values:t,numColors:n,numVars:r,tokenised:o}=Vr(e),a=t.length;return e=>{let t=o;for(let o=0;o<a;o++)t=o<r?t.replace(Mr.token,e[o]):o<r+n?t.replace(Dr.token,Pr.transform(e[o])):t.replace(zr.token,Bt(e[o]));return t}}const Wr=e=>"number"==typeof e?0:e,Hr={test:function(e){var t,n;return isNaN(e)&&Rt(e)&&((null===(t=e.match(Pt))||void 0===t?void 0:t.length)||0)+((null===(n=e.match(Tt))||void 0===n?void 0:n.length)||0)>0},parse:$r,createTransformer:Ur,getAnimatableNone:function(e){const t=$r(e);return Ur(e)(t.map(Wr))}},Yr=(e,t)=>n=>`${n>0?t:e}`;function qr(e,t){return"number"==typeof e?n=>Tr(e,t,n):Pr.test(e)?jr(e,t):e.startsWith("var(")?Yr(e,t):Qr(e,t)}const Kr=(e,t)=>{const n=[...e],r=n.length,o=e.map(((e,n)=>qr(e,t[n])));return e=>{for(let t=0;t<r;t++)n[t]=o[t](e);return n}},Gr=(e,t)=>{const n={...e,...t},r={};for(const o in n)void 0!==e[o]&&void 0!==t[o]&&(r[o]=qr(e[o],t[o]));return e=>{for(const t in r)n[t]=r[t](e);return n}},Qr=(e,t)=>{const n=Hr.createTransformer(t),r=Vr(e),o=Vr(t);return r.numVars===o.numVars&&r.numColors===o.numColors&&r.numNumbers>=o.numNumbers?Fn(Kr(r.values,o.values),n):(Jn(!0,`Complex values '${e}' and '${t}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`),Yr(e,t))},Xr=(e,t,n)=>{const r=t-e;return 0===r?1:(n-e)/r},Zr=(e,t)=>n=>Tr(e,t,n);function Jr(e,t,{clamp:n=!0,ease:r,mixer:o}={}){const a=e.length;if(er(a===t.length,"Both input and output ranges must be the same length"),1===a)return()=>t[0];e[0]>e[a-1]&&(e=[...e].reverse(),t=[...t].reverse());const i=function(e,t,n){const r=[],o=n||("number"==typeof(a=e[0])?Zr:"string"==typeof a?Pr.test(a)?jr:Qr:Array.isArray(a)?Kr:"object"==typeof a?Gr:Zr);var a;const i=e.length-1;for(let n=0;n<i;n++){let a=o(e[n],e[n+1]);if(t){const e=Array.isArray(t)?t[n]||bn:t;a=Fn(e,a)}r.push(a)}return r}(t,r,o),l=i.length,s=t=>{let n=0;if(l>1)for(;n<e.length-2&&!(t<e[n+1]);n++);const r=Xr(e[n],e[n+1],t);return i[n](r)};return n?t=>s(kt(e[0],e[a-1],t)):s}function eo(e,t){return e.map((()=>t||pr)).splice(0,e.length-1)}function to({duration:e=300,keyframes:t,times:n,ease:r="easeInOut"}){const o=fr(r)?r.map(Cr):Cr(r),a={done:!1,value:t[0]},i=function(e,t){return e.map((e=>e*t))}(n&&n.length===t.length?n:function(e){const t=[0];return function(e,t){const n=e[e.length-1];for(let r=1;r<=t;r++){const o=Xr(0,t,r);e.push(Tr(n,1,o))}}(t,e.length-1),t}(t),e),l=Jr(i,t,{ease:Array.isArray(o)?o:eo(t,o)});return{calculatedDuration:e,next:t=>(a.value=l(t),a.done=t>=e,a)}}function no(e,t){return t?e*(1e3/t):0}const ro=5;function oo(e,t,n){const r=Math.max(t-ro,0);return no(n-e(r),t-r)}const ao=.001,io=.01,lo=10,so=.05,uo=1;const co=12;function po(e,t){return e*Math.sqrt(1-t*t)}const fo=["duration","bounce"],mo=["stiffness","damping","mass"];function ho(e,t){return t.some((t=>void 0!==e[t]))}function go({keyframes:e,restDelta:t,restSpeed:n,...r}){const o=e[0],a=e[e.length-1],i={done:!1,value:o},{stiffness:l,damping:s,mass:u,velocity:c,duration:d,isResolvedFromDuration:p}=function(e){let t={velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1,...e};if(!ho(e,mo)&&ho(e,fo)){const n=function({duration:e=800,bounce:t=.25,velocity:n=0,mass:r=1}){let o,a;Jn(e<=tr(lo),"Spring duration must be 10 seconds or less");let i=1-t;i=kt(so,uo,i),e=kt(io,lo,nr(e)),i<1?(o=t=>{const r=t*i,o=r*e,a=r-n,l=po(t,i),s=Math.exp(-o);return ao-a/l*s},a=t=>{const r=t*i*e,a=r*n+n,l=Math.pow(i,2)*Math.pow(t,2)*e,s=Math.exp(-r),u=po(Math.pow(t,2),i);return(-o(t)+ao>0?-1:1)*((a-l)*s)/u}):(o=t=>Math.exp(-t*e)*((t-n)*e+1)-ao,a=t=>Math.exp(-t*e)*(e*e*(n-t)));const l=function(e,t,n){let r=n;for(let n=1;n<co;n++)r-=e(r)/t(r);return r}(o,a,5/e);if(e=tr(e),isNaN(l))return{stiffness:100,damping:10,duration:e};{const t=Math.pow(l,2)*r;return{stiffness:t,damping:2*i*Math.sqrt(r*t),duration:e}}}(e);t={...t,...n,velocity:0,mass:1},t.isResolvedFromDuration=!0}return t}(r),f=c?-nr(c):0,m=s/(2*Math.sqrt(l*u)),h=a-o,g=nr(Math.sqrt(l/u)),y=Math.abs(h)<5;let v;if(n||(n=y?.01:2),t||(t=y?.005:.5),m<1){const e=po(g,m);v=t=>{const n=Math.exp(-m*g*t);return a-n*((f+m*g*h)/e*Math.sin(e*t)+h*Math.cos(e*t))}}else if(1===m)v=e=>a-Math.exp(-g*e)*(h+(f+g*h)*e);else{const e=g*Math.sqrt(m*m-1);v=t=>{const n=Math.exp(-m*g*t),r=Math.min(e*t,300);return a-n*((f+m*g*h)*Math.sinh(r)+e*h*Math.cosh(r))/e}}return{calculatedDuration:p&&d||null,next:e=>{const r=v(e);if(p)i.done=e>=d;else{let o=f;0!==e&&(o=m<1?oo(v,e,r):0);const l=Math.abs(o)<=n,s=Math.abs(a-r)<=t;i.done=l&&s}return i.value=i.done?a:r,i}}}function yo({keyframes:e,velocity:t=0,power:n=.8,timeConstant:r=325,bounceDamping:o=10,bounceStiffness:a=500,modifyTarget:i,min:l,max:s,restDelta:u=.5,restSpeed:c}){const d=e[0],p={done:!1,value:d},f=e=>void 0===l?s:void 0===s||Math.abs(l-e)<Math.abs(s-e)?l:s;let m=n*t;const h=d+m,g=void 0===i?h:i(h);g!==h&&(m=g-d);const y=e=>-m*Math.exp(-e/r),v=e=>g+y(e),b=e=>{const t=y(e),n=v(e);p.done=Math.abs(t)<=u,p.value=p.done?g:n};let x,A;const w=e=>{var t;t=p.value,(void 0!==l&&t<l||void 0!==s&&t>s)&&(x=e,A=go({keyframes:[p.value,f(p.value)],velocity:oo(v,e,p.value),damping:o,stiffness:a,restDelta:u,restSpeed:c}))};return w(0),{calculatedDuration:null,next:e=>{let t=!1;return A||void 0!==x||(t=!0,b(e),w(e)),void 0!==x&&e>x?A.next(e-x):(!t&&b(e),p)}}}const vo=e=>{const t=({timestamp:t})=>e(t);return{start:()=>wn.update(t,!0),stop:()=>Cn(t),now:()=>En.isProcessing?En.timestamp:performance.now()}},bo=2e4;function xo(e){let t=0,n=e.next(t);for(;!n.done&&t<bo;)t+=50,n=e.next(t);return t>=bo?1/0:t}const Ao={decay:yo,inertia:yo,tween:to,keyframes:to,spring:go};function wo({autoplay:e=!0,delay:t=0,driver:n=vo,keyframes:r,type:o="keyframes",repeat:a=0,repeatDelay:i=0,repeatType:l="loop",onPlay:s,onStop:u,onComplete:c,onUpdate:d,...p}){let f,m,h=1,g=!1;const y=()=>{m=new Promise((e=>{f=e}))};let v;y();const b=Ao[o]||to;let x;b!==to&&"number"!=typeof r[0]&&(x=Jr([0,100],r,{clamp:!1}),r=[0,100]);const A=b({...p,keyframes:r});let w;"mirror"===l&&(w=b({...p,keyframes:[...r].reverse(),velocity:-(p.velocity||0)}));let C="idle",E=null,k=null,S=null;null===A.calculatedDuration&&a&&(A.calculatedDuration=xo(A));const{calculatedDuration:N}=A;let _=1/0,B=1/0;null!==N&&(_=N+i,B=_*(a+1)-i);let P=0;const T=e=>{if(null===k)return;h>0&&(k=Math.min(k,e)),h<0&&(k=Math.min(e-B/h,k)),P=null!==E?E:Math.round(e-k)*h;const n=P-t*(h>=0?1:-1),o=h>=0?n<0:n>B;P=Math.max(n,0),"finished"===C&&null===E&&(P=B);let s=P,u=A;if(a){const e=P/_;let t=Math.floor(e),n=e%1;!n&&e>=1&&(n=1),1===n&&t--,t=Math.min(t,a+1);const r=Boolean(t%2);r&&("reverse"===l?(n=1-n,i&&(n-=i/_)):"mirror"===l&&(u=w));let o=kt(0,1,n);P>B&&(o="reverse"===l&&r?1:0),s=o*_}const c=o?{done:!1,value:r[0]}:u.next(s);x&&(c.value=x(c.value));let{done:p}=c;o||null===N||(p=h>=0?P>=B:P<=0);const f=null===E&&("finished"===C||"running"===C&&p);return d&&d(c.value),f&&F(),c},O=()=>{v&&v.stop(),v=void 0},R=()=>{C="idle",O(),f(),y(),k=S=null},F=()=>{C="finished",c&&c(),O(),f()},L=()=>{if(g)return;v||(v=n(T));const e=v.now();s&&s(),null!==E?k=e-E:k&&"finished"!==C||(k=e),"finished"===C&&y(),S=k,E=null,C="running",v.start()};e&&L();const j={then:(e,t)=>m.then(e,t),get time(){return nr(P)},set time(e){e=tr(e),P=e,null===E&&v&&0!==h?k=v.now()-e/h:E=e},get duration(){const e=null===A.calculatedDuration?xo(A):A.calculatedDuration;return nr(e)},get speed(){return h},set speed(e){e!==h&&v&&(h=e,j.time=nr(P))},get state(){return C},play:L,pause:()=>{C="paused",E=P},stop:()=>{g=!0,"idle"!==C&&(C="idle",u&&u(),R())},cancel:()=>{null!==S&&T(S),R()},complete:()=>{C="finished"},sample:e=>(k=0,T(e))};return j}const Co=function(e){let t;return()=>(void 0===t&&(t=Object.hasOwnProperty.call(Element.prototype,"animate")),t)}(),Eo=new Set(["opacity","clipPath","filter","transform","backgroundColor"]);const ko={type:"spring",stiffness:500,damping:25,restSpeed:10},So={type:"keyframes",duration:.8},No={type:"keyframes",ease:[.25,.1,.35,1],duration:.3},_o=(e,{keyframes:t})=>t.length>2?So:gt.has(e)?e.startsWith("scale")?{type:"spring",stiffness:550,damping:0===t[1]?2*Math.sqrt(550):30,restSpeed:10}:ko:No,Bo=(e,t)=>!("zIndex"===e||"number"!=typeof t&&!Array.isArray(t)&&("string"!=typeof t||!Hr.test(t)&&"0"!==t||t.startsWith("url("))),Po=new Set(["brightness","contrast","saturate","opacity"]);function To(e){const[t,n]=e.slice(0,-1).split("(");if("drop-shadow"===t)return e;const[r]=n.match(Pt)||[];if(!r)return e;const o=n.replace(r,"");let a=Po.has(t)?1:0;return r!==n&&(a*=100),t+"("+a+o+")"}const Oo=/([a-z-]*)\(.*?\)/g,Ro={...Hr,getAnimatableNone:e=>{const t=e.match(Oo);return t?t.map(To).join(" "):e}},Fo={...$t,color:Pr,backgroundColor:Pr,outlineColor:Pr,fill:Pr,stroke:Pr,borderColor:Pr,borderTopColor:Pr,borderRightColor:Pr,borderBottomColor:Pr,borderLeftColor:Pr,filter:Ro,WebkitFilter:Ro},Lo=e=>Fo[e];function jo(e,t){let n=Lo(e);return n!==Ro&&(n=Hr),n.getAnimatableNone?n.getAnimatableNone(t):void 0}const Mo=e=>/^0[^.\s]+$/.test(e);function Do(e){return"number"==typeof e?0===e:null!==e?"none"===e||"0"===e||Mo(e):void 0}function zo(e,t){return e[t]||e.default||e}const Io=(e,t,n,r={})=>o=>{const a=zo(r,e)||{},i=a.delay||r.delay||0;let{elapsed:l=0}=r;l-=tr(i);const s=function(e,t,n,r){const o=Bo(t,n);let a;a=Array.isArray(n)?[...n]:[null,n];const i=void 0!==r.from?r.from:e.get();let l;const s=[];for(let e=0;e<a.length;e++)null===a[e]&&(a[e]=0===e?i:a[e-1]),Do(a[e])&&s.push(e),"string"==typeof a[e]&&"none"!==a[e]&&"0"!==a[e]&&(l=a[e]);if(o&&s.length&&l)for(let e=0;e<s.length;e++)a[s[e]]=jo(t,l);return a}(t,e,n,a),u=s[0],c=s[s.length-1],d=Bo(e,u),p=Bo(e,c);Jn(d===p,`You are trying to animate ${e} from "${u}" to "${c}". ${u} is not an animatable value - to enable this animation set ${u} to a value animatable to ${c} via the \`style\` property.`);let f={keyframes:s,velocity:t.getVelocity(),ease:"easeOut",...a,delay:-l,onUpdate:e=>{t.set(e),a.onUpdate&&a.onUpdate(e)},onComplete:()=>{o(),a.onComplete&&a.onComplete()}};if(function({when:e,delay:t,delayChildren:n,staggerChildren:r,staggerDirection:o,repeat:a,repeatType:i,repeatDelay:l,from:s,elapsed:u,...c}){return!!Object.keys(c).length}(a)||(f={...f,..._o(e,f)}),f.duration&&(f.duration=tr(f.duration)),f.repeatDelay&&(f.repeatDelay=tr(f.repeatDelay)),!d||!p||!1===a.type)return function({keyframes:e,delay:t,onUpdate:n,onComplete:r}){const o=()=>(n&&n(e[e.length-1]),r&&r(),{time:0,speed:1,duration:0,play:bn,pause:bn,stop:bn,then:e=>(e(),Promise.resolve()),cancel:bn,complete:bn});return t?wo({keyframes:[0,1],duration:0,delay:t,onComplete:o}):o()}(f);if(t.owner&&t.owner.current instanceof HTMLElement&&!t.owner.getProps().onUpdate){const n=function(e,t,{onUpdate:n,onComplete:r,...o}){if(!Co()||!Eo.has(t)||o.repeatDelay||"mirror"===o.repeatType||0===o.damping||"inertia"===o.type)return!1;let a,i,l=!1;const s=()=>{i=new Promise((e=>{a=e}))};s();let{keyframes:u,duration:c=300,ease:d,times:p}=o;if(((e,t)=>"spring"===t.type||"backgroundColor"===e||!or(t.ease))(t,o)){const e=wo({...o,repeat:0,delay:0});let t={done:!1,value:u[0]};const n=[];let r=0;for(;!t.done&&r<2e4;)t=e.sample(r),n.push(t.value),r+=10;p=void 0,u=n,c=r-10,d="linear"}const f=function(e,t,n,{delay:r=0,duration:o,repeat:a=0,repeatType:i="loop",ease:l,times:s}={}){const u={[t]:n};s&&(u.offset=s);const c=lr(l);return Array.isArray(c)&&(u.easing=c),e.animate(u,{delay:r,duration:o,easing:Array.isArray(c)?"linear":c,fill:"both",iterations:a+1,direction:"reverse"===i?"alternate":"normal"})}(e.owner.current,t,u,{...o,duration:c,ease:d,times:p});o.syncStart&&(f.startTime=En.isProcessing?En.timestamp:document.timeline?document.timeline.currentTime:performance.now());const m=()=>f.cancel(),h=()=>{wn.update(m),a(),s()};return f.onfinish=()=>{e.set(function(e,{repeat:t,repeatType:n="loop"}){return e[t&&"loop"!==n&&t%2==1?0:e.length-1]}(u,o)),r&&r(),h()},{then:(e,t)=>i.then(e,t),attachTimeline:e=>(f.timeline=e,f.onfinish=null,bn),get time(){return nr(f.currentTime||0)},set time(e){f.currentTime=tr(e)},get speed(){return f.playbackRate},set speed(e){f.playbackRate=e},get duration(){return nr(c)},play:()=>{l||(f.play(),Cn(m))},pause:()=>f.pause(),stop:()=>{if(l=!0,"idle"===f.playState)return;const{currentTime:t}=f;if(t){const n=wo({...o,autoplay:!1});e.setWithVelocity(n.sample(t-10).value,n.sample(t).value,10)}h()},complete:()=>f.finish(),cancel:h}}(t,e,f);if(n)return n}return wo(f)};function Vo(e){return Boolean(vt(e)&&e.add)}const $o=e=>/^\-?\d*\.?\d+$/.test(e);function Uo(e,t){-1===e.indexOf(t)&&e.push(t)}function Wo(e,t){const n=e.indexOf(t);n>-1&&e.splice(n,1)}class Ho{constructor(){this.subscriptions=[]}add(e){return Uo(this.subscriptions,e),()=>Wo(this.subscriptions,e)}notify(e,t,n){const r=this.subscriptions.length;if(r)if(1===r)this.subscriptions[0](e,t,n);else for(let o=0;o<r;o++){const r=this.subscriptions[o];r&&r(e,t,n)}}getSize(){return this.subscriptions.length}clear(){this.subscriptions.length=0}}const Yo={current:void 0};class qo{constructor(e,t={}){var n;this.version="10.16.4",this.timeDelta=0,this.lastUpdated=0,this.canTrackVelocity=!1,this.events={},this.updateAndNotify=(e,t=!0)=>{this.prev=this.current,this.current=e;const{delta:n,timestamp:r}=En;this.lastUpdated!==r&&(this.timeDelta=n,this.lastUpdated=r,wn.postRender(this.scheduleVelocityCheck)),this.prev!==this.current&&this.events.change&&this.events.change.notify(this.current),this.events.velocityChange&&this.events.velocityChange.notify(this.getVelocity()),t&&this.events.renderRequest&&this.events.renderRequest.notify(this.current)},this.scheduleVelocityCheck=()=>wn.postRender(this.velocityCheck),this.velocityCheck=({timestamp:e})=>{e!==this.lastUpdated&&(this.prev=this.current,this.events.velocityChange&&this.events.velocityChange.notify(this.getVelocity()))},this.hasAnimated=!1,this.prev=this.current=e,this.canTrackVelocity=(n=this.current,!isNaN(parseFloat(n))),this.owner=t.owner}onChange(e){return this.on("change",e)}on(e,t){this.events[e]||(this.events[e]=new Ho);const n=this.events[e].add(t);return"change"===e?()=>{n(),wn.read((()=>{this.events.change.getSize()||this.stop()}))}:n}clearListeners(){for(const e in this.events)this.events[e].clear()}attach(e,t){this.passiveEffect=e,this.stopPassiveEffect=t}set(e,t=!0){t&&this.passiveEffect?this.passiveEffect(e,this.updateAndNotify):this.updateAndNotify(e,t)}setWithVelocity(e,t,n){this.set(t),this.prev=e,this.timeDelta=n}jump(e){this.updateAndNotify(e),this.prev=e,this.stop(),this.stopPassiveEffect&&this.stopPassiveEffect()}get(){return Yo.current&&Yo.current.push(this),this.current}getPrevious(){return this.prev}getVelocity(){return this.canTrackVelocity?no(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0}start(e){return this.stop(),new Promise((t=>{this.hasAnimated=!0,this.animation=e(t),this.events.animationStart&&this.events.animationStart.notify()})).then((()=>{this.events.animationComplete&&this.events.animationComplete.notify(),this.clearAnimation()}))}stop(){this.animation&&(this.animation.stop(),this.events.animationCancel&&this.events.animationCancel.notify()),this.clearAnimation()}isAnimating(){return!!this.animation}clearAnimation(){delete this.animation}destroy(){this.clearListeners(),this.stop(),this.stopPassiveEffect&&this.stopPassiveEffect()}}function Ko(e,t){return new qo(e,t)}const Go=e=>t=>t.test(e),Qo=[St,Mt,jt,Lt,zt,Dt,{test:e=>"auto"===e,parse:e=>e}],Xo=e=>Qo.find(Go(e)),Zo=[...Qo,Pr,Hr];function Jo(e,t,n){e.hasValue(t)?e.getValue(t).set(n):e.addValue(t,Ko(n))}function ea(e,t){if(t)return(t[e]||t.default||t).from}function ta({protectedKeys:e,needsAnimating:t},n){const r=e.hasOwnProperty(n)&&!0!==t[n];return t[n]=!1,r}function na(e,t,{delay:n=0,transitionOverride:r,type:o}={}){let{transition:a=e.getDefaultTransition(),transitionEnd:i,...l}=e.makeTargetAnimatable(t);const s=e.getValue("willChange");r&&(a=r);const u=[],c=o&&e.animationState&&e.animationState.getState()[o];for(const t in l){const r=e.getValue(t),o=l[t];if(!r||void 0===o||c&&ta(c,t))continue;const i={delay:n,elapsed:0,...a};if(window.HandoffAppearAnimations&&!r.hasAnimated){const n=e.getProps()[Zn];n&&(i.elapsed=window.HandoffAppearAnimations(n,t,r,wn),i.syncStart=!0)}r.start(Io(t,r,o,e.shouldReduceMotion&&gt.has(t)?{type:!1}:i));const d=r.animation;Vo(s)&&(s.add(t),d.then((()=>s.remove(t)))),u.push(d)}return i&&Promise.all(u).then((()=>{i&&function(e,t){const n=Xn(e,t);let{transitionEnd:r={},transition:o={},...a}=n?e.makeTargetAnimatable(n,!1):{};a={...a,...r};for(const t in a)Jo(e,t,hn(a[t]))}(e,i)})),u}function ra(e,t,n={}){const r=Xn(e,t,n.custom);let{transition:o=e.getDefaultTransition()||{}}=r||{};n.transitionOverride&&(o=n.transitionOverride);const a=r?()=>Promise.all(na(e,r,n)):()=>Promise.resolve(),i=e.variantChildren&&e.variantChildren.size?(r=0)=>{const{delayChildren:a=0,staggerChildren:i,staggerDirection:l}=o;return function(e,t,n=0,r=0,o=1,a){const i=[],l=(e.variantChildren.size-1)*r,s=1===o?(e=0)=>e*r:(e=0)=>l-e*r;return Array.from(e.variantChildren).sort(oa).forEach(((e,r)=>{e.notify("AnimationStart",t),i.push(ra(e,t,{...a,delay:n+s(r)}).then((()=>e.notify("AnimationComplete",t))))})),Promise.all(i)}(e,t,a+r,i,l,n)}:()=>Promise.resolve(),{when:l}=o;if(l){const[e,t]="beforeChildren"===l?[a,i]:[i,a];return e().then((()=>t()))}return Promise.all([a(),i(n.delay)])}function oa(e,t){return e.sortNodePosition(t)}const aa=[...Je].reverse(),ia=Je.length;function la(e){let t=function(e){return t=>Promise.all(t.map((({animation:t,options:n})=>function(e,t,n={}){let r;if(e.notify("AnimationStart",t),Array.isArray(t)){const o=t.map((t=>ra(e,t,n)));r=Promise.all(o)}else if("string"==typeof t)r=ra(e,t,n);else{const o="function"==typeof t?Xn(e,t,n.custom):t;r=Promise.all(na(e,o,n))}return r.then((()=>e.notify("AnimationComplete",t)))}(e,t,n))))}(e);const n={animate:ua(!0),whileInView:ua(),whileHover:ua(),whileTap:ua(),whileDrag:ua(),whileFocus:ua(),exit:ua()};let r=!0;const o=(t,n)=>{const r=Xn(e,n);if(r){const{transition:e,transitionEnd:n,...o}=r;t={...t,...o,...n}}return t};function a(a,i){const l=e.getProps(),s=e.getVariantContext(!0)||{},u=[],c=new Set;let d={},p=1/0;for(let t=0;t<ia;t++){const f=aa[t],m=n[f],h=void 0!==l[f]?l[f]:s[f],g=Xe(h),y=f===i?m.isActive:null;!1===y&&(p=t);let v=h===s[f]&&h!==l[f]&&g;if(v&&r&&e.manuallyAnimateOnMount&&(v=!1),m.protectedKeys={...d},!m.isActive&&null===y||!h&&!m.prevProp||Ze(h)||"boolean"==typeof h)continue;const b=sa(m.prevProp,h);let x=b||f===i&&m.isActive&&!v&&g||t>p&&g;const A=Array.isArray(h)?h:[h];let w=A.reduce(o,{});!1===y&&(w={});const{prevResolvedValues:C={}}=m,E={...C,...w},k=e=>{x=!0,c.delete(e),m.needsAnimating[e]=!0};for(const e in E){const t=w[e],n=C[e];d.hasOwnProperty(e)||(t!==n?fn(t)&&fn(n)?!Qn(t,n)||b?k(e):m.protectedKeys[e]=!0:void 0!==t?k(e):c.add(e):void 0!==t&&c.has(e)?k(e):m.protectedKeys[e]=!0)}m.prevProp=h,m.prevResolvedValues=w,m.isActive&&(d={...d,...w}),r&&e.blockInitialAnimation&&(x=!1),x&&!v&&u.push(...A.map((e=>({animation:e,options:{type:f,...a}}))))}if(c.size){const t={};c.forEach((n=>{const r=e.getBaseTarget(n);void 0!==r&&(t[n]=r)})),u.push({animation:t})}let f=Boolean(u.length);return r&&!1===l.initial&&!e.manuallyAnimateOnMount&&(f=!1),r=!1,f?t(u):Promise.resolve()}return{animateChanges:a,setActive:function(t,r,o){var i;if(n[t].isActive===r)return Promise.resolve();null===(i=e.variantChildren)||void 0===i||i.forEach((e=>{var n;return null===(n=e.animationState)||void 0===n?void 0:n.setActive(t,r)})),n[t].isActive=r;const l=a(o,t);for(const e in n)n[e].protectedKeys={};return l},setAnimateFunction:function(n){t=n(e)},getState:()=>n}}function sa(e,t){return"string"==typeof t?t!==e:!!Array.isArray(t)&&!Qn(t,e)}function ua(e=!1){return{isActive:e,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}let ca=0;const da={animation:{Feature:class extends In{constructor(e){super(e),e.animationState||(e.animationState=la(e))}updateAnimationControlsSubscription(){const{animate:e}=this.node.getProps();this.unmount(),Ze(e)&&(this.unmount=e.subscribe(this.node))}mount(){this.updateAnimationControlsSubscription()}update(){const{animate:e}=this.node.getProps(),{animate:t}=this.node.prevProps||{};e!==t&&this.updateAnimationControlsSubscription()}unmount(){}}},exit:{Feature:class extends In{constructor(){super(...arguments),this.id=ca++}update(){if(!this.node.presenceContext)return;const{isPresent:e,onExitComplete:t,custom:n}=this.node.presenceContext,{isPresent:r}=this.node.prevPresenceContext||{};if(!this.node.animationState||e===r)return;const o=this.node.animationState.setActive("exit",!e,{custom:null!=n?n:this.node.getProps().custom});t&&!e&&o.then((()=>t(this.id)))}mount(){const{register:e}=this.node.presenceContext||{};e&&(this.unmount=e(this.id))}unmount(){}}}},pa=(e,t)=>Math.abs(e-t);class fa{constructor(e,t,{transformPagePoint:n}={}){if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.updatePoint=()=>{if(!this.lastMoveEvent||!this.lastMoveEventInfo)return;const e=ga(this.lastMoveEventInfo,this.history),t=null!==this.startEvent,n=function(e,t){const n=pa(e.x,t.x),r=pa(e.y,t.y);return Math.sqrt(n**2+r**2)}(e.offset,{x:0,y:0})>=3;if(!t&&!n)return;const{point:r}=e,{timestamp:o}=En;this.history.push({...r,timestamp:o});const{onStart:a,onMove:i}=this.handlers;t||(a&&a(this.lastMoveEvent,e),this.startEvent=this.lastMoveEvent),i&&i(this.lastMoveEvent,e)},this.handlePointerMove=(e,t)=>{this.lastMoveEvent=e,this.lastMoveEventInfo=ma(t,this.transformPagePoint),wn.update(this.updatePoint,!0)},this.handlePointerUp=(e,t)=>{if(this.end(),!this.lastMoveEvent||!this.lastMoveEventInfo)return;const{onEnd:n,onSessionEnd:r}=this.handlers,o=ga("pointercancel"===e.type?this.lastMoveEventInfo:ma(t,this.transformPagePoint),this.history);this.startEvent&&n&&n(e,o),r&&r(e,o)},!Bn(e))return;this.handlers=t,this.transformPagePoint=n;const r=ma(Pn(e),this.transformPagePoint),{point:o}=r,{timestamp:a}=En;this.history=[{...o,timestamp:a}];const{onSessionStart:i}=t;i&&i(e,ga(r,this.history)),this.removeListeners=Fn(On(window,"pointermove",this.handlePointerMove),On(window,"pointerup",this.handlePointerUp),On(window,"pointercancel",this.handlePointerUp))}updateHandlers(e){this.handlers=e}end(){this.removeListeners&&this.removeListeners(),Cn(this.updatePoint)}}function ma(e,t){return t?{point:t(e.point)}:e}function ha(e,t){return{x:e.x-t.x,y:e.y-t.y}}function ga({point:e},t){return{point:e,delta:ha(e,va(t)),offset:ha(e,ya(t)),velocity:ba(t,.1)}}function ya(e){return e[0]}function va(e){return e[e.length-1]}function ba(e,t){if(e.length<2)return{x:0,y:0};let n=e.length-1,r=null;const o=va(e);for(;n>=0&&(r=e[n],!(o.timestamp-r.timestamp>tr(t)));)n--;if(!r)return{x:0,y:0};const a=nr(o.timestamp-r.timestamp);if(0===a)return{x:0,y:0};const i={x:(o.x-r.x)/a,y:(o.y-r.y)/a};return i.x===1/0&&(i.x=0),i.y===1/0&&(i.y=0),i}function xa(e){return e.max-e.min}function Aa(e,t=0,n=.01){return Math.abs(e-t)<=n}function wa(e,t,n,r=.5){e.origin=r,e.originPoint=Tr(t.min,t.max,e.origin),e.scale=xa(n)/xa(t),(Aa(e.scale,1,1e-4)||isNaN(e.scale))&&(e.scale=1),e.translate=Tr(n.min,n.max,e.origin)-e.originPoint,(Aa(e.translate)||isNaN(e.translate))&&(e.translate=0)}function Ca(e,t,n,r){wa(e.x,t.x,n.x,r?r.originX:void 0),wa(e.y,t.y,n.y,r?r.originY:void 0)}function Ea(e,t,n){e.min=n.min+t.min,e.max=e.min+xa(t)}function ka(e,t,n){e.min=t.min-n.min,e.max=e.min+xa(t)}function Sa(e,t,n){ka(e.x,t.x,n.x),ka(e.y,t.y,n.y)}function Na(e,t,n){return{min:void 0!==t?e.min+t:void 0,max:void 0!==n?e.max+n-(e.max-e.min):void 0}}function _a(e,t){let n=t.min-e.min,r=t.max-e.max;return t.max-t.min<e.max-e.min&&([n,r]=[r,n]),{min:n,max:r}}const Ba=.35;function Pa(e,t,n){return{min:Ta(e,t),max:Ta(e,n)}}function Ta(e,t){return"number"==typeof e?e:e[t]||0}const Oa=()=>({x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}}),Ra=()=>({x:{min:0,max:0},y:{min:0,max:0}});function Fa(e){return[e("x"),e("y")]}function La({top:e,left:t,right:n,bottom:r}){return{x:{min:t,max:n},y:{min:e,max:r}}}function ja(e){return void 0===e||1===e}function Ma({scale:e,scaleX:t,scaleY:n}){return!ja(e)||!ja(t)||!ja(n)}function Da(e){return Ma(e)||za(e)||e.z||e.rotate||e.rotateX||e.rotateY}function za(e){return Ia(e.x)||Ia(e.y)}function Ia(e){return e&&"0%"!==e}function Va(e,t,n){return n+t*(e-n)}function $a(e,t,n,r,o){return void 0!==o&&(e=Va(e,o,r)),Va(e,n,r)+t}function Ua(e,t=0,n=1,r,o){e.min=$a(e.min,t,n,r,o),e.max=$a(e.max,t,n,r,o)}function Wa(e,{x:t,y:n}){Ua(e.x,t.translate,t.scale,t.originPoint),Ua(e.y,n.translate,n.scale,n.originPoint)}function Ha(e){return Number.isInteger(e)||e>1.0000000000001||e<.999999999999?e:1}function Ya(e,t){e.min=e.min+t,e.max=e.max+t}function qa(e,t,[n,r,o]){const a=void 0!==t[o]?t[o]:.5,i=Tr(e.min,e.max,a);Ua(e,t[n],t[r],i,t.scale)}const Ka=["x","scaleX","originX"],Ga=["y","scaleY","originY"];function Qa(e,t){qa(e.x,t,Ka),qa(e.y,t,Ga)}function Xa(e,t){return La(function(e,t){if(!t)return e;const n=t({x:e.left,y:e.top}),r=t({x:e.right,y:e.bottom});return{top:n.y,left:n.x,bottom:r.y,right:r.x}}(e.getBoundingClientRect(),t))}const Za=new WeakMap;class Ja{constructor(e){this.openGlobalLock=null,this.isDragging=!1,this.currentDirection=null,this.originPoint={x:0,y:0},this.constraints=!1,this.hasMutatedConstraints=!1,this.elastic=Ra(),this.visualElement=e}start(e,{snapToCursor:t=!1}={}){const{presenceContext:n}=this.visualElement;n&&!1===n.isPresent||(this.panSession=new fa(e,{onSessionStart:e=>{this.stopAnimation(),t&&this.snapToCursor(Pn(e,"page").point)},onStart:(e,t)=>{const{drag:n,dragPropagation:r,onDragStart:o}=this.getProps();if(n&&!r&&(this.openGlobalLock&&this.openGlobalLock(),this.openGlobalLock=Dn(n),!this.openGlobalLock))return;this.isDragging=!0,this.currentDirection=null,this.resolveConstraints(),this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!0,this.visualElement.projection.target=void 0),Fa((e=>{let t=this.getAxisMotionValue(e).get()||0;if(jt.test(t)){const{projection:n}=this.visualElement;if(n&&n.layout){const r=n.layout.layoutBox[e];r&&(t=xa(r)*(parseFloat(t)/100))}}this.originPoint[e]=t})),o&&wn.update((()=>o(e,t)),!1,!0);const{animationState:a}=this.visualElement;a&&a.setActive("whileDrag",!0)},onMove:(e,t)=>{const{dragPropagation:n,dragDirectionLock:r,onDirectionLock:o,onDrag:a}=this.getProps();if(!n&&!this.openGlobalLock)return;const{offset:i}=t;if(r&&null===this.currentDirection)return this.currentDirection=function(e,t=10){let n=null;return Math.abs(e.y)>t?n="y":Math.abs(e.x)>t&&(n="x"),n}(i),void(null!==this.currentDirection&&o&&o(this.currentDirection));this.updateAxis("x",t.point,i),this.updateAxis("y",t.point,i),this.visualElement.render(),a&&a(e,t)},onSessionEnd:(e,t)=>this.stop(e,t)},{transformPagePoint:this.visualElement.getTransformPagePoint()}))}stop(e,t){const n=this.isDragging;if(this.cancel(),!n)return;const{velocity:r}=t;this.startAnimation(r);const{onDragEnd:o}=this.getProps();o&&wn.update((()=>o(e,t)))}cancel(){this.isDragging=!1;const{projection:e,animationState:t}=this.visualElement;e&&(e.isAnimationBlocked=!1),this.panSession&&this.panSession.end(),this.panSession=void 0;const{dragPropagation:n}=this.getProps();!n&&this.openGlobalLock&&(this.openGlobalLock(),this.openGlobalLock=null),t&&t.setActive("whileDrag",!1)}updateAxis(e,t,n){const{drag:r}=this.getProps();if(!n||!ei(e,r,this.currentDirection))return;const o=this.getAxisMotionValue(e);let a=this.originPoint[e]+n[e];this.constraints&&this.constraints[e]&&(a=function(e,{min:t,max:n},r){return void 0!==t&&e<t?e=r?Tr(t,e,r.min):Math.max(e,t):void 0!==n&&e>n&&(e=r?Tr(n,e,r.max):Math.min(e,n)),e}(a,this.constraints[e],this.elastic[e])),o.set(a)}resolveConstraints(){const{dragConstraints:e,dragElastic:t}=this.getProps(),{layout:n}=this.visualElement.projection||{},r=this.constraints;e&&Qe(e)?this.constraints||(this.constraints=this.resolveRefConstraints()):this.constraints=!(!e||!n)&&function(e,{top:t,left:n,bottom:r,right:o}){return{x:Na(e.x,n,o),y:Na(e.y,t,r)}}(n.layoutBox,e),this.elastic=function(e=Ba){return!1===e?e=0:!0===e&&(e=Ba),{x:Pa(e,"left","right"),y:Pa(e,"top","bottom")}}(t),r!==this.constraints&&n&&this.constraints&&!this.hasMutatedConstraints&&Fa((e=>{this.getAxisMotionValue(e)&&(this.constraints[e]=function(e,t){const n={};return void 0!==t.min&&(n.min=t.min-e.min),void 0!==t.max&&(n.max=t.max-e.min),n}(n.layoutBox[e],this.constraints[e]))}))}resolveRefConstraints(){const{dragConstraints:e,onMeasureDragConstraints:t}=this.getProps();if(!e||!Qe(e))return!1;const n=e.current;er(null!==n,"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");const{projection:r}=this.visualElement;if(!r||!r.layout)return!1;const o=function(e,t,n){const r=Xa(e,n),{scroll:o}=t;return o&&(Ya(r.x,o.offset.x),Ya(r.y,o.offset.y)),r}(n,r.root,this.visualElement.getTransformPagePoint());let a=function(e,t){return{x:_a(e.x,t.x),y:_a(e.y,t.y)}}(r.layout.layoutBox,o);if(t){const e=t(function({x:e,y:t}){return{top:t.min,right:e.max,bottom:t.max,left:e.min}}(a));this.hasMutatedConstraints=!!e,e&&(a=La(e))}return a}startAnimation(e){const{drag:t,dragMomentum:n,dragElastic:r,dragTransition:o,dragSnapToOrigin:a,onDragTransitionEnd:i}=this.getProps(),l=this.constraints||{},s=Fa((i=>{if(!ei(i,t,this.currentDirection))return;let s=l&&l[i]||{};a&&(s={min:0,max:0});const u=r?200:1e6,c=r?40:1e7,d={type:"inertia",velocity:n?e[i]:0,bounceStiffness:u,bounceDamping:c,timeConstant:750,restDelta:1,restSpeed:10,...o,...s};return this.startAxisValueAnimation(i,d)}));return Promise.all(s).then(i)}startAxisValueAnimation(e,t){const n=this.getAxisMotionValue(e);return n.start(Io(e,n,0,t))}stopAnimation(){Fa((e=>this.getAxisMotionValue(e).stop()))}getAxisMotionValue(e){const t="_drag"+e.toUpperCase(),n=this.visualElement.getProps();return n[t]||this.visualElement.getValue(e,(n.initial?n.initial[e]:void 0)||0)}snapToCursor(e){Fa((t=>{const{drag:n}=this.getProps();if(!ei(t,n,this.currentDirection))return;const{projection:r}=this.visualElement,o=this.getAxisMotionValue(t);if(r&&r.layout){const{min:n,max:a}=r.layout.layoutBox[t];o.set(e[t]-Tr(n,a,.5))}}))}scalePositionWithinConstraints(){if(!this.visualElement.current)return;const{drag:e,dragConstraints:t}=this.getProps(),{projection:n}=this.visualElement;if(!Qe(t)||!n||!this.constraints)return;this.stopAnimation();const r={x:0,y:0};Fa((e=>{const t=this.getAxisMotionValue(e);if(t){const n=t.get();r[e]=function(e,t){let n=.5;const r=xa(e),o=xa(t);return o>r?n=Xr(t.min,t.max-r,e.min):r>o&&(n=Xr(e.min,e.max-o,t.min)),kt(0,1,n)}({min:n,max:n},this.constraints[e])}}));const{transformTemplate:o}=this.visualElement.getProps();this.visualElement.current.style.transform=o?o({},""):"none",n.root&&n.root.updateScroll(),n.updateLayout(),this.resolveConstraints(),Fa((t=>{if(!ei(t,e,null))return;const n=this.getAxisMotionValue(t),{min:o,max:a}=this.constraints[t];n.set(Tr(o,a,r[t]))}))}addListeners(){if(!this.visualElement.current)return;Za.set(this.visualElement,this);const e=On(this.visualElement.current,"pointerdown",(e=>{const{drag:t,dragListener:n=!0}=this.getProps();t&&n&&this.start(e)})),t=()=>{const{dragConstraints:e}=this.getProps();Qe(e)&&(this.constraints=this.resolveRefConstraints())},{projection:n}=this.visualElement,r=n.addEventListener("measure",t);n&&!n.layout&&(n.root&&n.root.updateScroll(),n.updateLayout()),t();const o=_n(window,"resize",(()=>this.scalePositionWithinConstraints())),a=n.addEventListener("didUpdate",(({delta:e,hasLayoutChanged:t})=>{this.isDragging&&t&&(Fa((t=>{const n=this.getAxisMotionValue(t);n&&(this.originPoint[t]+=e[t].translate,n.set(n.get()+e[t].translate))})),this.visualElement.render())}));return()=>{o(),e(),r(),a&&a()}}getProps(){const e=this.visualElement.getProps(),{drag:t=!1,dragDirectionLock:n=!1,dragPropagation:r=!1,dragConstraints:o=!1,dragElastic:a=Ba,dragMomentum:i=!0}=e;return{...e,drag:t,dragDirectionLock:n,dragPropagation:r,dragConstraints:o,dragElastic:a,dragMomentum:i}}}function ei(e,t,n){return!(!0!==t&&t!==e||null!==n&&n!==e)}const ti=e=>(t,n)=>{e&&wn.update((()=>e(t,n)))},ni={hasAnimatedSinceResize:!0,hasEverUpdated:!1};function ri(e,t){return t.max===t.min?0:e/(t.max-t.min)*100}const oi={correct:(e,t)=>{if(!t.target)return e;if("string"==typeof e){if(!Mt.test(e))return e;e=parseFloat(e)}return`${ri(e,t.target.x)}% ${ri(e,t.target.y)}%`}},ai={correct:(e,{treeScale:t,projectionDelta:n})=>{const r=e,o=Hr.parse(e);if(o.length>5)return r;const a=Hr.createTransformer(e),i="number"!=typeof o[0]?1:0,l=n.x.scale*t.x,s=n.y.scale*t.y;o[0+i]/=l,o[1+i]/=s;const u=Tr(l,s,.5);return"number"==typeof o[2+i]&&(o[2+i]/=u),"number"==typeof o[3+i]&&(o[3+i]/=u),a(o)}};class ii extends n.Component{componentDidMount(){const{visualElement:e,layoutGroup:t,switchLayoutGroup:n,layoutId:r}=this.props,{projection:o}=e;var a;a=si,Object.assign(mt,a),o&&(t.group&&t.group.add(o),n&&n.register&&r&&n.register(o),o.root.didUpdate(),o.addEventListener("animationComplete",(()=>{this.safeToRemove()})),o.setOptions({...o.options,onExitComplete:()=>this.safeToRemove()})),ni.hasEverUpdated=!0}getSnapshotBeforeUpdate(e){const{layoutDependency:t,visualElement:n,drag:r,isPresent:o}=this.props,a=n.projection;return a?(a.isPresent=o,r||e.layoutDependency!==t||void 0===t?a.willUpdate():this.safeToRemove(),e.isPresent!==o&&(o?a.promote():a.relegate()||wn.postRender((()=>{const e=a.getStack();e&&e.members.length||this.safeToRemove()}))),null):null}componentDidUpdate(){const{projection:e}=this.props.visualElement;e&&(e.root.didUpdate(),queueMicrotask((()=>{!e.currentAnimation&&e.isLead()&&this.safeToRemove()})))}componentWillUnmount(){const{visualElement:e,layoutGroup:t,switchLayoutGroup:n}=this.props,{projection:r}=e;r&&(r.scheduleCheckAfterUnmount(),t&&t.group&&t.group.remove(r),n&&n.deregister&&n.deregister(r))}safeToRemove(){const{safeToRemove:e}=this.props;e&&e()}render(){return null}}function li(e){const[t,r]=function(){const e=(0,n.useContext)(Ye);if(null===e)return[!0,null];const{isPresent:t,onExitComplete:r,register:o}=e,a=(0,n.useId)();return(0,n.useEffect)((()=>o(a)),[]),!t&&r?[!1,()=>r&&r(a)]:[!0]}(),o=(0,n.useContext)(it);return n.createElement(ii,{...e,layoutGroup:o,switchLayoutGroup:(0,n.useContext)(lt),isPresent:t,safeToRemove:r})}const si={borderRadius:{...oi,applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]},borderTopLeftRadius:oi,borderTopRightRadius:oi,borderBottomLeftRadius:oi,borderBottomRightRadius:oi,boxShadow:ai},ui=["TopLeft","TopRight","BottomLeft","BottomRight"],ci=ui.length,di=e=>"string"==typeof e?parseFloat(e):e,pi=e=>"number"==typeof e||Mt.test(e);function fi(e,t){return void 0!==e[t]?e[t]:e.borderRadius}const mi=gi(0,.5,yr),hi=gi(.5,.95,bn);function gi(e,t,n){return r=>r<e?0:r>t?1:n(Xr(e,t,r))}function yi(e,t){e.min=t.min,e.max=t.max}function vi(e,t){yi(e.x,t.x),yi(e.y,t.y)}function bi(e,t,n,r,o){return e=Va(e-=t,1/n,r),void 0!==o&&(e=Va(e,1/o,r)),e}function xi(e,t,[n,r,o],a,i){!function(e,t=0,n=1,r=.5,o,a=e,i=e){if(jt.test(t)&&(t=parseFloat(t),t=Tr(i.min,i.max,t/100)-i.min),"number"!=typeof t)return;let l=Tr(a.min,a.max,r);e===a&&(l-=t),e.min=bi(e.min,t,n,l,o),e.max=bi(e.max,t,n,l,o)}(e,t[n],t[r],t[o],t.scale,a,i)}const Ai=["x","scaleX","originX"],wi=["y","scaleY","originY"];function Ci(e,t,n,r){xi(e.x,t,Ai,n?n.x:void 0,r?r.x:void 0),xi(e.y,t,wi,n?n.y:void 0,r?r.y:void 0)}function Ei(e){return 0===e.translate&&1===e.scale}function ki(e){return Ei(e.x)&&Ei(e.y)}function Si(e,t){return Math.round(e.x.min)===Math.round(t.x.min)&&Math.round(e.x.max)===Math.round(t.x.max)&&Math.round(e.y.min)===Math.round(t.y.min)&&Math.round(e.y.max)===Math.round(t.y.max)}function Ni(e){return xa(e.x)/xa(e.y)}class _i{constructor(){this.members=[]}add(e){Uo(this.members,e),e.scheduleRender()}remove(e){if(Wo(this.members,e),e===this.prevLead&&(this.prevLead=void 0),e===this.lead){const e=this.members[this.members.length-1];e&&this.promote(e)}}relegate(e){const t=this.members.findIndex((t=>e===t));if(0===t)return!1;let n;for(let e=t;e>=0;e--){const t=this.members[e];if(!1!==t.isPresent){n=t;break}}return!!n&&(this.promote(n),!0)}promote(e,t){const n=this.lead;if(e!==n&&(this.prevLead=n,this.lead=e,e.show(),n)){n.instance&&n.scheduleRender(),e.scheduleRender(),e.resumeFrom=n,t&&(e.resumeFrom.preserveOpacity=!0),n.snapshot&&(e.snapshot=n.snapshot,e.snapshot.latestValues=n.animationValues||n.latestValues),e.root&&e.root.isUpdating&&(e.isLayoutDirty=!0);const{crossfade:r}=e.options;!1===r&&n.hide()}}exitAnimationComplete(){this.members.forEach((e=>{const{options:t,resumingFrom:n}=e;t.onExitComplete&&t.onExitComplete(),n&&n.options.onExitComplete&&n.options.onExitComplete()}))}scheduleRender(){this.members.forEach((e=>{e.instance&&e.scheduleRender(!1)}))}removeLeadSnapshot(){this.lead&&this.lead.snapshot&&(this.lead.snapshot=void 0)}}function Bi(e,t,n){let r="";const o=e.x.translate/t.x,a=e.y.translate/t.y;if((o||a)&&(r=`translate3d(${o}px, ${a}px, 0) `),1===t.x&&1===t.y||(r+=`scale(${1/t.x}, ${1/t.y}) `),n){const{rotate:e,rotateX:t,rotateY:o}=n;e&&(r+=`rotate(${e}deg) `),t&&(r+=`rotateX(${t}deg) `),o&&(r+=`rotateY(${o}deg) `)}const i=e.x.scale*t.x,l=e.y.scale*t.y;return 1===i&&1===l||(r+=`scale(${i}, ${l})`),r||"none"}const Pi=(e,t)=>e.depth-t.depth;class Ti{constructor(){this.children=[],this.isDirty=!1}add(e){Uo(this.children,e),this.isDirty=!0}remove(e){Wo(this.children,e),this.isDirty=!0}forEach(e){this.isDirty&&this.children.sort(Pi),this.isDirty=!1,this.children.forEach(e)}}const Oi=["","X","Y","Z"];let Ri=0;const Fi={type:"projectionFrame",totalNodes:0,resolvedTargetDeltas:0,recalculatedProjection:0};function Li({attachResizeListener:e,defaultParent:t,measureScroll:n,checkIsScrollRoot:r,resetTransform:o}){return class{constructor(e={},n=(null==t?void 0:t())){this.id=Ri++,this.animationId=0,this.children=new Set,this.options={},this.isTreeAnimating=!1,this.isAnimationBlocked=!1,this.isLayoutDirty=!1,this.isProjectionDirty=!1,this.isSharedProjectionDirty=!1,this.isTransformDirty=!1,this.updateManuallyBlocked=!1,this.updateBlockedByResize=!1,this.isUpdating=!1,this.isSVG=!1,this.needsReset=!1,this.shouldResetTransform=!1,this.treeScale={x:1,y:1},this.eventHandlers=new Map,this.hasTreeAnimated=!1,this.updateScheduled=!1,this.checkUpdateFailed=()=>{this.isUpdating&&(this.isUpdating=!1,this.clearAllSnapshots())},this.updateProjection=()=>{var e;Fi.totalNodes=Fi.resolvedTargetDeltas=Fi.recalculatedProjection=0,this.nodes.forEach(Di),this.nodes.forEach(Hi),this.nodes.forEach(Yi),this.nodes.forEach(zi),e=Fi,window.MotionDebug&&window.MotionDebug.record(e)},this.hasProjected=!1,this.isVisible=!0,this.animationProgress=0,this.sharedNodes=new Map,this.latestValues=e,this.root=n?n.root||n:this,this.path=n?[...n.path,n]:[],this.parent=n,this.depth=n?n.depth+1:0;for(let e=0;e<this.path.length;e++)this.path[e].shouldResetTransform=!0;this.root===this&&(this.nodes=new Ti)}addEventListener(e,t){return this.eventHandlers.has(e)||this.eventHandlers.set(e,new Ho),this.eventHandlers.get(e).add(t)}notifyListeners(e,...t){const n=this.eventHandlers.get(e);n&&n.notify(...t)}hasListeners(e){return this.eventHandlers.has(e)}mount(t,n=this.root.hasTreeAnimated){if(this.instance)return;var r;this.isSVG=(r=t)instanceof SVGElement&&"svg"!==r.tagName,this.instance=t;const{layoutId:o,layout:a,visualElement:i}=this.options;if(i&&!i.current&&i.mount(t),this.root.nodes.add(this),this.parent&&this.parent.children.add(this),n&&(a||o)&&(this.isLayoutDirty=!0),e){let n;const r=()=>this.root.updateBlockedByResize=!1;e(t,(()=>{this.root.updateBlockedByResize=!0,n&&n(),n=function(e,t){const n=performance.now(),r=({timestamp:t})=>{const o=t-n;o>=250&&(Cn(r),e(o-250))};return wn.read(r,!0),()=>Cn(r)}(r),ni.hasAnimatedSinceResize&&(ni.hasAnimatedSinceResize=!1,this.nodes.forEach(Wi))}))}o&&this.root.registerSharedNode(o,this),!1!==this.options.animate&&i&&(o||a)&&this.addEventListener("didUpdate",(({delta:e,hasLayoutChanged:t,hasRelativeTargetChanged:n,layout:r})=>{if(this.isTreeAnimationBlocked())return this.target=void 0,void(this.relativeTarget=void 0);const o=this.options.transition||i.getDefaultTransition()||Zi,{onLayoutAnimationStart:a,onLayoutAnimationComplete:l}=i.getProps(),s=!this.targetLayout||!Si(this.targetLayout,r)||n,u=!t&&n;if(this.options.layoutRoot||this.resumeFrom&&this.resumeFrom.instance||u||t&&(s||!this.currentAnimation)){this.resumeFrom&&(this.resumingFrom=this.resumeFrom,this.resumingFrom.resumingFrom=void 0),this.setAnimationOrigin(e,u);const t={...zo(o,"layout"),onPlay:a,onComplete:l};(i.shouldReduceMotion||this.options.layoutRoot)&&(t.delay=0,t.type=!1),this.startAnimation(t)}else t||Wi(this),this.isLead()&&this.options.onExitComplete&&this.options.onExitComplete();this.targetLayout=r}))}unmount(){this.options.layoutId&&this.willUpdate(),this.root.nodes.remove(this);const e=this.getStack();e&&e.remove(this),this.parent&&this.parent.children.delete(this),this.instance=void 0,Cn(this.updateProjection)}blockUpdate(){this.updateManuallyBlocked=!0}unblockUpdate(){this.updateManuallyBlocked=!1}isUpdateBlocked(){return this.updateManuallyBlocked||this.updateBlockedByResize}isTreeAnimationBlocked(){return this.isAnimationBlocked||this.parent&&this.parent.isTreeAnimationBlocked()||!1}startUpdate(){this.isUpdateBlocked()||(this.isUpdating=!0,this.nodes&&this.nodes.forEach(qi),this.animationId++)}getTransformTemplate(){const{visualElement:e}=this.options;return e&&e.getProps().transformTemplate}willUpdate(e=!0){if(this.root.hasTreeAnimated=!0,this.root.isUpdateBlocked())return void(this.options.onExitComplete&&this.options.onExitComplete());if(!this.root.isUpdating&&this.root.startUpdate(),this.isLayoutDirty)return;this.isLayoutDirty=!0;for(let e=0;e<this.path.length;e++){const t=this.path[e];t.shouldResetTransform=!0,t.updateScroll("snapshot"),t.options.layoutRoot&&t.willUpdate(!1)}const{layoutId:t,layout:n}=this.options;if(void 0===t&&!n)return;const r=this.getTransformTemplate();this.prevTransformTemplateValue=r?r(this.latestValues,""):void 0,this.updateSnapshot(),e&&this.notifyListeners("willUpdate")}update(){if(this.updateScheduled=!1,this.isUpdateBlocked())return this.unblockUpdate(),this.clearAllSnapshots(),void this.nodes.forEach(Vi);this.isUpdating||this.nodes.forEach($i),this.isUpdating=!1,this.nodes.forEach(Ui),this.nodes.forEach(ji),this.nodes.forEach(Mi),this.clearAllSnapshots();const e=performance.now();En.delta=kt(0,1e3/60,e-En.timestamp),En.timestamp=e,En.isProcessing=!0,kn.update.process(En),kn.preRender.process(En),kn.render.process(En),En.isProcessing=!1}didUpdate(){this.updateScheduled||(this.updateScheduled=!0,queueMicrotask((()=>this.update())))}clearAllSnapshots(){this.nodes.forEach(Ii),this.sharedNodes.forEach(Ki)}scheduleUpdateProjection(){wn.preRender(this.updateProjection,!1,!0)}scheduleCheckAfterUnmount(){wn.postRender((()=>{this.isLayoutDirty?this.root.didUpdate():this.root.checkUpdateFailed()}))}updateSnapshot(){!this.snapshot&&this.instance&&(this.snapshot=this.measure())}updateLayout(){if(!this.instance)return;if(this.updateScroll(),!(this.options.alwaysMeasureLayout&&this.isLead()||this.isLayoutDirty))return;if(this.resumeFrom&&!this.resumeFrom.instance)for(let e=0;e<this.path.length;e++)this.path[e].updateScroll();const e=this.layout;this.layout=this.measure(!1),this.layoutCorrected=Ra(),this.isLayoutDirty=!1,this.projectionDelta=void 0,this.notifyListeners("measure",this.layout.layoutBox);const{visualElement:t}=this.options;t&&t.notify("LayoutMeasure",this.layout.layoutBox,e?e.layoutBox:void 0)}updateScroll(e="measure"){let t=Boolean(this.options.layoutScroll&&this.instance);this.scroll&&this.scroll.animationId===this.root.animationId&&this.scroll.phase===e&&(t=!1),t&&(this.scroll={animationId:this.root.animationId,phase:e,isRoot:r(this.instance),offset:n(this.instance)})}resetTransform(){if(!o)return;const e=this.isLayoutDirty||this.shouldResetTransform,t=this.projectionDelta&&!ki(this.projectionDelta),n=this.getTransformTemplate(),r=n?n(this.latestValues,""):void 0,a=r!==this.prevTransformTemplateValue;e&&(t||Da(this.latestValues)||a)&&(o(this.instance,r),this.shouldResetTransform=!1,this.scheduleRender())}measure(e=!0){const t=this.measurePageBox();let n=this.removeElementScroll(t);var r;return e&&(n=this.removeTransform(n)),tl((r=n).x),tl(r.y),{animationId:this.root.animationId,measuredBox:t,layoutBox:n,latestValues:{},source:this.id}}measurePageBox(){const{visualElement:e}=this.options;if(!e)return Ra();const t=e.measureViewportBox(),{scroll:n}=this.root;return n&&(Ya(t.x,n.offset.x),Ya(t.y,n.offset.y)),t}removeElementScroll(e){const t=Ra();vi(t,e);for(let n=0;n<this.path.length;n++){const r=this.path[n],{scroll:o,options:a}=r;if(r!==this.root&&o&&a.layoutScroll){if(o.isRoot){vi(t,e);const{scroll:n}=this.root;n&&(Ya(t.x,-n.offset.x),Ya(t.y,-n.offset.y))}Ya(t.x,o.offset.x),Ya(t.y,o.offset.y)}}return t}applyTransform(e,t=!1){const n=Ra();vi(n,e);for(let e=0;e<this.path.length;e++){const r=this.path[e];!t&&r.options.layoutScroll&&r.scroll&&r!==r.root&&Qa(n,{x:-r.scroll.offset.x,y:-r.scroll.offset.y}),Da(r.latestValues)&&Qa(n,r.latestValues)}return Da(this.latestValues)&&Qa(n,this.latestValues),n}removeTransform(e){const t=Ra();vi(t,e);for(let e=0;e<this.path.length;e++){const n=this.path[e];if(!n.instance)continue;if(!Da(n.latestValues))continue;Ma(n.latestValues)&&n.updateSnapshot();const r=Ra();vi(r,n.measurePageBox()),Ci(t,n.latestValues,n.snapshot?n.snapshot.layoutBox:void 0,r)}return Da(this.latestValues)&&Ci(t,this.latestValues),t}setTargetDelta(e){this.targetDelta=e,this.root.scheduleUpdateProjection(),this.isProjectionDirty=!0}setOptions(e){this.options={...this.options,...e,crossfade:void 0===e.crossfade||e.crossfade}}clearMeasurements(){this.scroll=void 0,this.layout=void 0,this.snapshot=void 0,this.prevTransformTemplateValue=void 0,this.targetDelta=void 0,this.target=void 0,this.isLayoutDirty=!1}forceRelativeParentToResolveTarget(){this.relativeParent&&this.relativeParent.resolvedRelativeTargetAt!==En.timestamp&&this.relativeParent.resolveTargetDelta(!0)}resolveTargetDelta(e=!1){var t;const n=this.getLead();this.isProjectionDirty||(this.isProjectionDirty=n.isProjectionDirty),this.isTransformDirty||(this.isTransformDirty=n.isTransformDirty),this.isSharedProjectionDirty||(this.isSharedProjectionDirty=n.isSharedProjectionDirty);const r=Boolean(this.resumingFrom)||this!==n;if(!(e||r&&this.isSharedProjectionDirty||this.isProjectionDirty||(null===(t=this.parent)||void 0===t?void 0:t.isProjectionDirty)||this.attemptToResolveRelativeTarget))return;const{layout:o,layoutId:a}=this.options;if(this.layout&&(o||a)){if(this.resolvedRelativeTargetAt=En.timestamp,!this.targetDelta&&!this.relativeTarget){const e=this.getClosestProjectingParent();e&&e.layout&&1!==this.animationProgress?(this.relativeParent=e,this.forceRelativeParentToResolveTarget(),this.relativeTarget=Ra(),this.relativeTargetOrigin=Ra(),Sa(this.relativeTargetOrigin,this.layout.layoutBox,e.layout.layoutBox),vi(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}if(this.relativeTarget||this.targetDelta){var i,l,s;if(this.target||(this.target=Ra(),this.targetWithTransforms=Ra()),this.relativeTarget&&this.relativeTargetOrigin&&this.relativeParent&&this.relativeParent.target?(this.forceRelativeParentToResolveTarget(),i=this.target,l=this.relativeTarget,s=this.relativeParent.target,Ea(i.x,l.x,s.x),Ea(i.y,l.y,s.y)):this.targetDelta?(Boolean(this.resumingFrom)?this.target=this.applyTransform(this.layout.layoutBox):vi(this.target,this.layout.layoutBox),Wa(this.target,this.targetDelta)):vi(this.target,this.layout.layoutBox),this.attemptToResolveRelativeTarget){this.attemptToResolveRelativeTarget=!1;const e=this.getClosestProjectingParent();e&&Boolean(e.resumingFrom)===Boolean(this.resumingFrom)&&!e.options.layoutScroll&&e.target&&1!==this.animationProgress?(this.relativeParent=e,this.forceRelativeParentToResolveTarget(),this.relativeTarget=Ra(),this.relativeTargetOrigin=Ra(),Sa(this.relativeTargetOrigin,this.target,e.target),vi(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}Fi.resolvedTargetDeltas++}}}getClosestProjectingParent(){if(this.parent&&!Ma(this.parent.latestValues)&&!za(this.parent.latestValues))return this.parent.isProjecting()?this.parent:this.parent.getClosestProjectingParent()}isProjecting(){return Boolean((this.relativeTarget||this.targetDelta||this.options.layoutRoot)&&this.layout)}calcProjection(){var e;const t=this.getLead(),n=Boolean(this.resumingFrom)||this!==t;let r=!0;if((this.isProjectionDirty||(null===(e=this.parent)||void 0===e?void 0:e.isProjectionDirty))&&(r=!1),n&&(this.isSharedProjectionDirty||this.isTransformDirty)&&(r=!1),this.resolvedRelativeTargetAt===En.timestamp&&(r=!1),r)return;const{layout:o,layoutId:a}=this.options;if(this.isTreeAnimating=Boolean(this.parent&&this.parent.isTreeAnimating||this.currentAnimation||this.pendingAnimation),this.isTreeAnimating||(this.targetDelta=this.relativeTarget=void 0),!this.layout||!o&&!a)return;vi(this.layoutCorrected,this.layout.layoutBox);const i=this.treeScale.x,l=this.treeScale.y;!function(e,t,n,r=!1){const o=n.length;if(!o)return;let a,i;t.x=t.y=1;for(let l=0;l<o;l++){a=n[l],i=a.projectionDelta;const o=a.instance;o&&o.style&&"contents"===o.style.display||(r&&a.options.layoutScroll&&a.scroll&&a!==a.root&&Qa(e,{x:-a.scroll.offset.x,y:-a.scroll.offset.y}),i&&(t.x*=i.x.scale,t.y*=i.y.scale,Wa(e,i)),r&&Da(a.latestValues)&&Qa(e,a.latestValues))}t.x=Ha(t.x),t.y=Ha(t.y)}(this.layoutCorrected,this.treeScale,this.path,n),!t.layout||t.target||1===this.treeScale.x&&1===this.treeScale.y||(t.target=t.layout.layoutBox);const{target:s}=t;if(!s)return void(this.projectionTransform&&(this.projectionDelta=Oa(),this.projectionTransform="none",this.scheduleRender()));this.projectionDelta||(this.projectionDelta=Oa(),this.projectionDeltaWithTransform=Oa());const u=this.projectionTransform;Ca(this.projectionDelta,this.layoutCorrected,s,this.latestValues),this.projectionTransform=Bi(this.projectionDelta,this.treeScale),this.projectionTransform===u&&this.treeScale.x===i&&this.treeScale.y===l||(this.hasProjected=!0,this.scheduleRender(),this.notifyListeners("projectionUpdate",s)),Fi.recalculatedProjection++}hide(){this.isVisible=!1}show(){this.isVisible=!0}scheduleRender(e=!0){if(this.options.scheduleRender&&this.options.scheduleRender(),e){const e=this.getStack();e&&e.scheduleRender()}this.resumingFrom&&!this.resumingFrom.instance&&(this.resumingFrom=void 0)}setAnimationOrigin(e,t=!1){const n=this.snapshot,r=n?n.latestValues:{},o={...this.latestValues},a=Oa();this.relativeParent&&this.relativeParent.options.layoutRoot||(this.relativeTarget=this.relativeTargetOrigin=void 0),this.attemptToResolveRelativeTarget=!t;const i=Ra(),l=(n?n.source:void 0)!==(this.layout?this.layout.source:void 0),s=this.getStack(),u=!s||s.members.length<=1,c=Boolean(l&&!u&&!0===this.options.crossfade&&!this.path.some(Xi));let d;this.animationProgress=0,this.mixTargetDelta=t=>{const n=t/1e3;var s,p,f,m,h,g;Gi(a.x,e.x,n),Gi(a.y,e.y,n),this.setTargetDelta(a),this.relativeTarget&&this.relativeTargetOrigin&&this.layout&&this.relativeParent&&this.relativeParent.layout&&(Sa(i,this.layout.layoutBox,this.relativeParent.layout.layoutBox),f=this.relativeTarget,m=this.relativeTargetOrigin,h=i,g=n,Qi(f.x,m.x,h.x,g),Qi(f.y,m.y,h.y,g),d&&(s=this.relativeTarget,p=d,s.x.min===p.x.min&&s.x.max===p.x.max&&s.y.min===p.y.min&&s.y.max===p.y.max)&&(this.isProjectionDirty=!1),d||(d=Ra()),vi(d,this.relativeTarget)),l&&(this.animationValues=o,function(e,t,n,r,o,a){o?(e.opacity=Tr(0,void 0!==n.opacity?n.opacity:1,mi(r)),e.opacityExit=Tr(void 0!==t.opacity?t.opacity:1,0,hi(r))):a&&(e.opacity=Tr(void 0!==t.opacity?t.opacity:1,void 0!==n.opacity?n.opacity:1,r));for(let o=0;o<ci;o++){const a=`border${ui[o]}Radius`;let i=fi(t,a),l=fi(n,a);void 0===i&&void 0===l||(i||(i=0),l||(l=0),0===i||0===l||pi(i)===pi(l)?(e[a]=Math.max(Tr(di(i),di(l),r),0),(jt.test(l)||jt.test(i))&&(e[a]+="%")):e[a]=l)}(t.rotate||n.rotate)&&(e.rotate=Tr(t.rotate||0,n.rotate||0,r))}(o,r,this.latestValues,n,c,u)),this.root.scheduleUpdateProjection(),this.scheduleRender(),this.animationProgress=n},this.mixTargetDelta(this.options.layoutRoot?1e3:0)}startAnimation(e){this.notifyListeners("animationStart"),this.currentAnimation&&this.currentAnimation.stop(),this.resumingFrom&&this.resumingFrom.currentAnimation&&this.resumingFrom.currentAnimation.stop(),this.pendingAnimation&&(Cn(this.pendingAnimation),this.pendingAnimation=void 0),this.pendingAnimation=wn.update((()=>{ni.hasAnimatedSinceResize=!0,this.currentAnimation=function(e,t,n){const r=vt(0)?0:Ko(0);return r.start(Io("",r,1e3,n)),r.animation}(0,0,{...e,onUpdate:t=>{this.mixTargetDelta(t),e.onUpdate&&e.onUpdate(t)},onComplete:()=>{e.onComplete&&e.onComplete(),this.completeAnimation()}}),this.resumingFrom&&(this.resumingFrom.currentAnimation=this.currentAnimation),this.pendingAnimation=void 0}))}completeAnimation(){this.resumingFrom&&(this.resumingFrom.currentAnimation=void 0,this.resumingFrom.preserveOpacity=void 0);const e=this.getStack();e&&e.exitAnimationComplete(),this.resumingFrom=this.currentAnimation=this.animationValues=void 0,this.notifyListeners("animationComplete")}finishAnimation(){this.currentAnimation&&(this.mixTargetDelta&&this.mixTargetDelta(1e3),this.currentAnimation.stop()),this.completeAnimation()}applyTransformsToTarget(){const e=this.getLead();let{targetWithTransforms:t,target:n,layout:r,latestValues:o}=e;if(t&&n&&r){if(this!==e&&this.layout&&r&&nl(this.options.animationType,this.layout.layoutBox,r.layoutBox)){n=this.target||Ra();const t=xa(this.layout.layoutBox.x);n.x.min=e.target.x.min,n.x.max=n.x.min+t;const r=xa(this.layout.layoutBox.y);n.y.min=e.target.y.min,n.y.max=n.y.min+r}vi(t,n),Qa(t,o),Ca(this.projectionDeltaWithTransform,this.layoutCorrected,t,o)}}registerSharedNode(e,t){this.sharedNodes.has(e)||this.sharedNodes.set(e,new _i),this.sharedNodes.get(e).add(t);const n=t.options.initialPromotionConfig;t.promote({transition:n?n.transition:void 0,preserveFollowOpacity:n&&n.shouldPreserveFollowOpacity?n.shouldPreserveFollowOpacity(t):void 0})}isLead(){const e=this.getStack();return!e||e.lead===this}getLead(){var e;const{layoutId:t}=this.options;return t&&(null===(e=this.getStack())||void 0===e?void 0:e.lead)||this}getPrevLead(){var e;const{layoutId:t}=this.options;return t?null===(e=this.getStack())||void 0===e?void 0:e.prevLead:void 0}getStack(){const{layoutId:e}=this.options;if(e)return this.root.sharedNodes.get(e)}promote({needsReset:e,transition:t,preserveFollowOpacity:n}={}){const r=this.getStack();r&&r.promote(this,n),e&&(this.projectionDelta=void 0,this.needsReset=!0),t&&this.setOptions({transition:t})}relegate(){const e=this.getStack();return!!e&&e.relegate(this)}resetRotation(){const{visualElement:e}=this.options;if(!e)return;let t=!1;const{latestValues:n}=e;if((n.rotate||n.rotateX||n.rotateY||n.rotateZ)&&(t=!0),!t)return;const r={};for(let t=0;t<Oi.length;t++){const o="rotate"+Oi[t];n[o]&&(r[o]=n[o],e.setStaticValue(o,0))}e.render();for(const t in r)e.setStaticValue(t,r[t]);e.scheduleRender()}getProjectionStyles(e={}){var t,n;const r={};if(!this.instance||this.isSVG)return r;if(!this.isVisible)return{visibility:"hidden"};r.visibility="";const o=this.getTransformTemplate();if(this.needsReset)return this.needsReset=!1,r.opacity="",r.pointerEvents=gn(e.pointerEvents)||"",r.transform=o?o(this.latestValues,""):"none",r;const a=this.getLead();if(!this.projectionDelta||!this.layout||!a.target){const t={};return this.options.layoutId&&(t.opacity=void 0!==this.latestValues.opacity?this.latestValues.opacity:1,t.pointerEvents=gn(e.pointerEvents)||""),this.hasProjected&&!Da(this.latestValues)&&(t.transform=o?o({},""):"none",this.hasProjected=!1),t}const i=a.animationValues||a.latestValues;this.applyTransformsToTarget(),r.transform=Bi(this.projectionDeltaWithTransform,this.treeScale,i),o&&(r.transform=o(i,r.transform));const{x:l,y:s}=this.projectionDelta;r.transformOrigin=`${100*l.origin}% ${100*s.origin}% 0`,a.animationValues?r.opacity=a===this?null!==(n=null!==(t=i.opacity)&&void 0!==t?t:this.latestValues.opacity)&&void 0!==n?n:1:this.preserveOpacity?this.latestValues.opacity:i.opacityExit:r.opacity=a===this?void 0!==i.opacity?i.opacity:"":void 0!==i.opacityExit?i.opacityExit:0;for(const e in mt){if(void 0===i[e])continue;const{correct:t,applyTo:n}=mt[e],o="none"===r.transform?i[e]:t(i[e],a);if(n){const e=n.length;for(let t=0;t<e;t++)r[n[t]]=o}else r[e]=o}return this.options.layoutId&&(r.pointerEvents=a===this?gn(e.pointerEvents)||"":"none"),r}clearSnapshot(){this.resumeFrom=this.snapshot=void 0}resetTree(){this.root.nodes.forEach((e=>{var t;return null===(t=e.currentAnimation)||void 0===t?void 0:t.stop()})),this.root.nodes.forEach(Vi),this.root.sharedNodes.clear()}}}function ji(e){e.updateLayout()}function Mi(e){var t;const n=(null===(t=e.resumeFrom)||void 0===t?void 0:t.snapshot)||e.snapshot;if(e.isLead()&&e.layout&&n&&e.hasListeners("didUpdate")){const{layoutBox:t,measuredBox:r}=e.layout,{animationType:o}=e.options,a=n.source!==e.layout.source;"size"===o?Fa((e=>{const r=a?n.measuredBox[e]:n.layoutBox[e],o=xa(r);r.min=t[e].min,r.max=r.min+o})):nl(o,n.layoutBox,t)&&Fa((r=>{const o=a?n.measuredBox[r]:n.layoutBox[r],i=xa(t[r]);o.max=o.min+i,e.relativeTarget&&!e.currentAnimation&&(e.isProjectionDirty=!0,e.relativeTarget[r].max=e.relativeTarget[r].min+i)}));const i=Oa();Ca(i,t,n.layoutBox);const l=Oa();a?Ca(l,e.applyTransform(r,!0),n.measuredBox):Ca(l,t,n.layoutBox);const s=!ki(i);let u=!1;if(!e.resumeFrom){const r=e.getClosestProjectingParent();if(r&&!r.resumeFrom){const{snapshot:o,layout:a}=r;if(o&&a){const i=Ra();Sa(i,n.layoutBox,o.layoutBox);const l=Ra();Sa(l,t,a.layoutBox),Si(i,l)||(u=!0),r.options.layoutRoot&&(e.relativeTarget=l,e.relativeTargetOrigin=i,e.relativeParent=r)}}}e.notifyListeners("didUpdate",{layout:t,snapshot:n,delta:l,layoutDelta:i,hasLayoutChanged:s,hasRelativeTargetChanged:u})}else if(e.isLead()){const{onExitComplete:t}=e.options;t&&t()}e.options.transition=void 0}function Di(e){Fi.totalNodes++,e.parent&&(e.isProjecting()||(e.isProjectionDirty=e.parent.isProjectionDirty),e.isSharedProjectionDirty||(e.isSharedProjectionDirty=Boolean(e.isProjectionDirty||e.parent.isProjectionDirty||e.parent.isSharedProjectionDirty)),e.isTransformDirty||(e.isTransformDirty=e.parent.isTransformDirty))}function zi(e){e.isProjectionDirty=e.isSharedProjectionDirty=e.isTransformDirty=!1}function Ii(e){e.clearSnapshot()}function Vi(e){e.clearMeasurements()}function $i(e){e.isLayoutDirty=!1}function Ui(e){const{visualElement:t}=e.options;t&&t.getProps().onBeforeLayoutMeasure&&t.notify("BeforeLayoutMeasure"),e.resetTransform()}function Wi(e){e.finishAnimation(),e.targetDelta=e.relativeTarget=e.target=void 0,e.isProjectionDirty=!0}function Hi(e){e.resolveTargetDelta()}function Yi(e){e.calcProjection()}function qi(e){e.resetRotation()}function Ki(e){e.removeLeadSnapshot()}function Gi(e,t,n){e.translate=Tr(t.translate,0,n),e.scale=Tr(t.scale,1,n),e.origin=t.origin,e.originPoint=t.originPoint}function Qi(e,t,n,r){e.min=Tr(t.min,n.min,r),e.max=Tr(t.max,n.max,r)}function Xi(e){return e.animationValues&&void 0!==e.animationValues.opacityExit}const Zi={duration:.45,ease:[.4,0,.1,1]},Ji=e=>"undefined"!=typeof navigator&&navigator.userAgent.toLowerCase().includes(e),el=Ji("applewebkit/")&&!Ji("chrome/")?Math.round:bn;function tl(e){e.min=el(e.min),e.max=el(e.max)}function nl(e,t,n){return"position"===e||"preserve-aspect"===e&&!Aa(Ni(t),Ni(n),.2)}const rl=Li({attachResizeListener:(e,t)=>_n(e,"resize",t),measureScroll:()=>({x:document.documentElement.scrollLeft||document.body.scrollLeft,y:document.documentElement.scrollTop||document.body.scrollTop}),checkIsScrollRoot:()=>!0}),ol={current:void 0},al=Li({measureScroll:e=>({x:e.scrollLeft,y:e.scrollTop}),defaultParent:()=>{if(!ol.current){const e=new rl({});e.mount(window),e.setOptions({layoutScroll:!0}),ol.current=e}return ol.current},resetTransform:(e,t)=>{e.style.transform=void 0!==t?t:"none"},checkIsScrollRoot:e=>Boolean("fixed"===window.getComputedStyle(e).position)}),il={pan:{Feature:class extends In{constructor(){super(...arguments),this.removePointerDownListener=bn}onPointerDown(e){this.session=new fa(e,this.createPanHandlers(),{transformPagePoint:this.node.getTransformPagePoint()})}createPanHandlers(){const{onPanSessionStart:e,onPanStart:t,onPan:n,onPanEnd:r}=this.node.getProps();return{onSessionStart:ti(e),onStart:ti(t),onMove:n,onEnd:(e,t)=>{delete this.session,r&&wn.update((()=>r(e,t)))}}}mount(){this.removePointerDownListener=On(this.node.current,"pointerdown",(e=>this.onPointerDown(e)))}update(){this.session&&this.session.updateHandlers(this.createPanHandlers())}unmount(){this.removePointerDownListener(),this.session&&this.session.end()}}},drag:{Feature:class extends In{constructor(e){super(e),this.removeGroupControls=bn,this.removeListeners=bn,this.controls=new Ja(e)}mount(){const{dragControls:e}=this.node.getProps();e&&(this.removeGroupControls=e.subscribe(this.controls)),this.removeListeners=this.controls.addListeners()||bn}unmount(){this.removeGroupControls(),this.removeListeners()}},ProjectionNode:al,MeasureLayout:li}},ll=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function sl(e,t,n=1){er(n<=4,`Max CSS variable fallback depth detected in property "${e}". This may indicate a circular fallback dependency.`);const[r,o]=function(e){const t=ll.exec(e);if(!t)return[,];const[,n,r]=t;return[n,r]}(e);if(!r)return;const a=window.getComputedStyle(t).getPropertyValue(r);if(a){const e=a.trim();return $o(e)?parseFloat(e):e}return Ct(o)?sl(o,t,n+1):o}const ul=new Set(["width","height","top","left","right","bottom","x","y","translateX","translateY"]),cl=e=>ul.has(e),dl=e=>e===St||e===Mt,pl=(e,t)=>parseFloat(e.split(", ")[t]),fl=(e,t)=>(n,{transform:r})=>{if("none"===r||!r)return 0;const o=r.match(/^matrix3d\((.+)\)$/);if(o)return pl(o[1],t);{const t=r.match(/^matrix\((.+)\)$/);return t?pl(t[1],e):0}},ml=new Set(["x","y","z"]),hl=ht.filter((e=>!ml.has(e))),gl={width:({x:e},{paddingLeft:t="0",paddingRight:n="0"})=>e.max-e.min-parseFloat(t)-parseFloat(n),height:({y:e},{paddingTop:t="0",paddingBottom:n="0"})=>e.max-e.min-parseFloat(t)-parseFloat(n),top:(e,{top:t})=>parseFloat(t),left:(e,{left:t})=>parseFloat(t),bottom:({y:e},{top:t})=>parseFloat(t)+(e.max-e.min),right:({x:e},{left:t})=>parseFloat(t)+(e.max-e.min),x:fl(4,13),y:fl(5,14)};gl.translateX=gl.x,gl.translateY=gl.y;function yl(e,t,n,r){return(e=>Object.keys(e).some(cl))(t)?((e,t,n={},r={})=>{t={...t},r={...r};const o=Object.keys(t).filter(cl);let a=[],i=!1;const l=[];if(o.forEach((o=>{const s=e.getValue(o);if(!e.hasValue(o))return;let u=n[o],c=Xo(u);const d=t[o];let p;if(fn(d)){const e=d.length,t=null===d[0]?1:0;u=d[t],c=Xo(u);for(let n=t;n<e&&null!==d[n];n++)p?er(Xo(d[n])===p,"All keyframes must be of the same type"):(p=Xo(d[n]),er(p===c||dl(c)&&dl(p),"Keyframes must be of the same dimension as the current value"))}else p=Xo(d);if(c!==p)if(dl(c)&&dl(p)){const e=s.get();"string"==typeof e&&s.set(parseFloat(e)),"string"==typeof d?t[o]=parseFloat(d):Array.isArray(d)&&p===Mt&&(t[o]=d.map(parseFloat))}else(null==c?void 0:c.transform)&&(null==p?void 0:p.transform)&&(0===u||0===d)?0===u?s.set(p.transform(u)):t[o]=c.transform(d):(i||(a=function(e){const t=[];return hl.forEach((n=>{const r=e.getValue(n);void 0!==r&&(t.push([n,r.get()]),r.set(n.startsWith("scale")?1:0))})),t.length&&e.render(),t}(e),i=!0),l.push(o),r[o]=void 0!==r[o]?r[o]:t[o],s.jump(d))})),l.length){const n=l.indexOf("height")>=0?window.pageYOffset:null,o=((e,t,n)=>{const r=t.measureViewportBox(),o=t.current,a=getComputedStyle(o),{display:i}=a,l={};"none"===i&&t.setStaticValue("display",e.display||"block"),n.forEach((e=>{l[e]=gl[e](r,a)})),t.render();const s=t.measureViewportBox();return n.forEach((n=>{const r=t.getValue(n);r&&r.jump(l[n]),e[n]=gl[n](s,a)})),e})(t,e,l);return a.length&&a.forEach((([t,n])=>{e.getValue(t).set(n)})),e.render(),qe&&null!==n&&window.scrollTo({top:n}),{target:o,transitionEnd:r}}return{target:t,transitionEnd:r}})(e,t,n,r):{target:t,transitionEnd:r}}const vl={current:null},bl={current:!1},xl=new WeakMap,Al=Object.keys(at),wl=Al.length,Cl=["AnimationStart","AnimationComplete","Update","BeforeLayoutMeasure","LayoutMeasure","LayoutAnimationStart","LayoutAnimationComplete"],El=et.length;class kl{constructor({parent:e,props:t,presenceContext:n,reducedMotionConfig:r,visualState:o},a={}){this.current=null,this.children=new Set,this.isVariantNode=!1,this.isControllingVariants=!1,this.shouldReduceMotion=null,this.values=new Map,this.features={},this.valueSubscriptions=new Map,this.prevMotionValues={},this.events={},this.propEventSubscriptions={},this.notifyUpdate=()=>this.notify("Update",this.latestValues),this.render=()=>{this.current&&(this.triggerBuild(),this.renderInstance(this.current,this.renderState,this.props.style,this.projection))},this.scheduleRender=()=>wn.render(this.render,!1,!0);const{latestValues:i,renderState:l}=o;this.latestValues=i,this.baseTarget={...i},this.initialValues=t.initial?{...i}:{},this.renderState=l,this.parent=e,this.props=t,this.presenceContext=n,this.depth=e?e.depth+1:0,this.reducedMotionConfig=r,this.options=a,this.isControllingVariants=tt(t),this.isVariantNode=nt(t),this.isVariantNode&&(this.variantChildren=new Set),this.manuallyAnimateOnMount=Boolean(e&&e.current);const{willChange:s,...u}=this.scrapeMotionValuesFromProps(t,{});for(const e in u){const t=u[e];void 0!==i[e]&&vt(t)&&(t.set(i[e],!1),Vo(s)&&s.add(e))}}scrapeMotionValuesFromProps(e,t){return{}}mount(e){this.current=e,xl.set(e,this),this.projection&&!this.projection.instance&&this.projection.mount(e),this.parent&&this.isVariantNode&&!this.isControllingVariants&&(this.removeFromVariantTree=this.parent.addVariantChild(this)),this.values.forEach(((e,t)=>this.bindToMotionValue(t,e))),bl.current||function(){if(bl.current=!0,qe)if(window.matchMedia){const e=window.matchMedia("(prefers-reduced-motion)"),t=()=>vl.current=e.matches;e.addListener(t),t()}else vl.current=!1}(),this.shouldReduceMotion="never"!==this.reducedMotionConfig&&("always"===this.reducedMotionConfig||vl.current),this.parent&&this.parent.children.add(this),this.update(this.props,this.presenceContext)}unmount(){xl.delete(this.current),this.projection&&this.projection.unmount(),Cn(this.notifyUpdate),Cn(this.render),this.valueSubscriptions.forEach((e=>e())),this.removeFromVariantTree&&this.removeFromVariantTree(),this.parent&&this.parent.children.delete(this);for(const e in this.events)this.events[e].clear();for(const e in this.features)this.features[e].unmount();this.current=null}bindToMotionValue(e,t){const n=gt.has(e),r=t.on("change",(t=>{this.latestValues[e]=t,this.props.onUpdate&&wn.update(this.notifyUpdate,!1,!0),n&&this.projection&&(this.projection.isTransformDirty=!0)})),o=t.on("renderRequest",this.scheduleRender);this.valueSubscriptions.set(e,(()=>{r(),o()}))}sortNodePosition(e){return this.current&&this.sortInstanceNodePosition&&this.type===e.type?this.sortInstanceNodePosition(this.current,e.current):0}loadFeatures({children:e,...t},n,r,o){let a,i;for(let e=0;e<wl;e++){const n=Al[e],{isEnabled:r,Feature:o,ProjectionNode:l,MeasureLayout:s}=at[n];l&&(a=l),r(t)&&(!this.features[n]&&o&&(this.features[n]=new o(this)),s&&(i=s))}if(!this.projection&&a){this.projection=new a(this.latestValues,this.parent&&this.parent.projection);const{layoutId:e,layout:n,drag:r,dragConstraints:i,layoutScroll:l,layoutRoot:s}=t;this.projection.setOptions({layoutId:e,layout:n,alwaysMeasureLayout:Boolean(r)||i&&Qe(i),visualElement:this,scheduleRender:()=>this.scheduleRender(),animationType:"string"==typeof n?n:"both",initialPromotionConfig:o,layoutScroll:l,layoutRoot:s})}return i}updateFeatures(){for(const e in this.features){const t=this.features[e];t.isMounted?t.update():(t.mount(),t.isMounted=!0)}}triggerBuild(){this.build(this.renderState,this.latestValues,this.options,this.props)}measureViewportBox(){return this.current?this.measureInstanceViewportBox(this.current,this.props):Ra()}getStaticValue(e){return this.latestValues[e]}setStaticValue(e,t){this.latestValues[e]=t}makeTargetAnimatable(e,t=!0){return this.makeTargetAnimatableFromInstance(e,this.props,t)}update(e,t){(e.transformTemplate||this.props.transformTemplate)&&this.scheduleRender(),this.prevProps=this.props,this.props=e,this.prevPresenceContext=this.presenceContext,this.presenceContext=t;for(let t=0;t<Cl.length;t++){const n=Cl[t];this.propEventSubscriptions[n]&&(this.propEventSubscriptions[n](),delete this.propEventSubscriptions[n]);const r=e["on"+n];r&&(this.propEventSubscriptions[n]=this.on(n,r))}this.prevMotionValues=function(e,t,n){const{willChange:r}=t;for(const o in t){const a=t[o],i=n[o];if(vt(a))e.addValue(o,a),Vo(r)&&r.add(o);else if(vt(i))e.addValue(o,Ko(a,{owner:e})),Vo(r)&&r.remove(o);else if(i!==a)if(e.hasValue(o)){const t=e.getValue(o);!t.hasAnimated&&t.set(a)}else{const t=e.getStaticValue(o);e.addValue(o,Ko(void 0!==t?t:a,{owner:e}))}}for(const r in n)void 0===t[r]&&e.removeValue(r);return t}(this,this.scrapeMotionValuesFromProps(e,this.prevProps),this.prevMotionValues),this.handleChildMotionValue&&this.handleChildMotionValue()}getProps(){return this.props}getVariant(e){return this.props.variants?this.props.variants[e]:void 0}getDefaultTransition(){return this.props.transition}getTransformPagePoint(){return this.props.transformPagePoint}getClosestVariantNode(){return this.isVariantNode?this:this.parent?this.parent.getClosestVariantNode():void 0}getVariantContext(e=!1){if(e)return this.parent?this.parent.getVariantContext():void 0;if(!this.isControllingVariants){const e=this.parent&&this.parent.getVariantContext()||{};return void 0!==this.props.initial&&(e.initial=this.props.initial),e}const t={};for(let e=0;e<El;e++){const n=et[e],r=this.props[n];(Xe(r)||!1===r)&&(t[n]=r)}return t}addVariantChild(e){const t=this.getClosestVariantNode();if(t)return t.variantChildren&&t.variantChildren.add(e),()=>t.variantChildren.delete(e)}addValue(e,t){t!==this.values.get(e)&&(this.removeValue(e),this.bindToMotionValue(e,t)),this.values.set(e,t),this.latestValues[e]=t.get()}removeValue(e){this.values.delete(e);const t=this.valueSubscriptions.get(e);t&&(t(),this.valueSubscriptions.delete(e)),delete this.latestValues[e],this.removeValueFromRenderState(e,this.renderState)}hasValue(e){return this.values.has(e)}getValue(e,t){if(this.props.values&&this.props.values[e])return this.props.values[e];let n=this.values.get(e);return void 0===n&&void 0!==t&&(n=Ko(t,{owner:this}),this.addValue(e,n)),n}readValue(e){var t;return void 0===this.latestValues[e]&&this.current?null!==(t=this.getBaseTargetFromProps(this.props,e))&&void 0!==t?t:this.readValueFromInstance(this.current,e,this.options):this.latestValues[e]}setBaseTarget(e,t){this.baseTarget[e]=t}getBaseTarget(e){var t;const{initial:n}=this.props,r="string"==typeof n||"object"==typeof n?null===(t=pn(this.props,n))||void 0===t?void 0:t[e]:void 0;if(n&&void 0!==r)return r;const o=this.getBaseTargetFromProps(this.props,e);return void 0===o||vt(o)?void 0!==this.initialValues[e]&&void 0===r?void 0:this.baseTarget[e]:o}on(e,t){return this.events[e]||(this.events[e]=new Ho),this.events[e].add(t)}notify(e,...t){this.events[e]&&this.events[e].notify(...t)}}class Sl extends kl{sortInstanceNodePosition(e,t){return 2&e.compareDocumentPosition(t)?1:-1}getBaseTargetFromProps(e,t){return e.style?e.style[t]:void 0}removeValueFromRenderState(e,{vars:t,style:n}){delete t[e],delete n[e]}makeTargetAnimatableFromInstance({transition:e,transitionEnd:t,...n},{transformValues:r},o){let a=function(e,t,n){const r={};for(const o in e){const e=ea(o,t);if(void 0!==e)r[o]=e;else{const e=n.getValue(o);e&&(r[o]=e.get())}}return r}(n,e||{},this);if(r&&(t&&(t=r(t)),n&&(n=r(n)),a&&(a=r(a))),o){!function(e,t,n){var r,o;const a=Object.keys(t).filter((t=>!e.hasValue(t))),i=a.length;var l;if(i)for(let s=0;s<i;s++){const i=a[s],u=t[i];let c=null;Array.isArray(u)&&(c=u[0]),null===c&&(c=null!==(o=null!==(r=n[i])&&void 0!==r?r:e.readValue(i))&&void 0!==o?o:t[i]),null!=c&&("string"==typeof c&&($o(c)||Mo(c))?c=parseFloat(c):(l=c,!Zo.find(Go(l))&&Hr.test(u)&&(c=jo(i,u))),e.addValue(i,Ko(c,{owner:e})),void 0===n[i]&&(n[i]=c),null!==c&&e.setBaseTarget(i,c))}}(this,n,a);const e=((e,t,n,r)=>{const o=function(e,{...t},n){const r=e.current;if(!(r instanceof Element))return{target:t,transitionEnd:n};n&&(n={...n}),e.values.forEach((e=>{const t=e.get();if(!Ct(t))return;const n=sl(t,r);n&&e.set(n)}));for(const e in t){const o=t[e];if(!Ct(o))continue;const a=sl(o,r);a&&(t[e]=a,n||(n={}),void 0===n[e]&&(n[e]=o))}return{target:t,transitionEnd:n}}(e,t,r);return yl(e,t=o.target,n,r=o.transitionEnd)})(this,n,a,t);t=e.transitionEnd,n=e.target}return{transition:e,transitionEnd:t,...n}}}class Nl extends Sl{readValueFromInstance(e,t){if(gt.has(t)){const e=Lo(t);return e&&e.default||0}{const r=(n=e,window.getComputedStyle(n)),o=(wt(t)?r.getPropertyValue(t):r[t])||0;return"string"==typeof o?o.trim():o}var n}measureInstanceViewportBox(e,{transformPagePoint:t}){return Xa(e,t)}build(e,t,n,r){Ut(e,t,n,r.transformTemplate)}scrapeMotionValuesFromProps(e,t){return cn(e,t)}handleChildMotionValue(){this.childSubscription&&(this.childSubscription(),delete this.childSubscription);const{children:e}=this.props;vt(e)&&(this.childSubscription=e.on("change",(e=>{this.current&&(this.current.textContent=`${e}`)})))}renderInstance(e,t,n,r){ln(e,t,n,r)}}class _l extends Sl{constructor(){super(...arguments),this.isSVGTag=!1}getBaseTargetFromProps(e,t){return e[t]}readValueFromInstance(e,t){if(gt.has(t)){const e=Lo(t);return e&&e.default||0}return t=sn.has(t)?t:an(t),e.getAttribute(t)}measureInstanceViewportBox(){return Ra()}scrapeMotionValuesFromProps(e,t){return dn(e,t)}build(e,t,n,r){en(e,t,n,this.isSVGTag,r.transformTemplate)}renderInstance(e,t,n,r){un(e,t,0,r)}mount(e){this.isSVGTag=nn(e.tagName),super.mount(e)}}const Bl=(e,t)=>ft(e)?new _l(t,{enableHardwareAcceleration:!1}):new Nl(t,{enableHardwareAcceleration:!0}),Pl={...da,...Gn,...il,layout:{ProjectionNode:al,MeasureLayout:li}},Tl=dt(((e,t)=>function(e,{forwardMotionProps:t=!1},n,r){return{...ft(e)?Sn:Nn,preloadedFeatures:n,useRender:on(t),createVisualElement:r,Component:e}}(e,t,Pl,Bl)));function Ol(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],s=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Rl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Rl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Rl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Fl=function(){var e=Ol((0,n.useState)(!1),2),t=e[0],r=e[1],o=Ol((0,n.useState)(!1),2),a=o[0],i=o[1],l=Ol((0,n.useState)(!1),2),s=l[0],u=l[1],c=Ol((0,n.useState)(!1),2),d=c[0],p=c[1],f=Ol((0,n.useState)(!1),2),m=f[0],h=f[1],g=Ol((0,n.useState)(!1),2),y=g[0],v=g[1],b=Ol((0,n.useState)(!1),2),x=b[0],A=b[1],w=Ol((0,n.useState)(!1),2),C=w[0],E=w[1],k=Ol((0,n.useState)(!1),2),S=k[0],N=k[1],_=Ol((0,n.useState)(!1),2),B=_[0],P=_[1],T=Ol((0,n.useState)(0),2),O=T[0],R=T[1],F=Ol((0,n.useState)(0),2),L=F[0],j=F[1];return n.createElement(n.Fragment,null,n.createElement("div",{className:"container"},n.createElement("div",{className:"colorBox"},n.createElement("div",null,n.createElement(Tl.div,{className:"box",layout:!0,style:{height:t?"315px":"0px"},transition:{ease:"linear",duration:5,repeat:1/0}}),n.createElement("div",{onClick:function(){return r(!t)},className:"boxBat"},"5 sek")),n.createElement("div",null,n.createElement(Tl.div,{className:"box1",layout:!0,style:{height:a?"315px":"0px"},transition:{ease:"linear",duration:10,repeat:1/0}}),n.createElement("div",{onClick:function(){return i(!a)},className:"boxBat"},"10 sek")),n.createElement("div",null,n.createElement(Tl.div,{className:"box2",layout:!0,style:{height:s?"315px":"0px"},transition:{ease:"linear",repeat:1/0,duration:20}}),n.createElement("div",{onClick:function(){return u(!s)},className:"boxBat"},"20 sek")),n.createElement("div",null,n.createElement(Tl.div,{className:"box3",layout:!0,style:{height:d?"315px":"0px"},transition:{ease:"linear",duration:O,repeat:1/0}}),n.createElement("div",{onClick:function(){return p(!d)},className:"boxBat"},O)),n.createElement("div",null,n.createElement(Tl.div,{className:"box4",layout:!0,style:{height:m?"315px":"0px"},transition:{ease:"linear",duration:L,repeat:1/0}}),n.createElement("div",{onClick:function(){return h(!m)},className:"boxBat"},L))),n.createElement("div",{className:"inputText"}," Upiši broj sekundi ",n.createElement("span",null),n.createElement("input",{type:"number",className:"inputPlace",name:"broj",value:O,onChange:function(e){R(e.target.value)}})),n.createElement("div",{className:"inputText"}," Upiši broj sekundi ",n.createElement("span",null),n.createElement("input",{type:"number",className:"inputPlace",name:"broj",value:L,onChange:function(e){j(e.target.value)}})),n.createElement("div",{onClick:function(){return[h(!m),p(!d),u(!s),i(!a),r(!t)]},className:"boxBatAll"},"sve"),n.createElement("hr",null),n.createElement("h1",null,"Ceo dan u prolazu "),n.createElement("div",{className:"colorBox"},n.createElement("div",null,n.createElement(Tl.div,{className:"box4",layout:!0,style:{height:y?"308px":"0px"},transition:{ease:"easeInOut",type:"spring",duration:1,repeat:1/0}}),n.createElement("div",{className:"title"},"1 sek")),n.createElement("div",null,n.createElement(Tl.div,{className:"box3",layout:!0,style:{height:x?"315px":"0px"},transition:{ease:"linear",duration:15,repeat:1/0}}),n.createElement("div",{className:"title"},"15 sek")),n.createElement("div",null,n.createElement(Tl.div,{className:"box2",layout:!0,style:{height:C?"315px":"0px"},transition:{ease:"linear",duration:60,repeat:1/0}}),n.createElement("div",{className:"title"},"1 minut")),n.createElement("div",null,n.createElement(Tl.div,{className:"box1",layout:!0,style:{height:S?"315px":"0px"},transition:{ease:"linear",duration:3600,repeat:1/0}}),n.createElement("div",{className:"title"},"1 sat")),n.createElement("div",null,n.createElement(Tl.div,{className:"box",layout:!0,style:{height:B?"315px":"0px"},transition:{ease:"linear",duration:86400,repeat:1/0}}),n.createElement("div",{className:"title"},"1 dan"))),n.createElement("div",{onClick:function(){return[v(!y),A(!x),E(!C),N(!S),P(!B)]},className:"boxBatAll"},"POKRENI DAN")))};function Ll(e,t){return function(){return e.apply(t,arguments)}}const{toString:jl}=Object.prototype,{getPrototypeOf:Ml}=Object,Dl=(zl=Object.create(null),e=>{const t=jl.call(e);return zl[t]||(zl[t]=t.slice(8,-1).toLowerCase())});var zl;const Il=e=>(e=e.toLowerCase(),t=>Dl(t)===e),Vl=e=>t=>typeof t===e,{isArray:$l}=Array,Ul=Vl("undefined"),Wl=Il("ArrayBuffer"),Hl=Vl("string"),Yl=Vl("function"),ql=Vl("number"),Kl=e=>null!==e&&"object"==typeof e,Gl=e=>{if("object"!==Dl(e))return!1;const t=Ml(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},Ql=Il("Date"),Xl=Il("File"),Zl=Il("Blob"),Jl=Il("FileList"),es=Il("URLSearchParams");function ts(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,o;if("object"!=typeof e&&(e=[e]),$l(e))for(r=0,o=e.length;r<o;r++)t.call(null,e[r],r,e);else{const o=n?Object.getOwnPropertyNames(e):Object.keys(e),a=o.length;let i;for(r=0;r<a;r++)i=o[r],t.call(null,e[i],i,e)}}function ns(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,o=n.length;for(;o-- >0;)if(r=n[o],t===r.toLowerCase())return r;return null}const rs="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,os=e=>!Ul(e)&&e!==rs,as=(is="undefined"!=typeof Uint8Array&&Ml(Uint8Array),e=>is&&e instanceof is);var is;const ls=Il("HTMLFormElement"),ss=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),us=Il("RegExp"),cs=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};ts(n,((n,o)=>{let a;!1!==(a=t(n,o,e))&&(r[o]=a||n)})),Object.defineProperties(e,r)},ds="abcdefghijklmnopqrstuvwxyz",ps="0123456789",fs={DIGIT:ps,ALPHA:ds,ALPHA_DIGIT:ds+ds.toUpperCase()+ps},ms=Il("AsyncFunction"),hs={isArray:$l,isArrayBuffer:Wl,isBuffer:function(e){return null!==e&&!Ul(e)&&null!==e.constructor&&!Ul(e.constructor)&&Yl(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||Yl(e.append)&&("formdata"===(t=Dl(e))||"object"===t&&Yl(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&Wl(e.buffer),t},isString:Hl,isNumber:ql,isBoolean:e=>!0===e||!1===e,isObject:Kl,isPlainObject:Gl,isUndefined:Ul,isDate:Ql,isFile:Xl,isBlob:Zl,isRegExp:us,isFunction:Yl,isStream:e=>Kl(e)&&Yl(e.pipe),isURLSearchParams:es,isTypedArray:as,isFileList:Jl,forEach:ts,merge:function e(){const{caseless:t}=os(this)&&this||{},n={},r=(r,o)=>{const a=t&&ns(n,o)||o;Gl(n[a])&&Gl(r)?n[a]=e(n[a],r):Gl(r)?n[a]=e({},r):$l(r)?n[a]=r.slice():n[a]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&ts(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:r}={})=>(ts(t,((t,r)=>{n&&Yl(t)?e[r]=Ll(t,n):e[r]=t}),{allOwnKeys:r}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let o,a,i;const l={};if(t=t||{},null==e)return t;do{for(o=Object.getOwnPropertyNames(e),a=o.length;a-- >0;)i=o[a],r&&!r(i,e,t)||l[i]||(t[i]=e[i],l[i]=!0);e=!1!==n&&Ml(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:Dl,kindOfTest:Il,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if($l(e))return e;let t=e.length;if(!ql(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:ls,hasOwnProperty:ss,hasOwnProp:ss,reduceDescriptors:cs,freezeMethods:e=>{cs(e,((t,n)=>{if(Yl(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];Yl(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return $l(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>(e=+e,Number.isFinite(e)?e:t),findKey:ns,global:rs,isContextDefined:os,ALPHABET:fs,generateString:(e=16,t=fs.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&Yl(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(Kl(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const o=$l(e)?[]:{};return ts(e,((e,t)=>{const a=n(e,r+1);!Ul(a)&&(o[t]=a)})),t[r]=void 0,o}}return e};return n(e,0)},isAsyncFn:ms,isThenable:e=>e&&(Kl(e)||Yl(e))&&Yl(e.then)&&Yl(e.catch)};function gs(e,t,n,r,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}hs.inherits(gs,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:hs.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const ys=gs.prototype,vs={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{vs[e]={value:e}})),Object.defineProperties(gs,vs),Object.defineProperty(ys,"isAxiosError",{value:!0}),gs.from=(e,t,n,r,o,a)=>{const i=Object.create(ys);return hs.toFlatObject(e,i,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),gs.call(i,e.message,t,n,r,o),i.cause=e,i.name=e.name,a&&Object.assign(i,a),i};const bs=gs;function xs(e){return hs.isPlainObject(e)||hs.isArray(e)}function As(e){return hs.endsWith(e,"[]")?e.slice(0,-2):e}function ws(e,t,n){return e?e.concat(t).map((function(e,t){return e=As(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const Cs=hs.toFlatObject(hs,{},null,(function(e){return/^is[A-Z]/.test(e)})),Es=function(e,t,n){if(!hs.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=hs.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!hs.isUndefined(t[e])}))).metaTokens,o=n.visitor||u,a=n.dots,i=n.indexes,l=(n.Blob||"undefined"!=typeof Blob&&Blob)&&hs.isSpecCompliantForm(t);if(!hs.isFunction(o))throw new TypeError("visitor must be a function");function s(e){if(null===e)return"";if(hs.isDate(e))return e.toISOString();if(!l&&hs.isBlob(e))throw new bs("Blob is not supported. Use a Buffer instead.");return hs.isArrayBuffer(e)||hs.isTypedArray(e)?l&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function u(e,n,o){let l=e;if(e&&!o&&"object"==typeof e)if(hs.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(hs.isArray(e)&&function(e){return hs.isArray(e)&&!e.some(xs)}(e)||(hs.isFileList(e)||hs.endsWith(n,"[]"))&&(l=hs.toArray(e)))return n=As(n),l.forEach((function(e,r){!hs.isUndefined(e)&&null!==e&&t.append(!0===i?ws([n],r,a):null===i?n:n+"[]",s(e))})),!1;return!!xs(e)||(t.append(ws(o,n,a),s(e)),!1)}const c=[],d=Object.assign(Cs,{defaultVisitor:u,convertValue:s,isVisitable:xs});if(!hs.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!hs.isUndefined(n)){if(-1!==c.indexOf(n))throw Error("Circular reference detected in "+r.join("."));c.push(n),hs.forEach(n,(function(n,a){!0===(!(hs.isUndefined(n)||null===n)&&o.call(t,n,hs.isString(a)?a.trim():a,r,d))&&e(n,r?r.concat(a):[a])})),c.pop()}}(e),t};function ks(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function Ss(e,t){this._pairs=[],e&&Es(e,this,t)}const Ns=Ss.prototype;Ns.append=function(e,t){this._pairs.push([e,t])},Ns.toString=function(e){const t=e?function(t){return e.call(this,t,ks)}:ks;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const _s=Ss;function Bs(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Ps(e,t,n){if(!t)return e;const r=n&&n.encode||Bs,o=n&&n.serialize;let a;if(a=o?o(t,n):hs.isURLSearchParams(t)?t.toString():new _s(t,n).toString(r),a){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}const Ts=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){hs.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},Os={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Rs={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:_s,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]},Fs="undefined"!=typeof window&&"undefined"!=typeof document,Ls=(js="undefined"!=typeof navigator&&navigator.product,Fs&&["ReactNative","NativeScript","NS"].indexOf(js)<0);var js;const Ms="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,Ds={...e,...Rs},zs=function(e){function t(e,n,r,o){let a=e[o++];if("__proto__"===a)return!0;const i=Number.isFinite(+a),l=o>=e.length;return a=!a&&hs.isArray(r)?r.length:a,l?(hs.hasOwnProp(r,a)?r[a]=[r[a],n]:r[a]=n,!i):(r[a]&&hs.isObject(r[a])||(r[a]=[]),t(e,n,r[a],o)&&hs.isArray(r[a])&&(r[a]=function(e){const t={},n=Object.keys(e);let r;const o=n.length;let a;for(r=0;r<o;r++)a=n[r],t[a]=e[a];return t}(r[a])),!i)}if(hs.isFormData(e)&&hs.isFunction(e.entries)){const n={};return hs.forEachEntry(e,((e,r)=>{t(function(e){return hs.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null},Is={transitional:Os,adapter:["xhr","http"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,o=hs.isObject(e);if(o&&hs.isHTMLForm(e)&&(e=new FormData(e)),hs.isFormData(e))return r&&r?JSON.stringify(zs(e)):e;if(hs.isArrayBuffer(e)||hs.isBuffer(e)||hs.isStream(e)||hs.isFile(e)||hs.isBlob(e))return e;if(hs.isArrayBufferView(e))return e.buffer;if(hs.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let a;if(o){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return Es(e,new Ds.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return Ds.isNode&&hs.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((a=hs.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return Es(a?{"files[]":e}:e,t&&new t,this.formSerializer)}}return o||r?(t.setContentType("application/json",!1),function(e,t,n){if(hs.isString(e))try{return(0,JSON.parse)(e),hs.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||Is.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(e&&hs.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw bs.from(e,bs.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Ds.classes.FormData,Blob:Ds.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};hs.forEach(["delete","get","head","post","put","patch"],(e=>{Is.headers[e]={}}));const Vs=Is,$s=hs.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Us=Symbol("internals");function Ws(e){return e&&String(e).trim().toLowerCase()}function Hs(e){return!1===e||null==e?e:hs.isArray(e)?e.map(Hs):String(e)}function Ys(e,t,n,r,o){return hs.isFunction(r)?r.call(this,t,n):(o&&(t=n),hs.isString(t)?hs.isString(r)?-1!==t.indexOf(r):hs.isRegExp(r)?r.test(t):void 0:void 0)}class qs{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function o(e,t,n){const o=Ws(t);if(!o)throw new Error("header name must be a non-empty string");const a=hs.findKey(r,o);(!a||void 0===r[a]||!0===n||void 0===n&&!1!==r[a])&&(r[a||t]=Hs(e))}const a=(e,t)=>hs.forEach(e,((e,n)=>o(e,n,t)));return hs.isPlainObject(e)||e instanceof this.constructor?a(e,t):hs.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim())?a((e=>{const t={};let n,r,o;return e&&e.split("\n").forEach((function(e){o=e.indexOf(":"),n=e.substring(0,o).trim().toLowerCase(),r=e.substring(o+1).trim(),!n||t[n]&&$s[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t):null!=e&&o(t,e,n),this}get(e,t){if(e=Ws(e)){const n=hs.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(hs.isFunction(t))return t.call(this,e,n);if(hs.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=Ws(e)){const n=hs.findKey(this,e);return!(!n||void 0===this[n]||t&&!Ys(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function o(e){if(e=Ws(e)){const o=hs.findKey(n,e);!o||t&&!Ys(0,n[o],o,t)||(delete n[o],r=!0)}}return hs.isArray(e)?e.forEach(o):o(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const o=t[n];e&&!Ys(0,this[o],o,e,!0)||(delete this[o],r=!0)}return r}normalize(e){const t=this,n={};return hs.forEach(this,((r,o)=>{const a=hs.findKey(n,o);if(a)return t[a]=Hs(r),void delete t[o];const i=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(o):String(o).trim();i!==o&&delete t[o],t[i]=Hs(r),n[i]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return hs.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&hs.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[Us]=this[Us]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=Ws(e);t[r]||(function(e,t){const n=hs.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,o){return this[r].call(this,t,e,n,o)},configurable:!0})}))}(n,e),t[r]=!0)}return hs.isArray(e)?e.forEach(r):r(e),this}}qs.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),hs.reduceDescriptors(qs.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),hs.freezeMethods(qs);const Ks=qs;function Gs(e,t){const n=this||Vs,r=t||n,o=Ks.from(r.headers);let a=r.data;return hs.forEach(e,(function(e){a=e.call(n,a,o.normalize(),t?t.status:void 0)})),o.normalize(),a}function Qs(e){return!(!e||!e.__CANCEL__)}function Xs(e,t,n){bs.call(this,null==e?"canceled":e,bs.ERR_CANCELED,t,n),this.name="CanceledError"}hs.inherits(Xs,bs,{__CANCEL__:!0});const Zs=Xs,Js=Ds.hasStandardBrowserEnv?{write(e,t,n,r,o,a){const i=[e+"="+encodeURIComponent(t)];hs.isNumber(n)&&i.push("expires="+new Date(n).toGMTString()),hs.isString(r)&&i.push("path="+r),hs.isString(o)&&i.push("domain="+o),!0===a&&i.push("secure"),document.cookie=i.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function eu(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const tu=Ds.hasStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=hs.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0};function nu(e,t){let n=0;const r=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let o,a=0,i=0;return t=void 0!==t?t:1e3,function(l){const s=Date.now(),u=r[i];o||(o=s),n[a]=l,r[a]=s;let c=i,d=0;for(;c!==a;)d+=n[c++],c%=e;if(a=(a+1)%e,a===i&&(i=(i+1)%e),s-o<t)return;const p=u&&s-u;return p?Math.round(1e3*d/p):void 0}}(50,250);return o=>{const a=o.loaded,i=o.lengthComputable?o.total:void 0,l=a-n,s=r(l);n=a;const u={loaded:a,total:i,progress:i?a/i:void 0,bytes:l,rate:s||void 0,estimated:s&&i&&a<=i?(i-a)/s:void 0,event:o};u[t?"download":"upload"]=!0,e(u)}}const ru="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){let r=e.data;const o=Ks.from(e.headers).normalize();let a,i,{responseType:l,withXSRFToken:s}=e;function u(){e.cancelToken&&e.cancelToken.unsubscribe(a),e.signal&&e.signal.removeEventListener("abort",a)}if(hs.isFormData(r))if(Ds.hasStandardBrowserEnv||Ds.hasStandardBrowserWebWorkerEnv)o.setContentType(!1);else if(!1!==(i=o.getContentType())){const[e,...t]=i?i.split(";").map((e=>e.trim())).filter(Boolean):[];o.setContentType([e||"multipart/form-data",...t].join("; "))}let c=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",n=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";o.set("Authorization","Basic "+btoa(t+":"+n))}const d=eu(e.baseURL,e.url);function p(){if(!c)return;const r=Ks.from("getAllResponseHeaders"in c&&c.getAllResponseHeaders());!function(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new bs("Request failed with status code "+n.status,[bs.ERR_BAD_REQUEST,bs.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}((function(e){t(e),u()}),(function(e){n(e),u()}),{data:l&&"text"!==l&&"json"!==l?c.response:c.responseText,status:c.status,statusText:c.statusText,headers:r,config:e,request:c}),c=null}if(c.open(e.method.toUpperCase(),Ps(d,e.params,e.paramsSerializer),!0),c.timeout=e.timeout,"onloadend"in c?c.onloadend=p:c.onreadystatechange=function(){c&&4===c.readyState&&(0!==c.status||c.responseURL&&0===c.responseURL.indexOf("file:"))&&setTimeout(p)},c.onabort=function(){c&&(n(new bs("Request aborted",bs.ECONNABORTED,e,c)),c=null)},c.onerror=function(){n(new bs("Network Error",bs.ERR_NETWORK,e,c)),c=null},c.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const r=e.transitional||Os;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new bs(t,r.clarifyTimeoutError?bs.ETIMEDOUT:bs.ECONNABORTED,e,c)),c=null},Ds.hasStandardBrowserEnv&&(s&&hs.isFunction(s)&&(s=s(e)),s||!1!==s&&tu(d))){const t=e.xsrfHeaderName&&e.xsrfCookieName&&Js.read(e.xsrfCookieName);t&&o.set(e.xsrfHeaderName,t)}void 0===r&&o.setContentType(null),"setRequestHeader"in c&&hs.forEach(o.toJSON(),(function(e,t){c.setRequestHeader(t,e)})),hs.isUndefined(e.withCredentials)||(c.withCredentials=!!e.withCredentials),l&&"json"!==l&&(c.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&c.addEventListener("progress",nu(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&c.upload&&c.upload.addEventListener("progress",nu(e.onUploadProgress)),(e.cancelToken||e.signal)&&(a=t=>{c&&(n(!t||t.type?new Zs(null,e,c):t),c.abort(),c=null)},e.cancelToken&&e.cancelToken.subscribe(a),e.signal&&(e.signal.aborted?a():e.signal.addEventListener("abort",a)));const f=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(d);f&&-1===Ds.protocols.indexOf(f)?n(new bs("Unsupported protocol "+f+":",bs.ERR_BAD_REQUEST,e)):c.send(r||null)}))},ou={http:null,xhr:ru};hs.forEach(ou,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const au=e=>`- ${e}`,iu=e=>hs.isFunction(e)||null===e||!1===e,lu=e=>{e=hs.isArray(e)?e:[e];const{length:t}=e;let n,r;const o={};for(let a=0;a<t;a++){let t;if(n=e[a],r=n,!iu(n)&&(r=ou[(t=String(n)).toLowerCase()],void 0===r))throw new bs(`Unknown adapter '${t}'`);if(r)break;o[t||"#"+a]=r}if(!r){const e=Object.entries(o).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));let n=t?e.length>1?"since :\n"+e.map(au).join("\n"):" "+au(e[0]):"as no adapter specified";throw new bs("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return r};function su(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Zs(null,e)}function uu(e){return su(e),e.headers=Ks.from(e.headers),e.data=Gs.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),lu(e.adapter||Vs.adapter)(e).then((function(t){return su(e),t.data=Gs.call(e,e.transformResponse,t),t.headers=Ks.from(t.headers),t}),(function(t){return Qs(t)||(su(e),t&&t.response&&(t.response.data=Gs.call(e,e.transformResponse,t.response),t.response.headers=Ks.from(t.response.headers))),Promise.reject(t)}))}const cu=e=>e instanceof Ks?e.toJSON():e;function du(e,t){t=t||{};const n={};function r(e,t,n){return hs.isPlainObject(e)&&hs.isPlainObject(t)?hs.merge.call({caseless:n},e,t):hs.isPlainObject(t)?hs.merge({},t):hs.isArray(t)?t.slice():t}function o(e,t,n){return hs.isUndefined(t)?hs.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function a(e,t){if(!hs.isUndefined(t))return r(void 0,t)}function i(e,t){return hs.isUndefined(t)?hs.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function l(n,o,a){return a in t?r(n,o):a in e?r(void 0,n):void 0}const s={url:a,method:a,data:a,baseURL:i,transformRequest:i,transformResponse:i,paramsSerializer:i,timeout:i,timeoutMessage:i,withCredentials:i,withXSRFToken:i,adapter:i,responseType:i,xsrfCookieName:i,xsrfHeaderName:i,onUploadProgress:i,onDownloadProgress:i,decompress:i,maxContentLength:i,maxBodyLength:i,beforeRedirect:i,transport:i,httpAgent:i,httpsAgent:i,cancelToken:i,socketPath:i,responseEncoding:i,validateStatus:l,headers:(e,t)=>o(cu(e),cu(t),!0)};return hs.forEach(Object.keys(Object.assign({},e,t)),(function(r){const a=s[r]||o,i=a(e[r],t[r],r);hs.isUndefined(i)&&a!==l||(n[r]=i)})),n}const pu={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{pu[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const fu={};pu.transitional=function(e,t,n){function r(e,t){return"[Axios v1.6.5] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,o,a)=>{if(!1===e)throw new bs(r(o," has been removed"+(t?" in "+t:"")),bs.ERR_DEPRECATED);return t&&!fu[o]&&(fu[o]=!0,console.warn(r(o," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,o,a)}};const mu={assertOptions:function(e,t,n){if("object"!=typeof e)throw new bs("options must be an object",bs.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let o=r.length;for(;o-- >0;){const a=r[o],i=t[a];if(i){const t=e[a],n=void 0===t||i(t,a,e);if(!0!==n)throw new bs("option "+a+" must be "+n,bs.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new bs("Unknown option "+a,bs.ERR_BAD_OPTION)}},validators:pu},hu=mu.validators;class gu{constructor(e){this.defaults=e,this.interceptors={request:new Ts,response:new Ts}}request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=du(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:o}=t;void 0!==n&&mu.assertOptions(n,{silentJSONParsing:hu.transitional(hu.boolean),forcedJSONParsing:hu.transitional(hu.boolean),clarifyTimeoutError:hu.transitional(hu.boolean)},!1),null!=r&&(hs.isFunction(r)?t.paramsSerializer={serialize:r}:mu.assertOptions(r,{encode:hu.function,serialize:hu.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let a=o&&hs.merge(o.common,o[t.method]);o&&hs.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete o[e]})),t.headers=Ks.concat(a,o);const i=[];let l=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(l=l&&e.synchronous,i.unshift(e.fulfilled,e.rejected))}));const s=[];let u;this.interceptors.response.forEach((function(e){s.push(e.fulfilled,e.rejected)}));let c,d=0;if(!l){const e=[uu.bind(this),void 0];for(e.unshift.apply(e,i),e.push.apply(e,s),c=e.length,u=Promise.resolve(t);d<c;)u=u.then(e[d++],e[d++]);return u}c=i.length;let p=t;for(d=0;d<c;){const e=i[d++],t=i[d++];try{p=e(p)}catch(e){t.call(this,e);break}}try{u=uu.call(this,p)}catch(e){return Promise.reject(e)}for(d=0,c=s.length;d<c;)u=u.then(s[d++],s[d++]);return u}getUri(e){return Ps(eu((e=du(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}hs.forEach(["delete","get","head","options"],(function(e){gu.prototype[e]=function(t,n){return this.request(du(n||{},{method:e,url:t,data:(n||{}).data}))}})),hs.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request(du(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}gu.prototype[e]=t(),gu.prototype[e+"Form"]=t(!0)}));const yu=gu;class vu{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,o){n.reason||(n.reason=new Zs(e,r,o),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new vu((function(t){e=t})),cancel:e}}}const bu=vu,xu={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(xu).forEach((([e,t])=>{xu[t]=e}));const Au=xu,wu=function e(t){const n=new yu(t),r=Ll(yu.prototype.request,n);return hs.extend(r,yu.prototype,n,{allOwnKeys:!0}),hs.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return e(du(t,n))},r}(Vs);wu.Axios=yu,wu.CanceledError=Zs,wu.CancelToken=bu,wu.isCancel=Qs,wu.VERSION="1.6.5",wu.toFormData=Es,wu.AxiosError=bs,wu.Cancel=wu.CanceledError,wu.all=function(e){return Promise.all(e)},wu.spread=function(e){return function(t){return e.apply(null,t)}},wu.isAxiosError=function(e){return hs.isObject(e)&&!0===e.isAxiosError},wu.mergeConfig=du,wu.AxiosHeaders=Ks,wu.formToJSON=e=>zs(hs.isHTMLForm(e)?new FormData(e):e),wu.getAdapter=lu,wu.HttpStatusCode=Au,wu.default=wu;const Cu=wu,Eu=n.createContext({searchStringValue:"",setSearchStringFn:function(){}}),ku=function(e){return n.createElement(n.Fragment,null,n.createElement("tr",null,n.createElement("td",null,"Name"),n.createElement("td",{className:"protein"},e.dataNut.name)),n.createElement("tr",null,n.createElement("td",null,"Serving size"),n.createElement("td",{className:"protein"},e.dataNut.serving_size_g," g")),n.createElement("tr",null,n.createElement("td",null,"Fat"),n.createElement("td",{className:"protein"},e.dataNut.fat_total_g," g")),n.createElement("tr",null,n.createElement("td",null,"Protein"),n.createElement("td",{className:"protein"},e.dataNut.protein_g," g")),n.createElement("tr",null,n.createElement("td",null,"Carbohydrates"),n.createElement("td",{className:"protein"},e.dataNut.carbohydrates_total_g," g")),n.createElement("tr",null,n.createElement("td",null,"Sodium"),n.createElement("td",null,e.dataNut.sodium_mg," mg")),n.createElement("tr",null,n.createElement("td",null,"Pottasium"),n.createElement("td",null,e.dataNut.potassium_mg," mg")),n.createElement("tr",null,n.createElement("td",null,"Sugar"),n.createElement("td",{className:"protein"},e.dataNut.sugar_g," g")),n.createElement("tr",null,n.createElement("td",null,"Fiber"),n.createElement("td",null,e.dataNut.fiber_g," g")),n.createElement("tr",null,n.createElement("td",null,"Cholesterol"),n.createElement("td",null,e.dataNut.cholesterol_mg," mg")),n.createElement("tr",null,n.createElement("td",null,"Calories"),n.createElement("td",{className:"protein"},e.dataNut.calories)))};function Su(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}function Nu(){return Nu=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Nu.apply(this,arguments)}function _u(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(n=_u(e[t]))&&(r&&(r+=" "),r+=n)}else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}const Bu=function(){for(var e,t,n=0,r="",o=arguments.length;n<o;n++)(e=arguments[n])&&(t=_u(e))&&(r&&(r+=" "),r+=t);return r};function Pu(e,t,n=void 0){const r={};return Object.keys(e).forEach((o=>{r[o]=e[o].reduce(((e,r)=>{if(r){const o=t(r);""!==o&&e.push(o),n&&n[r]&&e.push(n[r])}return e}),[]).join(" ")})),r}function Tu(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}const Ou=function(e,t=Number.MIN_SAFE_INTEGER,n=Number.MAX_SAFE_INTEGER){return Math.max(t,Math.min(e,n))};function Ru(e,t=0,n=1){return Ou(e,t,n)}function Fu(e){if(e.type)return e;if("#"===e.charAt(0))return Fu(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error(Tu(9,e));let r,o=e.substring(t+1,e.length-1);if("color"===n){if(o=o.split(" "),r=o.shift(),4===o.length&&"/"===o[3].charAt(0)&&(o[3]=o[3].slice(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(r))throw new Error(Tu(10,r))}else o=o.split(",");return o=o.map((e=>parseFloat(e))),{type:n,values:o,colorSpace:r}}function Lu(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function ju(e){let t="hsl"===(e=Fu(e)).type||"hsla"===e.type?Fu(function(e){e=Fu(e);const{values:t}=e,n=t[0],r=t[1]/100,o=t[2]/100,a=r*Math.min(o,1-o),i=(e,t=(e+n/30)%12)=>o-a*Math.max(Math.min(t-3,9-t,1),-1);let l="rgb";const s=[Math.round(255*i(0)),Math.round(255*i(8)),Math.round(255*i(4))];return"hsla"===e.type&&(l+="a",s.push(t[3])),Lu({type:l,values:s})}(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function Mu(e,t){return e=Fu(e),t=Ru(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,Lu(e)}function Du(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}var zu=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,Iu=Du((function(e){return zu.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),Vu=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),$u=Math.abs,Uu=String.fromCharCode,Wu=Object.assign;function Hu(e){return e.trim()}function Yu(e,t,n){return e.replace(t,n)}function qu(e,t){return e.indexOf(t)}function Ku(e,t){return 0|e.charCodeAt(t)}function Gu(e,t,n){return e.slice(t,n)}function Qu(e){return e.length}function Xu(e){return e.length}function Zu(e,t){return t.push(e),e}var Ju=1,ec=1,tc=0,nc=0,rc=0,oc="";function ac(e,t,n,r,o,a,i){return{value:e,root:t,parent:n,type:r,props:o,children:a,line:Ju,column:ec,length:i,return:""}}function ic(e,t){return Wu(ac("",null,null,"",null,null,0),e,{length:-e.length},t)}function lc(){return rc=nc>0?Ku(oc,--nc):0,ec--,10===rc&&(ec=1,Ju--),rc}function sc(){return rc=nc<tc?Ku(oc,nc++):0,ec++,10===rc&&(ec=1,Ju++),rc}function uc(){return Ku(oc,nc)}function cc(){return nc}function dc(e,t){return Gu(oc,e,t)}function pc(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function fc(e){return Ju=ec=1,tc=Qu(oc=e),nc=0,[]}function mc(e){return oc="",e}function hc(e){return Hu(dc(nc-1,vc(91===e?e+2:40===e?e+1:e)))}function gc(e){for(;(rc=uc())&&rc<33;)sc();return pc(e)>2||pc(rc)>3?"":" "}function yc(e,t){for(;--t&&sc()&&!(rc<48||rc>102||rc>57&&rc<65||rc>70&&rc<97););return dc(e,cc()+(t<6&&32==uc()&&32==sc()))}function vc(e){for(;sc();)switch(rc){case e:return nc;case 34:case 39:34!==e&&39!==e&&vc(rc);break;case 40:41===e&&vc(e);break;case 92:sc()}return nc}function bc(e,t){for(;sc()&&e+rc!==57&&(e+rc!==84||47!==uc()););return"/*"+dc(t,nc-1)+"*"+Uu(47===e?e:sc())}function xc(e){for(;!pc(uc());)sc();return dc(e,nc)}var Ac="-ms-",wc="-moz-",Cc="-webkit-",Ec="comm",kc="rule",Sc="decl",Nc="@keyframes";function _c(e,t){for(var n="",r=Xu(e),o=0;o<r;o++)n+=t(e[o],o,e,t)||"";return n}function Bc(e,t,n,r){switch(e.type){case"@layer":if(e.children.length)break;case"@import":case Sc:return e.return=e.return||e.value;case Ec:return"";case Nc:return e.return=e.value+"{"+_c(e.children,r)+"}";case kc:e.value=e.props.join(",")}return Qu(n=_c(e.children,r))?e.return=e.value+"{"+n+"}":""}function Pc(e){return mc(Tc("",null,null,null,[""],e=fc(e),0,[0],e))}function Tc(e,t,n,r,o,a,i,l,s){for(var u=0,c=0,d=i,p=0,f=0,m=0,h=1,g=1,y=1,v=0,b="",x=o,A=a,w=r,C=b;g;)switch(m=v,v=sc()){case 40:if(108!=m&&58==Ku(C,d-1)){-1!=qu(C+=Yu(hc(v),"&","&\f"),"&\f")&&(y=-1);break}case 34:case 39:case 91:C+=hc(v);break;case 9:case 10:case 13:case 32:C+=gc(m);break;case 92:C+=yc(cc()-1,7);continue;case 47:switch(uc()){case 42:case 47:Zu(Rc(bc(sc(),cc()),t,n),s);break;default:C+="/"}break;case 123*h:l[u++]=Qu(C)*y;case 125*h:case 59:case 0:switch(v){case 0:case 125:g=0;case 59+c:-1==y&&(C=Yu(C,/\f/g,"")),f>0&&Qu(C)-d&&Zu(f>32?Fc(C+";",r,n,d-1):Fc(Yu(C," ","")+";",r,n,d-2),s);break;case 59:C+=";";default:if(Zu(w=Oc(C,t,n,u,c,o,l,b,x=[],A=[],d),a),123===v)if(0===c)Tc(C,t,w,w,x,a,d,l,A);else switch(99===p&&110===Ku(C,3)?100:p){case 100:case 108:case 109:case 115:Tc(e,w,w,r&&Zu(Oc(e,w,w,0,0,o,l,b,o,x=[],d),A),o,A,d,l,r?x:A);break;default:Tc(C,w,w,w,[""],A,0,l,A)}}u=c=f=0,h=y=1,b=C="",d=i;break;case 58:d=1+Qu(C),f=m;default:if(h<1)if(123==v)--h;else if(125==v&&0==h++&&125==lc())continue;switch(C+=Uu(v),v*h){case 38:y=c>0?1:(C+="\f",-1);break;case 44:l[u++]=(Qu(C)-1)*y,y=1;break;case 64:45===uc()&&(C+=hc(sc())),p=uc(),c=d=Qu(b=C+=xc(cc())),v++;break;case 45:45===m&&2==Qu(C)&&(h=0)}}return a}function Oc(e,t,n,r,o,a,i,l,s,u,c){for(var d=o-1,p=0===o?a:[""],f=Xu(p),m=0,h=0,g=0;m<r;++m)for(var y=0,v=Gu(e,d+1,d=$u(h=i[m])),b=e;y<f;++y)(b=Hu(h>0?p[y]+" "+v:Yu(v,/&\f/g,p[y])))&&(s[g++]=b);return ac(e,t,n,0===o?kc:l,s,u,c)}function Rc(e,t,n){return ac(e,t,n,Ec,Uu(rc),Gu(e,2,-2),0)}function Fc(e,t,n,r){return ac(e,t,n,Sc,Gu(e,0,r),Gu(e,r+1,-1),r)}var Lc=function(e,t,n){for(var r=0,o=0;r=o,o=uc(),38===r&&12===o&&(t[n]=1),!pc(o);)sc();return dc(e,nc)},jc=new WeakMap,Mc=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||jc.get(n))&&!r){jc.set(e,!0);for(var o=[],a=function(e,t){return mc(function(e,t){var n=-1,r=44;do{switch(pc(r)){case 0:38===r&&12===uc()&&(t[n]=1),e[n]+=Lc(nc-1,t,n);break;case 2:e[n]+=hc(r);break;case 4:if(44===r){e[++n]=58===uc()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=Uu(r)}}while(r=sc());return e}(fc(e),t))}(t,o),i=n.props,l=0,s=0;l<a.length;l++)for(var u=0;u<i.length;u++,s++)e.props[s]=o[l]?a[l].replace(/&\f/g,i[u]):i[u]+" "+a[l]}}},Dc=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function zc(e,t){switch(function(e,t){return 45^Ku(e,0)?(((t<<2^Ku(e,0))<<2^Ku(e,1))<<2^Ku(e,2))<<2^Ku(e,3):0}(e,t)){case 5103:return Cc+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return Cc+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return Cc+e+wc+e+Ac+e+e;case 6828:case 4268:return Cc+e+Ac+e+e;case 6165:return Cc+e+Ac+"flex-"+e+e;case 5187:return Cc+e+Yu(e,/(\w+).+(:[^]+)/,Cc+"box-$1$2"+Ac+"flex-$1$2")+e;case 5443:return Cc+e+Ac+"flex-item-"+Yu(e,/flex-|-self/,"")+e;case 4675:return Cc+e+Ac+"flex-line-pack"+Yu(e,/align-content|flex-|-self/,"")+e;case 5548:return Cc+e+Ac+Yu(e,"shrink","negative")+e;case 5292:return Cc+e+Ac+Yu(e,"basis","preferred-size")+e;case 6060:return Cc+"box-"+Yu(e,"-grow","")+Cc+e+Ac+Yu(e,"grow","positive")+e;case 4554:return Cc+Yu(e,/([^-])(transform)/g,"$1"+Cc+"$2")+e;case 6187:return Yu(Yu(Yu(e,/(zoom-|grab)/,Cc+"$1"),/(image-set)/,Cc+"$1"),e,"")+e;case 5495:case 3959:return Yu(e,/(image-set\([^]*)/,Cc+"$1$`$1");case 4968:return Yu(Yu(e,/(.+:)(flex-)?(.*)/,Cc+"box-pack:$3"+Ac+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+Cc+e+e;case 4095:case 3583:case 4068:case 2532:return Yu(e,/(.+)-inline(.+)/,Cc+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(Qu(e)-1-t>6)switch(Ku(e,t+1)){case 109:if(45!==Ku(e,t+4))break;case 102:return Yu(e,/(.+:)(.+)-([^]+)/,"$1"+Cc+"$2-$3$1"+wc+(108==Ku(e,t+3)?"$3":"$2-$3"))+e;case 115:return~qu(e,"stretch")?zc(Yu(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==Ku(e,t+1))break;case 6444:switch(Ku(e,Qu(e)-3-(~qu(e,"!important")&&10))){case 107:return Yu(e,":",":"+Cc)+e;case 101:return Yu(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+Cc+(45===Ku(e,14)?"inline-":"")+"box$3$1"+Cc+"$2$3$1"+Ac+"$2box$3")+e}break;case 5936:switch(Ku(e,t+11)){case 114:return Cc+e+Ac+Yu(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return Cc+e+Ac+Yu(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return Cc+e+Ac+Yu(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return Cc+e+Ac+e+e}return e}var Ic=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case Sc:e.return=zc(e.value,e.length);break;case Nc:return _c([ic(e,{value:Yu(e.value,"@","@"+Cc)})],r);case kc:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return _c([ic(e,{props:[Yu(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return _c([ic(e,{props:[Yu(t,/:(plac\w+)/,":"+Cc+"input-$1")]}),ic(e,{props:[Yu(t,/:(plac\w+)/,":-moz-$1")]}),ic(e,{props:[Yu(t,/:(plac\w+)/,Ac+"input-$1")]})],r)}return""}))}}],Vc=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var r,o,a=e.stylisPlugins||Ic,i={},l=[];r=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)i[t[n]]=!0;l.push(e)}));var s,u,c,d,p=[Bc,(d=function(e){s.insert(e)},function(e){e.root||(e=e.return)&&d(e)})],f=(u=[Mc,Dc].concat(a,p),c=Xu(u),function(e,t,n,r){for(var o="",a=0;a<c;a++)o+=u[a](e,t,n,r)||"";return o});o=function(e,t,n,r){s=n,_c(Pc(e?e+"{"+t.styles+"}":t.styles),f),r&&(m.inserted[t.name]=!0)};var m={key:t,sheet:new Vu({key:t,container:r,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:i,registered:{},insert:o};return m.sheet.hydrate(l),m},$c={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},Uc=/[A-Z]|^ms/g,Wc=/_EMO_([^_]+?)_([^]*?)_EMO_/g,Hc=function(e){return 45===e.charCodeAt(1)},Yc=function(e){return null!=e&&"boolean"!=typeof e},qc=Du((function(e){return Hc(e)?e:e.replace(Uc,"-$&").toLowerCase()})),Kc=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(Wc,(function(e,t,n){return Qc={name:t,styles:n,next:Qc},t}))}return 1===$c[e]||Hc(e)||"number"!=typeof t||0===t?t:t+"px"};function Gc(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return Qc={name:n.name,styles:n.styles,next:Qc},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)Qc={name:r.name,styles:r.styles,next:Qc},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=Gc(e,t,n[o])+";";else for(var a in n){var i=n[a];if("object"!=typeof i)null!=t&&void 0!==t[i]?r+=a+"{"+t[i]+"}":Yc(i)&&(r+=qc(a)+":"+Kc(a,i)+";");else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var l=Gc(e,t,i);switch(a){case"animation":case"animationName":r+=qc(a)+":"+l+";";break;default:r+=a+"{"+l+"}"}}else for(var s=0;s<i.length;s++)Yc(i[s])&&(r+=qc(a)+":"+Kc(a,i[s])+";")}return r}(e,t,n);case"function":if(void 0!==e){var o=Qc,a=n(e);return Qc=o,Gc(e,t,a)}}if(null==t)return n;var i=t[n];return void 0!==i?i:n}var Qc,Xc=/label:\s*([^\s;\n{]+)\s*(;|$)/g,Zc=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,o="";Qc=void 0;var a=e[0];null==a||void 0===a.raw?(r=!1,o+=Gc(n,t,a)):o+=a[0];for(var i=1;i<e.length;i++)o+=Gc(n,t,e[i]),r&&(o+=a[i]);Xc.lastIndex=0;for(var l,s="";null!==(l=Xc.exec(o));)s+="-"+l[1];var u=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)}(o)+s;return{name:u,styles:o,next:Qc}},Jc=!!r.useInsertionEffect&&r.useInsertionEffect,ed=Jc||function(e){return e()},td=Jc||n.useLayoutEffect,nd=n.createContext("undefined"!=typeof HTMLElement?Vc({key:"css"}):null);nd.Provider;var rd=function(e){return(0,n.forwardRef)((function(t,r){var o=(0,n.useContext)(nd);return e(t,o,r)}))},od=n.createContext({}),ad=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},id=function(e,t,n){ad(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var o=t;do{e.insert(t===o?"."+r:"",o,e.sheet,!0),o=o.next}while(void 0!==o)}},ld=Iu,sd=function(e){return"theme"!==e},ud=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?ld:sd},cd=function(e,t,n){var r;if(t){var o=t.shouldForwardProp;r=e.__emotion_forwardProp&&o?function(t){return e.__emotion_forwardProp(t)&&o(t)}:o}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},dd=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return ad(t,n,r),ed((function(){return id(t,n,r)})),null},pd=function e(t,r){var o,a,i=t.__emotion_real===t,l=i&&t.__emotion_base||t;void 0!==r&&(o=r.label,a=r.target);var s=cd(t,r,i),u=s||ud(l),c=!u("as");return function(){var d=arguments,p=i&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==o&&p.push("label:"+o+";"),null==d[0]||void 0===d[0].raw)p.push.apply(p,d);else{p.push(d[0][0]);for(var f=d.length,m=1;m<f;m++)p.push(d[m],d[0][m])}var h=rd((function(e,t,r){var o,i,d,f,m=c&&e.as||l,h="",g=[],y=e;if(null==e.theme){for(var v in y={},e)y[v]=e[v];y.theme=n.useContext(od)}"string"==typeof e.className?(o=t.registered,i=g,d=e.className,f="",d.split(" ").forEach((function(e){void 0!==o[e]?i.push(o[e]+";"):f+=e+" "})),h=f):null!=e.className&&(h=e.className+" ");var b=Zc(p.concat(g),t.registered,y);h+=t.key+"-"+b.name,void 0!==a&&(h+=" "+a);var x=c&&void 0===s?ud(m):u,A={};for(var w in e)c&&"as"===w||x(w)&&(A[w]=e[w]);return A.className=h,A.ref=r,n.createElement(n.Fragment,null,n.createElement(dd,{cache:t,serialized:b,isStringTag:"string"==typeof m}),n.createElement(m,A))}));return h.displayName=void 0!==o?o:"Styled("+("string"==typeof l?l:l.displayName||l.name||"Component")+")",h.defaultProps=t.defaultProps,h.__emotion_real=h,h.__emotion_base=l,h.__emotion_styles=p,h.__emotion_forwardProp=s,Object.defineProperty(h,"toString",{value:function(){return"."+a}}),h.withComponent=function(t,n){return e(t,Nu({},r,n,{shouldForwardProp:cd(h,n,!0)})).apply(void 0,p)},h}}.bind();function fd(e){if("object"!=typeof e||null===e)return!1;const t=Object.getPrototypeOf(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)}function md(e){if(!fd(e))return e;const t={};return Object.keys(e).forEach((n=>{t[n]=md(e[n])})),t}function hd(e,t,n={clone:!0}){const r=n.clone?Nu({},e):e;return fd(e)&&fd(t)&&Object.keys(t).forEach((o=>{"__proto__"!==o&&(fd(t[o])&&o in e&&fd(e[o])?r[o]=hd(e[o],t[o],n):n.clone?r[o]=fd(t[o])?md(t[o]):t[o]:r[o]=t[o])})),r}["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){pd[e]=pd(e)}));const gd=["values","unit","step"],yd={borderRadius:4},vd={xs:0,sm:600,md:900,lg:1200,xl:1536},bd={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${vd[e]}px)`};function xd(e,t,n){const r=e.theme||{};if(Array.isArray(t)){const e=r.breakpoints||bd;return t.reduce(((r,o,a)=>(r[e.up(e.keys[a])]=n(t[a]),r)),{})}if("object"==typeof t){const e=r.breakpoints||bd;return Object.keys(t).reduce(((r,o)=>{if(-1!==Object.keys(e.values||vd).indexOf(o))r[e.up(o)]=n(t[o],o);else{const e=o;r[e]=t[e]}return r}),{})}return n(t)}function Ad(e){if("string"!=typeof e)throw new Error(Tu(7));return e.charAt(0).toUpperCase()+e.slice(1)}function wd(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function Cd(e,t,n,r=n){let o;return o="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:wd(e,n)||r,t&&(o=t(o,r,e)),o}const Ed=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:r,transform:o}=e,a=e=>{if(null==e[t])return null;const a=e[t],i=wd(e.theme,r)||{};return xd(e,a,(e=>{let r=Cd(i,o,e);return e===r&&"string"==typeof e&&(r=Cd(i,o,`${t}${"default"===e?"":Ad(e)}`,e)),!1===n?r:{[n]:r}}))};return a.propTypes={},a.filterProps=[t],a},kd=function(e,t){return t?hd(e,t,{clone:!1}):e},Sd={m:"margin",p:"padding"},Nd={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},_d={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},Bd=function(e){const t={};return e=>(void 0===t[e]&&(t[e]=(e=>{if(e.length>2){if(!_d[e])return[e];e=_d[e]}const[t,n]=e.split(""),r=Sd[t],o=Nd[n]||"";return Array.isArray(o)?o.map((e=>r+e)):[r+o]})(e)),t[e])}(),Pd=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],Td=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],Od=[...Pd,...Td];function Rd(e,t,n,r){var o;const a=null!=(o=wd(e,t,!1))?o:n;return"number"==typeof a?e=>"string"==typeof e?e:a*e:Array.isArray(a)?e=>"string"==typeof e?e:a[e]:"function"==typeof a?a:()=>{}}function Fd(e){return Rd(e,"spacing",8)}function Ld(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:`-${n}`}function jd(e,t){const n=Fd(e.theme);return Object.keys(e).map((r=>function(e,t,n,r){if(-1===t.indexOf(n))return null;const o=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=Ld(t,n),e)),{})}(Bd(n),r);return xd(e,e[n],o)}(e,t,r,n))).reduce(kd,{})}function Md(e){return jd(e,Pd)}function Dd(e){return jd(e,Td)}function zd(e){return jd(e,Od)}Md.propTypes={},Md.filterProps=Pd,Dd.propTypes={},Dd.filterProps=Td,zd.propTypes={},zd.filterProps=Od;const Id=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?kd(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};function Vd(e){return"number"!=typeof e?e:`${e}px solid`}function $d(e,t){return Ed({prop:e,themeKey:"borders",transform:t})}const Ud=$d("border",Vd),Wd=$d("borderTop",Vd),Hd=$d("borderRight",Vd),Yd=$d("borderBottom",Vd),qd=$d("borderLeft",Vd),Kd=$d("borderColor"),Gd=$d("borderTopColor"),Qd=$d("borderRightColor"),Xd=$d("borderBottomColor"),Zd=$d("borderLeftColor"),Jd=$d("outline",Vd),ep=$d("outlineColor"),tp=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=Rd(e.theme,"shape.borderRadius",4),n=e=>({borderRadius:Ld(t,e)});return xd(e,e.borderRadius,n)}return null};tp.propTypes={},tp.filterProps=["borderRadius"],Id(Ud,Wd,Hd,Yd,qd,Kd,Gd,Qd,Xd,Zd,tp,Jd,ep);const np=e=>{if(void 0!==e.gap&&null!==e.gap){const t=Rd(e.theme,"spacing",8),n=e=>({gap:Ld(t,e)});return xd(e,e.gap,n)}return null};np.propTypes={},np.filterProps=["gap"];const rp=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=Rd(e.theme,"spacing",8),n=e=>({columnGap:Ld(t,e)});return xd(e,e.columnGap,n)}return null};rp.propTypes={},rp.filterProps=["columnGap"];const op=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=Rd(e.theme,"spacing",8),n=e=>({rowGap:Ld(t,e)});return xd(e,e.rowGap,n)}return null};function ap(e,t){return"grey"===t?t:e}function ip(e){return e<=1&&0!==e?100*e+"%":e}op.propTypes={},op.filterProps=["rowGap"],Id(np,rp,op,Ed({prop:"gridColumn"}),Ed({prop:"gridRow"}),Ed({prop:"gridAutoFlow"}),Ed({prop:"gridAutoColumns"}),Ed({prop:"gridAutoRows"}),Ed({prop:"gridTemplateColumns"}),Ed({prop:"gridTemplateRows"}),Ed({prop:"gridTemplateAreas"}),Ed({prop:"gridArea"})),Id(Ed({prop:"color",themeKey:"palette",transform:ap}),Ed({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:ap}),Ed({prop:"backgroundColor",themeKey:"palette",transform:ap}));const lp=Ed({prop:"width",transform:ip}),sp=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n,r;const o=(null==(n=e.theme)||null==(n=n.breakpoints)||null==(n=n.values)?void 0:n[t])||vd[t];return o?"px"!==(null==(r=e.theme)||null==(r=r.breakpoints)?void 0:r.unit)?{maxWidth:`${o}${e.theme.breakpoints.unit}`}:{maxWidth:o}:{maxWidth:ip(t)}};return xd(e,e.maxWidth,t)}return null};sp.filterProps=["maxWidth"];const up=Ed({prop:"minWidth",transform:ip}),cp=Ed({prop:"height",transform:ip}),dp=Ed({prop:"maxHeight",transform:ip}),pp=Ed({prop:"minHeight",transform:ip}),fp=(Ed({prop:"size",cssProperty:"width",transform:ip}),Ed({prop:"size",cssProperty:"height",transform:ip}),Id(lp,sp,up,cp,dp,pp,Ed({prop:"boxSizing"})),{border:{themeKey:"borders",transform:Vd},borderTop:{themeKey:"borders",transform:Vd},borderRight:{themeKey:"borders",transform:Vd},borderBottom:{themeKey:"borders",transform:Vd},borderLeft:{themeKey:"borders",transform:Vd},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},outline:{themeKey:"borders",transform:Vd},outlineColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:tp},color:{themeKey:"palette",transform:ap},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:ap},backgroundColor:{themeKey:"palette",transform:ap},p:{style:Dd},pt:{style:Dd},pr:{style:Dd},pb:{style:Dd},pl:{style:Dd},px:{style:Dd},py:{style:Dd},padding:{style:Dd},paddingTop:{style:Dd},paddingRight:{style:Dd},paddingBottom:{style:Dd},paddingLeft:{style:Dd},paddingX:{style:Dd},paddingY:{style:Dd},paddingInline:{style:Dd},paddingInlineStart:{style:Dd},paddingInlineEnd:{style:Dd},paddingBlock:{style:Dd},paddingBlockStart:{style:Dd},paddingBlockEnd:{style:Dd},m:{style:Md},mt:{style:Md},mr:{style:Md},mb:{style:Md},ml:{style:Md},mx:{style:Md},my:{style:Md},margin:{style:Md},marginTop:{style:Md},marginRight:{style:Md},marginBottom:{style:Md},marginLeft:{style:Md},marginX:{style:Md},marginY:{style:Md},marginInline:{style:Md},marginInlineStart:{style:Md},marginInlineEnd:{style:Md},marginBlock:{style:Md},marginBlockStart:{style:Md},marginBlockEnd:{style:Md},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:np},rowGap:{style:op},columnGap:{style:rp},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:ip},maxWidth:{style:sp},minWidth:{transform:ip},height:{transform:ip},maxHeight:{transform:ip},minHeight:{transform:ip},boxSizing:{},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}}),mp=function(){function e(e,t,n,r){const o={[e]:t,theme:n},a=r[e];if(!a)return{[e]:t};const{cssProperty:i=e,themeKey:l,transform:s,style:u}=a;if(null==t)return null;if("typography"===l&&"inherit"===t)return{[e]:t};const c=wd(n,l)||{};return u?u(o):xd(o,t,(t=>{let n=Cd(c,s,t);return t===n&&"string"==typeof t&&(n=Cd(c,s,`${e}${"default"===t?"":Ad(t)}`,t)),!1===i?n:{[i]:n}}))}return function t(n){var r;const{sx:o,theme:a={}}=n||{};if(!o)return null;const i=null!=(r=a.unstable_sxConfig)?r:fp;function l(n){let r=n;if("function"==typeof n)r=n(a);else if("object"!=typeof n)return n;if(!r)return null;const o=function(e={}){var t;return(null==(t=e.keys)?void 0:t.reduce(((t,n)=>(t[e.up(n)]={},t)),{}))||{}}(a.breakpoints),l=Object.keys(o);let s=o;return Object.keys(r).forEach((n=>{const o="function"==typeof(l=r[n])?l(a):l;var l;if(null!=o)if("object"==typeof o)if(i[n])s=kd(s,e(n,o,a,i));else{const e=xd({theme:a},o,(e=>({[n]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(e,o)?s=kd(s,e):s[n]=t({sx:o,theme:a})}else s=kd(s,e(n,o,a,i))})),u=s,l.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),u);var u}return Array.isArray(o)?o.map(l):l(o)}}();mp.filterProps=["sx"];const hp=mp,gp=["breakpoints","palette","spacing","shape"],yp=function(e={},...t){const{breakpoints:n={},palette:r={},spacing:o,shape:a={}}=e,i=Su(e,gp),l=function(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:r=5}=e,o=Su(e,gd),a=(e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>Nu({},e,{[t.key]:t.val})),{})})(t),i=Object.keys(a);function l(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function s(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-r/100}${n})`}function u(e,o){const a=i.indexOf(o);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==a&&"number"==typeof t[i[a]]?t[i[a]]:o)-r/100}${n})`}return Nu({keys:i,values:a,up:l,down:s,between:u,only:function(e){return i.indexOf(e)+1<i.length?u(e,i[i.indexOf(e)+1]):l(e)},not:function(e){const t=i.indexOf(e);return 0===t?l(i[1]):t===i.length-1?s(i[t]):u(e,i[i.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},o)}(n),s=function(e=8){if(e.mui)return e;const t=Fd({spacing:e}),n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}(o);let u=hd({breakpoints:l,direction:"ltr",components:{},palette:Nu({mode:"light"},r),spacing:s,shape:Nu({},yd,a)},i);return u=t.reduce(((e,t)=>hd(e,t)),u),u.unstable_sxConfig=Nu({},fp,null==i?void 0:i.unstable_sxConfig),u.unstable_sx=function(e){return hp({sx:e,theme:this})},u},vp=["variant"];function bp(e){return 0===e.length}function xp(e){const{variant:t}=e,n=Su(e,vp);let r=t||"";return Object.keys(n).sort().forEach((t=>{r+="color"===t?bp(r)?e[t]:Ad(e[t]):`${bp(r)?t:Ad(t)}${Ad(e[t].toString())}`})),r}const Ap=["name","slot","skipVariantsResolver","skipSx","overridesResolver"],wp=e=>{let t=0;const n={};return e&&e.forEach((e=>{let r="";"function"==typeof e.props?(r=`callback${t}`,t+=1):r=xp(e.props),n[r]=e.style})),n},Cp=(e,t,n)=>{const{ownerState:r={}}=e,o=[];let a=0;return n&&n.forEach((n=>{let i=!0;if("function"==typeof n.props){const t=Nu({},e,r);i=n.props(t)}else Object.keys(n.props).forEach((t=>{r[t]!==n.props[t]&&e[t]!==n.props[t]&&(i=!1)}));i&&("function"==typeof n.props?o.push(t[`callback${a}`]):o.push(t[xp(n.props)])),"function"==typeof n.props&&(a+=1)})),o};function Ep(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const kp=yp(),Sp=e=>e?e.charAt(0).toLowerCase()+e.slice(1):e;function Np({defaultTheme:e,theme:t,themeId:n}){return r=t,0===Object.keys(r).length?e:t[n]||t;var r}function _p(e){return e?(t,n)=>n[e]:null}const Bp=({styledArg:e,props:t,defaultTheme:n,themeId:r})=>{const o=e(Nu({},t,{theme:Np(Nu({},t,{defaultTheme:n,themeId:r}))}));let a;return o&&o.variants&&(a=o.variants,delete o.variants),a?[o,...Cp(t,wp(a),a)]:o};const Pp={black:"#000",white:"#fff"},Tp={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},Op={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff"},Rp={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},Fp={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},Lp={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},jp={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea"},Mp={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"},Dp=["mode","contrastThreshold","tonalOffset"],zp={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:Pp.white,default:Pp.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},Ip={text:{primary:Pp.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:Pp.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function Vp(e,t,n,r){const o=r.light||r,a=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=function(e,t){if(e=Fu(e),t=Ru(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return Lu(e)}(e.main,o):"dark"===t&&(e.dark=function(e,t){if(e=Fu(e),t=Ru(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return Lu(e)}(e.main,a)))}const $p=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],Up={textTransform:"uppercase"},Wp='"Roboto", "Helvetica", "Arial", sans-serif';function Hp(e,t){const n="function"==typeof t?t(e):t,{fontFamily:r=Wp,fontSize:o=14,fontWeightLight:a=300,fontWeightRegular:i=400,fontWeightMedium:l=500,fontWeightBold:s=700,htmlFontSize:u=16,allVariants:c,pxToRem:d}=n,p=Su(n,$p),f=o/14,m=d||(e=>e/u*f+"rem"),h=(e,t,n,o,a)=>{return Nu({fontFamily:r,fontWeight:e,fontSize:m(t),lineHeight:n},r===Wp?{letterSpacing:(i=o/t,Math.round(1e5*i)/1e5+"em")}:{},a,c);var i},g={h1:h(a,96,1.167,-1.5),h2:h(a,60,1.2,-.5),h3:h(i,48,1.167,0),h4:h(i,34,1.235,.25),h5:h(i,24,1.334,0),h6:h(l,20,1.6,.15),subtitle1:h(i,16,1.75,.15),subtitle2:h(l,14,1.57,.1),body1:h(i,16,1.5,.15),body2:h(i,14,1.43,.15),button:h(l,14,1.75,.4,Up),caption:h(i,12,1.66,.4),overline:h(i,12,2.66,1,Up),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return hd(Nu({htmlFontSize:u,pxToRem:m,fontFamily:r,fontSize:o,fontWeightLight:a,fontWeightRegular:i,fontWeightMedium:l,fontWeightBold:s},g),p,{clone:!1})}function Yp(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const qp=["none",Yp(0,2,1,-1,0,1,1,0,0,1,3,0),Yp(0,3,1,-2,0,2,2,0,0,1,5,0),Yp(0,3,3,-2,0,3,4,0,0,1,8,0),Yp(0,2,4,-1,0,4,5,0,0,1,10,0),Yp(0,3,5,-1,0,5,8,0,0,1,14,0),Yp(0,3,5,-1,0,6,10,0,0,1,18,0),Yp(0,4,5,-2,0,7,10,1,0,2,16,1),Yp(0,5,5,-3,0,8,10,1,0,3,14,2),Yp(0,5,6,-3,0,9,12,1,0,3,16,2),Yp(0,6,6,-3,0,10,14,1,0,4,18,3),Yp(0,6,7,-4,0,11,15,1,0,4,20,3),Yp(0,7,8,-4,0,12,17,2,0,5,22,4),Yp(0,7,8,-4,0,13,19,2,0,5,24,4),Yp(0,7,9,-4,0,14,21,2,0,5,26,4),Yp(0,8,9,-5,0,15,22,2,0,6,28,5),Yp(0,8,10,-5,0,16,24,2,0,6,30,5),Yp(0,8,11,-5,0,17,26,2,0,6,32,5),Yp(0,9,11,-5,0,18,28,2,0,7,34,6),Yp(0,9,12,-6,0,19,29,2,0,7,36,6),Yp(0,10,13,-6,0,20,31,3,0,8,38,7),Yp(0,10,13,-6,0,21,33,3,0,8,40,7),Yp(0,10,14,-6,0,22,35,3,0,8,42,7),Yp(0,11,14,-7,0,23,36,3,0,9,44,8),Yp(0,11,15,-7,0,24,38,3,0,9,46,8)],Kp=["duration","easing","delay"],Gp={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},Qp={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function Xp(e){return`${Math.round(e)}ms`}function Zp(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function Jp(e){const t=Nu({},Gp,e.easing),n=Nu({},Qp,e.duration);return Nu({getAutoHeightDuration:Zp,create:(e=["all"],r={})=>{const{duration:o=n.standard,easing:a=t.easeInOut,delay:i=0}=r;return Su(r,Kp),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof o?o:Xp(o)} ${a} ${"string"==typeof i?i:Xp(i)}`)).join(",")}},e,{easing:t,duration:n})}const ef={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},tf=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];const nf=function(e={},...t){const{mixins:n={},palette:r={},transitions:o={},typography:a={}}=e,i=Su(e,tf);if(e.vars)throw new Error(Tu(18));const l=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:r=.2}=e,o=Su(e,Dp),a=e.primary||function(e="light"){return"dark"===e?{main:Lp[200],light:Lp[50],dark:Lp[400]}:{main:Lp[700],light:Lp[400],dark:Lp[800]}}(t),i=e.secondary||function(e="light"){return"dark"===e?{main:Op[200],light:Op[50],dark:Op[400]}:{main:Op[500],light:Op[300],dark:Op[700]}}(t),l=e.error||function(e="light"){return"dark"===e?{main:Rp[500],light:Rp[300],dark:Rp[700]}:{main:Rp[700],light:Rp[400],dark:Rp[800]}}(t),s=e.info||function(e="light"){return"dark"===e?{main:jp[400],light:jp[300],dark:jp[700]}:{main:jp[700],light:jp[500],dark:jp[900]}}(t),u=e.success||function(e="light"){return"dark"===e?{main:Mp[400],light:Mp[300],dark:Mp[700]}:{main:Mp[800],light:Mp[500],dark:Mp[900]}}(t),c=e.warning||function(e="light"){return"dark"===e?{main:Fp[400],light:Fp[300],dark:Fp[700]}:{main:"#ed6c02",light:Fp[500],dark:Fp[900]}}(t);function d(e){const t=function(e,t){const n=ju(e),r=ju(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,Ip.text.primary)>=n?Ip.text.primary:zp.text.primary;return t}const p=({color:e,name:t,mainShade:n=500,lightShade:o=300,darkShade:a=700})=>{if(!(e=Nu({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error(Tu(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error(Tu(12,t?` (${t})`:"",JSON.stringify(e.main)));return Vp(e,"light",o,r),Vp(e,"dark",a,r),e.contrastText||(e.contrastText=d(e.main)),e},f={dark:Ip,light:zp};return hd(Nu({common:Nu({},Pp),mode:t,primary:p({color:a,name:"primary"}),secondary:p({color:i,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:p({color:l,name:"error"}),warning:p({color:c,name:"warning"}),info:p({color:s,name:"info"}),success:p({color:u,name:"success"}),grey:Tp,contrastThreshold:n,getContrastText:d,augmentColor:p,tonalOffset:r},f[t]),o)}(r),s=yp(e);let u=hd(s,{mixins:(c=s.breakpoints,d=n,Nu({toolbar:{minHeight:56,[c.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[c.up("sm")]:{minHeight:64}}},d)),palette:l,shadows:qp.slice(),typography:Hp(l,a),transitions:Jp(o),zIndex:Nu({},ef),applyDarkStyles(e){return this.vars?{[this.getColorSchemeSelector("dark").replace(/(\[[^\]]+\])/,":where($1)")]:e}:"dark"===this.palette.mode?e:{}}});var c,d;return u=hd(u,i),u=t.reduce(((e,t)=>hd(e,t)),u),u.unstable_sxConfig=Nu({},fp,null==i?void 0:i.unstable_sxConfig),u.unstable_sx=function(e){return hp({sx:e,theme:this})},u}(),rf="$$material",of=function(e={}){const{themeId:t,defaultTheme:n=kp,rootShouldForwardProp:r=Ep,slotShouldForwardProp:o=Ep}=e,a=e=>hp(Nu({},e,{theme:Np(Nu({},e,{defaultTheme:n,themeId:t}))}));return a.__mui_systemSx=!0,(e,i={})=>{((e,t)=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=e.__emotion_styles.filter((e=>!(null!=e&&e.__mui_systemSx))))})(e);const{name:l,slot:s,skipVariantsResolver:u,skipSx:c,overridesResolver:d=_p(Sp(s))}=i,p=Su(i,Ap),f=void 0!==u?u:s&&"Root"!==s&&"root"!==s||!1,m=c||!1;let h=Ep;"Root"===s||"root"===s?h=r:s?h=o:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(h=void 0);const g=function(e,t){return pd(e,t)}(e,Nu({shouldForwardProp:h,label:void 0},p)),y=(r,...o)=>{const i=o?o.map((e=>{if("function"==typeof e&&e.__emotion_real!==e)return r=>Bp({styledArg:e,props:r,defaultTheme:n,themeId:t});if(fd(e)){let t,n=e;return e&&e.variants&&(t=e.variants,delete n.variants,n=n=>{let r=e;return Cp(n,wp(t),t).forEach((e=>{r=hd(r,e)})),r}),n}return e})):[];let s=r;if(fd(r)){let e;r&&r.variants&&(e=r.variants,delete s.variants,s=t=>{let n=r;return Cp(t,wp(e),e).forEach((e=>{n=hd(n,e)})),n})}else"function"==typeof r&&r.__emotion_real!==r&&(s=e=>Bp({styledArg:r,props:e,defaultTheme:n,themeId:t}));l&&d&&i.push((e=>{const r=Np(Nu({},e,{defaultTheme:n,themeId:t})),o=((e,t)=>t.components&&t.components[e]&&t.components[e].styleOverrides?t.components[e].styleOverrides:null)(l,r);if(o){const t={};return Object.entries(o).forEach((([n,o])=>{t[n]="function"==typeof o?o(Nu({},e,{theme:r})):o})),d(e,t)}return null})),l&&!f&&i.push((e=>{const r=Np(Nu({},e,{defaultTheme:n,themeId:t}));return((e,t,n,r)=>{var o;const a=null==n||null==(o=n.components)||null==(o=o[r])?void 0:o.variants;return Cp(e,t,a)})(e,((e,t)=>{let n=[];return t&&t.components&&t.components[e]&&t.components[e].variants&&(n=t.components[e].variants),wp(n)})(l,r),r,l)})),m||i.push(a);const u=i.length-o.length;if(Array.isArray(r)&&u>0){const e=new Array(u).fill("");s=[...r,...e],s.raw=[...r.raw,...e]}const c=g(s,...i);return e.muiName&&(c.muiName=e.muiName),c};return g.withConfig&&(y.withConfig=g.withConfig),y}}({themeId:rf,defaultTheme:nf,rootShouldForwardProp:e=>Ep(e)&&"classes"!==e}),af=of,lf=e=>{let t;return t=e<1?5.11916*e**2:4.5*Math.log(e+1)+2,(t/100).toFixed(2)};function sf(e,t){const n=Nu({},t);return Object.keys(e).forEach((r=>{if(r.toString().match(/^(components|slots)$/))n[r]=Nu({},e[r],n[r]);else if(r.toString().match(/^(componentsProps|slotProps)$/)){const o=e[r]||{},a=t[r];n[r]={},a&&Object.keys(a)?o&&Object.keys(o)?(n[r]=Nu({},a),Object.keys(o).forEach((e=>{n[r][e]=sf(o[e],a[e])}))):n[r]=a:n[r]=o}else void 0===n[r]&&(n[r]=e[r])})),n}function uf(e){const{theme:t,name:n,props:r}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?sf(t.components[n].defaultProps,r):r}const cf=yp(),df=function(e=cf){return function(e=null){const t=n.useContext(od);return t&&(r=t,0!==Object.keys(r).length)?t:e;var r}(e)};function pf({props:e,name:t}){return function({props:e,name:t,defaultTheme:n,themeId:r}){let o=df(n);return r&&(o=o[r]||o),uf({theme:o,name:t,props:e})}({props:e,name:t,defaultTheme:nf,themeId:rf})}const ff=e=>e,mf=(()=>{let e=ff;return{configure(t){e=t},generate:t=>e(t),reset(){e=ff}}})(),hf={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",open:"open",readOnly:"readOnly",required:"required",selected:"selected"};function gf(e,t,n="Mui"){const r=hf[t];return r?`${n}-${r}`:`${mf.generate(e)}-${t}`}function yf(e,t,n="Mui"){const r={};return t.forEach((t=>{r[t]=gf(e,t,n)})),r}function vf(e){return gf("MuiPaper",e)}yf("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);var bf=__webpack_require__(893);const xf=["className","component","elevation","square","variant"],Af=af("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],!n.square&&t.rounded,"elevation"===n.variant&&t[`elevation${n.elevation}`]]}})((({theme:e,ownerState:t})=>{var n;return Nu({backgroundColor:(e.vars||e).palette.background.paper,color:(e.vars||e).palette.text.primary,transition:e.transitions.create("box-shadow")},!t.square&&{borderRadius:e.shape.borderRadius},"outlined"===t.variant&&{border:`1px solid ${(e.vars||e).palette.divider}`},"elevation"===t.variant&&Nu({boxShadow:(e.vars||e).shadows[t.elevation]},!e.vars&&"dark"===e.palette.mode&&{backgroundImage:`linear-gradient(${Mu("#fff",lf(t.elevation))}, ${Mu("#fff",lf(t.elevation))})`},e.vars&&{backgroundImage:null==(n=e.vars.overlays)?void 0:n[t.elevation]}))})),wf=n.forwardRef((function(e,t){const n=pf({props:e,name:"MuiPaper"}),{className:r,component:o="div",elevation:a=1,square:i=!1,variant:l="elevation"}=n,s=Su(n,xf),u=Nu({},n,{component:o,elevation:a,square:i,variant:l}),c=(e=>{const{square:t,elevation:n,variant:r,classes:o}=e;return Pu({root:["root",r,!t&&"rounded","elevation"===r&&`elevation${n}`]},vf,o)})(u);return(0,bf.jsx)(Af,Nu({as:o,ownerState:u,className:Bu(c.root,r),ref:t},s))}));var Cf=__webpack_require__(935);function Ef(...e){return n.useMemo((()=>e.every((e=>null==e))?null:t=>{e.forEach((e=>{!function(e,t){"function"==typeof e?e(t):e&&(e.current=t)}(e,t)}))}),e)}function kf(e){const t=function(e){return e&&e.ownerDocument||document}(e);return t.defaultView||window}const Sf="undefined"!=typeof window?n.useLayoutEffect:n.useEffect,Nf=["onChange","maxRows","minRows","style","value"];function _f(e){return parseInt(e,10)||0}const Bf={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"};function Pf(e){return null==e||0===Object.keys(e).length||0===e.outerHeightStyle&&!e.overflow}const Tf=n.forwardRef((function(e,t){const{onChange:r,maxRows:o,minRows:a=1,style:i,value:l}=e,s=Su(e,Nf),{current:u}=n.useRef(null!=l),c=n.useRef(null),d=Ef(t,c),p=n.useRef(null),f=n.useRef(0),[m,h]=n.useState({outerHeightStyle:0}),g=n.useCallback((()=>{const t=c.current,n=kf(t).getComputedStyle(t);if("0px"===n.width)return{outerHeightStyle:0};const r=p.current;r.style.width=n.width,r.value=t.value||e.placeholder||"x","\n"===r.value.slice(-1)&&(r.value+=" ");const i=n.boxSizing,l=_f(n.paddingBottom)+_f(n.paddingTop),s=_f(n.borderBottomWidth)+_f(n.borderTopWidth),u=r.scrollHeight;r.value="x";const d=r.scrollHeight;let f=u;return a&&(f=Math.max(Number(a)*d,f)),o&&(f=Math.min(Number(o)*d,f)),f=Math.max(f,d),{outerHeightStyle:f+("border-box"===i?l+s:0),overflow:Math.abs(f-u)<=1}}),[o,a,e.placeholder]),y=(e,t)=>{const{outerHeightStyle:n,overflow:r}=t;return f.current<20&&(n>0&&Math.abs((e.outerHeightStyle||0)-n)>1||e.overflow!==r)?(f.current+=1,{overflow:r,outerHeightStyle:n}):e},v=n.useCallback((()=>{const e=g();Pf(e)||h((t=>y(t,e)))}),[g]);return Sf((()=>{const e=()=>{f.current=0,(()=>{const e=g();Pf(e)||Cf.flushSync((()=>{h((t=>y(t,e)))}))})()};const t=function(e,t=166){let n;function r(...r){clearTimeout(n),n=setTimeout((()=>{e.apply(this,r)}),t)}return r.clear=()=>{clearTimeout(n)},r}(e),n=c.current,r=kf(n);let o;return r.addEventListener("resize",t),"undefined"!=typeof ResizeObserver&&(o=new ResizeObserver(e),o.observe(n)),()=>{t.clear(),cancelAnimationFrame(undefined),r.removeEventListener("resize",t),o&&o.disconnect()}}),[g]),Sf((()=>{v()})),n.useEffect((()=>{f.current=0}),[l]),(0,bf.jsxs)(n.Fragment,{children:[(0,bf.jsx)("textarea",Nu({value:l,onChange:e=>{f.current=0,u||v(),r&&r(e)},ref:d,rows:a,style:Nu({height:m.outerHeightStyle,overflow:m.overflow?"hidden":void 0},i)},s)),(0,bf.jsx)("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:p,tabIndex:-1,style:Nu({},Bf,i,{paddingTop:0,paddingBottom:0})})]})}));function Of(e){return"string"==typeof e}const Rf=n.createContext(void 0),Ff=Ad,Lf=Ef,jf=Sf;__webpack_require__(679);var Mf=rd((function(e,t){var r=e.styles,o=Zc([r],void 0,n.useContext(od)),a=n.useRef();return td((function(){var e=t.key+"-global",n=new t.sheet.constructor({key:e,nonce:t.sheet.nonce,container:t.sheet.container,speedy:t.sheet.isSpeedy}),r=!1,i=document.querySelector('style[data-emotion="'+e+" "+o.name+'"]');return t.sheet.tags.length&&(n.before=t.sheet.tags[0]),null!==i&&(r=!0,i.setAttribute("data-emotion",e),n.hydrate([i])),a.current=[n,r],function(){n.flush()}}),[t]),td((function(){var e=a.current,n=e[0];if(e[1])e[1]=!1;else{if(void 0!==o.next&&id(t,o.next,!0),n.tags.length){var r=n.tags[n.tags.length-1].nextElementSibling;n.before=r,n.flush()}t.insert("",o,n,!1)}}),[t,o.name]),null}));function Df(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Zc(t)}var zf=function(){var e=Df.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}};function If(e){const{styles:t,defaultTheme:n={}}=e,r="function"==typeof t?e=>{return t(null==(r=e)||0===Object.keys(r).length?n:e);var r}:t;return(0,bf.jsx)(Mf,{styles:r})}const Vf=function({styles:e,themeId:t,defaultTheme:n={}}){const r=df(n),o="function"==typeof e?e(t&&r[t]||r):e;return(0,bf.jsx)(If,{styles:o})},$f=function(e){return(0,bf.jsx)(Vf,Nu({},e,{defaultTheme:nf,themeId:rf}))};function Uf(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function Wf(e){return gf("MuiInputBase",e)}const Hf=yf("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","readOnly","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]),Yf=["aria-describedby","autoComplete","autoFocus","className","color","components","componentsProps","defaultValue","disabled","disableInjectingGlobalStyles","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","size","slotProps","slots","startAdornment","type","value"],qf=af("div",{name:"MuiInputBase",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.formControl&&t.formControl,n.startAdornment&&t.adornedStart,n.endAdornment&&t.adornedEnd,n.error&&t.error,"small"===n.size&&t.sizeSmall,n.multiline&&t.multiline,n.color&&t[`color${Ff(n.color)}`],n.fullWidth&&t.fullWidth,n.hiddenLabel&&t.hiddenLabel]}})((({theme:e,ownerState:t})=>Nu({},e.typography.body1,{color:(e.vars||e).palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",[`&.${Hf.disabled}`]:{color:(e.vars||e).palette.text.disabled,cursor:"default"}},t.multiline&&Nu({padding:"4px 0 5px"},"small"===t.size&&{paddingTop:1}),t.fullWidth&&{width:"100%"}))),Kf=af("input",{name:"MuiInputBase",slot:"Input",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.input,"small"===n.size&&t.inputSizeSmall,n.multiline&&t.inputMultiline,"search"===n.type&&t.inputTypeSearch,n.startAdornment&&t.inputAdornedStart,n.endAdornment&&t.inputAdornedEnd,n.hiddenLabel&&t.inputHiddenLabel]}})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode,r=Nu({color:"currentColor"},e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5},{transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})}),o={opacity:"0 !important"},a=e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5};return Nu({font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${Hf.formControl} &`]:{"&::-webkit-input-placeholder":o,"&::-moz-placeholder":o,"&:-ms-input-placeholder":o,"&::-ms-input-placeholder":o,"&:focus::-webkit-input-placeholder":a,"&:focus::-moz-placeholder":a,"&:focus:-ms-input-placeholder":a,"&:focus::-ms-input-placeholder":a},[`&.${Hf.disabled}`]:{opacity:1,WebkitTextFillColor:(e.vars||e).palette.text.disabled},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},"small"===t.size&&{paddingTop:1},t.multiline&&{height:"auto",resize:"none",padding:0,paddingTop:0},"search"===t.type&&{MozAppearance:"textfield"})})),Gf=(0,bf.jsx)($f,{styles:{"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}}),Qf=n.forwardRef((function(e,t){var r;const o=pf({props:e,name:"MuiInputBase"}),{"aria-describedby":a,autoComplete:i,autoFocus:l,className:s,components:u={},componentsProps:c={},defaultValue:d,disabled:p,disableInjectingGlobalStyles:f,endAdornment:m,fullWidth:h=!1,id:g,inputComponent:y="input",inputProps:v={},inputRef:b,maxRows:x,minRows:A,multiline:w=!1,name:C,onBlur:E,onChange:k,onClick:S,onFocus:N,onKeyDown:_,onKeyUp:B,placeholder:P,readOnly:T,renderSuffix:O,rows:R,slotProps:F={},slots:L={},startAdornment:j,type:M="text",value:D}=o,z=Su(o,Yf),I=null!=v.value?v.value:D,{current:V}=n.useRef(null!=I),$=n.useRef(),U=n.useCallback((e=>{}),[]),W=Lf($,b,v.ref,U),[H,Y]=n.useState(!1),q=n.useContext(Rf),K=function({props:e,states:t,muiFormControl:n}){return t.reduce(((t,r)=>(t[r]=e[r],n&&void 0===e[r]&&(t[r]=n[r]),t)),{})}({props:o,muiFormControl:q,states:["color","disabled","error","hiddenLabel","size","required","filled"]});K.focused=q?q.focused:H,n.useEffect((()=>{!q&&p&&H&&(Y(!1),E&&E())}),[q,p,H,E]);const G=q&&q.onFilled,Q=q&&q.onEmpty,X=n.useCallback((e=>{!function(e,t=!1){return e&&(Uf(e.value)&&""!==e.value||t&&Uf(e.defaultValue)&&""!==e.defaultValue)}(e)?Q&&Q():G&&G()}),[G,Q]);jf((()=>{V&&X({value:I})}),[I,X,V]),n.useEffect((()=>{X($.current)}),[]);let Z=y,J=v;w&&"input"===Z&&(J=Nu(R?{type:void 0,minRows:R,maxRows:R}:{type:void 0,maxRows:x,minRows:A},J),Z=Tf),n.useEffect((()=>{q&&q.setAdornedStart(Boolean(j))}),[q,j]);const ee=Nu({},o,{color:K.color||"primary",disabled:K.disabled,endAdornment:m,error:K.error,focused:K.focused,formControl:q,fullWidth:h,hiddenLabel:K.hiddenLabel,multiline:w,size:K.size,startAdornment:j,type:M}),te=(e=>{const{classes:t,color:n,disabled:r,error:o,endAdornment:a,focused:i,formControl:l,fullWidth:s,hiddenLabel:u,multiline:c,readOnly:d,size:p,startAdornment:f,type:m}=e;return Pu({root:["root",`color${Ff(n)}`,r&&"disabled",o&&"error",s&&"fullWidth",i&&"focused",l&&"formControl",p&&"medium"!==p&&`size${Ff(p)}`,c&&"multiline",f&&"adornedStart",a&&"adornedEnd",u&&"hiddenLabel",d&&"readOnly"],input:["input",r&&"disabled","search"===m&&"inputTypeSearch",c&&"inputMultiline","small"===p&&"inputSizeSmall",u&&"inputHiddenLabel",f&&"inputAdornedStart",a&&"inputAdornedEnd",d&&"readOnly"]},Wf,t)})(ee),ne=L.root||u.Root||qf,re=F.root||c.root||{},oe=L.input||u.Input||Kf;return J=Nu({},J,null!=(r=F.input)?r:c.input),(0,bf.jsxs)(n.Fragment,{children:[!f&&Gf,(0,bf.jsxs)(ne,Nu({},re,!Of(ne)&&{ownerState:Nu({},ee,re.ownerState)},{ref:t,onClick:e=>{$.current&&e.currentTarget===e.target&&$.current.focus(),S&&S(e)}},z,{className:Bu(te.root,re.className,s,T&&"MuiInputBase-readOnly"),children:[j,(0,bf.jsx)(Rf.Provider,{value:null,children:(0,bf.jsx)(oe,Nu({ownerState:ee,"aria-invalid":K.error,"aria-describedby":a,autoComplete:i,autoFocus:l,defaultValue:d,disabled:K.disabled,id:g,onAnimationStart:e=>{X("mui-auto-fill-cancel"===e.animationName?$.current:{value:"x"})},name:C,placeholder:P,readOnly:T,required:K.required,rows:R,value:I,onKeyDown:_,onKeyUp:B,type:M},J,!Of(oe)&&{as:Z,ownerState:Nu({},ee,J.ownerState)},{ref:W,className:Bu(te.input,J.className,T&&"MuiInputBase-readOnly"),onBlur:e=>{E&&E(e),v.onBlur&&v.onBlur(e),q&&q.onBlur?q.onBlur(e):Y(!1)},onChange:(e,...t)=>{if(!V){const t=e.target||$.current;if(null==t)throw new Error(Tu(1));X({value:t.value})}v.onChange&&v.onChange(e,...t),k&&k(e,...t)},onFocus:e=>{K.disabled?e.stopPropagation():(N&&N(e),v.onFocus&&v.onFocus(e),q&&q.onFocus?q.onFocus(e):Y(!0))}}))}),m,O?O(Nu({},K,{startAdornment:j})):null]}))]})})),Xf=Qf,Zf=function(e){const t=n.useRef(e);return Sf((()=>{t.current=e})),n.useRef(((...e)=>(0,t.current)(...e))).current};let Jf,em=!0,tm=!1;const nm={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function rm(e){e.metaKey||e.altKey||e.ctrlKey||(em=!0)}function om(){em=!1}function am(){"hidden"===this.visibilityState&&tm&&(em=!0)}const im=function(){const e=n.useCallback((e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",rm,!0),t.addEventListener("mousedown",om,!0),t.addEventListener("pointerdown",om,!0),t.addEventListener("touchstart",om,!0),t.addEventListener("visibilitychange",am,!0))}),[]),t=n.useRef(!1);return{isFocusVisibleRef:t,onFocus:function(e){return!!function(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return em||function(e){const{type:t,tagName:n}=e;return!("INPUT"!==n||!nm[t]||e.readOnly)||"TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable}(t)}(e)&&(t.current=!0,!0)},onBlur:function(){return!!t.current&&(tm=!0,window.clearTimeout(Jf),Jf=window.setTimeout((()=>{tm=!1}),100),t.current=!1,!0)},ref:e}};function lm(e,t){return lm=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},lm(e,t)}const sm=n.createContext(null);function um(e,t){var r=Object.create(null);return e&&n.Children.map(e,(function(e){return e})).forEach((function(e){r[e.key]=function(e){return t&&(0,n.isValidElement)(e)?t(e):e}(e)})),r}function cm(e,t,n){return null!=n[t]?n[t]:e.props[t]}function dm(e,t,r){var o=um(e.children),a=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),a=[];for(var i in e)i in t?a.length&&(o[i]=a,a=[]):a.push(i);var l={};for(var s in t){if(o[s])for(r=0;r<o[s].length;r++){var u=o[s][r];l[o[s][r]]=n(u)}l[s]=n(s)}for(r=0;r<a.length;r++)l[a[r]]=n(a[r]);return l}(t,o);return Object.keys(a).forEach((function(i){var l=a[i];if((0,n.isValidElement)(l)){var s=i in t,u=i in o,c=t[i],d=(0,n.isValidElement)(c)&&!c.props.in;!u||s&&!d?u||!s||d?u&&s&&(0,n.isValidElement)(c)&&(a[i]=(0,n.cloneElement)(l,{onExited:r.bind(null,l),in:c.props.in,exit:cm(l,"exit",e),enter:cm(l,"enter",e)})):a[i]=(0,n.cloneElement)(l,{in:!1}):a[i]=(0,n.cloneElement)(l,{onExited:r.bind(null,l),in:!0,exit:cm(l,"exit",e),enter:cm(l,"enter",e)})}})),a}var pm=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},fm=function(e){var t,r;function o(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}r=e,(t=o).prototype=Object.create(r.prototype),t.prototype.constructor=t,lm(t,r);var a=o.prototype;return a.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},a.componentWillUnmount=function(){this.mounted=!1},o.getDerivedStateFromProps=function(e,t){var r,o,a=t.children,i=t.handleExited;return{children:t.firstRender?(r=e,o=i,um(r.children,(function(e){return(0,n.cloneElement)(e,{onExited:o.bind(null,e),in:!0,appear:cm(e,"appear",r),enter:cm(e,"enter",r),exit:cm(e,"exit",r)})}))):dm(e,a,i),firstRender:!1}},a.handleExited=function(e,t){var n=um(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=Nu({},t.children);return delete n[e.key],{children:n}})))},a.render=function(){var e=this.props,t=e.component,r=e.childFactory,o=Su(e,["component","childFactory"]),a=this.state.contextValue,i=pm(this.state.children).map(r);return delete o.appear,delete o.enter,delete o.exit,null===t?n.createElement(sm.Provider,{value:a},i):n.createElement(sm.Provider,{value:a},n.createElement(t,o,i))},o}(n.Component);fm.propTypes={},fm.defaultProps={component:"div",childFactory:function(e){return e}};const mm=fm,hm=yf("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),gm=["center","classes","className"];let ym,vm,bm,xm,Am=e=>e;const wm=zf(ym||(ym=Am`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),Cm=zf(vm||(vm=Am`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),Em=zf(bm||(bm=Am`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),km=af("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),Sm=af((function(e){const{className:t,classes:r,pulsate:o=!1,rippleX:a,rippleY:i,rippleSize:l,in:s,onExited:u,timeout:c}=e,[d,p]=n.useState(!1),f=Bu(t,r.ripple,r.rippleVisible,o&&r.ripplePulsate),m={width:l,height:l,top:-l/2+i,left:-l/2+a},h=Bu(r.child,d&&r.childLeaving,o&&r.childPulsate);return s||d||p(!0),n.useEffect((()=>{if(!s&&null!=u){const e=setTimeout(u,c);return()=>{clearTimeout(e)}}}),[u,s,c]),(0,bf.jsx)("span",{className:f,style:m,children:(0,bf.jsx)("span",{className:h})})}),{name:"MuiTouchRipple",slot:"Ripple"})(xm||(xm=Am`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),hm.rippleVisible,wm,550,(({theme:e})=>e.transitions.easing.easeInOut),hm.ripplePulsate,(({theme:e})=>e.transitions.duration.shorter),hm.child,hm.childLeaving,Cm,550,(({theme:e})=>e.transitions.easing.easeInOut),hm.childPulsate,Em,(({theme:e})=>e.transitions.easing.easeInOut)),Nm=n.forwardRef((function(e,t){const r=pf({props:e,name:"MuiTouchRipple"}),{center:o=!1,classes:a={},className:i}=r,l=Su(r,gm),[s,u]=n.useState([]),c=n.useRef(0),d=n.useRef(null);n.useEffect((()=>{d.current&&(d.current(),d.current=null)}),[s]);const p=n.useRef(!1),f=n.useRef(0),m=n.useRef(null),h=n.useRef(null);n.useEffect((()=>()=>{f.current&&clearTimeout(f.current)}),[]);const g=n.useCallback((e=>{const{pulsate:t,rippleX:n,rippleY:r,rippleSize:o,cb:i}=e;u((e=>[...e,(0,bf.jsx)(Sm,{classes:{ripple:Bu(a.ripple,hm.ripple),rippleVisible:Bu(a.rippleVisible,hm.rippleVisible),ripplePulsate:Bu(a.ripplePulsate,hm.ripplePulsate),child:Bu(a.child,hm.child),childLeaving:Bu(a.childLeaving,hm.childLeaving),childPulsate:Bu(a.childPulsate,hm.childPulsate)},timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:o},c.current)])),c.current+=1,d.current=i}),[a]),y=n.useCallback(((e={},t={},n=(()=>{}))=>{const{pulsate:r=!1,center:a=o||t.pulsate,fakeElement:i=!1}=t;if("mousedown"===(null==e?void 0:e.type)&&p.current)return void(p.current=!1);"touchstart"===(null==e?void 0:e.type)&&(p.current=!0);const l=i?null:h.current,s=l?l.getBoundingClientRect():{width:0,height:0,left:0,top:0};let u,c,d;if(a||void 0===e||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)u=Math.round(s.width/2),c=Math.round(s.height/2);else{const{clientX:t,clientY:n}=e.touches&&e.touches.length>0?e.touches[0]:e;u=Math.round(t-s.left),c=Math.round(n-s.top)}if(a)d=Math.sqrt((2*s.width**2+s.height**2)/3),d%2==0&&(d+=1);else{const e=2*Math.max(Math.abs((l?l.clientWidth:0)-u),u)+2,t=2*Math.max(Math.abs((l?l.clientHeight:0)-c),c)+2;d=Math.sqrt(e**2+t**2)}null!=e&&e.touches?null===m.current&&(m.current=()=>{g({pulsate:r,rippleX:u,rippleY:c,rippleSize:d,cb:n})},f.current=setTimeout((()=>{m.current&&(m.current(),m.current=null)}),80)):g({pulsate:r,rippleX:u,rippleY:c,rippleSize:d,cb:n})}),[o,g]),v=n.useCallback((()=>{y({},{pulsate:!0})}),[y]),b=n.useCallback(((e,t)=>{if(clearTimeout(f.current),"touchend"===(null==e?void 0:e.type)&&m.current)return m.current(),m.current=null,void(f.current=setTimeout((()=>{b(e,t)})));m.current=null,u((e=>e.length>0?e.slice(1):e)),d.current=t}),[]);return n.useImperativeHandle(t,(()=>({pulsate:v,start:y,stop:b})),[v,y,b]),(0,bf.jsx)(km,Nu({className:Bu(hm.root,a.root,i),ref:h},l,{children:(0,bf.jsx)(mm,{component:null,exit:!0,children:s})}))})),_m=Nm;function Bm(e){return gf("MuiButtonBase",e)}const Pm=yf("MuiButtonBase",["root","disabled","focusVisible"]),Tm=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","touchRippleRef","type"],Om=af("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${Pm.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),Rm=n.forwardRef((function(e,t){const r=pf({props:e,name:"MuiButtonBase"}),{action:o,centerRipple:a=!1,children:i,className:l,component:s="button",disabled:u=!1,disableRipple:c=!1,disableTouchRipple:d=!1,focusRipple:p=!1,LinkComponent:f="a",onBlur:m,onClick:h,onContextMenu:g,onDragLeave:y,onFocus:v,onFocusVisible:b,onKeyDown:x,onKeyUp:A,onMouseDown:w,onMouseLeave:C,onMouseUp:E,onTouchEnd:k,onTouchMove:S,onTouchStart:N,tabIndex:_=0,TouchRippleProps:B,touchRippleRef:P,type:T}=r,O=Su(r,Tm),R=n.useRef(null),F=n.useRef(null),L=Lf(F,P),{isFocusVisibleRef:j,onFocus:M,onBlur:D,ref:z}=im(),[I,V]=n.useState(!1);u&&I&&V(!1),n.useImperativeHandle(o,(()=>({focusVisible:()=>{V(!0),R.current.focus()}})),[]);const[$,U]=n.useState(!1);n.useEffect((()=>{U(!0)}),[]);const W=$&&!c&&!u;function H(e,t,n=d){return Zf((r=>(t&&t(r),!n&&F.current&&F.current[e](r),!0)))}n.useEffect((()=>{I&&p&&!c&&$&&F.current.pulsate()}),[c,p,I,$]);const Y=H("start",w),q=H("stop",g),K=H("stop",y),G=H("stop",E),Q=H("stop",(e=>{I&&e.preventDefault(),C&&C(e)})),X=H("start",N),Z=H("stop",k),J=H("stop",S),ee=H("stop",(e=>{D(e),!1===j.current&&V(!1),m&&m(e)}),!1),te=Zf((e=>{R.current||(R.current=e.currentTarget),M(e),!0===j.current&&(V(!0),b&&b(e)),v&&v(e)})),ne=()=>{const e=R.current;return s&&"button"!==s&&!("A"===e.tagName&&e.href)},re=n.useRef(!1),oe=Zf((e=>{p&&!re.current&&I&&F.current&&" "===e.key&&(re.current=!0,F.current.stop(e,(()=>{F.current.start(e)}))),e.target===e.currentTarget&&ne()&&" "===e.key&&e.preventDefault(),x&&x(e),e.target===e.currentTarget&&ne()&&"Enter"===e.key&&!u&&(e.preventDefault(),h&&h(e))})),ae=Zf((e=>{p&&" "===e.key&&F.current&&I&&!e.defaultPrevented&&(re.current=!1,F.current.stop(e,(()=>{F.current.pulsate(e)}))),A&&A(e),h&&e.target===e.currentTarget&&ne()&&" "===e.key&&!e.defaultPrevented&&h(e)}));let ie=s;"button"===ie&&(O.href||O.to)&&(ie=f);const le={};"button"===ie?(le.type=void 0===T?"button":T,le.disabled=u):(O.href||O.to||(le.role="button"),u&&(le["aria-disabled"]=u));const se=Lf(t,z,R),ue=Nu({},r,{centerRipple:a,component:s,disabled:u,disableRipple:c,disableTouchRipple:d,focusRipple:p,tabIndex:_,focusVisible:I}),ce=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:o}=e,a=Pu({root:["root",t&&"disabled",n&&"focusVisible"]},Bm,o);return n&&r&&(a.root+=` ${r}`),a})(ue);return(0,bf.jsxs)(Om,Nu({as:ie,className:Bu(ce.root,l),ownerState:ue,onBlur:ee,onClick:h,onContextMenu:q,onFocus:te,onKeyDown:oe,onKeyUp:ae,onMouseDown:Y,onMouseLeave:Q,onMouseUp:G,onDragLeave:K,onTouchEnd:Z,onTouchMove:J,onTouchStart:X,ref:se,tabIndex:u?-1:_,type:T},le,O,{children:[i,W?(0,bf.jsx)(_m,Nu({ref:L,center:a},B)):null]}))})),Fm=Rm;function Lm(e){return gf("MuiIconButton",e)}const jm=yf("MuiIconButton",["root","disabled","colorInherit","colorPrimary","colorSecondary","colorError","colorInfo","colorSuccess","colorWarning","edgeStart","edgeEnd","sizeSmall","sizeMedium","sizeLarge"]),Mm=["edge","children","className","color","disabled","disableFocusRipple","size"],Dm=af(Fm,{name:"MuiIconButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"default"!==n.color&&t[`color${Ff(n.color)}`],n.edge&&t[`edge${Ff(n.edge)}`],t[`size${Ff(n.size)}`]]}})((({theme:e,ownerState:t})=>Nu({textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:8,borderRadius:"50%",overflow:"visible",color:(e.vars||e).palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest})},!t.disableRipple&&{"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})`:Mu(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"start"===t.edge&&{marginLeft:"small"===t.size?-3:-12},"end"===t.edge&&{marginRight:"small"===t.size?-3:-12})),(({theme:e,ownerState:t})=>{var n;const r=null==(n=(e.vars||e).palette)?void 0:n[t.color];return Nu({},"inherit"===t.color&&{color:"inherit"},"inherit"!==t.color&&"default"!==t.color&&Nu({color:null==r?void 0:r.main},!t.disableRipple&&{"&:hover":Nu({},r&&{backgroundColor:e.vars?`rgba(${r.mainChannel} / ${e.vars.palette.action.hoverOpacity})`:Mu(r.main,e.palette.action.hoverOpacity)},{"@media (hover: none)":{backgroundColor:"transparent"}})}),"small"===t.size&&{padding:5,fontSize:e.typography.pxToRem(18)},"large"===t.size&&{padding:12,fontSize:e.typography.pxToRem(28)},{[`&.${jm.disabled}`]:{backgroundColor:"transparent",color:(e.vars||e).palette.action.disabled}})})),zm=n.forwardRef((function(e,t){const n=pf({props:e,name:"MuiIconButton"}),{edge:r=!1,children:o,className:a,color:i="default",disabled:l=!1,disableFocusRipple:s=!1,size:u="medium"}=n,c=Su(n,Mm),d=Nu({},n,{edge:r,color:i,disabled:l,disableFocusRipple:s,size:u}),p=(e=>{const{classes:t,disabled:n,color:r,edge:o,size:a}=e;return Pu({root:["root",n&&"disabled","default"!==r&&`color${Ff(r)}`,o&&`edge${Ff(o)}`,`size${Ff(a)}`]},Lm,t)})(d);return(0,bf.jsx)(Dm,Nu({className:Bu(p.root,a),centerRipple:!0,focusRipple:!s,disabled:l,ref:t,ownerState:d},c,{children:o}))})),Im=zm,Vm=function(){var e=(0,n.useContext)(Eu),t=se(),r=(0,n.useRef)(),o=function(){if(0===r.current.value.trim().length)return!1;e.setSearchStringFn(r.current.value.trim()),t("/recept"),console.log("recepti pretraga",r)};return n.createElement(wf,{component:"form",se:{p:"2px 4px",display:"flex",alignItems:"center",width:"80rem",fontSize:"28px",backgroundColor:"red"}},n.createElement(Xf,{className:"base",sx:{p:"5px 10px",ml:5,flex:1},autoFocus:!0,placeholder:"recipe",inputRef:r,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),o())}}),n.createElement(Im,{type:"button",onClick:o,sx:{p:"10px"},"aria-label":"search"},"🥧"))},$m=function(e){var t=(0,n.useContext)(Eu),r=se(),o=(0,n.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;t.setSearchStringFn(o.current.value.trim()),r("/kalorije/nutrition"),console.log("Search nutrition pretraga",o)};return n.createElement(wf,{component:"form",sx:{p:"2px 4px",display:"flex",alignItems:"center",width:"16rem",fontSize:"28px",backgroundColor:"lightgray"}},n.createElement(Xf,{sx:{ml:1,width:"20rem",flex:1},autoFocus:!0,placeholder:"search food",inputProps:{"ariel-label":"search"},inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),n.createElement(Im,{type:"button",onClick:a,sx:{p:"10px"},"aria-label":"search"},"🍎"))};function Um(e){return Um="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Um(e)}function Wm(){Wm=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,o){var a=t&&t.prototype instanceof p?t:p,i=Object.create(a.prototype),l=new k(o||[]);return r(i,"_invoke",{value:A(e,n,l)}),i}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var d={};function p(){}function f(){}function m(){}var h={};s(h,a,(function(){return this}));var g=Object.getPrototypeOf,y=g&&g(g(S([])));y&&y!==t&&n.call(y,a)&&(h=y);var v=m.prototype=p.prototype=Object.create(h);function b(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function o(r,a,i,l){var s=c(e[r],e,a);if("throw"!==s.type){var u=s.arg,d=u.value;return d&&"object"==Um(d)&&n.call(d,"__await")?t.resolve(d.__await).then((function(e){o("next",e,i,l)}),(function(e){o("throw",e,i,l)})):t.resolve(d).then((function(e){u.value=e,i(u)}),(function(e){return o("throw",e,i,l)}))}l(s.arg)}var a;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return a=a?a.then(r,r):r()}})}function A(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return{value:void 0,done:!0}}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=w(i,n);if(l){if(l===d)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var s=c(e,t,n);if("normal"===s.type){if(r=n.done?"completed":"suspendedYield",s.arg===d)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r="completed",n.method="throw",n.arg=s.arg)}}}function w(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,w(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),d;var o=c(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,d;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,d):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,d)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function E(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function k(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function S(e){if(e||""===e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}throw new TypeError(Um(e)+" is not iterable")}return f.prototype=m,r(v,"constructor",{value:m,configurable:!0}),r(m,"constructor",{value:f,configurable:!0}),f.displayName=s(m,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===f||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,s(e,l,"GeneratorFunction")),e.prototype=Object.create(v),e},e.awrap=function(e){return{__await:e}},b(x.prototype),s(x.prototype,i,(function(){return this})),e.AsyncIterator=x,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new x(u(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},b(v),s(v,l,"Generator"),s(v,a,(function(){return this})),s(v,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=S,k.prototype={constructor:k,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=n.call(a,"catchLoc"),s=n.call(a,"finallyLoc");if(l&&s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,d):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),d},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),E(n),d}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;E(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:S(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),d}},e}function Hm(e,t,n,r,o,a,i){try{var l=e[a](i),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,o)}function Ym(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],s=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return qm(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?qm(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function qm(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Km=function(){var e=Ym((0,n.useState)(null),2),t=(e[0],e[1]),r=Ym((0,n.useState)([]),2),o=r[0],a=r[1],i=Ym((0,n.useState)([]),2),l=(i[0],i[1]),s=(0,n.useContext)(Eu).searchStringValue;(0,n.useEffect)((function(){u(s)}),[s]),console.log("iz resultNutrition searchStringValue:",s);var u=function(){var e,n=(e=Wm().mark((function e(n){var r,o,i;return Wm().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.api-ninjas.com/v1/nutrition?query=".concat(n),e.prev=1,e.next=4,Cu.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:o=e.sent,i=o.data,console.log("rezultat nutritiion",i),a(i),l(i.length),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(1),t(e.t0);case 14:case"end":return e.stop()}}),e,null,[[1,11]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Hm(a,r,o,i,l,"next",e)}function l(e){Hm(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return n.apply(this,arguments)}}();return n.createElement(n.Fragment,null,n.createElement("div",{className:"odnosi"},n.createElement("div",null,n.createElement($m,null)),n.createElement("div",null,n.createElement(Vm,null))),n.createElement("table",{className:"hrana"},n.createElement("thead",null,n.createElement("tr",{className:"oil"},n.createElement("th",{className:"nutriName",colSpan:2},"Hrana"))),n.createElement("tbody",null,o.map((function(e){return n.createElement(ku,{key:e.name,dataNut:e})})))))};function Gm(e){return Gm="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Gm(e)}function Qm(){Qm=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,o){var a=t&&t.prototype instanceof p?t:p,i=Object.create(a.prototype),l=new k(o||[]);return r(i,"_invoke",{value:A(e,n,l)}),i}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var d={};function p(){}function f(){}function m(){}var h={};s(h,a,(function(){return this}));var g=Object.getPrototypeOf,y=g&&g(g(S([])));y&&y!==t&&n.call(y,a)&&(h=y);var v=m.prototype=p.prototype=Object.create(h);function b(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function o(r,a,i,l){var s=c(e[r],e,a);if("throw"!==s.type){var u=s.arg,d=u.value;return d&&"object"==Gm(d)&&n.call(d,"__await")?t.resolve(d.__await).then((function(e){o("next",e,i,l)}),(function(e){o("throw",e,i,l)})):t.resolve(d).then((function(e){u.value=e,i(u)}),(function(e){return o("throw",e,i,l)}))}l(s.arg)}var a;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return a=a?a.then(r,r):r()}})}function A(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return{value:void 0,done:!0}}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=w(i,n);if(l){if(l===d)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var s=c(e,t,n);if("normal"===s.type){if(r=n.done?"completed":"suspendedYield",s.arg===d)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r="completed",n.method="throw",n.arg=s.arg)}}}function w(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,w(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),d;var o=c(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,d;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,d):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,d)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function E(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function k(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function S(e){if(e||""===e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}throw new TypeError(Gm(e)+" is not iterable")}return f.prototype=m,r(v,"constructor",{value:m,configurable:!0}),r(m,"constructor",{value:f,configurable:!0}),f.displayName=s(m,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===f||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,s(e,l,"GeneratorFunction")),e.prototype=Object.create(v),e},e.awrap=function(e){return{__await:e}},b(x.prototype),s(x.prototype,i,(function(){return this})),e.AsyncIterator=x,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new x(u(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},b(v),s(v,l,"Generator"),s(v,a,(function(){return this})),s(v,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=S,k.prototype={constructor:k,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=n.call(a,"catchLoc"),s=n.call(a,"finallyLoc");if(l&&s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,d):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),d},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),E(n),d}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;E(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:S(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),d}},e}function Xm(e,t,n,r,o,a,i){try{var l=e[a](i),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,o)}function Zm(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],s=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Jm(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Jm(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Jm(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const eh=function(){var e=Zm((0,n.useState)(null),2),t=(e[0],e[1]),r=Zm((0,n.useState)([]),2),o=r[0],a=r[1],i=Zm((0,n.useState)([]),2),l=i[0],s=i[1],u=Zm((0,n.useState)(!1),2),c=(u[0],u[1],(0,n.useContext)(Eu).searchStringValue);(0,n.useEffect)((function(){d(c)}),[c]),console.log("iz resultRecipe searchStringValue:",c);var d=function(){var e,n=(e=Qm().mark((function e(n){var r,o,i;return Qm().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.api-ninjas.com/v1/recipe?query=".concat(n),e.prev=1,e.next=4,Cu.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:o=e.sent,i=o.data,console.log("rezultat recipe pretrage",i),a(i),s(i.length),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(1),t(e.t0);case 14:case"end":return e.stop()}}),e,null,[[1,11]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Xm(a,r,o,i,l,"next",e)}function l(e){Xm(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return n.apply(this,arguments)}}();return 0==l?n.createElement(n.Fragment,null,n.createElement("table",{className:"odnosi"},n.createElement("thead",null,n.createElement("tr",null,n.createElement("th",null,"Nothing found"))))):n.createElement(n.Fragment,null,n.createElement("div",{className:"odnosi"},n.createElement("div",null,n.createElement($m,null)),n.createElement("div",null,n.createElement(Vm,null))),n.createElement("table",{className:"odnosi"},n.createElement("thead",null,n.createElement("tr",null,n.createElement("th",{colSpan:2,className:"history"},"Recipe")),n.createElement("tr",{className:"results"},n.createElement("th",{colSpan:2},"Number of Recipe: ",l))),o.map((function(e){return n.createElement("tbody",null,n.createElement("tr",null,n.createElement("td",{className:"title",colSpan:2},e.title)),n.createElement("tr",null,n.createElement("td",{className:"recipe"},"For:"),n.createElement("td",{className:"nameComm"},e.servings)),n.createElement("tr",null,n.createElement("td",{className:"recipe",colSpan:2},"Ingredients:")),n.createElement("tr",null,"                            ",n.createElement("td",{className:"nameComm",colSpan:2},e.ingredients.replace("|"," ").replace("|"," ").replace("|"," ").replace("|"," ").replace("|"," ").replace("|"," ").replace("|"," ").replace("|"," ").replace("|"," ").replace("|"," ").replace("|"," ").replace("|"," ").replace("|"," ").replace("|"," ").replace("|"," ").replace("|"," ").replace("|"," ").replace("|"," "))),n.createElement("tr",null,n.createElement("td",{className:"recipe",colSpan:2},"Instructions:")),n.createElement("tr",null,n.createElement("td",{className:"nameComm",colSpan:2},e.instructions)),n.createElement("tr",null,n.createElement("td",{colSpan:2},n.createElement("hr",null))))}))))},th=function(){return n.createElement(n.Fragment,null,n.createElement("div",{className:"odnosi"},n.createElement("div",null,n.createElement($m,null)),n.createElement("div",null,n.createElement(Vm,null))))};function nh(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],s=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return rh(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?rh(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function rh(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const oh=function(){var e=nh((0,n.useState)(),2),t=e[0],r=e[1],o=nh((0,n.useState)(),2),a=o[0],i=o[1],l=nh((0,n.useState)(),2),s=l[0],u=l[1],c=nh((0,n.useState)(!1),2),d=c[0],p=c[1];(0,n.useEffect)((function(){f()}),[]);var f=function(){setInterval((function(){var e=new Date,t=e.getHours(),n=e.getMinutes(),o=e.getSeconds();r(t),i(n),u(o)}),1e3)};return n.createElement(n.Fragment,null,n.createElement("div",null,n.createElement("div",{className:"sati"},n.createElement("div",null,n.createElement(Tl.div,{className:"sekunde",layout:!0,style:{height:d?"117px":"0px"},transition:{ease:"easeInOut",type:"spring",duration:1,repeat:1/0}})),n.createElement("div",null,n.createElement("div",{className:"dan",style:{height:"".concat(2*s,"px"),backgroundColor:"#4db6ac"}},".",n.createElement("span",{className:"content"},n.createElement("span",null,s,"s")))),n.createElement("div",null,n.createElement("div",{className:"dan",style:{height:"".concat(2*a,"px"),backgroundColor:"#26a69a"}},".",n.createElement("span",{className:"content"},n.createElement("span",null,a,"m")))),n.createElement("div",null,n.createElement("div",{className:"dan",style:{height:"".concat(5*t,"px"),backgroundColor:"#009688"}},".",n.createElement("span",{className:"content"},n.createElement("span",null,t,"h"))))),n.createElement("div",{style:{width:"206px",height:"10px",color:"transparent",backgroundColor:"#80cbc4",margin:"auto",cursor:"pointer"},onMouseOver:function(){return p(!d)}},".")))};function ah(){return n.createElement(n.Fragment,null,n.createElement(Ne,{basename:"/"},n.createElement("div",{className:"navContainer"},n.createElement("div",null,n.createElement(Te,{to:"/",className:"linker",style:function(e){return{color:e.isActive?"white":"rgb(83, 85, 83)"}}},"ODNOSI")),n.createElement("div",null,n.createElement(Te,{to:"kalorije",className:"linker",style:function(e){return{color:e.isActive?"white":"rgb(83, 85, 83)"}}},"KALORIJE")),n.createElement("div",null,n.createElement(Te,{to:"recepti",className:"linker",style:function(e){return{color:e.isActive?"white":"rgb(83, 85, 83)"}}},"RECEPTI")),n.createElement("div",null,n.createElement(Te,{to:"tajmer",className:"linker",style:function(e){return{color:e.isActive?"white":"rgb(83, 85, 83)"}}},"TAJMER"))),n.createElement(oh,null),n.createElement(xe,null,n.createElement(ve,{path:"/",element:n.createElement(Ue,null)}),n.createElement(ve,{path:"/kalorije",element:n.createElement(De,null)}),n.createElement(ve,{path:"/recepti",element:n.createElement(th,null)}),n.createElement(ve,{path:"/tajmer",element:n.createElement(Fl,null)}),n.createElement(ve,{path:"/kalorije/nutrition",element:n.createElement(Km,null)}),n.createElement(ve,{path:"/recept",element:n.createElement(eh,null)})),n.createElement("div",{className:"home"},n.createElement("div",{className:"img"}))))}function ih(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const lh=function(){var e,t,r=(e=(0,n.useState)("Enter search criterium!"),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],s=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ih(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ih(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],a=r[1];return n.createElement(Eu.Provider,{value:{setSearchStringFn:a,searchStringValue:o}},n.createElement(ah,null))};o.createRoot(document.getElementById("root")).render(n.createElement(lh,{number:10,title:"String from index file",text:"Text from index file"}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RyxHQUE3QzR0QixFQUFZRCxFQUFBLEdBQUVFLEVBQWVGLEVBQUEsR0FDZ0JHLEVBQUExQyxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Qyt0QixFQUFZRCxFQUFBLEdBQUVFLEVBQWVGLEVBQUEsR0FDZ0JHLEVBQUE3QyxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q2t1QixFQUFZRCxFQUFBLEdBQUVFLEVBQWVGLEVBQUEsR0FDZ0JHLEVBQUFoRCxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q3F1QixFQUFZRCxFQUFBLEdBQUVFLEVBQWVGLEVBQUEsR0FDZ0JHLEVBQUFuRCxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q3d1QixFQUFZRCxFQUFBLEdBQUVFLEdBQWVGLEVBQUEsR0FDZ0JHLEdBQUF0RCxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3QzJ1QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUF6RCxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Qzh1QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUE1RCxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q2l2QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUEvRCxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q292QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUFsRSxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q3V2QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUFyRSxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3QzB2QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUF4RSxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3QzZ2QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUEzRSxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q2d3QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUE5RSxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q213QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUFqRixJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q3N3QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUFwRixJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q3l3QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUF2RixJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3QzR3QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUExRixJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Qyt3QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUE3RixJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q2t4QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUFoRyxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q3F4QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUFuRyxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q3d4QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUF0RyxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3QzJ4QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUF6RyxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Qzh4QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUE1RyxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q2l5QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUEvRyxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q295QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUFsSCxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q3V5QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUFySCxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3QzB5QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUF4SCxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3QzZ5QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUEzSCxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q2d6QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUE5SCxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q216QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUFqSSxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q3N6QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUFwSSxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q3l6QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUF2SSxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3QzR6QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUExSSxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Qyt6QixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUE3SSxJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q2swQixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUFoSixJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q3EwQixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FDZ0JHLEdBQUFuSixJQUFacHJCLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUE3Q3cwQixHQUFZRCxHQUFBLEdBQUVFLEdBQWVGLEdBQUEsR0FnS3BDLE9BNUppQkcsS0E4SmI1ekQsRUFBQUEsY0FBQUEsRUFBQUEsU0FBQSxLQUVJQSxFQUFBQSxjQUFBLFNBQU9DLFVBQVUsU0FDYkQsRUFBQUEsY0FBQSxhQUNJQSxFQUFBQSxjQUFBLFVBQ0lBLEVBQUFBLGNBQUEsVUFBSyxTQUNMQSxFQUFBQSxjQUFBLFVBQUksUUFDSkEsRUFBQUEsY0FBQSxVQUFJLFdBQ0pBLEVBQUFBLGNBQUEsVUFBSSxNQUNKQSxFQUFBQSxjQUFBLFVBQUksUUFDSkEsRUFBQUEsY0FBQSxVQUFJLGNBR1pBLEVBQUFBLGNBQUEsYUFDSUEsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxVQUFTLFdBQ3ZCRCxFQUFBQSxjQUFBLFVBQ0lBLEVBQUFBLGNBQUEsU0FDSVEsS0FBSyxTQUFTZ0QsS0FBSyxTQUNuQnpELE1BQU93cUQsRUFDUHNKLFNBL0tELFNBQUNsMEQsR0FDeEI2cUQsRUFBZTdxRCxFQUFFYyxPQUFPVixNQUM1QixLQStLb0JDLEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNNLEtBQWRzcUQsR0FBcUJ1SixRQUFRLElBRW5DOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxVQUNNLElBQWRzcUQsR0FBb0J1SixRQUFRLElBRWxDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxTQUdkRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTSxLQUFkc3FELEdBQW9CdUosUUFBUSxLQUd0Qzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsV0FDVkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFVBQVMsb0JBQ3ZCRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsV0FDVkQsRUFBQUEsY0FBQSxTQUFPd0QsS0FBSyxTQUNSaEQsS0FBSyxTQUNMVCxNQUFPMnFELEVBQ1BtSixTQWpNRCxTQUFDbDBELEdBQ3hCZ3JELEVBQWVockQsRUFBRWMsT0FBT1YsTUFDNUIsS0FpTW9CQyxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTSxLQUFkeXFELEdBQXFCb0osUUFBUSxJQUVuQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTSxLQUFkeXFELEdBQXFCb0osUUFBUSxJQUVuQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFHZEQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ00sS0FBZHlxRCxHQUFvQm9KLFFBQVEsS0FHdEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxVQUFTLFdBQ3ZCRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsV0FDVkQsRUFBQUEsY0FBQSxTQUFPd0QsS0FBSyxTQUNSaEQsS0FBSyxTQUNMVCxNQUFPOHFELEVBQ1BnSixTQW5ORCxTQUFDbDBELEdBQ3hCbXJELEVBQWVuckQsRUFBRWMsT0FBT1YsTUFDNUIsS0FtTm9CQyxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTSxJQUFkNHFELEdBQW9CaUosUUFBUSxJQUVsQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTSxHQUFkNHFELEdBQW1CaUosUUFBUSxJQUVqQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFHZEQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ00sSUFBZDRxRCxHQUFvQmlKLFFBQVEsS0FHdEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxVQUFTLGtCQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssU0FDTFQsTUFBT2lyRCxFQUNQNkksU0FyT0QsU0FBQ2wwRCxHQUN4QnNyRCxFQUFldHJELEVBQUVjLE9BQU9WLE1BQzVCLEtBcU9vQkMsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ00sSUFBZCtxRCxHQUFvQjhJLFFBQVEsSUFFbEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ00sSUFBZCtxRCxHQUFvQjhJLFFBQVEsSUFFbEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ00sS0FBZCtxRCxHQUFxQjhJLFFBQVEsSUFFbkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ00sSUFBZCtxRCxHQUFtQjhJLFFBQVEsS0FHckM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxVQUFTLGlCQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssU0FDTFQsTUFBT29yRCxFQUNQMEksU0F2UEQsU0FBQ2wwRCxHQUN4QnlyRCxFQUFlenJELEVBQUVjLE9BQU9WLE1BQzVCLEtBdVBvQkMsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ00sSUFBZGtyRCxHQUFvQjJJLFFBQVEsSUFFbEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ00sSUFBZGtyRCxHQUFvQjJJLFFBQVEsSUFFbEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ00sS0FBZGtyRCxHQUFxQjJJLFFBQVEsSUFFbkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ00sS0FBZGtyRCxHQUFvQjJJLFFBQVEsS0FHdEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFFBQ1ZELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxVQUFTLFVBQ3ZCRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsV0FDVkQsRUFBQUEsY0FBQSxTQUFPd0QsS0FBSyxTQUNSaEQsS0FBSyxTQUNMVCxNQUFPdXJELEVBQ1B1SSxTQXpRRCxTQUFDbDBELEdBQ3hCNHJELEVBQWU1ckQsRUFBRWMsT0FBT1YsTUFDNUIsS0F5UW9CQyxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTSxJQUFkcXJELEdBQW9Cd0ksUUFBUSxJQUVsQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTSxHQUFkcXJELEdBQW1Cd0ksUUFBUSxJQUVqQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTSxJQUFkcXJELEdBQW9Cd0ksUUFBUSxJQUVsQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTSxJQUFkcXJELEdBQW1Cd0ksUUFBUSxLQUdyQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsUUFDVkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFVBQVMsZUFDdkJELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxXQUNWRCxFQUFBQSxjQUFBLFNBQU93RCxLQUFLLFNBQ1JoRCxLQUFLLFNBQ0xULE1BQU8wckQsRUFDUG9JLFNBM1JELFNBQUNsMEQsR0FDeEIrckQsRUFBZS9yRCxFQUFFYyxPQUFPVixNQUM1QixLQTJSb0JDLEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNNLElBQWR3ckQsR0FBb0JxSSxRQUFRLElBRWxDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNNLElBQWR3ckQsR0FBb0JxSSxRQUFRLElBRWxDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNNLElBQWR3ckQsR0FBb0JxSSxRQUFRLElBRWxDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNNLElBQWR3ckQsR0FBbUJxSSxRQUFRLEtBR3JDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxRQUNWRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsVUFBUyxVQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssU0FDTFQsTUFBTzZyRCxFQUNQaUksU0E3U0QsU0FBQ2wwRCxHQUN4QmtzRCxFQUFlbHNELEVBQUVjLE9BQU9WLE1BQzVCLEtBNlNvQkMsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ00sSUFBZDJyRCxHQUFvQmtJLFFBQVEsSUFFbEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ00sSUFBZDJyRCxHQUFvQmtJLFFBQVEsSUFFbEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ00sS0FBZDJyRCxHQUFxQmtJLFFBQVEsSUFFbkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ00sSUFBZDJyRCxHQUFtQmtJLFFBQVEsS0FHckM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFFBQ1ZELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxVQUFTLGlCQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssU0FDTFQsTUFBT2dzRCxFQUNQOEgsU0EvVEQsU0FBQ2wwRCxHQUN4QnFzRCxFQUFlcnNELEVBQUVjLE9BQU9WLE1BQzVCLEtBK1RvQkMsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ00sSUFBZDhyRCxHQUFvQitILFFBQVEsSUFFbEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBR2RELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNNLEtBQWQ4ckQsR0FBcUIrSCxRQUFRLElBRW5DOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNNLEtBQWQ4ckQsR0FBb0IrSCxRQUFRLEtBR3RDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxRQUNWRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsVUFBUyxZQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssVUFDTFQsTUFBT21zRCxFQUNQMkgsU0FqVkEsU0FBQ2wwRCxHQUN6QndzRCxFQUFnQnhzRCxFQUFFYyxPQUFPVixNQUM3QixLQWlWb0JDLEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLEtBQWZpc0QsR0FBc0I0SCxRQUFRLElBRXBDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUdkRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxLQUFmaXNELEdBQXNCNEgsUUFBUSxJQUVwQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxLQUFmaXNELEdBQXFCNEgsUUFBUSxLQUd2Qzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsUUFDVkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFVBQVMsZUFDdkJELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxXQUNWRCxFQUFBQSxjQUFBLFNBQU93RCxLQUFLLFNBQ1JoRCxLQUFLLFVBQ0xULE1BQU9zc0QsRUFDUHdILFNBbldBLFNBQUNsMEQsR0FDekIyc0QsRUFBZ0Izc0QsRUFBRWMsT0FBT1YsTUFDN0IsS0FtV29CQyxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxJQUFmb3NELEdBQXFCeUgsUUFBUSxJQUVuQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFHZEQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZm9zRCxHQUFxQnlILFFBQVEsSUFFbkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZm9zRCxHQUFxQnlILFFBQVEsS0FHdkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFFBQ1ZELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxVQUFTLG9CQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssVUFDTFQsTUFBT3lzRCxFQUNQcUgsU0FyWEEsU0FBQ2wwRCxHQUN6QjhzRCxFQUFnQjlzRCxFQUFFYyxPQUFPVixNQUM3QixLQXFYb0JDLEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLEtBQWZ1c0QsR0FBc0JzSCxRQUFRLElBRXBDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUdkRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxLQUFmdXNELEdBQXNCc0gsUUFBUSxJQUVwQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxLQUFmdXNELEdBQXFCc0gsUUFBUSxLQUd2Qzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsUUFDVkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFVBQVMsa0JBQ3ZCRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsV0FDVkQsRUFBQUEsY0FBQSxTQUFPd0QsS0FBSyxTQUNSaEQsS0FBSyxVQUNMVCxNQUFPNHNELEVBQ1BrSCxTQXZZQSxTQUFDbDBELEdBQ3pCaXRELEVBQWdCanRELEVBQUVjLE9BQU9WLE1BQzdCLEtBdVlvQkMsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sS0FBZjBzRCxHQUFzQm1ILFFBQVEsSUFFcEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBR2RELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLEtBQWYwc0QsR0FBc0JtSCxRQUFRLElBRXBDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLEtBQWYwc0QsR0FBcUJtSCxRQUFRLEtBR3ZDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxRQUNWRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsVUFBUyxzQkFDdkJELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxXQUNWRCxFQUFBQSxjQUFBLFNBQU93RCxLQUFLLFNBQ1JoRCxLQUFLLFVBQ0xULE1BQU8rc0QsRUFDUCtHLFNBelpBLFNBQUNsMEQsR0FDekJvdEQsRUFBZ0JwdEQsRUFBRWMsT0FBT1YsTUFDN0IsS0F5Wm9CQyxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxHQUFmNnNELEdBQW9CZ0gsUUFBUSxJQUVsQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFHZEQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZjZzRCxHQUFxQmdILFFBQVEsSUFFbkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sS0FBZjZzRCxHQUFxQmdILFFBQVEsS0FHdkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFFBQ1ZELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxVQUFTLGFBQ3ZCRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsV0FDVkQsRUFBQUEsY0FBQSxTQUFPd0QsS0FBSyxTQUNSaEQsS0FBSyxVQUNMVCxNQUFPa3RELEVBQ1A0RyxTQTNhQSxTQUFDbDBELEdBQ3pCdXRELEVBQWdCdnRELEVBQUVjLE9BQU9WLE1BQzdCLEtBMmFvQkMsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sRUFBZmd0RCxHQUFrQjZHLFFBQVEsSUFFaEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBR2RELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLEVBQWZndEQsR0FBa0I2RyxRQUFRLElBRWhDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLEdBQWZndEQsRUFBb0IsTUFBTTZHLFFBQVEsS0FHNUM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFNBQ1ZELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxVQUFTLFVBQ3ZCRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsV0FDVkQsRUFBQUEsY0FBQSxTQUFPd0QsS0FBSyxTQUNSaEQsS0FBSyxVQUNMVCxNQUFPcXRELEVBQ1B5RyxTQTdiQSxTQUFDbDBELEdBQ3pCMHRELEVBQWdCMXRELEVBQUVjLE9BQU9WLE1BQzdCLEtBNmJvQkMsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZm10RCxHQUFxQjBHLFFBQVEsSUFFbkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBR2RELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWZtdEQsR0FBcUIwRyxRQUFRLElBRW5DOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWZtdEQsR0FBb0IwRyxRQUFRLEtBR3RDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxTQUNWRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsVUFBUyxjQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssVUFDTFQsTUFBT3d0RCxFQUNQc0csU0EvY0EsU0FBQ2wwRCxHQUN6QjZ0RCxFQUFnQjd0RCxFQUFFYyxPQUFPVixNQUM3QixLQStjb0JDLEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWZzdEQsR0FBcUJ1RyxRQUFRLElBRW5DOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLEtBQWZzdEQsR0FBc0J1RyxRQUFRLElBR3BDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWZzdEQsR0FBcUJ1RyxRQUFRLElBRW5DOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWZzdEQsR0FBcUJ1RyxRQUFRLEtBR3ZDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxTQUNWRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsVUFBUyxhQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssVUFDTFQsTUFBTzJ0RCxFQUNQbUcsU0FsZUEsU0FBQ2wwRCxHQUN6Qmd1RCxHQUFnQmh1RCxFQUFFYyxPQUFPVixNQUM3QixLQWtlb0JDLEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLEtBQWZ5dEQsR0FBc0JvRyxRQUFRLElBRXBDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWZ5dEQsR0FBcUJvRyxRQUFRLElBR25DOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLEtBQWZ5dEQsR0FBc0JvRyxRQUFRLElBRXBDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLEtBQWZ5dEQsR0FBcUJvRyxRQUFRLEtBR3ZDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxTQUNWRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsVUFBUyxlQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssVUFDTFQsTUFBTzh0RCxHQUNQZ0csU0FyZkEsU0FBQ2wwRCxHQUN6Qm11RCxHQUFnQm51RCxFQUFFYyxPQUFPVixNQUM3QixLQXFmb0JDLEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLEtBQWY0dEQsSUFBc0JpRyxRQUFRLElBRXBDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLEtBQWY0dEQsSUFBc0JpRyxRQUFRLElBR3BDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLEtBQWY0dEQsSUFBc0JpRyxRQUFRLElBRXBDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWY0dEQsSUFBcUJpRyxRQUFRLEtBR3ZDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxTQUNWRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsVUFBUyxZQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssVUFDTFQsTUFBT2l1RCxHQUNQNkYsU0F4Z0JBLFNBQUNsMEQsR0FDekJzdUQsR0FBZ0J0dUQsRUFBRWMsT0FBT1YsTUFDN0IsS0F3Z0JvQkMsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZit0RCxJQUFxQjhGLFFBQVEsSUFFbkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZit0RCxJQUFxQjhGLFFBQVEsSUFHbkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZit0RCxJQUFxQjhGLFFBQVEsSUFFbkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sRUFBZit0RCxJQUFrQjhGLFFBQVEsS0FHcEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLE9BQ1ZELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxVQUFTLGtCQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssVUFDTFQsTUFBT291RCxHQUNQMEYsU0EzaEJBLFNBQUNsMEQsR0FDekJ5dUQsR0FBZ0J6dUQsRUFBRWMsT0FBT1YsTUFDN0IsS0EyaEJvQkMsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBR2RELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUlkRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxFQUFma3VELElBQWtCMkYsUUFBUSxJQUVoQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxLQUFma3VELElBQXFCMkYsUUFBUSxLQUd2Qzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsT0FDVkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFVBQVMsa0JBQ3ZCRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsV0FDVkQsRUFBQUEsY0FBQSxTQUFPd0QsS0FBSyxTQUNSaEQsS0FBSyxVQUNMVCxNQUFPdXVELEdBQ1B1RixTQTlpQkEsU0FBQ2wwRCxHQUN6QjR1RCxHQUFnQjV1RCxFQUFFYyxPQUFPVixNQUM3QixLQThpQm9CQyxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFHZEQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBSWRELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWZxdUQsSUFBcUJ3RixRQUFRLElBRW5DOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLEtBQWZxdUQsSUFBcUJ3RixRQUFRLEtBR3ZDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxPQUNWRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsVUFBUyxpQkFDdkJELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxXQUNWRCxFQUFBQSxjQUFBLFNBQU93RCxLQUFLLFNBQ1JoRCxLQUFLLFVBQ0xULE1BQU8wdUQsR0FDUG9GLFNBamtCQSxTQUFDbDBELEdBQ3pCK3VELEdBQWdCL3VELEVBQUVjLE9BQU9WLE1BQzdCLEtBaWtCb0JDLEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUdkRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFJZEQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sRUFBZnd1RCxJQUFrQnFGLFFBQVEsSUFFaEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZnd1RCxJQUFvQnFGLFFBQVEsS0FHdEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFFBQ1ZELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxVQUFTLFNBQ3ZCRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsV0FDVkQsRUFBQUEsY0FBQSxTQUFPd0QsS0FBSyxTQUNSaEQsS0FBSyxVQUNMVCxNQUFPNnVELEdBQ1BpRixTQXBsQkEsU0FBQ2wwRCxHQUN6Qmt2RCxHQUFnQmx2RCxFQUFFYyxPQUFPVixNQUM3QixLQW9sQm9CQyxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxJQUFmMnVELElBQXFCa0YsUUFBUSxJQUVuQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxJQUFmMnVELElBQXFCa0YsUUFBUSxJQUduQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxLQUFmMnVELElBQXNCa0YsUUFBUSxJQUVwQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxLQUFmMnVELElBQXFCa0YsUUFBUSxLQUd2Qzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsUUFDVkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFVBQVMsU0FDdkJELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxXQUNWRCxFQUFBQSxjQUFBLFNBQU93RCxLQUFLLFNBQ1JoRCxLQUFLLFVBQ0xULE1BQU9ndkQsR0FDUDhFLFNBdm1CQSxTQUFDbDBELEdBQ3pCcXZELEdBQWdCcnZELEVBQUVjLE9BQU9WLE1BQzdCLEtBdW1Cb0JDLEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWY4dUQsSUFBcUIrRSxRQUFRLElBRW5DOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLEdBQWY4dUQsSUFBb0IrRSxRQUFRLElBR2xDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWY4dUQsSUFBcUIrRSxRQUFRLElBRW5DOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLEtBQWY4dUQsSUFBcUIrRSxRQUFRLEtBR3ZDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxRQUNWRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsVUFBUyxRQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssVUFDTFQsTUFBT212RCxHQUNQMkUsU0ExbkJBLFNBQUNsMEQsR0FDekJ3dkQsR0FBZ0J4dkQsRUFBRWMsT0FBT1YsTUFDN0IsS0EwbkJvQkMsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBR2RELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUlkRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxLQUFmaXZELElBQXNCNEUsUUFBUSxJQUVwQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxLQUFmaXZELElBQXFCNEUsUUFBUSxLQUd2Qzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsUUFDVkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFVBQVMsVUFDdkJELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxXQUNWRCxFQUFBQSxjQUFBLFNBQU93RCxLQUFLLFNBQ1JoRCxLQUFLLFVBQ0xULE1BQU9zdkQsR0FDUHdFLFNBN29CQSxTQUFDbDBELEdBQ3pCMnZELEdBQWdCM3ZELEVBQUVjLE9BQU9WLE1BQzdCLEtBNm9Cb0JDLEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUdkRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFJZEQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sS0FBZm92RCxJQUFzQnlFLFFBQVEsSUFFcEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sS0FBZm92RCxJQUFxQnlFLFFBQVEsS0FHdkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFFBQ1ZELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxVQUFTLGtCQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssVUFDTFQsTUFBT3l2RCxHQUNQcUUsU0FocUJBLFNBQUNsMEQsR0FDekI4dkQsR0FBZ0I5dkQsRUFBRWMsT0FBT1YsTUFDN0IsS0FncUJvQkMsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sR0FBZnV2RCxJQUFvQnNFLFFBQVEsSUFFbEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sR0FBZnV2RCxJQUFvQnNFLFFBQVEsSUFHbEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sS0FBZnV2RCxJQUFzQnNFLFFBQVEsSUFFcEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sS0FBZnV2RCxJQUFxQnNFLFFBQVEsS0FHdkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFFBQ1ZELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxVQUFTLFlBQ3ZCRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsV0FDVkQsRUFBQUEsY0FBQSxTQUFPd0QsS0FBSyxTQUNSaEQsS0FBSyxVQUNMVCxNQUFPNHZELEdBQ1BrRSxTQW5yQkEsU0FBQ2wwRCxHQUN6Qml3RCxHQUFnQmp3RCxFQUFFYyxPQUFPVixNQUM3QixLQW1yQm9CQyxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxJQUFmMHZELElBQXFCbUUsUUFBUSxJQUVuQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxJQUFmMHZELElBQXFCbUUsUUFBUSxJQUduQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxJQUFmMHZELElBQXFCbUUsUUFBUSxJQUVuQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxLQUFmMHZELElBQXFCbUUsUUFBUSxLQUd2Qzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsUUFDVkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFVBQVMsVUFDdkJELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxXQUNWRCxFQUFBQSxjQUFBLFNBQU93RCxLQUFLLFNBQ1JoRCxLQUFLLFVBQ0xULE1BQU8rdkQsR0FDUCtELFNBdHNCQSxTQUFDbDBELEdBQ3pCb3dELEdBQWdCcHdELEVBQUVjLE9BQU9WLE1BQzdCLEtBc3NCb0JDLEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWY2dkQsSUFBcUJnRSxRQUFRLElBRW5DOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWY2dkQsSUFBcUJnRSxRQUFRLElBR25DOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUdkRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxJQUFmNnZELElBQXFCZ0UsUUFBUSxLQUd2Qzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsUUFDVkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFVBQVMsVUFDdkJELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxXQUNWRCxFQUFBQSxjQUFBLFNBQU93RCxLQUFLLFNBQ1JoRCxLQUFLLFVBQ0xULE1BQU9rd0QsR0FDUDRELFNBenRCQSxTQUFDbDBELEdBQ3pCdXdELEdBQWdCdndELEVBQUVjLE9BQU9WLE1BQzdCLEtBeXRCb0JDLEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUdkRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxJQUFmZ3dELElBQXFCNkQsUUFBUSxJQUduQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFHZEQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sR0FBZmd3RCxJQUFvQjZELFFBQVEsS0FHdEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFFBQ1ZELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxVQUFTLFlBQ3ZCRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsV0FDVkQsRUFBQUEsY0FBQSxTQUFPd0QsS0FBSyxTQUNSaEQsS0FBSyxVQUNMVCxNQUFPcXdELEdBQ1B5RCxTQTV1QkEsU0FBQ2wwRCxHQUN6QjB3RCxHQUFnQjF3RCxFQUFFYyxPQUFPVixNQUM3QixLQTR1Qm9CQyxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFHZEQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sS0FBZm13RCxJQUFzQjBELFFBQVEsSUFHcEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBR2RELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWZtd0QsSUFBcUIwRCxRQUFRLEtBR3ZDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxRQUNWRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsVUFBUyxTQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssVUFDTFQsTUFBT3d3RCxHQUNQc0QsU0EvdkJBLFNBQUNsMEQsR0FDekI2d0QsR0FBZ0I3d0QsRUFBRWMsT0FBT1YsTUFDN0IsS0ErdkJvQkMsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBR2RELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLEtBQWZzd0QsSUFBc0J1RCxRQUFRLElBR3BDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUdkRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxJQUFmc3dELElBQXFCdUQsUUFBUSxLQUd2Qzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsUUFDVkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFVBQVMsYUFDdkJELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxXQUNWRCxFQUFBQSxjQUFBLFNBQU93RCxLQUFLLFNBQ1JoRCxLQUFLLFVBQ0xULE1BQU8yd0QsR0FDUG1ELFNBbHhCQSxTQUFDbDBELEdBQ3pCZ3hELEdBQWdCaHhELEVBQUVjLE9BQU9WLE1BQzdCLEtBa3hCb0JDLEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUdkRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxJQUFmeXdELElBQXFCb0QsUUFBUSxJQUduQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFHZEQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZnl3RCxJQUFxQm9ELFFBQVEsS0FHdkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFFBQ1ZELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxVQUFTLFVBQ3ZCRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsV0FDVkQsRUFBQUEsY0FBQSxTQUFPd0QsS0FBSyxTQUNSaEQsS0FBSyxVQUNMVCxNQUFPOHdELEdBQ1BnRCxTQXJ5QkEsU0FBQ2wwRCxHQUN6Qm14RCxHQUFnQm54RCxFQUFFYyxPQUFPVixNQUM3QixLQXF5Qm9CQyxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFHZEQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sS0FBZjR3RCxJQUFzQmlELFFBQVEsSUFHcEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBR2RELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWY0d0QsSUFBcUJpRCxRQUFRLEtBR3ZDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxRQUNWRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsVUFBUyxnQkFDdkJELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxXQUNWRCxFQUFBQSxjQUFBLFNBQU93RCxLQUFLLFNBQ1JoRCxLQUFLLFVBQ0xULE1BQU9peEQsR0FDUDZDLFNBeHpCQSxTQUFDbDBELEdBQ3pCc3hELEdBQWdCdHhELEVBQUVjLE9BQU9WLE1BQzdCLEtBd3pCb0JDLEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLEtBQWYrd0QsSUFBc0I4QyxRQUFRLElBRXBDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWYrd0QsSUFBcUI4QyxRQUFRLElBR25DOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWYrd0QsSUFBcUI4QyxRQUFRLElBRW5DOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWYrd0QsSUFBb0I4QyxRQUFRLEtBR3RDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxTQUNWRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsVUFBUyxTQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssVUFDTFQsTUFBT294RCxHQUNQMEMsU0EzMEJBLFNBQUNsMEQsR0FDekJ5eEQsR0FBZ0J6eEQsRUFBRWMsT0FBT1YsTUFDN0IsS0EyMEJvQkMsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZmt4RCxJQUFxQjJDLFFBQVEsSUFFbkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZmt4RCxJQUFxQjJDLFFBQVEsSUFHbkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBR2RELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWZreEQsSUFBcUIyQyxRQUFRLEtBR3ZDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxTQUNWRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsVUFBUyxhQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssVUFDTFQsTUFBT3V4RCxHQUNQdUMsU0E5MUJBLFNBQUNsMEQsR0FDekI0eEQsR0FBZ0I1eEQsRUFBRWMsT0FBT1YsTUFDN0IsS0E4MUJvQkMsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZnF4RCxJQUFxQndDLFFBQVEsSUFFbkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZnF4RCxJQUFxQndDLFFBQVEsSUFHbkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBR2RELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLEdBQWZxeEQsSUFBb0J3QyxRQUFRLEtBR3RDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxTQUNWRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsVUFBUyxVQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssVUFDTFQsTUFBTzB4RCxHQUNQb0MsU0FqM0JBLFNBQUNsMEQsR0FDekIreEQsR0FBZ0IveEQsRUFBRWMsT0FBT1YsTUFDN0IsS0FpM0JvQkMsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sS0FBZnd4RCxJQUFzQnFDLFFBQVEsSUFFcEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sR0FBZnd4RCxJQUFvQnFDLFFBQVEsSUFHbEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBR2RELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWZ3eEQsSUFBcUJxQyxRQUFRLEtBR3ZDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxTQUNWRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsVUFBUyxXQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssVUFDTFQsTUFBTzZ4RCxHQUNQaUMsU0FwNEJBLFNBQUNsMEQsR0FDekJreUQsR0FBZ0JseUQsRUFBRWMsT0FBT1YsTUFDN0IsS0FvNEJvQkMsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZjJ4RCxJQUFxQmtDLFFBQVEsSUFFbkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZjJ4RCxJQUFxQmtDLFFBQVEsSUFHbkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBR2RELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWYyeEQsSUFBcUJrQyxRQUFRLEtBR3ZDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxTQUNWRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsVUFBUyxRQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssVUFDTFQsTUFBT2d5RCxHQUNQOEIsU0F2NUJBLFNBQUNsMEQsR0FDekJxeUQsR0FBZ0JyeUQsRUFBRWMsT0FBT1YsTUFDN0IsS0F1NUJvQkMsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZjh4RCxJQUFxQitCLFFBQVEsSUFFbkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sR0FBZjh4RCxJQUFvQitCLFFBQVEsSUFHbEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBR2RELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLEdBQWY4eEQsSUFBb0IrQixRQUFRLEtBR3RDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxTQUNWRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsVUFBUyxVQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssVUFDTFQsTUFBT215RCxHQUNQMkIsU0ExNkJBLFNBQUNsMEQsR0FDekJ3eUQsR0FBZ0J4eUQsRUFBRWMsT0FBT1YsTUFDN0IsS0EwNkJvQkMsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sS0FBZml5RCxJQUFzQjRCLFFBQVEsSUFFcEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sS0FBZml5RCxJQUFzQjRCLFFBQVEsSUFHcEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBR2RELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWZpeUQsSUFBcUI0QixRQUFRLEtBR3ZDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxTQUNWRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsVUFBUyxXQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssVUFDTFQsTUFBT3N5RCxHQUNQd0IsU0E3N0JBLFNBQUNsMEQsR0FDekIyeUQsR0FBZ0IzeUQsRUFBRWMsT0FBT1YsTUFDN0IsS0E2N0JvQkMsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZm95RCxJQUFxQnlCLFFBQVEsSUFFbkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZm95RCxJQUFxQnlCLFFBQVEsSUFHbkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBR2RELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWZveUQsSUFBcUJ5QixRQUFRLEtBR3ZDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxTQUNWRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsVUFBUyxZQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssVUFDTFQsTUFBT3l5RCxHQUNQcUIsU0FoOUJBLFNBQUNsMEQsR0FDekI4eUQsR0FBZ0I5eUQsRUFBRWMsT0FBT1YsTUFDN0IsS0FnOUJvQkMsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZnV5RCxJQUFxQnNCLFFBQVEsSUFFbkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZnV5RCxJQUFxQnNCLFFBQVEsSUFHbkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBR2RELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWZ1eUQsSUFBcUJzQixRQUFRLEtBR3ZDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxTQUNWRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsVUFBUyxhQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssVUFDTFQsTUFBTzR5RCxHQUNQa0IsU0FuK0JBLFNBQUNsMEQsR0FDekJpekQsR0FBZ0JqekQsRUFBRWMsT0FBT1YsTUFDN0IsS0FtK0JvQkMsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sS0FBZjB5RCxJQUFzQm1CLFFBQVEsSUFFcEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sS0FBZjB5RCxJQUFzQm1CLFFBQVEsSUFHcEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBR2RELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWYweUQsSUFBcUJtQixRQUFRLEtBR3ZDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxTQUNWRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsVUFBUyxZQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssVUFDTFQsTUFBTyt5RCxHQUNQZSxTQXQvQkEsU0FBQ2wwRCxHQUN6Qm96RCxHQUFnQnB6RCxFQUFFYyxPQUFPVixNQUM3QixLQXMvQm9CQyxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxNQUFmNnlELElBQXVCZ0IsUUFBUSxJQUVyQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxLQUFmNnlELElBQXNCZ0IsUUFBUSxJQUdwQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFHZEQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZjZ5RCxJQUFxQmdCLFFBQVEsS0FHdkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFNBQ1ZELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxVQUFTLGdCQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssVUFDTFQsTUFBT2t6RCxHQUNQWSxTQXpnQ0EsU0FBQ2wwRCxHQUN6QnV6RCxHQUFnQnZ6RCxFQUFFYyxPQUFPVixNQUM3QixLQXlnQ29CQyxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxLQUFmZ3pELElBQXNCYSxRQUFRLElBRXBDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLEtBQWZnekQsSUFBc0JhLFFBQVEsSUFHcEM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBR2RELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNPLElBQWZnekQsSUFBcUJhLFFBQVEsS0FHdkM5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxVQUFTLGFBQ3ZCRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsV0FDVkQsRUFBQUEsY0FBQSxTQUFPd0QsS0FBSyxTQUNSaEQsS0FBSyxVQUNMVCxNQUFPcXpELEdBQ1BTLFNBNWhDQSxTQUFDbDBELEdBQ3pCMHpELEdBQWdCMXpELEVBQUVjLE9BQU9WLE1BQzdCLEtBNGhDb0JDLEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUVkRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxLQUFmbXpELElBQXNCVSxRQUFRLElBR3BDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUdkRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFDTyxJQUFmbXpELElBQXFCVSxRQUFRLEtBR3ZDOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxXQUNWRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsVUFBUyxlQUN2QkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDUmhELEtBQUssVUFDTFQsTUFBT3d6RCxHQUNQTSxTQTlpQ0EsU0FBQ2wwRCxHQUN6QjZ6RCxHQUFnQjd6RCxFQUFFYyxPQUFPVixNQUM3QixLQThpQ29CQyxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFFZEQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sS0FBZnN6RCxJQUFzQk8sUUFBUSxJQUdwQzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFHZEQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZnN6RCxJQUFxQk8sUUFBUSxLQUd2Qzl6RCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsV0FDVkQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFVBQVMsVUFDdkJELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxXQUNWRCxFQUFBQSxjQUFBLFNBQU93RCxLQUFLLFNBQ1JoRCxLQUFLLFVBQ0xULE1BQU8yekQsR0FDUEcsU0Foa0NBLFNBQUNsMEQsR0FDekJnMEQsR0FBZ0JoMEQsRUFBRWMsT0FBT1YsTUFDN0IsS0Fna0NvQkMsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBRWRELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUlkRCxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsWUFHZEQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ08sSUFBZnl6RCxJQUFvQkksUUFBUSxNQUsxQzl6RCxFQUFBQSxjQUFBLGFBQ0lBLEVBQUFBLGNBQUEsVUFDSUEsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFVBQVMsVUFDdkJELEVBQUFBLGNBQUEsV0FDQUEsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ1I4ekQsT0FBcUIsS0FBZHhKLEdBQXVCd0osT0FBcUIsS0FBZHJKLEdBQXVCcUosT0FBcUIsSUFBZGxKLEdBQXNCa0osT0FBcUIsSUFBZC9JLEdBQzVGK0ksT0FBcUIsS0FBZDVJLEdBQXVCNEksT0FBcUIsSUFBZHpJLEdBQXNCeUksT0FBcUIsSUFBZHRJLEdBQXNCc0ksT0FBcUIsSUFBZG5JLEdBQy9GbUksT0FBcUIsS0FBZGhJLEdBQXVCZ0ksT0FBc0IsS0FBZjdILEdBQXdCNkgsT0FBc0IsSUFBZjFILEdBQXVCMEgsT0FBc0IsS0FBZnZILEdBQ2xHdUgsT0FBc0IsS0FBZnBILEdBQXdCb0gsT0FBc0IsR0FBZmpILEdBQXNCaUgsT0FBc0IsRUFBZjlHLEdBQW9COEcsT0FBc0IsSUFBZjNHLEdBQzlGMkcsT0FBc0IsSUFBZnhHLEdBQXVCd0csT0FBc0IsS0FBZnJHLEdBQXdCcUcsT0FBc0IsS0FBZmxHLElBQXdCa0csT0FBc0IsSUFBZi9GLElBQ25HK0YsT0FBc0IsSUFBZm5GLElBQXVCbUYsT0FBc0IsSUFBZmhGLElBQXVCZ0YsT0FBc0IsR0FBZnZFLElBQXNCdUUsT0FBc0IsSUFBZnBFLElBQ2hHb0UsT0FBc0IsSUFBZmpFLElBQXVCaUUsT0FBc0IsS0FBZi9DLElBQXdCK0MsT0FBc0IsSUFBZjVDLElBQXVCNEMsT0FBc0IsSUFBZnpDLElBQ2xHeUMsT0FBc0IsS0FBZnRDLElBQXdCc0MsT0FBc0IsSUFBZm5DLElBQXVCbUMsT0FBc0IsSUFBZmhDLElBQXVCZ0MsT0FBc0IsS0FBZjdCLElBQ2xHNkIsT0FBc0IsSUFBZjFCLElBQXVCMEIsT0FBc0IsSUFBZnZCLElBQXVCdUIsT0FBc0IsS0FBZnBCLElBQXdCb0IsT0FBc0IsTUFBZmpCLElBQ2xHaUIsT0FBc0IsS0FBZmQsS0FBdUJhLFFBQVEsSUFFaEQ5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ1I4ekQsT0FBcUIsSUFBZHhKLEdBQXNCd0osT0FBcUIsS0FBZHJKLEdBQXVCcUosT0FBcUIsR0FBZGxKLEdBQXFCa0osT0FBcUIsSUFBZC9JLEdBQzFGK0ksT0FBcUIsS0FBZDVJLEdBQXVCNEksT0FBcUIsR0FBZHpJLEdBQXFCeUksT0FBcUIsSUFBZHRJLEdBQXNCc0ksT0FBcUIsSUFBZG5JLEdBQzlGbUksT0FBc0IsS0FBZnhHLEdBQXdCd0csT0FBc0IsSUFBZnJHLEdBQXVDLEtBQWZHLEdBQXdCa0csT0FBc0IsSUFBZi9GLElBQzdGK0YsT0FBc0IsSUFBZm5GLElBQXVCbUYsT0FBc0IsR0FBZmhGLElBQXNCZ0YsT0FBc0IsR0FBZnZFLElBQXNCdUUsT0FBc0IsSUFBZnBFLElBQy9Gb0UsT0FBc0IsSUFBZmpFLElBQXVCaUUsT0FBc0IsSUFBZjlELElBQXVCOEQsT0FBc0IsS0FBZjNELElBQXdCMkQsT0FBc0IsS0FBZnhELElBQ2xHd0QsT0FBc0IsSUFBZnJELElBQXVCcUQsT0FBc0IsS0FBZmxELElBQXdCa0QsT0FBc0IsSUFBZi9DLElBQXVCK0MsT0FBc0IsSUFBZjVDLElBQ2xHNEMsT0FBc0IsSUFBZnpDLElBQXVCeUMsT0FBc0IsR0FBZnRDLElBQXNCc0MsT0FBc0IsSUFBZm5DLElBQXVCbUMsT0FBc0IsR0FBZmhDLElBQ2hHZ0MsT0FBc0IsS0FBZjdCLElBQXdCNkIsT0FBc0IsSUFBZjFCLElBQXVCMEIsT0FBc0IsSUFBZnZCLElBQXVCdUIsT0FBc0IsS0FBZnBCLElBQ2xHb0IsT0FBc0IsS0FBZmpCLElBQXdCaUIsT0FBc0IsS0FBZmQsSUFBd0JjLE9BQXNCLEtBQWZYLElBQXdCVyxPQUFzQixLQUFmUixLQUN4R08sUUFBUSxJQUdkOXpELEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxZQUNSOHpELE9BQXFCLEtBQWQvSSxHQUF1QitJLE9BQXFCLEtBQWQ1SSxHQUF1QjRJLE9BQXFCLElBQWR6SSxHQUFzQnlJLE9BQXFCLElBQWR0SSxHQUM1RnNJLE9BQXFCLEtBQWRuSSxHQUF1Qm1JLE9BQXFCLEtBQWRoSSxHQUF1QmdJLE9BQXNCLEtBQWY3SCxHQUF3QjZILE9BQXNCLElBQWYxSCxHQUNsRzBILE9BQXNCLEtBQWZ2SCxHQUF3QnVILE9BQXNCLEtBQWZwSCxHQUF3Qm9ILE9BQXNCLElBQWZqSCxHQUF1QmlILE9BQXNCLEVBQWY5RyxHQUNuRzhHLE9BQXNCLElBQWYzRyxHQUF1QjJHLE9BQXNCLElBQWZ4RyxHQUF1QndHLE9BQXNCLEtBQWZyRyxHQUF3QnFHLE9BQXNCLEtBQWZsRyxJQUNsR2tHLE9BQXNCLElBQWYvRixJQUF1QitGLE9BQXNCLEVBQWY1RixJQUFvQjRGLE9BQXNCLElBQWZ6RixJQUF1QnlGLE9BQXNCLEVBQWZ0RixJQUM5RnNGLE9BQXNCLEtBQWZuRixJQUF3Qm1GLE9BQXNCLElBQWZoRixJQUF1QmdGLE9BQXNCLEtBQWY3RSxJQUF3QjZFLE9BQXNCLEtBQWYxRSxJQUNuRzBFLE9BQXNCLEtBQWZ2RSxJQUF3QnVFLE9BQXNCLElBQWZwRSxJQUF1Qm9FLE9BQXNCLElBQWYvQyxLQUFzQjhDLFFBQVEsSUFFNUc5ekQsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFlBQ1I4ekQsT0FBcUIsS0FBZHhKLEdBQXNCd0osT0FBcUIsS0FBZHJKLEdBQXNCcUosT0FBcUIsSUFBZGxKLEdBQXNCa0osT0FBcUIsSUFBZC9JLEdBQzFGK0ksT0FBcUIsS0FBZDVJLEdBQXNCNEksT0FBcUIsSUFBZHpJLEdBQXFCeUksT0FBcUIsSUFBZHRJLEdBQXFCc0ksT0FBcUIsSUFBZG5JLEdBQzVGbUksT0FBcUIsS0FBZGhJLEdBQXNCZ0ksT0FBc0IsS0FBZjdILEdBQXVCNkgsT0FBc0IsSUFBZjFILEdBQXVCMEgsT0FBc0IsS0FBZnZILEdBQ2hHdUgsT0FBc0IsS0FBZnBILEdBQXVCb0gsT0FBc0IsS0FBZmpILEdBQXVCaUgsT0FBc0IsR0FBZjlHLEVBQW9CLE1BQVE4RyxPQUFzQixJQUFmM0csR0FDdEcyRyxPQUFzQixJQUFmeEcsR0FBdUJ3RyxPQUFzQixLQUFmckcsR0FBdUJxRyxPQUFzQixJQUFmbEcsSUFBdUJrRyxPQUFzQixFQUFmL0YsSUFDakcrRixPQUFzQixLQUFmNUYsSUFBdUI0RixPQUFzQixLQUFmekYsSUFBdUJ5RixPQUFzQixJQUFmdEYsSUFBc0JzRixPQUFzQixLQUFmbkYsSUFDaEdtRixPQUFzQixLQUFmaEYsSUFBdUJnRixPQUFzQixLQUFmN0UsSUFBdUI2RSxPQUFzQixLQUFmMUUsSUFBdUIwRSxPQUFzQixLQUFmdkUsSUFDakd1RSxPQUFzQixLQUFmcEUsSUFBdUJvRSxPQUFzQixJQUFmakUsSUFBdUJpRSxPQUFzQixHQUFmOUQsSUFBc0I4RCxPQUFzQixJQUFmM0QsSUFDaEcyRCxPQUFzQixJQUFmeEQsSUFBdUJ3RCxPQUFzQixJQUFmckQsSUFBdUJxRCxPQUFzQixJQUFmbEQsSUFBdUJrRCxPQUFzQixJQUFmL0MsSUFDakcrQyxPQUFzQixJQUFmNUMsSUFBdUI0QyxPQUFzQixHQUFmekMsSUFBc0J5QyxPQUFzQixJQUFmdEMsSUFBdUJzQyxPQUFzQixJQUFmbkMsSUFDaEdtQyxPQUFzQixHQUFmaEMsSUFBc0JnQyxPQUFzQixJQUFmN0IsSUFBdUI2QixPQUFzQixJQUFmMUIsSUFBdUIwQixPQUFzQixJQUFmdkIsSUFDaEd1QixPQUFzQixJQUFmcEIsSUFBdUJvQixPQUFzQixJQUFmakIsSUFBdUJpQixPQUFzQixJQUFmZCxJQUF1QmMsT0FBc0IsSUFBZlgsSUFDakdXLE9BQXNCLElBQWZSLElBQXVCUSxPQUFzQixJQUFmTCxLQUFxQkksUUFBUSxPQWF4Rjl6RCxFQUFBQSxjQUFBLFlBR0FBLEVBQUFBLGNBQUEsV0FBTUEsRUFBQUEsY0FBQzhwRCxHQUFTLE9BRzVCLDZqQ0Mxb0NBLFNBbE9lLFdBRVgsSUFBZ0RDLEVBQUFPLElBQVZwckIsRUFBQUEsRUFBQUEsWUFBVSxHQUF6Q3FyQixFQUFXUixFQUFBLEdBQUVTLEVBQWNULEVBQUEsR0FDY1UsRUFBQUgsSUFBVnByQixFQUFBQSxFQUFBQSxZQUFVLEdBQXpDd3JCLEVBQVdELEVBQUEsR0FBRUUsRUFBY0YsRUFBQSxHQUNjRyxFQUFBTixJQUFWcHJCLEVBQUFBLEVBQUFBLFlBQVUsR0FBekMyckIsRUFBV0QsRUFBQSxHQUFFRSxFQUFjRixFQUFBLEdBQ2NHLEVBQUFULElBQVZwckIsRUFBQUEsRUFBQUEsWUFBVSxHQUF6QzhyQixFQUFXRCxFQUFBLEdBQUVFLEVBQWNGLEVBQUEsR0FDY0csRUFBQVosSUFBVnByQixFQUFBQSxFQUFBQSxZQUFVLEdBQXpDaXNCLEVBQVdELEVBQUEsR0FBRUUsRUFBY0YsRUFBQSxHQUNjRyxFQUFBZixJQUFWcHJCLEVBQUFBLEVBQUFBLFlBQVUsR0FBekNvc0IsRUFBV0QsRUFBQSxHQUFFRSxFQUFjRixFQUFBLEdBQ2NHLEVBQUFsQixJQUFWcHJCLEVBQUFBLEVBQUFBLFlBQVUsR0FBekN1c0IsRUFBV0QsRUFBQSxHQUFFRSxFQUFjRixFQUFBLEdBQ2NHLEVBQUFyQixJQUFWcHJCLEVBQUFBLEVBQUFBLFlBQVUsR0FBekMwc0IsRUFBV0QsRUFBQSxHQUFFRSxFQUFjRixFQUFBLEdBQ2NHLEVBQUF4QixJQUFWcHJCLEVBQUFBLEVBQUFBLFlBQVUsR0FBekM2c0IsRUFBV0QsRUFBQSxHQUFFRSxFQUFjRixFQUFBLEdBQ2dCRyxFQUFBM0IsSUFBVnByQixFQUFBQSxFQUFBQSxZQUFVLEdBQTNDZ3RCLEVBQVlELEVBQUEsR0FBRUUsRUFBZUYsRUFBQSxHQUU5QitILEVBQVdoMEQsRUFBQUEsU0FDdUJvc0QsRUFBQTlCLElBQVpwckIsRUFBQUEsRUFBQUEsVUFBUyxJQUFHLEdBQWpDKzBCLEVBQU03SCxFQUFBLEdBQUU4SCxFQUFTOUgsRUFBQSxHQWVsQitILEVBQWtCLFNBQUNDLEdBQ3ZCLE1BQU8sR0FBUHYxRCxPQUFVdTFELEVBQU1DLFNBQVN4bkMsRUFBQyxLQUFBaHVCLE9BQUl1MUQsRUFBTUMsU0FBUzk5QixFQUFDLEtBQUExM0IsT0FBSXUxRCxFQUFNQyxTQUFTOXNELEVBQ25FLEVBRU0rc0QsRUFBZ0IsU0FBQ0YsR0FDckIsTUFBTyxHQUFQdjFELE9BQVV1MUQsRUFBTUcsT0FBTzFuQyxFQUFDLEtBQUFodUIsT0FBSXUxRCxFQUFNRyxPQUFPaCtCLEVBQUMsS0FBQTEzQixPQUFJdTFELEVBQU1HLE9BQU9odEQsRUFDN0QsRUFvQ0EsT0FDSXZILEVBQUFBLGNBQUFBLEVBQUFBLFNBQUEsS0FDSUEsRUFBQUEsY0FBQSxTQUFPQyxVQUFVLFVBQ2JELEVBQUFBLGNBQUEsYUFDSUEsRUFBQUEsY0FBQSxVQUNJQSxFQUFBQSxjQUFBLE1BQUl3MEQsUUFBUyxHQUFHLFlBS3hCeDBELEVBQUFBLGNBQUEsYUFDSUEsRUFBQUEsY0FBQSxVQUNJQSxFQUFBQSxjQUFBLFVBQ0lBLEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDWmhELEtBQUssU0FDRFQsTUFBT3dxRCxFQUNQc0osU0EvQ0QsU0FBQ2wwRCxHQUN4QjZxRCxFQUFlN3FELEVBQUVjLE9BQU9WLE1BQzVCLEtBK0NvQkMsRUFBQUEsY0FBQSxVQUFLLFNBQ0xBLEVBQUFBLGNBQUEsVUFDSUEsRUFBQUEsY0FBQSxTQUFPd0QsS0FBSyxTQUNaaEQsS0FBSyxTQUNEVCxNQUFPMnFELEVBQ1BtSixTQW5ERCxTQUFDbDBELEdBQ3hCZ3JELEVBQWVockQsRUFBRWMsT0FBT1YsTUFDNUIsS0FtRG9CQyxFQUFBQSxjQUFBLFVBQUssZUFDTEEsRUFBQUEsY0FBQSxVQUNJQSxFQUFBQSxjQUFBLFNBQU93RCxLQUFLLFNBQ1poRCxLQUFLLFNBQ0RULE1BQU84cUQsRUFDUGdKLFNBdkRELFNBQUNsMEQsR0FDeEJtckQsRUFBZW5yRCxFQUFFYyxPQUFPVixNQUM1QixLQXVEb0JDLEVBQUFBLGNBQUEsVUFBSyxTQUNMQSxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsYUFDUDRxRCxFQUFjSCxFQUFlSCxHQUFhdUosUUFBUSxLQUc3RDl6RCxFQUFBQSxjQUFBLFVBQ0lBLEVBQUFBLGNBQUEsVUFDSUEsRUFBQUEsY0FBQSxTQUFPd0QsS0FBSyxTQUNaaEQsS0FBSyxTQUNEVCxNQUFPaXJELEVBQ1A2SSxTQWhFRCxTQUFDbDBELEdBQ3hCc3JELEVBQWV0ckQsRUFBRWMsT0FBT1YsTUFDNUIsS0FnRW9CQyxFQUFBQSxjQUFBLFVBQUssU0FDTEEsRUFBQUEsY0FBQSxVQUNJQSxFQUFBQSxjQUFBLFNBQU93RCxLQUFLLFNBQ1poRCxLQUFLLFNBQ0RULE1BQU9vckQsRUFDUDBJLFNBcEVELFNBQUNsMEQsR0FDeEJ5ckQsRUFBZXpyRCxFQUFFYyxPQUFPVixNQUM1QixLQW9Fb0JDLEVBQUFBLGNBQUEsVUFBSyxlQUNMQSxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsYUFDUCtxRCxFQUFjTSxFQUFlSCxHQUFhMkksUUFBUSxJQUd6RDl6RCxFQUFBQSxjQUFBLFVBQUssU0FDTEEsRUFBQUEsY0FBQSxVQUNJQSxFQUFBQSxjQUFBLFNBQU93RCxLQUFLLFNBQ1poRCxLQUFLLFNBQ0RULE1BQU91ckQsRUFDUHVJLFNBN0VELFNBQUNsMEQsR0FDeEI0ckQsRUFBZTVyRCxFQUFFYyxPQUFPVixNQUM1QixRQWtGUUMsRUFBQUEsY0FBQSxTQUFPQyxVQUFVLFVBQ2JELEVBQUFBLGNBQUEsYUFDSUEsRUFBQUEsY0FBQSxVQUNJQSxFQUFBQSxjQUFBLE1BQUl3MEQsUUFBUyxHQUFHLGNBSXhCeDBELEVBQUFBLGNBQUEsYUFDSUEsRUFBQUEsY0FBQSxVQUNJQSxFQUFBQSxjQUFBLFVBQ0lBLEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDWmhELEtBQUssU0FDRFQsTUFBTzByRCxFQUNQb0ksU0E5RkQsU0FBQ2wwRCxHQUN4QityRCxFQUFlL3JELEVBQUVjLE9BQU9WLE1BQzVCLEtBOEZvQkMsRUFBQUEsY0FBQSxVQUFJLE1BQ0pBLEVBQUFBLGNBQUEsVUFDSUEsRUFBQUEsY0FBQSxTQUFPd0QsS0FBSyxTQUNaaEQsS0FBSyxTQUNEVCxNQUFPNnJELEVBQ1BpSSxTQWxHRCxTQUFDbDBELEdBQ3hCa3NELEVBQWVsc0QsRUFBRWMsT0FBT1YsTUFDNUIsS0FrR29CQyxFQUFBQSxjQUFBLFVBQUksVUFDSkEsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLGFBQ1B3ckQsRUFBY0csRUFBZSxLQUFLa0ksUUFBUSxHQUFHLE9BR3hEOXpELEVBQUFBLGNBQUEsVUFDSUEsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFFBQ1ZELEVBQUFBLGNBQUEsU0FBT3dELEtBQUssU0FDWmhELEtBQUssU0FDRFQsTUFBT2dzRCxFQUNQOEgsU0EzR0QsU0FBQ2wwRCxHQUN4QnFzRCxFQUFlcnNELEVBQUVjLE9BQU9WLE1BQzVCLElBeUc0RCxLQUd4Q0MsRUFBQUEsY0FBQSxVQUFJLE1BQ0pBLEVBQUFBLGNBQUEsVUFDSUEsRUFBQUEsY0FBQSxTQUFPd0QsS0FBSyxTQUNaaEQsS0FBSyxVQUNEVCxNQUFPbXNELEVBQ1AySCxTQWhIQSxTQUFDbDBELEdBQ3pCd3NELEVBQWdCeHNELEVBQUVjLE9BQU9WLE1BQzdCLEtBZ0hvQkMsRUFBQUEsY0FBQSxVQUFJLFVBQ0pBLEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxhQUVQOHJELEVBQWNHLEVBQWdCLEtBQUs0SCxRQUFRLE9BTTlEOXpELEVBQUFBLGNBQUEsT0FBS0MsVUFBVSxRQUNaRCxFQUFBQSxjQUFDbEMsR0FBQUEsRUFBUSxPQUVaa0MsRUFBQUEsY0FBQSxXQUVDQSxFQUFBQSxjQUFBLGdCQUNDMG5DLElBQUksd0dBRUosbUJBQWlCLElBRWpCLHFCQUNBK3NCLElBQUUsRUFDRixXQUFTLFFBQ1RwMEQsUUEzTFUsU0FBQ3lsQixHQUNuQixJQUFROUcsRUFBcUI4RyxFQUFyQjlHLFFBQVNDLEVBQVk2RyxFQUFaN0csUUFFakIsR0FBSSswQyxFQUFTNTlDLFFBQVMsQ0FDcEIsSUFBSXMrQyxFQUFNVixFQUFTNTlDLFFBQVF1K0MsMkJBQTJCMzFDLEVBQVNDLEdBQzNEeTFDLEdBQ0ZSLEdBQVUsU0FBQ0QsR0FDVCxNQUFPLEdBQVBwMUQsdURBQVdvMUQsMFNBQU0sQ0FBRVMsU0FDckIsR0FFSixDQUNGLEVBaUxVdDhCLElBQUssU0FBQ0EsR0FDSjQ3QixFQUFTNTlDLFFBQVVnaUIsQ0FDckIsRUFDRm40QixVQUFVLGNBQ0xnMEQsRUFBTzd5RCxLQUFJLFNBQUNnekQsRUFBTy9hLEdBQUcsT0FDL0JyNUMsRUFBQUEsY0FBQSxVQUNFRixJQUFHLFdBQUFqQixPQUFhdzZDLEdBQ2hCcDVDLFVBQVUsY0FDVjIwRCxLQUFJLFdBQUEvMUQsT0FBYXc2QyxHQUNqQixnQkFBZThhLEVBQWdCQyxHQUMvQixjQUFhRSxFQUFjRixJQUNuQixLQVVsQixFQ2xPTVMsSUFBc0IsSUFBQS9oQixlQUFjLENBQ3RDZ2lCLG1CQUFxQnJ2RCxHQUFNQSxFQUMzQnN2RCxVQUFVLEVBQ1ZDLGNBQWUsVUNOYkMsSUFBZ0IsSUFBQW5pQixlQUFjLENBQUMsR0NHL0IsSUFBa0IsSUFBQUEsZUFBYyxNQ0xoQyxHQUFnQyxvQkFBYnpzQyxTQ0duQixHQUE0QixHQUFZLEVBQUF5NEIsZ0JBQWtCLEVBQUFILFVDRDFEdTJCLElBQWMsSUFBQXBpQixlQUFjLENBQUVxaUIsUUFBUSxJQ0Y1QyxTQUFTQyxHQUFZaDlCLEdBQ2pCLE1BQXVCLGlCQUFSQSxHQUNYNXpCLE9BQU9kLFVBQVU4QyxlQUFlN0gsS0FBS3k1QixFQUFLLFVBQ2xELENDQUEsU0FBU2k5QixHQUFlenVELEdBQ3BCLE1BQW9CLGlCQUFOQSxHQUFrQm5JLE1BQU0yTyxRQUFReEcsRUFDbEQsQ0NMQSxTQUFTMHVELEdBQW9CMXVELEdBQ3pCLE1BQW9CLGlCQUFOQSxHQUFxQyxtQkFBWkEsRUFBRTRoQixLQUM3QyxDQ0ZBLE1BQU0rc0MsR0FBdUIsQ0FDekIsVUFDQSxjQUNBLGFBQ0EsYUFDQSxXQUNBLFlBQ0EsUUFFRUMsR0FBZSxDQUFDLGFBQWNELElDTHBDLFNBQVNFLEdBQXNCbDFELEdBQzNCLE9BQVErMEQsR0FBb0IvMEQsRUFBTW0xRCxVQUM5QkYsR0FBYTFZLE1BQU10OEMsR0FBUzYwRCxHQUFlOTBELEVBQU1DLEtBQ3pELENBQ0EsU0FBU20xRCxHQUFjcDFELEdBQ25CLE9BQU9zcEQsUUFBUTRMLEdBQXNCbDFELElBQVVBLEVBQU1xMUQsU0FDekQsQ0NGQSxTQUFTQyxHQUEwQnBkLEdBQy9CLE9BQU9oNkMsTUFBTTJPLFFBQVFxckMsR0FBUUEsRUFBS2ozQyxLQUFLLEtBQU9pM0MsQ0FDbEQsQ0NWQSxNQUFNcWQsR0FBZSxDQUNqQi9xQyxVQUFXLENBQ1AsVUFDQSxXQUNBLGFBQ0EsV0FDQSxPQUNBLGNBQ0EsYUFDQSxhQUVKZ3JDLEtBQU0sQ0FBQyxRQUNQQyxLQUFNLENBQUMsT0FBUSxnQkFDZmpzQyxNQUFPLENBQUMsY0FDUmtzQyxNQUFPLENBQUMsYUFBYyxlQUFnQixjQUN0Q0MsSUFBSyxDQUFDLFdBQVksUUFBUyxhQUFjLGVBQ3pDQyxJQUFLLENBQUMsUUFBUyxhQUFjLG9CQUFxQixZQUNsREMsT0FBUSxDQUFDLGNBQWUsa0JBQW1CLG1CQUMzQ0MsT0FBUSxDQUFDLFNBQVUsYUFFakJDLEdBQXFCLENBQUMsRUFDNUIsSUFBSyxNQUFNeDJELEtBQU9nMkQsR0FDZFEsR0FBbUJ4MkQsR0FBTyxDQUN0QnkyRCxVQUFZaDJELEdBQVV1MUQsR0FBYWgyRCxHQUFLZzlDLE1BQU10OEMsS0FBV0QsRUFBTUMsTUNyQnZFLE1BQU1nMkQsSUFBcUIsSUFBQTFqQixlQUFjLENBQUMsR0NHcEMyakIsSUFBMkIsSUFBQTNqQixlQUFjLENBQUMsR0NMMUM0akIsR0FBd0IvdEQsT0FBT0MsSUFBSSx5QkN1QnpDLFNBQVMsSUFBc0Isa0JBQUUrdEQsRUFBaUIsb0JBQUVDLEVBQW1CLFVBQUVDLEVBQVMsZUFBRUMsRUFBYyxVQUFFeDJELElBQ2hHcTJELEdDdEJKLFNBQXNCSSxHQUNsQixJQUFLLE1BQU1qM0QsS0FBT2kzRCxFQUNkVCxHQUFtQngyRCxHQUFPLElBQ25CdzJELEdBQW1CeDJELE1BQ25CaTNELEVBQVNqM0QsR0FHeEIsQ0RleUJrM0QsQ0FBYUwsR0EyQ2xDLE1BQU1NLEdBQXNCLElBQUExakIsYUExQzVCLFNBQXlCaHpDLEVBQU8yMkQsR0FLNUIsSUFBSUMsRUFDSixNQUFNQyxFQUFpQixLQUNoQixJQUFBMTRCLFlBQVdtMkIsT0FDWHQwRCxFQUNIODJELFNBQVVDLEdBQVkvMkQsS0FFcEIsU0FBRXcwRCxHQUFhcUMsRUFDZjNpQyxFTGpDZCxTQUFnQ2wwQixHQUM1QixNQUFNLFFBQUVnM0QsRUFBTyxRQUFFN0IsR09GckIsU0FBZ0NuMUQsRUFBT2swQixHQUNuQyxHQUFJZ2hDLEdBQXNCbDFELEdBQVEsQ0FDOUIsTUFBTSxRQUFFZzNELEVBQU8sUUFBRTdCLEdBQVluMUQsRUFDN0IsTUFBTyxDQUNIZzNELFNBQXFCLElBQVpBLEdBQXFCbEMsR0FBZWtDLEdBQ3ZDQSxPQUNBeDFELEVBQ04yekQsUUFBU0wsR0FBZUssR0FBV0EsT0FBVTN6RCxFQUVyRCxDQUNBLE9BQXlCLElBQWxCeEIsRUFBTWkzRCxRQUFvQi9pQyxFQUFVLENBQUMsQ0FDaEQsQ1BUaUNnakMsQ0FBdUJsM0QsR0FBTyxJQUFBbStCLFlBQVd1MkIsS0FDdEUsT0FBTyxJQUFBbDJCLFVBQVEsS0FBTSxDQUFHdzRCLFVBQVM3QixhQUFZLENBQUNHLEdBQTBCMEIsR0FBVTFCLEdBQTBCSCxJQUNoSCxDSzhCd0JnQyxDQUF1Qm4zRCxHQUNqQ28zRCxFQUFjYixFQUFldjJELEVBQU93MEQsR0FDMUMsSUFBS0EsR0FBWSxHQUFXLENBT3hCdGdDLEVBQVFtakMsY0d2Q3BCLFNBQTBCdDNELEVBQVdxM0QsRUFBYXAzRCxFQUFPcTJELEdBQ3JELE1BQVFnQixjQUFlQyxJQUFXLElBQUFuNUIsWUFBV3UyQixJQUN2QzZDLEdBQWMsSUFBQXA1QixZQUFXdzJCLElBQ3pCNkMsR0FBa0IsSUFBQXI1QixZQUFXLElBQzdCczVCLEdBQXNCLElBQUF0NUIsWUFBV20yQixJQUFxQkcsY0FDdERpRCxHQUFtQixJQUFBaDVCLFVBSXpCMjNCLEVBQXNCQSxHQUF1QmtCLEVBQVlJLFVBQ3BERCxFQUFpQjdoRCxTQUFXd2dELElBQzdCcUIsRUFBaUI3aEQsUUFBVXdnRCxFQUFvQnQyRCxFQUFXLENBQ3REcTNELGNBQ0FFLFNBQ0F0M0QsUUFDQXczRCxrQkFDQUksd0JBQXVCSixJQUNXLElBQTVCQSxFQUFnQlIsUUFFdEJTLHlCQUdSLE1BQU1KLEVBQWdCSyxFQUFpQjdoRCxTQUN2QyxJQUFBeW9CLHFCQUFtQixLQUNmKzRCLEdBQWlCQSxFQUFjdmhCLE9BQU85MUMsRUFBT3czRCxFQUFnQixJQU1qRSxNQUFNSyxHQUFhLElBQUFuNUIsUUFBTzRxQixRQUFRempELE9BQU9peUQsMEJBa0N6QyxPQWpDQSxJQUEwQixLQUNqQlQsSUFFTEEsRUFBY3Z6RCxTQVdWK3pELEVBQVdoaUQsU0FBV3doRCxFQUFjVSxnQkFDcENWLEVBQWNVLGVBQWVDLGlCQUNqQyxLQUVKLElBQUE1NUIsWUFBVSxLQUNEaTVCLElBRUxBLEVBQWNZLGtCQUNUSixFQUFXaGlELFNBQVd3aEQsRUFBY1UsZ0JBQ3JDVixFQUFjVSxlQUFlQyxpQkFPakNueUQsT0FBT2l5RCw2QkFBMEJ0MkQsRUFDakNxMkQsRUFBV2hpRCxTQUFVLEVBQUssSUFFdkJ3aEQsQ0FDWCxDSDFCb0NhLENBQWlCbjRELEVBQVdxM0QsRUFBYVAsRUFBZ0JSLEdBS2pGLE1BQU04QixHQUEyQixJQUFBaDZCLFlBQVcrM0IsSUFDdENrQyxHQUFXLElBQUFqNkIsWUFBV3cyQixJQUFhQyxPQUNyQzFnQyxFQUFRbWpDLGdCQUNSVCxFQUFnQjFpQyxFQUFRbWpDLGNBQWNaLGFBRXRDSSxFQUFnQnVCLEVBQVVoQyxFQUFtQitCLEdBRXJELENBS0EsT0FBUSxnQkFBb0J6RCxHQUFjaGlCLFNBQVUsQ0FBRWx6QyxNQUFPMDBCLEdBQ3pEMGlDLEdBQWlCMWlDLEVBQVFtakMsY0FBaUIsZ0JBQW9CVCxFQUFlLENBQUVTLGNBQWVuakMsRUFBUW1qQyxpQkFBa0JSLElBQXFCLEtBQzdJUCxFQUFVdjJELEVBQVdDLEVJMURqQyxTQUFzQm8zRCxFQUFhQyxFQUFlVixHQUM5QyxPQUFPLElBQUF6NEIsY0FBYTVTLElBQ2hCQSxHQUFZOHJDLEVBQVlpQixPQUFTakIsRUFBWWlCLE1BQU0vc0MsR0FDL0MrckMsSUFDQS9yQyxFQUNNK3JDLEVBQWNnQixNQUFNL3NDLEdBQ3BCK3JDLEVBQWMzcUIsV0FFcEJpcUIsSUFDMkIsbUJBQWhCQSxFQUNQQSxFQUFZcnJDLEdBRVB1cEMsR0FBWThCLEtBQ2pCQSxFQUFZOWdELFFBQVV5VixHQUU5QixHQU9KLENBQUMrckMsR0FDTCxDSm1Dd0NpQixDQUFhbEIsRUFBYWxqQyxFQUFRbWpDLGNBQWVWLEdBQWNTLEVBQWE1QyxFQUFVdGdDLEVBQVFtakMsZUFDbEksSUFHQSxPQURBWCxFQUFvQlAsSUFBeUJwMkQsRUFDdEMyMkQsQ0FDWCxDQUNBLFNBQVNLLElBQVksU0FBRUQsSUFDbkIsTUFBTXlCLEdBQWdCLElBQUFwNkIsWUFBVzgzQixJQUFvQnoxRCxHQUNyRCxPQUFPKzNELFFBQThCLzJELElBQWJzMUQsRUFDbEJ5QixFQUFnQixJQUFNekIsRUFDdEJBLENBQ1YsQ0s1REEsU0FBUzBCLEdBQWtCQyxHQUN2QixTQUFTQyxFQUFPMzRELEVBQVc0NEQsRUFBOEIsQ0FBQyxHQUN0RCxPQUFPLEdBQXNCRixFQUFhMTRELEVBQVc0NEQsR0FDekQsQ0FDQSxHQUFxQixvQkFBVkMsTUFDUCxPQUFPRixFQU1YLE1BQU1HLEVBQWlCLElBQUlqL0MsSUFDM0IsT0FBTyxJQUFJZy9DLE1BQU1GLEVBQVEsQ0FNckJ2dEQsSUFBSyxDQUFDMnRELEVBQVN2NUQsS0FJTnM1RCxFQUFlbnRDLElBQUluc0IsSUFDcEJzNUQsRUFBZTd1RCxJQUFJekssRUFBS201RCxFQUFPbjVELElBRTVCczVELEVBQWUxdEQsSUFBSTVMLEtBR3RDLENDeENBLE1BQU13NUQsR0FBdUIsQ0FDekIsVUFDQSxTQUNBLE9BQ0EsT0FDQSxVQUNBLElBQ0EsUUFDQSxPQUNBLFNBQ0EsU0FDQSxPQUNBLFdBQ0EsT0FDQSxVQUNBLFVBQ0EsV0FDQSxPQUNBLE9BQ0EsU0FDQSxTQUNBLE1BQ0EsT0FDQSxRQUNBLE1BQ0EsUUMzQkosU0FBU0MsR0FBZWo1RCxHQUNwQixNQUtxQixpQkFBZEEsSUFJSEEsRUFBVWQsU0FBUyxTQU92Qjg1RCxHQUFxQnJuRCxRQUFRM1IsSUFBYyxHQUl2QyxRQUFRNEgsS0FBSzVILEdBSXJCLENDM0JBLE1BQU1rNUQsR0FBa0IsQ0FBQyxFQ0duQkMsR0FBcUIsQ0FDdkIsdUJBQ0EsSUFDQSxJQUNBLElBQ0EsYUFDQSxhQUNBLGFBQ0EsUUFDQSxTQUNBLFNBQ0EsU0FDQSxVQUNBLFVBQ0EsVUFDQSxPQUNBLFFBQ0EsU0FLRUMsR0FBaUIsSUFBSTV6RCxJQUFJMnpELElDdEIvQixTQUFTRSxHQUFvQjc1RCxHQUFLLE9BQUV1MkQsRUFBTSxTQUFFZ0IsSUFDeEMsT0FBUXFDLEdBQWV6dEMsSUFBSW5zQixJQUN2QkEsRUFBSTA3QyxXQUFXLFlBQ2I2YSxRQUF1QnQwRCxJQUFiczFELE9BQ0xtQyxHQUFnQjE1RCxJQUFnQixZQUFSQSxFQUN2QyxDQ1JBLE1BQU04NUQsR0FBaUI3NUQsR0FBVThwRCxRQUFROXBELEdBQVNBLEVBQU04NUQsYUNFbERDLEdBQWlCLENBQ25CanRDLEVBQUcsYUFDSDBKLEVBQUcsYUFDSGh2QixFQUFHLGFBQ0h3eUQscUJBQXNCLGVBRXBCQyxHQUFnQlAsR0FBbUJsN0QsT0NSbkMwN0QsR0FBeUJDLEdBQVdwNkQsR0FBdUIsaUJBQVJBLEdBQW9CQSxFQUFJMDdDLFdBQVcwZSxHQUN0RkMsR0FBb0JGLEdBQXNCLE1BQzFDRyxHQUFxQkgsR0FBc0IsVUNDM0NJLEdBQWlCLENBQUN0NkQsRUFBT3lELElBQ3BCQSxHQUF5QixpQkFBVnpELEVBQ2hCeUQsRUFBSzgyRCxVQUFVdjZELEdBQ2ZBLEVDTkp3NkQsR0FBUSxDQUFDM3hDLEVBQUs0eEMsRUFBSzV6RCxJQUFNb1IsS0FBSzRRLElBQUk1USxLQUFLd2lELElBQUk1ekQsRUFBR2dpQixHQUFNNHhDLEdDRXBEdDFDLEdBQVMsQ0FDWGhkLEtBQU90QixHQUFtQixpQkFBTkEsRUFDcEI2NkMsTUFBT2daLFdBQ1BILFVBQVkxekQsR0FBTUEsR0FFaEI4ekQsR0FBUSxJQUNQeDFDLEdBQ0hvMUMsVUFBWTF6RCxHQUFNMnpELEdBQU0sRUFBRyxFQUFHM3pELElBRTVCK3pELEdBQVEsSUFDUHoxQyxHQUNIcXRCLFFBQVMsR0NQUHFvQixHQUFZaDBELEdBQU1vUixLQUFLNmlELE1BQVUsSUFBSmowRCxHQUFjLElBQzNDazBELEdBQWEsdUJBQ2JDLEdBQWEsOEZBQ2JDLEdBQW1CLCtGQUN6QixTQUFTQyxHQUFTcjBELEdBQ2QsTUFBb0IsaUJBQU5BLENBQ2xCLENDVkEsTUFBTXMwRCxHQUFrQkMsSUFBUyxDQUM3Qmp6RCxLQUFPdEIsR0FBTXEwRCxHQUFTcjBELElBQU1BLEVBQUVxMUMsU0FBU2tmLElBQWlDLElBQXhCdjBELEVBQUVZLE1BQU0sS0FBS2pKLE9BQzdEa2pELE1BQU9nWixXQUNQSCxVQUFZMXpELEdBQU0sR0FBR0EsSUFBSXUwRCxNQUV2QkMsR0FBVUYsR0FBZSxPQUN6QkcsR0FBVUgsR0FBZSxLQUN6QkksR0FBS0osR0FBZSxNQUNwQnppQyxHQUFLeWlDLEdBQWUsTUFDcEJLLEdBQUtMLEdBQWUsTUFDcEJNLEdBQXFCLElBQ3BCSCxHQUNINVosTUFBUTc2QyxHQUFNeTBELEdBQVE1WixNQUFNNzZDLEdBQUssSUFDakMwekQsVUFBWTF6RCxHQUFNeTBELEdBQVFmLFVBQWMsSUFBSjF6RCxJQ2JsQyxHQUFNLElBQ0xzZSxHQUNIbzFDLFVBQVd0aUQsS0FBSzZpRCxPQ0FkWSxHQUFtQixDQUVyQkMsWUFBYUosR0FDYkssZUFBZ0JMLEdBQ2hCTSxpQkFBa0JOLEdBQ2xCTyxrQkFBbUJQLEdBQ25CUSxnQkFBaUJSLEdBQ2pCUyxhQUFjVCxHQUNkVSxPQUFRVixHQUNSVyxvQkFBcUJYLEdBQ3JCWSxxQkFBc0JaLEdBQ3RCYSx3QkFBeUJiLEdBQ3pCYyx1QkFBd0JkLEdBRXhCNTRDLE1BQU80NEMsR0FDUGUsU0FBVWYsR0FDVjM0QyxPQUFRMjRDLEdBQ1JnQixVQUFXaEIsR0FDWDM2RCxLQUFNMjZELEdBQ056eEMsSUFBS3l4QyxHQUNMaUIsTUFBT2pCLEdBQ1BrQixPQUFRbEIsR0FDUjN4QyxLQUFNMnhDLEdBRU5sWCxRQUFTa1gsR0FDVG1CLFdBQVluQixHQUNab0IsYUFBY3BCLEdBQ2RxQixjQUFlckIsR0FDZnNCLFlBQWF0QixHQUNidUIsT0FBUXZCLEdBQ1J3QixVQUFXeEIsR0FDWHlCLFlBQWF6QixHQUNiMEIsYUFBYzFCLEdBQ2QyQixXQUFZM0IsR0FFWjRCLE9BQVE5QixHQUNSK0IsUUFBUy9CLEdBQ1RnQyxRQUFTaEMsR0FDVGlDLFFBQVNqQyxHQUNUVCxNQUFLLEdBQ0wyQyxPQUFRM0MsR0FDUjRDLE9BQVE1QyxHQUNSNkMsT0FBUTdDLEdBQ1I4QyxLQUFNckMsR0FDTnNDLE1BQU90QyxHQUNQdUMsTUFBT3ZDLEdBQ1B3QyxTQUFVdEMsR0FDVnVDLFdBQVl2QyxHQUNad0MsV0FBWXhDLEdBQ1p5QyxXQUFZekMsR0FDWnp1QyxFQUFHeXVDLEdBQ0gva0MsRUFBRytrQyxHQUNIL3pELEVBQUcrekQsR0FDSDBDLFlBQWExQyxHQUNidkIscUJBQXNCdUIsR0FDdEJ4cUQsUUFBUzRwRCxHQUNUdUQsUUFBU3pDLEdBQ1QwQyxRQUFTMUMsR0FDVDJDLFFBQVM3QyxHQUVUbnFELE9BQVEsR0FFUkUsWUFBYXFwRCxHQUNiL29ELGNBQWUrb0QsR0FDZjBELFdBQVksSUM5RGhCLFNBQVNDLEdBQWdCLytELEVBQU9nL0QsRUFBY2h4RCxFQUFTaXhELEdBQ25ELE1BQU0sTUFBRXZzRCxFQUFLLEtBQUV3c0QsRUFBSSxVQUFFbEUsRUFBUyxnQkFBRW1FLEdBQW9Cbi9ELEVBRXBELElBQUlvL0QsR0FBZSxFQUNmQyxHQUFxQixFQUVyQkMsR0FBa0IsRUFPdEIsSUFBSyxNQUFNOStELEtBQU93K0QsRUFBYyxDQUM1QixNQUFNditELEVBQVF1K0QsRUFBYXgrRCxHQUkzQixHQUFJcTZELEdBQWtCcjZELEdBQU0sQ0FDeEIwK0QsRUFBSzErRCxHQUFPQyxFQUNaLFFBQ0osQ0FFQSxNQUFNOCtELEVBQVlwRCxHQUFpQjM3RCxHQUM3QmcvRCxFQUFjekUsR0FBZXQ2RCxFQUFPOCtELEdBQzFDLEdBQUluRixHQUFlenRDLElBQUluc0IsR0FBTSxDQUt6QixHQUhBNCtELEdBQWUsRUFDZnBFLEVBQVV4NkQsR0FBT2cvRCxHQUVaRixFQUNELFNBRUE3K0QsS0FBVzgrRCxFQUFVdHNCLFNBQVcsS0FDaENxc0IsR0FBa0IsRUFDMUIsTUFDUzkrRCxFQUFJMDdDLFdBQVcsV0FFcEJtakIsR0FBcUIsRUFDckJGLEVBQWdCMytELEdBQU9nL0QsR0FHdkI5c0QsRUFBTWxTLEdBQU9nL0QsQ0FFckIsQ0FpQkEsR0FoQktSLEVBQWFoRSxZQUNWb0UsR0FBZ0JILEVBQ2hCdnNELEVBQU1zb0QsVVR0Q2xCLFNBQXdCQSxHQUFXLDJCQUFFeUUsR0FBNkIsRUFBSSxtQkFBRUMsR0FBcUIsR0FBU0MsRUFBb0JWLEdBRXRILElBQUlXLEVBQWtCLEdBS3RCLElBQUssSUFBSXo5RCxFQUFJLEVBQUdBLEVBQUl1NEQsR0FBZXY0RCxJQUFLLENBQ3BDLE1BQU0zQixFQUFNMjVELEdBQW1CaDRELFFBQ1JNLElBQW5CdTRELEVBQVV4NkQsS0FFVm8vRCxHQUFtQixHQURHcEYsR0FBZWg2RCxJQUFRQSxLQUNOdzZELEVBQVV4NkQsT0FFekQsQ0FhQSxPQVpJaS9ELElBQStCekUsRUFBVS95RCxJQUN6QzIzRCxHQUFtQixpQkFFdkJBLEVBQWtCQSxFQUFnQmgxRCxPQUc5QnEwRCxFQUNBVyxFQUFrQlgsRUFBa0JqRSxFQUFXMkUsRUFBcUIsR0FBS0MsR0FFcEVGLEdBQXNCQyxJQUMzQkMsRUFBa0IsUUFFZkEsQ0FDWCxDU1c4QkMsQ0FBZTcvRCxFQUFNZzdELFVBQVdodEQsRUFBU3N4RCxFQUFpQkwsR0FFdkV2c0QsRUFBTXNvRCxZQUtYdG9ELEVBQU1zb0QsVUFBWSxTQU90QnFFLEVBQW9CLENBQ3BCLE1BQU0sUUFBRVYsRUFBVSxNQUFLLFFBQUVDLEVBQVUsTUFBSyxRQUFFQyxFQUFVLEdBQU9NLEVBQzNEenNELEVBQU15c0QsZ0JBQWtCLEdBQUdSLEtBQVdDLEtBQVdDLEdBQ3JELENBQ0osQ0N2RUEsTUFBTWlCLEdBQXdCLEtBQU0sQ0FDaENwdEQsTUFBTyxDQUFDLEVBQ1Jzb0QsVUFBVyxDQUFDLEVBQ1ptRSxnQkFBaUIsQ0FBQyxFQUNsQkQsS0FBTSxDQUFDLElDRVgsU0FBU2EsR0FBa0I1K0QsRUFBUTBTLEVBQVE1UyxHQUN2QyxJQUFLLE1BQU1ULEtBQU9xVCxFQUNUeW1ELEdBQWN6bUQsRUFBT3JULEtBQVU2NUQsR0FBb0I3NUQsRUFBS1MsS0FDekRFLEVBQU9YLEdBQU9xVCxFQUFPclQsR0FHakMsQ0FrQkEsU0FBU3cvRCxHQUFhLytELEVBQU9vM0QsRUFBYTVDLEdBRXRDLE1BQU13SyxFQUFZLENBQUMsRUFDYnZ0RCxFQWJWLFNBQWtCelIsRUFBT28zRCxFQUFhNUMsR0FDbEMsTUFDTS9pRCxFQUFRLENBQUMsRUFNZixPQUZBcXRELEdBQWtCcnRELEVBTEF6UixFQUFNeVIsT0FBUyxDQUFDLEVBS0V6UixHQUNwQ2lFLE9BQU9zRixPQUFPa0ksRUFkbEIsVUFBZ0Msa0JBQUV1c0QsR0FBcUI1RyxFQUFhNUMsR0FDaEUsT0FBTyxJQUFBaDJCLFVBQVEsS0FDWCxNQUFNei9CLEVBQVE4L0QsS0FFZCxPQURBZixHQUFnQi8rRCxFQUFPcTRELEVBQWEsQ0FBRW9ILDRCQUE2QmhLLEdBQVl3SixHQUN4RS81RCxPQUFPc0YsT0FBTyxDQUFDLEVBQUd4SyxFQUFNay9ELEtBQU1sL0QsRUFBTTBTLE1BQU0sR0FDbEQsQ0FBQzJsRCxHQUNSLENBUXlCNkgsQ0FBdUJqL0QsRUFBT28zRCxFQUFhNUMsSUFDekR4MEQsRUFBTWsvRCxnQkFBa0JsL0QsRUFBTWsvRCxnQkFBZ0J6dEQsR0FBU0EsQ0FDbEUsQ0FJa0IwdEQsQ0FBU24vRCxFQUFPbzNELEVBQWE1QyxHQW9CM0MsT0FuQkl4MEQsRUFBTXkxRCxPQUErQixJQUF2QnoxRCxFQUFNby9ELGVBRXBCSixFQUFVSyxXQUFZLEVBRXRCNXRELEVBQU02dEQsV0FDRjd0RCxFQUFNOHRELGlCQUNGOXRELEVBQU0rdEQsbUJBQ0YsT0FFWi90RCxFQUFNZ3VELGFBQ2EsSUFBZnovRCxFQUFNeTFELEtBQ0EsT0FDQSxRQUFzQixNQUFmejFELEVBQU15MUQsS0FBZSxJQUFNLFdBRXpCajBELElBQW5CeEIsRUFBTTAvRCxXQUNMMS9ELEVBQU0yL0QsT0FBUzMvRCxFQUFNNC9ELFlBQWM1L0QsRUFBTTYvRCxZQUMxQ2IsRUFBVVUsU0FBVyxHQUV6QlYsRUFBVXZ0RCxNQUFRQSxFQUNYdXRELENBQ1gsQ0NoREEsTUFBTWMsR0FBbUIsSUFBSXY2RCxJQUFJLENBQzdCLFVBQ0EsT0FDQSxXQUNBLFVBQ0EsUUFDQSxTQUNBLFdBQ0EsYUFDQSxvQkFDQSxrQkFDQSxTQUNBLFVBQ0EseUJBQ0EsNEJBQ0Esa0JBQ0Esd0JBQ0EsbUJBQ0Esc0JBQ0EsV0FDQSxjQUNBLFNBQ0EsWUFDQSwyQkFDQSxrQkFDQSxzQkFDQSxTQUNBLFNBQ0EsZUFDQSxhQUNBLGtCQUNBLGtCQUNBLGVBQ0EsYUFVSixTQUFTdzZELEdBQWtCeGdFLEdBQ3ZCLE9BQVFBLEVBQUkwN0MsV0FBVyxVQUNsQjE3QyxFQUFJMDdDLFdBQVcsU0FBbUIsY0FBUjE3QyxHQUMzQkEsRUFBSTA3QyxXQUFXLFdBQ2YxN0MsRUFBSTA3QyxXQUFXLFVBQ2YxN0MsRUFBSTA3QyxXQUFXLFVBQ2Y2a0IsR0FBaUJwMEMsSUFBSW5zQixFQUM3QixDQ3REQSxJQUFJeWdFLEdBQWlCemdFLElBQVN3Z0UsR0FBa0J4Z0UsR0FvQmhELEtBbkJpQzBnRSxHQXlCTEMsUUFBUSwwQkFBMEJsdUIsV0FyQjFEZ3VCLEdBQWlCemdFLEdBQVFBLEVBQUkwN0MsV0FBVyxPQUFTOGtCLEdBQWtCeGdFLEdBQU8wZ0UsR0FBWTFnRSxHQXNCMUYsQ0FDQSxNQUFPNGdFLEdBRVAsQ0E3QkEsSUFBaUNGLEdDRGpDLFNBQVNHLEdBQVd6WixFQUFRei9CLEVBQVE5bUIsR0FDaEMsTUFBeUIsaUJBQVh1bUQsRUFDUkEsRUFDQW9VLEdBQUdoQixVQUFVN3lDLEVBQVM5bUIsRUFBT3VtRCxFQUN2QyxDQ0pBLE1BQU0wWixHQUFXLENBQ2JuNUMsT0FBUSxvQkFDUm81QyxNQUFPLG9CQUVMQyxHQUFZLENBQ2RyNUMsT0FBUSxtQkFDUm81QyxNQUFPLG1CQ0RYLFNBQVNFLEdBQWN6aEUsR0FBTyxNQUFFMGhFLEVBQUssTUFBRUMsRUFBSyxVQUFFQyxFQUFTLFFBQUVqRCxFQUFPLFFBQUVDLEVBQU8sV0FBRWlELEVBQVUsWUFBRUMsRUFBYyxFQUFDLFdBQUVDLEVBQWEsS0FFbEhDLEdBQVVoMEQsRUFBU2kwRCxFQUFVaEQsR0FNNUIsR0FMQUYsR0FBZ0IvK0QsRUFBT2dpRSxFQUFRaDBELEVBQVNpeEQsR0FLcENnRCxFQUlBLFlBSElqaUUsRUFBTTBTLE1BQU13dkQsVUFDWmxpRSxFQUFNbWlFLE1BQU1ELFFBQVVsaUUsRUFBTTBTLE1BQU13dkQsVUFJMUNsaUUsRUFBTW1pRSxNQUFRbmlFLEVBQU0wUyxNQUNwQjFTLEVBQU0wUyxNQUFRLENBQUMsRUFDZixNQUFNLE1BQUV5dkQsRUFBSyxNQUFFenZELEVBQUssV0FBRTB2RCxHQUFlcGlFLEVBS2pDbWlFLEVBQU1uSCxZQUNGb0gsSUFDQTF2RCxFQUFNc29ELFVBQVltSCxFQUFNbkgsa0JBQ3JCbUgsRUFBTW5ILFdBR2JvSCxTQUNhMy9ELElBQVprOEQsUUFBcUNsOEQsSUFBWm04RCxHQUF5QmxzRCxFQUFNc29ELGFBQ3pEdG9ELEVBQU15c0QsZ0JGekJkLFNBQWdDaUQsRUFBWXpELEVBQVNDLEdBR2pELE1BQU8sR0FGV3lDLEdBQVcxQyxFQUFTeUQsRUFBVzcwQyxFQUFHNjBDLEVBQVdoL0MsVUFDN0NpK0MsR0FBV3pDLEVBQVN3RCxFQUFXbnJDLEVBQUdtckMsRUFBVy8rQyxTQUVuRSxDRXFCZ0NnL0MsQ0FBdUJELE9BQXdCMy9ELElBQVprOEQsRUFBd0JBLEVBQVUsUUFBaUJsOEQsSUFBWm04RCxFQUF3QkEsRUFBVSxVQUcxSG44RCxJQUFWaS9ELElBQ0FTLEVBQU01MEMsRUFBSW0wQyxRQUNBai9ELElBQVZrL0QsSUFDQVEsRUFBTWxyQyxFQUFJMHFDLFFBQ0lsL0QsSUFBZG0vRCxJQUNBTyxFQUFNOUcsTUFBUXVHLFFBRUNuL0QsSUFBZm8vRCxHRDdCUixTQUFzQk0sRUFBT2xqRSxFQUFRcWpFLEVBQVUsRUFBR242QyxFQUFTLEVBQUdvNkMsR0FBYyxHQUV4RUosRUFBTU4sV0FBYSxFQUduQixNQUFNaDhELEVBQU8wOEQsRUFBY2pCLEdBQVdFLEdBRXRDVyxFQUFNdDhELEVBQUtzaUIsUUFBVTZ6QyxHQUFHaEIsV0FBVzd5QyxHQUVuQyxNQUFNMDVDLEVBQWE3RixHQUFHaEIsVUFBVS83RCxHQUMxQjZpRSxFQUFjOUYsR0FBR2hCLFVBQVVzSCxHQUNqQ0gsRUFBTXQ4RCxFQUFLMDdELE9BQVMsR0FBR00sS0FBY0MsR0FDekMsQ0NrQlFVLENBQWFMLEVBQU9OLEVBQVlDLEVBQWFDLEdBQVksRUFFakUsQ0MvQ0EsTUFBTVUsR0FBdUIsS0FBTSxJQUM1QjNDLEtBQ0hxQyxNQUFPLENBQUMsSUNKTkYsR0FBWTEyRCxHQUF1QixpQkFBUkEsR0FBMEMsUUFBdEJBLEVBQUluRCxjQ016RCxTQUFTczZELEdBQVl6aEUsRUFBT28zRCxFQUFhc0ssRUFBVzNoRSxHQUNoRCxNQUFNNGhFLEdBQWMsSUFBQW5qQyxVQUFRLEtBQ3hCLE1BQU16L0IsRUFBUXlpRSxLQUVkLE9BREFoQixHQUFjemhFLEVBQU9xNEQsRUFBYSxDQUFFb0gsNEJBQTRCLEdBQVN3QyxHQUFTamhFLEdBQVlDLEVBQU1nK0QsbUJBQzdGLElBQ0FqL0QsRUFBTW1pRSxNQUNUenZELE1BQU8sSUFBSzFTLEVBQU0wUyxPQUNyQixHQUNGLENBQUMybEQsSUFDSixHQUFJcDNELEVBQU15UixNQUFPLENBQ2IsTUFBTW13RCxFQUFZLENBQUMsRUFDbkI5QyxHQUFrQjhDLEVBQVc1aEUsRUFBTXlSLE1BQU96UixHQUMxQzJoRSxFQUFZbHdELE1BQVEsSUFBS213RCxLQUFjRCxFQUFZbHdELE1BQ3ZELENBQ0EsT0FBT2t3RCxDQUNYLENDZEEsU0FBU0UsR0FBZ0JDLEdBQXFCLEdBd0IxQyxNQXZCa0IsQ0FBQy9oRSxFQUFXQyxFQUFPNjNCLEdBQU9rbUMsZ0JBQWdCdkosS0FDeEQsTUFHTW1OLEdBSGlCM0ksR0FBZWo1RCxHQUNoQzBoRSxHQUNBMUMsSUFDNkIvK0QsRUFBTys5RCxFQUFjdkosRUFBVXowRCxHQUM1RGdpRSxFUG9CZCxTQUFxQi9oRSxFQUFPZ2lFLEVBQU9GLEdBQy9CLE1BQU1DLEVBQWdCLENBQUMsRUFDdkIsSUFBSyxNQUFNeGlFLEtBQU9TLEVBUUYsV0FBUlQsR0FBNEMsaUJBQWpCUyxFQUFNaWlFLFNBRWpDakMsR0FBY3pnRSxLQUNVLElBQXZCdWlFLEdBQStCL0IsR0FBa0J4Z0UsS0FDaER5aUUsSUFBVWpDLEdBQWtCeGdFLElBRTdCUyxFQUFpQixXQUFLVCxFQUFJMDdDLFdBQVcsYUFDdEM4bUIsRUFBY3hpRSxHQUFPUyxFQUFNVCxJQUduQyxPQUFPd2lFLENBQ1gsQ096QzhCRyxDQUFZbGlFLEVBQTRCLGlCQUFkRCxFQUF3QitoRSxHQUNsRUssRUFBZSxJQUNkSixLQUNBSixFQUNIOXBDLFFBT0UsU0FBRXhxQixHQUFhck4sRUFDZm9pRSxHQUFtQixJQUFBNWpDLFVBQVEsSUFBTzY2QixHQUFjaHNELEdBQVlBLEVBQVNsQyxNQUFRa0MsR0FBVyxDQUFDQSxJQUMvRixPQUFPLElBQUF0SCxlQUFjaEcsRUFBVyxJQUN6Qm9pRSxFQUNIOTBELFNBQVUrMEQsR0FDWixDQUdWLENDN0JBLE1BQU1DLEdBQWVDLEdBQVFBLEVBQUlwakUsUUFBUSxrQkFBbUIsU0FBU2lJLGNDSHJFLFNBQVNvN0QsR0FBV3A1QyxHQUFTLE1BQUUxWCxFQUFLLEtBQUV3c0QsR0FBUWxWLEVBQVd5WixHQUNyRHYrRCxPQUFPc0YsT0FBTzRmLEVBQVExWCxNQUFPQSxFQUFPK3dELEdBQWNBLEVBQVdDLG9CQUFvQjFaLElBRWpGLElBQUssTUFBTXhwRCxLQUFPMCtELEVBQ2Q5MEMsRUFBUTFYLE1BQU1FLFlBQVlwUyxFQUFLMCtELEVBQUsxK0QsR0FFNUMsQ0NIQSxNQUFNbWpFLEdBQXNCLElBQUluOUQsSUFBSSxDQUNoQyxnQkFDQSxrQkFDQSxlQUNBLG1CQUNBLGFBQ0EsV0FDQSxvQkFDQSxlQUNBLGNBQ0EsYUFDQSxVQUNBLFVBQ0EsZUFDQSxtQkFDQSxtQkFDQSxlQUNBLGNBQ0EsVUFDQSxvQkFDQSxhQUNBLGNBQ0EsYUFDQSxpQkN0QkosU0FBU285RCxHQUFVeDVDLEVBQVN5NUMsRUFBYUMsRUFBWUwsR0FDakRELEdBQVdwNUMsRUFBU3k1QyxPQUFhcGhFLEVBQVdnaEUsR0FDNUMsSUFBSyxNQUFNampFLEtBQU9xakUsRUFBWTFCLE1BQzFCLzNDLEVBQVFyaEIsYUFBYzQ2RCxHQUFvQmgzQyxJQUFJbnNCLEdBQTBCQSxFQUFuQjhpRSxHQUFZOWlFLEdBQVlxakUsRUFBWTFCLE1BQU0zaEUsR0FFdkcsQ0NOQSxTQUFTdWpFLEdBQTRCOWlFLEVBQU8raUUsR0FDeEMsTUFBTSxNQUFFdHhELEdBQVV6UixFQUNaZ2pFLEVBQVksQ0FBQyxFQUNuQixJQUFLLE1BQU16akUsS0FBT2tTLEdBQ1Y0bkQsR0FBYzVuRCxFQUFNbFMsS0FDbkJ3akUsRUFBVXR4RCxPQUFTNG5ELEdBQWMwSixFQUFVdHhELE1BQU1sUyxLQUNsRDY1RCxHQUFvQjc1RCxFQUFLUyxNQUN6QmdqRSxFQUFVempFLEdBQU9rUyxFQUFNbFMsSUFHL0IsT0FBT3lqRSxDQUNYLENDVkEsU0FBUyxHQUE0QmhqRSxFQUFPK2lFLEdBQ3hDLE1BQU1DLEVBQVlGLEdBQThCOWlFLEVBQU8raUUsR0FDdkQsSUFBSyxNQUFNeGpFLEtBQU9TLEdBQ1ZxNUQsR0FBY3I1RCxFQUFNVCxLQUFTODVELEdBQWMwSixFQUFVeGpFLE9BSXJEeWpFLEdBSHVELElBQXJDOUosR0FBbUJ4bkQsUUFBUW5TLEdBQ3ZDLE9BQVNBLEVBQUlxUyxPQUFPLEdBQUd0SyxjQUFnQi9ILEVBQUlzUyxVQUFVLEdBQ3JEdFMsR0FDaUJTLEVBQU1ULElBR3JDLE9BQU95akUsQ0FDWCxDQ2ZBLFNBQVNDLEdBQXdCampFLEVBQU9nNEMsRUFBWTBnQixFQUFRd0ssRUFBZ0IsQ0FBQyxFQUFHQyxFQUFrQixDQUFDLEdBc0IvRixNQWxCMEIsbUJBQWZuckIsSUFDUEEsRUFBYUEsT0FBc0J4MkMsSUFBWGszRCxFQUF1QkEsRUFBUzE0RCxFQUFNMDRELE9BQVF3SyxFQUFlQyxJQU0vRCxpQkFBZm5yQixJQUNQQSxFQUFhaDRDLEVBQU1xMUQsVUFBWXIxRCxFQUFNcTFELFNBQVNyZCxJQU94QixtQkFBZkEsSUFDUEEsRUFBYUEsT0FBc0J4MkMsSUFBWGszRCxFQUF1QkEsRUFBUzE0RCxFQUFNMDRELE9BQVF3SyxFQUFlQyxJQUVsRm5yQixDQUNYLENDdkJBLE1BQU1vckIsR0FBcUIvOEQsR0FDaEJuSSxNQUFNMk8sUUFBUXhHLEdDQ25CZzlELEdBQWlCaDlELEdBQ1ppakQsUUFBUWpqRCxHQUFrQixpQkFBTkEsR0FBa0JBLEVBQUVpOUQsS0FBT2o5RCxFQUFFazlELFNBRXREQyxHQUFnQ245RCxHQUUzQis4RCxHQUFrQi84RCxHQUFLQSxFQUFFQSxFQUFFckksT0FBUyxJQUFNLEVBQUlxSSxFQ0N6RCxTQUFTbzlELEdBQW1CamtFLEdBQ3hCLE1BQU1ra0UsRUFBaUJySyxHQUFjNzVELEdBQVNBLEVBQU0yTCxNQUFRM0wsRUFDNUQsT0FBTzZqRSxHQUFjSyxHQUNmQSxFQUFlSCxVQUNmRyxDQUNWLENDTUEsTUFBTUMsR0FBc0JDLEdBQVcsQ0FBQzVqRSxFQUFPdzBELEtBQzNDLE1BQU10Z0MsR0FBVSxJQUFBaUssWUFBV3UyQixJQUNyQjhDLEdBQWtCLElBQUFyNUIsWUFBVyxJQUM3QjBsQyxFQUFPLElBYmpCLFVBQW1CLDRCQUFFZixFQUEyQixrQkFBRWdCLEVBQWlCLFFBQUVDLEdBQVkvakUsRUFBT2swQixFQUFTc2pDLEdBQzdGLE1BQU16NEQsRUFBUSxDQUNWZy9ELGFBQWNpRyxHQUFpQmhrRSxFQUFPazBCLEVBQVNzakMsRUFBaUJzTCxHQUNoRUYsWUFBYWtCLEtBS2pCLE9BSElDLElBQ0FobEUsRUFBTXM1RCxNQUFTL3NDLEdBQWF5NEMsRUFBUS9qRSxFQUFPc3JCLEVBQVV2c0IsSUFFbERBLENBQ1gsQ0FJdUJrbEUsQ0FBVUwsRUFBUTVqRSxFQUFPazBCLEVBQVNzakMsR0FDckQsT0FBT2hELEVBQVdxUCxJQ2R0QixTQUFxQkssR0FDakIsTUFBTXJzQyxHQUFNLElBQUE2RyxRQUFPLE1BSW5CLE9BSG9CLE9BQWhCN0csRUFBSWhpQixVQUNKZ2lCLEVBQUloaUIsUUFBVXF1RCxLQUVYcnNDLEVBQUloaUIsT0FDZixDRFErQnN1RCxDQUFZTixFQUFLLEVBRWhELFNBQVNHLEdBQWlCaGtFLEVBQU9rMEIsRUFBU3NqQyxFQUFpQjRNLEdBQ3ZELE1BQU1uQyxFQUFTLENBQUMsRUFDVm9DLEVBQWVELEVBQW1CcGtFLEVBQU8sQ0FBQyxHQUNoRCxJQUFLLE1BQU1ULEtBQU84a0UsRUFDZHBDLEVBQU8xaUUsR0FBT2trRSxHQUFtQlksRUFBYTlrRSxJQUVsRCxJQUFJLFFBQUV5M0QsRUFBTyxRQUFFN0IsR0FBWW4xRCxFQUMzQixNQUFNc2tFLEVBQTBCcFAsR0FBc0JsMUQsR0FDaER1a0UsRUFBa0JuUCxHQUFjcDFELEdBQ2xDazBCLEdBQ0Fxd0MsSUFDQ0QsSUFDaUIsSUFBbEJ0a0UsRUFBTWkzRCxlQUNVejFELElBQVp3MUQsSUFDQUEsRUFBVTlpQyxFQUFROGlDLGNBQ054MUQsSUFBWjJ6RCxJQUNBQSxFQUFVamhDLEVBQVFpaEMsVUFFMUIsSUFBSXFQLElBQTRCaE4sSUFDRSxJQUE1QkEsRUFBZ0JSLFFBRXRCd04sRUFBNEJBLElBQXlDLElBQVp4TixFQUN6RCxNQUFNeU4sRUFBZUQsRUFBNEJyUCxFQUFVNkIsRUE4QjNELE9BN0JJeU4sR0FDd0Isa0JBQWpCQSxJQUNOMVAsR0FBb0IwUCxLQUNSdm1FLE1BQU0yTyxRQUFRNDNELEdBQWdCQSxFQUFlLENBQUNBLElBQ3REdjlELFNBQVM4d0MsSUFDVixNQUFNMHNCLEVBQVd6QixHQUF3QmpqRSxFQUFPZzRDLEdBQ2hELElBQUswc0IsRUFDRCxPQUNKLE1BQU0sY0FBRUMsRUFBYSxXQUFFanBELEtBQWV4YixHQUFXd2tFLEVBQ2pELElBQUssTUFBTW5sRSxLQUFPVyxFQUFRLENBQ3RCLElBQUkwa0UsRUFBYzFrRSxFQUFPWCxHQUNyQnJCLE1BQU0yTyxRQUFRKzNELEtBUWRBLEVBQWNBLEVBSEFKLEVBQ1JJLEVBQVk1bUUsT0FBUyxFQUNyQixJQUdVLE9BQWhCNG1FLElBQ0EzQyxFQUFPMWlFLEdBQU9xbEUsRUFFdEIsQ0FDQSxJQUFLLE1BQU1ybEUsS0FBT29sRSxFQUNkMUMsRUFBTzFpRSxHQUFPb2xFLEVBQWNwbEUsRUFBSSxJQUdyQzBpRSxDQUNYLENFOUVBLE1BQU00QyxHQUFRQyxHQUFRQSxFQ0F0QixNQUFNQyxHQUNGLFdBQUE3NUQsR0FDSXRMLEtBQUs0USxNQUFRLEdBQ2I1USxLQUFLb2xFLFVBQVksSUFBSXovRCxHQUN6QixDQUNBLEdBQUFJLENBQUlzL0QsR0FDQSxJQUFLcmxFLEtBQUtvbEUsVUFBVXQ1QyxJQUFJdTVDLEdBR3BCLE9BRkFybEUsS0FBS29sRSxVQUFVci9ELElBQUlzL0QsR0FDbkJybEUsS0FBSzRRLE1BQU1sUSxLQUFLMmtFLElBQ1QsQ0FFZixDQUNBLE1BQUFqdkIsQ0FBT2l2QixHQUNILE1BQU05c0MsRUFBUXY0QixLQUFLNFEsTUFBTWtCLFFBQVF1ekQsSUFDbEIsSUFBWDlzQyxJQUNBdjRCLEtBQUs0USxNQUFNbzhCLE9BQU96VSxFQUFPLEdBQ3pCdjRCLEtBQUtvbEUsVUFBVS9xRCxPQUFPZ3JELEdBRTlCLENBQ0EsS0FBQUMsR0FDSXRsRSxLQUFLNFEsTUFBTXhTLE9BQVMsRUFDcEI0QixLQUFLb2xFLFVBQVVFLE9BQ25CLEVDcEJKLE1BQU1DLEdBQWEsQ0FDZixVQUNBLE9BQ0EsU0FDQSxZQUNBLFNBQ0EsZUNMSUMsU0FBVSxHQUFPQyxPQUFRQyxHQUFhdm1FLE1BQU93bUUsR0FBUyxNQUFFQyxJRFFoRSxTQUE2QkMsRUFBbUJDLEdBQzVDLElBQUlDLEdBQWUsRUFDZkMsR0FBb0IsRUFDeEIsTUFBTTdtRSxFQUFRLENBQ1YwbkQsTUFBTyxFQUNQb2YsVUFBVyxFQUNYQyxjQUFjLEdBRVpOLEVBQVFMLEdBQVcxb0IsUUFBTyxDQUFDc3BCLEVBQUt4bUUsS0FDbEN3bUUsRUFBSXhtRSxHRElaLFNBQTBCb21FLEdBS3RCLElBQUlLLEVBQVksSUFBSWpCLEdBQ2hCa0IsRUFBWSxJQUFJbEIsR0FDaEJtQixFQUFXLEVBS1hKLEdBQWUsRUFDZkssR0FBaUIsRUFJckIsTUFBTUMsRUFBYyxJQUFJcmhDLFFBQ2xCc2hDLEVBQU8sQ0FJVGpCLFNBQVUsQ0FBQzV2QyxFQUFVOHdDLEdBQVksRUFBT0MsR0FBWSxLQUNoRCxNQUFNQyxFQUFvQkQsR0FBYVQsRUFDakM1cUMsRUFBUXNyQyxFQUFvQlIsRUFBWUMsRUFPOUMsT0FOSUssR0FDQUYsRUFBWXpnRSxJQUFJNnZCLEdBQ2hCMEYsRUFBTXYxQixJQUFJNnZCLElBQWFneEMsR0FBcUJWLElBRTVDSSxFQUFXRixFQUFVeDFELE1BQU14UyxRQUV4QnczQixDQUFRLEVBS25CNnZDLE9BQVM3dkMsSUFDTHl3QyxFQUFVandCLE9BQU94Z0IsR0FDakI0d0MsRUFBWW5zRCxPQUFPdWIsRUFBUyxFQUtoQ3l2QyxRQUFVTSxJQU1OLEdBQUlPLEVBQ0FLLEdBQWlCLE1BRHJCLENBVUEsR0FOQUwsR0FBZSxHQUNkRSxFQUFXQyxHQUFhLENBQUNBLEVBQVdELEdBRXJDQyxFQUFVZixRQUVWZ0IsRUFBV0YsRUFBVXgxRCxNQUFNeFMsT0FDdkJrb0UsRUFDQSxJQUFLLElBQUlobEUsRUFBSSxFQUFHQSxFQUFJZ2xFLEVBQVVobEUsSUFBSyxDQUMvQixNQUFNczBCLEVBQVd3d0MsRUFBVXgxRCxNQUFNdFAsR0FDakNzMEIsRUFBUyt2QyxHQUNMYSxFQUFZMTZDLElBQUk4SixLQUNoQjZ3QyxFQUFLakIsU0FBUzV2QyxHQUNkbXdDLElBRVIsQ0FFSkcsR0FBZSxFQUNYSyxJQUNBQSxHQUFpQixFQUNqQkUsRUFBS3BCLFFBQVFNLEdBcEJqQixDQXFCQSxHQUdSLE9BQU9jLENBQ1gsQ0NqRm1CSSxFQUFpQixJQUFPZCxHQUFlLElBQzNDSSxJQUNSLENBQUMsR0FDRVcsRUFBZUMsR0FBV25CLEVBQU1tQixHQUFRMUIsUUFBUWxtRSxHQUNoRDZuRSxFQUFlLEtBQ2pCLE1BQU1mLEVBQVlyeUIsWUFBWXoxQixNQUM5QjRuRCxHQUFlLEVBQ2Y1bUUsRUFBTTBuRCxNQUFRbWYsRUFDUixJQUFPLEdBQ1BudUQsS0FBS3dpRCxJQUFJeGlELEtBQUs0USxJQUFJdzlDLEVBQVk5bUUsRUFBTThtRSxVQW5CL0IsSUFtQnVELEdBQ2xFOW1FLEVBQU04bUUsVUFBWUEsRUFDbEI5bUUsRUFBTSttRSxjQUFlLEVBQ3JCWCxHQUFXaitELFFBQVF3L0QsR0FDbkIzbkUsRUFBTSttRSxjQUFlLEVBQ2pCSCxJQUNBQyxHQUFvQixFQUNwQkgsRUFBa0JtQixHQUN0QixFQW1CSixNQUFPLENBQUV4QixTQVZRRCxHQUFXMW9CLFFBQU8sQ0FBQ3NwQixFQUFLeG1FLEtBQ3JDLE1BQU04bUUsRUFBT2IsRUFBTWptRSxHQU1uQixPQUxBd21FLEVBQUl4bUUsR0FBTyxDQUFDMGxFLEVBQVNxQixHQUFZLEVBQU9DLEdBQVksS0FDM0NaLElBVFRBLEdBQWUsRUFDZkMsR0FBb0IsRUFDZjdtRSxFQUFNK21FLGNBQ1BMLEVBQWtCbUIsSUFRWFAsRUFBS2pCLFNBQVNILEVBQVNxQixFQUFXQyxJQUV0Q1IsQ0FBRyxHQUNYLENBQUMsR0FFZVYsT0FESEosR0FBWUUsR0FBV2orRCxTQUFTM0gsR0FBUWltRSxFQUFNam1FLEdBQUs4bEUsT0FBT0osS0FDL0NsbUUsUUFBT3ltRSxRQUN0QyxDQ3REMkVxQixDQUFxRCxvQkFBMUJDLHNCQUF3Q0Esc0JBQXdCakMsSUNLaEtrQyxHQUFrQixDQUNwQnhRLGVBQWdCb04sR0FBbUIsQ0FDL0JiLDRCQUE2QixHQUM3QmdCLGtCQUFtQnRDLEdBQ25CdUMsUUFBUyxDQUFDL2pFLEVBQU9zckIsR0FBWXMzQyxjQUFhN0UsbUJBQ3RDLEdBQU1pSixNQUFLLEtBQ1AsSUFDSXBFLEVBQVl6QixXQUVKLG1CQURHNzFDLEVBQVMyN0MsUUFFVjM3QyxFQUFTMjdDLFVBQ1QzN0MsRUFBUzQ3Qyx1QkFDdkIsQ0FDQSxNQUFPOW5FLEdBRUh3akUsRUFBWXpCLFdBQWEsQ0FDckI3MEMsRUFBRyxFQUNIMEosRUFBRyxFQUNIN1QsTUFBTyxFQUNQQyxPQUFRLEVBRWhCLEtBRUosR0FBTXRlLFFBQU8sS0FDVDA4RCxHQUFjb0MsRUFBYTdFLEVBQWMsQ0FBRVMsNEJBQTRCLEdBQVN3QyxHQUFTMTFDLEVBQVM2TixTQUFVbjVCLEVBQU1nK0QsbUJBQ2xIMkUsR0FBVXIzQyxFQUFVczNDLEVBQVksR0FDbEMsS0M5QlJ1RSxHQUFtQixDQUNyQjVRLGVBQWdCb04sR0FBbUIsQ0FDL0JiLDRCQUEyQixHQUMzQmdCLGtCQUFtQmpGLE1DUDNCLFNBQVN1SSxHQUFZbG5FLEVBQVFtbkUsRUFBV0MsRUFBU3Y2RCxFQUFVLENBQUVtZixTQUFTLElBRWxFLE9BREFoc0IsRUFBT3FVLGlCQUFpQjh5RCxFQUFXQyxFQUFTdjZELEdBQ3JDLElBQU03TSxFQUFPc1Usb0JBQW9CNnlELEVBQVdDLEVBQ3ZELENDSEEsTUFBTUMsR0FBb0JoaUQsR0FDSSxVQUF0QkEsRUFBTTdDLFlBQ3lCLGlCQUFqQjZDLEVBQU03bUIsUUFBdUI2bUIsRUFBTTdtQixRQUFVLEdBV2hDLElBQXBCNm1CLEVBQU01QyxVQ1hyQixTQUFTNmtELEdBQWlCamlELEVBQU9raUQsRUFBWSxRQUN6QyxNQUFPLENBQ0hDLE1BQU8sQ0FDSHA3QyxFQUFHL0csRUFBTWtpRCxFQUFZLEtBQ3JCenhDLEVBQUd6USxFQUFNa2lELEVBQVksTUFHakMsQ0FDQSxNQUFNRSxHQUFrQkwsR0FDWi9oRCxHQUFVZ2lELEdBQWlCaGlELElBQVUraEQsRUFBUS9oRCxFQUFPaWlELEdBQWlCamlELElDUmpGLFNBQVNxaUQsR0FBZ0IxbkUsRUFBUW1uRSxFQUFXQyxFQUFTdjZELEdBQ2pELE9BQU9xNkQsR0FBWWxuRSxFQUFRbW5FLEVBQVdNLEdBQWVMLEdBQVV2NkQsRUFDbkUsQ0NFQSxNQUFNODZELEdBQW1CLENBQUMxaUUsRUFBR0MsSUFBT2lCLEdBQU1qQixFQUFFRCxFQUFFa0IsSUFDeEN5aEUsR0FBTyxJQUFJQyxJQUFpQkEsRUFBYXRyQixPQUFPb3JCLElDUnRELFNBQVNHLEdBQVcvbkUsR0FDaEIsSUFBSWdvRSxFQUFPLEtBQ1gsTUFBTyxJQUlVLE9BQVRBLElBQ0FBLEVBQU9ob0UsRUFKTSxLQUNiZ29FLEVBQU8sSUFBSSxFQVF2QixDQUNBLE1BQU1DLEdBQXVCRixHQUFXLGtCQUNsQ0csR0FBcUJILEdBQVcsZ0JBQ3RDLFNBQVNJLEdBQWMzUyxHQUNuQixJQUFJd1MsR0FBTyxFQUNYLEdBQWEsTUFBVHhTLEVBQ0F3UyxFQUFPRSxVQUVOLEdBQWEsTUFBVDFTLEVBQ0x3UyxFQUFPQyxTQUVOLENBQ0QsTUFBTUcsRUFBaUJILEtBQ2pCSSxFQUFlSCxLQUNqQkUsR0FBa0JDLEVBQ2xCTCxFQUFPLEtBQ0hJLElBQ0FDLEdBQWMsR0FLZEQsR0FDQUEsSUFDQUMsR0FDQUEsSUFFWixDQUNBLE9BQU9MLENBQ1gsQ0FDQSxTQUFTTSxLQUdMLE1BQU1DLEVBQWtCSixJQUFjLEdBQ3RDLE9BQUtJLElBRUxBLEtBQ08sRUFDWCxDQ2xEQSxNQUFNQyxHQUNGLFdBQUF2OUQsQ0FBWStiLEdBQ1JybkIsS0FBSzIyQixXQUFZLEVBQ2pCMzJCLEtBQUtxbkIsS0FBT0EsQ0FDaEIsQ0FDQSxNQUFBNnVCLEdBQVcsRUNDZixTQUFTNHlCLEdBQWN6aEQsRUFBTWtpQyxHQUN6QixNQUFNa2UsRUFBWSxXQUFhbGUsRUFBVyxRQUFVLFNBQzlDd2YsRUFBZSxXQUFheGYsRUFBVyxRQUFVLE9BWXZELE9BQU95ZSxHQUFnQjNnRCxFQUFLcFIsUUFBU3d4RCxHQVhqQixDQUFDOWhELEVBQU9xakQsS0FDeEIsR0FBbUIsVUFBZnJqRCxFQUFNdGlCLE1BQW9Cc2xFLEtBQzFCLE9BQ0osTUFBTXZvRSxFQUFRaW5CLEVBQUs0aEQsV0FDZjVoRCxFQUFLOHdDLGdCQUFrQi8zRCxFQUFNOG9FLFlBQzdCN2hELEVBQUs4d0MsZUFBZWdSLFVBQVUsYUFBYzVmLEdBRTVDbnBELEVBQU0yb0UsSUFDTixHQUFNN3lCLFFBQU8sSUFBTTkxQyxFQUFNMm9FLEdBQWNwakQsRUFBT3FqRCxJQUNsRCxHQUV5RCxDQUN6RDE4QyxTQUFVakYsRUFBSzRoRCxXQUFXRixJQUVsQyxDQ2hCQSxNQUFNSyxHQUFnQixDQUFDMVIsRUFBUTNoRCxNQUN0QkEsSUFHSTJoRCxJQUFXM2hELEdBSVRxekQsR0FBYzFSLEVBQVEzaEQsRUFBTXN6RCxnQkNMM0MsU0FBU0MsR0FBMEJqcEUsRUFBTXFuRSxHQUNyQyxJQUFLQSxFQUNELE9BQ0osTUFBTTZCLEVBQXdCLElBQUlDLGFBQWEsVUFBWW5wRSxHQUMzRHFuRSxFQUFRNkIsRUFBdUIzQixHQUFpQjJCLEdBQ3BELENDVkEsTUFBTUUsR0FBb0IsSUFBSXpwQyxRQU14QjBwQyxHQUFZLElBQUkxcEMsUUFDaEIycEMsR0FBd0JDLElBQzFCLE1BQU1oMEMsRUFBVzZ6QyxHQUFrQmwrRCxJQUFJcStELEVBQU10cEUsUUFDN0NzMUIsR0FBWUEsRUFBU2cwQyxFQUFNLEVBRXpCQyxHQUE0QkMsSUFDOUJBLEVBQVF4aUUsUUFBUXFpRSxHQUFxQixFQ2R6QyxNQUFNSSxHQUFpQixDQUNuQnB0QixLQUFNLEVBQ05xdEIsSUFBSyxHQ0FIQyxHQUFvQixDQUN0QmhVLE9BQVEsQ0FDSjRTLFFEQVIsY0FBNEJBLEdBQ3hCLFdBQUF2OUQsR0FDSTg0QyxTQUFTam1ELFdBQ1Q2QixLQUFLa3FFLGdCQUFpQixFQUN0QmxxRSxLQUFLbXFFLFVBQVcsQ0FDcEIsQ0FDQSxhQUFBQyxHQUNJcHFFLEtBQUs4c0MsVUFDTCxNQUFNLFNBQUV1OUIsRUFBVyxDQUFDLEdBQU1ycUUsS0FBS3FuQixLQUFLNGhELFlBQzlCLEtBQUVxQixFQUFNNU4sT0FBUTZOLEVBQVUsT0FBRUMsRUFBUyxPQUFNLEtBQUVDLEdBQVNKLEVBQ3REbDlELEVBQVUsQ0FDWm05RCxLQUFNQSxFQUFPQSxFQUFLcjBELGFBQVVyVSxFQUM1QjJvRSxhQUNBRyxVQUE2QixpQkFBWEYsRUFBc0JBLEVBQVNULEdBQWVTLElBK0JwRSxPRGJSLFNBQTZCamhELEVBQVNwYyxFQUFTeW9CLEdBQzNDLE1BQU0rMEMsRUFwQlYsVUFBa0MsS0FBRUwsS0FBU245RCxJQUN6QyxNQUFNeTlELEVBQWFOLEdBQVFwa0UsU0FJdEJ3akUsR0FBVTU5QyxJQUFJOCtDLElBQ2ZsQixHQUFVdC9ELElBQUl3Z0UsRUFBWSxDQUFDLEdBRS9CLE1BQU1DLEVBQWdCbkIsR0FBVW4rRCxJQUFJcS9ELEdBQzlCanJFLEVBQU0wQyxLQUFLQyxVQUFVNkssR0FRM0IsT0FISzA5RCxFQUFjbHJFLEtBQ2ZrckUsRUFBY2xyRSxHQUFPLElBQUltckUscUJBQXFCakIsR0FBMEIsQ0FBRVMsVUFBU245RCxLQUVoRjA5RCxFQUFjbHJFLEVBQ3pCLENBRXNDb3JFLENBQXlCNTlELEdBRzNELE9BRkFzOEQsR0FBa0JyL0QsSUFBSW1mLEVBQVNxTSxHQUMvQiswQyxFQUEwQkssUUFBUXpoRCxHQUMzQixLQUNIa2dELEdBQWtCcHZELE9BQU9rUCxHQUN6Qm9oRCxFQUEwQk0sVUFBVTFoRCxFQUFRLENBRXBELENDS2UyaEQsQ0FBb0JsckUsS0FBS3FuQixLQUFLcFIsUUFBUzlJLEdBN0JoQnk4RCxJQUMxQixNQUFNLGVBQUV1QixHQUFtQnZCLEVBSTNCLEdBQUk1cEUsS0FBS21xRSxXQUFhZ0IsRUFDbEIsT0FNSixHQUxBbnJFLEtBQUttcUUsU0FBV2dCLEVBS1pWLElBQVNVLEdBQWtCbnJFLEtBQUtrcUUsZUFDaEMsT0FFS2lCLElBQ0xuckUsS0FBS2txRSxnQkFBaUIsR0FFdEJscUUsS0FBS3FuQixLQUFLOHdDLGdCQUNWbjRELEtBQUtxbkIsS0FBSzh3QyxlQUFlZ1IsVUFBVSxjQUFlZ0MsR0FNdEQsTUFBTSxnQkFBRUMsRUFBZSxnQkFBRUMsR0FBb0JyckUsS0FBS3FuQixLQUFLNGhELFdBQ2pEcnpDLEVBQVd1MUMsRUFBaUJDLEVBQWtCQyxFQUNwRHoxQyxHQUFZQSxFQUFTZzBDLEVBQU0sR0FHbkMsQ0FDQSxLQUFBblIsR0FDSXo0RCxLQUFLb3FFLGVBQ1QsQ0FDQSxNQUFBbDBCLEdBQ0ksR0FBb0Msb0JBQXpCNDBCLHFCQUNQLE9BQ0osTUFBTSxNQUFFMXFFLEVBQUssVUFBRStpRSxHQUFjbmpFLEtBQUtxbkIsS0FDUixDQUFDLFNBQVUsU0FBVSxRQUFRczFCLEtBTy9ELFVBQWtDLFNBQUUwdEIsRUFBVyxDQUFDLElBQU9BLFNBQVVpQixFQUFlLENBQUMsR0FBTSxDQUFDLEdBQ3BGLE9BQVFqckUsR0FBU2dxRSxFQUFTaHFFLEtBQVVpckUsRUFBYWpyRSxFQUNyRCxDQVRvRWtyRSxDQUF5Qm5yRSxFQUFPK2lFLEtBRXhGbmpFLEtBQUtvcUUsZUFFYixDQUNBLE9BQUF0OUIsR0FBWSxJQ3hEWmlwQixJQUFLLENBQ0Q4UyxRSE1SLGNBQTJCQSxHQUN2QixXQUFBdjlELEdBQ0k4NEMsU0FBU2ptRCxXQUNUNkIsS0FBS3dyRSxxQkFBdUJ2RyxHQUM1QmpsRSxLQUFLeXJFLG1CQUFxQnhHLEdBQzFCamxFLEtBQUswckUsMEJBQTRCekcsR0FDakNqbEUsS0FBSzJyRSxrQkFBb0IsQ0FBQ0MsRUFBWUMsS0FFbEMsR0FEQTdyRSxLQUFLeXJFLHFCQUNEenJFLEtBQUs4ckUsV0FDTCxPQUNKLE1BQU0xckUsRUFBUUosS0FBS3FuQixLQUFLNGhELFdBZWxCOEMsRUFBMEIvRCxHQUFnQi9oRSxPQUFRLGFBZGhDLENBQUMrbEUsRUFBVUMsS0FDL0IsSUFBS2pzRSxLQUFLa3NFLGdCQUNOLE9BQ0osTUFBTSxNQUFFbk0sRUFBSyxZQUFFb00sR0FBZ0Juc0UsS0FBS3FuQixLQUFLNGhELFdBQ3pDLEdBQU0veUIsUUFBTyxLQUtSa3pCLEdBQWNwcEUsS0FBS3FuQixLQUFLcFIsUUFBUysxRCxFQUFTMXJFLFFBRXJDeS9ELEdBQVNBLEVBQU1pTSxFQUFVQyxHQUR6QkUsR0FBZUEsRUFBWUgsRUFBVUMsRUFDSixHQUN6QyxHQUVnRixDQUFFMy9DLFVBQVdsc0IsRUFBTTIvRCxPQUFTMy9ELEVBQW1CLGVBQy9IZ3NFLEVBQThCcEUsR0FBZ0IvaEUsT0FBUSxpQkFBaUIsQ0FBQ29tRSxFQUFhQyxJQUFldHNFLEtBQUt1c0UsWUFBWUYsRUFBYUMsSUFBYSxDQUFFaGdELFVBQVdsc0IsRUFBTStyRSxhQUFlL3JFLEVBQXVCLG1CQUM5TUosS0FBS3lyRSxtQkFBcUJ2RCxHQUFLNkQsRUFBeUJLLEdBQ3hEcHNFLEtBQUt3c0UsV0FBV1osRUFBWUMsRUFBVSxFQUUxQzdyRSxLQUFLeXNFLHFCQUF1QixLQUN4QixNQW1CTUMsRUFBd0JsRixHQUFZeG5FLEtBQUtxbkIsS0FBS3BSLFFBQVMsV0FuQnRDMDJELElBQ00sVUFBckJBLEVBQWFodEUsS0FBbUJLLEtBQUs4ckUsYUFZekM5ckUsS0FBS3lyRSxxQkFDTHpyRSxLQUFLeXJFLG1CQUFxQmpFLEdBQVl4bkUsS0FBS3FuQixLQUFLcFIsUUFBUyxTQVhwQzIyRCxJQUNNLFVBQW5CQSxFQUFXanRFLEtBQW9CSyxLQUFLa3NFLGlCQUV4QzVDLEdBQTBCLE1BQU0sQ0FBQzNqRCxFQUFPcWpELEtBQ3BDLE1BQU0sTUFBRWpKLEdBQVUvL0QsS0FBS3FuQixLQUFLNGhELFdBQ3hCbEosR0FDQSxHQUFNN3BCLFFBQU8sSUFBTTZwQixFQUFNcDZDLEVBQU9xakQsSUFDcEMsR0FDRixJQUlOTSxHQUEwQixRQUFRLENBQUMzakQsRUFBT3FqRCxLQUN0Q2hwRSxLQUFLd3NFLFdBQVc3bUQsRUFBT3FqRCxFQUFLLElBQzlCLElBUUE2RCxFQUFxQnJGLEdBQVl4bkUsS0FBS3FuQixLQUFLcFIsUUFBUyxRQUx2QyxLQUNWalcsS0FBSzhyRSxZQUVWeEMsR0FBMEIsVUFBVSxDQUFDK0MsRUFBYUMsSUFBZXRzRSxLQUFLdXNFLFlBQVlGLEVBQWFDLElBQVksSUFHL0d0c0UsS0FBSzByRSwwQkFBNEJ4RCxHQUFLd0UsRUFBdUJHLEVBQW1CLENBRXhGLENBQ0EsVUFBQUwsQ0FBVzdtRCxFQUFPcWpELEdBQ2RocEUsS0FBSzhyRSxZQUFhLEVBQ2xCLE1BQU0sV0FBRTlMLEVBQVUsU0FBRUMsR0FBYWpnRSxLQUFLcW5CLEtBQUs0aEQsV0FJdkNoSixHQUFZamdFLEtBQUtxbkIsS0FBSzh3QyxnQkFDdEJuNEQsS0FBS3FuQixLQUFLOHdDLGVBQWVnUixVQUFVLFlBQVksR0FFL0NuSixHQUNBLEdBQU05cEIsUUFBTyxJQUFNOHBCLEVBQVdyNkMsRUFBT3FqRCxJQUU3QyxDQUNBLGFBQUFrRCxHQU9JLE9BTkFsc0UsS0FBS3lyRSxxQkFDTHpyRSxLQUFLOHJFLFlBQWEsRUFDSjlyRSxLQUFLcW5CLEtBQUs0aEQsV0FDZGhKLFVBQVlqZ0UsS0FBS3FuQixLQUFLOHdDLGdCQUM1Qm40RCxLQUFLcW5CLEtBQUs4d0MsZUFBZWdSLFVBQVUsWUFBWSxJQUUzQ1IsSUFDWixDQUNBLFdBQUE0RCxDQUFZNW1ELEVBQU9xakQsR0FDZixJQUFLaHBFLEtBQUtrc0UsZ0JBQ04sT0FDSixNQUFNLFlBQUVDLEdBQWdCbnNFLEtBQUtxbkIsS0FBSzRoRCxXQUM5QmtELEdBQ0EsR0FBTWoyQixRQUFPLElBQU1pMkIsRUFBWXhtRCxFQUFPcWpELElBRTlDLENBQ0EsS0FBQXZRLEdBQ0ksTUFBTXI0RCxFQUFRSixLQUFLcW5CLEtBQUs0aEQsV0FDbEI2RCxFQUF3QjlFLEdBQWdCaG9FLEtBQUtxbkIsS0FBS3BSLFFBQVMsY0FBZWpXLEtBQUsyckUsa0JBQW1CLENBQUVyL0MsVUFBV2xzQixFQUFNNC9ELFlBQWM1L0QsRUFBc0Isa0JBQ3pKMnNFLEVBQXNCdkYsR0FBWXhuRSxLQUFLcW5CLEtBQUtwUixRQUFTLFFBQVNqVyxLQUFLeXNFLHNCQUN6RXpzRSxLQUFLd3JFLHFCQUF1QnRELEdBQUs0RSxFQUF1QkMsRUFDNUQsQ0FDQSxPQUFBamdDLEdBQ0k5c0MsS0FBS3dyRSx1QkFDTHhyRSxLQUFLeXJFLHFCQUNMenJFLEtBQUswckUsMkJBQ1QsSUd4R0E5aEQsTUFBTyxDQUNIaS9DLFFDVFIsY0FBMkJBLEdBQ3ZCLFdBQUF2OUQsR0FDSTg0QyxTQUFTam1ELFdBQ1Q2QixLQUFLdXBELFVBQVcsQ0FDcEIsQ0FDQSxPQUFBeWpCLEdBQ0ksSUFBSUMsR0FBaUIsRUFPckIsSUFDSUEsRUFBaUJqdEUsS0FBS3FuQixLQUFLcFIsUUFBUTJrQyxRQUFRLGlCQUMvQyxDQUNBLE1BQU9wN0MsR0FDSHl0RSxHQUFpQixDQUNyQixDQUNLQSxHQUFtQmp0RSxLQUFLcW5CLEtBQUs4d0MsaUJBRWxDbjRELEtBQUtxbkIsS0FBSzh3QyxlQUFlZ1IsVUFBVSxjQUFjLEdBQ2pEbnBFLEtBQUt1cEQsVUFBVyxFQUNwQixDQUNBLE1BQUEyakIsR0FDU2x0RSxLQUFLdXBELFVBQWF2cEQsS0FBS3FuQixLQUFLOHdDLGlCQUVqQ240RCxLQUFLcW5CLEtBQUs4d0MsZUFBZWdSLFVBQVUsY0FBYyxHQUNqRG5wRSxLQUFLdXBELFVBQVcsRUFDcEIsQ0FDQSxLQUFBa1AsR0FDSXo0RCxLQUFLOHNDLFFBQVVvN0IsR0FBS1YsR0FBWXhuRSxLQUFLcW5CLEtBQUtwUixRQUFTLFNBQVMsSUFBTWpXLEtBQUtndEUsWUFBWXhGLEdBQVl4bkUsS0FBS3FuQixLQUFLcFIsUUFBUyxRQUFRLElBQU1qVyxLQUFLa3RFLFdBQ3pJLENBQ0EsT0FBQXBnQyxHQUFZLElEdEJaZ3BCLE1BQU8sQ0FDSCtTLFFMUVIsY0FBMkJBLEdBQ3ZCLEtBQUFwUSxHQUNJejRELEtBQUs4c0MsUUFBVW83QixHQUFLWSxHQUFjOW9FLEtBQUtxbkIsTUFBTSxHQUFPeWhELEdBQWM5b0UsS0FBS3FuQixNQUFNLEdBQ2pGLENBQ0EsT0FBQXlsQixHQUFZLEtPNUJoQixTQUFTcWdDLEdBQWUzNEMsRUFBTTQ0QyxHQUMxQixJQUFLOXVFLE1BQU0yTyxRQUFRbWdFLEdBQ2YsT0FBTyxFQUNYLE1BQU1DLEVBQWFELEVBQUtodkUsT0FDeEIsR0FBSWl2RSxJQUFlNzRDLEVBQUtwMkIsT0FDcEIsT0FBTyxFQUNYLElBQUssSUFBSWtELEVBQUksRUFBR0EsRUFBSStyRSxFQUFZL3JFLElBQzVCLEdBQUk4ckUsRUFBSzlyRSxLQUFPa3pCLEVBQUtsekIsR0FDakIsT0FBTyxFQUVmLE9BQU8sQ0FDWCxDQ09BLFNBQVNnc0UsR0FBZTdWLEVBQWVyZixFQUFZMGdCLEdBQy9DLE1BQU0xNEQsRUFBUXEzRCxFQUFjd1IsV0FDNUIsT0FBTzVGLEdBQXdCampFLEVBQU9nNEMsT0FBdUJ4MkMsSUFBWGszRCxFQUF1QkEsRUFBUzE0RCxFQUFNMDRELE9BZjVGLFNBQW9CckIsR0FDaEIsTUFBTXhoRCxFQUFVLENBQUMsRUFFakIsT0FEQXdoRCxFQUFjNEssT0FBTy82RCxTQUFRLENBQUMxSCxFQUFPRCxJQUFTc1csRUFBUXRXLEdBQU9DLEVBQU0yTCxRQUM1RDBLLENBQ1gsQ0FXb0dzM0QsQ0FBVzlWLEdBUC9HLFNBQXFCQSxHQUNqQixNQUFNK1YsRUFBVyxDQUFDLEVBRWxCLE9BREEvVixFQUFjNEssT0FBTy82RCxTQUFRLENBQUMxSCxFQUFPRCxJQUFTNnRFLEVBQVM3dEUsR0FBT0MsRUFBTTg1RCxnQkFDN0Q4VCxDQUNYLENBRytIOVQsQ0FBWWpDLEdBQzNJLENDbkJBLE1BQ01nVyxHQUErQixRQUFVaEwsR0FEakIsa0JDQTlCLElBQUksR0FBVXdDLEdBQ1YsR0FBWUEsR0NHaEIsTUFBTXlJLEdBQXlCQyxHQUFzQixJQUFWQSxFQUNyQ0MsR0FBeUJDLEdBQWlCQSxFQUFlLElDUHpEQyxHQUFzQkMsR0FBV3p2RSxNQUFNMk8sUUFBUThnRSxJQUFnQyxpQkFBZEEsRUFBTyxHQ0U5RSxTQUFTQyxHQUF1QkQsR0FDNUIsT0FBT3JrQixTQUFTcWtCLEdBQ08saUJBQVhBLEdBQXVCRSxHQUFxQkYsSUFDcERELEdBQW1CQyxJQUNsQnp2RSxNQUFNMk8sUUFBUThnRSxJQUFXQSxFQUFPeHpCLE1BQU15ekIsSUFDL0MsQ0FDQSxNQUFNRSxHQUFzQixFQUFFM29FLEVBQUdDLEVBQUdDLEVBQUdpQixLQUFPLGdCQUFnQm5CLE1BQU1DLE1BQU1DLE1BQU1pQixLQUMxRXVuRSxHQUF1QixDQUN6QkUsT0FBUSxTQUNSQyxLQUFNLE9BQ05DLE9BQVEsVUFDUkMsUUFBUyxXQUNUQyxVQUFXLGNBQ1hDLE9BQVFOLEdBQW9CLENBQUMsRUFBRyxJQUFNLElBQU0sSUFDNUNPLFFBQVNQLEdBQW9CLENBQUMsSUFBTSxFQUFHLEVBQUcsTUFDMUNRLE9BQVFSLEdBQW9CLENBQUMsSUFBTSxJQUFNLEtBQU8sTUFDaERTLFFBQVNULEdBQW9CLENBQUMsSUFBTSxLQUFNLElBQU0sT0FFcEQsU0FBU1UsR0FBd0JiLEdBQzdCLEdBQUtBLEVBRUwsT0FBT0QsR0FBbUJDLEdBQ3BCRyxHQUFvQkgsR0FDcEJ6dkUsTUFBTTJPLFFBQVE4Z0UsR0FDVkEsRUFBTzlzRSxJQUFJMnRFLElBQ1hYLEdBQXFCRixFQUNuQyxDQ1JBLE1BQU1jLEdBQWEsQ0FBQ3JpRCxFQUFHc2lELEVBQUlDLE9BQVUsRUFBTSxFQUFNQSxFQUFLLEVBQU1ELEdBQU10aUQsR0FBSyxFQUFNdWlELEVBQUssRUFBTUQsSUFBT3RpRCxFQUFJLEVBQU1zaUQsR0FDckd0aUQsRUFvQkosU0FBU3dpRCxHQUFZQyxFQUFLQyxFQUFLQyxFQUFLQyxHQUVoQyxHQUFJSCxJQUFRQyxHQUFPQyxJQUFRQyxFQUN2QixPQUFPbkssR0FHWCxPQUFRejRDLEdBQVksSUFBTkEsR0FBaUIsSUFBTkEsRUFBVUEsRUFBSXFpRCxHQXZCM0MsU0FBeUJuaUQsRUFBRzJpRCxFQUFZQyxFQUFZTCxFQUFLRSxHQUNyRCxJQUFJSSxFQUNBQyxFQUNBbHVFLEVBQUksRUFDUixHQUNJa3VFLEVBQVdILEdBQWNDLEVBQWFELEdBQWMsRUFDcERFLEVBQVdWLEdBQVdXLEVBQVVQLEVBQUtFLEdBQU96aUQsRUFDeEM2aUQsRUFBVyxFQUNYRCxFQUFhRSxFQUdiSCxFQUFhRyxRQUVaMzNELEtBQUs0M0QsSUFBSUYsR0FmTyxRQWdCbkJqdUUsRUFmdUIsSUFnQjdCLE9BQU9rdUUsQ0FDWCxDQUs2QkUsQ0FFa0NsakQsRUFGZCxFQUFHLEVBQUd5aUQsRUFBS0UsR0FFT0QsRUFBS0UsRUFDeEUsQ0M5Q0EsTUFBTWYsR0FBU1csR0FBWSxJQUFNLEVBQUcsRUFBRyxHQUNqQ1YsR0FBVVUsR0FBWSxFQUFHLEVBQUcsSUFBTSxHQUNsQ1QsR0FBWVMsR0FBWSxJQUFNLEVBQUcsSUFBTSxHQ0p2Q1csR0FBaUJ2QixHQUNaOXZFLE1BQU0yTyxRQUFRbWhFLElBQTRCLGlCQUFaQSxFQUFLLEdDQ3hDd0IsR0FBZ0I3QixHQUFZem9FLEdBQU1BLEdBQUssR0FBTXlvRSxFQUFPLEVBQUl6b0UsR0FBSyxHQUFLLEVBQUl5b0UsRUFBTyxHQUFLLEVBQUl6b0UsS0FBTyxFQ0E3RnVxRSxHQUFpQjlCLEdBQVl6b0UsR0FBTSxFQUFJeW9FLEVBQU8sRUFBSXpvRSxHQ0NsRGtwRSxHQUFVbHBFLEdBQU0sRUFBSXVTLEtBQUtpNEQsSUFBSWo0RCxLQUFLazRELEtBQUt6cUUsSUFDdkNtcEUsR0FBVW9CLEdBQWNyQixJQUN4QndCLEdBQVlKLEdBQWFuQixJQ0R6QkUsR0FBVUssR0FBWSxJQUFNLEtBQU0sSUFBTSxLQUN4Q04sR0FBU21CLEdBQWNsQixJQUN2QnNCLEdBQVlMLEdBQWFsQixJQ0V6QndCLEdBQWUsQ0FDakIvQixPQUFRbEosR0FDUm9KLE9BQU0sR0FDTkUsVUFBUyxHQUNURCxRQUFPLEdBQ1BFLE9BQU0sR0FDTndCLFVBQVMsR0FDVHZCLFFBQU8sR0FDUEMsT0FBTSxHQUNOdUIsVUFBUyxHQUNUdEIsUUFBTyxHQUNQd0IsV0NqQmdCN3FFLElBQU9BLEdBQUssR0FBSyxFQUFJLEdBQU1vcEUsR0FBT3BwRSxHQUFLLElBQU8sRUFBSXVTLEtBQUt1NEQsSUFBSSxHQUFJLElBQU05cUUsRUFBSSxNRG1CdkYrcUUsR0FBOEJqNEIsSUFDaEMsR0FBSTk1QyxNQUFNMk8sUUFBUW1yQyxHQUFhLENBRTNCLEdBQWdDLElBQXRCQSxFQUFXaDZDLE9BQWMsMkRBQ25DLE1BQU9reUUsRUFBSUMsRUFBSUMsRUFBSUMsR0FBTXI0QixFQUN6QixPQUFPNDJCLEdBQVlzQixFQUFJQyxFQUFJQyxFQUFJQyxFQUNuQyxDQUNLLE1BQTBCLGlCQUFmcjRCLEdBRVosUUFBdUN4MkMsSUFBN0JzdUUsR0FBYTkzQixHQUEyQix3QkFBd0JBLE1BQ25FODNCLEdBQWE5M0IsSUFFakJBLENBQVUsRUUzQmZzNEIsR0FBZ0IsQ0FBQ3J0RSxFQUFNc3RFLElBQWNscUUsR0FDaENpakQsUUFBU29SLEdBQVNyMEQsSUFBTW8wRCxHQUFpQjl5RCxLQUFLdEIsSUFBTUEsRUFBRTQwQyxXQUFXaDRDLElBQ25Fc3RFLEdBQVl0c0UsT0FBT2QsVUFBVThDLGVBQWU3SCxLQUFLaUksRUFBR2txRSxJQUV2REMsR0FBYSxDQUFDQyxFQUFPQyxFQUFPQyxJQUFXdHFFLElBQ3pDLElBQUtxMEQsR0FBU3IwRCxHQUNWLE9BQU9BLEVBQ1gsTUFBT2xCLEVBQUdDLEVBQUdDLEVBQUc4MEQsR0FBUzl6RCxFQUFFdUQsTUFBTTJ3RCxJQUNqQyxNQUFPLENBQ0gsQ0FBQ2tXLEdBQVF2VyxXQUFXLzBELEdBQ3BCLENBQUN1ckUsR0FBUXhXLFdBQVc5MEQsR0FDcEIsQ0FBQ3VyRSxHQUFRelcsV0FBVzcwRCxHQUNwQjgwRCxXQUFpQjM0RCxJQUFWMjRELEVBQXNCRCxXQUFXQyxHQUFTLEVBQ3BELEVDYkN5VyxHQUFVLElBQ1Rqc0QsR0FDSG8xQyxVQUFZMXpELEdBQU1vUixLQUFLNmlELE1BSE4sQ0FBQ2owRCxHQUFNMnpELEdBQU0sRUFBRyxJQUFLM3pELEdBR1R3cUUsQ0FBYXhxRSxLQUV4Q3lxRSxHQUFPLENBQ1RucEUsS0FBTTJvRSxHQUFjLE1BQU8sT0FDM0JwdkIsTUFBT3N2QixHQUFXLE1BQU8sUUFBUyxRQUNsQ3pXLFVBQVcsRUFBR2dYLE1BQUtDLFFBQU9DLE9BQU05VyxNQUFPK1csRUFBVSxLQUFRLFFBQ3JETixHQUFRN1csVUFBVWdYLEdBQ2xCLEtBQ0FILEdBQVE3VyxVQUFVaVgsR0FDbEIsS0FDQUosR0FBUTdXLFVBQVVrWCxHQUNsQixLQUNBNVcsR0FBU0YsR0FBTUosVUFBVW1YLElBQ3pCLEtDWUZDLEdBQU0sQ0FDUnhwRSxLQUFNMm9FLEdBQWMsS0FDcEJwdkIsTUFoQ0osU0FBa0I3NkMsR0FDZCxJQUFJMHZCLEVBQUksR0FDSnZ2QixFQUFJLEdBQ0pwQixFQUFJLEdBQ0pELEVBQUksR0FtQlIsT0FqQklrQixFQUFFckksT0FBUyxHQUNYKzNCLEVBQUkxdkIsRUFBRXdMLFVBQVUsRUFBRyxHQUNuQnJMLEVBQUlILEVBQUV3TCxVQUFVLEVBQUcsR0FDbkJ6TSxFQUFJaUIsRUFBRXdMLFVBQVUsRUFBRyxHQUNuQjFNLEVBQUlrQixFQUFFd0wsVUFBVSxFQUFHLEtBSW5Ca2tCLEVBQUkxdkIsRUFBRXdMLFVBQVUsRUFBRyxHQUNuQnJMLEVBQUlILEVBQUV3TCxVQUFVLEVBQUcsR0FDbkJ6TSxFQUFJaUIsRUFBRXdMLFVBQVUsRUFBRyxHQUNuQjFNLEVBQUlrQixFQUFFd0wsVUFBVSxFQUFHLEdBQ25Ca2tCLEdBQUtBLEVBQ0x2dkIsR0FBS0EsRUFDTHBCLEdBQUtBLEVBQ0xELEdBQUtBLEdBRUYsQ0FDSDRyRSxJQUFLSyxTQUFTcjdDLEVBQUcsSUFDakJpN0MsTUFBT0ksU0FBUzVxRSxFQUFHLElBQ25CeXFFLEtBQU1HLFNBQVNoc0UsRUFBRyxJQUNsQiswRCxNQUFPaDFELEVBQUlpc0UsU0FBU2pzRSxFQUFHLElBQU0sSUFBTSxFQUUzQyxFQUlJNDBELFVBQVcrVyxHQUFLL1csV0MvQmRzWCxHQUFPLENBQ1QxcEUsS0FBTTJvRSxHQUFjLE1BQU8sT0FDM0JwdkIsTUFBT3N2QixHQUFXLE1BQU8sYUFBYyxhQUN2Q3pXLFVBQVcsRUFBR3VYLE1BQUtDLGFBQVlDLFlBQVdyWCxNQUFPK1csRUFBVSxLQUMvQyxRQUNKejVELEtBQUs2aUQsTUFBTWdYLEdBQ1gsS0FDQXhXLEdBQVFmLFVBQVVNLEdBQVNrWCxJQUMzQixLQUNBelcsR0FBUWYsVUFBVU0sR0FBU21YLElBQzNCLEtBQ0FuWCxHQUFTRixHQUFNSixVQUFVbVgsSUFDekIsS0NaTjVzRCxHQUFRLENBQ1YzYyxLQUFPdEIsR0FBTXlxRSxHQUFLbnBFLEtBQUt0QixJQUFNOHFFLEdBQUl4cEUsS0FBS3RCLElBQU1nckUsR0FBSzFwRSxLQUFLdEIsR0FDdEQ2NkMsTUFBUTc2QyxHQUNBeXFFLEdBQUtucEUsS0FBS3RCLEdBQ0h5cUUsR0FBSzV2QixNQUFNNzZDLEdBRWJnckUsR0FBSzFwRSxLQUFLdEIsR0FDUmdyRSxHQUFLbndCLE1BQU03NkMsR0FHWDhxRSxHQUFJandCLE1BQU03NkMsR0FHekIwekQsVUFBWTF6RCxHQUNEcTBELEdBQVNyMEQsR0FDVkEsRUFDQUEsRUFBRUosZUFBZSxPQUNiNnFFLEdBQUsvVyxVQUFVMXpELEdBQ2ZnckUsR0FBS3RYLFVBQVUxekQsSUNGM0JpOUQsR0FBTSxDQUFDN2tCLEVBQU16RixFQUFJeTRCLEtBQWNBLEVBQVdoekIsRUFBT2d6QixFQUFXejRCLEVBQUt5RixFQ3BCdkUsU0FBU2l6QixHQUFTeHNFLEVBQUc0d0IsRUFBRzFKLEdBS3BCLE9BSklBLEVBQUksSUFDSkEsR0FBSyxHQUNMQSxFQUFJLElBQ0pBLEdBQUssR0FDTEEsRUFBSSxFQUFJLEVBQ0RsbkIsRUFBYyxHQUFUNHdCLEVBQUk1d0IsR0FBU2tuQixFQUN6QkEsRUFBSSxHQUNHMEosRUFDUDFKLEVBQUksRUFBSSxFQUNEbG5CLEdBQUs0d0IsRUFBSTV3QixJQUFNLEVBQUksRUFBSWtuQixHQUFLLEVBQ2hDbG5CLENBQ1gsQ0NIQSxNQUFNeXNFLEdBQWlCLENBQUNsekIsRUFBTXpGLEVBQUkzeUMsS0FDOUIsTUFBTXVyRSxFQUFXbnpCLEVBQU9BLEVBQ3hCLE9BQU9obkMsS0FBS282RCxLQUFLcDZELEtBQUt3aUQsSUFBSSxFQUFHNXpELEdBQUsyeUMsRUFBS0EsRUFBSzQ0QixHQUFZQSxHQUFVLEVBRWhFRSxHQUFhLENBQUNYLEdBQUtMLEdBQU1PLElBRS9CLFNBQVNVLEdBQU96dEQsR0FDWixNQUFNcmhCLEdBRllvRCxFQUVRaWUsRUFGRnd0RCxHQUFXRSxNQUFNL3VFLEdBQVNBLEVBQUswRSxLQUFLdEIsTUFBM0MsSUFBQ0EsRUFHbEIsR0FBVWlqRCxRQUFRcm1ELEdBQU8sSUFBSXFoQix5RUFDN0IsSUFBSTJ0RCxFQUFRaHZFLEVBQUtpK0MsTUFBTTU4QixHQUt2QixPQUpJcmhCLElBQVNvdUUsS0FFVFksRURSUixVQUFvQixJQUFFWCxFQUFHLFdBQUVDLEVBQVUsVUFBRUMsRUFBUyxNQUFFclgsSUFDOUNtWCxHQUFPLElBRVBFLEdBQWEsSUFDYixJQUFJVCxFQUFNLEVBQ05DLEVBQVEsRUFDUkMsRUFBTyxFQUNYLEdBTEFNLEdBQWMsSUFRVCxDQUNELE1BQU16N0MsRUFBSTA3QyxFQUFZLEdBQ2hCQSxHQUFhLEVBQUlELEdBQ2pCQyxFQUFZRCxFQUFhQyxFQUFZRCxFQUNyQ3JzRSxFQUFJLEVBQUlzc0UsRUFBWTE3QyxFQUMxQmk3QyxFQUFNVyxHQUFTeHNFLEVBQUc0d0IsRUFBR3c3QyxFQUFNLEVBQUksR0FDL0JOLEVBQVFVLEdBQVN4c0UsRUFBRzR3QixFQUFHdzdDLEdBQ3ZCTCxFQUFPUyxHQUFTeHNFLEVBQUc0d0IsRUFBR3c3QyxFQUFNLEVBQUksRUFDcEMsTUFWSVAsRUFBTUMsRUFBUUMsRUFBT08sRUFXekIsTUFBTyxDQUNIVCxJQUFLdDVELEtBQUs2aUQsTUFBWSxJQUFOeVcsR0FDaEJDLE1BQU92NUQsS0FBSzZpRCxNQUFjLElBQVIwVyxHQUNsQkMsS0FBTXg1RCxLQUFLNmlELE1BQWEsSUFBUDJXLEdBQ2pCOVcsUUFFUixDQ2pCZ0IrWCxDQUFXRCxJQUVoQkEsQ0FDWCxDQUNBLE1BQU1FLEdBQVcsQ0FBQzF6QixFQUFNekYsS0FDcEIsTUFBTW81QixFQUFXTCxHQUFPdHpCLEdBQ2xCNHpCLEVBQVNOLEdBQU8vNEIsR0FDaEJzNUIsRUFBVSxJQUFLRixHQUNyQixPQUFRL3JFLElBQ0ppc0UsRUFBUXZCLElBQU1ZLEdBQWVTLEVBQVNyQixJQUFLc0IsRUFBT3RCLElBQUsxcUUsR0FDdkRpc0UsRUFBUXRCLE1BQVFXLEdBQWVTLEVBQVNwQixNQUFPcUIsRUFBT3JCLE1BQU8zcUUsR0FDN0Rpc0UsRUFBUXJCLEtBQU9VLEdBQWVTLEVBQVNuQixLQUFNb0IsRUFBT3BCLEtBQU01cUUsR0FDMURpc0UsRUFBUW5ZLE1BQVFtSixHQUFJOE8sRUFBU2pZLE1BQU9rWSxFQUFPbFksTUFBTzl6RCxHQUMzQ3lxRSxHQUFLL1csVUFBVXVZLEdBQ3pCLEVDdEJDQyxHQUFrQixDQUNwQkMsTTVFWnFCLGdGNEVhckJDLFNBQVUsT0FDVjlZLE1BQU8sT0FDUHpZLE1BQU8yakIsSUFFTDZOLEdBQWlCLENBQ25CRixNQUFPaFksR0FDUGlZLFNBQVUsU0FDVjlZLE1BQU8sT0FDUHpZLE1BQU81OEIsR0FBTTQ4QixPQUVYeXhCLEdBQWtCLENBQ3BCSCxNQUFPalksR0FDUGtZLFNBQVUsVUFDVjlZLE1BQU8sT0FDUHpZLE1BQU92OEIsR0FBT3U4QixPQUVsQixTQUFTMHhCLEdBQVNoSyxHQUFNLE1BQUU0SixFQUFLLFNBQUVDLEVBQVEsTUFBRTlZLEVBQUssTUFBRXpZLElBQzlDLE1BQU0xRyxFQUFVb3VCLEVBQUtpSyxVQUFVanBFLE1BQU00b0UsR0FDaENoNEIsSUFFTG91QixFQUFLLE1BQVE2SixHQUFZajRCLEVBQVF4OEMsT0FDakM0cUUsRUFBS2lLLFVBQVlqSyxFQUFLaUssVUFBVTN6RSxRQUFRc3pFLEVBQU83WSxHQUMvQ2lQLEVBQUszRyxPQUFPM2hFLFFBQVFrNkMsRUFBUTM1QyxJQUFJcWdELElBQ3BDLENBQ0EsU0FBUzR4QixHQUFvQnR6RSxHQUN6QixNQUFNdXpFLEVBQWdCdnpFLEVBQU1vQixXQUN0QmdvRSxFQUFPLENBQ1RwcEUsTUFBT3V6RSxFQUNQRixVQUFXRSxFQUNYOVEsT0FBUSxHQUNSK1EsUUFBUyxFQUNUQyxVQUFXLEVBQ1hDLFdBQVksR0FNaEIsT0FKSXRLLEVBQUtwcEUsTUFBTVAsU0FBUyxXQUNwQjJ6RSxHQUFTaEssRUFBTTJKLElBQ25CSyxHQUFTaEssRUFBTThKLElBQ2ZFLEdBQVNoSyxFQUFNK0osSUFDUi9KLENBQ1gsQ0FDQSxTQUFTdUssR0FBa0I5c0UsR0FDdkIsT0FBT3lzRSxHQUFvQnpzRSxHQUFHNDdELE1BQ2xDLENBQ0EsU0FBU21SLEdBQWtCeGdFLEdBQ3ZCLE1BQU0sT0FBRXF2RCxFQUFNLFVBQUVnUixFQUFTLFFBQUVELEVBQU8sVUFBRUgsR0FBY0MsR0FBb0JsZ0UsR0FDaEV5Z0UsRUFBWXBSLEVBQU9qa0UsT0FDekIsT0FBUXFJLElBQ0osSUFBSWl0RSxFQUFTVCxFQUNiLElBQUssSUFBSTN4RSxFQUFJLEVBQUdBLEVBQUlteUUsRUFBV255RSxJQUV2Qm95RSxFQURBcHlFLEVBQUk4eEUsRUFDS00sRUFBT3AwRSxRQUFRcXpFLEdBQWdCNVksTUFBT3R6RCxFQUFFbkYsSUFFNUNBLEVBQUk4eEUsRUFBVUMsRUFDVkssRUFBT3AwRSxRQUFRd3pFLEdBQWUvWSxNQUFPcjFDLEdBQU15MUMsVUFBVTF6RCxFQUFFbkYsS0FHdkRveUUsRUFBT3AwRSxRQUFReXpFLEdBQWdCaFosTUFBT1UsR0FBU2gwRCxFQUFFbkYsS0FHbEUsT0FBT295RSxDQUFNLENBRXJCLENBQ0EsTUFBTUMsR0FBd0JsdEUsR0FBbUIsaUJBQU5BLEVBQWlCLEVBQUlBLEVBTTFEbXRFLEdBQVUsQ0FDWjdyRSxLQS9FSixTQUFjdEIsR0FDVixJQUFJODVELEVBQUlzVCxFQUNSLE9BQVFoc0UsTUFBTXBCLElBQ1ZxMEQsR0FBU3IwRCxNQUN3QixRQUE5Qjg1RCxFQUFLOTVELEVBQUV1RCxNQUFNMndELFdBQWdDLElBQVA0RixPQUFnQixFQUFTQSxFQUFHbmlFLFNBQVcsS0FDM0MsUUFBOUJ5MUUsRUFBS3B0RSxFQUFFdUQsTUFBTTR3RCxXQUFnQyxJQUFQaVosT0FBZ0IsRUFBU0EsRUFBR3oxRSxTQUFXLEdBQ2hGLENBQ1osRUF5RUlrakQsTUFBT2l5QixHQUNQQyxxQkFDQU0sa0JBVEosU0FBMkJydEUsR0FDdkIsTUFBTXN0RSxFQUFTUixHQUFrQjlzRSxHQUVqQyxPQURvQitzRSxHQUFrQi9zRSxFQUMvQnV0RSxDQUFZRCxFQUFPOXlFLElBQUkweUUsSUFDbEMsR0M1RU1NLEdBQWUsQ0FBQ2x0QixFQUFRem1ELElBQVlnRixHQUFNLEdBQUdBLEVBQUksRUFBSWhGLEVBQVN5bUQsSUFDcEUsU0FBU210QixHQUFTbnRCLEVBQVF6bUQsR0FDdEIsTUFBc0IsaUJBQVh5bUQsRUFDQ3RnRCxHQUFNaTlELEdBQUkzYyxFQUFRem1ELEVBQVFtRyxHQUU3QmllLEdBQU0zYyxLQUFLZy9DLEdBQ1R3ckIsR0FBU3hyQixFQUFRem1ELEdBR2pCeW1ELEVBQU8xTCxXQUFXLFFBQ25CNDRCLEdBQWFsdEIsRUFBUXptRCxHQUNyQjZ6RSxHQUFXcHRCLEVBQVF6bUQsRUFFakMsQ0FDQSxNQUFNOHpFLEdBQVcsQ0FBQ3YxQixFQUFNekYsS0FDcEIsTUFBTXM2QixFQUFTLElBQUk3MEIsR0FDYjQwQixFQUFZQyxFQUFPdDFFLE9BQ25CaTJFLEVBQWF4MUIsRUFBSzU5QyxLQUFJLENBQUNxekUsRUFBVWh6RSxJQUFNNHlFLEdBQVNJLEVBQVVsN0IsRUFBRzkzQyxNQUNuRSxPQUFRbUYsSUFDSixJQUFLLElBQUluRixFQUFJLEVBQUdBLEVBQUlteUUsRUFBV255RSxJQUMzQm95RSxFQUFPcHlFLEdBQUsreUUsRUFBVy95RSxHQUFHbUYsR0FFOUIsT0FBT2l0RSxDQUFNLENBQ2hCLEVBRUNhLEdBQVksQ0FBQ3h0QixFQUFRem1ELEtBQ3ZCLE1BQU1vekUsRUFBUyxJQUFLM3NCLEtBQVd6bUQsR0FDekIrekUsRUFBYSxDQUFDLEVBQ3BCLElBQUssTUFBTTEwRSxLQUFPK3pFLE9BQ005eEUsSUFBaEJtbEQsRUFBT3BuRCxTQUFzQ2lDLElBQWhCdEIsRUFBT1gsS0FDcEMwMEUsRUFBVzEwRSxHQUFPdTBFLEdBQVNudEIsRUFBT3BuRCxHQUFNVyxFQUFPWCxLQUd2RCxPQUFROEcsSUFDSixJQUFLLE1BQU05RyxLQUFPMDBFLEVBQ2RYLEVBQU8vekUsR0FBTzAwRSxFQUFXMTBFLEdBQUs4RyxHQUVsQyxPQUFPaXRFLENBQU0sQ0FDaEIsRUFFQ1MsR0FBYSxDQUFDcHRCLEVBQVF6bUQsS0FDeEIsTUFBTWswRSxFQUFXWixHQUFRSixrQkFBa0JsekUsR0FDckNtMEUsRUFBY3ZCLEdBQW9CbnNCLEdBQ2xDMnRCLEVBQWN4QixHQUFvQjV5RSxHQUl4QyxPQUh1Qm0wRSxFQUFZckIsVUFBWXNCLEVBQVl0QixTQUN2RHFCLEVBQVlwQixZQUFjcUIsRUFBWXJCLFdBQ3RDb0IsRUFBWW5CLFlBQWNvQixFQUFZcEIsV0FFL0JwTCxHQUFLa00sR0FBU0ssRUFBWXBTLE9BQVFxUyxFQUFZclMsUUFBU21TLElBRzlELElBQVEsRUFBTSxtQkFBbUJ6dEIsV0FBZ0J6bUQsNktBQzFDMnpFLEdBQWFsdEIsRUFBUXptRCxHQUNoQyxFQ2hERXV4RSxHQUFXLENBQUNoekIsRUFBTXpGLEVBQUl4NUMsS0FDeEIsTUFBTSswRSxFQUFtQnY3QixFQUFLeUYsRUFDOUIsT0FBNEIsSUFBckI4MUIsRUFBeUIsR0FBSy8wRSxFQUFRaS9DLEdBQVE4MUIsQ0FBZ0IsRUNKbkVDLEdBQVksQ0FBQy8xQixFQUFNekYsSUFBUTl6QyxHQUFNbytELEdBQUk3a0IsRUFBTXpGLEVBQUk5ekMsR0FpRHJELFNBQVN1dkUsR0FBWWxpRSxFQUFPK2dFLEdBQVV0WixNQUFPMGEsR0FBVSxFQUFJLEtBQUUxRyxFQUFJLE1BQUUyRyxHQUFVLENBQUMsR0FDMUUsTUFBTUMsRUFBY3JpRSxFQUFNdlUsT0FNMUIsR0FMQSxHQUFVNDJFLElBQWdCdEIsRUFBT3QxRSxPQUFRLHdEQUtyQixJQUFoQjQyRSxFQUNBLE1BQU8sSUFBTXRCLEVBQU8sR0FFcEIvZ0UsRUFBTSxHQUFLQSxFQUFNcWlFLEVBQWMsS0FDL0JyaUUsRUFBUSxJQUFJQSxHQUFPc2lFLFVBQ25CdkIsRUFBUyxJQUFJQSxHQUFRdUIsV0FFekIsTUFBTUMsRUEvQ1YsU0FBc0J4QixFQUFRdEYsRUFBTStHLEdBQ2hDLE1BQU1ELEVBQVMsR0FDVEUsRUFBZUQsSUFoQkosaUJBRE8xdUUsRUFpQitCaXRFLEVBQU8sSUFmbkRrQixHQUVXLGlCQUFObnVFLEVBQ0xpZSxHQUFNM2MsS0FBS3RCLEdBQUs4ckUsR0FBVzRCLEdBRTdCNzFFLE1BQU0yTyxRQUFReEcsR0FDWjJ0RSxHQUVXLGlCQUFOM3RFLEVBQ0w4dEUsR0FFSkssSUFiWCxJQUE0Qm51RSxFQWtCeEIsTUFBTTR1RSxFQUFZM0IsRUFBT3QxRSxPQUFTLEVBQ2xDLElBQUssSUFBSWtELEVBQUksRUFBR0EsRUFBSSt6RSxFQUFXL3pFLElBQUssQ0FDaEMsSUFBSXl6RSxFQUFRSyxFQUFhMUIsRUFBT3B5RSxHQUFJb3lFLEVBQU9weUUsRUFBSSxJQUMvQyxHQUFJOHNFLEVBQU0sQ0FDTixNQUFNa0gsRUFBaUJoM0UsTUFBTTJPLFFBQVFtaEUsR0FBUUEsRUFBSzlzRSxJQUFNMmpFLEdBQU9tSixFQUMvRDJHLEVBQVE3TSxHQUFLb04sRUFBZ0JQLEVBQ2pDLENBQ0FHLEVBQU94MEUsS0FBS3EwRSxFQUNoQixDQUNBLE9BQU9HLENBQ1gsQ0FrQ21CSyxDQUFhN0IsRUFBUXRGLEVBQU0yRyxHQUNwQ00sRUFBWUgsRUFBTzkyRSxPQUNuQm8zRSxFQUFnQi91RSxJQUNsQixJQUFJbkYsRUFBSSxFQUNSLEdBQUkrekUsRUFBWSxFQUNaLEtBQU8vekUsRUFBSXFSLEVBQU12VSxPQUFTLEtBQ2xCcUksRUFBSWtNLEVBQU1yUixFQUFJLElBRE9BLEtBS2pDLE1BQU1tMEUsRUFBa0I1RCxHQUFTbC9ELEVBQU1yUixHQUFJcVIsRUFBTXJSLEVBQUksR0FBSW1GLEdBQ3pELE9BQU95dUUsRUFBTzV6RSxHQUFHbTBFLEVBQWdCLEVBRXJDLE9BQU9YLEVBQ0FydUUsR0FBTSt1RSxFQUFhcGIsR0FBTXpuRCxFQUFNLEdBQUlBLEVBQU1xaUUsRUFBYyxHQUFJdnVFLElBQzVEK3VFLENBQ1YsQ0NsRkEsU0FBU0UsR0FBY3JULEVBQVEwTCxHQUMzQixPQUFPMUwsRUFBT3BoRSxLQUFJLElBQU04c0UsR0FBVVEsS0FBV3ZoQyxPQUFPLEVBQUdxMUIsRUFBT2prRSxPQUFTLEVBQzNFLENBQ0EsU0FBU3UzRSxJQUFVLFNBQUVDLEVBQVcsSUFBS0QsVUFBV0UsRUFBYyxNQUFFQyxFQUFLLEtBQUUxSCxFQUFPLGNBSzFFLE1BQU0ySCxFQUFrQnBHLEdBQWN2QixHQUNoQ0EsRUFBS250RSxJQUFJb3ZFLElBQ1RBLEdBQTJCakMsR0FLM0JqdkUsRUFBUSxDQUNWMjVCLE1BQU0sRUFDTmw1QixNQUFPaTJFLEVBQWUsSUFLcEJHLEVDN0JWLFNBQThCMXVELEVBQVFzdUQsR0FDbEMsT0FBT3R1RCxFQUFPcm1CLEtBQUtvM0MsR0FBTUEsRUFBSXU5QixHQUNqQyxDRDJCMEJLLENBR3RCSCxHQUFTQSxFQUFNMTNFLFNBQVd5M0UsRUFBZXozRSxPQUNuQzAzRSxFRS9CVixTQUF1QkksR0FDbkIsTUFBTTV1RCxFQUFTLENBQUMsR0FFaEIsT0NGSixTQUFvQkEsRUFBUTZ1RCxHQUN4QixNQUFNMXRELEVBQU1uQixFQUFPQSxFQUFPbHBCLE9BQVMsR0FDbkMsSUFBSyxJQUFJa0QsRUFBSSxFQUFHQSxHQUFLNjBFLEVBQVc3MEUsSUFBSyxDQUNqQyxNQUFNODBFLEVBQWlCdkUsR0FBUyxFQUFHc0UsRUFBVzcwRSxHQUM5Q2dtQixFQUFPNW1CLEtBQUtnakUsR0FBSWo3QyxFQUFLLEVBQUcydEQsR0FDNUIsQ0FDSixDRExJQyxDQUFXL3VELEVBQVE0dUQsRUFBSTkzRSxPQUFTLEdBQ3pCa3BCLENBQ1gsQ0Y0QlVndkQsQ0FBY1QsR0FBaUJELEdBQy9CVyxFQUFvQjFCLEdBQVltQixFQUFlSCxFQUFnQixDQUNqRXpILEtBQU05dkUsTUFBTTJPLFFBQVE4b0UsR0FDZEEsRUFDQUwsR0FBY0csRUFBZ0JFLEtBRXhDLE1BQU8sQ0FDSFMsbUJBQW9CWixFQUNwQnBoRCxLQUFPaEksSUFDSHJ0QixFQUFNUyxNQUFRMjJFLEVBQWtCL3BELEdBQ2hDcnRCLEVBQU0yNUIsS0FBT3RNLEdBQUtvcEQsRUFDWHoyRSxHQUduQixDSTFDQSxTQUFTczNFLEdBQWtCakosRUFBVWtKLEdBQ2pDLE9BQU9BLEVBQWdCbEosR0FBWSxJQUFPa0osR0FBaUIsQ0FDL0QsQ0NOQSxNQUFNQyxHQUF5QixFQUMvQixTQUFTQyxHQUFzQkMsRUFBY3JxRCxFQUFHdlcsR0FDNUMsTUFBTTZnRSxFQUFRai9ELEtBQUt3aUQsSUFBSTd0QyxFQUFJbXFELEdBQXdCLEdBQ25ELE9BQU9GLEdBQWtCeGdFLEVBQVU0Z0UsRUFBYUMsR0FBUXRxRCxFQUFJc3FELEVBQ2hFLENDRkEsTUFBTUMsR0FBVSxLQUNWQyxHQUFjLElBQ2RDLEdBQWMsR0FDZEMsR0FBYSxJQUNiQyxHQUFhLEVBb0VuQixNQUFNQyxHQUFpQixHQVF2QixTQUFTQyxHQUFnQkMsRUFBY0MsR0FDbkMsT0FBT0QsRUFBZXovRCxLQUFLbzZELEtBQUssRUFBSXNGLEVBQWVBLEVBQ3ZELENDbEZBLE1BQU1DLEdBQWUsQ0FBQyxXQUFZLFVBQzVCQyxHQUFjLENBQUMsWUFBYSxVQUFXLFFBQzdDLFNBQVNDLEdBQWF2cUUsRUFBU25JLEdBQzNCLE9BQU9BLEVBQUsyM0MsTUFBTWg5QyxRQUF5QmlDLElBQWpCdUwsRUFBUXhOLElBQ3RDLENBd0JBLFNBQVNnNEUsSUFBTyxVQUFFaEMsRUFBUyxVQUFFaUMsRUFBUyxVQUFFQyxLQUFjMXFFLElBQ2xELE1BQU00NUMsRUFBUzR1QixFQUFVLEdBQ25CcjFFLEVBQVNxMUUsRUFBVUEsRUFBVXYzRSxPQUFTLEdBS3RDZSxFQUFRLENBQUUyNUIsTUFBTSxFQUFPbDVCLE1BQU9tbkQsSUFDOUIsVUFBRSt3QixFQUFTLFFBQUVDLEVBQU8sS0FBRUMsRUFBSSxTQUFFeEssRUFBUSxTQUFFb0ksRUFBUSx1QkFBRXFDLEdBL0IxRCxTQUEwQjlxRSxHQUN0QixJQUFJK3FFLEVBQWdCLENBQ2hCMUssU0FBVSxFQUNWc0ssVUFBVyxJQUNYQyxRQUFTLEdBQ1RDLEtBQU0sRUFDTkMsd0JBQXdCLEtBQ3JCOXFFLEdBR1AsSUFBS3VxRSxHQUFhdnFFLEVBQVNzcUUsS0FDdkJDLEdBQWF2cUUsRUFBU3FxRSxJQUFlLENBQ3JDLE1BQU1XLEVEWmQsVUFBb0IsU0FBRXZDLEVBQVcsSUFBRyxPQUFFd0MsRUFBUyxJQUFJLFNBQUU1SyxFQUFXLEVBQUMsS0FBRXdLLEVBQU8sSUFDdEUsSUFBSUssRUFDQUMsRUFDSixHQUFRMUMsR0FBWWxJLEdBQXNCdUosSUFBYyw4Q0FDeEQsSUFBSU0sRUFBZSxFQUFJYSxFQUl2QmIsRUFBZW5kLEdBQU04YyxHQUFZQyxHQUFZSSxHQUM3QzNCLEVBQVd4YixHQUFNNGMsR0FBYUMsR0FBYXJKLEdBQXNCZ0ksSUFDN0QyQixFQUFlLEdBSWZjLEVBQVlmLElBQ1IsTUFBTWlCLEVBQW1CakIsRUFBZUMsRUFDbEMxd0IsRUFBUTB4QixFQUFtQjNDLEVBQzNCcndFLEVBQUlnekUsRUFBbUIvSyxFQUN2QmhvRSxFQUFJNnhFLEdBQWdCQyxFQUFjQyxHQUNsQzl4RSxFQUFJb1MsS0FBSzJnRSxLQUFLM3hCLEdBQ3BCLE9BQU9rd0IsR0FBV3h4RSxFQUFJQyxFQUFLQyxDQUFDLEVBRWhDNnlFLEVBQWNoQixJQUNWLE1BQ016d0IsRUFEbUJ5d0IsRUFBZUMsRUFDUDNCLEVBQzNCbHZFLEVBQUltZ0QsRUFBUTJtQixFQUFXQSxFQUN2Qmh1RSxFQUFJcVksS0FBS3U0RCxJQUFJbUgsRUFBYyxHQUFLMS9ELEtBQUt1NEQsSUFBSWtILEVBQWMsR0FBSzFCLEVBQzVEanZFLEVBQUlrUixLQUFLMmdFLEtBQUszeEIsR0FDZGpnRCxFQUFJeXdFLEdBQWdCeC9ELEtBQUt1NEQsSUFBSWtILEVBQWMsR0FBSUMsR0FFckQsUUFEZ0JjLEVBQVNmLEdBQWdCUCxHQUFVLEdBQUssRUFBSSxLQUN6Q3J3RSxFQUFJbEgsR0FBS21ILEdBQU1DLENBQUMsSUFPdkN5eEUsRUFBWWYsR0FDRXovRCxLQUFLMmdFLEtBQUtsQixFQUFlMUIsS0FDeEIwQixFQUFlOUosR0FBWW9JLEVBQVcsR0FDekNtQixHQUVadUIsRUFBY2hCLEdBQ0F6L0QsS0FBSzJnRSxLQUFLbEIsRUFBZTFCLElBQ0lBLEVBQVdBLEdBQXZDcEksRUFBVzhKLEtBSTlCLE1BQ01BLEVBbUJWLFNBQXlCZSxFQUFVQyxFQUFZRyxHQUMzQyxJQUFJNTVFLEVBQVM0NUUsRUFDYixJQUFLLElBQUluM0UsRUFBSSxFQUFHQSxFQUFJODFFLEdBQWdCOTFFLElBQ2hDekMsR0FBa0J3NUUsRUFBU3g1RSxHQUFVeTVFLEVBQVd6NUUsR0FFcEQsT0FBT0EsQ0FDWCxDQXpCeUI2NUUsQ0FBZ0JMLEVBQVVDLEVBRDFCLEVBQUkxQyxHQUd6QixHQURBQSxFQUFXbEksR0FBc0JrSSxHQUM3Qi90RSxNQUFNeXZFLEdBQ04sTUFBTyxDQUNIUSxVQUFXLElBQ1hDLFFBQVMsR0FDVG5DLFlBR0gsQ0FDRCxNQUFNa0MsRUFBWWpnRSxLQUFLdTRELElBQUlrSCxFQUFjLEdBQUtVLEVBQzlDLE1BQU8sQ0FDSEYsWUFDQUMsUUFBd0IsRUFBZlIsRUFBbUIxL0QsS0FBS282RCxLQUFLK0YsRUFBT0YsR0FDN0NsQyxXQUVSLENBQ0osQ0N0RHdCK0MsQ0FBV3hyRSxHQUMzQitxRSxFQUFnQixJQUNUQSxLQUNBQyxFQUNIM0ssU0FBVSxFQUNWd0ssS0FBTSxHQUVWRSxFQUFjRCx3QkFBeUIsQ0FDM0MsQ0FDQSxPQUFPQyxDQUNYLENBU3NGVSxDQUFpQnpyRSxHQUM3RjByRSxFQUFrQnJMLEdBQVlJLEdBQXNCSixHQUFZLEVBQ2hFK0osRUFBZVEsR0FBVyxFQUFJbGdFLEtBQUtvNkQsS0FBSzZGLEVBQVlFLElBQ3BEYyxFQUFleDRFLEVBQVN5bUQsRUFDeEJneUIsRUFBc0JuTCxHQUFzQi8xRCxLQUFLbzZELEtBQUs2RixFQUFZRSxJQVFsRWdCLEVBQWtCbmhFLEtBQUs0M0QsSUFBSXFKLEdBQWdCLEVBR2pELElBQUlHLEVBQ0osR0FIQXBCLElBQWNBLEVBQVltQixFQUFrQixJQUFPLEdBQ25EcEIsSUFBY0EsRUFBWW9CLEVBQWtCLEtBQVEsSUFFaER6QixFQUFlLEVBQUcsQ0FDbEIsTUFBTTJCLEVBQWM3QixHQUFnQjBCLEVBQXFCeEIsR0FFekQwQixFQUFpQnpzRCxJQUNiLE1BQU02ckQsRUFBV3hnRSxLQUFLMmdFLEtBQUtqQixFQUFld0IsRUFBc0J2c0QsR0FDaEUsT0FBUWxzQixFQUNKKzNFLElBQ09RLEVBQ0N0QixFQUFld0IsRUFBc0JELEdBQ3JDSSxFQUNBcmhFLEtBQUtpNEQsSUFBSW9KLEVBQWMxc0QsR0FDdkJzc0QsRUFBZWpoRSxLQUFLc2hFLElBQUlELEVBQWMxc0QsR0FBSSxDQUU5RCxNQUNLLEdBQXFCLElBQWpCK3FELEVBRUwwQixFQUFpQnpzRCxHQUFNbHNCLEVBQ25CdVgsS0FBSzJnRSxLQUFLTyxFQUFzQnZzRCxJQUMzQnNzRCxHQUNJRCxFQUFrQkUsRUFBc0JELEdBQWdCdHNELE9BRXBFLENBRUQsTUFBTTRzRCxFQUFvQkwsRUFBc0JsaEUsS0FBS282RCxLQUFLc0YsRUFBZUEsRUFBZSxHQUN4RjBCLEVBQWlCenNELElBQ2IsTUFBTTZyRCxFQUFXeGdFLEtBQUsyZ0UsS0FBS2pCLEVBQWV3QixFQUFzQnZzRCxHQUUxRDZzRCxFQUFXeGhFLEtBQUs0USxJQUFJMndELEVBQW9CNXNELEVBQUcsS0FDakQsT0FBUWxzQixFQUNIKzNFLElBQ0tRLEVBQ0V0QixFQUFld0IsRUFBc0JELEdBQ3JDamhFLEtBQUt5aEUsS0FBS0QsR0FDVkQsRUFDSU4sRUFDQWpoRSxLQUFLMGhFLEtBQUtGLElBQ2xCRCxDQUFrQixDQUVsQyxDQUNBLE1BQU8sQ0FDSDVDLG1CQUFvQnlCLEdBQXlCckMsR0FBbUIsS0FDaEVwaEQsS0FBT2hJLElBQ0gsTUFBTXZXLEVBQVVnakUsRUFBY3pzRCxHQUM5QixHQUFLeXJELEVBcUJEOTRFLEVBQU0yNUIsS0FBT3RNLEdBQUtvcEQsTUFyQk8sQ0FDekIsSUFBSXJTLEVBQWtCc1YsRUFDWixJQUFOcnNELElBT0krMkMsRUFEQWdVLEVBQWUsRUFDR1gsR0FBc0JxQyxFQUFlenNELEVBQUd2VyxHQUd4QyxHQUcxQixNQUFNdWpFLEVBQTJCM2hFLEtBQUs0M0QsSUFBSWxNLElBQW9Cc1UsRUFDeEQ0QixFQUErQjVoRSxLQUFLNDNELElBQUludkUsRUFBUzJWLElBQVkyaEUsRUFDbkV6NEUsRUFBTTI1QixLQUNGMGdELEdBQTRCQyxDQUNwQyxDQUtBLE9BREF0NkUsRUFBTVMsTUFBUVQsRUFBTTI1QixLQUFPeDRCLEVBQVMyVixFQUM3QjlXLENBQUssRUFHeEIsQ0MzSEEsU0FBU3U2RSxJQUFRLFVBQUUvRCxFQUFTLFNBQUVuSSxFQUFXLEVBQUcsTUFBRW1NLEVBQVEsR0FBRyxhQUFFQyxFQUFlLElBQUcsY0FBRUMsRUFBZ0IsR0FBRSxnQkFBRUMsRUFBa0IsSUFBRyxhQUFFQyxFQUFZLElBQUV0eEQsRUFBRyxJQUFFNHhDLEVBQUcsVUFBRXVkLEVBQVksR0FBRyxVQUFFQyxJQUMvSixNQUFNOXdCLEVBQVM0dUIsRUFBVSxHQUNuQngyRSxFQUFRLENBQ1YyNUIsTUFBTSxFQUNObDVCLE1BQU9tbkQsR0FHTGl6QixFQUFtQnZ6RSxRQUNUN0UsSUFBUjZtQixFQUNPNHhDLE9BQ0N6NEQsSUFBUnk0RCxHQUVHeGlELEtBQUs0M0QsSUFBSWhuRCxFQUFNaGlCLEdBQUtvUixLQUFLNDNELElBQUlwVixFQUFNNXpELEdBRC9CZ2lCLEVBQzBDNHhDLEVBRXpELElBQUk0ZixFQUFZTixFQUFRbk0sRUFDeEIsTUFBTTBNLEVBQVFuekIsRUFBU2t6QixFQUNqQjM1RSxPQUEwQnNCLElBQWpCbTRFLEVBQTZCRyxFQUFRSCxFQUFhRyxHQUs3RDU1RSxJQUFXNDVFLElBQ1hELEVBQVkzNUUsRUFBU3ltRCxHQUN6QixNQUFNb3pCLEVBQWEzdEQsSUFBT3l0RCxFQUFZcGlFLEtBQUsyZ0UsS0FBS2hzRCxFQUFJb3RELEdBQzlDUSxFQUFjNXRELEdBQU1sc0IsRUFBUzY1RSxFQUFVM3RELEdBQ3ZDNnRELEVBQWlCN3RELElBQ25CLE1BQU1xNkIsRUFBUXN6QixFQUFVM3RELEdBQ2xCMjBDLEVBQVNpWixFQUFXNXRELEdBQzFCcnRCLEVBQU0yNUIsS0FBT2poQixLQUFLNDNELElBQUk1b0IsSUFBVSt3QixFQUNoQ3o0RSxFQUFNUyxNQUFRVCxFQUFNMjVCLEtBQU94NEIsRUFBUzZnRSxDQUFNLEVBUTlDLElBQUltWixFQUNBQyxFQUNKLE1BQU1DLEVBQXNCaHVELElBakNOLElBQUMvbEIsSUFrQ0F0SCxFQUFNUyxZQWxDU2dDLElBQVI2bUIsR0FBcUJoaUIsRUFBSWdpQixRQUFpQjdtQixJQUFSeTRELEdBQXFCNXpELEVBQUk0ekQsS0FvQ3JGaWdCLEVBQXNCOXRELEVBQ3RCK3RELEVBQVc1QyxHQUFPLENBQ2RoQyxVQUFXLENBQUN4MkUsRUFBTVMsTUFBT282RSxFQUFnQjc2RSxFQUFNUyxRQUMvQzR0RSxTQUFVb0osR0FBc0J3RCxFQUFZNXRELEVBQUdydEIsRUFBTVMsT0FDckRtNEUsUUFBUzhCLEVBQ1QvQixVQUFXZ0MsRUFDWGxDLFlBQ0FDLGNBQ0YsRUFHTixPQURBMkMsRUFBbUIsR0FDWixDQUNIaEUsbUJBQW9CLEtBQ3BCaGlELEtBQU9oSSxJQU9ILElBQUlpdUQsR0FBa0IsRUFVdEIsT0FUS0YsUUFBb0MzNEUsSUFBeEIwNEUsSUFDYkcsR0FBa0IsRUFDbEJKLEVBQWM3dEQsR0FDZGd1RCxFQUFtQmh1RCxTQU1LNXFCLElBQXhCMDRFLEdBQXFDOXRELEVBQUk4dEQsRUFDbENDLEVBQVMvbEQsS0FBS2hJLEVBQUk4dEQsS0FHeEJHLEdBQW1CSixFQUFjN3RELEdBQzNCcnRCLEVBQ1gsRUFHWixDQ2xGQSxNQUFNdTdFLEdBQW1CeGtDLElBQ3JCLE1BQU15a0MsRUFBZ0IsRUFBRzFVLGVBQWdCL3ZCLEVBQU8rdkIsR0FDaEQsTUFBTyxDQUNINTlDLE1BQU8sSUFBTSxHQUFNNnRCLE9BQU95a0MsR0FBZSxHQUN6Q0MsS0FBTSxJQUFNbFYsR0FBWWlWLEdBS3hCeDhELElBQUssSUFBTXduRCxHQUFVTyxhQUFlUCxHQUFVTSxVQUFZcnlCLFlBQVl6MUIsTUFDekUsRUNSQzA4RCxHQUF1QixJQUM3QixTQUFTQyxHQUFzQkMsR0FDM0IsSUFBSW5GLEVBQVcsRUFFWHoyRSxFQUFRNDdFLEVBQVV2bUQsS0FBS29oRCxHQUMzQixNQUFRejJFLEVBQU0yNUIsTUFBUTg4QyxFQUFXaUYsSUFDN0JqRixHQUhhLEdBSWJ6MkUsRUFBUTQ3RSxFQUFVdm1ELEtBQUtvaEQsR0FFM0IsT0FBT0EsR0FBWWlGLEdBQXVCeHlDLElBQVd1dEMsQ0FDekQsQ0NMQSxNQUFNb0YsR0FBUSxDQUNWQyxNQUFPdkIsR0FDUEEsUUFBTyxHQUNQd0IsTUFBT3ZGLEdBQ1BBLFVBQVdBLEdBQ1hnQyxPQUFNLElBU1YsU0FBU3dELElBQWEsU0FBRUMsR0FBVyxFQUFJLE1BQUVubUMsRUFBUSxFQUFDLE9BQUVvbUMsRUFBU1gsR0FBaUIvRSxVQUFXMkYsRUFBVyxLQUFFajRFLEVBQU8sWUFBVyxPQUFFNmUsRUFBUyxFQUFDLFlBQUVxNUQsRUFBYyxFQUFDLFdBQUVDLEVBQWEsT0FBTSxPQUFFQyxFQUFNLE9BQUVDLEVBQU0sV0FBRUMsRUFBVSxTQUFFQyxLQUFhenVFLElBQ2pOLElBRUkwdUUsRUFDQUMsRUFIQUMsRUFBUSxFQUNSQyxHQUFhLEVBT2pCLE1BQU1DLEVBQXdCLEtBQzFCSCxFQUF5QixJQUFJcnRELFNBQVNHLElBQ2xDaXRELEVBQXlCanRELENBQU8sR0FDbEMsRUFJTixJQUFJc3RELEVBREpELElBRUEsTUFBTUUsRUFBbUJuQixHQUFNMzNFLElBQVNzeUUsR0FNeEMsSUFBSXlHLEVBQ0FELElBQXFCeEcsSUFDSyxpQkFBbkIyRixFQUFZLEtBQ25CYyxFQUF3QnZILEdBQVksQ0FBQyxFQUFHLEtBQU15RyxFQUFhLENBQ3ZEbGhCLE9BQU8sSUFFWGtoQixFQUFjLENBQUMsRUFBRyxNQUV0QixNQUFNUCxFQUFZb0IsRUFBaUIsSUFBS2h2RSxFQUFTd29FLFVBQVcyRixJQUM1RCxJQUFJZSxFQUNlLFdBQWZiLElBQ0FhLEVBQW9CRixFQUFpQixJQUM5Qmh2RSxFQUNId29FLFVBQVcsSUFBSTJGLEdBQWFyRyxVQUM1QnpILFdBQVlyZ0UsRUFBUXFnRSxVQUFZLE1BR3hDLElBQUk4TyxFQUFZLE9BQ1pDLEVBQVcsS0FDWHpvQyxFQUFZLEtBQ1owb0MsRUFBYSxLQVNvQixPQUFqQ3pCLEVBQVV2RSxvQkFBK0J0MEQsSUFDekM2NEQsRUFBVXZFLG1CQUFxQnNFLEdBQXNCQyxJQUV6RCxNQUFNLG1CQUFFdkUsR0FBdUJ1RSxFQUMvQixJQUFJMEIsRUFBbUJwMEMsSUFDbkJxMEMsRUFBZ0JyMEMsSUFDTyxPQUF2Qm11QyxJQUNBaUcsRUFBbUJqRyxFQUFxQitFLEVBQ3hDbUIsRUFBZ0JELEdBQW9CdjZELEVBQVMsR0FBS3E1RCxHQUV0RCxJQUFJb0IsRUFBYyxFQUNsQixNQUFNQyxFQUFRM1csSUFDVixHQUFrQixPQUFkbnlCLEVBQ0EsT0FPQWlvQyxFQUFRLElBQ1Jqb0MsRUFBWWo4QixLQUFLNFEsSUFBSXFyQixFQUFXbXlCLElBQ2hDOFYsRUFBUSxJQUNSam9DLEVBQVlqOEIsS0FBSzRRLElBQUl3OUMsRUFBWXlXLEVBQWdCWCxFQUFPam9DLElBRXhENm9DLEVBRGEsT0FBYkosRUFDY0EsRUFNQTFrRSxLQUFLNmlELE1BQU11TCxFQUFZbnlCLEdBQWFpb0MsRUFHdEQsTUFBTWMsRUFBbUJGLEVBQWMxbkMsR0FBUzhtQyxHQUFTLEVBQUksR0FBSyxHQUM1RGUsRUFBaUJmLEdBQVMsRUFBSWMsRUFBbUIsRUFBSUEsRUFBbUJILEVBQzlFQyxFQUFjOWtFLEtBQUt3aUQsSUFBSXdpQixFQUFrQixHQUt2QixhQUFkUCxHQUF5QyxPQUFiQyxJQUM1QkksRUFBY0QsR0FFbEIsSUFBSUssRUFBVUosRUFDVkssRUFBaUJqQyxFQUNyQixHQUFJNzRELEVBQVEsQ0FNUixNQUFNMnZELEVBQVc4SyxFQUFjRixFQUsvQixJQUFJUSxFQUFtQnBsRSxLQUFLKzhCLE1BQU1pOUIsR0FLOUJxTCxFQUFvQnJMLEVBQVcsR0FLOUJxTCxHQUFxQnJMLEdBQVksSUFDbENxTCxFQUFvQixHQUVGLElBQXRCQSxHQUEyQkQsSUFDM0JBLEVBQW1CcGxFLEtBQUs0USxJQUFJdzBELEVBQWtCLzZELEVBQVMsR0FJdkQsTUFBTWk3RCxFQUFpQnp6QixRQUFRdXpCLEVBQW1CLEdBQzlDRSxJQUNtQixZQUFmM0IsR0FDQTBCLEVBQW9CLEVBQUlBLEVBQ3BCM0IsSUFDQTJCLEdBQXFCM0IsRUFBY2tCLElBR25CLFdBQWZqQixJQUNMd0IsRUFBaUJYLElBR3pCLElBQUkvMkUsRUFBSTgwRCxHQUFNLEVBQUcsRUFBRzhpQixHQUNoQlAsRUFBY0QsSUFDZHAzRSxFQUFtQixZQUFmazJFLEdBQTRCMkIsRUFBaUIsRUFBSSxHQUV6REosRUFBVXozRSxFQUFJbTNFLENBQ2xCLENBTUEsTUFBTXQ5RSxFQUFRMjlFLEVBQ1IsQ0FBRWhrRCxNQUFNLEVBQU9sNUIsTUFBTzA3RSxFQUFZLElBQ2xDMEIsRUFBZXhvRCxLQUFLdW9ELEdBQ3RCWCxJQUNBajlFLEVBQU1TLE1BQVF3OEUsRUFBc0JqOUUsRUFBTVMsUUFFOUMsSUFBSSxLQUFFazVCLEdBQVMzNUIsRUFDVjI5RSxHQUF5QyxPQUF2QnRHLElBQ25CMTlDLEVBQU9pakQsR0FBUyxFQUFJWSxHQUFlRCxFQUFnQkMsR0FBZSxHQUV0RSxNQUFNUyxFQUFtQyxPQUFiYixJQUNULGFBQWRELEdBQTJDLFlBQWRBLEdBQTJCeGpELEdBTzdELE9BTkk4aUQsR0FDQUEsRUFBU3o4RSxFQUFNUyxPQUVmdzlFLEdBQ0FDLElBRUdsK0UsQ0FBSyxFQUVWbStFLEVBQXNCLEtBQ3hCcEIsR0FBbUJBLEVBQWdCdEIsT0FDbkNzQixPQUFrQnQ2RSxDQUFTLEVBRXpCNmpFLEVBQVMsS0FDWDZXLEVBQVksT0FDWmdCLElBQ0F6QixJQUNBSSxJQUNBbm9DLEVBQVkwb0MsRUFBYSxJQUFJLEVBRTNCYSxFQUFTLEtBQ1hmLEVBQVksV0FDWlgsR0FBY0EsSUFDZDJCLElBQ0F6QixHQUF3QixFQUV0QjBCLEVBQU8sS0FDVCxHQUFJdkIsRUFDQSxPQUNDRSxJQUNEQSxFQUFrQmIsRUFBT3VCLElBQzdCLE1BQU16K0QsRUFBTSs5RCxFQUFnQi85RCxNQUM1QnM5RCxHQUFVQSxJQUNPLE9BQWJjLEVBQ0F6b0MsRUFBWTMxQixFQUFNbytELEVBRVp6b0MsR0FBMkIsYUFBZHdvQyxJQUNuQnhvQyxFQUFZMzFCLEdBRUUsYUFBZG0rRCxHQUNBTCxJQUVKTyxFQUFhMW9DLEVBQ2J5b0MsRUFBVyxLQUtYRCxFQUFZLFVBQ1pKLEVBQWdCN3pELE9BQU8sRUFFdkIreUQsR0FDQW1DLElBRUosTUFBTUMsRUFBVyxDQUNiM3VELEtBQUksQ0FBQ0QsRUFBUzZ1RCxJQUNIM0IsRUFBdUJqdEQsS0FBS0QsRUFBUzZ1RCxHQUVoRCxRQUFJcDRELEdBQ0EsT0FBT3VvRCxHQUFzQitPLEVBQ2pDLEVBQ0EsUUFBSXQzRCxDQUFLcTRELEdBQ0xBLEVBQVVoUSxHQUFzQmdRLEdBQ2hDZixFQUFjZSxFQUNHLE9BQWJuQixHQUFzQkwsR0FBNkIsSUFBVkgsRUFJekNqb0MsRUFBWW9vQyxFQUFnQi85RCxNQUFRdS9ELEVBQVUzQixFQUg5Q1EsRUFBV21CLENBS25CLEVBQ0EsWUFBSTlILEdBQ0EsTUFBTUEsRUFBNEMsT0FBakNtRixFQUFVdkUsbUJBQ3JCc0UsR0FBc0JDLEdBQ3RCQSxFQUFVdkUsbUJBQ2hCLE9BQU81SSxHQUFzQmdJLEVBQ2pDLEVBQ0EsU0FBSW1HLEdBQ0EsT0FBT0EsQ0FDWCxFQUNBLFNBQUlBLENBQU00QixHQUNGQSxJQUFhNUIsR0FBVUcsSUFFM0JILEVBQVE0QixFQUNSSCxFQUFTbjRELEtBQU91b0QsR0FBc0IrTyxHQUMxQyxFQUNBLFNBQUl4OUUsR0FDQSxPQUFPbTlFLENBQ1gsRUFDQWlCLE9BQ0FLLE1BQU8sS0FDSHRCLEVBQVksU0FDWkMsRUFBV0ksQ0FBVyxFQUUxQi9CLEtBQU0sS0FDRm9CLEdBQWEsRUFDSyxTQUFkTSxJQUVKQSxFQUFZLE9BQ1paLEdBQVVBLElBQ1ZqVyxJQUFRLEVBRVpBLE9BQVEsS0FDZSxPQUFmK1csR0FDQUksRUFBS0osR0FDVC9XLEdBQVEsRUFFWm9ZLFNBQVUsS0FDTnZCLEVBQVksVUFBVSxFQUUxQndCLE9BQVNmLElBQ0xqcEMsRUFBWSxFQUNMOG9DLEVBQUtHLEtBR3BCLE9BQU9TLENBQ1gsQ0NuU0EsTUFBTU8sR0NUTixTQUFjbm9ELEdBQ1YsSUFBSS8yQixFQUNKLE1BQU8sVUFDWStDLElBQVgvQyxJQUNBQSxFREtxQndGLE9BQU9nQyxlQUFlN0gsS0FBSyt4QyxRQUFRaHRDLFVBQVcsWUNKaEUxRSxFQUVmLENERXNCMDBDLEdBSWhCeXFDLEdBQW9CLElBQUlyNEUsSUFBSSxDQUM5QixVQUNBLFdBQ0EsU0FDQSxZQUNBLG9CRWhCSixNQUFNczRFLEdBQW9CLENBQ3RCNTZFLEtBQU0sU0FDTnkwRSxVQUFXLElBQ1hDLFFBQVMsR0FDVEYsVUFBVyxJQVFUcUcsR0FBc0IsQ0FDeEI3NkUsS0FBTSxZQUNOdXlFLFNBQVUsSUFNUnhILEdBQU8sQ0FDVC9xRSxLQUFNLFlBQ04rcUUsS0FBTSxDQUFDLElBQU0sR0FBSyxJQUFNLEdBQ3hCd0gsU0FBVSxJQUVSdUksR0FBdUIsQ0FBQ0MsR0FBWXpJLGVBQ2xDQSxFQUFVdjNFLE9BQVMsRUFDWjgvRSxHQUVGM2tCLEdBQWV6dEMsSUFBSXN5RCxHQUNqQkEsRUFBUy9pQyxXQUFXLFNBeEJRLENBQ3ZDaDRDLEtBQU0sU0FDTnkwRSxVQUFXLElBQ1hDLFFBQW9CLElBc0JhcEMsRUFBVSxHQXRCbkIsRUFBSTk5RCxLQUFLbzZELEtBQUssS0FBTyxHQUM3QzRGLFVBQVcsSUFzQkRvRyxHQUVIN1AsR0N6QkxpUSxHQUFlLENBQUMxK0UsRUFBS0MsTUFFWCxXQUFSRCxHQUtpQixpQkFBVkMsSUFBc0J0QixNQUFNMk8sUUFBUXJOLEtBRTFCLGlCQUFWQSxJQUNOZzBFLEdBQVE3ckUsS0FBS25JLElBQW9CLE1BQVZBLEdBQ3ZCQSxFQUFNeTdDLFdBQVcsVUNoQnBCaWpDLEdBQWMsSUFBSTM0RSxJQUFJLENBQUMsYUFBYyxXQUFZLFdBQVksWUFDbkUsU0FBUzQ0RSxHQUFtQjkzRSxHQUN4QixNQUFPcEcsRUFBTVQsR0FBUzZHLEVBQUVoSCxNQUFNLEdBQUksR0FBRzRILE1BQU0sS0FDM0MsR0FBYSxnQkFBVGhILEVBQ0EsT0FBT29HLEVBQ1gsTUFBT3NlLEdBQVVubEIsRUFBTW9LLE1BQU0yd0QsS0FBZSxHQUM1QyxJQUFLNTFDLEVBQ0QsT0FBT3RlLEVBQ1gsTUFBTXUwRCxFQUFPcDdELEVBQU1OLFFBQVF5bEIsRUFBUSxJQUNuQyxJQUFJMVksRUFBZWl5RSxHQUFZeHlELElBQUl6ckIsR0FBUSxFQUFJLEVBRy9DLE9BRkkwa0IsSUFBV25sQixJQUNYeU0sR0FBZ0IsS0FDYmhNLEVBQU8sSUFBTWdNLEVBQWUydUQsRUFBTyxHQUM5QyxDQUNBLE1BQU13akIsR0FBZ0Isb0JBQ2hCNWhDLEdBQVMsSUFDUmczQixHQUNIRSxrQkFBb0JydEUsSUFDaEIsTUFBTWc0RSxFQUFZaDRFLEVBQUV1RCxNQUFNdzBFLElBQzFCLE9BQU9DLEVBQVlBLEVBQVV4OUUsSUFBSXM5RSxJQUFvQmw5RSxLQUFLLEtBQU9vRixDQUFDLEdDbEJwRWk0RSxHQUFvQixJQUNuQnBqQixHQUVINTJDLE1BQUssR0FDTHcvQixnQkFBaUJ4L0IsR0FDakJpNkQsYUFBY2o2RCxHQUNkazZELEtBQU1sNkQsR0FDTm02RCxPQUFRbjZELEdBRVJvNkQsWUFBYXA2RCxHQUNicTZELGVBQWdCcjZELEdBQ2hCczZELGlCQUFrQnQ2RCxHQUNsQnU2RCxrQkFBbUJ2NkQsR0FDbkJ3NkQsZ0JBQWlCeDZELEdBQ2pCazRCLE9BQU0sR0FDTnVpQyxhQUFjdmlDLElBS1p3aUMsR0FBdUJ6L0UsR0FBUSsrRSxHQUFrQi8rRSxHQ3ZCdkQsU0FBUyxHQUFrQkEsRUFBS0MsR0FDNUIsSUFBSXkvRSxFQUFtQkQsR0FBb0J6L0UsR0FJM0MsT0FISTAvRSxJQUFxQnppQyxLQUNyQnlpQyxFQUFtQnpMLElBRWhCeUwsRUFBaUJ2TCxrQkFDbEJ1TCxFQUFpQnZMLGtCQUFrQmwwRSxRQUNuQ2dDLENBQ1YsQ0NUQSxNQUFNMDlFLEdBQXFCNzRFLEdBQU0sYUFBYXNCLEtBQUt0QixHQ0RuRCxTQUFTODRFLEdBQU8zL0UsR0FDWixNQUFxQixpQkFBVkEsRUFDVSxJQUFWQSxFQUVRLE9BQVZBLEVBQ1ksU0FBVkEsR0FBOEIsTUFBVkEsR0FBaUIwL0UsR0FBa0IxL0UsUUFEN0QsQ0FHVCxDQ0RBLFNBQVM0L0UsR0FBbUIxakUsRUFBWW5jLEdBQ3BDLE9BQU9tYyxFQUFXbmMsSUFBUW1jLEVBQW9CLFNBQUtBLENBQ3ZELENDQ0EsTUFBTTJqRSxHQUFxQixDQUFDQyxFQUFXOS9FLEVBQU9VLEVBQVF3YixFQUFhLENBQUMsSUFDeEQ2L0QsSUFDSixNQUFNZ0UsRUFBa0JILEdBQW1CMWpFLEVBQVk0akUsSUFBYyxDQUFDLEVBTWhFenFDLEVBQVEwcUMsRUFBZ0IxcUMsT0FBU241QixFQUFXbTVCLE9BQVMsRUFLM0QsSUFBSSxRQUFFOG5DLEVBQVUsR0FBTWpoRSxFQUN0QmloRSxHQUFvQnJQLEdBQXNCejRCLEdBQzFDLE1BQU0wZ0MsRUN0QmQsU0FBc0IvMUUsRUFBTzgvRSxFQUFXcC9FLEVBQVF3YixHQUM1QyxNQUFNOGpFLEVBQXFCdkIsR0FBYXFCLEVBQVdwL0UsR0FDbkQsSUFBSXExRSxFQUVBQSxFQURBcjNFLE1BQU0yTyxRQUFRM00sR0FDRixJQUFJQSxHQUdKLENBQUMsS0FBTUEsR0FFdkIsTUFBTXUvRSxPQUFvQ2orRSxJQUFwQmthLEVBQVcraUMsS0FBcUIvaUMsRUFBVytpQyxLQUFPai9DLEVBQU0yTCxNQUM5RSxJQUFJdTBFLEVBQ0osTUFBTUMsRUFBc0IsR0FDNUIsSUFBSyxJQUFJeitFLEVBQUksRUFBR0EsRUFBSXEwRSxFQUFVdjNFLE9BQVFrRCxJQUliLE9BQWpCcTBFLEVBQVVyMEUsS0FDVnEwRSxFQUFVcjBFLEdBQVcsSUFBTkEsRUFBVXUrRSxFQUFnQmxLLEVBQVVyMEUsRUFBSSxJQUV2RGkrRSxHQUFPNUosRUFBVXIwRSxLQUNqQnkrRSxFQUFvQnIvRSxLQUFLWSxHQUdELGlCQUFqQnEwRSxFQUFVcjBFLElBQ0EsU0FBakJxMEUsRUFBVXIwRSxJQUNPLE1BQWpCcTBFLEVBQVVyMEUsS0FDVncrRSxFQUEwQm5LLEVBQVVyMEUsSUFHNUMsR0FBSXMrRSxHQUNBRyxFQUFvQjNoRixRQUNwQjBoRixFQUNBLElBQUssSUFBSXgrRSxFQUFJLEVBQUdBLEVBQUl5K0UsRUFBb0IzaEYsT0FBUWtELElBRTVDcTBFLEVBRGNvSyxFQUFvQnorRSxJQUNmLEdBQWtCbytFLEVBQVdJLEdBR3hELE9BQU9uSyxDQUNYLENEaEIwQnFLLENBQWFwZ0YsRUFBTzgvRSxFQUFXcC9FLEVBQVFxL0UsR0FNbkRNLEVBQWlCdEssRUFBVSxHQUMzQnVLLEVBQWlCdkssRUFBVUEsRUFBVXYzRSxPQUFTLEdBQzlDK2hGLEVBQXFCOUIsR0FBYXFCLEVBQVdPLEdBQzdDTCxFQUFxQnZCLEdBQWFxQixFQUFXUSxHQUNuRCxHQUFRQyxJQUF1QlAsRUFBb0IsNkJBQTZCRixXQUFtQk8sVUFBdUJDLE9BQW9CRCwrREFBNEVBLDhCQUEyQ0MsaUNBQ3JRLElBQUkveUUsRUFBVSxDQUNWd29FLFlBQ0FuSSxTQUFVNXRFLEVBQU04NUQsY0FDaEIwVSxLQUFNLGFBQ0h1UixFQUNIMXFDLE9BQVE4bkMsRUFDUm5CLFNBQVduMUUsSUFDUDdHLEVBQU13SyxJQUFJM0QsR0FDVms1RSxFQUFnQi9ELFVBQVkrRCxFQUFnQi9ELFNBQVNuMUUsRUFBRSxFQUUzRGsxRSxXQUFZLEtBQ1JBLElBQ0FnRSxFQUFnQmhFLFlBQWNnRSxFQUFnQmhFLFlBQVksR0F3QmxFLEdEcEVSLFVBQTZCLEtBQUV5RSxFQUFNbnJDLE1BQU9vckMsRUFBTSxjQUFFQyxFQUFhLGdCQUFFQyxFQUFlLGlCQUFFQyxFQUFnQixPQUFFdCtELEVBQU0sV0FBRXM1RCxFQUFVLFlBQUVELEVBQVcsS0FBRTE4QixFQUFJLFFBQUVrK0IsS0FBWWpoRSxJQUNySixRQUFTelgsT0FBT1csS0FBSzhXLEdBQVkxZCxNQUNyQyxDQ2lEYXFpRixDQUFvQmQsS0FDckJ4eUUsRUFBVSxJQUNIQSxLQUNBZ3hFLEdBQXFCdUIsRUFBV3Z5RSxLQVF2Q0EsRUFBUXlvRSxXQUNSem9FLEVBQVF5b0UsU0FBV2xJLEdBQXNCdmdFLEVBQVF5b0UsV0FFakR6b0UsRUFBUW91RSxjQUNScHVFLEVBQVFvdUUsWUFBYzdOLEdBQXNCdmdFLEVBQVFvdUUsZUFFbkQ0RSxJQUNBUCxJQUV3QixJQUF6QkQsRUFBZ0J0OEUsS0FLaEIsT0U5RVosVUFBZ0MsVUFBRXN5RSxFQUFTLE1BQUUxZ0MsRUFBSyxTQUFFMm1DLEVBQVEsV0FBRUQsSUFDMUQsTUFBTWh3RSxFQUFXLEtBQ2Jpd0UsR0FBWUEsRUFBU2pHLEVBQVVBLEVBQVV2M0UsT0FBUyxJQUNsRHU5RSxHQUFjQSxJQVFQLENBQ0h0MkQsS0FBTSxFQUNOMDJELE1BQU8sRUFDUG5HLFNBQVUsRUFDVjJILEtBQU0sR0FDTkssTUFBTyxHQUNQaEQsS0FBTSxHQUNOL3JELEtBQU9ELElBQ0hBLElBQ09ILFFBQVFHLFdBRW5CNjJDLE9BQVEsR0FDUm9ZLFNBQVUsS0FHbEIsT0FBTzVvQyxFQUNEa21DLEdBQWEsQ0FDWHhGLFVBQVcsQ0FBQyxFQUFHLEdBQ2ZDLFNBQVUsRUFDVjNnQyxRQUNBMG1DLFdBQVlod0UsSUFFZEEsR0FDVixDRjRDbUIrMEUsQ0FFRHZ6RSxHQUtWLEdBQUl2TixFQUFNK2dGLE9BQ04vZ0YsRUFBTStnRixNQUFNMXFFLG1CQUFtQjJxRSxjQUM5QmhoRixFQUFNK2dGLE1BQU0xWCxXQUFXMlMsU0FBVSxDQUNsQyxNQUFNaUYsRVZ6RGxCLFNBQW9DamhGLEVBQU84L0UsR0FBVyxTQUFFOUQsRUFBUSxXQUFFRCxLQUFleHVFLElBTzdFLElBTitCNHdFLE9BQzNCQyxHQUFrQmx5RCxJQUFJNHpELElBQ3JCdnlFLEVBQVFvdUUsYUFDYyxXQUF2QnB1RSxFQUFRcXVFLFlBQ1ksSUFBcEJydUUsRUFBUTRxRSxTQUNTLFlBQWpCNXFFLEVBQVE5SixLQUVSLE9BQU8sRUFJWCxJQUNJdzRFLEVBQ0FDLEVBRkFFLEdBQWEsRUFPakIsTUFBTUMsRUFBd0IsS0FDMUJILEVBQXlCLElBQUlydEQsU0FBU0csSUFDbENpdEQsRUFBeUJqdEQsQ0FBTyxHQUNsQyxFQUdOcXRELElBQ0EsSUFBSSxVQUFFdEcsRUFBUyxTQUFFQyxFQUFXLElBQUcsS0FBRXhILEVBQUksTUFBRTBILEdBQVUzb0UsRUFJakQsR0FqQ2tDLEVBQUN1eUUsRUFBV3Z5RSxJQUE2QixXQUFqQkEsRUFBUTlKLE1BQ3BELG9CQUFkcThFLElBQ0MxUixHQUF1QjdnRSxFQUFRaWhFLE1BK0I1QjBTLENBQThCcEIsRUFBV3Z5RSxHQUFVLENBQ25ELE1BQU00ekUsRUFBa0I1RixHQUFhLElBQzlCaHVFLEVBQ0grVSxPQUFRLEVBQ1IreUIsTUFBTyxJQUVYLElBQUk5MUMsRUFBUSxDQUFFMjVCLE1BQU0sRUFBT2w1QixNQUFPKzFFLEVBQVUsSUFDNUMsTUFBTXFMLEVBQXdCLEdBSzlCLElBQUl4MEQsRUFBSSxFQUNSLE1BQVFydEIsRUFBTTI1QixNQUFRdE0sRUEvQ1YsS0FnRFJydEIsRUFBUTRoRixFQUFnQmpELE9BQU90eEQsR0FDL0J3MEQsRUFBc0J0Z0YsS0FBS3ZCLEVBQU1TLE9BQ2pDNHNCLEdBdkRRLEdBeURac3BELE9BQVFsMEUsRUFDUit6RSxFQUFZcUwsRUFDWnBMLEVBQVdwcEQsRUEzREMsR0E0RFo0aEQsRUFBTyxRQUNYLENBQ0EsTUFBTXhqRCxFYXJGVixTQUFzQnJCLEVBQVNtMkQsRUFBVy9KLEdBQVcsTUFBRTFnQyxFQUFRLEVBQUMsU0FBRTJnQyxFQUFRLE9BQUUxekQsRUFBUyxFQUFDLFdBQUVzNUQsRUFBYSxPQUFNLEtBQUVwTixFQUFJLE1BQUUwSCxHQUFXLENBQUMsR0FDM0gsTUFBTW1MLEVBQWtCLENBQUUsQ0FBQ3ZCLEdBQVkvSixHQUNuQ0csSUFDQW1MLEVBQWdCMzVELE9BQVN3dUQsR0FDN0IsTUFBTS9ILEVBQVNhLEdBQXdCUixHQU12QyxPQUZJOXZFLE1BQU0yTyxRQUFROGdFLEtBQ2RrVCxFQUFnQmxULE9BQVNBLEdBQ3RCeGtELEVBQVFnc0MsUUFBUTByQixFQUFpQixDQUNwQ2hzQyxRQUNBMmdDLFdBQ0E3SCxPQUFTenZFLE1BQU0yTyxRQUFROGdFLEdBQW1CLFNBQVRBLEVBQ2pDNlEsS0FBTSxPQUNOc0MsV0FBWWgvRCxFQUFTLEVBQ3JCaS9ELFVBQTBCLFlBQWYzRixFQUEyQixZQUFjLFVBRTVELENibUVzQjRGLENBQWF4aEYsRUFBTStnRixNQUFNMXFFLFFBQVN5cEUsRUFBVy9KLEVBQVcsSUFDbkV4b0UsRUFDSHlvRSxXQVNBeEgsS0FBTUEsRUFDTjBILFVBUUEzb0UsRUFBUWswRSxZQUNSejJELEVBQVVrcEIsVUFBWTZ4QixHQUFVTyxhQUMxQlAsR0FBVU0sVUFDVi8vRCxTQUFTbzdFLFNBQ0xwN0UsU0FBU283RSxTQUFTM0UsWUFDbEIvb0MsWUFBWXoxQixPQUUxQixNQUFNb2pFLEVBQWtCLElBQU0zMkQsRUFBVTY2QyxTQUNsQytiLEVBQWEsS0FDZixHQUFNdHJDLE9BQU9xckMsR0FDYjFGLElBQ0FJLEdBQXVCLEVBNkUzQixPQW5FQXJ4RCxFQUFVNjJELFNBQVcsS0FDakI3aEYsRUFBTXdLLEljaklkLFNBQTBCdXJFLEdBQVcsT0FBRXp6RCxFQUFNLFdBQUVzNUQsRUFBYSxTQUl4RCxPQUFPN0YsRUFIT3p6RCxHQUF5QixTQUFmczVELEdBQXlCdDVELEVBQVMsR0FBTSxFQUMxRCxFQUNBeXpELEVBQVV2M0UsT0FBUyxFQUU3QixDZDRIa0JzakYsQ0FBaUIvTCxFQUFXeG9FLElBQ3RDd3VFLEdBQWNBLElBQ2Q2RixHQUFZLEVBS0MsQ0FDYjN5RCxLQUFJLENBQUNELEVBQVM2dUQsSUFDSDNCLEVBQXVCanRELEtBQUtELEVBQVM2dUQsR0FFaERrRSxlQUFlTCxJQUNYMTJELEVBQVUwMkQsU0FBV0EsRUFDckIxMkQsRUFBVTYyRCxTQUFXLEtBQ2R4YyxJQUVYLFFBQUk1L0MsR0FDQSxPQUFPdW9ELEdBQXNCaGpELEVBQVUreEQsYUFBZSxFQUMxRCxFQUNBLFFBQUl0M0QsQ0FBS3E0RCxHQUNMOXlELEVBQVUreEQsWUFBY2pQLEdBQXNCZ1EsRUFDbEQsRUFDQSxTQUFJM0IsR0FDQSxPQUFPbnhELEVBQVVnM0QsWUFDckIsRUFDQSxTQUFJN0YsQ0FBTTRCLEdBQ04veUQsRUFBVWczRCxhQUFlakUsQ0FDN0IsRUFDQSxZQUFJL0gsR0FDQSxPQUFPaEksR0FBc0JnSSxFQUNqQyxFQUNBMkgsS0FBTSxLQUNFdkIsSUFFSnB4RCxFQUFVMnlELE9BSVY3WCxHQUFZNmIsR0FBZ0IsRUFFaEMzRCxNQUFPLElBQU1oekQsRUFBVWd6RCxRQUN2QmhELEtBQU0sS0FFRixHQURBb0IsR0FBYSxFQUNlLFNBQXhCcHhELEVBQVUweEQsVUFDVixPQVNKLE1BQU0sWUFBRUssR0FBZ0IveEQsRUFDeEIsR0FBSSt4RCxFQUFhLENBQ2IsTUFBTW9FLEVBQWtCNUYsR0FBYSxJQUM5Qmh1RSxFQUNIaXVFLFVBQVUsSUFFZHg3RSxFQUFNaWlGLGdCQUFnQmQsRUFBZ0JqRCxPQUFPbkIsRUFuS3pDLElBbUtvRS84RSxNQUFPbWhGLEVBQWdCakQsT0FBT25CLEdBQWEvOEUsTUFuSy9HLEdBb0tSLENBQ0E0aEYsR0FBWSxFQUVoQjNELFNBQVUsSUFBTWp6RCxFQUFVeXlELFNBQzFCNVgsT0FBUStiLEVBR2hCLENVekd5Q00sQ0FBMkJsaUYsRUFBTzgvRSxFQUFXdnlFLEdBQzFFLEdBQUkwekUsRUFDQSxPQUFPQSxDQUNmLENBSUEsT0FBTzFGLEdBQWFodUUsRUFBUSxFS2hHcEMsU0FBUzQwRSxHQUF3Qm5pRixHQUM3QixPQUFPOHBELFFBQVErUCxHQUFjNzVELElBQVVBLEVBQU1tRyxJQUNqRCxDQ0RBLE1BQU1pOEUsR0FBcUJ2N0UsR0FBTSxpQkFBaUJzQixLQUFLdEIsR0NIdkQsU0FBU3c3RSxHQUFjL0wsRUFBS2gxRSxJQUNHLElBQXZCZzFFLEVBQUlwa0UsUUFBUTVRLElBQ1pnMUUsRUFBSXgxRSxLQUFLUSxFQUNqQixDQUNBLFNBQVNnaEYsR0FBV2hNLEVBQUtoMUUsR0FDckIsTUFBTXEzQixFQUFRMjlDLEVBQUlwa0UsUUFBUTVRLEdBQ3RCcTNCLEdBQVMsR0FDVDI5QyxFQUFJbHBDLE9BQU96VSxFQUFPLEVBQzFCLENDTkEsTUFBTTRwRCxHQUNGLFdBQUE3MkUsR0FDSXRMLEtBQUtvaUYsY0FBZ0IsRUFDekIsQ0FDQSxHQUFBcjhFLENBQUkyaEUsR0FFQSxPQURBdWEsR0FBY2ppRixLQUFLb2lGLGNBQWUxYSxHQUMzQixJQUFNd2EsR0FBV2xpRixLQUFLb2lGLGNBQWUxYSxFQUNoRCxDQUNBLE1BQUEyYSxDQUFPOThFLEVBQUdDLEVBQUdDLEdBQ1QsTUFBTTY4RSxFQUFtQnRpRixLQUFLb2lGLGNBQWNoa0YsT0FDNUMsR0FBS2trRixFQUVMLEdBQXlCLElBQXJCQSxFQUlBdGlGLEtBQUtvaUYsY0FBYyxHQUFHNzhFLEVBQUdDLEVBQUdDLFFBRzVCLElBQUssSUFBSW5FLEVBQUksRUFBR0EsRUFBSWdoRixFQUFrQmhoRixJQUFLLENBS3ZDLE1BQU1vbUUsRUFBVTFuRSxLQUFLb2lGLGNBQWM5Z0YsR0FDbkNvbUUsR0FBV0EsRUFBUW5pRSxFQUFHQyxFQUFHQyxFQUM3QixDQUVSLENBQ0EsT0FBQTg4RSxHQUNJLE9BQU92aUYsS0FBS29pRixjQUFjaGtGLE1BQzlCLENBQ0EsS0FBQWtuRSxHQUNJdGxFLEtBQUtvaUYsY0FBY2hrRixPQUFTLENBQ2hDLEVDL0JKLE1BR01va0YsR0FBc0IsQ0FDeEJ2c0UsYUFBU3JVLEdBT2IsTUFBTTZnRixHQVNGLFdBQUFuM0UsQ0FBWWc1RCxFQUFNbjNELEVBQVUsQ0FBQyxHQXBCakIsSUFBQ3ZOLEVBeUJUSSxLQUFLeXRDLFFBQVUsVUFNZnp0QyxLQUFLMGlGLFVBQVksRUFNakIxaUYsS0FBSzJpRixZQUFjLEVBUW5CM2lGLEtBQUs0aUYsa0JBQW1CLEVBSXhCNWlGLEtBQUs2aUYsT0FBUyxDQUFDLEVBQ2Y3aUYsS0FBSzhpRixnQkFBa0IsQ0FBQ3I4RSxFQUFHdkMsR0FBUyxLQUNoQ2xFLEtBQUtvdEUsS0FBT3B0RSxLQUFLaVcsUUFDakJqVyxLQUFLaVcsUUFBVXhQLEVBRWYsTUFBTSxNQUFFb2dELEVBQUssVUFBRW9mLEdBQWNOLEdBQ3pCM2xFLEtBQUsyaUYsY0FBZ0IxYyxJQUNyQmptRSxLQUFLMGlGLFVBQVk3N0IsRUFDakI3bUQsS0FBSzJpRixZQUFjMWMsRUFDbkIsR0FBTThjLFdBQVcvaUYsS0FBS2dqRix3QkFHdEJoakYsS0FBS290RSxPQUFTcHRFLEtBQUtpVyxTQUFXalcsS0FBSzZpRixPQUFPSSxRQUMxQ2pqRixLQUFLNmlGLE9BQU9JLE9BQU9aLE9BQU9yaUYsS0FBS2lXLFNBRy9CalcsS0FBSzZpRixPQUFPSyxnQkFDWmxqRixLQUFLNmlGLE9BQU9LLGVBQWViLE9BQU9yaUYsS0FBSzA1RCxlQUd2Q3gxRCxHQUFVbEUsS0FBSzZpRixPQUFPTSxlQUN0Qm5qRixLQUFLNmlGLE9BQU9NLGNBQWNkLE9BQU9yaUYsS0FBS2lXLFFBQzFDLEVBVUpqVyxLQUFLZ2pGLHNCQUF3QixJQUFNLEdBQU1ELFdBQVcvaUYsS0FBS29qRixlQVV6RHBqRixLQUFLb2pGLGNBQWdCLEVBQUduZCxnQkFDaEJBLElBQWNqbUUsS0FBSzJpRixjQUNuQjNpRixLQUFLb3RFLEtBQU9wdEUsS0FBS2lXLFFBQ2JqVyxLQUFLNmlGLE9BQU9LLGdCQUNabGpGLEtBQUs2aUYsT0FBT0ssZUFBZWIsT0FBT3JpRixLQUFLMDVELGVBRS9DLEVBRUoxNUQsS0FBS3FqRixhQUFjLEVBQ25CcmpGLEtBQUtvdEUsS0FBT3B0RSxLQUFLaVcsUUFBVXF1RCxFQUMzQnRrRSxLQUFLNGlGLGtCQXJHSWhqRixFQXFHdUJJLEtBQUtpVyxTQXBHakNwTyxNQUFNeXlELFdBQVcxNkQsS0FxR3JCSSxLQUFLMmdGLE1BQVF4ekUsRUFBUXd6RSxLQUN6QixDQXlDQSxRQUFBanRCLENBQVM0dkIsR0FJTCxPQUFPdGpGLEtBQUt1akYsR0FBRyxTQUFVRCxFQUM3QixDQUNBLEVBQUFDLENBQUc5YixFQUFXN3hDLEdBQ0w1MUIsS0FBSzZpRixPQUFPcGIsS0FDYnpuRSxLQUFLNmlGLE9BQU9wYixHQUFhLElBQUkwYSxJQUVqQyxNQUFNcUIsRUFBY3hqRixLQUFLNmlGLE9BQU9wYixHQUFXMWhFLElBQUk2dkIsR0FDL0MsTUFBa0IsV0FBZDZ4QyxFQUNPLEtBQ0grYixJQUtBLEdBQU1wYyxNQUFLLEtBQ0ZwbkUsS0FBSzZpRixPQUFPSSxPQUFPVixXQUNwQnZpRixLQUFLNDZFLE1BQ1QsR0FDRixFQUdINEksQ0FDWCxDQUNBLGNBQUFDLEdBQ0ksSUFBSyxNQUFNQyxLQUFpQjFqRixLQUFLNmlGLE9BQzdCN2lGLEtBQUs2aUYsT0FBT2EsR0FBZXBlLE9BRW5DLENBTUEsTUFBQXFlLENBQU9DLEVBQWVDLEdBQ2xCN2pGLEtBQUs0akYsY0FBZ0JBLEVBQ3JCNWpGLEtBQUs2akYsa0JBQW9CQSxDQUM3QixDQWdCQSxHQUFBejVFLENBQUkzRCxFQUFHdkMsR0FBUyxHQUNQQSxHQUFXbEUsS0FBSzRqRixjQUlqQjVqRixLQUFLNGpGLGNBQWNuOUUsRUFBR3pHLEtBQUs4aUYsaUJBSDNCOWlGLEtBQUs4aUYsZ0JBQWdCcjhFLEVBQUd2QyxFQUtoQyxDQUNBLGVBQUEyOUUsQ0FBZ0J6VSxFQUFNbjNELEVBQVM0d0MsR0FDM0I3bUQsS0FBS29LLElBQUk2TCxHQUNUalcsS0FBS290RSxLQUFPQSxFQUNacHRFLEtBQUswaUYsVUFBWTc3QixDQUNyQixDQUtBLElBQUFpOUIsQ0FBS3I5RSxHQUNEekcsS0FBSzhpRixnQkFBZ0JyOEUsR0FDckJ6RyxLQUFLb3RFLEtBQU8zbUUsRUFDWnpHLEtBQUs0NkUsT0FDRDU2RSxLQUFLNmpGLG1CQUNMN2pGLEtBQUs2akYsbUJBQ2IsQ0FRQSxHQUFBdDRFLEdBSUksT0FISWkzRSxHQUFvQnZzRSxTQUNwQnVzRSxHQUFvQnZzRSxRQUFRdlYsS0FBS1YsTUFFOUJBLEtBQUtpVyxPQUNoQixDQUlBLFdBQUE4dEUsR0FDSSxPQUFPL2pGLEtBQUtvdEUsSUFDaEIsQ0FRQSxXQUFBMVQsR0FFSSxPQUFPMTVELEtBQUs0aUYsaUJBRUpuTSxHQUFrQm5jLFdBQVd0NkQsS0FBS2lXLFNBQzlCcWtELFdBQVd0NkQsS0FBS290RSxNQUFPcHRFLEtBQUswaUYsV0FDbEMsQ0FDVixDQWFBLEtBQUFyNkQsQ0FBTTI3RCxHQUVGLE9BREFoa0YsS0FBSzQ2RSxPQUNFLElBQUluc0QsU0FBU0csSUFDaEI1dUIsS0FBS3FqRixhQUFjLEVBQ25CcmpGLEtBQUs0cUIsVUFBWW81RCxFQUFlcDFELEdBQzVCNXVCLEtBQUs2aUYsT0FBT29CLGdCQUNaamtGLEtBQUs2aUYsT0FBT29CLGVBQWU1QixRQUMvQixJQUNEeHpELE1BQUssS0FDQTd1QixLQUFLNmlGLE9BQU9xQixtQkFDWmxrRixLQUFLNmlGLE9BQU9xQixrQkFBa0I3QixTQUVsQ3JpRixLQUFLbWtGLGdCQUFnQixHQUU3QixDQU1BLElBQUF2SixHQUNRNTZFLEtBQUs0cUIsWUFDTDVxQixLQUFLNHFCLFVBQVVnd0QsT0FDWDU2RSxLQUFLNmlGLE9BQU91QixpQkFDWnBrRixLQUFLNmlGLE9BQU91QixnQkFBZ0IvQixVQUdwQ3JpRixLQUFLbWtGLGdCQUNULENBTUEsV0FBQUUsR0FDSSxRQUFTcmtGLEtBQUs0cUIsU0FDbEIsQ0FDQSxjQUFBdTVELFVBQ1dua0YsS0FBSzRxQixTQUNoQixDQVVBLE9BQUFxUyxHQUNJajlCLEtBQUt5akYsaUJBQ0x6akYsS0FBSzQ2RSxPQUNENTZFLEtBQUs2akYsbUJBQ0w3akYsS0FBSzZqRixtQkFFYixFQUVKLFNBQVNTLEdBQVloZ0IsRUFBTW4zRCxHQUN2QixPQUFPLElBQUlzMUUsR0FBWW5lLEVBQU1uM0QsRUFDakMsQ0MzVUEsTUFBTW8zRSxHQUFpQjk5RSxHQUFPcEQsR0FBU0EsRUFBSzBFLEtBQUt0QixHQ0szQys5RSxHQUFzQixDQUFDei9ELEdBQVFvMkMsR0FBSUQsR0FBU0QsR0FBU0csR0FBSTlpQyxHQ0xsRCxDQUNUdndCLEtBQU90QixHQUFZLFNBQU5BLEVBQ2I2NkMsTUFBUTc2QyxHQUFNQSxJRE9aZytFLEdBQTBCaCtFLEdBQU0rOUUsR0FBb0JwUyxLQUFLbVMsR0FBYzk5RSxJRUp2RWkrRSxHQUFhLElBQUlGLEdBQXFCOS9ELEdBQU9rdkQsSUNLbkQsU0FBUytRLEdBQWVsdEIsRUFBZTkzRCxFQUFLQyxHQUNwQzYzRCxFQUFjbXRCLFNBQVNqbEYsR0FDdkI4M0QsRUFBYy9yRCxTQUFTL0wsR0FBS3lLLElBQUl4SyxHQUdoQzYzRCxFQUFjb3RCLFNBQVNsbEYsRUFBSzJrRixHQUFZMWtGLEdBRWhELENBZ0ZBLFNBQVNrbEYsR0FBd0JubEYsRUFBS21jLEdBQ2xDLEdBQUtBLEVBR0wsT0FEd0JBLEVBQVduYyxJQUFRbWMsRUFBb0IsU0FBS0EsR0FDN0MraUMsSUFDM0IsQ0M1RkEsU0FBU2ttQyxJQUFxQixjQUFFQyxFQUFhLGVBQUVDLEdBQWtCdGxGLEdBQzdELE1BQU11bEYsRUFBY0YsRUFBYzMrRSxlQUFlMUcsS0FBZ0MsSUFBeEJzbEYsRUFBZXRsRixHQUV4RSxPQURBc2xGLEVBQWV0bEYsSUFBTyxFQUNmdWxGLENBQ1gsQ0FDQSxTQUFTQyxHQUFjMXRCLEVBQWVyZixHQUFZLE1BQUVuRCxFQUFRLEVBQUMsbUJBQUVtd0MsRUFBa0IsS0FBRS9oRixHQUFTLENBQUMsR0FDekYsSUFBSSxXQUFFeVksRUFBYTI3QyxFQUFjMG1CLHVCQUFzQixjQUFFcFosS0FBa0J6a0UsR0FBV20zRCxFQUFjNHRCLHFCQUFxQmp0QyxHQUN6SCxNQUFNa3RDLEVBQWE3dEIsRUFBYy9yRCxTQUFTLGNBQ3RDMDVFLElBQ0F0cEUsRUFBYXNwRSxHQUNqQixNQUFNRyxFQUFhLEdBQ2JDLEVBQXFCbmlGLEdBQ3ZCbzBELEVBQWNVLGdCQUNkVixFQUFjVSxlQUFlc3RCLFdBQVdwaUYsR0FDNUMsSUFBSyxNQUFNMUQsS0FBT1csRUFBUSxDQUN0QixNQUFNVixFQUFRNjNELEVBQWMvckQsU0FBUy9MLEdBQy9CcWxFLEVBQWMxa0UsRUFBT1gsR0FDM0IsSUFBS0MsUUFDZWdDLElBQWhCb2pFLEdBQ0N3Z0IsR0FDR1QsR0FBcUJTLEVBQW9CN2xGLEdBQzdDLFNBRUosTUFBTWdnRixFQUFrQixDQUNwQjFxQyxRQUNBOG5DLFFBQVMsS0FDTmpoRSxHQU1QLEdBQUk3VixPQUFPaXlELDBCQUE0QnQ0RCxFQUFNeWpGLFlBQWEsQ0FDdEQsTUFBTXFDLEVBQVdqdUIsRUFBY3dSLFdBQVd3RSxJQUN0Q2lZLElBQ0EvRixFQUFnQjVDLFFBQVU5MkUsT0FBT2l5RCx3QkFBd0J3dEIsRUFBVS9sRixFQUFLQyxFQUFPLElBQy9FKy9FLEVBQWdCMEIsV0FBWSxFQUVwQyxDQUNBemhGLEVBQU15b0IsTUFBTW8zRCxHQUFtQjkvRSxFQUFLQyxFQUFPb2xFLEVBQWF2TixFQUFja3VCLG9CQUFzQnBzQixHQUFlenRDLElBQUluc0IsR0FDekcsQ0FBRTBELE1BQU0sR0FDUnM4RSxJQUNOLE1BQU0vMEQsRUFBWWhyQixFQUFNZ3JCLFVBQ3BCbTNELEdBQXdCdUQsS0FDeEJBLEVBQVd2L0UsSUFBSXBHLEdBQ2ZpckIsRUFBVWlFLE1BQUssSUFBTXkyRCxFQUFXbHZDLE9BQU96MkMsTUFFM0M0bEYsRUFBVzdrRixLQUFLa3FCLEVBQ3BCLENBTUEsT0FMSW02QyxHQUNBdDJDLFFBQVF1N0MsSUFBSXViLEdBQVkxMkQsTUFBSyxLQUN6QmsyQyxHRDNDWixTQUFtQnROLEVBQWVyZixHQUM5QixNQUFNMHNCLEVBQVd3SSxHQUFlN1YsRUFBZXJmLEdBQy9DLElBQUksY0FBRTJzQixFQUFnQixDQUFDLEVBQUMsV0FBRWpwRCxFQUFhLENBQUMsS0FBTXhiLEdBQVd3a0UsRUFBV3JOLEVBQWM0dEIscUJBQXFCdmdCLEdBQVUsR0FBUyxDQUFDLEVBQzNIeGtFLEVBQVMsSUFBS0EsS0FBV3lrRSxHQUN6QixJQUFLLE1BQU1wbEUsS0FBT1csRUFFZHFrRixHQUFlbHRCLEVBQWU5M0QsRUFEaEJpa0UsR0FBNkJ0akUsRUFBT1gsSUFHMUQsQ0NtQzZCaW1GLENBQVVudUIsRUFBZXNOLEVBQWMsSUFHekR3Z0IsQ0FDWCxDQ2pFQSxTQUFTTSxHQUFlcHVCLEVBQWVxdUIsRUFBUzM0RSxFQUFVLENBQUMsR0FDdkQsTUFBTTIzRCxFQUFXd0ksR0FBZTdWLEVBQWVxdUIsRUFBUzM0RSxFQUFRMnJELFFBQ2hFLElBQUksV0FBRWg5QyxFQUFhMjdDLEVBQWMwbUIsd0JBQTBCLENBQUMsR0FBTXJaLEdBQVksQ0FBQyxFQUMzRTMzRCxFQUFRaTRFLHFCQUNSdHBFLEVBQWEzTyxFQUFRaTRFLG9CQU16QixNQUFNVyxFQUFlamhCLEVBQ2YsSUFBTXIyQyxRQUFRdTdDLElBQUltYixHQUFjMXRCLEVBQWVxTixFQUFVMzNELElBQ3pELElBQU1zaEIsUUFBUUcsVUFLZG8zRCxFQUFxQnZ1QixFQUFjd3VCLGlCQUFtQnh1QixFQUFjd3VCLGdCQUFnQnpsRixLQUNwRixDQUFDMGxGLEVBQWUsS0FDZCxNQUFNLGNBQUU1RixFQUFnQixFQUFDLGdCQUFFQyxFQUFlLGlCQUFFQyxHQUFzQjFrRSxFQUNsRSxPQWtCWixTQUF5QjI3QyxFQUFlcXVCLEVBQVN4RixFQUFnQixFQUFHQyxFQUFrQixFQUFHQyxFQUFtQixFQUFHcnpFLEdBQzNHLE1BQU1vNEUsRUFBYSxHQUNiWSxHQUFzQjF1QixFQUFjd3VCLGdCQUFnQnpsRixLQUFPLEdBQUsrL0UsRUFDaEU2RixFQUErQyxJQUFyQjVGLEVBQzFCLENBQUNsL0UsRUFBSSxJQUFNQSxFQUFJaS9FLEVBQ2YsQ0FBQ2ovRSxFQUFJLElBQU02a0YsRUFBcUI3a0YsRUFBSWkvRSxFQVUxQyxPQVRBamlGLE1BQU11Z0QsS0FBSzRZLEVBQWN3dUIsaUJBQ3BCNXJDLEtBQUtnc0MsSUFDTC8rRSxTQUFRLENBQUN5TyxFQUFPelUsS0FDakJ5VSxFQUFNc3NFLE9BQU8saUJBQWtCeUQsR0FDL0JQLEVBQVc3a0YsS0FBS21sRixHQUFlOXZFLEVBQU8rdkUsRUFBUyxJQUN4QzM0RSxFQUNIOG5DLE1BQU9xckMsRUFBZ0I4RixFQUF3QjlrRixLQUNoRHV0QixNQUFLLElBQU05WSxFQUFNc3NFLE9BQU8sb0JBQXFCeUQsS0FBVSxJQUV2RHIzRCxRQUFRdTdDLElBQUl1YixFQUN2QixDQWxDbUJlLENBQWdCN3VCLEVBQWVxdUIsRUFBU3hGLEVBQWdCNEYsRUFBYzNGLEVBQWlCQyxFQUFrQnJ6RSxFQUFRLEVBRTFILElBQU1zaEIsUUFBUUcsV0FLZCxLQUFFd3hELEdBQVN0a0UsRUFDakIsR0FBSXNrRSxFQUFNLENBQ04sTUFBT3prQyxFQUFPOVgsR0FBaUIsbUJBQVR1OEMsRUFDaEIsQ0FBQzJGLEVBQWNDLEdBQ2YsQ0FBQ0EsRUFBb0JELEdBQzNCLE9BQU9wcUMsSUFBUTlzQixNQUFLLElBQU1nVixLQUM5QixDQUVJLE9BQU9wVixRQUFRdTdDLElBQUksQ0FBQytiLElBQWdCQyxFQUFtQjc0RSxFQUFROG5DLFFBRXZFLENBa0JBLFNBQVNveEMsR0FBZ0I5Z0YsRUFBR0MsR0FDeEIsT0FBT0QsRUFBRWdoRixpQkFBaUIvZ0YsRUFDOUIsQ0NwREEsTUFBTWdoRixHQUF1QixJQUFJcHhCLElBQXNCNmYsVUFDakR3UixHQUFvQnJ4QixHQUFxQmgzRCxPQUkvQyxTQUFTc29GLEdBQXFCanZCLEdBQzFCLElBQUlsQyxFQUpSLFNBQXFCa0MsR0FDakIsT0FBUTh0QixHQUFlOTJELFFBQVF1N0MsSUFBSXViLEVBQVd0a0YsS0FBSSxFQUFHMnBCLFlBQVd6ZCxhQ1BwRSxTQUE4QnNxRCxFQUFlcmYsRUFBWWpyQyxFQUFVLENBQUMsR0FFaEUsSUFBSXlkLEVBQ0osR0FGQTZzQyxFQUFjNHFCLE9BQU8saUJBQWtCanFDLEdBRW5DOTVDLE1BQU0yTyxRQUFRbXJDLEdBQWEsQ0FDM0IsTUFBTW10QyxFQUFhbnRDLEVBQVduM0MsS0FBSzZrRixHQUFZRCxHQUFlcHVCLEVBQWVxdUIsRUFBUzM0RSxLQUN0RnlkLEVBQVk2RCxRQUFRdTdDLElBQUl1YixFQUM1QixNQUNLLEdBQTBCLGlCQUFmbnRDLEVBQ1p4dEIsRUFBWWk3RCxHQUFlcHVCLEVBQWVyZixFQUFZanJDLE9BRXJELENBQ0QsTUFBTXc1RSxFQUEyQyxtQkFBZnZ1QyxFQUM1QmsxQixHQUFlN1YsRUFBZXJmLEVBQVlqckMsRUFBUTJyRCxRQUNsRDFnQixFQUNOeHRCLEVBQVk2RCxRQUFRdTdDLElBQUltYixHQUFjMXRCLEVBQWVrdkIsRUFBb0J4NUUsR0FDN0UsQ0FDQSxPQUFPeWQsRUFBVWlFLE1BQUssSUFBTTRvQyxFQUFjNHFCLE9BQU8sb0JBQXFCanFDLElBQzFFLENEVmtGd3VDLENBQXFCbnZCLEVBQWU3c0MsRUFBV3pkLEtBQ2pJLENBRWtCMDVFLENBQVlwdkIsR0FDMUIsTUFBTXQ0RCxFQW9TQyxDQUNIbzJELFFBQVN1eEIsSUFBZ0IsR0FDekJDLFlBQWFELEtBQ2I1ZCxXQUFZNGQsS0FDWjdtQixTQUFVNm1CLEtBQ1ZFLFVBQVdGLEtBQ1hHLFdBQVlILEtBQ1pseEIsS0FBTWt4QixNQTFTVixJQUFJSSxHQUFrQixFQUt0QixNQUFNQyxFQUEwQixDQUFDaGhCLEVBQUsvdEIsS0FDbEMsTUFBTTBzQixFQUFXd0ksR0FBZTdWLEVBQWVyZixHQUMvQyxHQUFJMHNCLEVBQVUsQ0FDVixNQUFNLFdBQUVocEQsRUFBVSxjQUFFaXBELEtBQWtCemtFLEdBQVd3a0UsRUFDakRxQixFQUFNLElBQUtBLEtBQVE3bEUsS0FBV3lrRSxFQUNsQyxDQUNBLE9BQU9vQixDQUFHLEVBbUJkLFNBQVMvTixFQUFlanJELEVBQVNpNkUsR0FDN0IsTUFBTWhuRixFQUFRcTNELEVBQWN3UixXQUN0QjMwQyxFQUFVbWpDLEVBQWM0dkIsbUJBQWtCLElBQVMsQ0FBQyxFQUtwRDlCLEVBQWEsR0FLYitCLEVBQWMsSUFBSTNoRixJQU14QixJQUFJNGhGLEVBQWtCLENBQUMsRUFLbkJDLEVBQXNCbi9DLElBTzFCLElBQUssSUFBSS9tQyxFQUFJLEVBQUdBLEVBQUltbEYsR0FBbUJubEYsSUFBSyxDQUN4QyxNQUFNK0IsRUFBT21qRixHQUFxQmxsRixHQUM1Qm1tRixFQUFZdG9GLEVBQU1rRSxHQUNsQmkxQyxPQUF1QjEyQyxJQUFoQnhCLEVBQU1pRCxHQUFzQmpELEVBQU1pRCxHQUFRaXhCLEVBQVFqeEIsR0FDekRxa0YsRUFBZ0J4eUIsR0FBZTVjLEdBSy9CcXZDLEVBQWN0a0YsSUFBUytqRixFQUFvQkssRUFBVWwrQixTQUFXLE1BQ2xELElBQWhCbytCLElBQ0FILEVBQXNCbG1GLEdBTzFCLElBQUlzbUYsRUFBY3R2QyxJQUFTaGtCLEVBQVFqeEIsSUFBU2kxQyxJQUFTbDRDLEVBQU1pRCxJQUFTcWtGLEVBZXBFLEdBWElFLEdBQ0FWLEdBQ0F6dkIsRUFBY293Qix5QkFDZEQsR0FBYyxHQU1sQkgsRUFBVXpDLGNBQWdCLElBQUt1QyxJQUk3QkUsRUFBVWwrQixVQUE0QixPQUFoQm8rQixJQUVsQnJ2QyxJQUFTbXZDLEVBQVVLLFVBRXJCM3lCLEdBQW9CN2MsSUFDSixrQkFBVEEsRUFDUCxTQU9KLE1BQU15dkMsRUFBbUJDLEdBQXVCUCxFQUFVSyxTQUFVeHZDLEdBQ3BFLElBQUkydkMsRUFBb0JGLEdBRW5CMWtGLElBQVMrakYsR0FDTkssRUFBVWwrQixXQUNUcStCLEdBQ0RGLEdBRUhwbUYsRUFBSWttRixHQUF1QkUsRUFLaEMsTUFBTVEsRUFBaUI1cEYsTUFBTTJPLFFBQVFxckMsR0FBUUEsRUFBTyxDQUFDQSxHQUtyRCxJQUFJNnZDLEVBQWlCRCxFQUFlcnJDLE9BQU9zcUMsRUFBeUIsQ0FBQyxJQUNqRCxJQUFoQlEsSUFDQVEsRUFBaUIsQ0FBQyxHQVV0QixNQUFNLG1CQUFFQyxFQUFxQixDQUFDLEdBQU1YLEVBQzlCWSxFQUFVLElBQ1RELEtBQ0FELEdBRURHLEVBQWlCM29GLElBQ25Cc29GLEdBQW9CLEVBQ3BCWCxFQUFZanRFLE9BQU8xYSxHQUNuQjhuRixFQUFVeEMsZUFBZXRsRixJQUFPLENBQUksRUFFeEMsSUFBSyxNQUFNQSxLQUFPMG9GLEVBQVMsQ0FDdkIsTUFBTTd6RCxFQUFPMnpELEVBQWV4b0YsR0FDdEJ5dEUsRUFBT2diLEVBQW1Cem9GLEdBRTVCNG5GLEVBQWdCbGhGLGVBQWUxRyxLQUsvQjYwQixJQUFTNDRDLEVBS0w1SixHQUFrQmh2QyxJQUFTZ3ZDLEdBQWtCNEosSUFDeENELEdBQWUzNEMsRUFBTTQ0QyxJQUFTMmEsRUFDL0JPLEVBQWMzb0YsR0FPZDhuRixFQUFVekMsY0FBY3JsRixJQUFPLE9BR3JCaUMsSUFBVDR5QixFQUVMOHpELEVBQWMzb0YsR0FJZDJuRixFQUFZdmhGLElBQUlwRyxRQUdOaUMsSUFBVDR5QixHQUFzQjh5RCxFQUFZeDdELElBQUluc0IsR0FLM0Myb0YsRUFBYzNvRixHQU9kOG5GLEVBQVV6QyxjQUFjcmxGLElBQU8sRUFFdkMsQ0FLQThuRixFQUFVSyxTQUFXeHZDLEVBQ3JCbXZDLEVBQVVXLG1CQUFxQkQsRUFJM0JWLEVBQVVsK0IsV0FDVmcrQixFQUFrQixJQUFLQSxLQUFvQlksSUFFM0NqQixHQUFtQnp2QixFQUFjTyx3QkFDakNpd0IsR0FBb0IsR0FPcEJBLElBQXNCTCxHQUN0QnJDLEVBQVc3a0YsUUFBUXduRixFQUFlam5GLEtBQUsycEIsSUFBYyxDQUNqREEsVUFBV0EsRUFDWHpkLFFBQVMsQ0FBRTlKLFVBQVM4SixPQUdoQyxDQU1BLEdBQUltNkUsRUFBWTltRixLQUFNLENBQ2xCLE1BQU0rbkYsRUFBb0IsQ0FBQyxFQUMzQmpCLEVBQVloZ0YsU0FBUzNILElBQ2pCLE1BQU02b0YsRUFBaUIvd0IsRUFBY2d4QixjQUFjOW9GLFFBQzVCaUMsSUFBbkI0bUYsSUFDQUQsRUFBa0I1b0YsR0FBTzZvRixFQUM3QixJQUVKakQsRUFBVzdrRixLQUFLLENBQUVrcUIsVUFBVzI5RCxHQUNqQyxDQUNBLElBQUlHLEVBQWdCaC9CLFFBQVE2N0IsRUFBV25uRixRQU92QyxPQU5JOG9GLElBQ2tCLElBQWxCOW1GLEVBQU1nM0QsVUFDTEssRUFBY293Qix5QkFDZmEsR0FBZ0IsR0FFcEJ4QixHQUFrQixFQUNYd0IsRUFBZ0JuekIsRUFBUWd3QixHQUFjOTJELFFBQVFHLFNBQ3pELENBa0JBLE1BQU8sQ0FDSHdwQyxpQkFDQStRLFVBaEJKLFNBQW1COWxFLEVBQU1rbUQsRUFBVXA4QyxHQUMvQixJQUFJb3pELEVBRUosR0FBSXBoRSxFQUFNa0UsR0FBTWttRCxXQUFhQSxFQUN6QixPQUFPOTZCLFFBQVFHLFVBRXNCLFFBQXhDMnhDLEVBQUs5SSxFQUFjd3VCLHVCQUFvQyxJQUFQMWxCLEdBQXlCQSxFQUFHajVELFNBQVN5TyxJQUFZLElBQUl3cUQsRUFBSSxPQUF1QyxRQUEvQkEsRUFBS3hxRCxFQUFNb2lELHNCQUFtQyxJQUFQb0ksT0FBZ0IsRUFBU0EsRUFBRzRJLFVBQVU5bEUsRUFBTWttRCxFQUFTLElBQzlNcHFELEVBQU1rRSxHQUFNa21ELFNBQVdBLEVBQ3ZCLE1BQU1nOEIsRUFBYW50QixFQUFlanJELEVBQVM5SixHQUMzQyxJQUFLLE1BQU0xRCxLQUFPUixFQUNkQSxFQUFNUSxHQUFLcWxGLGNBQWdCLENBQUMsRUFFaEMsT0FBT08sQ0FDWCxFQUlJb0QsbUJBNVBKLFNBQTRCQyxHQUN4QnJ6QixFQUFVcXpCLEVBQWFueEIsRUFDM0IsRUEyUElndUIsU0FBVSxJQUFNdG1GLEVBRXhCLENBQ0EsU0FBUzZvRixHQUF1QjVhLEVBQU01NEMsR0FDbEMsTUFBb0IsaUJBQVRBLEVBQ0FBLElBQVM0NEMsSUFFWDl1RSxNQUFNMk8sUUFBUXVuQixLQUNYMjRDLEdBQWUzNEMsRUFBTTQ0QyxFQUdyQyxDQUNBLFNBQVMwWixHQUFnQnY5QixHQUFXLEdBQ2hDLE1BQU8sQ0FDSEEsV0FDQXk3QixjQUFlLENBQUMsRUFDaEJDLGVBQWdCLENBQUMsRUFDakJtRCxtQkFBb0IsQ0FBQyxFQUU3QixDRS9TQSxJQUFJeG5GLEdBQUssRUNDVCxNQUFNMmtGLEdBQWEsQ0FDZjM2RCxVQUFXLENBQ1BpK0MsUUNEUixjQUErQkEsR0FNM0IsV0FBQXY5RCxDQUFZK2IsR0FDUis4QixNQUFNLzhCLEdBQ05BLEVBQUs4d0MsaUJBQW1COXdDLEVBQUs4d0MsZUFBaUJ1dUIsR0FBcUJyL0QsR0FDdkUsQ0FDQSxtQ0FBQXdoRSxHQUNJLE1BQU0sUUFBRXR6QixHQUFZdjFELEtBQUtxbkIsS0FBSzRoRCxXQUM5QmpwRSxLQUFLOHNDLFVBQ0Rxb0IsR0FBb0JJLEtBQ3BCdjFELEtBQUs4c0MsUUFBVXlvQixFQUFRdXpCLFVBQVU5b0YsS0FBS3FuQixNQUU5QyxDQUlBLEtBQUFveEMsR0FDSXo0RCxLQUFLNm9GLHFDQUNULENBQ0EsTUFBQTN5QyxHQUNJLE1BQU0sUUFBRXFmLEdBQVl2MUQsS0FBS3FuQixLQUFLNGhELFlBQ3RCMVQsUUFBU3d6QixHQUFnQi9vRixLQUFLcW5CLEtBQUs4N0MsV0FBYSxDQUFDLEVBQ3JENU4sSUFBWXd6QixHQUNaL29GLEtBQUs2b0YscUNBRWIsQ0FDQSxPQUFBLzdDLEdBQVksSUQzQlo4b0IsS0FBTSxDQUNGaVQsUURMUixjQUFtQ0EsR0FDL0IsV0FBQXY5RCxHQUNJODRDLFNBQVNqbUQsV0FDVDZCLEtBQUtZLEdBQUtBLElBQ2QsQ0FDQSxNQUFBczFDLEdBQ0ksSUFBS2wyQyxLQUFLcW5CLEtBQUt1d0MsZ0JBQ1gsT0FDSixNQUFNLFVBQUVveEIsRUFBUyxlQUFFQyxFQUFjLE9BQUVud0IsR0FBVzk0RCxLQUFLcW5CLEtBQUt1d0MsaUJBQ2hEb3hCLFVBQVdFLEdBQWtCbHBGLEtBQUtxbkIsS0FBSzhoRSxxQkFBdUIsQ0FBQyxFQUN2RSxJQUFLbnBGLEtBQUtxbkIsS0FBSzh3QyxnQkFBa0I2d0IsSUFBY0UsRUFDM0MsT0FFSixNQUFNRSxFQUFnQnBwRixLQUFLcW5CLEtBQUs4d0MsZUFBZWdSLFVBQVUsUUFBUzZmLEVBQVcsQ0FBRWx3QixPQUFRQSxRQUF1Q0EsRUFBUzk0RCxLQUFLcW5CLEtBQUs0aEQsV0FBV25RLFNBQ3hKbXdCLElBQW1CRCxHQUNuQkksRUFBY3Y2RCxNQUFLLElBQU1vNkQsRUFBZWpwRixLQUFLWSxLQUVyRCxDQUNBLEtBQUE2M0QsR0FDSSxNQUFNLFNBQUU0d0IsR0FBYXJwRixLQUFLcW5CLEtBQUt1d0MsaUJBQW1CLENBQUMsRUFDL0N5eEIsSUFDQXJwRixLQUFLOHNDLFFBQVV1OEMsRUFBU3JwRixLQUFLWSxJQUVyQyxDQUNBLE9BQUFrc0MsR0FBWSxLRzNCVjJ3QixHQUFXLENBQUNsNEQsRUFBR0MsSUFBTXFTLEtBQUs0M0QsSUFBSWxxRSxFQUFJQyxHQ1d4QyxNQUFNOGpGLEdBQ0YsV0FBQWgrRSxDQUFZcWEsRUFBTzRqRSxHQUFVLG1CQUFFNTBCLEdBQXVCLENBQUMsR0EwRG5ELEdBdERBMzBELEtBQUs0ckUsV0FBYSxLQUlsQjVyRSxLQUFLd3BGLGNBQWdCLEtBSXJCeHBGLEtBQUt5cEYsa0JBQW9CLEtBSXpCenBGLEtBQUt1cEYsU0FBVyxDQUFDLEVBQ2pCdnBGLEtBQUswcEYsWUFBYyxLQUNmLElBQU0xcEYsS0FBS3dwRixnQkFBaUJ4cEYsS0FBS3lwRixrQkFDN0IsT0FDSixNQUFNemdCLEVBQU8yZ0IsR0FBVzNwRixLQUFLeXBGLGtCQUFtQnpwRixLQUFLeW1ELFNBQy9DbWpDLEVBQW1DLE9BQXBCNXBGLEtBQUs0ckUsV0FJcEJpZSxFRHBDbEIsU0FBb0J0a0YsRUFBR0MsR0FFbkIsTUFBTXNrRixFQUFTcnNCLEdBQVNsNEQsRUFBRW1uQixFQUFHbG5CLEVBQUVrbkIsR0FDekJxOUQsRUFBU3RzQixHQUFTbDRELEVBQUU2d0IsRUFBRzV3QixFQUFFNHdCLEdBQy9CLE9BQU92ZSxLQUFLbzZELEtBQUs2WCxHQUFVLEVBQUlDLEdBQVUsRUFDN0MsQ0MrQjRDQyxDQUFXaGhCLEVBQUsxaEQsT0FBUSxDQUFFb0YsRUFBRyxFQUFHMEosRUFBRyxLQUFRLEVBQzNFLElBQUt3ekQsSUFBaUJDLEVBQ2xCLE9BQ0osTUFBTSxNQUFFL2hCLEdBQVVrQixHQUNaLFVBQUUvQyxHQUFjTixHQUN0QjNsRSxLQUFLeW1ELFFBQVEvbEQsS0FBSyxJQUFLb25FLEVBQU83QixjQUM5QixNQUFNLFFBQUVna0IsRUFBTyxPQUFFQyxHQUFXbHFGLEtBQUt1cEYsU0FDNUJLLElBQ0RLLEdBQVdBLEVBQVFqcUYsS0FBS3dwRixjQUFleGdCLEdBQ3ZDaHBFLEtBQUs0ckUsV0FBYTVyRSxLQUFLd3BGLGVBRTNCVSxHQUFVQSxFQUFPbHFGLEtBQUt3cEYsY0FBZXhnQixFQUFLLEVBRTlDaHBFLEtBQUttcUYsa0JBQW9CLENBQUN4a0UsRUFBT3FqRCxLQUM3QmhwRSxLQUFLd3BGLGNBQWdCN2pFLEVBQ3JCM2xCLEtBQUt5cEYsa0JBQW9CVyxHQUFlcGhCLEVBQU1ocEUsS0FBSzIwRCxvQkFFbkQsR0FBTXplLE9BQU9sMkMsS0FBSzBwRixhQUFhLEVBQUssRUFFeEMxcEYsS0FBS3FxRixnQkFBa0IsQ0FBQzFrRSxFQUFPcWpELEtBRTNCLEdBREFocEUsS0FBS3NvQixPQUNDdG9CLEtBQUt3cEYsZ0JBQWlCeHBGLEtBQUt5cEYsa0JBQzdCLE9BQ0osTUFBTSxNQUFFYSxFQUFLLGFBQUVDLEdBQWlCdnFGLEtBQUt1cEYsU0FDL0JpQixFQUFVYixHQUEwQixrQkFBZmhrRSxFQUFNdGlCLEtBQzNCckQsS0FBS3lwRixrQkFDTFcsR0FBZXBoQixFQUFNaHBFLEtBQUsyMEQsb0JBQXFCMzBELEtBQUt5bUQsU0FDdER6bUQsS0FBSzRyRSxZQUFjMGUsR0FDbkJBLEVBQU0za0UsRUFBTzZrRSxHQUVqQkQsR0FBZ0JBLEVBQWE1a0UsRUFBTzZrRSxFQUFRLEdBRzNDN2lCLEdBQWlCaGlELEdBQ2xCLE9BQ0ozbEIsS0FBS3VwRixTQUFXQSxFQUNoQnZwRixLQUFLMjBELG1CQUFxQkEsRUFDMUIsTUFDTTgxQixFQUFjTCxHQURQeGlCLEdBQWlCamlELEdBQ1czbEIsS0FBSzIwRCxxQkFDeEMsTUFBRW1ULEdBQVUyaUIsR0FDWixVQUFFeGtCLEdBQWNOLEdBQ3RCM2xFLEtBQUt5bUQsUUFBVSxDQUFDLElBQUtxaEIsRUFBTzdCLGNBQzVCLE1BQU0sZUFBRXlrQixHQUFtQm5CLEVBQzNCbUIsR0FDSUEsRUFBZS9rRSxFQUFPZ2tFLEdBQVdjLEVBQWF6cUYsS0FBS3ltRCxVQUN2RHptRCxLQUFLMnFGLGdCQUFrQnppQixHQUFLRixHQUFnQi9oRSxPQUFRLGNBQWVqRyxLQUFLbXFGLG1CQUFvQm5pQixHQUFnQi9oRSxPQUFRLFlBQWFqRyxLQUFLcXFGLGlCQUFrQnJpQixHQUFnQi9oRSxPQUFRLGdCQUFpQmpHLEtBQUtxcUYsaUJBQzFNLENBQ0EsY0FBQU8sQ0FBZXJCLEdBQ1h2cEYsS0FBS3VwRixTQUFXQSxDQUNwQixDQUNBLEdBQUFqaEUsR0FDSXRvQixLQUFLMnFGLGlCQUFtQjNxRixLQUFLMnFGLGtCQUM3QmpsQixHQUFZMWxFLEtBQUswcEYsWUFDckIsRUFFSixTQUFTVSxHQUFlcGhCLEVBQU1yVSxHQUMxQixPQUFPQSxFQUFxQixDQUFFbVQsTUFBT25ULEVBQW1CcVUsRUFBS2xCLFFBQVdrQixDQUM1RSxDQUNBLFNBQVM2aEIsR0FBY3RsRixFQUFHQyxHQUN0QixNQUFPLENBQUVrbkIsRUFBR25uQixFQUFFbW5CLEVBQUlsbkIsRUFBRWtuQixFQUFHMEosRUFBRzd3QixFQUFFNndCLEVBQUk1d0IsRUFBRTR3QixFQUN0QyxDQUNBLFNBQVN1ekQsSUFBVyxNQUFFN2hCLEdBQVNyaEIsR0FDM0IsTUFBTyxDQUNIcWhCLFFBQ0FqaEIsTUFBT2drQyxHQUFjL2lCLEVBQU9nakIsR0FBZ0Jya0MsSUFDNUNuL0IsT0FBUXVqRSxHQUFjL2lCLEVBQU9pakIsR0FBaUJ0a0MsSUFDOUMrbUIsU0FBVSxHQUFZL21CLEVBQVMsSUFFdkMsQ0FDQSxTQUFTc2tDLEdBQWlCdGtDLEdBQ3RCLE9BQU9BLEVBQVEsRUFDbkIsQ0FDQSxTQUFTcWtDLEdBQWdCcmtDLEdBQ3JCLE9BQU9BLEVBQVFBLEVBQVFyb0QsT0FBUyxFQUNwQyxDQUNBLFNBQVMsR0FBWXFvRCxFQUFTaThCLEdBQzFCLEdBQUlqOEIsRUFBUXJvRCxPQUFTLEVBQ2pCLE1BQU8sQ0FBRXN1QixFQUFHLEVBQUcwSixFQUFHLEdBRXRCLElBQUk5MEIsRUFBSW1sRCxFQUFRcm9ELE9BQVMsRUFDckI0c0YsRUFBbUIsS0FDdkIsTUFBTUMsRUFBWUgsR0FBZ0Jya0MsR0FDbEMsS0FBT25sRCxHQUFLLElBQ1IwcEYsRUFBbUJ2a0MsRUFBUW5sRCxLQUN2QjJwRixFQUFVaGxCLFVBQVkra0IsRUFBaUIva0IsVUFDdkN5SCxHQUFzQmdWLE1BRzFCcGhGLElBRUosSUFBSzBwRixFQUNELE1BQU8sQ0FBRXQrRCxFQUFHLEVBQUcwSixFQUFHLEdBRXRCLE1BQU0vUSxFQUFPdW9ELEdBQXNCcWQsRUFBVWhsQixVQUFZK2tCLEVBQWlCL2tCLFdBQzFFLEdBQWEsSUFBVDVnRCxFQUNBLE1BQU8sQ0FBRXFILEVBQUcsRUFBRzBKLEVBQUcsR0FFdEIsTUFBTW10QyxFQUFrQixDQUNwQjcyQyxHQUFJdStELEVBQVV2K0QsRUFBSXMrRCxFQUFpQnQrRCxHQUFLckgsRUFDeEMrUSxHQUFJNjBELEVBQVU3MEQsRUFBSTQwRCxFQUFpQjUwRCxHQUFLL1EsR0FRNUMsT0FOSWsrQyxFQUFnQjcyQyxJQUFNMmIsTUFDdEJrN0IsRUFBZ0I3MkMsRUFBSSxHQUVwQjYyQyxFQUFnQm50QyxJQUFNaVMsTUFDdEJrN0IsRUFBZ0JudEMsRUFBSSxHQUVqQm10QyxDQUNYLENDL0lBLFNBQVMybkIsR0FBV0MsR0FDaEIsT0FBT0EsRUFBSzl3QixJQUFNOHdCLEVBQUsxaUUsR0FDM0IsQ0FDQSxTQUFTMmlFLEdBQU94ckYsRUFBT1UsRUFBUyxFQUFHK3FGLEVBQWMsS0FDN0MsT0FBT3h6RSxLQUFLNDNELElBQUk3dkUsRUFBUVUsSUFBVytxRixDQUN2QyxDQUNBLFNBQVNDLEdBQWN6a0MsRUFBTzd6QyxFQUFRMVMsRUFBUXltRCxFQUFTLElBQ25ERixFQUFNRSxPQUFTQSxFQUNmRixFQUFNMGtDLFlBQWM3bkIsR0FBSTF3RCxFQUFPeVYsSUFBS3pWLEVBQU9xbkQsSUFBS3hULEVBQU1FLFFBQ3RERixFQUFNMlQsTUFBUTB3QixHQUFXNXFGLEdBQVU0cUYsR0FBV2w0RSxJQUMxQ280RSxHQUFPdmtDLEVBQU0yVCxNQUFPLEVBQUcsT0FBVzN5RCxNQUFNZy9DLEVBQU0yVCxVQUM5QzNULEVBQU0yVCxNQUFRLEdBQ2xCM1QsRUFBTTJrQyxVQUNGOW5CLEdBQUlwakUsRUFBT21vQixJQUFLbm9CLEVBQU8rNUQsSUFBS3hULEVBQU1FLFFBQVVGLEVBQU0wa0MsYUFDbERILEdBQU92a0MsRUFBTTJrQyxZQUFjM2pGLE1BQU1nL0MsRUFBTTJrQyxjQUN2QzNrQyxFQUFNMmtDLFVBQVksRUFDMUIsQ0FDQSxTQUFTQyxHQUFhNWtDLEVBQU83ekMsRUFBUTFTLEVBQVF5bUQsR0FDekN1a0MsR0FBY3prQyxFQUFNbjZCLEVBQUcxWixFQUFPMFosRUFBR3BzQixFQUFPb3NCLEVBQUdxNkIsRUFBU0EsRUFBTytXLGFBQVVsOEQsR0FDckUwcEYsR0FBY3prQyxFQUFNendCLEVBQUdwakIsRUFBT29qQixFQUFHOTFCLEVBQU84MUIsRUFBRzJ3QixFQUFTQSxFQUFPZ1gsYUFBVW44RCxFQUN6RSxDQUNBLFNBQVM4cEYsR0FBaUJwckYsRUFBUWloRCxFQUFVbVcsR0FDeENwM0QsRUFBT21vQixJQUFNaXZDLEVBQU9qdkMsSUFBTTg0QixFQUFTOTRCLElBQ25Dbm9CLEVBQU8rNUQsSUFBTS81RCxFQUFPbW9CLElBQU15aUUsR0FBVzNwQyxFQUN6QyxDQUtBLFNBQVNvcUMsR0FBeUJyckYsRUFBUTQxRCxFQUFRd0IsR0FDOUNwM0QsRUFBT21vQixJQUFNeXRDLEVBQU96dEMsSUFBTWl2QyxFQUFPanZDLElBQ2pDbm9CLEVBQU8rNUQsSUFBTS81RCxFQUFPbW9CLElBQU15aUUsR0FBV2gxQixFQUN6QyxDQUNBLFNBQVMwMUIsR0FBcUJ0ckYsRUFBUTQxRCxFQUFRd0IsR0FDMUNpMEIsR0FBeUJyckYsRUFBT29zQixFQUFHd3BDLEVBQU94cEMsRUFBR2dyQyxFQUFPaHJDLEdBQ3BEaS9ELEdBQXlCcnJGLEVBQU84MUIsRUFBRzgvQixFQUFPOS9CLEVBQUdzaEMsRUFBT3RoQyxFQUN4RCxDQ1pBLFNBQVN5MUQsR0FBNEJWLEVBQU0xaUUsRUFBSzR4QyxHQUM1QyxNQUFPLENBQ0g1eEMsU0FBYTdtQixJQUFSNm1CLEVBQW9CMGlFLEVBQUsxaUUsSUFBTUEsT0FBTTdtQixFQUMxQ3k0RCxTQUFhejRELElBQVJ5NEQsRUFDQzh3QixFQUFLOXdCLElBQU1BLEdBQU84d0IsRUFBSzl3QixJQUFNOHdCLEVBQUsxaUUsVUFDbEM3bUIsRUFFZCxDQWNBLFNBQVNrcUYsR0FBNEJDLEVBQVlDLEdBQzdDLElBQUl2akUsRUFBTXVqRSxFQUFnQnZqRSxJQUFNc2pFLEVBQVd0akUsSUFDdkM0eEMsRUFBTTJ4QixFQUFnQjN4QixJQUFNMHhCLEVBQVcxeEIsSUFPM0MsT0FKSTJ4QixFQUFnQjN4QixJQUFNMnhCLEVBQWdCdmpFLElBQ3RDc2pFLEVBQVcxeEIsSUFBTTB4QixFQUFXdGpFLE9BQzNCQSxFQUFLNHhDLEdBQU8sQ0FBQ0EsRUFBSzV4QyxJQUVoQixDQUFFQSxNQUFLNHhDLE1BQ2xCLENBdUNBLE1BQU00eEIsR0FBaUIsSUFnQnZCLFNBQVNDLEdBQW1CQyxFQUFhQyxFQUFVQyxHQUMvQyxNQUFPLENBQ0g1akUsSUFBSzZqRSxHQUFvQkgsRUFBYUMsR0FDdEMveEIsSUFBS2l5QixHQUFvQkgsRUFBYUUsR0FFOUMsQ0FDQSxTQUFTQyxHQUFvQkgsRUFBYTVyRixHQUN0QyxNQUE4QixpQkFBaEI0ckYsRUFDUkEsRUFDQUEsRUFBWTVyRixJQUFVLENBQ2hDLENDMUhBLE1BTU1nc0YsR0FBYyxLQUFNLENBQ3RCNy9ELEVBUDBCLENBQzFCOCtELFVBQVcsRUFDWGh4QixNQUFPLEVBQ1B6VCxPQUFRLEVBQ1J3a0MsWUFBYSxHQUlibjFELEVBUjBCLENBQzFCbzFELFVBQVcsRUFDWGh4QixNQUFPLEVBQ1B6VCxPQUFRLEVBQ1J3a0MsWUFBYSxLQU9YaUIsR0FBWSxLQUFNLENBQ3BCOS9ELEVBRnFCLENBQUdqRSxJQUFLLEVBQUc0eEMsSUFBSyxHQUdyQ2prQyxFQUhxQixDQUFHM04sSUFBSyxFQUFHNHhDLElBQUssS0NWekMsU0FBU295QixHQUFTNzJELEdBQ2QsTUFBTyxDQUFDQSxFQUFTLEtBQU1BLEVBQVMsS0FDcEMsQ0NHQSxTQUFTODJELElBQXdCLElBQUVoakUsRUFBRyxLQUFFRixFQUFJLE1BQUU0eUMsRUFBSyxPQUFFQyxJQUNqRCxNQUFPLENBQ0gzdkMsRUFBRyxDQUFFakUsSUFBS2UsRUFBTTZ3QyxJQUFLK0IsR0FDckJobUMsRUFBRyxDQUFFM04sSUFBS2lCLEVBQUsyd0MsSUFBS2dDLEdBRTVCLENDVkEsU0FBU3N3QixHQUFnQm55QixHQUNyQixZQUFpQjU0RCxJQUFWNDRELEdBQWlDLElBQVZBLENBQ2xDLENBQ0EsU0FBU295QixJQUFTLE1BQUVweUIsRUFBSyxPQUFFMkMsRUFBTSxPQUFFQyxJQUMvQixPQUFTdXZCLEdBQWdCbnlCLEtBQ3BCbXlCLEdBQWdCeHZCLEtBQ2hCd3ZCLEdBQWdCdnZCLEVBQ3pCLENBQ0EsU0FBU21CLEdBQWE4RCxHQUNsQixPQUFRdXFCLEdBQVN2cUIsSUFDYndxQixHQUFleHFCLElBQ2ZBLEVBQU9qN0QsR0FDUGk3RCxFQUFPdEYsUUFDUHNGLEVBQU9yRixTQUNQcUYsRUFBT3BGLE9BQ2YsQ0FDQSxTQUFTNHZCLEdBQWV4cUIsR0FDcEIsT0FBT3lxQixHQUFjenFCLEVBQU8zMUMsSUFBTW9nRSxHQUFjenFCLEVBQU9qc0MsRUFDM0QsQ0FDQSxTQUFTMDJELEdBQWNsdEYsR0FDbkIsT0FBT0EsR0FBbUIsT0FBVkEsQ0FDcEIsQ0NmQSxTQUFTbXRGLEdBQVdqbEIsRUFBT3ROLEVBQU8rd0IsR0FHOUIsT0FBT0EsRUFEUS93QixHQURZc04sRUFBUXlqQixFQUd2QyxDQUlBLFNBQVN5QixHQUFnQmxsQixFQUFPMGpCLEVBQVdoeEIsRUFBTyt3QixFQUFhMEIsR0FJM0QsWUFIaUJyckYsSUFBYnFyRixJQUNBbmxCLEVBQVFpbEIsR0FBV2psQixFQUFPbWxCLEVBQVUxQixJQUVqQ3dCLEdBQVdqbEIsRUFBT3ROLEVBQU8rd0IsR0FBZUMsQ0FDbkQsQ0FJQSxTQUFTMEIsR0FBZS9CLEVBQU1LLEVBQVksRUFBR2h4QixFQUFRLEVBQUcrd0IsRUFBYTBCLEdBQ2pFOUIsRUFBSzFpRSxJQUFNdWtFLEdBQWdCN0IsRUFBSzFpRSxJQUFLK2lFLEVBQVdoeEIsRUFBTyt3QixFQUFhMEIsR0FDcEU5QixFQUFLOXdCLElBQU0yeUIsR0FBZ0I3QixFQUFLOXdCLElBQUtteEIsRUFBV2h4QixFQUFPK3dCLEVBQWEwQixFQUN4RSxDQUlBLFNBQVNFLEdBQWNDLEdBQUssRUFBRTFnRSxFQUFDLEVBQUUwSixJQUM3QjgyRCxHQUFlRSxFQUFJMWdFLEVBQUdBLEVBQUU4K0QsVUFBVzkrRCxFQUFFOHRDLE1BQU85dEMsRUFBRTYrRCxhQUM5QzJCLEdBQWVFLEVBQUloM0QsRUFBR0EsRUFBRW8xRCxVQUFXcDFELEVBQUVva0MsTUFBT3BrQyxFQUFFbTFELFlBQ2xELENBdURBLFNBQVM4QixHQUFjN3lCLEdBQ25CLE9BQUk1RyxPQUFPMDVCLFVBQVU5eUIsSUFFZEEsRUFBUSxpQkFBbUJBLEVBQVEsY0FEL0JBLEVBQ3dELENBQ3ZFLENBQ0EsU0FBUyt5QixHQUFjcEMsRUFBTTF0QixHQUN6QjB0QixFQUFLMWlFLElBQU0waUUsRUFBSzFpRSxJQUFNZzFDLEVBQ3RCMHRCLEVBQUs5d0IsSUFBTTh3QixFQUFLOXdCLElBQU1vRCxDQUMxQixDQU1BLFNBQVMrdkIsR0FBY3JDLEVBQU1zQyxHQUFhOXRGLEVBQUsrdEYsRUFBVUMsSUFDckQsTUFBTUMsT0FBdUNoc0YsSUFBMUI2ckYsRUFBV0UsR0FBMkJGLEVBQVdFLEdBQWEsR0FDM0VwQyxFQUFjN25CLEdBQUl5bkIsRUFBSzFpRSxJQUFLMGlFLEVBQUs5d0IsSUFBS3V6QixHQUU1Q1YsR0FBZS9CLEVBQU1zQyxFQUFXOXRGLEdBQU04dEYsRUFBV0MsR0FBV25DLEVBQWFrQyxFQUFXanpCLE1BQ3hGLENBSUEsTUFBTXF6QixHQUFRLENBQUMsSUFBSyxTQUFVLFdBQ3hCQyxHQUFRLENBQUMsSUFBSyxTQUFVLFdBSTlCLFNBQVNDLEdBQWFYLEVBQUtqekIsR0FDdkJxekIsR0FBY0osRUFBSTFnRSxFQUFHeXRDLEVBQVcwekIsSUFDaENMLEdBQWNKLEVBQUloM0QsRUFBRytqQyxFQUFXMnpCLEdBQ3BDLENDcEhBLFNBQVNFLEdBQW1CdGlFLEVBQVUwK0QsR0FDbEMsT0FBT3NDLEdIZVgsU0FBNEI1a0IsRUFBT3NpQixHQUMvQixJQUFLQSxFQUNELE9BQU90aUIsRUFDWCxNQUFNbW1CLEVBQVU3RCxFQUFlLENBQUUxOUQsRUFBR283QyxFQUFNdCtDLEtBQU00TSxFQUFHMHhDLEVBQU1wK0MsTUFDbkR3a0UsRUFBYzlELEVBQWUsQ0FBRTE5RCxFQUFHbzdDLEVBQU0xTCxNQUFPaG1DLEVBQUcweEMsRUFBTXpMLFNBQzlELE1BQU8sQ0FDSDN5QyxJQUFLdWtFLEVBQVE3M0QsRUFDYjVNLEtBQU15a0UsRUFBUXZoRSxFQUNkMnZDLE9BQVE2eEIsRUFBWTkzRCxFQUNwQmdtQyxNQUFPOHhCLEVBQVl4aEUsRUFFM0IsQ0cxQm1DeWhFLENBQW1CemlFLEVBQVM0N0Msd0JBQXlCOGlCLEdBQ3hGLENDYUEsTUFBTWdFLEdBQXNCLElBQUlwdUQsUUFLaEMsTUFBTXF1RCxHQUNGLFdBQUEvaUYsQ0FBWW1zRCxHQUlSejNELEtBQUtzdUYsZUFBaUIsS0FDdEJ0dUYsS0FBS3V1RixZQUFhLEVBQ2xCdnVGLEtBQUt3dUYsaUJBQW1CLEtBQ3hCeHVGLEtBQUt1ckYsWUFBYyxDQUFFNytELEVBQUcsRUFBRzBKLEVBQUcsR0FJOUJwMkIsS0FBS3l1RixhQUFjLEVBQ25CenVGLEtBQUswdUYsdUJBQXdCLEVBSTdCMXVGLEtBQUsydUYsUUFBVW5DLEtBQ2Z4c0YsS0FBS3kzRCxjQUFnQkEsQ0FDekIsQ0FDQSxLQUFBcHZDLENBQU11bUUsR0FBYSxhQUFFQyxHQUFlLEdBQVUsQ0FBQyxHQUkzQyxNQUFNLGdCQUFFajNCLEdBQW9CNTNELEtBQUt5M0QsY0FDN0JHLElBQWlELElBQTlCQSxFQUFnQm94QixZQXdGdkNocEYsS0FBSzh1RixXQUFhLElBQUl4RixHQUFXc0YsRUFBYSxDQUMxQ2xFLGVBdkZvQi9rRSxJQUdwQjNsQixLQUFLK3VGLGdCQUNERixHQUNBN3VGLEtBQUs2dUYsYUFBYWpuQixHQUFpQmppRCxFQUFPLFFBQVFtaUQsTUFDdEQsRUFrRkFtaUIsUUFoRlksQ0FBQ3RrRSxFQUFPcWpELEtBRXBCLE1BQU0sS0FBRW5ULEVBQUksZ0JBQUVtNUIsRUFBZSxZQUFFQyxHQUFnQmp2RixLQUFLaXBFLFdBQ3BELEdBQUlwVCxJQUFTbTVCLElBQ0xodkYsS0FBS3N1RixnQkFDTHR1RixLQUFLc3VGLGlCQUNUdHVGLEtBQUtzdUYsZUFBaUI5bEIsR0FBYzNTLElBRS9CNzFELEtBQUtzdUYsZ0JBQ04sT0FFUnR1RixLQUFLdXVGLFlBQWEsRUFDbEJ2dUYsS0FBS3d1RixpQkFBbUIsS0FDeEJ4dUYsS0FBS2t2RixxQkFDRGx2RixLQUFLeTNELGNBQWNtTCxhQUNuQjVpRSxLQUFLeTNELGNBQWNtTCxXQUFXdXNCLG9CQUFxQixFQUNuRG52RixLQUFLeTNELGNBQWNtTCxXQUFXdGlFLFlBQVNzQixHQUszQzZxRixJQUFVdEIsSUFDTixJQUFJbDFFLEVBQVVqVyxLQUFLb3ZGLG1CQUFtQmpFLEdBQU01L0UsT0FBUyxFQUlyRCxHQUFJMnZELEdBQVFuekQsS0FBS2tPLEdBQVUsQ0FDdkIsTUFBTSxXQUFFMnNELEdBQWU1aUUsS0FBS3kzRCxjQUM1QixHQUFJbUwsR0FBY0EsRUFBVzFNLE9BQVEsQ0FDakMsTUFBTW01QixFQUFlenNCLEVBQVcxTSxPQUFPbzVCLFVBQVVuRSxHQUM3Q2tFLElBRUFwNUUsRUFEZWkxRSxHQUFXbUUsSUFDTi8wQixXQUFXcmtELEdBQVcsS0FFbEQsQ0FDSixDQUNBalcsS0FBS3VyRixZQUFZSixHQUFRbDFFLENBQU8sSUFHaENnNUUsR0FDQSxHQUFNLzRDLFFBQU8sSUFBTSs0QyxFQUFZdHBFLEVBQU9xakQsS0FBTyxHQUFPLEdBRXhELE1BQU0sZUFBRTdRLEdBQW1CbjRELEtBQUt5M0QsY0FDaENVLEdBQWtCQSxFQUFlZ1IsVUFBVSxhQUFhLEVBQUssRUFzQzdEK2dCLE9BcENXLENBQUN2a0UsRUFBT3FqRCxLQUVuQixNQUFNLGdCQUFFZ21CLEVBQWUsa0JBQUVPLEVBQWlCLGdCQUFFQyxFQUFlLE9BQUVDLEdBQVl6dkYsS0FBS2lwRSxXQUU5RSxJQUFLK2xCLElBQW9CaHZGLEtBQUtzdUYsZUFDMUIsT0FDSixNQUFNLE9BQUVobkUsR0FBVzBoRCxFQUVuQixHQUFJdW1CLEdBQStDLE9BQTFCdnZGLEtBQUt3dUYsaUJBTTFCLE9BTEF4dUYsS0FBS3d1RixpQkE2VXJCLFNBQTZCbG5FLEVBQVFvb0UsRUFBZ0IsSUFDakQsSUFBSXZPLEVBQVksS0FPaEIsT0FOSXRwRSxLQUFLNDNELElBQUlub0QsRUFBTzhPLEdBQUtzNUQsRUFDckJ2TyxFQUFZLElBRVB0cEUsS0FBSzQzRCxJQUFJbm9ELEVBQU9vRixHQUFLZ2pFLElBQzFCdk8sRUFBWSxLQUVUQSxDQUNYLENBdFZ3Q3dPLENBQW9Ccm9FLFFBRWQsT0FBMUJ0bkIsS0FBS3d1RixrQkFDTGdCLEdBQW1CQSxFQUFnQnh2RixLQUFLd3VGLG1CQUtoRHh1RixLQUFLNHZGLFdBQVcsSUFBSzVtQixFQUFLbEIsTUFBT3hnRCxHQUNqQ3RuQixLQUFLNHZGLFdBQVcsSUFBSzVtQixFQUFLbEIsTUFBT3hnRCxHQU9qQ3RuQixLQUFLeTNELGNBQWN2ekQsU0FLbkJ1ckYsR0FBVUEsRUFBTzlwRSxFQUFPcWpELEVBQUssRUFPN0J1aEIsYUFMaUIsQ0FBQzVrRSxFQUFPcWpELElBQVNocEUsS0FBSzQ2RSxLQUFLajFELEVBQU9xakQsSUFNcEQsQ0FBRXJVLG1CQUFvQjMwRCxLQUFLeTNELGNBQWNvNEIsMEJBQ2hELENBQ0EsSUFBQWpWLENBQUtqMUQsRUFBT3FqRCxHQUNSLE1BQU11bEIsRUFBYXZ1RixLQUFLdXVGLFdBRXhCLEdBREF2dUYsS0FBS3lsRSxVQUNBOG9CLEVBQ0QsT0FDSixNQUFNLFNBQUUvZ0IsR0FBYXhFLEVBQ3JCaHBFLEtBQUtna0YsZUFBZXhXLEdBQ3BCLE1BQU0sVUFBRXNpQixHQUFjOXZGLEtBQUtpcEUsV0FDdkI2bUIsR0FDQSxHQUFNNTVDLFFBQU8sSUFBTTQ1QyxFQUFVbnFFLEVBQU9xakQsSUFFNUMsQ0FDQSxNQUFBdkQsR0FDSXpsRSxLQUFLdXVGLFlBQWEsRUFDbEIsTUFBTSxXQUFFM3JCLEVBQVUsZUFBRXpLLEdBQW1CbjRELEtBQUt5M0QsY0FDeENtTCxJQUNBQSxFQUFXdXNCLG9CQUFxQixHQUVwQ252RixLQUFLOHVGLFlBQWM5dUYsS0FBSzh1RixXQUFXeG1FLE1BQ25DdG9CLEtBQUs4dUYsZ0JBQWFsdEYsRUFDbEIsTUFBTSxnQkFBRW90RixHQUFvQmh2RixLQUFLaXBFLFlBQzVCK2xCLEdBQW1CaHZGLEtBQUtzdUYsaUJBQ3pCdHVGLEtBQUtzdUYsaUJBQ0x0dUYsS0FBS3N1RixlQUFpQixNQUUxQm4yQixHQUFrQkEsRUFBZWdSLFVBQVUsYUFBYSxFQUM1RCxDQUNBLFVBQUF5bUIsQ0FBV3pFLEVBQU00RSxFQUFRem9FLEdBQ3JCLE1BQU0sS0FBRXV1QyxHQUFTNzFELEtBQUtpcEUsV0FFdEIsSUFBSzNoRCxJQUFXMG9FLEdBQVc3RSxFQUFNdDFCLEVBQU03MUQsS0FBS3d1RixrQkFDeEMsT0FDSixNQUFNeUIsRUFBWWp3RixLQUFLb3ZGLG1CQUFtQmpFLEdBQzFDLElBQUkzMkQsRUFBT3gwQixLQUFLdXJGLFlBQVlKLEdBQVE3akUsRUFBTzZqRSxHQUV2Q25yRixLQUFLeXVGLGFBQWV6dUYsS0FBS3l1RixZQUFZdEQsS0FDckMzMkQsRVB6S1osU0FBMEJzekMsR0FBTyxJQUFFci9DLEVBQUcsSUFBRTR4QyxHQUFPczBCLEdBUzNDLFlBUlkvc0YsSUFBUjZtQixHQUFxQnEvQyxFQUFRci9DLEVBRTdCcS9DLEVBQVE2bUIsRUFBVWpyQixHQUFJajdDLEVBQUtxL0MsRUFBTzZtQixFQUFRbG1FLEtBQU81USxLQUFLd2lELElBQUl5TixFQUFPci9DLFFBRXBEN21CLElBQVJ5NEQsR0FBcUJ5TixFQUFRek4sSUFFbEN5TixFQUFRNm1CLEVBQVVqckIsR0FBSXJKLEVBQUt5TixFQUFPNm1CLEVBQVF0MEIsS0FBT3hpRCxLQUFLNFEsSUFBSXEvQyxFQUFPek4sSUFFOUR5TixDQUNYLENPK0ptQm9vQixDQUFpQjE3RCxFQUFNeDBCLEtBQUt5dUYsWUFBWXRELEdBQU9uckYsS0FBSzJ1RixRQUFReEQsS0FFdkU4RSxFQUFVN2xGLElBQUlvcUIsRUFDbEIsQ0FDQSxrQkFBQTA2RCxHQUNJLE1BQU0sZ0JBQUVpQixFQUFlLFlBQUVoRSxHQUFnQm5zRixLQUFLaXBFLFlBQ3hDLE9BQUUvUyxHQUFXbDJELEtBQUt5M0QsY0FBY21MLFlBQWMsQ0FBQyxFQUMvQ3d0QixFQUFrQnB3RixLQUFLeXVGLFlBQ3pCMEIsR0FBbUJsN0IsR0FBWWs3QixHQUMxQm53RixLQUFLeXVGLGNBQ056dUYsS0FBS3l1RixZQUFjenVGLEtBQUtxd0YseUJBS3hCcndGLEtBQUt5dUYsZUFETDBCLElBQW1CajZCLElQM0puQyxTQUFpQ281QixHQUFXLElBQUU1bEUsRUFBRyxLQUFFRixFQUFJLE9BQUU2eUMsRUFBTSxNQUFFRCxJQUM3RCxNQUFPLENBQ0gxdkMsRUFBR20vRCxHQUE0QnlELEVBQVU1aUUsRUFBR2xELEVBQU00eUMsR0FDbERobUMsRUFBR3kxRCxHQUE0QnlELEVBQVVsNUQsRUFBRzFNLEVBQUsyeUMsR0FFekQsQ091Sm1DaTBCLENBQXdCcDZCLEVBQU9vNUIsVUFBV2EsR0FNckVud0YsS0FBSzJ1RixRUHBHYixTQUE0QnhDLEVBQWNGLElBT3RDLE9BTm9CLElBQWhCRSxFQUNBQSxFQUFjLEdBRU8sSUFBaEJBLElBQ0xBLEVBQWNGLElBRVgsQ0FDSHYvRCxFQUFHdy9ELEdBQW1CQyxFQUFhLE9BQVEsU0FDM0MvMUQsRUFBRzgxRCxHQUFtQkMsRUFBYSxNQUFPLFVBRWxELENPeUZ1Qm9FLENBQW1CcEUsR0FLOUJpRSxJQUFvQnB3RixLQUFLeXVGLGFBQ3pCdjRCLEdBQ0FsMkQsS0FBS3l1RixjQUNKenVGLEtBQUswdUYsdUJBQ05qQyxJQUFVdEIsSUFDRm5yRixLQUFLb3ZGLG1CQUFtQmpFLEtBQ3hCbnJGLEtBQUt5dUYsWUFBWXRELEdQN0hyQyxTQUErQmoxQixFQUFRdTRCLEdBQ25DLE1BQU0rQixFQUFzQixDQUFDLEVBTzdCLFlBTndCNXVGLElBQXBCNnNGLEVBQVlobUUsTUFDWituRSxFQUFvQi9uRSxJQUFNZ21FLEVBQVlobUUsSUFBTXl0QyxFQUFPenRDLFVBRS9CN21CLElBQXBCNnNGLEVBQVlwMEIsTUFDWm0yQixFQUFvQm4yQixJQUFNbzBCLEVBQVlwMEIsSUFBTW5FLEVBQU96dEMsS0FFaEQrbkUsQ0FDWCxDT29INkNDLENBQXNCdjZCLEVBQU9vNUIsVUFBVW5FLEdBQU9uckYsS0FBS3l1RixZQUFZdEQsSUFDNUYsR0FHWixDQUNBLHFCQUFBa0YsR0FDSSxNQUFRRixnQkFBaUIxQixFQUFXLHlCQUFFaUMsR0FBNkIxd0YsS0FBS2lwRSxXQUN4RSxJQUFLd2xCLElBQWdCeDVCLEdBQVl3NUIsR0FDN0IsT0FBTyxFQUNYLE1BQU1rQyxFQUFxQmxDLEVBQVl4NEUsUUFDdkMsR0FBaUMsT0FBdkIwNkUsRUFBNkIsMEdBQ3ZDLE1BQU0sV0FBRS90QixHQUFlNWlFLEtBQUt5M0QsY0FFNUIsSUFBS21MLElBQWVBLEVBQVcxTSxPQUMzQixPQUFPLEVBQ1gsTUFBTTA2QixFRDVOZCxTQUF3QnJuRSxFQUFTc25FLEVBQW9CbDhCLEdBQ2pELE1BQU1tOEIsRUFBYzlDLEdBQW1CemtFLEVBQVNvckMsSUFDMUMsT0FBRW84QixHQUFXRixFQUtuQixPQUpJRSxJQUNBeEQsR0FBY3VELEVBQVlwa0UsRUFBR3FrRSxFQUFPenBFLE9BQU9vRixHQUMzQzZnRSxHQUFjdUQsRUFBWTE2RCxFQUFHMjZELEVBQU96cEUsT0FBTzhPLElBRXhDMDZELENBQ1gsQ0NvTitCRSxDQUFlTCxFQUFvQi90QixFQUFXMEgsS0FBTXRxRSxLQUFLeTNELGNBQWNvNEIseUJBQzlGLElBQUlvQixFUHRLWixTQUFpQzNCLEVBQVdzQixHQUN4QyxNQUFPLENBQ0hsa0UsRUFBR28vRCxHQUE0QndELEVBQVU1aUUsRUFBR2trRSxFQUFlbGtFLEdBQzNEMEosRUFBRzAxRCxHQUE0QndELEVBQVVsNUQsRUFBR3c2RCxFQUFleDZELEdBRW5FLENPaUtrQzg2RCxDQUF3QnR1QixFQUFXMU0sT0FBT281QixVQUFXc0IsR0FLL0UsR0FBSUYsRUFBMEIsQ0FDMUIsTUFBTVMsRUFBa0JULEVKOU5wQyxVQUFpQyxFQUFFaGtFLEVBQUMsRUFBRTBKLElBQ2xDLE1BQU8sQ0FBRTFNLElBQUswTSxFQUFFM04sSUFBSzJ6QyxNQUFPMXZDLEVBQUUydEMsSUFBS2dDLE9BQVFqbUMsRUFBRWlrQyxJQUFLN3dDLEtBQU1rRCxFQUFFakUsSUFDOUQsQ0k0TjZEMm9FLENBQXdCSCxJQUN6RWp4RixLQUFLMHVGLHdCQUEwQnlDLEVBQzNCQSxJQUNBRixFQUFzQnZFLEdBQXdCeUUsR0FFdEQsQ0FDQSxPQUFPRixDQUNYLENBQ0EsY0FBQWpOLENBQWV4VyxHQUNYLE1BQU0sS0FBRTNYLEVBQUksYUFBRXc3QixFQUFZLFlBQUVsRixFQUFXLGVBQUVtRixFQUFjLGlCQUFFQyxFQUFnQixvQkFBRUMsR0FBeUJ4eEYsS0FBS2lwRSxXQUNuR3dsQixFQUFjenVGLEtBQUt5dUYsYUFBZSxDQUFDLEVBQ25DZ0QsRUFBcUJoRixJQUFVdEIsSUFDakMsSUFBSzZFLEdBQVc3RSxFQUFNdDFCLEVBQU03MUQsS0FBS3d1RixrQkFDN0IsT0FFSixJQUFJMXlFLEVBQWMyeUUsR0FBZUEsRUFBWXRELElBQVUsQ0FBQyxFQUNwRG9HLElBQ0F6MUUsRUFBYSxDQUFFMk0sSUFBSyxFQUFHNHhDLElBQUssSUFPaEMsTUFBTXlmLEVBQWtCcVMsRUFBYyxJQUFNLElBQ3RDdFMsRUFBZ0JzUyxFQUFjLEdBQUssSUFDbkN6UyxFQUFVLENBQ1pyMkUsS0FBTSxVQUNObXFFLFNBQVU2akIsRUFBZTdqQixFQUFTMmQsR0FBUSxFQUMxQ3JSLGtCQUNBRCxnQkFDQUQsYUFBYyxJQUNkaEMsVUFBVyxFQUNYQyxVQUFXLE1BQ1J5WixLQUNBeDFFLEdBS1AsT0FBTzliLEtBQUsweEYsd0JBQXdCdkcsRUFBTXpSLEVBQVEsSUFHdEQsT0FBT2pyRCxRQUFRdTdDLElBQUl5bkIsR0FBb0I1aUUsS0FBSzJpRSxFQUNoRCxDQUNBLHVCQUFBRSxDQUF3QnZHLEVBQU1ydkUsR0FDMUIsTUFBTW0wRSxFQUFZandGLEtBQUtvdkYsbUJBQW1CakUsR0FDMUMsT0FBTzhFLEVBQVU1bkUsTUFBTW8zRCxHQUFtQjBMLEVBQU04RSxFQUFXLEVBQUduMEUsR0FDbEUsQ0FDQSxhQUFBaXpFLEdBQ0l0QyxJQUFVdEIsR0FBU25yRixLQUFLb3ZGLG1CQUFtQmpFLEdBQU12USxRQUNyRCxDQU9BLGtCQUFBd1UsQ0FBbUJqRSxHQUNmLE1BQU13RyxFQUFVLFFBQVV4RyxFQUFLempGLGNBQ3pCdEgsRUFBUUosS0FBS3kzRCxjQUFjd1IsV0FFakMsT0FENEI3b0UsRUFBTXV4RixJQUc1QjN4RixLQUFLeTNELGNBQWMvckQsU0FBU3kvRSxHQUFPL3FGLEVBQU1nM0QsUUFBVWgzRCxFQUFNZzNELFFBQVErekIsUUFBUXZwRixJQUFjLEVBQ2pHLENBQ0EsWUFBQWl0RixDQUFhL21CLEdBQ1Qya0IsSUFBVXRCLElBQ04sTUFBTSxLQUFFdDFCLEdBQVM3MUQsS0FBS2lwRSxXQUV0QixJQUFLK21CLEdBQVc3RSxFQUFNdDFCLEVBQU03MUQsS0FBS3d1RixrQkFDN0IsT0FDSixNQUFNLFdBQUU1ckIsR0FBZTVpRSxLQUFLeTNELGNBQ3RCdzRCLEVBQVlqd0YsS0FBS292RixtQkFBbUJqRSxHQUMxQyxHQUFJdm9CLEdBQWNBLEVBQVcxTSxPQUFRLENBQ2pDLE1BQU0sSUFBRXp0QyxFQUFHLElBQUU0eEMsR0FBUXVJLEVBQVcxTSxPQUFPbzVCLFVBQVVuRSxHQUNqRDhFLEVBQVU3bEYsSUFBSTA5RCxFQUFNcWpCLEdBQVF6bkIsR0FBSWo3QyxFQUFLNHhDLEVBQUssSUFDOUMsSUFFUixDQU1BLDhCQUFBdTNCLEdBQ0ksSUFBSzV4RixLQUFLeTNELGNBQWN4aEQsUUFDcEIsT0FDSixNQUFNLEtBQUU0L0MsRUFBSSxnQkFBRXM2QixHQUFvQm53RixLQUFLaXBFLFlBQ2pDLFdBQUVyRyxHQUFlNWlFLEtBQUt5M0QsY0FDNUIsSUFBS3hDLEdBQVlrN0IsS0FBcUJ2dEIsSUFBZTVpRSxLQUFLeXVGLFlBQ3RELE9BS0p6dUYsS0FBSyt1RixnQkFLTCxNQUFNOEMsRUFBYyxDQUFFbmxFLEVBQUcsRUFBRzBKLEVBQUcsR0FDL0JxMkQsSUFBVXRCLElBQ04sTUFBTThFLEVBQVlqd0YsS0FBS292RixtQkFBbUJqRSxHQUMxQyxHQUFJOEUsRUFBVyxDQUNYLE1BQU05dUIsRUFBUzh1QixFQUFVMWtGLE1BQ3pCc21GLEVBQVkxRyxHUDVRNUIsU0FBb0JuNEUsRUFBUTFTLEdBQ3hCLElBQUl5bUQsRUFBUyxHQUNiLE1BQU0rcUMsRUFBZTVHLEdBQVdsNEUsR0FDMUIrK0UsRUFBZTdHLEdBQVc1cUYsR0FPaEMsT0FOSXl4RixFQUFlRCxFQUNmL3FDLEVBQVM4cUIsR0FBU3Z4RSxFQUFPbW9CLElBQUtub0IsRUFBTys1RCxJQUFNeTNCLEVBQWM5K0UsRUFBT3lWLEtBRTNEcXBFLEVBQWVDLElBQ3BCaHJDLEVBQVM4cUIsR0FBUzcrRCxFQUFPeVYsSUFBS3pWLEVBQU9xbkQsSUFBTTAzQixFQUFjenhGLEVBQU9tb0IsTUFFN0QyeEMsR0FBTSxFQUFHLEVBQUdyVCxFQUN2QixDT2lRb0MsQ0FBVyxDQUFFdCtCLElBQUswNEMsRUFBUTlHLElBQUs4RyxHQUFVbmhFLEtBQUt5dUYsWUFBWXRELEdBQ2xGLEtBS0osTUFBTSxrQkFBRS9zQixHQUFzQnArRCxLQUFLeTNELGNBQWN3UixXQUNqRGpwRSxLQUFLeTNELGNBQWN4aEQsUUFBUXBFLE1BQU1zb0QsVUFBWWlFLEVBQ3ZDQSxFQUFrQixDQUFDLEVBQUcsSUFDdEIsT0FDTndFLEVBQVcwSCxNQUFRMUgsRUFBVzBILEtBQUswbkIsZUFDbkNwdkIsRUFBV3F2QixlQUNYanlGLEtBQUtrdkYscUJBS0x6QyxJQUFVdEIsSUFDTixJQUFLNkUsR0FBVzdFLEVBQU10MUIsRUFBTSxNQUN4QixPQUlKLE1BQU1vNkIsRUFBWWp3RixLQUFLb3ZGLG1CQUFtQmpFLElBQ3BDLElBQUUxaUUsRUFBRyxJQUFFNHhDLEdBQVFyNkQsS0FBS3l1RixZQUFZdEQsR0FDdEM4RSxFQUFVN2xGLElBQUlzNUQsR0FBSWo3QyxFQUFLNHhDLEVBQUt3M0IsRUFBWTFHLElBQU8sR0FFdkQsQ0FDQSxZQUFBK0csR0FDSSxJQUFLbHlGLEtBQUt5M0QsY0FBY3hoRCxRQUNwQixPQUNKbTRFLEdBQW9CaGtGLElBQUlwSyxLQUFLeTNELGNBQWV6M0QsTUFDNUMsTUFJTW15RixFQUFzQm5xQixHQUpaaG9FLEtBQUt5M0QsY0FBY3hoRCxRQUlrQixlQUFnQjBQLElBQ2pFLE1BQU0sS0FBRWt3QyxFQUFJLGFBQUUySixHQUFlLEdBQVN4L0QsS0FBS2lwRSxXQUMzQ3BULEdBQVEySixHQUFnQngvRCxLQUFLcW9CLE1BQU0xQyxFQUFNLElBRXZDeXNFLEVBQXlCLEtBQzNCLE1BQU0sZ0JBQUVqQyxHQUFvQm53RixLQUFLaXBFLFdBQzdCaFUsR0FBWWs3QixLQUNabndGLEtBQUt5dUYsWUFBY3p1RixLQUFLcXdGLHdCQUM1QixHQUVFLFdBQUV6dEIsR0FBZTVpRSxLQUFLeTNELGNBQ3RCNDZCLEVBQTRCenZCLEVBQVdqdUQsaUJBQWlCLFVBQVd5OUUsR0FDckV4dkIsSUFBZUEsRUFBVzFNLFNBQzFCME0sRUFBVzBILE1BQVExSCxFQUFXMEgsS0FBSzBuQixlQUNuQ3B2QixFQUFXcXZCLGdCQUVmRyxJQUtBLE1BQU1FLEVBQXFCOXFCLEdBQVl2aEUsT0FBUSxVQUFVLElBQU1qRyxLQUFLNHhGLG1DQUs5RFcsRUFBMkIzdkIsRUFBV2p1RCxpQkFBaUIsYUFBYSxFQUFJa3lDLFFBQU8yckMsdUJBQzdFeHlGLEtBQUt1dUYsWUFBY2lFLElBQ25CL0YsSUFBVXRCLElBQ04sTUFBTTdHLEVBQWN0a0YsS0FBS292RixtQkFBbUJqRSxHQUN2QzdHLElBRUx0a0YsS0FBS3VyRixZQUFZSixJQUFTdGtDLEVBQU1za0MsR0FBTUssVUFDdENsSCxFQUFZbDZFLElBQUlrNkUsRUFBWS80RSxNQUFRczdDLEVBQU1za0MsR0FBTUssV0FBVSxJQUU5RHhyRixLQUFLeTNELGNBQWN2ekQsU0FFMUIsSUFDRCxNQUFPLEtBQ0hvdUYsSUFDQUgsSUFDQUUsSUFDQUUsR0FBNEJBLEdBQTBCLENBRTlELENBQ0EsUUFBQXRwQixHQUNJLE1BQU03b0UsRUFBUUosS0FBS3kzRCxjQUFjd1IsWUFDM0IsS0FBRXBULEdBQU8sRUFBSyxrQkFBRTA1QixHQUFvQixFQUFLLGdCQUFFUCxHQUFrQixFQUFLLGdCQUFFbUIsR0FBa0IsRUFBSyxZQUFFaEUsRUFBY0YsR0FBYyxhQUFFb0YsR0FBZSxHQUFVanhGLEVBQzFKLE1BQU8sSUFDQUEsRUFDSHkxRCxPQUNBMDVCLG9CQUNBUCxrQkFDQW1CLGtCQUNBaEUsY0FDQWtGLGVBRVIsRUFFSixTQUFTckIsR0FBVzdPLEVBQVd0ckIsRUFBTTI0QixHQUNqQyxTQUFrQixJQUFUMzRCLEdBQWlCQSxJQUFTc3JCLEdBQ1QsT0FBckJxTixHQUE2QkEsSUFBcUJyTixFQUMzRCxDQy9hQSxNQUFNc1IsR0FBZ0IvcUIsR0FBWSxDQUFDL2hELEVBQU9xakQsS0FDbEN0QixHQUNBLEdBQU14eEIsUUFBTyxJQUFNd3hCLEVBQVEvaEQsRUFBT3FqRCxJQUN0QyxFQ0pFMHBCLEdBQXdCLENBSzFCQyx3QkFBd0IsRUFLeEJDLGdCQUFnQixHQ2JwQixTQUFTQyxHQUFnQkMsRUFBUTNILEdBQzdCLE9BQUlBLEVBQUs5d0IsTUFBUTh3QixFQUFLMWlFLElBQ1gsRUFDSHFxRSxHQUFVM0gsRUFBSzl3QixJQUFNOHdCLEVBQUsxaUUsS0FBUSxHQUM5QyxDQVFBLE1BQU1zcUUsR0FBc0IsQ0FDeEJDLFFBQVMsQ0FBQzd4QixFQUFROTVDLEtBQ2QsSUFBS0EsRUFBSy9tQixPQUNOLE9BQU82Z0UsRUFLWCxHQUFzQixpQkFBWEEsRUFBcUIsQ0FDNUIsSUFBSWhHLEdBQUdwekQsS0FBS281RCxHQUlSLE9BQU9BLEVBSFBBLEVBQVM3RyxXQUFXNkcsRUFLNUIsQ0FPQSxNQUFPLEdBRkcweEIsR0FBZ0IxeEIsRUFBUTk1QyxFQUFLL21CLE9BQU9vc0IsT0FDcENtbUUsR0FBZ0IxeEIsRUFBUTk1QyxFQUFLL21CLE9BQU84MUIsS0FDMUIsR0NqQ3RCNjhELEdBQW1CLENBQ3JCRCxRQUFTLENBQUM3eEIsR0FBVSt4QixZQUFXQyxzQkFDM0IsTUFBTUMsRUFBV2p5QixFQUNYa3lCLEVBQVN6ZixHQUFRdHlCLE1BQU02ZixHQUU3QixHQUFJa3lCLEVBQU9qMUYsT0FBUyxFQUNoQixPQUFPZzFGLEVBQ1gsTUFBTTVlLEVBQVdaLEdBQVFKLGtCQUFrQnJTLEdBQ3JDNzVDLEVBQThCLGlCQUFkK3JFLEVBQU8sR0FBa0IsRUFBSSxFQUU3Q0MsRUFBU0gsRUFBZ0J6bUUsRUFBRTh0QyxNQUFRMDRCLEVBQVV4bUUsRUFDN0M2bUUsRUFBU0osRUFBZ0IvOEQsRUFBRW9rQyxNQUFRMDRCLEVBQVU5OEQsRUFDbkRpOUQsRUFBTyxFQUFJL3JFLElBQVdnc0UsRUFDdEJELEVBQU8sRUFBSS9yRSxJQUFXaXNFLEVBT3RCLE1BQU1DLEVBQWU5dkIsR0FBSTR2QixFQUFRQyxFQUFRLElBT3pDLE1BTGtDLGlCQUF2QkYsRUFBTyxFQUFJL3JFLEtBQ2xCK3JFLEVBQU8sRUFBSS9yRSxJQUFXa3NFLEdBRVEsaUJBQXZCSCxFQUFPLEVBQUkvckUsS0FDbEIrckUsRUFBTyxFQUFJL3JFLElBQVdrc0UsR0FDbkJoZixFQUFTNmUsRUFBTyxHQ3BCL0IsTUFBTUksV0FBaUMsWUFNbkMsaUJBQUExN0QsR0FDSSxNQUFNLGNBQUUwL0IsRUFBYSxZQUFFaThCLEVBQVcsa0JBQUVDLEVBQWlCLFNBQUV6OEIsR0FBYWwzRCxLQUFLSSxPQUNuRSxXQUFFd2lFLEdBQWVuTCxFaEpqQi9CLElBQTJCbThCLElnSmtCREMsR2hKakJ0Qnh2RixPQUFPc0YsT0FBTzB2RCxHQUFpQnU2QixHZ0prQnZCaHhCLElBQ0k4d0IsRUFBWUksT0FDWkosRUFBWUksTUFBTS90RixJQUFJNjhELEdBQ3RCK3dCLEdBQXFCQSxFQUFrQnRLLFVBQVlueUIsR0FDbkR5OEIsRUFBa0J0SyxTQUFTem1CLEdBRS9CQSxFQUFXMEgsS0FBS3lwQixZQUNoQm54QixFQUFXanVELGlCQUFpQixxQkFBcUIsS0FDN0MzVSxLQUFLZzBGLGNBQWMsSUFFdkJweEIsRUFBV3F4QixXQUFXLElBQ2ZyeEIsRUFBV3oxRCxRQUNkODdFLGVBQWdCLElBQU1qcEYsS0FBS2cwRixrQkFHbkN0QixHQUFzQkUsZ0JBQWlCLENBQzNDLENBQ0EsdUJBQUFoN0QsQ0FBd0J1ckMsR0FDcEIsTUFBTSxpQkFBRSt3QixFQUFnQixjQUFFejhCLEVBQWEsS0FBRTVCLEVBQUksVUFBRW16QixHQUFjaHBGLEtBQUtJLE1BQzVEd2lFLEVBQWFuTCxFQUFjbUwsV0FDakMsT0FBS0EsR0FTTEEsRUFBV29tQixVQUFZQSxFQUNuQm56QixHQUNBc04sRUFBVSt3QixtQkFBcUJBLFFBQ1Z0eUYsSUFBckJzeUYsRUFDQXR4QixFQUFXdXhCLGFBR1huMEYsS0FBS2cwRixlQUVMN3dCLEVBQVU2bEIsWUFBY0EsSUFDcEJBLEVBQ0FwbUIsRUFBV3d4QixVQUVMeHhCLEVBQVd5eEIsWUFNakIsR0FBTXRSLFlBQVcsS0FDYixNQUFNajVFLEVBQVE4NEQsRUFBVzB4QixXQUNwQnhxRixHQUFVQSxFQUFNeXFGLFFBQVFuMkYsUUFDekI0QixLQUFLZzBGLGNBQ1QsS0FJTCxNQW5DSSxJQW9DZixDQUNBLGtCQUFBL3hELEdBQ0ksTUFBTSxXQUFFMmdDLEdBQWU1aUUsS0FBS0ksTUFBTXEzRCxjQUM5Qm1MLElBQ0FBLEVBQVcwSCxLQUFLeXBCLFlBQ2hCcGxFLGdCQUFlLE1BQ05pMEMsRUFBVzR4QixrQkFBb0I1eEIsRUFBVzZ4QixVQUMzQ3owRixLQUFLZzBGLGNBQ1QsSUFHWixDQUNBLG9CQUFBeHRELEdBQ0ksTUFBTSxjQUFFaXhCLEVBQWEsWUFBRWk4QixFQUFhQyxrQkFBbUJlLEdBQW9CMTBGLEtBQUtJLE9BQzFFLFdBQUV3aUUsR0FBZW5MLEVBQ25CbUwsSUFDQUEsRUFBVyt4Qiw0QkFDUGpCLEdBQWVBLEVBQVlJLE9BQzNCSixFQUFZSSxNQUFNMTlDLE9BQU93c0IsR0FDekI4eEIsR0FBa0JBLEVBQWVFLFlBQ2pDRixFQUFlRSxXQUFXaHlCLEdBRXRDLENBQ0EsWUFBQW94QixHQUNJLE1BQU0sYUFBRUEsR0FBaUJoMEYsS0FBS0ksTUFDOUI0ekYsR0FBZ0JBLEdBQ3BCLENBQ0EsTUFBQTl2RixHQUNJLE9BQU8sSUFDWCxFQUVKLFNBQVM4eUQsR0FBYzUyRCxHQUNuQixNQUFPNG9GLEVBQVdnTCxHQ25GdEIsV0FDSSxNQUFNMS9ELEdBQVUsSUFBQWlLLFlBQVcsSUFDM0IsR0FBZ0IsT0FBWmpLLEVBQ0EsTUFBTyxFQUFDLEVBQU0sTUFDbEIsTUFBTSxVQUFFMDBELEVBQVMsZUFBRUMsRUFBYyxTQUFFSSxHQUFhLzBELEVBRzFDMXpCLEdBQUssSUFBQXkrQixTQUdYLE9BRkEsSUFBQWIsWUFBVSxJQUFNNnFELEVBQVN6b0YsSUFBSyxLQUV0Qm9vRixHQUFhQyxFQUFpQixFQUFDLEVBRGxCLElBQU1BLEdBQWtCQSxFQUFlcm9GLElBQ0UsRUFBQyxFQUNuRSxDRHdFc0NpMEYsR0FDNUJuQixHQUFjLElBQUFuMUQsWUFBVzgzQixJQUMvQixPQUFRLGdCQUE2Qm85QixHQUEwQixJQUFLcnpGLEVBQU9zekYsWUFBYUEsRUFBYUMsbUJBQW1CLElBQUFwMUQsWUFBVyszQixJQUEyQjB5QixVQUFXQSxFQUFXZ0wsYUFBY0EsR0FDdE0sQ0FDQSxNQUFNSCxHQUF5QixDQUMzQmo0QixhQUFjLElBQ1BtM0IsR0FDSCtCLFFBQVMsQ0FDTCxzQkFDQSx1QkFDQSx5QkFDQSw0QkFHUmg1QixvQkFBcUJpM0IsR0FDckJoM0IscUJBQXNCZzNCLEdBQ3RCOTJCLHVCQUF3QjgyQixHQUN4Qi8yQix3QkFBeUIrMkIsR0FDekJnQyxVQUFXOUIsSUV6SFQrQixHQUFVLENBQUMsVUFBVyxXQUFZLGFBQWMsZUFDaERDLEdBQWFELEdBQVE1MkYsT0FDckI4MkYsR0FBWXQxRixHQUEyQixpQkFBVkEsRUFBcUIwNkQsV0FBVzE2RCxHQUFTQSxFQUN0RXUxRixHQUFRdjFGLEdBQTJCLGlCQUFWQSxHQUFzQnU3RCxHQUFHcHpELEtBQUtuSSxHQTBDN0QsU0FBU3cxRixHQUFVL3lCLEVBQVFnekIsR0FDdkIsWUFBOEJ6ekYsSUFBdkJ5Z0UsRUFBT2d6QixHQUNSaHpCLEVBQU9nekIsR0FDUGh6QixFQUFPekcsWUFDakIsQ0F3QkEsTUFBTTA1QixHQUFrQkMsR0FBUyxFQUFHLEdBQUs5bUIsSUFDbkMrbUIsR0FBbUJELEdBQVMsR0FBSyxJQUFNdHdCLElBQzdDLFNBQVNzd0IsR0FBUzlzRSxFQUFLNHhDLEVBQUswVCxHQUN4QixPQUFRem9FLEdBRUFBLEVBQUltakIsRUFDRyxFQUNQbmpCLEVBQUkrMEQsRUFDRyxFQUNKMFQsRUFBTzhELEdBQVNwcEQsRUFBSzR4QyxFQUFLLzBELEdBRXpDLENDckZBLFNBQVNtd0YsR0FBYXRLLEVBQU11SyxHQUN4QnZLLEVBQUsxaUUsSUFBTWl0RSxFQUFXanRFLElBQ3RCMGlFLEVBQUs5d0IsSUFBTXE3QixFQUFXcjdCLEdBQzFCLENBTUEsU0FBU3M3QixHQUFZdkksRUFBS3dJLEdBQ3RCSCxHQUFhckksRUFBSTFnRSxFQUFHa3BFLEVBQVVscEUsR0FDOUIrb0UsR0FBYXJJLEVBQUloM0QsRUFBR3cvRCxFQUFVeC9ELEVBQ2xDLENDVkEsU0FBU3kvRCxHQUFpQi90QixFQUFPMGpCLEVBQVdoeEIsRUFBTyt3QixFQUFhMEIsR0FNNUQsT0FKQW5sQixFQUFRaWxCLEdBRFJqbEIsR0FBUzBqQixFQUNpQixFQUFJaHhCLEVBQU8rd0IsUUFDcEIzcEYsSUFBYnFyRixJQUNBbmxCLEVBQVFpbEIsR0FBV2psQixFQUFPLEVBQUltbEIsRUFBVTFCLElBRXJDempCLENBQ1gsQ0FzQkEsU0FBU2d1QixHQUFxQjNLLEVBQU1zQyxHQUFhOXRGLEVBQUsrdEYsRUFBVUMsR0FBWTVtQyxFQUFRZ3ZDLElBbEJwRixTQUF5QjVLLEVBQU1LLEVBQVksRUFBR2h4QixFQUFRLEVBQUd6VCxFQUFTLEdBQUtrbUMsRUFBVXlJLEVBQWF2SyxFQUFNNEssRUFBYTVLLEdBTTdHLEdBTElqd0IsR0FBUW56RCxLQUFLeWpGLEtBQ2JBLEVBQVlseEIsV0FBV2t4QixHQUV2QkEsRUFEeUI5bkIsR0FBSXF5QixFQUFXdHRFLElBQUtzdEUsRUFBVzE3QixJQUFLbXhCLEVBQVksS0FDMUN1SyxFQUFXdHRFLEtBRXJCLGlCQUFkK2lFLEVBQ1AsT0FDSixJQUFJRCxFQUFjN25CLEdBQUlneUIsRUFBV2p0RSxJQUFLaXRFLEVBQVdyN0IsSUFBS3RULEdBQ2xEb2tDLElBQVN1SyxJQUNUbkssR0FBZUMsR0FDbkJMLEVBQUsxaUUsSUFBTW90RSxHQUFpQjFLLEVBQUsxaUUsSUFBSytpRSxFQUFXaHhCLEVBQU8rd0IsRUFBYTBCLEdBQ3JFOUIsRUFBSzl3QixJQUFNdzdCLEdBQWlCMUssRUFBSzl3QixJQUFLbXhCLEVBQVdoeEIsRUFBTyt3QixFQUFhMEIsRUFDekUsQ0FNSStJLENBQWdCN0ssRUFBTXNDLEVBQVc5dEYsR0FBTTh0RixFQUFXQyxHQUFXRCxFQUFXRSxHQUFZRixFQUFXanpCLE1BQU96VCxFQUFRZ3ZDLEVBQ2xILENBSUEsTUFBTSxHQUFRLENBQUMsSUFBSyxTQUFVLFdBQ3hCLEdBQVEsQ0FBQyxJQUFLLFNBQVUsV0FLOUIsU0FBU0UsR0FBb0I3SSxFQUFLSyxFQUFZbUksRUFBV00sR0FDckRKLEdBQXFCMUksRUFBSTFnRSxFQUFHK2dFLEVBQVksR0FBT21JLEVBQVlBLEVBQVVscEUsT0FBSTlxQixFQUFXczBGLEVBQVlBLEVBQVV4cEUsT0FBSTlxQixHQUM5R2swRixHQUFxQjFJLEVBQUloM0QsRUFBR3EzRCxFQUFZLEdBQU9tSSxFQUFZQSxFQUFVeC9ELE9BQUl4MEIsRUFBV3MwRixFQUFZQSxFQUFVOS9ELE9BQUl4MEIsRUFDbEgsQ0NqREEsU0FBU3UwRixHQUFnQnR2QyxHQUNyQixPQUEyQixJQUFwQkEsRUFBTTJrQyxXQUFtQyxJQUFoQjNrQyxFQUFNMlQsS0FDMUMsQ0FDQSxTQUFTNDdCLEdBQVl2dkMsR0FDakIsT0FBT3N2QyxHQUFnQnR2QyxFQUFNbjZCLElBQU15cEUsR0FBZ0J0dkMsRUFBTXp3QixFQUM3RCxDQU9BLFNBQVNpZ0UsR0FBaUI5d0YsRUFBR0MsR0FDekIsT0FBUXFTLEtBQUs2aUQsTUFBTW4xRCxFQUFFbW5CLEVBQUVqRSxPQUFTNVEsS0FBSzZpRCxNQUFNbDFELEVBQUVrbkIsRUFBRWpFLE1BQzNDNVEsS0FBSzZpRCxNQUFNbjFELEVBQUVtbkIsRUFBRTJ0QyxPQUFTeGlELEtBQUs2aUQsTUFBTWwxRCxFQUFFa25CLEVBQUUydEMsTUFDdkN4aUQsS0FBSzZpRCxNQUFNbjFELEVBQUU2d0IsRUFBRTNOLE9BQVM1USxLQUFLNmlELE1BQU1sMUQsRUFBRTR3QixFQUFFM04sTUFDdkM1USxLQUFLNmlELE1BQU1uMUQsRUFBRTZ3QixFQUFFaWtDLE9BQVN4aUQsS0FBSzZpRCxNQUFNbDFELEVBQUU0d0IsRUFBRWlrQyxJQUMvQyxDQUNBLFNBQVNyckQsR0FBWW8rRSxHQUNqQixPQUFPbEMsR0FBV2tDLEVBQUkxZ0UsR0FBS3crRCxHQUFXa0MsRUFBSWgzRCxFQUM5QyxDQ3BCQSxNQUFNa2dFLEdBQ0YsV0FBQWhyRixHQUNJdEwsS0FBS3UwRixRQUFVLEVBQ25CLENBQ0EsR0FBQXh1RixDQUFJc2hCLEdBQ0E0NkQsR0FBY2ppRixLQUFLdTBGLFFBQVNsdEUsR0FDNUJBLEVBQUtrdkUsZ0JBQ1QsQ0FDQSxNQUFBbmdELENBQU8vdUIsR0FLSCxHQUpBNjZELEdBQVdsaUYsS0FBS3UwRixRQUFTbHRFLEdBQ3JCQSxJQUFTcm5CLEtBQUt3MkYsV0FDZHgyRixLQUFLdzJGLGNBQVc1MEYsR0FFaEJ5bEIsSUFBU3JuQixLQUFLeTJGLEtBQU0sQ0FDcEIsTUFBTUQsRUFBV3gyRixLQUFLdTBGLFFBQVF2MEYsS0FBS3UwRixRQUFRbjJGLE9BQVMsR0FDaERvNEYsR0FDQXgyRixLQUFLbzBGLFFBQVFvQyxFQUVyQixDQUNKLENBQ0EsUUFBQW5DLENBQVNodEUsR0FDTCxNQUFNcXZFLEVBQWMxMkYsS0FBS3UwRixRQUFRL3hDLFdBQVdtMEMsR0FBV3R2RSxJQUFTc3ZFLElBQ2hFLEdBQW9CLElBQWhCRCxFQUNBLE9BQU8sRUFJWCxJQUFJRixFQUNKLElBQUssSUFBSWwxRixFQUFJbzFGLEVBQWFwMUYsR0FBSyxFQUFHQSxJQUFLLENBQ25DLE1BQU1xMUYsRUFBUzMyRixLQUFLdTBGLFFBQVFqekYsR0FDNUIsSUFBeUIsSUFBckJxMUYsRUFBTzNOLFVBQXFCLENBQzVCd04sRUFBV0csRUFDWCxLQUNKLENBQ0osQ0FDQSxRQUFJSCxJQUNBeDJGLEtBQUtvMEYsUUFBUW9DLElBQ04sRUFLZixDQUNBLE9BQUFwQyxDQUFRL3NFLEVBQU11dkUsR0FDVixNQUFNSixFQUFXeDJGLEtBQUt5MkYsS0FDdEIsR0FBSXB2RSxJQUFTbXZFLElBRWJ4MkYsS0FBS3cyRixTQUFXQSxFQUNoQngyRixLQUFLeTJGLEtBQU9wdkUsRUFDWkEsRUFBS3d2RSxPQUNETCxHQUFVLENBQ1ZBLEVBQVM5cUUsVUFBWThxRSxFQUFTRCxpQkFDOUJsdkUsRUFBS2t2RSxpQkFDTGx2RSxFQUFLeXZFLFdBQWFOLEVBQ2RJLElBQ0F2dkUsRUFBS3l2RSxXQUFXQyxpQkFBa0IsR0FFbENQLEVBQVNRLFdBQ1QzdkUsRUFBSzJ2RSxTQUFXUixFQUFTUSxTQUN6QjN2RSxFQUFLMnZFLFNBQVM3NEIsYUFDVnE0QixFQUFTUyxpQkFBbUJULEVBQVNyNEIsY0FFekM5MkMsRUFBS2lqRCxNQUFRampELEVBQUtpakQsS0FBSzRzQixhQUN2Qjd2RSxFQUFLOHZFLGVBQWdCLEdBRXpCLE1BQU0sVUFBRUMsR0FBYy92RSxFQUFLbGEsU0FDVCxJQUFkaXFGLEdBQ0FaLEVBQVNhLE1BY2pCLENBQ0osQ0FDQSxxQkFBQUMsR0FDSXQzRixLQUFLdTBGLFFBQVFqdEYsU0FBUytmLElBQ2xCLE1BQU0sUUFBRWxhLEVBQU8sYUFBRW9xRixHQUFpQmx3RSxFQUNsQ2xhLEVBQVE4N0UsZ0JBQWtCOTdFLEVBQVE4N0UsaUJBQzlCc08sR0FDQUEsRUFBYXBxRixRQUFRODdFLGdCQUNqQnNPLEVBQWFwcUYsUUFBUTg3RSxnQkFDN0IsR0FFUixDQUNBLGNBQUFzTixHQUNJdjJGLEtBQUt1MEYsUUFBUWp0RixTQUFTK2YsSUFDbEJBLEVBQUtxRSxVQUFZckUsRUFBS2t2RSxnQkFBZSxFQUFNLEdBRW5ELENBS0Esa0JBQUFpQixHQUNReDNGLEtBQUt5MkYsTUFBUXoyRixLQUFLeTJGLEtBQUtPLFdBQ3ZCaDNGLEtBQUt5MkYsS0FBS08sY0FBV3AxRixFQUU3QixFQzVHSixTQUFTNjFGLEdBQXlCNXdDLEVBQU9xc0MsRUFBV3dFLEdBQ2hELElBQUl2OUIsRUFBWSxHQU9oQixNQUFNdzlCLEVBQWE5d0MsRUFBTW42QixFQUFFOCtELFVBQVkwSCxFQUFVeG1FLEVBQzNDa3JFLEVBQWEvd0MsRUFBTXp3QixFQUFFbzFELFVBQVkwSCxFQUFVOThELEVBV2pELElBVkl1aEUsR0FBY0MsS0FDZHo5QixFQUFZLGVBQWV3OUIsUUFBaUJDLFlBTTVCLElBQWhCMUUsRUFBVXhtRSxHQUEyQixJQUFoQndtRSxFQUFVOThELElBQy9CK2pDLEdBQWEsU0FBUyxFQUFJKzRCLEVBQVV4bUUsTUFBTSxFQUFJd21FLEVBQVU5OEQsT0FFeERzaEUsRUFBaUIsQ0FDakIsTUFBTSxPQUFFMzZCLEVBQU0sUUFBRUMsRUFBTyxRQUFFQyxHQUFZeTZCLEVBQ2pDMzZCLElBQ0E1QyxHQUFhLFVBQVU0QyxVQUN2QkMsSUFDQTdDLEdBQWEsV0FBVzZDLFVBQ3hCQyxJQUNBOUMsR0FBYSxXQUFXOEMsU0FDaEMsQ0FLQSxNQUFNNDZCLEVBQWdCaHhDLEVBQU1uNkIsRUFBRTh0QyxNQUFRMDRCLEVBQVV4bUUsRUFDMUNvckUsRUFBZ0JqeEMsRUFBTXp3QixFQUFFb2tDLE1BQVEwNEIsRUFBVTk4RCxFQUloRCxPQUhzQixJQUFsQnloRSxHQUF5QyxJQUFsQkMsSUFDdkIzOUIsR0FBYSxTQUFTMDlCLE1BQWtCQyxNQUVyQzM5QixHQUFhLE1BQ3hCLENDdkNBLE1BQU00OUIsR0FBaUIsQ0FBQ3h5RixFQUFHQyxJQUFNRCxFQUFFeXlGLE1BQVF4eUYsRUFBRXd5RixNQ0c3QyxNQUFNQyxHQUNGLFdBQUEzc0YsR0FDSXRMLEtBQUt5TixTQUFXLEdBQ2hCek4sS0FBS2s0RixTQUFVLENBQ25CLENBQ0EsR0FBQW55RixDQUFJZ1EsR0FDQWtzRSxHQUFjamlGLEtBQUt5TixTQUFVc0ksR0FDN0IvVixLQUFLazRGLFNBQVUsQ0FDbkIsQ0FDQSxNQUFBOWhELENBQU9yZ0MsR0FDSG1zRSxHQUFXbGlGLEtBQUt5TixTQUFVc0ksR0FDMUIvVixLQUFLazRGLFNBQVUsQ0FDbkIsQ0FDQSxPQUFBNXdGLENBQVFzdUIsR0FDSjUxQixLQUFLazRGLFNBQVdsNEYsS0FBS3lOLFNBQVM0c0MsS0FBSzA5QyxJQUNuQy8zRixLQUFLazRGLFNBQVUsRUFDZmw0RixLQUFLeU4sU0FBU25HLFFBQVFzdUIsRUFDMUIsRUNNSixNQUFNdWlFLEdBQWdCLENBQUMsR0FBSSxJQUFLLElBQUssS0FNckMsSUFBSSxHQUFLLEVBS1QsTUFBTUMsR0FBc0IsQ0FDeEIvMEYsS0FBTSxrQkFDTmcxRixXQUFZLEVBQ1pDLHFCQUFzQixFQUN0QkMsdUJBQXdCLEdBRTVCLFNBQVNDLElBQXFCLHFCQUFFQyxFQUFvQixjQUFFQyxFQUFhLGNBQUVDLEVBQWEsa0JBQUVDLEVBQWlCLGVBQUVDLElBQ25HLE9BQU8sTUFDSCxXQUFBdnRGLENBQVk2eUQsRUFBZSxDQUFDLEVBQUd6RyxHQUFTZ2hDLGFBQXFELEVBQVNBLE1BSWxHMTRGLEtBQUtZLEdBQUssS0FJVlosS0FBSzg0RixZQUFjLEVBT25COTRGLEtBQUt5TixTQUFXLElBQUk5SCxJQUtwQjNGLEtBQUttTixRQUFVLENBQUMsRUFNaEJuTixLQUFLKzRGLGlCQUFrQixFQUN2Qi80RixLQUFLbXZGLG9CQUFxQixFQU8xQm52RixLQUFLbTNGLGVBQWdCLEVBS3JCbjNGLEtBQUtnNUYsbUJBQW9CLEVBS3pCaDVGLEtBQUtpNUYseUJBQTBCLEVBSy9CajVGLEtBQUtrNUYsa0JBQW1CLEVBSXhCbDVGLEtBQUttNUYsdUJBQXdCLEVBQzdCbjVGLEtBQUtvNUYsdUJBQXdCLEVBSzdCcDVGLEtBQUtrM0YsWUFBYSxFQUlsQmwzRixLQUFLcTVGLE9BQVEsRUFLYnI1RixLQUFLczVGLFlBQWEsRUFJbEJ0NUYsS0FBS3U1RixzQkFBdUIsRUFTNUJ2NUYsS0FBS2t6RixVQUFZLENBQUV4bUUsRUFBRyxFQUFHMEosRUFBRyxHQUk1QnAyQixLQUFLdzVGLGNBQWdCLElBQUl4L0UsSUFDekJoYSxLQUFLeTVGLGlCQUFrQixFQUV2Qno1RixLQUFLMDVGLGlCQUFrQixFQUN2QjE1RixLQUFLMjVGLGtCQUFvQixLQUNqQjM1RixLQUFLazNGLGFBQ0xsM0YsS0FBS2szRixZQUFhLEVBQ2xCbDNGLEtBQUs0NUYsb0JBQ1QsRUFPSjU1RixLQUFLNjVGLGlCQUFtQixLQ2pKcEMsSUFBZ0J0M0YsRURzSkE2MUYsR0FBb0JDLFdBQ2hCRCxHQUFvQkUscUJBQ2hCRixHQUFvQkcsdUJBQ2hCLEVBQ1p2NEYsS0FBSzg1RixNQUFNeHlGLFFBQVF5eUYsSUFDbkIvNUYsS0FBSzg1RixNQUFNeHlGLFFBQVEweUYsSUFDbkJoNkYsS0FBSzg1RixNQUFNeHlGLFFBQVEyeUYsSUFDbkJqNkYsS0FBSzg1RixNQUFNeHlGLFFBQVE0eUYsSUM3Sm5CMzNGLEVEOEpPNjFGLEdDN0pmbnlGLE9BQU9rMEYsYUFDUGwwRixPQUFPazBGLFlBQVlDLE9BQU83M0YsRUQ0SlMsRUFFL0J2QyxLQUFLcTZGLGNBQWUsRUFDcEJyNkYsS0FBS3M2RixXQUFZLEVBQ2pCdDZGLEtBQUt1NkYsa0JBQW9CLEVBS3pCdjZGLEtBQUt3NkYsWUFBYyxJQUFJeGdGLElBQ3ZCaGEsS0FBS20rRCxhQUFlQSxFQUNwQm4rRCxLQUFLc3FFLEtBQU81UyxFQUFTQSxFQUFPNFMsTUFBUTVTLEVBQVMxM0QsS0FDN0NBLEtBQUswNUMsS0FBT2dlLEVBQVMsSUFBSUEsRUFBT2hlLEtBQU1nZSxHQUFVLEdBQ2hEMTNELEtBQUswM0QsT0FBU0EsRUFDZDEzRCxLQUFLZzRGLE1BQVF0Z0MsRUFBU0EsRUFBT3NnQyxNQUFRLEVBQUksRUFDekMsSUFBSyxJQUFJMTJGLEVBQUksRUFBR0EsRUFBSXRCLEtBQUswNUMsS0FBS3Q3QyxPQUFRa0QsSUFDbEN0QixLQUFLMDVDLEtBQUtwNEMsR0FBR2k0RixzQkFBdUIsRUFFcEN2NUYsS0FBS3NxRSxPQUFTdHFFLE9BQ2RBLEtBQUs4NUYsTUFBUSxJQUFJN0IsR0FDekIsQ0FDQSxnQkFBQXRqRixDQUFpQnRVLEVBQU1xbkUsR0FJbkIsT0FISzFuRSxLQUFLdzVGLGNBQWMxdEUsSUFBSXpyQixJQUN4QkwsS0FBS3c1RixjQUFjcHZGLElBQUkvSixFQUFNLElBQUk4aEYsSUFFOUJuaUYsS0FBS3c1RixjQUFjanVGLElBQUlsTCxHQUFNMEYsSUFBSTJoRSxFQUM1QyxDQUNBLGVBQUEreUIsQ0FBZ0JwNkYsS0FBU2hDLEdBQ3JCLE1BQU1xOEYsRUFBc0IxNkYsS0FBS3c1RixjQUFjanVGLElBQUlsTCxHQUNuRHE2RixHQUF1QkEsRUFBb0JyWSxVQUFVaGtGLEVBQ3pELENBQ0EsWUFBQXM4RixDQUFhdDZGLEdBQ1QsT0FBT0wsS0FBS3c1RixjQUFjMXRFLElBQUl6ckIsRUFDbEMsQ0FJQSxLQUFBbzRELENBQU0vc0MsRUFBVXlyRSxFQUFnQm4zRixLQUFLc3FFLEtBQUttdkIsaUJBQ3RDLEdBQUl6NUYsS0FBSzByQixTQUNMLE9Fck1oQixJQUFzQm5DLEVGc01WdnBCLEtBQUtxNUYsT0V0TUs5dkUsRUZzTWdCbUMsYUVyTVJrdkUsWUFBa0MsUUFBcEJyeEUsRUFBUWdRLFFGc014Q3Y1QixLQUFLMHJCLFNBQVdBLEVBQ2hCLE1BQU0sU0FBRXdyQyxFQUFRLE9BQUVoQixFQUFNLGNBQUV1QixHQUFrQnozRCxLQUFLbU4sUUFTakQsR0FSSXNxRCxJQUFrQkEsRUFBY3hoRCxTQUNoQ3doRCxFQUFjZ0IsTUFBTS9zQyxHQUV4QjFyQixLQUFLc3FFLEtBQUt3dkIsTUFBTS96RixJQUFJL0YsTUFDcEJBLEtBQUswM0QsUUFBVTEzRCxLQUFLMDNELE9BQU9qcUQsU0FBUzFILElBQUkvRixNQUNwQ20zRixJQUFrQmpoQyxHQUFVZ0IsS0FDNUJsM0QsS0FBS20zRixlQUFnQixHQUVyQnNCLEVBQXNCLENBQ3RCLElBQUlvQyxFQUNKLE1BQU1DLEVBQXNCLElBQU85NkYsS0FBS3NxRSxLQUFLOHVCLHVCQUF3QixFQUNyRVgsRUFBcUIvc0UsR0FBVSxLQUMzQjFyQixLQUFLc3FFLEtBQUs4dUIsdUJBQXdCLEVBQ2xDeUIsR0FBZUEsSUFDZkEsRUdsTnBCLFNBQWVqbEUsRUFBVW1sRSxHQUNyQixNQUFNMXlFLEVBQVF1ckIsWUFBWXoxQixNQUNwQjY4RSxFQUFlLEVBQUcvMEIsZ0JBQ3BCLE1BQU04VyxFQUFVOVcsRUFBWTU5QyxFQUN4QjAwRCxHSDhNaUQsTUc3TWpEclgsR0FBWXMxQixHQUNacGxFLEVBQVNtbkQsRUg0TXdDLEtHM01yRCxFQUdKLE9BREEsR0FBTTNWLEtBQUs0ekIsR0FBYyxHQUNsQixJQUFNdDFCLEdBQVlzMUIsRUFDN0IsQ0h1TWtDL2xELENBQU02bEQsR0FDaEJwSSxHQUFzQkMseUJBQ3RCRCxHQUFzQkMsd0JBQXlCLEVBQy9DM3lGLEtBQUs4NUYsTUFBTXh5RixRQUFRMnpGLElBQ3ZCLEdBRVIsQ0FDSS9qQyxHQUNBbDNELEtBQUtzcUUsS0FBSzR3QixtQkFBbUJoa0MsRUFBVWwzRCxPQUdkLElBQXpCQSxLQUFLbU4sUUFBUW9vRCxTQUNia0MsSUFDQ1AsR0FBWWhCLElBQ2JsMkQsS0FBSzJVLGlCQUFpQixhQUFhLEVBQUdreUMsUUFBTzJyQyxtQkFBa0IySSwyQkFBMEJqbEMsT0FBUWtsQyxNQUM3RixHQUFJcDdGLEtBQUtxN0YseUJBR0wsT0FGQXI3RixLQUFLTSxZQUFTc0IsT0FDZDVCLEtBQUtzN0Ysb0JBQWlCMTVGLEdBSTFCLE1BQU0yNUYsRUFBbUJ2N0YsS0FBS21OLFFBQVEyTyxZQUNsQzI3QyxFQUFjMG1CLHdCQUNkcWQsSUFDRSx1QkFBRUMsRUFBc0IsMEJBQUVDLEdBQStCamtDLEVBQWN3UixXQUt2RTB5QixHQUFpQjM3RixLQUFLNDdGLGVBQ3ZCdkYsR0FBaUJyMkYsS0FBSzQ3RixhQUFjUixJQUNyQ0QsRUFNRVUsR0FBZ0NySixHQUFvQjJJLEVBQzFELEdBQUluN0YsS0FBS21OLFFBQVEydUYsWUFDWjk3RixLQUFLODJGLFlBQWM5MkYsS0FBSzgyRixXQUFXcHJFLFVBQ3BDbXdFLEdBQ0NySixJQUNJbUosSUFBa0IzN0YsS0FBS3cwRixrQkFBb0IsQ0FDNUN4MEYsS0FBSzgyRixhQUNMOTJGLEtBQUt1M0YsYUFBZXYzRixLQUFLODJGLFdBQ3pCOTJGLEtBQUt1M0YsYUFBYUEsa0JBQWUzMUYsR0FFckM1QixLQUFLKzdGLG1CQUFtQmwxQyxFQUFPZzFDLEdBQy9CLE1BQU1HLEVBQW1CLElBQ2xCeGMsR0FBbUIrYixFQUFrQixVQUN4QzlmLE9BQVFnZ0IsRUFDUjlmLFdBQVkrZixJQUVaamtDLEVBQWNrdUIsb0JBQ2QzbEYsS0FBS21OLFFBQVEydUYsY0FDYkUsRUFBaUIvbUQsTUFBUSxFQUN6QittRCxFQUFpQjM0RixNQUFPLEdBRTVCckQsS0FBS2drRixlQUFlZ1ksRUFDeEIsTUFPU3hKLEdBQ0R5SSxHQUFnQmo3RixNQUVoQkEsS0FBS3kwRixVQUFZejBGLEtBQUttTixRQUFRODdFLGdCQUM5QmpwRixLQUFLbU4sUUFBUTg3RSxpQkFHckJqcEYsS0FBSzQ3RixhQUFlUixDQUFTLEdBR3pDLENBQ0EsT0FBQXR1RCxHQUNJOXNDLEtBQUttTixRQUFRK3BELFVBQVlsM0QsS0FBS20wRixhQUM5Qm4wRixLQUFLc3FFLEtBQUt3dkIsTUFBTTFqRCxPQUFPcDJDLE1BQ3ZCLE1BQU04SixFQUFROUosS0FBS3MwRixXQUNuQnhxRixHQUFTQSxFQUFNc3NDLE9BQU9wMkMsTUFDdEJBLEtBQUswM0QsUUFBVTEzRCxLQUFLMDNELE9BQU9qcUQsU0FBUzRNLE9BQU9yYSxNQUMzQ0EsS0FBSzByQixjQUFXOXBCLEVBQ2hCOGpFLEdBQVkxbEUsS0FBSzY1RixpQkFDckIsQ0FFQSxXQUFBb0MsR0FDSWo4RixLQUFLbTVGLHVCQUF3QixDQUNqQyxDQUNBLGFBQUErQyxHQUNJbDhGLEtBQUttNUYsdUJBQXdCLENBQ2pDLENBQ0EsZUFBQWdELEdBQ0ksT0FBT244RixLQUFLbTVGLHVCQUF5Qm41RixLQUFLbzVGLHFCQUM5QyxDQUNBLHNCQUFBaUMsR0FDSSxPQUFRcjdGLEtBQUttdkYsb0JBQ1JudkYsS0FBSzAzRCxRQUFVMTNELEtBQUswM0QsT0FBTzJqQywyQkFDNUIsQ0FDUixDQUVBLFdBQUFlLEdBQ1FwOEYsS0FBS204RixvQkFFVG44RixLQUFLazNGLFlBQWEsRUFDbEJsM0YsS0FBSzg1RixPQUFTOTVGLEtBQUs4NUYsTUFBTXh5RixRQUFRKzBGLElBQ2pDcjhGLEtBQUs4NEYsY0FDVCxDQUNBLG9CQUFBd0QsR0FDSSxNQUFNLGNBQUU3a0MsR0FBa0J6M0QsS0FBS21OLFFBQy9CLE9BQU9zcUQsR0FBaUJBLEVBQWN3UixXQUFXN0ssaUJBQ3JELENBQ0EsVUFBQSsxQixDQUFXb0ksR0FBd0IsR0FFL0IsR0FEQXY4RixLQUFLc3FFLEtBQUttdkIsaUJBQWtCLEVBQ3hCejVGLEtBQUtzcUUsS0FBSzZ4QixrQkFFVixZQURBbjhGLEtBQUttTixRQUFRODdFLGdCQUFrQmpwRixLQUFLbU4sUUFBUTg3RSxrQkFJaEQsSUFEQ2pwRixLQUFLc3FFLEtBQUs0c0IsWUFBY2wzRixLQUFLc3FFLEtBQUs4eEIsY0FDL0JwOEYsS0FBS20zRixjQUNMLE9BQ0puM0YsS0FBS20zRixlQUFnQixFQUNyQixJQUFLLElBQUk3MUYsRUFBSSxFQUFHQSxFQUFJdEIsS0FBSzA1QyxLQUFLdDdDLE9BQVFrRCxJQUFLLENBQ3ZDLE1BQU0rbEIsRUFBT3JuQixLQUFLMDVDLEtBQUtwNEMsR0FDdkIrbEIsRUFBS2t5RSxzQkFBdUIsRUFDNUJseUUsRUFBSzJxRSxhQUFhLFlBQ2QzcUUsRUFBS2xhLFFBQVEydUYsWUFDYnowRSxFQUFLOHNFLFlBQVcsRUFFeEIsQ0FDQSxNQUFNLFNBQUVqOUIsRUFBUSxPQUFFaEIsR0FBV2wyRCxLQUFLbU4sUUFDbEMsUUFBaUJ2TCxJQUFiczFELElBQTJCaEIsRUFDM0IsT0FDSixNQUFNa0ksRUFBb0JwK0QsS0FBS3M4Rix1QkFDL0J0OEYsS0FBS3c4RiwyQkFBNkJwK0IsRUFDNUJBLEVBQWtCcCtELEtBQUttK0QsYUFBYyxTQUNyQ3Y4RCxFQUNONUIsS0FBS3k4RixpQkFDTEYsR0FBeUJ2OEYsS0FBS3k2RixnQkFBZ0IsYUFDbEQsQ0FDQSxNQUFBdmtELEdBTUksR0FMQWwyQyxLQUFLMDVGLGlCQUFrQixFQUNFMTVGLEtBQUttOEYsa0JBUTFCLE9BSEFuOEYsS0FBS2s4RixnQkFDTGw4RixLQUFLNDVGLHlCQUNMNTVGLEtBQUs4NUYsTUFBTXh5RixRQUFRbzFGLElBR2xCMThGLEtBQUtrM0YsWUFDTmwzRixLQUFLODVGLE1BQU14eUYsUUFBUXExRixJQUV2QjM4RixLQUFLazNGLFlBQWEsRUFJbEJsM0YsS0FBSzg1RixNQUFNeHlGLFFBQVFzMUYsSUFLbkI1OEYsS0FBSzg1RixNQUFNeHlGLFFBQVEycUYsSUFLbkJqeUYsS0FBSzg1RixNQUFNeHlGLFFBQVF1MUYsSUFDbkI3OEYsS0FBSzQ1RixvQkFNTCxNQUFNejdFLEVBQU15MUIsWUFBWXoxQixNQUN4QnduRCxHQUFVOWUsTUFBUXVULEdBQU0sRUFBRyxJQUFPLEdBQUlqOEMsRUFBTXduRCxHQUFVTSxXQUN0RE4sR0FBVU0sVUFBWTluRCxFQUN0QnduRCxHQUFVTyxjQUFlLEVBQ3pCTixHQUFNMXZCLE9BQU9tdkIsUUFBUU0sSUFDckJDLEdBQU1rM0IsVUFBVXozQixRQUFRTSxJQUN4QkMsR0FBTTFoRSxPQUFPbWhFLFFBQVFNLElBQ3JCQSxHQUFVTyxjQUFlLENBQzdCLENBQ0EsU0FBQTZ0QixHQUNTL3pGLEtBQUswNUYsa0JBQ04xNUYsS0FBSzA1RixpQkFBa0IsRUFDdkIvcUUsZ0JBQWUsSUFBTTN1QixLQUFLazJDLFdBRWxDLENBQ0EsaUJBQUEwakQsR0FDSTU1RixLQUFLODVGLE1BQU14eUYsUUFBUXkxRixJQUNuQi84RixLQUFLdzZGLFlBQVlsekYsUUFBUTAxRixHQUM3QixDQUNBLHdCQUFBQyxHQUNJLEdBQU1ILFVBQVU5OEYsS0FBSzY1RixrQkFBa0IsR0FBTyxFQUNsRCxDQUNBLHlCQUFBbEYsR0FNSSxHQUFNNVIsWUFBVyxLQUNUL2lGLEtBQUttM0YsY0FDTG4zRixLQUFLc3FFLEtBQUt5cEIsWUFHVi96RixLQUFLc3FFLEtBQUtxdkIsbUJBQ2QsR0FFUixDQUlBLGNBQUE4QyxJQUNRejhGLEtBQUtnM0YsVUFBYWgzRixLQUFLMHJCLFdBRTNCMXJCLEtBQUtnM0YsU0FBV2gzRixLQUFLazlGLFVBQ3pCLENBQ0EsWUFBQWpMLEdBQ0ksSUFBS2p5RixLQUFLMHJCLFNBQ04sT0FHSixHQURBMXJCLEtBQUtneUYsaUJBQ0NoeUYsS0FBS21OLFFBQVFnd0YscUJBQXVCbjlGLEtBQUt5MEYsVUFDMUN6MEYsS0FBS20zRixlQUNOLE9BU0osR0FBSW4zRixLQUFLODJGLGFBQWU5MkYsS0FBSzgyRixXQUFXcHJFLFNBQ3BDLElBQUssSUFBSXBxQixFQUFJLEVBQUdBLEVBQUl0QixLQUFLMDVDLEtBQUt0N0MsT0FBUWtELElBQ3JCdEIsS0FBSzA1QyxLQUFLcDRDLEdBQ2xCMHdGLGVBR2IsTUFBTW9MLEVBQWFwOUYsS0FBS2syRCxPQUN4QmwyRCxLQUFLazJELE9BQVNsMkQsS0FBS2s5RixTQUFRLEdBQzNCbDlGLEtBQUtxOUYsZ0JBQWtCN1EsS0FDdkJ4c0YsS0FBS20zRixlQUFnQixFQUNyQm4zRixLQUFLbXpGLHFCQUFrQnZ4RixFQUN2QjVCLEtBQUt5NkYsZ0JBQWdCLFVBQVd6NkYsS0FBS2syRCxPQUFPbzVCLFdBQzVDLE1BQU0sY0FBRTczQixHQUFrQnozRCxLQUFLbU4sUUFDL0JzcUQsR0FDSUEsRUFBYzRxQixPQUFPLGdCQUFpQnJpRixLQUFLazJELE9BQU9vNUIsVUFBVzhOLEVBQWFBLEVBQVc5TixlQUFZMXRGLEVBQ3pHLENBQ0EsWUFBQW93RixDQUFhc0wsRUFBUSxXQUNqQixJQUFJQyxFQUFtQjd6QyxRQUFRMXBELEtBQUttTixRQUFRcXdGLGNBQWdCeDlGLEtBQUswckIsVUFDN0QxckIsS0FBSyt3RixRQUNML3dGLEtBQUsrd0YsT0FBTytILGNBQWdCOTRGLEtBQUtzcUUsS0FBS3d1QixhQUN0Qzk0RixLQUFLK3dGLE9BQU91TSxRQUFVQSxJQUN0QkMsR0FBbUIsR0FFbkJBLElBQ0F2OUYsS0FBSyt3RixPQUFTLENBQ1YrSCxZQUFhOTRGLEtBQUtzcUUsS0FBS3d1QixZQUN2QndFLFFBQ0FHLE9BQVE3RSxFQUFrQjU0RixLQUFLMHJCLFVBQy9CcEUsT0FBUXF4RSxFQUFjMzRGLEtBQUswckIsV0FHdkMsQ0FDQSxjQUFBbXRFLEdBQ0ksSUFBS0EsRUFDRCxPQUNKLE1BQU02RSxFQUFtQjE5RixLQUFLbTNGLGVBQWlCbjNGLEtBQUt1NUYscUJBQzlDb0UsRUFBZ0IzOUYsS0FBS216RixrQkFBb0JpRCxHQUFZcDJGLEtBQUttekYsaUJBQzFELzBCLEVBQW9CcCtELEtBQUtzOEYsdUJBQ3pCc0IsRUFBeUJ4L0IsRUFDekJBLEVBQWtCcCtELEtBQUttK0QsYUFBYyxTQUNyQ3Y4RCxFQUNBaThGLEVBQThCRCxJQUEyQjU5RixLQUFLdzhGLDJCQUNoRWtCLElBQ0NDLEdBQ0dwL0IsR0FBYXYrRCxLQUFLbStELGVBQ2xCMC9CLEtBQ0poRixFQUFlNzRGLEtBQUswckIsU0FBVWt5RSxHQUM5QjU5RixLQUFLdTVGLHNCQUF1QixFQUM1QnY1RixLQUFLdTJGLGlCQUViLENBQ0EsT0FBQTJHLENBQVFZLEdBQWtCLEdBQ3RCLE1BQU1DLEVBQVUvOUYsS0FBS2d4RixpQkFDckIsSUFBSTFCLEVBQVl0dkYsS0FBS2crRixvQkFBb0JELEdBaTlCckQsSUFBa0IzUSxFQXY4Qk4sT0FKSTBRLElBQ0F4TyxFQUFZdHZGLEtBQUs4OUYsZ0JBQWdCeE8sSUEyOEI3QzJPLElBRGM3USxFQXg4QkdrQyxHQXk4Qkg1aUUsR0FDZHV4RSxHQUFVN1EsRUFBSWgzRCxHQXo4QkMsQ0FDSDBpRSxZQUFhOTRGLEtBQUtzcUUsS0FBS3d1QixZQUN2Qm9GLFlBQWFILEVBQ2J6TyxZQUNBbnhCLGFBQWMsQ0FBQyxFQUNmbnJELE9BQVFoVCxLQUFLWSxHQUVyQixDQUNBLGNBQUFvd0YsR0FDSSxNQUFNLGNBQUV2NUIsR0FBa0J6M0QsS0FBS21OLFFBQy9CLElBQUtzcUQsRUFDRCxPQUFPKzBCLEtBQ1gsTUFBTVksRUFBTTMxQixFQUFjdTJCLHNCQUVwQixPQUFFK0MsR0FBVy93RixLQUFLc3FFLEtBS3hCLE9BSkl5bUIsSUFDQXhELEdBQWNILEVBQUkxZ0UsRUFBR3FrRSxFQUFPenBFLE9BQU9vRixHQUNuQzZnRSxHQUFjSCxFQUFJaDNELEVBQUcyNkQsRUFBT3pwRSxPQUFPOE8sSUFFaENnM0QsQ0FDWCxDQUNBLG1CQUFBNFEsQ0FBb0I1USxHQUNoQixNQUFNK1EsRUFBbUIzUixLQUN6Qm1KLEdBQVl3SSxFQUFrQi9RLEdBSzlCLElBQUssSUFBSTlyRixFQUFJLEVBQUdBLEVBQUl0QixLQUFLMDVDLEtBQUt0N0MsT0FBUWtELElBQUssQ0FDdkMsTUFBTStsQixFQUFPcm5CLEtBQUswNUMsS0FBS3A0QyxJQUNqQixPQUFFeXZGLEVBQU0sUUFBRTVqRixHQUFZa2EsRUFDNUIsR0FBSUEsSUFBU3JuQixLQUFLc3FFLE1BQVF5bUIsR0FBVTVqRixFQUFRcXdGLGFBQWMsQ0FLdEQsR0FBSXpNLEVBQU8wTSxPQUFRLENBQ2Y5SCxHQUFZd0ksRUFBa0IvUSxHQUM5QixNQUFRMkQsT0FBUXFOLEdBQWVwK0YsS0FBS3NxRSxLQUtoQzh6QixJQUNBN1EsR0FBYzRRLEVBQWlCenhFLEdBQUkweEUsRUFBVzkyRSxPQUFPb0YsR0FDckQ2Z0UsR0FBYzRRLEVBQWlCL25FLEdBQUlnb0UsRUFBVzkyRSxPQUFPOE8sR0FFN0QsQ0FDQW0zRCxHQUFjNFEsRUFBaUJ6eEUsRUFBR3FrRSxFQUFPenBFLE9BQU9vRixHQUNoRDZnRSxHQUFjNFEsRUFBaUIvbkUsRUFBRzI2RCxFQUFPenBFLE9BQU84TyxFQUNwRCxDQUNKLENBQ0EsT0FBTytuRSxDQUNYLENBQ0EsY0FBQUUsQ0FBZWpSLEVBQUtrUixHQUFnQixHQUNoQyxNQUFNQyxFQUFpQi9SLEtBQ3ZCbUosR0FBWTRJLEVBQWdCblIsR0FDNUIsSUFBSyxJQUFJOXJGLEVBQUksRUFBR0EsRUFBSXRCLEtBQUswNUMsS0FBS3Q3QyxPQUFRa0QsSUFBSyxDQUN2QyxNQUFNK2xCLEVBQU9ybkIsS0FBSzA1QyxLQUFLcDRDLElBQ2xCZzlGLEdBQ0RqM0UsRUFBS2xhLFFBQVFxd0YsY0FDYm4yRSxFQUFLMHBFLFFBQ0wxcEUsSUFBU0EsRUFBS2lqRCxNQUNkeWpCLEdBQWF3USxFQUFnQixDQUN6Qjd4RSxHQUFJckYsRUFBSzBwRSxPQUFPenBFLE9BQU9vRixFQUN2QjBKLEdBQUkvTyxFQUFLMHBFLE9BQU96cEUsT0FBTzhPLElBRzFCbW9DLEdBQWFsM0MsRUFBSzgyQyxlQUV2QjR2QixHQUFhd1EsRUFBZ0JsM0UsRUFBSzgyQyxhQUN0QyxDQUlBLE9BSElJLEdBQWF2K0QsS0FBS20rRCxlQUNsQjR2QixHQUFhd1EsRUFBZ0J2K0YsS0FBS20rRCxjQUUvQm9nQyxDQUNYLENBQ0EsZUFBQVQsQ0FBZ0IxUSxHQUNaLE1BQU1vUixFQUFzQmhTLEtBQzVCbUosR0FBWTZJLEVBQXFCcFIsR0FDakMsSUFBSyxJQUFJOXJGLEVBQUksRUFBR0EsRUFBSXRCLEtBQUswNUMsS0FBS3Q3QyxPQUFRa0QsSUFBSyxDQUN2QyxNQUFNK2xCLEVBQU9ybkIsS0FBSzA1QyxLQUFLcDRDLEdBQ3ZCLElBQUsrbEIsRUFBS3FFLFNBQ04sU0FDSixJQUFLNnlDLEdBQWFsM0MsRUFBSzgyQyxjQUNuQixTQUNKeXVCLEdBQVN2bEUsRUFBSzgyQyxlQUFpQjkyQyxFQUFLbzFFLGlCQUNwQyxNQUFNdkcsRUFBWTFKLEtBRWxCbUosR0FBWU8sRUFESTd1RSxFQUFLMnBFLGtCQUVyQmlGLEdBQW9CdUksRUFBcUJuM0UsRUFBSzgyQyxhQUFjOTJDLEVBQUsydkUsU0FBVzN2RSxFQUFLMnZFLFNBQVMxSCxlQUFZMXRGLEVBQVdzMEYsRUFDckgsQ0FJQSxPQUhJMzNCLEdBQWF2K0QsS0FBS20rRCxlQUNsQjgzQixHQUFvQnVJLEVBQXFCeCtGLEtBQUttK0QsY0FFM0NxZ0MsQ0FDWCxDQUNBLGNBQUFDLENBQWU1M0MsR0FDWDdtRCxLQUFLMCtGLFlBQWM3M0MsRUFDbkI3bUQsS0FBS3NxRSxLQUFLMnlCLDJCQUNWajlGLEtBQUtnNUYsbUJBQW9CLENBQzdCLENBQ0EsVUFBQS9FLENBQVc5bUYsR0FDUG5OLEtBQUttTixRQUFVLElBQ1JuTixLQUFLbU4sV0FDTEEsRUFDSGlxRixlQUFpQ3gxRixJQUF0QnVMLEVBQVFpcUYsV0FBMEJqcUYsRUFBUWlxRixVQUU3RCxDQUNBLGlCQUFBc0YsR0FDSTE4RixLQUFLK3dGLFlBQVNudkYsRUFDZDVCLEtBQUtrMkQsWUFBU3QwRCxFQUNkNUIsS0FBS2czRixjQUFXcDFGLEVBQ2hCNUIsS0FBS3c4RixnQ0FBNkI1NkYsRUFDbEM1QixLQUFLMCtGLGlCQUFjOThGLEVBQ25CNUIsS0FBS00sWUFBU3NCLEVBQ2Q1QixLQUFLbTNGLGVBQWdCLENBQ3pCLENBQ0Esa0NBQUF3SCxHQUNTMytGLEtBQUs0K0YsZ0JBUU41K0YsS0FBSzQrRixlQUFlQywyQkFDcEJsNUIsR0FBVU0sV0FDVmptRSxLQUFLNCtGLGVBQWU1RSxvQkFBbUIsRUFFL0MsQ0FDQSxrQkFBQUEsQ0FBbUI4RSxHQUFxQixHQUNwQyxJQUFJditCLEVBTUosTUFBTWsyQixFQUFPejJGLEtBQUsrK0YsVUFDbEIvK0YsS0FBS2c1RixvQkFBc0JoNUYsS0FBS2c1RixrQkFBb0J2QyxFQUFLdUMsbUJBQ3pEaDVGLEtBQUtrNUYsbUJBQXFCbDVGLEtBQUtrNUYsaUJBQW1CekMsRUFBS3lDLGtCQUN2RGw1RixLQUFLaTVGLDBCQUE0Qmo1RixLQUFLaTVGLHdCQUEwQnhDLEVBQUt3Qyx5QkFDckUsTUFBTStGLEVBQVd0MUMsUUFBUTFwRCxLQUFLdTNGLGVBQWlCdjNGLE9BQVN5MkYsRUFVeEQsS0FMa0JxSSxHQUNiRSxHQUFZaC9GLEtBQUtpNUYseUJBQ2xCajVGLEtBQUtnNUYsb0JBQ21CLFFBQXRCejRCLEVBQUt2Z0UsS0FBSzAzRCxjQUEyQixJQUFQNkksT0FBZ0IsRUFBU0EsRUFBR3k0QixvQkFDNURoNUYsS0FBS2kvRixnQ0FFTCxPQUNKLE1BQU0sT0FBRS9vQyxFQUFNLFNBQUVnQixHQUFhbDNELEtBQUttTixRQUlsQyxHQUFLbk4sS0FBS2syRCxTQUFZQSxHQUFVZ0IsR0FBaEMsQ0FTQSxHQVBBbDNELEtBQUs2K0YseUJBQTJCbDVCLEdBQVVNLFdBT3JDam1FLEtBQUswK0YsY0FBZ0IxK0YsS0FBS3M3RixlQUFnQixDQUUzQyxNQUFNc0QsRUFBaUI1K0YsS0FBS2svRiw2QkFDeEJOLEdBQ0FBLEVBQWUxb0MsUUFDWSxJQUEzQmwyRCxLQUFLdTZGLG1CQUNMdjZGLEtBQUs0K0YsZUFBaUJBLEVBQ3RCNStGLEtBQUsyK0YscUNBQ0wzK0YsS0FBS3M3RixlQUFpQjlPLEtBQ3RCeHNGLEtBQUttL0YscUJBQXVCM1MsS0FDNUJaLEdBQXFCNXJGLEtBQUttL0YscUJBQXNCbi9GLEtBQUtrMkQsT0FBT281QixVQUFXc1AsRUFBZTFvQyxPQUFPbzVCLFdBQzdGcUcsR0FBWTMxRixLQUFLczdGLGVBQWdCdDdGLEtBQUttL0YsdUJBR3RDbi9GLEtBQUs0K0YsZUFBaUI1K0YsS0FBS3M3RixvQkFBaUIxNUYsQ0FFcEQsQ0FLQSxHQUFLNUIsS0FBS3M3RixnQkFBbUJ0N0YsS0FBSzArRixZQUFsQyxDdkJ0cUJaLElBQXlCcCtGLEVBQVFpaEQsRUFBVW1XLEV1QitzQi9CLEdBcENLMTNELEtBQUtNLFNBQ05OLEtBQUtNLE9BQVNrc0YsS0FDZHhzRixLQUFLby9GLHFCQUF1QjVTLE1BSzVCeHNGLEtBQUtzN0YsZ0JBQ0x0N0YsS0FBS20vRixzQkFDTG4vRixLQUFLNCtGLGdCQUNMNStGLEtBQUs0K0YsZUFBZXQrRixRQUNwQk4sS0FBSzIrRixxQ3ZCdHJCSXIrRixFdUJ1ckJPTixLQUFLTSxPdkJ2ckJKaWhELEV1QnVyQll2aEQsS0FBS3M3RixldkJ2ckJQNWpDLEV1QnVyQnVCMTNELEtBQUs0K0YsZUFBZXQrRixPdkJ0ckJsRm9yRixHQUFpQnByRixFQUFPb3NCLEVBQUc2MEIsRUFBUzcwQixFQUFHZ3JDLEVBQU9ockMsR0FDOUNnL0QsR0FBaUJwckYsRUFBTzgxQixFQUFHbXJCLEVBQVNuckIsRUFBR3NoQyxFQUFPdGhDLEl1QjByQjdCcDJCLEtBQUswK0YsYUFDTmgxQyxRQUFRMXBELEtBQUt1M0YsY0FFYnYzRixLQUFLTSxPQUFTTixLQUFLcStGLGVBQWVyK0YsS0FBS2syRCxPQUFPbzVCLFdBRzlDcUcsR0FBWTMxRixLQUFLTSxPQUFRTixLQUFLazJELE9BQU9vNUIsV0FFekNuQyxHQUFjbnRGLEtBQUtNLE9BQVFOLEtBQUswK0YsY0FNaEMvSSxHQUFZMzFGLEtBQUtNLE9BQVFOLEtBQUtrMkQsT0FBT281QixXQUtyQ3R2RixLQUFLaS9GLCtCQUFnQyxDQUNyQ2ovRixLQUFLaS9GLGdDQUFpQyxFQUN0QyxNQUFNTCxFQUFpQjUrRixLQUFLay9GLDZCQUN4Qk4sR0FDQWwxQyxRQUFRazFDLEVBQWVySCxnQkFDbkI3dEMsUUFBUTFwRCxLQUFLdTNGLGdCQUNoQnFILEVBQWV6eEYsUUFBUXF3RixjQUN4Qm9CLEVBQWV0K0YsUUFDWSxJQUEzQk4sS0FBS3U2RixtQkFDTHY2RixLQUFLNCtGLGVBQWlCQSxFQUN0QjUrRixLQUFLMitGLHFDQUNMMytGLEtBQUtzN0YsZUFBaUI5TyxLQUN0QnhzRixLQUFLbS9GLHFCQUF1QjNTLEtBQzVCWixHQUFxQjVyRixLQUFLbS9GLHFCQUFzQm4vRixLQUFLTSxPQUFRcytGLEVBQWV0K0YsUUFDNUVxMUYsR0FBWTMxRixLQUFLczdGLGVBQWdCdDdGLEtBQUttL0YsdUJBR3RDbi9GLEtBQUs0K0YsZUFBaUI1K0YsS0FBS3M3RixvQkFBaUIxNUYsQ0FFcEQsQ0FJQXcyRixHQUFvQkUsc0JBL0RWLENBOUJBLENBOEZkLENBQ0EsMEJBQUE0RyxHQUNJLEdBQUtsL0YsS0FBSzAzRCxTQUNOazFCLEdBQVM1c0YsS0FBSzAzRCxPQUFPeUcsZ0JBQ3JCMHVCLEdBQWU3c0YsS0FBSzAzRCxPQUFPeUcsY0FHL0IsT0FBSW4rRCxLQUFLMDNELE9BQU8ybkMsZUFDTHIvRixLQUFLMDNELE9BR0wxM0QsS0FBSzAzRCxPQUFPd25DLDRCQUUzQixDQUNBLFlBQUFHLEdBQ0ksT0FBTzMxQyxTQUFTMXBELEtBQUtzN0YsZ0JBQ2pCdDdGLEtBQUswK0YsYUFDTDErRixLQUFLbU4sUUFBUTJ1RixhQUNiOTdGLEtBQUtrMkQsT0FDYixDQUNBLGNBQUErakMsR0FDSSxJQUFJMTVCLEVBQ0osTUFBTWsyQixFQUFPejJGLEtBQUsrK0YsVUFDWkMsRUFBV3QxQyxRQUFRMXBELEtBQUt1M0YsZUFBaUJ2M0YsT0FBU3kyRixFQUN4RCxJQUFJNkksR0FBVSxFQXVCZCxJQWxCSXQvRixLQUFLZzVGLG9CQUE2QyxRQUF0Qno0QixFQUFLdmdFLEtBQUswM0QsY0FBMkIsSUFBUDZJLE9BQWdCLEVBQVNBLEVBQUd5NEIsc0JBQ3RGc0csR0FBVSxHQU1WTixJQUNDaC9GLEtBQUtpNUYseUJBQTJCajVGLEtBQUtrNUYsb0JBQ3RDb0csR0FBVSxHQU1WdC9GLEtBQUs2K0YsMkJBQTZCbDVCLEdBQVVNLFlBQzVDcTVCLEdBQVUsR0FFVkEsRUFDQSxPQUNKLE1BQU0sT0FBRXBwQyxFQUFNLFNBQUVnQixHQUFhbDNELEtBQUttTixRQVdsQyxHQU5Bbk4sS0FBSys0RixnQkFBa0JydkMsUUFBUzFwRCxLQUFLMDNELFFBQVUxM0QsS0FBSzAzRCxPQUFPcWhDLGlCQUN2RC80RixLQUFLdzBGLGtCQUNMeDBGLEtBQUt1L0Ysa0JBQ0p2L0YsS0FBSys0RixrQkFDTi80RixLQUFLMCtGLFlBQWMxK0YsS0FBS3M3RixvQkFBaUIxNUYsSUFFeEM1QixLQUFLazJELFNBQVlBLElBQVVnQixFQUM1QixPQUtKeStCLEdBQVkzMUYsS0FBS3E5RixnQkFBaUJyOUYsS0FBS2syRCxPQUFPbzVCLFdBSTlDLE1BQU1rUSxFQUFpQngvRixLQUFLa3pGLFVBQVV4bUUsRUFDaEMreUUsRUFBaUJ6L0YsS0FBS2t6RixVQUFVOThELEdqQmp5QmxELFNBQXlCZzNELEVBQUs4RixFQUFXNXRDLEVBQVVvNkMsR0FBcUIsR0FDcEUsTUFBTUMsRUFBYXI2QyxFQUFTbG5ELE9BQzVCLElBQUt1aEcsRUFDRCxPQUdKLElBQUl0NEUsRUFDQXcvQixFQUZKcXNDLEVBQVV4bUUsRUFBSXdtRSxFQUFVOThELEVBQUksRUFHNUIsSUFBSyxJQUFJOTBCLEVBQUksRUFBR0EsRUFBSXErRixFQUFZcitGLElBQUssQ0FDakMrbEIsRUFBT2krQixFQUFTaGtELEdBQ2hCdWxELEVBQVF4L0IsRUFBSzhyRSxnQkFLYixNQUFNem5FLEVBQVdyRSxFQUFLcUUsU0FDbEJBLEdBQ0FBLEVBQVM3WixPQUNrQixhQUEzQjZaLEVBQVM3WixNQUFNbzFCLFVBR2Z5NEQsR0FDQXI0RSxFQUFLbGEsUUFBUXF3RixjQUNibjJFLEVBQUswcEUsUUFDTDFwRSxJQUFTQSxFQUFLaWpELE1BQ2R5akIsR0FBYVgsRUFBSyxDQUNkMWdFLEdBQUlyRixFQUFLMHBFLE9BQU96cEUsT0FBT29GLEVBQ3ZCMEosR0FBSS9PLEVBQUswcEUsT0FBT3pwRSxPQUFPOE8sSUFHM0J5d0IsSUFFQXFzQyxFQUFVeG1FLEdBQUttNkIsRUFBTW42QixFQUFFOHRDLE1BQ3ZCMDRCLEVBQVU5OEQsR0FBS3l3QixFQUFNendCLEVBQUVva0MsTUFFdkIyeUIsR0FBY0MsRUFBS3ZtQyxJQUVuQjY0QyxHQUFzQm5oQyxHQUFhbDNDLEVBQUs4MkMsZUFDeEM0dkIsR0FBYVgsRUFBSy9sRSxFQUFLODJDLGNBRS9CLENBS0ErMEIsRUFBVXhtRSxFQUFJMmdFLEdBQWM2RixFQUFVeG1FLEdBQ3RDd21FLEVBQVU5OEQsRUFBSWkzRCxHQUFjNkYsRUFBVTk4RCxFQUMxQyxDaUJ1dkJZd3BFLENBQWdCNS9GLEtBQUtxOUYsZ0JBQWlCcjlGLEtBQUtrekYsVUFBV2x6RixLQUFLMDVDLEtBQU1zbEQsSUFLN0R2SSxFQUFLdmdDLFFBQ0p1Z0MsRUFBS24yRixRQUNnQixJQUFyQk4sS0FBS2t6RixVQUFVeG1FLEdBQWdDLElBQXJCMXNCLEtBQUtrekYsVUFBVTk4RCxJQUMxQ3FnRSxFQUFLbjJGLE9BQVNtMkYsRUFBS3ZnQyxPQUFPbzVCLFdBRTlCLE1BQU0sT0FBRWh2RixHQUFXbTJGLEVBQ25CLElBQUtuMkYsRUFXRCxZQUxJTixLQUFLNi9GLHNCQUNMNy9GLEtBQUttekYsZ0JBQWtCNUcsS0FDdkJ2c0YsS0FBSzYvRixvQkFBc0IsT0FDM0I3L0YsS0FBS3UyRixtQkFJUnYyRixLQUFLbXpGLGtCQUNObnpGLEtBQUttekYsZ0JBQWtCNUcsS0FDdkJ2c0YsS0FBSzgvRiw2QkFBK0J2VCxNQUV4QyxNQUFNd1QsRUFBMEIvL0YsS0FBSzYvRixvQkFVckNwVSxHQUFhenJGLEtBQUttekYsZ0JBQWlCbnpGLEtBQUtxOUYsZ0JBQWlCLzhGLEVBQVFOLEtBQUttK0QsY0FDdEVuK0QsS0FBSzYvRixvQkFBc0JwSSxHQUF5QnozRixLQUFLbXpGLGdCQUFpQm56RixLQUFLa3pGLFdBQzNFbHpGLEtBQUs2L0Ysc0JBQXdCRSxHQUM3Qi8vRixLQUFLa3pGLFVBQVV4bUUsSUFBTTh5RSxHQUNyQngvRixLQUFLa3pGLFVBQVU5OEQsSUFBTXFwRSxJQUNyQnovRixLQUFLcTZGLGNBQWUsRUFDcEJyNkYsS0FBS3UyRixpQkFDTHYyRixLQUFLeTZGLGdCQUFnQixtQkFBb0JuNkYsSUFLN0M4M0YsR0FBb0JHLHdCQUN4QixDQUNBLElBQUFsQixHQUNJcjNGLEtBQUtzNkYsV0FBWSxDQUVyQixDQUNBLElBQUF6RCxHQUNJNzJGLEtBQUtzNkYsV0FBWSxDQUVyQixDQUNBLGNBQUEvRCxDQUFleUosR0FBWSxHQUV2QixHQURBaGdHLEtBQUttTixRQUFRb3BGLGdCQUFrQnYyRixLQUFLbU4sUUFBUW9wRixpQkFDeEN5SixFQUFXLENBQ1gsTUFBTWwyRixFQUFROUosS0FBS3MwRixXQUNuQnhxRixHQUFTQSxFQUFNeXNGLGdCQUNuQixDQUNJdjJGLEtBQUt1M0YsZUFBaUJ2M0YsS0FBS3UzRixhQUFhN3JFLFdBQ3hDMXJCLEtBQUt1M0Ysa0JBQWUzMUYsRUFFNUIsQ0FDQSxrQkFBQW02RixDQUFtQmwxQyxFQUFPZzFDLEdBQStCLEdBQ3JELE1BQU03RSxFQUFXaDNGLEtBQUtnM0YsU0FDaEJpSixFQUF1QmpKLEVBQ3ZCQSxFQUFTNzRCLGFBQ1QsQ0FBQyxFQUNEK2hDLEVBQWMsSUFBS2xnRyxLQUFLbStELGNBQ3hCdWdDLEVBQWNuUyxLQUNmdnNGLEtBQUs0K0YsZ0JBQ0w1K0YsS0FBSzQrRixlQUFlenhGLFFBQVEydUYsYUFDN0I5N0YsS0FBS3M3RixlQUFpQnQ3RixLQUFLbS9GLDBCQUF1QnY5RixHQUV0RDVCLEtBQUtpL0YsZ0NBQWtDcEQsRUFDdkMsTUFBTXNFLEVBQWlCM1QsS0FHakI0VCxHQUZpQnBKLEVBQVdBLEVBQVNoa0YsWUFBU3BSLE1BQy9CNUIsS0FBS2syRCxPQUFTbDJELEtBQUtrMkQsT0FBT2xqRCxZQUFTcFIsR0FFbERrSSxFQUFROUosS0FBS3MwRixXQUNiK0wsR0FBZ0J2MkYsR0FBU0EsRUFBTXlxRixRQUFRbjJGLFFBQVUsRUFDakRraUcsRUFBeUI1MkMsUUFBUTAyQyxJQUNsQ0MsSUFDMEIsSUFBM0JyZ0csS0FBS21OLFFBQVFpcUYsWUFDWnAzRixLQUFLMDVDLEtBQUtpRCxLQUFLNGpELEtBRXBCLElBQUlDLEVBREp4Z0csS0FBS3U2RixrQkFBb0IsRUFFekJ2NkYsS0FBS3lnRyxlQUFrQnQvQixJQUNuQixNQUFNMFEsRUFBVzFRLEVBQVMsSUxyNkIxQyxJQUFtQjU3RCxFQUFHQyxFS3k2Q05rdUUsRUFBUTcwQixFQUFNekYsRUFBSTl6QyxFQW5nQmxCbzdGLEdBQWFoQyxFQUFZaHlFLEVBQUdtNkIsRUFBTW42QixFQUFHbWxELEdBQ3JDNnVCLEdBQWFoQyxFQUFZdG9FLEVBQUd5d0IsRUFBTXp3QixFQUFHeTdDLEdBQ3JDN3hFLEtBQUt5K0YsZUFBZUMsR0FDaEIxK0YsS0FBS3M3RixnQkFDTHQ3RixLQUFLbS9GLHNCQUNMbi9GLEtBQUtrMkQsUUFDTGwyRCxLQUFLNCtGLGdCQUNMNStGLEtBQUs0K0YsZUFBZTFvQyxTQUNwQjAxQixHQUFxQnVVLEVBQWdCbmdHLEtBQUtrMkQsT0FBT281QixVQUFXdHZGLEtBQUs0K0YsZUFBZTFvQyxPQUFPbzVCLFdBMmYzRjViLEVBMWZXMXpFLEtBQUtzN0YsZUEwZlJ6OEMsRUExZndCNytDLEtBQUttL0YscUJBMGZ2Qi9sRCxFQTFmNkMrbUQsRUEwZnpDNzZGLEVBMWZ5RHVzRSxFQTJmdkY4dUIsR0FBUWp0QixFQUFPaG5ELEVBQUdteUIsRUFBS255QixFQUFHMHNCLEVBQUcxc0IsRUFBR3BuQixHQUNoQ3E3RixHQUFRanRCLEVBQU90OUMsRUFBR3lvQixFQUFLem9CLEVBQUdnakIsRUFBR2hqQixFQUFHOXdCLEdBdmZaazdGLElMcDdCTGo3RixFS3E3QmV2RixLQUFLczdGLGVMcjdCakI5MUYsRUtxN0JpQ2c3RixFTHA3QjNDajdGLEVBQUVtbkIsRUFBRWpFLE1BQVFqakIsRUFBRWtuQixFQUFFakUsS0FDcEJsakIsRUFBRW1uQixFQUFFMnRDLE1BQVE3MEQsRUFBRWtuQixFQUFFMnRDLEtBQ2hCOTBELEVBQUU2d0IsRUFBRTNOLE1BQVFqakIsRUFBRTR3QixFQUFFM04sS0FDaEJsakIsRUFBRTZ3QixFQUFFaWtDLE1BQVE3MEQsRUFBRTR3QixFQUFFaWtDLE9LazdCQXI2RCxLQUFLZzVGLG1CQUFvQixHQUV4QndILElBQ0RBLEVBQXFCaFUsTUFDekJtSixHQUFZNkssRUFBb0J4Z0csS0FBS3M3RixpQkFFckM4RSxJQUNBcGdHLEtBQUtpM0YsZ0JBQWtCaUosRVIzN0IzQyxTQUFtQjUvRixFQUFRc2dHLEVBQVFuSyxFQUFNNWtCLEVBQVV5dUIsRUFBd0JELEdBQ25FQyxHQUNBaGdHLEVBQU9xUSxRQUFVK3lELEdBQUksT0FFSjloRSxJQUFqQjYwRixFQUFLOWxGLFFBQXdCOGxGLEVBQUs5bEYsUUFBVSxFQUFHMmtGLEdBQWdCempCLElBQy9EdnhFLEVBQU91Z0csWUFBY245QixRQUF1QjloRSxJQUFuQmcvRixFQUFPandGLFFBQXdCaXdGLEVBQU9qd0YsUUFBVSxFQUFHLEVBQUc2a0YsR0FBaUIzakIsS0FFM0Z3dUIsSUFDTC8vRixFQUFPcVEsUUFBVSt5RCxRQUF1QjloRSxJQUFuQmcvRixFQUFPandGLFFBQXdCaXdGLEVBQU9qd0YsUUFBVSxPQUFvQi9PLElBQWpCNjBGLEVBQUs5bEYsUUFBd0I4bEYsRUFBSzlsRixRQUFVLEVBQUdraEUsSUFLM0gsSUFBSyxJQUFJdndFLEVBQUksRUFBR0EsRUFBSTJ6RixHQUFZM3pGLElBQUssQ0FDakMsTUFBTXcvRixFQUFjLFNBQVM5TCxHQUFRMXpGLFdBQ3JDLElBQUl5L0YsRUFBZTNMLEdBQVV3TCxFQUFRRSxHQUNqQ0UsRUFBYTVMLEdBQVVxQixFQUFNcUssUUFDWmwvRixJQUFqQm0vRixRQUE2Q24vRixJQUFmby9GLElBRWxDRCxJQUFpQkEsRUFBZSxHQUNoQ0MsSUFBZUEsRUFBYSxHQUNJLElBQWpCRCxHQUNJLElBQWZDLEdBQ0E3TCxHQUFLNEwsS0FBa0I1TCxHQUFLNkwsSUFFNUIxZ0csRUFBT3dnRyxHQUFlanBGLEtBQUt3aUQsSUFBSXFKLEdBQUl3eEIsR0FBUzZMLEdBQWU3TCxHQUFTOEwsR0FBYW52QixHQUFXLElBQ3hGM1csR0FBUW56RCxLQUFLaTVGLElBQWU5bEMsR0FBUW56RCxLQUFLZzVGLE1BQ3pDemdHLEVBQU93Z0csSUFBZ0IsTUFJM0J4Z0csRUFBT3dnRyxHQUFlRSxFQUU5QixFQUlJSixFQUFPN2pDLFFBQVUwNUIsRUFBSzE1QixVQUN0Qno4RCxFQUFPeThELE9BQVMyRyxHQUFJazlCLEVBQU83akMsUUFBVSxFQUFHMDVCLEVBQUsxNUIsUUFBVSxFQUFHOFUsR0FFbEUsQ1FvNUJvQm92QixDQUFVZixFQUFhRCxFQUFzQmpnRyxLQUFLbStELGFBQWMwVCxFQUFVeXVCLEVBQXdCRCxJQUV0R3JnRyxLQUFLc3FFLEtBQUsyeUIsMkJBQ1ZqOUYsS0FBS3UyRixpQkFDTHYyRixLQUFLdTZGLGtCQUFvQjFvQixDQUFRLEVBRXJDN3hFLEtBQUt5Z0csZUFBZXpnRyxLQUFLbU4sUUFBUTJ1RixXQUFhLElBQU8sRUFDekQsQ0FDQSxjQUFBOVgsQ0FBZTcyRSxHQUNYbk4sS0FBS3k2RixnQkFBZ0Isa0JBQ3JCejZGLEtBQUt3MEYsa0JBQW9CeDBGLEtBQUt3MEYsaUJBQWlCNVosT0FDM0M1NkUsS0FBS3UzRixjQUFnQnYzRixLQUFLdTNGLGFBQWEvQyxrQkFDdkN4MEYsS0FBS3UzRixhQUFhL0MsaUJBQWlCNVosT0FFbkM1NkUsS0FBS3UvRixtQkFDTDc1QixHQUFZMWxFLEtBQUt1L0Ysa0JBQ2pCdi9GLEtBQUt1L0Ysc0JBQW1CMzlGLEdBTzVCNUIsS0FBS3UvRixpQkFBbUIsR0FBTXJwRCxRQUFPLEtBQ2pDdzhDLEdBQXNCQyx3QkFBeUIsRUFDL0MzeUYsS0FBS3cwRixpQkkzOUJyQixTQUE0QjUwRixFQUFPKzFFLEVBQVd4b0UsR0FDMUMsTUFBTSt6RixFQUFnQnpuQyxHSjA5QmlDLEtJMTlCRjZxQixHSjA5QkUsR0l4OUJ2RCxPQURBNGMsRUFBYzc0RSxNQUFNbzNELEdBQW1CLEdBQUl5aEIsRUp5QnZCLElJekJpRC96RixJQUM5RCt6RixFQUFjdDJFLFNBQ3pCLENKdTlCd0N1MkUsQ0FBbUIsRUFoOEJuQyxFQWc4QnVELElBQ3hEaDBGLEVBQ0h5dUUsU0FBV3phLElBQ1BuaEUsS0FBS3lnRyxlQUFldC9CLEdBQ3BCaDBELEVBQVF5dUUsVUFBWXp1RSxFQUFReXVFLFNBQVN6YSxFQUFPLEVBRWhEd2EsV0FBWSxLQUNSeHVFLEVBQVF3dUUsWUFBY3h1RSxFQUFRd3VFLGFBQzlCMzdFLEtBQUtvaEcsbUJBQW1CLElBRzVCcGhHLEtBQUt1M0YsZUFDTHYzRixLQUFLdTNGLGFBQWEvQyxpQkFBbUJ4MEYsS0FBS3cwRixrQkFFOUN4MEYsS0FBS3UvRixzQkFBbUIzOUYsQ0FBUyxHQUV6QyxDQUNBLGlCQUFBdy9GLEdBQ1FwaEcsS0FBS3UzRixlQUNMdjNGLEtBQUt1M0YsYUFBYS9DLHNCQUFtQjV5RixFQUNyQzVCLEtBQUt1M0YsYUFBYVIscUJBQWtCbjFGLEdBRXhDLE1BQU1rSSxFQUFROUosS0FBS3MwRixXQUNuQnhxRixHQUFTQSxFQUFNd3RGLHdCQUNmdDNGLEtBQUt1M0YsYUFDRHYzRixLQUFLdzBGLGlCQUNEeDBGLEtBQUtpM0YscUJBQ0RyMUYsRUFDWjVCLEtBQUt5NkYsZ0JBQWdCLG9CQUN6QixDQUNBLGVBQUFRLEdBQ1FqN0YsS0FBS3cwRixtQkFDTHgwRixLQUFLeWdHLGdCQUFrQnpnRyxLQUFLeWdHLGVBaCtCcEIsS0FpK0JSemdHLEtBQUt3MEYsaUJBQWlCNVosUUFFMUI1NkUsS0FBS29oRyxtQkFDVCxDQUNBLHVCQUFBQyxHQUNJLE1BQU01SyxFQUFPejJGLEtBQUsrK0YsVUFDbEIsSUFBSSxxQkFBRUssRUFBb0IsT0FBRTkrRixFQUFNLE9BQUU0MUQsRUFBTSxhQUFFaUksR0FBaUJzNEIsRUFDN0QsR0FBSzJJLEdBQXlCOStGLEdBQVc0MUQsRUFBekMsQ0FPQSxHQUFJbDJELE9BQVN5MkYsR0FDVHoyRixLQUFLazJELFFBQ0xBLEdBQ0FvckMsR0FBMEJ0aEcsS0FBS21OLFFBQVFvMEYsY0FBZXZoRyxLQUFLazJELE9BQU9vNUIsVUFBV3A1QixFQUFPbzVCLFdBQVksQ0FDaEdodkYsRUFBU04sS0FBS00sUUFBVWtzRixLQUN4QixNQUFNZ1YsRUFBVXRXLEdBQVdsckYsS0FBS2syRCxPQUFPbzVCLFVBQVU1aUUsR0FDakRwc0IsRUFBT29zQixFQUFFakUsSUFBTWd1RSxFQUFLbjJGLE9BQU9vc0IsRUFBRWpFLElBQzdCbm9CLEVBQU9vc0IsRUFBRTJ0QyxJQUFNLzVELEVBQU9vc0IsRUFBRWpFLElBQU0rNEUsRUFDOUIsTUFBTUMsRUFBVXZXLEdBQVdsckYsS0FBS2syRCxPQUFPbzVCLFVBQVVsNUQsR0FDakQ5MUIsRUFBTzgxQixFQUFFM04sSUFBTWd1RSxFQUFLbjJGLE9BQU84MUIsRUFBRTNOLElBQzdCbm9CLEVBQU84MUIsRUFBRWlrQyxJQUFNLzVELEVBQU84MUIsRUFBRTNOLElBQU1nNUUsQ0FDbEMsQ0FDQTlMLEdBQVl5SixFQUFzQjkrRixHQU1sQ3l0RixHQUFhcVIsRUFBc0JqaEMsR0FPbkNzdEIsR0FBYXpyRixLQUFLOC9GLDZCQUE4QjkvRixLQUFLcTlGLGdCQUFpQitCLEVBQXNCamhDLEVBL0JsRixDQWdDZCxDQUNBLGtCQUFBKzhCLENBQW1CaGtDLEVBQVU3dkMsR0FDcEJybkIsS0FBS3c2RixZQUFZMXVFLElBQUlvckMsSUFDdEJsM0QsS0FBS3c2RixZQUFZcHdGLElBQUk4c0QsRUFBVSxJQUFJby9CLElBRXpCdDJGLEtBQUt3NkYsWUFBWWp2RixJQUFJMnJELEdBQzdCbnhELElBQUlzaEIsR0FDVixNQUFNMjhDLEVBQVMzOEMsRUFBS2xhLFFBQVF1MEYsdUJBQzVCcjZFLEVBQUsrc0UsUUFBUSxDQUNUdDRFLFdBQVlrb0QsRUFBU0EsRUFBT2xvRCxnQkFBYWxhLEVBQ3pDZzFGLHNCQUF1QjV5QixHQUFVQSxFQUFPMjlCLDRCQUNsQzM5QixFQUFPMjlCLDRCQUE0QnQ2RSxRQUNuQ3psQixHQUVkLENBQ0EsTUFBQTZ5RixHQUNJLE1BQU0zcUYsRUFBUTlKLEtBQUtzMEYsV0FDbkIsT0FBT3hxRixHQUFRQSxFQUFNMnNGLE9BQVN6MkYsSUFDbEMsQ0FDQSxPQUFBKytGLEdBQ0ksSUFBSXgrQixFQUNKLE1BQU0sU0FBRXJKLEdBQWFsM0QsS0FBS21OLFFBQzFCLE9BQU8rcEQsSUFBdUMsUUFBMUJxSixFQUFLdmdFLEtBQUtzMEYsa0JBQStCLElBQVAvekIsT0FBZ0IsRUFBU0EsRUFBR2syQixPQUFnQnoyRixJQUN0RyxDQUNBLFdBQUE0aEcsR0FDSSxJQUFJcmhDLEVBQ0osTUFBTSxTQUFFckosR0FBYWwzRCxLQUFLbU4sUUFDMUIsT0FBTytwRCxFQUFzQyxRQUExQnFKLEVBQUt2Z0UsS0FBS3MwRixrQkFBK0IsSUFBUC96QixPQUFnQixFQUFTQSxFQUFHaTJCLGNBQVc1MEYsQ0FDaEcsQ0FDQSxRQUFBMHlGLEdBQ0ksTUFBTSxTQUFFcDlCLEdBQWFsM0QsS0FBS21OLFFBQzFCLEdBQUkrcEQsRUFDQSxPQUFPbDNELEtBQUtzcUUsS0FBS2t3QixZQUFZanZGLElBQUkyckQsRUFDekMsQ0FDQSxPQUFBazlCLEVBQVEsV0FBRWtGLEVBQVUsV0FBRXg5RSxFQUFVLHNCQUFFODZFLEdBQTJCLENBQUMsR0FDMUQsTUFBTTlzRixFQUFROUosS0FBS3MwRixXQUNmeHFGLEdBQ0FBLEVBQU1zcUYsUUFBUXAwRixLQUFNNDJGLEdBQ3BCMEMsSUFDQXQ1RixLQUFLbXpGLHFCQUFrQnZ4RixFQUN2QjVCLEtBQUtzNUYsWUFBYSxHQUVsQng5RSxHQUNBOWIsS0FBS2kwRixXQUFXLENBQUVuNEUsY0FDMUIsQ0FDQSxRQUFBdTRFLEdBQ0ksTUFBTXZxRixFQUFROUosS0FBS3MwRixXQUNuQixRQUFJeHFGLEdBQ09BLEVBQU11cUYsU0FBU3IwRixLQUs5QixDQUNBLGFBQUFxOEYsR0FDSSxNQUFNLGNBQUU1a0MsR0FBa0J6M0QsS0FBS21OLFFBQy9CLElBQUtzcUQsRUFDRCxPQUVKLElBQUlvcUMsR0FBWSxFQUtoQixNQUFNLGFBQUUxakMsR0FBaUIxRyxFQVF6QixJQVBJMEcsRUFBYXBCLFFBQ2JvQixFQUFhbkIsU0FDYm1CLEVBQWFsQixTQUNia0IsRUFBYWpCLFdBQ2Iya0MsR0FBWSxJQUdYQSxFQUNELE9BQ0osTUFBTUMsRUFBYyxDQUFDLEVBRXJCLElBQUssSUFBSXhnRyxFQUFJLEVBQUdBLEVBQUk2MkYsR0FBYy81RixPQUFRa0QsSUFBSyxDQUMzQyxNQUFNM0IsRUFBTSxTQUFXdzRGLEdBQWM3MkYsR0FFakM2OEQsRUFBYXgrRCxLQUNibWlHLEVBQVluaUcsR0FBT3crRCxFQUFheCtELEdBQ2hDODNELEVBQWNzcUMsZUFBZXBpRyxFQUFLLEdBRTFDLENBR0E4M0QsRUFBY3Z6RCxTQUVkLElBQUssTUFBTXZFLEtBQU9taUcsRUFDZHJxQyxFQUFjc3FDLGVBQWVwaUcsRUFBS21pRyxFQUFZbmlHLElBSWxEODNELEVBQWM4K0IsZ0JBQ2xCLENBQ0EsbUJBQUExekIsQ0FBb0IxWixFQUFZLENBQUMsR0FDN0IsSUFBSW9YLEVBQUlzVCxFQUVSLE1BQU1tdUIsRUFBUyxDQUFDLEVBQ2hCLElBQUtoaUcsS0FBSzByQixVQUFZMXJCLEtBQUtxNUYsTUFDdkIsT0FBTzJJLEVBQ1gsSUFBS2hpRyxLQUFLczZGLFVBQ04sTUFBTyxDQUFFMkgsV0FBWSxVQUdyQkQsRUFBT0MsV0FBYSxHQUV4QixNQUFNN2pDLEVBQW9CcCtELEtBQUtzOEYsdUJBQy9CLEdBQUl0OEYsS0FBS3M1RixXQVFMLE9BUEF0NUYsS0FBS3M1RixZQUFhLEVBQ2xCMEksRUFBT3J4RixRQUFVLEdBQ2pCcXhGLEVBQU9FLGNBQ0hyK0IsR0FBbUIxYSxFQUFVKzRDLGdCQUFrQixHQUNuREYsRUFBTzduQyxVQUFZaUUsRUFDYkEsRUFBa0JwK0QsS0FBS20rRCxhQUFjLElBQ3JDLE9BQ0M2akMsRUFFWCxNQUFNdkwsRUFBT3oyRixLQUFLKytGLFVBQ2xCLElBQUsvK0YsS0FBS216RixrQkFBb0JuekYsS0FBS2syRCxTQUFXdWdDLEVBQUtuMkYsT0FBUSxDQUN2RCxNQUFNNmhHLEVBQWMsQ0FBQyxFQWVyQixPQWRJbmlHLEtBQUttTixRQUFRK3BELFdBQ2JpckMsRUFBWXh4RixhQUNzQi9PLElBQTlCNUIsS0FBS20rRCxhQUFheHRELFFBQ1ozUSxLQUFLbStELGFBQWF4dEQsUUFDbEIsRUFDVnd4RixFQUFZRCxjQUNScitCLEdBQW1CMWEsRUFBVSs0QyxnQkFBa0IsSUFFbkRsaUcsS0FBS3E2RixlQUFpQjk3QixHQUFhditELEtBQUttK0QsZ0JBQ3hDZ2tDLEVBQVlob0MsVUFBWWlFLEVBQ2xCQSxFQUFrQixDQUFDLEVBQUcsSUFDdEIsT0FDTnArRCxLQUFLcTZGLGNBQWUsR0FFakI4SCxDQUNYLENBQ0EsTUFBTUMsRUFBaUIzTCxFQUFLUSxpQkFBbUJSLEVBQUt0NEIsYUFDcERuK0QsS0FBS3FoRywwQkFDTFcsRUFBTzduQyxVQUFZczlCLEdBQXlCejNGLEtBQUs4L0YsNkJBQThCOS9GLEtBQUtrekYsVUFBV2tQLEdBQzNGaGtDLElBQ0E0akMsRUFBTzduQyxVQUFZaUUsRUFBa0Jna0MsRUFBZ0JKLEVBQU83bkMsWUFFaEUsTUFBTSxFQUFFenRDLEVBQUMsRUFBRTBKLEdBQU1wMkIsS0FBS216RixnQkFDdEI2TyxFQUFPMWpDLGdCQUFrQixHQUFjLElBQVg1eEMsRUFBRXE2QixXQUE0QixJQUFYM3dCLEVBQUUyd0IsWUFDN0MwdkMsRUFBS1EsZ0JBS0wrSyxFQUFPcnhGLFFBQ0g4bEYsSUFBU3oyRixLQUNpRyxRQUFuRzZ6RSxFQUF1QyxRQUFqQ3RULEVBQUs2aEMsRUFBZXp4RixlQUE0QixJQUFQNHZELEVBQWdCQSxFQUFLdmdFLEtBQUttK0QsYUFBYXh0RCxlQUE0QixJQUFQa2pFLEVBQWdCQSxFQUFLLEVBQ2pJN3pFLEtBQUsrMkYsZ0JBQ0QvMkYsS0FBS20rRCxhQUFheHRELFFBQ2xCeXhGLEVBQWV2QixZQU83Qm1CLEVBQU9yeEYsUUFDSDhsRixJQUFTejJGLFVBQ3dCNEIsSUFBM0J3Z0csRUFBZXp4RixRQUNYeXhGLEVBQWV6eEYsUUFDZixRQUMyQi9PLElBQS9Cd2dHLEVBQWV2QixZQUNYdUIsRUFBZXZCLFlBQ2YsRUFLbEIsSUFBSyxNQUFNbGhHLEtBQU8wNUQsR0FBaUIsQ0FDL0IsUUFBNEJ6M0QsSUFBeEJ3Z0csRUFBZXppRyxHQUNmLFNBQ0osTUFBTSxRQUFFcXpGLEVBQU8sUUFBRThCLEdBQVl6N0IsR0FBZ0IxNUQsR0FPdkMwaUcsRUFBaUMsU0FBckJMLEVBQU83bkMsVUFDbkJpb0MsRUFBZXppRyxHQUNmcXpGLEVBQVFvUCxFQUFlemlHLEdBQU04MkYsR0FDbkMsR0FBSTNCLEVBQVMsQ0FDVCxNQUFNd04sRUFBTXhOLEVBQVExMkYsT0FDcEIsSUFBSyxJQUFJa0QsRUFBSSxFQUFHQSxFQUFJZ2hHLEVBQUtoaEcsSUFDckIwZ0csRUFBT2xOLEVBQVF4ekYsSUFBTStnRyxDQUU3QixNQUVJTCxFQUFPcmlHLEdBQU8waUcsQ0FFdEIsQ0FZQSxPQU5JcmlHLEtBQUttTixRQUFRK3BELFdBQ2I4cUMsRUFBT0UsY0FDSHpMLElBQVN6MkYsS0FDSDZqRSxHQUFtQjFhLEVBQVUrNEMsZ0JBQWtCLEdBQy9DLFFBRVBGLENBQ1gsQ0FDQSxhQUFBakYsR0FDSS84RixLQUFLODJGLFdBQWE5MkYsS0FBS2czRixjQUFXcDFGLENBQ3RDLENBRUEsU0FBQTJnRyxHQUNJdmlHLEtBQUtzcUUsS0FBS3d2QixNQUFNeHlGLFNBQVMrZixJQUFXLElBQUlrNUMsRUFBSSxPQUF3QyxRQUFoQ0EsRUFBS2w1QyxFQUFLbXRFLHdCQUFxQyxJQUFQajBCLE9BQWdCLEVBQVNBLEVBQUdxYSxNQUFNLElBQzlINTZFLEtBQUtzcUUsS0FBS3d2QixNQUFNeHlGLFFBQVFvMUYsSUFDeEIxOEYsS0FBS3NxRSxLQUFLa3dCLFlBQVlsMUIsT0FDMUIsRUFFUixDQUNBLFNBQVMyc0IsR0FBYTVxRSxHQUNsQkEsRUFBSzRxRSxjQUNULENBQ0EsU0FBUzRLLEdBQW1CeDFFLEdBQ3hCLElBQUlrNUMsRUFDSixNQUFNeTJCLEdBQXVDLFFBQTFCejJCLEVBQUtsNUMsRUFBS3l2RSxrQkFBK0IsSUFBUHYyQixPQUFnQixFQUFTQSxFQUFHeTJCLFdBQWEzdkUsRUFBSzJ2RSxTQUNuRyxHQUFJM3ZFLEVBQUtvdEUsVUFDTHB0RSxFQUFLNnVDLFFBQ0w4Z0MsR0FDQTN2RSxFQUFLc3pFLGFBQWEsYUFBYyxDQUNoQyxNQUFRckwsVUFBV3A1QixFQUFRZ29DLFlBQWFzRSxHQUFtQm43RSxFQUFLNnVDLFFBQzFELGNBQUVxckMsR0FBa0JsNkUsRUFBS2xhLFFBQ3pCNnhGLEVBQVdoSSxFQUFTaGtGLFNBQVdxVSxFQUFLNnVDLE9BQU9sakQsT0FHM0IsU0FBbEJ1dUYsRUFDQTlVLElBQVV0QixJQUNOLE1BQU1zWCxFQUFlekQsRUFDZmhJLEVBQVNrSCxZQUFZL1MsR0FDckI2TCxFQUFTMUgsVUFBVW5FLEdBQ25CL3NGLEVBQVM4c0YsR0FBV3VYLEdBQzFCQSxFQUFhaDZFLElBQU15dEMsRUFBT2kxQixHQUFNMWlFLElBQ2hDZzZFLEVBQWFwb0MsSUFBTW9vQyxFQUFhaDZFLElBQU1ycUIsQ0FBTSxJQUczQ2tqRyxHQUEwQkMsRUFBZXZLLEVBQVMxSCxVQUFXcDVCLElBQ2xFdTJCLElBQVV0QixJQUNOLE1BQU1zWCxFQUFlekQsRUFDZmhJLEVBQVNrSCxZQUFZL1MsR0FDckI2TCxFQUFTMUgsVUFBVW5FLEdBQ25CL3NGLEVBQVM4c0YsR0FBV2gxQixFQUFPaTFCLElBQ2pDc1gsRUFBYXBvQyxJQUFNb29DLEVBQWFoNkUsSUFBTXJxQixFQUlsQ2lwQixFQUFLaTBFLGlCQUFtQmowRSxFQUFLbXRFLG1CQUM3Qm50RSxFQUFLMnhFLG1CQUFvQixFQUN6QjN4RSxFQUFLaTBFLGVBQWVuUSxHQUFNOXdCLElBQ3RCaHpDLEVBQUtpMEUsZUFBZW5RLEdBQU0xaUUsSUFBTXJxQixFQUN4QyxJQUdSLE1BQU1za0csRUFBY25XLEtBQ3BCZCxHQUFhaVgsRUFBYXhzQyxFQUFROGdDLEVBQVMxSCxXQUMzQyxNQUFNcVQsRUFBY3BXLEtBQ2hCeVMsRUFDQXZULEdBQWFrWCxFQUFhdDdFLEVBQUtnM0UsZUFBZW1FLEdBQWdCLEdBQU94TCxFQUFTa0gsYUFHOUV6UyxHQUFha1gsRUFBYXpzQyxFQUFROGdDLEVBQVMxSCxXQUUvQyxNQUFNa0QsR0FBb0I0RCxHQUFZc00sR0FDdEMsSUFBSXZILEdBQTJCLEVBQy9CLElBQUs5ekUsRUFBS3l2RSxXQUFZLENBQ2xCLE1BQU04SCxFQUFpQnYzRSxFQUFLNjNFLDZCQUs1QixHQUFJTixJQUFtQkEsRUFBZTlILFdBQVksQ0FDOUMsTUFBUUUsU0FBVTRMLEVBQWdCMXNDLE9BQVEyc0MsR0FBaUJqRSxFQUMzRCxHQUFJZ0UsR0FBa0JDLEVBQWMsQ0FDaEMsTUFBTUMsRUFBbUJ0VyxLQUN6QlosR0FBcUJrWCxFQUFrQjlMLEVBQVMxSCxVQUFXc1QsRUFBZXRULFdBQzFFLE1BQU02USxFQUFpQjNULEtBQ3ZCWixHQUFxQnVVLEVBQWdCanFDLEVBQVEyc0MsRUFBYXZULFdBQ3JEK0csR0FBaUJ5TSxFQUFrQjNDLEtBQ3BDaEYsR0FBMkIsR0FFM0J5RCxFQUFlenhGLFFBQVEydUYsYUFDdkJ6MEUsRUFBS2kwRSxlQUFpQjZFLEVBQ3RCOTRFLEVBQUs4M0UscUJBQXVCMkQsRUFDNUJ6N0UsRUFBS3UzRSxlQUFpQkEsRUFFOUIsQ0FDSixDQUNKLENBQ0F2M0UsRUFBS296RSxnQkFBZ0IsWUFBYSxDQUM5QnZrQyxTQUNBOGdDLFdBQ0Fud0MsTUFBTzg3QyxFQUNQRCxjQUNBbFEsbUJBQ0EySSw0QkFFUixNQUNLLEdBQUk5ekUsRUFBS290RSxTQUFVLENBQ3BCLE1BQU0sZUFBRXhMLEdBQW1CNWhFLEVBQUtsYSxRQUNoQzg3RSxHQUFrQkEsR0FDdEIsQ0FNQTVoRSxFQUFLbGEsUUFBUTJPLGdCQUFhbGEsQ0FDOUIsQ0FDQSxTQUFTbTRGLEdBQW9CMXlFLEdBSXpCK3dFLEdBQW9CQyxhQUNmaHhFLEVBQUtxd0MsU0FRTHJ3QyxFQUFLZzRFLGlCQUNOaDRFLEVBQUsyeEUsa0JBQW9CM3hFLEVBQUtxd0MsT0FBT3NoQyxtQkFPekMzeEUsRUFBSzR4RSwwQkFBNEI1eEUsRUFBSzR4RSx3QkFBMEJ2dkMsUUFBUXJpQyxFQUFLMnhFLG1CQUN6RTN4RSxFQUFLcXdDLE9BQU9zaEMsbUJBQ1ozeEUsRUFBS3F3QyxPQUFPdWhDLDBCQUNoQjV4RSxFQUFLNnhFLG1CQUFxQjd4RSxFQUFLNnhFLGlCQUFtQjd4RSxFQUFLcXdDLE9BQU93aEMsa0JBQ2xFLENBQ0EsU0FBU2dCLEdBQWdCN3lFLEdBQ3JCQSxFQUFLMnhFLGtCQUNEM3hFLEVBQUs0eEUsd0JBQ0Q1eEUsRUFBSzZ4RSxrQkFDRCxDQUNoQixDQUNBLFNBQVM2RCxHQUFjMTFFLEdBQ25CQSxFQUFLMDFFLGVBQ1QsQ0FDQSxTQUFTTCxHQUFrQnIxRSxHQUN2QkEsRUFBS3ExRSxtQkFDVCxDQUNBLFNBQVNDLEdBQW1CdDFFLEdBQ3hCQSxFQUFLOHZFLGVBQWdCLENBQ3pCLENBQ0EsU0FBU3lGLEdBQW9CdjFFLEdBQ3pCLE1BQU0sY0FBRW93QyxHQUFrQnB3QyxFQUFLbGEsUUFDM0JzcUQsR0FBaUJBLEVBQWN3UixXQUFXODVCLHVCQUMxQ3RyQyxFQUFjNHFCLE9BQU8sdUJBRXpCaDdELEVBQUt3eEUsZ0JBQ1QsQ0FDQSxTQUFTb0MsR0FBZ0I1ekUsR0FDckJBLEVBQUs0ekUsa0JBQ0w1ekUsRUFBS3EzRSxZQUFjcjNFLEVBQUtpMEUsZUFBaUJqMEUsRUFBSy9tQixZQUFTc0IsRUFDdkR5bEIsRUFBSzJ4RSxtQkFBb0IsQ0FDN0IsQ0FDQSxTQUFTZ0IsR0FBbUIzeUUsR0FDeEJBLEVBQUsyeUUsb0JBQ1QsQ0FDQSxTQUFTQyxHQUFlNXlFLEdBQ3BCQSxFQUFLNHlFLGdCQUNULENBQ0EsU0FBU29DLEdBQWNoMUUsR0FDbkJBLEVBQUtnMUUsZUFDVCxDQUNBLFNBQVNXLEdBQW9CbHpGLEdBQ3pCQSxFQUFNMHRGLG9CQUNWLENBQ0EsU0FBU2tKLEdBQWFodEIsRUFBUTdzQixFQUFPdmhELEdBQ2pDb3VFLEVBQU84WCxVQUFZOW5CLEdBQUk3YyxFQUFNMmtDLFVBQVcsRUFBR2xtRixHQUMzQ291RSxFQUFPbFosTUFBUWtKLEdBQUk3YyxFQUFNMlQsTUFBTyxFQUFHbDFELEdBQ25Db3VFLEVBQU8zc0IsT0FBU0YsRUFBTUUsT0FDdEIyc0IsRUFBTzZYLFlBQWMxa0MsRUFBTTBrQyxXQUMvQixDQUNBLFNBQVNvVixHQUFRanRCLEVBQVE3MEIsRUFBTXpGLEVBQUk5ekMsR0FDL0JvdUUsRUFBT2pyRCxJQUFNaTdDLEdBQUk3a0IsRUFBS3AyQixJQUFLMndCLEVBQUczd0IsSUFBS25qQixHQUNuQ291RSxFQUFPclosSUFBTXFKLEdBQUk3a0IsRUFBS3diLElBQUtqaEIsRUFBR2loQixJQUFLLzBELEVBQ3ZDLENBS0EsU0FBU2k3RixHQUFvQmw1RSxHQUN6QixPQUFRQSxFQUFLNHZFLHNCQUF3RHIxRixJQUFyQ3lsQixFQUFLNHZFLGdCQUFnQjRKLFdBQ3pELENBQ0EsTUFBTXJGLEdBQTBCLENBQzVCNWxCLFNBQVUsSUFDVnhILEtBQU0sQ0FBQyxHQUFLLEVBQUcsR0FBSyxJQUVsQjQwQixHQUFxQkMsR0FBZ0Msb0JBQWRodkQsV0FDekNBLFVBQVVpdkQsVUFBVTM3RixjQUFjbEksU0FBUzRqRyxHQU16Q0UsR0FBYUgsR0FBa0Isa0JBQW9CQSxHQUFrQixXQUNyRW5yRixLQUFLNmlELE1BQ0x1SyxHQUNOLFNBQVNnNUIsR0FBVTlTLEdBRWZBLEVBQUsxaUUsSUFBTTA2RSxHQUFXaFksRUFBSzFpRSxLQUMzQjBpRSxFQUFLOXdCLElBQU04b0MsR0FBV2hZLEVBQUs5d0IsSUFDL0IsQ0FLQSxTQUFTaW5DLEdBQTBCQyxFQUFldkssRUFBVTlnQyxHQUN4RCxNQUEwQixhQUFsQnFyQyxHQUNlLG9CQUFsQkEsSUFDSW5XLEdBQU9wOEUsR0FBWWdvRixHQUFXaG9GLEdBQVlrbkQsR0FBUyxHQUNoRSxDS2g5Q0EsTUFBTWt0QyxHQUF5QjVLLEdBQXFCLENBQ2hEQyxxQkFBc0IsQ0FBQ3hnRSxFQUFLb3FELElBQVc3YSxHQUFZdnZDLEVBQUssU0FBVW9xRCxHQUNsRXNXLGNBQWUsS0FBTSxDQUNqQmpzRSxFQUFHeG1CLFNBQVNraUIsZ0JBQWdCcUIsWUFBY3ZqQixTQUFTZ0csS0FBS3VkLFdBQ3hEMk0sRUFBR2x3QixTQUFTa2lCLGdCQUFnQnVCLFdBQWF6akIsU0FBU2dHLEtBQUt5ZCxZQUUzRGl2RSxrQkFBbUIsS0FBTSxJQ052Qi9ILEdBQXFCLENBQ3ZCNTZFLGFBQVNyVSxHQUVQeWhHLEdBQXFCN0ssR0FBcUIsQ0FDNUNHLGNBQWdCanRFLElBQWEsQ0FDekJnQixFQUFHaEIsRUFBU2pDLFdBQ1oyTSxFQUFHMUssRUFBUy9CLFlBRWhCK3VFLGNBQWUsS0FDWCxJQUFLN0gsR0FBbUI1NkUsUUFBUyxDQUM3QixNQUFNcXRGLEVBQWUsSUFBSUYsR0FBdUIsQ0FBQyxHQUNqREUsRUFBYTdxQyxNQUFNeHlELFFBQ25CcTlGLEVBQWFyUCxXQUFXLENBQUV1SixjQUFjLElBQ3hDM00sR0FBbUI1NkUsUUFBVXF0RixDQUNqQyxDQUNBLE9BQU96UyxHQUFtQjU2RSxPQUFPLEVBRXJDNGlGLGVBQWdCLENBQUNudEUsRUFBVTlyQixLQUN2QjhyQixFQUFTN1osTUFBTXNvRCxlQUFzQnY0RCxJQUFWaEMsRUFBc0JBLEVBQVEsTUFBTSxFQUVuRWc1RixrQkFBb0JsdEUsR0FBYWcrQixRQUF1RCxVQUEvQ3pqRCxPQUFPczlGLGlCQUFpQjczRSxHQUFVd29DLFlDbEJ6RTJCLEdBQU8sQ0FDVEcsSUFBSyxDQUNENlMsUXJCSVIsY0FBeUJBLEdBQ3JCLFdBQUF2OUQsR0FDSTg0QyxTQUFTam1ELFdBQ1Q2QixLQUFLd2pHLDBCQUE0QnYrQixFQUNyQyxDQUNBLGFBQUF3K0IsQ0FBY0MsR0FDVjFqRyxLQUFLMmpHLFFBQVUsSUFBSXJhLEdBQVdvYSxFQUFrQjFqRyxLQUFLNGpHLG9CQUFxQixDQUFFanZDLG1CQUFvQjMwRCxLQUFLcW5CLEtBQUt3b0UseUJBQzlHLENBQ0EsaUJBQUErVCxHQUNJLE1BQU0sa0JBQUVDLEVBQWlCLFdBQUVDLEVBQVUsTUFBRUMsRUFBSyxTQUFFQyxHQUFhaGtHLEtBQUtxbkIsS0FBSzRoRCxXQUNyRSxNQUFPLENBQ0h5aEIsZUFBZ0IrSCxHQUFhb1IsR0FDN0I1WixRQUFTd0ksR0FBYXFSLEdBQ3RCNVosT0FBUTZaLEVBQ1J6WixNQUFPLENBQUMza0UsRUFBT3FqRCxZQUNKaHBFLEtBQUsyakcsUUFDUkssR0FDQSxHQUFNOXRELFFBQU8sSUFBTTh0RCxFQUFTcitFLEVBQU9xakQsSUFDdkMsRUFHWixDQUNBLEtBQUF2USxHQUNJejRELEtBQUt3akcsMEJBQTRCeDdCLEdBQWdCaG9FLEtBQUtxbkIsS0FBS3BSLFFBQVMsZUFBZ0IwUCxHQUFVM2xCLEtBQUt5akcsY0FBYzk5RSxJQUNySCxDQUNBLE1BQUF1d0IsR0FDSWwyQyxLQUFLMmpHLFNBQVczakcsS0FBSzJqRyxRQUFRL1ksZUFBZTVxRixLQUFLNGpHLG9CQUNyRCxDQUNBLE9BQUE5MkQsR0FDSTlzQyxLQUFLd2pHLDRCQUNMeGpHLEtBQUsyakcsU0FBVzNqRyxLQUFLMmpHLFFBQVFyN0UsS0FDakMsSXFCakNBdXRDLEtBQU0sQ0FDRmdULFFDTlIsY0FBMEJBLEdBQ3RCLFdBQUF2OUQsQ0FBWStiLEdBQ1IrOEIsTUFBTS84QixHQUNOcm5CLEtBQUtpa0csb0JBQXNCaC9CLEdBQzNCamxFLEtBQUsycUYsZ0JBQWtCMWxCLEdBQ3ZCamxFLEtBQUt3OUUsU0FBVyxJQUFJNlEsR0FBMEJobkUsRUFDbEQsQ0FDQSxLQUFBb3hDLEdBR0ksTUFBTSxhQUFFeXJDLEdBQWlCbGtHLEtBQUtxbkIsS0FBSzRoRCxXQUMvQmk3QixJQUNBbGtHLEtBQUtpa0csb0JBQXNCQyxFQUFhcGIsVUFBVTlvRixLQUFLdzlFLFdBRTNEeDlFLEtBQUsycUYsZ0JBQWtCM3FGLEtBQUt3OUUsU0FBUzBVLGdCQUFrQmp0QixFQUMzRCxDQUNBLE9BQUFuNEIsR0FDSTlzQyxLQUFLaWtHLHNCQUNMamtHLEtBQUsycUYsaUJBQ1QsR0RaSXdaLGVBQWdCZCxHQUNoQnJzQyxjQUFhLEtFQ2ZvdEMsR0FBd0IsdURBUzlCLFNBQVNDLEdBQWlCcHVGLEVBQVNzVCxFQUFTeXVFLEVBQVEsR0FDaEQsR0FBVUEsR0FGRyxFQUVnQix5REFBeUQvaEYseURBQ3RGLE1BQU84akQsRUFBT2wzQixHQVZsQixTQUEwQjVzQixHQUN0QixNQUFNak0sRUFBUW82RixHQUFzQkUsS0FBS3J1RixHQUN6QyxJQUFLak0sRUFDRCxNQUFPLENBQUMsR0FDWixNQUFPLENBQUUrdkQsRUFBT2wzQixHQUFZNzRCLEVBQzVCLE1BQU8sQ0FBQyt2RCxFQUFPbDNCLEVBQ25CLENBSThCMGhFLENBQWlCdHVGLEdBRTNDLElBQUs4akQsRUFDRCxPQUVKLE1BQU0rSyxFQUFXNytELE9BQU9zOUYsaUJBQWlCaDZFLEdBQVNpN0UsaUJBQWlCenFDLEdBQ25FLEdBQUkrSyxFQUFVLENBQ1YsTUFBTTIvQixFQUFVMy9CLEVBQVMvNkQsT0FDekIsT0FBT2k0RSxHQUFrQnlpQixHQUFXbnFDLFdBQVdtcUMsR0FBV0EsQ0FDOUQsQ0FDSyxPQUFJeHFDLEdBQW1CcDNCLEdBRWpCd2hFLEdBQWlCeGhFLEVBQVV0WixFQUFTeXVFLEVBQVEsR0FHNUNuMUQsQ0FFZixDQ2pDQSxNQUFNNmhFLEdBQWlCLElBQUkvK0YsSUFBSSxDQUMzQixRQUNBLFNBQ0EsTUFDQSxPQUNBLFFBQ0EsU0FDQSxJQUNBLElBQ0EsYUFDQSxlQUVFZy9GLEdBQW1CaGxHLEdBQVEra0csR0FBZTU0RSxJQUFJbnNCLEdBSTlDaWxHLEdBQWlCbitGLEdBQU1BLElBQU1zZSxJQUFVdGUsSUFBTTAwRCxHQUM3QzBwQyxHQUFtQixDQUFDQyxFQUFRQyxJQUFRenFDLFdBQVd3cUMsRUFBT3o5RixNQUFNLE1BQU0wOUYsSUFDbEVDLEdBQXlCLENBQUNDLEVBQU1DLElBQVMsQ0FBQ0MsR0FBU2hyQyxnQkFDckQsR0FBa0IsU0FBZEEsSUFBeUJBLEVBQ3pCLE9BQU8sRUFDWCxNQUFNaXJDLEVBQVdqckMsRUFBVW53RCxNQUFNLHNCQUNqQyxHQUFJbzdGLEVBQ0EsT0FBT1AsR0FBaUJPLEVBQVMsR0FBSUYsR0FFcEMsQ0FDRCxNQUFNSixFQUFTM3FDLEVBQVVud0QsTUFBTSxvQkFDL0IsT0FBSTg2RixFQUNPRCxHQUFpQkMsRUFBTyxHQUFJRyxHQUc1QixDQUVmLEdBRUVJLEdBQWdCLElBQUkxL0YsSUFBSSxDQUFDLElBQUssSUFBSyxNQUNuQzIvRixHQUFnQ2hzQyxHQUFtQjFjLFFBQVFqOUMsSUFBUzBsRyxHQUFjdjVFLElBQUluc0IsS0FldEY0bEcsR0FBbUIsQ0FFckJoakYsTUFBTyxFQUFHbUssTUFBTyt2QyxjQUFjLElBQUtGLGVBQWUsT0FBVTd2QyxFQUFFMnRDLElBQU0zdEMsRUFBRWpFLElBQU02eEMsV0FBV21DLEdBQWVuQyxXQUFXaUMsR0FDbEgvNUMsT0FBUSxFQUFHNFQsTUFBT2ttQyxhQUFhLElBQUtFLGdCQUFnQixPQUFVcG1DLEVBQUVpa0MsSUFBTWprQyxFQUFFM04sSUFBTTZ4QyxXQUFXZ0MsR0FBY2hDLFdBQVdrQyxHQUNsSDl5QyxJQUFLLENBQUN5N0UsR0FBU3o3RSxTQUFVNHdDLFdBQVc1d0MsR0FDcENGLEtBQU0sQ0FBQzI3RSxHQUFTMzdFLFVBQVc4d0MsV0FBVzl3QyxHQUN0QzZ5QyxPQUFRLEVBQUdqbUMsTUFBTzFNLFNBQVU0d0MsV0FBVzV3QyxJQUFRME0sRUFBRWlrQyxJQUFNamtDLEVBQUUzTixLQUN6RDJ6QyxNQUFPLEVBQUcxdkMsTUFBT2xELFVBQVc4d0MsV0FBVzl3QyxJQUFTa0QsRUFBRTJ0QyxJQUFNM3RDLEVBQUVqRSxLQUUxRGlFLEVBQUdzNEUsR0FBdUIsRUFBRyxJQUM3QjV1RSxFQUFHNHVFLEdBQXVCLEVBQUcsS0FHakNPLEdBQWlCN25DLFdBQWE2bkMsR0FBaUI3NEUsRUFDL0M2NEUsR0FBaUI1bkMsV0FBYTRuQyxHQUFpQm52RSxFQXNKL0MsU0FBU292RSxHQUFlL3RDLEVBQWVuM0QsRUFBUXltRCxFQUFRZ2UsR0FDbkQsTUEzTXFCLENBQUN6a0UsR0FDZitELE9BQU9XLEtBQUsxRSxHQUFRcThDLEtBQUtnb0QsSUEwTXpCYyxDQUFpQm5sRyxHQXpIYSxFQUFDbTNELEVBQWVuM0QsRUFBUXltRCxFQUFTLENBQUMsRUFBR2dlLEVBQWdCLENBQUMsS0FDM0Z6a0UsRUFBUyxJQUFLQSxHQUNkeWtFLEVBQWdCLElBQUtBLEdBQ3JCLE1BQU0yZ0MsRUFBdUJyaEcsT0FBT1csS0FBSzFFLEdBQVFzOEMsT0FBTytuRCxJQUd4RCxJQUFJZ0IsRUFBeUIsR0FDekJDLEdBQXNDLEVBQzFDLE1BQU1DLEVBQXVCLEdBa0Y3QixHQWpGQUgsRUFBcUJwK0YsU0FBUzNILElBQzFCLE1BQU1DLEVBQVE2M0QsRUFBYy9yRCxTQUFTL0wsR0FDckMsSUFBSzgzRCxFQUFjbXRCLFNBQVNqbEYsR0FDeEIsT0FDSixJQUFJay9DLEVBQU9rSSxFQUFPcG5ELEdBQ2RtbUcsRUFBV3JoQixHQUF1QjVsQyxHQUN0QyxNQUFNekYsRUFBSzk0QyxFQUFPWCxHQUNsQixJQUFJb21HLEVBS0osR0FBSXZpQyxHQUFrQnBxQixHQUFLLENBQ3ZCLE1BQU00c0QsRUFBZTVzRCxFQUFHaDdDLE9BQ2xCNm5HLEVBQXNCLE9BQVY3c0QsRUFBRyxHQUFjLEVBQUksRUFDdkN5RixFQUFPekYsRUFBRzZzRCxHQUNWSCxFQUFXcmhCLEdBQXVCNWxDLEdBQ2xDLElBQUssSUFBSXY5QyxFQUFJMmtHLEVBQVcza0csRUFBSTBrRyxHQUtWLE9BQVY1c0QsRUFBRzkzQyxHQUwrQkEsSUFPakN5a0csRUFNRCxHQUFVdGhCLEdBQXVCcnJDLEVBQUc5M0MsTUFBUXlrRyxFQUFRLDJDQUxwREEsRUFBU3RoQixHQUF1QnJyQyxFQUFHOTNDLElBQ25DLEdBQVV5a0csSUFBV0QsR0FDaEJsQixHQUFja0IsSUFBYWxCLEdBQWNtQixHQUFVLGdFQU1wRSxNQUVJQSxFQUFTdGhCLEdBQXVCcnJDLEdBRXBDLEdBQUkwc0QsSUFBYUMsRUFHYixHQUFJbkIsR0FBY2tCLElBQWFsQixHQUFjbUIsR0FBUyxDQUNsRCxNQUFNOXZGLEVBQVVyVyxFQUFNMkwsTUFDQyxpQkFBWjBLLEdBQ1ByVyxFQUFNd0ssSUFBSWt3RCxXQUFXcmtELElBRVAsaUJBQVBtakMsRUFDUDk0QyxFQUFPWCxHQUFPMjZELFdBQVdsaEIsR0FFcEI5NkMsTUFBTTJPLFFBQVFtc0MsSUFBTzJzRCxJQUFXNXFDLEtBQ3JDNzZELEVBQU9YLEdBQU95NUMsRUFBR240QyxJQUFJcTVELFlBRTdCLE1BQ1V3ckMsYUFBMkMsRUFBU0EsRUFBUzNyQyxhQUNsRTRyQyxhQUF1QyxFQUFTQSxFQUFPNXJDLGFBQzlDLElBQVR0YixHQUFxQixJQUFQekYsR0FHRixJQUFUeUYsRUFDQWovQyxFQUFNd0ssSUFBSTI3RixFQUFPNXJDLFVBQVV0YixJQUczQnYrQyxFQUFPWCxHQUFPbW1HLEVBQVMzckMsVUFBVS9nQixJQU1oQ3dzRCxJQUNERCxFQXZJcEIsU0FBeUNsdUMsR0FDckMsTUFBTXl1QyxFQUFvQixHQVcxQixPQVZBWixHQUE4QmgrRixTQUFTM0gsSUFDbkMsTUFBTUMsRUFBUTYzRCxFQUFjL3JELFNBQVMvTCxRQUN2QmlDLElBQVZoQyxJQUNBc21HLEVBQWtCeGxHLEtBQUssQ0FBQ2YsRUFBS0MsRUFBTTJMLFFBQ25DM0wsRUFBTXdLLElBQUl6SyxFQUFJMDdDLFdBQVcsU0FBVyxFQUFJLEdBQzVDLElBR0E2cUQsRUFBa0I5bkcsUUFDbEJxNUQsRUFBY3Z6RCxTQUNYZ2lHLENBQ1gsQ0EySHdCQyxDQUFnQzF1QyxHQUNwQ211QyxHQUFzQyxHQUUxQ0MsRUFBcUJubEcsS0FBS2YsR0FDMUJvbEUsRUFBY3BsRSxRQUNhaUMsSUFBdkJtakUsRUFBY3BsRSxHQUNSb2xFLEVBQWNwbEUsR0FDZFcsRUFBT1gsR0FDakJDLEVBQU1ra0YsS0FBSzFxQyxHQUVuQixJQUVBeXNELEVBQXFCem5HLE9BQVEsQ0FDN0IsTUFBTWdvRyxFQUFVUCxFQUFxQi96RixRQUFRLFdBQWEsRUFDcEQ3TCxPQUFPK2pELFlBQ1AsS0FDQXE4QyxFQTNIbUIsRUFBQy9sRyxFQUFRbTNELEVBQWU2dUMsS0FDckQsTUFBTUMsRUFBYTl1QyxFQUFjdTJCLHFCQUMzQnprRSxFQUFVa3VDLEVBQWN4aEQsUUFDeEJ1d0YsRUFBdUJqRCxpQkFBaUJoNkUsSUFDeEMsUUFBRTBkLEdBQVl1L0QsRUFDZHovQyxFQUFTLENBQUMsRUFHQSxTQUFaOWYsR0FDQXd3QixFQUFjc3FDLGVBQWUsVUFBV3poRyxFQUFPMm1DLFNBQVcsU0FLOURxL0QsRUFBWWgvRixTQUFTM0gsSUFDakJvbkQsRUFBT3BuRCxHQUFPNGxHLEdBQWlCNWxHLEdBQUs0bUcsRUFBWUMsRUFBcUIsSUFHekUvdUMsRUFBY3Z6RCxTQUNkLE1BQU11aUcsRUFBYWh2QyxFQUFjdTJCLHFCQVFqQyxPQVBBc1ksRUFBWWgvRixTQUFTM0gsSUFHakIsTUFBTUMsRUFBUTYzRCxFQUFjL3JELFNBQVMvTCxHQUNyQ0MsR0FBU0EsRUFBTWtrRixLQUFLLzhCLEVBQU9wbkQsSUFDM0JXLEVBQU9YLEdBQU80bEcsR0FBaUI1bEcsR0FBSzhtRyxFQUFZRCxFQUFxQixJQUVsRWxtRyxDQUFNLEVBZ0dlb21HLENBQXlCcG1HLEVBQVFtM0QsRUFBZW91QyxHQWF4RSxPQVhJRixFQUF1QnZuRyxRQUN2QnVuRyxFQUF1QnIrRixTQUFRLEVBQUUzSCxFQUFLQyxNQUNsQzYzRCxFQUFjL3JELFNBQVMvTCxHQUFLeUssSUFBSXhLLEVBQU0sSUFJOUM2M0QsRUFBY3Z6RCxTQUVWLElBQXlCLE9BQVpraUcsR0FDYm5nRyxPQUFPZ2tELFNBQVMsQ0FBRXZnQyxJQUFLMDhFLElBRXBCLENBQUU5bEcsT0FBUStsRyxFQUFpQnRoQyxnQkFDdEMsQ0FFSSxNQUFPLENBQUV6a0UsU0FBUXlrRSxnQkFDckIsRUFXTTRoQyxDQUFpQ2x2QyxFQUFlbjNELEVBQVF5bUQsRUFBUWdlLEdBQ2hFLENBQUV6a0UsU0FBUXlrRSxnQkFDcEIsQ0M1TkEsTUNOTTZoQyxHQUF1QixDQUFFM3dGLFFBQVMsTUFDbEM0d0YsR0FBMkIsQ0FBRTV3RixTQUFTLEdDRnRDNndGLEdBQXFCLElBQUk5bUUsUUNvQnpCK21FLEdBQWUxaUcsT0FBT1csS0FBS214RCxJQUMzQjZ3QyxHQUFjRCxHQUFhM29HLE9BQzNCNm9HLEdBQW9CLENBQ3RCLGlCQUNBLG9CQUNBLFNBQ0Esc0JBQ0EsZ0JBQ0EsdUJBQ0EsMkJBRUVDLEdBQWtCN3hDLEdBQWFqM0QsT0FLckMsTUFBTStvRyxHQUNGLFdBQUE3N0YsRUFBWSxPQUFFb3NELEVBQU0sTUFBRXQzRCxFQUFLLGdCQUFFdzNELEVBQWUsb0JBQUVDLEVBQW1CLFlBQUVMLEdBQWdCcnFELEVBQVUsQ0FBQyxHQUsxRm5OLEtBQUtpVyxRQUFVLEtBSWZqVyxLQUFLeU4sU0FBVyxJQUFJOUgsSUFJcEIzRixLQUFLdzFELGVBQWdCLEVBQ3JCeDFELEtBQUtzMUQsdUJBQXdCLEVBUTdCdDFELEtBQUsybEYsbUJBQXFCLEtBTTFCM2xGLEtBQUtxaUUsT0FBUyxJQUFJcm9ELElBSWxCaGEsS0FBSzQyRCxTQUFXLENBQUMsRUFLakI1MkQsS0FBS29uRyxtQkFBcUIsSUFBSXB0RixJQU05QmhhLEtBQUtxbkcsaUJBQW1CLENBQUMsRUFJekJybkcsS0FBSzZpRixPQUFTLENBQUMsRUFNZjdpRixLQUFLc25HLHVCQUF5QixDQUFDLEVBQy9CdG5HLEtBQUt1bkcsYUFBZSxJQUFNdm5HLEtBQUtxaUYsT0FBTyxTQUFVcmlGLEtBQUttK0QsY0FDckRuK0QsS0FBS2tFLE9BQVMsS0FDTGxFLEtBQUtpVyxVQUVWalcsS0FBS3duRyxlQUNMeG5HLEtBQUt5bkcsZUFBZXpuRyxLQUFLaVcsUUFBU2pXLEtBQUtnakUsWUFBYWhqRSxLQUFLSSxNQUFNeVIsTUFBTzdSLEtBQUs0aUUsWUFBVyxFQUUxRjVpRSxLQUFLdTJGLGVBQWlCLElBQU0sR0FBTXJ5RixPQUFPbEUsS0FBS2tFLFFBQVEsR0FBTyxHQUM3RCxNQUFNLGFBQUVpNkQsRUFBWSxZQUFFNkUsR0FBZ0J4TCxFQUN0Q3gzRCxLQUFLbStELGFBQWVBLEVBQ3BCbitELEtBQUswbkcsV0FBYSxJQUFLdnBDLEdBQ3ZCbitELEtBQUsybkcsY0FBZ0J2bkcsRUFBTWczRCxRQUFVLElBQUsrRyxHQUFpQixDQUFDLEVBQzVEbitELEtBQUtnakUsWUFBY0EsRUFDbkJoakUsS0FBSzAzRCxPQUFTQSxFQUNkMTNELEtBQUtJLE1BQVFBLEVBQ2JKLEtBQUs0M0QsZ0JBQWtCQSxFQUN2QjUzRCxLQUFLZzRGLE1BQVF0Z0MsRUFBU0EsRUFBT3NnQyxNQUFRLEVBQUksRUFDekNoNEYsS0FBSzYzRCxvQkFBc0JBLEVBQzNCNzNELEtBQUttTixRQUFVQSxFQUNmbk4sS0FBS3MxRCxzQkFBd0JBLEdBQXNCbDFELEdBQ25ESixLQUFLdzFELGNBQWdCQSxHQUFjcDFELEdBQy9CSixLQUFLdzFELGdCQUNMeDFELEtBQUtpbUYsZ0JBQWtCLElBQUl0Z0YsS0FFL0IzRixLQUFLNm5GLHVCQUF5Qm4rQixRQUFRZ08sR0FBVUEsRUFBT3poRCxTQVd2RCxNQUFNLFdBQUVxdkUsS0FBZXNpQixHQUF3QjVuRyxLQUFLa2pFLDRCQUE0QjlpRSxFQUFPLENBQUMsR0FDeEYsSUFBSyxNQUFNVCxLQUFPaW9HLEVBQXFCLENBQ25DLE1BQU1ob0csRUFBUWdvRyxFQUFvQmpvRyxRQUNSaUMsSUFBdEJ1OEQsRUFBYXgrRCxJQUFzQjg1RCxHQUFjNzVELEtBQ2pEQSxFQUFNd0ssSUFBSSt6RCxFQUFheCtELElBQU0sR0FDekJvaUYsR0FBd0J1RCxJQUN4QkEsRUFBV3YvRSxJQUFJcEcsR0FHM0IsQ0FDSixDQVFBLDJCQUFBdWpFLENBQTRCdmUsRUFBUWtqRCxHQUNoQyxNQUFPLENBQUMsQ0FDWixDQUNBLEtBQUFwdkMsQ0FBTS9zQyxHQUNGMXJCLEtBQUtpVyxRQUFVeVYsRUFDZm83RSxHQUFtQjE4RixJQUFJc2hCLEVBQVUxckIsTUFDN0JBLEtBQUs0aUUsYUFBZTVpRSxLQUFLNGlFLFdBQVdsM0MsVUFDcEMxckIsS0FBSzRpRSxXQUFXbkssTUFBTS9zQyxHQUV0QjFyQixLQUFLMDNELFFBQVUxM0QsS0FBS3cxRCxnQkFBa0J4MUQsS0FBS3MxRCx3QkFDM0N0MUQsS0FBSzhuRyxzQkFBd0I5bkcsS0FBSzAzRCxPQUFPcXdDLGdCQUFnQi9uRyxPQUU3REEsS0FBS3FpRSxPQUFPLzZELFNBQVEsQ0FBQzFILEVBQU9ELElBQVFLLEtBQUtnb0csa0JBQWtCcm9HLEVBQUtDLEtBQzNEaW5HLEdBQXlCNXdGLFNDMUp0QyxXQUVJLEdBREE0d0YsR0FBeUI1d0YsU0FBVSxFQUM5QixHQUVMLEdBQUloUSxPQUFPZ2lHLFdBQVksQ0FDbkIsTUFBTUMsRUFBbUJqaUcsT0FBT2dpRyxXQUFXLDRCQUNyQ0UsRUFBOEIsSUFBT3ZCLEdBQXFCM3dGLFFBQVVpeUYsRUFBaUJ0dEQsUUFDM0ZzdEQsRUFBaUJFLFlBQVlELEdBQzdCQSxHQUNKLE1BRUl2QixHQUFxQjN3RixTQUFVLENBRXZDLENEOElZb3lGLEdBRUpyb0csS0FBSzJsRixtQkFDNEIsVUFBN0IzbEYsS0FBSzYzRCxzQkFFOEIsV0FBN0I3M0QsS0FBSzYzRCxxQkFFRCt1QyxHQUFxQjN3RixTQUkvQmpXLEtBQUswM0QsUUFDTDEzRCxLQUFLMDNELE9BQU9qcUQsU0FBUzFILElBQUkvRixNQUM3QkEsS0FBS2syQyxPQUFPbDJDLEtBQUtJLE1BQU9KLEtBQUs0M0QsZ0JBQ2pDLENBQ0EsT0FBQTlxQixHQUNJZzZELEdBQW1CenNGLE9BQU9yYSxLQUFLaVcsU0FDL0JqVyxLQUFLNGlFLFlBQWM1aUUsS0FBSzRpRSxXQUFXOTFCLFVBQ25DNDRCLEdBQVkxbEUsS0FBS3VuRyxjQUNqQjdoQyxHQUFZMWxFLEtBQUtrRSxRQUNqQmxFLEtBQUtvbkcsbUJBQW1COS9GLFNBQVM4dUMsR0FBV0EsTUFDNUNwMkMsS0FBSzhuRyx1QkFBeUI5bkcsS0FBSzhuRyx3QkFDbkM5bkcsS0FBSzAzRCxRQUFVMTNELEtBQUswM0QsT0FBT2pxRCxTQUFTNE0sT0FBT3JhLE1BQzNDLElBQUssTUFBTUwsS0FBT0ssS0FBSzZpRixPQUNuQjdpRixLQUFLNmlGLE9BQU9sakYsR0FBSzJsRSxRQUVyQixJQUFLLE1BQU0zbEUsS0FBT0ssS0FBSzQyRCxTQUNuQjUyRCxLQUFLNDJELFNBQVNqM0QsR0FBS210QyxVQUV2QjlzQyxLQUFLaVcsUUFBVSxJQUNuQixDQUNBLGlCQUFBK3hGLENBQWtCcm9HLEVBQUtDLEdBQ25CLE1BQU0wb0csRUFBbUIvdUMsR0FBZXp0QyxJQUFJbnNCLEdBQ3RDNG9HLEVBQWlCM29HLEVBQU0yakYsR0FBRyxVQUFXaWxCLElBQ3ZDeG9HLEtBQUttK0QsYUFBYXgrRCxHQUFPNm9HLEVBQ3pCeG9HLEtBQUtJLE1BQU13N0UsVUFDUCxHQUFNMWxDLE9BQU9sMkMsS0FBS3VuRyxjQUFjLEdBQU8sR0FDdkNlLEdBQW9CdG9HLEtBQUs0aUUsYUFDekI1aUUsS0FBSzRpRSxXQUFXczJCLGtCQUFtQixFQUN2QyxJQUVFdVAsRUFBd0I3b0csRUFBTTJqRixHQUFHLGdCQUFpQnZqRixLQUFLdTJGLGdCQUM3RHYyRixLQUFLb25HLG1CQUFtQmg5RixJQUFJekssR0FBSyxLQUM3QjRvRyxJQUNBRSxHQUF1QixHQUUvQixDQUNBLGdCQUFBbGlCLENBQWlCbWlCLEdBSWIsT0FBSzFvRyxLQUFLaVcsU0FDTGpXLEtBQUsyb0csMEJBQ04zb0csS0FBS3FELE9BQVNxbEcsRUFBTXJsRyxLQUdqQnJELEtBQUsyb0cseUJBQXlCM29HLEtBQUtpVyxRQUFTeXlGLEVBQU16eUYsU0FGOUMsQ0FHZixDQUNBLFlBQUE0Z0QsRUFBYSxTQUFFcHBELEtBQWFtN0YsR0FBaUJwd0MsRUFBVWhDLEVBQW1CK0IsR0FDdEUsSUFBSXN3QyxFQUNBN3hDLEVBYUosSUFBSyxJQUFJMTFELEVBQUksRUFBR0EsRUFBSTBsRyxHQUFhMWxHLElBQUssQ0FDbEMsTUFBTWpCLEVBQU8wbUcsR0FBYXpsRyxJQUNwQixVQUFFODBELEVBQVd5UyxRQUFTaWdDLEVBQWtCLGVBQUUzRSxFQUFnQm50QyxjQUFlK3hDLEdBQTRCNXlDLEdBQW1COTFELEdBQzFIOGpHLElBQ0EwRSxFQUE0QjFFLEdBQzVCL3RDLEVBQVV3eUMsTUFDTDVvRyxLQUFLNDJELFNBQVN2MkQsSUFBU3lvRyxJQUN4QjlvRyxLQUFLNDJELFNBQVN2MkQsR0FBUSxJQUFJeW9HLEVBQW1COW9HLE9BRTdDK29HLElBQ0EveEMsRUFBZ0IreEMsR0FHNUIsQ0FDQSxJQUFLL29HLEtBQUs0aUUsWUFBY2ltQyxFQUEyQixDQUMvQzdvRyxLQUFLNGlFLFdBQWEsSUFBSWltQyxFQUEwQjdvRyxLQUFLbStELGFBQWNuK0QsS0FBSzAzRCxRQUFVMTNELEtBQUswM0QsT0FBT2tMLFlBQzlGLE1BQU0sU0FBRTFMLEVBQVEsT0FBRWhCLEVBQU0sS0FBRUwsRUFBSSxnQkFBRXM2QixFQUFlLGFBQUVxTixFQUFZLFdBQUUxQixHQUFnQjhNLEVBQy9FNW9HLEtBQUs0aUUsV0FBV3F4QixXQUFXLENBQ3ZCLzhCLFdBQ0FoQixTQUNBaW5DLG9CQUFxQnp6QyxRQUFRbU0sSUFDeEJzNkIsR0FBbUJsN0IsR0FBWWs3QixHQUNwQzE0QixjQUFlejNELEtBQ2Z1MkYsZUFBZ0IsSUFBTXYyRixLQUFLdTJGLGlCQVEzQmdMLGNBQWlDLGlCQUFYcnJDLEVBQXNCQSxFQUFTLE9BQ3JEd3JDLHVCQUF3Qm5wQyxFQUN4QmlsQyxlQUNBMUIsY0FFUixDQUNBLE9BQU85a0MsQ0FDWCxDQUNBLGNBQUFxQixHQUNJLElBQUssTUFBTTE0RCxLQUFPSyxLQUFLNDJELFNBQVUsQ0FDN0IsTUFBTW95QyxFQUFVaHBHLEtBQUs0MkQsU0FBU2ozRCxHQUMxQnFwRyxFQUFRcnlFLFVBQ1JxeUUsRUFBUTl5RCxVQUdSOHlELEVBQVF2d0MsUUFDUnV3QyxFQUFRcnlFLFdBQVksRUFFNUIsQ0FDSixDQUNBLFlBQUE2d0UsR0FDSXhuRyxLQUFLaXBHLE1BQU1qcEcsS0FBS2dqRSxZQUFhaGpFLEtBQUttK0QsYUFBY24rRCxLQUFLbU4sUUFBU25OLEtBQUtJLE1BQ3ZFLENBTUEsa0JBQUE0dEYsR0FDSSxPQUFPaHVGLEtBQUtpVyxRQUNOalcsS0FBS2twRywyQkFBMkJscEcsS0FBS2lXLFFBQVNqVyxLQUFLSSxPQUNuRG9zRixJQUNWLENBQ0EsY0FBQTJjLENBQWV4cEcsR0FDWCxPQUFPSyxLQUFLbStELGFBQWF4K0QsRUFDN0IsQ0FDQSxjQUFBb2lHLENBQWVwaUcsRUFBS0MsR0FDaEJJLEtBQUttK0QsYUFBYXgrRCxHQUFPQyxDQUM3QixDQVFBLG9CQUFBeWxGLENBQXFCL2tGLEVBQVE4b0csR0FBWSxHQUNyQyxPQUFPcHBHLEtBQUtxcEcsaUNBQWlDL29HLEVBQVFOLEtBQUtJLE1BQU9ncEcsRUFDckUsQ0FLQSxNQUFBbHpELENBQU85MUMsRUFBT3czRCxJQUNOeDNELEVBQU1nK0QsbUJBQXFCcCtELEtBQUtJLE1BQU1nK0Qsb0JBQ3RDcCtELEtBQUt1MkYsaUJBRVR2MkYsS0FBS21qRSxVQUFZbmpFLEtBQUtJLE1BQ3RCSixLQUFLSSxNQUFRQSxFQUNiSixLQUFLbXBGLG9CQUFzQm5wRixLQUFLNDNELGdCQUNoQzUzRCxLQUFLNDNELGdCQUFrQkEsRUFJdkIsSUFBSyxJQUFJdDJELEVBQUksRUFBR0EsRUFBSTJsRyxHQUFrQjdvRyxPQUFRa0QsSUFBSyxDQUMvQyxNQUFNM0IsRUFBTXNuRyxHQUFrQjNsRyxHQUMxQnRCLEtBQUtzbkcsdUJBQXVCM25HLEtBQzVCSyxLQUFLc25HLHVCQUF1QjNuRyxZQUNyQkssS0FBS3NuRyx1QkFBdUIzbkcsSUFFdkMsTUFBTWdzQixFQUFXdnJCLEVBQU0sS0FBT1QsR0FDMUJnc0IsSUFDQTNyQixLQUFLc25HLHVCQUF1QjNuRyxHQUFPSyxLQUFLdWpGLEdBQUc1akYsRUFBS2dzQixHQUV4RCxDQUNBM3JCLEtBQUtxbkcsaUJFNVViLFNBQXFDOTlFLEVBQVNpTCxFQUFNNDRDLEdBQ2hELE1BQU0sV0FBRWtZLEdBQWU5d0QsRUFDdkIsSUFBSyxNQUFNNzBCLEtBQU82MEIsRUFBTSxDQUNwQixNQUFNODBFLEVBQVk5MEUsRUFBSzcwQixHQUNqQjRwRyxFQUFZbjhCLEVBQUt6dEUsR0FDdkIsR0FBSTg1RCxHQUFjNnZDLEdBS2QvL0UsRUFBUXM3RCxTQUFTbGxGLEVBQUsycEcsR0FDbEJ2bkIsR0FBd0J1RCxJQUN4QkEsRUFBV3YvRSxJQUFJcEcsUUFVbEIsR0FBSTg1RCxHQUFjOHZDLEdBS25CaGdGLEVBQVFzN0QsU0FBU2xsRixFQUFLMmtGLEdBQVlnbEIsRUFBVyxDQUFFM29CLE1BQU9wM0QsS0FDbER3NEQsR0FBd0J1RCxJQUN4QkEsRUFBV2x2QyxPQUFPejJDLFFBR3JCLEdBQUk0cEcsSUFBY0QsRUFNbkIsR0FBSS8vRSxFQUFRcTdELFNBQVNqbEYsR0FBTSxDQUN2QixNQUFNNnBHLEVBQWdCamdGLEVBQVE3ZCxTQUFTL0wsSUFFdEM2cEcsRUFBY25tQixhQUFlbW1CLEVBQWNwL0YsSUFBSWsvRixFQUNwRCxLQUNLLENBQ0QsTUFBTWQsRUFBY2ovRSxFQUFRNC9FLGVBQWV4cEcsR0FDM0M0cEIsRUFBUXM3RCxTQUFTbGxGLEVBQUsya0YsUUFBNEIxaUYsSUFBaEI0bUcsRUFBNEJBLEVBQWNjLEVBQVcsQ0FBRTNvQixNQUFPcDNELElBQ3BHLENBRVIsQ0FFQSxJQUFLLE1BQU01cEIsS0FBT3l0RSxPQUNJeHJFLElBQWQ0eUIsRUFBSzcwQixJQUNMNHBCLEVBQVFrZ0YsWUFBWTlwRyxHQUU1QixPQUFPNjBCLENBQ1gsQ0ZxUmdDazFFLENBQTRCMXBHLEtBQU1BLEtBQUtrakUsNEJBQTRCOWlFLEVBQU9KLEtBQUttakUsV0FBWW5qRSxLQUFLcW5HLGtCQUNwSHJuRyxLQUFLMnBHLHdCQUNMM3BHLEtBQUsycEcsd0JBRWIsQ0FDQSxRQUFBMWdDLEdBQ0ksT0FBT2pwRSxLQUFLSSxLQUNoQixDQUlBLFVBQUF3cEcsQ0FBV3ZwRyxHQUNQLE9BQU9MLEtBQUtJLE1BQU1xMUQsU0FBV3oxRCxLQUFLSSxNQUFNcTFELFNBQVNwMUQsUUFBUXVCLENBQzdELENBSUEsb0JBQUF1OEUsR0FDSSxPQUFPbitFLEtBQUtJLE1BQU0wYixVQUN0QixDQUNBLHFCQUFBK3pFLEdBQ0ksT0FBTzd2RixLQUFLSSxNQUFNdTBELGtCQUN0QixDQUNBLHFCQUFBazFDLEdBQ0ksT0FBTzdwRyxLQUFLdzFELGNBQ054MUQsS0FDQUEsS0FBSzAzRCxPQUNEMTNELEtBQUswM0QsT0FBT215Qyw2QkFDWmpvRyxDQUNkLENBQ0EsaUJBQUF5bEYsQ0FBa0J5aUIsR0FBZ0IsR0FDOUIsR0FBSUEsRUFDQSxPQUFPOXBHLEtBQUswM0QsT0FBUzEzRCxLQUFLMDNELE9BQU8ydkIseUJBQXNCemxGLEVBRTNELElBQUs1QixLQUFLczFELHNCQUF1QixDQUM3QixNQUFNaGhDLEVBQVV0MEIsS0FBSzAzRCxRQUNmMTNELEtBQUswM0QsT0FBTzJ2QixxQkFDWixDQUFDLEVBSVAsWUFIMkJ6bEYsSUFBdkI1QixLQUFLSSxNQUFNZzNELFVBQ1g5aUMsRUFBUThpQyxRQUFVcDNELEtBQUtJLE1BQU1nM0QsU0FFMUI5aUMsQ0FDWCxDQUNBLE1BQU1BLEVBQVUsQ0FBQyxFQUNqQixJQUFLLElBQUloekIsRUFBSSxFQUFHQSxFQUFJNGxHLEdBQWlCNWxHLElBQUssQ0FDdEMsTUFBTWpCLEVBQU9nMUQsR0FBYS96RCxHQUNwQmczQyxFQUFPdDRDLEtBQUtJLE1BQU1DLElBQ3BCNjBELEdBQWU1YyxLQUFrQixJQUFUQSxLQUN4QmhrQixFQUFRajBCLEdBQVFpNEMsRUFFeEIsQ0FDQSxPQUFPaGtCLENBQ1gsQ0FJQSxlQUFBeXpFLENBQWdCaHlGLEdBQ1osTUFBTWcwRixFQUFxQi9wRyxLQUFLNnBHLHdCQUNoQyxHQUFJRSxFQUdBLE9BRkFBLEVBQW1COWpCLGlCQUNmOGpCLEVBQW1COWpCLGdCQUFnQmxnRixJQUFJZ1EsR0FDcEMsSUFBTWcwRixFQUFtQjlqQixnQkFBZ0I1ckUsT0FBT3RFLEVBRS9ELENBSUEsUUFBQTh1RSxDQUFTbGxGLEVBQUtDLEdBRU5BLElBQVVJLEtBQUtxaUUsT0FBTzkyRCxJQUFJNUwsS0FDMUJLLEtBQUt5cEcsWUFBWTlwRyxHQUNqQkssS0FBS2dvRyxrQkFBa0Jyb0csRUFBS0MsSUFFaENJLEtBQUtxaUUsT0FBT2o0RCxJQUFJekssRUFBS0MsR0FDckJJLEtBQUttK0QsYUFBYXgrRCxHQUFPQyxFQUFNMkwsS0FDbkMsQ0FJQSxXQUFBaytGLENBQVk5cEcsR0FDUkssS0FBS3FpRSxPQUFPaG9ELE9BQU8xYSxHQUNuQixNQUFNNmpGLEVBQWN4akYsS0FBS29uRyxtQkFBbUI3N0YsSUFBSTVMLEdBQzVDNmpGLElBQ0FBLElBQ0F4akYsS0FBS29uRyxtQkFBbUIvc0YsT0FBTzFhLFdBRTVCSyxLQUFLbStELGFBQWF4K0QsR0FDekJLLEtBQUtncUcsMkJBQTJCcnFHLEVBQUtLLEtBQUtnakUsWUFDOUMsQ0FJQSxRQUFBNGhCLENBQVNqbEYsR0FDTCxPQUFPSyxLQUFLcWlFLE9BQU92MkMsSUFBSW5zQixFQUMzQixDQUNBLFFBQUErTCxDQUFTL0wsRUFBSzBNLEdBQ1YsR0FBSXJNLEtBQUtJLE1BQU1paUUsUUFBVXJpRSxLQUFLSSxNQUFNaWlFLE9BQU8xaUUsR0FDdkMsT0FBT0ssS0FBS0ksTUFBTWlpRSxPQUFPMWlFLEdBRTdCLElBQUlDLEVBQVFJLEtBQUtxaUUsT0FBTzkyRCxJQUFJNUwsR0FLNUIsWUFKY2lDLElBQVZoQyxRQUF3Q2dDLElBQWpCeUssSUFDdkJ6TSxFQUFRMGtGLEdBQVlqNEUsRUFBYyxDQUFFczBFLE1BQU8zZ0YsT0FDM0NBLEtBQUs2a0YsU0FBU2xsRixFQUFLQyxJQUVoQkEsQ0FDWCxDQU1BLFNBQUFxcUcsQ0FBVXRxRyxHQUNOLElBQUk0Z0UsRUFDSixZQUFrQzMrRCxJQUEzQjVCLEtBQUttK0QsYUFBYXgrRCxJQUF1QkssS0FBS2lXLFFBRVMsUUFBdkRzcUQsRUFBS3ZnRSxLQUFLa3FHLHVCQUF1QmxxRyxLQUFLSSxNQUFPVCxVQUF5QixJQUFQNGdFLEVBQWdCQSxFQUFLdmdFLEtBQUttcUcsc0JBQXNCbnFHLEtBQUtpVyxRQUFTdFcsRUFBS0ssS0FBS21OLFNBRHhJbk4sS0FBS20rRCxhQUFheCtELEVBRTVCLENBS0EsYUFBQXlxRyxDQUFjenFHLEVBQUtDLEdBQ2ZJLEtBQUswbkcsV0FBVy9uRyxHQUFPQyxDQUMzQixDQUtBLGFBQUE2b0YsQ0FBYzlvRixHQUNWLElBQUk0Z0UsRUFDSixNQUFNLFFBQUVuSixHQUFZcDNELEtBQUtJLE1BQ25CaXFHLEVBQXNDLGlCQUFaanpDLEdBQTJDLGlCQUFaQSxFQUNELFFBQXZEbUosRUFBSzhDLEdBQXdCcmpFLEtBQUtJLE1BQU9nM0QsVUFBNkIsSUFBUG1KLE9BQWdCLEVBQVNBLEVBQUc1Z0UsUUFDNUZpQyxFQUlOLEdBQUl3MUQsUUFBZ0N4MUQsSUFBckJ5b0csRUFDWCxPQUFPQSxFQU1YLE1BQU0vcEcsRUFBU04sS0FBS2txRyx1QkFBdUJscUcsS0FBS0ksTUFBT1QsR0FDdkQsWUFBZWlDLElBQVh0QixHQUF5Qm01RCxHQUFjbjVELFFBTVJzQixJQUE1QjVCLEtBQUsybkcsY0FBY2hvRyxTQUNEaUMsSUFBckJ5b0csT0FDRXpvRyxFQUNBNUIsS0FBSzBuRyxXQUFXL25HLEdBUlhXLENBU2YsQ0FDQSxFQUFBaWpGLENBQUc5YixFQUFXN3hDLEdBSVYsT0FISzUxQixLQUFLNmlGLE9BQU9wYixLQUNiem5FLEtBQUs2aUYsT0FBT3BiLEdBQWEsSUFBSTBhLElBRTFCbmlGLEtBQUs2aUYsT0FBT3BiLEdBQVcxaEUsSUFBSTZ2QixFQUN0QyxDQUNBLE1BQUF5c0QsQ0FBTzVhLEtBQWNwcEUsR0FDYjJCLEtBQUs2aUYsT0FBT3BiLElBQ1p6bkUsS0FBSzZpRixPQUFPcGIsR0FBVzRhLFVBQVVoa0YsRUFFekMsRUduZkosTUFBTWlzRyxXQUF5Qm5ELEdBQzNCLHdCQUFBd0IsQ0FBeUJwakcsRUFBR0MsR0FNeEIsT0FBc0MsRUFBL0JELEVBQUVtaUIsd0JBQXdCbGlCLEdBQVMsR0FBSyxDQUNuRCxDQUNBLHNCQUFBMGtHLENBQXVCOXBHLEVBQU9ULEdBQzFCLE9BQU9TLEVBQU15UixNQUFRelIsRUFBTXlSLE1BQU1sUyxRQUFPaUMsQ0FDNUMsQ0FDQSwwQkFBQW9vRyxDQUEyQnJxRyxHQUFLLEtBQUUwK0QsRUFBSSxNQUFFeHNELFdBQzdCd3NELEVBQUsxK0QsVUFDTGtTLEVBQU1sUyxFQUNqQixDQUNBLGdDQUFBMHBHLEVBQWlDLFdBQUV2dEYsRUFBVSxjQUFFaXBELEtBQWtCemtFLElBQVUsZ0JBQUVnL0QsR0FBbUIzb0MsR0FDNUYsSUFBSW93QixFbERxRlosU0FBbUJ6bUQsRUFBUXdiLEVBQVkyN0MsR0FDbkMsTUFBTTFRLEVBQVMsQ0FBQyxFQUNoQixJQUFLLE1BQU1wbkQsS0FBT1csRUFBUSxDQUN0QixNQUFNaXFHLEVBQW1CemxCLEdBQXdCbmxGLEVBQUttYyxHQUN0RCxRQUF5QmxhLElBQXJCMm9HLEVBQ0F4akQsRUFBT3BuRCxHQUFPNHFHLE1BRWIsQ0FDRCxNQUFNM3FHLEVBQVE2M0QsRUFBYy9yRCxTQUFTL0wsR0FDakNDLElBQ0FtbkQsRUFBT3BuRCxHQUFPQyxFQUFNMkwsTUFFNUIsQ0FDSixDQUNBLE9BQU93N0MsQ0FDWCxDa0RwR3FCeWpELENBQVVscUcsRUFBUXdiLEdBQWMsQ0FBQyxFQUFHOWIsTUFZakQsR0FSSXMvRCxJQUNJeUYsSUFDQUEsRUFBZ0J6RixFQUFnQnlGLElBQ2hDemtFLElBQ0FBLEVBQVNnL0QsRUFBZ0JoL0QsSUFDekJ5bUQsSUFDQUEsRUFBU3VZLEVBQWdCdlksS0FFN0Jwd0IsRUFBVyxFbERvQnZCLFNBQWlDOGdDLEVBQWVuM0QsRUFBUXltRCxHQUNwRCxJQUFJd1osRUFBSXNULEVBQ1IsTUFBTTQyQixFQUFlcG1HLE9BQU9XLEtBQUsxRSxHQUFRczhDLFFBQVFqOUMsSUFBUzgzRCxFQUFjbXRCLFNBQVNqbEYsS0FDM0UrcUcsRUFBZUQsRUFBYXJzRyxPRDVDaEIsSUFBQ3FJLEVDNkNuQixHQUFLaWtHLEVBRUwsSUFBSyxJQUFJcHBHLEVBQUksRUFBR0EsRUFBSW9wRyxFQUFjcHBHLElBQUssQ0FDbkMsTUFBTTNCLEVBQU04cUcsRUFBYW5wRyxHQUNuQnFwRyxFQUFjcnFHLEVBQU9YLEdBQzNCLElBQUlDLEVBQVEsS0FLUnRCLE1BQU0yTyxRQUFRMDlGLEtBQ2QvcUcsRUFBUStxRyxFQUFZLElBT1YsT0FBVi9xRyxJQUNBQSxFQUFvRyxRQUEzRmkwRSxFQUE0QixRQUF0QnRULEVBQUt4WixFQUFPcG5ELFVBQXlCLElBQVA0Z0UsRUFBZ0JBLEVBQUs5SSxFQUFjd3lDLFVBQVV0cUcsVUFBeUIsSUFBUGswRSxFQUFnQkEsRUFBS3Z6RSxFQUFPWCxJQU14SUMsVUFFaUIsaUJBQVZBLElBQ05vaUYsR0FBa0JwaUYsSUFBVTAvRSxHQUFrQjEvRSxJQUUvQ0EsRUFBUTA2RCxXQUFXMTZELElEM0VSNkcsRUM2RVM3RyxHRDdFSDhrRixHQUFXdFMsS0FBS21TLEdBQWM5OUUsS0M2RWpCbXRFLEdBQVE3ckUsS0FBSzRpRyxLQUMzQy9xRyxFQUFRLEdBQWtCRCxFQUFLZ3JHLEtBRW5DbHpDLEVBQWNvdEIsU0FBU2xsRixFQUFLMmtGLEdBQVkxa0YsRUFBTyxDQUFFK2dGLE1BQU9scEIsVUFDcEM3MUQsSUFBaEJtbEQsRUFBT3BuRCxLQUNQb25ELEVBQU9wbkQsR0FBT0MsR0FFSixPQUFWQSxHQUNBNjNELEVBQWMyeUMsY0FBY3pxRyxFQUFLQyxHQUN6QyxDQUNKLENrRGpFWWdyRyxDQUF3QjVxRyxLQUFNTSxFQUFReW1ELEdBQ3RDLE1BQU1ndEIsRU41Qk0sRUFBQ3RjLEVBQWVuM0QsRUFBUXltRCxFQUFRZ2UsS0FDcEQsTUFBTUQsRUZ1Q1YsU0FBNkJyTixNQUFvQm4zRCxHQUFVeWtFLEdBQ3ZELE1BQU14N0MsRUFBVWt1QyxFQUFjeGhELFFBQzlCLEtBQU1zVCxhQUFtQmduQixTQUNyQixNQUFPLENBQUVqd0MsU0FBUXlrRSxpQkFHakJBLElBQ0FBLEVBQWdCLElBQUtBLElBR3pCdE4sRUFBYzRLLE9BQU8vNkQsU0FBUzFILElBQzFCLE1BQU1xVyxFQUFVclcsRUFBTTJMLE1BQ3RCLElBQUswdUQsR0FBbUJoa0QsR0FDcEIsT0FDSixNQUFNNnVELEVBQVd1L0IsR0FBaUJwdUYsRUFBU3NULEdBQ3ZDdTdDLEdBQ0FsbEUsRUFBTXdLLElBQUkwNkQsRUFBUyxJQUkzQixJQUFLLE1BQU1ubEUsS0FBT1csRUFBUSxDQUN0QixNQUFNMlYsRUFBVTNWLEVBQU9YLEdBQ3ZCLElBQUtzNkQsR0FBbUJoa0QsR0FDcEIsU0FDSixNQUFNNnVELEVBQVd1L0IsR0FBaUJwdUYsRUFBU3NULEdBQ3RDdTdDLElBR0x4a0UsRUFBT1gsR0FBT21sRSxFQUNUQyxJQUNEQSxFQUFnQixDQUFDLFFBSU1uakUsSUFBdkJtakUsRUFBY3BsRSxLQUNkb2xFLEVBQWNwbEUsR0FBT3NXLEdBRTdCLENBQ0EsTUFBTyxDQUFFM1YsU0FBUXlrRSxnQkFDckIsQ0U5RXFCOGxDLENBQW9CcHpDLEVBQWVuM0QsRUFBUXlrRSxHQUc1RCxPQUFPeWdDLEdBQWUvdEMsRUFGdEJuM0QsRUFBU3drRSxFQUFTeGtFLE9BRTJCeW1ELEVBRDdDZ2UsRUFBZ0JELEVBQVNDLGNBQzBDLEVNd0I1QytsQyxDQUFnQjlxRyxLQUFNTSxFQUFReW1ELEVBQVFnZSxHQUNyREEsRUFBZ0JnUCxFQUFPaFAsY0FDdkJ6a0UsRUFBU3l6RSxFQUFPenpFLE1BQ3BCLENBQ0EsTUFBTyxDQUNId2IsYUFDQWlwRCxtQkFDR3prRSxFQUVYLEVDL0JKLE1BQU15cUcsV0FBMEJULEdBQzVCLHFCQUFBSCxDQUFzQnorRSxFQUFVL3JCLEdBQzVCLEdBQUk0NUQsR0FBZXp0QyxJQUFJbnNCLEdBQU0sQ0FDekIsTUFBTXFyRyxFQUFjNXJCLEdBQW9Cei9FLEdBQ3hDLE9BQU9xckcsR0FBY0EsRUFBWTU0RCxTQUFlLENBQ3BELENBQ0ssQ0FDRCxNQUFNNjRELEdBVlExaEYsRUFVeUJtQyxFQVR4Q3psQixPQUFPczlGLGlCQUFpQmg2RSxJQVVqQjNwQixHQUFTbzZELEdBQWtCcjZELEdBQzNCc3JHLEVBQWN6RyxpQkFBaUI3a0csR0FDL0JzckcsRUFBY3RyRyxLQUFTLEVBQzdCLE1BQXdCLGlCQUFWQyxFQUFxQkEsRUFBTW1LLE9BQVNuSyxDQUN0RCxDQWZSLElBQTBCMnBCLENBZ0J0QixDQUNBLDBCQUFBMi9FLENBQTJCeDlFLEdBQVUsbUJBQUVpcEMsSUFDbkMsT0FBT3E1QixHQUFtQnRpRSxFQUFVaXBDLEVBQ3hDLENBQ0EsS0FBQXMwQyxDQUFNam1DLEVBQWE3RSxFQUFjaHhELEVBQVMvTSxHQUN0Qzg5RCxHQUFnQjhFLEVBQWE3RSxFQUFjaHhELEVBQVMvTSxFQUFNZytELGtCQUM5RCxDQUNBLDJCQUFBOEUsQ0FBNEI5aUUsRUFBTytpRSxHQUMvQixPQUFPRCxHQUE0QjlpRSxFQUFPK2lFLEVBQzlDLENBQ0Esc0JBQUF3bUMsR0FDUTNwRyxLQUFLa3JHLG9CQUNMbHJHLEtBQUtrckcsMkJBQ0VsckcsS0FBS2tyRyxtQkFFaEIsTUFBTSxTQUFFejlGLEdBQWF6TixLQUFLSSxNQUN0QnE1RCxHQUFjaHNELEtBQ2R6TixLQUFLa3JHLGtCQUFvQno5RixFQUFTODFFLEdBQUcsVUFBV3BpQixJQUN4Q25oRSxLQUFLaVcsVUFDTGpXLEtBQUtpVyxRQUFRcEksWUFBYyxHQUFHc3pELElBQVEsSUFHdEQsQ0FDQSxjQUFBc21DLENBQWUvN0UsRUFBVXMzQyxFQUFhN1osRUFBV3laLEdBQzdDRCxHQUFXajNDLEVBQVVzM0MsRUFBYTdaLEVBQVd5WixFQUNqRCxFQ3hDSixNQUFNdW9DLFdBQXlCYixHQUMzQixXQUFBaC9GLEdBQ0k4NEMsU0FBU2ptRCxXQUNUNkIsS0FBS29oRSxVQUFXLENBQ3BCLENBQ0Esc0JBQUE4b0MsQ0FBdUI5cEcsRUFBT1QsR0FDMUIsT0FBT1MsRUFBTVQsRUFDakIsQ0FDQSxxQkFBQXdxRyxDQUFzQnorRSxFQUFVL3JCLEdBQzVCLEdBQUk0NUQsR0FBZXp0QyxJQUFJbnNCLEdBQU0sQ0FDekIsTUFBTXFyRyxFQUFjNXJCLEdBQW9Cei9FLEdBQ3hDLE9BQU9xckcsR0FBY0EsRUFBWTU0RCxTQUFlLENBQ3BELENBRUEsT0FEQXp5QyxFQUFPbWpFLEdBQW9CaDNDLElBQUluc0IsR0FBMEJBLEVBQW5COGlFLEdBQVk5aUUsR0FDM0MrckIsRUFBU2c4QixhQUFhL25ELEVBQ2pDLENBQ0EsMEJBQUF1cEcsR0FDSSxPQUFPMWMsSUFDWCxDQUNBLDJCQUFBdHBCLENBQTRCOWlFLEVBQU8raUUsR0FDL0IsT0FBTyxHQUE0Qi9pRSxFQUFPK2lFLEVBQzlDLENBQ0EsS0FBQThsQyxDQUFNam1DLEVBQWE3RSxFQUFjaHhELEVBQVMvTSxHQUN0Q3dnRSxHQUFjb0MsRUFBYTdFLEVBQWNoeEQsRUFBU25OLEtBQUtvaEUsU0FBVWhoRSxFQUFNZytELGtCQUMzRSxDQUNBLGNBQUFxcEMsQ0FBZS83RSxFQUFVczNDLEVBQWE3WixFQUFXeVosR0FDN0NHLEdBQVVyM0MsRUFBVXMzQyxFQUFhN1osRUFBV3laLEVBQ2hELENBQ0EsS0FBQW5LLENBQU0vc0MsR0FDRjFyQixLQUFLb2hFLFNBQVdBLEdBQVMxMUMsRUFBUzZOLFNBQ2xDNnFCLE1BQU1xVSxNQUFNL3NDLEVBQ2hCLEVDdENKLE1BQU0sR0FBeUIsQ0FBQ3ZyQixFQUFXZ04sSUFDaENpc0QsR0FBZWo1RCxHQUNoQixJQUFJZ3JHLEdBQWlCaCtGLEVBQVMsQ0FBRXl4RCw0QkFBNEIsSUFDNUQsSUFBSW1zQyxHQUFrQjU5RixFQUFTLENBQUV5eEQsNEJBQTRCLElDRWpFcEksR0FBb0IsSUFDbkIrdUIsTUFDQXRiLE1BQ0FwVSxHQ1JISyxPQUFRLENBQ0ppdUMsZUFBZ0JkLEdBQ2hCcnNDLGNBQWEsS0RlZm8wQyxHQUF1Qnh5QyxJQUFrQixDQUFDejRELEVBQVc2akUsSUVoQjNELFNBQStCN2pFLEdBQVcsbUJBQUUraEUsR0FBcUIsR0FBUzFMLEVBQW1CQyxHQUl6RixNQUFPLElBSFkyQyxHQUFlajVELEdBQzVCZ25FLEdBQ0FJLEdBR0YvUSxvQkFDQUUsVUFBV3VMLEdBQWdCQyxHQUMzQnpMLHNCQUNBdDJELFlBRVIsQ0ZLc0UsQ0FBc0JBLEVBQVc2akUsRUFBUXhOLEdBQW1CLDRoQ0d5TmxJLFNBMU9lLFdBRVgsSUFBeUM1TSxFQUFBTyxJQUFmcHJCLEVBQUFBLEVBQUFBLFdBQVMsR0FBTSxHQUFsQ3NzRSxFQUFNemhELEVBQUEsR0FBRTBoRCxFQUFPMWhELEVBQUEsR0FDcUJVLEVBQUFILElBQWZwckIsRUFBQUEsRUFBQUEsV0FBUyxHQUFNLEdBQXBDd3NFLEVBQU9qaEQsRUFBQSxHQUFFa2hELEVBQVFsaEQsRUFBQSxHQUNtQkcsRUFBQU4sSUFBZnByQixFQUFBQSxFQUFBQSxXQUFTLEdBQU0sR0FBcEMwc0UsRUFBT2hoRCxFQUFBLEdBQUVpaEQsRUFBUWpoRCxFQUFBLEdBQ21CRyxFQUFBVCxJQUFmcHJCLEVBQUFBLEVBQUFBLFdBQVMsR0FBTSxHQUFwQzRzRSxFQUFPL2dELEVBQUEsR0FBRWdoRCxFQUFRaGhELEVBQUEsR0FDbUJHLEVBQUFaLElBQWZwckIsRUFBQUEsRUFBQUEsV0FBUyxHQUFNLEdBQXBDOHNFLEVBQU85Z0QsRUFBQSxHQUFFK2dELEVBQVEvZ0QsRUFBQSxHQUNtQkcsRUFBQWYsSUFBZnByQixFQUFBQSxFQUFBQSxXQUFTLEdBQU0sR0FBcENndEUsRUFBTzdnRCxFQUFBLEdBQUU4Z0QsRUFBUTlnRCxFQUFBLEdBQ21CRyxFQUFBbEIsSUFBZnByQixFQUFBQSxFQUFBQSxXQUFTLEdBQU0sR0FBcENrdEUsRUFBTzVnRCxFQUFBLEdBQUU2Z0QsRUFBUTdnRCxFQUFBLEdBQ21CRyxFQUFBckIsSUFBZnByQixFQUFBQSxFQUFBQSxXQUFTLEdBQU0sR0FBcENvdEUsRUFBTzNnRCxFQUFBLEdBQUU0Z0QsRUFBUTVnRCxFQUFBLEdBQ21CRyxFQUFBeEIsSUFBZnByQixFQUFBQSxFQUFBQSxXQUFTLEdBQU0sR0FBcENzdEUsRUFBTzFnRCxFQUFBLEdBQUUyZ0QsRUFBUTNnRCxFQUFBLEdBQ21CRyxFQUFBM0IsSUFBZnByQixFQUFBQSxFQUFBQSxXQUFTLEdBQU0sR0FBcEN3dEUsRUFBT3pnRCxFQUFBLEdBQUUwZ0QsRUFBUTFnRCxFQUFBLEdBR3lCRyxFQUFBOUIsSUFBWHByQixFQUFBQSxFQUFBQSxVQUFTLEdBQUUsR0FBMUNxckIsRUFBVzZCLEVBQUEsR0FBRTVCLEVBQWM0QixFQUFBLEdBQ2VHLEVBQUFqQyxJQUFYcHJCLEVBQUFBLEVBQUFBLFVBQVMsR0FBRSxHQUExQ3dyQixFQUFXNkIsRUFBQSxHQUFFNUIsRUFBYzRCLEVBQUEsR0FVbEMsT0FDSXZzRCxFQUFBQSxjQUFBQSxFQUFBQSxTQUFBLEtBQ0lBLEVBQUFBLGNBQUEsT0FBS0MsVUFBVSxhQUVYRCxFQUFBQSxjQUFBLE9BQUtDLFVBQVUsWUFDWEQsRUFBQUEsY0FBQSxXQUNJQSxFQUFBQSxjQUFDdXJHLEdBQU9xQixJQUFHLENBQ1Azc0csVUFBVSxNQUNWbzJELFFBQU0sRUFDTnJrRCxNQUFPLENBQUUyUSxPQUFRNm9GLEVBQVMsUUFBVSxPQUNwQ3Z2RixXQUFZLENBQ1JzeUQsS0FBTSxTQUNOd0gsU0FBVSxFQUNWMXpELE9BQVFtbUIsT0FJaEJ4b0MsRUFBQUEsY0FBQSxPQUFLSyxRQUFTLGtCQUFNb3JHLEdBQVNELEVBQU8sRUFDaEN2ckcsVUFBVSxVQUNiLFVBSUxELEVBQUFBLGNBQUEsV0FDSUEsRUFBQUEsY0FBQ3VyRyxHQUFPcUIsSUFBRyxDQUNQM3NHLFVBQVUsT0FDVm8yRCxRQUFNLEVBQ05ya0QsTUFBTyxDQUFFMlEsT0FBUStvRixFQUFVLFFBQVUsT0FDckN6dkYsV0FBWSxDQUNSc3lELEtBQU0sU0FDTndILFNBQVUsR0FDVjF6RCxPQUFRbW1CLE9BR2hCeG9DLEVBQUFBLGNBQUEsT0FBS0ssUUFBUyxrQkFBTXNyRyxHQUFVRCxFQUFRLEVBQ2xDenJHLFVBQVUsVUFDYixXQUVMRCxFQUFBQSxjQUFBLFdBQ0lBLEVBQUFBLGNBQUN1ckcsR0FBT3FCLElBQUcsQ0FDUDNzRyxVQUFVLE9BQ1ZvMkQsUUFBTSxFQUNOcmtELE1BQU8sQ0FBRTJRLE9BQVFpcEYsRUFBVSxRQUFVLE9BQ3JDM3ZGLFdBQVksQ0FDUnN5RCxLQUFNLFNBQ05sc0QsT0FBUW1tQixJQUNSdXRDLFNBQVUsTUFHbEIvMUUsRUFBQUEsY0FBQSxPQUFLSyxRQUFTLGtCQUFNd3JHLEdBQVVELEVBQVEsRUFDbEMzckcsVUFBVSxVQUNiLFdBRUxELEVBQUFBLGNBQUEsV0FDSUEsRUFBQUEsY0FBQ3VyRyxHQUFPcUIsSUFBRyxDQUNQM3NHLFVBQVUsT0FDVm8yRCxRQUFNLEVBQ05ya0QsTUFBTyxDQUFFMlEsT0FBUW1wRixFQUFVLFFBQVUsT0FDckM3dkYsV0FBWSxDQUNSc3lELEtBQU0sU0FDTndILFNBQVV4ckIsRUFDVmxvQyxPQUFRbW1CLE9BSWhCeG9DLEVBQUFBLGNBQUEsT0FBS0ssUUFBUyxrQkFBTTByRyxHQUFVRCxFQUFRLEVBQ2xDN3JHLFVBQVUsVUFDWnNxRCxJQUVOdnFELEVBQUFBLGNBQUEsV0FDSUEsRUFBQUEsY0FBQ3VyRyxHQUFPcUIsSUFBRyxDQUNQM3NHLFVBQVUsT0FDVm8yRCxRQUFNLEVBQ05ya0QsTUFBTyxDQUFFMlEsT0FBUXFwRixFQUFVLFFBQVUsT0FDckMvdkYsV0FBWSxDQUNSc3lELEtBQU0sU0FDTndILFNBQVVyckIsRUFDVnJvQyxPQUFRbW1CLE9BSWhCeG9DLEVBQUFBLGNBQUEsT0FBS0ssUUFBUyxrQkFBTTRyRyxHQUFVRCxFQUFRLEVBQ2xDL3JHLFVBQVUsVUFDWnlxRCxLQUtWMXFELEVBQUFBLGNBQUEsT0FBS0MsVUFBVSxhQUFhLHVCQUFvQkQsRUFBQUEsY0FBQSxhQUM1Q0EsRUFBQUEsY0FBQSxTQUFPd0QsS0FBSyxTQUFTdkQsVUFBVSxhQUMzQk8sS0FBSyxPQUNMVCxNQUFPd3FELEVBQ1BzSixTQW5HTyxTQUFDbDBELEdBQ3hCNnFELEVBQWU3cUQsRUFBRWMsT0FBT1YsTUFDNUIsS0FtR1lDLEVBQUFBLGNBQUEsT0FBS0MsVUFBVSxhQUFhLHVCQUFvQkQsRUFBQUEsY0FBQSxhQUM1Q0EsRUFBQUEsY0FBQSxTQUFPd0QsS0FBSyxTQUFTdkQsVUFBVSxhQUMzQk8sS0FBSyxPQUNMVCxNQUFPMnFELEVBQ1BtSixTQXRHTyxTQUFDbDBELEdBQ3hCZ3JELEVBQWVockQsRUFBRWMsT0FBT1YsTUFDNUIsS0FzR1lDLEVBQUFBLGNBQUEsT0FDSUssUUFBUyxpQkFBTSxDQUFDNHJHLEdBQVVELEdBQVVELEdBQVVELEdBQVVELEdBQVVELEdBQ2xFRCxHQUFVRCxHQUFVRCxHQUFTRCxHQUFRLEVBQ3JDdnJHLFVBQVUsYUFDYixPQUdERCxFQUFBQSxjQUFBLFdBQ0FBLEVBQUFBLGNBQUEsVUFBSSxzQkFDSkEsRUFBQUEsY0FBQSxPQUFLQyxVQUFVLFlBQ1hELEVBQUFBLGNBQUEsV0FDSUEsRUFBQUEsY0FBQ3VyRyxHQUFPcUIsSUFBRyxDQUNQM3NHLFVBQVUsT0FDVm8yRCxRQUFNLEVBQ05ya0QsTUFBTyxDQUFFMlEsT0FBUXVwRixFQUFVLFFBQVUsT0FDckNqd0YsV0FBWSxDQUNSc3lELEtBQU0sWUFDTi9xRSxLQUFNLFNBQ051eUUsU0FBVSxFQUNWMXpELE9BQVFtbUIsT0FJaEJ4b0MsRUFBQUEsY0FBQSxPQUFLQyxVQUFVLFNBQVEsVUFJM0JELEVBQUFBLGNBQUEsV0FDSUEsRUFBQUEsY0FBQ3VyRyxHQUFPcUIsSUFBRyxDQUNQM3NHLFVBQVUsT0FDVm8yRCxRQUFNLEVBQ05ya0QsTUFBTyxDQUFFMlEsT0FBUXlwRixFQUFVLFFBQVUsT0FDckNud0YsV0FBWSxDQUNSc3lELEtBQU0sU0FDTndILFNBQVUsR0FDVjF6RCxPQUFRbW1CLE9BSWhCeG9DLEVBQUFBLGNBQUEsT0FBS0MsVUFBVSxTQUFRLFdBSTNCRCxFQUFBQSxjQUFBLFdBQ0lBLEVBQUFBLGNBQUN1ckcsR0FBT3FCLElBQUcsQ0FDUDNzRyxVQUFVLE9BQ1ZvMkQsUUFBTSxFQUNOcmtELE1BQU8sQ0FBRTJRLE9BQVEycEYsRUFBVSxRQUFVLE9BQ3JDcndGLFdBQVksQ0FDUnN5RCxLQUFNLFNBQ053SCxTQUFVLEdBQ1YxekQsT0FBUW1tQixPQUloQnhvQyxFQUFBQSxjQUFBLE9BQUtDLFVBQVUsU0FBUSxZQUkzQkQsRUFBQUEsY0FBQSxXQUNJQSxFQUFBQSxjQUFDdXJHLEdBQU9xQixJQUFHLENBQ1Azc0csVUFBVSxPQUNWbzJELFFBQU0sRUFDTnJrRCxNQUFPLENBQUUyUSxPQUFRNnBGLEVBQVUsUUFBVSxPQUNyQ3Z3RixXQUFZLENBQ1JzeUQsS0FBTSxTQUNOd0gsU0FBVSxLQUNWMXpELE9BQVFtbUIsT0FJaEJ4b0MsRUFBQUEsY0FBQSxPQUFLQyxVQUFVLFNBQVEsVUFJM0JELEVBQUFBLGNBQUEsV0FDSUEsRUFBQUEsY0FBQ3VyRyxHQUFPcUIsSUFBRyxDQUNQM3NHLFVBQVUsTUFDVm8yRCxRQUFNLEVBQ05ya0QsTUFBTyxDQUFFMlEsT0FBUStwRixFQUFVLFFBQVUsT0FDckN6d0YsV0FBWSxDQUNSc3lELEtBQU0sU0FDTndILFNBQVUsTUFDVjF6RCxPQUFRbW1CLE9BSWhCeG9DLEVBQUFBLGNBQUEsT0FBS0MsVUFBVSxTQUFRLFdBTS9CRCxFQUFBQSxjQUFBLE9BQ0lLLFFBQVMsaUJBQU0sQ0FBQzhyRyxHQUFVRCxHQUFVRyxHQUFVRCxHQUFVRyxHQUFVRCxHQUNsRUcsR0FBVUQsR0FBVUcsR0FBVUQsR0FBUyxFQUN2Q3pzRyxVQUFVLGFBQ2IsZ0JBV2pCLEVDM09lLFNBQVNzc0IsR0FBSys2QixFQUFJdWxELEdBQy9CLE9BQU8sV0FDTCxPQUFPdmxELEVBQUcxb0QsTUFBTWl1RyxFQUFTdnVHLFVBQzNCLENBQ0YsQ0NBQSxNQUFPNkMsU0FBUSxJQUFJcUQsT0FBT2QsV0FDcEIsZUFBQ2tCLElBQWtCSixPQUVuQnNvRyxJQUFVamhFLEdBR2JybkMsT0FBTzI0QixPQUFPLE1BSFE0dkUsSUFDckIsTUFBTWxxQyxFQUFNLEdBQVNsa0UsS0FBS291RyxHQUMxQixPQUFPbGhFLEdBQU1nM0IsS0FBU2gzQixHQUFNZzNCLEdBQU9BLEVBQUlqakUsTUFBTSxHQUFJLEdBQUc4SCxjQUFjLEdBRnZELElBQUNta0MsR0FLaEIsTUFBTW1oRSxHQUFjeHBHLElBQ2xCQSxFQUFPQSxFQUFLa0UsY0FDSnFsRyxHQUFVRCxHQUFPQyxLQUFXdnBHLEdBR2hDeXBHLEdBQWF6cEcsR0FBUXVwRyxVQUFnQkEsSUFBVXZwRyxHQVMvQyxRQUFDNEosSUFBVzNPLE1BU1p5dUcsR0FBY0QsR0FBVyxhQXFCekJFLEdBQWdCSCxHQUFXLGVBMkIzQixHQUFXQyxHQUFXLFVBUXRCRyxHQUFhSCxHQUFXLFlBU3hCSSxHQUFXSixHQUFXLFVBU3RCSyxHQUFZUCxHQUFvQixPQUFWQSxHQUFtQyxpQkFBVkEsRUFpQi9DUSxHQUFpQkMsSUFDckIsR0FBb0IsV0FBaEJWLEdBQU9VLEdBQ1QsT0FBTyxFQUdULE1BQU05cEcsRUFBWWtCLEdBQWU0b0csR0FDakMsUUFBc0IsT0FBZDlwRyxHQUFzQkEsSUFBY2MsT0FBT2QsV0FBa0QsT0FBckNjLE9BQU9JLGVBQWVsQixJQUEwQmlGLE9BQU8rdkMsZUFBZTgwRCxHQUFVN2tHLE9BQU9lLFlBQVk4akcsRUFBSSxFQVVuS0MsR0FBU1QsR0FBVyxRQVNwQlUsR0FBU1YsR0FBVyxRQVNwQlcsR0FBU1gsR0FBVyxRQVNwQlksR0FBYVosR0FBVyxZQXNDeEJhLEdBQW9CYixHQUFXLG1CQTJCckMsU0FBU3ZsRyxHQUFRb3VDLEVBQUt5UixHQUFJLFdBQUN3bUQsR0FBYSxHQUFTLENBQUMsR0FFaEQsR0FBSWo0RCxRQUNGLE9BR0YsSUFBSXAwQyxFQUNBaUosRUFRSixHQUxtQixpQkFBUm1yQyxJQUVUQSxFQUFNLENBQUNBLElBR0x6b0MsR0FBUXlvQyxHQUVWLElBQUtwMEMsRUFBSSxFQUFHaUosRUFBSW1yQyxFQUFJdDNDLE9BQVFrRCxFQUFJaUosRUFBR2pKLElBQ2pDNmxELEVBQUczb0QsS0FBSyxLQUFNazNDLEVBQUlwMEMsR0FBSUEsRUFBR28wQyxPQUV0QixDQUVMLE1BQU0xd0MsRUFBTzJvRyxFQUFhdHBHLE9BQU9DLG9CQUFvQm94QyxHQUFPcnhDLE9BQU9XLEtBQUswd0MsR0FDbEVrNEQsRUFBTTVvRyxFQUFLNUcsT0FDakIsSUFBSXVCLEVBRUosSUFBSzJCLEVBQUksRUFBR0EsRUFBSXNzRyxFQUFLdHNHLElBQ25CM0IsRUFBTXFGLEVBQUsxRCxHQUNYNmxELEVBQUczb0QsS0FBSyxLQUFNazNDLEVBQUkvMUMsR0FBTUEsRUFBSysxQyxFQUVqQyxDQUNGLENBRUEsU0FBU200RCxHQUFRbjRELEVBQUsvMUMsR0FDcEJBLEVBQU1BLEVBQUk0SCxjQUNWLE1BQU12QyxFQUFPWCxPQUFPVyxLQUFLMHdDLEdBQ3pCLElBQ0luM0MsRUFEQStDLEVBQUkwRCxFQUFLNUcsT0FFYixLQUFPa0QsS0FBTSxHQUVYLEdBREEvQyxFQUFPeUcsRUFBSzFELEdBQ1IzQixJQUFRcEIsRUFBS2dKLGNBQ2YsT0FBT2hKLEVBR1gsT0FBTyxJQUNULENBRUEsTUFBTXV2RyxHQUVzQixvQkFBZkMsV0FBbUNBLFdBQ3ZCLG9CQUFUQyxLQUF1QkEsS0FBMEIsb0JBQVgvbkcsT0FBeUJBLE9BQVNnb0csT0FHbEZDLEdBQW9CNTVFLElBQWF5NEUsR0FBWXo0RSxJQUFZQSxJQUFZdzVFLEdBa0xyRUssSUFBZ0JDLEdBS0csb0JBQWZDLFlBQThCNXBHLEdBQWU0cEcsWUFIOUN6QixHQUNFd0IsSUFBY3hCLGFBQWlCd0IsSUFIckIsSUFBQ0EsR0FldEIsTUFpQ01FLEdBQWF6QixHQUFXLG1CQVd4QixHQUFpQixHQUFHeG1HLG9CQUFvQixDQUFDcXZDLEVBQUs0QyxJQUFTanlDLEVBQWU3SCxLQUFLazNDLEVBQUs0QyxHQUEvRCxDQUFzRWowQyxPQUFPZCxXQVM5RmdyRyxHQUFXMUIsR0FBVyxVQUV0QjJCLEdBQW9CLENBQUM5NEQsRUFBSys0RCxLQUM5QixNQUFNQyxFQUFjcnFHLE9BQU9zcUcsMEJBQTBCajVELEdBQy9DazVELEVBQXFCLENBQUMsRUFFNUJ0bkcsR0FBUW9uRyxHQUFhLENBQUN2cEcsRUFBWTlFLEtBQ2hDLElBQUl3dUcsR0FDMkMsS0FBMUNBLEVBQU1KLEVBQVF0cEcsRUFBWTlFLEVBQU1xMUMsTUFDbkNrNUQsRUFBbUJ2dUcsR0FBUXd1RyxHQUFPMXBHLEVBQ3BDLElBR0ZkLE9BQU95cUcsaUJBQWlCcDVELEVBQUtrNUQsRUFBbUIsRUF1RDVDRyxHQUFRLDZCQUVSQyxHQUFRLGFBRVJDLEdBQVcsQ0FDZkQsU0FDQUQsU0FDQUcsWUFBYUgsR0FBUUEsR0FBTXJuRyxjQUFnQnNuRyxJQXVEdkNHLEdBQVl0QyxHQUFXLGlCQUs3QixJQUNFNS9GLFdBQ0ErL0YsaUJBQ0FvQyxTQW5uQkYsU0FBa0IvQixHQUNoQixPQUFlLE9BQVJBLElBQWlCTixHQUFZTSxJQUE0QixPQUFwQkEsRUFBSS9oRyxjQUF5QnloRyxHQUFZTSxFQUFJL2hHLGNBQ3BGMmhHLEdBQVdJLEVBQUkvaEcsWUFBWThqRyxXQUFhL0IsRUFBSS9oRyxZQUFZOGpHLFNBQVMvQixFQUN4RSxFQWluQkVnQyxXQXJla0J6QyxJQUNsQixJQUFJMEMsRUFDSixPQUFPMUMsSUFDZ0IsbUJBQWIyQyxVQUEyQjNDLGFBQWlCMkMsVUFDbER0QyxHQUFXTCxFQUFNNEMsVUFDWSxjQUExQkYsRUFBTzNDLEdBQU9DLEtBRUwsV0FBVDBDLEdBQXFCckMsR0FBV0wsRUFBTTVyRyxXQUFrQyxzQkFBckI0ckcsRUFBTTVyRyxZQUdoRSxFQTRkQXl1RyxrQkEvbEJGLFNBQTJCcEMsR0FDekIsSUFBSXh1RyxFQU1KLE9BSkVBLEVBRDBCLG9CQUFoQjZ3RyxhQUFpQ0EsWUFBa0IsT0FDcERBLFlBQVlDLE9BQU90QyxHQUVuQixHQUFVQSxFQUFVLFFBQU1MLEdBQWNLLEVBQUl1QyxRQUVoRC93RyxDQUNULEVBd2xCRWk4RCxTQUFRLEdBQ1JveUMsWUFDQTJDLFVBL2lCZ0JqRCxJQUFtQixJQUFWQSxJQUE0QixJQUFWQSxFQWdqQjNDTyxZQUNBQyxpQkFDQUwsZUFDQU8sVUFDQUMsVUFDQUMsVUFDQWUsWUFDQXRCLGNBQ0E2QyxTQTNmZ0J6QyxHQUFRRixHQUFTRSxJQUFRSixHQUFXSSxFQUFJbmxDLE1BNGZ4RHdsQyxxQkFDQVMsZ0JBQ0FWLGNBQ0FubUcsV0FDQXlvRyxNQS9YRixTQUFTLElBQ1AsTUFBTSxTQUFDQyxHQUFZOUIsR0FBaUJsdUcsT0FBU0EsTUFBUSxDQUFDLEVBQ2hEbkIsRUFBUyxDQUFDLEVBQ1ZveEcsRUFBYyxDQUFDNUMsRUFBSzF0RyxLQUN4QixNQUFNdXdHLEVBQVlGLEdBQVluQyxHQUFRaHZHLEVBQVFjLElBQVFBLEVBQ2xEeXRHLEdBQWN2dUcsRUFBT3F4RyxLQUFlOUMsR0FBY0MsR0FDcER4dUcsRUFBT3F4RyxHQUFhLEVBQU1yeEcsRUFBT3F4RyxHQUFZN0MsR0FDcENELEdBQWNDLEdBQ3ZCeHVHLEVBQU9xeEcsR0FBYSxFQUFNLENBQUMsRUFBRzdDLEdBQ3JCcGdHLEdBQVFvZ0csR0FDakJ4dUcsRUFBT3F4RyxHQUFhN0MsRUFBSTV0RyxRQUV4QlosRUFBT3F4RyxHQUFhN0MsQ0FDdEIsRUFHRixJQUFLLElBQUkvckcsRUFBSSxFQUFHaUosRUFBSXBNLFVBQVVDLE9BQVFrRCxFQUFJaUosRUFBR2pKLElBQzNDbkQsVUFBVW1ELElBQU1nRyxHQUFRbkosVUFBVW1ELEdBQUkydUcsR0FFeEMsT0FBT3B4RyxDQUNULEVBNFdFK3BCLE9BaFdhLENBQUNyakIsRUFBR0MsRUFBR2tuRyxHQUFVaUIsY0FBYSxDQUFDLEtBQzVDcm1HLEdBQVE5QixHQUFHLENBQUM2bkcsRUFBSzF0RyxLQUNYK3NHLEdBQVdPLEdBQVdJLEdBQ3hCOW5HLEVBQUU1RixHQUFPeXNCLEdBQUtpaEYsRUFBS1gsR0FFbkJubkcsRUFBRTVGLEdBQU8wdEcsQ0FDWCxHQUNDLENBQUNNLGVBQ0dwb0csR0F5VlB3RSxLQTVkWTI0RCxHQUFRQSxFQUFJMzRELEtBQ3hCMjRELEVBQUkzNEQsT0FBUzI0RCxFQUFJcGpFLFFBQVEscUNBQXNDLElBNGQvRDZ3RyxTQWhWZ0JodkcsSUFDYyxRQUExQkEsRUFBUWl2RyxXQUFXLEtBQ3JCanZHLEVBQVVBLEVBQVExQixNQUFNLElBRW5CMEIsR0E2VVBrdkcsU0FqVWUsQ0FBQy9rRyxFQUFhZ2xHLEVBQWtCbHdHLEVBQU9zdUcsS0FDdERwakcsRUFBWS9ILFVBQVljLE9BQU8yNEIsT0FBT3N6RSxFQUFpQi9zRyxVQUFXbXJHLEdBQ2xFcGpHLEVBQVkvSCxVQUFVK0gsWUFBY0EsRUFDcENqSCxPQUFPRCxlQUFla0gsRUFBYSxRQUFTLENBQzFDMUwsTUFBTzB3RyxFQUFpQi9zRyxZQUUxQm5ELEdBQVNpRSxPQUFPc0YsT0FBTzJCLEVBQVkvSCxVQUFXbkQsRUFBTSxFQTRUcERtd0csYUFoVG1CLENBQUNDLEVBQVdDLEVBQVM3ekQsRUFBUTh6RCxLQUNoRCxJQUFJdHdHLEVBQ0FrQixFQUNBZzNDLEVBQ0osTUFBTXE0RCxFQUFTLENBQUMsRUFJaEIsR0FGQUYsRUFBVUEsR0FBVyxDQUFDLEVBRUwsTUFBYkQsRUFBbUIsT0FBT0MsRUFFOUIsRUFBRyxDQUdELElBRkFyd0csRUFBUWlFLE9BQU9DLG9CQUFvQmtzRyxHQUNuQ2x2RyxFQUFJbEIsRUFBTWhDLE9BQ0hrRCxLQUFNLEdBQ1hnM0MsRUFBT2w0QyxFQUFNa0IsR0FDUG92RyxJQUFjQSxFQUFXcDRELEVBQU1rNEQsRUFBV0MsSUFBY0UsRUFBT3I0RCxLQUNuRW00RCxFQUFRbjRELEdBQVFrNEQsRUFBVWw0RCxHQUMxQnE0RCxFQUFPcjRELElBQVEsR0FHbkJrNEQsR0FBdUIsSUFBWDV6RCxHQUFvQm40QyxHQUFlK3JHLEVBQ2pELE9BQVNBLEtBQWU1ekQsR0FBVUEsRUFBTzR6RCxFQUFXQyxLQUFhRCxJQUFjbnNHLE9BQU9kLFdBRXRGLE9BQU9rdEcsQ0FBTyxFQTBSZDlELFVBQ0FFLGNBQ0Evd0QsU0FoUmUsQ0FBQzRtQixFQUFLa3VDLEVBQWMxOEMsS0FDbkN3TyxFQUFNNWdELE9BQU80Z0QsU0FDSTlnRSxJQUFic3lELEdBQTBCQSxFQUFXd08sRUFBSXRrRSxVQUMzQzgxRCxFQUFXd08sRUFBSXRrRSxRQUVqQjgxRCxHQUFZMDhDLEVBQWF4eUcsT0FDekIsTUFBTXl5RyxFQUFZbnVDLEVBQUk1d0QsUUFBUTgrRixFQUFjMThDLEdBQzVDLE9BQXNCLElBQWYyOEMsR0FBb0JBLElBQWMzOEMsQ0FBUSxFQTBRakQzaEIsUUEvUGVxNkQsSUFDZixJQUFLQSxFQUFPLE9BQU8sS0FDbkIsR0FBSTMvRixHQUFRMi9GLEdBQVEsT0FBT0EsRUFDM0IsSUFBSXRyRyxFQUFJc3JHLEVBQU14dUcsT0FDZCxJQUFLOHVHLEdBQVM1ckcsR0FBSSxPQUFPLEtBQ3pCLE1BQU00MEUsRUFBTSxJQUFJNTNFLE1BQU1nRCxHQUN0QixLQUFPQSxLQUFNLEdBQ1g0MEUsRUFBSTUwRSxHQUFLc3JHLEVBQU10ckcsR0FFakIsT0FBTzQwRSxDQUFHLEVBdVBWNDZCLGFBNU5tQixDQUFDcDdELEVBQUt5UixLQUN6QixNQUVNNTlDLEdBRlltc0MsR0FBT0EsRUFBSWx0QyxPQUFPZSxXQUVUL0ssS0FBS2szQyxHQUVoQyxJQUFJNzJDLEVBRUosTUFBUUEsRUFBUzBLLEVBQVNpckIsVUFBWTMxQixFQUFPaTZCLE1BQU0sQ0FDakQsTUFBTWk0RSxFQUFPbHlHLEVBQU9lLE1BQ3BCdW5ELEVBQUczb0QsS0FBS2szQyxFQUFLcTdELEVBQUssR0FBSUEsRUFBSyxHQUM3QixHQW1OQUMsU0F4TWUsQ0FBQ0MsRUFBUXZ1QyxLQUN4QixJQUFJOW5CLEVBQ0osTUFBTXM3QixFQUFNLEdBRVosS0FBd0MsUUFBaEN0N0IsRUFBVXEyRCxFQUFPM00sS0FBSzVoQyxLQUM1QndULEVBQUl4MUUsS0FBS2s2QyxHQUdYLE9BQU9zN0IsQ0FBRyxFQWlNVm80QixjQUNBam9HLGVBQWMsR0FDZDZxRyxXQUFZLEdBQ1oxQyxxQkFDQTJDLGNBeEpxQno3RCxJQUNyQjg0RCxHQUFrQjk0RCxHQUFLLENBQUN2d0MsRUFBWTlFLEtBRWxDLEdBQUk0c0csR0FBV3YzRCxLQUE2RCxJQUFyRCxDQUFDLFlBQWEsU0FBVSxVQUFVNWpDLFFBQVF6UixHQUMvRCxPQUFPLEVBR1QsTUFBTVQsRUFBUTgxQyxFQUFJcjFDLEdBRWI0c0csR0FBV3J0RyxLQUVoQnVGLEVBQVdzRyxZQUFhLEVBRXBCLGFBQWN0RyxFQUNoQkEsRUFBV2lzRyxVQUFXLEVBSW5CanNHLEVBQVdpRixNQUNkakYsRUFBV2lGLElBQU0sS0FDZixNQUFNUCxNQUFNLHFDQUF3Q3hKLEVBQU8sSUFBSyxHQUVwRSxHQUNBLEVBa0lGZ3hHLFlBL0hrQixDQUFDQyxFQUFlQyxLQUNsQyxNQUFNNzdELEVBQU0sQ0FBQyxFQUVQODdELEVBQVV0N0IsSUFDZEEsRUFBSTV1RSxTQUFRMUgsSUFDVjgxQyxFQUFJOTFDLElBQVMsQ0FBSSxHQUNqQixFQUtKLE9BRkFxTixHQUFRcWtHLEdBQWlCRSxFQUFPRixHQUFpQkUsRUFBTzF2RixPQUFPd3ZGLEdBQWVqcUcsTUFBTWtxRyxJQUU3RTc3RCxDQUFHLEVBcUhWKzdELFlBak1rQi91QyxHQUNYQSxFQUFJbjdELGNBQWNqSSxRQUFRLHlCQUMvQixTQUFrQndWLEVBQUc0OEYsRUFBSUMsR0FDdkIsT0FBT0QsRUFBR2hxRyxjQUFnQmlxRyxDQUM1QixJQThMRjFzQyxLQW5IVyxPQW9IWDJzQyxlQWxIcUIsQ0FBQ2h5RyxFQUFPeU0sS0FDN0J6TSxHQUFTQSxFQUNGZzBELE9BQU9pK0MsU0FBU2p5RyxHQUFTQSxFQUFReU0sR0FpSHhDd2hHLFdBQ0FJLE9BQVFILEdBQ1JJLG9CQUNBZSxZQUNBNkMsZUF4R3FCLENBQUN0eEcsRUFBTyxHQUFJdXhHLEVBQVc5QyxHQUFTQyxlQUNyRCxJQUFJeHNDLEVBQU0sR0FDVixNQUFNLE9BQUN0a0UsR0FBVTJ6RyxFQUNqQixLQUFPdnhHLEtBQ0xraUUsR0FBT3F2QyxFQUFTbDZGLEtBQUtxVSxTQUFXOXRCLEVBQU8sR0FHekMsT0FBT3NrRSxDQUFHLEVBa0dWc3ZDLG9CQXhGRixTQUE2QnBGLEdBQzNCLFNBQVVBLEdBQVNLLEdBQVdMLEVBQU00QyxTQUF5QyxhQUE5QjVDLEVBQU1wa0csT0FBTyt2QyxjQUErQnEwRCxFQUFNcGtHLE9BQU9lLFVBQzFHLEVBdUZFMG9HLGFBckZvQnY4RCxJQUNwQixNQUFNNXJDLEVBQVEsSUFBSXhMLE1BQU0sSUFFbEI0ekcsRUFBUSxDQUFDbC9GLEVBQVExUixLQUVyQixHQUFJNnJHLEdBQVNuNkYsR0FBUyxDQUNwQixHQUFJbEosRUFBTWdJLFFBQVFrQixJQUFXLEVBQzNCLE9BR0YsS0FBSyxXQUFZQSxHQUFTLENBQ3hCbEosRUFBTXhJLEdBQUswUixFQUNYLE1BQU0xUyxFQUFTMk0sR0FBUStGLEdBQVUsR0FBSyxDQUFDLEVBU3ZDLE9BUEExTCxHQUFRMEwsR0FBUSxDQUFDcFQsRUFBT0QsS0FDdEIsTUFBTXd5RyxFQUFlRCxFQUFNdHlHLEVBQU8wQixFQUFJLElBQ3JDeXJHLEdBQVlvRixLQUFrQjd4RyxFQUFPWCxHQUFPd3lHLEVBQWEsSUFHNURyb0csRUFBTXhJLFFBQUtNLEVBRUp0QixDQUNULENBQ0YsQ0FFQSxPQUFPMFMsQ0FBTSxFQUdmLE9BQU9rL0YsRUFBTXg4RCxFQUFLLEVBQUUsRUEwRHBCeTVELGFBQ0FpRCxXQXREa0J4RixHQUNsQkEsSUFBVU8sR0FBU1AsSUFBVUssR0FBV0wsS0FBV0ssR0FBV0wsRUFBTS85RSxPQUFTbytFLEdBQVdMLEVBQU05OUUsUUM3b0JoRyxTQUFTdWpGLEdBQVc1eUUsRUFBU3pkLEVBQU1naUQsRUFBUXN1QyxFQUFTQyxHQUNsRDFvRyxNQUFNckwsS0FBS3dCLE1BRVA2SixNQUFNMm9HLGtCQUNSM29HLE1BQU0yb0csa0JBQWtCeHlHLEtBQU1BLEtBQUtzTCxhQUVuQ3RMLEtBQUs4SixPQUFRLElBQUtELE9BQVNDLE1BRzdCOUosS0FBS3kvQixRQUFVQSxFQUNmei9CLEtBQUtLLEtBQU8sYUFDWjJoQixJQUFTaGlCLEtBQUtnaUIsS0FBT0EsR0FDckJnaUQsSUFBV2hrRSxLQUFLZ2tFLE9BQVNBLEdBQ3pCc3VDLElBQVl0eUcsS0FBS3N5RyxRQUFVQSxHQUMzQkMsSUFBYXZ5RyxLQUFLdXlHLFNBQVdBLEVBQy9CLENBRUFFLEdBQU1wQyxTQUFTZ0MsR0FBWXhvRyxNQUFPLENBQ2hDNm9HLE9BQVEsV0FDTixNQUFPLENBRUxqekUsUUFBU3ovQixLQUFLeS9CLFFBQ2RwL0IsS0FBTUwsS0FBS0ssS0FFWHN5RyxZQUFhM3lHLEtBQUsyeUcsWUFDbEI1dEYsT0FBUS9rQixLQUFLK2tCLE9BRWI2dEYsU0FBVTV5RyxLQUFLNHlHLFNBQ2ZDLFdBQVk3eUcsS0FBSzZ5RyxXQUNqQkMsYUFBYzl5RyxLQUFLOHlHLGFBQ25CaHBHLE1BQU85SixLQUFLOEosTUFFWms2RCxPQUFReXVDLEdBQU1SLGFBQWFqeUcsS0FBS2drRSxRQUNoQ2hpRCxLQUFNaGlCLEtBQUtnaUIsS0FDWDRoQyxPQUFRNWpELEtBQUt1eUcsVUFBWXZ5RyxLQUFLdXlHLFNBQVMzdUQsT0FBUzVqRCxLQUFLdXlHLFNBQVMzdUQsT0FBUyxLQUUzRSxJQUdGLE1BQU0sR0FBWXl1RCxHQUFXOXVHLFVBQ3ZCbXJHLEdBQWMsQ0FBQyxFQUVyQixDQUNFLHVCQUNBLGlCQUNBLGVBQ0EsWUFDQSxjQUNBLDRCQUNBLGlCQUNBLG1CQUNBLGtCQUNBLGVBQ0Esa0JBQ0EsbUJBRUFwbkcsU0FBUTBhLElBQ1Iwc0YsR0FBWTFzRixHQUFRLENBQUNwaUIsTUFBT29pQixFQUFLLElBR25DM2QsT0FBT3lxRyxpQkFBaUJ1RCxHQUFZM0QsSUFDcENycUcsT0FBT0QsZUFBZSxHQUFXLGVBQWdCLENBQUN4RSxPQUFPLElBR3pEeXlHLEdBQVd4ekQsS0FBTyxDQUFDL2UsRUFBTzlkLEVBQU1naUQsRUFBUXN1QyxFQUFTQyxFQUFVUSxLQUN6RCxNQUFNQyxFQUFhM3VHLE9BQU8yNEIsT0FBTyxJQWdCakMsT0FkQXkxRSxHQUFNbEMsYUFBYXp3RSxFQUFPa3pFLEdBQVksU0FBZ0J0OUQsR0FDcEQsT0FBT0EsSUFBUTdyQyxNQUFNdEcsU0FDdkIsSUFBRyswQyxHQUNlLGlCQUFUQSxJQUdUKzVELEdBQVc3ekcsS0FBS3cwRyxFQUFZbHpFLEVBQU1MLFFBQVN6ZCxFQUFNZ2lELEVBQVFzdUMsRUFBU0MsR0FFbEVTLEVBQVdDLE1BQVFuekUsRUFFbkJrekUsRUFBVzN5RyxLQUFPeS9CLEVBQU16L0IsS0FFeEIweUcsR0FBZTF1RyxPQUFPc0YsT0FBT3FwRyxFQUFZRCxHQUVsQ0MsQ0FBVSxFQUduQixZQ3JGQSxTQUFTRSxHQUFZdEcsR0FDbkIsT0FBTzZGLEdBQU1yRixjQUFjUixJQUFVNkYsR0FBTXhsRyxRQUFRMi9GLEVBQ3JELENBU0EsU0FBU3VHLEdBQWV4ekcsR0FDdEIsT0FBTzh5RyxHQUFNMzJELFNBQVNuOEMsRUFBSyxNQUFRQSxFQUFJRixNQUFNLEdBQUksR0FBS0UsQ0FDeEQsQ0FXQSxTQUFTeXpHLEdBQVUxNUQsRUFBTS81QyxFQUFLMHpHLEdBQzVCLE9BQUszNUQsRUFDRUEsRUFBS2g3QyxPQUFPaUIsR0FBS3NCLEtBQUksU0FBYzg0RCxFQUFPejRELEdBRy9DLE9BREF5NEQsRUFBUW81QyxHQUFlcDVDLElBQ2ZzNUMsR0FBUS94RyxFQUFJLElBQU15NEQsRUFBUSxJQUFNQSxDQUMxQyxJQUFHMTRELEtBQUtneUcsRUFBTyxJQUFNLElBTEgxekcsQ0FNcEIsQ0FhQSxNQUFNMnpHLEdBQWFiLEdBQU1sQyxhQUFha0MsR0FBTyxDQUFDLEVBQUcsTUFBTSxTQUFnQm42RCxHQUNyRSxNQUFPLFdBQVd2d0MsS0FBS3V3QyxFQUN6QixJQThKQSxHQXJJQSxTQUFvQjVDLEVBQUs2OUQsRUFBVXBtRyxHQUNqQyxJQUFLc2xHLEdBQU10RixTQUFTejNELEdBQ2xCLE1BQU0sSUFBSTg5RCxVQUFVLDRCQUl0QkQsRUFBV0EsR0FBWSxJQUF5QmhFLFNBWWhELE1BQU1rRSxHQVROdG1HLEVBQVVzbEcsR0FBTWxDLGFBQWFwakcsRUFBUyxDQUNwQ3NtRyxZQUFZLEVBQ1pKLE1BQU0sRUFDTkssU0FBUyxJQUNSLEdBQU8sU0FBaUJDLEVBQVEzZ0csR0FFakMsT0FBUXkvRixHQUFNMUYsWUFBWS81RixFQUFPMmdHLEdBQ25DLEtBRTJCRixXQUVyQkcsRUFBVXptRyxFQUFReW1HLFNBQVdDLEVBQzdCUixFQUFPbG1HLEVBQVFrbUcsS0FDZkssRUFBVXZtRyxFQUFRdW1HLFFBRWxCSSxHQURRM21HLEVBQVE0bUcsTUFBd0Isb0JBQVRBLE1BQXdCQSxPQUNwQ3RCLEdBQU1ULG9CQUFvQnVCLEdBRW5ELElBQUtkLEdBQU14RixXQUFXMkcsR0FDcEIsTUFBTSxJQUFJSixVQUFVLDhCQUd0QixTQUFTUSxFQUFhcDBHLEdBQ3BCLEdBQWMsT0FBVkEsRUFBZ0IsTUFBTyxHQUUzQixHQUFJNnlHLEdBQU1uRixPQUFPMXRHLEdBQ2YsT0FBT0EsRUFBTXEwRyxjQUdmLElBQUtILEdBQVdyQixHQUFNakYsT0FBTzV0RyxHQUMzQixNQUFNLElBQUksR0FBVyxnREFHdkIsT0FBSTZ5RyxHQUFNekYsY0FBY3B0RyxJQUFVNnlHLEdBQU10RSxhQUFhdnVHLEdBQzVDazBHLEdBQTJCLG1CQUFUQyxLQUFzQixJQUFJQSxLQUFLLENBQUNuMEcsSUFBVXMwRyxPQUFPcjFELEtBQUtqL0MsR0FHMUVBLENBQ1QsQ0FZQSxTQUFTaTBHLEVBQWVqMEcsRUFBT0QsRUFBSys1QyxHQUNsQyxJQUFJdzhCLEVBQU10MkUsRUFFVixHQUFJQSxJQUFVODVDLEdBQXlCLGlCQUFWOTVDLEVBQzNCLEdBQUk2eUcsR0FBTTMyRCxTQUFTbjhDLEVBQUssTUFFdEJBLEVBQU04ekcsRUFBYTl6RyxFQUFNQSxFQUFJRixNQUFNLEdBQUksR0FFdkNHLEVBQVF5QyxLQUFLQyxVQUFVMUMsUUFDbEIsR0FDSjZ5RyxHQUFNeGxHLFFBQVFyTixJQW5HdkIsU0FBcUJzMkUsR0FDbkIsT0FBT3U4QixHQUFNeGxHLFFBQVFpcEUsS0FBU0EsRUFBSXY1QixLQUFLdTJELEdBQ3pDLENBaUdpQ2lCLENBQVl2MEcsS0FDbkM2eUcsR0FBTWhGLFdBQVc3dEcsSUFBVTZ5RyxHQUFNMzJELFNBQVNuOEMsRUFBSyxTQUFXdTJFLEVBQU11OEIsR0FBTWxnRSxRQUFRM3lDLElBWWhGLE9BVEFELEVBQU13ekcsR0FBZXh6RyxHQUVyQnUyRSxFQUFJNXVFLFNBQVEsU0FBY3NrQyxFQUFJclQsSUFDMUJrNkUsR0FBTTFGLFlBQVluaEUsSUFBYyxPQUFQQSxHQUFnQjJuRSxFQUFTL0QsUUFFdEMsSUFBWmtFLEVBQW1CTixHQUFVLENBQUN6ekcsR0FBTTQ0QixFQUFPODZFLEdBQXFCLE9BQVpLLEVBQW1CL3pHLEVBQU1BLEVBQU0sS0FDbkZxMEcsRUFBYXBvRSxHQUVqQixLQUNPLEVBSVgsUUFBSXNuRSxHQUFZdHpHLEtBSWhCMnpHLEVBQVMvRCxPQUFPNEQsR0FBVTE1RCxFQUFNLzVDLEVBQUswekcsR0FBT1csRUFBYXAwRyxLQUVsRCxFQUNULENBRUEsTUFBTWtLLEVBQVEsR0FFUnNxRyxFQUFpQi92RyxPQUFPc0YsT0FBTzJwRyxHQUFZLENBQy9DTyxpQkFDQUcsZUFDQWQsaUJBeUJGLElBQUtULEdBQU10RixTQUFTejNELEdBQ2xCLE1BQU0sSUFBSTg5RCxVQUFVLDBCQUt0QixPQTVCQSxTQUFTdkssRUFBTXJwRyxFQUFPODVDLEdBQ3BCLElBQUkrNEQsR0FBTTFGLFlBQVludEcsR0FBdEIsQ0FFQSxJQUE4QixJQUExQmtLLEVBQU1nSSxRQUFRbFMsR0FDaEIsTUFBTWlLLE1BQU0sa0NBQW9DNnZDLEVBQUtyNEMsS0FBSyxNQUc1RHlJLEVBQU1wSixLQUFLZCxHQUVYNnlHLEdBQU1uckcsUUFBUTFILEdBQU8sU0FBY2dzQyxFQUFJanNDLElBS3RCLE9BSkU4eUcsR0FBTTFGLFlBQVluaEUsSUFBYyxPQUFQQSxJQUFnQmdvRSxFQUFRcDFHLEtBQ2hFKzBHLEVBQVUzbkUsRUFBSTZtRSxHQUFNMzNDLFNBQVNuN0QsR0FBT0EsRUFBSW9LLE9BQVNwSyxFQUFLKzVDLEVBQU0wNkQsS0FJNURuTCxFQUFNcjlELEVBQUk4TixFQUFPQSxFQUFLaDdDLE9BQU9pQixHQUFPLENBQUNBLEdBRXpDLElBRUFtSyxFQUFNNHBDLEtBbEI4QixDQW1CdEMsQ0FNQXUxRCxDQUFNdnpELEdBRUM2OUQsQ0FDVCxFQzVNQSxTQUFTYyxHQUFPM3hDLEdBQ2QsTUFBTTR4QyxFQUFVLENBQ2QsSUFBSyxNQUNMLElBQUssTUFDTCxJQUFLLE1BQ0wsSUFBSyxNQUNMLElBQUssTUFDTCxNQUFPLElBQ1AsTUFBTyxNQUVULE9BQU9seUcsbUJBQW1Cc2dFLEdBQUtwakUsUUFBUSxvQkFBb0IsU0FBa0IwSyxHQUMzRSxPQUFPc3FHLEVBQVF0cUcsRUFDakIsR0FDRixDQVVBLFNBQVN1cUcsR0FBcUJwM0QsRUFBUWh3QyxHQUNwQ25OLEtBQUt3MEcsT0FBUyxHQUVkcjNELEdBQVUsR0FBV0EsRUFBUW45QyxLQUFNbU4sRUFDckMsQ0FFQSxNQUFNLEdBQVlvbkcsR0FBcUJoeEcsVUFFdkMsR0FBVWlzRyxPQUFTLFNBQWdCbnZHLEVBQU1ULEdBQ3ZDSSxLQUFLdzBHLE9BQU85ekcsS0FBSyxDQUFDTCxFQUFNVCxHQUMxQixFQUVBLEdBQVVvQixTQUFXLFNBQWtCeXpHLEdBQ3JDLE1BQU1DLEVBQVVELEVBQVUsU0FBUzcwRyxHQUNqQyxPQUFPNjBHLEVBQVFqMkcsS0FBS3dCLEtBQU1KLEVBQU95MEcsR0FDbkMsRUFBSUEsR0FFSixPQUFPcjBHLEtBQUt3MEcsT0FBT3Z6RyxLQUFJLFNBQWM4dkcsR0FDbkMsT0FBTzJELEVBQVEzRCxFQUFLLElBQU0sSUFBTTJELEVBQVEzRCxFQUFLLEdBQy9DLEdBQUcsSUFBSTF2RyxLQUFLLElBQ2QsRUFFQSxZQzVDQSxTQUFTLEdBQU9nc0csR0FDZCxPQUFPanJHLG1CQUFtQmlyRyxHQUN4Qi90RyxRQUFRLFFBQVMsS0FDakJBLFFBQVEsT0FBUSxLQUNoQkEsUUFBUSxRQUFTLEtBQ2pCQSxRQUFRLE9BQVEsS0FDaEJBLFFBQVEsUUFBUyxLQUNqQkEsUUFBUSxRQUFTLElBQ3JCLENBV2UsU0FBU3ExRyxHQUFTcnZGLEVBQUs2M0IsRUFBUWh3QyxHQUU1QyxJQUFLZ3dDLEVBQ0gsT0FBTzczQixFQUdULE1BQU1vdkYsRUFBVXZuRyxHQUFXQSxFQUFRa25HLFFBQVUsR0FFdkNPLEVBQWN6bkcsR0FBV0EsRUFBUTBuRyxVQUV2QyxJQUFJQyxFQVVKLEdBUEVBLEVBREVGLEVBQ2lCQSxFQUFZejNELEVBQVFod0MsR0FFcEJzbEcsR0FBTS9FLGtCQUFrQnZ3RCxHQUN6Q0EsRUFBT244QyxXQUNQLElBQUksR0FBcUJtOEMsRUFBUWh3QyxHQUFTbk0sU0FBUzB6RyxHQUduREksRUFBa0IsQ0FDcEIsTUFBTUMsRUFBZ0J6dkYsRUFBSXhULFFBQVEsTUFFWCxJQUFuQmlqRyxJQUNGenZGLEVBQU1BLEVBQUk3bEIsTUFBTSxFQUFHczFHLElBRXJCenZGLEtBQThCLElBQXRCQSxFQUFJeFQsUUFBUSxLQUFjLElBQU0sS0FBT2dqRyxDQUNqRCxDQUVBLE9BQU94dkYsQ0FDVCxDQ1FBLFNBbEVBLE1BQ0UsV0FBQWhhLEdBQ0V0TCxLQUFLdXBGLFNBQVcsRUFDbEIsQ0FVQSxHQUFBeXJCLENBQUlDLEVBQVdDLEVBQVUvbkcsR0FPdkIsT0FOQW5OLEtBQUt1cEYsU0FBUzdvRixLQUFLLENBQ2pCdTBHLFlBQ0FDLFdBQ0FDLGNBQWFob0csR0FBVUEsRUFBUWdvRyxZQUMvQkMsUUFBU2pvRyxFQUFVQSxFQUFRaW9HLFFBQVUsT0FFaENwMUcsS0FBS3VwRixTQUFTbnJGLE9BQVMsQ0FDaEMsQ0FTQSxLQUFBaTNHLENBQU16MEcsR0FDQVosS0FBS3VwRixTQUFTM29GLEtBQ2hCWixLQUFLdXBGLFNBQVMzb0YsR0FBTSxLQUV4QixDQU9BLEtBQUEwa0UsR0FDTXRsRSxLQUFLdXBGLFdBQ1B2cEYsS0FBS3VwRixTQUFXLEdBRXBCLENBWUEsT0FBQWppRixDQUFRNi9DLEdBQ05zckQsR0FBTW5yRyxRQUFRdEgsS0FBS3VwRixVQUFVLFNBQXdCLytFLEdBQ3pDLE9BQU5BLEdBQ0YyOEMsRUFBRzM4QyxFQUVQLEdBQ0YsR0NqRUYsSUFDRThxRyxtQkFBbUIsRUFDbkJDLG1CQUFtQixFQUNuQkMscUJBQXFCLEdDRHZCLElBQ0UxdEQsV0FBVyxFQUNYMnRELFFBQVMsQ0FDUEMsZ0JDSnNDLG9CQUFwQkEsZ0JBQWtDQSxnQkFBa0IsR0RLdEVuRyxTRU4rQixvQkFBYkEsU0FBMkJBLFNBQVcsS0ZPeER3RSxLR1AyQixvQkFBVEEsS0FBdUJBLEtBQU8sTUhTbEQ0QixVQUFXLENBQUMsT0FBUSxRQUFTLE9BQVEsT0FBUSxNQUFPLFNJWGhEQyxHQUFrQyxvQkFBWDN2RyxRQUE4QyxvQkFBYkMsU0FtQnhEMnZHLElBQ0hDLEdBRXVCLG9CQUFkN2hFLFdBQTZCQSxVQUFVNmhFLFFBRHhDRixJQUFpQixDQUFDLGNBQWUsZUFBZ0IsTUFBTTlqRyxRQUFRZ2tHLElBQVcsR0FGdkQsSUFDM0JBLEdBYUgsTUFBTUMsR0FFMkIsb0JBQXRCQyxtQkFFUGhJLGdCQUFnQmdJLG1CQUNjLG1CQUF2QmhJLEtBQUtpSSxjQ25DaEIsT0FDSyxLQUNBLElDeUZMLEdBOUNBLFNBQXdCMUMsR0FDdEIsU0FBUzJDLEVBQVV4OEQsRUFBTTk1QyxFQUFPVSxFQUFRaTRCLEdBQ3RDLElBQUlsNEIsRUFBT3E1QyxFQUFLbmhCLEtBRWhCLEdBQWEsY0FBVGw0QixFQUFzQixPQUFPLEVBRWpDLE1BQU04MUcsRUFBZXZpRCxPQUFPaStDLFVBQVV4eEcsR0FDaEMrMUcsRUFBUzc5RSxHQUFTbWhCLEVBQUt0N0MsT0FHN0IsT0FGQWlDLEdBQVFBLEdBQVFveUcsR0FBTXhsRyxRQUFRM00sR0FBVUEsRUFBT2xDLE9BQVNpQyxFQUVwRCsxRyxHQUNFM0QsR0FBTXZCLFdBQVc1d0csRUFBUUQsR0FDM0JDLEVBQU9ELEdBQVEsQ0FBQ0MsRUFBT0QsR0FBT1QsR0FFOUJVLEVBQU9ELEdBQVFULEdBR1R1MkcsSUFHTDcxRyxFQUFPRCxJQUFVb3lHLEdBQU10RixTQUFTN3NHLEVBQU9ELE1BQzFDQyxFQUFPRCxHQUFRLElBR0Y2MUcsRUFBVXg4RCxFQUFNOTVDLEVBQU9VLEVBQU9ELEdBQU9rNEIsSUFFdENrNkUsR0FBTXhsRyxRQUFRM00sRUFBT0QsTUFDakNDLEVBQU9ELEdBL0NiLFNBQXVCNjFFLEdBQ3JCLE1BQU14Z0MsRUFBTSxDQUFDLEVBQ1Axd0MsRUFBT1gsT0FBT1csS0FBS2t4RSxHQUN6QixJQUFJNTBFLEVBQ0osTUFBTXNzRyxFQUFNNW9HLEVBQUs1RyxPQUNqQixJQUFJdUIsRUFDSixJQUFLMkIsRUFBSSxFQUFHQSxFQUFJc3NHLEVBQUt0c0csSUFDbkIzQixFQUFNcUYsRUFBSzFELEdBQ1hvMEMsRUFBSS8xQyxHQUFPdTJFLEVBQUl2MkUsR0FFakIsT0FBTysxQyxDQUNULENBb0NxQjJnRSxDQUFjLzFHLEVBQU9ELE1BRzlCODFHLEVBQ1YsQ0FFQSxHQUFJMUQsR0FBTXBELFdBQVdrRSxJQUFhZCxHQUFNeEYsV0FBV3NHLEVBQVN6cEMsU0FBVSxDQUNwRSxNQUFNcDBCLEVBQU0sQ0FBQyxFQU1iLE9BSkErOEQsR0FBTTNCLGFBQWF5QyxHQUFVLENBQUNsekcsRUFBTVQsS0FDbENzMkcsRUExRU4sU0FBdUI3MUcsR0FLckIsT0FBT295RyxHQUFNekIsU0FBUyxnQkFBaUIzd0csR0FBTVksS0FBSStJLEdBQzNCLE9BQWJBLEVBQU0sR0FBYyxHQUFLQSxFQUFNLElBQU1BLEVBQU0sSUFFdEQsQ0FrRWdCc3NHLENBQWNqMkcsR0FBT1QsRUFBTzgxQyxFQUFLLEVBQUUsSUFHeENBLENBQ1QsQ0FFQSxPQUFPLElBQ1QsRUN6RE02Z0UsR0FBVyxDQUVmQyxhQUFjLEdBRWRDLFFBQVMsQ0FBQyxNQUFPLFFBRWpCQyxpQkFBa0IsQ0FBQyxTQUEwQm4wRyxFQUFNbzBHLEdBQ2pELE1BQU1DLEVBQWNELEVBQVFFLGtCQUFvQixHQUMxQ0MsRUFBcUJGLEVBQVk5a0csUUFBUSxxQkFBdUIsRUFDaEVpbEcsRUFBa0J0RSxHQUFNdEYsU0FBUzVxRyxHQVF2QyxHQU5JdzBHLEdBQW1CdEUsR0FBTW5FLFdBQVcvckcsS0FDdENBLEVBQU8sSUFBSWd0RyxTQUFTaHRHLElBR0hrd0csR0FBTXBELFdBQVc5c0csR0FHbEMsT0FBS3UwRyxHQUdFQSxFQUFxQnowRyxLQUFLQyxVQUFVLEdBQWVDLElBRmpEQSxFQUtYLEdBQUlrd0csR0FBTXpGLGNBQWN6cUcsSUFDdEJrd0csR0FBTXJELFNBQVM3c0csSUFDZmt3RyxHQUFNM0MsU0FBU3Z0RyxJQUNma3dHLEdBQU1sRixPQUFPaHJHLElBQ2Jrd0csR0FBTWpGLE9BQU9qckcsR0FFYixPQUFPQSxFQUVULEdBQUlrd0csR0FBTWhELGtCQUFrQmx0RyxHQUMxQixPQUFPQSxFQUFLcXRHLE9BRWQsR0FBSTZDLEdBQU0vRSxrQkFBa0JuckcsR0FFMUIsT0FEQW8wRyxFQUFRSyxlQUFlLG1EQUFtRCxHQUNuRXowRyxFQUFLdkIsV0FHZCxJQUFJeXNHLEVBRUosR0FBSXNKLEVBQWlCLENBQ25CLEdBQUlILEVBQVk5a0csUUFBUSxzQ0FBd0MsRUFDOUQsT0N6RU8sU0FBMEJ2UCxFQUFNNEssR0FDN0MsT0FBTyxHQUFXNUssRUFBTSxJQUFJMDBHLEdBQVN4QixRQUFRQyxnQkFBbUJyeEcsT0FBT3NGLE9BQU8sQ0FDNUVpcUcsUUFBUyxTQUFTaDBHLEVBQU9ELEVBQUsrNUMsRUFBTXc5RCxHQUNsQyxPQUFJRCxHQUFTRSxRQUFVMUUsR0FBTXJELFNBQVN4dkcsSUFDcENJLEtBQUt3dkcsT0FBTzd2RyxFQUFLQyxFQUFNb0IsU0FBUyxZQUN6QixHQUdGazJHLEVBQVFyRCxlQUFlcDFHLE1BQU11QixLQUFNN0IsVUFDNUMsR0FDQ2dQLEdBQ0wsQ0Q4RGVpcUcsQ0FBaUI3MEcsRUFBTXZDLEtBQUtxM0csZ0JBQWdCcjJHLFdBR3JELElBQUt5c0csRUFBYWdGLEdBQU1oRixXQUFXbHJHLEtBQVVxMEcsRUFBWTlrRyxRQUFRLHdCQUEwQixFQUFHLENBQzVGLE1BQU13bEcsRUFBWXQzRyxLQUFLdTNHLEtBQU92M0csS0FBS3UzRyxJQUFJaEksU0FFdkMsT0FBTyxHQUNMOUIsRUFBYSxDQUFDLFVBQVdsckcsR0FBUUEsRUFDakMrMEcsR0FBYSxJQUFJQSxFQUNqQnQzRyxLQUFLcTNHLGVBRVQsQ0FDRixDQUVBLE9BQUlOLEdBQW1CRCxHQUNyQkgsRUFBUUssZUFBZSxvQkFBb0IsR0ExRWpELFNBQXlCUSxFQUFVQyxFQUFRaEQsR0FDekMsR0FBSWhDLEdBQU0zM0MsU0FBUzA4QyxHQUNqQixJQUVFLE9BREEsRUFBV24xRyxLQUFLaS9DLE9BQU9rMkQsR0FDaEIvRSxHQUFNMW9HLEtBQUt5dEcsRUFDcEIsQ0FBRSxNQUFPaDRHLEdBQ1AsR0FBZSxnQkFBWEEsRUFBRWEsS0FDSixNQUFNYixDQUVWLENBR0YsT0FBTyxFQUFZNkMsS0FBS0MsV0FBV2sxRyxFQUNyQyxDQThEYUUsQ0FBZ0JuMUcsSUFHbEJBLENBQ1QsR0FFQW8xRyxrQkFBbUIsQ0FBQyxTQUEyQnAxRyxHQUM3QyxNQUFNaTBHLEVBQWV4MkcsS0FBS3cyRyxjQUFnQkQsR0FBU0MsYUFDN0NqQixFQUFvQmlCLEdBQWdCQSxFQUFhakIsa0JBQ2pEcUMsRUFBc0MsU0FBdEI1M0csS0FBSzYzRyxhQUUzQixHQUFJdDFHLEdBQVFrd0csR0FBTTMzQyxTQUFTdjRELEtBQVdnekcsSUFBc0J2MUcsS0FBSzYzRyxjQUFpQkQsR0FBZ0IsQ0FDaEcsTUFDTUUsSUFEb0J0QixHQUFnQkEsRUFBYWxCLG9CQUNQc0MsRUFFaEQsSUFDRSxPQUFPdjFHLEtBQUtpL0MsTUFBTS8rQyxFQUNwQixDQUFFLE1BQU8vQyxHQUNQLEdBQUlzNEcsRUFBbUIsQ0FDckIsR0FBZSxnQkFBWHQ0RyxFQUFFYSxLQUNKLE1BQU0sR0FBV3crQyxLQUFLci9DLEVBQUcsR0FBV3U0RyxpQkFBa0IvM0csS0FBTSxLQUFNQSxLQUFLdXlHLFVBRXpFLE1BQU0veUcsQ0FDUixDQUNGLENBQ0YsQ0FFQSxPQUFPK0MsQ0FDVCxHQU1BdzRGLFFBQVMsRUFFVGlkLGVBQWdCLGFBQ2hCQyxlQUFnQixlQUVoQkMsa0JBQW1CLEVBQ25CQyxlQUFnQixFQUVoQlosSUFBSyxDQUNIaEksU0FBVTBILEdBQVN4QixRQUFRbEcsU0FDM0J3RSxLQUFNa0QsR0FBU3hCLFFBQVExQixNQUd6QnFFLGVBQWdCLFNBQXdCeDBELEdBQ3RDLE9BQU9BLEdBQVUsS0FBT0EsRUFBUyxHQUNuQyxFQUVBK3lELFFBQVMsQ0FDUDBCLE9BQVEsQ0FDTixPQUFVLG9DQUNWLG9CQUFnQnoyRyxLQUt0QjZ3RyxHQUFNbnJHLFFBQVEsQ0FBQyxTQUFVLE1BQU8sT0FBUSxPQUFRLE1BQU8sVUFBV2d4RyxJQUNoRS9CLEdBQVNJLFFBQVEyQixHQUFVLENBQUMsQ0FBQyxJQUcvQixZRXhKTUMsR0FBb0I5RixHQUFNcEIsWUFBWSxDQUMxQyxNQUFPLGdCQUFpQixpQkFBa0IsZUFBZ0IsT0FDMUQsVUFBVyxPQUFRLE9BQVEsb0JBQXFCLHNCQUNoRCxnQkFBaUIsV0FBWSxlQUFnQixzQkFDN0MsVUFBVyxjQUFlLGVDTHRCbUgsR0FBYWh3RyxPQUFPLGFBRTFCLFNBQVNpd0csR0FBZ0JDLEdBQ3ZCLE9BQU9BLEdBQVU1MkYsT0FBTzQyRixHQUFRM3VHLE9BQU94QyxhQUN6QyxDQUVBLFNBQVNveEcsR0FBZS80RyxHQUN0QixPQUFjLElBQVZBLEdBQTRCLE1BQVRBLEVBQ2RBLEVBR0Y2eUcsR0FBTXhsRyxRQUFRck4sR0FBU0EsRUFBTXFCLElBQUkwM0csSUFBa0I3MkYsT0FBT2xpQixFQUNuRSxDQWdCQSxTQUFTZzVHLEdBQWlCdGtGLEVBQVMxMEIsRUFBTzg0RyxFQUFROTdELEVBQVFpOEQsR0FDeEQsT0FBSXBHLEdBQU14RixXQUFXcndELEdBQ1pBLEVBQU9wK0MsS0FBS3dCLEtBQU1KLEVBQU84NEcsSUFHOUJHLElBQ0ZqNUcsRUFBUTg0RyxHQUdMakcsR0FBTTMzQyxTQUFTbDdELEdBRWhCNnlHLEdBQU0zM0MsU0FBU2xlLElBQ2lCLElBQTNCaDlDLEVBQU1rUyxRQUFROHFDLEdBR25CNjFELEdBQU1sRSxTQUFTM3hELEdBQ1ZBLEVBQU83MEMsS0FBS25JLFFBRHJCLE9BTkEsRUFTRixDQXNCQSxNQUFNazVHLEdBQ0osV0FBQXh0RyxDQUFZcXJHLEdBQ1ZBLEdBQVczMkcsS0FBS29LLElBQUl1c0csRUFDdEIsQ0FFQSxHQUFBdnNHLENBQUlzdUcsRUFBUUssRUFBZ0JDLEdBQzFCLE1BQU1oTCxFQUFPaHVHLEtBRWIsU0FBU2k1RyxFQUFVQyxFQUFRQyxFQUFTQyxHQUNsQyxNQUFNQyxFQUFVWixHQUFnQlUsR0FFaEMsSUFBS0UsRUFDSCxNQUFNLElBQUl4dkcsTUFBTSwwQ0FHbEIsTUFBTWxLLEVBQU04eUcsR0FBTTVFLFFBQVFHLEVBQU1xTCxLQUU1QjE1RyxRQUFxQmlDLElBQWRvc0csRUFBS3J1RyxLQUFtQyxJQUFieTVHLFFBQW1DeDNHLElBQWJ3M0csSUFBd0MsSUFBZHBMLEVBQUtydUcsTUFDekZxdUcsRUFBS3J1RyxHQUFPdzVHLEdBQVdSLEdBQWVPLEdBRTFDLENBRUEsTUFBTUksRUFBYSxDQUFDM0MsRUFBU3lDLElBQzNCM0csR0FBTW5yRyxRQUFRcXZHLEdBQVMsQ0FBQ3VDLEVBQVFDLElBQVlGLEVBQVVDLEVBQVFDLEVBQVNDLEtBVXpFLE9BUkkzRyxHQUFNckYsY0FBY3NMLElBQVdBLGFBQWtCMTRHLEtBQUtzTCxZQUN4RGd1RyxFQUFXWixFQUFRSyxHQUNYdEcsR0FBTTMzQyxTQUFTNDlDLEtBQVlBLEVBQVNBLEVBQU8zdUcsVUFyRXRCLGlDQUFpQ2hDLEtBcUVtQjJ3RyxFQXJFVjN1RyxRQXNFdkV1dkcsRUQxRU4sQ0FBZUMsSUFDYixNQUFNeGxDLEVBQVMsQ0FBQyxFQUNoQixJQUFJcDBFLEVBQ0EwdEcsRUFDQS9yRyxFQXNCSixPQXBCQWk0RyxHQUFjQSxFQUFXbHlHLE1BQU0sTUFBTUMsU0FBUSxTQUFnQmt5RyxHQUMzRGw0RyxFQUFJazRHLEVBQUsxbkcsUUFBUSxLQUNqQm5TLEVBQU02NUcsRUFBS3ZuRyxVQUFVLEVBQUczUSxHQUFHeUksT0FBT3hDLGNBQ2xDOGxHLEVBQU1tTSxFQUFLdm5HLFVBQVUzUSxFQUFJLEdBQUd5SSxRQUV2QnBLLEdBQVFvMEUsRUFBT3AwRSxJQUFRNDRHLEdBQWtCNTRHLEtBSWxDLGVBQVJBLEVBQ0VvMEUsRUFBT3AwRSxHQUNUbzBFLEVBQU9wMEUsR0FBS2UsS0FBSzJzRyxHQUVqQnQ1QixFQUFPcDBFLEdBQU8sQ0FBQzB0RyxHQUdqQnQ1QixFQUFPcDBFLEdBQU9vMEUsRUFBT3AwRSxHQUFPbzBFLEVBQU9wMEUsR0FBTyxLQUFPMHRHLEVBQU1BLEVBRTNELElBRU90NUIsQ0FDUixFQytDZ0IwbEMsQ0FBYWYsR0FBU0ssR0FFdkIsTUFBVkwsR0FBa0JPLEVBQVVGLEVBQWdCTCxFQUFRTSxHQUcvQ2g1RyxJQUNULENBRUEsR0FBQXVMLENBQUltdEcsRUFBUWpCLEdBR1YsR0FGQWlCLEVBQVNELEdBQWdCQyxHQUViLENBQ1YsTUFBTS80RyxFQUFNOHlHLEdBQU01RSxRQUFRN3RHLEtBQU0wNEcsR0FFaEMsR0FBSS80RyxFQUFLLENBQ1AsTUFBTUMsRUFBUUksS0FBS0wsR0FFbkIsSUFBSzgzRyxFQUNILE9BQU83M0csRUFHVCxJQUFlLElBQVg2M0csRUFDRixPQXhHVixTQUFxQi8wQyxHQUNuQixNQUFNZzNDLEVBQVNyMUcsT0FBTzI0QixPQUFPLE1BQ3ZCMjhFLEVBQVcsbUNBQ2pCLElBQUkzdkcsRUFFSixLQUFRQSxFQUFRMnZHLEVBQVNyVixLQUFLNWhDLElBQzVCZzNDLEVBQU8xdkcsRUFBTSxJQUFNQSxFQUFNLEdBRzNCLE9BQU8wdkcsQ0FDVCxDQThGaUJFLENBQVloNkcsR0FHckIsR0FBSTZ5RyxHQUFNeEYsV0FBV3dLLEdBQ25CLE9BQU9BLEVBQU9qNUcsS0FBS3dCLEtBQU1KLEVBQU9ELEdBR2xDLEdBQUk4eUcsR0FBTWxFLFNBQVNrSixHQUNqQixPQUFPQSxFQUFPblQsS0FBSzFrRyxHQUdyQixNQUFNLElBQUk0ekcsVUFBVSx5Q0FDdEIsQ0FDRixDQUNGLENBRUEsR0FBQTFuRixDQUFJNHNGLEVBQVFuN0QsR0FHVixHQUZBbTdELEVBQVNELEdBQWdCQyxHQUViLENBQ1YsTUFBTS80RyxFQUFNOHlHLEdBQU01RSxRQUFRN3RHLEtBQU0wNEcsR0FFaEMsU0FBVS80RyxRQUFxQmlDLElBQWQ1QixLQUFLTCxJQUF3QjQ5QyxJQUFXcTdELEdBQWlCNTRHLEVBQU1BLEtBQUtMLEdBQU1BLEVBQUs0OUMsR0FDbEcsQ0FFQSxPQUFPLENBQ1QsQ0FFQSxPQUFPbTdELEVBQVFuN0QsR0FDYixNQUFNeXdELEVBQU9odUcsS0FDYixJQUFJNjVHLEdBQVUsRUFFZCxTQUFTQyxFQUFhWCxHQUdwQixHQUZBQSxFQUFVVixHQUFnQlUsR0FFYixDQUNYLE1BQU14NUcsRUFBTTh5RyxHQUFNNUUsUUFBUUcsRUFBTW1MLElBRTVCeDVHLEdBQVM0OUMsSUFBV3E3RCxHQUFpQjVLLEVBQU1BLEVBQUtydUcsR0FBTUEsRUFBSzQ5QyxZQUN0RHl3RCxFQUFLcnVHLEdBRVprNkcsR0FBVSxFQUVkLENBQ0YsQ0FRQSxPQU5JcEgsR0FBTXhsRyxRQUFReXJHLEdBQ2hCQSxFQUFPcHhHLFFBQVF3eUcsR0FFZkEsRUFBYXBCLEdBR1JtQixDQUNULENBRUEsS0FBQXYwQyxDQUFNL25CLEdBQ0osTUFBTXY0QyxFQUFPWCxPQUFPVyxLQUFLaEYsTUFDekIsSUFBSXNCLEVBQUkwRCxFQUFLNUcsT0FDVHk3RyxHQUFVLEVBRWQsS0FBT3Y0RyxLQUFLLENBQ1YsTUFBTTNCLEVBQU1xRixFQUFLMUQsR0FDYmk4QyxJQUFXcTdELEdBQWlCNTRHLEVBQU1BLEtBQUtMLEdBQU1BLEVBQUs0OUMsR0FBUyxZQUN0RHY5QyxLQUFLTCxHQUNaazZHLEdBQVUsRUFFZCxDQUVBLE9BQU9BLENBQ1QsQ0FFQSxTQUFBRSxDQUFVQyxHQUNSLE1BQU1oTSxFQUFPaHVHLEtBQ1AyMkcsRUFBVSxDQUFDLEVBc0JqQixPQXBCQWxFLEdBQU1uckcsUUFBUXRILE1BQU0sQ0FBQ0osRUFBTzg0RyxLQUMxQixNQUFNLzRHLEVBQU04eUcsR0FBTTVFLFFBQVE4SSxFQUFTK0IsR0FFbkMsR0FBSS80RyxFQUdGLE9BRkFxdUcsRUFBS3J1RyxHQUFPZzVHLEdBQWUvNEcsZUFDcEJvdUcsRUFBSzBLLEdBSWQsTUFBTXVCLEVBQWFELEVBMUp6QixTQUFzQnRCLEdBQ3BCLE9BQU9BLEVBQU8zdUcsT0FDWHhDLGNBQWNqSSxRQUFRLG1CQUFtQixDQUFDc3RCLEVBQUdZLEVBQU1rMUMsSUFDM0NsMUMsRUFBSzlsQixjQUFnQmc3RCxHQUVsQyxDQXFKa0N3M0MsQ0FBYXhCLEdBQVU1MkYsT0FBTzQyRixHQUFRM3VHLE9BRTlEa3dHLElBQWV2QixVQUNWMUssRUFBSzBLLEdBR2QxSyxFQUFLaU0sR0FBY3RCLEdBQWUvNEcsR0FFbEMrMkcsRUFBUXNELElBQWMsQ0FBSSxJQUdyQmo2RyxJQUNULENBRUEsTUFBQXRCLElBQVV5N0csR0FDUixPQUFPbjZHLEtBQUtzTCxZQUFZNU0sT0FBT3NCLFFBQVNtNkcsRUFDMUMsQ0FFQSxNQUFBekgsQ0FBTzBILEdBQ0wsTUFBTTFrRSxFQUFNcnhDLE9BQU8yNEIsT0FBTyxNQU0xQixPQUpBeTFFLEdBQU1uckcsUUFBUXRILE1BQU0sQ0FBQ0osRUFBTzg0RyxLQUNqQixNQUFUOTRHLElBQTJCLElBQVZBLElBQW9CODFDLEVBQUlnakUsR0FBVTBCLEdBQWEzSCxHQUFNeGxHLFFBQVFyTixHQUFTQSxFQUFNeUIsS0FBSyxNQUFRekIsRUFBTSxJQUczRzgxQyxDQUNULENBRUEsQ0FBQ2x0QyxPQUFPZSxZQUNOLE9BQU9sRixPQUFPeWxFLFFBQVE5cEUsS0FBSzB5RyxVQUFVbHFHLE9BQU9lLFdBQzlDLENBRUEsUUFBQXZJLEdBQ0UsT0FBT3FELE9BQU95bEUsUUFBUTlwRSxLQUFLMHlHLFVBQVV6eEcsS0FBSSxFQUFFeTNHLEVBQVE5NEcsS0FBVzg0RyxFQUFTLEtBQU85NEcsSUFBT3lCLEtBQUssS0FDNUYsQ0FFQSxJQUFLbUgsT0FBTyt2QyxlQUNWLE1BQU8sY0FDVCxDQUVBLFdBQU9zRyxDQUFLK3RELEdBQ1YsT0FBT0EsYUFBaUI1c0csS0FBTzRzRyxFQUFRLElBQUk1c0csS0FBSzRzRyxFQUNsRCxDQUVBLGFBQU9sdUcsQ0FBT2k5QyxLQUFVdytELEdBQ3RCLE1BQU1FLEVBQVcsSUFBSXI2RyxLQUFLMjdDLEdBSTFCLE9BRkF3K0QsRUFBUTd5RyxTQUFTaEgsR0FBVys1RyxFQUFTandHLElBQUk5SixLQUVsQys1RyxDQUNULENBRUEsZUFBT0MsQ0FBUzVCLEdBQ2QsTUFJTTZCLEdBSll2NkcsS0FBS3c0RyxJQUFleDRHLEtBQUt3NEcsSUFBYyxDQUN2RCtCLFVBQVcsQ0FBQyxJQUdjQSxVQUN0QmgzRyxFQUFZdkQsS0FBS3VELFVBRXZCLFNBQVNpM0csRUFBZXJCLEdBQ3RCLE1BQU1FLEVBQVVaLEdBQWdCVSxHQUUzQm9CLEVBQVVsQixLQWxOckIsU0FBd0IzakUsRUFBS2dqRSxHQUMzQixNQUFNK0IsRUFBZWhJLEdBQU1oQixZQUFZLElBQU1pSCxHQUU3QyxDQUFDLE1BQU8sTUFBTyxPQUFPcHhHLFNBQVFvekcsSUFDNUJyMkcsT0FBT0QsZUFBZXN4QyxFQUFLZ2xFLEVBQWFELEVBQWMsQ0FDcEQ3NkcsTUFBTyxTQUFTKzZHLEVBQU1DLEVBQU1DLEdBQzFCLE9BQU83NkcsS0FBSzA2RyxHQUFZbDhHLEtBQUt3QixLQUFNMDRHLEVBQVFpQyxFQUFNQyxFQUFNQyxFQUN6RCxFQUNBcnZHLGNBQWMsR0FDZCxHQUVOLENBd01Rc3ZHLENBQWV2M0csRUFBVzQxRyxHQUMxQm9CLEVBQVVsQixJQUFXLEVBRXpCLENBSUEsT0FGQTVHLEdBQU14bEcsUUFBUXlyRyxHQUFVQSxFQUFPcHhHLFFBQVFrekcsR0FBa0JBLEVBQWU5QixHQUVqRTE0RyxJQUNULEVBR0Y4NEcsR0FBYXdCLFNBQVMsQ0FBQyxlQUFnQixpQkFBa0IsU0FBVSxrQkFBbUIsYUFBYyxrQkFHcEc3SCxHQUFNakUsa0JBQWtCc0ssR0FBYXYxRyxXQUFXLEVBQUUzRCxTQUFRRCxLQUN4RCxJQUFJbzdHLEVBQVNwN0csRUFBSSxHQUFHK0gsY0FBZ0IvSCxFQUFJRixNQUFNLEdBQzlDLE1BQU8sQ0FDTDhMLElBQUssSUFBTTNMLEVBQ1gsR0FBQXdLLENBQUk0d0csR0FDRmg3RyxLQUFLKzZHLEdBQVVDLENBQ2pCLEVBQ0YsSUFHRnZJLEdBQU10QixjQUFjMkgsSUFFcEIsWUMzUmUsU0FBU21DLEdBQWNDLEVBQUszSSxHQUN6QyxNQUFNdnVDLEVBQVNoa0UsTUFBUSxHQUNqQnMwQixFQUFVaStFLEdBQVl2dUMsRUFDdEIyeUMsRUFBVSxHQUFhOTNELEtBQUt2cUIsRUFBUXFpRixTQUMxQyxJQUFJcDBHLEVBQU8reEIsRUFBUS94QixLQVFuQixPQU5Ba3dHLEdBQU1uckcsUUFBUTR6RyxHQUFLLFNBQW1CL3pELEdBQ3BDNWtELEVBQU80a0QsRUFBRzNvRCxLQUFLd2xFLEVBQVF6aEUsRUFBTW8wRyxFQUFRb0QsWUFBYXhILEVBQVdBLEVBQVMzdUQsWUFBU2hpRCxFQUNqRixJQUVBKzBHLEVBQVFvRCxZQUVEeDNHLENBQ1QsQ0N6QmUsU0FBUzQ0RyxHQUFTdjdHLEdBQy9CLFNBQVVBLElBQVNBLEVBQU13N0csV0FDM0IsQ0NVQSxTQUFTQyxHQUFjNTdFLEVBQVN1a0MsRUFBUXN1QyxHQUV0QyxHQUFXOXpHLEtBQUt3QixLQUFpQixNQUFYeS9CLEVBQWtCLFdBQWFBLEVBQVMsR0FBVzY3RSxhQUFjdDNDLEVBQVFzdUMsR0FDL0Z0eUcsS0FBS0ssS0FBTyxlQUNkLENBRUFveUcsR0FBTXBDLFNBQVNnTCxHQUFlLEdBQVksQ0FDeENELFlBQVksSUFHZCxZQ3JCQSxHQUFlbkUsR0FBU3BCLHNCQUd0QixDQUNFLEtBQUEwRixDQUFNbDdHLEVBQU1ULEVBQU80N0csRUFBUzloRSxFQUFNK2hFLEVBQVFDLEdBQ3hDLE1BQU1DLEVBQVMsQ0FBQ3Q3RyxFQUFPLElBQU0rQixtQkFBbUJ4QyxJQUVoRDZ5RyxHQUFNdkYsU0FBU3NPLElBQVlHLEVBQU9qN0csS0FBSyxXQUFhLElBQUl3ZCxLQUFLczlGLEdBQVNJLGVBRXRFbkosR0FBTTMzQyxTQUFTcGhCLElBQVNpaUUsRUFBT2o3RyxLQUFLLFFBQVVnNUMsR0FFOUMrNEQsR0FBTTMzQyxTQUFTMmdELElBQVdFLEVBQU9qN0csS0FBSyxVQUFZKzZHLElBRXZDLElBQVhDLEdBQW1CQyxFQUFPajdHLEtBQUssVUFFL0J3RixTQUFTeTFHLE9BQVNBLEVBQU90NkcsS0FBSyxLQUNoQyxFQUVBLElBQUErbEUsQ0FBSy9tRSxHQUNILE1BQU0ySixFQUFROUQsU0FBU3kxRyxPQUFPM3hHLE1BQU0sSUFBSTR6QyxPQUFPLGFBQWV2OUMsRUFBTyxjQUNyRSxPQUFRMkosRUFBUWcwQyxtQkFBbUJoMEMsRUFBTSxJQUFNLElBQ2pELEVBRUEsTUFBQW9zQyxDQUFPLzFDLEdBQ0xMLEtBQUt1N0csTUFBTWw3RyxFQUFNLEdBQUk2ZCxLQUFLQyxNQUFRLE1BQ3BDLEdBTUYsQ0FDRSxLQUFBbzlGLEdBQVMsRUFDVG4wQyxLQUFJLElBQ0ssS0FFVCxNQUFBaHhCLEdBQVUsR0N4QkMsU0FBU3lsRSxHQUFjQyxFQUFTQyxHQUM3QyxPQUFJRCxJQ0hHLDhCQUE4Qi96RyxLREdQZzBHLEdFTmpCLFNBQXFCRCxFQUFTRSxHQUMzQyxPQUFPQSxFQUNIRixFQUFReDhHLFFBQVEsU0FBVSxJQUFNLElBQU0wOEcsRUFBWTE4RyxRQUFRLE9BQVEsSUFDbEV3OEcsQ0FDTixDRkdXRyxDQUFZSCxFQUFTQyxHQUV2QkEsQ0FDVCxDR2ZBLFNBQWU5RSxHQUFTcEIsc0JBSXRCLFdBQ0UsTUFBTXFHLEVBQU8sa0JBQWtCbjBHLEtBQUtrc0MsVUFBVWl2RCxXQUN4Q2laLEVBQWlCajJHLFNBQVNDLGNBQWMsS0FDOUMsSUFBSWkyRyxFQVFKLFNBQVNDLEVBQVcvMkYsR0FDbEIsSUFBSXdDLEVBQU94QyxFQVdYLE9BVEk0MkYsSUFFRkMsRUFBZWowRyxhQUFhLE9BQVE0ZixHQUNwQ0EsRUFBT3EwRixFQUFlcjBGLE1BR3hCcTBGLEVBQWVqMEcsYUFBYSxPQUFRNGYsR0FHN0IsQ0FDTEEsS0FBTXEwRixFQUFlcjBGLEtBQ3JCeWdDLFNBQVU0ekQsRUFBZTV6RCxTQUFXNHpELEVBQWU1ekQsU0FBU2pwRCxRQUFRLEtBQU0sSUFBTSxHQUNoRmc5RyxLQUFNSCxFQUFlRyxLQUNyQnAzRixPQUFRaTNGLEVBQWVqM0YsT0FBU2kzRixFQUFlajNGLE9BQU81bEIsUUFBUSxNQUFPLElBQU0sR0FDM0VnNkMsS0FBTTZpRSxFQUFlN2lFLEtBQU82aUUsRUFBZTdpRSxLQUFLaDZDLFFBQVEsS0FBTSxJQUFNLEdBQ3BFaTlHLFNBQVVKLEVBQWVJLFNBQ3pCQyxLQUFNTCxFQUFlSyxLQUNyQm5qRSxTQUFpRCxNQUF0QzhpRSxFQUFlOWlFLFNBQVNybkMsT0FBTyxHQUN4Q21xRyxFQUFlOWlFLFNBQ2YsSUFBTThpRSxFQUFlOWlFLFNBRTNCLENBVUEsT0FSQStpRSxFQUFZQyxFQUFXcDJHLE9BQU9nYyxTQUFTNkYsTUFRaEMsU0FBeUIyMEYsR0FDOUIsTUFBTTFvQyxFQUFVMCtCLEdBQU0zM0MsU0FBUzJoRCxHQUFlSixFQUFXSSxHQUFjQSxFQUN2RSxPQUFRMW9DLEVBQU94ckIsV0FBYTZ6RCxFQUFVN3pELFVBQ2xDd3JCLEVBQU91b0MsT0FBU0YsRUFBVUUsSUFDaEMsQ0FDRCxDQWxERCxHQXNEUyxXQUNMLE9BQU8sQ0FDVCxFQ2pESixTQUFTSSxHQUFxQi93RixFQUFVZ3hGLEdBQ3RDLElBQUlDLEVBQWdCLEVBQ3BCLE1BQU1DLEVDVlIsU0FBcUJDLEVBQWNyMEYsR0FDakNxMEYsRUFBZUEsR0FBZ0IsR0FDL0IsTUFBTUMsRUFBUSxJQUFJeitHLE1BQU13K0csR0FDbEJFLEVBQWEsSUFBSTErRyxNQUFNdytHLEdBQzdCLElBRUlHLEVBRkFubUUsRUFBTyxFQUNQaFQsRUFBTyxFQUtYLE9BRkFyYixPQUFjN21CLElBQVI2bUIsRUFBb0JBLEVBQU0sSUFFekIsU0FBY3kwRixHQUNuQixNQUFNLytGLEVBQU1ELEtBQUtDLE1BRVhnL0YsRUFBWUgsRUFBV2w1RSxHQUV4Qm01RSxJQUNIQSxFQUFnQjkrRixHQUdsQjQrRixFQUFNam1FLEdBQVFvbUUsRUFDZEYsRUFBV2xtRSxHQUFRMzRCLEVBRW5CLElBQUk3YyxFQUFJd2lDLEVBQ0pzNUUsRUFBYSxFQUVqQixLQUFPOTdHLElBQU13MUMsR0FDWHNtRSxHQUFjTCxFQUFNejdHLEtBQ3BCQSxHQUFRdzdHLEVBU1YsR0FOQWhtRSxHQUFRQSxFQUFPLEdBQUtnbUUsRUFFaEJobUUsSUFBU2hULElBQ1hBLEdBQVFBLEVBQU8sR0FBS2c1RSxHQUdsQjMrRixFQUFNOCtGLEVBQWdCeDBGLEVBQ3hCLE9BR0YsTUFBTTQwRixFQUFTRixHQUFhaC9GLEVBQU1nL0YsRUFFbEMsT0FBT0UsRUFBU3hsRyxLQUFLNmlELE1BQW1CLElBQWIwaUQsRUFBb0JDLFFBQVV6N0csQ0FDM0QsQ0FDRixDRGxDdUIsQ0FBWSxHQUFJLEtBRXJDLE9BQU9wQyxJQUNMLE1BQU04OUcsRUFBUzk5RyxFQUFFODlHLE9BQ1hDLEVBQVEvOUcsRUFBRWcrRyxpQkFBbUJoK0csRUFBRSs5RyxXQUFRMzdHLEVBQ3ZDNjdHLEVBQWdCSCxFQUFTVixFQUN6QmMsRUFBT2IsRUFBYVksR0FHMUJiLEVBQWdCVSxFQUVoQixNQUFNLzZHLEVBQU8sQ0FDWCs2RyxTQUNBQyxRQUNBMXJDLFNBQVUwckMsRUFBU0QsRUFBU0MsT0FBUzM3RyxFQUNyQ203RyxNQUFPVSxFQUNQQyxLQUFNQSxRQUFjOTdHLEVBQ3BCKzdHLFVBQVdELEdBQVFILEdBVkxELEdBQVVDLEdBVWVBLEVBQVFELEdBQVVJLE9BQU85N0csRUFDaEUrakIsTUFBT25tQixHQUdUK0MsRUFBS282RyxFQUFtQixXQUFhLFdBQVksRUFFakRoeEYsRUFBU3BwQixFQUFLLENBRWxCLENBRUEsTUFFQSxHQUZ3RCxvQkFBbkJxN0csZ0JBRUcsU0FBVTU1QyxHQUNoRCxPQUFPLElBQUl2MUMsU0FBUSxTQUE0QkcsRUFBUzZ1RCxHQUN0RCxJQUFJb2dDLEVBQWM3NUMsRUFBT3poRSxLQUN6QixNQUFNdTdHLEVBQWlCLEdBQWFqL0QsS0FBS21sQixFQUFPMnlDLFNBQVNvRCxZQUN6RCxJQUNJZ0UsRUFXQW5ILEdBWkEsYUFBQ2lCLEVBQVksY0FBRW1HLEdBQWlCaDZDLEVBRXBDLFNBQVNsckMsSUFDSGtyQyxFQUFPaTZDLGFBQ1RqNkMsRUFBT2k2QyxZQUFZejZCLFlBQVl1NkIsR0FHN0IvNUMsRUFBT2s2QyxRQUNUbDZDLEVBQU9rNkMsT0FBT3RwRyxvQkFBb0IsUUFBU21wRyxFQUUvQyxDQUlBLEdBQUl0TCxHQUFNcEQsV0FBV3dPLEdBQ25CLEdBQUk1RyxHQUFTcEIsdUJBQXlCb0IsR0FBU2xCLCtCQUM3QytILEVBQWU5RyxnQkFBZSxRQUN6QixJQUF3RCxLQUFuREosRUFBY2tILEVBQWVqSCxrQkFBNkIsQ0FFcEUsTUFBT3h6RyxLQUFTcTJHLEdBQVU5QyxFQUFjQSxFQUFZdnZHLE1BQU0sS0FBS3BHLEtBQUk4NEQsR0FBU0EsRUFBTWh3RCxTQUFRNnlDLE9BQU84TSxTQUFXLEdBQzVHbzBELEVBQWU5RyxlQUFlLENBQUMzekcsR0FBUSx5QkFBMEJxMkcsR0FBUXI0RyxLQUFLLE1BQ2hGLENBR0YsSUFBSWl4RyxFQUFVLElBQUlzTCxlQUdsQixHQUFJNTVDLEVBQU9tNkMsS0FBTSxDQUNmLE1BQU1DLEVBQVdwNkMsRUFBT202QyxLQUFLQyxVQUFZLEdBQ25DcDVGLEVBQVdnL0MsRUFBT202QyxLQUFLbjVGLFNBQVc3aUIsU0FBU0MsbUJBQW1CNGhFLEVBQU9tNkMsS0FBS241RixXQUFhLEdBQzdGODRGLEVBQWUxekcsSUFBSSxnQkFBaUIsU0FBV25JLEtBQUttOEcsRUFBVyxJQUFNcDVGLEdBQ3ZFLENBRUEsTUFBTXE1RixFQUFXeEMsR0FBYzczQyxFQUFPODNDLFFBQVM5M0MsRUFBTzErQyxLQU90RCxTQUFTZzVGLElBQ1AsSUFBS2hNLEVBQ0gsT0FHRixNQUFNaU0sRUFBa0IsR0FBYTEvRCxLQUNuQywwQkFBMkJ5ekQsR0FBV0EsRUFBUWtNLDBCRXBGdkMsU0FBZ0I1dkYsRUFBUzZ1RCxFQUFRODBCLEdBQzlDLE1BQU02RixFQUFpQjdGLEVBQVN2dUMsT0FBT28wQyxlQUNsQzdGLEVBQVMzdUQsUUFBV3cwRCxJQUFrQkEsRUFBZTdGLEVBQVMzdUQsUUFHakU2NUIsRUFBTyxJQUFJLEdBQ1QsbUNBQXFDODBCLEVBQVMzdUQsT0FDOUMsQ0FBQyxHQUFXNjZELGdCQUFpQixHQUFXMUcsa0JBQWtCbGdHLEtBQUsrOEIsTUFBTTI5RCxFQUFTM3VELE9BQVMsS0FBTyxHQUM5RjJ1RCxFQUFTdnVDLE9BQ1R1dUMsRUFBU0QsUUFDVEMsSUFQRjNqRixFQUFRMmpGLEVBVVosQ0ZvRk1tTSxFQUFPLFNBQWtCOStHLEdBQ3ZCZ3ZCLEVBQVFodkIsR0FDUms1QixHQUNGLElBQUcsU0FBaUJvWCxHQUNsQnV0QyxFQUFPdnRDLEdBQ1BwWCxHQUNGLEdBZmlCLENBQ2Z2MkIsS0FIb0JzMUcsR0FBaUMsU0FBakJBLEdBQTRDLFNBQWpCQSxFQUN4Q3ZGLEVBQVFDLFNBQS9CRCxFQUFRcU0sYUFHUi82RCxPQUFRMHVELEVBQVExdUQsT0FDaEJDLFdBQVl5dUQsRUFBUXp1RCxXQUNwQjh5RCxRQUFTNEgsRUFDVHY2QyxTQUNBc3VDLFlBWUZBLEVBQVUsSUFDWixDQW1FQSxHQXJHQUEsRUFBUXNNLEtBQUs1NkMsRUFBT3MwQyxPQUFPNXdHLGNBQWVpdEcsR0FBUzBKLEVBQVVyNkMsRUFBTzdtQixPQUFRNm1CLEVBQU82NkMsbUJBQW1CLEdBR3RHdk0sRUFBUXZYLFFBQVUvMkIsRUFBTysyQixRQWlDckIsY0FBZXVYLEVBRWpCQSxFQUFRZ00sVUFBWUEsRUFHcEJoTSxFQUFRd00sbUJBQXFCLFdBQ3RCeE0sR0FBa0MsSUFBdkJBLEVBQVF5TSxhQVFELElBQW5Cek0sRUFBUTF1RCxRQUFrQjB1RCxFQUFRME0sYUFBd0QsSUFBekMxTSxFQUFRME0sWUFBWWx0RyxRQUFRLFdBS2pGdWMsV0FBV2l3RixFQUNiLEVBSUZoTSxFQUFRMk0sUUFBVSxXQUNYM00sSUFJTDcwQixFQUFPLElBQUksR0FBVyxrQkFBbUIsR0FBV3loQyxhQUFjbDdDLEVBQVFzdUMsSUFHMUVBLEVBQVUsS0FDWixFQUdBQSxFQUFRNk0sUUFBVSxXQUdoQjFoQyxFQUFPLElBQUksR0FBVyxnQkFBaUIsR0FBVzJoQyxZQUFhcDdDLEVBQVFzdUMsSUFHdkVBLEVBQVUsSUFDWixFQUdBQSxFQUFRK00sVUFBWSxXQUNsQixJQUFJQyxFQUFzQnQ3QyxFQUFPKzJCLFFBQVUsY0FBZ0IvMkIsRUFBTysyQixRQUFVLGNBQWdCLG1CQUM1RixNQUFNeWIsRUFBZXh5QyxFQUFPd3lDLGNBQWdCLEdBQ3hDeHlDLEVBQU9zN0Msc0JBQ1RBLEVBQXNCdDdDLEVBQU9zN0MscUJBRS9CN2hDLEVBQU8sSUFBSSxHQUNUNmhDLEVBQ0E5SSxFQUFhaEIsb0JBQXNCLEdBQVcrSixVQUFZLEdBQVdMLGFBQ3JFbDdDLEVBQ0FzdUMsSUFHRkEsRUFBVSxJQUNaLEVBS0cyRSxHQUFTcEIsd0JBQ1ZtSSxHQUFpQnZMLEdBQU14RixXQUFXK1EsS0FBbUJBLEVBQWdCQSxFQUFjaDZDLElBRS9FZzZDLElBQW9DLElBQWxCQSxHQUEyQndCLEdBQWdCbkIsSUFBWSxDQUUzRSxNQUFNb0IsRUFBWXo3QyxFQUFPaTBDLGdCQUFrQmowQyxFQUFPZzBDLGdCQUFrQjBILEdBQVF0NEMsS0FBS3BELEVBQU9nMEMsZ0JBRXBGeUgsR0FDRjNCLEVBQWUxekcsSUFBSTQ1RCxFQUFPaTBDLGVBQWdCd0gsRUFFOUMsTUFJYzc5RyxJQUFoQmk4RyxHQUE2QkMsRUFBZTlHLGVBQWUsTUFHdkQscUJBQXNCMUUsR0FDeEJHLEdBQU1uckcsUUFBUXcyRyxFQUFlcEwsVUFBVSxTQUEwQnJGLEVBQUsxdEcsR0FDcEUyeUcsRUFBUXFOLGlCQUFpQmhnSCxFQUFLMHRHLEVBQ2hDLElBSUdvRixHQUFNMUYsWUFBWS9vQyxFQUFPNDdDLG1CQUM1QnROLEVBQVFzTixrQkFBb0I1N0MsRUFBTzQ3QyxpQkFJakMvSCxHQUFpQyxTQUFqQkEsSUFDbEJ2RixFQUFRdUYsYUFBZTd6QyxFQUFPNnpDLGNBSVMsbUJBQTlCN3pDLEVBQU82N0Msb0JBQ2hCdk4sRUFBUTM5RixpQkFBaUIsV0FBWStuRyxHQUFxQjE0QyxFQUFPNjdDLG9CQUFvQixJQUloRCxtQkFBNUI3N0MsRUFBTzg3QyxrQkFBbUN4TixFQUFReU4sUUFDM0R6TixFQUFReU4sT0FBT3ByRyxpQkFBaUIsV0FBWStuRyxHQUFxQjE0QyxFQUFPODdDLG9CQUd0RTk3QyxFQUFPaTZDLGFBQWVqNkMsRUFBT2s2QyxVQUcvQkgsRUFBYXQ0QyxJQUNONnNDLElBR0w3MEIsR0FBUWhZLEdBQVVBLEVBQU9waUUsS0FBTyxJQUFJLEdBQWMsS0FBTTJnRSxFQUFRc3VDLEdBQVc3c0MsR0FDM0U2c0MsRUFBUTBOLFFBQ1IxTixFQUFVLEtBQUksRUFHaEJ0dUMsRUFBT2k2QyxhQUFlajZDLEVBQU9pNkMsWUFBWW4xQixVQUFVaTFCLEdBQy9DLzVDLEVBQU9rNkMsU0FDVGw2QyxFQUFPazZDLE9BQU8rQixRQUFVbEMsSUFBZS81QyxFQUFPazZDLE9BQU92cEcsaUJBQWlCLFFBQVNvcEcsS0FJbkYsTUFBTXgxRCxFR3RQSyxTQUF1QmpqQyxHQUNwQyxNQUFNdGIsRUFBUSw0QkFBNEJzNkYsS0FBS2gvRSxHQUMvQyxPQUFPdGIsR0FBU0EsRUFBTSxJQUFNLEVBQzlCLENIbVBxQmsyRyxDQUFjN0IsR0FFM0I5MUQsSUFBc0QsSUFBMUMwdUQsR0FBU3RCLFVBQVU3akcsUUFBUXkyQyxHQUN6Q2sxQixFQUFPLElBQUksR0FBVyx3QkFBMEJsMUIsRUFBVyxJQUFLLEdBQVdrMkQsZ0JBQWlCejZDLElBTTlGc3VDLEVBQVE2TixLQUFLdEMsR0FBZSxLQUM5QixHQUNGLEVJOVBNdUMsR0FBZ0IsQ0FDcEJDLEtDTEYsS0RNRUMsSUFBS0EsSUFHUDdOLEdBQU1uckcsUUFBUTg0RyxJQUFlLENBQUNqNUQsRUFBSXZuRCxLQUNoQyxHQUFJdW5ELEVBQUksQ0FDTixJQUNFOWlELE9BQU9ELGVBQWUraUQsRUFBSSxPQUFRLENBQUN2bkQsU0FDckMsQ0FBRSxNQUFPSixHQUVULENBQ0E2RSxPQUFPRCxlQUFlK2lELEVBQUksY0FBZSxDQUFDdm5ELFNBQzVDLEtBR0YsTUFBTTJnSCxHQUFnQkMsR0FBVyxLQUFLQSxJQUVoQ0MsR0FBb0JoSyxHQUFZaEUsR0FBTXhGLFdBQVd3SixJQUF3QixPQUFaQSxJQUFnQyxJQUFaQSxFQUV2RixHQUNlaUssSUFDWEEsRUFBV2pPLEdBQU14bEcsUUFBUXl6RyxHQUFZQSxFQUFXLENBQUNBLEdBRWpELE1BQU0sT0FBQ3RpSCxHQUFVc2lILEVBQ2pCLElBQUlDLEVBQ0FsSyxFQUVKLE1BQU1tSyxFQUFrQixDQUFDLEVBRXpCLElBQUssSUFBSXQvRyxFQUFJLEVBQUdBLEVBQUlsRCxFQUFRa0QsSUFBSyxDQUUvQixJQUFJVixFQUlKLEdBTEErL0csRUFBZ0JELEVBQVNwL0csR0FHekJtMUcsRUFBVWtLLEdBRUxGLEdBQWlCRSxLQUNwQmxLLEVBQVUySixJQUFleC9HLEVBQUtraEIsT0FBTzYrRixJQUFnQnA1RyxvQkFFckMzRixJQUFaNjBHLEdBQ0YsTUFBTSxJQUFJLEdBQVcsb0JBQW9CNzFHLE1BSTdDLEdBQUk2MUcsRUFDRixNQUdGbUssRUFBZ0JoZ0gsR0FBTSxJQUFNVSxHQUFLbTFHLENBQ25DLENBRUEsSUFBS0EsRUFBUyxDQUVaLE1BQU1vSyxFQUFVeDhHLE9BQU95bEUsUUFBUTgyQyxHQUM1QjMvRyxLQUFJLEVBQUVMLEVBQUl6QixLQUFXLFdBQVd5QixPQUNwQixJQUFWekIsRUFBa0Isc0NBQXdDLG1DQUcvRCxJQUFJczlDLEVBQUlyK0MsRUFDTHlpSCxFQUFRemlILE9BQVMsRUFBSSxZQUFjeWlILEVBQVE1L0csSUFBSXMvRyxJQUFjbC9HLEtBQUssTUFBUSxJQUFNay9HLEdBQWFNLEVBQVEsSUFDdEcsMEJBRUYsTUFBTSxJQUFJLEdBQ1Isd0RBQTBEcGtFLEVBQzFELGtCQUVKLENBRUEsT0FBT2c2RCxDQUFPLEVFekRsQixTQUFTcUssR0FBNkI5OEMsR0FLcEMsR0FKSUEsRUFBT2k2QyxhQUNUajZDLEVBQU9pNkMsWUFBWThDLG1CQUdqQi84QyxFQUFPazZDLFFBQVVsNkMsRUFBT2s2QyxPQUFPK0IsUUFDakMsTUFBTSxJQUFJLEdBQWMsS0FBTWo4QyxFQUVsQyxDQVNlLFNBQVNnOUMsR0FBZ0JoOUMsR0FpQnRDLE9BaEJBODhDLEdBQTZCOThDLEdBRTdCQSxFQUFPMnlDLFFBQVUsR0FBYTkzRCxLQUFLbWxCLEVBQU8yeUMsU0FHMUMzeUMsRUFBT3poRSxLQUFPMDRHLEdBQWN6OEcsS0FDMUJ3bEUsRUFDQUEsRUFBTzB5QyxtQkFHZ0QsSUFBckQsQ0FBQyxPQUFRLE1BQU8sU0FBUzVrRyxRQUFRa3lELEVBQU9zMEMsU0FDMUN0MEMsRUFBTzJ5QyxRQUFRSyxlQUFlLHFDQUFxQyxHQUdyRDBKLEdBQW9CMThDLEVBQU95eUMsU0FBVyxHQUFTQSxRQUV4REEsQ0FBUXp5QyxHQUFRbjFDLE1BQUssU0FBNkIwakYsR0FZdkQsT0FYQXVPLEdBQTZCOThDLEdBRzdCdXVDLEVBQVNod0csS0FBTzA0RyxHQUFjejhHLEtBQzVCd2xFLEVBQ0FBLEVBQU8yekMsa0JBQ1BwRixHQUdGQSxFQUFTb0UsUUFBVSxHQUFhOTNELEtBQUswekQsRUFBU29FLFNBRXZDcEUsQ0FDVCxJQUFHLFNBQTRCaU8sR0FlN0IsT0FkS3JGLEdBQVNxRixLQUNaTSxHQUE2Qjk4QyxHQUd6Qnc4QyxHQUFVQSxFQUFPak8sV0FDbkJpTyxFQUFPak8sU0FBU2h3RyxLQUFPMDRHLEdBQWN6OEcsS0FDbkN3bEUsRUFDQUEsRUFBTzJ6QyxrQkFDUDZJLEVBQU9qTyxVQUVUaU8sRUFBT2pPLFNBQVNvRSxRQUFVLEdBQWE5M0QsS0FBSzJoRSxFQUFPak8sU0FBU29FLFdBSXpEbG9GLFFBQVFndkQsT0FBTytpQyxFQUN4QixHQUNGLENDM0VBLE1BQU1TLEdBQW1CclUsR0FBVUEsYUFBaUIsR0FBZUEsRUFBTThGLFNBQVc5RixFQVdyRSxTQUFTc1UsR0FBWUMsRUFBU0MsR0FFM0NBLEVBQVVBLEdBQVcsQ0FBQyxFQUN0QixNQUFNcDlDLEVBQVMsQ0FBQyxFQUVoQixTQUFTcTlDLEVBQWUvZ0gsRUFBUTBTLEVBQVFnOUYsR0FDdEMsT0FBSXlDLEdBQU1yRixjQUFjOXNHLElBQVdteUcsR0FBTXJGLGNBQWNwNkYsR0FDOUN5L0YsR0FBTTFDLE1BQU12eEcsS0FBSyxDQUFDd3hHLFlBQVcxdkcsRUFBUTBTLEdBQ25DeS9GLEdBQU1yRixjQUFjcDZGLEdBQ3RCeS9GLEdBQU0xQyxNQUFNLENBQUMsRUFBRy84RixHQUNkeS9GLEdBQU14bEcsUUFBUStGLEdBQ2hCQSxFQUFPdlQsUUFFVHVULENBQ1QsQ0FHQSxTQUFTc3VHLEVBQW9CLzdHLEVBQUdDLEVBQUd3cUcsR0FDakMsT0FBS3lDLEdBQU0xRixZQUFZdm5HLEdBRVhpdEcsR0FBTTFGLFlBQVl4bkcsUUFBdkIsRUFDRTg3RyxPQUFlei9HLEVBQVcyRCxFQUFHeXFHLEdBRjdCcVIsRUFBZTk3RyxFQUFHQyxFQUFHd3FHLEVBSWhDLENBR0EsU0FBU3VSLEVBQWlCaDhHLEVBQUdDLEdBQzNCLElBQUtpdEcsR0FBTTFGLFlBQVl2bkcsR0FDckIsT0FBTzY3RyxPQUFlei9HLEVBQVc0RCxFQUVyQyxDQUdBLFNBQVNnOEcsRUFBaUJqOEcsRUFBR0MsR0FDM0IsT0FBS2l0RyxHQUFNMUYsWUFBWXZuRyxHQUVYaXRHLEdBQU0xRixZQUFZeG5HLFFBQXZCLEVBQ0U4N0csT0FBZXovRyxFQUFXMkQsR0FGMUI4N0csT0FBZXovRyxFQUFXNEQsRUFJckMsQ0FHQSxTQUFTaThHLEVBQWdCbDhHLEVBQUdDLEVBQUc4eUMsR0FDN0IsT0FBSUEsS0FBUThvRSxFQUNIQyxFQUFlOTdHLEVBQUdDLEdBQ2hCOHlDLEtBQVE2b0UsRUFDVkUsT0FBZXovRyxFQUFXMkQsUUFENUIsQ0FHVCxDQUVBLE1BQU1tOEcsRUFBVyxDQUNmcDhGLElBQUtpOEYsRUFDTGpKLE9BQVFpSixFQUNSaC9HLEtBQU1nL0csRUFDTnpGLFFBQVMwRixFQUNUOUssaUJBQWtCOEssRUFDbEI3SixrQkFBbUI2SixFQUNuQjNDLGlCQUFrQjJDLEVBQ2xCem1CLFFBQVN5bUIsRUFDVEcsZUFBZ0JILEVBQ2hCNUIsZ0JBQWlCNEIsRUFDakJ4RCxjQUFld0QsRUFDZi9LLFFBQVMrSyxFQUNUM0osYUFBYzJKLEVBQ2R4SixlQUFnQndKLEVBQ2hCdkosZUFBZ0J1SixFQUNoQjFCLGlCQUFrQjBCLEVBQ2xCM0IsbUJBQW9CMkIsRUFDcEJJLFdBQVlKLEVBQ1p0SixpQkFBa0JzSixFQUNsQnJKLGNBQWVxSixFQUNmSyxlQUFnQkwsRUFDaEJNLFVBQVdOLEVBQ1hPLFVBQVdQLEVBQ1hRLFdBQVlSLEVBQ1p2RCxZQUFhdUQsRUFDYlMsV0FBWVQsRUFDWlUsaUJBQWtCVixFQUNsQnBKLGVBQWdCcUosRUFDaEI5SyxRQUFTLENBQUNweEcsRUFBR0MsSUFBTTg3RyxFQUFvQkwsR0FBZ0IxN0csR0FBSTA3RyxHQUFnQno3RyxJQUFJLElBU2pGLE9BTkFpdEcsR0FBTW5yRyxRQUFRakQsT0FBT1csS0FBS1gsT0FBT3NGLE9BQU8sQ0FBQyxFQUFHdzNHLEVBQVNDLEtBQVcsU0FBNEI5b0UsR0FDMUYsTUFBTXkzRCxFQUFRMlIsRUFBU3BwRSxJQUFTZ3BFLEVBQzFCYSxFQUFjcFMsRUFBTW9SLEVBQVE3b0UsR0FBTzhvRSxFQUFROW9FLEdBQU9BLEdBQ3ZEbTZELEdBQU0xRixZQUFZb1YsSUFBZ0JwUyxJQUFVMFIsSUFBcUJ6OUMsRUFBTzFyQixHQUFRNnBFLEVBQ25GLElBRU9uK0MsQ0FDVCxDQ3pHTyxNQ0tEbytDLEdBQWEsQ0FBQyxFQUdwQixDQUFDLFNBQVUsVUFBVyxTQUFVLFdBQVksU0FBVSxVQUFVOTZHLFNBQVEsQ0FBQ2pFLEVBQU0vQixLQUM3RThnSCxHQUFXLytHLEdBQVEsU0FBbUJ1cEcsR0FDcEMsY0FBY0EsSUFBVXZwRyxHQUFRLEtBQU8vQixFQUFJLEVBQUksS0FBTyxLQUFPK0IsQ0FDL0QsQ0FBQyxJQUdILE1BQU1nL0csR0FBcUIsQ0FBQyxFQVc1QkQsR0FBVzVMLGFBQWUsU0FBc0I4TCxFQUFXNzBFLEVBQVNoTyxHQUNsRSxTQUFTOGlGLEVBQWNDLEVBQUtDLEdBQzFCLE1BQU8sdUNBQW9ERCxFQUFNLElBQU9DLEdBQVFoakYsRUFBVSxLQUFPQSxFQUFVLEdBQzdHLENBR0EsTUFBTyxDQUFDNy9CLEVBQU80aUgsRUFBS0UsS0FDbEIsSUFBa0IsSUFBZEosRUFDRixNQUFNLElBQUksR0FDUkMsRUFBY0MsRUFBSyxxQkFBdUIvMEUsRUFBVSxPQUFTQSxFQUFVLEtBQ3ZFLEdBQVdrMUUsZ0JBZWYsT0FYSWwxRSxJQUFZNDBFLEdBQW1CRyxLQUNqQ0gsR0FBbUJHLElBQU8sRUFFMUIzaUYsUUFBUWtaLEtBQ053cEUsRUFDRUMsRUFDQSwrQkFBaUMvMEUsRUFBVSw4Q0FLMUM2MEUsR0FBWUEsRUFBVTFpSCxFQUFPNGlILEVBQUtFLEVBQVksQ0FFekQsRUFtQ0EsVUFDRUUsY0F4QkYsU0FBdUJ6MUcsRUFBUzAxRyxFQUFRQyxHQUN0QyxHQUF1QixpQkFBWjMxRyxFQUNULE1BQU0sSUFBSSxHQUFXLDRCQUE2QixHQUFXNDFHLHNCQUUvRCxNQUFNLzlHLEVBQU9YLE9BQU9XLEtBQUttSSxHQUN6QixJQUFJN0wsRUFBSTBELEVBQUs1RyxPQUNiLEtBQU9rRCxLQUFNLEdBQUcsQ0FDZCxNQUFNa2hILEVBQU14OUcsRUFBSzFELEdBQ1hnaEgsRUFBWU8sRUFBT0wsR0FDekIsR0FBSUYsRUFBSixDQUNFLE1BQU0xaUgsRUFBUXVOLEVBQVFxMUcsR0FDaEIzakgsT0FBbUIrQyxJQUFWaEMsR0FBdUIwaUgsRUFBVTFpSCxFQUFPNGlILEVBQUtyMUcsR0FDNUQsSUFBZSxJQUFYdE8sRUFDRixNQUFNLElBQUksR0FBVyxVQUFZMmpILEVBQU0sWUFBYzNqSCxFQUFRLEdBQVdra0gscUJBRzVFLE1BQ0EsSUFBcUIsSUFBakJELEVBQ0YsTUFBTSxJQUFJLEdBQVcsa0JBQW9CTixFQUFLLEdBQVdRLGVBRTdELENBQ0YsRUFJRVosZUM5RUksR0FBYUUsR0FBVUYsV0FTN0IsTUFBTWEsR0FDSixXQUFBMzNHLENBQVk0M0csR0FDVmxqSCxLQUFLdTJHLFNBQVcyTSxFQUNoQmxqSCxLQUFLbWpILGFBQWUsQ0FDbEI3USxRQUFTLElBQUksR0FDYkMsU0FBVSxJQUFJLEdBRWxCLENBVUEsT0FBQUQsQ0FBUThRLEVBQWFwL0MsR0FHUSxpQkFBaEJvL0MsR0FDVHAvQyxFQUFTQSxHQUFVLENBQUMsR0FDYjErQyxJQUFNODlGLEVBRWJwL0MsRUFBU28vQyxHQUFlLENBQUMsRUFHM0JwL0MsRUFBU2s5QyxHQUFZbGhILEtBQUt1MkcsU0FBVXZ5QyxHQUVwQyxNQUFNLGFBQUN3eUMsRUFBWSxpQkFBRXFJLEVBQWdCLFFBQUVsSSxHQUFXM3lDLE9BRTdCcGlFLElBQWpCNDBHLEdBQ0Y4TCxHQUFVTSxjQUFjcE0sRUFBYyxDQUNwQ2xCLGtCQUFtQixHQUFXa0IsYUFBYSxHQUFXNk0sU0FDdEQ5TixrQkFBbUIsR0FBV2lCLGFBQWEsR0FBVzZNLFNBQ3REN04sb0JBQXFCLEdBQVdnQixhQUFhLEdBQVc2TSxXQUN2RCxHQUdtQixNQUFwQnhFLElBQ0VwTSxHQUFNeEYsV0FBVzRSLEdBQ25CNzZDLEVBQU82NkMsaUJBQW1CLENBQ3hCaEssVUFBV2dLLEdBR2J5RCxHQUFVTSxjQUFjL0QsRUFBa0IsQ0FDeEN4SyxPQUFRLEdBQVdpUCxTQUNuQnpPLFVBQVcsR0FBV3lPLFdBQ3JCLElBS1B0L0MsRUFBT3MwQyxRQUFVdDBDLEVBQU9zMEMsUUFBVXQ0RyxLQUFLdTJHLFNBQVMrQixRQUFVLE9BQU8vd0csY0FHakUsSUFBSWc4RyxFQUFpQjVNLEdBQVdsRSxHQUFNMUMsTUFDcEM0RyxFQUFRMEIsT0FDUjFCLEVBQVEzeUMsRUFBT3MwQyxTQUdqQjNCLEdBQVdsRSxHQUFNbnJHLFFBQ2YsQ0FBQyxTQUFVLE1BQU8sT0FBUSxPQUFRLE1BQU8sUUFBUyxXQUNqRGd4RyxXQUNRM0IsRUFBUTJCLEVBQU8sSUFJMUJ0MEMsRUFBTzJ5QyxRQUFVLEdBQWFqNEcsT0FBTzZrSCxFQUFnQjVNLEdBR3JELE1BQU02TSxFQUEwQixHQUNoQyxJQUFJQyxHQUFpQyxFQUNyQ3pqSCxLQUFLbWpILGFBQWE3USxRQUFRaHJHLFNBQVEsU0FBb0NvOEcsR0FDakMsbUJBQXhCQSxFQUFZdE8sVUFBMEQsSUFBaENzTyxFQUFZdE8sUUFBUXB4QyxLQUlyRXkvQyxFQUFpQ0EsR0FBa0NDLEVBQVl2TyxZQUUvRXFPLEVBQXdCOTFGLFFBQVFnMkYsRUFBWXpPLFVBQVd5TyxFQUFZeE8sVUFDckUsSUFFQSxNQUFNeU8sRUFBMkIsR0FLakMsSUFBSUMsRUFKSjVqSCxLQUFLbWpILGFBQWE1USxTQUFTanJHLFNBQVEsU0FBa0NvOEcsR0FDbkVDLEVBQXlCampILEtBQUtnakgsRUFBWXpPLFVBQVd5TyxFQUFZeE8sU0FDbkUsSUFHQSxJQUNJdEgsRUFEQXRzRyxFQUFJLEVBR1IsSUFBS21pSCxFQUFnQyxDQUNuQyxNQUFNSSxFQUFRLENBQUM3QyxHQUFnQjUwRixLQUFLcHNCLFdBQU80QixHQU8zQyxJQU5BaWlILEVBQU1uMkYsUUFBUWp2QixNQUFNb2xILEVBQU9MLEdBQzNCSyxFQUFNbmpILEtBQUtqQyxNQUFNb2xILEVBQU9GLEdBQ3hCL1YsRUFBTWlXLEVBQU16bEgsT0FFWndsSCxFQUFVbjFGLFFBQVFHLFFBQVFvMUMsR0FFbkIxaUUsRUFBSXNzRyxHQUNUZ1csRUFBVUEsRUFBUS8wRixLQUFLZzFGLEVBQU12aUgsS0FBTXVpSCxFQUFNdmlILE1BRzNDLE9BQU9zaUgsQ0FDVCxDQUVBaFcsRUFBTTRWLEVBQXdCcGxILE9BRTlCLElBQUkwbEgsRUFBWTkvQyxFQUloQixJQUZBMWlFLEVBQUksRUFFR0EsRUFBSXNzRyxHQUFLLENBQ2QsTUFBTW1XLEVBQWNQLEVBQXdCbGlILEtBQ3RDMGlILEVBQWFSLEVBQXdCbGlILEtBQzNDLElBQ0V3aUgsRUFBWUMsRUFBWUQsRUFDMUIsQ0FBRSxNQUFPaGtGLEdBQ1Bra0YsRUFBV3hsSCxLQUFLd0IsS0FBTTgvQixHQUN0QixLQUNGLENBQ0YsQ0FFQSxJQUNFOGpGLEVBQVU1QyxHQUFnQnhpSCxLQUFLd0IsS0FBTThqSCxFQUN2QyxDQUFFLE1BQU9oa0YsR0FDUCxPQUFPclIsUUFBUWd2RCxPQUFPMzlDLEVBQ3hCLENBS0EsSUFIQXgrQixFQUFJLEVBQ0pzc0csRUFBTStWLEVBQXlCdmxILE9BRXhCa0QsRUFBSXNzRyxHQUNUZ1csRUFBVUEsRUFBUS8wRixLQUFLODBGLEVBQXlCcmlILEtBQU1xaUgsRUFBeUJyaUgsTUFHakYsT0FBT3NpSCxDQUNULENBRUEsTUFBQUssQ0FBT2pnRCxHQUdMLE9BQU8yd0MsR0FEVWtILElBRGpCNzNDLEVBQVNrOUMsR0FBWWxoSCxLQUFLdTJHLFNBQVV2eUMsSUFDRTgzQyxRQUFTOTNDLEVBQU8xK0MsS0FDNUIwK0MsRUFBTzdtQixPQUFRNm1CLEVBQU82NkMsaUJBQ2xELEVBSUZwTSxHQUFNbnJHLFFBQVEsQ0FBQyxTQUFVLE1BQU8sT0FBUSxZQUFZLFNBQTZCZ3hHLEdBRS9FMkssR0FBTTEvRyxVQUFVKzBHLEdBQVUsU0FBU2h6RixFQUFLMCtDLEdBQ3RDLE9BQU9oa0UsS0FBS3N5RyxRQUFRNE8sR0FBWWw5QyxHQUFVLENBQUMsRUFBRyxDQUM1Q3MwQyxTQUNBaHpGLE1BQ0EvaUIsTUFBT3loRSxHQUFVLENBQUMsR0FBR3poRSxPQUV6QixDQUNGLElBRUFrd0csR0FBTW5yRyxRQUFRLENBQUMsT0FBUSxNQUFPLFVBQVUsU0FBK0JneEcsR0FHckUsU0FBUzRMLEVBQW1CQyxHQUMxQixPQUFPLFNBQW9CNytGLEVBQUsvaUIsRUFBTXloRSxHQUNwQyxPQUFPaGtFLEtBQUtzeUcsUUFBUTRPLEdBQVlsOUMsR0FBVSxDQUFDLEVBQUcsQ0FDNUNzMEMsU0FDQTNCLFFBQVN3TixFQUFTLENBQ2hCLGVBQWdCLHVCQUNkLENBQUMsRUFDTDcrRixNQUNBL2lCLFNBRUosQ0FDRixDQUVBMGdILEdBQU0xL0csVUFBVSswRyxHQUFVNEwsSUFFMUJqQixHQUFNMS9HLFVBQVUrMEcsRUFBUyxRQUFVNEwsR0FBbUIsRUFDeEQsSUFFQSxZQzdMQSxNQUFNRSxHQUNKLFdBQUE5NEcsQ0FBWSs0RyxHQUNWLEdBQXdCLG1CQUFiQSxFQUNULE1BQU0sSUFBSTdRLFVBQVUsZ0NBR3RCLElBQUk4USxFQUVKdGtILEtBQUs0akgsUUFBVSxJQUFJbjFGLFNBQVEsU0FBeUJHLEdBQ2xEMDFGLEVBQWlCMTFGLENBQ25CLElBRUEsTUFBTW1yQyxFQUFRLzVELEtBR2RBLEtBQUs0akgsUUFBUS8wRixNQUFLNDJDLElBQ2hCLElBQUsxTCxFQUFNd3FELFdBQVksT0FFdkIsSUFBSWpqSCxFQUFJeTRELEVBQU13cUQsV0FBV25tSCxPQUV6QixLQUFPa0QsS0FBTSxHQUNYeTRELEVBQU13cUQsV0FBV2pqSCxHQUFHbWtFLEdBRXRCMUwsRUFBTXdxRCxXQUFhLElBQUksSUFJekJ2a0gsS0FBSzRqSCxRQUFRLzBGLEtBQU8yMUYsSUFDbEIsSUFBSUMsRUFFSixNQUFNYixFQUFVLElBQUluMUYsU0FBUUcsSUFDMUJtckMsRUFBTSt1QixVQUFVbDZELEdBQ2hCNjFGLEVBQVc3MUYsQ0FBTyxJQUNqQkMsS0FBSzIxRixHQU1SLE9BSkFaLEVBQVFuK0MsT0FBUyxXQUNmMUwsRUFBTXlwQixZQUFZaWhDLEVBQ3BCLEVBRU9iLENBQU8sRUFHaEJTLEdBQVMsU0FBZ0I1a0YsRUFBU3VrQyxFQUFRc3VDLEdBQ3BDdjRDLEVBQU15bUQsU0FLVnptRCxFQUFNeW1ELE9BQVMsSUFBSSxHQUFjL2dGLEVBQVN1a0MsRUFBUXN1QyxHQUNsRGdTLEVBQWV2cUQsRUFBTXltRCxRQUN2QixHQUNGLENBS0EsZ0JBQUFPLEdBQ0UsR0FBSS9nSCxLQUFLd2dILE9BQ1AsTUFBTXhnSCxLQUFLd2dILE1BRWYsQ0FNQSxTQUFBMTNCLENBQVVuOUQsR0FDSjNyQixLQUFLd2dILE9BQ1A3MEYsRUFBUzNyQixLQUFLd2dILFFBSVp4Z0gsS0FBS3VrSCxXQUNQdmtILEtBQUt1a0gsV0FBVzdqSCxLQUFLaXJCLEdBRXJCM3JCLEtBQUt1a0gsV0FBYSxDQUFDNTRGLEVBRXZCLENBTUEsV0FBQTYzRCxDQUFZNzNELEdBQ1YsSUFBSzNyQixLQUFLdWtILFdBQ1IsT0FFRixNQUFNaHNGLEVBQVF2NEIsS0FBS3VrSCxXQUFXenlHLFFBQVE2WixJQUN2QixJQUFYNE0sR0FDRnY0QixLQUFLdWtILFdBQVd2M0UsT0FBT3pVLEVBQU8sRUFFbEMsQ0FNQSxhQUFPdmxCLEdBQ0wsSUFBSXl5RCxFQUlKLE1BQU8sQ0FDTDFMLE1BSlksSUFBSXFxRCxJQUFZLFNBQWtCMytHLEdBQzlDZ2dFLEVBQVNoZ0UsQ0FDWCxJQUdFZ2dFLFNBRUosRUFHRixZQ3hITWkvQyxHQUFpQixDQUNyQkMsU0FBVSxJQUNWQyxtQkFBb0IsSUFDcEJDLFdBQVksSUFDWkMsV0FBWSxJQUNaLzZFLEdBQUksSUFDSmc3RSxRQUFTLElBQ1RDLFNBQVUsSUFDVkMsNEJBQTZCLElBQzdCQyxVQUFXLElBQ1hDLGFBQWMsSUFDZEMsZUFBZ0IsSUFDaEJDLFlBQWEsSUFDYkMsZ0JBQWlCLElBQ2pCQyxPQUFRLElBQ1JDLGdCQUFpQixJQUNqQkMsaUJBQWtCLElBQ2xCQyxNQUFPLElBQ1BDLFNBQVUsSUFDVkMsWUFBYSxJQUNiQyxTQUFVLElBQ1ZDLE9BQVEsSUFDUkMsa0JBQW1CLElBQ25CQyxrQkFBbUIsSUFDbkJDLFdBQVksSUFDWkMsYUFBYyxJQUNkQyxnQkFBaUIsSUFDakJDLFVBQVcsSUFDWEMsU0FBVSxJQUNWQyxpQkFBa0IsSUFDbEJDLGNBQWUsSUFDZkMsNEJBQTZCLElBQzdCQyxlQUFnQixJQUNoQkMsU0FBVSxJQUNWQyxLQUFNLElBQ05DLGVBQWdCLElBQ2hCQyxtQkFBb0IsSUFDcEJDLGdCQUFpQixJQUNqQkMsV0FBWSxJQUNaQyxxQkFBc0IsSUFDdEJDLG9CQUFxQixJQUNyQkMsa0JBQW1CLElBQ25CQyxVQUFXLElBQ1hDLG1CQUFvQixJQUNwQkMsb0JBQXFCLElBQ3JCQyxPQUFRLElBQ1JDLGlCQUFrQixJQUNsQkMsU0FBVSxJQUNWQyxnQkFBaUIsSUFDakJDLHFCQUFzQixJQUN0QkMsZ0JBQWlCLElBQ2pCQyw0QkFBNkIsSUFDN0JDLDJCQUE0QixJQUM1QkMsb0JBQXFCLElBQ3JCQyxlQUFnQixJQUNoQkMsV0FBWSxJQUNaQyxtQkFBb0IsSUFDcEJDLGVBQWdCLElBQ2hCQyx3QkFBeUIsSUFDekJDLHNCQUF1QixJQUN2QkMsb0JBQXFCLElBQ3JCQyxhQUFjLElBQ2RDLFlBQWEsSUFDYkMsOEJBQStCLEtBR2pDbmtILE9BQU95bEUsUUFBUTQ2QyxJQUFnQnA5RyxTQUFRLEVBQUUzSCxFQUFLQyxNQUM1QzhrSCxHQUFlOWtILEdBQVNELENBQUcsSUFHN0IsWUN4Qk04b0gsR0FuQk4sU0FBU0MsRUFBZUMsR0FDdEIsTUFBTXIwRixFQUFVLElBQUksR0FBTXEwRixHQUNwQmo5RixFQUFXVSxHQUFLLEdBQU03b0IsVUFBVSt1RyxRQUFTaCtFLEdBYS9DLE9BVkFtK0UsR0FBTTdwRixPQUFPOEMsRUFBVSxHQUFNbm9CLFVBQVcrd0IsRUFBUyxDQUFDcTVFLFlBQVksSUFHOUQ4RSxHQUFNN3BGLE9BQU84QyxFQUFVNEksRUFBUyxLQUFNLENBQUNxNUUsWUFBWSxJQUduRGppRixFQUFTc1IsT0FBUyxTQUFnQmttRixHQUNoQyxPQUFPd0YsRUFBZXhILEdBQVl5SCxFQUFlekYsR0FDbkQsRUFFT3gzRixDQUNULENBR2NnOUYsQ0FBZSxJQUc3QkQsR0FBTXhGLE1BQVEsR0FHZHdGLEdBQU1wTixjQUFnQixHQUN0Qm9OLEdBQU1yRSxZQUFjLEdBQ3BCcUUsR0FBTXROLFNBQVdBLEdBQ2pCc04sR0FBTUcsUUx2RGlCLFFLd0R2QkgsR0FBTUksV0FBYSxHQUduQkosR0FBTXBXLFdBQWEsR0FHbkJvVyxHQUFNSyxPQUFTTCxHQUFNcE4sY0FHckJvTixHQUFNeitDLElBQU0sU0FBYSsrQyxHQUN2QixPQUFPdDZGLFFBQVF1N0MsSUFBSSsrQyxFQUNyQixFQUVBTixHQUFNTyxPQzlDUyxTQUFnQnB6RixHQUM3QixPQUFPLFNBQWNzZ0QsR0FDbkIsT0FBT3RnRCxFQUFTbjNCLE1BQU0sS0FBTXkzRSxFQUM5QixDQUNGLEVENkNBdXlDLEdBQU1RLGFFN0RTLFNBQXNCdHpGLEdBQ25DLE9BQU84OEUsR0FBTXRGLFNBQVN4M0UsS0FBc0MsSUFBekJBLEVBQVFzekYsWUFDN0MsRUY4REFSLEdBQU12SCxZQUFjQSxHQUVwQnVILEdBQU0zUCxhQUFlLEdBRXJCMlAsR0FBTVMsV0FBYXRjLEdBQVMsR0FBZTZGLEdBQU1uRSxXQUFXMUIsR0FBUyxJQUFJMkMsU0FBUzNDLEdBQVNBLEdBRTNGNmIsR0FBTVUsV0FBYXpJLEdBRW5CK0gsR0FBTS9ELGVBQWlCLEdBRXZCK0QsR0FBTXIyRSxRQUFVcTJFLEdBR2hCLFlHbEZBLEdBSnNCNW9ILEVBQUFBLGNBQW9CLENBQ3RDdXBILGtCQUFtQixHQUNuQkMsa0JBQW1CLFdBQU8sSUM2RTlCLEdBdEVrQixTQUFDanBILEdBU2YsT0FDSVAsRUFBQUEsY0FBQUEsRUFBQUEsU0FBQSxLQUtJQSxFQUFBQSxjQUFBLFVBQ0dBLEVBQUFBLGNBQUEsVUFBSSxRQUNIQSxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsV0FBV00sRUFBTWtwSCxRQUFRanBILE9BRXZDUixFQUFBQSxjQUFBLFVBQ0lBLEVBQUFBLGNBQUEsVUFBSSxnQkFDSkEsRUFBQUEsY0FBQSxNQUFJQyxVQUFVLFdBQVdNLEVBQU1rcEgsUUFBUUMsZUFBZSxPQUUxRDFwSCxFQUFBQSxjQUFBLFVBQ0lBLEVBQUFBLGNBQUEsVUFBSSxPQUNSQSxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsV0FBV00sRUFBTWtwSCxRQUFRRSxZQUFZLE9BRXBEM3BILEVBQUFBLGNBQUEsVUFDQUEsRUFBQUEsY0FBQSxVQUFJLFdBQ0hBLEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxXQUFXTSxFQUFNa3BILFFBQVFHLFVBQVUsT0FFakQ1cEgsRUFBQUEsY0FBQSxVQUNJQSxFQUFBQSxjQUFBLFVBQUksaUJBQ1JBLEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxXQUFXTSxFQUFNa3BILFFBQVFJLHNCQUFzQixPQUU3RDdwSCxFQUFBQSxjQUFBLFVBQ0lBLEVBQUFBLGNBQUEsVUFBSSxVQUNSQSxFQUFBQSxjQUFBLFVBQUtPLEVBQU1rcEgsUUFBUUssVUFBVSxRQUU3QjlwSCxFQUFBQSxjQUFBLFVBQ0lBLEVBQUFBLGNBQUEsVUFBSSxhQUNSQSxFQUFBQSxjQUFBLFVBQUtPLEVBQU1rcEgsUUFBUU0sYUFBYSxRQUVoQy9wSCxFQUFBQSxjQUFBLFVBQ0lBLEVBQUFBLGNBQUEsVUFBSSxTQUNSQSxFQUFBQSxjQUFBLE1BQUlDLFVBQVUsV0FBV00sRUFBTWtwSCxRQUFRTyxRQUFRLE9BRS9DaHFILEVBQUFBLGNBQUEsVUFDSUEsRUFBQUEsY0FBQSxVQUFJLFNBQ1JBLEVBQUFBLGNBQUEsVUFBS08sRUFBTWtwSCxRQUFRUSxRQUFRLE9BRTNCanFILEVBQUFBLGNBQUEsVUFDSUEsRUFBQUEsY0FBQSxVQUFJLGVBQ1JBLEVBQUFBLGNBQUEsVUFBS08sRUFBTWtwSCxRQUFRUyxlQUFlLFFBRWxDbHFILEVBQUFBLGNBQUEsVUFDSUEsRUFBQUEsY0FBQSxVQUFJLFlBQ1JBLEVBQUFBLGNBQUEsTUFBSUMsVUFBVSxXQUFXTSxFQUFNa3BILFFBQVFVLFdBWXZELEVDaEZlLFNBQVMsR0FBOEJoM0csRUFBUTR5QyxHQUM1RCxHQUFjLE1BQVY1eUMsRUFBZ0IsTUFBTyxDQUFDLEVBQzVCLElBRUlyVCxFQUFLMkIsRUFGTGhCLEVBQVMsQ0FBQyxFQUNWdWxELEVBQWF4aEQsT0FBT1csS0FBS2dPLEdBRTdCLElBQUsxUixFQUFJLEVBQUdBLEVBQUl1a0QsRUFBV3puRCxPQUFRa0QsSUFDakMzQixFQUFNa21ELEVBQVd2a0QsR0FDYnNrRCxFQUFTOXpDLFFBQVFuUyxJQUFRLElBQzdCVyxFQUFPWCxHQUFPcVQsRUFBT3JULElBRXZCLE9BQU9XLENBQ1QsQ0NYZSxTQUFTLEtBWXRCLE9BWEEsR0FBVytELE9BQU9zRixPQUFTdEYsT0FBT3NGLE9BQU95aUIsT0FBUyxTQUFVOXJCLEdBQzFELElBQUssSUFBSWdCLEVBQUksRUFBR0EsRUFBSW5ELFVBQVVDLE9BQVFrRCxJQUFLLENBQ3pDLElBQUkwUixFQUFTN1UsVUFBVW1ELEdBQ3ZCLElBQUssSUFBSTNCLEtBQU9xVCxFQUNWM08sT0FBT2QsVUFBVThDLGVBQWU3SCxLQUFLd1UsRUFBUXJULEtBQy9DVyxFQUFPWCxHQUFPcVQsRUFBT3JULEdBRzNCLENBQ0EsT0FBT1csQ0FDVCxFQUNPLEdBQVM3QixNQUFNdUIsS0FBTTdCLFVBQzlCLENDYkEsU0FBU2c0QixHQUFFMzJCLEdBQUcsSUFBSWd0QixFQUFFN2xCLEVBQUU0bEIsRUFBRSxHQUFHLEdBQUcsaUJBQWlCL3NCLEdBQUcsaUJBQWlCQSxFQUFFK3NCLEdBQUcvc0IsT0FBTyxHQUFHLGlCQUFpQkEsRUFBRSxHQUFHbEIsTUFBTTJPLFFBQVF6TixHQUFHLENBQUMsSUFBSTY0QyxFQUFFNzRDLEVBQUVwQixPQUFPLElBQUlvdUIsRUFBRSxFQUFFQSxFQUFFNnJCLEVBQUU3ckIsSUFBSWh0QixFQUFFZ3RCLEtBQUs3bEIsRUFBRXd2QixHQUFFMzJCLEVBQUVndEIsT0FBT0QsSUFBSUEsR0FBRyxLQUFLQSxHQUFHNWxCLEVBQUUsTUFBTSxJQUFJQSxLQUFLbkgsRUFBRUEsRUFBRW1ILEtBQUs0bEIsSUFBSUEsR0FBRyxLQUFLQSxHQUFHNWxCLEdBQUcsT0FBTzRsQixDQUFDLENBQWdJLFNBQXhILFdBQWdCLElBQUksSUFBSS9zQixFQUFFZ3RCLEVBQUU3bEIsRUFBRSxFQUFFNGxCLEVBQUUsR0FBRzhyQixFQUFFbDZDLFVBQVVDLE9BQU91SSxFQUFFMHhDLEVBQUUxeEMsS0FBS25ILEVBQUVyQixVQUFVd0ksTUFBTTZsQixFQUFFMkosR0FBRTMyQixNQUFNK3NCLElBQUlBLEdBQUcsS0FBS0EsR0FBR0MsR0FBRyxPQUFPRCxDQUFDLEVDQWhXLFNBQVMwOUYsR0FBZUMsRUFBT0MsRUFBaUIxVSxPQUFVN3pHLEdBQ3ZFLE1BQU04eEUsRUFBUyxDQUFDLEVBa0JoQixPQWpCQXJ2RSxPQUFPVyxLQUFLa2xILEdBQU81aUgsU0FHbkJtdEQsSUFDRWlmLEVBQU9qZixHQUFReTFELEVBQU16MUQsR0FBTTVYLFFBQU8sQ0FBQ3NwQixFQUFLeG1FLEtBQ3RDLEdBQUlBLEVBQUssQ0FDUCxNQUFNeXFILEVBQWVELEVBQWdCeHFILEdBQ2hCLEtBQWpCeXFILEdBQ0Zqa0QsRUFBSXpsRSxLQUFLMHBILEdBRVAzVSxHQUFXQSxFQUFROTFHLElBQ3JCd21FLEVBQUl6bEUsS0FBSyswRyxFQUFROTFHLEdBRXJCLENBQ0EsT0FBT3dtRSxDQUFHLEdBQ1QsSUFBSTlrRSxLQUFLLElBQUksSUFFWHF5RSxDQUNULENDZmUsU0FBUzIyQyxHQUFzQnJvRyxHQUs1QyxJQUFJc0QsRUFBTSwwQ0FBNEN0RCxFQUN0RCxJQUFLLElBQUkxZ0IsRUFBSSxFQUFHQSxFQUFJbkQsVUFBVUMsT0FBUWtELEdBQUssRUFHekNna0IsR0FBTyxXQUFhbGpCLG1CQUFtQmpFLFVBQVVtRCxJQUVuRCxNQUFPLHVCQUF5QjBnQixFQUFPLFdBQWFzRCxFQUFNLHdCQUU1RCxDQ2ZBLFNBSEEsU0FBZStuRixFQUFLNWtGLEVBQU1tckMsT0FBTzAyRCxpQkFBa0Jqd0QsRUFBTXpHLE9BQU8yMkQsa0JBQzlELE9BQU8xeUcsS0FBS3dpRCxJQUFJNXhDLEVBQUs1USxLQUFLNFEsSUFBSTRrRixFQUFLaHpDLEdBQ3JDLEVDUUEsU0FBU213RCxHQUFhNXFILEVBQU82b0IsRUFBTSxFQUFHNHhDLEVBQU0sR0FNMUMsT0FBTyxHQUFNejZELEVBQU82b0IsRUFBSzR4QyxFQUMzQixDQThCTyxTQUFTb3dELEdBQWUvbEcsR0FFN0IsR0FBSUEsRUFBTXJoQixLQUNSLE9BQU9xaEIsRUFFVCxHQUF3QixNQUFwQkEsRUFBTTFTLE9BQU8sR0FDZixPQUFPeTRHLEdBN0JKLFNBQWtCL2xHLEdBQ3ZCQSxFQUFRQSxFQUFNamxCLE1BQU0sR0FDcEIsTUFBTXNtQixFQUFLLElBQUk2M0IsT0FBTyxPQUFPbDVCLEVBQU10bUIsUUFBVSxFQUFJLEVBQUksS0FBTSxLQUMzRCxJQUFJc3NILEVBQVNobUcsRUFBTTFhLE1BQU0rYixHQUl6QixPQUhJMmtHLEdBQStCLElBQXJCQSxFQUFPLEdBQUd0c0gsU0FDdEJzc0gsRUFBU0EsRUFBT3pwSCxLQUFJc3JCLEdBQUtBLEVBQUlBLEtBRXhCbStGLEVBQVMsTUFBd0IsSUFBbEJBLEVBQU90c0gsT0FBZSxJQUFNLE1BQU1zc0gsRUFBT3pwSCxLQUFJLENBQUNzckIsRUFBR2dNLElBQzlEQSxFQUFRLEVBQUlpNUMsU0FBU2psRCxFQUFHLElBQU0xVSxLQUFLNmlELE1BQU04VyxTQUFTamxELEVBQUcsSUFBTSxJQUFNLEtBQVEsTUFDL0VsckIsS0FBSyxTQUFXLEVBQ3JCLENBbUIwQnNwSCxDQUFTam1HLElBRWpDLE1BQU1rbUcsRUFBU2xtRyxFQUFNNVMsUUFBUSxLQUN2QnpPLEVBQU9xaEIsRUFBTXpTLFVBQVUsRUFBRzI0RyxHQUNoQyxJQUErRCxJQUEzRCxDQUFDLE1BQU8sT0FBUSxNQUFPLE9BQVEsU0FBUzk0RyxRQUFRek8sR0FDbEQsTUFBTSxJQUFJd0csTUFDZ0YsR0FBdUIsRUFBRzZhLElBRXRILElBQ0ltbUcsRUFEQXhvRCxFQUFTMzlDLEVBQU16UyxVQUFVMjRHLEVBQVMsRUFBR2xtRyxFQUFNdG1CLE9BQVMsR0FFeEQsR0FBYSxVQUFUaUYsR0FNRixHQUxBZy9ELEVBQVNBLEVBQU9oN0QsTUFBTSxLQUN0QndqSCxFQUFheG9ELEVBQU9obkQsUUFDRSxJQUFsQmduRCxFQUFPamtFLFFBQXdDLE1BQXhCaWtFLEVBQU8sR0FBR3J3RCxPQUFPLEtBQzFDcXdELEVBQU8sR0FBS0EsRUFBTyxHQUFHNWlFLE1BQU0sS0FFNkQsSUFBdkYsQ0FBQyxPQUFRLGFBQWMsVUFBVyxlQUFnQixZQUFZcVMsUUFBUSs0RyxHQUN4RSxNQUFNLElBQUloaEgsTUFDZ0YsR0FBdUIsR0FBSWdoSCxTQUd2SHhvRCxFQUFTQSxFQUFPaDdELE1BQU0sS0FHeEIsT0FEQWc3RCxFQUFTQSxFQUFPcGhFLEtBQUlyQixHQUFTMDZELFdBQVcxNkQsS0FDakMsQ0FDTHlELE9BQ0FnL0QsU0FDQXdvRCxhQUVKLENBOEJPLFNBQVNDLEdBQWVwbUcsR0FDN0IsTUFBTSxLQUNKcmhCLEVBQUksV0FDSnduSCxHQUNFbm1HLEVBQ0osSUFBSSxPQUNGMjlDLEdBQ0UzOUMsRUFhSixPQVo2QixJQUF6QnJoQixFQUFLeU8sUUFBUSxPQUVmdXdELEVBQVNBLEVBQU9waEUsS0FBSSxDQUFDc3JCLEVBQUdqckIsSUFBTUEsRUFBSSxFQUFJa3dFLFNBQVNqbEQsRUFBRyxJQUFNQSxLQUN0QixJQUF6QmxwQixFQUFLeU8sUUFBUSxTQUN0QnV3RCxFQUFPLEdBQUssR0FBR0EsRUFBTyxNQUN0QkEsRUFBTyxHQUFLLEdBQUdBLEVBQU8sT0FHdEJBLEdBRDZCLElBQTNCaC9ELEVBQUt5TyxRQUFRLFNBQ04sR0FBRys0RyxLQUFjeG9ELEVBQU9oaEUsS0FBSyxPQUU3QixHQUFHZ2hFLEVBQU9oaEUsS0FBSyxRQUVuQixHQUFHZ0MsS0FBUWcvRCxJQUNwQixDQW9ETyxTQUFTMG9ELEdBQWFybUcsR0FFM0IsSUFBSXNtRyxFQUFxQixTQUR6QnRtRyxFQUFRK2xHLEdBQWUvbEcsSUFDUHJoQixNQUFpQyxTQUFmcWhCLEVBQU1yaEIsS0FBa0JvbkgsR0EvQnJELFNBQWtCL2xHLEdBQ3ZCQSxFQUFRK2xHLEdBQWUvbEcsR0FDdkIsTUFBTSxPQUNKMjlDLEdBQ0UzOUMsRUFDRWxhLEVBQUk2M0QsRUFBTyxHQUNYNWxCLEVBQUk0bEIsRUFBTyxHQUFLLElBQ2hCOTNELEVBQUk4M0QsRUFBTyxHQUFLLElBQ2hCOThELEVBQUlrM0MsRUFBSTVrQyxLQUFLNFEsSUFBSWxlLEVBQUcsRUFBSUEsR0FDeEI1RCxFQUFJLENBQUM0bEIsRUFBR3pxQixHQUFLeXFCLEVBQUkvaEIsRUFBSSxJQUFNLEtBQU9ELEVBQUloRixFQUFJc1MsS0FBS3dpRCxJQUFJeGlELEtBQUs0USxJQUFJM21CLEVBQUksRUFBRyxFQUFJQSxFQUFHLElBQUssR0FDckYsSUFBSXVCLEVBQU8sTUFDWCxNQUFNMm5ILEVBQU0sQ0FBQ256RyxLQUFLNmlELE1BQWEsSUFBUC96RCxFQUFFLElBQVdrUixLQUFLNmlELE1BQWEsSUFBUC96RCxFQUFFLElBQVdrUixLQUFLNmlELE1BQWEsSUFBUC96RCxFQUFFLEtBSzFFLE1BSm1CLFNBQWYrZCxFQUFNcmhCLE9BQ1JBLEdBQVEsSUFDUjJuSCxFQUFJdHFILEtBQUsyaEUsRUFBTyxLQUVYeW9ELEdBQWUsQ0FDcEJ6bkgsT0FDQWcvRCxPQUFRMm9ELEdBRVosQ0FXMkVDLENBQVN2bUcsSUFBUTI5QyxPQUFTMzlDLEVBQU0yOUMsT0FTekcsT0FSQTJvRCxFQUFNQSxFQUFJL3BILEtBQUlvc0csSUFDTyxVQUFmM29GLEVBQU1yaEIsT0FDUmdxRyxHQUFPLEtBRUZBLEdBQU8sT0FBVUEsRUFBTSxRQUFVQSxFQUFNLE1BQVMsUUFBVSxPQUk1RHo1QyxRQUFRLE1BQVNvM0QsRUFBSSxHQUFLLE1BQVNBLEVBQUksR0FBSyxNQUFTQSxFQUFJLElBQUlyM0QsUUFBUSxHQUM5RSxDQXVCTyxTQUFTLEdBQU1qdkMsRUFBTzlrQixHQVczQixPQVZBOGtCLEVBQVErbEcsR0FBZS9sRyxHQUN2QjlrQixFQUFRNHFILEdBQWE1cUgsR0FDRixRQUFmOGtCLEVBQU1yaEIsTUFBaUMsUUFBZnFoQixFQUFNcmhCLE9BQ2hDcWhCLEVBQU1yaEIsTUFBUSxLQUVHLFVBQWZxaEIsRUFBTXJoQixLQUNScWhCLEVBQU0yOUMsT0FBTyxHQUFLLElBQUl6aUUsSUFFdEI4a0IsRUFBTTI5QyxPQUFPLEdBQUt6aUUsRUFFYmtySCxHQUFlcG1HLEVBQ3hCLENDeE9BLFNBQVN3bUcsR0FBUS9qRSxHQUNmLElBQUl6YixFQUFRcm5DLE9BQU8yNEIsT0FBTyxNQUMxQixPQUFPLFNBQVVtdUYsR0FFZixZQURtQnZwSCxJQUFmOHBDLEVBQU15L0UsS0FBb0J6L0UsRUFBTXkvRSxHQUFPaGtFLEVBQUdna0UsSUFDdkN6L0UsRUFBTXkvRSxFQUNmLENBQ0YsQ0NKQSxJQUFJQyxHQUFrQixvOUhBRWxCQyxHQUE2QkgsSUFBUSxTQUFVNXlFLEdBQ2pELE9BQU84eUUsR0FBZ0JyakgsS0FBS3V3QyxJQUFnQyxNQUF2QkEsRUFBSzgzRCxXQUFXLElBRTNCLE1BQXZCOTNELEVBQUs4M0QsV0FBVyxJQUVoQjkzRCxFQUFLODNELFdBQVcsR0FBSyxFQUMxQixJQzJDSWtiLEdBQTBCLFdBRTVCLFNBQVNBLEVBQVduK0csR0FDbEIsSUFBSW5QLEVBQVFnQyxLQUVaQSxLQUFLdXJILFdBQWEsU0FBVTdnSCxHQUMxQixJQUFJOGdILEVBSUFBLEVBRnNCLElBQXRCeHRILEVBQU15dEgsS0FBS3J0SCxPQUNUSixFQUFNMHRILGVBQ0MxdEgsRUFBTTB0SCxlQUFlbmtHLFlBQ3JCdnBCLEVBQU0ydEgsUUFDTjN0SCxFQUFNNHRILFVBQVV2OUcsV0FFaEJyUSxFQUFNd3RILE9BR1J4dEgsRUFBTXl0SCxLQUFLenRILEVBQU15dEgsS0FBS3J0SCxPQUFTLEdBQUdtcEIsWUFHN0N2cEIsRUFBTTR0SCxVQUFVNWxGLGFBQWF0N0IsRUFBSzhnSCxHQUVsQ3h0SCxFQUFNeXRILEtBQUsvcUgsS0FBS2dLLEVBQ2xCLEVBRUExSyxLQUFLNnJILGNBQThCanFILElBQW5CdUwsRUFBUTIrRyxRQUErRDMrRyxFQUFRMitHLE9BQy9GOXJILEtBQUt5ckgsS0FBTyxHQUNaenJILEtBQUsrckgsSUFBTSxFQUNYL3JILEtBQUttM0MsTUFBUWhxQyxFQUFRZ3FDLE1BRXJCbjNDLEtBQUtMLElBQU13TixFQUFReE4sSUFDbkJLLEtBQUs0ckgsVUFBWXorRyxFQUFReStHLFVBQ3pCNXJILEtBQUsyckgsUUFBVXgrRyxFQUFRdytHLFFBQ3ZCM3JILEtBQUswckgsZUFBaUJ2K0csRUFBUXUrRyxlQUM5QjFySCxLQUFLd3JILE9BQVMsSUFDaEIsQ0FFQSxJQUFJUSxFQUFTVixFQUFXL25ILFVBNER4QixPQTFEQXlvSCxFQUFPdjhFLFFBQVUsU0FBaUJxcUQsR0FDaENBLEVBQU14eUYsUUFBUXRILEtBQUt1ckgsV0FDckIsRUFFQVMsRUFBT3QxRSxPQUFTLFNBQWdCdTFFLEdBSTFCanNILEtBQUsrckgsS0FBTy9ySCxLQUFLNnJILFNBQVcsS0FBUSxJQUFPLEdBQzdDN3JILEtBQUt1ckgsV0E3RFgsU0FBNEJwK0csR0FDMUIsSUFBSXpDLEVBQU14RSxTQUFTQyxjQUFjLFNBU2pDLE9BUkF1RSxFQUFJeEMsYUFBYSxlQUFnQmlGLEVBQVF4TixVQUVuQmlDLElBQWxCdUwsRUFBUWdxQyxPQUNWenNDLEVBQUl4QyxhQUFhLFFBQVNpRixFQUFRZ3FDLE9BR3BDenNDLEVBQUk2RCxZQUFZckksU0FBU3krQixlQUFlLEtBQ3hDajZCLEVBQUl4QyxhQUFhLFNBQVUsSUFDcEJ3QyxDQUNULENBa0RzQndoSCxDQUFtQmxzSCxPQUdyQyxJQUFJMEssRUFBTTFLLEtBQUt5ckgsS0FBS3pySCxLQUFLeXJILEtBQUtydEgsT0FBUyxHQWN2QyxHQUFJNEIsS0FBSzZySCxTQUFVLENBQ2pCLElBQUlNLEVBaEdWLFNBQXFCemhILEdBQ25CLEdBQUlBLEVBQUl5aEgsTUFFTixPQUFPemhILEVBQUl5aEgsTUFNYixJQUFLLElBQUk3cUgsRUFBSSxFQUFHQSxFQUFJNEUsU0FBU2ttSCxZQUFZaHVILE9BQVFrRCxJQUMvQyxHQUFJNEUsU0FBU2ttSCxZQUFZOXFILEdBQUcrcUgsWUFBYzNoSCxFQUV4QyxPQUFPeEUsU0FBU2ttSCxZQUFZOXFILEVBR2xDLENBaUZrQmdySCxDQUFZNWhILEdBRXhCLElBR0V5aEgsRUFBTUksV0FBV04sRUFBTUUsRUFBTUssU0FBU3B1SCxPQUN4QyxDQUFFLE1BQU9vQixHQUlULENBQ0YsTUFDRWtMLEVBQUk2RCxZQUFZckksU0FBU3krQixlQUFlc25GLElBRzFDanNILEtBQUsrckgsS0FDUCxFQUVBQyxFQUFPUyxNQUFRLFdBRWJ6c0gsS0FBS3lySCxLQUFLbmtILFNBQVEsU0FBVW9ELEdBQzFCLE9BQU9BLEVBQUlnSixZQUFjaEosRUFBSWdKLFdBQVdwRixZQUFZNUQsRUFDdEQsSUFDQTFLLEtBQUt5ckgsS0FBTyxHQUNaenJILEtBQUsrckgsSUFBTSxDQUtiLEVBRU9ULENBQ1QsQ0FsRzhCLEdDakRuQjc3QyxHQUFNNTNELEtBQUs0M0QsSUFNWCxHQUFPM3RELE9BQU9DLGFBTWQsR0FBUzFkLE9BQU9zRixPQWVwQixTQUFTLEdBQU0vSixHQUNyQixPQUFPQSxFQUFNbUssTUFDZCxDQWlCTyxTQUFTLEdBQVNuSyxFQUFPMDlDLEVBQVNvdkUsR0FDeEMsT0FBTzlzSCxFQUFNTixRQUFRZytDLEVBQVNvdkUsRUFDL0IsQ0FPTyxTQUFTQyxHQUFTL3NILEVBQU9zbEIsR0FDL0IsT0FBT3RsQixFQUFNa1MsUUFBUW9ULEVBQ3RCLENBT08sU0FBUyxHQUFRdGxCLEVBQU8yNEIsR0FDOUIsT0FBaUMsRUFBMUIzNEIsRUFBTXd3RyxXQUFXNzNFLEVBQ3pCLENBUU8sU0FBUyxHQUFRMzRCLEVBQU9ndEgsRUFBT3RrRyxHQUNyQyxPQUFPMW9CLEVBQU1ILE1BQU1tdEgsRUFBT3RrRyxFQUMzQixDQU1PLFNBQVMsR0FBUTFvQixHQUN2QixPQUFPQSxFQUFNeEIsTUFDZCxDQU1PLFNBQVMsR0FBUXdCLEdBQ3ZCLE9BQU9BLEVBQU14QixNQUNkLENBT08sU0FBUyxHQUFRd0IsRUFBTzhnRSxHQUM5QixPQUFPQSxFQUFNaGdFLEtBQUtkLEdBQVFBLENBQzNCLENDdkdPLElBQUk0NUcsR0FBTyxFQUNQcVQsR0FBUyxFQUNULEdBQVMsRUFDVDM0RCxHQUFXLEVBQ1g0NEQsR0FBWSxFQUNaQyxHQUFhLEdBV2pCLFNBQVMxbEcsR0FBTXpuQixFQUFPMHFFLEVBQU01UyxFQUFRcjBELEVBQU1qRCxFQUFPcU4sRUFBVXJQLEdBQ2pFLE1BQU8sQ0FBQ3dCLE1BQU9BLEVBQU8wcUUsS0FBTUEsRUFBTTVTLE9BQVFBLEVBQVFyMEQsS0FBTUEsRUFBTWpELE1BQU9BLEVBQU9xTixTQUFVQSxFQUFVK3JHLEtBQU1BLEdBQU1xVCxPQUFRQSxHQUFRenVILE9BQVFBLEVBQVFvWCxPQUFRLEdBQ3JKLENBT08sU0FBUyxHQUFNODBELEVBQU1scUUsR0FDM0IsT0FBTyxHQUFPaW5CLEdBQUssR0FBSSxLQUFNLEtBQU0sR0FBSSxLQUFNLEtBQU0sR0FBSWlqRCxFQUFNLENBQUNsc0UsUUFBU2tzRSxFQUFLbHNFLFFBQVNnQyxFQUN0RixDQVlPLFNBQVNndEUsS0FNZixPQUxBMC9DLEdBQVk1NEQsR0FBVyxFQUFJLEdBQU82NEQsS0FBYzc0RCxJQUFZLEVBRXhEMjRELEtBQXdCLEtBQWRDLEtBQ2JELEdBQVMsRUFBR3JULE1BRU5zVCxFQUNSLENBS08sU0FBU3Q0RixLQU1mLE9BTEFzNEYsR0FBWTU0RCxHQUFXLEdBQVMsR0FBTzY0RCxHQUFZNzRELE1BQWMsRUFFN0QyNEQsS0FBd0IsS0FBZEMsS0FDYkQsR0FBUyxFQUFHclQsTUFFTnNULEVBQ1IsQ0FLTyxTQUFTRSxLQUNmLE9BQU8sR0FBT0QsR0FBWTc0RCxHQUMzQixDQUtPLFNBQVMrNEQsS0FDZixPQUFPLzRELEVBQ1IsQ0FPTyxTQUFTejBELEdBQU9tdEgsRUFBT3RrRyxHQUM3QixPQUFPLEdBQU95a0csR0FBWUgsRUFBT3RrRyxFQUNsQyxDQU1PLFNBQVN5eEMsR0FBTzEyRCxHQUN0QixPQUFRQSxHQUVQLEtBQUssRUFBRyxLQUFLLEVBQUcsS0FBSyxHQUFJLEtBQUssR0FBSSxLQUFLLEdBQ3RDLE9BQU8sRUFFUixLQUFLLEdBQUksS0FBSyxHQUFJLEtBQUssR0FBSSxLQUFLLEdBQUksS0FBSyxHQUFJLEtBQUssR0FBSSxLQUFLLElBRTNELEtBQUssR0FBSSxLQUFLLElBQUssS0FBSyxJQUN2QixPQUFPLEVBRVIsS0FBSyxHQUNKLE9BQU8sRUFFUixLQUFLLEdBQUksS0FBSyxHQUFJLEtBQUssR0FBSSxLQUFLLEdBQy9CLE9BQU8sRUFFUixLQUFLLEdBQUksS0FBSyxHQUNiLE9BQU8sRUFHVCxPQUFPLENBQ1IsQ0FNTyxTQUFTNnBILEdBQU90dEgsR0FDdEIsT0FBTzQ1RyxHQUFPcVQsR0FBUyxFQUFHLEdBQVMsR0FBT0UsR0FBYW50SCxHQUFRczBELEdBQVcsRUFBRyxFQUM5RSxDQU1PLFNBQVNpNUQsR0FBU3Z0SCxHQUN4QixPQUFPbXRILEdBQWEsR0FBSW50SCxDQUN6QixDQU1PLFNBQVN3dEgsR0FBUy9wSCxHQUN4QixPQUFPLEdBQUs1RCxHQUFNeTBELEdBQVcsRUFBR3E5QyxHQUFtQixLQUFUbHVHLEVBQWNBLEVBQU8sRUFBYSxLQUFUQSxFQUFjQSxFQUFPLEVBQUlBLElBQzdGLENBY08sU0FBU2dxSCxHQUFZaHFILEdBQzNCLE1BQU95cEgsR0FBWUUsT0FDZEYsR0FBWSxJQUNmdDRGLEtBSUYsT0FBT3VsQyxHQUFNMTJELEdBQVEsR0FBSzAyRCxHQUFNK3lELElBQWEsRUFBSSxHQUFLLEdBQ3ZELENBd0JPLFNBQVNRLEdBQVUvMEYsRUFBTytaLEdBQ2hDLE9BQVNBLEdBQVM5ZCxRQUViczRGLEdBQVksSUFBTUEsR0FBWSxLQUFRQSxHQUFZLElBQU1BLEdBQVksSUFBUUEsR0FBWSxJQUFNQSxHQUFZLE1BRy9HLE9BQU9ydEgsR0FBTTg0QixFQUFPMDBGLE1BQVczNkUsRUFBUSxHQUFlLElBQVYwNkUsTUFBMEIsSUFBVng0RixNQUM3RCxDQU1PLFNBQVMrOEUsR0FBV2x1RyxHQUMxQixLQUFPbXhCLGFBQ0VzNEYsSUFFUCxLQUFLenBILEVBQ0osT0FBTzZ3RCxHQUVSLEtBQUssR0FBSSxLQUFLLEdBQ0EsS0FBVDd3RCxHQUF3QixLQUFUQSxHQUNsQmt1RyxHQUFVdWIsSUFDWCxNQUVELEtBQUssR0FDUyxLQUFUenBILEdBQ0hrdUcsR0FBVWx1RyxHQUNYLE1BRUQsS0FBSyxHQUNKbXhCLEtBSUgsT0FBTzAvQixFQUNSLENBT08sU0FBU3E1RCxHQUFXbHFILEVBQU1rMUIsR0FDaEMsS0FBTy9ELE1BRUZueEIsRUFBT3lwSCxLQUFjLEtBR2hCenBILEVBQU95cEgsS0FBYyxJQUFzQixLQUFYRSxRQUcxQyxNQUFPLEtBQU92dEgsR0FBTTg0QixFQUFPMjdCLEdBQVcsR0FBSyxJQUFNLEdBQWMsS0FBVDd3RCxFQUFjQSxFQUFPbXhCLEtBQzVFLENBTU8sU0FBUzZnQixHQUFZOWMsR0FDM0IsTUFBUXdoQyxHQUFNaXpELE9BQ2J4NEYsS0FFRCxPQUFPLzBCLEdBQU04NEIsRUFBTzI3QixHQUNyQixDQ3JQTyxJQUFJLEdBQUssT0FDTCxHQUFNLFFBQ04sR0FBUyxXQUVUczVELEdBQVUsT0FDVixHQUFVLE9BQ1YsR0FBYyxPQVVkLEdBQVksYUNSaEIsU0FBUyxHQUFXLy9HLEVBQVVtb0IsR0FJcEMsSUFIQSxJQUFJODlDLEVBQVMsR0FDVHQxRSxFQUFTLEdBQU9xUCxHQUVYbk0sRUFBSSxFQUFHQSxFQUFJbEQsRUFBUWtELElBQzNCb3lFLEdBQVU5OUMsRUFBU25vQixFQUFTbk0sR0FBSUEsRUFBR21NLEVBQVVtb0IsSUFBYSxHQUUzRCxPQUFPODlDLENBQ1IsQ0FTTyxTQUFTcHhFLEdBQVdpbkIsRUFBU2dQLEVBQU85cUIsRUFBVW1vQixHQUNwRCxPQUFRck0sRUFBUWxtQixNQUNmLElEUGlCLFNDT0wsR0FBSWttQixFQUFROWIsU0FBU3JQLE9BQVEsTUFDekMsSURsQmtCLFVDa0JMLEtBQUssR0FBYSxPQUFPbXJCLEVBQVEvVCxPQUFTK1QsRUFBUS9ULFFBQVUrVCxFQUFRM3BCLE1BQ2pGLEtBQUs0dEgsR0FBUyxNQUFPLEdBQ3JCLEtBQUssR0FBVyxPQUFPamtHLEVBQVEvVCxPQUFTK1QsRUFBUTNwQixNQUFRLElBQU0sR0FBVTJwQixFQUFROWIsU0FBVW1vQixHQUFZLElBQ3RHLEtBQUssR0FBU3JNLEVBQVEzcEIsTUFBUTJwQixFQUFRbnBCLE1BQU1pQixLQUFLLEtBR2xELE9BQU8sR0FBT29NLEVBQVcsR0FBVThiLEVBQVE5YixTQUFVbW9CLElBQWFyTSxFQUFRL1QsT0FBUytULEVBQVEzcEIsTUFBUSxJQUFNNk4sRUFBVyxJQUFNLEVBQzNILENDM0JPLFNBQVNnZ0gsR0FBUzd0SCxHQUN4QixPQUFPdXRILEdBQVE3ckUsR0FBTSxHQUFJLEtBQU0sS0FBTSxLQUFNLENBQUMsSUFBSzFoRCxFQUFRc3RILEdBQU10dEgsR0FBUSxFQUFHLENBQUMsR0FBSUEsR0FDaEYsQ0FjTyxTQUFTMGhELEdBQU8xaEQsRUFBTzBxRSxFQUFNNVMsRUFBUXUwRCxFQUFNeUIsRUFBT0MsRUFBVUMsRUFBUUMsRUFBUUMsR0FpQmxGLElBaEJBLElBQUl2MUYsRUFBUSxFQUNSalIsRUFBUyxFQUNUbHBCLEVBQVN3dkgsRUFDVEcsRUFBUyxFQUNUQyxFQUFXLEVBQ1hDLEVBQVcsRUFDWEMsRUFBVyxFQUNYQyxFQUFXLEVBQ1hDLEVBQVksRUFDWnRCLEVBQVksRUFDWnpwSCxFQUFPLEdBQ1BqRCxFQUFRc3RILEVBQ1JqZ0gsRUFBV2tnSCxFQUNYVSxFQUFZcEMsRUFDWmMsRUFBYTFwSCxFQUVWOHFILFVBQ0VGLEVBQVduQixFQUFXQSxFQUFZdDRGLE1BRXpDLEtBQUssR0FDSixHQUFnQixLQUFaeTVGLEdBQXFELElBQWxDLEdBQU9sQixFQUFZM3VILEVBQVMsR0FBVSxFQUNrQixHQUExRXV1SCxHQUFRSSxHQUFjLEdBQVFLLEdBQVFOLEdBQVksSUFBSyxPQUFRLFNBQ2xFc0IsR0FBYSxHQUNkLEtBQ0QsQ0FFRCxLQUFLLEdBQUksS0FBSyxHQUFJLEtBQUssR0FDdEJyQixHQUFjSyxHQUFRTixHQUN0QixNQUVELEtBQUssRUFBRyxLQUFLLEdBQUksS0FBSyxHQUFJLEtBQUssR0FDOUJDLEdBQWNNLEdBQVdZLEdBQ3pCLE1BRUQsS0FBSyxHQUNKbEIsR0FBY08sR0FBU0wsS0FBVSxFQUFHLEdBQ3BDLFNBRUQsS0FBSyxHQUNKLE9BQVFELE1BQ1AsS0FBSyxHQUFJLEtBQUssR0FDYixHQUFPc0IsR0FBUWYsR0FBVS80RixLQUFReTRGLE1BQVUzaUQsRUFBTTVTLEdBQVNvMkQsR0FDMUQsTUFDRCxRQUNDZixHQUFjLElBRWhCLE1BRUQsS0FBSyxJQUFNbUIsRUFDVkwsRUFBT3QxRixLQUFXLEdBQU93MEYsR0FBY3FCLEVBRXhDLEtBQUssSUFBTUYsRUFBVSxLQUFLLEdBQUksS0FBSyxFQUNsQyxPQUFRcEIsR0FFUCxLQUFLLEVBQUcsS0FBSyxJQUFLcUIsRUFBVyxFQUU3QixLQUFLLEdBQUs3bUcsR0FBMEIsR0FBZDhtRyxJQUFpQnJCLEVBQWEsR0FBUUEsRUFBWSxNQUFPLEtBQzFFaUIsRUFBVyxHQUFNLEdBQU9qQixHQUFjM3VILEdBQ3pDLEdBQU80dkgsRUFBVyxHQUFLTyxHQUFZeEIsRUFBYSxJQUFLZCxFQUFNdjBELEVBQVF0NUQsRUFBUyxHQUFLbXdILEdBQVksR0FBUXhCLEVBQVksSUFBSyxJQUFNLElBQUtkLEVBQU12MEQsRUFBUXQ1RCxFQUFTLEdBQUkwdkgsR0FDN0osTUFFRCxLQUFLLEdBQUlmLEdBQWMsSUFFdkIsUUFHQyxHQUZBLEdBQU9zQixFQUFZRyxHQUFRekIsRUFBWXppRCxFQUFNNVMsRUFBUW4vQixFQUFPalIsRUFBUW9tRyxFQUFPRyxFQUFReHFILEVBQU1qRCxFQUFRLEdBQUlxTixFQUFXLEdBQUlyUCxHQUFTdXZILEdBRTNHLE1BQWRiLEVBQ0gsR0FBZSxJQUFYeGxHLEVBQ0hnNkIsR0FBTXlyRSxFQUFZemlELEVBQU0rakQsRUFBV0EsRUFBV2p1SCxFQUFPdXRILEVBQVV2dkgsRUFBUXl2SCxFQUFRcGdILFFBRS9FLE9BQW1CLEtBQVhzZ0gsR0FBMkMsTUFBMUIsR0FBT2hCLEVBQVksR0FBYSxJQUFNZ0IsR0FFOUQsS0FBSyxJQUFLLEtBQUssSUFBSyxLQUFLLElBQUssS0FBSyxJQUNsQ3pzRSxHQUFNMWhELEVBQU95dUgsRUFBV0EsRUFBV3BDLEdBQVEsR0FBT3VDLEdBQVE1dUgsRUFBT3l1SCxFQUFXQSxFQUFXLEVBQUcsRUFBR1gsRUFBT0csRUFBUXhxSCxFQUFNcXFILEVBQU90dEgsRUFBUSxHQUFJaEMsR0FBU3FQLEdBQVdpZ0gsRUFBT2pnSCxFQUFVclAsRUFBUXl2SCxFQUFRNUIsRUFBTzdySCxFQUFRcU4sR0FDek0sTUFDRCxRQUNDNnpDLEdBQU15ckUsRUFBWXNCLEVBQVdBLEVBQVdBLEVBQVcsQ0FBQyxJQUFLNWdILEVBQVUsRUFBR29nSCxFQUFRcGdILElBSXBGOHFCLEVBQVFqUixFQUFTMG1HLEVBQVcsRUFBR0UsRUFBV0UsRUFBWSxFQUFHL3FILEVBQU8wcEgsRUFBYSxHQUFJM3VILEVBQVN3dkgsRUFDMUYsTUFFRCxLQUFLLEdBQ0p4dkgsRUFBUyxFQUFJLEdBQU8ydUgsR0FBYWlCLEVBQVdDLEVBQzdDLFFBQ0MsR0FBSUMsRUFBVyxFQUNkLEdBQWlCLEtBQWJwQixJQUNEb0IsT0FDRSxHQUFpQixLQUFicEIsR0FBa0MsR0FBZG9CLEtBQTZCLEtBQVY5Z0QsS0FDL0MsU0FFRixPQUFRMi9DLEdBQWMsR0FBS0QsR0FBWUEsRUFBWW9CLEdBRWxELEtBQUssR0FDSkUsRUFBWTltRyxFQUFTLEVBQUksR0FBS3lsRyxHQUFjLE1BQU8sR0FDbkQsTUFFRCxLQUFLLEdBQ0pjLEVBQU90MUYsTUFBWSxHQUFPdzBGLEdBQWMsR0FBS3FCLEVBQVdBLEVBQVksRUFDcEUsTUFFRCxLQUFLLEdBRVcsS0FBWHBCLE9BQ0hELEdBQWNLLEdBQVE1NEYsT0FFdkJ1NUYsRUFBU2YsS0FBUTFsRyxFQUFTbHBCLEVBQVMsR0FBT2lGLEVBQU8wcEgsR0FBYzEzRSxHQUFXNDNFLE9BQVdILElBQ3JGLE1BRUQsS0FBSyxHQUNhLEtBQWJtQixHQUF5QyxHQUF0QixHQUFPbEIsS0FDN0JtQixFQUFXLElBSWpCLE9BQU9QLENBQ1IsQ0FnQk8sU0FBU2EsR0FBUzV1SCxFQUFPMHFFLEVBQU01UyxFQUFRbi9CLEVBQU9qUixFQUFRb21HLEVBQU9HLEVBQVF4cUgsRUFBTWpELEVBQU9xTixFQUFVclAsR0FLbEcsSUFKQSxJQUFJcXdILEVBQU9ubkcsRUFBUyxFQUNoQjJrRyxFQUFrQixJQUFYM2tHLEVBQWVvbUcsRUFBUSxDQUFDLElBQy9CbHRILEVBQU8sR0FBT3lySCxHQUVUM3FILEVBQUksRUFBR290SCxFQUFJLEVBQUc1c0gsRUFBSSxFQUFHUixFQUFJaTNCLElBQVNqM0IsRUFDMUMsSUFBSyxJQUFJb3JCLEVBQUksRUFBRzBKLEVBQUksR0FBT3gyQixFQUFPNnVILEVBQU8sRUFBR0EsRUFBT2gvQyxHQUFJaS9DLEVBQUliLEVBQU92c0gsS0FBTThGLEVBQUl4SCxFQUFPOHNCLEVBQUlsc0IsSUFBUWtzQixHQUMxRnRsQixFQUFJLEdBQUtzbkgsRUFBSSxFQUFJekMsRUFBS3YvRixHQUFLLElBQU0wSixFQUFJLEdBQVFBLEVBQUcsT0FBUTYxRixFQUFLdi9GLFFBQ2hFdHNCLEVBQU0wQixLQUFPc0YsR0FFaEIsT0FBT2lnQixHQUFLem5CLEVBQU8wcUUsRUFBTTVTLEVBQW1CLElBQVhwd0MsRUFBZSxHQUFVamtCLEVBQU1qRCxFQUFPcU4sRUFBVXJQLEVBQ2xGLENBUU8sU0FBU2t3SCxHQUFTMXVILEVBQU8wcUUsRUFBTTVTLEdBQ3JDLE9BQU9yd0MsR0FBS3puQixFQUFPMHFFLEVBQU01UyxFQUFRODFELEdBQVMsR0gvSW5DVixJRytJaUQsR0FBT2x0SCxFQUFPLEdBQUksR0FBSSxFQUMvRSxDQVNPLFNBQVMydUgsR0FBYTN1SCxFQUFPMHFFLEVBQU01UyxFQUFRdDVELEdBQ2pELE9BQU9pcEIsR0FBS3puQixFQUFPMHFFLEVBQU01UyxFQUFRLEdBQWEsR0FBTzkzRCxFQUFPLEVBQUd4QixHQUFTLEdBQU93QixFQUFPeEIsRUFBUyxHQUFJLEdBQUlBLEVBQ3hHLENDekxBLElBQUl1d0gsR0FBOEIsU0FBcUMvQixFQUFPaUIsRUFBUXQxRixHQUlwRixJQUhBLElBQUkwMUYsRUFBVyxFQUNYbkIsRUFBWSxFQUdkbUIsRUFBV25CLEVBQ1hBLEVBQVlFLEtBRUssS0FBYmlCLEdBQWlDLEtBQWRuQixJQUNyQmUsRUFBT3QxRixHQUFTLElBR2R3aEMsR0FBTSt5RCxJQUlWdDRGLEtBR0YsT0FBTy8wQixHQUFNbXRILEVBQU8xNEQsR0FDdEIsRUFrREkwNkQsR0FBK0IsSUFBSTV1RixRQUNuQzZ1RixHQUFTLFNBQWdCdGxHLEdBQzNCLEdBQXFCLFNBQWpCQSxFQUFRbG1CLE1BQW9Ca21CLEVBQVFtdUMsVUFFeENudUMsRUFBUW5yQixPQUFTLEdBRmpCLENBVUEsSUFKQSxJQUFJd0IsRUFBUTJwQixFQUFRM3BCLE1BQ2hCODNELEVBQVNudUMsRUFBUW11QyxPQUNqQm8zRCxFQUFpQnZsRyxFQUFRc2pHLFNBQVduMUQsRUFBT20xRCxRQUFVdGpHLEVBQVFpd0YsT0FBUzloRCxFQUFPOGhELEtBRTFELFNBQWhCOWhELEVBQU9yMEQsTUFFWixLQURBcTBELEVBQVNBLEVBQU9BLFFBQ0gsT0FJZixJQUE2QixJQUF6Qm51QyxFQUFRbnBCLE1BQU1oQyxRQUF3QyxLQUF4QndCLEVBQU13d0csV0FBVyxJQUUvQ3dlLEdBQWNyakgsSUFBSW1zRCxNQU1sQm8zRCxFQUFKLENBSUFGLEdBQWN4a0gsSUFBSW1mLEdBQVMsR0FLM0IsSUFKQSxJQUFJc2tHLEVBQVMsR0FDVEgsRUFyQ1MsU0FBa0I5dEgsRUFBT2l1SCxHQUN0QyxPQUFPVixHQTVDSyxTQUFpQnA1QyxFQUFRODVDLEdBRXJDLElBQUl0MUYsR0FBUyxFQUNUdTBGLEVBQVksR0FFaEIsR0FDRSxPQUFRL3lELEdBQU0reUQsSUFDWixLQUFLLEVBRWUsS0FBZEEsR0FBK0IsS0FBWEUsT0FLdEJhLEVBQU90MUYsR0FBUyxHQUdsQnc3QyxFQUFPeDdDLElBQVVvMkYsR0FBNEJ6NkQsR0FBVyxFQUFHMjVELEVBQVF0MUYsR0FDbkUsTUFFRixLQUFLLEVBQ0h3N0MsRUFBT3g3QyxJQUFVNjBGLEdBQVFOLEdBQ3pCLE1BRUYsS0FBSyxFQUVILEdBQWtCLEtBQWRBLEVBQWtCLENBRXBCLzRDLElBQVN4N0MsR0FBb0IsS0FBWHkwRixLQUFnQixNQUFRLEdBQzFDYSxFQUFPdDFGLEdBQVN3N0MsRUFBT3g3QyxHQUFPbjZCLE9BQzlCLEtBQ0YsQ0FJRixRQUNFMjFFLEVBQU94N0MsSUFBVSxHQUFLdTBGLFVBRW5CQSxFQUFZdDRGLE1BRXJCLE9BQU91L0MsQ0FDVCxDQUdpQmc3QyxDQUFRN0IsR0FBTXR0SCxHQUFRaXVILEdBQ3ZDLENBbUNjbUIsQ0FBU3B2SCxFQUFPaXVILEdBQ3hCb0IsRUFBY3YzRCxFQUFPdDNELE1BRWhCa0IsRUFBSSxFQUFHUSxFQUFJLEVBQUdSLEVBQUlvc0gsRUFBTXR2SCxPQUFRa0QsSUFDdkMsSUFBSyxJQUFJb3RILEVBQUksRUFBR0EsRUFBSU8sRUFBWTd3SCxPQUFRc3dILElBQUs1c0gsSUFDM0N5bkIsRUFBUW5wQixNQUFNMEIsR0FBSytySCxFQUFPdnNILEdBQUtvc0gsRUFBTXBzSCxHQUFHaEMsUUFBUSxPQUFRMnZILEVBQVlQLElBQU1PLEVBQVlQLEdBQUssSUFBTWhCLEVBQU1wc0gsRUFUM0csQ0F0QkEsQ0FrQ0YsRUFDSTR0SCxHQUFjLFNBQXFCM2xHLEdBQ3JDLEdBQXFCLFNBQWpCQSxFQUFRbG1CLEtBQWlCLENBQzNCLElBQUl6RCxFQUFRMnBCLEVBQVEzcEIsTUFHSSxNQUF4QkEsRUFBTXd3RyxXQUFXLElBQ08sS0FBeEJ4d0csRUFBTXd3RyxXQUFXLEtBRWY3bUYsRUFBZ0IsT0FBSSxHQUNwQkEsRUFBUTNwQixNQUFRLEdBRXBCLENBQ0YsRUFnSEEsU0FBUyxHQUFPQSxFQUFPeEIsR0FDckIsT0wxTkssU0FBZXdCLEVBQU94QixHQUM1QixPQUEwQixHQUFuQixHQUFPd0IsRUFBTyxNQUFpQnhCLEdBQVUsRUFBSyxHQUFPd0IsRUFBTyxLQUFPLEVBQUssR0FBT0EsRUFBTyxLQUFPLEVBQUssR0FBT0EsRUFBTyxLQUFPLEVBQUssR0FBT0EsRUFBTyxHQUFLLENBQ3ZKLENLd05VMDVDLENBQUsxNUMsRUFBT3hCLElBRWxCLEtBQUssS0FDSCxPQUFPLEdBQVMsU0FBV3dCLEVBQVFBLEVBR3JDLEtBQUssS0FDTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FDTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FFTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FDTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FFTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FDTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FFTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FDTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FDSCxPQUFPLEdBQVNBLEVBQVFBLEVBRzFCLEtBQUssS0FDTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FDTCxLQUFLLEtBQ0gsT0FBTyxHQUFTQSxFQUFRLEdBQU1BLEVBQVEsR0FBS0EsRUFBUUEsRUFHckQsS0FBSyxLQUNMLEtBQUssS0FDSCxPQUFPLEdBQVNBLEVBQVEsR0FBS0EsRUFBUUEsRUFHdkMsS0FBSyxLQUNILE9BQU8sR0FBU0EsRUFBUSxHQUFLLFFBQVVBLEVBQVFBLEVBR2pELEtBQUssS0FDSCxPQUFPLEdBQVNBLEVBQVEsR0FBUUEsRUFBTyxpQkFBa0IsR0FBUyxXQUFhLEdBQUssYUFBZUEsRUFHckcsS0FBSyxLQUNILE9BQU8sR0FBU0EsRUFBUSxHQUFLLGFBQWUsR0FBUUEsRUFBTyxjQUFlLElBQU1BLEVBR2xGLEtBQUssS0FDSCxPQUFPLEdBQVNBLEVBQVEsR0FBSyxpQkFBbUIsR0FBUUEsRUFBTyw0QkFBNkIsSUFBTUEsRUFHcEcsS0FBSyxLQUNILE9BQU8sR0FBU0EsRUFBUSxHQUFLLEdBQVFBLEVBQU8sU0FBVSxZQUFjQSxFQUd0RSxLQUFLLEtBQ0gsT0FBTyxHQUFTQSxFQUFRLEdBQUssR0FBUUEsRUFBTyxRQUFTLGtCQUFvQkEsRUFHM0UsS0FBSyxLQUNILE9BQU8sR0FBUyxPQUFTLEdBQVFBLEVBQU8sUUFBUyxJQUFNLEdBQVNBLEVBQVEsR0FBSyxHQUFRQSxFQUFPLE9BQVEsWUFBY0EsRUFHcEgsS0FBSyxLQUNILE9BQU8sR0FBUyxHQUFRQSxFQUFPLHFCQUFzQixLQUFPLEdBQVMsTUFBUUEsRUFHL0UsS0FBSyxLQUNILE9BQU8sR0FBUSxHQUFRLEdBQVFBLEVBQU8sZUFBZ0IsR0FBUyxNQUFPLGNBQWUsR0FBUyxNQUFPQSxFQUFPLElBQU1BLEVBR3BILEtBQUssS0FDTCxLQUFLLEtBQ0gsT0FBTyxHQUFRQSxFQUFPLG9CQUFxQixhQUc3QyxLQUFLLEtBQ0gsT0FBTyxHQUFRLEdBQVFBLEVBQU8sb0JBQXFCLEdBQVMsY0FBZ0IsR0FBSyxnQkFBaUIsYUFBYyxXQUFhLEdBQVNBLEVBQVFBLEVBR2hKLEtBQUssS0FDTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FDSCxPQUFPLEdBQVFBLEVBQU8sa0JBQW1CLEdBQVMsUUFBVUEsRUFHOUQsS0FBSyxLQUNMLEtBQUssS0FDTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FDTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FDTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FDTCxLQUFLLEtBRUgsR0FBSSxHQUFPQSxHQUFTLEVBQUl4QixFQUFTLEVBQUcsT0FBUSxHQUFPd0IsRUFBT3hCLEVBQVMsSUFFakUsS0FBSyxJQUVILEdBQWtDLEtBQTlCLEdBQU93QixFQUFPeEIsRUFBUyxHQUFXLE1BR3hDLEtBQUssSUFDSCxPQUFPLEdBQVF3QixFQUFPLG1CQUFvQixLQUFPLEdBQVAsVUFBaUMsSUFBb0MsS0FBN0IsR0FBT0EsRUFBT3hCLEVBQVMsR0FBWSxLQUFPLFVBQVl3QixFQUcxSSxLQUFLLElBQ0gsT0FBUStzSCxHQUFRL3NILEVBQU8sV0FBYSxHQUFPLEdBQVFBLEVBQU8sVUFBVyxrQkFBbUJ4QixHQUFVd0IsRUFBUUEsRUFFOUcsTUFHRixLQUFLLEtBRUgsR0FBa0MsTUFBOUIsR0FBT0EsRUFBT3hCLEVBQVMsR0FBWSxNQUd6QyxLQUFLLEtBQ0gsT0FBUSxHQUFPd0IsRUFBTyxHQUFPQSxHQUFTLElBQU0rc0gsR0FBUS9zSCxFQUFPLGVBQWlCLE1BRTFFLEtBQUssSUFDSCxPQUFPLEdBQVFBLEVBQU8sSUFBSyxJQUFNLElBQVVBLEVBRzdDLEtBQUssSUFDSCxPQUFPLEdBQVFBLEVBQU8sd0JBQXlCLEtBQU8sSUFBZ0MsS0FBdEIsR0FBT0EsRUFBTyxJQUFhLFVBQVksSUFBeEQsVUFBK0UsR0FBL0UsU0FBd0csR0FBSyxXQUFhQSxFQUc3SyxNQUdGLEtBQUssS0FDSCxPQUFRLEdBQU9BLEVBQU94QixFQUFTLEtBRTdCLEtBQUssSUFDSCxPQUFPLEdBQVN3QixFQUFRLEdBQUssR0FBUUEsRUFBTyxxQkFBc0IsTUFBUUEsRUFHNUUsS0FBSyxJQUNILE9BQU8sR0FBU0EsRUFBUSxHQUFLLEdBQVFBLEVBQU8scUJBQXNCLFNBQVdBLEVBRy9FLEtBQUssR0FDSCxPQUFPLEdBQVNBLEVBQVEsR0FBSyxHQUFRQSxFQUFPLHFCQUFzQixNQUFRQSxFQUc5RSxPQUFPLEdBQVNBLEVBQVEsR0FBS0EsRUFBUUEsRUFHekMsT0FBT0EsQ0FDVCxDQUVBLElBcUNJdXZILEdBQXVCLENBckNaLFNBQWtCNWxHLEVBQVNnUCxFQUFPOXFCLEVBQVVtb0IsR0FDekQsR0FBSXJNLEVBQVFuckIsUUFBVSxJQUFRbXJCLEVBQWdCLE9BQUcsT0FBUUEsRUFBUWxtQixNQUMvRCxLQUFLLEdBQ0hrbUIsRUFBZ0IsT0FBSSxHQUFPQSxFQUFRM3BCLE1BQU8ycEIsRUFBUW5yQixRQUNsRCxNQUVGLEtBQUssR0FDSCxPQUFPLEdBQVUsQ0FBQyxHQUFLbXJCLEVBQVMsQ0FDOUIzcEIsTUFBTyxHQUFRMnBCLEVBQVEzcEIsTUFBTyxJQUFLLElBQU0sT0FDdENnMkIsR0FFUCxLQUFLLEdBQ0gsR0FBSXJNLEVBQVFuckIsT0FBUSxPTHpUbkIsU0FBa0JzaUUsRUFBTzlxQyxHQUMvQixPQUFPOHFDLEVBQU16L0QsSUFBSTIwQixHQUFVdjBCLEtBQUssR0FDakMsQ0t1VGlDLENBQVFrb0IsRUFBUW5wQixPQUFPLFNBQVVSLEdBQzFELE9MbFlELFNBQWdCQSxFQUFPMDlDLEdBQzdCLE9BQVExOUMsRUtpWW9CLHdCTGpZSjBrRyxLQUFLMWtHLElBQVVBLEVBQU0sR0FBS0EsQ0FDbkQsQ0tnWWdCLENBQU1BLElBRVosSUFBSyxhQUNMLElBQUssY0FDSCxPQUFPLEdBQVUsQ0FBQyxHQUFLMnBCLEVBQVMsQ0FDOUJucEIsTUFBTyxDQUFDLEdBQVFSLEVBQU8sY0FBZSxnQkFDbkNnMkIsR0FHUCxJQUFLLGdCQUNILE9BQU8sR0FBVSxDQUFDLEdBQUtyTSxFQUFTLENBQzlCbnBCLE1BQU8sQ0FBQyxHQUFRUixFQUFPLGFBQWMsSUFBTSxHQUFTLGVBQ2xELEdBQUsycEIsRUFBUyxDQUNoQm5wQixNQUFPLENBQUMsR0FBUVIsRUFBTyxhQUFjLGVBQ25DLEdBQUsycEIsRUFBUyxDQUNoQm5wQixNQUFPLENBQUMsR0FBUVIsRUFBTyxhQUFjLEdBQUssZ0JBQ3ZDZzJCLEdBR1QsTUFBTyxFQUNULElBRU4sR0FJSXc1RixHQUFjLFNBQXFCamlILEdBQ3JDLElBQUl4TixFQUFNd04sRUFBUXhOLElBTWxCLEdBQVksUUFBUkEsRUFBZSxDQUNqQixJQUFJMHZILEVBQVlucEgsU0FBUyttQyxpQkFBaUIscUNBSzFDM3VDLE1BQU1pRixVQUFVK0QsUUFBUTlJLEtBQUs2d0gsR0FBVyxTQUFVaG9HLElBU0wsSUFGaEJBLEVBQUtxZ0MsYUFBYSxnQkFFcEI1MUMsUUFBUSxPQUdqQzVMLFNBQVM0d0MsS0FBS3ZvQyxZQUFZOFksR0FDMUJBLEVBQUtuZixhQUFhLFNBQVUsSUFDOUIsR0FDRixDQUVBLElBVUkwakgsRUFrQkEwRCxFQTVCQUMsRUFBZ0JwaUgsRUFBUW9pSCxlQUFpQkosR0FTekNLLEVBQVcsQ0FBQyxFQUVaQyxFQUFpQixHQUduQjdELEVBQVl6K0csRUFBUXkrRyxXQUFhMWxILFNBQVM0d0MsS0FDMUN4NEMsTUFBTWlGLFVBQVUrRCxRQUFROUksS0FFeEIwSCxTQUFTK21DLGlCQUFpQix3QkFBMkJ0dEMsRUFBTSxRQUFTLFNBQVUwbkIsR0FHNUUsSUFGQSxJQUFJcW9HLEVBQVNyb0csRUFBS3FnQyxhQUFhLGdCQUFnQnJnRCxNQUFNLEtBRTVDL0YsRUFBSSxFQUFHQSxFQUFJb3VILEVBQU90eEgsT0FBUWtELElBQ2pDa3VILEVBQVNFLEVBQU9wdUgsS0FBTSxFQUd4Qm11SCxFQUFlL3VILEtBQUsybUIsRUFDdEIsSUFpQkEsSUFBSXNvRyxFQ2xnQm9CQyxFQUN2Qnh4SCxFQWdCc0J3M0IsRURrZm5CaTZGLEVBQW9CLENBQUN2dEgsSUNsZkZzekIsRUQ0ZlQsU0FBVXEyRixHQUN0QjBELEVBQWFqNUUsT0FBT3UxRSxFQUN0QixFQzdmSSxTQUFVMWlHLEdBQ1hBLEVBQVErZ0QsT0FDUi9nRCxFQUFVQSxFQUFRL1QsU0FDckJvZ0IsRUFBU3JNLEVBQ1osSUQwZk91bUcsR0NoaEJvQkYsRURzZkQsQ0FBQ2YsR0FBUUssSUEwQmV4d0gsT0FBTzZ3SCxFQUFlTSxHQy9nQnBFenhILEVBQVMsR0FBT3d4SCxHQUViLFNBQVVybUcsRUFBU2dQLEVBQU85cUIsRUFBVW1vQixHQUcxQyxJQUZBLElBQUk4OUMsRUFBUyxHQUVKcHlFLEVBQUksRUFBR0EsRUFBSWxELEVBQVFrRCxJQUMzQm95RSxHQUFVazhDLEVBQVd0dUgsR0FBR2lvQixFQUFTZ1AsRUFBTzlxQixFQUFVbW9CLElBQWEsR0FFaEUsT0FBTzg5QyxDQUNSLEdENGdCRzQ3QyxFQUFVLFNBQWdCUyxFQUFVQyxFQUFZN0QsRUFBTzhELEdBQ3JETixFQUFleEQsRUFKUixHQUFVc0IsR0FjVnNDLEVBQVdBLEVBQVcsSUFBTUMsRUFBV2h1QixPQUFTLElBQU1ndUIsRUFBV2h1QixRQWR0Qzh0QixHQWdCOUJHLElBQ0Z2a0YsRUFBTThqRixTQUFTUSxFQUFXM3ZILE9BQVEsRUFFdEMsRUFHRixJQUFJcXJDLEVBQVEsQ0FDVi9yQyxJQUFLQSxFQUNMd3NILE1BQU8sSUFBSWIsR0FBVyxDQUNwQjNySCxJQUFLQSxFQUNMaXNILFVBQVdBLEVBQ1h6MEUsTUFBT2hxQyxFQUFRZ3FDLE1BQ2YyMEUsT0FBUTMrRyxFQUFRMitHLE9BQ2hCSCxRQUFTeCtHLEVBQVF3K0csUUFDakJELGVBQWdCditHLEVBQVF1K0csaUJBRTFCdjBFLE1BQU9ocUMsRUFBUWdxQyxNQUNmcTRFLFNBQVVBLEVBQ1ZVLFdBQVksQ0FBQyxFQUNieDVFLE9BQVE0NEUsR0FHVixPQURBNWpGLEVBQU15Z0YsTUFBTTE4RSxRQUFRZ2dGLEdBQ2IvakYsQ0FDVCxFRXBrQkl5a0YsR0FBZSxDQUNqQnBoSCx3QkFBeUIsRUFDekJDLFlBQWEsRUFDYkMsa0JBQW1CLEVBQ25CQyxpQkFBa0IsRUFDbEJDLGlCQUFrQixFQUNsQkMsUUFBUyxFQUNUQyxhQUFjLEVBQ2RDLGdCQUFpQixFQUNqQkMsWUFBYSxFQUNiQyxRQUFTLEVBQ1RDLEtBQU0sRUFDTkMsU0FBVSxFQUNWQyxhQUFjLEVBQ2RDLFdBQVksRUFDWkMsYUFBYyxFQUNkQyxVQUFXLEVBQ1hFLFFBQVMsRUFDVEMsV0FBWSxFQUNaQyxZQUFhLEVBQ2JDLGFBQWMsRUFDZEMsV0FBWSxFQUNaQyxjQUFlLEVBQ2ZDLGVBQWdCLEVBQ2hCQyxnQkFBaUIsRUFDakI2L0csVUFBVyxFQUNYQyxjQUFlLEVBQ2ZDLGFBQWMsRUFDZEMsaUJBQWtCLEVBQ2xCLy9HLFdBQVksRUFDWkUsV0FBWSxFQUNaQyxRQUFTLEVBQ1RDLE1BQU8sRUFDUEMsUUFBUyxFQUNUQyxRQUFTLEVBQ1RDLE9BQVEsRUFDUkMsT0FBUSxFQUNSQyxLQUFNLEVBQ051L0csZ0JBQWlCLEVBRWpCdC9HLFlBQWEsRUFDYkMsYUFBYyxFQUNkQyxZQUFhLEVBQ2JDLGdCQUFpQixFQUNqQkMsaUJBQWtCLEVBQ2xCQyxpQkFBa0IsRUFDbEJDLGNBQWUsRUFDZkMsWUFBYSxHQ3pDWGcvRyxHQUFpQixhQUNqQkMsR0FBaUIsOEJBRWpCQyxHQUFtQixTQUEwQjNDLEdBQy9DLE9BQWtDLEtBQTNCQSxFQUFTNWQsV0FBVyxFQUM3QixFQUVJd2dCLEdBQXFCLFNBQTRCaHhILEdBQ25ELE9BQWdCLE1BQVRBLEdBQWtDLGtCQUFWQSxDQUNqQyxFQUVJaXhILEdBQWtDM0YsSUFBUSxTQUFVNEYsR0FDdEQsT0FBT0gsR0FBaUJHLEdBQWFBLEVBQVlBLEVBQVV4eEgsUUFBUW14SCxHQUFnQixPQUFPbHBILGFBQzVGLElBRUl3cEgsR0FBb0IsU0FBMkJweEgsRUFBS0MsR0FDdEQsT0FBUUQsR0FDTixJQUFLLFlBQ0wsSUFBSyxnQkFFRCxHQUFxQixpQkFBVkMsRUFDVCxPQUFPQSxFQUFNTixRQUFRb3hILElBQWdCLFNBQVUxbUgsRUFBTzBuRyxFQUFJQyxHQU14RCxPQUxBcWYsR0FBUyxDQUNQM3dILEtBQU1xeEcsRUFDTjFQLE9BQVEyUCxFQUNSbjlFLEtBQU13OEYsSUFFRHRmLENBQ1QsSUFLUixPQUFzQixJQUFsQixHQUFTL3hHLElBQWVneEgsR0FBaUJoeEgsSUFBeUIsaUJBQVZDLEdBQWdDLElBQVZBLEVBSTNFQSxFQUhFQSxFQUFRLElBSW5CLEVBZ0NBLFNBQVNxeEgsR0FBb0JDLEVBQWFoQixFQUFZaUIsR0FDcEQsR0FBcUIsTUFBakJBLEVBQ0YsTUFBTyxHQUdULFFBQXVDdnZILElBQW5DdXZILEVBQWNDLGlCQUtoQixPQUFPRCxFQUdULGNBQWVBLEdBQ2IsSUFBSyxVQUVELE1BQU8sR0FHWCxJQUFLLFNBRUQsR0FBMkIsSUFBdkJBLEVBQWNFLEtBTWhCLE9BTEFMLEdBQVMsQ0FDUDN3SCxLQUFNOHdILEVBQWM5d0gsS0FDcEIyaEcsT0FBUW12QixFQUFjbnZCLE9BQ3RCeHRFLEtBQU13OEYsSUFFREcsRUFBYzl3SCxLQUd2QixRQUE2QnVCLElBQXpCdXZILEVBQWNudkIsT0FBc0IsQ0FDdEMsSUFBSXh0RSxFQUFPMjhGLEVBQWMzOEYsS0FFekIsUUFBYTV5QixJQUFUNHlCLEVBR0YsVUFBZ0I1eUIsSUFBVDR5QixHQUNMdzhGLEdBQVMsQ0FDUDN3SCxLQUFNbTBCLEVBQUtuMEIsS0FDWDJoRyxPQUFReHRFLEVBQUt3dEUsT0FDYnh0RSxLQUFNdzhGLElBRVJ4OEYsRUFBT0EsRUFBS0EsS0FVaEIsT0FOYTI4RixFQUFjbnZCLE9BQVMsR0FPdEMsQ0FFQSxPQTJDUixTQUFnQ2t2QixFQUFhaEIsRUFBWXg2RSxHQUN2RCxJQUFJdXRELEVBQVMsR0FFYixHQUFJM2tHLE1BQU0yTyxRQUFReW9DLEdBQ2hCLElBQUssSUFBSXAwQyxFQUFJLEVBQUdBLEVBQUlvMEMsRUFBSXQzQyxPQUFRa0QsSUFDOUIyaEcsR0FBVWd1QixHQUFvQkMsRUFBYWhCLEVBQVl4NkUsRUFBSXAwQyxJQUFNLFNBR25FLElBQUssSUFBSS9DLEtBQVFtM0MsRUFBSyxDQUNwQixJQUFJOTFDLEVBQVE4MUMsRUFBSW4zQyxHQUVoQixHQUFxQixpQkFBVnFCLEVBQ1MsTUFBZHN3SCxRQUE0Q3R1SCxJQUF0QnN1SCxFQUFXdHdILEdBQ25DcWpHLEdBQVUxa0csRUFBTyxJQUFNMnhILEVBQVd0d0gsR0FBUyxJQUNsQ2d4SCxHQUFtQmh4SCxLQUM1QnFqRyxHQUFVNHRCLEdBQWlCdHlILEdBQVEsSUFBTXd5SCxHQUFrQnh5SCxFQUFNcUIsR0FBUyxVQU81RSxJQUFJdEIsTUFBTTJPLFFBQVFyTixJQUE4QixpQkFBYkEsRUFBTSxJQUFrQyxNQUFkc3dILFFBQStDdHVILElBQXpCc3VILEVBQVd0d0gsRUFBTSxJQU03RixDQUNMLElBQUkweEgsRUFBZUwsR0FBb0JDLEVBQWFoQixFQUFZdHdILEdBRWhFLE9BQVFyQixHQUNOLElBQUssWUFDTCxJQUFLLGdCQUVEMGtHLEdBQVU0dEIsR0FBaUJ0eUgsR0FBUSxJQUFNK3lILEVBQWUsSUFDeEQsTUFHSixRQU1JcnVCLEdBQVUxa0csRUFBTyxJQUFNK3lILEVBQWUsSUFHOUMsTUF6QkUsSUFBSyxJQUFJOTZFLEVBQUssRUFBR0EsRUFBSzUyQyxFQUFNeEIsT0FBUW80QyxJQUM5Qm82RSxHQUFtQmh4SCxFQUFNNDJDLE1BQzNCeXNELEdBQVU0dEIsR0FBaUJ0eUgsR0FBUSxJQUFNd3lILEdBQWtCeHlILEVBQU1xQixFQUFNNDJDLElBQU8sSUF5QnhGLENBR0YsT0FBT3lzRCxDQUNULENBakdlc3VCLENBQXVCTCxFQUFhaEIsRUFBWWlCLEdBRzNELElBQUssV0FFRCxRQUFvQnZ2SCxJQUFoQnN2SCxFQUEyQixDQUM3QixJQUFJTSxFQUFpQlIsR0FDakJueUgsRUFBU3N5SCxFQUFjRCxHQUUzQixPQURBRixHQUFTUSxFQUNGUCxHQUFvQkMsRUFBYWhCLEVBQVlyeEgsRUFDdEQsRUF5Qk4sR0FBa0IsTUFBZHF4SCxFQUNGLE9BQU9pQixFQUdULElBQUlNLEVBQVN2QixFQUFXaUIsR0FDeEIsWUFBa0J2dkgsSUFBWDZ2SCxFQUF1QkEsRUFBU04sQ0FDekMsQ0EwREEsSUFTSUgsR0FUQVUsR0FBZSxpQ0FVZixHQUFrQixTQUF5QnJ6SCxFQUFNNnhILEVBQVlnQixHQUMvRCxHQUFvQixJQUFoQjd5SCxFQUFLRCxRQUFtQyxpQkFBWkMsRUFBSyxJQUErQixPQUFaQSxFQUFLLFNBQWtDdUQsSUFBbkJ2RCxFQUFLLEdBQUcyakcsT0FDbEYsT0FBTzNqRyxFQUFLLEdBR2QsSUFBSXN6SCxHQUFhLEVBQ2IzdkIsRUFBUyxHQUNiZ3ZCLFFBQVNwdkgsRUFDVCxJQUFJZ3dILEVBQVV2ekgsRUFBSyxHQUVKLE1BQVh1ekgsUUFBbUNod0gsSUFBaEJnd0gsRUFBUUMsS0FDN0JGLEdBQWEsRUFDYjN2QixHQUFVaXZCLEdBQW9CQyxFQUFhaEIsRUFBWTBCLElBTXZENXZCLEdBQVU0dkIsRUFBUSxHQUlwQixJQUFLLElBQUl0d0gsRUFBSSxFQUFHQSxFQUFJakQsRUFBS0QsT0FBUWtELElBQy9CMGdHLEdBQVVpdkIsR0FBb0JDLEVBQWFoQixFQUFZN3hILEVBQUtpRCxJQUV4RHF3SCxJQUtGM3ZCLEdBQVU0dkIsRUFBUXR3SCxJQWN0Qm93SCxHQUFhN2dCLFVBQVksRUFJekIsSUFIQSxJQUNJN21HLEVBREE4bkgsRUFBaUIsR0FHMEIsUUFBdkM5bkgsRUFBUTBuSCxHQUFhcHRCLEtBQUt0QyxLQUNoQzh2QixHQUFrQixJQUNsQjluSCxFQUFNLEdBR1IsSUFBSTNKLEVDbFNOLFNBQWlCcWlFLEdBWWYsSUFOQSxJQUVJNWdFLEVBRkEwSSxFQUFJLEVBR0psSixFQUFJLEVBQ0pzc0csRUFBTWxyQyxFQUFJdGtFLE9BRVB3dkcsR0FBTyxJQUFLdHNHLEVBQUdzc0csR0FBTyxFQUUzQjlyRyxFQUVlLFlBQVYsT0FITEEsRUFBd0IsSUFBcEI0Z0UsRUFBSTB0QyxXQUFXOXVHLElBQW1DLElBQXRCb2hFLEVBQUkwdEMsYUFBYTl1RyxLQUFjLEdBQTJCLElBQXRCb2hFLEVBQUkwdEMsYUFBYTl1RyxLQUFjLElBQTRCLElBQXRCb2hFLEVBQUkwdEMsYUFBYTl1RyxLQUFjLE1BRzlGLE9BQVpRLElBQU0sS0FBZ0IsSUFJcEQwSSxFQUVlLFlBQVYsT0FMTDFJLEdBRUFBLElBQU0sTUFHb0MsT0FBWkEsSUFBTSxLQUFnQixJQUVyQyxZQUFWLE1BQUowSSxJQUF5QyxPQUFaQSxJQUFNLEtBQWdCLElBSXRELE9BQVFvakcsR0FDTixLQUFLLEVBQ0hwakcsSUFBOEIsSUFBeEJrNEQsRUFBSTB0QyxXQUFXOXVHLEVBQUksS0FBYyxHQUV6QyxLQUFLLEVBQ0hrSixJQUE4QixJQUF4Qms0RCxFQUFJMHRDLFdBQVc5dUcsRUFBSSxLQUFjLEVBRXpDLEtBQUssRUFFSGtKLEVBRWUsWUFBVixPQUhMQSxHQUF5QixJQUFwQms0RCxFQUFJMHRDLFdBQVc5dUcsTUFHc0IsT0FBWmtKLElBQU0sS0FBZ0IsSUFTeEQsU0FIQUEsRUFFZSxZQUFWLE9BSExBLEdBQUtBLElBQU0sTUFHK0IsT0FBWkEsSUFBTSxLQUFnQixLQUN2Q0EsSUFBTSxNQUFRLEdBQUd4SixTQUFTLEdBQ3pDLENEaVBhLENBQVdnaEcsR0FBVTh2QixFQWVoQyxNQUFPLENBQ0x6eEgsS0FBTUEsRUFDTjJoRyxPQUFRQSxFQUNSeHRFLEtBQU13OEYsR0FFVixFRW5USXR5RixLQUFxQixFQUErQixvQkFBSSxFQUErQixtQkFDdkYsR0FBMkNBLElBTDVCLFNBQXNCMUIsR0FDdkMsT0FBT0EsR0FDVCxFQUlJKzBGLEdBQXVDcnpGLElBQXNCLGtCQ0s3RHN6RixHQUFxQyxnQkFNbEIsb0JBQWhCcHhDLFlBQTZDd3VDLEdBQVksQ0FDOUR6dkgsSUFBSyxRQUNGLE1BTWVxeUgsR0FBb0JsL0UsU0FBeEMsSUFLSSxHQUFtQixTQUEwQm0vRSxHQUUvQyxPQUFvQixJQUFBNytFLGFBQVcsU0FBVWh6QyxFQUFPNjNCLEdBRTlDLElBQUl5VCxHQUFRLElBQUFuTixZQUFXeXpGLElBQ3ZCLE9BQU9DLEVBQUs3eEgsRUFBT3NyQyxFQUFPelQsRUFDNUIsR0FDRixFQTBCSSxHQUE4QixnQkFBb0IsQ0FBQyxHQ3JEbkQsR0FBaUIsU0FBd0J5VCxFQUFPc2tGLEVBQVlrQyxHQUM5RCxJQUFJcHlILEVBQVk0ckMsRUFBTS9yQyxJQUFNLElBQU1xd0gsRUFBVzN2SCxNQU81QixJQUFoQjZ4SCxRQUl3RHR3SCxJQUFoQzhwQyxFQUFNd2tGLFdBQVdwd0gsS0FDeEM0ckMsRUFBTXdrRixXQUFXcHdILEdBQWFrd0gsRUFBV2h1QixPQUU3QyxFQUNJLEdBQWUsU0FBc0J0MkQsRUFBT3NrRixFQUFZa0MsR0FDMUQsR0FBZXhtRixFQUFPc2tGLEVBQVlrQyxHQUNsQyxJQUFJcHlILEVBQVk0ckMsRUFBTS9yQyxJQUFNLElBQU1xd0gsRUFBVzN2SCxLQUU3QyxRQUF3Q3VCLElBQXBDOHBDLEVBQU04akYsU0FBU1EsRUFBVzN2SCxNQUFxQixDQUNqRCxJQUFJNFYsRUFBVSs1RyxFQUVkLEdBQ0V0a0YsRUFBTWdMLE9BQU9zNUUsSUFBZS81RyxFQUFVLElBQU1uVyxFQUFZLEdBQUltVyxFQUFTeTFCLEVBQU15Z0YsT0FBTyxHQUVsRmwyRyxFQUFVQSxFQUFRdWUsZ0JBQ0M1eUIsSUFBWnFVLEVBQ1gsQ0FDRixFQ2pDSWs4RyxHQUEyQjlHLEdBRTNCK0csR0FBMkIsU0FBa0N6eUgsR0FDL0QsTUFBZSxVQUFSQSxDQUNULEVBRUkweUgsR0FBOEIsU0FBcUMzbkgsR0FDckUsTUFBc0IsaUJBQVJBLEdBR2RBLEVBQUkwbEcsV0FBVyxHQUFLLEdBQUsraEIsR0FBMkJDLEVBQ3RELEVBQ0lFLEdBQTRCLFNBQW1DNW5ILEVBQUt5QyxFQUFTb2xILEdBQy9FLElBQUlDLEVBRUosR0FBSXJsSCxFQUFTLENBQ1gsSUFBSXNsSCxFQUEyQnRsSCxFQUFRcWxILGtCQUN2Q0EsRUFBb0I5bkgsRUFBSWdvSCx1QkFBeUJELEVBQTJCLFNBQVVFLEdBQ3BGLE9BQU9qb0gsRUFBSWdvSCxzQkFBc0JDLElBQWFGLEVBQXlCRSxFQUN6RSxFQUFJRixDQUNOLENBTUEsTUFKaUMsbUJBQXRCRCxHQUFvQ0QsSUFDN0NDLEVBQW9COW5ILEVBQUlnb0gsdUJBR25CRixDQUNULEVBSUksR0FBWSxTQUFtQi80RSxHQUNqQyxJQUFJL04sRUFBUStOLEVBQUsvTixNQUNic2tGLEVBQWF2MkUsRUFBS3UyRSxXQUNsQmtDLEVBQWN6NEUsRUFBS3k0RSxZQU12QixPQUxBLEdBQWV4bUYsRUFBT3NrRixFQUFZa0MsR0FDbEMsSUFBeUMsV0FDdkMsT0FBTyxHQUFheG1GLEVBQU9za0YsRUFBWWtDLEVBQ3pDLElBRU8sSUFDVCxFQ3JDSVUsR0R1Q2UsU0FBU0MsRUFBYW5vSCxFQUFLeUMsR0FPNUMsSUFFSTJrSCxFQUNBZ0IsRUFIQVAsRUFBUzduSCxFQUFJcW9ILGlCQUFtQnJvSCxFQUNoQ3NvSCxFQUFVVCxHQUFVN25ILEVBQUl1b0gsZ0JBQWtCdm9ILE9BSTlCOUksSUFBWnVMLElBQ0Yya0gsRUFBaUIza0gsRUFBUTVNLE1BQ3pCdXlILEVBQWtCM2xILEVBQVE3TSxRQUc1QixJQUFJa3lILEVBQW9CRixHQUEwQjVuSCxFQUFLeUMsRUFBU29sSCxHQUM1RFcsRUFBMkJWLEdBQXFCSCxHQUE0QlcsR0FDNUVHLEdBQWVELEVBQXlCLE1BQzVDLE9BQU8sV0FDTCxJQUFJNzBILEVBQU9GLFVBQ1A2akcsRUFBU3V3QixRQUFtQzN3SCxJQUF6QjhJLEVBQUkwbUgsaUJBQWlDMW1ILEVBQUkwbUgsaUJBQWlCM3hILE1BQU0sR0FBSyxHQU01RixRQUp1Qm1DLElBQW5Ca3dILEdBQ0Y5dkIsRUFBT3RoRyxLQUFLLFNBQVdveEgsRUFBaUIsS0FHM0IsTUFBWHp6SCxFQUFLLFNBQThCdUQsSUFBaEJ2RCxFQUFLLEdBQUd3ekgsSUFDN0I3dkIsRUFBT3RoRyxLQUFLakMsTUFBTXVqRyxFQUFRM2pHLE9BQ3JCLENBS0wyakcsRUFBT3RoRyxLQUFLckMsRUFBSyxHQUFHLElBSXBCLElBSEEsSUFBSXV2RyxFQUFNdnZHLEVBQUtELE9BQ1hrRCxFQUFJLEVBRURBLEVBQUlzc0csRUFBS3RzRyxJQUtkMGdHLEVBQU90aEcsS0FBS3JDLEVBQUtpRCxHQUFJakQsRUFBSyxHQUFHaUQsR0FFakMsQ0FHQSxJQUFJOHhILEVBQVMsSUFBaUIsU0FBVWh6SCxFQUFPc3JDLEVBQU96VCxHQUNwRCxJRHBHdUJpNEYsRUFBWW1ELEVBQWtCQyxFQUNyREMsRUNtR0lDLEVBQVdMLEdBQWUveUgsRUFBTXF6SCxJQUFNVCxFQUN0Q2x6SCxFQUFZLEdBQ1o0ekgsRUFBc0IsR0FDdEJ4QyxFQUFjOXdILEVBRWxCLEdBQW1CLE1BQWZBLEVBQU11ekgsTUFBZSxDQUd2QixJQUFLLElBQUloMEgsS0FGVHV4SCxFQUFjLENBQUMsRUFFQzl3SCxFQUNkOHdILEVBQVl2eEgsR0FBT1MsRUFBTVQsR0FHM0J1eEgsRUFBWXlDLE1BQVEsYUFBaUIsR0FDdkMsQ0FFK0IsaUJBQXBCdnpILEVBQU1OLFdEbkhNb3dILEVDb0hXeGtGLEVBQU13a0YsV0RwSExtRCxFQ29IaUJLLEVEcEhDSixFQ29Ib0JsekgsRUFBTU4sVURuSC9FeXpILEVBQWUsR0FDbkJELEVBQVdqc0gsTUFBTSxLQUFLQyxTQUFRLFNBQVV4SCxRQUNSOEIsSUFBMUJzdUgsRUFBV3B3SCxHQUNidXpILEVBQWlCM3lILEtBQUt3dkgsRUFBV3B3SCxHQUFhLEtBRTlDeXpILEdBQWdCenpILEVBQVksR0FFaEMsSUM0R01BLEVEM0dDeXpILEdDNEcyQixNQUFuQm56SCxFQUFNTixZQUNmQSxFQUFZTSxFQUFNTixVQUFZLEtBR2hDLElBQUlrd0gsRUFBYSxHQUFnQmh1QixFQUFPdGpHLE9BQU9nMUgsR0FBc0Job0YsRUFBTXdrRixXQUFZZ0IsR0FDdkZweEgsR0FBYTRyQyxFQUFNL3JDLElBQU0sSUFBTXF3SCxFQUFXM3ZILFVBRWxCdUIsSUFBcEJreEgsSUFDRmh6SCxHQUFhLElBQU1nekgsR0FHckIsSUFBSWMsRUFBeUJULFFBQXFDdnhILElBQXRCNHdILEVBQWtDSCxHQUE0Qm1CLEdBQVlOLEVBQ2xIVyxFQUFXLENBQUMsRUFFaEIsSUFBSyxJQUFJdDFILEtBQVE2QixFQUNYK3lILEdBQXdCLE9BQVQ1MEgsR0FHbkJxMUgsRUFBdUJyMUgsS0FDckJzMUgsRUFBU3QxSCxHQUFRNkIsRUFBTTdCLElBTTNCLE9BRkFzMUgsRUFBUy96SCxVQUFZQSxFQUNyQit6SCxFQUFTNTdGLElBQU1BLEVBQ0ssZ0JBQW9CLFdBQWdCLEtBQW1CLGdCQUFvQixHQUFXLENBQ3hHeVQsTUFBT0EsRUFDUHNrRixXQUFZQSxFQUNaa0MsWUFBaUMsaUJBQWJzQixJQUNMLGdCQUFvQkEsRUFBVUssR0FDakQsSUF3QkEsT0F2QkFULEVBQU9yd0gsaUJBQWlDbkIsSUFBbkJrd0gsRUFBK0JBLEVBQWlCLFdBQWdDLGlCQUFaa0IsRUFBdUJBLEVBQVVBLEVBQVFqd0gsYUFBZWl3SCxFQUFRM3lILE1BQVEsYUFBZSxJQUNoTCt5SCxFQUFPdHdILGFBQWU0SCxFQUFJNUgsYUFDMUJzd0gsRUFBT0wsZUFBaUJLLEVBQ3hCQSxFQUFPSCxlQUFpQkQsRUFDeEJJLEVBQU9oQyxpQkFBbUJwdkIsRUFDMUJveEIsRUFBT1Ysc0JBQXdCRixFQUMvQm51SCxPQUFPRCxlQUFlZ3ZILEVBQVEsV0FBWSxDQUN4Q3h6SCxNQUFPLFdBTUwsTUFBTyxJQUFNa3pILENBQ2YsSUFHRk0sRUFBT1UsY0FBZ0IsU0FBVUMsRUFBU0MsR0FDeEMsT0FBT25CLEVBQWFrQixFQUFTLEdBQVMsQ0FBQyxFQUFHNW1ILEVBQVM2bUgsRUFBYSxDQUM5RHhCLGtCQUFtQkYsR0FBMEJjLEVBQVFZLEdBQWEsTUFDaEV2MUgsV0FBTSxFQUFRdWpHLEVBQ3BCLEVBRU9veEIsQ0FDVCxDQUNGLEVDbEs2QmhuRyxPQ1Z0QixTQUFTLEdBQWNsckIsR0FDNUIsR0FBb0IsaUJBQVRBLEdBQThCLE9BQVRBLEVBQzlCLE9BQU8sRUFFVCxNQUFNcUMsRUFBWWMsT0FBT0ksZUFBZXZELEdBQ3hDLFFBQXNCLE9BQWRxQyxHQUFzQkEsSUFBY2MsT0FBT2QsV0FBa0QsT0FBckNjLE9BQU9JLGVBQWVsQixJQUEwQmlGLE9BQU8rdkMsZUFBZXIzQyxHQUFXc0gsT0FBT2UsWUFBWXJJLEVBQ3RLLENBQ0EsU0FBUyt5SCxHQUFVamhILEdBQ2pCLElBQUssR0FBY0EsR0FDakIsT0FBT0EsRUFFVCxNQUFNMGdFLEVBQVMsQ0FBQyxFQUloQixPQUhBcnZFLE9BQU9XLEtBQUtnTyxHQUFRMUwsU0FBUTNILElBQzFCK3pFLEVBQU8vekUsR0FBT3MwSCxHQUFVamhILEVBQU9yVCxHQUFLLElBRS9CK3pFLENBQ1QsQ0FDZSxTQUFTLEdBQVVwekUsRUFBUTBTLEVBQVE3RixFQUFVLENBQzFEK21ILE9BQU8sSUFFUCxNQUFNeGdELEVBQVN2bUUsRUFBUSttSCxNQUFRLEdBQVMsQ0FBQyxFQUFHNXpILEdBQVVBLEVBaUJ0RCxPQWhCSSxHQUFjQSxJQUFXLEdBQWMwUyxJQUN6QzNPLE9BQU9XLEtBQUtnTyxHQUFRMUwsU0FBUTNILElBRWQsY0FBUkEsSUFHQSxHQUFjcVQsRUFBT3JULEtBQVNBLEtBQU9XLEdBQVUsR0FBY0EsRUFBT1gsSUFFdEUrekUsRUFBTy96RSxHQUFPLEdBQVVXLEVBQU9YLEdBQU1xVCxFQUFPclQsR0FBTXdOLEdBQ3pDQSxFQUFRK21ILE1BQ2pCeGdELEVBQU8vekUsR0FBTyxHQUFjcVQsRUFBT3JULElBQVFzMEgsR0FBVWpoSCxFQUFPclQsSUFBUXFULEVBQU9yVCxHQUUzRSt6RSxFQUFPL3pFLEdBQU9xVCxFQUFPclQsR0FDdkIsSUFHRyt6RSxDQUNULENEL0JXLENBQUMsSUFBSyxPQUFRLFVBQVcsT0FBUSxVQUFXLFFBQVMsUUFBUyxJQUFLLE9BQVEsTUFBTyxNQUFPLE1BQU8sYUFBYyxPQUFRLEtBQU0sU0FBVSxTQUFVLFVBQVcsT0FBUSxPQUFRLE1BQU8sV0FBWSxPQUFRLFdBQVksS0FBTSxNQUFPLFVBQVcsTUFBTyxTQUFVLE1BQU8sS0FBTSxLQUFNLEtBQU0sUUFBUyxXQUFZLGFBQWMsU0FBVSxTQUFVLE9BQVEsS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sT0FBUSxTQUFVLFNBQVUsS0FBTSxPQUFRLElBQUssU0FBVSxNQUFPLFFBQVMsTUFBTyxNQUFPLFNBQVUsUUFBUyxTQUFVLEtBQU0sT0FBUSxPQUFRLE1BQU8sT0FBUSxVQUFXLE9BQVEsV0FBWSxPQUFRLFFBQVMsTUFBTyxXQUFZLFNBQVUsS0FBTSxXQUFZLFNBQVUsU0FBVSxJQUFLLFFBQVMsVUFBVyxNQUFPLFdBQVksSUFBSyxLQUFNLEtBQU0sT0FBUSxJQUFLLE9BQVEsU0FBVSxVQUFXLFNBQVUsUUFBUyxTQUFVLE9BQVEsU0FBVSxRQUFTLE1BQU8sVUFBVyxNQUFPLFFBQVMsUUFBUyxLQUFNLFdBQVksUUFBUyxLQUFNLFFBQVMsT0FBUSxRQUFTLEtBQU0sUUFBUyxJQUFLLEtBQU0sTUFBTyxRQUFTLE1BQzc3QixTQUFVLFdBQVksT0FBUSxVQUFXLGdCQUFpQixJQUFLLFFBQVMsT0FBUSxpQkFBa0IsT0FBUSxPQUFRLFVBQVcsVUFBVyxXQUFZLGlCQUFrQixPQUFRLE9BQVEsTUFBTyxPQUFRLFNBR2hNcHNFLFNBQVEsU0FBVWl5QixHQUVyQnE1RixHQUFVcjVGLEdBQVdxNUYsR0FBVXI1RixFQUNqQyxJRWRBLE1BQU0sR0FBWSxDQUFDLFNBQVUsT0FBUSxRQ0NyQyxHQUhjLENBQ1pxaUMsYUFBYyxHQ01IeUcsR0FBUyxDQUNwQjh4RCxHQUFJLEVBRUpDLEdBQUksSUFFSjczRyxHQUFJLElBRUo0VSxHQUFJLEtBRUprakcsR0FBSSxNQUVBQyxHQUFxQixDQUd6QnR2SCxLQUFNLENBQUMsS0FBTSxLQUFNLEtBQU0sS0FBTSxNQUMvQnV2SCxHQUFJNTBILEdBQU8scUJBQXFCMGlFLEdBQU8xaUUsU0FFbEMsU0FBUzYwSCxHQUFrQnAwSCxFQUFPcTBILEVBQVdDLEdBQ2xELE1BQU1mLEVBQVF2ekgsRUFBTXV6SCxPQUFTLENBQUMsRUFDOUIsR0FBSXIxSCxNQUFNMk8sUUFBUXduSCxHQUFZLENBQzVCLE1BQU1FLEVBQW1CaEIsRUFBTWlCLGFBQWVOLEdBQzlDLE9BQU9HLEVBQVU1M0UsUUFBTyxDQUFDc3BCLEVBQUtqbEUsRUFBTXEzQixLQUNsQzR0QyxFQUFJd3VELEVBQWlCSixHQUFHSSxFQUFpQjN2SCxLQUFLdXpCLEtBQVdtOEYsRUFBbUJELEVBQVVsOEYsSUFDL0U0dEMsSUFDTixDQUFDLEVBQ04sQ0FDQSxHQUF5QixpQkFBZHN1RCxFQUF3QixDQUNqQyxNQUFNRSxFQUFtQmhCLEVBQU1pQixhQUFlTixHQUM5QyxPQUFPandILE9BQU9XLEtBQUt5dkgsR0FBVzUzRSxRQUFPLENBQUNzcEIsRUFBSzB1RCxLQUV6QyxJQUE0RSxJQUF4RXh3SCxPQUFPVyxLQUFLMnZILEVBQWlCdHlELFFBQVVBLElBQVF2d0QsUUFBUStpSCxHQUV6RDF1RCxFQURpQnd1RCxFQUFpQkosR0FBR00sSUFDckJILEVBQW1CRCxFQUFVSSxHQUFhQSxPQUNyRCxDQUNMLE1BQU1DLEVBQVNELEVBQ2YxdUQsRUFBSTJ1RCxHQUFVTCxFQUFVSyxFQUMxQixDQUNBLE9BQU8zdUQsQ0FBRyxHQUNULENBQUMsRUFDTixDQUVBLE9BRGV1dUQsRUFBbUJELEVBRXBDLENDNUNlLFNBQVNNLEdBQVc5eEIsR0FDakMsR0FBc0IsaUJBQVhBLEVBQ1QsTUFBTSxJQUFJcDVGLE1BQXlHLEdBQXVCLElBRTVJLE9BQU9vNUYsRUFBT2p4RixPQUFPLEdBQUd0SyxjQUFnQnU3RixFQUFPeGpHLE1BQU0sRUFDdkQsQ0NQTyxTQUFTdTFILEdBQVF0L0UsRUFBS2dFLEVBQU11N0UsR0FBWSxHQUM3QyxJQUFLdjdFLEdBQXdCLGlCQUFUQSxFQUNsQixPQUFPLEtBSVQsR0FBSWhFLEdBQU9BLEVBQUkyb0IsTUFBUTQyRCxFQUFXLENBQ2hDLE1BQU01bkIsRUFBTSxRQUFRM3pELElBQU9yeUMsTUFBTSxLQUFLdzFDLFFBQU8sQ0FBQ3NwQixFQUFLamxFLElBQVNpbEUsR0FBT0EsRUFBSWpsRSxHQUFRaWxFLEVBQUlqbEUsR0FBUSxNQUFNdzBDLEdBQ2pHLEdBQVcsTUFBUDIzRCxFQUNGLE9BQU9BLENBRVgsQ0FDQSxPQUFPM3pELEVBQUtyeUMsTUFBTSxLQUFLdzFDLFFBQU8sQ0FBQ3NwQixFQUFLamxFLElBQzlCaWxFLEdBQW9CLE1BQWJBLEVBQUlqbEUsR0FDTmlsRSxFQUFJamxFLEdBRU4sTUFDTncwQyxFQUNMLENBQ08sU0FBU3cvRSxHQUFjQyxFQUFjaDdELEVBQVdpN0QsRUFBZ0JDLEVBQVlELEdBQ2pGLElBQUl4MUgsRUFXSixPQVRFQSxFQUQwQixtQkFBakJ1MUgsRUFDREEsRUFBYUMsR0FDWjkySCxNQUFNMk8sUUFBUWtvSCxHQUNmQSxFQUFhQyxJQUFtQkMsRUFFaENMLEdBQVFHLEVBQWNDLElBQW1CQyxFQUUvQ2w3RCxJQUNGdjZELEVBQVF1NkQsRUFBVXY2RCxFQUFPeTFILEVBQVdGLElBRS9CdjFILENBQ1QsQ0F1Q0EsU0F0Q0EsU0FBZXVOLEdBQ2IsTUFBTSxLQUNKbXJDLEVBQUksWUFDSmc5RSxFQUFjbm9ILEVBQVFtckMsS0FBSSxTQUMxQmk5RSxFQUFRLFVBQ1JwN0QsR0FDRWh0RCxFQUlFZzZDLEVBQUsvbUQsSUFDVCxHQUFtQixNQUFmQSxFQUFNazRDLEdBQ1IsT0FBTyxLQUVULE1BQU1tOEUsRUFBWXIwSCxFQUFNazRDLEdBRWxCNjhFLEVBQWVILEdBRFA1MEgsRUFBTXV6SCxNQUNnQjRCLElBQWEsQ0FBQyxFQWNsRCxPQUFPZixHQUFrQnAwSCxFQUFPcTBILEdBYkxXLElBQ3pCLElBQUl4MUgsRUFBUXMxSCxHQUFjQyxFQUFjaDdELEVBQVdpN0QsR0FLbkQsT0FKSUEsSUFBbUJ4MUgsR0FBbUMsaUJBQW5CdzFILElBRXJDeDFILEVBQVFzMUgsR0FBY0MsRUFBY2g3RCxFQUFXLEdBQUc3aEIsSUFBMEIsWUFBbkI4OEUsRUFBK0IsR0FBS0wsR0FBV0ssS0FBbUJBLEtBRXpHLElBQWhCRSxFQUNLMTFILEVBRUYsQ0FDTCxDQUFDMDFILEdBQWMxMUgsRUFDaEIsR0FFMkQsRUFNaEUsT0FKQXVuRCxFQUFHL2pELFVBRUMsQ0FBQyxFQUNMK2pELEVBQUdtYixZQUFjLENBQUNocUIsR0FDWDZPLENBQ1QsRUNoRUEsR0FSQSxTQUFlZ2YsRUFBS2psRSxHQUNsQixPQUFLQSxFQUdFLEdBQVVpbEUsRUFBS2psRSxFQUFNLENBQzFCZ3pILE9BQU8sSUFIQS90RCxDQUtYLEVDSE1xdkQsR0FBYSxDQUNqQjFnSCxFQUFHLFNBQ0h4UCxFQUFHLFdBRUNtd0gsR0FBYSxDQUNqQmpwRyxFQUFHLE1BQ0gySixFQUFHLFFBQ0gzd0IsRUFBRyxTQUNIK0UsRUFBRyxPQUNIbWlCLEVBQUcsQ0FBQyxPQUFRLFNBQ1owSixFQUFHLENBQUMsTUFBTyxXQUVQcy9GLEdBQVUsQ0FDZEMsUUFBUyxLQUNUQyxRQUFTLEtBQ1RDLFNBQVUsS0FDVkMsU0FBVSxNQU1OQyxHQzNCUyxTQUFpQjV1RSxHQUM5QixNQUFNemIsRUFBUSxDQUFDLEVBQ2YsT0FBT3kvRSxTQUNjdnBILElBQWY4cEMsRUFBTXkvRSxLQUNSei9FLEVBQU15L0UsR0R1QnFCN3lFLEtBRS9CLEdBQUlBLEVBQUtsNkMsT0FBUyxFQUFHLENBQ25CLElBQUlzM0gsR0FBUXA5RSxHQUdWLE1BQU8sQ0FBQ0EsR0FGUkEsRUFBT285RSxHQUFRcDlFLEVBSW5CLENBQ0EsTUFBTy95QyxFQUFHQyxHQUFLOHlDLEVBQUtqeEMsTUFBTSxJQUNwQjJtSCxFQUFXd0gsR0FBV2p3SCxHQUN0QjQ3RSxFQUFZczBDLEdBQVdqd0gsSUFBTSxHQUNuQyxPQUFPbEgsTUFBTTJPLFFBQVFrMEUsR0FBYUEsRUFBVWxnRixLQUFJKzBILEdBQU9oSSxFQUFXZ0ksSUFBTyxDQUFDaEksRUFBVzdzQyxFQUFVLEVDbkM5RWg2QixDQUFHZ2tFLElBRVh6L0UsRUFBTXkvRSxHQUVqQixDRG1CeUIsR0FjWjhLLEdBQWEsQ0FBQyxJQUFLLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLFNBQVUsWUFBYSxjQUFlLGVBQWdCLGFBQWMsVUFBVyxVQUFXLGVBQWdCLG9CQUFxQixrQkFBbUIsY0FBZSxtQkFBb0Isa0JBQzVPQyxHQUFjLENBQUMsSUFBSyxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxVQUFXLGFBQWMsZUFBZ0IsZ0JBQWlCLGNBQWUsV0FBWSxXQUFZLGdCQUFpQixxQkFBc0IsbUJBQW9CLGVBQWdCLG9CQUFxQixtQkFDaFFDLEdBQWMsSUFBSUYsTUFBZUMsSUFDaEMsU0FBU0UsR0FBZ0J6QyxFQUFPNEIsRUFBVWxwSCxFQUFjc21ILEdBQzdELElBQUkwRCxFQUNKLE1BQU1DLEVBQStELE9BQS9DRCxFQUFXckIsR0FBUXJCLEVBQU80QixHQUFVLElBQWtCYyxFQUFXaHFILEVBQ3ZGLE1BQTRCLGlCQUFqQmlxSCxFQUNGN21ELEdBQ2MsaUJBQVJBLEVBQ0ZBLEVBT0Y2bUQsRUFBZTdtRCxFQUd0Qm54RSxNQUFNMk8sUUFBUXFwSCxHQUNUN21ELEdBQ2MsaUJBQVJBLEVBQ0ZBLEVBU0Y2bUQsRUFBYTdtRCxHQUdJLG1CQUFqQjZtRCxFQUNGQSxFQUtGLEtBQWUsQ0FDeEIsQ0FDTyxTQUFTQyxHQUFtQjVDLEdBQ2pDLE9BQU95QyxHQUFnQnpDLEVBQU8sVUFBVyxFQUMzQyxDQUNPLFNBQVNqb0gsR0FBU3NvRSxFQUFheWdELEdBQ3BDLEdBQXlCLGlCQUFkQSxHQUF1QyxNQUFiQSxFQUNuQyxPQUFPQSxFQUVULE1BQ00rQixFQUFjeGlELEVBRFJuOEQsS0FBSzQzRCxJQUFJZ2xELElBRXJCLE9BQUlBLEdBQWEsRUFDUitCLEVBRWtCLGlCQUFoQkEsR0FDREEsRUFFSCxJQUFJQSxHQUNiLENBa0JBLFNBQVMsR0FBTXAySCxFQUFPNEUsR0FDcEIsTUFBTWd2RSxFQUFjdWlELEdBQW1CbjJILEVBQU11ekgsT0FDN0MsT0FBT3R2SCxPQUFPVyxLQUFLNUUsR0FBT2EsS0FBSXEzQyxHQWJoQyxTQUE0Qmw0QyxFQUFPNEUsRUFBTXN6QyxFQUFNMDdCLEdBRzdDLElBQTRCLElBQXhCaHZFLEVBQUs4TSxRQUFRd21DLEdBQ2YsT0FBTyxLQUVULE1BQ01vOEUsRUFiRCxTQUErQitCLEVBQWV6aUQsR0FDbkQsT0FBT3lnRCxHQUFhZ0MsRUFBYzU1RSxRQUFPLENBQUNzcEIsRUFBS212RCxLQUM3Q252RCxFQUFJbXZELEdBQWU1cEgsR0FBU3NvRSxFQUFheWdELEdBQ2xDdHVELElBQ04sQ0FBQyxFQUNOLENBUTZCdXdELENBRExYLEdBQWlCejlFLEdBQ3lCMDdCLEdBRWhFLE9BQU93Z0QsR0FBa0JwMEgsRUFEUEEsRUFBTWs0QyxHQUNtQm84RSxFQUM3QyxDQUd3Q2lDLENBQW1CdjJILEVBQU80RSxFQUFNc3pDLEVBQU0wN0IsS0FBY24zQixPQUFPLEdBQU8sQ0FBQyxFQUMzRyxDQUNPLFNBQVM2ZixHQUFPdDhELEdBQ3JCLE9BQU8sR0FBTUEsRUFBTzYxSCxHQUN0QixDQU1PLFNBQVNoeUUsR0FBUTdqRCxHQUN0QixPQUFPLEdBQU1BLEVBQU84MUgsR0FDdEIsQ0FNQSxTQUFTejBELEdBQVFyaEUsR0FDZixPQUFPLEdBQU1BLEVBQU8rMUgsR0FDdEIsQ0FmQXo1RCxHQUFPdDVELFVBR0UsQ0FBQyxFQUNWczVELEdBQU80RixZQUFjMnpELEdBSXJCaHlFLEdBQVE3Z0QsVUFHQyxDQUFDLEVBQ1Y2Z0QsR0FBUXFlLFlBQWM0ekQsR0FJdEJ6MEQsR0FBUXIrRCxVQUdDLENBQUMsRUFDVnErRCxHQUFRYSxZQUFjNnpELEdFekh0QixTQXRCQSxZQUFvQm4wQixHQUNsQixNQUFNelksRUFBV3lZLEVBQU9ubEQsUUFBTyxDQUFDc3BCLEVBQUt0MEQsS0FDbkNBLEVBQU15d0QsWUFBWWg3RCxTQUFRZ3hDLElBQ3hCNnRCLEVBQUk3dEIsR0FBUXptQyxDQUFLLElBRVpzMEQsSUFDTixDQUFDLEdBSUVoZixFQUFLL21ELEdBQ0ZpRSxPQUFPVyxLQUFLNUUsR0FBT3k4QyxRQUFPLENBQUNzcEIsRUFBSzd0QixJQUNqQ2l4QyxFQUFTanhDLEdBQ0osR0FBTTZ0QixFQUFLb2pCLEVBQVNqeEMsR0FBTWw0QyxJQUU1QitsRSxHQUNOLENBQUMsR0FJTixPQUZBaGYsRUFBRy9qRCxVQUE2SCxDQUFDLEVBQ2pJK2pELEVBQUdtYixZQUFjMC9CLEVBQU9ubEQsUUFBTyxDQUFDc3BCLEVBQUt0MEQsSUFBVXMwRCxFQUFJem5FLE9BQU9tVCxFQUFNeXdELGNBQWMsSUFDdkVuYixDQUNULEVDakJPLFNBQVN5dkUsR0FBZ0JoM0gsR0FDOUIsTUFBcUIsaUJBQVZBLEVBQ0ZBLEVBRUYsR0FBR0EsV0FDWixDQUNBLFNBQVNpM0gsR0FBa0J2K0UsRUFBTTZoQixHQUMvQixPQUFPLEdBQU0sQ0FDWDdoQixPQUNBaTlFLFNBQVUsVUFDVnA3RCxhQUVKLENBQ08sTUFBTTI4RCxHQUFTRCxHQUFrQixTQUFVRCxJQUNyQ0csR0FBWUYsR0FBa0IsWUFBYUQsSUFDM0NJLEdBQWNILEdBQWtCLGNBQWVELElBQy9DSyxHQUFlSixHQUFrQixlQUFnQkQsSUFDakRNLEdBQWFMLEdBQWtCLGFBQWNELElBQzdDOTNDLEdBQWMrM0MsR0FBa0IsZUFDaEM5M0MsR0FBaUI4M0MsR0FBa0Isa0JBQ25DNzNDLEdBQW1CNjNDLEdBQWtCLG9CQUNyQzUzQyxHQUFvQjQzQyxHQUFrQixxQkFDdEMzM0MsR0FBa0IyM0MsR0FBa0IsbUJBQ3BDTSxHQUFVTixHQUFrQixVQUFXRCxJQUN2Q2o0QyxHQUFlazRDLEdBQWtCLGdCQUlqQ2o3RCxHQUFleDdELElBQzFCLFFBQTJCd0IsSUFBdkJ4QixFQUFNdzdELGNBQXFELE9BQXZCeDdELEVBQU13N0QsYUFBdUIsQ0FDbkUsTUFBTW9ZLEVBQWNvaUQsR0FBZ0JoMkgsRUFBTXV6SCxNQUFPLHFCQUFzQixHQUNqRWUsRUFBcUJELElBQWEsQ0FDdEM3NEQsYUFBY2x3RCxHQUFTc29FLEVBQWF5Z0QsS0FFdEMsT0FBT0QsR0FBa0JwMEgsRUFBT0EsRUFBTXc3RCxhQUFjODRELEVBQ3RELENBQ0EsT0FBTyxJQUFJLEVBRWI5NEQsR0FBYXg0RCxVQUVULENBQUMsRUFDTHc0RCxHQUFhMEcsWUFBYyxDQUFDLGdCQUNaLEdBQVF3MEQsR0FBUUMsR0FBV0MsR0FBYUMsR0FBY0MsR0FBWXA0QyxHQUFhQyxHQUFnQkMsR0FBa0JDLEdBQW1CQyxHQUFpQnRqQixHQUFjdTdELEdBQVN4NEMsSUFBNUwsTUN2Q2F5NEMsR0FBTWgzSCxJQUNqQixRQUFrQndCLElBQWR4QixFQUFNZzNILEtBQW1DLE9BQWRoM0gsRUFBTWczSCxJQUFjLENBQ2pELE1BQU1wakQsRUFBY29pRCxHQUFnQmgySCxFQUFNdXpILE1BQU8sVUFBVyxHQUN0RGUsRUFBcUJELElBQWEsQ0FDdEMyQyxJQUFLMXJILEdBQVNzb0UsRUFBYXlnRCxLQUU3QixPQUFPRCxHQUFrQnAwSCxFQUFPQSxFQUFNZzNILElBQUsxQyxFQUM3QyxDQUNBLE9BQU8sSUFBSSxFQUViMEMsR0FBSWgwSCxVQUVBLENBQUMsRUFDTGcwSCxHQUFJOTBELFlBQWMsQ0FBQyxPQUlaLE1BQU0rMEQsR0FBWWozSCxJQUN2QixRQUF3QndCLElBQXBCeEIsRUFBTWkzSCxXQUErQyxPQUFwQmozSCxFQUFNaTNILFVBQW9CLENBQzdELE1BQU1yakQsRUFBY29pRCxHQUFnQmgySCxFQUFNdXpILE1BQU8sVUFBVyxHQUN0RGUsRUFBcUJELElBQWEsQ0FDdEM0QyxVQUFXM3JILEdBQVNzb0UsRUFBYXlnRCxLQUVuQyxPQUFPRCxHQUFrQnAwSCxFQUFPQSxFQUFNaTNILFVBQVczQyxFQUNuRCxDQUNBLE9BQU8sSUFBSSxFQUViMkMsR0FBVWowSCxVQUVOLENBQUMsRUFDTGkwSCxHQUFVLzBELFlBQWMsQ0FBQyxhQUlsQixNQUFNZzFELEdBQVNsM0gsSUFDcEIsUUFBcUJ3QixJQUFqQnhCLEVBQU1rM0gsUUFBeUMsT0FBakJsM0gsRUFBTWszSCxPQUFpQixDQUN2RCxNQUFNdGpELEVBQWNvaUQsR0FBZ0JoMkgsRUFBTXV6SCxNQUFPLFVBQVcsR0FDdERlLEVBQXFCRCxJQUFhLENBQ3RDNkMsT0FBUTVySCxHQUFTc29FLEVBQWF5Z0QsS0FFaEMsT0FBT0QsR0FBa0JwMEgsRUFBT0EsRUFBTWszSCxPQUFRNUMsRUFDaEQsQ0FDQSxPQUFPLElBQUksRUNoRE4sU0FBUzZDLEdBQWlCMzNILEVBQU95MUgsR0FDdEMsTUFBa0IsU0FBZEEsRUFDS0EsRUFFRnoxSCxDQUNULENDSk8sU0FBUzQzSCxHQUFnQjUzSCxHQUM5QixPQUFPQSxHQUFTLEdBQWUsSUFBVkEsRUFBeUIsSUFBUkEsRUFBSCxJQUFvQkEsQ0FDekQsQ0YrQ0EwM0gsR0FBT2wwSCxVQUVILENBQUMsRUFDTGswSCxHQUFPaDFELFlBQWMsQ0FBQyxVQTRCVCxHQUFRODBELEdBQUtDLEdBQVdDLEdBM0JYLEdBQU0sQ0FDOUJoL0UsS0FBTSxlQUVlLEdBQU0sQ0FDM0JBLEtBQU0sWUFFb0IsR0FBTSxDQUNoQ0EsS0FBTSxpQkFFdUIsR0FBTSxDQUNuQ0EsS0FBTSxvQkFFb0IsR0FBTSxDQUNoQ0EsS0FBTSxpQkFFMkIsR0FBTSxDQUN2Q0EsS0FBTSx3QkFFd0IsR0FBTSxDQUNwQ0EsS0FBTSxxQkFFeUIsR0FBTSxDQUNyQ0EsS0FBTSxzQkFFZ0IsR0FBTSxDQUM1QkEsS0FBTSxjQ3pEUSxHQWhCSyxHQUFNLENBQ3pCQSxLQUFNLFFBQ05pOUUsU0FBVSxVQUNWcDdELFVBQVdvOUQsS0FFVSxHQUFNLENBQzNCai9FLEtBQU0sVUFDTmc5RSxZQUFhLGtCQUNiQyxTQUFVLFVBQ1ZwN0QsVUFBV285RCxLQUVrQixHQUFNLENBQ25Dai9FLEtBQU0sa0JBQ05pOUUsU0FBVSxVQUNWcDdELFVBQVdvOUQsTUNoQk4sTUFBTWgxRyxHQUFRLEdBQU0sQ0FDekIrMUIsS0FBTSxRQUNONmhCLFVBQVdxOUQsS0FFQXQ3RCxHQUFXOTdELElBQ3RCLFFBQXVCd0IsSUFBbkJ4QixFQUFNODdELFVBQTZDLE9BQW5COTdELEVBQU04N0QsU0FBbUIsQ0FDM0QsTUFBTXc0RCxFQUFxQkQsSUFDekIsSUFBSWdELEVBQWNDLEVBQ2xCLE1BQU03QyxHQUE4QyxPQUEvQjRDLEVBQWVyM0gsRUFBTXV6SCxRQUErRCxPQUE1QzhELEVBQWVBLEVBQWE3QyxjQUFnRSxPQUF2QzZDLEVBQWVBLEVBQWFwMUQsYUFBa0IsRUFBU28xRCxFQUFhaEQsS0FBZSxHQUFrQkEsR0FDdk4sT0FBS0ksRUFLZ0ksUUFBL0YsT0FBaEM2QyxFQUFnQnQzSCxFQUFNdXpILFFBQWlFLE9BQTlDK0QsRUFBZ0JBLEVBQWM5QyxrQkFBdUIsRUFBUzhDLEVBQWMxOEQsTUFDbEgsQ0FDTGtCLFNBQVUsR0FBRzI0RCxJQUFhejBILEVBQU11ekgsTUFBTWlCLFlBQVk1NUQsUUFHL0MsQ0FDTGtCLFNBQVUyNEQsR0FWSCxDQUNMMzRELFNBQVVzN0QsR0FBZ0IvQyxHQVU3QixFQUVILE9BQU9ELEdBQWtCcDBILEVBQU9BLEVBQU04N0QsU0FBVXc0RCxFQUNsRCxDQUNBLE9BQU8sSUFBSSxFQUVieDRELEdBQVNvRyxZQUFjLENBQUMsWUFDakIsTUFBTXExRCxHQUFXLEdBQU0sQ0FDNUJyL0UsS0FBTSxXQUNONmhCLFVBQVdxOUQsS0FFQWgxRyxHQUFTLEdBQU0sQ0FDMUI4MUIsS0FBTSxTQUNONmhCLFVBQVdxOUQsS0FFQXI3RCxHQUFZLEdBQU0sQ0FDN0I3akIsS0FBTSxZQUNONmhCLFVBQVdxOUQsS0FFQUksR0FBWSxHQUFNLENBQzdCdC9FLEtBQU0sWUFDTjZoQixVQUFXcTlELEtDa1BiLElEaFB5QixHQUFNLENBQzdCbC9FLEtBQU0sT0FDTmc5RSxZQUFhLFFBQ2JuN0QsVUFBV3E5RCxLQUVhLEdBQU0sQ0FDOUJsL0UsS0FBTSxPQUNOZzlFLFlBQWEsU0FDYm43RCxVQUFXcTlELEtBS0UsR0FBUWoxRyxHQUFPMjVDLEdBQVV5N0QsR0FBVW4xRyxHQUFRMjVDLEdBQVd5N0QsR0FINUMsR0FBTSxDQUM3QnQvRSxLQUFNLGVDeERnQixDQUV0QncrRSxPQUFRLENBQ052QixTQUFVLFVBQ1ZwN0QsVUFBV3k4RCxJQUViRyxVQUFXLENBQ1R4QixTQUFVLFVBQ1ZwN0QsVUFBV3k4RCxJQUViSSxZQUFhLENBQ1h6QixTQUFVLFVBQ1ZwN0QsVUFBV3k4RCxJQUViSyxhQUFjLENBQ1oxQixTQUFVLFVBQ1ZwN0QsVUFBV3k4RCxJQUViTSxXQUFZLENBQ1YzQixTQUFVLFVBQ1ZwN0QsVUFBV3k4RCxJQUViOTNDLFlBQWEsQ0FDWHkyQyxTQUFVLFdBRVp4MkMsZUFBZ0IsQ0FDZHcyQyxTQUFVLFdBRVp2MkMsaUJBQWtCLENBQ2hCdTJDLFNBQVUsV0FFWnQyQyxrQkFBbUIsQ0FDakJzMkMsU0FBVSxXQUVacjJDLGdCQUFpQixDQUNmcTJDLFNBQVUsV0FFWjRCLFFBQVMsQ0FDUDVCLFNBQVUsVUFDVnA3RCxVQUFXeThELElBRWJqNEMsYUFBYyxDQUNaNDJDLFNBQVUsV0FFWjM1RCxhQUFjLENBQ1oyNUQsU0FBVSxxQkFDVjFqSCxNQUFPK3BELElBR1RsM0MsTUFBTyxDQUNMNndHLFNBQVUsVUFDVnA3RCxVQUFXbzlELElBRWJNLFFBQVMsQ0FDUHRDLFNBQVUsVUFDVkQsWUFBYSxrQkFDYm43RCxVQUFXbzlELElBRWJyekUsZ0JBQWlCLENBQ2ZxeEUsU0FBVSxVQUNWcDdELFVBQVdvOUQsSUFHYmp5SCxFQUFHLENBQ0R1TSxNQUFPb3lDLElBRVQ2ekUsR0FBSSxDQUNGam1ILE1BQU9veUMsSUFFVDh6RSxHQUFJLENBQ0ZsbUgsTUFBT295QyxJQUVUbjFDLEdBQUksQ0FDRitDLE1BQU9veUMsSUFFVHZYLEdBQUksQ0FDRjc2QixNQUFPb3lDLElBRVRrWCxHQUFJLENBQ0Z0cEQsTUFBT295QyxJQUVUK3pFLEdBQUksQ0FDRm5tSCxNQUFPb3lDLElBRVRBLFFBQVMsQ0FDUHB5QyxNQUFPb3lDLElBRVRxWSxXQUFZLENBQ1Z6cUQsTUFBT295QyxJQUVUc1ksYUFBYyxDQUNaMXFELE1BQU9veUMsSUFFVHVZLGNBQWUsQ0FDYjNxRCxNQUFPb3lDLElBRVR3WSxZQUFhLENBQ1g1cUQsTUFBT295QyxJQUVUNHhFLFNBQVUsQ0FDUmhrSCxNQUFPb3lDLElBRVQ2eEUsU0FBVSxDQUNSamtILE1BQU9veUMsSUFFVGcwRSxjQUFlLENBQ2JwbUgsTUFBT295QyxJQUVUaTBFLG1CQUFvQixDQUNsQnJtSCxNQUFPb3lDLElBRVRrMEUsaUJBQWtCLENBQ2hCdG1ILE1BQU9veUMsSUFFVG0wRSxhQUFjLENBQ1p2bUgsTUFBT295QyxJQUVUbzBFLGtCQUFtQixDQUNqQnhtSCxNQUFPb3lDLElBRVRxMEUsZ0JBQWlCLENBQ2Z6bUgsTUFBT295QyxJQUVUbnZDLEVBQUcsQ0FDRGpELE1BQU82cUQsSUFFVDY3RCxHQUFJLENBQ0YxbUgsTUFBTzZxRCxJQUVUODdELEdBQUksQ0FDRjNtSCxNQUFPNnFELElBRVQxdUQsR0FBSSxDQUNGNkQsTUFBTzZxRCxJQUVUcHdCLEdBQUksQ0FDRno2QixNQUFPNnFELElBRVQrN0QsR0FBSSxDQUNGNW1ILE1BQU82cUQsSUFFVGc4RCxHQUFJLENBQ0Y3bUgsTUFBTzZxRCxJQUVUQSxPQUFRLENBQ043cUQsTUFBTzZxRCxJQUVUQyxVQUFXLENBQ1Q5cUQsTUFBTzZxRCxJQUVURSxZQUFhLENBQ1gvcUQsTUFBTzZxRCxJQUVURyxhQUFjLENBQ1pockQsTUFBTzZxRCxJQUVUSSxXQUFZLENBQ1ZqckQsTUFBTzZxRCxJQUVUaTVELFFBQVMsQ0FDUDlqSCxNQUFPNnFELElBRVRrNUQsUUFBUyxDQUNQL2pILE1BQU82cUQsSUFFVGk4RCxhQUFjLENBQ1o5bUgsTUFBTzZxRCxJQUVUazhELGtCQUFtQixDQUNqQi9tSCxNQUFPNnFELElBRVRtOEQsZ0JBQWlCLENBQ2ZobkgsTUFBTzZxRCxJQUVUbzhELFlBQWEsQ0FDWGpuSCxNQUFPNnFELElBRVRxOEQsaUJBQWtCLENBQ2hCbG5ILE1BQU82cUQsSUFFVHM4RCxlQUFnQixDQUNkbm5ILE1BQU82cUQsSUFHVHU4RCxhQUFjLENBQ1ozRCxhQUFhLEVBQ2JuN0QsVUFBV3Y2RCxJQUFTLENBQ2xCLGVBQWdCLENBQ2RxbkMsUUFBU3JuQyxNQUlmcW5DLFFBQVMsQ0FBQyxFQUNWeFUsU0FBVSxDQUFDLEVBQ1h5bUcsYUFBYyxDQUFDLEVBQ2ZqM0IsV0FBWSxDQUFDLEVBQ2JrM0IsV0FBWSxDQUFDLEVBRWJDLFVBQVcsQ0FBQyxFQUNaQyxjQUFlLENBQUMsRUFDaEJDLFNBQVUsQ0FBQyxFQUNYQyxlQUFnQixDQUFDLEVBQ2pCQyxXQUFZLENBQUMsRUFDYkMsYUFBYyxDQUFDLEVBQ2Y3b0gsTUFBTyxDQUFDLEVBQ1JuQixLQUFNLENBQUMsRUFDUEMsU0FBVSxDQUFDLEVBQ1hFLFdBQVksQ0FBQyxFQUNiOHBILFVBQVcsQ0FBQyxFQUNaQyxhQUFjLENBQUMsRUFDZkMsWUFBYSxDQUFDLEVBRWR4QyxJQUFLLENBQ0h2bEgsTUFBT3VsSCxJQUVURSxPQUFRLENBQ056bEgsTUFBT3lsSCxJQUVURCxVQUFXLENBQ1R4bEgsTUFBT3dsSCxJQUVUam5ILFdBQVksQ0FBQyxFQUNiSixRQUFTLENBQUMsRUFDVjZwSCxhQUFjLENBQUMsRUFDZkMsZ0JBQWlCLENBQUMsRUFDbEJDLGFBQWMsQ0FBQyxFQUNmQyxvQkFBcUIsQ0FBQyxFQUN0QkMsaUJBQWtCLENBQUMsRUFDbkJDLGtCQUFtQixDQUFDLEVBQ3BCbnFILFNBQVUsQ0FBQyxFQUVYbWtELFNBQVUsQ0FBQyxFQUNYbGpELE9BQVEsQ0FDTnVrSCxTQUFVLFVBRVo3ckcsSUFBSyxDQUFDLEVBQ04weUMsTUFBTyxDQUFDLEVBQ1JDLE9BQVEsQ0FBQyxFQUNUN3lDLEtBQU0sQ0FBQyxFQUVQdXJFLFVBQVcsQ0FDVHdnQyxTQUFVLFdBR1poekcsTUFBTyxDQUNMNDNDLFVBQVdxOUQsSUFFYnQ3RCxTQUFVLENBQ1JycUQsTUFBT3FxRCxJQUVUeTdELFNBQVUsQ0FDUng5RCxVQUFXcTlELElBRWJoMUcsT0FBUSxDQUNOMjNDLFVBQVdxOUQsSUFFYnI3RCxVQUFXLENBQ1RoQyxVQUFXcTlELElBRWJJLFVBQVcsQ0FDVHo5RCxVQUFXcTlELElBRWIyQyxVQUFXLENBQUMsRUFFWkMsV0FBWSxDQUNWN0UsU0FBVSxjQUVaOEUsU0FBVSxDQUNSOUUsU0FBVSxjQUVacHhFLFVBQVcsQ0FDVG94RSxTQUFVLGNBRVova0gsV0FBWSxDQUNWK2tILFNBQVUsY0FFWitFLGNBQWUsQ0FBQyxFQUNoQkMsY0FBZSxDQUFDLEVBQ2hCN3BILFdBQVksQ0FBQyxFQUNiOHBILFVBQVcsQ0FBQyxFQUNaQyxXQUFZLENBQ1ZuRixhQUFhLEVBQ2JDLFNBQVUsZ0JDbktSbUYsR0E3R0MsV0FDTCxTQUFTQyxFQUFjcmlGLEVBQU0rMEQsRUFBS3NtQixFQUFPM3ZELEdBQ3ZDLE1BQU01akUsRUFBUSxDQUNaLENBQUNrNEMsR0FBTyswRCxFQUNSc21CLFNBRUl4bUgsRUFBVTYyRCxFQUFPMXJCLEdBQ3ZCLElBQUtuckMsRUFDSCxNQUFPLENBQ0wsQ0FBQ21yQyxHQUFPKzBELEdBR1osTUFBTSxZQUNKaW9CLEVBQWNoOUUsRUFBSSxTQUNsQmk5RSxFQUFRLFVBQ1JwN0QsRUFBUyxNQUNUdG9ELEdBQ0UxRSxFQUNKLEdBQVcsTUFBUGtnRyxFQUNGLE9BQU8sS0FJVCxHQUFpQixlQUFia29CLEdBQXFDLFlBQVJsb0IsRUFDL0IsTUFBTyxDQUNMLENBQUMvMEQsR0FBTyswRCxHQUdaLE1BQU04bkIsRUFBZUgsR0FBUXJCLEVBQU80QixJQUFhLENBQUMsRUFDbEQsT0FBSTFqSCxFQUNLQSxFQUFNelIsR0FlUm8wSCxHQUFrQnAwSCxFQUFPaXRHLEdBYkwrbkIsSUFDekIsSUFBSXgxSCxFQUFRLEdBQVN1MUgsRUFBY2g3RCxFQUFXaTdELEdBSzlDLE9BSklBLElBQW1CeDFILEdBQW1DLGlCQUFuQncxSCxJQUVyQ3gxSCxFQUFRLEdBQVN1MUgsRUFBY2g3RCxFQUFXLEdBQUc3aEIsSUFBMEIsWUFBbkI4OEUsRUFBK0IsR0FBS0wsR0FBV0ssS0FBbUJBLEtBRXBHLElBQWhCRSxFQUNLMTFILEVBRUYsQ0FDTCxDQUFDMDFILEdBQWMxMUgsRUFDaEIsR0FHTCxDQTZEQSxPQTVEQSxTQUFTODZILEVBQWdCdDZILEdBQ3ZCLElBQUl3NkgsRUFDSixNQUFNLEdBQ0pDLEVBQUUsTUFDRmxILEVBQVEsQ0FBQyxHQUNQdnpILEdBQVMsQ0FBQyxFQUNkLElBQUt5NkgsRUFDSCxPQUFPLEtBRVQsTUFBTTcyRCxFQUE4RCxPQUFwRDQyRCxFQUF3QmpILEVBQU1tSCxtQkFBNkJGLEVBQXdCLEdBT25HLFNBQVNHLEVBQVNDLEdBQ2hCLElBQUlDLEVBQVdELEVBQ2YsR0FBdUIsbUJBQVpBLEVBQ1RDLEVBQVdELEVBQVFySCxRQUNkLEdBQXVCLGlCQUFacUgsRUFFaEIsT0FBT0EsRUFFVCxJQUFLQyxFQUNILE9BQU8sS0FFVCxNQUFNQyxFWlhMLFNBQXFDQyxFQUFtQixDQUFDLEdBQzlELElBQUlDLEVBTUosT0FMOEUsT0FBbERBLEVBQXdCRCxFQUFpQm4ySCxXQUFnQixFQUFTbzJILEVBQXNCditFLFFBQU8sQ0FBQ3NwQixFQUFLeG1FLEtBRS9Id21FLEVBRDJCZzFELEVBQWlCNUcsR0FBRzUwSCxJQUNyQixDQUFDLEVBQ3BCd21FLElBQ04sQ0FBQyxLQUN5QixDQUFDLENBQ2hDLENZRytCazFELENBQTRCMUgsRUFBTWlCLGFBQ3JEMEcsRUFBa0JqM0gsT0FBT1csS0FBS2sySCxHQUNwQyxJQUFJdmxGLEVBQU11bEYsRUEyQlYsT0ExQkE3MkgsT0FBT1csS0FBS2kySCxHQUFVM3pILFNBQVFpMEgsSUFDNUIsTUFBTTM3SCxFQWxGYyxtQkFEVjQ3SCxFQW1GYVAsRUFBU00sSUFsRkNDLEVBa0ZVN0gsR0FsRks2SCxFQUR4RCxJQUFrQkEsRUFvRlYsR0FBSTU3SCxRQUNGLEdBQXFCLGlCQUFWQSxFQUNULEdBQUlva0UsRUFBT3UzRCxHQUNUNWxGLEVBQU0sR0FBTUEsRUFBS2dsRixFQUFjWSxFQUFVMzdILEVBQU8rekgsRUFBTzN2RCxRQUNsRCxDQUNMLE1BQU15M0QsRUFBb0JqSCxHQUFrQixDQUMxQ2IsU0FDQy96SCxHQUFPOHNCLElBQUssQ0FDYixDQUFDNnVHLEdBQVc3dUcsT0FqRzVCLFlBQWdDZ3ZHLEdBQzlCLE1BQU1yekMsRUFBVXF6QyxFQUFRNytFLFFBQU8sQ0FBQzczQyxFQUFNMjJILElBQVczMkgsRUFBS3RHLE9BQU8yRixPQUFPVyxLQUFLMjJILEtBQVUsSUFDN0VDLEVBQVEsSUFBSWoySCxJQUFJMGlGLEdBQ3RCLE9BQU9xekMsRUFBUW5oRixPQUFNb2hGLEdBQVVDLEVBQU1wN0gsT0FBUzZELE9BQU9XLEtBQUsyMkgsR0FBUXY5SCxRQUNwRSxDQStGa0J5OUgsQ0FBb0JKLEVBQW1CNzdILEdBTXpDKzFDLEVBQU0sR0FBTUEsRUFBSzhsRixHQUxqQjlsRixFQUFJNGxGLEdBQVliLEVBQWdCLENBQzlCRyxHQUFJajdILEVBQ0orekgsU0FLTixNQUVBaCtFLEVBQU0sR0FBTUEsRUFBS2dsRixFQUFjWSxFQUFVMzdILEVBQU8rekgsRUFBTzN2RCxHQUUzRCxJWjdCZ0RueUQsRVkrQkY4akMsRUFBakIybEYsRVo5QmJ6K0UsUUFBTyxDQUFDc3BCLEVBQUt4bUUsS0FDakMsTUFBTW04SCxFQUFtQjMxRCxFQUFJeG1FLEdBSzdCLFFBSjRCbThILEdBQTZELElBQXpDejNILE9BQU9XLEtBQUs4MkgsR0FBa0IxOUgsZ0JBRXJFK25FLEVBQUl4bUUsR0FFTndtRSxDQUFHLEdBQ1R0MEQsR0FSRSxJQUFpREEsQ1lnQ3BELENBQ0EsT0FBT3ZULE1BQU0yTyxRQUFRNHRILEdBQU1BLEVBQUc1NUgsSUFBSTg1SCxHQUFZQSxFQUFTRixFQUN6RCxDQUVGLENBQ3dCa0IsR0FDeEJyQixHQUFnQnA0RCxZQUFjLENBQUMsTUFDL0IsWUM1SE0sR0FBWSxDQUFDLGNBQWUsVUFBVyxVQUFXLFNBc0N4RCxHQS9CQSxTQUFxQm4xRCxFQUFVLENBQUMsS0FBTTlPLEdBQ3BDLE1BQ0l1MkgsWUFBYXVHLEVBQW1CLENBQUMsRUFDakNhLFFBQVNDLEVBQWUsQ0FBQyxFQUN6Qng2RCxRQUFTeTZELEVBQ1RDLE1BQU9DLEVBQWEsQ0FBQyxHQUNuQmp2SCxFQUNKdTdGLEVBQVEsR0FBOEJ2N0YsRUFBUyxJQUMzQ3luSCxFZklPLFNBQTJCQSxHQUN4QyxNQUFNLE9BR0Z2eUQsRUFBUyxDQUNQOHhELEdBQUksRUFFSkMsR0FBSSxJQUVKNzNHLEdBQUksSUFFSjRVLEdBQUksS0FFSmtqRyxHQUFJLE1BQ0wsS0FDRHI1RCxFQUFPLEtBQUksS0FDWHlMLEVBQU8sR0FDTG11RCxFQUNKbHNCLEVBQVEsR0FBOEJrc0IsRUFBYSxJQUMvQ3lILEVBbENzQmg2RCxLQUM1QixNQUFNaTZELEVBQXFCajRILE9BQU9XLEtBQUtxOUQsR0FBUXBoRSxLQUFJdEIsSUFBTyxDQUN4REEsTUFDQTB0RyxJQUFLaHJDLEVBQU8xaUUsUUFDUCxHQUdQLE9BREEyOEgsRUFBbUJqaUYsTUFBSyxDQUFDa2lGLEVBQWFDLElBQWdCRCxFQUFZbHZCLElBQU1tdkIsRUFBWW52QixNQUM3RWl2QixFQUFtQnovRSxRQUFPLENBQUNzcEIsRUFBS3p3QixJQUM5QixHQUFTLENBQUMsRUFBR3l3QixFQUFLLENBQ3ZCLENBQUN6d0IsRUFBSS8xQyxLQUFNKzFDLEVBQUkyM0QsT0FFaEIsQ0FBQyxFQUFFLEVBdUJlb3ZCLENBQXNCcDZELEdBQ3JDcjlELEVBQU9YLE9BQU9XLEtBQUtxM0gsR0FDekIsU0FBUzlILEVBQUc1MEgsR0FFVixNQUFPLHFCQUQ4QixpQkFBaEIwaUUsRUFBTzFpRSxHQUFvQjBpRSxFQUFPMWlFLEdBQU9BLElBQzFCcTdELElBQ3RDLENBQ0EsU0FBUzBoRSxFQUFLLzhILEdBRVosTUFBTyxzQkFEOEIsaUJBQWhCMGlFLEVBQU8xaUUsR0FBb0IwaUUsRUFBTzFpRSxHQUFPQSxHQUMxQjhtRSxFQUFPLE1BQU16TCxJQUNuRCxDQUNBLFNBQVMyaEUsRUFBUXQwRyxFQUFPQyxHQUN0QixNQUFNczBHLEVBQVc1M0gsRUFBSzhNLFFBQVF3VyxHQUM5QixNQUFPLHFCQUE4QyxpQkFBbEIrNUMsRUFBT2g2QyxHQUFzQmc2QyxFQUFPaDZDLEdBQVNBLElBQVEyeUMsdUJBQTRDLElBQWQ0aEUsR0FBcUQsaUJBQTNCdjZELEVBQU9yOUQsRUFBSzQzSCxJQUEwQnY2RCxFQUFPcjlELEVBQUs0M0gsSUFBYXQwRyxHQUFPbStDLEVBQU8sTUFBTXpMLElBQ3JPLENBa0JBLE9BQU8sR0FBUyxDQUNkaDJELE9BQ0FxOUQsT0FBUWc2RCxFQUNSOUgsS0FDQW1JLE9BQ0FDLFVBQ0FucUYsS0F2QkYsU0FBYzd5QyxHQUNaLE9BQUlxRixFQUFLOE0sUUFBUW5TLEdBQU8sRUFBSXFGLEVBQUs1RyxPQUN4QnUrSCxFQUFRaDlILEVBQUtxRixFQUFLQSxFQUFLOE0sUUFBUW5TLEdBQU8sSUFFeEM0MEgsRUFBRzUwSCxFQUNaLEVBbUJFazlILElBbEJGLFNBQWFsOUgsR0FFWCxNQUFNbTlILEVBQVc5M0gsRUFBSzhNLFFBQVFuUyxHQUM5QixPQUFpQixJQUFibTlILEVBQ0t2SSxFQUFHdnZILEVBQUssSUFFYjgzSCxJQUFhOTNILEVBQUs1RyxPQUFTLEVBQ3RCcytILEVBQUsxM0gsRUFBSzgzSCxJQUVaSCxFQUFRaDlILEVBQUtxRixFQUFLQSxFQUFLOE0sUUFBUW5TLEdBQU8sSUFBSUwsUUFBUSxTQUFVLHFCQUNyRSxFQVNFMDdELFFBQ0MwdEMsRUFDTCxDZWhFc0JxMEIsQ0FBa0I1QixHQUNoQzE1RCxFQ2JPLFNBQXVCeTZELEVBQWUsR0FFbkQsR0FBSUEsRUFBYWMsSUFDZixPQUFPZCxFQU1ULE1BQU0vaEUsRUFBWW84RCxHQUFtQixDQUNuQzkwRCxRQUFTeTZELElBRUx6NkQsRUFBVSxJQUFJdzdELEtBTWdCLElBQXJCQSxFQUFVNytILE9BQWUsQ0FBQyxHQUFLNitILEdBQ2hDaDhILEtBQUlpOEgsSUFDZCxNQUFNeHBELEVBQVN2WixFQUFVK2lFLEdBQ3pCLE1BQXlCLGlCQUFYeHBELEVBQXNCLEdBQUdBLE1BQWFBLENBQU0sSUFDekRyeUUsS0FBSyxLQUdWLE9BREFvZ0UsRUFBUXU3RCxLQUFNLEVBQ1B2N0QsQ0FDVCxDRGJrQjA3RCxDQUFjakIsR0FDOUIsSUFBSWtCLEVBQVcsR0FBVSxDQUN2QnhJLGNBQ0F6ekMsVUFBVyxNQUNYazhDLFdBQVksQ0FBQyxFQUVickIsUUFBUyxHQUFTLENBQ2hCbnBHLEtBQU0sU0FDTG9wRyxHQUNIeDZELFVBQ0EwNkQsTUFBTyxHQUFTLENBQUMsRUFBRyxHQUFPQyxJQUMxQjF6QixHQVNILE9BUkEwMEIsRUFBVy8rSCxFQUFLdytDLFFBQU8sQ0FBQ3NwQixFQUFLKzJELElBQWEsR0FBVS8yRCxFQUFLKzJELElBQVdFLEdBQ3BFQSxFQUFTdEMsa0JBQW9CLEdBQVMsQ0FBQyxFQUFHLEdBQTBCLE1BQVRweUIsT0FBZ0IsRUFBU0EsRUFBTW95QixtQkFDMUZzQyxFQUFTRSxZQUFjLFNBQVlsOUgsR0FDakMsT0FBTyxHQUFnQixDQUNyQnk2SCxHQUFJejZILEVBQ0p1ekgsTUFBTzN6SCxNQUVYLEVBQ09vOUgsQ0FDVCxFRXRDTSxHQUFZLENBQUMsV0FFbkIsU0FBU0csR0FBUXQ2QixHQUNmLE9BQXlCLElBQWxCQSxFQUFPN2tHLE1BQ2hCLENBT2UsU0FBU28vSCxHQUFnQnA5SCxHQUN0QyxNQUFNLFFBQ0YwbEYsR0FDRTFsRixFQUNKc29HLEVBQVEsR0FBOEJ0b0csRUFBTyxJQUMvQyxJQUFJcTlILEVBQVczM0MsR0FBVyxHQVExQixPQVBBemhGLE9BQU9XLEtBQUswakcsR0FBT3J1RCxPQUFPL3lDLFNBQVEzSCxJQUU5Qjg5SCxHQURVLFVBQVI5OUgsRUFDVTQ5SCxHQUFRRSxHQUFZcjlILEVBQU1ULEdBQU9vMUgsR0FBVzMwSCxFQUFNVCxJQUVsRCxHQUFHNDlILEdBQVFFLEdBQVk5OUgsRUFBTW8xSCxHQUFXcDFILEtBQU9vMUgsR0FBVzMwSCxFQUFNVCxHQUFLcUIsYUFDbkYsSUFFS3k4SCxDQUNULENDeEJBLE1BQU0sR0FBWSxDQUFDLE9BQVEsT0FBUSx1QkFBd0IsU0FBVSxxQkF5Qi9EQyxHQUFvQmpvRSxJQUN4QixJQUFJa29FLEVBQWlCLEVBQ3JCLE1BQU1DLEVBQWlCLENBQUMsRUFheEIsT0FaSW5vRSxHQUNGQSxFQUFTbnVELFNBQVE4d0MsSUFDZixJQUFJejRDLEVBQU0sR0FDc0IsbUJBQXJCeTRDLEVBQVdoNEMsT0FDcEJULEVBQU0sV0FBV2crSCxJQUNqQkEsR0FBa0IsR0FFbEJoK0gsRUFBTTY5SCxHQUFnQnBsRixFQUFXaDRDLE9BRW5DdzlILEVBQWVqK0gsR0FBT3k0QyxFQUFXdm1DLEtBQUssSUFHbkMrckgsQ0FBYyxFQVNqQkMsR0FBbUIsQ0FBQ3o5SCxFQUFPNGhHLEVBQVF2c0MsS0FDdkMsTUFBTSxXQUNKcW9FLEVBQWEsQ0FBQyxHQUNaMTlILEVBQ0V3OUgsRUFBaUIsR0FDdkIsSUFBSUQsRUFBaUIsRUEwQnJCLE9BekJJbG9FLEdBQ0ZBLEVBQVNudUQsU0FBUXcrRSxJQUNmLElBQUlpNEMsR0FBVSxFQUNkLEdBQTZCLG1CQUFsQmo0QyxFQUFRMWxGLE1BQXNCLENBQ3ZDLE1BQU00OUgsRUFBZSxHQUFTLENBQUMsRUFBRzU5SCxFQUFPMDlILEdBQ3pDQyxFQUFVajRDLEVBQVExbEYsTUFBTTQ5SCxFQUMxQixNQUNFMzVILE9BQU9XLEtBQUs4Z0YsRUFBUTFsRixPQUFPa0gsU0FBUTNILElBQzdCbStILEVBQVduK0gsS0FBU21tRixFQUFRMWxGLE1BQU1ULElBQVFTLEVBQU1ULEtBQVNtbUYsRUFBUTFsRixNQUFNVCxLQUN6RW8rSCxHQUFVLEVBQ1osSUFHQUEsSUFDMkIsbUJBQWxCajRDLEVBQVExbEYsTUFDakJ3OUgsRUFBZWw5SCxLQUFLc2hHLEVBQU8sV0FBVzI3QixNQUV0Q0MsRUFBZWw5SCxLQUFLc2hHLEVBQU93N0IsR0FBZ0IxM0MsRUFBUTFsRixVQUcxQixtQkFBbEIwbEYsRUFBUTFsRixRQUNqQnU5SCxHQUFrQixFQUNwQixJQUdHQyxDQUFjLEVBU2hCLFNBQVMsR0FBa0J0bEYsR0FDaEMsTUFBZ0IsZUFBVEEsR0FBa0MsVUFBVEEsR0FBNkIsT0FBVEEsR0FBMEIsT0FBVEEsQ0FDdkUsQ0FDTyxNQUFNMmxGLEdBQXFCLEtBQzVCQyxHQUF1Qmo3QixHQUN0QkEsRUFHRUEsRUFBT2p4RixPQUFPLEdBQUd6SyxjQUFnQjA3RixFQUFPeGpHLE1BQU0sR0FGNUN3akcsRUFJWCxTQUFTazdCLElBQWEsYUFDcEJDLEVBQVksTUFDWnpLLEVBQUssUUFDTDBLLElBRUEsT0FqR2Uzb0YsRUFpR0FpK0UsRUFoR29CLElBQTVCdHZILE9BQU9XLEtBQUswd0MsR0FBS3QzQyxPQWdHQWdnSSxFQUFlekssRUFBTTBLLElBQVkxSyxFQWpHM0QsSUFBaUJqK0UsQ0FrR2pCLENBQ0EsU0FBUzRvRixHQUF5QjdwRSxHQUNoQyxPQUFLQSxFQUdFLENBQUNyMEQsRUFBTzRoRyxJQUFXQSxFQUFPdnRDLEdBRnhCLElBR1gsQ0FDQSxNQUFNOHBFLEdBQTRCLEVBQ2hDQyxZQUNBcCtILFFBQ0FnK0gsZUFDQUMsY0FFQSxNQUFNSSxFQUFpQkQsRUFBVSxHQUFTLENBQUMsRUFBR3ArSCxFQUFPLENBQ25EdXpILE1BQU93SyxHQUFhLEdBQVMsQ0FBQyxFQUFHLzlILEVBQU8sQ0FDdENnK0gsZUFDQUMsZ0JBR0osSUFBSUssRUFLSixPQUpJRCxHQUFrQkEsRUFBZWhwRSxXQUNuQ2lwRSxFQUFtQkQsRUFBZWhwRSxnQkFDM0JncEUsRUFBZWhwRSxVQUVwQmlwRSxFQUVLLENBQUNELEtBRGVaLEdBQWlCejlILEVBQU9zOUgsR0FBa0JnQixHQUFtQkEsSUFHL0VELENBQWMsRUN2SXZCLE1BSUEsR0FKZSxDQUNiRSxNQUFPLE9BQ1BDLE1BQU8sUUNjVCxHQWhCYSxDQUNYLEdBQUksVUFDSixJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTEMsS0FBTSxVQUNOQyxLQUFNLFVBQ05DLEtBQU0sVUFDTkMsS0FBTSxXQ0VSLEdBaEJlLENBQ2IsR0FBSSxVQUNKLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMSCxLQUFNLFVBQ05DLEtBQU0sVUFDTkMsS0FBTSxVQUNOQyxLQUFNLFdDRVIsR0FoQlksQ0FDVixHQUFJLFVBQ0osSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0xILEtBQU0sVUFDTkMsS0FBTSxVQUNOQyxLQUFNLFVBQ05DLEtBQU0sV0NFUixHQWhCZSxDQUNiLEdBQUksVUFDSixJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTEgsS0FBTSxVQUNOQyxLQUFNLFVBQ05DLEtBQU0sVUFDTkMsS0FBTSxXQ0VSLEdBaEJhLENBQ1gsR0FBSSxVQUNKLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMSCxLQUFNLFVBQ05DLEtBQU0sVUFDTkMsS0FBTSxVQUNOQyxLQUFNLFdDRVIsR0FoQmtCLENBQ2hCLEdBQUksVUFDSixJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTEgsS0FBTSxVQUNOQyxLQUFNLFVBQ05DLEtBQU0sVUFDTkMsS0FBTSxXQ0VSLEdBaEJjLENBQ1osR0FBSSxVQUNKLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMSCxLQUFNLFVBQ05DLEtBQU0sVUFDTkMsS0FBTSxVQUNOQyxLQUFNLFdDWEYsR0FBWSxDQUFDLE9BQVEsb0JBQXFCLGVBV25DQyxHQUFRLENBRW5CNzVHLEtBQU0sQ0FFSjg1RyxRQUFTLHNCQUVUQyxVQUFXLHFCQUVYN3hILFNBQVUsdUJBR1o4eEgsUUFBUyxzQkFHVEMsV0FBWSxDQUNWQyxNQUFPLEdBQU9WLE1BQ2R4c0YsUUFBUyxHQUFPd3NGLE9BR2xCampHLE9BQVEsQ0FFTjRqRyxPQUFRLHNCQUVSenBFLE1BQU8sc0JBQ1AwcEUsYUFBYyxJQUVkcHlILFNBQVUsc0JBQ1ZxeUgsZ0JBQWlCLElBRWpCbnlILFNBQVUsc0JBRVZveUgsbUJBQW9CLHNCQUNwQkMsZ0JBQWlCLElBQ2pCLzFHLE1BQU8sc0JBQ1BnMkcsYUFBYyxJQUNkQyxpQkFBa0IsTUFHVEMsR0FBTyxDQUNsQjE2RyxLQUFNLENBQ0o4NUcsUUFBUyxHQUFPTixNQUNoQk8sVUFBVywyQkFDWDd4SCxTQUFVLDJCQUNWeXlILEtBQU0sNEJBRVJYLFFBQVMsNEJBQ1RDLFdBQVksQ0FDVkMsTUFBTyxVQUNQbHRGLFFBQVMsV0FFWHpXLE9BQVEsQ0FDTjRqRyxPQUFRLEdBQU9YLE1BQ2Y5b0UsTUFBTyw0QkFDUDBwRSxhQUFjLElBQ2RweUgsU0FBVSw0QkFDVnF5SCxnQkFBaUIsSUFDakJueUgsU0FBVSwyQkFDVm95SCxtQkFBb0IsNEJBQ3BCQyxnQkFBaUIsSUFDakIvMUcsTUFBTyw0QkFDUGcyRyxhQUFjLElBQ2RDLGlCQUFrQixNQUd0QixTQUFTRyxHQUFlQyxFQUFROStDLEVBQVcrK0MsRUFBT0MsR0FDaEQsTUFBTUMsRUFBbUJELEVBQVlsQixPQUFTa0IsRUFDeENFLEVBQWtCRixFQUFZTCxNQUFzQixJQUFkSyxFQUN2Q0YsRUFBTzkrQyxLQUNOOCtDLEVBQU81NUgsZUFBZTY1SCxHQUN4QkQsRUFBTzkrQyxHQUFhOCtDLEVBQU9DLEdBQ0osVUFBZC8rQyxFQUNUOCtDLEVBQU9oQixNL0NrTU4sU0FBaUJ2NkcsRUFBTzQ3RyxHQUc3QixHQUZBNTdHLEVBQVErbEcsR0FBZS9sRyxHQUN2QjQ3RyxFQUFjOVYsR0FBYThWLElBQ1EsSUFBL0I1N0csRUFBTXJoQixLQUFLeU8sUUFBUSxPQUNyQjRTLEVBQU0yOUMsT0FBTyxLQUFPLElBQU0zOUMsRUFBTTI5QyxPQUFPLElBQU1pK0QsT0FDeEMsSUFBbUMsSUFBL0I1N0csRUFBTXJoQixLQUFLeU8sUUFBUSxPQUM1QixJQUFLLElBQUl4USxFQUFJLEVBQUdBLEVBQUksRUFBR0EsR0FBSyxFQUMxQm9qQixFQUFNMjlDLE9BQU8vZ0UsS0FBTyxJQUFNb2pCLEVBQU0yOUMsT0FBTy9nRSxJQUFNZy9ILE9BRTFDLElBQXFDLElBQWpDNTdHLEVBQU1yaEIsS0FBS3lPLFFBQVEsU0FDNUIsSUFBSyxJQUFJeFEsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLEdBQUssRUFDMUJvakIsRUFBTTI5QyxPQUFPL2dFLEtBQU8sRUFBSW9qQixFQUFNMjlDLE9BQU8vZ0UsSUFBTWcvSCxFQUcvQyxPQUFPeFYsR0FBZXBtRyxFQUN4QixDK0NqTnFCNjdHLENBQVFOLEVBQU9PLEtBQU1KLEdBQ2IsU0FBZGovQyxJQUNUOCtDLEVBQU9ILEsvQ21LTixTQUFnQnA3RyxFQUFPNDdHLEdBRzVCLEdBRkE1N0csRUFBUStsRyxHQUFlL2xHLEdBQ3ZCNDdHLEVBQWM5VixHQUFhOFYsSUFDUSxJQUEvQjU3RyxFQUFNcmhCLEtBQUt5TyxRQUFRLE9BQ3JCNFMsRUFBTTI5QyxPQUFPLElBQU0sRUFBSWkrRCxPQUNsQixJQUFtQyxJQUEvQjU3RyxFQUFNcmhCLEtBQUt5TyxRQUFRLFNBQWtELElBQWpDNFMsRUFBTXJoQixLQUFLeU8sUUFBUSxTQUNoRSxJQUFLLElBQUl4USxFQUFJLEVBQUdBLEVBQUksRUFBR0EsR0FBSyxFQUMxQm9qQixFQUFNMjlDLE9BQU8vZ0UsSUFBTSxFQUFJZy9ILEVBRzNCLE9BQU94VixHQUFlcG1HLEVBQ3hCLEMrQzlLb0IrN0csQ0FBT1IsRUFBT08sS0FBTUgsSUFHeEMsQ0N4RkEsTUFBTSxHQUFZLENBQUMsYUFBYyxXQUFZLGtCQUFtQixvQkFBcUIsbUJBQW9CLGlCQUFrQixlQUFnQixjQUFlLFdBS3BKSyxHQUFjLENBQ2xCbkcsY0FBZSxhQUVYb0csR0FBb0IsNkNBTVgsU0FBU0MsR0FBaUI1RSxFQUFTdkIsR0FDaEQsTUFBTWhoRixFQUE2QixtQkFBZmdoRixFQUE0QkEsRUFBV3VCLEdBQVd2QixHQUNwRSxXQUNFTCxFQUFhdUcsR0FBaUIsU0FFOUJ0RyxFQUFXLEdBQUUsZ0JBRWJ3RyxFQUFrQixJQUFHLGtCQUNyQkMsRUFBb0IsSUFBRyxpQkFDdkJDLEVBQW1CLElBQUcsZUFDdEJDLEVBQWlCLElBQUcsYUFHcEJDLEVBQWUsR0FBRSxZQUVqQkMsRUFDQUMsUUFBU0MsR0FDUDNuRixFQUNKaXZELEVBQVEsR0FBOEJqdkQsRUFBTSxJQVN4QzRuRixFQUFPaEgsRUFBVyxHQUNsQjhHLEVBQVVDLEdBQVksQ0FBQzVnSSxHQUFXQSxFQUFPeWdJLEVBQWVJLEVBQXpCLE9BQy9CQyxFQUFlLENBQUM5d0gsRUFBWWhRLEVBQU1rUSxFQUFZNHBILEVBQWVpSCxLQUFXLFVBQVMsQ0FDckZuSCxhQUNBNXBILGFBQ0E2cEgsU0FBVThHLEVBQVEzZ0ksR0FFbEJrUSxjQUNDMHBILElBQWV1RyxHQUFvQixDQUNwQ3JHLGVBaERXMTZILEVBZ0RhMDZILEVBQWdCOTVILEVBL0NuQ3FYLEtBQUs2aUQsTUFBYyxJQUFSOTZELEdBQWUsSUErQ2hCLE9BQ2IsQ0FBQyxFQUFHMmhJLEVBQVFMLEdBakRsQixJQUFldGhJLENBaURlLEVBQ3RCNjFELEVBQVcsQ0FDZityRSxHQUFJRixFQUFhVCxFQUFpQixHQUFJLE9BQVEsS0FDOUNZLEdBQUlILEVBQWFULEVBQWlCLEdBQUksS0FBTSxJQUM1Q2EsR0FBSUosRUFBYVIsRUFBbUIsR0FBSSxNQUFPLEdBQy9DYSxHQUFJTCxFQUFhUixFQUFtQixHQUFJLE1BQU8sS0FDL0NjLEdBQUlOLEVBQWFSLEVBQW1CLEdBQUksTUFBTyxHQUMvQ2UsR0FBSVAsRUFBYVAsRUFBa0IsR0FBSSxJQUFLLEtBQzVDZSxVQUFXUixFQUFhUixFQUFtQixHQUFJLEtBQU0sS0FDckRpQixVQUFXVCxFQUFhUCxFQUFrQixHQUFJLEtBQU0sSUFDcERpQixNQUFPVixFQUFhUixFQUFtQixHQUFJLElBQUssS0FDaERtQixNQUFPWCxFQUFhUixFQUFtQixHQUFJLEtBQU0sS0FDakRoaUksT0FBUXdpSSxFQUFhUCxFQUFrQixHQUFJLEtBQU0sR0FBS0wsSUFDdER3QixRQUFTWixFQUFhUixFQUFtQixHQUFJLEtBQU0sSUFDbkRxQixTQUFVYixFQUFhUixFQUFtQixHQUFJLEtBQU0sRUFBR0osSUFFdkRycEUsUUFBUyxDQUNQK2lFLFdBQVksVUFDWjVwSCxXQUFZLFVBQ1o2cEgsU0FBVSxVQUNWM3BILFdBQVksVUFDWjRwSCxjQUFlLFlBR25CLE9BQU8sR0FBVSxHQUFTLENBQ3hCMkcsZUFDQUUsVUFDQS9HLGFBQ0FDLFdBQ0F3RyxrQkFDQUMsb0JBQ0FDLG1CQUNBQyxrQkFDQ3ZyRSxHQUFXaXpDLEVBQU8sQ0FDbkJ3ckIsT0FBTyxHQUVYLENDdEZBLFNBQVNrTyxNQUFnQmpuRSxHQUN2QixNQUFPLENBQUMsR0FBR0EsRUFBRyxRQUFRQSxFQUFHLFFBQVFBLEVBQUcsUUFBUUEsRUFBRyx1QkFBNkMsR0FBR0EsRUFBRyxRQUFRQSxFQUFHLFFBQVFBLEVBQUcsUUFBUUEsRUFBRyx3QkFBZ0QsR0FBR0EsRUFBRyxRQUFRQSxFQUFHLFFBQVFBLEVBQUcsU0FBU0EsRUFBRywwQkFBbUQ5NUQsS0FBSyxJQUNyUixDQUdBLE1BQ0EsR0FEZ0IsQ0FBQyxPQUFRK2dJLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFH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NmtELEdBQUssQ0FBQ2hMLEtBQUssV0FBV253QixRQUFTMXBCLEVBQUFBLGNBQUNvakosR0FBTyxRQUN4Q3BqSixFQUFBQSxjQUFDNmtELEdBQUssQ0FBQ2hMLEtBQUssVUFBVW53QixRQUFTMXBCLEVBQUFBLGNBQUNxakosR0FBTSxRQUN0Q3JqSixFQUFBQSxjQUFDNmtELEdBQUssQ0FBQ2hMLEtBQUssc0JBQXNCbndCLFFBQVMxcEIsRUFBQUEsY0FBQ3NqSixHQUFnQixRQUM1RHRqSixFQUFBQSxjQUFDNmtELEdBQUssQ0FBQ2hMLEtBQUssVUFBVW53QixRQUFTMXBCLEVBQUFBLGNBQUN1akosR0FBYSxTQUUvQ3ZqSixFQUFBQSxjQUFBLE9BQUtDLFVBQVUsUUFDYkQsRUFBQUEsY0FBQSxPQUFLQyxVQUFVLFVBTXZCLDRHQzFEQSxTQWRZLFdBQ1IsUUFBMkU4cEQsTUFBbkM3cUIsRUFBQUEsRUFBQUEsVUFBUyw2QkFBMEIsczVCQUFwRTZ4RSxFQUFZaG5ELEVBQUEsR0FBRXk1RixFQUFlejVGLEVBQUEsR0FDcEMsT0FDSS9wRCxFQUFBQSxjQUFDODZJLEdBQWM3bkcsU0FBUSxDQUN2Qmx6QyxNQUFPLENBQ0h5cEgsa0JBQW1CZzZCLEVBQ25CajZCLGtCQUFtQnhZLElBR25CL3dHLEVBQUFBLGNBQUMraUosR0FBVSxNQUl2QixFQ1RXVSxFQUFBQSxXQUFvQnA5SSxTQUFTcTlJLGVBQWUsU0FDbERyL0ksT0FBT3JFLEVBQUFBLGNBQUMyakosR0FBRyxDQUNYeitILE9BQVEsR0FDUnc4SCxNQUFNLHlCQUNObjhILEtBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2NvbXBvbmVudHMvRGlnaXRyb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL0Rpc3BsYXkuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL0tleVBhZENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL3Njc3MvbWFpbi5zY3NzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2xpZW50LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1ydW50aW1lLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3JlYWN0anMvd2VicGFjay9ydW50aW1lL2NyZWF0ZSBmYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9yZWFjdGpzL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9yZWFjdGpzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3JlYWN0anMvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQHJlbWl4LXJ1bi9yb3V0ZXIvZGlzdC9yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9zY3NzL21haW4uc2Nzcz82ZDI1Iiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL0JhY2tUb1RvcC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2NvbXBvbmVudHMvS2Fsb3JpamUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL09kbm9zaS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb250ZXh0L01vdGlvbkNvbmZpZ0NvbnRleHQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTW90aW9uQ29udGV4dC9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvY29udGV4dC9QcmVzZW5jZUNvbnRleHQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2lzLWJyb3dzZXIubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS1pc29tb3JwaGljLWVmZmVjdC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvY29udGV4dC9MYXp5Q29udGV4dC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvaXMtcmVmLW9iamVjdC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL2lzLXZhcmlhbnQtbGFiZWwubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9pcy1hbmltYXRpb24tY29udHJvbHMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy92YXJpYW50LXByb3BzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvdXRpbHMvaXMtY29udHJvbGxpbmctdmFyaWFudHMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTW90aW9uQ29udGV4dC9jcmVhdGUubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9kZWZpbml0aW9ucy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvY29udGV4dC9MYXlvdXRHcm91cENvbnRleHQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvU3dpdGNoTGF5b3V0R3JvdXBDb250ZXh0Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vdXRpbHMvc3ltYm9sLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vaW5kZXgubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9sb2FkLWZlYXR1cmVzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb250ZXh0L01vdGlvbkNvbnRleHQvdXRpbHMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy91c2UtdmlzdWFsLWVsZW1lbnQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy91c2UtbW90aW9uLXJlZi5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS9tb3Rpb24tcHJveHkubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvbG93ZXJjYXNlLWVsZW1lbnRzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3V0aWxzL2lzLXN2Zy1jb21wb25lbnQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vc3R5bGVzL3NjYWxlLWNvcnJlY3Rpb24ubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3V0aWxzL3RyYW5zZm9ybS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL3V0aWxzL2lzLWZvcmNlZC1tb3Rpb24tdmFsdWUubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3V0aWxzL2lzLW1vdGlvbi12YWx1ZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2h0bWwvdXRpbHMvYnVpbGQtdHJhbnNmb3JtLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3V0aWxzL2lzLWNzcy12YXJpYWJsZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS92YWx1ZS10eXBlcy9nZXQtYXMtdHlwZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvY2xhbXAubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3R5cGVzL251bWJlcnMvaW5kZXgubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3R5cGVzL3V0aWxzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS90eXBlcy9udW1iZXJzL3VuaXRzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3ZhbHVlLXR5cGVzL3R5cGUtaW50Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3ZhbHVlLXR5cGVzL251bWJlci5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2h0bWwvdXRpbHMvYnVpbGQtc3R5bGVzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvaHRtbC91dGlscy9jcmVhdGUtcmVuZGVyLXN0YXRlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvaHRtbC91c2UtcHJvcHMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy92YWxpZC1wcm9wLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3V0aWxzL2ZpbHRlci1wcm9wcy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy91dGlscy90cmFuc2Zvcm0tb3JpZ2luLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL3V0aWxzL3BhdGgubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvYnVpbGQtYXR0cnMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvY3JlYXRlLXJlbmRlci1zdGF0ZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy91dGlscy9pcy1zdmctdGFnLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL3VzZS1wcm9wcy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS91c2UtcmVuZGVyLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3V0aWxzL2NhbWVsLXRvLWRhc2gubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3V0aWxzL3JlbmRlci5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy91dGlscy9jYW1lbC1jYXNlLWF0dHJzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL3V0aWxzL3JlbmRlci5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2h0bWwvdXRpbHMvc2NyYXBlLW1vdGlvbi12YWx1ZXMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvc2NyYXBlLW1vdGlvbi12YWx1ZXMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9yZXNvbHZlLXZhcmlhbnRzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vdXRpbHMvaXMta2V5ZnJhbWVzLXRhcmdldC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvcmVzb2x2ZS12YWx1ZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdmFsdWUvdXRpbHMvcmVzb2x2ZS1tb3Rpb24tdmFsdWUubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy91c2UtdmlzdWFsLXN0YXRlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy91c2UtY29uc3RhbnQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL25vb3AubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2ZyYW1lbG9vcC9yZW5kZXItc3RlcC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZnJhbWVsb29wL2JhdGNoZXIubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2ZyYW1lbG9vcC9mcmFtZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy9jb25maWctbW90aW9uLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvaHRtbC9jb25maWctbW90aW9uLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9ldmVudHMvYWRkLWRvbS1ldmVudC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZXZlbnRzL3V0aWxzL2lzLXByaW1hcnktcG9pbnRlci5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZXZlbnRzL2V2ZW50LWluZm8ubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2V2ZW50cy9hZGQtcG9pbnRlci1ldmVudC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvcGlwZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZ2VzdHVyZXMvZHJhZy91dGlscy9sb2NrLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vZmVhdHVyZXMvRmVhdHVyZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZ2VzdHVyZXMvaG92ZXIubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL3V0aWxzL2lzLW5vZGUtb3ItY2hpbGQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL3ByZXNzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vZmVhdHVyZXMvdmlld3BvcnQvb2JzZXJ2ZXJzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vZmVhdHVyZXMvdmlld3BvcnQvaW5kZXgubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9nZXN0dXJlcy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZ2VzdHVyZXMvZm9jdXMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3NoYWxsb3ctY29tcGFyZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL3Jlc29sdmUtZHluYW1pYy12YXJpYW50cy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL29wdGltaXplZC1hcHBlYXIvZGF0YS1pZC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvZXJyb3JzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy90aW1lLWNvbnZlcnNpb24ubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2Vhc2luZy91dGlscy9pcy1iZXppZXItZGVmaW5pdGlvbi5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL2FuaW1hdG9ycy93YWFwaS9lYXNpbmcubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2Vhc2luZy9jdWJpYy1iZXppZXIubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2Vhc2luZy9lYXNlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9lYXNpbmcvdXRpbHMvaXMtZWFzaW5nLWFycmF5Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9lYXNpbmcvbW9kaWZpZXJzL21pcnJvci5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZWFzaW5nL21vZGlmaWVycy9yZXZlcnNlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9lYXNpbmcvY2lyYy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZWFzaW5nL2JhY2subWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2Vhc2luZy91dGlscy9tYXAubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2Vhc2luZy9hbnRpY2lwYXRlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS90eXBlcy9jb2xvci91dGlscy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdmFsdWUvdHlwZXMvY29sb3IvcmdiYS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdmFsdWUvdHlwZXMvY29sb3IvaGV4Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS90eXBlcy9jb2xvci9oc2xhLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS90eXBlcy9jb2xvci9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvbWl4Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9oc2xhLXRvLXJnYmEubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL21peC1jb2xvci5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdmFsdWUvdHlwZXMvY29tcGxleC9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvbWl4LWNvbXBsZXgubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3Byb2dyZXNzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9pbnRlcnBvbGF0ZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL2dlbmVyYXRvcnMva2V5ZnJhbWVzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9vZmZzZXRzL3RpbWUubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL29mZnNldHMvZGVmYXVsdC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvb2Zmc2V0cy9maWxsLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy92ZWxvY2l0eS1wZXItc2Vjb25kLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vZ2VuZXJhdG9ycy91dGlscy92ZWxvY2l0eS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL2dlbmVyYXRvcnMvc3ByaW5nL2ZpbmQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9nZW5lcmF0b3JzL3NwcmluZy9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL2dlbmVyYXRvcnMvaW5lcnRpYS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL2FuaW1hdG9ycy9qcy9kcml2ZXItZnJhbWVsb29wLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vZ2VuZXJhdG9ycy91dGlscy9jYWxjLWR1cmF0aW9uLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vYW5pbWF0b3JzL2pzL2luZGV4Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vYW5pbWF0b3JzL3dhYXBpL2NyZWF0ZS1hY2NlbGVyYXRlZC1hbmltYXRpb24ubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL21lbW8ubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9kZWZhdWx0LXRyYW5zaXRpb25zLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vdXRpbHMvaXMtYW5pbWF0YWJsZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdmFsdWUvdHlwZXMvY29tcGxleC9maWx0ZXIubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvZGVmYXVsdHMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvYW5pbWF0YWJsZS1ub25lLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9pcy16ZXJvLXZhbHVlLXN0cmluZy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL3V0aWxzL2lzLW5vbmUubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy90cmFuc2l0aW9ucy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL2ludGVyZmFjZXMvbW90aW9uLXZhbHVlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vdXRpbHMva2V5ZnJhbWVzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vYW5pbWF0b3JzL2luc3RhbnQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9hbmltYXRvcnMvd2FhcGkvaW5kZXgubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9hbmltYXRvcnMvd2FhcGkvdXRpbHMvZ2V0LWZpbmFsLWtleWZyYW1lLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS91c2Utd2lsbC1jaGFuZ2UvaXMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2lzLW51bWVyaWNhbC1zdHJpbmcubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2FycmF5Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9zdWJzY3JpcHRpb24tbWFuYWdlci5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdmFsdWUvaW5kZXgubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvdGVzdC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS92YWx1ZS10eXBlcy9kaW1lbnNpb25zLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3ZhbHVlLXR5cGVzL3R5cGUtYXV0by5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS92YWx1ZS10eXBlcy9maW5kLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvdXRpbHMvc2V0dGVycy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL2ludGVyZmFjZXMvdmlzdWFsLWVsZW1lbnQtdGFyZ2V0Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vaW50ZXJmYWNlcy92aXN1YWwtZWxlbWVudC12YXJpYW50Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvdXRpbHMvYW5pbWF0aW9uLXN0YXRlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vaW50ZXJmYWNlcy92aXN1YWwtZWxlbWVudC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL2ZlYXR1cmVzL2FuaW1hdGlvbi9leGl0Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vZmVhdHVyZXMvYW5pbWF0aW9ucy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL2ZlYXR1cmVzL2FuaW1hdGlvbi9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvZGlzdGFuY2UubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL3Bhbi9QYW5TZXNzaW9uLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL2dlb21ldHJ5L2RlbHRhLWNhbGMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL2RyYWcvdXRpbHMvY29uc3RyYWludHMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvbW9kZWxzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL3V0aWxzL2VhY2gtYXhpcy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9nZW9tZXRyeS9jb252ZXJzaW9uLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL3V0aWxzL2hhcy10cmFuc2Zvcm0ubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvZGVsdGEtYXBwbHkubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vdXRpbHMvbWVhc3VyZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZ2VzdHVyZXMvZHJhZy9WaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9nZXN0dXJlcy9wYW4vaW5kZXgubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vbm9kZS9zdGF0ZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9zdHlsZXMvc2NhbGUtYm9yZGVyLXJhZGl1cy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9zdHlsZXMvc2NhbGUtYm94LXNoYWRvdy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL2ZlYXR1cmVzL2xheW91dC9NZWFzdXJlTGF5b3V0Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb21wb25lbnRzL0FuaW1hdGVQcmVzZW5jZS91c2UtcHJlc2VuY2UubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vYW5pbWF0aW9uL21peC12YWx1ZXMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvY29weS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9nZW9tZXRyeS9kZWx0YS1yZW1vdmUubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvdXRpbHMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vc2hhcmVkL3N0YWNrLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL3N0eWxlcy90cmFuc2Zvcm0ubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9jb21wYXJlLWJ5LWRlcHRoLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvdXRpbHMvZmxhdC10cmVlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL25vZGUvY3JlYXRlLXByb2plY3Rpb24tbm9kZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZGVidWcvcmVjb3JkLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3V0aWxzL2lzLXN2Zy1lbGVtZW50Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9kZWxheS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL2ludGVyZmFjZXMvc2luZ2xlLXZhbHVlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL25vZGUvRG9jdW1lbnRQcm9qZWN0aW9uTm9kZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9ub2RlL0hUTUxQcm9qZWN0aW9uTm9kZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL2ZlYXR1cmVzL2RyYWcubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL2RyYWcvaW5kZXgubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvY3NzLXZhcmlhYmxlcy1jb252ZXJzaW9uLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3V0aWxzL3VuaXQtY29udmVyc2lvbi5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS91dGlscy9wYXJzZS1kb20tdmFyaWFudC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvcmVkdWNlZC1tb3Rpb24vc3RhdGUubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdG9yZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL1Zpc3VhbEVsZW1lbnQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3JlZHVjZWQtbW90aW9uL2luZGV4Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvdXRpbHMvbW90aW9uLXZhbHVlcy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS9ET01WaXN1YWxFbGVtZW50Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvaHRtbC9IVE1MVmlzdWFsRWxlbWVudC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy9TVkdWaXN1YWxFbGVtZW50Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL2NyZWF0ZS12aXN1YWwtZWxlbWVudC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS9tb3Rpb24ubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9sYXlvdXQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvY3JlYXRlLWNvbmZpZy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL1Rham1lci5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvc0Vycm9yLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2NsYXNzZXMvRm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL0Jsb2IuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vY29tbW9uL3V0aWxzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90b1VSTEVuY29kZWRGb3JtLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NIZWFkZXJzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcGVlZG9tZXRlci5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlUHJvdG9jb2wuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMvYWRhcHRlcnMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9udWxsLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZW52L2RhdGEuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9IdHRwU3RhdHVzQ29kZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2NvbXBvbmVudHMvR2xvYmFsQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2NvbXBvbmVudHMvTnV0cml0aW9uLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9jb21wb3NlQ2xhc3Nlcy9jb21wb3NlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2Zvcm1hdE11aUVycm9yTWVzc2FnZS9mb3JtYXRNdWlFcnJvck1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9jbGFtcC9jbGFtcC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jb2xvck1hbmlwdWxhdG9yLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L2Vtb3Rpb24tbWVtb2l6ZS5lc20uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvZW1vdGlvbi1pcy1wcm9wLXZhbGlkLmVzbS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3NoZWV0L2Rpc3QvZW1vdGlvbi1zaGVldC5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvVXRpbGl0eS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvVG9rZW5pemVyLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9FbnVtLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9TZXJpYWxpemVyLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9QYXJzZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9jYWNoZS9kaXN0L2Vtb3Rpb24tY2FjaGUuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL01pZGRsZXdhcmUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91bml0bGVzcy9kaXN0L2Vtb3Rpb24tdW5pdGxlc3MuZXNtLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc2VyaWFsaXplL2Rpc3QvZW1vdGlvbi1zZXJpYWxpemUuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9oYXNoL2Rpc3QvZW1vdGlvbi1oYXNoLmVzbS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzL2Rpc3QvZW1vdGlvbi11c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3JlYWN0L2Rpc3QvZW1vdGlvbi1lbGVtZW50LWMzOTYxN2Q4LmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdXRpbHMvZGlzdC9lbW90aW9uLXV0aWxzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc3R5bGVkL2Jhc2UvZGlzdC9lbW90aW9uLXN0eWxlZC1iYXNlLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc3R5bGVkL2Rpc3QvZW1vdGlvbi1zdHlsZWQuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9kZWVwbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlVGhlbWUvY3JlYXRlQnJlYWtwb2ludHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlVGhlbWUvc2hhcGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vYnJlYWtwb2ludHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9jYXBpdGFsaXplL2NhcGl0YWxpemUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3BhY2luZy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9tZW1vaXplLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NvbXBvc2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vYm9yZGVycy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jc3NHcmlkLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3BhbGV0dGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc2l6aW5nLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3N0eWxlRnVuY3Rpb25TeC9kZWZhdWx0U3hDb25maWcuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGVGdW5jdGlvblN4L3N0eWxlRnVuY3Rpb25TeC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9jcmVhdGVUaGVtZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9jcmVhdGVTcGFjaW5nLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3Byb3BzVG9DbGFzc0tleS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVTdHlsZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9ncmV5LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvcHVycGxlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvcmVkLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvb3JhbmdlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvYmx1ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2xpZ2h0Qmx1ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2dyZWVuLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvY3JlYXRlUGFsZXR0ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZVR5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9zaGFkb3dzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvY3JlYXRlVHJhbnNpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy96SW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVUaGVtZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2RlZmF1bHRUaGVtZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZU1peGlucy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2lkZW50aWZpZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9zdHlsZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N0eWxlZC1lbmdpbmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9nZXRPdmVybGF5QWxwaGEuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9yZXNvbHZlUHJvcHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vdXNlVGhlbWVQcm9wcy9nZXRUaGVtZVByb3BzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lV2l0aG91dERlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vdXNlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy91c2VUaGVtZVByb3BzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lUHJvcHMvdXNlVGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL0NsYXNzTmFtZUdlbmVyYXRvci9DbGFzc05hbWVHZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9nZW5lcmF0ZVV0aWxpdHlDbGFzcy9nZW5lcmF0ZVV0aWxpdHlDbGFzcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvUGFwZXIvcGFwZXJDbGFzc2VzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9QYXBlci9QYXBlci5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUZvcmtSZWYvdXNlRm9ya1JlZi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3NldFJlZi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL293bmVyV2luZG93L293bmVyV2luZG93LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vb3duZXJEb2N1bWVudC9vd25lckRvY3VtZW50LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vdXNlRW5oYW5jZWRFZmZlY3QvdXNlRW5oYW5jZWRFZmZlY3QuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvVGV4dGFyZWFBdXRvc2l6ZS9UZXh0YXJlYUF1dG9zaXplLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZGVib3VuY2UvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXRpbHMvaXNIb3N0Q29tcG9uZW50LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtQ29udHJvbC9Gb3JtQ29udHJvbENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2NhcGl0YWxpemUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3VzZUZvcmtSZWYuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3VzZUVuaGFuY2VkRWZmZWN0LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vcmVhY3QvZGlzdC9lbW90aW9uLXJlYWN0LmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9zdHlsZWQtZW5naW5lL0dsb2JhbFN0eWxlcy9HbG9iYWxTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vR2xvYmFsU3R5bGVzL0dsb2JhbFN0eWxlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvR2xvYmFsU3R5bGVzL0dsb2JhbFN0eWxlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5wdXRCYXNlL3V0aWxzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JbnB1dEJhc2UvaW5wdXRCYXNlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5wdXRCYXNlL0lucHV0QmFzZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VFdmVudENhbGxiYWNrL3VzZUV2ZW50Q2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VJc0ZvY3VzVmlzaWJsZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvdXNlSXNGb2N1c1Zpc2libGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb25Hcm91cENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS91dGlscy9DaGlsZE1hcHBpbmcuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uR3JvdXAuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b25CYXNlL3RvdWNoUmlwcGxlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS9Ub3VjaFJpcHBsZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS9SaXBwbGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0J1dHRvbkJhc2UvYnV0dG9uQmFzZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0J1dHRvbkJhc2UvQnV0dG9uQmFzZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSWNvbkJ1dHRvbi9pY29uQnV0dG9uQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSWNvbkJ1dHRvbi9JY29uQnV0dG9uLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy9TZWFyY2hSZWNlcHQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL1NlYXJjaE51dHJpdGlvbi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2NvbXBvbmVudHMvUmVzdWx0c051dHJpdGlvbi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2NvbXBvbmVudHMvUmVzdWx0c1JlY2lwZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2NvbXBvbmVudHMvUmVjZXB0aS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2NvbXBvbmVudHMvVnJlbWVTYXRpLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy9OYXZpZ2F0aW9uLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvQXBwLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgRGlzcGxheSBmcm9tICcuL0Rpc3BsYXknXHJcbmltcG9ydCBLZXlQYWRDb21wb25lbnQgZnJvbSAnLi9LZXlQYWRDb21wb25lbnQnXHJcblxyXG5jbGFzcyBEaWdpdHJvbiBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgc3RhdGUgPSB7XHJcbiAgICByZXN1bHQ6IFwiXCJcclxuICB9XHJcblxyXG4gIG9uQ2xpY2sgPSBidXR0b24gPT4ge1xyXG4gICAgaWYgKGJ1dHRvbiA9PT0gXCI9XCIpIHtcclxuICAgICAgdGhpcy5jYWxjdWxhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBlbHNlIGlmIChidXR0b24gPT09IFwiQ1wiKSB7XHJcbiAgICAgIHRoaXMucmVzZXQoKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZWxzZSBpZiAoYnV0dG9uID09PSBcIkNFXCIpIHtcclxuICAgICAgdGhpcy5iYWNrc3BhY2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgcmVzdWx0OiB0aGlzLnN0YXRlLnJlc3VsdCArIGJ1dHRvblxyXG4gICAgICB9KVxyXG5cclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjYWxjdWxhdGUgPSAoKSA9PiB7XHJcbiAgICB2YXIgY2hlY2tSZXN1bHQgPSAnJ1xyXG4gICAgaWYgKHRoaXMuc3RhdGUucmVzdWx0LmluY2x1ZGVzKCctLScpKSB7XHJcbiAgICAgIGNoZWNrUmVzdWx0ID0gdGhpcy5zdGF0ZS5yZXN1bHQucmVwbGFjZSgnLS0nLCAnKycpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjaGVja1Jlc3VsdCA9IHRoaXMuc3RhdGUucmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHJlc3VsdDogKGV2YWwoY2hlY2tSZXN1bHQpIHx8IFwiXCIpICsgXCJcIlxyXG4gICAgICB9KVxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICByZXN1bHQ6IFwiZXJyb3JcIlxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHJlc2V0ID0gKCkgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIHJlc3VsdDogXCJcIlxyXG4gICAgfSlcclxuICB9O1xyXG5cclxuICBiYWNrc3BhY2UgPSAoKSA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgcmVzdWx0OiB0aGlzLnN0YXRlLnJlc3VsdC5zbGljZSgwLCAtMSlcclxuICAgIH0pXHJcbiAgfTtcclxuICByZW5kZXIoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FsY3VsYXRvci1ib2R5XCI+XHJcblxyXG4gICAgICAgICAgPERpc3BsYXkgcmVzdWx0PXt0aGlzLnN0YXRlLnJlc3VsdH0gLz5cclxuICAgICAgICAgIDxLZXlQYWRDb21wb25lbnQgb25DbGljaz17dGhpcy5vbkNsaWNrfSAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IERpZ2l0cm9uO1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXHJcblxyXG5jbGFzcyBEaXNwbGF5IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICByZW5kZXIoKSB7XHJcbiAgICBsZXQgeyByZXN1bHQgfSA9IHRoaXMucHJvcHM7XHJcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJyZXN1bHRcIj4ge3Jlc3VsdH0gPC9kaXY+XHJcbiAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IERpc3BsYXkiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5cclxuXHJcbmNsYXNzIEtleVBhZENvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7IFxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidXR0b25cIj5cclxuICBcclxuICAgXHJcbiAgICAgICAgICA8YnV0dG9uIG5hbWU9XCJDXCIgb25DbGljaz17ZSA9PiB0aGlzLnByb3BzLm9uQ2xpY2soZS50YXJnZXQubmFtZSl9IGxhYmVsPVwiQ1wiIHZhbHVlPVwiY2xlYXJcIiA+QzwvYnV0dG9uPiBcclxuICAgICAgICAgIDxidXR0b24gbmFtZT1cIkNFXCIgb25DbGljaz17ZSA9PiB0aGlzLnByb3BzLm9uQ2xpY2soZS50YXJnZXQubmFtZSl9PkNFPC9idXR0b24+XHJcbiAgICAgICAgICA8YnV0dG9uIG5hbWU9XCIoXCIgb25DbGljaz17ZSA9PiB0aGlzLnByb3BzLm9uQ2xpY2soZS50YXJnZXQubmFtZSl9Pig8L2J1dHRvbj5cclxuICAgICAgICAgIDxidXR0b24gbmFtZT1cIilcIiBvbkNsaWNrPXtlID0+IHRoaXMucHJvcHMub25DbGljayhlLnRhcmdldC5uYW1lKX0+KTwvYnV0dG9uPlxyXG5cclxuICAgICAgICAgIDxidXR0b24gbmFtZT1cIjdcIiBvbkNsaWNrPXtlID0+IHRoaXMucHJvcHMub25DbGljayhlLnRhcmdldC5uYW1lKX0gbGFiZWw9XCI3XCIgdmFsdWU9XCI3XCI+NzwvYnV0dG9uPiAgXHJcbiAgICAgICAgICA8YnV0dG9uIG5hbWU9XCI4XCIgb25DbGljaz17ZSA9PiB0aGlzLnByb3BzLm9uQ2xpY2soZS50YXJnZXQubmFtZSl9IGxhYmVsPVwiOFwiIHZhbHVlPVwiOFwiPjg8L2J1dHRvbj4gXHJcbiAgICAgICAgICA8YnV0dG9uIG5hbWU9XCI5XCIgb25DbGljaz17ZSA9PiB0aGlzLnByb3BzLm9uQ2xpY2soZS50YXJnZXQubmFtZSl9IGxhYmVsPVwiOVwiIHZhbHVlPVwiOVwiID45PC9idXR0b24+XHJcbiAgICAgICAgICA8YnV0dG9uIG5hbWU9XCIrXCIgb25DbGljaz17ZSA9PiB0aGlzLnByb3BzLm9uQ2xpY2soZS50YXJnZXQubmFtZSl9IGxhYmVsPVwiK1wiIHNpemU9XCIyXCIgdmFsdWU9XCIrXCIgPis8L2J1dHRvbj4gXHJcblxyXG4gICAgICAgICAgPGJ1dHRvbiBuYW1lPVwiNFwiIG9uQ2xpY2s9e2UgPT4gdGhpcy5wcm9wcy5vbkNsaWNrKGUudGFyZ2V0Lm5hbWUpfSBsYWJlbD1cIjRcIiB2YWx1ZT1cIjRcIj40PC9idXR0b24+ICBcclxuICAgICAgICAgIDxidXR0b24gbmFtZT1cIjVcIiBvbkNsaWNrPXtlID0+IHRoaXMucHJvcHMub25DbGljayhlLnRhcmdldC5uYW1lKX0gbGFiZWw9XCI1XCIgdmFsdWU9XCI1XCIgPjU8L2J1dHRvbj4gXHJcbiAgICAgICAgICA8YnV0dG9uIG5hbWU9XCI2XCIgb25DbGljaz17ZSA9PiB0aGlzLnByb3BzLm9uQ2xpY2soZS50YXJnZXQubmFtZSl9IGxhYmVsPVwiNlwiIHZhbHVlPVwiNlwiID42PC9idXR0b24+IFxyXG4gICAgICAgICAgPGJ1dHRvbiBuYW1lPVwiLVwiIG9uQ2xpY2s9e2UgPT4gdGhpcy5wcm9wcy5vbkNsaWNrKGUudGFyZ2V0Lm5hbWUpfSBsYWJlbD1cIi1cIiB2YWx1ZT1cIi1cIj4tPC9idXR0b24+ICBcclxuXHJcbiAgICAgICAgICA8YnV0dG9uIG5hbWU9XCIxXCIgb25DbGljaz17ZSA9PiB0aGlzLnByb3BzLm9uQ2xpY2soZS50YXJnZXQubmFtZSl9IGxhYmVsPVwiMVwiIHZhbHVlPVwiMVwiID4xPC9idXR0b24+IFxyXG4gICAgICAgICAgPGJ1dHRvbiBuYW1lPVwiMlwiIG9uQ2xpY2s9e2UgPT4gdGhpcy5wcm9wcy5vbkNsaWNrKGUudGFyZ2V0Lm5hbWUpfSBsYWJlbD1cIjJcIiB2YWx1ZT1cIjJcIiA+MjwvYnV0dG9uPiBcclxuICAgICAgICAgIDxidXR0b24gbmFtZT1cIjNcIiBvbkNsaWNrPXtlID0+IHRoaXMucHJvcHMub25DbGljayhlLnRhcmdldC5uYW1lKX0gbGFiZWw9XCIzXCIgdmFsdWU9XCIzXCIgPjM8L2J1dHRvbj5cclxuICAgICAgICAgIDxidXR0b24gbmFtZT1cIipcIiBvbkNsaWNrPXtlID0+IHRoaXMucHJvcHMub25DbGljayhlLnRhcmdldC5uYW1lKX0gbGFiZWw9XCJ4XCIgdmFsdWU9XCIqXCIgPio8L2J1dHRvbj4gXHJcblxyXG4gICAgICAgICAgPGJ1dHRvbiBuYW1lPVwiLlwiIG9uQ2xpY2s9e2UgPT4gdGhpcy5wcm9wcy5vbkNsaWNrKGUudGFyZ2V0Lm5hbWUpfSBsYWJlbD1cIi5cIiB2YWx1ZT1cIi5cIiA+LjwvYnV0dG9uPiBcclxuICAgICAgICAgIDxidXR0b24gbmFtZT1cIjBcIiBvbkNsaWNrPXtlID0+IHRoaXMucHJvcHMub25DbGljayhlLnRhcmdldC5uYW1lKX0gbGFiZWw9XCIwXCIgdmFsdWU9XCIwXCIgPjA8L2J1dHRvbj4gXHJcbiAgICAgICAgICA8YnV0dG9uIG5hbWU9XCI9XCIgb25DbGljaz17ZSA9PiB0aGlzLnByb3BzLm9uQ2xpY2soZS50YXJnZXQubmFtZSl9IGxhYmVsPVwiPVwiIHNpemU9XCIyXCIgdmFsdWU9XCJlcXVhbFwiID49PC9idXR0b24+IFxyXG4gICAgICAgICAgPGJ1dHRvbiBuYW1lPVwiL1wiIG9uQ2xpY2s9e2UgPT4gdGhpcy5wcm9wcy5vbkNsaWNrKGUudGFyZ2V0Lm5hbWUpfSBsYWJlbD1cIi9cIiB2YWx1ZT1cIi9cIiA+LzwvYnV0dG9uPiBcclxuXHJcbiAgICAgICBcclxuXHJcbiAgICAgIFxyXG4gICAgICA8L2Rpdj5cclxuICAgICl9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgS2V5UGFkQ29tcG9uZW50OyIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuY29udGFpbmVye2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47bWFyZ2luOmF1dG87bWF4LXdpZHRoOjY1MHB4O21pbi13aWR0aDo2NTBweDtoZWlnaHQ6MTIwMHB4O2JhY2tncm91bmQtY29sb3I6I2UwYjhhMDt0ZXh0LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn0uY29udGFpbmVyIGhye3dpZHRoOjY0NXB4fS5jb250YWluZXIgLmNvbG9yQm94e2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6YmFzZWxpbmU7YWxpZ24taXRlbXM6ZW5kO3dpZHRoOjUwMHB4O2hlaWdodDozNDVweDtiYWNrZ3JvdW5kLWNvbG9yOmJpc3F1ZTtib3JkZXI6OHB4IHNvbGlkICM5ZTllOWU7Ym9yZGVyLXJhZGl1czoxMnB4fS5jb250YWluZXIgLmNvbG9yQm94IC5ib3h7d2lkdGg6MTAwcHg7YmFja2dyb3VuZC1jb2xvcjojMjkyMGQ0fS5jb250YWluZXIgLmNvbG9yQm94IC5ib3gxe3dpZHRoOjEwMHB4O2JhY2tncm91bmQtY29sb3I6IzM4MmZkOX0uY29udGFpbmVyIC5jb2xvckJveCAuYm94Mnt3aWR0aDoxMDBweDtiYWNrZ3JvdW5kLWNvbG9yOiM1NzUxZDJ9LmNvbnRhaW5lciAuY29sb3JCb3ggLmJveDN7d2lkdGg6MTAwcHg7YmFja2dyb3VuZC1jb2xvcjojNzQ2ZmQyfS5jb250YWluZXIgLmNvbG9yQm94IC5ib3g0e3dpZHRoOjEwMHB4O2JhY2tncm91bmQtY29sb3I6Izk3OTRkM30uY29udGFpbmVyIC5jb2xvckJveCAuYm94QmF0e2hlaWdodDoyMHB4O3BhZGRpbmc6NHB4O2JvcmRlcjpzb2xpZCAxcHggZ3JlZW47Ym9yZGVyLXJhZGl1czo1cHg7YmFja2dyb3VuZC1jb2xvcjojZmZkMjdkO2N1cnNvcjpwb2ludGVyfS5jb250YWluZXIgLmNvbG9yQm94IC5ib3hCYXQ6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZWJhYjZjfS5jb250YWluZXIgLmNvbG9yQm94IC50aXRsZXtoZWlnaHQ6MjJweDtwYWRkaW5nOjRweDtiYWNrZ3JvdW5kLWNvbG9yOiNkMGYwZTY7Y29sb3I6IzE5MTk0OX0uY29udGFpbmVyIC5ib3hCYXRBbGx7aGVpZ2h0OjI0cHg7cGFkZGluZzo0cHggMzBweDtib3JkZXI6c29saWQgMnB4IGdyZWVuO2JvcmRlci1yYWRpdXM6N3B4O2JhY2tncm91bmQtY29sb3I6I2ZmZDI3ZDttYXJnaW46MTBweDtjdXJzb3I6cG9pbnRlcn0uY29udGFpbmVyIC5ib3hCYXRBbGw6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZWJhYjZjfS5jb250YWluZXIgLmlucHV0VGV4dHtjb2xvcjojNDA0MzNmO2ZvbnQtc2l6ZToyMHB4O21hcmdpbjoxMHB4fS5jb250YWluZXIgLmlucHV0VGV4dCAuaW5wdXRQbGFjZXttYXgtd2lkdGg6MTAwcHg7aGVpZ2h0OjIwcHg7YmFja2dyb3VuZC1jb2xvcjphbGljZWJsdWV9LnNhdGl7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmVuZDtwYWRkaW5nOjBweDtib3JkZXItY29sb3I6IzllOWU5ZTtib3JkZXItcmFkaXVzOjNweDtib3JkZXItd2lkdGg6M3B4O2JvcmRlci1zdHlsZTpzb2xpZDtoZWlnaHQ6MTIwcHg7YmFja2dyb3VuZC1jb2xvcjojZmZmY2U5O3dpZHRoOjIwMHB4O21hcmdpbjphdXRvfS5zYXRpIC5taW51dHttYXJnaW46MHB4O3dpZHRoOjUwcHg7Y29sb3I6dHJhbnNwYXJlbnR9LnNhdGkgLmRhbnttYXJnaW46MHB4O3dpZHRoOjUwcHg7Y29sb3I6dHJhbnNwYXJlbnQ7Y3Vyc29yOnBvaW50ZXJ9LnNhdGkgLmRhbiAuY29udGVudHtkaXNwbGF5Om5vbmU7Zm9udC1zaXplOjE0cHg7Zm9udC13ZWlnaHQ6bGlnaHRlcjtwb3NpdGlvbjphYnNvbHV0ZTttaW4td2lkdGg6MzBweH0uc2F0aSAuZGFuIC5jb250ZW50IHNwYW57cG9zaXRpb246cmVsYXRpdmU7dG9wOi0ycHg7d2lkdGg6NDBweDtwYWRkaW5nLWxlZnQ6MTBweDtib3gtc2hhZG93OjJweCA4cHggMTZweCAwcHggcmdiYSgwLDAsMCwwLjcpO2JhY2tncm91bmQtY29sb3I6I2Y5ZjlmOTtkaXNwbGF5OmZsZXg7dGV4dC1hbGlnbjpjZW50ZXJ9LnNhdGkgLmRhbjpob3ZlciAuY29udGVudHtkaXNwbGF5OmJsb2NrO2NvbG9yOmJsYWNrO3RleHQtc2hhZG93Om5vbmV9LnNhdGkgLnRpdGxle2hlaWdodDoyNXB4fS5zYXRpIC5zZWt1bmRle3dpZHRoOjUwcHg7YmFja2dyb3VuZC1jb2xvcjojODBjYmM0fS5jYXNvdm5pa3t0ZXh0LWFsaWduOmNlbnRlcjtmb250LXNpemU6MThweDtwYWRkaW5nOjEwcHggM3B4O2ZvbnQtd2VpZ2h0OmJvbGR9LmJveEJhdEFsbHtoZWlnaHQ6MThweDtwYWRkaW5nOjBweCAxMHB4O2JvcmRlcjpzb2xpZCAycHggZ3JlZW47Zm9udC1zaXplOjE2cHg7Ym9yZGVyLXJhZGl1czo3cHg7YmFja2dyb3VuZC1jb2xvcjojZmZkMjdkO2N1cnNvcjpwb2ludGVyfS5ib3hCYXRBbGw6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZWJhYjZjfS5zYXRvdml7aGVpZ2h0OjQ1MHB4O3BhZGRpbmctbGVmdDoyMDBweDtwYWRkaW5nLWJvdHRvbTozMHB4O3BhZGRpbmctdG9wOjMwcHh9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTAwcHgpey5jb250YWluZXJ7bWF4LXdpZHRoOjM1OHB4O21pbi13aWR0aDozNThweH0uY29udGFpbmVyIGhye3dpZHRoOjM1NXB4fS5jb250YWluZXIgLmNvbG9yQm94e21heC13aWR0aDozMjVweDttaW4td2lkdGg6MzI1cHg7Ym9yZGVyOnNvbGlkIDNweCBncmV5O2JvcmRlci1yYWRpdXM6OHB4fS5jb250YWluZXIgLmNvbG9yQm94IC5ib3gsLmNvbnRhaW5lciAuY29sb3JCb3ggLmJveDEsLmNvbnRhaW5lciAuY29sb3JCb3ggLmJveDIsLmNvbnRhaW5lciAuY29sb3JCb3ggLmJveDMsLmNvbnRhaW5lciAuY29sb3JCb3ggLmJveDR7d2lkdGg6NjVweH0uY29udGFpbmVyIC5jb2xvckJveCAuYm94QmF0e2JvcmRlci1yYWRpdXM6NXB4fX1ib2R5e2JhY2tncm91bmQtY29sb3I6c2Vhc2hlbGx9LnJlc3VsdHtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmxlZnQ7YWxpZ24taXRlbXM6Y2VudGVyO2hlaWdodDo2MHB4O2JhY2tncm91bmQtY29sb3I6I2U3ZjZmZDtib3JkZXI6MXB4IHNvbGlkICM4ZjdhNmY7d2lkdGg6OTclO2ZvbnQtc2l6ZTo0MHB4O2ZvbnQtZmFtaWx5OidDb21mb3J0YWEnLCBjdXJzaXZlO3BhZGRpbmctbGVmdDo3cHg7b3ZlcmZsb3c6aGlkZGVufS5jYWxjdWxhdG9yLWJvZHl7bWF4LXdpZHRoOjQwMHB4O21hcmdpbjphdXRvfS5idXR0b257YmFja2dyb3VuZC1jb2xvcjojYmJiO2JvcmRlcjoxcHggc29saWQgIzhmN2E2Zn1idXR0b257d2lkdGg6MjUlO2hlaWdodDo2MHB4O2ZvbnQtc2l6ZTozMHB4O2JvcmRlcjowLjAycHggc29saWQgIzhmN2E2Zjtmb250LWZhbWlseTonQ29tZm9ydGFhJywgY3Vyc2l2ZTtiYWNrZ3JvdW5kLWNvbG9yOiNmMWYxZjE7Y3Vyc29yOnBvaW50ZXJ9YnV0dG9uOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2ZiZDU5MH1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1MDBweCl7LnJlc3VsdHtoZWlnaHQ6NDBweDt3aWR0aDo5MyU7Zm9udC1zaXplOjI0cHg7Zm9udC1mYW1pbHk6J0NvbWZvcnRhYScsIGN1cnNpdmU7cGFkZGluZy1yaWdodDo4cHh9LmNhbGN1bGF0b3ItYm9keXttYXgtd2lkdGg6MjUwcHh9YnV0dG9ue2hlaWdodDo0MHB4O2ZvbnQtc2l6ZToxOHB4O2ZvbnQtZmFtaWx5OidDb21mb3J0YWEnLCBjdXJzaXZlfX1ib2R5e2ZvbnQtZmFtaWx5OidUcmVidWNoZXQgTVMnLCAnTHVjaWRhIFNhbnMgVW5pY29kZScsICdMdWNpZGEgR3JhbmRlJywgJ0x1Y2lkYSBTYW5zJywgQXJpYWwsIHNhbnMtc2VyaWY7Zm9udC1zaXplOjE4cHg7YmFja2dyb3VuZC1jb2xvcjojZDdjY2M4fS5uYXZDb250YWluZXJ7YmFja2dyb3VuZC1jb2xvcjojYmNhYWE0O2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpyb3c7bWFyZ2luOmF1dG87aGVpZ2h0OjYwcHg7bWF4LXdpZHRoOjY1MHB4O21pbi13aWR0aDo2NTBweDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYXJvdW5kO2FsaWduLWl0ZW1zOmNlbnRlcn0ubmF2Q29udGFpbmVyIC5saW5rZXJ7Y29sb3I6I2NkY2RjZDt0ZXh0LWRlY29yYXRpb246bm9uZTtmb250LXdlaWdodDpib2xkfS5uYXZDb250YWluZXIgLmxpbmtlcjpob3Zlcntjb2xvcjojYThkYmQ3fS5ob21le21hcmdpbi10b3A6MDttYXJnaW46YXV0bzt3aWR0aDo2NTBweDtoZWlnaHQ6ODgwcHg7YmFja2dyb3VuZC1jb2xvcjojZDdjY2M4O3BhZGRpbmctdG9wOjEwMHB4fS5ob21lIC5pbWd7bWFyZ2luOmF1dG87YmFja2dyb3VuZC1zaXplOmNvdmVyO2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiaHR0cHM6Ly9mcmVlcG5naW1nLmNvbS90aHVtYi9zaGFwZS84MTUwMC1nb2xkZW4tcmF0aW8tc3BpcmFsLW51bWJlci1maWJvbmFjY2ktd2hpdGUtY2lyY2xlLnBuZ1wiKTt3aWR0aDo2NDBweDtoZWlnaHQ6Mzk1cHh9Lm9kbm9zaXtib3JkZXItY29sbGFwc2U6Y29sbGFwc2U7bWF4LXdpZHRoOjY1MHB4O21pbi13aWR0aDo2NTBweDttYXJnaW46YXV0bztiYWNrZ3JvdW5kLWNvbG9yOiNkN2NjYzg7bWFyZ2luLWJvdHRvbToxMnB4fS5vZG5vc2kgLnByb2N7cGFkZGluZy1sZWZ0OjIwcHh9Lm9kbm9zaSB0aHtiYWNrZ3JvdW5kLWNvbG9yOiM4ZjdhNmY7Y29sb3I6I2Y1ZjVmNTtmb250LXNpemU6MThweDtwYWRkaW5nOjEycHh9Lm9kbm9zaSAucmVsYWNpamF7bWluLXdpZHRoOjUwcHg7bWF4LXdpZHRoOjUwcHg7b3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXN9Lm9kbm9zaSB0ZHtmb250LWZhbWlseTpWZXJkYW5hLCBHZW5ldmEsIFRhaG9tYSwgc2Fucy1zZXJpZjtmb250LXNpemU6MTZweDt0ZXh0LWFsaWduOmNlbnRlcjttaW4td2lkdGg6NTBweDttYXgtd2lkdGg6NTBweDtwYWRkaW5nOjEwcHggMHB4fS5vZG5vc2kgaW5wdXR7dGV4dC1hbGlnbjpjZW50ZXI7aGVpZ2h0OjIwcHg7bWluLXdpZHRoOjUwcHg7bWF4LXdpZHRoOjUwcHg7YmFja2dyb3VuZC1jb2xvcjojZTdmNmZkO2JvcmRlci1yYWRpdXM6NHB4O2JvcmRlci1jb2xvcjpidXJseXdvb2R9Lm9kbm9zaSAucmVjaXBle3RleHQtYWxpZ246bGVmdDtwYWRkaW5nLXJpZ2h0OjVweDtwYWRkaW5nLWxlZnQ6NXB4O2ZvbnQtc2l6ZToxOHB4O2NvbG9yOiM4NDg2N2I7d2lkdGg6MTIwcHh9Lm9kbm9zaSAudGl0bGV7Zm9udC1mYW1pbHk6J1RyZWJ1Y2hldCBNUycsICdMdWNpZGEgU2FucyBVbmljb2RlJywgJ0x1Y2lkYSBHcmFuZGUnLCAnTHVjaWRhIFNhbnMnLCBBcmlhbCwgc2Fucy1zZXJpZjtmb250LXNpemU6MjRweDtwYWRkaW5nLXJpZ2h0OjVweDtwYWRkaW5nLWxlZnQ6MTBweDtmb250LXdlaWdodDpib2xkO3RleHQtYWxpZ246Y2VudGVyfS5vZG5vc2kgLm5hbWVDb21te3BhZGRpbmctbGVmdDo1cHg7Zm9udC1zaXplOjIwcHg7Y29sb3I6YmxhY2s7dGV4dC1hbGlnbjpsZWZ0fW1vZGVsLXZpZXdlcnttYXJnaW46YXV0bztjdXJzb3I6Z3JhYjtkaXNwbGF5OmZsZXg7aGVpZ2h0OjUwMHB4O3dpZHRoOjY1MHB4O292ZXJmbG93OmhpZGRlbjtwb3NpdGlvbjpyZWxhdGl2ZTt1c2VyLXNlbGVjdDpub25lfS52aWV3LWJ1dHRvbntiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlci1jb2xvcjp0cmFuc3BhcmVudH0uY2FsY3ttYXJnaW46YXV0bzttYXJnaW4tdG9wOjMwcHg7d2lkdGg6MzAwcHh9LmhyYW5he2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZTttYXgtd2lkdGg6NjUwcHg7bWluLXdpZHRoOjY1MHB4O2JhY2tncm91bmQtY29sb3I6I2NkY2RjZDttYXJnaW46YXV0b30uaHJhbmEgLm5hc2xvdntmb250LXNpemU6MjBweDttaW4td2lkdGg6MTUwcHg7bWF4LXdpZHRoOjE1MHB4fS5ocmFuYSBpbnB1dHt0ZXh0LWFsaWduOmxlZnQ7aGVpZ2h0OjIwcHg7bWluLXdpZHRoOjYwcHg7bWF4LXdpZHRoOjYwcHg7YmFja2dyb3VuZC1jb2xvcjojZTdmNmZkO2JvcmRlci1yYWRpdXM6NHB4O2JvcmRlci1jb2xvcjpidXJseXdvb2R9LmhyYW5hIC5oaWRyYXRpe2JhY2tncm91bmQtY29sb3I6I2I4YzZiOH0uaHJhbmEgLmhpZHJhdGkgLnByb3RlaW57aGVpZ2h0OjI1cHg7bWluLXdpZHRoOjI3cHg7bWF4LXdpZHRoOjI3cHg7b3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXN9LmhyYW5hIC5oaWRyYXRpIC51Z0hpZCwuaHJhbmEgLmhpZHJhdGkgLm1hc3R7bWluLXdpZHRoOjYwcHh9LmhyYW5hIC5wcm90e2JhY2tncm91bmQtY29sb3I6I2VlZDBhYX0uaHJhbmEgLnByb3QgLnByb3RlaW57aGVpZ2h0OjI1cHg7bWluLXdpZHRoOjI3cHg7bWF4LXdpZHRoOjI3cHg7b3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXN9LmhyYW5hIC5tbGVrb3tiYWNrZ3JvdW5kLWNvbG9yOiNlOGU4ZTh9LmhyYW5hIC5tbGVrbyAucHJvdGVpbntoZWlnaHQ6MjVweDttaW4td2lkdGg6MjdweDttYXgtd2lkdGg6MjdweDtvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpc30uaHJhbmEgLm9pbHtiYWNrZ3JvdW5kLWNvbG9yOiNlMGRiOTd9LmhyYW5hIC5vaWwgLnByb3RlaW57aGVpZ2h0OjI1cHg7bWluLXdpZHRoOjI3cHg7bWF4LXdpZHRoOjI3cHg7b3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXN9LmhyYW5hIC5vcmFoe2JhY2tncm91bmQtY29sb3I6I2ExYzRiMn0uaHJhbmEgLm9yYWggLnByb3RlaW57aGVpZ2h0OjI1cHg7bWluLXdpZHRoOjI3cHg7bWF4LXdpZHRoOjI3cHg7b3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXN9LmhyYW5hIC52b2Nle2JhY2tncm91bmQtY29sb3I6I2E1OTBiNn0uaHJhbmEgLnZvY2UgLnByb3RlaW57aGVpZ2h0OjI1cHg7bWluLXdpZHRoOjI3cHg7bWF4LXdpZHRoOjI3cHg7b3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXN9LmhyYW5hIC5rdXB1c3tiYWNrZ3JvdW5kLWNvbG9yOiNiOWYzYjJ9LmhyYW5hIC5rdXB1cyAucHJvdGVpbntoZWlnaHQ6MjVweDttaW4td2lkdGg6MjdweDttYXgtd2lkdGg6MjdweDtvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpc30uaHJhbmEgLmFsY29ob2x7YmFja2dyb3VuZC1jb2xvcjojY2VmZmY3fS5ocmFuYSAuYWxjb2hvbCAucHJvdGVpbntoZWlnaHQ6MjVweDttaW4td2lkdGg6MjdweDttYXgtd2lkdGg6MjdweDtvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpc30uaHJhbmEgdGhlYWR7Zm9udC1zaXplOjIwcHh9LmhyYW5hIHRoZWFkIHRoe3RleHQtYWxpZ246Y2VudGVyO2JhY2tncm91bmQtY29sb3I6IzRjNmE0Yjtjb2xvcjojY2RjZGNkO3BhZGRpbmc6MTBweCAzcHg7bWluLXdpZHRoOjI2cHh9LmhyYW5hIHRye2JhY2tncm91bmQtY29sb3I6I2Q3Y2NjOH0uaHJhbmEgdGZvb3R7Y29sb3I6I2E4ZGJkN30uaHJhbmEgdGZvb3QgdHJ7YmFja2dyb3VuZC1jb2xvcjojOTJhMTkyfS5ocmFuYSB0Zm9vdCB0ciAucHJvdGVpbntoZWlnaHQ6MjVweDttaW4td2lkdGg6MjdweDttYXgtd2lkdGg6MjdweDtvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpc30uaHJhbmEgdGR7cGFkZGluZzo4cHg7Zm9udC1zaXplOjI0fS5iYWNrLXRvLXRvcHtwb3NpdGlvbjpmaXhlZDtib3R0b206MjBweDtyaWdodDoyMHB4O2NvbG9yOiM4NDg2N2I7Y3Vyc29yOnBvaW50ZXI7Ym9yZGVyLXJhZGl1czo0MDBweH0uYmFjay10by10b3AgLmFycm93dXB7d2lkdGg6MjRweDtoZWlnaHQ6MjRweDtjb2xvcjojN2E5Yzk5YWM7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDE2NSwyMDYsMTk1LDAuNDMpO2ZvbnQtc2l6ZTozOHB4O3BhZGRpbmctbGVmdDo1cHg7Ym9yZGVyLXJhZGl1czoxMnB4O2JvcmRlcjpzb2xpZCAzcHggIzk1YmViYTdjfUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDUwMHB4KXtib2R5e2ZvbnQtc2l6ZToxNnB4O21hcmdpbjowO3BhZGRpbmc6MH0ubmF2Q29udGFpbmVye21heC13aWR0aDozNThweDttaW4td2lkdGg6MzU4cHg7bWFyZ2luOmF1dG99LmhvbWV7bWFyZ2luLXRvcDowO21hcmdpbjphdXRvO3dpZHRoOjM1OHB4O2hlaWdodDo4ODBweDtwYWRkaW5nLXRvcDo4MHB4fS5ob21lIC5pbWd7aGVpZ2h0OjIyMXB4O3dpZHRoOjM1OHB4fS5vZG5vc2l7bWF4LXdpZHRoOjM0OHB4O21pbi13aWR0aDozNDhweH0ub2Rub3NpIHRye3BhZGRpbmc6MTJweCA4cHh9Lm9kbm9zaSB0aHtmb250LXNpemU6MTRweDtwYWRkaW5nOjdweH0ub2Rub3NpIC5yZWxhY2lqYXttaW4td2lkdGg6MzBweDttYXgtd2lkdGg6MzBweH0ub2Rub3NpIHRke2ZvbnQtc2l6ZToxNHB4O21pbi13aWR0aDozMHB4O21heC13aWR0aDozMHB4fS5vZG5vc2kgaW5wdXR7aGVpZ2h0OjE4cHg7bWluLXdpZHRoOjMwcHg7bWF4LXdpZHRoOjMwcHh9Lm9kbm9zaSAucmVjaXBle3RleHQtYWxpZ246bGVmdDtmb250LXNpemU6MTZweDtjb2xvcjojODQ4NjdifS5vZG5vc2kgLnRpdGxle2ZvbnQtc2l6ZToyMHB4fS5vZG5vc2kgLm5hbWVDb21te3BhZGRpbmctbGVmdDo0cHg7Zm9udC1zaXplOjE3cHh9bW9kZWwtdmlld2Vye3dpZHRoOjM2MHB4O2hlaWdodDo0MDBweH0uaHJhbmF7bWF4LXdpZHRoOjM1OHB4O21pbi13aWR0aDozNThweDttYXJnaW46YXV0bztmb250LXNpemU6MTRweH0uaHJhbmEgdGhlYWR7Zm9udC1zaXplOjE0cHg7cGFkZGluZzo2cHggMnB4fS5ocmFuYSAuaGlkcmF0aSAudWdIaWR7bWluLXdpZHRoOjM3cHh9LmhyYW5hIC5oaWRyYXRpIC5tYXN0e21pbi13aWR0aDozN3B4fS5ocmFuYSAubmFzbG92e2ZvbnQtc2l6ZToxNHB4O21pbi13aWR0aDo1MHB4O21heC13aWR0aDo1MHB4fS5ocmFuYSBpbnB1dHtmb250LXNpemU6MTRweDttaW4td2lkdGg6NDdweDttYXgtd2lkdGg6NDdweDtib3JkZXItcmFkaXVzOjNweH0uaHJhbmEgdGR7cGFkZGluZzozcHggNXB4fS5ocmFuYSAuYmFzZXttaW4td2lkdGg6NDAwcHg7cGFkZGluZy1sZWZ0OjE1cHg7YmFja2dyb3VuZC1jb2xvcjpjaG9jb2xhdGV9fVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc2Nzcy9fdGFqbWVyLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zY3NzL19kaWdpdHJvbi5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc2Nzcy9tYWluLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBTUEsV0FDSSxZQUFhLENBQ2IscUJBQXNCLENBRXRCLFdBQVksQ0FDWixlQUFnQixDQUNoQixlQUFnQixDQUNoQixhQUFjLENBQ2Qsd0JBQW9DLENBQ3BDLGlCQUFrQixDQUNsQixrQkFBbUIsQ0FDbkIsc0JBQXVCLENBWDNCLGNBZVEsV0FBWSxDQWZwQixxQkFvQlEsWUFB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QWdCUSxjQUFlLENBQ2YsY0FBZSxDQWpCdkIsV0F1QlEsY0FBZSxDQUVmLGNBQWUsQ0FDZixjQUFlLENBMUJ2QixjQWdDUSxXQUFZLENBQ1osY0FBZSxDQUNmLGNBQWUsQ0FsQ3ZCLGdCQXVDUSxlQUFnQixDQUVoQixjQUFlLENBQ2YsYUFBYyxDQTFDdEIsZUErQ1EsY0FBZSxDQS9DdkIsa0JBbURRLGdCQUFpQixDQUNqQixjQUFlLENBRWxCLGFBSUQsV0FBWSxDQUNaLFlBQWEsQ0FDaEIsT0FHRyxlQUFnQixDQUNoQixlQUFnQixDQUNoQixXQUFZLENBQ1osY0FBZSxDQUpuQixhQU9RLGNBQWUsQ0FDZixlQUFnQixDQVJ4Qix1QkFhWSxjQUFlLENBYjNCLHNCQWlCWSxjQUFlLENBakIzQixlQXNCUSxjQUFlLENBQ2YsY0FBZSxDQUNmLGNBQWUsQ0F4QnZCLGFBNEJRLGNBQWUsQ0FDZixjQUFlLENBQ2YsY0FBZSxDQUNmLGlCQUFrQixDQS9CMUIsVUFtQ1EsZUFBZ0IsQ0FuQ3hCLGFBeUNRLGVBQWdCLENBQ2hCLGlCQUFrQixDQUNsQiwwQkFBMkIsQ0FDOUJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiJGNvbG9yMDE6IHJnYig0MSwgMzIsIDIxMik7XFxyXFxuJGNvbG9yMDI6IHJnYig1NiwgNDcsIDIxNyk7XFxyXFxuJGNvbG9yMDM6IHJnYig4NywgODEsIDIxMCk7XFxyXFxuJGNvbG9yMDQ6IHJnYigxMTYsIDExMSwgMjEwKTtcXHJcXG4kY29sb3IwNTogcmdiKDE1MSwgMTQ4LCAyMTEpO1xcclxcblxcclxcbi5jb250YWluZXIge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcblxcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxuICAgIG1heC13aWR0aDogNjUwcHg7XFxyXFxuICAgIG1pbi13aWR0aDogNjUwcHg7XFxyXFxuICAgIGhlaWdodDogMTIwMHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjI0LCAxODQsIDE2MCk7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuXFxyXFxuICAgIGhyIHtcXHJcXG5cXHJcXG4gICAgICAgIHdpZHRoOiA2NDVweDtcXHJcXG4gICAgfVxcclxcblxcclxcblxcclxcbiAgICAuY29sb3JCb3gge1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogYmFzZWxpbmU7XFxyXFxuICAgICAgICBhbGlnbi1pdGVtczogZW5kO1xcclxcbiAgICAgICAgd2lkdGg6IDUwMHB4O1xcclxcbiAgICAgICAgaGVpZ2h0OiAzNDVweDtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IGJpc3F1ZTtcXHJcXG4gICAgICAgIGJvcmRlcjogOHB4IHNvbGlkICM5ZTllOWU7XFxyXFxuICAgICAgICBib3JkZXItcmFkaXVzOiAxMnB4O1xcclxcblxcclxcbiAgICAgICAgLmJveCB7XFxyXFxuICAgICAgICAgICAgd2lkdGg6IDEwMHB4O1xcclxcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvcjAxO1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgLmJveDEge1xcclxcbiAgICAgICAgICAgIHdpZHRoOiAxMDBweDtcXHJcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3IwMjtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIC5ib3gyIHtcXHJcXG4gICAgICAgICAgICB3aWR0aDogMTAwcHg7XFxyXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yMDM7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAuYm94MyB7XFxyXFxuICAgICAgICAgICAgd2lkdGg6IDEwMHB4O1xcclxcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvcjA0O1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgLmJveDQge1xcclxcbiAgICAgICAgICAgIHdpZHRoOiAxMDBweDtcXHJcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3IwNTtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIC5ib3hCYXQge1xcclxcbiAgICAgICAgICAgIGhlaWdodDogMjBweDtcXHJcXG4gICAgICAgICAgICBwYWRkaW5nOiA0cHg7XFxyXFxuICAgICAgICAgICAgYm9yZGVyOiBzb2xpZCAxcHggZ3JlZW47XFxyXFxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xcclxcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDIxMCwgMTI1KTtcXHJcXG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuXFxyXFxuICAgICAgICAgICAgJjpob3ZlciB7XFxyXFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyMzUsIDE3MSwgMTA4KTtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAudGl0bGUge1xcclxcbiAgICAgICAgICAgIGhlaWdodDogMjJweDtcXHJcXG4gICAgICAgICAgICBwYWRkaW5nOiA0cHg7XFxyXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIwOCwgMjQwLCAyMzApO1xcclxcbiAgICAgICAgICAgIGNvbG9yOiByZ2IoMjUsIDI1LCA3Myk7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLmJveEJhdEFsbCB7XFxyXFxuICAgICAgICBoZWlnaHQ6IDI0cHg7XFxyXFxuICAgICAgICBwYWRkaW5nOiA0cHggMzBweDtcXHJcXG4gICAgICAgIGJvcmRlcjogc29saWQgMnB4IGdyZWVuO1xcclxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogN3B4O1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI1NSwgMjEwLCAxMjUpO1xcclxcbiAgICAgICAgbWFyZ2luOiAxMHB4O1xcclxcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcblxcclxcbiAgICAgICAgJjpob3ZlciB7XFxyXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIzNSwgMTcxLCAxMDgpO1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5pbnB1dFRleHQge1xcclxcbiAgICAgICAgY29sb3I6ICM0MDQzM2Y7XFxyXFxuICAgICAgICBmb250LXNpemU6IDIwcHg7XFxyXFxuICAgICAgICBtYXJnaW46IDEwcHg7XFxyXFxuXFxyXFxuICAgICAgICAuaW5wdXRQbGFjZSB7XFxyXFxuICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDBweDtcXHJcXG4gICAgICAgICAgICBoZWlnaHQ6IDIwcHg7XFxyXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYWxpY2VibHVlO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuXFxyXFxufVxcclxcblxcclxcbi5zYXRpIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgLy8ganVzdGlmeS1jb250ZW50OiBiYXNlbGluZTtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGVuZDtcXHJcXG4gICAgcGFkZGluZzogMHB4O1xcclxcbiAgICAvLyBib3JkZXItaW1hZ2UtcmVwZWF0OiBsaW5lYXItZ3JhZGllbnQoI2U3MWMwNSwgI2Q3YzRiZCk7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogIzllOWU5ZTtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xcclxcbiAgICBib3JkZXItd2lkdGg6IDNweDtcXHJcXG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXHJcXG4gICAgaGVpZ2h0OiAxMjBweDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmNlOTtcXHJcXG4gICAgd2lkdGg6IDIwMHB4O1xcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxuXFxyXFxuICAgIC8vIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcXHJcXG4gICAgLm1pbnV0IHtcXHJcXG5cXHJcXG5cXHJcXG4gICAgICAgIG1hcmdpbjogMHB4O1xcclxcbiAgICAgICAgd2lkdGg6IDUwcHg7XFxyXFxuICAgICAgICBjb2xvcjogdHJhbnNwYXJlbnQ7XFxyXFxuXFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLmRhbiB7XFxyXFxuICAgICAgICBtYXJnaW46IDBweDtcXHJcXG4gICAgICAgIHdpZHRoOiA1MHB4O1xcclxcbiAgICAgICAgY29sb3I6IHRyYW5zcGFyZW50O1xcclxcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcblxcclxcbiAgICAgICAgLmNvbnRlbnQge1xcclxcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xcclxcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBsaWdodGVyO1xcclxcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICAgICAgICBtaW4td2lkdGg6IDMwcHg7XFxyXFxuXFxyXFxuICAgICAgICAgICAgc3BhbiB7XFxyXFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgICAgICAgICAgICAgdG9wOiAtMnB4O1xcclxcbiAgICAgICAgICAgICAgICB3aWR0aDogNDBweDtcXHJcXG4gICAgICAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxyXFxuICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6IDJweCA4cHggMTZweCAwcHggcmdiYSgwLCAwLCAwLCAwLjcpO1xcclxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjlmOWY5O1xcclxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgICAgICAgICAvLyBhbGlnbi1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICAmOmhvdmVyIC5jb250ZW50IHtcXHJcXG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcXHJcXG4gICAgICAgICAgICBjb2xvcjogYmxhY2s7XFxyXFxuICAgICAgICAgICAgdGV4dC1zaGFkb3c6IG5vbmU7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG4gICAgLnRpdGxlIHtcXHJcXG4gICAgICAgIGhlaWdodDogMjVweDtcXHJcXG4gICAgfVxcclxcbiAgICAuc2VrdW5kZSB7XFxyXFxuICAgICAgICB3aWR0aDogNTBweDtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM4MGNiYzQ7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuLmNhc292bmlrIHtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICBmb250LXNpemU6IDE4cHg7XFxyXFxuICAgIHBhZGRpbmc6IDEwcHggM3B4O1xcclxcbiAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG59XFxyXFxuXFxyXFxuLmJveEJhdEFsbCB7XFxyXFxuICAgIGhlaWdodDogMThweDtcXHJcXG4gICAgcGFkZGluZzogMHB4IDEwcHg7XFxyXFxuICAgIGJvcmRlcjogc29saWQgMnB4IGdyZWVuO1xcclxcbiAgICBmb250LXNpemU6IDE2cHg7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDdweDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI1NSwgMjEwLCAxMjUpO1xcclxcblxcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuXFxyXFxuICAgICY6aG92ZXIge1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIzNSwgMTcxLCAxMDgpO1xcclxcbiAgICB9XFxyXFxuXFxyXFxufVxcclxcblxcclxcbi5zYXRvdmkge1xcclxcbiAgICBoZWlnaHQ6IDQ1MHB4O1xcclxcbiAgICBwYWRkaW5nLWxlZnQ6IDIwMHB4O1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogMzBweDtcXHJcXG4gICAgcGFkZGluZy10b3A6IDMwcHg7XFxyXFxuXFxyXFxufVxcclxcblxcclxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDUwMHB4KSB7XFxyXFxuICAgIC5jb250YWluZXIge1xcclxcbiAgICAgICAgbWF4LXdpZHRoOiAzNThweDtcXHJcXG4gICAgICAgIG1pbi13aWR0aDogMzU4cHg7XFxyXFxuXFxyXFxuICAgICAgICBociB7XFxyXFxuICAgICAgICAgICAgd2lkdGg6IDM1NXB4O1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgLmNvbG9yQm94IHtcXHJcXG4gICAgICAgICAgICBtYXgtd2lkdGg6IDMyNXB4O1xcclxcbiAgICAgICAgICAgIG1pbi13aWR0aDogMzI1cHg7XFxyXFxuICAgICAgICAgICAgYm9yZGVyOiBzb2xpZCAzcHggZ3JleTtcXHJcXG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XFxyXFxuXFxyXFxuXFxyXFxuICAgICAgICAgICAgLmJveCxcXHJcXG4gICAgICAgICAgICAuYm94MSxcXHJcXG4gICAgICAgICAgICAuYm94MixcXHJcXG4gICAgICAgICAgICAuYm94MyxcXHJcXG4gICAgICAgICAgICAuYm94NCB7XFxyXFxuICAgICAgICAgICAgICAgIHdpZHRoOiA2NXB4O1xcclxcbiAgICAgICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICAgICAuYm94QmF0IHtcXHJcXG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbn1cIixcImJvZHkge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBzZWFzaGVsbDtcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuLnJlc3VsdCB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogbGVmdDtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgaGVpZ2h0OiA2MHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjMxLCAyNDYsIDI1Myk7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYigxNDMsIDEyMiwgMTExKTtcXHJcXG4gICAgd2lkdGg6IDk3JTtcXHJcXG4gICAgZm9udC1zaXplOiA0MHB4O1xcclxcbiAgICBmb250LWZhbWlseTogJ0NvbWZvcnRhYScsIGN1cnNpdmU7XFxyXFxuICAgIHBhZGRpbmctbGVmdDogN3B4O1xcclxcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxcblxcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG4uY2FsY3VsYXRvci1ib2R5IHtcXHJcXG4gICAgbWF4LXdpZHRoOiA0MDBweDtcXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbn1cXHJcXG5cXHJcXG4uYnV0dG9uIHtcXHJcXG4gICAgLy8gZGlzcGxheTogYmxvY2s7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNiYmI7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYigxNDMsIDEyMiwgMTExKTtcXHJcXG59XFxyXFxuXFxyXFxuYnV0dG9uIHtcXHJcXG4gICAgd2lkdGg6IDI1JTtcXHJcXG4gICAgaGVpZ2h0OiA2MHB4O1xcclxcbiAgICBmb250LXNpemU6IDMwcHg7XFxyXFxuICAgIGJvcmRlcjogMC4wMnB4IHNvbGlkIHJnYigxNDMsIDEyMiwgMTExKTtcXHJcXG4gICAgZm9udC1mYW1pbHk6ICdDb21mb3J0YWEnLCBjdXJzaXZlO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjQxLCAyNDEsIDI0MSk7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG5cXHJcXG4gICAgJjpob3ZlciB7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjUxLCAyMTMsIDE0NCk7XFxyXFxuXFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTAwcHgpIHtcXHJcXG5cXHJcXG4gICAgLnJlc3VsdCB7XFxyXFxuXFxyXFxuICAgICAgICBoZWlnaHQ6IDQwcHg7XFxyXFxuICAgICBcXHJcXG4gICAgICAgIHdpZHRoOiA5MyU7XFxyXFxuICAgICAgICBmb250LXNpemU6IDI0cHg7XFxyXFxuICAgICAgICBmb250LWZhbWlseTogJ0NvbWZvcnRhYScsIGN1cnNpdmU7XFxyXFxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiA4cHg7XFxyXFxuXFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLmNhbGN1bGF0b3ItYm9keSB7XFxyXFxuICAgICAgICBtYXgtd2lkdGg6IDI1MHB4O1xcclxcblxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIGJ1dHRvbiB7XFxyXFxuXFxyXFxuICAgICAgICBoZWlnaHQ6IDQwcHg7XFxyXFxuICAgICAgICBmb250LXNpemU6IDE4cHg7XFxyXFxuICAgICAgICBmb250LWZhbWlseTogJ0NvbWZvcnRhYScsIGN1cnNpdmU7XFxyXFxuXFxyXFxuXFxyXFxuICAgIH1cXHJcXG5cXHJcXG5cXHJcXG59XCIsXCJAaW1wb3J0ICcuLi9zY3NzL190YWptZXIuc2Nzcyc7XFxyXFxuQGltcG9ydCAnLi4vc2Nzcy9fZGlnaXRyb24uc2Nzcyc7XFxyXFxuXFxyXFxuXFxyXFxuJGNvbG9yLW9uZTogI2NkY2RjZDtcXHJcXG4kY29sb3ItdHdvOiAjYTdhYmIwO1xcclxcbiRjb2xvci10aHJlZTogcmdiKDE2NCwgMTY4LCAyMDYpO1xcclxcbiRjb2xvcjQ6IHJnYigyMzEsIDI0NiwgMjUzKTtcXHJcXG4vLyAkY29sb3I1OiByZ2IoMjQxLCAyNDEsIDI0MSk7XFxyXFxuJGNvbG9yNTogI2Q3Y2NjODtcXHJcXG4kY29sb3I2OiByZ2IoMTQzLCAxMjIsIDExMSk7XFxyXFxuJGNvbG9ySGlkOiByZ2IoMTg0LCAxOTgsIDE4NCk7XFxyXFxuJGNvbG9yUHJvdDogcmdiKDIzOCwgMjA4LCAxNzApO1xcclxcbiRjb2xvck1sOiByZ2IoMjMyLCAyMzIsIDIzMik7XFxyXFxuJGNvbG9yT2lsOiByZ2IoMjI0LCAyMTksIDE1MSk7XFxyXFxuJGNvbG9yTnV0OiByZ2IoMTYxLCAxOTYsIDE3OCk7XFxyXFxuJGNvbG9yVm9jZTogcmdiKDE2NSwgMTQ0LCAxODIpO1xcclxcbiRjb2xvckt1cDogcmdiKDE4NSwgMjQzLCAxNzgpO1xcclxcbiRjb2xvckFsYzogcmdiKDIwNiwgMjU1LCAyNDcpO1xcclxcbjtcXHJcXG5cXHJcXG5ib2R5IHtcXHJcXG4gICAgZm9udC1mYW1pbHk6ICdUcmVidWNoZXQgTVMnLCAnTHVjaWRhIFNhbnMgVW5pY29kZScsICdMdWNpZGEgR3JhbmRlJywgJ0x1Y2lkYSBTYW5zJywgQXJpYWwsIHNhbnMtc2VyaWY7XFxyXFxuICAgIGZvbnQtc2l6ZTogMThweDtcXHJcXG4gICAgLy8gYmFja2dyb3VuZC1jb2xvcjogcmdiKDI1MSwgMjEzLCAxNDQpO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3I1O1xcclxcblxcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG4ubmF2Q29udGFpbmVyIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2JjYWFhNDtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbiAgICBoZWlnaHQ6IDYwcHg7XFxyXFxuICAgIG1heC13aWR0aDogNjUwcHg7XFxyXFxuICAgIG1pbi13aWR0aDogNjUwcHg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcblxcclxcbiAgICAubGlua2VyIHtcXHJcXG4gICAgICAgIGNvbG9yOiAkY29sb3Itb25lO1xcclxcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLmxpbmtlcjpob3ZlciB7XFxyXFxuICAgICAgICBjb2xvcjogI2E4ZGJkNztcXHJcXG4gICAgfVxcclxcblxcclxcblxcclxcbn1cXHJcXG5cXHJcXG4uaG9tZSB7XFxyXFxuICAgIG1hcmdpbi10b3A6IDA7XFxyXFxuICAgIG1hcmdpbjogYXV0bztcXHJcXG4gICAgd2lkdGg6IDY1MHB4O1xcclxcbiAgICBoZWlnaHQ6IDg4MHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3I1O1xcclxcbiAgICBwYWRkaW5nLXRvcDogMTAwcHg7XFxyXFxuXFxyXFxuICAgIC5pbWcge1xcclxcbiAgICAgICAgbWFyZ2luOiBhdXRvO1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcXFwiaHR0cHM6Ly9mcmVlcG5naW1nLmNvbS90aHVtYi9zaGFwZS84MTUwMC1nb2xkZW4tcmF0aW8tc3BpcmFsLW51bWJlci1maWJvbmFjY2ktd2hpdGUtY2lyY2xlLnBuZ1xcXCIpO1xcclxcbiAgICAgICAgd2lkdGg6IDY0MHB4O1xcclxcbiAgICAgICAgaGVpZ2h0OiAzOTVweDtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG4ub2Rub3NpIHtcXHJcXG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXHJcXG5cXHJcXG4gICAgbWF4LXdpZHRoOiA2NTBweDtcXHJcXG4gICAgbWluLXdpZHRoOiA2NTBweDtcXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3I1O1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAxMnB4O1xcclxcblxcclxcblxcclxcbiAgICAucHJvYyB7XFxyXFxuICAgICAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgdGgge1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yNjtcXHJcXG4gICAgICAgIGNvbG9yOiAjZjVmNWY1O1xcclxcbiAgICAgICAgZm9udC1zaXplOiAxOHB4O1xcclxcbiAgICAgICAgcGFkZGluZzogMTJweDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAucmVsYWNpamEge1xcclxcbiAgICAgICAgbWluLXdpZHRoOiA1MHB4O1xcclxcbiAgICAgICAgbWF4LXdpZHRoOiA1MHB4O1xcclxcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIHRkIHtcXHJcXG4gICAgICAgIGZvbnQtZmFtaWx5OiBWZXJkYW5hLCBHZW5ldmEsIFRhaG9tYSwgc2Fucy1zZXJpZjtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDtcXHJcXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgICAgIG1pbi13aWR0aDogNTBweDtcXHJcXG4gICAgICAgIG1heC13aWR0aDogNTBweDtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDEwcHggMHB4O1xcclxcblxcclxcblxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIGlucHV0IHtcXHJcXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgICAgIGhlaWdodDogMjBweDtcXHJcXG4gICAgICAgIG1pbi13aWR0aDogNTBweDtcXHJcXG4gICAgICAgIG1heC13aWR0aDogNTBweDtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvcjQ7XFxyXFxuICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XFxyXFxuICAgICAgICBib3JkZXItY29sb3I6IGJ1cmx5d29vZDtcXHJcXG5cXHJcXG4gICAgfVxcclxcbiAgICAucmVjaXBlIHtcXHJcXG4gICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XFxyXFxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiA1cHg7XFxyXFxuICAgICAgICBwYWRkaW5nLWxlZnQ6IDVweDtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMThweDtcXHJcXG4gICAgICAgIGNvbG9yOiAjODQ4NjdiO1xcclxcbiAgICAgICAgd2lkdGg6IDEyMHB4O1xcclxcbiAgICB9XFxyXFxuICAgIC50aXRsZSB7XFxyXFxuICAgICAgICBmb250LWZhbWlseTogJ1RyZWJ1Y2hldCBNUycsICdMdWNpZGEgU2FucyBVbmljb2RlJywgJ0x1Y2lkYSBHcmFuZGUnLCAnTHVjaWRhIFNhbnMnLCBBcmlhbCwgc2Fucy1zZXJpZjtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMjRweDtcXHJcXG4gICAgICAgIHBhZGRpbmctcmlnaHQ6IDVweDtcXHJcXG4gICAgICAgIHBhZGRpbmctbGVmdDogMTBweDtcXHJcXG4gICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICAgICAgLy8gd2lkdGg6IDMwMHB4O1xcclxcbiAgICB9XFxyXFxuICAgIC5uYW1lQ29tbSB7XFxyXFxuICAgICAgICBwYWRkaW5nLWxlZnQ6IDVweDtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMjBweDtcXHJcXG4gICAgICAgIGNvbG9yOiBibGFjaztcXHJcXG4gICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxubW9kZWwtdmlld2VyIHtcXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbiAgICBjdXJzb3I6IGdyYWI7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGhlaWdodDogNTAwcHg7XFxyXFxuICAgIHdpZHRoOiA2NTBweDtcXHJcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLnZpZXctYnV0dG9uIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxyXFxuXFxyXFxufVxcclxcblxcclxcbi5jYWxjIHtcXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbiAgICBtYXJnaW4tdG9wOiAzMHB4O1xcclxcbiAgICB3aWR0aDogMzAwcHg7XFxyXFxufVxcclxcblxcclxcbi5ocmFuYSB7XFxyXFxuXFxyXFxuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxyXFxuICAgIG1heC13aWR0aDogNjUwcHg7XFxyXFxuICAgIG1pbi13aWR0aDogNjUwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvci1vbmU7XFxyXFxuICAgIG1hcmdpbjogYXV0bztcXHJcXG5cXHJcXG4gICAgLm5hc2xvdiB7XFxyXFxuICAgICAgICBmb250LXNpemU6IDIwcHg7XFxyXFxuICAgICAgICBtaW4td2lkdGg6IDE1MHB4O1xcclxcbiAgICAgICAgbWF4LXdpZHRoOiAxNTBweDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBpbnB1dCB7XFxyXFxuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcclxcbiAgICAgICAgaGVpZ2h0OiAyMHB4O1xcclxcbiAgICAgICAgbWluLXdpZHRoOiA2MHB4O1xcclxcbiAgICAgICAgbWF4LXdpZHRoOiA2MHB4O1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yNDtcXHJcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXHJcXG4gICAgICAgIGJvcmRlci1jb2xvcjogYnVybHl3b29kO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5oaWRyYXRpIHtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvckhpZDtcXHJcXG5cXHJcXG4gICAgICAgIC5wcm90ZWluIHtcXHJcXG4gICAgICAgICAgICBoZWlnaHQ6IDI1cHg7XFxyXFxuICAgICAgICAgICAgbWluLXdpZHRoOiAyN3B4O1xcclxcbiAgICAgICAgICAgIG1heC13aWR0aDogMjdweDtcXHJcXG4gICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgICAgICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcclxcblxcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgLnVnSGlkLFxcclxcbiAgICAgICAgLm1hc3Qge1xcclxcbiAgICAgICAgICAgIG1pbi13aWR0aDogNjBweDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAucHJvdCB7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3JQcm90O1xcclxcblxcclxcbiAgICAgICAgLnByb3RlaW4ge1xcclxcbiAgICAgICAgICAgIGhlaWdodDogMjVweDtcXHJcXG4gICAgICAgICAgICBtaW4td2lkdGg6IDI3cHg7XFxyXFxuICAgICAgICAgICAgbWF4LXdpZHRoOiAyN3B4O1xcclxcbiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuICAgICAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxyXFxuXFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLm1sZWtvIHtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvck1sO1xcclxcblxcclxcbiAgICAgICAgLnByb3RlaW4ge1xcclxcbiAgICAgICAgICAgIGhlaWdodDogMjVweDtcXHJcXG4gICAgICAgICAgICBtaW4td2lkdGg6IDI3cHg7XFxyXFxuICAgICAgICAgICAgbWF4LXdpZHRoOiAyN3B4O1xcclxcbiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuICAgICAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxyXFxuXFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLm9pbCB7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3JPaWw7XFxyXFxuXFxyXFxuICAgICAgICAucHJvdGVpbiB7XFxyXFxuICAgICAgICAgICAgaGVpZ2h0OiAyNXB4O1xcclxcbiAgICAgICAgICAgIG1pbi13aWR0aDogMjdweDtcXHJcXG4gICAgICAgICAgICBtYXgtd2lkdGg6IDI3cHg7XFxyXFxuICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gICAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXHJcXG5cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAub3JhaCB7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3JOdXQ7XFxyXFxuXFxyXFxuICAgICAgICAucHJvdGVpbiB7XFxyXFxuICAgICAgICAgICAgaGVpZ2h0OiAyNXB4O1xcclxcbiAgICAgICAgICAgIG1pbi13aWR0aDogMjdweDtcXHJcXG4gICAgICAgICAgICBtYXgtd2lkdGg6IDI3cHg7XFxyXFxuICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gICAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXHJcXG5cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAudm9jZSB7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3JWb2NlO1xcclxcblxcclxcbiAgICAgICAgLnByb3RlaW4ge1xcclxcbiAgICAgICAgICAgIGhlaWdodDogMjVweDtcXHJcXG4gICAgICAgICAgICBtaW4td2lkdGg6IDI3cHg7XFxyXFxuICAgICAgICAgICAgbWF4LXdpZHRoOiAyN3B4O1xcclxcbiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuICAgICAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxyXFxuXFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLmt1cHVzIHtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvckt1cDtcXHJcXG5cXHJcXG4gICAgICAgIC5wcm90ZWluIHtcXHJcXG4gICAgICAgICAgICBoZWlnaHQ6IDI1cHg7XFxyXFxuICAgICAgICAgICAgbWluLXdpZHRoOiAyN3B4O1xcclxcbiAgICAgICAgICAgIG1heC13aWR0aDogMjdweDtcXHJcXG4gICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgICAgICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcclxcblxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5hbGNvaG9sIHtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvckFsYztcXHJcXG5cXHJcXG4gICAgICAgIC5wcm90ZWluIHtcXHJcXG4gICAgICAgICAgICBoZWlnaHQ6IDI1cHg7XFxyXFxuICAgICAgICAgICAgbWluLXdpZHRoOiAyN3B4O1xcclxcbiAgICAgICAgICAgIG1heC13aWR0aDogMjdweDtcXHJcXG4gICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgICAgICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcclxcblxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIHRoZWFkIHtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMjBweDtcXHJcXG5cXHJcXG4gICAgICAgIHRoIHtcXHJcXG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzRjNmE0YjtcXHJcXG4gICAgICAgICAgICBjb2xvcjogJGNvbG9yLW9uZTtcXHJcXG4gICAgICAgICAgICBwYWRkaW5nOiAxMHB4IDNweDtcXHJcXG4gICAgICAgICAgICBtaW4td2lkdGg6IDI2cHg7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgdHIge1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yNTtcXHJcXG5cXHJcXG5cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICB0Zm9vdCB7XFxyXFxuICAgICAgICBjb2xvcjogI2E4ZGJkNztcXHJcXG5cXHJcXG4gICAgICAgIHRyIHtcXHJcXG5cXHJcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTJhMTkyO1xcclxcblxcclxcbiAgICAgICAgICAgIC5wcm90ZWluIHtcXHJcXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAyNXB4O1xcclxcbiAgICAgICAgICAgICAgICBtaW4td2lkdGg6IDI3cHg7XFxyXFxuICAgICAgICAgICAgICAgIG1heC13aWR0aDogMjdweDtcXHJcXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gICAgICAgICAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxyXFxuXFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIHRkIHtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDhweDtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMjQ7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuLmJhY2stdG8tdG9wIHtcXHJcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcclxcbiAgICBib3R0b206IDIwcHg7XFxyXFxuICAgIHJpZ2h0OiAyMHB4O1xcclxcblxcclxcbiAgICBjb2xvcjogIzg0ODY3YjtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiA0MDBweDtcXHJcXG5cXHJcXG4gICAgLmFycm93dXAge1xcclxcbiAgICAgICAgd2lkdGg6IDI0cHg7XFxyXFxuICAgICAgICBoZWlnaHQ6IDI0cHg7XFxyXFxuICAgICAgICBjb2xvcjogIzdhOWM5OWFjO1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxNjUsIDIwNiwgMTk1LCAwLjQzKTtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMzhweDtcXHJcXG4gICAgICAgIHBhZGRpbmctbGVmdDogNXB4O1xcclxcblxcclxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMTJweDtcXHJcXG4gICAgICAgIGJvcmRlcjogc29saWQgM3B4ICM5NWJlYmE3YztcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1MDBweCkge1xcclxcbiAgICBib2R5IHtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDtcXHJcXG4gICAgICAgIG1hcmdpbjogMDtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDA7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLm5hdkNvbnRhaW5lciB7XFxyXFxuICAgICAgICBtYXgtd2lkdGg6IDM1OHB4O1xcclxcbiAgICAgICAgbWluLXdpZHRoOiAzNThweDtcXHJcXG4gICAgICAgIG1hcmdpbjogYXV0bztcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuaG9tZSB7XFxyXFxuICAgICAgICBtYXJnaW4tdG9wOiAwO1xcclxcbiAgICAgICAgbWFyZ2luOiBhdXRvO1xcclxcbiAgICAgICAgd2lkdGg6IDM1OHB4O1xcclxcbiAgICAgICAgaGVpZ2h0OiA4ODBweDtcXHJcXG5cXHJcXG4gICAgICAgIHBhZGRpbmctdG9wOiA4MHB4O1xcclxcblxcclxcbiAgICAgICAgLmltZyB7XFxyXFxuICAgICAgICAgICAgaGVpZ2h0OiAyMjFweDtcXHJcXG4gICAgICAgICAgICB3aWR0aDogMzU4cHg7XFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLm9kbm9zaSB7XFxyXFxuICAgICAgICBtYXgtd2lkdGg6IDM0OHB4O1xcclxcbiAgICAgICAgbWluLXdpZHRoOiAzNDhweDtcXHJcXG5cXHJcXG5cXHJcXG4gICAgICAgIHRyIHtcXHJcXG4gICAgICAgICAgICBwYWRkaW5nOiAxMnB4IDhweDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIHRoIHtcXHJcXG5cXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XFxyXFxuICAgICAgICAgICAgcGFkZGluZzogN3B4O1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgLnJlbGFjaWphIHtcXHJcXG4gICAgICAgICAgICBtaW4td2lkdGg6IDMwcHg7XFxyXFxuICAgICAgICAgICAgbWF4LXdpZHRoOiAzMHB4O1xcclxcblxcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgdGQge1xcclxcblxcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcXHJcXG5cXHJcXG4gICAgICAgICAgICBtaW4td2lkdGg6IDMwcHg7XFxyXFxuICAgICAgICAgICAgbWF4LXdpZHRoOiAzMHB4O1xcclxcblxcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgaW5wdXQge1xcclxcblxcclxcbiAgICAgICAgICAgIGhlaWdodDogMThweDtcXHJcXG4gICAgICAgICAgICBtaW4td2lkdGg6IDMwcHg7XFxyXFxuICAgICAgICAgICAgbWF4LXdpZHRoOiAzMHB4O1xcclxcblxcclxcblxcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgLnJlY2lwZSB7XFxyXFxuICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcXHJcXG4gICAgICAgICAgXFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4O1xcclxcbiAgICAgICAgICAgIGNvbG9yOiAjODQ4NjdiO1xcclxcbiAgICAgICAgICBcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIC50aXRsZSB7XFxyXFxuICAgICAgICAgIFxcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcXHJcXG4gICAgICAgICBcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIC5uYW1lQ29tbSB7XFxyXFxuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA0cHg7XFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiAxN3B4O1xcclxcbiAgICAgICBcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBtb2RlbC12aWV3ZXIge1xcclxcbiAgICAgICAgd2lkdGg6IDM2MHB4O1xcclxcbiAgICAgICAgaGVpZ2h0OiA0MDBweDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuaHJhbmEge1xcclxcbiAgICAgICAgbWF4LXdpZHRoOiAzNThweDtcXHJcXG4gICAgICAgIG1pbi13aWR0aDogMzU4cHg7XFxyXFxuICAgICAgICBtYXJnaW46IGF1dG87XFxyXFxuICAgICAgICBmb250LXNpemU6IDE0cHg7XFxyXFxuXFxyXFxuICAgICAgICB0aGVhZCB7XFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xcclxcbiAgICAgICAgICAgIHBhZGRpbmc6IDZweCAycHg7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAuaGlkcmF0aSB7XFxyXFxuICAgICAgICAgICAgLnVnSGlkIHtcXHJcXG4gICAgICAgICAgICAgICAgbWluLXdpZHRoOiAzN3B4O1xcclxcbiAgICAgICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICAgICAubWFzdCB7XFxyXFxuICAgICAgICAgICAgICAgIG1pbi13aWR0aDogMzdweDtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAubmFzbG92IHtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XFxyXFxuICAgICAgICAgICAgbWluLXdpZHRoOiA1MHB4O1xcclxcbiAgICAgICAgICAgIG1heC13aWR0aDogNTBweDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIGlucHV0IHtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XFxyXFxuICAgICAgICAgICAgbWluLXdpZHRoOiA0N3B4O1xcclxcbiAgICAgICAgICAgIG1heC13aWR0aDogNDdweDtcXHJcXG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAzcHg7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICB0ZCB7XFxyXFxuICAgICAgICAgICAgcGFkZGluZzogM3B4IDVweDtcXHJcXG5cXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG5cXHJcXG4gICAgICAgIC5iYXNlIHtcXHJcXG4gICAgICAgICAgICBtaW4td2lkdGg6IDQwMHB4O1xcclxcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMTVweDtcXHJcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjaG9jb2xhdGU7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLGNhPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gcChhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn12YXIgZGE9bmV3IFNldCxlYT17fTtmdW5jdGlvbiBmYShhLGIpe2hhKGEsYik7aGEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGhhKGEsYil7ZWFbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWRhLmFkZChiW2FdKX1cbnZhciBpYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksamE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxrYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sbGE9XG57fSxtYT17fTtmdW5jdGlvbiBvYShhKXtpZihqYS5jYWxsKG1hLGEpKXJldHVybiEwO2lmKGphLmNhbGwobGEsYSkpcmV0dXJuITE7aWYoa2EudGVzdChhKSlyZXR1cm4gbWFbYV09ITA7bGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gcGEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBxYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxwYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciB6PXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO3pbYl09bmV3IHYoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgcmE9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBzYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxcbnNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbnoueGxpbmtIcmVmPW5ldyB2KFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHRhKGEsYixjLGQpe3ZhciBlPXouaGFzT3duUHJvcGVydHkoYik/eltiXTpudWxsO2lmKG51bGwhPT1lPzAhPT1lLnR5cGU6ZHx8ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdKXFhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9vYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSl9XG52YXIgdWE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsdmE9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksd2E9U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSx5YT1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksemE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLEFhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSxCYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksQ2E9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksRGE9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLEVhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxGYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxHYT1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxIYT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTtTeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik7U3ltYm9sLmZvcihcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7XG52YXIgSWE9U3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QuY2FjaGVcIik7U3ltYm9sLmZvcihcInJlYWN0LnRyYWNpbmdfbWFya2VyXCIpO3ZhciBKYT1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gS2EoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUphJiZhW0phXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBBPU9iamVjdC5hc3NpZ24sTGE7ZnVuY3Rpb24gTWEoYSl7aWYodm9pZCAwPT09TGEpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7TGE9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK0xhK2F9dmFyIE5hPSExO1xuZnVuY3Rpb24gT2EoYSxiKXtpZighYXx8TmEpcmV0dXJuXCJcIjtOYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2gobCl7dmFyIGQ9bH1SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGwpe2Q9bH1hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGwpe2Q9bH1hKCl9fWNhdGNoKGwpe2lmKGwmJmQmJlwic3RyaW5nXCI9PT10eXBlb2YgbC5zdGFjayl7Zm9yKHZhciBlPWwuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSl7dmFyIGs9XCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTthLmRpc3BsYXlOYW1lJiZrLmluY2x1ZGVzKFwiPGFub255bW91cz5cIikmJihrPWsucmVwbGFjZShcIjxhbm9ueW1vdXM+XCIsYS5kaXNwbGF5TmFtZSkpO3JldHVybiBrfXdoaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtOYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP01hKGEpOlwiXCJ9XG5mdW5jdGlvbiBQYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gTWEoYS50eXBlKTtjYXNlIDE2OnJldHVybiBNYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gTWEoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBNYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9T2EoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9T2EoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9T2EoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBRYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHlhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHdhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBBYTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB6YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEVhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIEZhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIENhOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIEJhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIERhOnZhciBiPWEucmVuZGVyO2E9YS5kaXNwbGF5TmFtZTthfHwoYT1iLmRpc3BsYXlOYW1lfHxcbmIubmFtZXx8XCJcIixhPVwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtyZXR1cm4gYTtjYXNlIEdhOnJldHVybiBiPWEuZGlzcGxheU5hbWV8fG51bGwsbnVsbCE9PWI/YjpRYShhLnR5cGUpfHxcIk1lbW9cIjtjYXNlIEhhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBRYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gUmEoYSl7dmFyIGI9YS50eXBlO3N3aXRjaChhLnRhZyl7Y2FzZSAyNDpyZXR1cm5cIkNhY2hlXCI7Y2FzZSA5OnJldHVybihiLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIDEwOnJldHVybihiLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIDE4OnJldHVyblwiRGVoeWRyYXRlZEZyYWdtZW50XCI7Y2FzZSAxMTpyZXR1cm4gYT1iLnJlbmRlcixhPWEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJcIixiLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgNzpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSA1OnJldHVybiBiO2Nhc2UgNDpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgMzpyZXR1cm5cIlJvb3RcIjtjYXNlIDY6cmV0dXJuXCJUZXh0XCI7Y2FzZSAxNjpyZXR1cm4gUWEoYik7Y2FzZSA4OnJldHVybiBiPT09emE/XCJTdHJpY3RNb2RlXCI6XCJNb2RlXCI7Y2FzZSAyMjpyZXR1cm5cIk9mZnNjcmVlblwiO1xuY2FzZSAxMjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSAyMTpyZXR1cm5cIlNjb3BlXCI7Y2FzZSAxMzpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSAxOTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwiO2Nhc2UgMjU6cmV0dXJuXCJUcmFjaW5nTWFya2VyXCI7Y2FzZSAxOmNhc2UgMDpjYXNlIDE3OmNhc2UgMjpjYXNlIDE0OmNhc2UgMTU6aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGIuZGlzcGxheU5hbWV8fGIubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGIpcmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2Nhc2UgXCJvYmplY3RcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gVGEoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFVhKGEpe3ZhciBiPVRhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWEoYSkpfWZ1bmN0aW9uIFdhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFhhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFlhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBBKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBaYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1TYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIGFiKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmdGEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIGJiKGEsYil7YWIoYSxiKTt2YXIgYz1TYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9jYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZjYihhLGIudHlwZSxTYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGRiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFhhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgZWI9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGZiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitTYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHAoOTEpKTtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBoYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcihwKDkyKSk7aWYoZWIoYykpe2lmKDE8Yy5sZW5ndGgpdGhyb3cgRXJyb3IocCg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlNhKGMpfX1cbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9U2EoYi52YWx1ZSksZD1TYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGpiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9ZnVuY3Rpb24ga2IoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1cbmZ1bmN0aW9uIGxiKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9rYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBtYixuYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIT09YS5uYW1lc3BhY2VVUkl8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXttYj1tYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTttYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1tYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBvYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHBiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxhc3BlY3RSYXRpbzohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsXG56b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHFiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhwYikuZm9yRWFjaChmdW5jdGlvbihhKXtxYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3BiW2JdPXBiW2FdfSl9KTtmdW5jdGlvbiByYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cGIuaGFzT3duUHJvcGVydHkoYSkmJnBiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHNiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXJiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHRiPUEoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB1YihhLGIpe2lmKGIpe2lmKHRiW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IocCg2MCkpO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTHx8IShcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IocCg2MikpO319XG5mdW5jdGlvbiB2YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHdiPW51bGw7ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcihwKDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYigpe312YXIgSWI9ITE7ZnVuY3Rpb24gSmIoYSxiLGMpe2lmKEliKXJldHVybiBhKGIsYyk7SWI9ITA7dHJ5e3JldHVybiBHYihhLGIsYyl9ZmluYWxseXtpZihJYj0hMSxudWxsIT09emJ8fG51bGwhPT1BYilIYigpLEZiKCl9fVxuZnVuY3Rpb24gS2IoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1EYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcihwKDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIExiPSExO2lmKGlhKXRyeXt2YXIgTWI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KE1iLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtMYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixNYixNYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpfWNhdGNoKGEpe0xiPSExfWZ1bmN0aW9uIE5iKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fXZhciBPYj0hMSxQYj1udWxsLFFiPSExLFJiPW51bGwsU2I9e29uRXJyb3I6ZnVuY3Rpb24oYSl7T2I9ITA7UGI9YX19O2Z1bmN0aW9uIFRiKGEsYixjLGQsZSxmLGcsaCxrKXtPYj0hMTtQYj1udWxsO05iLmFwcGx5KFNiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBVYihhLGIsYyxkLGUsZixnLGgsayl7VGIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKE9iKXtpZihPYil7dmFyIGw9UGI7T2I9ITE7UGI9bnVsbH1lbHNlIHRocm93IEVycm9yKHAoMTk4KSk7UWJ8fChRYj0hMCxSYj1sKX19ZnVuY3Rpb24gVmIoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjQwOTgpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBXYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIFhiKGEpe2lmKFZiKGEpIT09YSl0aHJvdyBFcnJvcihwKDE4OCkpO31cbmZ1bmN0aW9uIFliKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVZiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIFhiKGUpLGE7aWYoZj09PWQpcmV0dXJuIFhiKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IocCgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcihwKDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHAoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gWmIoYSl7YT1ZYihhKTtyZXR1cm4gbnVsbCE9PWE/JGIoYSk6bnVsbH1mdW5jdGlvbiAkYihhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYTtmb3IoYT1hLmNoaWxkO251bGwhPT1hOyl7dmFyIGI9JGIoYSk7aWYobnVsbCE9PWIpcmV0dXJuIGI7YT1hLnNpYmxpbmd9cmV0dXJuIG51bGx9XG52YXIgYWM9Y2EudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxiYz1jYS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxjYz1jYS51bnN0YWJsZV9zaG91bGRZaWVsZCxkYz1jYS51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsQj1jYS51bnN0YWJsZV9ub3csZWM9Y2EudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsZmM9Y2EudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksZ2M9Y2EudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksaGM9Y2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksaWM9Y2EudW5zdGFibGVfTG93UHJpb3JpdHksamM9Y2EudW5zdGFibGVfSWRsZVByaW9yaXR5LGtjPW51bGwsbGM9bnVsbDtmdW5jdGlvbiBtYyhhKXtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uQ29tbWl0RmliZXJSb290KXRyeXtsYy5vbkNvbW1pdEZpYmVyUm9vdChrYyxhLHZvaWQgMCwxMjg9PT0oYS5jdXJyZW50LmZsYWdzJjEyOCkpfWNhdGNoKGIpe319XG52YXIgb2M9TWF0aC5jbHozMj9NYXRoLmNsejMyOm5jLHBjPU1hdGgubG9nLHFjPU1hdGguTE4yO2Z1bmN0aW9uIG5jKGEpe2E+Pj49MDtyZXR1cm4gMD09PWE/MzI6MzEtKHBjKGEpL3FjfDApfDB9dmFyIHJjPTY0LHNjPTQxOTQzMDQ7XG5mdW5jdGlvbiB0YyhhKXtzd2l0Y2goYSYtYSl7Y2FzZSAxOnJldHVybiAxO2Nhc2UgMjpyZXR1cm4gMjtjYXNlIDQ6cmV0dXJuIDQ7Y2FzZSA4OnJldHVybiA4O2Nhc2UgMTY6cmV0dXJuIDE2O2Nhc2UgMzI6cmV0dXJuIDMyO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGEmNDE5NDI0MDtjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybiBhJjEzMDAyMzQyNDtjYXNlIDEzNDIxNzcyODpyZXR1cm4gMTM0MjE3NzI4O2Nhc2UgMjY4NDM1NDU2OnJldHVybiAyNjg0MzU0NTY7Y2FzZSA1MzY4NzA5MTI6cmV0dXJuIDUzNjg3MDkxMjtjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuIDEwNzM3NDE4MjQ7XG5kZWZhdWx0OnJldHVybiBhfX1mdW5jdGlvbiB1YyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiAwO3ZhciBkPTAsZT1hLnN1c3BlbmRlZExhbmVzLGY9YS5waW5nZWRMYW5lcyxnPWMmMjY4NDM1NDU1O2lmKDAhPT1nKXt2YXIgaD1nJn5lOzAhPT1oP2Q9dGMoaCk6KGYmPWcsMCE9PWYmJihkPXRjKGYpKSl9ZWxzZSBnPWMmfmUsMCE9PWc/ZD10YyhnKTowIT09ZiYmKGQ9dGMoZikpO2lmKDA9PT1kKXJldHVybiAwO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmUpJiYoZT1kJi1kLGY9YiYtYixlPj1mfHwxNj09PWUmJjAhPT0oZiY0MTk0MjQwKSkpcmV0dXJuIGI7MCE9PShkJjQpJiYoZHw9YyYxNik7Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1vYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIHZjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OnJldHVybiBiKzI1MDtjYXNlIDg6Y2FzZSAxNjpjYXNlIDMyOmNhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGIrNUUzO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuLTE7Y2FzZSAxMzQyMTc3Mjg6Y2FzZSAyNjg0MzU0NTY6Y2FzZSA1MzY4NzA5MTI6Y2FzZSAxMDczNzQxODI0OnJldHVybi0xO2RlZmF1bHQ6cmV0dXJuLTF9fVxuZnVuY3Rpb24gd2MoYSxiKXtmb3IodmFyIGM9YS5zdXNwZW5kZWRMYW5lcyxkPWEucGluZ2VkTGFuZXMsZT1hLmV4cGlyYXRpb25UaW1lcyxmPWEucGVuZGluZ0xhbmVzOzA8Zjspe3ZhciBnPTMxLW9jKGYpLGg9MTw8ZyxrPWVbZ107aWYoLTE9PT1rKXtpZigwPT09KGgmYyl8fDAhPT0oaCZkKSllW2ddPXZjKGgsYil9ZWxzZSBrPD1iJiYoYS5leHBpcmVkTGFuZXN8PWgpO2YmPX5ofX1mdW5jdGlvbiB4YyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24geWMoKXt2YXIgYT1yYztyYzw8PTE7MD09PShyYyY0MTk0MjQwKSYmKHJjPTY0KTtyZXR1cm4gYX1mdW5jdGlvbiB6YyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEFjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjs1MzY4NzA5MTIhPT1iJiYoYS5zdXNwZW5kZWRMYW5lcz0wLGEucGluZ2VkTGFuZXM9MCk7YT1hLmV2ZW50VGltZXM7Yj0zMS1vYyhiKTthW2JdPWN9ZnVuY3Rpb24gQmMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcyZ+YjthLnBlbmRpbmdMYW5lcz1iO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWI7YS5tdXRhYmxlUmVhZExhbmVzJj1iO2EuZW50YW5nbGVkTGFuZXMmPWI7Yj1hLmVudGFuZ2xlbWVudHM7dmFyIGQ9YS5ldmVudFRpbWVzO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yzspe3ZhciBlPTMxLW9jKGMpLGY9MTw8ZTtiW2VdPTA7ZFtlXT0tMTthW2VdPS0xO2MmPX5mfX1cbmZ1bmN0aW9uIENjKGEsYil7dmFyIGM9YS5lbnRhbmdsZWRMYW5lc3w9Yjtmb3IoYT1hLmVudGFuZ2xlbWVudHM7Yzspe3ZhciBkPTMxLW9jKGMpLGU9MTw8ZDtlJmJ8YVtkXSZiJiYoYVtkXXw9Yik7YyY9fmV9fXZhciBDPTA7ZnVuY3Rpb24gRGMoYSl7YSY9LWE7cmV0dXJuIDE8YT80PGE/MCE9PShhJjI2ODQzNTQ1NSk/MTY6NTM2ODcwOTEyOjQ6MX12YXIgRWMsRmMsR2MsSGMsSWMsSmM9ITEsS2M9W10sTGM9bnVsbCxNYz1udWxsLE5jPW51bGwsT2M9bmV3IE1hcCxQYz1uZXcgTWFwLFFjPVtdLFJjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIFNjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6TGM9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOk1jPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOk5jPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpPYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpQYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIFRjKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9e2Jsb2NrZWRPbjpiLGRvbUV2ZW50TmFtZTpjLGV2ZW50U3lzdGVtRmxhZ3M6ZCxuYXRpdmVFdmVudDpmLHRhcmdldENvbnRhaW5lcnM6W2VdfSxudWxsIT09YiYmKGI9Q2IoYiksbnVsbCE9PWImJkZjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtiPWEudGFyZ2V0Q29udGFpbmVycztudWxsIT09ZSYmLTE9PT1iLmluZGV4T2YoZSkmJmIucHVzaChlKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFVjKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c2luXCI6cmV0dXJuIExjPVRjKExjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBNYz1UYyhNYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gTmM9VGMoTmMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtPYy5zZXQoZixUYyhPYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsUGMuc2V0KGYsVGMoUGMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gVmMoYSl7dmFyIGI9V2MoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1WYihiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1XYihjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtJYyhhLnByaW9yaXR5LGZ1bmN0aW9uKCl7R2MoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24gWGMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPVljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGw9PT1jKXtjPWEubmF0aXZlRXZlbnQ7dmFyIGQ9bmV3IGMuY29uc3RydWN0b3IoYy50eXBlLGMpO3diPWQ7Yy50YXJnZXQuZGlzcGF0Y2hFdmVudChkKTt3Yj1udWxsfWVsc2UgcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJkZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIFpjKGEsYixjKXtYYyhhKSYmYy5kZWxldGUoYil9ZnVuY3Rpb24gJGMoKXtKYz0hMTtudWxsIT09TGMmJlhjKExjKSYmKExjPW51bGwpO251bGwhPT1NYyYmWGMoTWMpJiYoTWM9bnVsbCk7bnVsbCE9PU5jJiZYYyhOYykmJihOYz1udWxsKTtPYy5mb3JFYWNoKFpjKTtQYy5mb3JFYWNoKFpjKX1cbmZ1bmN0aW9uIGFkKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxKY3x8KEpjPSEwLGNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soY2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksJGMpKSl9XG5mdW5jdGlvbiBiZChhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBhZChiLGEpfWlmKDA8S2MubGVuZ3RoKXthZChLY1swXSxhKTtmb3IodmFyIGM9MTtjPEtjLmxlbmd0aDtjKyspe3ZhciBkPUtjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09TGMmJmFkKExjLGEpO251bGwhPT1NYyYmYWQoTWMsYSk7bnVsbCE9PU5jJiZhZChOYyxhKTtPYy5mb3JFYWNoKGIpO1BjLmZvckVhY2goYik7Zm9yKGM9MDtjPFFjLmxlbmd0aDtjKyspZD1RY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8UWMubGVuZ3RoJiYoYz1RY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylWYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJlFjLnNoaWZ0KCl9dmFyIGNkPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGRkPSEwO1xuZnVuY3Rpb24gZWQoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTEsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1mdW5jdGlvbiBnZChhLGIsYyxkKXt2YXIgZT1DLGY9Y2QudHJhbnNpdGlvbjtjZC50cmFuc2l0aW9uPW51bGw7dHJ5e0M9NCxmZChhLGIsYyxkKX1maW5hbGx5e0M9ZSxjZC50cmFuc2l0aW9uPWZ9fVxuZnVuY3Rpb24gZmQoYSxiLGMsZCl7aWYoZGQpe3ZhciBlPVljKGEsYixjLGQpO2lmKG51bGw9PT1lKWhkKGEsYixkLGlkLGMpLFNjKGEsZCk7ZWxzZSBpZihVYyhlLGEsYixjLGQpKWQuc3RvcFByb3BhZ2F0aW9uKCk7ZWxzZSBpZihTYyhhLGQpLGImNCYmLTE8UmMuaW5kZXhPZihhKSl7Zm9yKDtudWxsIT09ZTspe3ZhciBmPUNiKGUpO251bGwhPT1mJiZFYyhmKTtmPVljKGEsYixjLGQpO251bGw9PT1mJiZoZChhLGIsZCxpZCxjKTtpZihmPT09ZSlicmVhaztlPWZ9bnVsbCE9PWUmJmQuc3RvcFByb3BhZ2F0aW9uKCl9ZWxzZSBoZChhLGIsZCxudWxsLGMpfX12YXIgaWQ9bnVsbDtcbmZ1bmN0aW9uIFljKGEsYixjLGQpe2lkPW51bGw7YT14YihkKTthPVdjKGEpO2lmKG51bGwhPT1hKWlmKGI9VmIoYSksbnVsbD09PWIpYT1udWxsO2Vsc2UgaWYoYz1iLnRhZywxMz09PWMpe2E9V2IoYik7aWYobnVsbCE9PWEpcmV0dXJuIGE7YT1udWxsfWVsc2UgaWYoMz09PWMpe2lmKGIuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpcmV0dXJuIDM9PT1iLnRhZz9iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7YT1udWxsfWVsc2UgYiE9PWEmJihhPW51bGwpO2lkPWE7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBqZChhKXtzd2l0Y2goYSl7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbGlja1wiOmNhc2UgXCJjbG9zZVwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcImtleXVwXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcInBhc3RlXCI6Y2FzZSBcInBhdXNlXCI6Y2FzZSBcInBsYXlcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVydXBcIjpjYXNlIFwicmF0ZWNoYW5nZVwiOmNhc2UgXCJyZXNldFwiOmNhc2UgXCJyZXNpemVcIjpjYXNlIFwic2Vla2VkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6Y2FzZSBcInZvbHVtZWNoYW5nZVwiOmNhc2UgXCJjaGFuZ2VcIjpjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6Y2FzZSBcInRleHRJbnB1dFwiOmNhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6Y2FzZSBcImJlZm9yZWlucHV0XCI6Y2FzZSBcImJsdXJcIjpjYXNlIFwiZnVsbHNjcmVlbmNoYW5nZVwiOmNhc2UgXCJmb2N1c1wiOmNhc2UgXCJoYXNoY2hhbmdlXCI6Y2FzZSBcInBvcHN0YXRlXCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJzZWxlY3RzdGFydFwiOnJldHVybiAxO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInNjcm9sbFwiOmNhc2UgXCJ0b2dnbGVcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcIndoZWVsXCI6Y2FzZSBcIm1vdXNlZW50ZXJcIjpjYXNlIFwibW91c2VsZWF2ZVwiOmNhc2UgXCJwb2ludGVyZW50ZXJcIjpjYXNlIFwicG9pbnRlcmxlYXZlXCI6cmV0dXJuIDQ7XG5jYXNlIFwibWVzc2FnZVwiOnN3aXRjaChlYygpKXtjYXNlIGZjOnJldHVybiAxO2Nhc2UgZ2M6cmV0dXJuIDQ7Y2FzZSBoYzpjYXNlIGljOnJldHVybiAxNjtjYXNlIGpjOnJldHVybiA1MzY4NzA5MTI7ZGVmYXVsdDpyZXR1cm4gMTZ9ZGVmYXVsdDpyZXR1cm4gMTZ9fXZhciBrZD1udWxsLGxkPW51bGwsbWQ9bnVsbDtmdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9XG5mdW5jdGlvbiBvZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1mdW5jdGlvbiBwZCgpe3JldHVybiEwfWZ1bmN0aW9uIHFkKCl7cmV0dXJuITF9XG5mdW5jdGlvbiByZChhKXtmdW5jdGlvbiBiKGIsZCxlLGYsZyl7dGhpcy5fcmVhY3ROYW1lPWI7dGhpcy5fdGFyZ2V0SW5zdD1lO3RoaXMudHlwZT1kO3RoaXMubmF0aXZlRXZlbnQ9Zjt0aGlzLnRhcmdldD1nO3RoaXMuY3VycmVudFRhcmdldD1udWxsO2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJihiPWFbY10sdGhpc1tjXT1iP2IoZik6ZltjXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWYuZGVmYXVsdFByZXZlbnRlZD9mLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1mLnJldHVyblZhbHVlKT9wZDpxZDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXFkO3JldHVybiB0aGlzfUEoYi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJlxuKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXBkKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXBkKX0scGVyc2lzdDpmdW5jdGlvbigpe30saXNQZXJzaXN0ZW50OnBkfSk7cmV0dXJuIGJ9XG52YXIgc2Q9e2V2ZW50UGhhc2U6MCxidWJibGVzOjAsY2FuY2VsYWJsZTowLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6MCxpc1RydXN0ZWQ6MH0sdGQ9cmQoc2QpLHVkPUEoe30sc2Qse3ZpZXc6MCxkZXRhaWw6MH0pLHZkPXJkKHVkKSx3ZCx4ZCx5ZCxBZD1BKHt9LHVkLHtzY3JlZW5YOjAsc2NyZWVuWTowLGNsaWVudFg6MCxjbGllbnRZOjAscGFnZVg6MCxwYWdlWTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkLGJ1dHRvbjowLGJ1dHRvbnM6MCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hLnJlbGF0ZWRUYXJnZXQ/YS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50OmEucmVsYXRlZFRhcmdldH0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpblxuYSlyZXR1cm4gYS5tb3ZlbWVudFg7YSE9PXlkJiYoeWQmJlwibW91c2Vtb3ZlXCI9PT1hLnR5cGU/KHdkPWEuc2NyZWVuWC15ZC5zY3JlZW5YLHhkPWEuc2NyZWVuWS15ZC5zY3JlZW5ZKTp4ZD13ZD0wLHlkPWEpO3JldHVybiB3ZH0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe3JldHVyblwibW92ZW1lbnRZXCJpbiBhP2EubW92ZW1lbnRZOnhkfX0pLEJkPXJkKEFkKSxDZD1BKHt9LEFkLHtkYXRhVHJhbnNmZXI6MH0pLERkPXJkKENkKSxFZD1BKHt9LHVkLHtyZWxhdGVkVGFyZ2V0OjB9KSxGZD1yZChFZCksR2Q9QSh7fSxzZCx7YW5pbWF0aW9uTmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksSGQ9cmQoR2QpLElkPUEoe30sc2Qse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxKZD1yZChJZCksS2Q9QSh7fSxzZCx7ZGF0YTowfSksTGQ9cmQoS2QpLE1kPXtFc2M6XCJFc2NhcGVcIixcblNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LE5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLFxuMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxPZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHpkKCl7cmV0dXJuIFBkfVxudmFyIFFkPUEoe30sdWQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9TWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP05kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sY29kZTowLGxvY2F0aW9uOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLHJlcGVhdDowLGxvY2FsZTowLGdldE1vZGlmaWVyU3RhdGU6emQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29kKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxSZD1yZChRZCksU2Q9QSh7fSxBZCx7cG9pbnRlcklkOjAsd2lkdGg6MCxoZWlnaHQ6MCxwcmVzc3VyZTowLHRhbmdlbnRpYWxQcmVzc3VyZTowLHRpbHRYOjAsdGlsdFk6MCx0d2lzdDowLHBvaW50ZXJUeXBlOjAsaXNQcmltYXJ5OjB9KSxUZD1yZChTZCksVWQ9QSh7fSx1ZCx7dG91Y2hlczowLHRhcmdldFRvdWNoZXM6MCxjaGFuZ2VkVG91Y2hlczowLGFsdEtleTowLG1ldGFLZXk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkfSksVmQ9cmQoVWQpLFdkPUEoe30sc2Qse3Byb3BlcnR5TmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksWGQ9cmQoV2QpLFlkPUEoe30sQWQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LFxuZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOjAsZGVsdGFNb2RlOjB9KSxaZD1yZChZZCksJGQ9WzksMTMsMjcsMzJdLGFlPWlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxiZT1udWxsO2lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihiZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBjZT1pYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWJlLGRlPWlhJiYoIWFlfHxiZSYmODxiZSYmMTE+PWJlKSxlZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxmZT0hMTtcbmZ1bmN0aW9uIGdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09JGQuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImZvY3Vzb3V0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gaGUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgaWU9ITE7ZnVuY3Rpb24gamUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGhlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtmZT0hMDtyZXR1cm4gZWU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09ZWUmJmZlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGtlKGEsYil7aWYoaWUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWFlJiZnZShhLGIpPyhhPW5kKCksbWQ9bGQ9a2Q9bnVsbCxpZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gZGUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGxlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIG1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhbGVbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIG5lKGEsYixjLGQpe0ViKGQpO2I9b2UoYixcIm9uQ2hhbmdlXCIpOzA8Yi5sZW5ndGgmJihjPW5ldyB0ZChcIm9uQ2hhbmdlXCIsXCJjaGFuZ2VcIixudWxsLGMsZCksYS5wdXNoKHtldmVudDpjLGxpc3RlbmVyczpifSkpfXZhciBwZT1udWxsLHFlPW51bGw7ZnVuY3Rpb24gcmUoYSl7c2UoYSwwKX1mdW5jdGlvbiB0ZShhKXt2YXIgYj11ZShhKTtpZihXYShiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIHZlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIHdlPSExO2lmKGlhKXt2YXIgeGU7aWYoaWEpe3ZhciB5ZT1cIm9uaW5wdXRcImluIGRvY3VtZW50O2lmKCF5ZSl7dmFyIHplPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7emUuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLFwicmV0dXJuO1wiKTt5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgemUub25pbnB1dH14ZT15ZX1lbHNlIHhlPSExO3dlPXhlJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpfWZ1bmN0aW9uIEFlKCl7cGUmJihwZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkscWU9cGU9bnVsbCl9ZnVuY3Rpb24gQmUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJnRlKHFlKSl7dmFyIGI9W107bmUoYixxZSxhLHhiKGEpKTtKYihyZSxiKX19XG5mdW5jdGlvbiBDZShhLGIsYyl7XCJmb2N1c2luXCI9PT1hPyhBZSgpLHBlPWIscWU9YyxwZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkpOlwiZm9jdXNvdXRcIj09PWEmJkFlKCl9ZnVuY3Rpb24gRGUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gdGUocWUpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gRmUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gR2UoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBIZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpHZTtcbmZ1bmN0aW9uIEllKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO2lmKCFqYS5jYWxsKGIsZSl8fCFIZShhW2VdLGJbZV0pKXJldHVybiExfXJldHVybiEwfWZ1bmN0aW9uIEplKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEtlKGEsYil7dmFyIGM9SmUoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9SmUoYyl9fWZ1bmN0aW9uIExlKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TGUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTWUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gTmUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbmZ1bmN0aW9uIE9lKGEpe3ZhciBiPU1lKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmYyYmYy5vd25lckRvY3VtZW50JiZMZShjLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihudWxsIT09ZCYmTmUoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZihhPShiPWMub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZiLmRlZmF1bHRWaWV3fHx3aW5kb3csYS5nZXRTZWxlY3Rpb24pe2E9YS5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jLnRleHRDb250ZW50Lmxlbmd0aCxmPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9mOk1hdGgubWluKGQuZW5kLGUpOyFhLmV4dGVuZCYmZj5kJiYoZT1kLGQ9ZixmPWUpO2U9S2UoYyxmKTt2YXIgZz1LZShjLFxuZCk7ZSYmZyYmKDEhPT1hLnJhbmdlQ291bnR8fGEuYW5jaG9yTm9kZSE9PWUubm9kZXx8YS5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8YS5mb2N1c05vZGUhPT1nLm5vZGV8fGEuZm9jdXNPZmZzZXQhPT1nLm9mZnNldCkmJihiPWIuY3JlYXRlUmFuZ2UoKSxiLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCksYS5yZW1vdmVBbGxSYW5nZXMoKSxmPmQ/KGEuYWRkUmFuZ2UoYiksYS5leHRlbmQoZy5ub2RlLGcub2Zmc2V0KSk6KGIuc2V0RW5kKGcubm9kZSxnLm9mZnNldCksYS5hZGRSYW5nZShiKSkpfWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmZvY3VzJiZjLmZvY3VzKCk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LGEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9fVxudmFyIFBlPWlhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsUWU9bnVsbCxSZT1udWxsLFNlPW51bGwsVGU9ITE7XG5mdW5jdGlvbiBVZShhLGIsYyl7dmFyIGQ9Yy53aW5kb3c9PT1jP2MuZG9jdW1lbnQ6OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7VGV8fG51bGw9PVFlfHxRZSE9PVhhKGQpfHwoZD1RZSxcInNlbGVjdGlvblN0YXJ0XCJpbiBkJiZOZShkKT9kPXtzdGFydDpkLnNlbGVjdGlvblN0YXJ0LGVuZDpkLnNlbGVjdGlvbkVuZH06KGQ9KGQub3duZXJEb2N1bWVudCYmZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGQ9e2FuY2hvck5vZGU6ZC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpkLmFuY2hvck9mZnNldCxmb2N1c05vZGU6ZC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6ZC5mb2N1c09mZnNldH0pLFNlJiZJZShTZSxkKXx8KFNlPWQsZD1vZShSZSxcIm9uU2VsZWN0XCIpLDA8ZC5sZW5ndGgmJihiPW5ldyB0ZChcIm9uU2VsZWN0XCIsXCJzZWxlY3RcIixudWxsLGIsYyksYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpkfSksYi50YXJnZXQ9UWUpKSl9XG5mdW5jdGlvbiBWZShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBXZT17YW5pbWF0aW9uZW5kOlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6VmUoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxYZT17fSxZZT17fTtcbmlhJiYoWWU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgV2UuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgV2UuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgV2UuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgV2UudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBaZShhKXtpZihYZVthXSlyZXR1cm4gWGVbYV07aWYoIVdlW2FdKXJldHVybiBhO3ZhciBiPVdlW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFllKXJldHVybiBYZVthXT1iW2NdO3JldHVybiBhfXZhciAkZT1aZShcImFuaW1hdGlvbmVuZFwiKSxhZj1aZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxiZj1aZShcImFuaW1hdGlvbnN0YXJ0XCIpLGNmPVplKFwidHJhbnNpdGlvbmVuZFwiKSxkZj1uZXcgTWFwLGVmPVwiYWJvcnQgYXV4Q2xpY2sgY2FuY2VsIGNhblBsYXkgY2FuUGxheVRocm91Z2ggY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZHJhZyBkcmFnRW5kIGRyYWdFbnRlciBkcmFnRXhpdCBkcmFnTGVhdmUgZHJhZ092ZXIgZHJhZ1N0YXJ0IGRyb3AgZHVyYXRpb25DaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgZ290UG9pbnRlckNhcHR1cmUgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbG9zdFBvaW50ZXJDYXB0dXJlIG1vdXNlRG93biBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSBwbGF5aW5nIHBvaW50ZXJDYW5jZWwgcG9pbnRlckRvd24gcG9pbnRlck1vdmUgcG9pbnRlck91dCBwb2ludGVyT3ZlciBwb2ludGVyVXAgcHJvZ3Jlc3MgcmF0ZUNoYW5nZSByZXNldCByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdWJtaXQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvdWNoQ2FuY2VsIHRvdWNoRW5kIHRvdWNoU3RhcnQgdm9sdW1lQ2hhbmdlIHNjcm9sbCB0b2dnbGUgdG91Y2hNb3ZlIHdhaXRpbmcgd2hlZWxcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBmZihhLGIpe2RmLnNldChhLGIpO2ZhKGIsW2FdKX1mb3IodmFyIGdmPTA7Z2Y8ZWYubGVuZ3RoO2dmKyspe3ZhciBoZj1lZltnZl0samY9aGYudG9Mb3dlckNhc2UoKSxrZj1oZlswXS50b1VwcGVyQ2FzZSgpK2hmLnNsaWNlKDEpO2ZmKGpmLFwib25cIitrZil9ZmYoJGUsXCJvbkFuaW1hdGlvbkVuZFwiKTtmZihhZixcIm9uQW5pbWF0aW9uSXRlcmF0aW9uXCIpO2ZmKGJmLFwib25BbmltYXRpb25TdGFydFwiKTtmZihcImRibGNsaWNrXCIsXCJvbkRvdWJsZUNsaWNrXCIpO2ZmKFwiZm9jdXNpblwiLFwib25Gb2N1c1wiKTtmZihcImZvY3Vzb3V0XCIsXCJvbkJsdXJcIik7ZmYoY2YsXCJvblRyYW5zaXRpb25FbmRcIik7aGEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uTW91c2VMZWF2ZVwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2hhKFwib25Qb2ludGVyRW50ZXJcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7XG5oYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2ZhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2ZhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZmEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO1xuZmEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIGxmPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksbWY9bmV3IFNldChcImNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHRvZ2dsZVwiLnNwbGl0KFwiIFwiKS5jb25jYXQobGYpKTtcbmZ1bmN0aW9uIG5mKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1jO1ViKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBzZShhLGIpe2I9MCE9PShiJjQpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLGU9ZC5ldmVudDtkPWQubGlzdGVuZXJzO2E6e3ZhciBmPXZvaWQgMDtpZihiKWZvcih2YXIgZz1kLmxlbmd0aC0xOzA8PWc7Zy0tKXt2YXIgaD1kW2ddLGs9aC5pbnN0YW5jZSxsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9ZWxzZSBmb3IoZz0wO2c8ZC5sZW5ndGg7ZysrKXtoPWRbZ107az1oLmluc3RhbmNlO2w9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7bmYoZSxoLGwpO2Y9a319fWlmKFFiKXRocm93IGE9UmIsUWI9ITEsUmI9bnVsbCxhO31cbmZ1bmN0aW9uIEQoYSxiKXt2YXIgYz1iW29mXTt2b2lkIDA9PT1jJiYoYz1iW29mXT1uZXcgU2V0KTt2YXIgZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KHBmKGIsYSwyLCExKSxjLmFkZChkKSl9ZnVuY3Rpb24gcWYoYSxiLGMpe3ZhciBkPTA7YiYmKGR8PTQpO3BmKGMsYSxkLGIpfXZhciByZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIHNmKGEpe2lmKCFhW3JmXSl7YVtyZl09ITA7ZGEuZm9yRWFjaChmdW5jdGlvbihiKXtcInNlbGVjdGlvbmNoYW5nZVwiIT09YiYmKG1mLmhhcyhiKXx8cWYoYiwhMSxhKSxxZihiLCEwLGEpKX0pO3ZhciBiPTk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O251bGw9PT1ifHxiW3JmXXx8KGJbcmZdPSEwLHFmKFwic2VsZWN0aW9uY2hhbmdlXCIsITEsYikpfX1cbmZ1bmN0aW9uIHBmKGEsYixjLGQpe3N3aXRjaChqZChiKSl7Y2FzZSAxOnZhciBlPWVkO2JyZWFrO2Nhc2UgNDplPWdkO2JyZWFrO2RlZmF1bHQ6ZT1mZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshTGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gaGQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz1XYyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59SmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPWRmLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCxuPWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOm49XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6bj1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgJGU6Y2FzZSBhZjpjYXNlIGJmOms9SGQ7YnJlYWs7Y2FzZSBjZjprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB0PTAhPT0oYiY0KSxKPSF0JiZcInNjcm9sbFwiPT09YSx4PXQ/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dD1bXTtmb3IodmFyIHc9ZCx1O251bGwhPT1cbnc7KXt1PXc7dmFyIEY9dS5zdGF0ZU5vZGU7NT09PXUudGFnJiZudWxsIT09RiYmKHU9RixudWxsIT09eCYmKEY9S2Iodyx4KSxudWxsIT1GJiZ0LnB1c2godGYodyxGLHUpKSkpO2lmKEopYnJlYWs7dz13LnJldHVybn0wPHQubGVuZ3RoJiYoaD1uZXcgayhoLG4sbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6dH0pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJmMhPT13YiYmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KSYmKFdjKG4pfHxuW3VmXSkpYnJlYWsgYTtpZihrfHxoKXtoPWUud2luZG93PT09ZT9lOihoPWUub3duZXJEb2N1bWVudCk/aC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGspe2lmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCxrPWQsbj1uP1djKG4pOm51bGwsbnVsbCE9PVxubiYmKEo9VmIobiksbiE9PUp8fDUhPT1uLnRhZyYmNiE9PW4udGFnKSluPW51bGx9ZWxzZSBrPW51bGwsbj1kO2lmKGshPT1uKXt0PUJkO0Y9XCJvbk1vdXNlTGVhdmVcIjt4PVwib25Nb3VzZUVudGVyXCI7dz1cIm1vdXNlXCI7aWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKXQ9VGQsRj1cIm9uUG9pbnRlckxlYXZlXCIseD1cIm9uUG9pbnRlckVudGVyXCIsdz1cInBvaW50ZXJcIjtKPW51bGw9PWs/aDp1ZShrKTt1PW51bGw9PW4/aDp1ZShuKTtoPW5ldyB0KEYsdytcImxlYXZlXCIsayxjLGUpO2gudGFyZ2V0PUo7aC5yZWxhdGVkVGFyZ2V0PXU7Rj1udWxsO1djKGUpPT09ZCYmKHQ9bmV3IHQoeCx3K1wiZW50ZXJcIixuLGMsZSksdC50YXJnZXQ9dSx0LnJlbGF0ZWRUYXJnZXQ9SixGPXQpO0o9RjtpZihrJiZuKWI6e3Q9azt4PW47dz0wO2Zvcih1PXQ7dTt1PXZmKHUpKXcrKzt1PTA7Zm9yKEY9eDtGO0Y9dmYoRikpdSsrO2Zvcig7MDx3LXU7KXQ9dmYodCksdy0tO2Zvcig7MDx1LXc7KXg9XG52Zih4KSx1LS07Zm9yKDt3LS07KXtpZih0PT09eHx8bnVsbCE9PXgmJnQ9PT14LmFsdGVybmF0ZSlicmVhayBiO3Q9dmYodCk7eD12Zih4KX10PW51bGx9ZWxzZSB0PW51bGw7bnVsbCE9PWsmJndmKGcsaCxrLHQsITEpO251bGwhPT1uJiZudWxsIT09SiYmd2YoZyxKLG4sdCwhMCl9fX1hOntoPWQ/dWUoZCk6d2luZG93O2s9aC5ub2RlTmFtZSYmaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1rfHxcImlucHV0XCI9PT1rJiZcImZpbGVcIj09PWgudHlwZSl2YXIgbmE9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSluYT1GZTtlbHNle25hPURlO3ZhciB4YT1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKG5hPUVlKTtpZihuYSYmKG5hPW5hKGEsZCkpKXtuZShnLG5hLGMsZSk7YnJlYWsgYX14YSYmeGEoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJih4YT1oLl93cmFwcGVyU3RhdGUpJiZcbnhhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmNiKGgsXCJudW1iZXJcIixoLnZhbHVlKX14YT1kP3VlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihtZSh4YSl8fFwidHJ1ZVwiPT09eGEuY29udGVudEVkaXRhYmxlKVFlPXhhLFJlPWQsU2U9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpTZT1SZT1RZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpUZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6VGU9ITE7VWUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihQZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlVlKGcsYyxlKX12YXIgJGE7aWYoYWUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpiYT1cIm9uQ29tcG9zaXRpb25FbmRcIjtcbmJyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6YmE9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1iYT12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoYmE9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoYmE9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7YmEmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PWJhP1wib25Db21wb3NpdGlvbkVuZFwiPT09YmEmJmllJiYoJGE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSx4YT1vZShkLGJhKSwwPHhhLmxlbmd0aCYmKGJhPW5ldyBMZChiYSxhLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmJhLGxpc3RlbmVyczp4YX0pLCRhP2JhLmRhdGE9JGE6KCRhPWhlKGMpLG51bGwhPT0kYSYmKGJhLmRhdGE9JGEpKSkpO2lmKCRhPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLFxuMDxkLmxlbmd0aCYmKGU9bmV3IExkKFwib25CZWZvcmVJbnB1dFwiLFwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPSRhKX1zZShnLGIpfSl9ZnVuY3Rpb24gdGYoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBvZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPUtiKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KHRmKGEsZixlKSksZj1LYihhLGIpLG51bGwhPWYmJmQucHVzaCh0ZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIHZmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiB3ZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPUtiKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KHRmKGMsayxoKSkpOmV8fChrPUtiKGMsZiksbnVsbCE9ayYmZy5wdXNoKHRmKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9dmFyIHhmPS9cXHJcXG4/L2cseWY9L1xcdTAwMDB8XFx1RkZGRC9nO2Z1bmN0aW9uIHpmKGEpe3JldHVybihcInN0cmluZ1wiPT09dHlwZW9mIGE/YTpcIlwiK2EpLnJlcGxhY2UoeGYsXCJcXG5cIikucmVwbGFjZSh5ZixcIlwiKX1mdW5jdGlvbiBBZihhLGIsYyl7Yj16ZihiKTtpZih6ZihhKSE9PWImJmMpdGhyb3cgRXJyb3IocCg0MjUpKTt9ZnVuY3Rpb24gQmYoKXt9XG52YXIgQ2Y9bnVsbCxEZj1udWxsO2Z1bmN0aW9uIEVmKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfVxudmFyIEZmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLEdmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMCxIZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgUHJvbWlzZT9Qcm9taXNlOnZvaWQgMCxKZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcXVldWVNaWNyb3Rhc2s/cXVldWVNaWNyb3Rhc2s6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBIZj9mdW5jdGlvbihhKXtyZXR1cm4gSGYucmVzb2x2ZShudWxsKS50aGVuKGEpLmNhdGNoKElmKX06RmY7ZnVuY3Rpb24gSWYoYSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGE7fSl9XG5mdW5jdGlvbiBLZihhLGIpe3ZhciBjPWIsZD0wO2Rve3ZhciBlPWMubmV4dFNpYmxpbmc7YS5yZW1vdmVDaGlsZChjKTtpZihlJiY4PT09ZS5ub2RlVHlwZSlpZihjPWUuZGF0YSxcIi8kXCI9PT1jKXtpZigwPT09ZCl7YS5yZW1vdmVDaGlsZChlKTtiZChiKTtyZXR1cm59ZC0tfWVsc2VcIiRcIiE9PWMmJlwiJD9cIiE9PWMmJlwiJCFcIiE9PWN8fGQrKztjPWV9d2hpbGUoYyk7YmQoYil9ZnVuY3Rpb24gTGYoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWs7aWYoOD09PWIpe2I9YS5kYXRhO2lmKFwiJFwiPT09Ynx8XCIkIVwiPT09Ynx8XCIkP1wiPT09YilicmVhaztpZihcIi8kXCI9PT1iKXJldHVybiBudWxsfX1yZXR1cm4gYX1cbmZ1bmN0aW9uIE1mKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciBOZj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxPZj1cIl9fcmVhY3RGaWJlciRcIitOZixQZj1cIl9fcmVhY3RQcm9wcyRcIitOZix1Zj1cIl9fcmVhY3RDb250YWluZXIkXCIrTmYsb2Y9XCJfX3JlYWN0RXZlbnRzJFwiK05mLFFmPVwiX19yZWFjdExpc3RlbmVycyRcIitOZixSZj1cIl9fcmVhY3RIYW5kbGVzJFwiK05mO1xuZnVuY3Rpb24gV2MoYSl7dmFyIGI9YVtPZl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbdWZdfHxjW09mXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPU1mKGEpO251bGwhPT1hOyl7aWYoYz1hW09mXSlyZXR1cm4gYzthPU1mKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDYihhKXthPWFbT2ZdfHxhW3VmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gdWUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHAoMzMpKTt9ZnVuY3Rpb24gRGIoYSl7cmV0dXJuIGFbUGZdfHxudWxsfXZhciBTZj1bXSxUZj0tMTtmdW5jdGlvbiBVZihhKXtyZXR1cm57Y3VycmVudDphfX1cbmZ1bmN0aW9uIEUoYSl7MD5UZnx8KGEuY3VycmVudD1TZltUZl0sU2ZbVGZdPW51bGwsVGYtLSl9ZnVuY3Rpb24gRyhhLGIpe1RmKys7U2ZbVGZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgVmY9e30sSD1VZihWZiksV2Y9VWYoITEpLFhmPVZmO2Z1bmN0aW9uIFlmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gVmY7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBaZihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uICRmKCl7RShXZik7RShIKX1mdW5jdGlvbiBhZyhhLGIsYyl7aWYoSC5jdXJyZW50IT09VmYpdGhyb3cgRXJyb3IocCgxNjgpKTtHKEgsYik7RyhXZixjKX1mdW5jdGlvbiBiZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7Yj1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGIpKXRocm93IEVycm9yKHAoMTA4LFJhKGEpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIEEoe30sYyxkKX1cbmZ1bmN0aW9uIGNnKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxWZjtYZj1ILmN1cnJlbnQ7RyhILGEpO0coV2YsV2YuY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gZGcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHAoMTY5KSk7Yz8oYT1iZyhhLGIsWGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxFKFdmKSxFKEgpLEcoSCxhKSk6RShXZik7RyhXZixjKX12YXIgZWc9bnVsbCxmZz0hMSxnZz0hMTtmdW5jdGlvbiBoZyhhKXtudWxsPT09ZWc/ZWc9W2FdOmVnLnB1c2goYSl9ZnVuY3Rpb24gaWcoYSl7Zmc9ITA7aGcoYSl9XG5mdW5jdGlvbiBqZygpe2lmKCFnZyYmbnVsbCE9PWVnKXtnZz0hMDt2YXIgYT0wLGI9Qzt0cnl7dmFyIGM9ZWc7Zm9yKEM9MTthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXTtkbyBkPWQoITApO3doaWxlKG51bGwhPT1kKX1lZz1udWxsO2ZnPSExfWNhdGNoKGUpe3Rocm93IG51bGwhPT1lZyYmKGVnPWVnLnNsaWNlKGErMSkpLGFjKGZjLGpnKSxlO31maW5hbGx5e0M9YixnZz0hMX19cmV0dXJuIG51bGx9dmFyIGtnPVtdLGxnPTAsbWc9bnVsbCxuZz0wLG9nPVtdLHBnPTAscWc9bnVsbCxyZz0xLHNnPVwiXCI7ZnVuY3Rpb24gdGcoYSxiKXtrZ1tsZysrXT1uZztrZ1tsZysrXT1tZzttZz1hO25nPWJ9XG5mdW5jdGlvbiB1ZyhhLGIsYyl7b2dbcGcrK109cmc7b2dbcGcrK109c2c7b2dbcGcrK109cWc7cWc9YTt2YXIgZD1yZzthPXNnO3ZhciBlPTMyLW9jKGQpLTE7ZCY9figxPDxlKTtjKz0xO3ZhciBmPTMyLW9jKGIpK2U7aWYoMzA8Zil7dmFyIGc9ZS1lJTU7Zj0oZCYoMTw8ZyktMSkudG9TdHJpbmcoMzIpO2Q+Pj1nO2UtPWc7cmc9MTw8MzItb2MoYikrZXxjPDxlfGQ7c2c9ZithfWVsc2Ugcmc9MTw8ZnxjPDxlfGQsc2c9YX1mdW5jdGlvbiB2ZyhhKXtudWxsIT09YS5yZXR1cm4mJih0ZyhhLDEpLHVnKGEsMSwwKSl9ZnVuY3Rpb24gd2coYSl7Zm9yKDthPT09bWc7KW1nPWtnWy0tbGddLGtnW2xnXT1udWxsLG5nPWtnWy0tbGddLGtnW2xnXT1udWxsO2Zvcig7YT09PXFnOylxZz1vZ1stLXBnXSxvZ1twZ109bnVsbCxzZz1vZ1stLXBnXSxvZ1twZ109bnVsbCxyZz1vZ1stLXBnXSxvZ1twZ109bnVsbH12YXIgeGc9bnVsbCx5Zz1udWxsLEk9ITEsemc9bnVsbDtcbmZ1bmN0aW9uIEFnKGEsYil7dmFyIGM9QmcoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yj1hLmRlbGV0aW9ucztudWxsPT09Yj8oYS5kZWxldGlvbnM9W2NdLGEuZmxhZ3N8PTE2KTpiLnB1c2goYyl9XG5mdW5jdGlvbiBDZyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9Yix4Zz1hLHlnPUxmKGIuZmlyc3RDaGlsZCksITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9Yix4Zz1hLHlnPW51bGwsITApOiExO2Nhc2UgMTM6cmV0dXJuIGI9OCE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhjPW51bGwhPT1xZz97aWQ6cmcsb3ZlcmZsb3c6c2d9Om51bGwsYS5tZW1vaXplZFN0YXRlPXtkZWh5ZHJhdGVkOmIsdHJlZUNvbnRleHQ6YyxyZXRyeUxhbmU6MTA3Mzc0MTgyNH0sYz1CZygxOCxudWxsLG51bGwsMCksYy5zdGF0ZU5vZGU9YixjLnJldHVybj1hLGEuY2hpbGQ9Yyx4Zz1hLHlnPVxubnVsbCwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gRGcoYSl7cmV0dXJuIDAhPT0oYS5tb2RlJjEpJiYwPT09KGEuZmxhZ3MmMTI4KX1mdW5jdGlvbiBFZyhhKXtpZihJKXt2YXIgYj15ZztpZihiKXt2YXIgYz1iO2lmKCFDZyhhLGIpKXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2I9TGYoYy5uZXh0U2libGluZyk7dmFyIGQ9eGc7YiYmQ2coYSxiKT9BZyhkLGMpOihhLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MixJPSExLHhnPWEpfX1lbHNle2lmKERnKGEpKXRocm93IEVycm9yKHAoNDE4KSk7YS5mbGFncz1hLmZsYWdzJi00MDk3fDI7ST0hMTt4Zz1hfX19ZnVuY3Rpb24gRmcoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO3hnPWF9XG5mdW5jdGlvbiBHZyhhKXtpZihhIT09eGcpcmV0dXJuITE7aWYoIUkpcmV0dXJuIEZnKGEpLEk9ITAsITE7dmFyIGI7KGI9MyE9PWEudGFnKSYmIShiPTUhPT1hLnRhZykmJihiPWEudHlwZSxiPVwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhRWYoYS50eXBlLGEubWVtb2l6ZWRQcm9wcykpO2lmKGImJihiPXlnKSl7aWYoRGcoYSkpdGhyb3cgSGcoKSxFcnJvcihwKDQxOCkpO2Zvcig7YjspQWcoYSxiKSxiPUxmKGIubmV4dFNpYmxpbmcpfUZnKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IocCgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7eWc9TGYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ315Zz1cbm51bGx9fWVsc2UgeWc9eGc/TGYoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gSGcoKXtmb3IodmFyIGE9eWc7YTspYT1MZihhLm5leHRTaWJsaW5nKX1mdW5jdGlvbiBJZygpe3lnPXhnPW51bGw7ST0hMX1mdW5jdGlvbiBKZyhhKXtudWxsPT09emc/emc9W2FdOnpnLnB1c2goYSl9dmFyIEtnPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO2Z1bmN0aW9uIExnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9QSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifXZhciBNZz1VZihudWxsKSxOZz1udWxsLE9nPW51bGwsUGc9bnVsbDtmdW5jdGlvbiBRZygpe1BnPU9nPU5nPW51bGx9ZnVuY3Rpb24gUmcoYSl7dmFyIGI9TWcuY3VycmVudDtFKE1nKTthLl9jdXJyZW50VmFsdWU9Yn1cbmZ1bmN0aW9uIFNnKGEsYixjKXtmb3IoO251bGwhPT1hOyl7dmFyIGQ9YS5hbHRlcm5hdGU7KGEuY2hpbGRMYW5lcyZiKSE9PWI/KGEuY2hpbGRMYW5lc3w9YixudWxsIT09ZCYmKGQuY2hpbGRMYW5lc3w9YikpOm51bGwhPT1kJiYoZC5jaGlsZExhbmVzJmIpIT09YiYmKGQuY2hpbGRMYW5lc3w9Yik7aWYoYT09PWMpYnJlYWs7YT1hLnJldHVybn19ZnVuY3Rpb24gVGcoYSxiKXtOZz1hO1BnPU9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYoVWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gVmcoYSl7dmFyIGI9YS5fY3VycmVudFZhbHVlO2lmKFBnIT09YSlpZihhPXtjb250ZXh0OmEsbWVtb2l6ZWRWYWx1ZTpiLG5leHQ6bnVsbH0sbnVsbD09PU9nKXtpZihudWxsPT09TmcpdGhyb3cgRXJyb3IocCgzMDgpKTtPZz1hO05nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YX19ZWxzZSBPZz1PZy5uZXh0PWE7cmV0dXJuIGJ9dmFyIFdnPW51bGw7ZnVuY3Rpb24gWGcoYSl7bnVsbD09PVdnP1dnPVthXTpXZy5wdXNoKGEpfWZ1bmN0aW9uIFlnKGEsYixjLGQpe3ZhciBlPWIuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGMubmV4dD1jLFhnKGIpKTooYy5uZXh0PWUubmV4dCxlLm5leHQ9Yyk7Yi5pbnRlcmxlYXZlZD1jO3JldHVybiBaZyhhLGQpfVxuZnVuY3Rpb24gWmcoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfXZhciAkZz0hMTtmdW5jdGlvbiBhaChhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24gYmgoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gY2goYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19XG5mdW5jdGlvbiBkaChhLGIsYyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtkPWQuc2hhcmVkO2lmKDAhPT0oSyYyKSl7dmFyIGU9ZC5wZW5kaW5nO251bGw9PT1lP2IubmV4dD1iOihiLm5leHQ9ZS5uZXh0LGUubmV4dD1iKTtkLnBlbmRpbmc9YjtyZXR1cm4gWmcoYSxjKX1lPWQuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGIubmV4dD1iLFhnKGQpKTooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5pbnRlcmxlYXZlZD1iO3JldHVybiBaZyhhLGMpfWZ1bmN0aW9uIGVoKGEsYixjKXtiPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIuc2hhcmVkLDAhPT0oYyY0MTk0MjQwKSkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG5mdW5jdGlvbiBmaChhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gZ2goYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTskZz0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBtPWEuYWx0ZXJuYXRlO251bGwhPT1tJiYobT1tLnVwZGF0ZVF1ZXVlLGg9bS5sYXN0QmFzZVVwZGF0ZSxoIT09ZyYmKG51bGw9PT1oP20uZmlyc3RCYXNlVXBkYXRlPWw6aC5uZXh0PWwsbS5sYXN0QmFzZVVwZGF0ZT1rKSl9aWYobnVsbCE9PWYpe3ZhciBxPWUuYmFzZVN0YXRlO2c9MDttPWw9az1udWxsO2g9Zjtkb3t2YXIgcj1oLmxhbmUseT1oLmV2ZW50VGltZTtpZigoZCZyKT09PXIpe251bGwhPT1tJiYobT1tLm5leHQ9e2V2ZW50VGltZTp5LGxhbmU6MCx0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBuPWEsdD1oO3I9Yjt5PWM7c3dpdGNoKHQudGFnKXtjYXNlIDE6bj10LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4pe3E9bi5jYWxsKHkscSxyKTticmVhayBhfXE9bjticmVhayBhO2Nhc2UgMzpuLmZsYWdzPW4uZmxhZ3MmLTY1NTM3fDEyODtjYXNlIDA6bj10LnBheWxvYWQ7cj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbj9uLmNhbGwoeSxxLHIpOm47aWYobnVsbD09PXJ8fHZvaWQgMD09PXIpYnJlYWsgYTtxPUEoe30scSxyKTticmVhayBhO2Nhc2UgMjokZz0hMH19bnVsbCE9PWguY2FsbGJhY2smJjAhPT1oLmxhbmUmJihhLmZsYWdzfD02NCxyPWUuZWZmZWN0cyxudWxsPT09cj9lLmVmZmVjdHM9W2hdOnIucHVzaChoKSl9ZWxzZSB5PXtldmVudFRpbWU6eSxsYW5lOnIsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bT8obD1tPXksaz1xKTptPW0ubmV4dD15LGd8PXI7XG5oPWgubmV4dDtpZihudWxsPT09aClpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSByPWgsaD1yLm5leHQsci5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1yLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09bSYmKGs9cSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bTtiPWUuc2hhcmVkLmludGVybGVhdmVkO2lmKG51bGwhPT1iKXtlPWI7ZG8gZ3w9ZS5sYW5lLGU9ZS5uZXh0O3doaWxlKGUhPT1iKX1lbHNlIG51bGw9PT1mJiYoZS5zaGFyZWQubGFuZXM9MCk7aGh8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT1xfX1cbmZ1bmN0aW9uIGloKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcihwKDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIGpoPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIGtoKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpBKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBuaD17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9WYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1MKCksZT1saChhKSxmPWNoKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9ZGgoYSxmLGUpO251bGwhPT1iJiYobWgoYixhLGUsZCksZWgoYixhLGUpKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1MKCksZT1saChhKSxmPWNoKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7Yj1kaChhLGYsZSk7bnVsbCE9PWImJihtaChiLGEsZSxkKSxlaChiLGEsZSkpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPUwoKSxkPVxubGgoYSksZT1jaChjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO2I9ZGgoYSxlLGQpO251bGwhPT1iJiYobWgoYixhLGQsYyksZWgoYixhLGQpKX19O2Z1bmN0aW9uIG9oKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUllKGMsZCl8fCFJZShlLGYpOiEwfVxuZnVuY3Rpb24gcGgoYSxiLGMpe3ZhciBkPSExLGU9VmY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9VmcoZik6KGU9WmYoYik/WGY6SC5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/WWYoYSxlKTpWZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPW5oO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gcWgoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJm5oLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gcmgoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1qaDthaChhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PVZnKGYpOihmPVpmKGIpP1hmOkguY3VycmVudCxlLmNvbnRleHQ9WWYoYSxmKSk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKGtoKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJm5oLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGdoKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQxOTQzMDgpfVxuZnVuY3Rpb24gc2goYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHAoMTQ3LGEpKTt2YXIgZT1kLGY9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWYpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZS5yZWZzO2I9PT1qaCYmKGI9ZS5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltmXTpiW2ZdPWF9O2IuX3N0cmluZ1JlZj1mO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcihwKDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcihwKDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gdGgoYSxiKXthPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKTt0aHJvdyBFcnJvcihwKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1hP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmEpKTt9ZnVuY3Rpb24gdWgoYSl7dmFyIGI9YS5faW5pdDtyZXR1cm4gYihhLl9wYXlsb2FkKX1cbmZ1bmN0aW9uIHZoKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmRlbGV0aW9ucztudWxsPT09ZD8oYi5kZWxldGlvbnM9W2NdLGIuZmxhZ3N8PTE2KTpkLnB1c2goYyl9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPXdoKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYi5mbGFnc3w9MTA0ODU3NixjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3N8PTIsYyk6ZDtiLmZsYWdzfD0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmXG5udWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzfD0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9eGgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXt2YXIgZj1jLnR5cGU7aWYoZj09PXlhKXJldHVybiBtKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsYy5rZXkpO2lmKG51bGwhPT1iJiYoYi5lbGVtZW50VHlwZT09PWZ8fFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYuJCR0eXBlb2Y9PT1IYSYmdWgoZik9PT1iLnR5cGUpKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1zaChhLGIsYyksZC5yZXR1cm49YSxkO2Q9eWgoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9c2goYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxcbmIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj16aChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9QWgoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBxKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGImJlwiXCIhPT1ifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9eGgoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGM9eWgoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksXG5jLnJlZj1zaChhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2Ugd2E6cmV0dXJuIGI9emgoYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2Nhc2UgSGE6dmFyIGQ9Yi5faW5pdDtyZXR1cm4gcShhLGQoYi5fcGF5bG9hZCksYyl9aWYoZWIoYil8fEthKGIpKXJldHVybiBiPUFoKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO3RoKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcihhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYyYmXCJcIiE9PWN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGMua2V5PT09ZT9rKGEsYixjLGQpOm51bGw7Y2FzZSB3YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbDtjYXNlIEhhOnJldHVybiBlPWMuX2luaXQscihhLFxuYixlKGMuX3BheWxvYWQpLGQpfWlmKGViKGMpfHxLYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7dGgoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkJiZcIlwiIT09ZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsayhiLGEsZCxlKTtjYXNlIHdhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpO2Nhc2UgSGE6dmFyIGY9ZC5faW5pdDtyZXR1cm4geShhLGIsYyxmKGQuX3BheWxvYWQpLGUpfWlmKGViKGQpfHxLYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7dGgoYixkKX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIG4oZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsbT1udWxsLHU9Zyx3PWc9MCx4PW51bGw7bnVsbCE9PXUmJnc8aC5sZW5ndGg7dysrKXt1LmluZGV4Pnc/KHg9dSx1PW51bGwpOng9dS5zaWJsaW5nO3ZhciBuPXIoZSx1LGhbd10sayk7aWYobnVsbD09PW4pe251bGw9PT11JiYodT14KTticmVha31hJiZ1JiZudWxsPT09bi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHcpO251bGw9PT1tP2w9bjptLnNpYmxpbmc9bjttPW47dT14fWlmKHc9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLEkmJnRnKGUsdyksbDtpZihudWxsPT09dSl7Zm9yKDt3PGgubGVuZ3RoO3crKyl1PXEoZSxoW3ddLGspLG51bGwhPT11JiYoZz1mKHUsZyx3KSxudWxsPT09bT9sPXU6bS5zaWJsaW5nPXUsbT11KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcih1PWQoZSx1KTt3PGgubGVuZ3RoO3crKyl4PXkodSxlLHcsaFt3XSxrKSxudWxsIT09eCYmKGEmJm51bGwhPT14LmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PVxueC5rZXk/dzp4LmtleSksZz1mKHgsZyx3KSxudWxsPT09bT9sPXg6bS5zaWJsaW5nPXgsbT14KTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gdChlLGcsaCxrKXt2YXIgbD1LYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcihwKDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PWgpdGhyb3cgRXJyb3IocCgxNTEpKTtmb3IodmFyIHU9bD1udWxsLG09Zyx3PWc9MCx4PW51bGwsbj1oLm5leHQoKTtudWxsIT09bSYmIW4uZG9uZTt3Kyssbj1oLm5leHQoKSl7bS5pbmRleD53Pyh4PW0sbT1udWxsKTp4PW0uc2libGluZzt2YXIgdD1yKGUsbSxuLnZhbHVlLGspO2lmKG51bGw9PT10KXtudWxsPT09bSYmKG09eCk7YnJlYWt9YSYmbSYmbnVsbD09PXQuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHQsZyx3KTtudWxsPT09dT9sPXQ6dS5zaWJsaW5nPXQ7dT10O209eH1pZihuLmRvbmUpcmV0dXJuIGMoZSxcbm0pLEkmJnRnKGUsdyksbDtpZihudWxsPT09bSl7Zm9yKDshbi5kb25lO3crKyxuPWgubmV4dCgpKW49cShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO0kmJnRnKGUsdyk7cmV0dXJuIGx9Zm9yKG09ZChlLG0pOyFuLmRvbmU7dysrLG49aC5uZXh0KCkpbj15KG0sZSx3LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1uLmtleT93Om4ua2V5KSxnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mdW5jdGlvbiBKKGEsZCxmLGgpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXlhJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYpe3N3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHZhOmE6e2Zvcih2YXIgaz1cbmYua2V5LGw9ZDtudWxsIT09bDspe2lmKGwua2V5PT09ayl7az1mLnR5cGU7aWYoaz09PXlhKXtpZig3PT09bC50YWcpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWVsc2UgaWYobC5lbGVtZW50VHlwZT09PWt8fFwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1IYSYmdWgoayk9PT1sLnR5cGUpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMpO2QucmVmPXNoKGEsbCxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWMoYSxsKTticmVha31lbHNlIGIoYSxsKTtsPWwuc2libGluZ31mLnR5cGU9PT15YT8oZD1BaChmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9eWgoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9c2goYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHdhOmE6e2ZvcihsPWYua2V5O251bGwhPT1cbmQ7KXtpZihkLmtleT09PWwpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9emgoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSk7Y2FzZSBIYTpyZXR1cm4gbD1mLl9pbml0LEooYSxkLGwoZi5fcGF5bG9hZCksaCl9aWYoZWIoZikpcmV0dXJuIG4oYSxkLGYsaCk7aWYoS2EoZikpcmV0dXJuIHQoYSxkLGYsaCk7dGgoYSxmKX1yZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGYmJlwiXCIhPT1mfHxcIm51bWJlclwiPT09dHlwZW9mIGY/KGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTpcbihjKGEsZCksZD14aChmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKSk6YyhhLGQpfXJldHVybiBKfXZhciBCaD12aCghMCksQ2g9dmgoITEpLERoPXt9LEVoPVVmKERoKSxGaD1VZihEaCksR2g9VWYoRGgpO2Z1bmN0aW9uIEhoKGEpe2lmKGE9PT1EaCl0aHJvdyBFcnJvcihwKDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIEloKGEsYil7RyhHaCxiKTtHKEZoLGEpO0coRWgsRGgpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bGIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPWxiKGIsYSl9RShFaCk7RyhFaCxiKX1mdW5jdGlvbiBKaCgpe0UoRWgpO0UoRmgpO0UoR2gpfVxuZnVuY3Rpb24gS2goYSl7SGgoR2guY3VycmVudCk7dmFyIGI9SGgoRWguY3VycmVudCk7dmFyIGM9bGIoYixhLnR5cGUpO2IhPT1jJiYoRyhGaCxhKSxHKEVoLGMpKX1mdW5jdGlvbiBMaChhKXtGaC5jdXJyZW50PT09YSYmKEUoRWgpLEUoRmgpKX12YXIgTT1VZigwKTtcbmZ1bmN0aW9uIE1oKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBOaD1bXTtcbmZ1bmN0aW9uIE9oKCl7Zm9yKHZhciBhPTA7YTxOaC5sZW5ndGg7YSsrKU5oW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7TmgubGVuZ3RoPTB9dmFyIFBoPXVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsUWg9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsUmg9MCxOPW51bGwsTz1udWxsLFA9bnVsbCxTaD0hMSxUaD0hMSxVaD0wLFZoPTA7ZnVuY3Rpb24gUSgpe3Rocm93IEVycm9yKHAoMzIxKSk7fWZ1bmN0aW9uIFdoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUhlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBYaChhLGIsYyxkLGUsZil7Umg9ZjtOPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDtQaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP1loOlpoO2E9YyhkLGUpO2lmKFRoKXtmPTA7ZG97VGg9ITE7VWg9MDtpZigyNTw9Zil0aHJvdyBFcnJvcihwKDMwMSkpO2YrPTE7UD1PPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO1BoLmN1cnJlbnQ9JGg7YT1jKGQsZSl9d2hpbGUoVGgpfVBoLmN1cnJlbnQ9YWk7Yj1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDtSaD0wO1A9Tz1OPW51bGw7U2g9ITE7aWYoYil0aHJvdyBFcnJvcihwKDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIGJpKCl7dmFyIGE9MCE9PVVoO1VoPTA7cmV0dXJuIGF9XG5mdW5jdGlvbiBjaSgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiBkaSgpe2lmKG51bGw9PT1PKXt2YXIgYT1OLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1PLm5leHQ7dmFyIGI9bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlOlAubmV4dDtpZihudWxsIT09YilQPWIsTz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzMTApKTtPPWE7YT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLGJhc2VRdWV1ZTpPLmJhc2VRdWV1ZSxxdWV1ZTpPLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hfXJldHVybiBQfVxuZnVuY3Rpb24gZWkoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBmaShhKXt2YXIgYj1kaSgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU8sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7Zj1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPW51bGwsaz1udWxsLGw9Zjtkb3t2YXIgbT1sLmxhbmU7aWYoKFJoJm0pPT09bSludWxsIT09ayYmKGs9ay5uZXh0PXtsYW5lOjAsYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLGVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9bC5oYXNFYWdlclN0YXRlP2wuZWFnZXJTdGF0ZTphKGQsbC5hY3Rpb24pO2Vsc2V7dmFyIHE9e2xhbmU6bSxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsXG5lYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1rPyhoPWs9cSxnPWQpOms9ay5uZXh0PXE7Ti5sYW5lc3w9bTtoaHw9bX1sPWwubmV4dH13aGlsZShudWxsIT09bCYmbCE9PWYpO251bGw9PT1rP2c9ZDprLm5leHQ9aDtIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fChVZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZztiLmJhc2VRdWV1ZT1rO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1hPWMuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWEpe2U9YTtkbyBmPWUubGFuZSxOLmxhbmVzfD1mLGhofD1mLGU9ZS5uZXh0O3doaWxlKGUhPT1hKX1lbHNlIG51bGw9PT1lJiYoYy5sYW5lcz0wKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gZ2koYSl7dmFyIGI9ZGkoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KFVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19ZnVuY3Rpb24gaGkoKXt9XG5mdW5jdGlvbiBpaShhLGIpe3ZhciBjPU4sZD1kaSgpLGU9YigpLGY9IUhlKGQubWVtb2l6ZWRTdGF0ZSxlKTtmJiYoZC5tZW1vaXplZFN0YXRlPWUsVWc9ITApO2Q9ZC5xdWV1ZTtqaShraS5iaW5kKG51bGwsYyxkLGEpLFthXSk7aWYoZC5nZXRTbmFwc2hvdCE9PWJ8fGZ8fG51bGwhPT1QJiZQLm1lbW9pemVkU3RhdGUudGFnJjEpe2MuZmxhZ3N8PTIwNDg7bGkoOSxtaS5iaW5kKG51bGwsYyxkLGUsYiksdm9pZCAwLG51bGwpO2lmKG51bGw9PT1SKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShSaCYzMCl8fG5pKGMsYixlKX1yZXR1cm4gZX1mdW5jdGlvbiBuaShhLGIsYyl7YS5mbGFnc3w9MTYzODQ7YT17Z2V0U25hcHNob3Q6Yix2YWx1ZTpjfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIuc3RvcmVzPVthXSk6KGM9Yi5zdG9yZXMsbnVsbD09PWM/Yi5zdG9yZXM9W2FdOmMucHVzaChhKSl9XG5mdW5jdGlvbiBtaShhLGIsYyxkKXtiLnZhbHVlPWM7Yi5nZXRTbmFwc2hvdD1kO29pKGIpJiZwaShhKX1mdW5jdGlvbiBraShhLGIsYyl7cmV0dXJuIGMoZnVuY3Rpb24oKXtvaShiKSYmcGkoYSl9KX1mdW5jdGlvbiBvaShhKXt2YXIgYj1hLmdldFNuYXBzaG90O2E9YS52YWx1ZTt0cnl7dmFyIGM9YigpO3JldHVybiFIZShhLGMpfWNhdGNoKGQpe3JldHVybiEwfX1mdW5jdGlvbiBwaShhKXt2YXIgYj1aZyhhLDEpO251bGwhPT1iJiZtaChiLGEsMSwtMSl9XG5mdW5jdGlvbiBxaShhKXt2YXIgYj1jaSgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmVpLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2IucXVldWU9YTthPWEuZGlzcGF0Y2g9cmkuYmluZChudWxsLE4sYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIGxpKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBzaSgpe3JldHVybiBkaSgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gdGkoYSxiLGMsZCl7dmFyIGU9Y2koKTtOLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1saSgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gdWkoYSxiLGMsZCl7dmFyIGU9ZGkoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZXaChkLGcuZGVwcykpe2UubWVtb2l6ZWRTdGF0ZT1saShiLGMsZixkKTtyZXR1cm59fU4uZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWxpKDF8YixjLGYsZCl9ZnVuY3Rpb24gdmkoYSxiKXtyZXR1cm4gdGkoODM5MDY1Niw4LGEsYil9ZnVuY3Rpb24gamkoYSxiKXtyZXR1cm4gdWkoMjA0OCw4LGEsYil9ZnVuY3Rpb24gd2koYSxiKXtyZXR1cm4gdWkoNCwyLGEsYil9ZnVuY3Rpb24geGkoYSxiKXtyZXR1cm4gdWkoNCw0LGEsYil9XG5mdW5jdGlvbiB5aShhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIHppKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gdWkoNCw0LHlpLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIEFpKCl7fWZ1bmN0aW9uIEJpKGEsYil7dmFyIGM9ZGkoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJldoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gQ2koYSxiKXt2YXIgYz1kaSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmV2goYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gRGkoYSxiLGMpe2lmKDA9PT0oUmgmMjEpKXJldHVybiBhLmJhc2VTdGF0ZSYmKGEuYmFzZVN0YXRlPSExLFVnPSEwKSxhLm1lbW9pemVkU3RhdGU9YztIZShjLGIpfHwoYz15YygpLE4ubGFuZXN8PWMsaGh8PWMsYS5iYXNlU3RhdGU9ITApO3JldHVybiBifWZ1bmN0aW9uIEVpKGEsYil7dmFyIGM9QztDPTAhPT1jJiY0PmM/Yzo0O2EoITApO3ZhciBkPVFoLnRyYW5zaXRpb247UWgudHJhbnNpdGlvbj17fTt0cnl7YSghMSksYigpfWZpbmFsbHl7Qz1jLFFoLnRyYW5zaXRpb249ZH19ZnVuY3Rpb24gRmkoKXtyZXR1cm4gZGkoKS5tZW1vaXplZFN0YXRlfVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPWxoKGEpO2M9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKEhpKGEpKUlpKGIsYyk7ZWxzZSBpZihjPVlnKGEsYixjLGQpLG51bGwhPT1jKXt2YXIgZT1MKCk7bWgoYyxhLGQsZSk7SmkoYyxiLGQpfX1cbmZ1bmN0aW9uIHJpKGEsYixjKXt2YXIgZD1saChhKSxlPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZihIaShhKSlJaShiLGUpO2Vsc2V7dmFyIGY9YS5hbHRlcm5hdGU7aWYoMD09PWEubGFuZXMmJihudWxsPT09Znx8MD09PWYubGFuZXMpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuaGFzRWFnZXJTdGF0ZT0hMDtlLmVhZ2VyU3RhdGU9aDtpZihIZShoLGcpKXt2YXIgaz1iLmludGVybGVhdmVkO251bGw9PT1rPyhlLm5leHQ9ZSxYZyhiKSk6KGUubmV4dD1rLm5leHQsay5uZXh0PWUpO2IuaW50ZXJsZWF2ZWQ9ZTtyZXR1cm59fWNhdGNoKGwpe31maW5hbGx5e31jPVlnKGEsYixlLGQpO251bGwhPT1jJiYoZT1MKCksbWgoYyxhLGQsZSksSmkoYyxiLGQpKX19XG5mdW5jdGlvbiBIaShhKXt2YXIgYj1hLmFsdGVybmF0ZTtyZXR1cm4gYT09PU58fG51bGwhPT1iJiZiPT09Tn1mdW5jdGlvbiBJaShhLGIpe1RoPVNoPSEwO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9ZnVuY3Rpb24gSmkoYSxiLGMpe2lmKDAhPT0oYyY0MTk0MjQwKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9YztDYyhhLGMpfX1cbnZhciBhaT17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6USx1c2VDb250ZXh0OlEsdXNlRWZmZWN0OlEsdXNlSW1wZXJhdGl2ZUhhbmRsZTpRLHVzZUluc2VydGlvbkVmZmVjdDpRLHVzZUxheW91dEVmZmVjdDpRLHVzZU1lbW86USx1c2VSZWR1Y2VyOlEsdXNlUmVmOlEsdXNlU3RhdGU6USx1c2VEZWJ1Z1ZhbHVlOlEsdXNlRGVmZXJyZWRWYWx1ZTpRLHVzZVRyYW5zaXRpb246USx1c2VNdXRhYmxlU291cmNlOlEsdXNlU3luY0V4dGVybmFsU3RvcmU6USx1c2VJZDpRLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sWWg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7Y2koKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6dmksdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHRpKDQxOTQzMDgsXG40LHlpLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGkoNDE5NDMwOCw0LGEsYil9LHVzZUluc2VydGlvbkVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiB0aSg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPWNpKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWNpKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2QucXVldWU9YTthPWEuZGlzcGF0Y2g9R2kuYmluZChudWxsLE4sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPVxuY2koKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6cWksdXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3JldHVybiBjaSgpLm1lbW9pemVkU3RhdGU9YX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPXFpKCExKSxiPWFbMF07YT1FaS5iaW5kKG51bGwsYVsxXSk7Y2koKS5tZW1vaXplZFN0YXRlPWE7cmV0dXJuW2IsYV19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oKXt9LHVzZVN5bmNFeHRlcm5hbFN0b3JlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1OLGU9Y2koKTtpZihJKXtpZih2b2lkIDA9PT1jKXRocm93IEVycm9yKHAoNDA3KSk7Yz1jKCl9ZWxzZXtjPWIoKTtpZihudWxsPT09Uil0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oUmgmMzApfHxuaShkLGIsYyl9ZS5tZW1vaXplZFN0YXRlPWM7dmFyIGY9e3ZhbHVlOmMsZ2V0U25hcHNob3Q6Yn07ZS5xdWV1ZT1mO3ZpKGtpLmJpbmQobnVsbCxkLFxuZixhKSxbYV0pO2QuZmxhZ3N8PTIwNDg7bGkoOSxtaS5iaW5kKG51bGwsZCxmLGMsYiksdm9pZCAwLG51bGwpO3JldHVybiBjfSx1c2VJZDpmdW5jdGlvbigpe3ZhciBhPWNpKCksYj1SLmlkZW50aWZpZXJQcmVmaXg7aWYoSSl7dmFyIGM9c2c7dmFyIGQ9cmc7Yz0oZCZ+KDE8PDMyLW9jKGQpLTEpKS50b1N0cmluZygzMikrYztiPVwiOlwiK2IrXCJSXCIrYztjPVVoKys7MDxjJiYoYis9XCJIXCIrYy50b1N0cmluZygzMikpO2IrPVwiOlwifWVsc2UgYz1WaCsrLGI9XCI6XCIrYitcInJcIitjLnRvU3RyaW5nKDMyKStcIjpcIjtyZXR1cm4gYS5tZW1vaXplZFN0YXRlPWJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sWmg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOkJpLHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OmppLHVzZUltcGVyYXRpdmVIYW5kbGU6emksdXNlSW5zZXJ0aW9uRWZmZWN0OndpLHVzZUxheW91dEVmZmVjdDp4aSx1c2VNZW1vOkNpLHVzZVJlZHVjZXI6ZmksdXNlUmVmOnNpLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGZpKGVpKX0sXG51c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9ZGkoKTtyZXR1cm4gRGkoYixPLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1maShlaSlbMF0sYj1kaSgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6aGksdXNlU3luY0V4dGVybmFsU3RvcmU6aWksdXNlSWQ6RmksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSwkaD17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6QmksdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6amksdXNlSW1wZXJhdGl2ZUhhbmRsZTp6aSx1c2VJbnNlcnRpb25FZmZlY3Q6d2ksdXNlTGF5b3V0RWZmZWN0OnhpLHVzZU1lbW86Q2ksdXNlUmVkdWNlcjpnaSx1c2VSZWY6c2ksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gZ2koZWkpfSx1c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9ZGkoKTtyZXR1cm4gbnVsbD09PVxuTz9iLm1lbW9pemVkU3RhdGU9YTpEaShiLE8ubWVtb2l6ZWRTdGF0ZSxhKX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPWdpKGVpKVswXSxiPWRpKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpoaSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTppaSx1c2VJZDpGaSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9O2Z1bmN0aW9uIEtpKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVBhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplLGRpZ2VzdDpudWxsfX1mdW5jdGlvbiBMaShhLGIsYyl7cmV0dXJue3ZhbHVlOmEsc291cmNlOm51bGwsc3RhY2s6bnVsbCE9Yz9jOm51bGwsZGlnZXN0Om51bGwhPWI/YjpudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBOaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBPaShhLGIsYyl7Yz1jaCgtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtQaXx8KFBpPSEwLFFpPWQpO01pKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gUmkoYSxiLGMpe2M9Y2goLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TWkoYSxiKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe01pKGEsYik7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09U2k/U2k9bmV3IFNldChbdGhpc10pOlNpLmFkZCh0aGlzKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBUaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7aWYobnVsbD09PWQpe2Q9YS5waW5nQ2FjaGU9bmV3IE5pO3ZhciBlPW5ldyBTZXQ7ZC5zZXQoYixlKX1lbHNlIGU9ZC5nZXQoYiksdm9pZCAwPT09ZSYmKGU9bmV3IFNldCxkLnNldChiLGUpKTtlLmhhcyhjKXx8KGUuYWRkKGMpLGE9VWkuYmluZChudWxsLGEsYixjKSxiLnRoZW4oYSxhKSl9ZnVuY3Rpb24gVmkoYSl7ZG97dmFyIGI7aWYoYj0xMz09PWEudGFnKWI9YS5tZW1vaXplZFN0YXRlLGI9bnVsbCE9PWI/bnVsbCE9PWIuZGVoeWRyYXRlZD8hMDohMTohMDtpZihiKXJldHVybiBhO2E9YS5yZXR1cm59d2hpbGUobnVsbCE9PWEpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gV2koYSxiLGMsZCxlKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gYT09PWI/YS5mbGFnc3w9NjU1MzY6KGEuZmxhZ3N8PTEyOCxjLmZsYWdzfD0xMzEwNzIsYy5mbGFncyY9LTUyODA1LDE9PT1jLnRhZyYmKG51bGw9PT1jLmFsdGVybmF0ZT9jLnRhZz0xNzooYj1jaCgtMSwxKSxiLnRhZz0yLGRoKGMsYiwxKSkpLGMubGFuZXN8PTEpLGE7YS5mbGFnc3w9NjU1MzY7YS5sYW5lcz1lO3JldHVybiBhfXZhciBYaT11YS5SZWFjdEN1cnJlbnRPd25lcixVZz0hMTtmdW5jdGlvbiBZaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP0NoKGIsbnVsbCxjLGQpOkJoKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gWmkoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO1RnKGIsZSk7ZD1YaChhLGIsYyxkLGYsZSk7Yz1iaSgpO2lmKG51bGwhPT1hJiYhVWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSwkaShhLGIsZSk7SSYmYyYmdmcoYik7Yi5mbGFnc3w9MTtZaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGFqKGEsYixjLGQsZSl7aWYobnVsbD09PWEpe3ZhciBmPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmIWJqKGYpJiZ2b2lkIDA9PT1mLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1mLGNqKGEsYixmLGQsZSk7YT15aChjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGUpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1mPWEuY2hpbGQ7aWYoMD09PShhLmxhbmVzJmUpKXt2YXIgZz1mLm1lbW9pemVkUHJvcHM7Yz1jLmNvbXBhcmU7Yz1udWxsIT09Yz9jOkllO2lmKGMoZyxkKSYmYS5yZWY9PT1iLnJlZilyZXR1cm4gJGkoYSxiLGUpfWIuZmxhZ3N8PTE7YT13aChmLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGNqKGEsYixjLGQsZSl7aWYobnVsbCE9PWEpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihJZShmLGQpJiZhLnJlZj09PWIucmVmKWlmKFVnPSExLGIucGVuZGluZ1Byb3BzPWQ9ZiwwIT09KGEubGFuZXMmZSkpMCE9PShhLmZsYWdzJjEzMTA3MikmJihVZz0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLCRpKGEsYixlKX1yZXR1cm4gZGooYSxiLGMsZCxlKX1cbmZ1bmN0aW9uIGVqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sRyhmaixnaiksZ2p8PWM7ZWxzZXtpZigwPT09KGMmMTA3Mzc0MTgyNCkpcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxiLnVwZGF0ZVF1ZXVlPW51bGwsRyhmaixnaiksZ2p8PWEsbnVsbDtiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9O2Q9bnVsbCE9PWY/Zi5iYXNlTGFuZXM6YztHKGZqLGdqKTtnanw9ZH1lbHNlIG51bGwhPT1cbmY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLEcoZmosZ2opLGdqfD1kO1lpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGhqKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyfWZ1bmN0aW9uIGRqKGEsYixjLGQsZSl7dmFyIGY9WmYoYyk/WGY6SC5jdXJyZW50O2Y9WWYoYixmKTtUZyhiLGUpO2M9WGgoYSxiLGMsZCxmLGUpO2Q9YmkoKTtpZihudWxsIT09YSYmIVVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsJGkoYSxiLGUpO0kmJmQmJnZnKGIpO2IuZmxhZ3N8PTE7WWkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBpaihhLGIsYyxkLGUpe2lmKFpmKGMpKXt2YXIgZj0hMDtjZyhiKX1lbHNlIGY9ITE7VGcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpamooYSxiKSxwaChiLGMsZCkscmgoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9VmcobCk6KGw9WmYoYyk/WGY6SC5jdXJyZW50LGw9WWYoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGghPT1kfHxrIT09bCkmJnFoKGIsZyxkLGwpOyRnPSExO3ZhciByPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7Z2goYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHIhPT1rfHxXZi5jdXJyZW50fHwkZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihraChiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9JGd8fG9oKGIsYyxoLGQscixrLGwpKT8ocXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpKTpcbihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO2JoKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6TGcoYi50eXBlLGgpO2cucHJvcHM9bDtxPWIucGVuZGluZ1Byb3BzO3I9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9Vmcoayk6KGs9WmYoYyk/WGY6SC5jdXJyZW50LGs9WWYoYixrKSk7dmFyIHk9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG09XCJmdW5jdGlvblwiPT09dHlwZW9mIHl8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1xfHxyIT09aykmJnFoKGIsZyxkLGspOyRnPSExO3I9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cjtnaChiLGQsZyxlKTt2YXIgbj1iLm1lbW9pemVkU3RhdGU7aCE9PXF8fHIhPT1ufHxXZi5jdXJyZW50fHwkZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHkmJihraChiLGMseSxkKSxuPWIubWVtb2l6ZWRTdGF0ZSksKGw9JGd8fG9oKGIsYyxsLGQscixuLGspfHwhMSk/KG18fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXG5nLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0xMDI0KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPW4pLGcucHJvcHM9ZCxnLnN0YXRlPW4sZy5jb250ZXh0PWssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09XG5hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGQ9ITEpfXJldHVybiBraihhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBraihhLGIsYyxkLGUsZil7aGooYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmMTI4KTtpZighZCYmIWcpcmV0dXJuIGUmJmRnKGIsYywhMSksJGkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7WGkuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1CaChiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPUJoKGIsbnVsbCxoLGYpKTpZaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZkZyhiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGxqKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/YWcoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmYWcoYSxiLmNvbnRleHQsITEpO0loKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIG1qKGEsYixjLGQsZSl7SWcoKTtKZyhlKTtiLmZsYWdzfD0yNTY7WWkoYSxiLGMsZCk7cmV0dXJuIGIuY2hpbGR9dmFyIG5qPXtkZWh5ZHJhdGVkOm51bGwsdHJlZUNvbnRleHQ6bnVsbCxyZXRyeUxhbmU6MH07ZnVuY3Rpb24gb2ooYSl7cmV0dXJue2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9fVxuZnVuY3Rpb24gcGooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9TS5jdXJyZW50LGY9ITEsZz0wIT09KGIuZmxhZ3MmMTI4KSxoOyhoPWcpfHwoaD1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2lmKGgpZj0hMCxiLmZsYWdzJj0tMTI5O2Vsc2UgaWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpZXw9MTtHKE0sZSYxKTtpZihudWxsPT09YSl7RWcoYik7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJihhPWEuZGVoeWRyYXRlZCxudWxsIT09YSkpcmV0dXJuIDA9PT0oYi5tb2RlJjEpP2IubGFuZXM9MTpcIiQhXCI9PT1hLmRhdGE/Yi5sYW5lcz04OmIubGFuZXM9MTA3Mzc0MTgyNCxudWxsO2c9ZC5jaGlsZHJlbjthPWQuZmFsbGJhY2s7cmV0dXJuIGY/KGQ9Yi5tb2RlLGY9Yi5jaGlsZCxnPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Z30sMD09PShkJjEpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9XG5nKTpmPXFqKGcsZCwwLG51bGwpLGE9QWgoYSxkLGMsbnVsbCksZi5yZXR1cm49YixhLnJldHVybj1iLGYuc2libGluZz1hLGIuY2hpbGQ9ZixiLmNoaWxkLm1lbW9pemVkU3RhdGU9b2ooYyksYi5tZW1vaXplZFN0YXRlPW5qLGEpOnJqKGIsZyl9ZT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUmJihoPWUuZGVoeWRyYXRlZCxudWxsIT09aCkpcmV0dXJuIHNqKGEsYixnLGQsaCxlLGMpO2lmKGYpe2Y9ZC5mYWxsYmFjaztnPWIubW9kZTtlPWEuY2hpbGQ7aD1lLnNpYmxpbmc7dmFyIGs9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpkLmNoaWxkcmVufTswPT09KGcmMSkmJmIuY2hpbGQhPT1lPyhkPWIuY2hpbGQsZC5jaGlsZExhbmVzPTAsZC5wZW5kaW5nUHJvcHM9ayxiLmRlbGV0aW9ucz1udWxsKTooZD13aChlLGspLGQuc3VidHJlZUZsYWdzPWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0KTtudWxsIT09aD9mPXdoKGgsZik6KGY9QWgoZixnLGMsbnVsbCksZi5mbGFnc3w9Mik7Zi5yZXR1cm49XG5iO2QucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kO2Q9ZjtmPWIuY2hpbGQ7Zz1hLmNoaWxkLm1lbW9pemVkU3RhdGU7Zz1udWxsPT09Zz9vaihjKTp7YmFzZUxhbmVzOmcuYmFzZUxhbmVzfGMsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc307Zi5tZW1vaXplZFN0YXRlPWc7Zi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YztiLm1lbW9pemVkU3RhdGU9bmo7cmV0dXJuIGR9Zj1hLmNoaWxkO2E9Zi5zaWJsaW5nO2Q9d2goZix7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpkLmNoaWxkcmVufSk7MD09PShiLm1vZGUmMSkmJihkLmxhbmVzPWMpO2QucmV0dXJuPWI7ZC5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihjPWIuZGVsZXRpb25zLG51bGw9PT1jPyhiLmRlbGV0aW9ucz1bYV0sYi5mbGFnc3w9MTYpOmMucHVzaChhKSk7Yi5jaGlsZD1kO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBkfVxuZnVuY3Rpb24gcmooYSxiKXtiPXFqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmJ9LGEubW9kZSwwLG51bGwpO2IucmV0dXJuPWE7cmV0dXJuIGEuY2hpbGQ9Yn1mdW5jdGlvbiB0aihhLGIsYyxkKXtudWxsIT09ZCYmSmcoZCk7QmgoYixhLmNoaWxkLG51bGwsYyk7YT1yaihiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuKTthLmZsYWdzfD0yO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBhfVxuZnVuY3Rpb24gc2ooYSxiLGMsZCxlLGYsZyl7aWYoYyl7aWYoYi5mbGFncyYyNTYpcmV0dXJuIGIuZmxhZ3MmPS0yNTcsZD1MaShFcnJvcihwKDQyMikpKSx0aihhLGIsZyxkKTtpZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXJldHVybiBiLmNoaWxkPWEuY2hpbGQsYi5mbGFnc3w9MTI4LG51bGw7Zj1kLmZhbGxiYWNrO2U9Yi5tb2RlO2Q9cWooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0sZSwwLG51bGwpO2Y9QWgoZixlLGcsbnVsbCk7Zi5mbGFnc3w9MjtkLnJldHVybj1iO2YucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kOzAhPT0oYi5tb2RlJjEpJiZCaChiLGEuY2hpbGQsbnVsbCxnKTtiLmNoaWxkLm1lbW9pemVkU3RhdGU9b2ooZyk7Yi5tZW1vaXplZFN0YXRlPW5qO3JldHVybiBmfWlmKDA9PT0oYi5tb2RlJjEpKXJldHVybiB0aihhLGIsZyxudWxsKTtpZihcIiQhXCI9PT1lLmRhdGEpe2Q9ZS5uZXh0U2libGluZyYmZS5uZXh0U2libGluZy5kYXRhc2V0O1xuaWYoZCl2YXIgaD1kLmRnc3Q7ZD1oO2Y9RXJyb3IocCg0MTkpKTtkPUxpKGYsZCx2b2lkIDApO3JldHVybiB0aihhLGIsZyxkKX1oPTAhPT0oZyZhLmNoaWxkTGFuZXMpO2lmKFVnfHxoKXtkPVI7aWYobnVsbCE9PWQpe3N3aXRjaChnJi1nKXtjYXNlIDQ6ZT0yO2JyZWFrO2Nhc2UgMTY6ZT04O2JyZWFrO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDplPTMyO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmU9MjY4NDM1NDU2O2JyZWFrO2RlZmF1bHQ6ZT0wfWU9MCE9PShlJihkLnN1c3BlbmRlZExhbmVzfGcpKT8wOmU7XG4wIT09ZSYmZSE9PWYucmV0cnlMYW5lJiYoZi5yZXRyeUxhbmU9ZSxaZyhhLGUpLG1oKGQsYSxlLC0xKSl9dWooKTtkPUxpKEVycm9yKHAoNDIxKSkpO3JldHVybiB0aihhLGIsZyxkKX1pZihcIiQ/XCI9PT1lLmRhdGEpcmV0dXJuIGIuZmxhZ3N8PTEyOCxiLmNoaWxkPWEuY2hpbGQsYj12ai5iaW5kKG51bGwsYSksZS5fcmVhY3RSZXRyeT1iLG51bGw7YT1mLnRyZWVDb250ZXh0O3lnPUxmKGUubmV4dFNpYmxpbmcpO3hnPWI7ST0hMDt6Zz1udWxsO251bGwhPT1hJiYob2dbcGcrK109cmcsb2dbcGcrK109c2csb2dbcGcrK109cWcscmc9YS5pZCxzZz1hLm92ZXJmbG93LHFnPWIpO2I9cmooYixkLmNoaWxkcmVuKTtiLmZsYWdzfD00MDk2O3JldHVybiBifWZ1bmN0aW9uIHdqKGEsYixjKXthLmxhbmVzfD1iO3ZhciBkPWEuYWx0ZXJuYXRlO251bGwhPT1kJiYoZC5sYW5lc3w9Yik7U2coYS5yZXR1cm4sYixjKX1cbmZ1bmN0aW9uIHhqKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFN0YXRlO251bGw9PT1mP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmV9OihmLmlzQmFja3dhcmRzPWIsZi5yZW5kZXJpbmc9bnVsbCxmLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGYubGFzdD1kLGYudGFpbD1jLGYudGFpbE1vZGU9ZSl9XG5mdW5jdGlvbiB5aihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1lpKGEsYixkLmNoaWxkcmVuLGMpO2Q9TS5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTEyODtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJndqKGEsYyxiKTtlbHNlIGlmKDE5PT09YS50YWcpd2ooYSxjLGIpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1HKE0sZCk7aWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PU1oKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7eGooYiwhMSxlLGMsZik7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1NaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9eGooYiwhMCxjLG51bGwsZik7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6eGooYiwhMSxudWxsLG51bGwsdm9pZCAwKTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gamooYSxiKXswPT09KGIubW9kZSYxKSYmbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mil9ZnVuY3Rpb24gJGkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO2hofD1iLmxhbmVzO2lmKDA9PT0oYyZiLmNoaWxkTGFuZXMpKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcihwKDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz13aChhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9d2goYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHpqKGEsYixjKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzpsaihiKTtJZygpO2JyZWFrO2Nhc2UgNTpLaChiKTticmVhaztjYXNlIDE6WmYoYi50eXBlKSYmY2coYik7YnJlYWs7Y2FzZSA0OkloKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDp2YXIgZD1iLnR5cGUuX2NvbnRleHQsZT1iLm1lbW9pemVkUHJvcHMudmFsdWU7RyhNZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1lO2JyZWFrO2Nhc2UgMTM6ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQpe2lmKG51bGwhPT1kLmRlaHlkcmF0ZWQpcmV0dXJuIEcoTSxNLmN1cnJlbnQmMSksYi5mbGFnc3w9MTI4LG51bGw7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHBqKGEsYixjKTtHKE0sTS5jdXJyZW50JjEpO2E9JGkoYSxiLGMpO3JldHVybiBudWxsIT09YT9hLnNpYmxpbmc6bnVsbH1HKE0sTS5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmXG5iLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyYxMjgpKXtpZihkKXJldHVybiB5aihhLGIsYyk7Yi5mbGFnc3w9MTI4fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7RyhNLE0uY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gYi5sYW5lcz0wLGVqKGEsYixjKX1yZXR1cm4gJGkoYSxiLGMpfXZhciBBaixCaixDaixEajtcbkFqPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtCaj1mdW5jdGlvbigpe307XG5Daj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7SGgoRWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPUEoe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1CZil9dWIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmXG4oY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8KGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLFxuYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkQoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0RqPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O1xuZnVuY3Rpb24gRWooYSxiKXtpZighSSlzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gUyhhKXt2YXIgYj1udWxsIT09YS5hbHRlcm5hdGUmJmEuYWx0ZXJuYXRlLmNoaWxkPT09YS5jaGlsZCxjPTAsZD0wO2lmKGIpZm9yKHZhciBlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0LGR8PWUuZmxhZ3MmMTQ2ODAwNjQsZS5yZXR1cm49YSxlPWUuc2libGluZztlbHNlIGZvcihlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzLGR8PWUuZmxhZ3MsZS5yZXR1cm49YSxlPWUuc2libGluZzthLnN1YnRyZWVGbGFnc3w9ZDthLmNoaWxkTGFuZXM9YztyZXR1cm4gYn1cbmZ1bmN0aW9uIEZqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wczt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBTKGIpLG51bGw7Y2FzZSAxOnJldHVybiBaZihiLnR5cGUpJiYkZigpLFMoYiksbnVsbDtjYXNlIDM6ZD1iLnN0YXRlTm9kZTtKaCgpO0UoV2YpO0UoSCk7T2goKTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpR2coYik/Yi5mbGFnc3w9NDpudWxsPT09YXx8YS5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmMD09PShiLmZsYWdzJjI1Nil8fChiLmZsYWdzfD0xMDI0LG51bGwhPT16ZyYmKEdqKHpnKSx6Zz1udWxsKSk7QmooYSxiKTtTKGIpO3JldHVybiBudWxsO2Nhc2UgNTpMaChiKTt2YXIgZT1IaChHaC5jdXJyZW50KTtcbmM9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlDaihhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mik7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7UyhiKTtyZXR1cm4gbnVsbH1hPUhoKEVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW09mXT1iO2RbUGZdPWY7YT0wIT09KGIubW9kZSYxKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixkKTtEKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGxmLmxlbmd0aDtlKyspRChsZltlXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5kKTtEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxEKFwiaW52YWxpZFwiLGQpfXViKGMsZik7ZT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LGgsYSksZT1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmQudGV4dENvbnRlbnQhPT1cIlwiK2gmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LFxuaCxhKSxlPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6ZWEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWgmJlwib25TY3JvbGxcIj09PWcmJkQoXCJzY3JvbGxcIixkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7ZGIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1CZil9ZD1lO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWEmJihhPWtiKGMpKTtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlxuXCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2FbT2ZdPWI7YVtQZl09ZDtBaihhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7YTp7Zz12YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGEpO0QoXCJjbG9zZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5hKTtEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1kO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPWdiKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH11YihjLGUpO2g9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj9zYihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmbmIoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PVxuY3x8XCJcIiE9PWspJiZvYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmb2IoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihlYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZEKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmdGEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShhKTtkYihhLGQsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSxcbiEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXN3aXRjaChjKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmQ9ISFkLmF1dG9Gb2N1czticmVhayBhO2Nhc2UgXCJpbWdcIjpkPSEwO2JyZWFrIGE7ZGVmYXVsdDpkPSExfX1kJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpfVMoYik7cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKURqKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO2M9SGgoR2guY3VycmVudCk7SGgoRWguY3VycmVudCk7aWYoR2coYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtpZihmPWQubm9kZVZhbHVlIT09YylpZihhPVxueGcsbnVsbCE9PWEpc3dpdGNoKGEudGFnKXtjYXNlIDM6QWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSk7YnJlYWs7Y2FzZSA1OiEwIT09YS5tZW1vaXplZFByb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSl9ZiYmKGIuZmxhZ3N8PTQpfWVsc2UgZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbT2ZdPWIsYi5zdGF0ZU5vZGU9ZH1TKGIpO3JldHVybiBudWxsO2Nhc2UgMTM6RShNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtpZihJJiZudWxsIT09eWcmJjAhPT0oYi5tb2RlJjEpJiYwPT09KGIuZmxhZ3MmMTI4KSlIZygpLElnKCksYi5mbGFnc3w9OTg1NjAsZj0hMTtlbHNlIGlmKGY9R2coYiksbnVsbCE9PWQmJm51bGwhPT1kLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1cbmEpe2lmKCFmKXRocm93IEVycm9yKHAoMzE4KSk7Zj1iLm1lbW9pemVkU3RhdGU7Zj1udWxsIT09Zj9mLmRlaHlkcmF0ZWQ6bnVsbDtpZighZil0aHJvdyBFcnJvcihwKDMxNykpO2ZbT2ZdPWJ9ZWxzZSBJZygpLDA9PT0oYi5mbGFncyYxMjgpJiYoYi5tZW1vaXplZFN0YXRlPW51bGwpLGIuZmxhZ3N8PTQ7UyhiKTtmPSExfWVsc2UgbnVsbCE9PXpnJiYoR2ooemcpLHpnPW51bGwpLGY9ITA7aWYoIWYpcmV0dXJuIGIuZmxhZ3MmNjU1MzY/YjpudWxsfWlmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2QhPT0obnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUpJiZkJiYoYi5jaGlsZC5mbGFnc3w9ODE5MiwwIT09KGIubW9kZSYxKSYmKG51bGw9PT1hfHwwIT09KE0uY3VycmVudCYxKT8wPT09VCYmKFQ9Myk6dWooKSkpO251bGwhPT1iLnVwZGF0ZVF1ZXVlJiYoYi5mbGFnc3w9NCk7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIEpoKCksXG5CaihhLGIpLG51bGw9PT1hJiZzZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxTKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gUmcoYi50eXBlLl9jb250ZXh0KSxTKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAxOTpFKE0pO2Y9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1mKXJldHVybiBTKGIpLG51bGw7ZD0wIT09KGIuZmxhZ3MmMTI4KTtnPWYucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGQpRWooZiwhMSk7ZWxzZXtpZigwIT09VHx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPU1oKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD0xMjg7RWooZiwhMSk7ZD1nLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYoYi51cGRhdGVRdWV1ZT1kLGIuZmxhZ3N8PTQpO2Iuc3VidHJlZUZsYWdzPTA7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MTQ2ODAwNjYsXG5nPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYuc3VidHJlZUZsYWdzPTAsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLnN1YnRyZWVGbGFncz0wLGYuZGVsZXRpb25zPW51bGwsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztHKE0sTS5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1cbmEuc2libGluZ31udWxsIT09Zi50YWlsJiZCKCk+SGomJihiLmZsYWdzfD0xMjgsZD0hMCxFaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpfWVsc2V7aWYoIWQpaWYoYT1NaChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9MTI4LGQ9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLEVqKGYsITApLG51bGw9PT1mLnRhaWwmJlwiaGlkZGVuXCI9PT1mLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFJKXJldHVybiBTKGIpLG51bGx9ZWxzZSAyKkIoKS1mLnJlbmRlcmluZ1N0YXJ0VGltZT5IaiYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD0xMjgsZD0hMCxFaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpO2YuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9Zi5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxmLmxhc3Q9Zyl9aWYobnVsbCE9PWYudGFpbClyZXR1cm4gYj1mLnRhaWwsZi5yZW5kZXJpbmc9XG5iLGYudGFpbD1iLnNpYmxpbmcsZi5yZW5kZXJpbmdTdGFydFRpbWU9QigpLGIuc2libGluZz1udWxsLGM9TS5jdXJyZW50LEcoTSxkP2MmMXwyOmMmMSksYjtTKGIpO3JldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSWooKSxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT1kJiYoYi5mbGFnc3w9ODE5MiksZCYmMCE9PShiLm1vZGUmMSk/MCE9PShnaiYxMDczNzQxODI0KSYmKFMoYiksYi5zdWJ0cmVlRmxhZ3MmNiYmKGIuZmxhZ3N8PTgxOTIpKTpTKGIpLG51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtjYXNlIDI1OnJldHVybiBudWxsfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fVxuZnVuY3Rpb24gSmooYSxiKXt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxhPWIuZmxhZ3MsYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDM6cmV0dXJuIEpoKCksRShXZiksRShIKSxPaCgpLGE9Yi5mbGFncywwIT09KGEmNjU1MzYpJiYwPT09KGEmMTI4KT8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDU6cmV0dXJuIExoKGIpLG51bGw7Y2FzZSAxMzpFKE0pO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXtpZihudWxsPT09Yi5hbHRlcm5hdGUpdGhyb3cgRXJyb3IocCgzNDApKTtJZygpfWE9Yi5mbGFncztyZXR1cm4gYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDE5OnJldHVybiBFKE0pLG51bGw7Y2FzZSA0OnJldHVybiBKaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gUmcoYi50eXBlLl9jb250ZXh0KSxudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSWooKSxcbm51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX12YXIgS2o9ITEsVT0hMSxMaj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldCxWPW51bGw7ZnVuY3Rpb24gTWooYSxiKXt2YXIgYz1hLnJlZjtpZihudWxsIT09YylpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYyl0cnl7YyhudWxsKX1jYXRjaChkKXtXKGEsYixkKX1lbHNlIGMuY3VycmVudD1udWxsfWZ1bmN0aW9uIE5qKGEsYixjKXt0cnl7YygpfWNhdGNoKGQpe1coYSxiLGQpfX12YXIgT2o9ITE7XG5mdW5jdGlvbiBQaihhLGIpe0NmPWRkO2E9TWUoKTtpZihOZShhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYz17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7Yz0oYz1hLm93bmVyRG9jdW1lbnQpJiZjLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGQ9Yy5nZXRTZWxlY3Rpb24mJmMuZ2V0U2VsZWN0aW9uKCk7aWYoZCYmMCE9PWQucmFuZ2VDb3VudCl7Yz1kLmFuY2hvck5vZGU7dmFyIGU9ZC5hbmNob3JPZmZzZXQsZj1kLmZvY3VzTm9kZTtkPWQuZm9jdXNPZmZzZXQ7dHJ5e2Mubm9kZVR5cGUsZi5ub2RlVHlwZX1jYXRjaChGKXtjPW51bGw7YnJlYWsgYX12YXIgZz0wLGg9LTEsaz0tMSxsPTAsbT0wLHE9YSxyPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgeTs7KXtxIT09Y3x8MCE9PWUmJjMhPT1xLm5vZGVUeXBlfHwoaD1nK2UpO3EhPT1mfHwwIT09ZCYmMyE9PXEubm9kZVR5cGV8fChrPWcrZCk7Mz09PXEubm9kZVR5cGUmJihnKz1cbnEubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh5PXEuZmlyc3RDaGlsZCkpYnJlYWs7cj1xO3E9eX1mb3IoOzspe2lmKHE9PT1hKWJyZWFrIGI7cj09PWMmJisrbD09PWUmJihoPWcpO3I9PT1mJiYrK209PT1kJiYoaz1nKTtpZihudWxsIT09KHk9cS5uZXh0U2libGluZykpYnJlYWs7cT1yO3I9cS5wYXJlbnROb2RlfXE9eX1jPS0xPT09aHx8LTE9PT1rP251bGw6e3N0YXJ0OmgsZW5kOmt9fWVsc2UgYz1udWxsfWM9Y3x8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYz1udWxsO0RmPXtmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmN9O2RkPSExO2ZvcihWPWI7bnVsbCE9PVY7KWlmKGI9VixhPWIuY2hpbGQsMCE9PShiLnN1YnRyZWVGbGFncyYxMDI4KSYmbnVsbCE9PWEpYS5yZXR1cm49YixWPWE7ZWxzZSBmb3IoO251bGwhPT1WOyl7Yj1WO3RyeXt2YXIgbj1iLmFsdGVybmF0ZTtpZigwIT09KGIuZmxhZ3MmMTAyNCkpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmJyZWFrO1xuY2FzZSAxOmlmKG51bGwhPT1uKXt2YXIgdD1uLm1lbW9pemVkUHJvcHMsSj1uLm1lbW9pemVkU3RhdGUseD1iLnN0YXRlTm9kZSx3PXguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT90OkxnKGIudHlwZSx0KSxKKTt4Ll9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPXd9YnJlYWs7Y2FzZSAzOnZhciB1PWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87MT09PXUubm9kZVR5cGU/dS50ZXh0Q29udGVudD1cIlwiOjk9PT11Lm5vZGVUeXBlJiZ1LmRvY3VtZW50RWxlbWVudCYmdS5yZW1vdmVDaGlsZCh1LmRvY3VtZW50RWxlbWVudCk7YnJlYWs7Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fX1jYXRjaChGKXtXKGIsYi5yZXR1cm4sRil9YT1iLnNpYmxpbmc7aWYobnVsbCE9PWEpe2EucmV0dXJuPWIucmV0dXJuO1Y9YTticmVha31WPWIucmV0dXJufW49T2o7T2o9ITE7cmV0dXJuIG59XG5mdW5jdGlvbiBRaihhLGIsYyl7dmFyIGQ9Yi51cGRhdGVRdWV1ZTtkPW51bGwhPT1kP2QubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1kKXt2YXIgZT1kPWQubmV4dDtkb3tpZigoZS50YWcmYSk9PT1hKXt2YXIgZj1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1mJiZOaihiLGMsZil9ZT1lLm5leHR9d2hpbGUoZSE9PWQpfX1mdW5jdGlvbiBSaihhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmNyZWF0ZTtjLmRlc3Ryb3k9ZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19ZnVuY3Rpb24gU2ooYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmE9YzticmVhaztkZWZhdWx0OmE9Y31cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmIuY3VycmVudD1hfX1cbmZ1bmN0aW9uIFRqKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO251bGwhPT1iJiYoYS5hbHRlcm5hdGU9bnVsbCxUaihiKSk7YS5jaGlsZD1udWxsO2EuZGVsZXRpb25zPW51bGw7YS5zaWJsaW5nPW51bGw7NT09PWEudGFnJiYoYj1hLnN0YXRlTm9kZSxudWxsIT09YiYmKGRlbGV0ZSBiW09mXSxkZWxldGUgYltQZl0sZGVsZXRlIGJbb2ZdLGRlbGV0ZSBiW1FmXSxkZWxldGUgYltSZl0pKTthLnN0YXRlTm9kZT1udWxsO2EucmV0dXJuPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2Euc3RhdGVOb2RlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIFVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gVmooYSl7YTpmb3IoOzspe2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8VWooYS5yZXR1cm4pKXJldHVybiBudWxsO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjtmb3IoYT1hLnNpYmxpbmc7NSE9PWEudGFnJiY2IT09YS50YWcmJjE4IT09YS50YWc7KXtpZihhLmZsYWdzJjIpY29udGludWUgYTtpZihudWxsPT09YS5jaGlsZHx8ND09PWEudGFnKWNvbnRpbnVlIGE7ZWxzZSBhLmNoaWxkLnJldHVybj1hLGE9YS5jaGlsZH1pZighKGEuZmxhZ3MmMikpcmV0dXJuIGEuc3RhdGVOb2RlfX1cbmZ1bmN0aW9uIFdqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1CZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihXaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVdqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIFhqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoWGooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylYaihhLGIsYyksYT1hLnNpYmxpbmd9dmFyIFg9bnVsbCxZaj0hMTtmdW5jdGlvbiBaaihhLGIsYyl7Zm9yKGM9Yy5jaGlsZDtudWxsIT09YzspYWsoYSxiLGMpLGM9Yy5zaWJsaW5nfVxuZnVuY3Rpb24gYWsoYSxiLGMpe2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Db21taXRGaWJlclVubW91bnQpdHJ5e2xjLm9uQ29tbWl0RmliZXJVbm1vdW50KGtjLGMpfWNhdGNoKGgpe31zd2l0Y2goYy50YWcpe2Nhc2UgNTpVfHxNaihjLGIpO2Nhc2UgNjp2YXIgZD1YLGU9WWo7WD1udWxsO1pqKGEsYixjKTtYPWQ7WWo9ZTtudWxsIT09WCYmKFlqPyhhPVgsYz1jLnN0YXRlTm9kZSw4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYyk6YS5yZW1vdmVDaGlsZChjKSk6WC5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgMTg6bnVsbCE9PVgmJihZaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/S2YoYS5wYXJlbnROb2RlLGMpOjE9PT1hLm5vZGVUeXBlJiZLZihhLGMpLGJkKGEpKTpLZihYLGMuc3RhdGVOb2RlKSk7YnJlYWs7Y2FzZSA0OmQ9WDtlPVlqO1g9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaj0hMDtcblpqKGEsYixjKTtYPWQ7WWo9ZTticmVhaztjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6aWYoIVUmJihkPWMudXBkYXRlUXVldWUsbnVsbCE9PWQmJihkPWQubGFzdEVmZmVjdCxudWxsIT09ZCkpKXtlPWQ9ZC5uZXh0O2Rve3ZhciBmPWUsZz1mLmRlc3Ryb3k7Zj1mLnRhZzt2b2lkIDAhPT1nJiYoMCE9PShmJjIpP05qKGMsYixnKTowIT09KGYmNCkmJk5qKGMsYixnKSk7ZT1lLm5leHR9d2hpbGUoZSE9PWQpfVpqKGEsYixjKTticmVhaztjYXNlIDE6aWYoIVUmJihNaihjLGIpLGQ9Yy5zdGF0ZU5vZGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVubW91bnQpKXRyeXtkLnByb3BzPWMubWVtb2l6ZWRQcm9wcyxkLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZSxkLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goaCl7VyhjLGIsaCl9WmooYSxiLGMpO2JyZWFrO2Nhc2UgMjE6WmooYSxiLGMpO2JyZWFrO2Nhc2UgMjI6Yy5tb2RlJjE/KFU9KGQ9VSl8fG51bGwhPT1cbmMubWVtb2l6ZWRTdGF0ZSxaaihhLGIsYyksVT1kKTpaaihhLGIsYyk7YnJlYWs7ZGVmYXVsdDpaaihhLGIsYyl9fWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IExqKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9Y2suYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBkayhhLGIpe3ZhciBjPWIuZGVsZXRpb25zO2lmKG51bGwhPT1jKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO3RyeXt2YXIgZj1hLGc9YixoPWc7YTpmb3IoO251bGwhPT1oOyl7c3dpdGNoKGgudGFnKXtjYXNlIDU6WD1oLnN0YXRlTm9kZTtZaj0hMTticmVhayBhO2Nhc2UgMzpYPWguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWo9ITA7YnJlYWsgYTtjYXNlIDQ6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqPSEwO2JyZWFrIGF9aD1oLnJldHVybn1pZihudWxsPT09WCl0aHJvdyBFcnJvcihwKDE2MCkpO2FrKGYsZyxlKTtYPW51bGw7WWo9ITE7dmFyIGs9ZS5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLnJldHVybj1udWxsKTtlLnJldHVybj1udWxsfWNhdGNoKGwpe1coZSxiLGwpfX1pZihiLnN1YnRyZWVGbGFncyYxMjg1NClmb3IoYj1iLmNoaWxkO251bGwhPT1iOyllayhiLGEpLGI9Yi5zaWJsaW5nfVxuZnVuY3Rpb24gZWsoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZSxkPWEuZmxhZ3M7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6ZGsoYixhKTtmayhhKTtpZihkJjQpe3RyeXtRaigzLGEsYS5yZXR1cm4pLFJqKDMsYSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfXRyeXtRaig1LGEsYS5yZXR1cm4pfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAxOmRrKGIsYSk7ZmsoYSk7ZCY1MTImJm51bGwhPT1jJiZNaihjLGMucmV0dXJuKTticmVhaztjYXNlIDU6ZGsoYixhKTtmayhhKTtkJjUxMiYmbnVsbCE9PWMmJk1qKGMsYy5yZXR1cm4pO2lmKGEuZmxhZ3MmMzIpe3ZhciBlPWEuc3RhdGVOb2RlO3RyeXtvYihlLFwiXCIpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19aWYoZCY0JiYoZT1hLnN0YXRlTm9kZSxudWxsIT1lKSl7dmFyIGY9YS5tZW1vaXplZFByb3BzLGc9bnVsbCE9PWM/Yy5tZW1vaXplZFByb3BzOmYsaD1hLnR5cGUsaz1hLnVwZGF0ZVF1ZXVlO1xuYS51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1rKXRyeXtcImlucHV0XCI9PT1oJiZcInJhZGlvXCI9PT1mLnR5cGUmJm51bGwhPWYubmFtZSYmYWIoZSxmKTt2YihoLGcpO3ZhciBsPXZiKGgsZik7Zm9yKGc9MDtnPGsubGVuZ3RoO2crPTIpe3ZhciBtPWtbZ10scT1rW2crMV07XCJzdHlsZVwiPT09bT9zYihlLHEpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PW0/bmIoZSxxKTpcImNoaWxkcmVuXCI9PT1tP29iKGUscSk6dGEoZSxtLHEsbCl9c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOmJiKGUsZik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoZSxmKTticmVhaztjYXNlIFwic2VsZWN0XCI6dmFyIHI9ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlO2UuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWYubXVsdGlwbGU7dmFyIHk9Zi52YWx1ZTtudWxsIT15P2ZiKGUsISFmLm11bHRpcGxlLHksITEpOnIhPT0hIWYubXVsdGlwbGUmJihudWxsIT1mLmRlZmF1bHRWYWx1ZT9mYihlLCEhZi5tdWx0aXBsZSxcbmYuZGVmYXVsdFZhbHVlLCEwKTpmYihlLCEhZi5tdWx0aXBsZSxmLm11bHRpcGxlP1tdOlwiXCIsITEpKX1lW1BmXT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSA2OmRrKGIsYSk7ZmsoYSk7aWYoZCY0KXtpZihudWxsPT09YS5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjIpKTtlPWEuc3RhdGVOb2RlO2Y9YS5tZW1vaXplZFByb3BzO3RyeXtlLm5vZGVWYWx1ZT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAzOmRrKGIsYSk7ZmsoYSk7aWYoZCY0JiZudWxsIT09YyYmYy5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl0cnl7YmQoYi5jb250YWluZXJJbmZvKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9YnJlYWs7Y2FzZSA0OmRrKGIsYSk7ZmsoYSk7YnJlYWs7Y2FzZSAxMzpkayhiLGEpO2ZrKGEpO2U9YS5jaGlsZDtlLmZsYWdzJjgxOTImJihmPW51bGwhPT1lLm1lbW9pemVkU3RhdGUsZS5zdGF0ZU5vZGUuaXNIaWRkZW49ZiwhZnx8XG5udWxsIT09ZS5hbHRlcm5hdGUmJm51bGwhPT1lLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlfHwoZ2s9QigpKSk7ZCY0JiZiayhhKTticmVhaztjYXNlIDIyOm09bnVsbCE9PWMmJm51bGwhPT1jLm1lbW9pemVkU3RhdGU7YS5tb2RlJjE/KFU9KGw9VSl8fG0sZGsoYixhKSxVPWwpOmRrKGIsYSk7ZmsoYSk7aWYoZCY4MTkyKXtsPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7aWYoKGEuc3RhdGVOb2RlLmlzSGlkZGVuPWwpJiYhbSYmMCE9PShhLm1vZGUmMSkpZm9yKFY9YSxtPWEuY2hpbGQ7bnVsbCE9PW07KXtmb3IocT1WPW07bnVsbCE9PVY7KXtyPVY7eT1yLmNoaWxkO3N3aXRjaChyLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OlFqKDQscixyLnJldHVybik7YnJlYWs7Y2FzZSAxOk1qKHIsci5yZXR1cm4pO3ZhciBuPXIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxVbm1vdW50KXtkPXI7Yz1yLnJldHVybjt0cnl7Yj1kLG4ucHJvcHM9XG5iLm1lbW9pemVkUHJvcHMsbi5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsbi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKHQpe1coZCxjLHQpfX1icmVhaztjYXNlIDU6TWoocixyLnJldHVybik7YnJlYWs7Y2FzZSAyMjppZihudWxsIT09ci5tZW1vaXplZFN0YXRlKXtoayhxKTtjb250aW51ZX19bnVsbCE9PXk/KHkucmV0dXJuPXIsVj15KTpoayhxKX1tPW0uc2libGluZ31hOmZvcihtPW51bGwscT1hOzspe2lmKDU9PT1xLnRhZyl7aWYobnVsbD09PW0pe209cTt0cnl7ZT1xLnN0YXRlTm9kZSxsPyhmPWUuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihoPXEuc3RhdGVOb2RlLGs9cS5tZW1vaXplZFByb3BzLnN0eWxlLGc9dm9pZCAwIT09ayYmbnVsbCE9PWsmJmsuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2suZGlzcGxheTpudWxsLGguc3R5bGUuZGlzcGxheT1cbnJiKFwiZGlzcGxheVwiLGcpKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fX1lbHNlIGlmKDY9PT1xLnRhZyl7aWYobnVsbD09PW0pdHJ5e3Euc3RhdGVOb2RlLm5vZGVWYWx1ZT1sP1wiXCI6cS5tZW1vaXplZFByb3BzfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19ZWxzZSBpZigoMjIhPT1xLnRhZyYmMjMhPT1xLnRhZ3x8bnVsbD09PXEubWVtb2l6ZWRTdGF0ZXx8cT09PWEpJiZudWxsIT09cS5jaGlsZCl7cS5jaGlsZC5yZXR1cm49cTtxPXEuY2hpbGQ7Y29udGludWV9aWYocT09PWEpYnJlYWsgYTtmb3IoO251bGw9PT1xLnNpYmxpbmc7KXtpZihudWxsPT09cS5yZXR1cm58fHEucmV0dXJuPT09YSlicmVhayBhO209PT1xJiYobT1udWxsKTtxPXEucmV0dXJufW09PT1xJiYobT1udWxsKTtxLnNpYmxpbmcucmV0dXJuPXEucmV0dXJuO3E9cS5zaWJsaW5nfX1icmVhaztjYXNlIDE5OmRrKGIsYSk7ZmsoYSk7ZCY0JiZiayhhKTticmVhaztjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6ZGsoYixcbmEpLGZrKGEpfX1mdW5jdGlvbiBmayhhKXt2YXIgYj1hLmZsYWdzO2lmKGImMil7dHJ5e2E6e2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKFVqKGMpKXt2YXIgZD1jO2JyZWFrIGF9Yz1jLnJldHVybn10aHJvdyBFcnJvcihwKDE2MCkpO31zd2l0Y2goZC50YWcpe2Nhc2UgNTp2YXIgZT1kLnN0YXRlTm9kZTtkLmZsYWdzJjMyJiYob2IoZSxcIlwiKSxkLmZsYWdzJj0tMzMpO3ZhciBmPVZqKGEpO1hqKGEsZixlKTticmVhaztjYXNlIDM6Y2FzZSA0OnZhciBnPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saD1WaihhKTtXaihhLGgsZyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MSkpO319Y2F0Y2goayl7VyhhLGEucmV0dXJuLGspfWEuZmxhZ3MmPS0zfWImNDA5NiYmKGEuZmxhZ3MmPS00MDk3KX1mdW5jdGlvbiBpayhhLGIsYyl7Vj1hO2prKGEsYixjKX1cbmZ1bmN0aW9uIGprKGEsYixjKXtmb3IodmFyIGQ9MCE9PShhLm1vZGUmMSk7bnVsbCE9PVY7KXt2YXIgZT1WLGY9ZS5jaGlsZDtpZigyMj09PWUudGFnJiZkKXt2YXIgZz1udWxsIT09ZS5tZW1vaXplZFN0YXRlfHxLajtpZighZyl7dmFyIGg9ZS5hbHRlcm5hdGUsaz1udWxsIT09aCYmbnVsbCE9PWgubWVtb2l6ZWRTdGF0ZXx8VTtoPUtqO3ZhciBsPVU7S2o9ZztpZigoVT1rKSYmIWwpZm9yKFY9ZTtudWxsIT09VjspZz1WLGs9Zy5jaGlsZCwyMj09PWcudGFnJiZudWxsIT09Zy5tZW1vaXplZFN0YXRlP2trKGUpOm51bGwhPT1rPyhrLnJldHVybj1nLFY9ayk6a2soZSk7Zm9yKDtudWxsIT09ZjspVj1mLGprKGYsYixjKSxmPWYuc2libGluZztWPWU7S2o9aDtVPWx9bGsoYSxiLGMpfWVsc2UgMCE9PShlLnN1YnRyZWVGbGFncyY4NzcyKSYmbnVsbCE9PWY/KGYucmV0dXJuPWUsVj1mKTpsayhhLGIsYyl9fVxuZnVuY3Rpb24gbGsoYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXt2YXIgYz1iLmFsdGVybmF0ZTt0cnl7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpVfHxSaig1LGIpO2JyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihiLmZsYWdzJjQmJiFVKWlmKG51bGw9PT1jKWQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBlPWIuZWxlbWVudFR5cGU9PT1iLnR5cGU/Yy5tZW1vaXplZFByb3BzOkxnKGIudHlwZSxjLm1lbW9pemVkUHJvcHMpO2QuY29tcG9uZW50RGlkVXBkYXRlKGUsYy5tZW1vaXplZFN0YXRlLGQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBmPWIudXBkYXRlUXVldWU7bnVsbCE9PWYmJmloKGIsZixkKTticmVhaztjYXNlIDM6dmFyIGc9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09Zyl7Yz1udWxsO2lmKG51bGwhPT1iLmNoaWxkKXN3aXRjaChiLmNoaWxkLnRhZyl7Y2FzZSA1OmM9XG5iLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Yz1iLmNoaWxkLnN0YXRlTm9kZX1paChiLGcsYyl9YnJlYWs7Y2FzZSA1OnZhciBoPWIuc3RhdGVOb2RlO2lmKG51bGw9PT1jJiZiLmZsYWdzJjQpe2M9aDt2YXIgaz1iLm1lbW9pemVkUHJvcHM7c3dpdGNoKGIudHlwZSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjprLmF1dG9Gb2N1cyYmYy5mb2N1cygpO2JyZWFrO2Nhc2UgXCJpbWdcIjprLnNyYyYmKGMuc3JjPWsuc3JjKX19YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6aWYobnVsbD09PWIubWVtb2l6ZWRTdGF0ZSl7dmFyIGw9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWwpe3ZhciBtPWwubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09bSl7dmFyIHE9bS5kZWh5ZHJhdGVkO251bGwhPT1xJiZiZChxKX19fWJyZWFrO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIxOmNhc2UgMjI6Y2FzZSAyMzpjYXNlIDI1OmJyZWFrO1xuZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO31VfHxiLmZsYWdzJjUxMiYmU2ooYil9Y2F0Y2gocil7VyhiLGIucmV0dXJuLHIpfX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfWM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19ZnVuY3Rpb24gaGsoYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgYz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1Y9YzticmVha31WPWIucmV0dXJufX1cbmZ1bmN0aW9uIGtrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO3RyeXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dmFyIGM9Yi5yZXR1cm47dHJ5e1JqKDQsYil9Y2F0Y2goayl7VyhiLGMsayl9YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50KXt2YXIgZT1iLnJldHVybjt0cnl7ZC5jb21wb25lbnREaWRNb3VudCgpfWNhdGNoKGspe1coYixlLGspfX12YXIgZj1iLnJldHVybjt0cnl7U2ooYil9Y2F0Y2goayl7VyhiLGYsayl9YnJlYWs7Y2FzZSA1OnZhciBnPWIucmV0dXJuO3RyeXtTaihiKX1jYXRjaChrKXtXKGIsZyxrKX19fWNhdGNoKGspe1coYixiLnJldHVybixrKX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfXZhciBoPWIuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Yi5yZXR1cm47Vj1oO2JyZWFrfVY9Yi5yZXR1cm59fVxudmFyIG1rPU1hdGguY2VpbCxuaz11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLG9rPXVhLlJlYWN0Q3VycmVudE93bmVyLHBrPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEs9MCxSPW51bGwsWT1udWxsLFo9MCxnaj0wLGZqPVVmKDApLFQ9MCxxaz1udWxsLGhoPTAscms9MCxzaz0wLHRrPW51bGwsdWs9bnVsbCxnaz0wLEhqPUluZmluaXR5LHZrPW51bGwsUGk9ITEsUWk9bnVsbCxTaT1udWxsLHdrPSExLHhrPW51bGwseWs9MCx6az0wLEFrPW51bGwsQms9LTEsQ2s9MDtmdW5jdGlvbiBMKCl7cmV0dXJuIDAhPT0oSyY2KT9CKCk6LTEhPT1Caz9CazpCaz1CKCl9XG5mdW5jdGlvbiBsaChhKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gMTtpZigwIT09KEsmMikmJjAhPT1aKXJldHVybiBaJi1aO2lmKG51bGwhPT1LZy50cmFuc2l0aW9uKXJldHVybiAwPT09Q2smJihDaz15YygpKSxDazthPUM7aWYoMCE9PWEpcmV0dXJuIGE7YT13aW5kb3cuZXZlbnQ7YT12b2lkIDA9PT1hPzE2OmpkKGEudHlwZSk7cmV0dXJuIGF9ZnVuY3Rpb24gbWgoYSxiLGMsZCl7aWYoNTA8emspdGhyb3cgems9MCxBaz1udWxsLEVycm9yKHAoMTg1KSk7QWMoYSxjLGQpO2lmKDA9PT0oSyYyKXx8YSE9PVIpYT09PVImJigwPT09KEsmMikmJihya3w9YyksND09PVQmJkRrKGEsWikpLEVrKGEsZCksMT09PWMmJjA9PT1LJiYwPT09KGIubW9kZSYxKSYmKEhqPUIoKSs1MDAsZmcmJmpnKCkpfVxuZnVuY3Rpb24gRWsoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTm9kZTt3YyhhLGIpO3ZhciBkPXVjKGEsYT09PVI/WjowKTtpZigwPT09ZCludWxsIT09YyYmYmMoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MDtlbHNlIGlmKGI9ZCYtZCxhLmNhbGxiYWNrUHJpb3JpdHkhPT1iKXtudWxsIT1jJiZiYyhjKTtpZigxPT09YikwPT09YS50YWc/aWcoRmsuYmluZChudWxsLGEpKTpoZyhGay5iaW5kKG51bGwsYSkpLEpmKGZ1bmN0aW9uKCl7MD09PShLJjYpJiZqZygpfSksYz1udWxsO2Vsc2V7c3dpdGNoKERjKGQpKXtjYXNlIDE6Yz1mYzticmVhaztjYXNlIDQ6Yz1nYzticmVhaztjYXNlIDE2OmM9aGM7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6Yz1qYzticmVhaztkZWZhdWx0OmM9aGN9Yz1HayhjLEhrLmJpbmQobnVsbCxhKSl9YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBIayhhLGIpe0JrPS0xO0NrPTA7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7dmFyIGM9YS5jYWxsYmFja05vZGU7aWYoSWsoKSYmYS5jYWxsYmFja05vZGUhPT1jKXJldHVybiBudWxsO3ZhciBkPXVjKGEsYT09PVI/WjowKTtpZigwPT09ZClyZXR1cm4gbnVsbDtpZigwIT09KGQmMzApfHwwIT09KGQmYS5leHBpcmVkTGFuZXMpfHxiKWI9SmsoYSxkKTtlbHNle2I9ZDt2YXIgZT1LO0t8PTI7dmFyIGY9S2soKTtpZihSIT09YXx8WiE9PWIpdms9bnVsbCxIaj1CKCkrNTAwLExrKGEsYik7ZG8gdHJ5e01rKCk7YnJlYWt9Y2F0Y2goaCl7TmsoYSxoKX13aGlsZSgxKTtRZygpO25rLmN1cnJlbnQ9ZjtLPWU7bnVsbCE9PVk/Yj0wOihSPW51bGwsWj0wLGI9VCl9aWYoMCE9PWIpezI9PT1iJiYoZT14YyhhKSwwIT09ZSYmKGQ9ZSxiPU9rKGEsZSkpKTtpZigxPT09Yil0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxkKSxFayhhLEIoKSksYztpZig2PT09YilEayhhLGQpO1xuZWxzZXtlPWEuY3VycmVudC5hbHRlcm5hdGU7aWYoMD09PShkJjMwKSYmIVBrKGUpJiYoYj1KayhhLGQpLDI9PT1iJiYoZj14YyhhKSwwIT09ZiYmKGQ9ZixiPU9rKGEsZikpKSwxPT09YikpdGhyb3cgYz1xayxMayhhLDApLERrKGEsZCksRWsoYSxCKCkpLGM7YS5maW5pc2hlZFdvcms9ZTthLmZpbmlzaGVkTGFuZXM9ZDtzd2l0Y2goYil7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcihwKDM0NSkpO2Nhc2UgMjpRayhhLHVrLHZrKTticmVhaztjYXNlIDM6RGsoYSxkKTtpZigoZCYxMzAwMjM0MjQpPT09ZCYmKGI9Z2srNTAwLUIoKSwxMDxiKSl7aWYoMCE9PXVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmQpIT09ZCl7TCgpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9RmYoUWsuYmluZChudWxsLGEsdWssdmspLGIpO2JyZWFrfVFrKGEsdWssdmspO2JyZWFrO2Nhc2UgNDpEayhhLGQpO2lmKChkJjQxOTQyNDApPT09XG5kKWJyZWFrO2I9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8ZDspe3ZhciBnPTMxLW9jKGQpO2Y9MTw8ZztnPWJbZ107Zz5lJiYoZT1nKTtkJj1+Zn1kPWU7ZD1CKCktZDtkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKm1rKGQvMTk2MCkpLWQ7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPUZmKFFrLmJpbmQobnVsbCxhLHVrLHZrKSxkKTticmVha31RayhhLHVrLHZrKTticmVhaztjYXNlIDU6UWsoYSx1ayx2ayk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMyOSkpO319fUVrKGEsQigpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1jP0hrLmJpbmQobnVsbCxhKTpudWxsfVxuZnVuY3Rpb24gT2soYSxiKXt2YXIgYz10azthLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJihMayhhLGIpLmZsYWdzfD0yNTYpO2E9SmsoYSxiKTsyIT09YSYmKGI9dWssdWs9YyxudWxsIT09YiYmR2ooYikpO3JldHVybiBhfWZ1bmN0aW9uIEdqKGEpe251bGw9PT11az91az1hOnVrLnB1c2guYXBwbHkodWssYSl9XG5mdW5jdGlvbiBQayhhKXtmb3IodmFyIGI9YTs7KXtpZihiLmZsYWdzJjE2Mzg0KXt2YXIgYz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jJiYoYz1jLnN0b3JlcyxudWxsIT09YykpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF0sZj1lLmdldFNuYXBzaG90O2U9ZS52YWx1ZTt0cnl7aWYoIUhlKGYoKSxlKSlyZXR1cm4hMX1jYXRjaChnKXtyZXR1cm4hMX19fWM9Yi5jaGlsZDtpZihiLnN1YnRyZWVGbGFncyYxNjM4NCYmbnVsbCE9PWMpYy5yZXR1cm49YixiPWM7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4hMDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiEwfVxuZnVuY3Rpb24gRGsoYSxiKXtiJj1+c2s7YiY9fnJrO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtb2MoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fWZ1bmN0aW9uIEZrKGEpe2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO0lrKCk7dmFyIGI9dWMoYSwwKTtpZigwPT09KGImMSkpcmV0dXJuIEVrKGEsQigpKSxudWxsO3ZhciBjPUprKGEsYik7aWYoMCE9PWEudGFnJiYyPT09Yyl7dmFyIGQ9eGMoYSk7MCE9PWQmJihiPWQsYz1PayhhLGQpKX1pZigxPT09Yyl0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxiKSxFayhhLEIoKSksYztpZig2PT09Yyl0aHJvdyBFcnJvcihwKDM0NSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7UWsoYSx1ayx2ayk7RWsoYSxCKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gUmsoYSxiKXt2YXIgYz1LO0t8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Sz1jLDA9PT1LJiYoSGo9QigpKzUwMCxmZyYmamcoKSl9fWZ1bmN0aW9uIFNrKGEpe251bGwhPT14ayYmMD09PXhrLnRhZyYmMD09PShLJjYpJiZJaygpO3ZhciBiPUs7S3w9MTt2YXIgYz1way50cmFuc2l0aW9uLGQ9Qzt0cnl7aWYocGsudHJhbnNpdGlvbj1udWxsLEM9MSxhKXJldHVybiBhKCl9ZmluYWxseXtDPWQscGsudHJhbnNpdGlvbj1jLEs9YiwwPT09KEsmNikmJmpnKCl9fWZ1bmN0aW9uIElqKCl7Z2o9ZmouY3VycmVudDtFKGZqKX1cbmZ1bmN0aW9uIExrKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLEdmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7d2coZCk7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJiRmKCk7YnJlYWs7Y2FzZSAzOkpoKCk7RShXZik7RShIKTtPaCgpO2JyZWFrO2Nhc2UgNTpMaChkKTticmVhaztjYXNlIDQ6SmgoKTticmVhaztjYXNlIDEzOkUoTSk7YnJlYWs7Y2FzZSAxOTpFKE0pO2JyZWFrO2Nhc2UgMTA6UmcoZC50eXBlLl9jb250ZXh0KTticmVhaztjYXNlIDIyOmNhc2UgMjM6SWooKX1jPWMucmV0dXJufVI9YTtZPWE9d2goYS5jdXJyZW50LG51bGwpO1o9Z2o9YjtUPTA7cWs9bnVsbDtzaz1yaz1oaD0wO3VrPXRrPW51bGw7aWYobnVsbCE9PVdnKXtmb3IoYj1cbjA7YjxXZy5sZW5ndGg7YisrKWlmKGM9V2dbYl0sZD1jLmludGVybGVhdmVkLG51bGwhPT1kKXtjLmludGVybGVhdmVkPW51bGw7dmFyIGU9ZC5uZXh0LGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXt2YXIgZz1mLm5leHQ7Zi5uZXh0PWU7ZC5uZXh0PWd9Yy5wZW5kaW5nPWR9V2c9bnVsbH1yZXR1cm4gYX1cbmZ1bmN0aW9uIE5rKGEsYil7ZG97dmFyIGM9WTt0cnl7UWcoKTtQaC5jdXJyZW50PWFpO2lmKFNoKXtmb3IodmFyIGQ9Ti5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH1TaD0hMX1SaD0wO1A9Tz1OPW51bGw7VGg9ITE7VWg9MDtvay5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7VD0xO3FrPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9WjtoLmZsYWdzfD0zMjc2ODtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rLG09aCxxPW0udGFnO2lmKDA9PT0obS5tb2RlJjEpJiYoMD09PXF8fDExPT09cXx8MTU9PT1xKSl7dmFyIHI9bS5hbHRlcm5hdGU7cj8obS51cGRhdGVRdWV1ZT1yLnVwZGF0ZVF1ZXVlLG0ubWVtb2l6ZWRTdGF0ZT1yLm1lbW9pemVkU3RhdGUsXG5tLmxhbmVzPXIubGFuZXMpOihtLnVwZGF0ZVF1ZXVlPW51bGwsbS5tZW1vaXplZFN0YXRlPW51bGwpfXZhciB5PVZpKGcpO2lmKG51bGwhPT15KXt5LmZsYWdzJj0tMjU3O1dpKHksZyxoLGYsYik7eS5tb2RlJjEmJlRpKGYsbCxiKTtiPXk7az1sO3ZhciBuPWIudXBkYXRlUXVldWU7aWYobnVsbD09PW4pe3ZhciB0PW5ldyBTZXQ7dC5hZGQoayk7Yi51cGRhdGVRdWV1ZT10fWVsc2Ugbi5hZGQoayk7YnJlYWsgYX1lbHNle2lmKDA9PT0oYiYxKSl7VGkoZixsLGIpO3VqKCk7YnJlYWsgYX1rPUVycm9yKHAoNDI2KSl9fWVsc2UgaWYoSSYmaC5tb2RlJjEpe3ZhciBKPVZpKGcpO2lmKG51bGwhPT1KKXswPT09KEouZmxhZ3MmNjU1MzYpJiYoSi5mbGFnc3w9MjU2KTtXaShKLGcsaCxmLGIpO0pnKEtpKGssaCkpO2JyZWFrIGF9fWY9az1LaShrLGgpOzQhPT1UJiYoVD0yKTtudWxsPT09dGs/dGs9W2ZdOnRrLnB1c2goZik7Zj1nO2Rve3N3aXRjaChmLnRhZyl7Y2FzZSAzOmYuZmxhZ3N8PTY1NTM2O1xuYiY9LWI7Zi5sYW5lc3w9Yjt2YXIgeD1PaShmLGssYik7ZmgoZix4KTticmVhayBhO2Nhc2UgMTpoPWs7dmFyIHc9Zi50eXBlLHU9Zi5zdGF0ZU5vZGU7aWYoMD09PShmLmZsYWdzJjEyOCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT11JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1TaXx8IVNpLmhhcyh1KSkpKXtmLmZsYWdzfD02NTUzNjtiJj0tYjtmLmxhbmVzfD1iO3ZhciBGPVJpKGYsaCxiKTtmaChmLEYpO2JyZWFrIGF9fWY9Zi5yZXR1cm59d2hpbGUobnVsbCE9PWYpfVRrKGMpfWNhdGNoKG5hKXtiPW5hO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9ZnVuY3Rpb24gS2soKXt2YXIgYT1uay5jdXJyZW50O25rLmN1cnJlbnQ9YWk7cmV0dXJuIG51bGw9PT1hP2FpOmF9XG5mdW5jdGlvbiB1aigpe2lmKDA9PT1UfHwzPT09VHx8Mj09PVQpVD00O251bGw9PT1SfHwwPT09KGhoJjI2ODQzNTQ1NSkmJjA9PT0ocmsmMjY4NDM1NDU1KXx8RGsoUixaKX1mdW5jdGlvbiBKayhhLGIpe3ZhciBjPUs7S3w9Mjt2YXIgZD1LaygpO2lmKFIhPT1hfHxaIT09Yil2az1udWxsLExrKGEsYik7ZG8gdHJ5e1VrKCk7YnJlYWt9Y2F0Y2goZSl7TmsoYSxlKX13aGlsZSgxKTtRZygpO0s9Yztuay5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IocCgyNjEpKTtSPW51bGw7Wj0wO3JldHVybiBUfWZ1bmN0aW9uIFVrKCl7Zm9yKDtudWxsIT09WTspVmsoWSl9ZnVuY3Rpb24gTWsoKXtmb3IoO251bGwhPT1ZJiYhY2MoKTspVmsoWSl9ZnVuY3Rpb24gVmsoYSl7dmFyIGI9V2soYS5hbHRlcm5hdGUsYSxnaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1RrKGEpOlk9Yjtvay5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBUayhhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjMyNzY4KSl7aWYoYz1GaihjLGIsZ2opLG51bGwhPT1jKXtZPWM7cmV0dXJufX1lbHNle2M9SmooYyxiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MzI3Njc7WT1jO3JldHVybn1pZihudWxsIT09YSlhLmZsYWdzfD0zMjc2OCxhLnN1YnRyZWVGbGFncz0wLGEuZGVsZXRpb25zPW51bGw7ZWxzZXtUPTY7WT1udWxsO3JldHVybn19Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1UJiYoVD01KX1mdW5jdGlvbiBRayhhLGIsYyl7dmFyIGQ9QyxlPXBrLnRyYW5zaXRpb247dHJ5e3BrLnRyYW5zaXRpb249bnVsbCxDPTEsWGsoYSxiLGMsZCl9ZmluYWxseXtway50cmFuc2l0aW9uPWUsQz1kfXJldHVybiBudWxsfVxuZnVuY3Rpb24gWGsoYSxiLGMsZCl7ZG8gSWsoKTt3aGlsZShudWxsIT09eGspO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO2M9YS5maW5pc2hlZFdvcms7dmFyIGU9YS5maW5pc2hlZExhbmVzO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcihwKDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja1ByaW9yaXR5PTA7dmFyIGY9Yy5sYW5lc3xjLmNoaWxkTGFuZXM7QmMoYSxmKTthPT09UiYmKFk9Uj1udWxsLFo9MCk7MD09PShjLnN1YnRyZWVGbGFncyYyMDY0KSYmMD09PShjLmZsYWdzJjIwNjQpfHx3a3x8KHdrPSEwLEdrKGhjLGZ1bmN0aW9uKCl7SWsoKTtyZXR1cm4gbnVsbH0pKTtmPTAhPT0oYy5mbGFncyYxNTk5MCk7aWYoMCE9PShjLnN1YnRyZWVGbGFncyYxNTk5MCl8fGYpe2Y9cGsudHJhbnNpdGlvbjtway50cmFuc2l0aW9uPW51bGw7XG52YXIgZz1DO0M9MTt2YXIgaD1LO0t8PTQ7b2suY3VycmVudD1udWxsO1BqKGEsYyk7ZWsoYyxhKTtPZShEZik7ZGQ9ISFDZjtEZj1DZj1udWxsO2EuY3VycmVudD1jO2lrKGMsYSxlKTtkYygpO0s9aDtDPWc7cGsudHJhbnNpdGlvbj1mfWVsc2UgYS5jdXJyZW50PWM7d2smJih3az0hMSx4az1hLHlrPWUpO2Y9YS5wZW5kaW5nTGFuZXM7MD09PWYmJihTaT1udWxsKTttYyhjLnN0YXRlTm9kZSxkKTtFayhhLEIoKSk7aWYobnVsbCE9PWIpZm9yKGQ9YS5vblJlY292ZXJhYmxlRXJyb3IsYz0wO2M8Yi5sZW5ndGg7YysrKWU9YltjXSxkKGUudmFsdWUse2NvbXBvbmVudFN0YWNrOmUuc3RhY2ssZGlnZXN0OmUuZGlnZXN0fSk7aWYoUGkpdGhyb3cgUGk9ITEsYT1RaSxRaT1udWxsLGE7MCE9PSh5ayYxKSYmMCE9PWEudGFnJiZJaygpO2Y9YS5wZW5kaW5nTGFuZXM7MCE9PShmJjEpP2E9PT1Baz96aysrOih6az0wLEFrPWEpOnprPTA7amcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIElrKCl7aWYobnVsbCE9PXhrKXt2YXIgYT1EYyh5ayksYj1way50cmFuc2l0aW9uLGM9Qzt0cnl7cGsudHJhbnNpdGlvbj1udWxsO0M9MTY+YT8xNjphO2lmKG51bGw9PT14ayl2YXIgZD0hMTtlbHNle2E9eGs7eGs9bnVsbDt5az0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMzMSkpO3ZhciBlPUs7S3w9NDtmb3IoVj1hLmN1cnJlbnQ7bnVsbCE9PVY7KXt2YXIgZj1WLGc9Zi5jaGlsZDtpZigwIT09KFYuZmxhZ3MmMTYpKXt2YXIgaD1mLmRlbGV0aW9ucztpZihudWxsIT09aCl7Zm9yKHZhciBrPTA7azxoLmxlbmd0aDtrKyspe3ZhciBsPWhba107Zm9yKFY9bDtudWxsIT09Vjspe3ZhciBtPVY7c3dpdGNoKG0udGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlFqKDgsbSxmKX12YXIgcT1tLmNoaWxkO2lmKG51bGwhPT1xKXEucmV0dXJuPW0sVj1xO2Vsc2UgZm9yKDtudWxsIT09Vjspe209Vjt2YXIgcj1tLnNpYmxpbmcseT1tLnJldHVybjtUaihtKTtpZihtPT09XG5sKXtWPW51bGw7YnJlYWt9aWYobnVsbCE9PXIpe3IucmV0dXJuPXk7Vj1yO2JyZWFrfVY9eX19fXZhciBuPWYuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXt2YXIgdD1uLmNoaWxkO2lmKG51bGwhPT10KXtuLmNoaWxkPW51bGw7ZG97dmFyIEo9dC5zaWJsaW5nO3Quc2libGluZz1udWxsO3Q9Sn13aGlsZShudWxsIT09dCl9fVY9Zn19aWYoMCE9PShmLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PWcpZy5yZXR1cm49ZixWPWc7ZWxzZSBiOmZvcig7bnVsbCE9PVY7KXtmPVY7aWYoMCE9PShmLmZsYWdzJjIwNDgpKXN3aXRjaChmLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpRaig5LGYsZi5yZXR1cm4pfXZhciB4PWYuc2libGluZztpZihudWxsIT09eCl7eC5yZXR1cm49Zi5yZXR1cm47Vj14O2JyZWFrIGJ9Vj1mLnJldHVybn19dmFyIHc9YS5jdXJyZW50O2ZvcihWPXc7bnVsbCE9PVY7KXtnPVY7dmFyIHU9Zy5jaGlsZDtpZigwIT09KGcuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09XG51KXUucmV0dXJuPWcsVj11O2Vsc2UgYjpmb3IoZz13O251bGwhPT1WOyl7aD1WO2lmKDAhPT0oaC5mbGFncyYyMDQ4KSl0cnl7c3dpdGNoKGgudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlJqKDksaCl9fWNhdGNoKG5hKXtXKGgsaC5yZXR1cm4sbmEpfWlmKGg9PT1nKXtWPW51bGw7YnJlYWsgYn12YXIgRj1oLnNpYmxpbmc7aWYobnVsbCE9PUYpe0YucmV0dXJuPWgucmV0dXJuO1Y9RjticmVhayBifVY9aC5yZXR1cm59fUs9ZTtqZygpO2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Qb3N0Q29tbWl0RmliZXJSb290KXRyeXtsYy5vblBvc3RDb21taXRGaWJlclJvb3Qoa2MsYSl9Y2F0Y2gobmEpe31kPSEwfXJldHVybiBkfWZpbmFsbHl7Qz1jLHBrLnRyYW5zaXRpb249Yn19cmV0dXJuITF9ZnVuY3Rpb24gWWsoYSxiLGMpe2I9S2koYyxiKTtiPU9pKGEsYiwxKTthPWRoKGEsYiwxKTtiPUwoKTtudWxsIT09YSYmKEFjKGEsMSxiKSxFayhhLGIpKX1cbmZ1bmN0aW9uIFcoYSxiLGMpe2lmKDM9PT1hLnRhZylZayhhLGEsYyk7ZWxzZSBmb3IoO251bGwhPT1iOyl7aWYoMz09PWIudGFnKXtZayhiLGEsYyk7YnJlYWt9ZWxzZSBpZigxPT09Yi50YWcpe3ZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1TaXx8IVNpLmhhcyhkKSkpe2E9S2koYyxhKTthPVJpKGIsYSwxKTtiPWRoKGIsYSwxKTthPUwoKTtudWxsIT09YiYmKEFjKGIsMSxhKSxFayhiLGEpKTticmVha319Yj1iLnJldHVybn19XG5mdW5jdGlvbiBVaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9TCgpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztSPT09YSYmKFomYyk9PT1jJiYoND09PVR8fDM9PT1UJiYoWiYxMzAwMjM0MjQpPT09WiYmNTAwPkIoKS1naz9MayhhLDApOnNrfD1jKTtFayhhLGIpfWZ1bmN0aW9uIFprKGEsYil7MD09PWImJigwPT09KGEubW9kZSYxKT9iPTE6KGI9c2Msc2M8PD0xLDA9PT0oc2MmMTMwMDIzNDI0KSYmKHNjPTQxOTQzMDQpKSk7dmFyIGM9TCgpO2E9WmcoYSxiKTtudWxsIT09YSYmKEFjKGEsYixjKSxFayhhLGMpKX1mdW5jdGlvbiB2aihhKXt2YXIgYj1hLm1lbW9pemVkU3RhdGUsYz0wO251bGwhPT1iJiYoYz1iLnJldHJ5TGFuZSk7WmsoYSxjKX1cbmZ1bmN0aW9uIGNrKGEsYil7dmFyIGM9MDtzd2l0Y2goYS50YWcpe2Nhc2UgMTM6dmFyIGQ9YS5zdGF0ZU5vZGU7dmFyIGU9YS5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoYz1lLnJldHJ5TGFuZSk7YnJlYWs7Y2FzZSAxOTpkPWEuc3RhdGVOb2RlO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMTQpKTt9bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1prKGEsYyl9dmFyIFdrO1xuV2s9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxXZi5jdXJyZW50KVVnPSEwO2Vsc2V7aWYoMD09PShhLmxhbmVzJmMpJiYwPT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gVWc9ITEsemooYSxiLGMpO1VnPTAhPT0oYS5mbGFncyYxMzEwNzIpPyEwOiExfWVsc2UgVWc9ITEsSSYmMCE9PShiLmZsYWdzJjEwNDg1NzYpJiZ1ZyhiLG5nLGIuaW5kZXgpO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjp2YXIgZD1iLnR5cGU7amooYSxiKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPVlmKGIsSC5jdXJyZW50KTtUZyhiLGMpO2U9WGgobnVsbCxiLGQsYSxlLGMpO3ZhciBmPWJpKCk7Yi5mbGFnc3w9MTtcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Y/KGIudGFnPTEsYi5tZW1vaXplZFN0YXRlPW51bGwsYi51cGRhdGVRdWV1ZT1cbm51bGwsWmYoZCk/KGY9ITAsY2coYikpOmY9ITEsYi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbCxhaChiKSxlLnVwZGF0ZXI9bmgsYi5zdGF0ZU5vZGU9ZSxlLl9yZWFjdEludGVybmFscz1iLHJoKGIsZCxhLGMpLGI9a2oobnVsbCxiLGQsITAsZixjKSk6KGIudGFnPTAsSSYmZiYmdmcoYiksWWkobnVsbCxiLGUsYyksYj1iLmNoaWxkKTtyZXR1cm4gYjtjYXNlIDE2OmQ9Yi5lbGVtZW50VHlwZTthOntqaihhLGIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1kLl9pbml0O2Q9ZShkLl9wYXlsb2FkKTtiLnR5cGU9ZDtlPWIudGFnPSRrKGQpO2E9TGcoZCxhKTtzd2l0Y2goZSl7Y2FzZSAwOmI9ZGoobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTpiPWlqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WmkobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1haihudWxsLGIsZCxMZyhkLnR5cGUsYSksYyk7YnJlYWsgYX10aHJvdyBFcnJvcihwKDMwNixcbmQsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksZGooYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksaWooYSxiLGQsZSxjKTtjYXNlIDM6YTp7bGooYik7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzODcpKTtkPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFN0YXRlO2U9Zi5lbGVtZW50O2JoKGEsYik7Z2goYixkLG51bGwsYyk7dmFyIGc9Yi5tZW1vaXplZFN0YXRlO2Q9Zy5lbGVtZW50O2lmKGYuaXNEZWh5ZHJhdGVkKWlmKGY9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6ITEsY2FjaGU6Zy5jYWNoZSxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOmcucGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfSxiLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1cbmYsYi5tZW1vaXplZFN0YXRlPWYsYi5mbGFncyYyNTYpe2U9S2koRXJyb3IocCg0MjMpKSxiKTtiPW1qKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGlmKGQhPT1lKXtlPUtpKEVycm9yKHAoNDI0KSksYik7Yj1taihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBmb3IoeWc9TGYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSx4Zz1iLEk9ITAsemc9bnVsbCxjPUNoKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8NDA5NixjPWMuc2libGluZztlbHNle0lnKCk7aWYoZD09PWUpe2I9JGkoYSxiLGMpO2JyZWFrIGF9WWkoYSxiLGQsYyl9Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gS2goYiksbnVsbD09PWEmJkVnKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sRWYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJkVmKGQsZikmJihiLmZsYWdzfD0zMiksXG5oaihhLGIpLFlpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmRWcoYiksbnVsbDtjYXNlIDEzOnJldHVybiBwaihhLGIsYyk7Y2FzZSA0OnJldHVybiBJaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1CaChiLG51bGwsZCxjKTpZaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksWmkoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFByb3BzO1xuZz1lLnZhbHVlO0coTWcsZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZztpZihudWxsIT09ZilpZihIZShmLnZhbHVlLGcpKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIVdmLmN1cnJlbnQpe2I9JGkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGY9Yi5jaGlsZCxudWxsIT09ZiYmKGYucmV0dXJuPWIpO251bGwhPT1mOyl7dmFyIGg9Zi5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWgpe2c9Zi5jaGlsZDtmb3IodmFyIGs9aC5maXJzdENvbnRleHQ7bnVsbCE9PWs7KXtpZihrLmNvbnRleHQ9PT1kKXtpZigxPT09Zi50YWcpe2s9Y2goLTEsYyYtYyk7ay50YWc9Mjt2YXIgbD1mLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1sKXtsPWwuc2hhcmVkO3ZhciBtPWwucGVuZGluZztudWxsPT09bT9rLm5leHQ9azooay5uZXh0PW0ubmV4dCxtLm5leHQ9ayk7bC5wZW5kaW5nPWt9fWYubGFuZXN8PWM7az1mLmFsdGVybmF0ZTtudWxsIT09ayYmKGsubGFuZXN8PWMpO1NnKGYucmV0dXJuLFxuYyxiKTtoLmxhbmVzfD1jO2JyZWFrfWs9ay5uZXh0fX1lbHNlIGlmKDEwPT09Zi50YWcpZz1mLnR5cGU9PT1iLnR5cGU/bnVsbDpmLmNoaWxkO2Vsc2UgaWYoMTg9PT1mLnRhZyl7Zz1mLnJldHVybjtpZihudWxsPT09Zyl0aHJvdyBFcnJvcihwKDM0MSkpO2cubGFuZXN8PWM7aD1nLmFsdGVybmF0ZTtudWxsIT09aCYmKGgubGFuZXN8PWMpO1NnKGcsYyxiKTtnPWYuc2libGluZ31lbHNlIGc9Zi5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1mO2Vsc2UgZm9yKGc9ZjtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9Zj1nLnNpYmxpbmc7aWYobnVsbCE9PWYpe2YucmV0dXJuPWcucmV0dXJuO2c9ZjticmVha31nPWcucmV0dXJufWY9Z31ZaShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxkPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFRnKGIsYyksZT1WZyhlKSxkPWQoZSksYi5mbGFnc3w9MSxZaShhLGIsZCxjKSxcbmIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZD1iLnR5cGUsZT1MZyhkLGIucGVuZGluZ1Byb3BzKSxlPUxnKGQudHlwZSxlKSxhaihhLGIsZCxlLGMpO2Nhc2UgMTU6cmV0dXJuIGNqKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxqaihhLGIpLGIudGFnPTEsWmYoZCk/KGE9ITAsY2coYikpOmE9ITEsVGcoYixjKSxwaChiLGQsZSkscmgoYixkLGUsYyksa2oobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiB5aihhLGIsYyk7Y2FzZSAyMjpyZXR1cm4gZWooYSxiLGMpfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fTtmdW5jdGlvbiBHayhhLGIpe3JldHVybiBhYyhhLGIpfVxuZnVuY3Rpb24gYWwoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLnN1YnRyZWVGbGFncz10aGlzLmZsYWdzPTA7dGhpcy5kZWxldGlvbnM9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gQmcoYSxiLGMsZCl7cmV0dXJuIG5ldyBhbChhLGIsYyxkKX1mdW5jdGlvbiBiaihhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gJGsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGJqKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1EYSlyZXR1cm4gMTE7aWYoYT09PUdhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIHdoKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9QmcoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5zdWJ0cmVlRmxhZ3M9MCxjLmRlbGV0aW9ucz1udWxsKTtjLmZsYWdzPWEuZmxhZ3MmMTQ2ODAwNjQ7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIHloKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSliaihhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm4gQWgoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSB6YTpnPTg7ZXw9ODticmVhaztjYXNlIEFhOnJldHVybiBhPUJnKDEyLGMsYixlfDIpLGEuZWxlbWVudFR5cGU9QWEsYS5sYW5lcz1mLGE7Y2FzZSBFYTpyZXR1cm4gYT1CZygxMyxjLGIsZSksYS5lbGVtZW50VHlwZT1FYSxhLmxhbmVzPWYsYTtjYXNlIEZhOnJldHVybiBhPUJnKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUZhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHFqKGMsZSxmLGIpO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBCYTpnPTEwO2JyZWFrIGE7Y2FzZSBDYTpnPTk7YnJlYWsgYTtjYXNlIERhOmc9MTE7XG5icmVhayBhO2Nhc2UgR2E6Zz0xNDticmVhayBhO2Nhc2UgSGE6Zz0xNjtkPW51bGw7YnJlYWsgYX10aHJvdyBFcnJvcihwKDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPUJnKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gQWgoYSxiLGMsZCl7YT1CZyg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gcWooYSxiLGMsZCl7YT1CZygyMixhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7YS5zdGF0ZU5vZGU9e2lzSGlkZGVuOiExfTtyZXR1cm4gYX1mdW5jdGlvbiB4aChhLGIsYyl7YT1CZyg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiB6aChhLGIsYyl7Yj1CZyg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGJsKGEsYixjLGQsZSl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5jYWxsYmFja05vZGU9dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9emMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9emMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9emMoMCk7dGhpcy5pZGVudGlmaWVyUHJlZml4PWQ7dGhpcy5vblJlY292ZXJhYmxlRXJyb3I9ZTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9XG5udWxsfWZ1bmN0aW9uIGNsKGEsYixjLGQsZSxmLGcsaCxrKXthPW5ldyBibChhLGIsYyxoLGspOzE9PT1iPyhiPTEsITA9PT1mJiYoYnw9OCkpOmI9MDtmPUJnKDMsbnVsbCxudWxsLGIpO2EuY3VycmVudD1mO2Yuc3RhdGVOb2RlPWE7Zi5tZW1vaXplZFN0YXRlPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOmMsY2FjaGU6bnVsbCx0cmFuc2l0aW9uczpudWxsLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6bnVsbH07YWgoZik7cmV0dXJuIGF9ZnVuY3Rpb24gZGwoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp3YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGVsKGEpe2lmKCFhKXJldHVybiBWZjthPWEuX3JlYWN0SW50ZXJuYWxzO2E6e2lmKFZiKGEpIT09YXx8MSE9PWEudGFnKXRocm93IEVycm9yKHAoMTcwKSk7dmFyIGI9YTtkb3tzd2l0Y2goYi50YWcpe2Nhc2UgMzpiPWIuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYTtjYXNlIDE6aWYoWmYoYi50eXBlKSl7Yj1iLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBhfX1iPWIucmV0dXJufXdoaWxlKG51bGwhPT1iKTt0aHJvdyBFcnJvcihwKDE3MSkpO31pZigxPT09YS50YWcpe3ZhciBjPWEudHlwZTtpZihaZihjKSlyZXR1cm4gYmcoYSxjLGIpfXJldHVybiBifVxuZnVuY3Rpb24gZmwoYSxiLGMsZCxlLGYsZyxoLGspe2E9Y2woYyxkLCEwLGEsZSxmLGcsaCxrKTthLmNvbnRleHQ9ZWwobnVsbCk7Yz1hLmN1cnJlbnQ7ZD1MKCk7ZT1saChjKTtmPWNoKGQsZSk7Zi5jYWxsYmFjaz12b2lkIDAhPT1iJiZudWxsIT09Yj9iOm51bGw7ZGgoYyxmLGUpO2EuY3VycmVudC5sYW5lcz1lO0FjKGEsZSxkKTtFayhhLGQpO3JldHVybiBhfWZ1bmN0aW9uIGdsKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUwoKSxnPWxoKGUpO2M9ZWwoYyk7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1jaChmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTthPWRoKGUsYixnKTtudWxsIT09YSYmKG1oKGEsZSxnLGYpLGVoKGEsZSxnKSk7cmV0dXJuIGd9XG5mdW5jdGlvbiBobChhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGlsKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBqbChhLGIpe2lsKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZpbChhLGIpfWZ1bmN0aW9uIGtsKCl7cmV0dXJuIG51bGx9dmFyIGxsPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXBvcnRFcnJvcj9yZXBvcnRFcnJvcjpmdW5jdGlvbihhKXtjb25zb2xlLmVycm9yKGEpfTtmdW5jdGlvbiBtbChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm5sLnByb3RvdHlwZS5yZW5kZXI9bWwucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCg0MDkpKTtnbChhLGIsbnVsbCxudWxsKX07bmwucHJvdG90eXBlLnVubW91bnQ9bWwucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbCE9PWEpe3RoaXMuX2ludGVybmFsUm9vdD1udWxsO3ZhciBiPWEuY29udGFpbmVySW5mbztTayhmdW5jdGlvbigpe2dsKG51bGwsYSxudWxsLG51bGwpfSk7Ylt1Zl09bnVsbH19O2Z1bmN0aW9uIG5sKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubmwucHJvdG90eXBlLnVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uPWZ1bmN0aW9uKGEpe2lmKGEpe3ZhciBiPUhjKCk7YT17YmxvY2tlZE9uOm51bGwsdGFyZ2V0OmEscHJpb3JpdHk6Yn07Zm9yKHZhciBjPTA7YzxRYy5sZW5ndGgmJjAhPT1iJiZiPFFjW2NdLnByaW9yaXR5O2MrKyk7UWMuc3BsaWNlKGMsMCxhKTswPT09YyYmVmMoYSl9fTtmdW5jdGlvbiBvbChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSl9ZnVuY3Rpb24gcGwoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIHFsKCl7fVxuZnVuY3Rpb24gcmwoYSxiLGMsZCxlKXtpZihlKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGY9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9aGwoZyk7Zi5jYWxsKGEpfX12YXIgZz1mbChiLGQsYSwwLG51bGwsITEsITEsXCJcIixxbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWc7YVt1Zl09Zy5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtTaygpO3JldHVybiBnfWZvcig7ZT1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChlKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGg9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9aGwoayk7aC5jYWxsKGEpfX12YXIgaz1jbChhLDAsITEsbnVsbCxudWxsLCExLCExLFwiXCIscWwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1rO2FbdWZdPWsuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7U2soZnVuY3Rpb24oKXtnbChiLGssYyxkKX0pO3JldHVybiBrfVxuZnVuY3Rpb24gc2woYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9ZjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9aGwoZyk7aC5jYWxsKGEpfX1nbChiLGcsYSxlKX1lbHNlIGc9cmwoYyxiLGEsZSxkKTtyZXR1cm4gaGwoZyl9RWM9ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDM6dmFyIGI9YS5zdGF0ZU5vZGU7aWYoYi5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXt2YXIgYz10YyhiLnBlbmRpbmdMYW5lcyk7MCE9PWMmJihDYyhiLGN8MSksRWsoYixCKCkpLDA9PT0oSyY2KSYmKEhqPUIoKSs1MDAsamcoKSkpfWJyZWFrO2Nhc2UgMTM6U2soZnVuY3Rpb24oKXt2YXIgYj1aZyhhLDEpO2lmKG51bGwhPT1iKXt2YXIgYz1MKCk7bWgoYixhLDEsYyl9fSksamwoYSwxKX19O1xuRmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9WmcoYSwxMzQyMTc3MjgpO2lmKG51bGwhPT1iKXt2YXIgYz1MKCk7bWgoYixhLDEzNDIxNzcyOCxjKX1qbChhLDEzNDIxNzcyOCl9fTtHYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1saChhKSxjPVpnKGEsYik7aWYobnVsbCE9PWMpe3ZhciBkPUwoKTttaChjLGEsYixkKX1qbChhLGIpfX07SGM9ZnVuY3Rpb24oKXtyZXR1cm4gQ307SWM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1DO3RyeXtyZXR1cm4gQz1hLGIoKX1maW5hbGx5e0M9Y319O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpiYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IocCg5MCkpO1dhKGQpO2JiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1SaztIYj1TaztcbnZhciB0bD17dXNpbmdDbGllbnRFbnRyeVBvaW50OiExLEV2ZW50czpbQ2IsdWUsRGIsRWIsRmIsUmtdfSx1bD17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6V2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxOC4yLjBcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHZsPXtidW5kbGVUeXBlOnVsLmJ1bmRsZVR5cGUsdmVyc2lvbjp1bC52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6dWwucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp1bC5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0RXJyb3JIYW5kbGVyOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjp1YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9WmIoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnVsLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbmtsLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGwscmVjb25jaWxlclZlcnNpb246XCIxOC4yLjAtbmV4dC05ZTNiNzcyYjgtMjAyMjA2MDhcIn07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB3bD1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXdsLmlzRGlzYWJsZWQmJndsLnN1cHBvcnRzRmliZXIpdHJ5e2tjPXdsLmluamVjdCh2bCksbGM9d2x9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXRsO1xuZXhwb3J0cy5jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighb2woYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gZGwoYSxiLG51bGwsYyl9O2V4cG9ydHMuY3JlYXRlUm9vdD1mdW5jdGlvbihhLGIpe2lmKCFvbChhKSl0aHJvdyBFcnJvcihwKDI5OSkpO3ZhciBjPSExLGQ9XCJcIixlPWxsO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoITA9PT1iLnVuc3RhYmxlX3N0cmljdE1vZGUmJihjPSEwKSx2b2lkIDAhPT1iLmlkZW50aWZpZXJQcmVmaXgmJihkPWIuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yi5vblJlY292ZXJhYmxlRXJyb3ImJihlPWIub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1jbChhLDEsITEsbnVsbCxudWxsLGMsITEsZCxlKTthW3VmXT1iLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO3JldHVybiBuZXcgbWwoYil9O1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcihwKDE4OCkpO2E9T2JqZWN0LmtleXMoYSkuam9pbihcIixcIik7dGhyb3cgRXJyb3IocCgyNjgsYSkpO31hPVpiKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSl7cmV0dXJuIFNrKGEpfTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFwbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBzbChudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLmh5ZHJhdGVSb290PWZ1bmN0aW9uKGEsYixjKXtpZighb2woYSkpdGhyb3cgRXJyb3IocCg0MDUpKTt2YXIgZD1udWxsIT1jJiZjLmh5ZHJhdGVkU291cmNlc3x8bnVsbCxlPSExLGY9XCJcIixnPWxsO251bGwhPT1jJiZ2b2lkIDAhPT1jJiYoITA9PT1jLnVuc3RhYmxlX3N0cmljdE1vZGUmJihlPSEwKSx2b2lkIDAhPT1jLmlkZW50aWZpZXJQcmVmaXgmJihmPWMuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yy5vblJlY292ZXJhYmxlRXJyb3ImJihnPWMub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1mbChiLG51bGwsYSwxLG51bGwhPWM/YzpudWxsLGUsITEsZixnKTthW3VmXT1iLmN1cnJlbnQ7c2YoYSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWM9ZFthXSxlPWMuX2dldFZlcnNpb24sZT1lKGMuX3NvdXJjZSksbnVsbD09Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2IubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYyxlXTpiLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChjLFxuZSk7cmV0dXJuIG5ldyBubChiKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFwbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBzbChudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFwbChhKSl0aHJvdyBFcnJvcihwKDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oU2soZnVuY3Rpb24oKXtzbChudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbdWZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1SaztcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIXBsKGMpKXRocm93IEVycm9yKHAoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IocCgzOCkpO3JldHVybiBzbChhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMi4wLW5leHQtOWUzYjc3MmI4LTIwMjIwNjA4XCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBtID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBtLmNyZWF0ZVJvb3Q7XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBtLmh5ZHJhdGVSb290O1xufSBlbHNlIHtcbiAgdmFyIGkgPSBtLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBmdW5jdGlvbihjLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5jcmVhdGVSb290KGMsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIGgsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmh5ZHJhdGVSb290KGMsIGgsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZj1yZXF1aXJlKFwicmVhY3RcIiksaz1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxsPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxtPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksbj1mLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLHA9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIHEoYyxhLGcpe3ZhciBiLGQ9e30sZT1udWxsLGg9bnVsbDt2b2lkIDAhPT1nJiYoZT1cIlwiK2cpO3ZvaWQgMCE9PWEua2V5JiYoZT1cIlwiK2Eua2V5KTt2b2lkIDAhPT1hLnJlZiYmKGg9YS5yZWYpO2ZvcihiIGluIGEpbS5jYWxsKGEsYikmJiFwLmhhc093blByb3BlcnR5KGIpJiYoZFtiXT1hW2JdKTtpZihjJiZjLmRlZmF1bHRQcm9wcylmb3IoYiBpbiBhPWMuZGVmYXVsdFByb3BzLGEpdm9pZCAwPT09ZFtiXSYmKGRbYl09YVtiXSk7cmV0dXJueyQkdHlwZW9mOmssdHlwZTpjLGtleTplLHJlZjpoLHByb3BzOmQsX293bmVyOm4uY3VycmVudH19ZXhwb3J0cy5GcmFnbWVudD1sO2V4cG9ydHMuanN4PXE7ZXhwb3J0cy5qc3hzPXE7XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbj1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHA9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLHI9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLHU9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksdj1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksdz1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIikseD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSx5PVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHo9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXomJmFbel18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbnZhciBCPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxDPU9iamVjdC5hc3NpZ24sRD17fTtmdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtcbkUucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihcInNldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO0MoSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST1BcnJheS5pc0FycmF5LEo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLPXtjdXJyZW50Om51bGx9LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGUpe3ZhciBkLGM9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihkIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsZCkmJiFMLmhhc093blByb3BlcnR5KGQpJiYoY1tkXT1iW2RdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpYy5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtjLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGQgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWNbZF0mJihjW2RdPWdbZF0pO3JldHVybnskJHR5cGVvZjpsLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpjLF9vd25lcjpLLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZztmdW5jdGlvbiBRKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gUihhLGIsZSxkLGMpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBsOmNhc2UgbjpoPSEwfX1pZihoKXJldHVybiBoPWEsYz1jKGgpLGE9XCJcIj09PWQ/XCIuXCIrUShoLDApOmQsSShjKT8oZT1cIlwiLG51bGwhPWEmJihlPWEucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSxSKGMsYixlLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9YyYmKE8oYykmJihjPU4oYyxlKyghYy5rZXl8fGgmJmgua2V5PT09Yy5rZXk/XCJcIjooXCJcIitjLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGMpKSwxO2g9MDtkPVwiXCI9PT1kP1wiLlwiOmQrXCI6XCI7aWYoSShhKSlmb3IodmFyIGc9MDtnPGEubGVuZ3RoO2crKyl7az1cbmFbZ107dmFyIGY9ZCtRKGssZyk7aCs9UihrLGIsZSxmLGMpfWVsc2UgaWYoZj1BKGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1kK1EoayxnKyspLGgrPVIoayxiLGUsZixjKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9U3RyaW5nKGEpLEVycm9yKFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiBcIisoXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikrXCIpLiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQuXCIpO3JldHVybiBofVxuZnVuY3Rpb24gUyhhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZD1bXSxjPTA7UihhLGQsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoZSxhLGMrKyl9KTtyZXR1cm4gZH1mdW5jdGlvbiBUKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1ifSxmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yn0pOy0xPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTAsYS5fcmVzdWx0PWIpfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdC5kZWZhdWx0O3Rocm93IGEuX3Jlc3VsdDt9XG52YXIgVT17Y3VycmVudDpudWxsfSxWPXt0cmFuc2l0aW9uOm51bGx9LFc9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6VSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzpWLFJlYWN0Q3VycmVudE93bmVyOkt9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpTLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe1MoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtTKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUyhhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCIpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9RTtleHBvcnRzLkZyYWdtZW50PXA7XG5leHBvcnRzLlByb2ZpbGVyPXI7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUc7ZXhwb3J0cy5TdHJpY3RNb2RlPXE7ZXhwb3J0cy5TdXNwZW5zZT13O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VztcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihcIlJlYWN0LmNsb25lRWxlbWVudCguLi4pOiBUaGUgYXJndW1lbnQgbXVzdCBiZSBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB5b3UgcGFzc2VkIFwiK2ErXCIuXCIpO3ZhciBkPUMoe30sYS5wcm9wcyksYz1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Sy5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGM9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilKLmNhbGwoYixmKSYmIUwuaGFzT3duUHJvcGVydHkoZikmJihkW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO1xuZm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YyxyZWY6ayxwcm9wczpkLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEpe2E9eyQkdHlwZW9mOnUsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsLF9kZWZhdWx0VmFsdWU6bnVsbCxfZ2xvYmFsTmFtZTpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp0LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07XG5leHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87ZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6VH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp4LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy5zdGFydFRyYW5zaXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9Vi50cmFuc2l0aW9uO1YudHJhbnNpdGlvbj17fTt0cnl7YSgpfWZpbmFsbHl7Vi50cmFuc2l0aW9uPWJ9fTtleHBvcnRzLnVuc3RhYmxlX2FjdD1mdW5jdGlvbigpe3Rocm93IEVycm9yKFwiYWN0KC4uLikgaXMgbm90IHN1cHBvcnRlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcyBvZiBSZWFjdC5cIik7fTtcbmV4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNvbnRleHQoYSl9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlRGVmZXJyZWRWYWx1ZShhKX07ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUlkPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VJZCgpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZSl9O1xuZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUluc2VydGlvbkVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlUmVkdWNlcihhLGIsZSl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlU3RhdGUoYSl9O2V4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlU3luY0V4dGVybmFsU3RvcmUoYSxiLGUpfTtcbmV4cG9ydHMudXNlVHJhbnNpdGlvbj1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlVHJhbnNpdGlvbigpfTtleHBvcnRzLnZlcnNpb249XCIxOC4yLjBcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO2Z1bmN0aW9uIGYoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzA8Yzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKDA8ZyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gaChhKXtyZXR1cm4gMD09PWEubGVuZ3RoP251bGw6YVswXX1mdW5jdGlvbiBrKGEpe2lmKDA9PT1hLmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgYj1hWzBdLGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aCx3PWU+Pj4xO2Q8dzspe3ZhciBtPTIqKGQrMSktMSxDPWFbbV0sbj1tKzEseD1hW25dO2lmKDA+ZyhDLGMpKW48ZSYmMD5nKHgsQyk/KGFbZF09eCxhW25dPWMsZD1uKTooYVtkXT1DLGFbbV09YyxkPW0pO2Vsc2UgaWYobjxlJiYwPmcoeCxjKSlhW2RdPXgsYVtuXT1jLGQ9bjtlbHNlIGJyZWFrIGF9fXJldHVybiBifVxuZnVuY3Rpb24gZyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH1pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19dmFyIHI9W10sdD1bXSx1PTEsdj1udWxsLHk9Myx6PSExLEE9ITEsQj0hMSxEPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bnVsbCxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0Om51bGwsRj1cInVuZGVmaW5lZFwiIT09dHlwZW9mIHNldEltbWVkaWF0ZT9zZXRJbW1lZGlhdGU6bnVsbDtcblwidW5kZWZpbmVkXCIhPT10eXBlb2YgbmF2aWdhdG9yJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZyYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcmJm5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nLmJpbmQobmF2aWdhdG9yLnNjaGVkdWxpbmcpO2Z1bmN0aW9uIEcoYSl7Zm9yKHZhciBiPWgodCk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylrKHQpO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpayh0KSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLGYocixiKTtlbHNlIGJyZWFrO2I9aCh0KX19ZnVuY3Rpb24gSChhKXtCPSExO0coYSk7aWYoIUEpaWYobnVsbCE9PWgocikpQT0hMCxJKEopO2Vsc2V7dmFyIGI9aCh0KTtudWxsIT09YiYmSyhILGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIEooYSxiKXtBPSExO0ImJihCPSExLEUoTCksTD0tMSk7ej0hMDt2YXIgYz15O3RyeXtHKGIpO2Zvcih2PWgocik7bnVsbCE9PXYmJighKHYuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFNKCkpOyl7dmFyIGQ9di5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7di5jYWxsYmFjaz1udWxsO3k9di5wcmlvcml0eUxldmVsO3ZhciBlPWQodi5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP3YuY2FsbGJhY2s9ZTp2PT09aChyKSYmayhyKTtHKGIpfWVsc2UgayhyKTt2PWgocil9aWYobnVsbCE9PXYpdmFyIHc9ITA7ZWxzZXt2YXIgbT1oKHQpO251bGwhPT1tJiZLKEgsbS5zdGFydFRpbWUtYik7dz0hMX1yZXR1cm4gd31maW5hbGx5e3Y9bnVsbCx5PWMsej0hMX19dmFyIE49ITEsTz1udWxsLEw9LTEsUD01LFE9LTE7XG5mdW5jdGlvbiBNKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCktUTxQPyExOiEwfWZ1bmN0aW9uIFIoKXtpZihudWxsIT09Tyl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtRPWE7dmFyIGI9ITA7dHJ5e2I9TyghMCxhKX1maW5hbGx5e2I/UygpOihOPSExLE89bnVsbCl9fWVsc2UgTj0hMX12YXIgUztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgRilTPWZ1bmN0aW9uKCl7RihSKX07ZWxzZSBpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgVD1uZXcgTWVzc2FnZUNoYW5uZWwsVT1ULnBvcnQyO1QucG9ydDEub25tZXNzYWdlPVI7Uz1mdW5jdGlvbigpe1UucG9zdE1lc3NhZ2UobnVsbCl9fWVsc2UgUz1mdW5jdGlvbigpe0QoUiwwKX07ZnVuY3Rpb24gSShhKXtPPWE7Tnx8KE49ITAsUygpKX1mdW5jdGlvbiBLKGEsYil7TD1EKGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9XG5leHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7QXx8enx8KEE9ITAsSShKKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6UD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiB5fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGgocil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goeSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9eX12YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e3k9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O1xuZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9eTt5PWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXt5PWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6dSsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsZih0LGEpLG51bGw9PT1oKHIpJiZhPT09aCh0KSYmKEI/KEUoTCksTD0tMSk6Qj0hMCxLKEgsYy1kKSkpOihhLnNvcnRJbmRleD1lLGYocixhKSxBfHx6fHwoQT0hMCxJKEopKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1NO2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPXk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e3k9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJ2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgPyAob2JqKSA9PiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpIDogKG9iaikgPT4gKG9iai5fX3Byb3RvX18pO1xudmFyIGxlYWZQcm90b3R5cGVzO1xuLy8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4vLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbi8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuLy8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4vLyBtb2RlICYgMTY6IHJldHVybiB2YWx1ZSB3aGVuIGl0J3MgUHJvbWlzZS1saWtlXG4vLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuXHRpZihtb2RlICYgMSkgdmFsdWUgPSB0aGlzKHZhbHVlKTtcblx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcblx0aWYodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSkge1xuXHRcdGlmKChtb2RlICYgNCkgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuXHRcdGlmKChtb2RlICYgMTYpICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdmFsdWU7XG5cdH1cblx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcblx0dmFyIGRlZiA9IHt9O1xuXHRsZWFmUHJvdG90eXBlcyA9IGxlYWZQcm90b3R5cGVzIHx8IFtudWxsLCBnZXRQcm90byh7fSksIGdldFByb3RvKFtdKSwgZ2V0UHJvdG8oZ2V0UHJvdG8pXTtcblx0Zm9yKHZhciBjdXJyZW50ID0gbW9kZSAmIDIgJiYgdmFsdWU7IHR5cGVvZiBjdXJyZW50ID09ICdvYmplY3QnICYmICF+bGVhZlByb3RvdHlwZXMuaW5kZXhPZihjdXJyZW50KTsgY3VycmVudCA9IGdldFByb3RvKGN1cnJlbnQpKSB7XG5cdFx0T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY3VycmVudCkuZm9yRWFjaCgoa2V5KSA9PiAoZGVmW2tleV0gPSAoKSA9PiAodmFsdWVba2V5XSkpKTtcblx0fVxuXHRkZWZbJ2RlZmF1bHQnXSA9ICgpID0+ICh2YWx1ZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChucywgZGVmKTtcblx0cmV0dXJuIG5zO1xufTsiLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIi8qKlxuICogQHJlbWl4LXJ1bi9yb3V0ZXIgdjEuOC4wXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIFR5cGVzIGFuZCBDb25zdGFudHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAqIEFjdGlvbnMgcmVwcmVzZW50IHRoZSB0eXBlIG9mIGNoYW5nZSB0byBhIGxvY2F0aW9uIHZhbHVlLlxuICovXG52YXIgQWN0aW9uO1xuKGZ1bmN0aW9uIChBY3Rpb24pIHtcbiAgLyoqXG4gICAqIEEgUE9QIGluZGljYXRlcyBhIGNoYW5nZSB0byBhbiBhcmJpdHJhcnkgaW5kZXggaW4gdGhlIGhpc3Rvcnkgc3RhY2ssIHN1Y2hcbiAgICogYXMgYSBiYWNrIG9yIGZvcndhcmQgbmF2aWdhdGlvbi4gSXQgZG9lcyBub3QgZGVzY3JpYmUgdGhlIGRpcmVjdGlvbiBvZiB0aGVcbiAgICogbmF2aWdhdGlvbiwgb25seSB0aGF0IHRoZSBjdXJyZW50IGluZGV4IGNoYW5nZWQuXG4gICAqXG4gICAqIE5vdGU6IFRoaXMgaXMgdGhlIGRlZmF1bHQgYWN0aW9uIGZvciBuZXdseSBjcmVhdGVkIGhpc3Rvcnkgb2JqZWN0cy5cbiAgICovXG4gIEFjdGlvbltcIlBvcFwiXSA9IFwiUE9QXCI7XG4gIC8qKlxuICAgKiBBIFBVU0ggaW5kaWNhdGVzIGEgbmV3IGVudHJ5IGJlaW5nIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoIGFzIHdoZW5cbiAgICogYSBsaW5rIGlzIGNsaWNrZWQgYW5kIGEgbmV3IHBhZ2UgbG9hZHMuIFdoZW4gdGhpcyBoYXBwZW5zLCBhbGwgc3Vic2VxdWVudFxuICAgKiBlbnRyaWVzIGluIHRoZSBzdGFjayBhcmUgbG9zdC5cbiAgICovXG4gIEFjdGlvbltcIlB1c2hcIl0gPSBcIlBVU0hcIjtcbiAgLyoqXG4gICAqIEEgUkVQTEFDRSBpbmRpY2F0ZXMgdGhlIGVudHJ5IGF0IHRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrXG4gICAqIGJlaW5nIHJlcGxhY2VkIGJ5IGEgbmV3IG9uZS5cbiAgICovXG4gIEFjdGlvbltcIlJlcGxhY2VcIl0gPSBcIlJFUExBQ0VcIjtcbn0pKEFjdGlvbiB8fCAoQWN0aW9uID0ge30pKTtcbmNvbnN0IFBvcFN0YXRlRXZlbnRUeXBlID0gXCJwb3BzdGF0ZVwiO1xuLyoqXG4gKiBNZW1vcnkgaGlzdG9yeSBzdG9yZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24gaW4gbWVtb3J5LiBJdCBpcyBkZXNpZ25lZCBmb3IgdXNlXG4gKiBpbiBzdGF0ZWZ1bCBub24tYnJvd3NlciBlbnZpcm9ubWVudHMgbGlrZSB0ZXN0cyBhbmQgUmVhY3QgTmF0aXZlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBsZXQge1xuICAgIGluaXRpYWxFbnRyaWVzID0gW1wiL1wiXSxcbiAgICBpbml0aWFsSW5kZXgsXG4gICAgdjVDb21wYXQgPSBmYWxzZVxuICB9ID0gb3B0aW9ucztcbiAgbGV0IGVudHJpZXM7IC8vIERlY2xhcmUgc28gd2UgY2FuIGFjY2VzcyBmcm9tIGNyZWF0ZU1lbW9yeUxvY2F0aW9uXG4gIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoKGVudHJ5LCBpbmRleCkgPT4gY3JlYXRlTWVtb3J5TG9jYXRpb24oZW50cnksIHR5cGVvZiBlbnRyeSA9PT0gXCJzdHJpbmdcIiA/IG51bGwgOiBlbnRyeS5zdGF0ZSwgaW5kZXggPT09IDAgPyBcImRlZmF1bHRcIiA6IHVuZGVmaW5lZCkpO1xuICBsZXQgaW5kZXggPSBjbGFtcEluZGV4KGluaXRpYWxJbmRleCA9PSBudWxsID8gZW50cmllcy5sZW5ndGggLSAxIDogaW5pdGlhbEluZGV4KTtcbiAgbGV0IGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIGxldCBsaXN0ZW5lciA9IG51bGw7XG4gIGZ1bmN0aW9uIGNsYW1wSW5kZXgobikge1xuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCAwKSwgZW50cmllcy5sZW5ndGggLSAxKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24oKSB7XG4gICAgcmV0dXJuIGVudHJpZXNbaW5kZXhdO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUxvY2F0aW9uKHRvLCBzdGF0ZSwga2V5KSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0gbnVsbDtcbiAgICB9XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oZW50cmllcyA/IGdldEN1cnJlbnRMb2NhdGlvbigpLnBhdGhuYW1lIDogXCIvXCIsIHRvLCBzdGF0ZSwga2V5KTtcbiAgICB3YXJuaW5nKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gXCIvXCIsIFwicmVsYXRpdmUgcGF0aG5hbWVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIG1lbW9yeSBoaXN0b3J5OiBcIiArIEpTT04uc3RyaW5naWZ5KHRvKSk7XG4gICAgcmV0dXJuIGxvY2F0aW9uO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYodG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgfVxuICBsZXQgaGlzdG9yeSA9IHtcbiAgICBnZXQgaW5kZXgoKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfSxcbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBnZXRDdXJyZW50TG9jYXRpb24oKTtcbiAgICB9LFxuICAgIGNyZWF0ZUhyZWYsXG4gICAgY3JlYXRlVVJMKHRvKSB7XG4gICAgICByZXR1cm4gbmV3IFVSTChjcmVhdGVIcmVmKHRvKSwgXCJodHRwOi8vbG9jYWxob3N0XCIpO1xuICAgIH0sXG4gICAgZW5jb2RlTG9jYXRpb24odG8pIHtcbiAgICAgIGxldCBwYXRoID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aG5hbWU6IHBhdGgucGF0aG5hbWUgfHwgXCJcIixcbiAgICAgICAgc2VhcmNoOiBwYXRoLnNlYXJjaCB8fCBcIlwiLFxuICAgICAgICBoYXNoOiBwYXRoLmhhc2ggfHwgXCJcIlxuICAgICAgfTtcbiAgICB9LFxuICAgIHB1c2godG8sIHN0YXRlKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUpO1xuICAgICAgaW5kZXggKz0gMTtcbiAgICAgIGVudHJpZXMuc3BsaWNlKGluZGV4LCBlbnRyaWVzLmxlbmd0aCwgbmV4dExvY2F0aW9uKTtcbiAgICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sXG4gICAgICAgICAgZGVsdGE6IDFcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXBsYWNlKHRvLCBzdGF0ZSkge1xuICAgICAgYWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTWVtb3J5TG9jYXRpb24odG8sIHN0YXRlKTtcbiAgICAgIGVudHJpZXNbaW5kZXhdID0gbmV4dExvY2F0aW9uO1xuICAgICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICBkZWx0YTogMFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdvKGRlbHRhKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgICAgbGV0IG5leHRJbmRleCA9IGNsYW1wSW5kZXgoaW5kZXggKyBkZWx0YSk7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gZW50cmllc1tuZXh0SW5kZXhdO1xuICAgICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIoe1xuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgIGRlbHRhXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgbGlzdGVuKGZuKSB7XG4gICAgICBsaXN0ZW5lciA9IGZuO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgbGlzdGVuZXIgPSBudWxsO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuLyoqXG4gKiBCcm93c2VyIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiByZWd1bGFyIFVSTHMuIFRoaXMgaXMgdGhlIHN0YW5kYXJkIGZvclxuICogbW9zdCB3ZWIgYXBwcywgYnV0IGl0IHJlcXVpcmVzIHNvbWUgY29uZmlndXJhdGlvbiBvbiB0aGUgc2VydmVyIHRvIGVuc3VyZSB5b3VcbiAqIHNlcnZlIHRoZSBzYW1lIGFwcCBhdCBtdWx0aXBsZSBVUkxzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlYnJvd3Nlcmhpc3RvcnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3Rvcnkob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpIHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24oXCJcIiwge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSxcbiAgICAvLyBzdGF0ZSBkZWZhdWx0cyB0byBgbnVsbGAgYmVjYXVzZSBgd2luZG93Lmhpc3Rvcnkuc3RhdGVgIGRvZXNcbiAgICBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUudXNyIHx8IG51bGwsIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS5rZXkgfHwgXCJkZWZhdWx0XCIpO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIcmVmKHdpbmRvdywgdG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgfVxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KGNyZWF0ZUJyb3dzZXJMb2NhdGlvbiwgY3JlYXRlQnJvd3NlckhyZWYsIG51bGwsIG9wdGlvbnMpO1xufVxuLyoqXG4gKiBIYXNoIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB3aW5kb3cubG9jYXRpb24uaGFzaC4gVGhpcyBtYWtlcyBpdCBpZGVhbFxuICogZm9yIHNpdHVhdGlvbnMgd2hlcmUgeW91IGRvbid0IHdhbnQgdG8gc2VuZCB0aGUgbG9jYXRpb24gdG8gdGhlIHNlcnZlciBmb3JcbiAqIHNvbWUgcmVhc29uLCBlaXRoZXIgYmVjYXVzZSB5b3UgZG8gY2Fubm90IGNvbmZpZ3VyZSBpdCBvciB0aGUgVVJMIHNwYWNlIGlzXG4gKiByZXNlcnZlZCBmb3Igc29tZXRoaW5nIGVsc2UuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNjcmVhdGVoYXNoaGlzdG9yeVxuICovXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlSGFzaExvY2F0aW9uKHdpbmRvdywgZ2xvYmFsSGlzdG9yeSkge1xuICAgIGxldCB7XG4gICAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgICAgc2VhcmNoID0gXCJcIixcbiAgICAgIGhhc2ggPSBcIlwiXG4gICAgfSA9IHBhcnNlUGF0aCh3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSkpO1xuICAgIC8vIEhhc2ggVVJMIHNob3VsZCBhbHdheXMgaGF2ZSBhIGxlYWRpbmcgLyBqdXN0IGxpa2Ugd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lXG4gICAgLy8gZG9lcywgc28gaWYgYW4gYXBwIGVuZHMgdXAgYXQgYSByb3V0ZSBsaWtlIC8jc29tZXRoaW5nIHRoZW4gd2UgYWRkIGFcbiAgICAvLyBsZWFkaW5nIHNsYXNoIHNvIGFsbCBvZiBvdXIgcGF0aC1tYXRjaGluZyBiZWhhdmVzIHRoZSBzYW1lIGFzIGlmIGl0IHdvdWxkXG4gICAgLy8gaW4gYSBicm93c2VyIHJvdXRlci4gIFRoaXMgaXMgcGFydGljdWxhcmx5IGltcG9ydGFudCB3aGVuIHRoZXJlIGV4aXN0cyBhXG4gICAgLy8gcm9vdCBzcGxhdCByb3V0ZSAoPFJvdXRlIHBhdGg9XCIqXCI+KSBzaW5jZSB0aGF0IG1hdGNoZXMgaW50ZXJuYWxseSBhZ2FpbnN0XG4gICAgLy8gXCIvKlwiIGFuZCB3ZSdkIGV4cGVjdCAvI3NvbWV0aGluZyB0byA0MDQgaW4gYSBoYXNoIHJvdXRlciBhcHAuXG4gICAgaWYgKCFwYXRobmFtZS5zdGFydHNXaXRoKFwiL1wiKSAmJiAhcGF0aG5hbWUuc3RhcnRzV2l0aChcIi5cIikpIHtcbiAgICAgIHBhdGhuYW1lID0gXCIvXCIgKyBwYXRobmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKFwiXCIsIHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaFxuICAgIH0sXG4gICAgLy8gc3RhdGUgZGVmYXVsdHMgdG8gYG51bGxgIGJlY2F1c2UgYHdpbmRvdy5oaXN0b3J5LnN0YXRlYCBkb2VzXG4gICAgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLnVzciB8fCBudWxsLCBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUua2V5IHx8IFwiZGVmYXVsdFwiKTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVIYXNoSHJlZih3aW5kb3csIHRvKSB7XG4gICAgbGV0IGJhc2UgPSB3aW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJhc2VcIik7XG4gICAgbGV0IGhyZWYgPSBcIlwiO1xuICAgIGlmIChiYXNlICYmIGJhc2UuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSkge1xuICAgICAgbGV0IHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgbGV0IGhhc2hJbmRleCA9IHVybC5pbmRleE9mKFwiI1wiKTtcbiAgICAgIGhyZWYgPSBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuICAgIHJldHVybiBocmVmICsgXCIjXCIgKyAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKSk7XG4gIH1cbiAgZnVuY3Rpb24gdmFsaWRhdGVIYXNoTG9jYXRpb24obG9jYXRpb24sIHRvKSB7XG4gICAgd2FybmluZyhsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09IFwiL1wiLCBcInJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBoYXNoIGhpc3RvcnkucHVzaChcIiArIEpTT04uc3RyaW5naWZ5KHRvKSArIFwiKVwiKTtcbiAgfVxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KGNyZWF0ZUhhc2hMb2NhdGlvbiwgY3JlYXRlSGFzaEhyZWYsIHZhbGlkYXRlSGFzaExvY2F0aW9uLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIGludmFyaWFudCh2YWx1ZSwgbWVzc2FnZSkge1xuICBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfVxufVxuZnVuY3Rpb24gd2FybmluZyhjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFdlbGNvbWUgdG8gZGVidWdnaW5nIGhpc3RvcnkhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA4KTtcbn1cbi8qKlxuICogRm9yIGJyb3dzZXItYmFzZWQgaGlzdG9yaWVzLCB3ZSBjb21iaW5lIHRoZSBzdGF0ZSBhbmQga2V5IGludG8gYW4gb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbiwgaW5kZXgpIHtcbiAgcmV0dXJuIHtcbiAgICB1c3I6IGxvY2F0aW9uLnN0YXRlLFxuICAgIGtleTogbG9jYXRpb24ua2V5LFxuICAgIGlkeDogaW5kZXhcbiAgfTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIExvY2F0aW9uIG9iamVjdCB3aXRoIGEgdW5pcXVlIGtleSBmcm9tIHRoZSBnaXZlbiBQYXRoXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKGN1cnJlbnQsIHRvLCBzdGF0ZSwga2V5KSB7XG4gIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgc3RhdGUgPSBudWxsO1xuICB9XG4gIGxldCBsb2NhdGlvbiA9IF9leHRlbmRzKHtcbiAgICBwYXRobmFtZTogdHlwZW9mIGN1cnJlbnQgPT09IFwic3RyaW5nXCIgPyBjdXJyZW50IDogY3VycmVudC5wYXRobmFtZSxcbiAgICBzZWFyY2g6IFwiXCIsXG4gICAgaGFzaDogXCJcIlxuICB9LCB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG8sIHtcbiAgICBzdGF0ZSxcbiAgICAvLyBUT0RPOiBUaGlzIGNvdWxkIGJlIGNsZWFuZWQgdXAuICBwdXNoL3JlcGxhY2Ugc2hvdWxkIHByb2JhYmx5IGp1c3QgdGFrZVxuICAgIC8vIGZ1bGwgTG9jYXRpb25zIG5vdyBhbmQgYXZvaWQgdGhlIG5lZWQgdG8gcnVuIHRocm91Z2ggdGhpcyBmbG93IGF0IGFsbFxuICAgIC8vIEJ1dCB0aGF0J3MgYSBwcmV0dHkgYmlnIHJlZmFjdG9yIHRvIHRoZSBjdXJyZW50IHRlc3Qgc3VpdGUgc28gZ29pbmcgdG9cbiAgICAvLyBrZWVwIGFzIGlzIGZvciB0aGUgdGltZSBiZWluZyBhbmQganVzdCBsZXQgYW55IGluY29taW5nIGtleXMgdGFrZSBwcmVjZWRlbmNlXG4gICAga2V5OiB0byAmJiB0by5rZXkgfHwga2V5IHx8IGNyZWF0ZUtleSgpXG4gIH0pO1xuICByZXR1cm4gbG9jYXRpb247XG59XG4vKipcbiAqIENyZWF0ZXMgYSBzdHJpbmcgVVJMIHBhdGggZnJvbSB0aGUgZ2l2ZW4gcGF0aG5hbWUsIHNlYXJjaCwgYW5kIGhhc2ggY29tcG9uZW50cy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUGF0aChfcmVmKSB7XG4gIGxldCB7XG4gICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiXG4gIH0gPSBfcmVmO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gXCI/XCIpIHBhdGhuYW1lICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09IFwiP1wiID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09IFwiI1wiKSBwYXRobmFtZSArPSBoYXNoLmNoYXJBdCgwKSA9PT0gXCIjXCIgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuICByZXR1cm4gcGF0aG5hbWU7XG59XG4vKipcbiAqIFBhcnNlcyBhIHN0cmluZyBVUkwgcGF0aCBpbnRvIGl0cyBzZXBhcmF0ZSBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCBjb21wb25lbnRzLlxuICovXG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICBsZXQgcGFyc2VkUGF0aCA9IHt9O1xuICBpZiAocGF0aCkge1xuICAgIGxldCBoYXNoSW5kZXggPSBwYXRoLmluZGV4T2YoXCIjXCIpO1xuICAgIGlmIChoYXNoSW5kZXggPj0gMCkge1xuICAgICAgcGFyc2VkUGF0aC5oYXNoID0gcGF0aC5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICAgIHBhdGggPSBwYXRoLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICAgIH1cbiAgICBsZXQgc2VhcmNoSW5kZXggPSBwYXRoLmluZGV4T2YoXCI/XCIpO1xuICAgIGlmIChzZWFyY2hJbmRleCA+PSAwKSB7XG4gICAgICBwYXJzZWRQYXRoLnNlYXJjaCA9IHBhdGguc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICAgIHBhdGggPSBwYXRoLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gICAgfVxuICAgIGlmIChwYXRoKSB7XG4gICAgICBwYXJzZWRQYXRoLnBhdGhuYW1lID0gcGF0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhcnNlZFBhdGg7XG59XG5mdW5jdGlvbiBnZXRVcmxCYXNlZEhpc3RvcnkoZ2V0TG9jYXRpb24sIGNyZWF0ZUhyZWYsIHZhbGlkYXRlTG9jYXRpb24sIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBsZXQge1xuICAgIHdpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3LFxuICAgIHY1Q29tcGF0ID0gZmFsc2VcbiAgfSA9IG9wdGlvbnM7XG4gIGxldCBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIGxldCBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICBsZXQgbGlzdGVuZXIgPSBudWxsO1xuICBsZXQgaW5kZXggPSBnZXRJbmRleCgpO1xuICAvLyBJbmRleCBzaG91bGQgb25seSBiZSBudWxsIHdoZW4gd2UgaW5pdGlhbGl6ZS4gSWYgbm90LCBpdCdzIGJlY2F1c2UgdGhlXG4gIC8vIHVzZXIgY2FsbGVkIGhpc3RvcnkucHVzaFN0YXRlIG9yIGhpc3RvcnkucmVwbGFjZVN0YXRlIGRpcmVjdGx5LCBpbiB3aGljaFxuICAvLyBjYXNlIHdlIHNob3VsZCBsb2cgYSB3YXJuaW5nIGFzIGl0IHdpbGwgcmVzdWx0IGluIGJ1Z3MuXG4gIGlmIChpbmRleCA9PSBudWxsKSB7XG4gICAgaW5kZXggPSAwO1xuICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKF9leHRlbmRzKHt9LCBnbG9iYWxIaXN0b3J5LnN0YXRlLCB7XG4gICAgICBpZHg6IGluZGV4XG4gICAgfSksIFwiXCIpO1xuICB9XG4gIGZ1bmN0aW9uIGdldEluZGV4KCkge1xuICAgIGxldCBzdGF0ZSA9IGdsb2JhbEhpc3Rvcnkuc3RhdGUgfHwge1xuICAgICAgaWR4OiBudWxsXG4gICAgfTtcbiAgICByZXR1cm4gc3RhdGUuaWR4O1xuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZVBvcCgpIHtcbiAgICBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgIGxldCBuZXh0SW5kZXggPSBnZXRJbmRleCgpO1xuICAgIGxldCBkZWx0YSA9IG5leHRJbmRleCA9PSBudWxsID8gbnVsbCA6IG5leHRJbmRleCAtIGluZGV4O1xuICAgIGluZGV4ID0gbmV4dEluZGV4O1xuICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoe1xuICAgICAgICBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICBkZWx0YVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHB1c2godG8sIHN0YXRlKSB7XG4gICAgYWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oaGlzdG9yeS5sb2NhdGlvbiwgdG8sIHN0YXRlKTtcbiAgICBpZiAodmFsaWRhdGVMb2NhdGlvbikgdmFsaWRhdGVMb2NhdGlvbihsb2NhdGlvbiwgdG8pO1xuICAgIGluZGV4ID0gZ2V0SW5kZXgoKSArIDE7XG4gICAgbGV0IGhpc3RvcnlTdGF0ZSA9IGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbiwgaW5kZXgpO1xuICAgIGxldCB1cmwgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgIC8vIHRyeS4uLmNhdGNoIGJlY2F1c2UgaU9TIGxpbWl0cyB1cyB0byAxMDAgcHVzaFN0YXRlIGNhbGxzIDovXG4gICAgdHJ5IHtcbiAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKGhpc3RvcnlTdGF0ZSwgXCJcIiwgdXJsKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gSWYgdGhlIGV4Y2VwdGlvbiBpcyBiZWNhdXNlIGBzdGF0ZWAgY2FuJ3QgYmUgc2VyaWFsaXplZCwgbGV0IHRoYXQgdGhyb3dcbiAgICAgIC8vIG91dHdhcmRzIGp1c3QgbGlrZSBhIHJlcGxhY2UgY2FsbCB3b3VsZCBzbyB0aGUgZGV2IGtub3dzIHRoZSBjYXVzZVxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvbmF2LWhpc3RvcnktYXBpcy5odG1sI3NoYXJlZC1oaXN0b3J5LXB1c2gvcmVwbGFjZS1zdGF0ZS1zdGVwc1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3RydWN0dXJlZC1kYXRhLmh0bWwjc3RydWN0dXJlZHNlcmlhbGl6ZWludGVybmFsXG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBET01FeGNlcHRpb24gJiYgZXJyb3IubmFtZSA9PT0gXCJEYXRhQ2xvbmVFcnJvclwiKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgICAgLy8gVGhleSBhcmUgZ29pbmcgdG8gbG9zZSBzdGF0ZSBoZXJlLCBidXQgdGhlcmUgaXMgbm8gcmVhbFxuICAgICAgLy8gd2F5IHRvIHdhcm4gdGhlbSBhYm91dCBpdCBzaW5jZSB0aGUgcGFnZSB3aWxsIHJlZnJlc2guLi5cbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24odXJsKTtcbiAgICB9XG4gICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcih7XG4gICAgICAgIGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgIGRlbHRhOiAxXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcmVwbGFjZSh0bywgc3RhdGUpIHtcbiAgICBhY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihoaXN0b3J5LmxvY2F0aW9uLCB0bywgc3RhdGUpO1xuICAgIGlmICh2YWxpZGF0ZUxvY2F0aW9uKSB2YWxpZGF0ZUxvY2F0aW9uKGxvY2F0aW9uLCB0byk7XG4gICAgaW5kZXggPSBnZXRJbmRleCgpO1xuICAgIGxldCBoaXN0b3J5U3RhdGUgPSBnZXRIaXN0b3J5U3RhdGUobG9jYXRpb24sIGluZGV4KTtcbiAgICBsZXQgdXJsID0gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShoaXN0b3J5U3RhdGUsIFwiXCIsIHVybCk7XG4gICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcih7XG4gICAgICAgIGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgIGRlbHRhOiAwXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlVVJMKHRvKSB7XG4gICAgLy8gd2luZG93LmxvY2F0aW9uLm9yaWdpbiBpcyBcIm51bGxcIiAodGhlIGxpdGVyYWwgc3RyaW5nIHZhbHVlKSBpbiBGaXJlZm94XG4gICAgLy8gdW5kZXIgY2VydGFpbiBjb25kaXRpb25zLCBub3RhYmx5IHdoZW4gc2VydmluZyBmcm9tIGEgbG9jYWwgSFRNTCBmaWxlXG4gICAgLy8gU2VlIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTg3ODI5N1xuICAgIGxldCBiYXNlID0gd2luZG93LmxvY2F0aW9uLm9yaWdpbiAhPT0gXCJudWxsXCIgPyB3aW5kb3cubG9jYXRpb24ub3JpZ2luIDogd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgbGV0IGhyZWYgPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICAgIGludmFyaWFudChiYXNlLCBcIk5vIHdpbmRvdy5sb2NhdGlvbi4ob3JpZ2lufGhyZWYpIGF2YWlsYWJsZSB0byBjcmVhdGUgVVJMIGZvciBocmVmOiBcIiArIGhyZWYpO1xuICAgIHJldHVybiBuZXcgVVJMKGhyZWYsIGJhc2UpO1xuICB9XG4gIGxldCBoaXN0b3J5ID0ge1xuICAgIGdldCBhY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG4gICAgZ2V0IGxvY2F0aW9uKCkge1xuICAgICAgcmV0dXJuIGdldExvY2F0aW9uKHdpbmRvdywgZ2xvYmFsSGlzdG9yeSk7XG4gICAgfSxcbiAgICBsaXN0ZW4oZm4pIHtcbiAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGhpc3Rvcnkgb25seSBhY2NlcHRzIG9uZSBhY3RpdmUgbGlzdGVuZXJcIik7XG4gICAgICB9XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTtcbiAgICAgIGxpc3RlbmVyID0gZm47XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTtcbiAgICAgICAgbGlzdGVuZXIgPSBudWxsO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZUhyZWYodG8pIHtcbiAgICAgIHJldHVybiBjcmVhdGVIcmVmKHdpbmRvdywgdG8pO1xuICAgIH0sXG4gICAgY3JlYXRlVVJMLFxuICAgIGVuY29kZUxvY2F0aW9uKHRvKSB7XG4gICAgICAvLyBFbmNvZGUgYSBMb2NhdGlvbiB0aGUgc2FtZSB3YXkgd2luZG93LmxvY2F0aW9uIHdvdWxkXG4gICAgICBsZXQgdXJsID0gY3JlYXRlVVJMKHRvKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGhuYW1lOiB1cmwucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaDogdXJsLnNlYXJjaCxcbiAgICAgICAgaGFzaDogdXJsLmhhc2hcbiAgICAgIH07XG4gICAgfSxcbiAgICBwdXNoLFxuICAgIHJlcGxhY2UsXG4gICAgZ28obikge1xuICAgICAgcmV0dXJuIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gICAgfVxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cbi8vI2VuZHJlZ2lvblxuXG52YXIgUmVzdWx0VHlwZTtcbihmdW5jdGlvbiAoUmVzdWx0VHlwZSkge1xuICBSZXN1bHRUeXBlW1wiZGF0YVwiXSA9IFwiZGF0YVwiO1xuICBSZXN1bHRUeXBlW1wiZGVmZXJyZWRcIl0gPSBcImRlZmVycmVkXCI7XG4gIFJlc3VsdFR5cGVbXCJyZWRpcmVjdFwiXSA9IFwicmVkaXJlY3RcIjtcbiAgUmVzdWx0VHlwZVtcImVycm9yXCJdID0gXCJlcnJvclwiO1xufSkoUmVzdWx0VHlwZSB8fCAoUmVzdWx0VHlwZSA9IHt9KSk7XG5jb25zdCBpbW11dGFibGVSb3V0ZUtleXMgPSBuZXcgU2V0KFtcImxhenlcIiwgXCJjYXNlU2Vuc2l0aXZlXCIsIFwicGF0aFwiLCBcImlkXCIsIFwiaW5kZXhcIiwgXCJjaGlsZHJlblwiXSk7XG5mdW5jdGlvbiBpc0luZGV4Um91dGUocm91dGUpIHtcbiAgcmV0dXJuIHJvdXRlLmluZGV4ID09PSB0cnVlO1xufVxuLy8gV2FsayB0aGUgcm91dGUgdHJlZSBnZW5lcmF0aW5nIHVuaXF1ZSBJRHMgd2hlcmUgbmVjZXNzYXJ5IHNvIHdlIGFyZSB3b3JraW5nXG4vLyBzb2xlbHkgd2l0aCBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdCdzIHdpdGhpbiB0aGUgUm91dGVyXG5mdW5jdGlvbiBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKHJvdXRlcywgbWFwUm91dGVQcm9wZXJ0aWVzLCBwYXJlbnRQYXRoLCBtYW5pZmVzdCkge1xuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFtdO1xuICB9XG4gIGlmIChtYW5pZmVzdCA9PT0gdm9pZCAwKSB7XG4gICAgbWFuaWZlc3QgPSB7fTtcbiAgfVxuICByZXR1cm4gcm91dGVzLm1hcCgocm91dGUsIGluZGV4KSA9PiB7XG4gICAgbGV0IHRyZWVQYXRoID0gWy4uLnBhcmVudFBhdGgsIGluZGV4XTtcbiAgICBsZXQgaWQgPSB0eXBlb2Ygcm91dGUuaWQgPT09IFwic3RyaW5nXCIgPyByb3V0ZS5pZCA6IHRyZWVQYXRoLmpvaW4oXCItXCIpO1xuICAgIGludmFyaWFudChyb3V0ZS5pbmRleCAhPT0gdHJ1ZSB8fCAhcm91dGUuY2hpbGRyZW4sIFwiQ2Fubm90IHNwZWNpZnkgY2hpbGRyZW4gb24gYW4gaW5kZXggcm91dGVcIik7XG4gICAgaW52YXJpYW50KCFtYW5pZmVzdFtpZF0sIFwiRm91bmQgYSByb3V0ZSBpZCBjb2xsaXNpb24gb24gaWQgXFxcIlwiICsgaWQgKyBcIlxcXCIuICBSb3V0ZSBcIiArIFwiaWQncyBtdXN0IGJlIGdsb2JhbGx5IHVuaXF1ZSB3aXRoaW4gRGF0YSBSb3V0ZXIgdXNhZ2VzXCIpO1xuICAgIGlmIChpc0luZGV4Um91dGUocm91dGUpKSB7XG4gICAgICBsZXQgaW5kZXhSb3V0ZSA9IF9leHRlbmRzKHt9LCByb3V0ZSwgbWFwUm91dGVQcm9wZXJ0aWVzKHJvdXRlKSwge1xuICAgICAgICBpZFxuICAgICAgfSk7XG4gICAgICBtYW5pZmVzdFtpZF0gPSBpbmRleFJvdXRlO1xuICAgICAgcmV0dXJuIGluZGV4Um91dGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYXRoT3JMYXlvdXRSb3V0ZSA9IF9leHRlbmRzKHt9LCByb3V0ZSwgbWFwUm91dGVQcm9wZXJ0aWVzKHJvdXRlKSwge1xuICAgICAgICBpZCxcbiAgICAgICAgY2hpbGRyZW46IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICBtYW5pZmVzdFtpZF0gPSBwYXRoT3JMYXlvdXRSb3V0ZTtcbiAgICAgIGlmIChyb3V0ZS5jaGlsZHJlbikge1xuICAgICAgICBwYXRoT3JMYXlvdXRSb3V0ZS5jaGlsZHJlbiA9IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMocm91dGUuY2hpbGRyZW4sIG1hcFJvdXRlUHJvcGVydGllcywgdHJlZVBhdGgsIG1hbmlmZXN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXRoT3JMYXlvdXRSb3V0ZTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBNYXRjaGVzIHRoZSBnaXZlbiByb3V0ZXMgdG8gYSBsb2NhdGlvbiBhbmQgcmV0dXJucyB0aGUgbWF0Y2ggZGF0YS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL21hdGNoLXJvdXRlc1xuICovXG5mdW5jdGlvbiBtYXRjaFJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uQXJnLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IHZvaWQgMCkge1xuICAgIGJhc2VuYW1lID0gXCIvXCI7XG4gIH1cbiAgbGV0IGxvY2F0aW9uID0gdHlwZW9mIGxvY2F0aW9uQXJnID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKGxvY2F0aW9uQXJnKSA6IGxvY2F0aW9uQXJnO1xuICBsZXQgcGF0aG5hbWUgPSBzdHJpcEJhc2VuYW1lKGxvY2F0aW9uLnBhdGhuYW1lIHx8IFwiL1wiLCBiYXNlbmFtZSk7XG4gIGlmIChwYXRobmFtZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgbGV0IGJyYW5jaGVzID0gZmxhdHRlblJvdXRlcyhyb3V0ZXMpO1xuICByYW5rUm91dGVCcmFuY2hlcyhicmFuY2hlcyk7XG4gIGxldCBtYXRjaGVzID0gbnVsbDtcbiAgZm9yIChsZXQgaSA9IDA7IG1hdGNoZXMgPT0gbnVsbCAmJiBpIDwgYnJhbmNoZXMubGVuZ3RoOyArK2kpIHtcbiAgICBtYXRjaGVzID0gbWF0Y2hSb3V0ZUJyYW5jaChicmFuY2hlc1tpXSxcbiAgICAvLyBJbmNvbWluZyBwYXRobmFtZXMgYXJlIGdlbmVyYWxseSBlbmNvZGVkIGZyb20gZWl0aGVyIHdpbmRvdy5sb2NhdGlvblxuICAgIC8vIG9yIGZyb20gcm91dGVyLm5hdmlnYXRlLCBidXQgd2Ugd2FudCB0byBtYXRjaCBhZ2FpbnN0IHRoZSB1bmVuY29kZWRcbiAgICAvLyBwYXRocyBpbiB0aGUgcm91dGUgZGVmaW5pdGlvbnMuICBNZW1vcnkgcm91dGVyIGxvY2F0aW9ucyB3b24ndCBiZVxuICAgIC8vIGVuY29kZWQgaGVyZSBidXQgdGhlcmUgYWxzbyBzaG91bGRuJ3QgYmUgYW55dGhpbmcgdG8gZGVjb2RlIHNvIHRoaXNcbiAgICAvLyBzaG91bGQgYmUgYSBzYWZlIG9wZXJhdGlvbi4gIFRoaXMgYXZvaWRzIG5lZWRpbmcgbWF0Y2hSb3V0ZXMgdG8gYmVcbiAgICAvLyBoaXN0b3J5LWF3YXJlLlxuICAgIHNhZmVseURlY29kZVVSSShwYXRobmFtZSkpO1xuICB9XG4gIHJldHVybiBtYXRjaGVzO1xufVxuZnVuY3Rpb24gZmxhdHRlblJvdXRlcyhyb3V0ZXMsIGJyYW5jaGVzLCBwYXJlbnRzTWV0YSwgcGFyZW50UGF0aCkge1xuICBpZiAoYnJhbmNoZXMgPT09IHZvaWQgMCkge1xuICAgIGJyYW5jaGVzID0gW107XG4gIH1cbiAgaWYgKHBhcmVudHNNZXRhID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRzTWV0YSA9IFtdO1xuICB9XG4gIGlmIChwYXJlbnRQYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRQYXRoID0gXCJcIjtcbiAgfVxuICBsZXQgZmxhdHRlblJvdXRlID0gKHJvdXRlLCBpbmRleCwgcmVsYXRpdmVQYXRoKSA9PiB7XG4gICAgbGV0IG1ldGEgPSB7XG4gICAgICByZWxhdGl2ZVBhdGg6IHJlbGF0aXZlUGF0aCA9PT0gdW5kZWZpbmVkID8gcm91dGUucGF0aCB8fCBcIlwiIDogcmVsYXRpdmVQYXRoLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogcm91dGUuY2FzZVNlbnNpdGl2ZSA9PT0gdHJ1ZSxcbiAgICAgIGNoaWxkcmVuSW5kZXg6IGluZGV4LFxuICAgICAgcm91dGVcbiAgICB9O1xuICAgIGlmIChtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKFwiL1wiKSkge1xuICAgICAgaW52YXJpYW50KG1ldGEucmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgocGFyZW50UGF0aCksIFwiQWJzb2x1dGUgcm91dGUgcGF0aCBcXFwiXCIgKyBtZXRhLnJlbGF0aXZlUGF0aCArIFwiXFxcIiBuZXN0ZWQgdW5kZXIgcGF0aCBcIiArIChcIlxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCIgaXMgbm90IHZhbGlkLiBBbiBhYnNvbHV0ZSBjaGlsZCByb3V0ZSBwYXRoIFwiKSArIFwibXVzdCBzdGFydCB3aXRoIHRoZSBjb21iaW5lZCBwYXRoIG9mIGFsbCBpdHMgcGFyZW50IHJvdXRlcy5cIik7XG4gICAgICBtZXRhLnJlbGF0aXZlUGF0aCA9IG1ldGEucmVsYXRpdmVQYXRoLnNsaWNlKHBhcmVudFBhdGgubGVuZ3RoKTtcbiAgICB9XG4gICAgbGV0IHBhdGggPSBqb2luUGF0aHMoW3BhcmVudFBhdGgsIG1ldGEucmVsYXRpdmVQYXRoXSk7XG4gICAgbGV0IHJvdXRlc01ldGEgPSBwYXJlbnRzTWV0YS5jb25jYXQobWV0YSk7XG4gICAgLy8gQWRkIHRoZSBjaGlsZHJlbiBiZWZvcmUgYWRkaW5nIHRoaXMgcm91dGUgdG8gdGhlIGFycmF5IHNvIHdlIHRyYXZlcnNlIHRoZVxuICAgIC8vIHJvdXRlIHRyZWUgZGVwdGgtZmlyc3QgYW5kIGNoaWxkIHJvdXRlcyBhcHBlYXIgYmVmb3JlIHRoZWlyIHBhcmVudHMgaW5cbiAgICAvLyB0aGUgXCJmbGF0dGVuZWRcIiB2ZXJzaW9uLlxuICAgIGlmIChyb3V0ZS5jaGlsZHJlbiAmJiByb3V0ZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAvLyBPdXIgdHlwZXMga25vdyBiZXR0ZXIsIGJ1dCBydW50aW1lIEpTIG1heSBub3QhXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICByb3V0ZS5pbmRleCAhPT0gdHJ1ZSwgXCJJbmRleCByb3V0ZXMgbXVzdCBub3QgaGF2ZSBjaGlsZCByb3V0ZXMuIFBsZWFzZSByZW1vdmUgXCIgKyAoXCJhbGwgY2hpbGQgcm91dGVzIGZyb20gcm91dGUgcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiLlwiKSk7XG4gICAgICBmbGF0dGVuUm91dGVzKHJvdXRlLmNoaWxkcmVuLCBicmFuY2hlcywgcm91dGVzTWV0YSwgcGF0aCk7XG4gICAgfVxuICAgIC8vIFJvdXRlcyB3aXRob3V0IGEgcGF0aCBzaG91bGRuJ3QgZXZlciBtYXRjaCBieSB0aGVtc2VsdmVzIHVubGVzcyB0aGV5IGFyZVxuICAgIC8vIGluZGV4IHJvdXRlcywgc28gZG9uJ3QgYWRkIHRoZW0gdG8gdGhlIGxpc3Qgb2YgcG9zc2libGUgYnJhbmNoZXMuXG4gICAgaWYgKHJvdXRlLnBhdGggPT0gbnVsbCAmJiAhcm91dGUuaW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYnJhbmNoZXMucHVzaCh7XG4gICAgICBwYXRoLFxuICAgICAgc2NvcmU6IGNvbXB1dGVTY29yZShwYXRoLCByb3V0ZS5pbmRleCksXG4gICAgICByb3V0ZXNNZXRhXG4gICAgfSk7XG4gIH07XG4gIHJvdXRlcy5mb3JFYWNoKChyb3V0ZSwgaW5kZXgpID0+IHtcbiAgICB2YXIgX3JvdXRlJHBhdGg7XG4gICAgLy8gY29hcnNlLWdyYWluIGNoZWNrIGZvciBvcHRpb25hbCBwYXJhbXNcbiAgICBpZiAocm91dGUucGF0aCA9PT0gXCJcIiB8fCAhKChfcm91dGUkcGF0aCA9IHJvdXRlLnBhdGgpICE9IG51bGwgJiYgX3JvdXRlJHBhdGguaW5jbHVkZXMoXCI/XCIpKSkge1xuICAgICAgZmxhdHRlblJvdXRlKHJvdXRlLCBpbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGV4cGxvZGVkIG9mIGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHJvdXRlLnBhdGgpKSB7XG4gICAgICAgIGZsYXR0ZW5Sb3V0ZShyb3V0ZSwgaW5kZXgsIGV4cGxvZGVkKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYnJhbmNoZXM7XG59XG4vKipcbiAqIENvbXB1dGVzIGFsbCBjb21iaW5hdGlvbnMgb2Ygb3B0aW9uYWwgcGF0aCBzZWdtZW50cyBmb3IgYSBnaXZlbiBwYXRoLFxuICogZXhjbHVkaW5nIGNvbWJpbmF0aW9ucyB0aGF0IGFyZSBhbWJpZ3VvdXMgYW5kIG9mIGxvd2VyIHByaW9yaXR5LlxuICpcbiAqIEZvciBleGFtcGxlLCBgL29uZS86dHdvPy90aHJlZS86Zm91cj8vOmZpdmU/YCBleHBsb2RlcyB0bzpcbiAqIC0gYC9vbmUvdGhyZWVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWVgXG4gKiAtIGAvb25lL3RocmVlLzpmb3VyYFxuICogLSBgL29uZS90aHJlZS86Zml2ZWBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zm91cmBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zml2ZWBcbiAqIC0gYC9vbmUvdGhyZWUvOmZvdXIvOmZpdmVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWUvOmZvdXIvOmZpdmVgXG4gKi9cbmZ1bmN0aW9uIGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHBhdGgpIHtcbiAgbGV0IHNlZ21lbnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gIGlmIChzZWdtZW50cy5sZW5ndGggPT09IDApIHJldHVybiBbXTtcbiAgbGV0IFtmaXJzdCwgLi4ucmVzdF0gPSBzZWdtZW50cztcbiAgLy8gT3B0aW9uYWwgcGF0aCBzZWdtZW50cyBhcmUgZGVub3RlZCBieSBhIHRyYWlsaW5nIGA/YFxuICBsZXQgaXNPcHRpb25hbCA9IGZpcnN0LmVuZHNXaXRoKFwiP1wiKTtcbiAgLy8gQ29tcHV0ZSB0aGUgY29ycmVzcG9uZGluZyByZXF1aXJlZCBzZWdtZW50OiBgZm9vP2AgLT4gYGZvb2BcbiAgbGV0IHJlcXVpcmVkID0gZmlyc3QucmVwbGFjZSgvXFw/JC8sIFwiXCIpO1xuICBpZiAocmVzdC5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJbnRlcHJldCBlbXB0eSBzdHJpbmcgYXMgb21pdHRpbmcgYW4gb3B0aW9uYWwgc2VnbWVudFxuICAgIC8vIGBbXCJvbmVcIiwgXCJcIiwgXCJ0aHJlZVwiXWAgY29ycmVzcG9uZHMgdG8gb21pdHRpbmcgYDp0d29gIGZyb20gYC9vbmUvOnR3bz8vdGhyZWVgIC0+IGAvb25lL3RocmVlYFxuICAgIHJldHVybiBpc09wdGlvbmFsID8gW3JlcXVpcmVkLCBcIlwiXSA6IFtyZXF1aXJlZF07XG4gIH1cbiAgbGV0IHJlc3RFeHBsb2RlZCA9IGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHJlc3Quam9pbihcIi9cIikpO1xuICBsZXQgcmVzdWx0ID0gW107XG4gIC8vIEFsbCBjaGlsZCBwYXRocyB3aXRoIHRoZSBwcmVmaXguICBEbyB0aGlzIGZvciBhbGwgY2hpbGRyZW4gYmVmb3JlIHRoZVxuICAvLyBvcHRpb25hbCB2ZXJzaW9uIGZvciBhbGwgY2hpbGRyZW4gc28gd2UgZ2V0IGNvbnNpc3RlbnQgb3JkZXJpbmcgd2hlcmUgdGhlXG4gIC8vIHBhcmVudCBvcHRpb25hbCBhc3BlY3QgaXMgcHJlZmVycmVkIGFzIHJlcXVpcmVkLiAgT3RoZXJ3aXNlLCB3ZSBjYW4gZ2V0XG4gIC8vIGNoaWxkIHNlY3Rpb25zIGludGVyc3BlcnNlZCB3aGVyZSBkZWVwZXIgb3B0aW9uYWwgc2VnbWVudHMgYXJlIGhpZ2hlciB0aGFuXG4gIC8vIHBhcmVudCBvcHRpb25hbCBzZWdtZW50cywgd2hlcmUgZm9yIGV4YW1wbGUsIC86dHdvIHdvdWxkIGV4cGxvZGVzIF9lYXJsaWVyX1xuICAvLyB0aGVuIC86b25lLiAgQnkgYWx3YXlzIGluY2x1ZGluZyB0aGUgcGFyZW50IGFzIHJlcXVpcmVkIF9mb3IgYWxsIGNoaWxkcmVuX1xuICAvLyBmaXJzdCwgd2UgYXZvaWQgdGhpcyBpc3N1ZVxuICByZXN1bHQucHVzaCguLi5yZXN0RXhwbG9kZWQubWFwKHN1YnBhdGggPT4gc3VicGF0aCA9PT0gXCJcIiA/IHJlcXVpcmVkIDogW3JlcXVpcmVkLCBzdWJwYXRoXS5qb2luKFwiL1wiKSkpO1xuICAvLyBUaGVuIGlmIHRoaXMgaXMgYW4gb3B0aW9uYWwgdmFsdWUsIGFkZCBhbGwgY2hpbGQgdmVyc2lvbnMgd2l0aG91dFxuICBpZiAoaXNPcHRpb25hbCkge1xuICAgIHJlc3VsdC5wdXNoKC4uLnJlc3RFeHBsb2RlZCk7XG4gIH1cbiAgLy8gZm9yIGFic29sdXRlIHBhdGhzLCBlbnN1cmUgYC9gIGluc3RlYWQgb2YgZW1wdHkgc2VnbWVudFxuICByZXR1cm4gcmVzdWx0Lm1hcChleHBsb2RlZCA9PiBwYXRoLnN0YXJ0c1dpdGgoXCIvXCIpICYmIGV4cGxvZGVkID09PSBcIlwiID8gXCIvXCIgOiBleHBsb2RlZCk7XG59XG5mdW5jdGlvbiByYW5rUm91dGVCcmFuY2hlcyhicmFuY2hlcykge1xuICBicmFuY2hlcy5zb3J0KChhLCBiKSA9PiBhLnNjb3JlICE9PSBiLnNjb3JlID8gYi5zY29yZSAtIGEuc2NvcmUgLy8gSGlnaGVyIHNjb3JlIGZpcnN0XG4gIDogY29tcGFyZUluZGV4ZXMoYS5yb3V0ZXNNZXRhLm1hcChtZXRhID0+IG1ldGEuY2hpbGRyZW5JbmRleCksIGIucm91dGVzTWV0YS5tYXAobWV0YSA9PiBtZXRhLmNoaWxkcmVuSW5kZXgpKSk7XG59XG5jb25zdCBwYXJhbVJlID0gL146XFx3KyQvO1xuY29uc3QgZHluYW1pY1NlZ21lbnRWYWx1ZSA9IDM7XG5jb25zdCBpbmRleFJvdXRlVmFsdWUgPSAyO1xuY29uc3QgZW1wdHlTZWdtZW50VmFsdWUgPSAxO1xuY29uc3Qgc3RhdGljU2VnbWVudFZhbHVlID0gMTA7XG5jb25zdCBzcGxhdFBlbmFsdHkgPSAtMjtcbmNvbnN0IGlzU3BsYXQgPSBzID0+IHMgPT09IFwiKlwiO1xuZnVuY3Rpb24gY29tcHV0ZVNjb3JlKHBhdGgsIGluZGV4KSB7XG4gIGxldCBzZWdtZW50cyA9IHBhdGguc3BsaXQoXCIvXCIpO1xuICBsZXQgaW5pdGlhbFNjb3JlID0gc2VnbWVudHMubGVuZ3RoO1xuICBpZiAoc2VnbWVudHMuc29tZShpc1NwbGF0KSkge1xuICAgIGluaXRpYWxTY29yZSArPSBzcGxhdFBlbmFsdHk7XG4gIH1cbiAgaWYgKGluZGV4KSB7XG4gICAgaW5pdGlhbFNjb3JlICs9IGluZGV4Um91dGVWYWx1ZTtcbiAgfVxuICByZXR1cm4gc2VnbWVudHMuZmlsdGVyKHMgPT4gIWlzU3BsYXQocykpLnJlZHVjZSgoc2NvcmUsIHNlZ21lbnQpID0+IHNjb3JlICsgKHBhcmFtUmUudGVzdChzZWdtZW50KSA/IGR5bmFtaWNTZWdtZW50VmFsdWUgOiBzZWdtZW50ID09PSBcIlwiID8gZW1wdHlTZWdtZW50VmFsdWUgOiBzdGF0aWNTZWdtZW50VmFsdWUpLCBpbml0aWFsU2NvcmUpO1xufVxuZnVuY3Rpb24gY29tcGFyZUluZGV4ZXMoYSwgYikge1xuICBsZXQgc2libGluZ3MgPSBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5zbGljZSgwLCAtMSkuZXZlcnkoKG4sIGkpID0+IG4gPT09IGJbaV0pO1xuICByZXR1cm4gc2libGluZ3MgP1xuICAvLyBJZiB0d28gcm91dGVzIGFyZSBzaWJsaW5ncywgd2Ugc2hvdWxkIHRyeSB0byBtYXRjaCB0aGUgZWFybGllciBzaWJsaW5nXG4gIC8vIGZpcnN0LiBUaGlzIGFsbG93cyBwZW9wbGUgdG8gaGF2ZSBmaW5lLWdyYWluZWQgY29udHJvbCBvdmVyIHRoZSBtYXRjaGluZ1xuICAvLyBiZWhhdmlvciBieSBzaW1wbHkgcHV0dGluZyByb3V0ZXMgd2l0aCBpZGVudGljYWwgcGF0aHMgaW4gdGhlIG9yZGVyIHRoZXlcbiAgLy8gd2FudCB0aGVtIHRyaWVkLlxuICBhW2EubGVuZ3RoIC0gMV0gLSBiW2IubGVuZ3RoIC0gMV0gOlxuICAvLyBPdGhlcndpc2UsIGl0IGRvZXNuJ3QgcmVhbGx5IG1ha2Ugc2Vuc2UgdG8gcmFuayBub24tc2libGluZ3MgYnkgaW5kZXgsXG4gIC8vIHNvIHRoZXkgc29ydCBlcXVhbGx5LlxuICAwO1xufVxuZnVuY3Rpb24gbWF0Y2hSb3V0ZUJyYW5jaChicmFuY2gsIHBhdGhuYW1lKSB7XG4gIGxldCB7XG4gICAgcm91dGVzTWV0YVxuICB9ID0gYnJhbmNoO1xuICBsZXQgbWF0Y2hlZFBhcmFtcyA9IHt9O1xuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gXCIvXCI7XG4gIGxldCBtYXRjaGVzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcm91dGVzTWV0YS5sZW5ndGg7ICsraSkge1xuICAgIGxldCBtZXRhID0gcm91dGVzTWV0YVtpXTtcbiAgICBsZXQgZW5kID0gaSA9PT0gcm91dGVzTWV0YS5sZW5ndGggLSAxO1xuICAgIGxldCByZW1haW5pbmdQYXRobmFtZSA9IG1hdGNoZWRQYXRobmFtZSA9PT0gXCIvXCIgPyBwYXRobmFtZSA6IHBhdGhuYW1lLnNsaWNlKG1hdGNoZWRQYXRobmFtZS5sZW5ndGgpIHx8IFwiL1wiO1xuICAgIGxldCBtYXRjaCA9IG1hdGNoUGF0aCh7XG4gICAgICBwYXRoOiBtZXRhLnJlbGF0aXZlUGF0aCxcbiAgICAgIGNhc2VTZW5zaXRpdmU6IG1ldGEuY2FzZVNlbnNpdGl2ZSxcbiAgICAgIGVuZFxuICAgIH0sIHJlbWFpbmluZ1BhdGhuYW1lKTtcbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgICBPYmplY3QuYXNzaWduKG1hdGNoZWRQYXJhbXMsIG1hdGNoLnBhcmFtcyk7XG4gICAgbGV0IHJvdXRlID0gbWV0YS5yb3V0ZTtcbiAgICBtYXRjaGVzLnB1c2goe1xuICAgICAgLy8gVE9ETzogQ2FuIHRoaXMgYXMgYmUgYXZvaWRlZD9cbiAgICAgIHBhcmFtczogbWF0Y2hlZFBhcmFtcyxcbiAgICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVdKSxcbiAgICAgIHBhdGhuYW1lQmFzZTogbm9ybWFsaXplUGF0aG5hbWUoam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lQmFzZV0pKSxcbiAgICAgIHJvdXRlXG4gICAgfSk7XG4gICAgaWYgKG1hdGNoLnBhdGhuYW1lQmFzZSAhPT0gXCIvXCIpIHtcbiAgICAgIG1hdGNoZWRQYXRobmFtZSA9IGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG4vKipcbiAqIFJldHVybnMgYSBwYXRoIHdpdGggcGFyYW1zIGludGVycG9sYXRlZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL2dlbmVyYXRlLXBhdGhcbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKG9yaWdpbmFsUGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG4gIGxldCBwYXRoID0gb3JpZ2luYWxQYXRoO1xuICBpZiAocGF0aC5lbmRzV2l0aChcIipcIikgJiYgcGF0aCAhPT0gXCIqXCIgJiYgIXBhdGguZW5kc1dpdGgoXCIvKlwiKSkge1xuICAgIHdhcm5pbmcoZmFsc2UsIFwiUm91dGUgcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiIHdpbGwgYmUgdHJlYXRlZCBhcyBpZiBpdCB3ZXJlIFwiICsgKFwiXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIiBiZWNhdXNlIHRoZSBgKmAgY2hhcmFjdGVyIG11c3QgXCIpICsgXCJhbHdheXMgZm9sbG93IGEgYC9gIGluIHRoZSBwYXR0ZXJuLiBUbyBnZXQgcmlkIG9mIHRoaXMgd2FybmluZywgXCIgKyAoXCJwbGVhc2UgY2hhbmdlIHRoZSByb3V0ZSBwYXRoIHRvIFxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIuXCIpKTtcbiAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKTtcbiAgfVxuICAvLyBlbnN1cmUgYC9gIGlzIGFkZGVkIGF0IHRoZSBiZWdpbm5pbmcgaWYgdGhlIHBhdGggaXMgYWJzb2x1dGVcbiAgY29uc3QgcHJlZml4ID0gcGF0aC5zdGFydHNXaXRoKFwiL1wiKSA/IFwiL1wiIDogXCJcIjtcbiAgY29uc3Qgc3RyaW5naWZ5ID0gcCA9PiBwID09IG51bGwgPyBcIlwiIDogdHlwZW9mIHAgPT09IFwic3RyaW5nXCIgPyBwIDogU3RyaW5nKHApO1xuICBjb25zdCBzZWdtZW50cyA9IHBhdGguc3BsaXQoL1xcLysvKS5tYXAoKHNlZ21lbnQsIGluZGV4LCBhcnJheSkgPT4ge1xuICAgIGNvbnN0IGlzTGFzdFNlZ21lbnQgPSBpbmRleCA9PT0gYXJyYXkubGVuZ3RoIC0gMTtcbiAgICAvLyBvbmx5IGFwcGx5IHRoZSBzcGxhdCBpZiBpdCdzIHRoZSBsYXN0IHNlZ21lbnRcbiAgICBpZiAoaXNMYXN0U2VnbWVudCAmJiBzZWdtZW50ID09PSBcIipcIikge1xuICAgICAgY29uc3Qgc3RhciA9IFwiKlwiO1xuICAgICAgLy8gQXBwbHkgdGhlIHNwbGF0XG4gICAgICByZXR1cm4gc3RyaW5naWZ5KHBhcmFtc1tzdGFyXSk7XG4gICAgfVxuICAgIGNvbnN0IGtleU1hdGNoID0gc2VnbWVudC5tYXRjaCgvXjooXFx3KykoXFw/PykkLyk7XG4gICAgaWYgKGtleU1hdGNoKSB7XG4gICAgICBjb25zdCBbLCBrZXksIG9wdGlvbmFsXSA9IGtleU1hdGNoO1xuICAgICAgbGV0IHBhcmFtID0gcGFyYW1zW2tleV07XG4gICAgICBpbnZhcmlhbnQob3B0aW9uYWwgPT09IFwiP1wiIHx8IHBhcmFtICE9IG51bGwsIFwiTWlzc2luZyBcXFwiOlwiICsga2V5ICsgXCJcXFwiIHBhcmFtXCIpO1xuICAgICAgcmV0dXJuIHN0cmluZ2lmeShwYXJhbSk7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBhbnkgb3B0aW9uYWwgbWFya2VycyBmcm9tIG9wdGlvbmFsIHN0YXRpYyBzZWdtZW50c1xuICAgIHJldHVybiBzZWdtZW50LnJlcGxhY2UoL1xcPyQvZywgXCJcIik7XG4gIH0pXG4gIC8vIFJlbW92ZSBlbXB0eSBzZWdtZW50c1xuICAuZmlsdGVyKHNlZ21lbnQgPT4gISFzZWdtZW50KTtcbiAgcmV0dXJuIHByZWZpeCArIHNlZ21lbnRzLmpvaW4oXCIvXCIpO1xufVxuLyoqXG4gKiBQZXJmb3JtcyBwYXR0ZXJuIG1hdGNoaW5nIG9uIGEgVVJMIHBhdGhuYW1lIGFuZCByZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0XG4gKiB0aGUgbWF0Y2guXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9tYXRjaC1wYXRoXG4gKi9cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXR0ZXJuLCBwYXRobmFtZSkge1xuICBpZiAodHlwZW9mIHBhdHRlcm4gPT09IFwic3RyaW5nXCIpIHtcbiAgICBwYXR0ZXJuID0ge1xuICAgICAgcGF0aDogcGF0dGVybixcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGZhbHNlLFxuICAgICAgZW5kOiB0cnVlXG4gICAgfTtcbiAgfVxuICBsZXQgW21hdGNoZXIsIHBhcmFtTmFtZXNdID0gY29tcGlsZVBhdGgocGF0dGVybi5wYXRoLCBwYXR0ZXJuLmNhc2VTZW5zaXRpdmUsIHBhdHRlcm4uZW5kKTtcbiAgbGV0IG1hdGNoID0gcGF0aG5hbWUubWF0Y2gobWF0Y2hlcik7XG4gIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gbWF0Y2hbMF07XG4gIGxldCBwYXRobmFtZUJhc2UgPSBtYXRjaGVkUGF0aG5hbWUucmVwbGFjZSgvKC4pXFwvKyQvLCBcIiQxXCIpO1xuICBsZXQgY2FwdHVyZUdyb3VwcyA9IG1hdGNoLnNsaWNlKDEpO1xuICBsZXQgcGFyYW1zID0gcGFyYW1OYW1lcy5yZWR1Y2UoKG1lbW8sIHBhcmFtTmFtZSwgaW5kZXgpID0+IHtcbiAgICAvLyBXZSBuZWVkIHRvIGNvbXB1dGUgdGhlIHBhdGhuYW1lQmFzZSBoZXJlIHVzaW5nIHRoZSByYXcgc3BsYXQgdmFsdWVcbiAgICAvLyBpbnN0ZWFkIG9mIHVzaW5nIHBhcmFtc1tcIipcIl0gbGF0ZXIgYmVjYXVzZSBpdCB3aWxsIGJlIGRlY29kZWQgdGhlblxuICAgIGlmIChwYXJhbU5hbWUgPT09IFwiKlwiKSB7XG4gICAgICBsZXQgc3BsYXRWYWx1ZSA9IGNhcHR1cmVHcm91cHNbaW5kZXhdIHx8IFwiXCI7XG4gICAgICBwYXRobmFtZUJhc2UgPSBtYXRjaGVkUGF0aG5hbWUuc2xpY2UoMCwgbWF0Y2hlZFBhdGhuYW1lLmxlbmd0aCAtIHNwbGF0VmFsdWUubGVuZ3RoKS5yZXBsYWNlKC8oLilcXC8rJC8sIFwiJDFcIik7XG4gICAgfVxuICAgIG1lbW9bcGFyYW1OYW1lXSA9IHNhZmVseURlY29kZVVSSUNvbXBvbmVudChjYXB0dXJlR3JvdXBzW2luZGV4XSB8fCBcIlwiLCBwYXJhbU5hbWUpO1xuICAgIHJldHVybiBtZW1vO1xuICB9LCB7fSk7XG4gIHJldHVybiB7XG4gICAgcGFyYW1zLFxuICAgIHBhdGhuYW1lOiBtYXRjaGVkUGF0aG5hbWUsXG4gICAgcGF0aG5hbWVCYXNlLFxuICAgIHBhdHRlcm5cbiAgfTtcbn1cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgsIGNhc2VTZW5zaXRpdmUsIGVuZCkge1xuICBpZiAoY2FzZVNlbnNpdGl2ZSA9PT0gdm9pZCAwKSB7XG4gICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlO1xuICB9XG4gIGlmIChlbmQgPT09IHZvaWQgMCkge1xuICAgIGVuZCA9IHRydWU7XG4gIH1cbiAgd2FybmluZyhwYXRoID09PSBcIipcIiB8fCAhcGF0aC5lbmRzV2l0aChcIipcIikgfHwgcGF0aC5lbmRzV2l0aChcIi8qXCIpLCBcIlJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIiB3aWxsIGJlIHRyZWF0ZWQgYXMgaWYgaXQgd2VyZSBcIiArIChcIlxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIgYmVjYXVzZSB0aGUgYCpgIGNoYXJhY3RlciBtdXN0IFwiKSArIFwiYWx3YXlzIGZvbGxvdyBhIGAvYCBpbiB0aGUgcGF0dGVybi4gVG8gZ2V0IHJpZCBvZiB0aGlzIHdhcm5pbmcsIFwiICsgKFwicGxlYXNlIGNoYW5nZSB0aGUgcm91dGUgcGF0aCB0byBcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiLlwiKSk7XG4gIGxldCBwYXJhbU5hbWVzID0gW107XG4gIGxldCByZWdleHBTb3VyY2UgPSBcIl5cIiArIHBhdGgucmVwbGFjZSgvXFwvKlxcKj8kLywgXCJcIikgLy8gSWdub3JlIHRyYWlsaW5nIC8gYW5kIC8qLCB3ZSdsbCBoYW5kbGUgaXQgYmVsb3dcbiAgLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpIC8vIE1ha2Ugc3VyZSBpdCBoYXMgYSBsZWFkaW5nIC9cbiAgLnJlcGxhY2UoL1tcXFxcLiorXiQ/e318KClbXFxdXS9nLCBcIlxcXFwkJlwiKSAvLyBFc2NhcGUgc3BlY2lhbCByZWdleCBjaGFyc1xuICAucmVwbGFjZSgvXFwvOihcXHcrKS9nLCAoXywgcGFyYW1OYW1lKSA9PiB7XG4gICAgcGFyYW1OYW1lcy5wdXNoKHBhcmFtTmFtZSk7XG4gICAgcmV0dXJuIFwiLyhbXlxcXFwvXSspXCI7XG4gIH0pO1xuICBpZiAocGF0aC5lbmRzV2l0aChcIipcIikpIHtcbiAgICBwYXJhbU5hbWVzLnB1c2goXCIqXCIpO1xuICAgIHJlZ2V4cFNvdXJjZSArPSBwYXRoID09PSBcIipcIiB8fCBwYXRoID09PSBcIi8qXCIgPyBcIiguKikkXCIgLy8gQWxyZWFkeSBtYXRjaGVkIHRoZSBpbml0aWFsIC8sIGp1c3QgbWF0Y2ggdGhlIHJlc3RcbiAgICA6IFwiKD86XFxcXC8oLispfFxcXFwvKikkXCI7IC8vIERvbid0IGluY2x1ZGUgdGhlIC8gaW4gcGFyYW1zW1wiKlwiXVxuICB9IGVsc2UgaWYgKGVuZCkge1xuICAgIC8vIFdoZW4gbWF0Y2hpbmcgdG8gdGhlIGVuZCwgaWdub3JlIHRyYWlsaW5nIHNsYXNoZXNcbiAgICByZWdleHBTb3VyY2UgKz0gXCJcXFxcLyokXCI7XG4gIH0gZWxzZSBpZiAocGF0aCAhPT0gXCJcIiAmJiBwYXRoICE9PSBcIi9cIikge1xuICAgIC8vIElmIG91ciBwYXRoIGlzIG5vbi1lbXB0eSBhbmQgY29udGFpbnMgYW55dGhpbmcgYmV5b25kIGFuIGluaXRpYWwgc2xhc2gsXG4gICAgLy8gdGhlbiB3ZSBoYXZlIF9zb21lXyBmb3JtIG9mIHBhdGggaW4gb3VyIHJlZ2V4IHNvIHdlIHNob3VsZCBleHBlY3QgdG9cbiAgICAvLyBtYXRjaCBvbmx5IGlmIHdlIGZpbmQgdGhlIGVuZCBvZiB0aGlzIHBhdGggc2VnbWVudC4gIExvb2sgZm9yIGFuIG9wdGlvbmFsXG4gICAgLy8gbm9uLWNhcHR1cmVkIHRyYWlsaW5nIHNsYXNoICh0byBtYXRjaCBhIHBvcnRpb24gb2YgdGhlIFVSTCkgb3IgdGhlIGVuZFxuICAgIC8vIG9mIHRoZSBwYXRoIChpZiB3ZSd2ZSBtYXRjaGVkIHRvIHRoZSBlbmQpLiAgV2UgdXNlZCB0byBkbyB0aGlzIHdpdGggYVxuICAgIC8vIHdvcmQgYm91bmRhcnkgYnV0IHRoYXQgZ2l2ZXMgZmFsc2UgcG9zaXRpdmVzIG9uIHJvdXRlcyBsaWtlXG4gICAgLy8gL3VzZXItcHJlZmVyZW5jZXMgc2luY2UgYC1gIGNvdW50cyBhcyBhIHdvcmQgYm91bmRhcnkuXG4gICAgcmVnZXhwU291cmNlICs9IFwiKD86KD89XFxcXC98JCkpXCI7XG4gIH0gZWxzZSA7XG4gIGxldCBtYXRjaGVyID0gbmV3IFJlZ0V4cChyZWdleHBTb3VyY2UsIGNhc2VTZW5zaXRpdmUgPyB1bmRlZmluZWQgOiBcImlcIik7XG4gIHJldHVybiBbbWF0Y2hlciwgcGFyYW1OYW1lc107XG59XG5mdW5jdGlvbiBzYWZlbHlEZWNvZGVVUkkodmFsdWUpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJKHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB3YXJuaW5nKGZhbHNlLCBcIlRoZSBVUkwgcGF0aCBcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiBjb3VsZCBub3QgYmUgZGVjb2RlZCBiZWNhdXNlIGl0IGlzIGlzIGEgXCIgKyBcIm1hbGZvcm1lZCBVUkwgc2VnbWVudC4gVGhpcyBpcyBwcm9iYWJseSBkdWUgdG8gYSBiYWQgcGVyY2VudCBcIiArIChcImVuY29kaW5nIChcIiArIGVycm9yICsgXCIpLlwiKSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5mdW5jdGlvbiBzYWZlbHlEZWNvZGVVUklDb21wb25lbnQodmFsdWUsIHBhcmFtTmFtZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdhcm5pbmcoZmFsc2UsIFwiVGhlIHZhbHVlIGZvciB0aGUgVVJMIHBhcmFtIFxcXCJcIiArIHBhcmFtTmFtZSArIFwiXFxcIiB3aWxsIG5vdCBiZSBkZWNvZGVkIGJlY2F1c2VcIiArIChcIiB0aGUgc3RyaW5nIFxcXCJcIiArIHZhbHVlICsgXCJcXFwiIGlzIGEgbWFsZm9ybWVkIFVSTCBzZWdtZW50LiBUaGlzIGlzIHByb2JhYmx5XCIpICsgKFwiIGR1ZSB0byBhIGJhZCBwZXJjZW50IGVuY29kaW5nIChcIiArIGVycm9yICsgXCIpLlwiKSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aG5hbWUsIGJhc2VuYW1lKSB7XG4gIGlmIChiYXNlbmFtZSA9PT0gXCIvXCIpIHJldHVybiBwYXRobmFtZTtcbiAgaWYgKCFwYXRobmFtZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoYmFzZW5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvLyBXZSB3YW50IHRvIGxlYXZlIHRyYWlsaW5nIHNsYXNoIGJlaGF2aW9yIGluIHRoZSB1c2VyJ3MgY29udHJvbCwgc28gaWYgdGhleVxuICAvLyBzcGVjaWZ5IGEgYmFzZW5hbWUgd2l0aCBhIHRyYWlsaW5nIHNsYXNoLCB3ZSBzaG91bGQgc3VwcG9ydCBpdFxuICBsZXQgc3RhcnRJbmRleCA9IGJhc2VuYW1lLmVuZHNXaXRoKFwiL1wiKSA/IGJhc2VuYW1lLmxlbmd0aCAtIDEgOiBiYXNlbmFtZS5sZW5ndGg7XG4gIGxldCBuZXh0Q2hhciA9IHBhdGhuYW1lLmNoYXJBdChzdGFydEluZGV4KTtcbiAgaWYgKG5leHRDaGFyICYmIG5leHRDaGFyICE9PSBcIi9cIikge1xuICAgIC8vIHBhdGhuYW1lIGRvZXMgbm90IHN0YXJ0IHdpdGggYmFzZW5hbWUvXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIHBhdGhuYW1lLnNsaWNlKHN0YXJ0SW5kZXgpIHx8IFwiL1wiO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgcmVzb2x2ZWQgcGF0aCBvYmplY3QgcmVsYXRpdmUgdG8gdGhlIGdpdmVuIHBhdGhuYW1lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvcmVzb2x2ZS1wYXRoXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVQYXRoKHRvLCBmcm9tUGF0aG5hbWUpIHtcbiAgaWYgKGZyb21QYXRobmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgZnJvbVBhdGhuYW1lID0gXCIvXCI7XG4gIH1cbiAgbGV0IHtcbiAgICBwYXRobmFtZTogdG9QYXRobmFtZSxcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiXG4gIH0gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG87XG4gIGxldCBwYXRobmFtZSA9IHRvUGF0aG5hbWUgPyB0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIvXCIpID8gdG9QYXRobmFtZSA6IHJlc29sdmVQYXRobmFtZSh0b1BhdGhuYW1lLCBmcm9tUGF0aG5hbWUpIDogZnJvbVBhdGhuYW1lO1xuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lLFxuICAgIHNlYXJjaDogbm9ybWFsaXplU2VhcmNoKHNlYXJjaCksXG4gICAgaGFzaDogbm9ybWFsaXplSGFzaChoYXNoKVxuICB9O1xufVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHJlbGF0aXZlUGF0aCwgZnJvbVBhdGhuYW1lKSB7XG4gIGxldCBzZWdtZW50cyA9IGZyb21QYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpLnNwbGl0KFwiL1wiKTtcbiAgbGV0IHJlbGF0aXZlU2VnbWVudHMgPSByZWxhdGl2ZVBhdGguc3BsaXQoXCIvXCIpO1xuICByZWxhdGl2ZVNlZ21lbnRzLmZvckVhY2goc2VnbWVudCA9PiB7XG4gICAgaWYgKHNlZ21lbnQgPT09IFwiLi5cIikge1xuICAgICAgLy8gS2VlcCB0aGUgcm9vdCBcIlwiIHNlZ21lbnQgc28gdGhlIHBhdGhuYW1lIHN0YXJ0cyBhdCAvXG4gICAgICBpZiAoc2VnbWVudHMubGVuZ3RoID4gMSkgc2VnbWVudHMucG9wKCk7XG4gICAgfSBlbHNlIGlmIChzZWdtZW50ICE9PSBcIi5cIikge1xuICAgICAgc2VnbWVudHMucHVzaChzZWdtZW50KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc2VnbWVudHMubGVuZ3RoID4gMSA/IHNlZ21lbnRzLmpvaW4oXCIvXCIpIDogXCIvXCI7XG59XG5mdW5jdGlvbiBnZXRJbnZhbGlkUGF0aEVycm9yKGNoYXIsIGZpZWxkLCBkZXN0LCBwYXRoKSB7XG4gIHJldHVybiBcIkNhbm5vdCBpbmNsdWRlIGEgJ1wiICsgY2hhciArIFwiJyBjaGFyYWN0ZXIgaW4gYSBtYW51YWxseSBzcGVjaWZpZWQgXCIgKyAoXCJgdG8uXCIgKyBmaWVsZCArIFwiYCBmaWVsZCBbXCIgKyBKU09OLnN0cmluZ2lmeShwYXRoKSArIFwiXS4gIFBsZWFzZSBzZXBhcmF0ZSBpdCBvdXQgdG8gdGhlIFwiKSArIChcImB0by5cIiArIGRlc3QgKyBcImAgZmllbGQuIEFsdGVybmF0aXZlbHkgeW91IG1heSBwcm92aWRlIHRoZSBmdWxsIHBhdGggYXMgXCIpICsgXCJhIHN0cmluZyBpbiA8TGluayB0bz1cXFwiLi4uXFxcIj4gYW5kIHRoZSByb3V0ZXIgd2lsbCBwYXJzZSBpdCBmb3IgeW91LlwiO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICpcbiAqIFdoZW4gcHJvY2Vzc2luZyByZWxhdGl2ZSBuYXZpZ2F0aW9uIHdlIHdhbnQgdG8gaWdub3JlIGFuY2VzdG9yIHJvdXRlcyB0aGF0XG4gKiBkbyBub3QgY29udHJpYnV0ZSB0byB0aGUgcGF0aCwgc3VjaCB0aGF0IGluZGV4L3BhdGhsZXNzIGxheW91dCByb3V0ZXMgZG9uJ3RcbiAqIGludGVyZmVyZS5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgd2hlbiBtb3ZpbmcgYSByb3V0ZSBlbGVtZW50IGludG8gYW4gaW5kZXggcm91dGUgYW5kL29yIGFcbiAqIHBhdGhsZXNzIGxheW91dCByb3V0ZSwgcmVsYXRpdmUgbGluayBiZWhhdmlvciBjb250YWluZWQgd2l0aGluIHNob3VsZCBzdGF5XG4gKiB0aGUgc2FtZS4gIEJvdGggb2YgdGhlIGZvbGxvd2luZyBleGFtcGxlcyBzaG91bGQgbGluayBiYWNrIHRvIHRoZSByb290OlxuICpcbiAqICAgPFJvdXRlIHBhdGg9XCIvXCI+XG4gKiAgICAgPFJvdXRlIHBhdGg9XCJhY2NvdW50c1wiIGVsZW1lbnQ9ezxMaW5rIHRvPVwiLi5cIn0+XG4gKiAgIDwvUm91dGU+XG4gKlxuICogICA8Um91dGUgcGF0aD1cIi9cIj5cbiAqICAgICA8Um91dGUgcGF0aD1cImFjY291bnRzXCI+XG4gKiAgICAgICA8Um91dGUgZWxlbWVudD17PEFjY291bnRzTGF5b3V0IC8+fT4gICAgICAgLy8gPC0tIERvZXMgbm90IGNvbnRyaWJ1dGVcbiAqICAgICAgICAgPFJvdXRlIGluZGV4IGVsZW1lbnQ9ezxMaW5rIHRvPVwiLi5cIn0gLz4gIC8vIDwtLSBEb2VzIG5vdCBjb250cmlidXRlXG4gKiAgICAgICA8L1JvdXRlXG4gKiAgICAgPC9Sb3V0ZT5cbiAqICAgPC9Sb3V0ZT5cbiAqL1xuZnVuY3Rpb24gZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcykge1xuICByZXR1cm4gbWF0Y2hlcy5maWx0ZXIoKG1hdGNoLCBpbmRleCkgPT4gaW5kZXggPT09IDAgfHwgbWF0Y2gucm91dGUucGF0aCAmJiBtYXRjaC5yb3V0ZS5wYXRoLmxlbmd0aCA+IDApO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZXNvbHZlVG8odG9BcmcsIHJvdXRlUGF0aG5hbWVzLCBsb2NhdGlvblBhdGhuYW1lLCBpc1BhdGhSZWxhdGl2ZSkge1xuICBpZiAoaXNQYXRoUmVsYXRpdmUgPT09IHZvaWQgMCkge1xuICAgIGlzUGF0aFJlbGF0aXZlID0gZmFsc2U7XG4gIH1cbiAgbGV0IHRvO1xuICBpZiAodHlwZW9mIHRvQXJnID09PSBcInN0cmluZ1wiKSB7XG4gICAgdG8gPSBwYXJzZVBhdGgodG9BcmcpO1xuICB9IGVsc2Uge1xuICAgIHRvID0gX2V4dGVuZHMoe30sIHRvQXJnKTtcbiAgICBpbnZhcmlhbnQoIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcyhcIj9cIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCI/XCIsIFwicGF0aG5hbWVcIiwgXCJzZWFyY2hcIiwgdG8pKTtcbiAgICBpbnZhcmlhbnQoIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcyhcIiNcIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCIjXCIsIFwicGF0aG5hbWVcIiwgXCJoYXNoXCIsIHRvKSk7XG4gICAgaW52YXJpYW50KCF0by5zZWFyY2ggfHwgIXRvLnNlYXJjaC5pbmNsdWRlcyhcIiNcIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCIjXCIsIFwic2VhcmNoXCIsIFwiaGFzaFwiLCB0bykpO1xuICB9XG4gIGxldCBpc0VtcHR5UGF0aCA9IHRvQXJnID09PSBcIlwiIHx8IHRvLnBhdGhuYW1lID09PSBcIlwiO1xuICBsZXQgdG9QYXRobmFtZSA9IGlzRW1wdHlQYXRoID8gXCIvXCIgOiB0by5wYXRobmFtZTtcbiAgbGV0IGZyb207XG4gIC8vIFJvdXRpbmcgaXMgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgcGF0aG5hbWUgaWYgZXhwbGljaXRseSByZXF1ZXN0ZWQuXG4gIC8vXG4gIC8vIElmIGEgcGF0aG5hbWUgaXMgZXhwbGljaXRseSBwcm92aWRlZCBpbiBgdG9gLCBpdCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlXG4gIC8vIHJvdXRlIGNvbnRleHQuIFRoaXMgaXMgZXhwbGFpbmVkIGluIGBOb3RlIG9uIGA8TGluayB0bz5gIHZhbHVlc2AgaW4gb3VyXG4gIC8vIG1pZ3JhdGlvbiBndWlkZSBmcm9tIHY1IGFzIGEgbWVhbnMgb2YgZGlzYW1iaWd1YXRpb24gYmV0d2VlbiBgdG9gIHZhbHVlc1xuICAvLyB0aGF0IGJlZ2luIHdpdGggYC9gIGFuZCB0aG9zZSB0aGF0IGRvIG5vdC4gSG93ZXZlciwgdGhpcyBpcyBwcm9ibGVtYXRpYyBmb3JcbiAgLy8gYHRvYCB2YWx1ZXMgdGhhdCBkbyBub3QgcHJvdmlkZSBhIHBhdGhuYW1lLiBgdG9gIGNhbiBzaW1wbHkgYmUgYSBzZWFyY2ggb3JcbiAgLy8gaGFzaCBzdHJpbmcsIGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkIGFzc3VtZSB0aGF0IHRoZSBuYXZpZ2F0aW9uIGlzIHJlbGF0aXZlXG4gIC8vIHRvIHRoZSBjdXJyZW50IGxvY2F0aW9uJ3MgcGF0aG5hbWUgYW5kICpub3QqIHRoZSByb3V0ZSBwYXRobmFtZS5cbiAgaWYgKGlzUGF0aFJlbGF0aXZlIHx8IHRvUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIGZyb20gPSBsb2NhdGlvblBhdGhuYW1lO1xuICB9IGVsc2Uge1xuICAgIGxldCByb3V0ZVBhdGhuYW1lSW5kZXggPSByb3V0ZVBhdGhuYW1lcy5sZW5ndGggLSAxO1xuICAgIGlmICh0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIuLlwiKSkge1xuICAgICAgbGV0IHRvU2VnbWVudHMgPSB0b1BhdGhuYW1lLnNwbGl0KFwiL1wiKTtcbiAgICAgIC8vIEVhY2ggbGVhZGluZyAuLiBzZWdtZW50IG1lYW5zIFwiZ28gdXAgb25lIHJvdXRlXCIgaW5zdGVhZCBvZiBcImdvIHVwIG9uZVxuICAgICAgLy8gVVJMIHNlZ21lbnRcIi4gIFRoaXMgaXMgYSBrZXkgZGlmZmVyZW5jZSBmcm9tIGhvdyA8YSBocmVmPiB3b3JrcyBhbmQgYVxuICAgICAgLy8gbWFqb3IgcmVhc29uIHdlIGNhbGwgdGhpcyBhIFwidG9cIiB2YWx1ZSBpbnN0ZWFkIG9mIGEgXCJocmVmXCIuXG4gICAgICB3aGlsZSAodG9TZWdtZW50c1swXSA9PT0gXCIuLlwiKSB7XG4gICAgICAgIHRvU2VnbWVudHMuc2hpZnQoKTtcbiAgICAgICAgcm91dGVQYXRobmFtZUluZGV4IC09IDE7XG4gICAgICB9XG4gICAgICB0by5wYXRobmFtZSA9IHRvU2VnbWVudHMuam9pbihcIi9cIik7XG4gICAgfVxuICAgIC8vIElmIHRoZXJlIGFyZSBtb3JlIFwiLi5cIiBzZWdtZW50cyB0aGFuIHBhcmVudCByb3V0ZXMsIHJlc29sdmUgcmVsYXRpdmUgdG9cbiAgICAvLyB0aGUgcm9vdCAvIFVSTC5cbiAgICBmcm9tID0gcm91dGVQYXRobmFtZUluZGV4ID49IDAgPyByb3V0ZVBhdGhuYW1lc1tyb3V0ZVBhdGhuYW1lSW5kZXhdIDogXCIvXCI7XG4gIH1cbiAgbGV0IHBhdGggPSByZXNvbHZlUGF0aCh0bywgZnJvbSk7XG4gIC8vIEVuc3VyZSB0aGUgcGF0aG5hbWUgaGFzIGEgdHJhaWxpbmcgc2xhc2ggaWYgdGhlIG9yaWdpbmFsIFwidG9cIiBoYWQgb25lXG4gIGxldCBoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2ggPSB0b1BhdGhuYW1lICYmIHRvUGF0aG5hbWUgIT09IFwiL1wiICYmIHRvUGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpO1xuICAvLyBPciBpZiB0aGlzIHdhcyBhIGxpbmsgdG8gdGhlIGN1cnJlbnQgcGF0aCB3aGljaCBoYXMgYSB0cmFpbGluZyBzbGFzaFxuICBsZXQgaGFzQ3VycmVudFRyYWlsaW5nU2xhc2ggPSAoaXNFbXB0eVBhdGggfHwgdG9QYXRobmFtZSA9PT0gXCIuXCIpICYmIGxvY2F0aW9uUGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpO1xuICBpZiAoIXBhdGgucGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpICYmIChoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2ggfHwgaGFzQ3VycmVudFRyYWlsaW5nU2xhc2gpKSB7XG4gICAgcGF0aC5wYXRobmFtZSArPSBcIi9cIjtcbiAgfVxuICByZXR1cm4gcGF0aDtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0VG9QYXRobmFtZSh0bykge1xuICAvLyBFbXB0eSBzdHJpbmdzIHNob3VsZCBiZSB0cmVhdGVkIHRoZSBzYW1lIGFzIC8gcGF0aHNcbiAgcmV0dXJuIHRvID09PSBcIlwiIHx8IHRvLnBhdGhuYW1lID09PSBcIlwiID8gXCIvXCIgOiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pLnBhdGhuYW1lIDogdG8ucGF0aG5hbWU7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IGpvaW5QYXRocyA9IHBhdGhzID0+IHBhdGhzLmpvaW4oXCIvXCIpLnJlcGxhY2UoL1xcL1xcLysvZywgXCIvXCIpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBub3JtYWxpemVQYXRobmFtZSA9IHBhdGhuYW1lID0+IHBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgXCJcIikucmVwbGFjZSgvXlxcLyovLCBcIi9cIik7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IG5vcm1hbGl6ZVNlYXJjaCA9IHNlYXJjaCA9PiAhc2VhcmNoIHx8IHNlYXJjaCA9PT0gXCI/XCIgPyBcIlwiIDogc2VhcmNoLnN0YXJ0c1dpdGgoXCI/XCIpID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IG5vcm1hbGl6ZUhhc2ggPSBoYXNoID0+ICFoYXNoIHx8IGhhc2ggPT09IFwiI1wiID8gXCJcIiA6IGhhc2guc3RhcnRzV2l0aChcIiNcIikgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuLyoqXG4gKiBUaGlzIGlzIGEgc2hvcnRjdXQgZm9yIGNyZWF0aW5nIGBhcHBsaWNhdGlvbi9qc29uYCByZXNwb25zZXMuIENvbnZlcnRzIGBkYXRhYFxuICogdG8gSlNPTiBhbmQgc2V0cyB0aGUgYENvbnRlbnQtVHlwZWAgaGVhZGVyLlxuICovXG5jb25zdCBqc29uID0gZnVuY3Rpb24ganNvbihkYXRhLCBpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0ge307XG4gIH1cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IHR5cGVvZiBpbml0ID09PSBcIm51bWJlclwiID8ge1xuICAgIHN0YXR1czogaW5pdFxuICB9IDogaW5pdDtcbiAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhyZXNwb25zZUluaXQuaGVhZGVycyk7XG4gIGlmICghaGVhZGVycy5oYXMoXCJDb250ZW50LVR5cGVcIikpIHtcbiAgICBoZWFkZXJzLnNldChcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIik7XG4gIH1cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShkYXRhKSwgX2V4dGVuZHMoe30sIHJlc3BvbnNlSW5pdCwge1xuICAgIGhlYWRlcnNcbiAgfSkpO1xufTtcbmNsYXNzIEFib3J0ZWREZWZlcnJlZEVycm9yIGV4dGVuZHMgRXJyb3Ige31cbmNsYXNzIERlZmVycmVkRGF0YSB7XG4gIGNvbnN0cnVjdG9yKGRhdGEsIHJlc3BvbnNlSW5pdCkge1xuICAgIHRoaXMucGVuZGluZ0tleXNTZXQgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLmRlZmVycmVkS2V5cyA9IFtdO1xuICAgIGludmFyaWFudChkYXRhICYmIHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KGRhdGEpLCBcImRlZmVyKCkgb25seSBhY2NlcHRzIHBsYWluIG9iamVjdHNcIik7XG4gICAgLy8gU2V0IHVwIGFuIEFib3J0Q29udHJvbGxlciArIFByb21pc2Ugd2UgY2FuIHJhY2UgYWdhaW5zdCB0byBleGl0IGVhcmx5XG4gICAgLy8gY2FuY2VsbGF0aW9uXG4gICAgbGV0IHJlamVjdDtcbiAgICB0aGlzLmFib3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByKSA9PiByZWplY3QgPSByKTtcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IG9uQWJvcnQgPSAoKSA9PiByZWplY3QobmV3IEFib3J0ZWREZWZlcnJlZEVycm9yKFwiRGVmZXJyZWQgZGF0YSBhYm9ydGVkXCIpKTtcbiAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwgPSAoKSA9PiB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICB0aGlzLmRhdGEgPSBPYmplY3QuZW50cmllcyhkYXRhKS5yZWR1Y2UoKGFjYywgX3JlZikgPT4ge1xuICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWY7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgW2tleV06IHRoaXMudHJhY2tQcm9taXNlKGtleSwgdmFsdWUpXG4gICAgICB9KTtcbiAgICB9LCB7fSk7XG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgLy8gQWxsIGluY29taW5nIHZhbHVlcyB3ZXJlIHJlc29sdmVkXG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICB9XG4gICAgdGhpcy5pbml0ID0gcmVzcG9uc2VJbml0O1xuICB9XG4gIHRyYWNrUHJvbWlzZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICB0aGlzLmRlZmVycmVkS2V5cy5wdXNoKGtleSk7XG4gICAgdGhpcy5wZW5kaW5nS2V5c1NldC5hZGQoa2V5KTtcbiAgICAvLyBXZSBzdG9yZSBhIGxpdHRsZSB3cmFwcGVyIHByb21pc2UgdGhhdCB3aWxsIGJlIGV4dGVuZGVkIHdpdGhcbiAgICAvLyBfZGF0YS9fZXJyb3IgcHJvcHMgdXBvbiByZXNvbHZlL3JlamVjdFxuICAgIGxldCBwcm9taXNlID0gUHJvbWlzZS5yYWNlKFt2YWx1ZSwgdGhpcy5hYm9ydFByb21pc2VdKS50aGVuKGRhdGEgPT4gdGhpcy5vblNldHRsZShwcm9taXNlLCBrZXksIHVuZGVmaW5lZCwgZGF0YSksIGVycm9yID0+IHRoaXMub25TZXR0bGUocHJvbWlzZSwga2V5LCBlcnJvcikpO1xuICAgIC8vIFJlZ2lzdGVyIHJlamVjdGlvbiBsaXN0ZW5lcnMgdG8gYXZvaWQgdW5jYXVnaHQgcHJvbWlzZSByZWplY3Rpb25zIG9uXG4gICAgLy8gZXJyb3JzIG9yIGFib3J0ZWQgZGVmZXJyZWQgdmFsdWVzXG4gICAgcHJvbWlzZS5jYXRjaCgoKSA9PiB7fSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cbiAgb25TZXR0bGUocHJvbWlzZSwga2V5LCBlcnJvciwgZGF0YSkge1xuICAgIGlmICh0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQgJiYgZXJyb3IgaW5zdGFuY2VvZiBBYm9ydGVkRGVmZXJyZWRFcnJvcikge1xuICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsKCk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGVycm9yXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuICAgIHRoaXMucGVuZGluZ0tleXNTZXQuZGVsZXRlKGtleSk7XG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgLy8gTm90aGluZyBsZWZ0IHRvIGFib3J0IVxuICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsKCk7XG4gICAgfVxuICAgIC8vIElmIHRoZSBwcm9taXNlIHdhcyByZXNvbHZlZC9yZWplY3RlZCB3aXRoIHVuZGVmaW5lZCwgd2UnbGwgdGhyb3cgYW4gZXJyb3IgYXMgeW91XG4gICAgLy8gc2hvdWxkIGFsd2F5cyByZXNvbHZlIHdpdGggYSB2YWx1ZSBvciBudWxsXG4gICAgaWYgKGVycm9yID09PSB1bmRlZmluZWQgJiYgZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBsZXQgdW5kZWZpbmVkRXJyb3IgPSBuZXcgRXJyb3IoXCJEZWZlcnJlZCBkYXRhIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJlc29sdmVkL3JlamVjdGVkIHdpdGggYHVuZGVmaW5lZGAsIFwiICsgXCJ5b3UgbXVzdCByZXNvbHZlL3JlamVjdCB3aXRoIGEgdmFsdWUgb3IgYG51bGxgLlwiKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gdW5kZWZpbmVkRXJyb3JcbiAgICAgIH0pO1xuICAgICAgdGhpcy5lbWl0KGZhbHNlLCBrZXkpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHVuZGVmaW5lZEVycm9yKTtcbiAgICB9XG4gICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiBlcnJvclxuICAgICAgfSk7XG4gICAgICB0aGlzLmVtaXQoZmFsc2UsIGtleSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZGF0YVwiLCB7XG4gICAgICBnZXQ6ICgpID0+IGRhdGFcbiAgICB9KTtcbiAgICB0aGlzLmVtaXQoZmFsc2UsIGtleSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbiAgZW1pdChhYm9ydGVkLCBzZXR0bGVkS2V5KSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5mb3JFYWNoKHN1YnNjcmliZXIgPT4gc3Vic2NyaWJlcihhYm9ydGVkLCBzZXR0bGVkS2V5KSk7XG4gIH1cbiAgc3Vic2NyaWJlKGZuKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5hZGQoZm4pO1xuICAgIHJldHVybiAoKSA9PiB0aGlzLnN1YnNjcmliZXJzLmRlbGV0ZShmbik7XG4gIH1cbiAgY2FuY2VsKCkge1xuICAgIHRoaXMuY29udHJvbGxlci5hYm9ydCgpO1xuICAgIHRoaXMucGVuZGluZ0tleXNTZXQuZm9yRWFjaCgodiwgaykgPT4gdGhpcy5wZW5kaW5nS2V5c1NldC5kZWxldGUoaykpO1xuICAgIHRoaXMuZW1pdCh0cnVlKTtcbiAgfVxuICBhc3luYyByZXNvbHZlRGF0YShzaWduYWwpIHtcbiAgICBsZXQgYWJvcnRlZCA9IGZhbHNlO1xuICAgIGlmICghdGhpcy5kb25lKSB7XG4gICAgICBsZXQgb25BYm9ydCA9ICgpID0+IHRoaXMuY2FuY2VsKCk7XG4gICAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgICAgYWJvcnRlZCA9IGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICB0aGlzLnN1YnNjcmliZShhYm9ydGVkID0+IHtcbiAgICAgICAgICBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgICAgICAgIGlmIChhYm9ydGVkIHx8IHRoaXMuZG9uZSkge1xuICAgICAgICAgICAgcmVzb2x2ZShhYm9ydGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhYm9ydGVkO1xuICB9XG4gIGdldCBkb25lKCkge1xuICAgIHJldHVybiB0aGlzLnBlbmRpbmdLZXlzU2V0LnNpemUgPT09IDA7XG4gIH1cbiAgZ2V0IHVud3JhcHBlZERhdGEoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuZGF0YSAhPT0gbnVsbCAmJiB0aGlzLmRvbmUsIFwiQ2FuIG9ubHkgdW53cmFwIGRhdGEgb24gaW5pdGlhbGl6ZWQgYW5kIHNldHRsZWQgZGVmZXJyZWRzXCIpO1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLmRhdGEpLnJlZHVjZSgoYWNjLCBfcmVmMikgPT4ge1xuICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWYyO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgIFtrZXldOiB1bndyYXBUcmFja2VkUHJvbWlzZSh2YWx1ZSlcbiAgICAgIH0pO1xuICAgIH0sIHt9KTtcbiAgfVxuICBnZXQgcGVuZGluZ0tleXMoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5wZW5kaW5nS2V5c1NldCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzVHJhY2tlZFByb21pc2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSAmJiB2YWx1ZS5fdHJhY2tlZCA9PT0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHVud3JhcFRyYWNrZWRQcm9taXNlKHZhbHVlKSB7XG4gIGlmICghaXNUcmFja2VkUHJvbWlzZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHZhbHVlLl9lcnJvcikge1xuICAgIHRocm93IHZhbHVlLl9lcnJvcjtcbiAgfVxuICByZXR1cm4gdmFsdWUuX2RhdGE7XG59XG5jb25zdCBkZWZlciA9IGZ1bmN0aW9uIGRlZmVyKGRhdGEsIGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSB7fTtcbiAgfVxuICBsZXQgcmVzcG9uc2VJbml0ID0gdHlwZW9mIGluaXQgPT09IFwibnVtYmVyXCIgPyB7XG4gICAgc3RhdHVzOiBpbml0XG4gIH0gOiBpbml0O1xuICByZXR1cm4gbmV3IERlZmVycmVkRGF0YShkYXRhLCByZXNwb25zZUluaXQpO1xufTtcbi8qKlxuICogQSByZWRpcmVjdCByZXNwb25zZS4gU2V0cyB0aGUgc3RhdHVzIGNvZGUgYW5kIHRoZSBgTG9jYXRpb25gIGhlYWRlci5cbiAqIERlZmF1bHRzIHRvIFwiMzAyIEZvdW5kXCIuXG4gKi9cbmNvbnN0IHJlZGlyZWN0ID0gZnVuY3Rpb24gcmVkaXJlY3QodXJsLCBpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0gMzAyO1xuICB9XG4gIGxldCByZXNwb25zZUluaXQgPSBpbml0O1xuICBpZiAodHlwZW9mIHJlc3BvbnNlSW5pdCA9PT0gXCJudW1iZXJcIikge1xuICAgIHJlc3BvbnNlSW5pdCA9IHtcbiAgICAgIHN0YXR1czogcmVzcG9uc2VJbml0XG4gICAgfTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcmVzcG9uc2VJbml0LnN0YXR1cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJlc3BvbnNlSW5pdC5zdGF0dXMgPSAzMDI7XG4gIH1cbiAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhyZXNwb25zZUluaXQuaGVhZGVycyk7XG4gIGhlYWRlcnMuc2V0KFwiTG9jYXRpb25cIiwgdXJsKTtcbiAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCBfZXh0ZW5kcyh7fSwgcmVzcG9uc2VJbml0LCB7XG4gICAgaGVhZGVyc1xuICB9KSk7XG59O1xuLyoqXG4gKiBBIHJlZGlyZWN0IHJlc3BvbnNlIHRoYXQgd2lsbCBmb3JjZSBhIGRvY3VtZW50IHJlbG9hZCB0byB0aGUgbmV3IGxvY2F0aW9uLlxuICogU2V0cyB0aGUgc3RhdHVzIGNvZGUgYW5kIHRoZSBgTG9jYXRpb25gIGhlYWRlci5cbiAqIERlZmF1bHRzIHRvIFwiMzAyIEZvdW5kXCIuXG4gKi9cbmNvbnN0IHJlZGlyZWN0RG9jdW1lbnQgPSAodXJsLCBpbml0KSA9PiB7XG4gIGxldCByZXNwb25zZSA9IHJlZGlyZWN0KHVybCwgaW5pdCk7XG4gIHJlc3BvbnNlLmhlYWRlcnMuc2V0KFwiWC1SZW1peC1SZWxvYWQtRG9jdW1lbnRcIiwgXCJ0cnVlXCIpO1xuICByZXR1cm4gcmVzcG9uc2U7XG59O1xuLyoqXG4gKiBAcHJpdmF0ZVxuICogVXRpbGl0eSBjbGFzcyB3ZSB1c2UgdG8gaG9sZCBhdXRvLXVud3JhcHBlZCA0eHgvNXh4IFJlc3BvbnNlIGJvZGllc1xuICovXG5jbGFzcyBFcnJvclJlc3BvbnNlIHtcbiAgY29uc3RydWN0b3Ioc3RhdHVzLCBzdGF0dXNUZXh0LCBkYXRhLCBpbnRlcm5hbCkge1xuICAgIGlmIChpbnRlcm5hbCA9PT0gdm9pZCAwKSB7XG4gICAgICBpbnRlcm5hbCA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICB0aGlzLnN0YXR1c1RleHQgPSBzdGF0dXNUZXh0IHx8IFwiXCI7XG4gICAgdGhpcy5pbnRlcm5hbCA9IGludGVybmFsO1xuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGEudG9TdHJpbmcoKTtcbiAgICAgIHRoaXMuZXJyb3IgPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cbiAgfVxufVxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZXJyb3IgaXMgYW4gRXJyb3JSZXNwb25zZSBnZW5lcmF0ZWQgZnJvbSBhIDR4eC81eHhcbiAqIFJlc3BvbnNlIHRocm93biBmcm9tIGFuIGFjdGlvbi9sb2FkZXJcbiAqL1xuZnVuY3Rpb24gaXNSb3V0ZUVycm9yUmVzcG9uc2UoZXJyb3IpIHtcbiAgcmV0dXJuIGVycm9yICE9IG51bGwgJiYgdHlwZW9mIGVycm9yLnN0YXR1cyA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgZXJyb3Iuc3RhdHVzVGV4dCA9PT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgZXJyb3IuaW50ZXJuYWwgPT09IFwiYm9vbGVhblwiICYmIFwiZGF0YVwiIGluIGVycm9yO1xufVxuXG5jb25zdCB2YWxpZE11dGF0aW9uTWV0aG9kc0FyciA9IFtcInBvc3RcIiwgXCJwdXRcIiwgXCJwYXRjaFwiLCBcImRlbGV0ZVwiXTtcbmNvbnN0IHZhbGlkTXV0YXRpb25NZXRob2RzID0gbmV3IFNldCh2YWxpZE11dGF0aW9uTWV0aG9kc0Fycik7XG5jb25zdCB2YWxpZFJlcXVlc3RNZXRob2RzQXJyID0gW1wiZ2V0XCIsIC4uLnZhbGlkTXV0YXRpb25NZXRob2RzQXJyXTtcbmNvbnN0IHZhbGlkUmVxdWVzdE1ldGhvZHMgPSBuZXcgU2V0KHZhbGlkUmVxdWVzdE1ldGhvZHNBcnIpO1xuY29uc3QgcmVkaXJlY3RTdGF0dXNDb2RlcyA9IG5ldyBTZXQoWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XSk7XG5jb25zdCByZWRpcmVjdFByZXNlcnZlTWV0aG9kU3RhdHVzQ29kZXMgPSBuZXcgU2V0KFszMDcsIDMwOF0pO1xuY29uc3QgSURMRV9OQVZJR0FUSU9OID0ge1xuICBzdGF0ZTogXCJpZGxlXCIsXG4gIGxvY2F0aW9uOiB1bmRlZmluZWQsXG4gIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICBqc29uOiB1bmRlZmluZWQsXG4gIHRleHQ6IHVuZGVmaW5lZFxufTtcbmNvbnN0IElETEVfRkVUQ0hFUiA9IHtcbiAgc3RhdGU6IFwiaWRsZVwiLFxuICBkYXRhOiB1bmRlZmluZWQsXG4gIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICBqc29uOiB1bmRlZmluZWQsXG4gIHRleHQ6IHVuZGVmaW5lZFxufTtcbmNvbnN0IElETEVfQkxPQ0tFUiA9IHtcbiAgc3RhdGU6IFwidW5ibG9ja2VkXCIsXG4gIHByb2NlZWQ6IHVuZGVmaW5lZCxcbiAgcmVzZXQ6IHVuZGVmaW5lZCxcbiAgbG9jYXRpb246IHVuZGVmaW5lZFxufTtcbmNvbnN0IEFCU09MVVRFX1VSTF9SRUdFWCA9IC9eKD86W2Etel1bYS16MC05Ky4tXSo6fFxcL1xcLykvaTtcbmNvbnN0IGRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXMgPSByb3V0ZSA9PiAoe1xuICBoYXNFcnJvckJvdW5kYXJ5OiBCb29sZWFuKHJvdXRlLmhhc0Vycm9yQm91bmRhcnkpXG59KTtcbi8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBjcmVhdGVSb3V0ZXJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAqIENyZWF0ZSBhIHJvdXRlciBhbmQgbGlzdGVuIHRvIGhpc3RvcnkgUE9QIG5hdmlnYXRpb25zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlcihpbml0KSB7XG4gIGNvbnN0IHJvdXRlcldpbmRvdyA9IGluaXQud2luZG93ID8gaW5pdC53aW5kb3cgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdW5kZWZpbmVkO1xuICBjb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2Ygcm91dGVyV2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiByb3V0ZXJXaW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHJvdXRlcldpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiO1xuICBjb25zdCBpc1NlcnZlciA9ICFpc0Jyb3dzZXI7XG4gIGludmFyaWFudChpbml0LnJvdXRlcy5sZW5ndGggPiAwLCBcIllvdSBtdXN0IHByb3ZpZGUgYSBub24tZW1wdHkgcm91dGVzIGFycmF5IHRvIGNyZWF0ZVJvdXRlclwiKTtcbiAgbGV0IG1hcFJvdXRlUHJvcGVydGllcztcbiAgaWYgKGluaXQubWFwUm91dGVQcm9wZXJ0aWVzKSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gaW5pdC5tYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH0gZWxzZSBpZiAoaW5pdC5kZXRlY3RFcnJvckJvdW5kYXJ5KSB7XG4gICAgLy8gSWYgdGhleSBhcmUgc3RpbGwgdXNpbmcgdGhlIGRlcHJlY2F0ZWQgdmVyc2lvbiwgd3JhcCBpdCB3aXRoIHRoZSBuZXcgQVBJXG4gICAgbGV0IGRldGVjdEVycm9yQm91bmRhcnkgPSBpbml0LmRldGVjdEVycm9yQm91bmRhcnk7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gcm91dGUgPT4gKHtcbiAgICAgIGhhc0Vycm9yQm91bmRhcnk6IGRldGVjdEVycm9yQm91bmRhcnkocm91dGUpXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gZGVmYXVsdE1hcFJvdXRlUHJvcGVydGllcztcbiAgfVxuICAvLyBSb3V0ZXMga2V5ZWQgYnkgSURcbiAgbGV0IG1hbmlmZXN0ID0ge307XG4gIC8vIFJvdXRlcyBpbiB0cmVlIGZvcm1hdCBmb3IgbWF0Y2hpbmdcbiAgbGV0IGRhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKGluaXQucm91dGVzLCBtYXBSb3V0ZVByb3BlcnRpZXMsIHVuZGVmaW5lZCwgbWFuaWZlc3QpO1xuICBsZXQgaW5GbGlnaHREYXRhUm91dGVzO1xuICBsZXQgYmFzZW5hbWUgPSBpbml0LmJhc2VuYW1lIHx8IFwiL1wiO1xuICAvLyBDb25maWcgZHJpdmVuIGJlaGF2aW9yIGZsYWdzXG4gIGxldCBmdXR1cmUgPSBfZXh0ZW5kcyh7XG4gICAgdjdfbm9ybWFsaXplRm9ybU1ldGhvZDogZmFsc2UsXG4gICAgdjdfcHJlcGVuZEJhc2VuYW1lOiBmYWxzZVxuICB9LCBpbml0LmZ1dHVyZSk7XG4gIC8vIENsZWFudXAgZnVuY3Rpb24gZm9yIGhpc3RvcnlcbiAgbGV0IHVubGlzdGVuSGlzdG9yeSA9IG51bGw7XG4gIC8vIEV4dGVybmFsbHktcHJvdmlkZWQgZnVuY3Rpb25zIHRvIGNhbGwgb24gYWxsIHN0YXRlIGNoYW5nZXNcbiAgbGV0IHN1YnNjcmliZXJzID0gbmV3IFNldCgpO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIG9iamVjdCB0byBob2xkIHNjcm9sbCByZXN0b3JhdGlvbiBsb2NhdGlvbnMgZHVyaW5nIHJvdXRpbmdcbiAgbGV0IHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gbnVsbDtcbiAgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBmdW5jdGlvbiB0byBnZXQgc2Nyb2xsIHJlc3RvcmF0aW9uIGtleXNcbiAgbGV0IGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ID0gbnVsbDtcbiAgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBmdW5jdGlvbiB0byBnZXQgY3VycmVudCBzY3JvbGwgcG9zaXRpb25cbiAgbGV0IGdldFNjcm9sbFBvc2l0aW9uID0gbnVsbDtcbiAgLy8gT25lLXRpbWUgZmxhZyB0byBjb250cm9sIHRoZSBpbml0aWFsIGh5ZHJhdGlvbiBzY3JvbGwgcmVzdG9yYXRpb24uICBCZWNhdXNlXG4gIC8vIHdlIGRvbid0IGdldCB0aGUgc2F2ZWQgcG9zaXRpb25zIGZyb20gPFNjcm9sbFJlc3RvcmF0aW9uIC8+IHVudGlsIF9hZnRlcl9cbiAgLy8gdGhlIGluaXRpYWwgcmVuZGVyLCB3ZSBuZWVkIHRvIG1hbnVhbGx5IHRyaWdnZXIgYSBzZXBhcmF0ZSB1cGRhdGVTdGF0ZSB0b1xuICAvLyBzZW5kIGFsb25nIHRoZSByZXN0b3JlU2Nyb2xsUG9zaXRpb25cbiAgLy8gU2V0IHRvIHRydWUgaWYgd2UgaGF2ZSBgaHlkcmF0aW9uRGF0YWAgc2luY2Ugd2UgYXNzdW1lIHdlIHdlcmUgU1NSJ2QgYW5kIHRoYXRcbiAgLy8gU1NSIGRpZCB0aGUgaW5pdGlhbCBzY3JvbGwgcmVzdG9yYXRpb24uXG4gIGxldCBpbml0aWFsU2Nyb2xsUmVzdG9yZWQgPSBpbml0Lmh5ZHJhdGlvbkRhdGEgIT0gbnVsbDtcbiAgbGV0IGluaXRpYWxNYXRjaGVzID0gbWF0Y2hSb3V0ZXMoZGF0YVJvdXRlcywgaW5pdC5oaXN0b3J5LmxvY2F0aW9uLCBiYXNlbmFtZSk7XG4gIGxldCBpbml0aWFsRXJyb3JzID0gbnVsbDtcbiAgaWYgKGluaXRpYWxNYXRjaGVzID09IG51bGwpIHtcbiAgICAvLyBJZiB3ZSBkbyBub3QgbWF0Y2ggYSB1c2VyLXByb3ZpZGVkLXJvdXRlLCBmYWxsIGJhY2sgdG8gdGhlIHJvb3RcbiAgICAvLyB0byBhbGxvdyB0aGUgZXJyb3IgYm91bmRhcnkgdG8gdGFrZSBvdmVyXG4gICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgIHBhdGhuYW1lOiBpbml0Lmhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWVcbiAgICB9KTtcbiAgICBsZXQge1xuICAgICAgbWF0Y2hlcyxcbiAgICAgIHJvdXRlXG4gICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGluaXRpYWxFcnJvcnMgPSB7XG4gICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgIH07XG4gIH1cbiAgbGV0IGluaXRpYWxpemVkID1cbiAgLy8gQWxsIGluaXRpYWxNYXRjaGVzIG5lZWQgdG8gYmUgbG9hZGVkIGJlZm9yZSB3ZSdyZSByZWFkeS4gIElmIHdlIGhhdmUgbGF6eVxuICAvLyBmdW5jdGlvbnMgYXJvdW5kIHN0aWxsIHRoZW4gd2UnbGwgbmVlZCB0byBydW4gdGhlbSBpbiBpbml0aWFsaXplKClcbiAgIWluaXRpYWxNYXRjaGVzLnNvbWUobSA9PiBtLnJvdXRlLmxhenkpICYmIChcbiAgLy8gQW5kIHdlIGhhdmUgdG8gZWl0aGVyIGhhdmUgbm8gbG9hZGVycyBvciBoYXZlIGJlZW4gcHJvdmlkZWQgaHlkcmF0aW9uRGF0YVxuICAhaW5pdGlhbE1hdGNoZXMuc29tZShtID0+IG0ucm91dGUubG9hZGVyKSB8fCBpbml0Lmh5ZHJhdGlvbkRhdGEgIT0gbnVsbCk7XG4gIGxldCByb3V0ZXI7XG4gIGxldCBzdGF0ZSA9IHtcbiAgICBoaXN0b3J5QWN0aW9uOiBpbml0Lmhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBpbml0Lmhpc3RvcnkubG9jYXRpb24sXG4gICAgbWF0Y2hlczogaW5pdGlhbE1hdGNoZXMsXG4gICAgaW5pdGlhbGl6ZWQsXG4gICAgbmF2aWdhdGlvbjogSURMRV9OQVZJR0FUSU9OLFxuICAgIC8vIERvbid0IHJlc3RvcmUgb24gaW5pdGlhbCB1cGRhdGVTdGF0ZSgpIGlmIHdlIHdlcmUgU1NSJ2RcbiAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IGluaXQuaHlkcmF0aW9uRGF0YSAhPSBudWxsID8gZmFsc2UgOiBudWxsLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldDogZmFsc2UsXG4gICAgcmV2YWxpZGF0aW9uOiBcImlkbGVcIixcbiAgICBsb2FkZXJEYXRhOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmxvYWRlckRhdGEgfHwge30sXG4gICAgYWN0aW9uRGF0YTogaW5pdC5oeWRyYXRpb25EYXRhICYmIGluaXQuaHlkcmF0aW9uRGF0YS5hY3Rpb25EYXRhIHx8IG51bGwsXG4gICAgZXJyb3JzOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmVycm9ycyB8fCBpbml0aWFsRXJyb3JzLFxuICAgIGZldGNoZXJzOiBuZXcgTWFwKCksXG4gICAgYmxvY2tlcnM6IG5ldyBNYXAoKVxuICB9O1xuICAvLyAtLSBTdGF0ZWZ1bCBpbnRlcm5hbCB2YXJpYWJsZXMgdG8gbWFuYWdlIG5hdmlnYXRpb25zIC0tXG4gIC8vIEN1cnJlbnQgbmF2aWdhdGlvbiBpbiBwcm9ncmVzcyAodG8gYmUgY29tbWl0dGVkIGluIGNvbXBsZXRlTmF2aWdhdGlvbilcbiAgbGV0IHBlbmRpbmdBY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAvLyBTaG91bGQgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBwcmV2ZW50IHRoZSBzY3JvbGwgcmVzZXQgaWYgc2Nyb2xsIGNhbm5vdFxuICAvLyBiZSByZXN0b3JlZD9cbiAgbGV0IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSBmYWxzZTtcbiAgLy8gQWJvcnRDb250cm9sbGVyIGZvciB0aGUgYWN0aXZlIG5hdmlnYXRpb25cbiAgbGV0IHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcjtcbiAgLy8gV2UgdXNlIHRoaXMgdG8gYXZvaWQgdG91Y2hpbmcgaGlzdG9yeSBpbiBjb21wbGV0ZU5hdmlnYXRpb24gaWYgYVxuICAvLyByZXZhbGlkYXRpb24gaXMgZW50aXJlbHkgdW5pbnRlcnJ1cHRlZFxuICBsZXQgaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uID0gZmFsc2U7XG4gIC8vIFVzZSB0aGlzIGludGVybmFsIGZsYWcgdG8gZm9yY2UgcmV2YWxpZGF0aW9uIG9mIGFsbCBsb2FkZXJzOlxuICAvLyAgLSBzdWJtaXNzaW9ucyAoY29tcGxldGVkIG9yIGludGVycnVwdGVkKVxuICAvLyAgLSB1c2VSZXZhbGlkYXRvcigpXG4gIC8vICAtIFgtUmVtaXgtUmV2YWxpZGF0ZSAoZnJvbSByZWRpcmVjdClcbiAgbGV0IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgLy8gVXNlIHRoaXMgaW50ZXJuYWwgYXJyYXkgdG8gY2FwdHVyZSByb3V0ZXMgdGhhdCByZXF1aXJlIHJldmFsaWRhdGlvbiBkdWVcbiAgLy8gdG8gYSBjYW5jZWxsZWQgZGVmZXJyZWQgb24gYWN0aW9uIHN1Ym1pc3Npb25cbiAgbGV0IGNhbmNlbGxlZERlZmVycmVkUm91dGVzID0gW107XG4gIC8vIFVzZSB0aGlzIGludGVybmFsIGFycmF5IHRvIGNhcHR1cmUgZmV0Y2hlciBsb2FkcyB0aGF0IHdlcmUgY2FuY2VsbGVkIGJ5IGFuXG4gIC8vIGFjdGlvbiBuYXZpZ2F0aW9uIGFuZCByZXF1aXJlIHJldmFsaWRhdGlvblxuICBsZXQgY2FuY2VsbGVkRmV0Y2hlckxvYWRzID0gW107XG4gIC8vIEFib3J0Q29udHJvbGxlcnMgZm9yIGFueSBpbi1mbGlnaHQgZmV0Y2hlcnNcbiAgbGV0IGZldGNoQ29udHJvbGxlcnMgPSBuZXcgTWFwKCk7XG4gIC8vIFRyYWNrIGxvYWRzIGJhc2VkIG9uIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IHN0YXJ0ZWRcbiAgbGV0IGluY3JlbWVudGluZ0xvYWRJZCA9IDA7XG4gIC8vIFRyYWNrIHRoZSBvdXRzdGFuZGluZyBwZW5kaW5nIG5hdmlnYXRpb24gZGF0YSBsb2FkIHRvIGJlIGNvbXBhcmVkIGFnYWluc3RcbiAgLy8gdGhlIGdsb2JhbGx5IGluY3JlbWVudGluZyBsb2FkIHdoZW4gYSBmZXRjaGVyIGxvYWQgbGFuZHMgYWZ0ZXIgYSBjb21wbGV0ZWRcbiAgLy8gbmF2aWdhdGlvblxuICBsZXQgcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPSAtMTtcbiAgLy8gRmV0Y2hlcnMgdGhhdCB0cmlnZ2VyZWQgZGF0YSByZWxvYWRzIGFzIGEgcmVzdWx0IG9mIHRoZWlyIGFjdGlvbnNcbiAgbGV0IGZldGNoUmVsb2FkSWRzID0gbmV3IE1hcCgpO1xuICAvLyBGZXRjaGVycyB0aGF0IHRyaWdnZXJlZCByZWRpcmVjdCBuYXZpZ2F0aW9uc1xuICBsZXQgZmV0Y2hSZWRpcmVjdElkcyA9IG5ldyBTZXQoKTtcbiAgLy8gTW9zdCByZWNlbnQgaHJlZi9tYXRjaCBmb3IgZmV0Y2hlci5sb2FkIGNhbGxzIGZvciBmZXRjaGVyc1xuICBsZXQgZmV0Y2hMb2FkTWF0Y2hlcyA9IG5ldyBNYXAoKTtcbiAgLy8gU3RvcmUgRGVmZXJyZWREYXRhIGluc3RhbmNlcyBmb3IgYWN0aXZlIHJvdXRlIG1hdGNoZXMuICBXaGVuIGFcbiAgLy8gcm91dGUgbG9hZGVyIHJldHVybnMgZGVmZXIoKSB3ZSBzdGljayBvbmUgaW4gaGVyZS4gIFRoZW4sIHdoZW4gYSBuZXN0ZWRcbiAgLy8gcHJvbWlzZSByZXNvbHZlcyB3ZSB1cGRhdGUgbG9hZGVyRGF0YS4gIElmIGEgbmV3IG5hdmlnYXRpb24gc3RhcnRzIHdlXG4gIC8vIGNhbmNlbCBhY3RpdmUgZGVmZXJyZWRzIGZvciBlbGltaW5hdGVkIHJvdXRlcy5cbiAgbGV0IGFjdGl2ZURlZmVycmVkcyA9IG5ldyBNYXAoKTtcbiAgLy8gU3RvcmUgYmxvY2tlciBmdW5jdGlvbnMgaW4gYSBzZXBhcmF0ZSBNYXAgb3V0c2lkZSBvZiByb3V0ZXIgc3RhdGUgc2luY2VcbiAgLy8gd2UgZG9uJ3QgbmVlZCB0byB1cGRhdGUgVUkgc3RhdGUgaWYgdGhleSBjaGFuZ2VcbiAgbGV0IGJsb2NrZXJGdW5jdGlvbnMgPSBuZXcgTWFwKCk7XG4gIC8vIEZsYWcgdG8gaWdub3JlIHRoZSBuZXh0IGhpc3RvcnkgdXBkYXRlLCBzbyB3ZSBjYW4gcmV2ZXJ0IHRoZSBVUkwgY2hhbmdlIG9uXG4gIC8vIGEgUE9QIG5hdmlnYXRpb24gdGhhdCB3YXMgYmxvY2tlZCBieSB0aGUgdXNlciB3aXRob3V0IHRvdWNoaW5nIHJvdXRlciBzdGF0ZVxuICBsZXQgaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUgPSBmYWxzZTtcbiAgLy8gSW5pdGlhbGl6ZSB0aGUgcm91dGVyLCBhbGwgc2lkZSBlZmZlY3RzIHNob3VsZCBiZSBraWNrZWQgb2ZmIGZyb20gaGVyZS5cbiAgLy8gSW1wbGVtZW50ZWQgYXMgYSBGbHVlbnQgQVBJIGZvciBlYXNlIG9mOlxuICAvLyAgIGxldCByb3V0ZXIgPSBjcmVhdGVSb3V0ZXIoaW5pdCkuaW5pdGlhbGl6ZSgpO1xuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIC8vIElmIGhpc3RvcnkgaW5mb3JtcyB1cyBvZiBhIFBPUCBuYXZpZ2F0aW9uLCBzdGFydCB0aGUgbmF2aWdhdGlvbiBidXQgZG8gbm90IHVwZGF0ZVxuICAgIC8vIHN0YXRlLiAgV2UnbGwgdXBkYXRlIG91ciBvd24gc3RhdGUgb25jZSB0aGUgbmF2aWdhdGlvbiBjb21wbGV0ZXNcbiAgICB1bmxpc3Rlbkhpc3RvcnkgPSBpbml0Lmhpc3RvcnkubGlzdGVuKF9yZWYgPT4ge1xuICAgICAgbGV0IHtcbiAgICAgICAgYWN0aW9uOiBoaXN0b3J5QWN0aW9uLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgZGVsdGFcbiAgICAgIH0gPSBfcmVmO1xuICAgICAgLy8gSWdub3JlIHRoaXMgZXZlbnQgaWYgaXQgd2FzIGp1c3QgdXMgcmVzZXR0aW5nIHRoZSBVUkwgZnJvbSBhXG4gICAgICAvLyBibG9ja2VkIFBPUCBuYXZpZ2F0aW9uXG4gICAgICBpZiAoaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUpIHtcbiAgICAgICAgaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgd2FybmluZyhibG9ja2VyRnVuY3Rpb25zLnNpemUgPT09IDAgfHwgZGVsdGEgIT0gbnVsbCwgXCJZb3UgYXJlIHRyeWluZyB0byB1c2UgYSBibG9ja2VyIG9uIGEgUE9QIG5hdmlnYXRpb24gdG8gYSBsb2NhdGlvbiBcIiArIFwidGhhdCB3YXMgbm90IGNyZWF0ZWQgYnkgQHJlbWl4LXJ1bi9yb3V0ZXIuIFRoaXMgd2lsbCBmYWlsIHNpbGVudGx5IGluIFwiICsgXCJwcm9kdWN0aW9uLiBUaGlzIGNhbiBoYXBwZW4gaWYgeW91IGFyZSBuYXZpZ2F0aW5nIG91dHNpZGUgdGhlIHJvdXRlciBcIiArIFwidmlhIGB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGVgL2B3aW5kb3cubG9jYXRpb24uaGFzaGAgaW5zdGVhZCBvZiB1c2luZyBcIiArIFwicm91dGVyIG5hdmlnYXRpb24gQVBJcy4gIFRoaXMgY2FuIGFsc28gaGFwcGVuIGlmIHlvdSBhcmUgdXNpbmcgXCIgKyBcImNyZWF0ZUhhc2hSb3V0ZXIgYW5kIHRoZSB1c2VyIG1hbnVhbGx5IGNoYW5nZXMgdGhlIFVSTC5cIik7XG4gICAgICBsZXQgYmxvY2tlcktleSA9IHNob3VsZEJsb2NrTmF2aWdhdGlvbih7XG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG5leHRMb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICAgIH0pO1xuICAgICAgaWYgKGJsb2NrZXJLZXkgJiYgZGVsdGEgIT0gbnVsbCkge1xuICAgICAgICAvLyBSZXN0b3JlIHRoZSBVUkwgdG8gbWF0Y2ggdGhlIGN1cnJlbnQgVUksIGJ1dCBkb24ndCB1cGRhdGUgcm91dGVyIHN0YXRlXG4gICAgICAgIGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgaW5pdC5oaXN0b3J5LmdvKGRlbHRhICogLTEpO1xuICAgICAgICAvLyBQdXQgdGhlIGJsb2NrZXIgaW50byBhIGJsb2NrZWQgc3RhdGVcbiAgICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgICAgc3RhdGU6IFwiYmxvY2tlZFwiLFxuICAgICAgICAgIGxvY2F0aW9uLFxuICAgICAgICAgIHByb2NlZWQoKSB7XG4gICAgICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgICAgICAgc3RhdGU6IFwicHJvY2VlZGluZ1wiLFxuICAgICAgICAgICAgICBwcm9jZWVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIHJlc2V0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIGxvY2F0aW9uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIFJlLWRvIHRoZSBzYW1lIFBPUCBuYXZpZ2F0aW9uIHdlIGp1c3QgYmxvY2tlZFxuICAgICAgICAgICAgaW5pdC5oaXN0b3J5LmdvKGRlbHRhKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlc2V0KCkge1xuICAgICAgICAgICAgbGV0IGJsb2NrZXJzID0gbmV3IE1hcChzdGF0ZS5ibG9ja2Vycyk7XG4gICAgICAgICAgICBibG9ja2Vycy5zZXQoYmxvY2tlcktleSwgSURMRV9CTE9DS0VSKTtcbiAgICAgICAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgICAgICAgYmxvY2tlcnNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGFydE5hdmlnYXRpb24oaGlzdG9yeUFjdGlvbiwgbG9jYXRpb24pO1xuICAgIH0pO1xuICAgIC8vIEtpY2sgb2ZmIGluaXRpYWwgZGF0YSBsb2FkIGlmIG5lZWRlZC4gIFVzZSBQb3AgdG8gYXZvaWQgbW9kaWZ5aW5nIGhpc3RvcnlcbiAgICAvLyBOb3RlIHdlIGRvbid0IGRvIGFueSBoYW5kbGluZyBvZiBsYXp5IGhlcmUuICBGb3IgU1BBJ3MgaXQnbGwgZ2V0IGhhbmRsZWRcbiAgICAvLyBpbiB0aGUgbm9ybWFsIG5hdmlnYXRpb24gZmxvdy4gIEZvciBTU1IgaXQncyBleHBlY3RlZCB0aGF0IGxhenkgbW9kdWxlcyBhcmVcbiAgICAvLyByZXNvbHZlZCBwcmlvciB0byByb3V0ZXIgY3JlYXRpb24gc2luY2Ugd2UgY2FuJ3QgZ28gaW50byBhIGZhbGxiYWNrRWxlbWVudFxuICAgIC8vIFVJIGZvciBTU1InZCBhcHBzXG4gICAgaWYgKCFzdGF0ZS5pbml0aWFsaXplZCkge1xuICAgICAgc3RhcnROYXZpZ2F0aW9uKEFjdGlvbi5Qb3AsIHN0YXRlLmxvY2F0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIHJvdXRlcjtcbiAgfVxuICAvLyBDbGVhbiB1cCBhIHJvdXRlciBhbmQgaXQncyBzaWRlIGVmZmVjdHNcbiAgZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICBpZiAodW5saXN0ZW5IaXN0b3J5KSB7XG4gICAgICB1bmxpc3Rlbkhpc3RvcnkoKTtcbiAgICB9XG4gICAgc3Vic2NyaWJlcnMuY2xlYXIoKTtcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG4gICAgc3RhdGUuZmV0Y2hlcnMuZm9yRWFjaCgoXywga2V5KSA9PiBkZWxldGVGZXRjaGVyKGtleSkpO1xuICAgIHN0YXRlLmJsb2NrZXJzLmZvckVhY2goKF8sIGtleSkgPT4gZGVsZXRlQmxvY2tlcihrZXkpKTtcbiAgfVxuICAvLyBTdWJzY3JpYmUgdG8gc3RhdGUgdXBkYXRlcyBmb3IgdGhlIHJvdXRlclxuICBmdW5jdGlvbiBzdWJzY3JpYmUoZm4pIHtcbiAgICBzdWJzY3JpYmVycy5hZGQoZm4pO1xuICAgIHJldHVybiAoKSA9PiBzdWJzY3JpYmVycy5kZWxldGUoZm4pO1xuICB9XG4gIC8vIFVwZGF0ZSBvdXIgc3RhdGUgYW5kIG5vdGlmeSB0aGUgY2FsbGluZyBjb250ZXh0IG9mIHRoZSBjaGFuZ2VcbiAgZnVuY3Rpb24gdXBkYXRlU3RhdGUobmV3U3RhdGUpIHtcbiAgICBzdGF0ZSA9IF9leHRlbmRzKHt9LCBzdGF0ZSwgbmV3U3RhdGUpO1xuICAgIHN1YnNjcmliZXJzLmZvckVhY2goc3Vic2NyaWJlciA9PiBzdWJzY3JpYmVyKHN0YXRlKSk7XG4gIH1cbiAgLy8gQ29tcGxldGUgYSBuYXZpZ2F0aW9uIHJldHVybmluZyB0aGUgc3RhdGUubmF2aWdhdGlvbiBiYWNrIHRvIHRoZSBJRExFX05BVklHQVRJT05cbiAgLy8gYW5kIHNldHRpbmcgc3RhdGUuW2hpc3RvcnlBY3Rpb24vbG9jYXRpb24vbWF0Y2hlc10gdG8gdGhlIG5ldyByb3V0ZS5cbiAgLy8gLSBMb2NhdGlvbiBpcyBhIHJlcXVpcmVkIHBhcmFtXG4gIC8vIC0gTmF2aWdhdGlvbiB3aWxsIGFsd2F5cyBiZSBzZXQgdG8gSURMRV9OQVZJR0FUSU9OXG4gIC8vIC0gQ2FuIHBhc3MgYW55IG90aGVyIHN0YXRlIGluIG5ld1N0YXRlXG4gIGZ1bmN0aW9uIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwgbmV3U3RhdGUpIHtcbiAgICB2YXIgX2xvY2F0aW9uJHN0YXRlLCBfbG9jYXRpb24kc3RhdGUyO1xuICAgIC8vIERlZHVjZSBpZiB3ZSdyZSBpbiBhIGxvYWRpbmcvYWN0aW9uUmVsb2FkIHN0YXRlOlxuICAgIC8vIC0gV2UgaGF2ZSBjb21taXR0ZWQgYWN0aW9uRGF0YSBpbiB0aGUgc3RvcmVcbiAgICAvLyAtIFRoZSBjdXJyZW50IG5hdmlnYXRpb24gd2FzIGEgbXV0YXRpb24gc3VibWlzc2lvblxuICAgIC8vIC0gV2UncmUgcGFzdCB0aGUgc3VibWl0dGluZyBzdGF0ZSBhbmQgaW50byB0aGUgbG9hZGluZyBzdGF0ZVxuICAgIC8vIC0gVGhlIGxvY2F0aW9uIGJlaW5nIGxvYWRlZCBpcyBub3QgdGhlIHJlc3VsdCBvZiBhIHJlZGlyZWN0XG4gICAgbGV0IGlzQWN0aW9uUmVsb2FkID0gc3RhdGUuYWN0aW9uRGF0YSAhPSBudWxsICYmIHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCAhPSBudWxsICYmIGlzTXV0YXRpb25NZXRob2Qoc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kKSAmJiBzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImxvYWRpbmdcIiAmJiAoKF9sb2NhdGlvbiRzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2xvY2F0aW9uJHN0YXRlLl9pc1JlZGlyZWN0KSAhPT0gdHJ1ZTtcbiAgICBsZXQgYWN0aW9uRGF0YTtcbiAgICBpZiAobmV3U3RhdGUuYWN0aW9uRGF0YSkge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKG5ld1N0YXRlLmFjdGlvbkRhdGEpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYWN0aW9uRGF0YSA9IG5ld1N0YXRlLmFjdGlvbkRhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBFbXB0eSBhY3Rpb25EYXRhIC0+IGNsZWFyIHByaW9yIGFjdGlvbkRhdGEgZHVlIHRvIGFuIGFjdGlvbiBlcnJvclxuICAgICAgICBhY3Rpb25EYXRhID0gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzQWN0aW9uUmVsb2FkKSB7XG4gICAgICAvLyBLZWVwIHRoZSBjdXJyZW50IGRhdGEgaWYgd2UncmUgd3JhcHBpbmcgdXAgdGhlIGFjdGlvbiByZWxvYWRcbiAgICAgIGFjdGlvbkRhdGEgPSBzdGF0ZS5hY3Rpb25EYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDbGVhciBhY3Rpb25EYXRhIG9uIGFueSBvdGhlciBjb21wbGV0ZWQgbmF2aWdhdGlvbnNcbiAgICAgIGFjdGlvbkRhdGEgPSBudWxsO1xuICAgIH1cbiAgICAvLyBBbHdheXMgcHJlc2VydmUgYW55IGV4aXN0aW5nIGxvYWRlckRhdGEgZnJvbSByZS11c2VkIHJvdXRlc1xuICAgIGxldCBsb2FkZXJEYXRhID0gbmV3U3RhdGUubG9hZGVyRGF0YSA/IG1lcmdlTG9hZGVyRGF0YShzdGF0ZS5sb2FkZXJEYXRhLCBuZXdTdGF0ZS5sb2FkZXJEYXRhLCBuZXdTdGF0ZS5tYXRjaGVzIHx8IFtdLCBuZXdTdGF0ZS5lcnJvcnMpIDogc3RhdGUubG9hZGVyRGF0YTtcbiAgICAvLyBPbiBhIHN1Y2Nlc3NmdWwgbmF2aWdhdGlvbiB3ZSBjYW4gYXNzdW1lIHdlIGdvdCB0aHJvdWdoIGFsbCBibG9ja2Vyc1xuICAgIC8vIHNvIHdlIGNhbiBzdGFydCBmcmVzaFxuICAgIGxldCBibG9ja2VycyA9IHN0YXRlLmJsb2NrZXJzO1xuICAgIGlmIChibG9ja2Vycy5zaXplID4gMCkge1xuICAgICAgYmxvY2tlcnMgPSBuZXcgTWFwKGJsb2NrZXJzKTtcbiAgICAgIGJsb2NrZXJzLmZvckVhY2goKF8sIGspID0+IGJsb2NrZXJzLnNldChrLCBJRExFX0JMT0NLRVIpKTtcbiAgICB9XG4gICAgLy8gQWx3YXlzIHJlc3BlY3QgdGhlIHVzZXIgZmxhZy4gIE90aGVyd2lzZSBkb24ndCByZXNldCBvbiBtdXRhdGlvblxuICAgIC8vIHN1Ym1pc3Npb24gbmF2aWdhdGlvbnMgdW5sZXNzIHRoZXkgcmVkaXJlY3RcbiAgICBsZXQgcHJldmVudFNjcm9sbFJlc2V0ID0gcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSB8fCBzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QgIT0gbnVsbCAmJiBpc011dGF0aW9uTWV0aG9kKHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCkgJiYgKChfbG9jYXRpb24kc3RhdGUyID0gbG9jYXRpb24uc3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfbG9jYXRpb24kc3RhdGUyLl9pc1JlZGlyZWN0KSAhPT0gdHJ1ZTtcbiAgICBpZiAoaW5GbGlnaHREYXRhUm91dGVzKSB7XG4gICAgICBkYXRhUm91dGVzID0gaW5GbGlnaHREYXRhUm91dGVzO1xuICAgICAgaW5GbGlnaHREYXRhUm91dGVzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSA7IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5Qb3ApIDsgZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlB1c2gpIHtcbiAgICAgIGluaXQuaGlzdG9yeS5wdXNoKGxvY2F0aW9uLCBsb2NhdGlvbi5zdGF0ZSk7XG4gICAgfSBlbHNlIGlmIChwZW5kaW5nQWN0aW9uID09PSBBY3Rpb24uUmVwbGFjZSkge1xuICAgICAgaW5pdC5oaXN0b3J5LnJlcGxhY2UobG9jYXRpb24sIGxvY2F0aW9uLnN0YXRlKTtcbiAgICB9XG4gICAgdXBkYXRlU3RhdGUoX2V4dGVuZHMoe30sIG5ld1N0YXRlLCB7XG4gICAgICBhY3Rpb25EYXRhLFxuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGhpc3RvcnlBY3Rpb246IHBlbmRpbmdBY3Rpb24sXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGluaXRpYWxpemVkOiB0cnVlLFxuICAgICAgbmF2aWdhdGlvbjogSURMRV9OQVZJR0FUSU9OLFxuICAgICAgcmV2YWxpZGF0aW9uOiBcImlkbGVcIixcbiAgICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihsb2NhdGlvbiwgbmV3U3RhdGUubWF0Y2hlcyB8fCBzdGF0ZS5tYXRjaGVzKSxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIGJsb2NrZXJzXG4gICAgfSkpO1xuICAgIC8vIFJlc2V0IHN0YXRlZnVsIG5hdmlnYXRpb24gdmFyc1xuICAgIHBlbmRpbmdBY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgIHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSBmYWxzZTtcbiAgICBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSBmYWxzZTtcbiAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gZmFsc2U7XG4gICAgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMgPSBbXTtcbiAgICBjYW5jZWxsZWRGZXRjaGVyTG9hZHMgPSBbXTtcbiAgfVxuICAvLyBUcmlnZ2VyIGEgbmF2aWdhdGlvbiBldmVudCwgd2hpY2ggY2FuIGVpdGhlciBiZSBhIG51bWVyaWNhbCBQT1Agb3IgYSBQVVNIXG4gIC8vIHJlcGxhY2Ugd2l0aCBhbiBvcHRpb25hbCBzdWJtaXNzaW9uXG4gIGFzeW5jIGZ1bmN0aW9uIG5hdmlnYXRlKHRvLCBvcHRzKSB7XG4gICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgaW5pdC5oaXN0b3J5LmdvKHRvKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplVG8oc3RhdGUubG9jYXRpb24sIHN0YXRlLm1hdGNoZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcHJlcGVuZEJhc2VuYW1lLCB0bywgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mcm9tUm91dGVJZCwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5yZWxhdGl2ZSk7XG4gICAgbGV0IHtcbiAgICAgIHBhdGgsXG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgZXJyb3JcbiAgICB9ID0gbm9ybWFsaXplTmF2aWdhdGVPcHRpb25zKGZ1dHVyZS52N19ub3JtYWxpemVGb3JtTWV0aG9kLCBmYWxzZSwgbm9ybWFsaXplZFBhdGgsIG9wdHMpO1xuICAgIGxldCBjdXJyZW50TG9jYXRpb24gPSBzdGF0ZS5sb2NhdGlvbjtcbiAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oc3RhdGUubG9jYXRpb24sIHBhdGgsIG9wdHMgJiYgb3B0cy5zdGF0ZSk7XG4gICAgLy8gV2hlbiB1c2luZyBuYXZpZ2F0ZSBhcyBhIFBVU0gvUkVQTEFDRSB3ZSBhcmVuJ3QgcmVhZGluZyBhbiBhbHJlYWR5LWVuY29kZWRcbiAgICAvLyBVUkwgZnJvbSB3aW5kb3cubG9jYXRpb24sIHNvIHdlIG5lZWQgdG8gZW5jb2RlIGl0IGhlcmUgc28gdGhlIGJlaGF2aW9yXG4gICAgLy8gcmVtYWlucyB0aGUgc2FtZSBhcyBQT1AgYW5kIG5vbi1kYXRhLXJvdXRlciB1c2FnZXMuICBuZXcgVVJMKCkgZG9lcyBhbGxcbiAgICAvLyB0aGUgc2FtZSBlbmNvZGluZyB3ZSdkIGdldCBmcm9tIGEgaGlzdG9yeS5wdXNoU3RhdGUvd2luZG93LmxvY2F0aW9uIHJlYWRcbiAgICAvLyB3aXRob3V0IGhhdmluZyB0byB0b3VjaCBoaXN0b3J5XG4gICAgbmV4dExvY2F0aW9uID0gX2V4dGVuZHMoe30sIG5leHRMb2NhdGlvbiwgaW5pdC5oaXN0b3J5LmVuY29kZUxvY2F0aW9uKG5leHRMb2NhdGlvbikpO1xuICAgIGxldCB1c2VyUmVwbGFjZSA9IG9wdHMgJiYgb3B0cy5yZXBsYWNlICE9IG51bGwgPyBvcHRzLnJlcGxhY2UgOiB1bmRlZmluZWQ7XG4gICAgbGV0IGhpc3RvcnlBY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICBpZiAodXNlclJlcGxhY2UgPT09IHRydWUpIHtcbiAgICAgIGhpc3RvcnlBY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICB9IGVsc2UgaWYgKHVzZXJSZXBsYWNlID09PSBmYWxzZSkgOyBlbHNlIGlmIChzdWJtaXNzaW9uICE9IG51bGwgJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpICYmIHN1Ym1pc3Npb24uZm9ybUFjdGlvbiA9PT0gc3RhdGUubG9jYXRpb24ucGF0aG5hbWUgKyBzdGF0ZS5sb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIC8vIEJ5IGRlZmF1bHQgb24gc3VibWlzc2lvbnMgdG8gdGhlIGN1cnJlbnQgbG9jYXRpb24gd2UgUkVQTEFDRSBzbyB0aGF0XG4gICAgICAvLyB1c2VycyBkb24ndCBoYXZlIHRvIGRvdWJsZS1jbGljayB0aGUgYmFjayBidXR0b24gdG8gZ2V0IHRvIHRoZSBwcmlvclxuICAgICAgLy8gbG9jYXRpb24uICBJZiB0aGUgdXNlciByZWRpcmVjdHMgdG8gYSBkaWZmZXJlbnQgbG9jYXRpb24gZnJvbSB0aGVcbiAgICAgIC8vIGFjdGlvbi9sb2FkZXIgdGhpcyB3aWxsIGJlIGlnbm9yZWQgYW5kIHRoZSByZWRpcmVjdCB3aWxsIGJlIGEgUFVTSFxuICAgICAgaGlzdG9yeUFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIH1cbiAgICBsZXQgcHJldmVudFNjcm9sbFJlc2V0ID0gb3B0cyAmJiBcInByZXZlbnRTY3JvbGxSZXNldFwiIGluIG9wdHMgPyBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgYmxvY2tlcktleSA9IHNob3VsZEJsb2NrTmF2aWdhdGlvbih7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSk7XG4gICAgaWYgKGJsb2NrZXJLZXkpIHtcbiAgICAgIC8vIFB1dCB0aGUgYmxvY2tlciBpbnRvIGEgYmxvY2tlZCBzdGF0ZVxuICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgIHN0YXRlOiBcImJsb2NrZWRcIixcbiAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgcHJvY2VlZCgpIHtcbiAgICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgICAgIHN0YXRlOiBcInByb2NlZWRpbmdcIixcbiAgICAgICAgICAgIHByb2NlZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHJlc2V0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgLy8gU2VuZCB0aGUgc2FtZSBuYXZpZ2F0aW9uIHRocm91Z2hcbiAgICAgICAgICBuYXZpZ2F0ZSh0bywgb3B0cyk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc2V0KCkge1xuICAgICAgICAgIGxldCBibG9ja2VycyA9IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpO1xuICAgICAgICAgIGJsb2NrZXJzLnNldChibG9ja2VyS2V5LCBJRExFX0JMT0NLRVIpO1xuICAgICAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgICAgIGJsb2NrZXJzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIG5leHRMb2NhdGlvbiwge1xuICAgICAgc3VibWlzc2lvbixcbiAgICAgIC8vIFNlbmQgdGhyb3VnaCB0aGUgZm9ybURhdGEgc2VyaWFsaXphdGlvbiBlcnJvciBpZiB3ZSBoYXZlIG9uZSBzbyB3ZSBjYW5cbiAgICAgIC8vIHJlbmRlciBhdCB0aGUgcmlnaHQgZXJyb3IgYm91bmRhcnkgYWZ0ZXIgd2UgbWF0Y2ggcm91dGVzXG4gICAgICBwZW5kaW5nRXJyb3I6IGVycm9yLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgcmVwbGFjZTogb3B0cyAmJiBvcHRzLnJlcGxhY2VcbiAgICB9KTtcbiAgfVxuICAvLyBSZXZhbGlkYXRlIGFsbCBjdXJyZW50IGxvYWRlcnMuICBJZiBhIG5hdmlnYXRpb24gaXMgaW4gcHJvZ3Jlc3Mgb3IgaWYgdGhpc1xuICAvLyBpcyBpbnRlcnJ1cHRlZCBieSBhIG5hdmlnYXRpb24sIGFsbG93IHRoaXMgdG8gXCJzdWNjZWVkXCIgYnkgY2FsbGluZyBhbGxcbiAgLy8gbG9hZGVycyBkdXJpbmcgdGhlIG5leHQgbG9hZGVyIHJvdW5kXG4gIGZ1bmN0aW9uIHJldmFsaWRhdGUoKSB7XG4gICAgaW50ZXJydXB0QWN0aXZlTG9hZHMoKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICByZXZhbGlkYXRpb246IFwibG9hZGluZ1wiXG4gICAgfSk7XG4gICAgLy8gSWYgd2UncmUgY3VycmVudGx5IHN1Ym1pdHRpbmcgYW4gYWN0aW9uLCB3ZSBkb24ndCBuZWVkIHRvIHN0YXJ0IGEgbmV3XG4gICAgLy8gbmF2aWdhdGlvbiwgd2UnbGwganVzdCBsZXQgdGhlIGZvbGxvdyB1cCBsb2FkZXIgZXhlY3V0aW9uIGNhbGwgYWxsIGxvYWRlcnNcbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJzdWJtaXR0aW5nXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gSWYgd2UncmUgY3VycmVudGx5IGluIGFuIGlkbGUgc3RhdGUsIHN0YXJ0IGEgbmV3IG5hdmlnYXRpb24gZm9yIHRoZSBjdXJyZW50XG4gICAgLy8gYWN0aW9uL2xvY2F0aW9uIGFuZCBtYXJrIGl0IGFzIHVuaW50ZXJydXB0ZWQsIHdoaWNoIHdpbGwgc2tpcCB0aGUgaGlzdG9yeVxuICAgIC8vIHVwZGF0ZSBpbiBjb21wbGV0ZU5hdmlnYXRpb25cbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJpZGxlXCIpIHtcbiAgICAgIHN0YXJ0TmF2aWdhdGlvbihzdGF0ZS5oaXN0b3J5QWN0aW9uLCBzdGF0ZS5sb2NhdGlvbiwge1xuICAgICAgICBzdGFydFVuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb246IHRydWVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBPdGhlcndpc2UsIGlmIHdlJ3JlIGN1cnJlbnRseSBpbiBhIGxvYWRpbmcgc3RhdGUsIGp1c3Qgc3RhcnQgYSBuZXdcbiAgICAvLyBuYXZpZ2F0aW9uIHRvIHRoZSBuYXZpZ2F0aW9uLmxvY2F0aW9uIGJ1dCBkbyBub3QgdHJpZ2dlciBhbiB1bmludGVycnVwdGVkXG4gICAgLy8gcmV2YWxpZGF0aW9uIHNvIHRoYXQgaGlzdG9yeSBjb3JyZWN0bHkgdXBkYXRlcyBvbmNlIHRoZSBuYXZpZ2F0aW9uIGNvbXBsZXRlc1xuICAgIHN0YXJ0TmF2aWdhdGlvbihwZW5kaW5nQWN0aW9uIHx8IHN0YXRlLmhpc3RvcnlBY3Rpb24sIHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24sIHtcbiAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbjogc3RhdGUubmF2aWdhdGlvblxuICAgIH0pO1xuICB9XG4gIC8vIFN0YXJ0IGEgbmF2aWdhdGlvbiB0byB0aGUgZ2l2ZW4gYWN0aW9uL2xvY2F0aW9uLiAgQ2FuIG9wdGlvbmFsbHkgcHJvdmlkZSBhXG4gIC8vIG92ZXJyaWRlTmF2aWdhdGlvbiB3aGljaCB3aWxsIG92ZXJyaWRlIHRoZSBub3JtYWxMb2FkIGluIHRoZSBjYXNlIG9mIGEgcmVkaXJlY3RcbiAgLy8gbmF2aWdhdGlvblxuICBhc3luYyBmdW5jdGlvbiBzdGFydE5hdmlnYXRpb24oaGlzdG9yeUFjdGlvbiwgbG9jYXRpb24sIG9wdHMpIHtcbiAgICAvLyBBYm9ydCBhbnkgaW4tcHJvZ3Jlc3MgbmF2aWdhdGlvbnMgYW5kIHN0YXJ0IGEgbmV3IG9uZS4gVW5zZXQgYW55IG9uZ29pbmdcbiAgICAvLyB1bmludGVycnVwdGVkIHJldmFsaWRhdGlvbnMgdW5sZXNzIHRvbGQgb3RoZXJ3aXNlLCBzaW5jZSB3ZSB3YW50IHRoaXNcbiAgICAvLyBuZXcgbmF2aWdhdGlvbiB0byB1cGRhdGUgaGlzdG9yeSBub3JtYWxseVxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuICAgIHBlbmRpbmdBY3Rpb24gPSBoaXN0b3J5QWN0aW9uO1xuICAgIGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiA9IChvcHRzICYmIG9wdHMuc3RhcnRVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSA9PT0gdHJ1ZTtcbiAgICAvLyBTYXZlIHRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbiBldmVyeSB0aW1lIHdlIHN0YXJ0IGEgbmV3IG5hdmlnYXRpb24sXG4gICAgLy8gYW5kIHRyYWNrIHdoZXRoZXIgd2Ugc2hvdWxkIHJlc2V0IHNjcm9sbCBvbiBjb21wbGV0aW9uXG4gICAgc2F2ZVNjcm9sbFBvc2l0aW9uKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzKTtcbiAgICBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gKG9wdHMgJiYgb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQpID09PSB0cnVlO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBsb2FkaW5nTmF2aWdhdGlvbiA9IG9wdHMgJiYgb3B0cy5vdmVycmlkZU5hdmlnYXRpb247XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgbG9jYXRpb24sIGJhc2VuYW1lKTtcbiAgICAvLyBTaG9ydCBjaXJjdWl0IHdpdGggYSA0MDQgb24gdGhlIHJvb3QgZXJyb3IgYm91bmRhcnkgaWYgd2UgbWF0Y2ggbm90aGluZ1xuICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICAgIGxldCB7XG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgcm91dGVcbiAgICAgIH0gPSBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKHJvdXRlc1RvVXNlKTtcbiAgICAgIC8vIENhbmNlbCBhbGwgcGVuZGluZyBkZWZlcnJlZCBvbiA0MDRzIHNpbmNlIHdlIGRvbid0IGtlZXAgYW55IHJvdXRlc1xuICAgICAgY2FuY2VsQWN0aXZlRGVmZXJyZWRzKCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgaXQncyBvbmx5IGEgaGFzaCBjaGFuZ2UgYW5kIG5vdCBhIHJldmFsaWRhdGlvbiBvclxuICAgIC8vIG11dGF0aW9uIHN1Ym1pc3Npb24uXG4gICAgLy9cbiAgICAvLyBJZ25vcmUgb24gaW5pdGlhbCBwYWdlIGxvYWRzIGJlY2F1c2Ugc2luY2UgdGhlIGluaXRpYWwgbG9hZCB3aWxsIGFsd2F5c1xuICAgIC8vIGJlIFwic2FtZSBoYXNoXCIuICBGb3IgZXhhbXBsZSwgb24gL3BhZ2UjaGFzaCBhbmQgc3VibWl0IGEgPEZvcm0gbWV0aG9kPVwicG9zdFwiPlxuICAgIC8vIHdoaWNoIHdpbGwgZGVmYXVsdCB0byBhIG5hdmlnYXRpb24gdG8gL3BhZ2VcbiAgICBpZiAoc3RhdGUuaW5pdGlhbGl6ZWQgJiYgIWlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgJiYgaXNIYXNoQ2hhbmdlT25seShzdGF0ZS5sb2NhdGlvbiwgbG9jYXRpb24pICYmICEob3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChvcHRzLnN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpKSB7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlc1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIENyZWF0ZSBhIGNvbnRyb2xsZXIvUmVxdWVzdCBmb3IgdGhpcyBuYXZpZ2F0aW9uXG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCByZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBsb2NhdGlvbiwgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLnNpZ25hbCwgb3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24pO1xuICAgIGxldCBwZW5kaW5nQWN0aW9uRGF0YTtcbiAgICBsZXQgcGVuZGluZ0Vycm9yO1xuICAgIGlmIChvcHRzICYmIG9wdHMucGVuZGluZ0Vycm9yKSB7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgcGVuZGluZ0Vycm9yLCBpdCBtZWFucyB0aGUgdXNlciBhdHRlbXB0ZWQgYSBHRVQgc3VibWlzc2lvblxuICAgICAgLy8gd2l0aCBiaW5hcnkgRm9ybURhdGEgc28gYXNzaWduIGhlcmUgYW5kIHNraXAgdG8gaGFuZGxlTG9hZGVycy4gIFRoYXRcbiAgICAgIC8vIHdheSB3ZSBoYW5kbGUgY2FsbGluZyBsb2FkZXJzIGFib3ZlIHRoZSBib3VuZGFyeSBldGMuICBJdCdzIG5vdCByZWFsbHlcbiAgICAgIC8vIGRpZmZlcmVudCBmcm9tIGFuIGFjdGlvbkVycm9yIGluIHRoYXQgc2Vuc2UuXG4gICAgICBwZW5kaW5nRXJyb3IgPSB7XG4gICAgICAgIFtmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMpLnJvdXRlLmlkXTogb3B0cy5wZW5kaW5nRXJyb3JcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChvcHRzICYmIG9wdHMuc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKG9wdHMuc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgICAgLy8gQ2FsbCBhY3Rpb24gaWYgd2UgcmVjZWl2ZWQgYW4gYWN0aW9uIHN1Ym1pc3Npb25cbiAgICAgIGxldCBhY3Rpb25PdXRwdXQgPSBhd2FpdCBoYW5kbGVBY3Rpb24ocmVxdWVzdCwgbG9jYXRpb24sIG9wdHMuc3VibWlzc2lvbiwgbWF0Y2hlcywge1xuICAgICAgICByZXBsYWNlOiBvcHRzLnJlcGxhY2VcbiAgICAgIH0pO1xuICAgICAgaWYgKGFjdGlvbk91dHB1dC5zaG9ydENpcmN1aXRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBwZW5kaW5nQWN0aW9uRGF0YSA9IGFjdGlvbk91dHB1dC5wZW5kaW5nQWN0aW9uRGF0YTtcbiAgICAgIHBlbmRpbmdFcnJvciA9IGFjdGlvbk91dHB1dC5wZW5kaW5nQWN0aW9uRXJyb3I7XG4gICAgICBsb2FkaW5nTmF2aWdhdGlvbiA9IGdldExvYWRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBvcHRzLnN1Ym1pc3Npb24pO1xuICAgICAgLy8gQ3JlYXRlIGEgR0VUIHJlcXVlc3QgZm9yIHRoZSBsb2FkZXJzXG4gICAgICByZXF1ZXN0ID0gbmV3IFJlcXVlc3QocmVxdWVzdC51cmwsIHtcbiAgICAgICAgc2lnbmFsOiByZXF1ZXN0LnNpZ25hbFxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIENhbGwgbG9hZGVyc1xuICAgIGxldCB7XG4gICAgICBzaG9ydENpcmN1aXRlZCxcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9ID0gYXdhaXQgaGFuZGxlTG9hZGVycyhyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgbG9hZGluZ05hdmlnYXRpb24sIG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uLCBvcHRzICYmIG9wdHMuZmV0Y2hlclN1Ym1pc3Npb24sIG9wdHMgJiYgb3B0cy5yZXBsYWNlLCBwZW5kaW5nQWN0aW9uRGF0YSwgcGVuZGluZ0Vycm9yKTtcbiAgICBpZiAoc2hvcnRDaXJjdWl0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQ2xlYW4gdXAgbm93IHRoYXQgdGhlIGFjdGlvbi9sb2FkZXJzIGhhdmUgY29tcGxldGVkLiAgRG9uJ3QgY2xlYW4gdXAgaWZcbiAgICAvLyB3ZSBzaG9ydCBjaXJjdWl0ZWQgYmVjYXVzZSBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgd2lsbCBoYXZlIGFscmVhZHlcbiAgICAvLyBiZWVuIGFzc2lnbmVkIHRvIGEgbmV3IGNvbnRyb2xsZXIgZm9yIHRoZSBuZXh0IG5hdmlnYXRpb25cbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwgX2V4dGVuZHMoe1xuICAgICAgbWF0Y2hlc1xuICAgIH0sIHBlbmRpbmdBY3Rpb25EYXRhID8ge1xuICAgICAgYWN0aW9uRGF0YTogcGVuZGluZ0FjdGlvbkRhdGFcbiAgICB9IDoge30sIHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9KSk7XG4gIH1cbiAgLy8gQ2FsbCB0aGUgYWN0aW9uIG1hdGNoZWQgYnkgdGhlIGxlYWYgcm91dGUgZm9yIHRoaXMgbmF2aWdhdGlvbiBhbmQgaGFuZGxlXG4gIC8vIHJlZGlyZWN0cy9lcnJvcnNcbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlQWN0aW9uKHJlcXVlc3QsIGxvY2F0aW9uLCBzdWJtaXNzaW9uLCBtYXRjaGVzLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpO1xuICAgIC8vIFB1dCB1cyBpbiBhIHN1Ym1pdHRpbmcgc3RhdGVcbiAgICBsZXQgbmF2aWdhdGlvbiA9IGdldFN1Ym1pdHRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBzdWJtaXNzaW9uKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBuYXZpZ2F0aW9uXG4gICAgfSk7XG4gICAgLy8gQ2FsbCBvdXIgYWN0aW9uIGFuZCBnZXQgdGhlIHJlc3VsdFxuICAgIGxldCByZXN1bHQ7XG4gICAgbGV0IGFjdGlvbk1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuICAgIGlmICghYWN0aW9uTWF0Y2gucm91dGUuYWN0aW9uICYmICFhY3Rpb25NYXRjaC5yb3V0ZS5sYXp5KSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yOiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICAgIHJvdXRlSWQ6IGFjdGlvbk1hdGNoLnJvdXRlLmlkXG4gICAgICAgIH0pXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJhY3Rpb25cIiwgcmVxdWVzdCwgYWN0aW9uTWF0Y2gsIG1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGJhc2VuYW1lKTtcbiAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IHJlcGxhY2U7XG4gICAgICBpZiAob3B0cyAmJiBvcHRzLnJlcGxhY2UgIT0gbnVsbCkge1xuICAgICAgICByZXBsYWNlID0gb3B0cy5yZXBsYWNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgdGhlIHVzZXIgZGlkbid0IGV4cGxpY2l0eSBpbmRpY2F0ZSByZXBsYWNlIGJlaGF2aW9yLCByZXBsYWNlIGlmXG4gICAgICAgIC8vIHdlIHJlZGlyZWN0ZWQgdG8gdGhlIGV4YWN0IHNhbWUgbG9jYXRpb24gd2UncmUgY3VycmVudGx5IGF0IHRvIGF2b2lkXG4gICAgICAgIC8vIGRvdWJsZSBiYWNrLWJ1dHRvbnNcbiAgICAgICAgcmVwbGFjZSA9IHJlc3VsdC5sb2NhdGlvbiA9PT0gc3RhdGUubG9jYXRpb24ucGF0aG5hbWUgKyBzdGF0ZS5sb2NhdGlvbi5zZWFyY2g7XG4gICAgICB9XG4gICAgICBhd2FpdCBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgcmVzdWx0LCB7XG4gICAgICAgIHN1Ym1pc3Npb24sXG4gICAgICAgIHJlcGxhY2VcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFN0b3JlIG9mZiB0aGUgcGVuZGluZyBlcnJvciAtIHdlIHVzZSBpdCB0byBkZXRlcm1pbmUgd2hpY2ggbG9hZGVyc1xuICAgICAgLy8gdG8gY2FsbCBhbmQgd2lsbCBjb21taXQgaXQgd2hlbiB3ZSBjb21wbGV0ZSB0aGUgbmF2aWdhdGlvblxuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGFjdGlvbk1hdGNoLnJvdXRlLmlkKTtcbiAgICAgIC8vIEJ5IGRlZmF1bHQsIGFsbCBzdWJtaXNzaW9ucyBhcmUgUkVQTEFDRSBuYXZpZ2F0aW9ucywgYnV0IGlmIHRoZVxuICAgICAgLy8gYWN0aW9uIHRocmV3IGFuIGVycm9yIHRoYXQnbGwgYmUgcmVuZGVyZWQgaW4gYW4gZXJyb3JFbGVtZW50LCB3ZSBmYWxsXG4gICAgICAvLyBiYWNrIHRvIFBVU0ggc28gdGhhdCB0aGUgdXNlciBjYW4gdXNlIHRoZSBiYWNrIGJ1dHRvbiB0byBnZXQgYmFjayB0b1xuICAgICAgLy8gdGhlIHByZS1zdWJtaXNzaW9uIGZvcm0gbG9jYXRpb24gdG8gdHJ5IGFnYWluXG4gICAgICBpZiAoKG9wdHMgJiYgb3B0cy5yZXBsYWNlKSAhPT0gdHJ1ZSkge1xuICAgICAgICBwZW5kaW5nQWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICAvLyBTZW5kIGJhY2sgYW4gZW1wdHkgb2JqZWN0IHdlIGNhbiB1c2UgdG8gY2xlYXIgb3V0IGFueSBwcmlvciBhY3Rpb25EYXRhXG4gICAgICAgIHBlbmRpbmdBY3Rpb25EYXRhOiB7fSxcbiAgICAgICAgcGVuZGluZ0FjdGlvbkVycm9yOiB7XG4gICAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZXJyb3JcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgICAgdHlwZTogXCJkZWZlci1hY3Rpb25cIlxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBwZW5kaW5nQWN0aW9uRGF0YToge1xuICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZGF0YVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgLy8gQ2FsbCBhbGwgYXBwbGljYWJsZSBsb2FkZXJzIGZvciB0aGUgZ2l2ZW4gbWF0Y2hlcywgaGFuZGxpbmcgcmVkaXJlY3RzLFxuICAvLyBlcnJvcnMsIGV0Yy5cbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlTG9hZGVycyhyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgb3ZlcnJpZGVOYXZpZ2F0aW9uLCBzdWJtaXNzaW9uLCBmZXRjaGVyU3VibWlzc2lvbiwgcmVwbGFjZSwgcGVuZGluZ0FjdGlvbkRhdGEsIHBlbmRpbmdFcnJvcikge1xuICAgIC8vIEZpZ3VyZSBvdXQgdGhlIHJpZ2h0IG5hdmlnYXRpb24gd2Ugd2FudCB0byB1c2UgZm9yIGRhdGEgbG9hZGluZ1xuICAgIGxldCBsb2FkaW5nTmF2aWdhdGlvbiA9IG92ZXJyaWRlTmF2aWdhdGlvbiB8fCBnZXRMb2FkaW5nTmF2aWdhdGlvbihsb2NhdGlvbiwgc3VibWlzc2lvbik7XG4gICAgLy8gSWYgdGhpcyB3YXMgYSByZWRpcmVjdCBmcm9tIGFuIGFjdGlvbiB3ZSBkb24ndCBoYXZlIGEgXCJzdWJtaXNzaW9uXCIgYnV0XG4gICAgLy8gd2UgaGF2ZSBpdCBvbiB0aGUgbG9hZGluZyBuYXZpZ2F0aW9uIHNvIHVzZSB0aGF0IGlmIGF2YWlsYWJsZVxuICAgIGxldCBhY3RpdmVTdWJtaXNzaW9uID0gc3VibWlzc2lvbiB8fCBmZXRjaGVyU3VibWlzc2lvbiB8fCBnZXRTdWJtaXNzaW9uRnJvbU5hdmlnYXRpb24obG9hZGluZ05hdmlnYXRpb24pO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBbbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdID0gZ2V0TWF0Y2hlc1RvTG9hZChpbml0Lmhpc3RvcnksIHN0YXRlLCBtYXRjaGVzLCBhY3RpdmVTdWJtaXNzaW9uLCBsb2NhdGlvbiwgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCwgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMsIGNhbmNlbGxlZEZldGNoZXJMb2FkcywgZmV0Y2hMb2FkTWF0Y2hlcywgZmV0Y2hSZWRpcmVjdElkcywgcm91dGVzVG9Vc2UsIGJhc2VuYW1lLCBwZW5kaW5nQWN0aW9uRGF0YSwgcGVuZGluZ0Vycm9yKTtcbiAgICAvLyBDYW5jZWwgcGVuZGluZyBkZWZlcnJlZHMgZm9yIG5vLWxvbmdlci1tYXRjaGVkIHJvdXRlcyBvciByb3V0ZXMgd2UncmVcbiAgICAvLyBhYm91dCB0byByZWxvYWQuICBOb3RlIHRoYXQgaWYgdGhpcyBpcyBhbiBhY3Rpb24gcmVsb2FkIHdlIHdvdWxkIGhhdmVcbiAgICAvLyBhbHJlYWR5IGNhbmNlbGxlZCBhbGwgcGVuZGluZyBkZWZlcnJlZHMgc28gdGhpcyB3b3VsZCBiZSBhIG5vLW9wXG4gICAgY2FuY2VsQWN0aXZlRGVmZXJyZWRzKHJvdXRlSWQgPT4gIShtYXRjaGVzICYmIG1hdGNoZXMuc29tZShtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpKSB8fCBtYXRjaGVzVG9Mb2FkICYmIG1hdGNoZXNUb0xvYWQuc29tZShtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpKTtcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA9ICsraW5jcmVtZW50aW5nTG9hZElkO1xuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1blxuICAgIGlmIChtYXRjaGVzVG9Mb2FkLmxlbmd0aCA9PT0gMCAmJiByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIGxldCB1cGRhdGVkRmV0Y2hlcnMgPSBtYXJrRmV0Y2hSZWRpcmVjdHNEb25lKCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIF9leHRlbmRzKHtcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIC8vIENvbW1pdCBwZW5kaW5nIGVycm9yIGlmIHdlJ3JlIHNob3J0IGNpcmN1aXRpbmdcbiAgICAgICAgZXJyb3JzOiBwZW5kaW5nRXJyb3IgfHwgbnVsbFxuICAgICAgfSwgcGVuZGluZ0FjdGlvbkRhdGEgPyB7XG4gICAgICAgIGFjdGlvbkRhdGE6IHBlbmRpbmdBY3Rpb25EYXRhXG4gICAgICB9IDoge30sIHVwZGF0ZWRGZXRjaGVycyA/IHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9IDoge30pKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgICAvLyBJZiB0aGlzIGlzIGFuIHVuaW50ZXJydXB0ZWQgcmV2YWxpZGF0aW9uLCB3ZSByZW1haW4gaW4gb3VyIGN1cnJlbnQgaWRsZVxuICAgIC8vIHN0YXRlLiAgSWYgbm90LCB3ZSBuZWVkIHRvIHN3aXRjaCB0byBvdXIgbG9hZGluZyBzdGF0ZSBhbmQgbG9hZCBkYXRhLFxuICAgIC8vIHByZXNlcnZpbmcgYW55IG5ldyBhY3Rpb24gZGF0YSBvciBleGlzdGluZyBhY3Rpb24gZGF0YSAoaW4gdGhlIGNhc2Ugb2ZcbiAgICAvLyBhIHJldmFsaWRhdGlvbiBpbnRlcnJ1cHRpbmcgYW4gYWN0aW9uUmVsb2FkKVxuICAgIGlmICghaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IHtcbiAgICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQocmYua2V5KTtcbiAgICAgICAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXIgPSBnZXRMb2FkaW5nRmV0Y2hlcih1bmRlZmluZWQsIGZldGNoZXIgPyBmZXRjaGVyLmRhdGEgOiB1bmRlZmluZWQpO1xuICAgICAgICBzdGF0ZS5mZXRjaGVycy5zZXQocmYua2V5LCByZXZhbGlkYXRpbmdGZXRjaGVyKTtcbiAgICAgIH0pO1xuICAgICAgbGV0IGFjdGlvbkRhdGEgPSBwZW5kaW5nQWN0aW9uRGF0YSB8fCBzdGF0ZS5hY3Rpb25EYXRhO1xuICAgICAgdXBkYXRlU3RhdGUoX2V4dGVuZHMoe1xuICAgICAgICBuYXZpZ2F0aW9uOiBsb2FkaW5nTmF2aWdhdGlvblxuICAgICAgfSwgYWN0aW9uRGF0YSA/IE9iamVjdC5rZXlzKGFjdGlvbkRhdGEpLmxlbmd0aCA9PT0gMCA/IHtcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbFxuICAgICAgfSA6IHtcbiAgICAgICAgYWN0aW9uRGF0YVxuICAgICAgfSA6IHt9LCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPiAwID8ge1xuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0gOiB7fSkpO1xuICAgIH1cbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IHtcbiAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhyZi5rZXkpKSB7XG4gICAgICAgIGFib3J0RmV0Y2hlcihyZi5rZXkpO1xuICAgICAgfVxuICAgICAgaWYgKHJmLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgLy8gRmV0Y2hlcnMgdXNlIGFuIGluZGVwZW5kZW50IEFib3J0Q29udHJvbGxlciBzbyB0aGF0IGFib3J0aW5nIGEgZmV0Y2hlclxuICAgICAgICAvLyAodmlhIGRlbGV0ZUZldGNoZXIpIGRvZXMgbm90IGFib3J0IHRoZSB0cmlnZ2VyaW5nIG5hdmlnYXRpb24gdGhhdFxuICAgICAgICAvLyB0cmlnZ2VyZWQgdGhlIHJldmFsaWRhdGlvblxuICAgICAgICBmZXRjaENvbnRyb2xsZXJzLnNldChyZi5rZXksIHJmLmNvbnRyb2xsZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIFByb3h5IG5hdmlnYXRpb24gYWJvcnQgdGhyb3VnaCB0byByZXZhbGlkYXRpb24gZmV0Y2hlcnNcbiAgICBsZXQgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zID0gKCkgPT4gcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChmID0+IGFib3J0RmV0Y2hlcihmLmtleSkpO1xuICAgIGlmIChwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIpIHtcbiAgICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyk7XG4gICAgfVxuICAgIGxldCB7XG4gICAgICByZXN1bHRzLFxuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIGZldGNoZXJSZXN1bHRzXG4gICAgfSA9IGF3YWl0IGNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YShzdGF0ZS5tYXRjaGVzLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVycywgcmVxdWVzdCk7XG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgICAvLyBDbGVhbiB1cCBfYWZ0ZXJfIGxvYWRlcnMgaGF2ZSBjb21wbGV0ZWQuICBEb24ndCBjbGVhbiB1cCBpZiB3ZSBzaG9ydFxuICAgIC8vIGNpcmN1aXRlZCBiZWNhdXNlIGZldGNoQ29udHJvbGxlcnMgd291bGQgaGF2ZSBiZWVuIGFib3J0ZWQgYW5kXG4gICAgLy8gcmVhc3NpZ25lZCB0byBuZXcgY29udHJvbGxlcnMgZm9yIHRoZSBuZXh0IG5hdmlnYXRpb25cbiAgICBpZiAocGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyKSB7XG4gICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMpO1xuICAgIH1cbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKHJmLmtleSkpO1xuICAgIC8vIElmIGFueSBsb2FkZXJzIHJldHVybmVkIGEgcmVkaXJlY3QgUmVzcG9uc2UsIHN0YXJ0IGEgbmV3IFJFUExBQ0UgbmF2aWdhdGlvblxuICAgIGxldCByZWRpcmVjdCA9IGZpbmRSZWRpcmVjdChyZXN1bHRzKTtcbiAgICBpZiAocmVkaXJlY3QpIHtcbiAgICAgIGlmIChyZWRpcmVjdC5pZHggPj0gbWF0Y2hlc1RvTG9hZC5sZW5ndGgpIHtcbiAgICAgICAgLy8gSWYgdGhpcyByZWRpcmVjdCBjYW1lIGZyb20gYSBmZXRjaGVyIG1ha2Ugc3VyZSB3ZSBtYXJrIGl0IGluXG4gICAgICAgIC8vIGZldGNoUmVkaXJlY3RJZHMgc28gaXQgZG9lc24ndCBnZXQgcmV2YWxpZGF0ZWQgb24gdGhlIG5leHQgc2V0IG9mXG4gICAgICAgIC8vIGxvYWRlciBleGVjdXRpb25zXG4gICAgICAgIGxldCBmZXRjaGVyS2V5ID0gcmV2YWxpZGF0aW5nRmV0Y2hlcnNbcmVkaXJlY3QuaWR4IC0gbWF0Y2hlc1RvTG9hZC5sZW5ndGhdLmtleTtcbiAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5hZGQoZmV0Y2hlcktleSk7XG4gICAgICB9XG4gICAgICBhd2FpdCBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgcmVkaXJlY3QucmVzdWx0LCB7XG4gICAgICAgIHJlcGxhY2VcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgYW5kIGNvbW1pdCBvdXRwdXQgZnJvbSBsb2FkZXJzXG4gICAgbGV0IHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9ID0gcHJvY2Vzc0xvYWRlckRhdGEoc3RhdGUsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIGxvYWRlclJlc3VsdHMsIHBlbmRpbmdFcnJvciwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIGZldGNoZXJSZXN1bHRzLCBhY3RpdmVEZWZlcnJlZHMpO1xuICAgIC8vIFdpcmUgdXAgc3Vic2NyaWJlcnMgdG8gdXBkYXRlIGxvYWRlckRhdGEgYXMgcHJvbWlzZXMgc2V0dGxlXG4gICAgYWN0aXZlRGVmZXJyZWRzLmZvckVhY2goKGRlZmVycmVkRGF0YSwgcm91dGVJZCkgPT4ge1xuICAgICAgZGVmZXJyZWREYXRhLnN1YnNjcmliZShhYm9ydGVkID0+IHtcbiAgICAgICAgLy8gTm90ZTogTm8gbmVlZCB0byB1cGRhdGVTdGF0ZSBoZXJlIHNpbmNlIHRoZSBUcmFja2VkUHJvbWlzZSBvblxuICAgICAgICAvLyBsb2FkZXJEYXRhIGlzIHN0YWJsZSBhY3Jvc3MgcmVzb2x2ZS9yZWplY3RcbiAgICAgICAgLy8gUmVtb3ZlIHRoaXMgaW5zdGFuY2UgaWYgd2Ugd2VyZSBhYm9ydGVkIG9yIGlmIHByb21pc2VzIGhhdmUgc2V0dGxlZFxuICAgICAgICBpZiAoYWJvcnRlZCB8fCBkZWZlcnJlZERhdGEuZG9uZSkge1xuICAgICAgICAgIGFjdGl2ZURlZmVycmVkcy5kZWxldGUocm91dGVJZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGxldCB1cGRhdGVkRmV0Y2hlcnMgPSBtYXJrRmV0Y2hSZWRpcmVjdHNEb25lKCk7XG4gICAgbGV0IGRpZEFib3J0RmV0Y2hMb2FkcyA9IGFib3J0U3RhbGVGZXRjaExvYWRzKHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkKTtcbiAgICBsZXQgc2hvdWxkVXBkYXRlRmV0Y2hlcnMgPSB1cGRhdGVkRmV0Y2hlcnMgfHwgZGlkQWJvcnRGZXRjaExvYWRzIHx8IHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA+IDA7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9LCBzaG91bGRVcGRhdGVGZXRjaGVycyA/IHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0gOiB7fSk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0RmV0Y2hlcihrZXkpIHtcbiAgICByZXR1cm4gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSkgfHwgSURMRV9GRVRDSEVSO1xuICB9XG4gIC8vIFRyaWdnZXIgYSBmZXRjaGVyIGxvYWQvc3VibWl0IGZvciB0aGUgZ2l2ZW4gZmV0Y2hlciBrZXlcbiAgZnVuY3Rpb24gZmV0Y2goa2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKSB7XG4gICAgaWYgKGlzU2VydmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyb3V0ZXIuZmV0Y2goKSB3YXMgY2FsbGVkIGR1cmluZyB0aGUgc2VydmVyIHJlbmRlciwgYnV0IGl0IHNob3VsZG4ndCBiZS4gXCIgKyBcIllvdSBhcmUgbGlrZWx5IGNhbGxpbmcgYSB1c2VGZXRjaGVyKCkgbWV0aG9kIGluIHRoZSBib2R5IG9mIHlvdXIgY29tcG9uZW50LiBcIiArIFwiVHJ5IG1vdmluZyBpdCB0byBhIHVzZUVmZmVjdCBvciBhIGNhbGxiYWNrLlwiKTtcbiAgICB9XG4gICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKGtleSkpIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBub3JtYWxpemVkUGF0aCA9IG5vcm1hbGl6ZVRvKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzLCBiYXNlbmFtZSwgZnV0dXJlLnY3X3ByZXBlbmRCYXNlbmFtZSwgaHJlZiwgcm91dGVJZCwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5yZWxhdGl2ZSk7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgbm9ybWFsaXplZFBhdGgsIGJhc2VuYW1lKTtcbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBub3JtYWxpemVkUGF0aFxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQge1xuICAgICAgcGF0aCxcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICBlcnJvclxuICAgIH0gPSBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMoZnV0dXJlLnY3X25vcm1hbGl6ZUZvcm1NZXRob2QsIHRydWUsIG5vcm1hbGl6ZWRQYXRoLCBvcHRzKTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgcGF0aCk7XG4gICAgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IChvcHRzICYmIG9wdHMucHJldmVudFNjcm9sbFJlc2V0KSA9PT0gdHJ1ZTtcbiAgICBpZiAoc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICAgIGhhbmRsZUZldGNoZXJBY3Rpb24oa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgbWF0Y2hlcywgc3VibWlzc2lvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFN0b3JlIG9mZiB0aGUgbWF0Y2ggc28gd2UgY2FuIGNhbGwgaXQncyBzaG91bGRSZXZhbGlkYXRlIG9uIHN1YnNlcXVlbnRcbiAgICAvLyByZXZhbGlkYXRpb25zXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5zZXQoa2V5LCB7XG4gICAgICByb3V0ZUlkLFxuICAgICAgcGF0aFxuICAgIH0pO1xuICAgIGhhbmRsZUZldGNoZXJMb2FkZXIoa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgbWF0Y2hlcywgc3VibWlzc2lvbik7XG4gIH1cbiAgLy8gQ2FsbCB0aGUgYWN0aW9uIGZvciB0aGUgbWF0Y2hlZCBmZXRjaGVyLnN1Ym1pdCgpLCBhbmQgdGhlbiBoYW5kbGUgcmVkaXJlY3RzLFxuICAvLyBlcnJvcnMsIGFuZCByZXZhbGlkYXRpb25cbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlRmV0Y2hlckFjdGlvbihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCByZXF1ZXN0TWF0Y2hlcywgc3VibWlzc2lvbikge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5kZWxldGUoa2V5KTtcbiAgICBpZiAoIW1hdGNoLnJvdXRlLmFjdGlvbiAmJiAhbWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBwYXRoLFxuICAgICAgICByb3V0ZUlkOiByb3V0ZUlkXG4gICAgICB9KTtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gUHV0IHRoaXMgZmV0Y2hlciBpbnRvIGl0J3Mgc3VibWl0dGluZyBzdGF0ZVxuICAgIGxldCBleGlzdGluZ0ZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICBsZXQgZmV0Y2hlciA9IGdldFN1Ym1pdHRpbmdGZXRjaGVyKHN1Ym1pc3Npb24sIGV4aXN0aW5nRmV0Y2hlcik7XG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7XG4gICAgLy8gQ2FsbCB0aGUgYWN0aW9uIGZvciB0aGUgZmV0Y2hlclxuICAgIGxldCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IGZldGNoUmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgcGF0aCwgYWJvcnRDb250cm9sbGVyLnNpZ25hbCwgc3VibWlzc2lvbik7XG4gICAgZmV0Y2hDb250cm9sbGVycy5zZXQoa2V5LCBhYm9ydENvbnRyb2xsZXIpO1xuICAgIGxldCBvcmlnaW5hdGluZ0xvYWRJZCA9IGluY3JlbWVudGluZ0xvYWRJZDtcbiAgICBsZXQgYWN0aW9uUmVzdWx0ID0gYXdhaXQgY2FsbExvYWRlck9yQWN0aW9uKFwiYWN0aW9uXCIsIGZldGNoUmVxdWVzdCwgbWF0Y2gsIHJlcXVlc3RNYXRjaGVzLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBiYXNlbmFtZSk7XG4gICAgaWYgKGZldGNoUmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgLy8gV2UgY2FuIGRlbGV0ZSB0aGlzIHNvIGxvbmcgYXMgd2Ugd2VyZW4ndCBhYm9ydGVkIGJ5IG91IG91ciBvd24gZmV0Y2hlclxuICAgICAgLy8gcmUtc3VibWl0IHdoaWNoIHdvdWxkIGhhdmUgcHV0IF9uZXdfIGNvbnRyb2xsZXIgaXMgaW4gZmV0Y2hDb250cm9sbGVyc1xuICAgICAgaWYgKGZldGNoQ29udHJvbGxlcnMuZ2V0KGtleSkgPT09IGFib3J0Q29udHJvbGxlcikge1xuICAgICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgaWYgKHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkID4gb3JpZ2luYXRpbmdMb2FkSWQpIHtcbiAgICAgICAgLy8gQSBuZXcgbmF2aWdhdGlvbiB3YXMga2lja2VkIG9mZiBhZnRlciBvdXIgYWN0aW9uIHN0YXJ0ZWQsIHNvIHRoYXRcbiAgICAgICAgLy8gc2hvdWxkIHRha2UgcHJlY2VkZW5jZSBvdmVyIHRoaXMgcmVkaXJlY3QgbmF2aWdhdGlvbi4gIFdlIGFscmVhZHlcbiAgICAgICAgLy8gc2V0IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgc28gYWxsIGxvYWRlcnMgZm9yIHRoZSBuZXcgcm91dGUgc2hvdWxkXG4gICAgICAgIC8vIGZpcmUgdW5sZXNzIG9wdGVkIG91dCB2aWEgc2hvdWxkUmV2YWxpZGF0ZVxuICAgICAgICBsZXQgZG9uZUZldGNoZXIgPSBnZXREb25lRmV0Y2hlcih1bmRlZmluZWQpO1xuICAgICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBkb25lRmV0Y2hlcik7XG4gICAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGtleSk7XG4gICAgICAgIGxldCBsb2FkaW5nRmV0Y2hlciA9IGdldExvYWRpbmdGZXRjaGVyKHN1Ym1pc3Npb24pO1xuICAgICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBsb2FkaW5nRmV0Y2hlcik7XG4gICAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgYWN0aW9uUmVzdWx0LCB7XG4gICAgICAgICAgc3VibWlzc2lvbixcbiAgICAgICAgICBpc0ZldGNoQWN0aW9uUmVkaXJlY3Q6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgYW55IG5vbi1yZWRpcmVjdCBlcnJvcnMgdGhyb3duXG4gICAgaWYgKGlzRXJyb3JSZXN1bHQoYWN0aW9uUmVzdWx0KSkge1xuICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgYWN0aW9uUmVzdWx0LmVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQoYWN0aW9uUmVzdWx0KSkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgICAgdHlwZTogXCJkZWZlci1hY3Rpb25cIlxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIFN0YXJ0IHRoZSBkYXRhIGxvYWQgZm9yIGN1cnJlbnQgbWF0Y2hlcywgb3IgdGhlIG5leHQgbG9jYXRpb24gaWYgd2UncmVcbiAgICAvLyBpbiB0aGUgbWlkZGxlIG9mIGEgbmF2aWdhdGlvblxuICAgIGxldCBuZXh0TG9jYXRpb24gPSBzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uIHx8IHN0YXRlLmxvY2F0aW9uO1xuICAgIGxldCByZXZhbGlkYXRpb25SZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBuZXh0TG9jYXRpb24sIGFib3J0Q29udHJvbGxlci5zaWduYWwpO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBtYXRjaGVzID0gc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSAhPT0gXCJpZGxlXCIgPyBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwgYmFzZW5hbWUpIDogc3RhdGUubWF0Y2hlcztcbiAgICBpbnZhcmlhbnQobWF0Y2hlcywgXCJEaWRuJ3QgZmluZCBhbnkgbWF0Y2hlcyBhZnRlciBmZXRjaGVyIGFjdGlvblwiKTtcbiAgICBsZXQgbG9hZElkID0gKytpbmNyZW1lbnRpbmdMb2FkSWQ7XG4gICAgZmV0Y2hSZWxvYWRJZHMuc2V0KGtleSwgbG9hZElkKTtcbiAgICBsZXQgbG9hZEZldGNoZXIgPSBnZXRMb2FkaW5nRmV0Y2hlcihzdWJtaXNzaW9uLCBhY3Rpb25SZXN1bHQuZGF0YSk7XG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgbG9hZEZldGNoZXIpO1xuICAgIGxldCBbbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdID0gZ2V0TWF0Y2hlc1RvTG9hZChpbml0Lmhpc3RvcnksIHN0YXRlLCBtYXRjaGVzLCBzdWJtaXNzaW9uLCBuZXh0TG9jYXRpb24sIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIGZldGNoTG9hZE1hdGNoZXMsIGZldGNoUmVkaXJlY3RJZHMsIHJvdXRlc1RvVXNlLCBiYXNlbmFtZSwge1xuICAgICAgW21hdGNoLnJvdXRlLmlkXTogYWN0aW9uUmVzdWx0LmRhdGFcbiAgICB9LCB1bmRlZmluZWQgLy8gTm8gbmVlZCB0byBzZW5kIHRocm91Z2ggZXJyb3JzIHNpbmNlIHdlIHNob3J0IGNpcmN1aXQgYWJvdmVcbiAgICApO1xuICAgIC8vIFB1dCBhbGwgcmV2YWxpZGF0aW5nIGZldGNoZXJzIGludG8gdGhlIGxvYWRpbmcgc3RhdGUsIGV4Y2VwdCBmb3IgdGhlXG4gICAgLy8gY3VycmVudCBmZXRjaGVyIHdoaWNoIHdlIHdhbnQgdG8ga2VlcCBpbiBpdCdzIGN1cnJlbnQgbG9hZGluZyBzdGF0ZSB3aGljaFxuICAgIC8vIGNvbnRhaW5zIGl0J3MgYWN0aW9uIHN1Ym1pc3Npb24gaW5mbyArIGFjdGlvbiBkYXRhXG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZmlsdGVyKHJmID0+IHJmLmtleSAhPT0ga2V5KS5mb3JFYWNoKHJmID0+IHtcbiAgICAgIGxldCBzdGFsZUtleSA9IHJmLmtleTtcbiAgICAgIGxldCBleGlzdGluZ0ZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoc3RhbGVLZXkpO1xuICAgICAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXIgPSBnZXRMb2FkaW5nRmV0Y2hlcih1bmRlZmluZWQsIGV4aXN0aW5nRmV0Y2hlciA/IGV4aXN0aW5nRmV0Y2hlci5kYXRhIDogdW5kZWZpbmVkKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChzdGFsZUtleSwgcmV2YWxpZGF0aW5nRmV0Y2hlcik7XG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoc3RhbGVLZXkpKSB7XG4gICAgICAgIGFib3J0RmV0Y2hlcihzdGFsZUtleSk7XG4gICAgICB9XG4gICAgICBpZiAocmYuY29udHJvbGxlcikge1xuICAgICAgICBmZXRjaENvbnRyb2xsZXJzLnNldChzdGFsZUtleSwgcmYuY29udHJvbGxlcik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7XG4gICAgbGV0IGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyA9ICgpID0+IHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2gocmYgPT4gYWJvcnRGZXRjaGVyKHJmLmtleSkpO1xuICAgIGFib3J0Q29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyk7XG4gICAgbGV0IHtcbiAgICAgIHJlc3VsdHMsXG4gICAgICBsb2FkZXJSZXN1bHRzLFxuICAgICAgZmV0Y2hlclJlc3VsdHNcbiAgICB9ID0gYXdhaXQgY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKHN0YXRlLm1hdGNoZXMsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCByZXZhbGlkYXRpb25SZXF1ZXN0KTtcbiAgICBpZiAoYWJvcnRDb250cm9sbGVyLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGFib3J0Q29udHJvbGxlci5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyk7XG4gICAgZmV0Y2hSZWxvYWRJZHMuZGVsZXRlKGtleSk7XG4gICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHIgPT4gZmV0Y2hDb250cm9sbGVycy5kZWxldGUoci5rZXkpKTtcbiAgICBsZXQgcmVkaXJlY3QgPSBmaW5kUmVkaXJlY3QocmVzdWx0cyk7XG4gICAgaWYgKHJlZGlyZWN0KSB7XG4gICAgICBpZiAocmVkaXJlY3QuaWR4ID49IG1hdGNoZXNUb0xvYWQubGVuZ3RoKSB7XG4gICAgICAgIC8vIElmIHRoaXMgcmVkaXJlY3QgY2FtZSBmcm9tIGEgZmV0Y2hlciBtYWtlIHN1cmUgd2UgbWFyayBpdCBpblxuICAgICAgICAvLyBmZXRjaFJlZGlyZWN0SWRzIHNvIGl0IGRvZXNuJ3QgZ2V0IHJldmFsaWRhdGVkIG9uIHRoZSBuZXh0IHNldCBvZlxuICAgICAgICAvLyBsb2FkZXIgZXhlY3V0aW9uc1xuICAgICAgICBsZXQgZmV0Y2hlcktleSA9IHJldmFsaWRhdGluZ0ZldGNoZXJzW3JlZGlyZWN0LmlkeCAtIG1hdGNoZXNUb0xvYWQubGVuZ3RoXS5rZXk7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGZldGNoZXJLZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZWRpcmVjdC5yZXN1bHQpO1xuICAgIH1cbiAgICAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuICAgIGxldCB7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSA9IHByb2Nlc3NMb2FkZXJEYXRhKHN0YXRlLCBzdGF0ZS5tYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCB1bmRlZmluZWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKTtcbiAgICAvLyBTaW5jZSB3ZSBsZXQgcmV2YWxpZGF0aW9ucyBjb21wbGV0ZSBldmVuIGlmIHRoZSBzdWJtaXR0aW5nIGZldGNoZXIgd2FzXG4gICAgLy8gZGVsZXRlZCwgb25seSBwdXQgaXQgYmFjayB0byBpZGxlIGlmIGl0IGhhc24ndCBiZWVuIGRlbGV0ZWRcbiAgICBpZiAoc3RhdGUuZmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IGdldERvbmVGZXRjaGVyKGFjdGlvblJlc3VsdC5kYXRhKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gICAgbGV0IGRpZEFib3J0RmV0Y2hMb2FkcyA9IGFib3J0U3RhbGVGZXRjaExvYWRzKGxvYWRJZCk7XG4gICAgLy8gSWYgd2UgYXJlIGN1cnJlbnRseSBpbiBhIG5hdmlnYXRpb24gbG9hZGluZyBzdGF0ZSBhbmQgdGhpcyBmZXRjaGVyIGlzXG4gICAgLy8gbW9yZSByZWNlbnQgdGhhbiB0aGUgbmF2aWdhdGlvbiwgd2Ugd2FudCB0aGUgbmV3ZXIgZGF0YSBzbyBhYm9ydCB0aGVcbiAgICAvLyBuYXZpZ2F0aW9uIGFuZCBjb21wbGV0ZSBpdCB3aXRoIHRoZSBmZXRjaGVyIGRhdGFcbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIgJiYgbG9hZElkID4gcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQpIHtcbiAgICAgIGludmFyaWFudChwZW5kaW5nQWN0aW9uLCBcIkV4cGVjdGVkIHBlbmRpbmcgYWN0aW9uXCIpO1xuICAgICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyICYmIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgY29tcGxldGVOYXZpZ2F0aW9uKHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YSxcbiAgICAgICAgZXJyb3JzLFxuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBvdGhlcndpc2UganVzdCB1cGRhdGUgd2l0aCB0aGUgZmV0Y2hlciBkYXRhLCBwcmVzZXJ2aW5nIGFueSBleGlzdGluZ1xuICAgICAgLy8gbG9hZGVyRGF0YSBmb3IgbG9hZGVycyB0aGF0IGRpZCBub3QgbmVlZCB0byByZWxvYWQuICBXZSBoYXZlIHRvXG4gICAgICAvLyBtYW51YWxseSBtZXJnZSBoZXJlIHNpbmNlIHdlIGFyZW4ndCBnb2luZyB0aHJvdWdoIGNvbXBsZXRlTmF2aWdhdGlvblxuICAgICAgdXBkYXRlU3RhdGUoX2V4dGVuZHMoe1xuICAgICAgICBlcnJvcnMsXG4gICAgICAgIGxvYWRlckRhdGE6IG1lcmdlTG9hZGVyRGF0YShzdGF0ZS5sb2FkZXJEYXRhLCBsb2FkZXJEYXRhLCBtYXRjaGVzLCBlcnJvcnMpXG4gICAgICB9LCBkaWRBYm9ydEZldGNoTG9hZHMgfHwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoID4gMCA/IHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9IDoge30pKTtcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQ2FsbCB0aGUgbWF0Y2hlZCBsb2FkZXIgZm9yIGZldGNoZXIubG9hZCgpLCBoYW5kbGluZyByZWRpcmVjdHMsIGVycm9ycywgZXRjLlxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVGZXRjaGVyTG9hZGVyKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMsIHN1Ym1pc3Npb24pIHtcbiAgICBsZXQgZXhpc3RpbmdGZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgLy8gUHV0IHRoaXMgZmV0Y2hlciBpbnRvIGl0J3MgbG9hZGluZyBzdGF0ZVxuICAgIGxldCBsb2FkaW5nRmV0Y2hlciA9IGdldExvYWRpbmdGZXRjaGVyKHN1Ym1pc3Npb24sIGV4aXN0aW5nRmV0Y2hlciA/IGV4aXN0aW5nRmV0Y2hlci5kYXRhIDogdW5kZWZpbmVkKTtcbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBsb2FkaW5nRmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7XG4gICAgLy8gQ2FsbCB0aGUgbG9hZGVyIGZvciB0aGlzIGZldGNoZXIgcm91dGUgbWF0Y2hcbiAgICBsZXQgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBmZXRjaFJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIHBhdGgsIGFib3J0Q29udHJvbGxlci5zaWduYWwpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KGtleSwgYWJvcnRDb250cm9sbGVyKTtcbiAgICBsZXQgb3JpZ2luYXRpbmdMb2FkSWQgPSBpbmNyZW1lbnRpbmdMb2FkSWQ7XG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IGNhbGxMb2FkZXJPckFjdGlvbihcImxvYWRlclwiLCBmZXRjaFJlcXVlc3QsIG1hdGNoLCBtYXRjaGVzLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBiYXNlbmFtZSk7XG4gICAgLy8gRGVmZXJyZWQgaXNuJ3Qgc3VwcG9ydGVkIGZvciBmZXRjaGVyIGxvYWRzLCBhd2FpdCBldmVyeXRoaW5nIGFuZCB0cmVhdCBpdFxuICAgIC8vIGFzIGEgbm9ybWFsIGxvYWQuICByZXNvbHZlRGVmZXJyZWREYXRhIHdpbGwgcmV0dXJuIHVuZGVmaW5lZCBpZiB0aGlzXG4gICAgLy8gZmV0Y2hlciBnZXRzIGFib3J0ZWQsIHNvIHdlIGp1c3QgbGVhdmUgcmVzdWx0IHVudG91Y2hlZCBhbmQgc2hvcnQgY2lyY3VpdFxuICAgIC8vIGJlbG93IGlmIHRoYXQgaGFwcGVuc1xuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHJlc3VsdCA9IChhd2FpdCByZXNvbHZlRGVmZXJyZWREYXRhKHJlc3VsdCwgZmV0Y2hSZXF1ZXN0LnNpZ25hbCwgdHJ1ZSkpIHx8IHJlc3VsdDtcbiAgICB9XG4gICAgLy8gV2UgY2FuIGRlbGV0ZSB0aGlzIHNvIGxvbmcgYXMgd2Ugd2VyZW4ndCBhYm9ydGVkIGJ5IG91ciBvdXIgb3duIGZldGNoZXJcbiAgICAvLyByZS1sb2FkIHdoaWNoIHdvdWxkIGhhdmUgcHV0IF9uZXdfIGNvbnRyb2xsZXIgaXMgaW4gZmV0Y2hDb250cm9sbGVyc1xuICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmdldChrZXkpID09PSBhYm9ydENvbnRyb2xsZXIpIHtcbiAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgfVxuICAgIGlmIChmZXRjaFJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gSWYgdGhlIGxvYWRlciB0aHJldyBhIHJlZGlyZWN0IFJlc3BvbnNlLCBzdGFydCBhIG5ldyBSRVBMQUNFIG5hdmlnYXRpb25cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBpZiAocGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPiBvcmlnaW5hdGluZ0xvYWRJZCkge1xuICAgICAgICAvLyBBIG5ldyBuYXZpZ2F0aW9uIHdhcyBraWNrZWQgb2ZmIGFmdGVyIG91ciBsb2FkZXIgc3RhcnRlZCwgc28gdGhhdFxuICAgICAgICAvLyBzaG91bGQgdGFrZSBwcmVjZWRlbmNlIG92ZXIgdGhpcyByZWRpcmVjdCBuYXZpZ2F0aW9uXG4gICAgICAgIGxldCBkb25lRmV0Y2hlciA9IGdldERvbmVGZXRjaGVyKHVuZGVmaW5lZCk7XG4gICAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5hZGQoa2V5KTtcbiAgICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUHJvY2VzcyBhbnkgbm9uLXJlZGlyZWN0IGVycm9ycyB0aHJvd25cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgcm91dGVJZCk7XG4gICAgICBzdGF0ZS5mZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgICAgIC8vIFRPRE86IEluIHJlbWl4LCB0aGlzIHdvdWxkIHJlc2V0IHRvIElETEVfTkFWSUdBVElPTiBpZiBpdCB3YXMgYSBjYXRjaCAtXG4gICAgICAvLyBkbyB3ZSBuZWVkIHRvIGJlaGF2ZSBhbnkgZGlmZmVyZW50bHkgd2l0aCBvdXIgbm9uLXJlZGlyZWN0IGVycm9ycz9cbiAgICAgIC8vIFdoYXQgaWYgaXQgd2FzIGEgbm9uLXJlZGlyZWN0IFJlc3BvbnNlP1xuICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycyksXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoIWlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSwgXCJVbmhhbmRsZWQgZmV0Y2hlciBkZWZlcnJlZCBkYXRhXCIpO1xuICAgIC8vIFB1dCB0aGUgZmV0Y2hlciBiYWNrIGludG8gYW4gaWRsZSBzdGF0ZVxuICAgIGxldCBkb25lRmV0Y2hlciA9IGdldERvbmVGZXRjaGVyKHJlc3VsdC5kYXRhKTtcbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBkb25lRmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gaGFuZGxlIHJlZGlyZWN0cyByZXR1cm5lZCBmcm9tIGFuIGFjdGlvbiBvciBsb2FkZXIuXG4gICAqIE5vcm1hbGx5LCBhIHJlZGlyZWN0IFwicmVwbGFjZXNcIiB0aGUgbmF2aWdhdGlvbiB0aGF0IHRyaWdnZXJlZCBpdC4gIFNvLCBmb3JcbiAgICogZXhhbXBsZTpcbiAgICpcbiAgICogIC0gdXNlciBpcyBvbiAvYVxuICAgKiAgLSB1c2VyIGNsaWNrcyBhIGxpbmsgdG8gL2JcbiAgICogIC0gbG9hZGVyIGZvciAvYiByZWRpcmVjdHMgdG8gL2NcbiAgICpcbiAgICogSW4gYSBub24tSlMgYXBwIHRoZSBicm93c2VyIHdvdWxkIHRyYWNrIHRoZSBpbi1mbGlnaHQgbmF2aWdhdGlvbiB0byAvYiBhbmRcbiAgICogdGhlbiByZXBsYWNlIGl0IHdpdGggL2Mgd2hlbiBpdCBlbmNvdW50ZXJlZCB0aGUgcmVkaXJlY3QgcmVzcG9uc2UuICBJblxuICAgKiB0aGUgZW5kIGl0IHdvdWxkIG9ubHkgZXZlciB1cGRhdGUgdGhlIFVSTCBiYXIgd2l0aCAvYy5cbiAgICpcbiAgICogSW4gY2xpZW50LXNpZGUgcm91dGluZyB1c2luZyBwdXNoU3RhdGUvcmVwbGFjZVN0YXRlLCB3ZSBhaW0gdG8gZW11bGF0ZVxuICAgKiB0aGlzIGJlaGF2aW9yIGFuZCB3ZSBhbHNvIGRvIG5vdCB1cGRhdGUgaGlzdG9yeSB1bnRpbCB0aGUgZW5kIG9mIHRoZVxuICAgKiBuYXZpZ2F0aW9uIChpbmNsdWRpbmcgcHJvY2Vzc2VkIHJlZGlyZWN0cykuICBUaGlzIG1lYW5zIHRoYXQgd2UgbmV2ZXJcbiAgICogYWN0dWFsbHkgdG91Y2ggaGlzdG9yeSB1bnRpbCB3ZSd2ZSBwcm9jZXNzZWQgcmVkaXJlY3RzLCBzbyB3ZSBqdXN0IHVzZVxuICAgKiB0aGUgaGlzdG9yeSBhY3Rpb24gZnJvbSB0aGUgb3JpZ2luYWwgbmF2aWdhdGlvbiAoUFVTSCBvciBSRVBMQUNFKS5cbiAgICovXG4gIGFzeW5jIGZ1bmN0aW9uIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZWRpcmVjdCwgX3RlbXApIHtcbiAgICBsZXQge1xuICAgICAgc3VibWlzc2lvbixcbiAgICAgIHJlcGxhY2UsXG4gICAgICBpc0ZldGNoQWN0aW9uUmVkaXJlY3RcbiAgICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gICAgaWYgKHJlZGlyZWN0LnJldmFsaWRhdGUpIHtcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSB0cnVlO1xuICAgIH1cbiAgICBsZXQgcmVkaXJlY3RMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHN0YXRlLmxvY2F0aW9uLCByZWRpcmVjdC5sb2NhdGlvbiwgLy8gVE9ETzogVGhpcyBjYW4gYmUgcmVtb3ZlZCBvbmNlIHdlIGdldCByaWQgb2YgdXNlVHJhbnNpdGlvbiBpbiBSZW1peCB2MlxuICAgIF9leHRlbmRzKHtcbiAgICAgIF9pc1JlZGlyZWN0OiB0cnVlXG4gICAgfSwgaXNGZXRjaEFjdGlvblJlZGlyZWN0ID8ge1xuICAgICAgX2lzRmV0Y2hBY3Rpb25SZWRpcmVjdDogdHJ1ZVxuICAgIH0gOiB7fSkpO1xuICAgIGludmFyaWFudChyZWRpcmVjdExvY2F0aW9uLCBcIkV4cGVjdGVkIGEgbG9jYXRpb24gb24gdGhlIHJlZGlyZWN0IG5hdmlnYXRpb25cIik7XG4gICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgbGV0IGlzRG9jdW1lbnRSZWxvYWQgPSBmYWxzZTtcbiAgICAgIGlmIChyZWRpcmVjdC5yZWxvYWREb2N1bWVudCkge1xuICAgICAgICAvLyBIYXJkIHJlbG9hZCBpZiB0aGUgcmVzcG9uc2UgY29udGFpbmVkIFgtUmVtaXgtUmVsb2FkLURvY3VtZW50XG4gICAgICAgIGlzRG9jdW1lbnRSZWxvYWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChBQlNPTFVURV9VUkxfUkVHRVgudGVzdChyZWRpcmVjdC5sb2NhdGlvbikpIHtcbiAgICAgICAgY29uc3QgdXJsID0gaW5pdC5oaXN0b3J5LmNyZWF0ZVVSTChyZWRpcmVjdC5sb2NhdGlvbik7XG4gICAgICAgIGlzRG9jdW1lbnRSZWxvYWQgPVxuICAgICAgICAvLyBIYXJkIHJlbG9hZCBpZiBpdCdzIGFuIGFic29sdXRlIFVSTCB0byBhIG5ldyBvcmlnaW5cbiAgICAgICAgdXJsLm9yaWdpbiAhPT0gcm91dGVyV2luZG93LmxvY2F0aW9uLm9yaWdpbiB8fFxuICAgICAgICAvLyBIYXJkIHJlbG9hZCBpZiBpdCdzIGFuIGFic29sdXRlIFVSTCB0aGF0IGRvZXMgbm90IG1hdGNoIG91ciBiYXNlbmFtZVxuICAgICAgICBzdHJpcEJhc2VuYW1lKHVybC5wYXRobmFtZSwgYmFzZW5hbWUpID09IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoaXNEb2N1bWVudFJlbG9hZCkge1xuICAgICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICAgIHJvdXRlcldpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHJlZGlyZWN0LmxvY2F0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByb3V0ZXJXaW5kb3cubG9jYXRpb24uYXNzaWduKHJlZGlyZWN0LmxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFRoZXJlJ3Mgbm8gbmVlZCB0byBhYm9ydCBvbiByZWRpcmVjdHMsIHNpbmNlIHdlIGRvbid0IGRldGVjdCB0aGVcbiAgICAvLyByZWRpcmVjdCB1bnRpbCB0aGUgYWN0aW9uL2xvYWRlcnMgaGF2ZSBzZXR0bGVkXG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtcbiAgICBsZXQgcmVkaXJlY3RIaXN0b3J5QWN0aW9uID0gcmVwbGFjZSA9PT0gdHJ1ZSA/IEFjdGlvbi5SZXBsYWNlIDogQWN0aW9uLlB1c2g7XG4gICAgLy8gVXNlIHRoZSBpbmNvbWluZyBzdWJtaXNzaW9uIGlmIHByb3ZpZGVkLCBmYWxsYmFjayBvbiB0aGUgYWN0aXZlIG9uZSBpblxuICAgIC8vIHN0YXRlLm5hdmlnYXRpb25cbiAgICBsZXQgYWN0aXZlU3VibWlzc2lvbiA9IHN1Ym1pc3Npb24gfHwgZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uKHN0YXRlLm5hdmlnYXRpb24pO1xuICAgIC8vIElmIHRoaXMgd2FzIGEgMzA3LzMwOCBzdWJtaXNzaW9uIHdlIHdhbnQgdG8gcHJlc2VydmUgdGhlIEhUVFAgbWV0aG9kIGFuZFxuICAgIC8vIHJlLXN1Ym1pdCB0aGUgR0VUL1BPU1QvUFVUL1BBVENIL0RFTEVURSBhcyBhIHN1Ym1pc3Npb24gbmF2aWdhdGlvbiB0byB0aGVcbiAgICAvLyByZWRpcmVjdGVkIGxvY2F0aW9uXG4gICAgaWYgKHJlZGlyZWN0UHJlc2VydmVNZXRob2RTdGF0dXNDb2Rlcy5oYXMocmVkaXJlY3Quc3RhdHVzKSAmJiBhY3RpdmVTdWJtaXNzaW9uICYmIGlzTXV0YXRpb25NZXRob2QoYWN0aXZlU3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgICAgYXdhaXQgc3RhcnROYXZpZ2F0aW9uKHJlZGlyZWN0SGlzdG9yeUFjdGlvbiwgcmVkaXJlY3RMb2NhdGlvbiwge1xuICAgICAgICBzdWJtaXNzaW9uOiBfZXh0ZW5kcyh7fSwgYWN0aXZlU3VibWlzc2lvbiwge1xuICAgICAgICAgIGZvcm1BY3Rpb246IHJlZGlyZWN0LmxvY2F0aW9uXG4gICAgICAgIH0pLFxuICAgICAgICAvLyBQcmVzZXJ2ZSB0aGlzIGZsYWcgYWNyb3NzIHJlZGlyZWN0c1xuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaXNGZXRjaEFjdGlvblJlZGlyZWN0KSB7XG4gICAgICAvLyBGb3IgYSBmZXRjaCBhY3Rpb24gcmVkaXJlY3QsIHdlIGtpY2sgb2ZmIGEgbmV3IGxvYWRpbmcgbmF2aWdhdGlvblxuICAgICAgLy8gd2l0aG91dCB0aGUgZmV0Y2hlciBzdWJtaXNzaW9uLCBidXQgd2Ugc2VuZCBpdCBhbG9uZyBmb3Igc2hvdWxkUmV2YWxpZGF0ZVxuICAgICAgYXdhaXQgc3RhcnROYXZpZ2F0aW9uKHJlZGlyZWN0SGlzdG9yeUFjdGlvbiwgcmVkaXJlY3RMb2NhdGlvbiwge1xuICAgICAgICBvdmVycmlkZU5hdmlnYXRpb246IGdldExvYWRpbmdOYXZpZ2F0aW9uKHJlZGlyZWN0TG9jYXRpb24pLFxuICAgICAgICBmZXRjaGVyU3VibWlzc2lvbjogYWN0aXZlU3VibWlzc2lvbixcbiAgICAgICAgLy8gUHJlc2VydmUgdGhpcyBmbGFnIGFjcm9zcyByZWRpcmVjdHNcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgd2UgaGF2ZSBhIHN1Ym1pc3Npb24sIHdlIHdpbGwgcHJlc2VydmUgaXQgdGhyb3VnaCB0aGUgcmVkaXJlY3QgbmF2aWdhdGlvblxuICAgICAgbGV0IG92ZXJyaWRlTmF2aWdhdGlvbiA9IGdldExvYWRpbmdOYXZpZ2F0aW9uKHJlZGlyZWN0TG9jYXRpb24sIGFjdGl2ZVN1Ym1pc3Npb24pO1xuICAgICAgYXdhaXQgc3RhcnROYXZpZ2F0aW9uKHJlZGlyZWN0SGlzdG9yeUFjdGlvbiwgcmVkaXJlY3RMb2NhdGlvbiwge1xuICAgICAgICBvdmVycmlkZU5hdmlnYXRpb24sXG4gICAgICAgIC8vIFByZXNlcnZlIHRoaXMgZmxhZyBhY3Jvc3MgcmVkaXJlY3RzXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIGNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YShjdXJyZW50TWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgZmV0Y2hlcnNUb0xvYWQsIHJlcXVlc3QpIHtcbiAgICAvLyBDYWxsIGFsbCBuYXZpZ2F0aW9uIGxvYWRlcnMgYW5kIHJldmFsaWRhdGluZyBmZXRjaGVyIGxvYWRlcnMgaW4gcGFyYWxsZWwsXG4gICAgLy8gdGhlbiBzbGljZSBvZmYgdGhlIHJlc3VsdHMgaW50byBzZXBhcmF0ZSBhcnJheXMgc28gd2UgY2FuIGhhbmRsZSB0aGVtXG4gICAgLy8gYWNjb3JkaW5nbHlcbiAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFsuLi5tYXRjaGVzVG9Mb2FkLm1hcChtYXRjaCA9PiBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgcmVxdWVzdCwgbWF0Y2gsIG1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGJhc2VuYW1lKSksIC4uLmZldGNoZXJzVG9Mb2FkLm1hcChmID0+IHtcbiAgICAgIGlmIChmLm1hdGNoZXMgJiYgZi5tYXRjaCAmJiBmLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxMb2FkZXJPckFjdGlvbihcImxvYWRlclwiLCBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIGYucGF0aCwgZi5jb250cm9sbGVyLnNpZ25hbCksIGYubWF0Y2gsIGYubWF0Y2hlcywgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgYmFzZW5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGVycm9yID0ge1xuICAgICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgICAgICBwYXRobmFtZTogZi5wYXRoXG4gICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgfVxuICAgIH0pXSk7XG4gICAgbGV0IGxvYWRlclJlc3VsdHMgPSByZXN1bHRzLnNsaWNlKDAsIG1hdGNoZXNUb0xvYWQubGVuZ3RoKTtcbiAgICBsZXQgZmV0Y2hlclJlc3VsdHMgPSByZXN1bHRzLnNsaWNlKG1hdGNoZXNUb0xvYWQubGVuZ3RoKTtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChbcmVzb2x2ZURlZmVycmVkUmVzdWx0cyhjdXJyZW50TWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgbG9hZGVyUmVzdWx0cywgbG9hZGVyUmVzdWx0cy5tYXAoKCkgPT4gcmVxdWVzdC5zaWduYWwpLCBmYWxzZSwgc3RhdGUubG9hZGVyRGF0YSksIHJlc29sdmVEZWZlcnJlZFJlc3VsdHMoY3VycmVudE1hdGNoZXMsIGZldGNoZXJzVG9Mb2FkLm1hcChmID0+IGYubWF0Y2gpLCBmZXRjaGVyUmVzdWx0cywgZmV0Y2hlcnNUb0xvYWQubWFwKGYgPT4gZi5jb250cm9sbGVyID8gZi5jb250cm9sbGVyLnNpZ25hbCA6IG51bGwpLCB0cnVlKV0pO1xuICAgIHJldHVybiB7XG4gICAgICByZXN1bHRzLFxuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIGZldGNoZXJSZXN1bHRzXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpIHtcbiAgICAvLyBFdmVyeSBpbnRlcnJ1cHRpb24gdHJpZ2dlcnMgYSByZXZhbGlkYXRpb25cbiAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gdHJ1ZTtcbiAgICAvLyBDYW5jZWwgcGVuZGluZyByb3V0ZS1sZXZlbCBkZWZlcnJlZHMgYW5kIG1hcmsgY2FuY2VsbGVkIHJvdXRlcyBmb3JcbiAgICAvLyByZXZhbGlkYXRpb25cbiAgICBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcy5wdXNoKC4uLmNhbmNlbEFjdGl2ZURlZmVycmVkcygpKTtcbiAgICAvLyBBYm9ydCBpbi1mbGlnaHQgZmV0Y2hlciBsb2Fkc1xuICAgIGZldGNoTG9hZE1hdGNoZXMuZm9yRWFjaCgoXywga2V5KSA9PiB7XG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSkge1xuICAgICAgICBjYW5jZWxsZWRGZXRjaGVyTG9hZHMucHVzaChrZXkpO1xuICAgICAgICBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBlcnJvcikge1xuICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShzdGF0ZS5tYXRjaGVzLCByb3V0ZUlkKTtcbiAgICBkZWxldGVGZXRjaGVyKGtleSk7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZXJyb3JzOiB7XG4gICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogZXJyb3JcbiAgICAgIH0sXG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBkZWxldGVGZXRjaGVyKGtleSkge1xuICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgLy8gRG9uJ3QgYWJvcnQgdGhlIGNvbnRyb2xsZXIgaWYgdGhpcyBpcyBhIGRlbGV0aW9uIG9mIGEgZmV0Y2hlci5zdWJtaXQoKVxuICAgIC8vIGluIGl0J3MgbG9hZGluZyBwaGFzZSBzaW5jZSAtIHdlIGRvbid0IHdhbnQgdG8gYWJvcnQgdGhlIGNvcnJlc3BvbmRpbmdcbiAgICAvLyByZXZhbGlkYXRpb24gYW5kIHdhbnQgdGhlbSB0byBjb21wbGV0ZSBhbmQgbGFuZFxuICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpICYmICEoZmV0Y2hlciAmJiBmZXRjaGVyLnN0YXRlID09PSBcImxvYWRpbmdcIiAmJiBmZXRjaFJlbG9hZElkcy5oYXMoa2V5KSkpIHtcbiAgICAgIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgIH1cbiAgICBmZXRjaExvYWRNYXRjaGVzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoUmVkaXJlY3RJZHMuZGVsZXRlKGtleSk7XG4gICAgc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gIH1cbiAgZnVuY3Rpb24gYWJvcnRGZXRjaGVyKGtleSkge1xuICAgIGxldCBjb250cm9sbGVyID0gZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KTtcbiAgICBpbnZhcmlhbnQoY29udHJvbGxlciwgXCJFeHBlY3RlZCBmZXRjaCBjb250cm9sbGVyOiBcIiArIGtleSk7XG4gICAgY29udHJvbGxlci5hYm9ydCgpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gIH1cbiAgZnVuY3Rpb24gbWFya0ZldGNoZXJzRG9uZShrZXlzKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIGtleXMpIHtcbiAgICAgIGxldCBmZXRjaGVyID0gZ2V0RmV0Y2hlcihrZXkpO1xuICAgICAgbGV0IGRvbmVGZXRjaGVyID0gZ2V0RG9uZUZldGNoZXIoZmV0Y2hlci5kYXRhKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpIHtcbiAgICBsZXQgZG9uZUtleXMgPSBbXTtcbiAgICBsZXQgdXBkYXRlZEZldGNoZXJzID0gZmFsc2U7XG4gICAgZm9yIChsZXQga2V5IG9mIGZldGNoUmVkaXJlY3RJZHMpIHtcbiAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgICBpbnZhcmlhbnQoZmV0Y2hlciwgXCJFeHBlY3RlZCBmZXRjaGVyOiBcIiArIGtleSk7XG4gICAgICBpZiAoZmV0Y2hlci5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIpIHtcbiAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5kZWxldGUoa2V5KTtcbiAgICAgICAgZG9uZUtleXMucHVzaChrZXkpO1xuICAgICAgICB1cGRhdGVkRmV0Y2hlcnMgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBtYXJrRmV0Y2hlcnNEb25lKGRvbmVLZXlzKTtcbiAgICByZXR1cm4gdXBkYXRlZEZldGNoZXJzO1xuICB9XG4gIGZ1bmN0aW9uIGFib3J0U3RhbGVGZXRjaExvYWRzKGxhbmRlZElkKSB7XG4gICAgbGV0IHllZXRlZEtleXMgPSBbXTtcbiAgICBmb3IgKGxldCBba2V5LCBpZF0gb2YgZmV0Y2hSZWxvYWRJZHMpIHtcbiAgICAgIGlmIChpZCA8IGxhbmRlZElkKSB7XG4gICAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgICAgIGludmFyaWFudChmZXRjaGVyLCBcIkV4cGVjdGVkIGZldGNoZXI6IFwiICsga2V5KTtcbiAgICAgICAgaWYgKGZldGNoZXIuc3RhdGUgPT09IFwibG9hZGluZ1wiKSB7XG4gICAgICAgICAgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgICAgICAgZmV0Y2hSZWxvYWRJZHMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgeWVldGVkS2V5cy5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgbWFya0ZldGNoZXJzRG9uZSh5ZWV0ZWRLZXlzKTtcbiAgICByZXR1cm4geWVldGVkS2V5cy5sZW5ndGggPiAwO1xuICB9XG4gIGZ1bmN0aW9uIGdldEJsb2NrZXIoa2V5LCBmbikge1xuICAgIGxldCBibG9ja2VyID0gc3RhdGUuYmxvY2tlcnMuZ2V0KGtleSkgfHwgSURMRV9CTE9DS0VSO1xuICAgIGlmIChibG9ja2VyRnVuY3Rpb25zLmdldChrZXkpICE9PSBmbikge1xuICAgICAgYmxvY2tlckZ1bmN0aW9ucy5zZXQoa2V5LCBmbik7XG4gICAgfVxuICAgIHJldHVybiBibG9ja2VyO1xuICB9XG4gIGZ1bmN0aW9uIGRlbGV0ZUJsb2NrZXIoa2V5KSB7XG4gICAgc3RhdGUuYmxvY2tlcnMuZGVsZXRlKGtleSk7XG4gICAgYmxvY2tlckZ1bmN0aW9ucy5kZWxldGUoa2V5KTtcbiAgfVxuICAvLyBVdGlsaXR5IGZ1bmN0aW9uIHRvIHVwZGF0ZSBibG9ja2VycywgZW5zdXJpbmcgdmFsaWQgc3RhdGUgdHJhbnNpdGlvbnNcbiAgZnVuY3Rpb24gdXBkYXRlQmxvY2tlcihrZXksIG5ld0Jsb2NrZXIpIHtcbiAgICBsZXQgYmxvY2tlciA9IHN0YXRlLmJsb2NrZXJzLmdldChrZXkpIHx8IElETEVfQkxPQ0tFUjtcbiAgICAvLyBQb29yIG1hbnMgc3RhdGUgbWFjaGluZSA6KVxuICAgIC8vIGh0dHBzOi8vbWVybWFpZC5saXZlL2VkaXQjcGFrbzplTnFWa2M5T3d6QU14bDhsOG5uakFZckV0RElPSEVCSWd3dktKVFJlR3kzX2xEcElxTzI3azZhd01HMFhjckxsbno4N253ZG9uRVNvZ0tYWEJ1RTc5cnE3NVhaTzMteUhkczBSSlZ1djcwWXJQbFVyQ0VlMkhmck9SUzNydWJxWmZ1aHRwZzVDOXdrNXRaNFZLY1JVcTg4cTlaOFJTMC00OGNFMWlISmtMMHVnYkh1Rkx1czlMNnNwWnk4blg5TVAyQ05kb21WYXBvc3F1M2ZHYXlUOFQ4LWpKUXdoZXBvX1V0cGdCUWFERVVvbTA0ZFpoQU4xYUpCRGxVS0pCeEUxY2VCMlNtajBNbG4tSUJXNUFGVTJkd1Vpa3R0XzJRYXEyZEJmYUtkRXVwODVVVjdZZC1kS2psbmthYmwyUHZyMERUa1RyZU1cbiAgICBpbnZhcmlhbnQoYmxvY2tlci5zdGF0ZSA9PT0gXCJ1bmJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInByb2NlZWRpbmdcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInVuYmxvY2tlZFwiIHx8IGJsb2NrZXIuc3RhdGUgPT09IFwicHJvY2VlZGluZ1wiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwidW5ibG9ja2VkXCIsIFwiSW52YWxpZCBibG9ja2VyIHN0YXRlIHRyYW5zaXRpb246IFwiICsgYmxvY2tlci5zdGF0ZSArIFwiIC0+IFwiICsgbmV3QmxvY2tlci5zdGF0ZSk7XG4gICAgbGV0IGJsb2NrZXJzID0gbmV3IE1hcChzdGF0ZS5ibG9ja2Vycyk7XG4gICAgYmxvY2tlcnMuc2V0KGtleSwgbmV3QmxvY2tlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgYmxvY2tlcnNcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBzaG91bGRCbG9ja05hdmlnYXRpb24oX3JlZjIpIHtcbiAgICBsZXQge1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0gPSBfcmVmMjtcbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9ucy5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFdlIG9ueSBzdXBwb3J0IGEgc2luZ2xlIGFjdGl2ZSBibG9ja2VyIGF0IHRoZSBtb21lbnQgc2luY2Ugd2UgZG9uJ3QgaGF2ZVxuICAgIC8vIGFueSBjb21wZWxsaW5nIHVzZSBjYXNlcyBmb3IgbXVsdGktYmxvY2tlciB5ZXRcbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9ucy5zaXplID4gMSkge1xuICAgICAgd2FybmluZyhmYWxzZSwgXCJBIHJvdXRlciBvbmx5IHN1cHBvcnRzIG9uZSBibG9ja2VyIGF0IGEgdGltZVwiKTtcbiAgICB9XG4gICAgbGV0IGVudHJpZXMgPSBBcnJheS5mcm9tKGJsb2NrZXJGdW5jdGlvbnMuZW50cmllcygpKTtcbiAgICBsZXQgW2Jsb2NrZXJLZXksIGJsb2NrZXJGdW5jdGlvbl0gPSBlbnRyaWVzW2VudHJpZXMubGVuZ3RoIC0gMV07XG4gICAgbGV0IGJsb2NrZXIgPSBzdGF0ZS5ibG9ja2Vycy5nZXQoYmxvY2tlcktleSk7XG4gICAgaWYgKGJsb2NrZXIgJiYgYmxvY2tlci5zdGF0ZSA9PT0gXCJwcm9jZWVkaW5nXCIpIHtcbiAgICAgIC8vIElmIHRoZSBibG9ja2VyIGlzIGN1cnJlbnRseSBwcm9jZWVkaW5nLCB3ZSBkb24ndCBuZWVkIHRvIHJlLWNoZWNrXG4gICAgICAvLyBpdCBhbmQgY2FuIGxldCB0aGlzIG5hdmlnYXRpb24gY29udGludWVcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQXQgdGhpcyBwb2ludCwgd2Uga25vdyB3ZSdyZSB1bmJsb2NrZWQvYmxvY2tlZCBzbyB3ZSBuZWVkIHRvIGNoZWNrIHRoZVxuICAgIC8vIHVzZXItcHJvdmlkZWQgYmxvY2tlciBmdW5jdGlvblxuICAgIGlmIChibG9ja2VyRnVuY3Rpb24oe1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0pKSB7XG4gICAgICByZXR1cm4gYmxvY2tlcktleTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY2FuY2VsQWN0aXZlRGVmZXJyZWRzKHByZWRpY2F0ZSkge1xuICAgIGxldCBjYW5jZWxsZWRSb3V0ZUlkcyA9IFtdO1xuICAgIGFjdGl2ZURlZmVycmVkcy5mb3JFYWNoKChkZmQsIHJvdXRlSWQpID0+IHtcbiAgICAgIGlmICghcHJlZGljYXRlIHx8IHByZWRpY2F0ZShyb3V0ZUlkKSkge1xuICAgICAgICAvLyBDYW5jZWwgdGhlIGRlZmVycmVkIC0gYnV0IGRvIG5vdCByZW1vdmUgZnJvbSBhY3RpdmVEZWZlcnJlZHMgaGVyZSAtXG4gICAgICAgIC8vIHdlIHJlbHkgb24gdGhlIHN1YnNjcmliZXJzIHRvIGRvIHRoYXQgc28gb3VyIHRlc3RzIGNhbiBhc3NlcnQgcHJvcGVyXG4gICAgICAgIC8vIGNsZWFudXAgdmlhIF9pbnRlcm5hbEFjdGl2ZURlZmVycmVkc1xuICAgICAgICBkZmQuY2FuY2VsKCk7XG4gICAgICAgIGNhbmNlbGxlZFJvdXRlSWRzLnB1c2gocm91dGVJZCk7XG4gICAgICAgIGFjdGl2ZURlZmVycmVkcy5kZWxldGUocm91dGVJZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNhbmNlbGxlZFJvdXRlSWRzO1xuICB9XG4gIC8vIE9wdCBpbiB0byBjYXB0dXJpbmcgYW5kIHJlcG9ydGluZyBzY3JvbGwgcG9zaXRpb25zIGR1cmluZyBuYXZpZ2F0aW9ucyxcbiAgLy8gdXNlZCBieSB0aGUgPFNjcm9sbFJlc3RvcmF0aW9uPiBjb21wb25lbnRcbiAgZnVuY3Rpb24gZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24ocG9zaXRpb25zLCBnZXRQb3NpdGlvbiwgZ2V0S2V5KSB7XG4gICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBwb3NpdGlvbnM7XG4gICAgZ2V0U2Nyb2xsUG9zaXRpb24gPSBnZXRQb3NpdGlvbjtcbiAgICBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IGdldEtleSB8fCBudWxsO1xuICAgIC8vIFBlcmZvcm0gaW5pdGlhbCBoeWRyYXRpb24gc2Nyb2xsIHJlc3RvcmF0aW9uLCBzaW5jZSB3ZSBtaXNzIHRoZSBib2F0IG9uXG4gICAgLy8gdGhlIGluaXRpYWwgdXBkYXRlU3RhdGUoKSBiZWNhdXNlIHdlJ3ZlIG5vdCB5ZXQgcmVuZGVyZWQgPFNjcm9sbFJlc3RvcmF0aW9uLz5cbiAgICAvLyBhbmQgdGhlcmVmb3JlIGhhdmUgbm8gc2F2ZWRTY3JvbGxQb3NpdGlvbnMgYXZhaWxhYmxlXG4gICAgaWYgKCFpbml0aWFsU2Nyb2xsUmVzdG9yZWQgJiYgc3RhdGUubmF2aWdhdGlvbiA9PT0gSURMRV9OQVZJR0FUSU9OKSB7XG4gICAgICBpbml0aWFsU2Nyb2xsUmVzdG9yZWQgPSB0cnVlO1xuICAgICAgbGV0IHkgPSBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzKTtcbiAgICAgIGlmICh5ICE9IG51bGwpIHtcbiAgICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogeVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gbnVsbDtcbiAgICAgIGdldFNjcm9sbFBvc2l0aW9uID0gbnVsbDtcbiAgICAgIGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ID0gbnVsbDtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGdldFNjcm9sbEtleShsb2NhdGlvbiwgbWF0Y2hlcykge1xuICAgIGlmIChnZXRTY3JvbGxSZXN0b3JhdGlvbktleSkge1xuICAgICAgbGV0IGtleSA9IGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5KGxvY2F0aW9uLCBtYXRjaGVzLm1hcChtID0+IGNyZWF0ZVVzZU1hdGNoZXNNYXRjaChtLCBzdGF0ZS5sb2FkZXJEYXRhKSkpO1xuICAgICAgcmV0dXJuIGtleSB8fCBsb2NhdGlvbi5rZXk7XG4gICAgfVxuICAgIHJldHVybiBsb2NhdGlvbi5rZXk7XG4gIH1cbiAgZnVuY3Rpb24gc2F2ZVNjcm9sbFBvc2l0aW9uKGxvY2F0aW9uLCBtYXRjaGVzKSB7XG4gICAgaWYgKHNhdmVkU2Nyb2xsUG9zaXRpb25zICYmIGdldFNjcm9sbFBvc2l0aW9uKSB7XG4gICAgICBsZXQga2V5ID0gZ2V0U2Nyb2xsS2V5KGxvY2F0aW9uLCBtYXRjaGVzKTtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV0gPSBnZXRTY3JvbGxQb3NpdGlvbigpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKGxvY2F0aW9uLCBtYXRjaGVzKSB7XG4gICAgaWYgKHNhdmVkU2Nyb2xsUG9zaXRpb25zKSB7XG4gICAgICBsZXQga2V5ID0gZ2V0U2Nyb2xsS2V5KGxvY2F0aW9uLCBtYXRjaGVzKTtcbiAgICAgIGxldCB5ID0gc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgeSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4geTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gX2ludGVybmFsU2V0Um91dGVzKG5ld1JvdXRlcykge1xuICAgIG1hbmlmZXN0ID0ge307XG4gICAgaW5GbGlnaHREYXRhUm91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhuZXdSb3V0ZXMsIG1hcFJvdXRlUHJvcGVydGllcywgdW5kZWZpbmVkLCBtYW5pZmVzdCk7XG4gIH1cbiAgcm91dGVyID0ge1xuICAgIGdldCBiYXNlbmFtZSgpIHtcbiAgICAgIHJldHVybiBiYXNlbmFtZTtcbiAgICB9LFxuICAgIGdldCBzdGF0ZSgpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9LFxuICAgIGdldCByb3V0ZXMoKSB7XG4gICAgICByZXR1cm4gZGF0YVJvdXRlcztcbiAgICB9LFxuICAgIGluaXRpYWxpemUsXG4gICAgc3Vic2NyaWJlLFxuICAgIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uLFxuICAgIG5hdmlnYXRlLFxuICAgIGZldGNoLFxuICAgIHJldmFsaWRhdGUsXG4gICAgLy8gUGFzc3Rocm91Z2ggdG8gaGlzdG9yeS1hd2FyZSBjcmVhdGVIcmVmIHVzZWQgYnkgdXNlSHJlZiBzbyB3ZSBnZXQgcHJvcGVyXG4gICAgLy8gaGFzaC1hd2FyZSBVUkxzIGluIERPTSBwYXRoc1xuICAgIGNyZWF0ZUhyZWY6IHRvID0+IGluaXQuaGlzdG9yeS5jcmVhdGVIcmVmKHRvKSxcbiAgICBlbmNvZGVMb2NhdGlvbjogdG8gPT4gaW5pdC5oaXN0b3J5LmVuY29kZUxvY2F0aW9uKHRvKSxcbiAgICBnZXRGZXRjaGVyLFxuICAgIGRlbGV0ZUZldGNoZXIsXG4gICAgZGlzcG9zZSxcbiAgICBnZXRCbG9ja2VyLFxuICAgIGRlbGV0ZUJsb2NrZXIsXG4gICAgX2ludGVybmFsRmV0Y2hDb250cm9sbGVyczogZmV0Y2hDb250cm9sbGVycyxcbiAgICBfaW50ZXJuYWxBY3RpdmVEZWZlcnJlZHM6IGFjdGl2ZURlZmVycmVkcyxcbiAgICAvLyBUT0RPOiBSZW1vdmUgc2V0Um91dGVzLCBpdCdzIHRlbXBvcmFyeSB0byBhdm9pZCBkZWFsaW5nIHdpdGhcbiAgICAvLyB1cGRhdGluZyB0aGUgdHJlZSB3aGlsZSB2YWxpZGF0aW5nIHRoZSB1cGRhdGUgYWxnb3JpdGhtLlxuICAgIF9pbnRlcm5hbFNldFJvdXRlc1xuICB9O1xuICByZXR1cm4gcm91dGVyO1xufVxuLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIGNyZWF0ZVN0YXRpY0hhbmRsZXJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5jb25zdCBVTlNBRkVfREVGRVJSRURfU1lNQk9MID0gU3ltYm9sKFwiZGVmZXJyZWRcIik7XG5mdW5jdGlvbiBjcmVhdGVTdGF0aWNIYW5kbGVyKHJvdXRlcywgb3B0cykge1xuICBpbnZhcmlhbnQocm91dGVzLmxlbmd0aCA+IDAsIFwiWW91IG11c3QgcHJvdmlkZSBhIG5vbi1lbXB0eSByb3V0ZXMgYXJyYXkgdG8gY3JlYXRlU3RhdGljSGFuZGxlclwiKTtcbiAgbGV0IG1hbmlmZXN0ID0ge307XG4gIGxldCBiYXNlbmFtZSA9IChvcHRzID8gb3B0cy5iYXNlbmFtZSA6IG51bGwpIHx8IFwiL1wiO1xuICBsZXQgbWFwUm91dGVQcm9wZXJ0aWVzO1xuICBpZiAob3B0cyAhPSBudWxsICYmIG9wdHMubWFwUm91dGVQcm9wZXJ0aWVzKSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gb3B0cy5tYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH0gZWxzZSBpZiAob3B0cyAhPSBudWxsICYmIG9wdHMuZGV0ZWN0RXJyb3JCb3VuZGFyeSkge1xuICAgIC8vIElmIHRoZXkgYXJlIHN0aWxsIHVzaW5nIHRoZSBkZXByZWNhdGVkIHZlcnNpb24sIHdyYXAgaXQgd2l0aCB0aGUgbmV3IEFQSVxuICAgIGxldCBkZXRlY3RFcnJvckJvdW5kYXJ5ID0gb3B0cy5kZXRlY3RFcnJvckJvdW5kYXJ5O1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IHJvdXRlID0+ICh7XG4gICAgICBoYXNFcnJvckJvdW5kYXJ5OiBkZXRlY3RFcnJvckJvdW5kYXJ5KHJvdXRlKVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IGRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH1cbiAgbGV0IGRhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKHJvdXRlcywgbWFwUm91dGVQcm9wZXJ0aWVzLCB1bmRlZmluZWQsIG1hbmlmZXN0KTtcbiAgLyoqXG4gICAqIFRoZSBxdWVyeSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgZG9jdW1lbnQgcmVxdWVzdHMsIGluIHdoaWNoIHdlIHdhbnQgdG9cbiAgICogY2FsbCBhbiBvcHRpb25hbCBhY3Rpb24gYW5kIHBvdGVudGlhbGx5IG11bHRpcGxlIGxvYWRlcnMgZm9yIGFsbCBuZXN0ZWRcbiAgICogcm91dGVzLiAgSXQgcmV0dXJucyBhIFN0YXRpY0hhbmRsZXJDb250ZXh0IG9iamVjdCwgd2hpY2ggaXMgdmVyeSBzaW1pbGFyXG4gICAqIHRvIHRoZSByb3V0ZXIgc3RhdGUgKGxvY2F0aW9uLCBsb2FkZXJEYXRhLCBhY3Rpb25EYXRhLCBlcnJvcnMsIGV0Yy4pIGFuZFxuICAgKiBhbHNvIGFkZHMgU1NSLXNwZWNpZmljIGluZm9ybWF0aW9uIHN1Y2ggYXMgdGhlIHN0YXR1c0NvZGUgYW5kIGhlYWRlcnNcbiAgICogZnJvbSBhY3Rpb24vbG9hZGVycyBSZXNwb25zZXMuXG4gICAqXG4gICAqIEl0IF9zaG91bGRfIG5ldmVyIHRocm93IGFuZCBzaG91bGQgcmVwb3J0IGFsbCBlcnJvcnMgdGhyb3VnaCB0aGVcbiAgICogcmV0dXJuZWQgY29udGV4dC5lcnJvcnMgb2JqZWN0LCBwcm9wZXJseSBhc3NvY2lhdGluZyBlcnJvcnMgdG8gdGhlaXIgZXJyb3JcbiAgICogYm91bmRhcnkuICBBZGRpdGlvbmFsbHksIGl0IHRyYWNrcyBfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB3aGljaCBjYW4gYmVcbiAgICogdXNlZCB0byBlbXVsYXRlIFJlYWN0IGVycm9yIGJvdW5kYXJpZXMgZHVyaW5nIFNTciBieSBwZXJmb3JtaW5nIGEgc2Vjb25kXG4gICAqIHBhc3Mgb25seSBkb3duIHRvIHRoZSBib3VuZGFyeUlkLlxuICAgKlxuICAgKiBUaGUgb25lIGV4Y2VwdGlvbiB3aGVyZSB3ZSBkbyBub3QgcmV0dXJuIGEgU3RhdGljSGFuZGxlckNvbnRleHQgaXMgd2hlbiBhXG4gICAqIHJlZGlyZWN0IHJlc3BvbnNlIGlzIHJldHVybmVkIG9yIHRocm93biBmcm9tIGFueSBhY3Rpb24vbG9hZGVyLiAgV2VcbiAgICogcHJvcGFnYXRlIHRoYXQgb3V0IGFuZCByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBzbyB0aGUgSFRUUCBzZXJ2ZXIgY2FuXG4gICAqIHJldHVybiBpdCBkaXJlY3RseS5cbiAgICovXG4gIGFzeW5jIGZ1bmN0aW9uIHF1ZXJ5KHJlcXVlc3QsIF90ZW1wMikge1xuICAgIGxldCB7XG4gICAgICByZXF1ZXN0Q29udGV4dFxuICAgIH0gPSBfdGVtcDIgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAyO1xuICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICBsZXQgbWV0aG9kID0gcmVxdWVzdC5tZXRob2Q7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oXCJcIiwgY3JlYXRlUGF0aCh1cmwpLCBudWxsLCBcImRlZmF1bHRcIik7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBsb2NhdGlvbiwgYmFzZW5hbWUpO1xuICAgIC8vIFNTUiBzdXBwb3J0cyBIRUFEIHJlcXVlc3RzIHdoaWxlIFNQQSBkb2Vzbid0XG4gICAgaWYgKCFpc1ZhbGlkTWV0aG9kKG1ldGhvZCkgJiYgbWV0aG9kICE9PSBcIkhFQURcIikge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kXG4gICAgICB9KTtcbiAgICAgIGxldCB7XG4gICAgICAgIG1hdGNoZXM6IG1ldGhvZE5vdEFsbG93ZWRNYXRjaGVzLFxuICAgICAgICByb3V0ZVxuICAgICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIG1hdGNoZXM6IG1ldGhvZE5vdEFsbG93ZWRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgfSxcbiAgICAgICAgc3RhdHVzQ29kZTogZXJyb3Iuc3RhdHVzLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCFtYXRjaGVzKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pO1xuICAgICAgbGV0IHtcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICByb3V0ZVxuICAgICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXR1c0NvZGU6IGVycm9yLnN0YXR1cyxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9LFxuICAgICAgICBhY3RpdmVEZWZlcnJlZHM6IG51bGxcbiAgICAgIH07XG4gICAgfVxuICAgIGxldCByZXN1bHQgPSBhd2FpdCBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0KTtcbiAgICBpZiAoaXNSZXNwb25zZShyZXN1bHQpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvLyBXaGVuIHJldHVybmluZyBTdGF0aWNIYW5kbGVyQ29udGV4dCwgd2UgcGF0Y2ggYmFjayBpbiB0aGUgbG9jYXRpb24gaGVyZVxuICAgIC8vIHNpbmNlIHdlIG5lZWQgaXQgZm9yIFJlYWN0IENvbnRleHQuICBCdXQgdGhpcyBoZWxwcyBrZWVwIG91ciBzdWJtaXQgYW5kXG4gICAgLy8gbG9hZFJvdXRlRGF0YSBvcGVyYXRpbmcgb24gYSBSZXF1ZXN0IGluc3RlYWQgb2YgYSBMb2NhdGlvblxuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBsb2NhdGlvbixcbiAgICAgIGJhc2VuYW1lXG4gICAgfSwgcmVzdWx0KTtcbiAgfVxuICAvKipcbiAgICogVGhlIHF1ZXJ5Um91dGUoKSBtZXRob2QgaXMgaW50ZW5kZWQgZm9yIHRhcmdldGVkIHJvdXRlIHJlcXVlc3RzLCBlaXRoZXJcbiAgICogZm9yIGZldGNoID9fZGF0YSByZXF1ZXN0cyBvciByZXNvdXJjZSByb3V0ZSByZXF1ZXN0cy4gIEluIHRoaXMgY2FzZSwgd2VcbiAgICogYXJlIG9ubHkgZXZlciBjYWxsaW5nIGEgc2luZ2xlIGFjdGlvbiBvciBsb2FkZXIsIGFuZCB3ZSBhcmUgcmV0dXJuaW5nIHRoZVxuICAgKiByZXR1cm5lZCB2YWx1ZSBkaXJlY3RseS4gIEluIG1vc3QgY2FzZXMsIHRoaXMgd2lsbCBiZSBhIFJlc3BvbnNlIHJldHVybmVkXG4gICAqIGZyb20gdGhlIGFjdGlvbi9sb2FkZXIsIGJ1dCBpdCBtYXkgYmUgYSBwcmltaXRpdmUgb3Igb3RoZXIgdmFsdWUgYXMgd2VsbCAtXG4gICAqIGFuZCBpbiBzdWNoIGNhc2VzIHRoZSBjYWxsaW5nIGNvbnRleHQgc2hvdWxkIGhhbmRsZSB0aGF0IGFjY29yZGluZ2x5LlxuICAgKlxuICAgKiBXZSBkbyByZXNwZWN0IHRoZSB0aHJvdy9yZXR1cm4gZGlmZmVyZW50aWF0aW9uLCBzbyBpZiBhbiBhY3Rpb24vbG9hZGVyXG4gICAqIHRocm93cywgdGhlbiB0aGlzIG1ldGhvZCB3aWxsIHRocm93IHRoZSB2YWx1ZS4gIFRoaXMgaXMgaW1wb3J0YW50IHNvIHdlXG4gICAqIGNhbiBkbyBwcm9wZXIgYm91bmRhcnkgaWRlbnRpZmljYXRpb24gaW4gUmVtaXggd2hlcmUgYSB0aHJvd24gUmVzcG9uc2VcbiAgICogbXVzdCBnbyB0byB0aGUgQ2F0Y2ggQm91bmRhcnkgYnV0IGEgcmV0dXJuZWQgUmVzcG9uc2UgaXMgaGFwcHktcGF0aC5cbiAgICpcbiAgICogT25lIHRoaW5nIHRvIG5vdGUgaXMgdGhhdCBhbnkgUm91dGVyLWluaXRpYXRlZCBFcnJvcnMgdGhhdCBtYWtlIHNlbnNlXG4gICAqIHRvIGFzc29jaWF0ZSB3aXRoIGEgc3RhdHVzIGNvZGUgd2lsbCBiZSB0aHJvd24gYXMgYW4gRXJyb3JSZXNwb25zZVxuICAgKiBpbnN0YW5jZSB3aGljaCBpbmNsdWRlIHRoZSByYXcgRXJyb3IsIHN1Y2ggdGhhdCB0aGUgY2FsbGluZyBjb250ZXh0IGNhblxuICAgKiBzZXJpYWxpemUgdGhlIGVycm9yIGFzIHRoZXkgc2VlIGZpdCB3aGlsZSBpbmNsdWRpbmcgdGhlIHByb3BlciByZXNwb25zZVxuICAgKiBjb2RlLiAgRXhhbXBsZXMgaGVyZSBhcmUgNDA0IGFuZCA0MDUgZXJyb3JzIHRoYXQgb2NjdXIgcHJpb3IgdG8gcmVhY2hpbmdcbiAgICogYW55IHVzZXItZGVmaW5lZCBsb2FkZXJzLlxuICAgKi9cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnlSb3V0ZShyZXF1ZXN0LCBfdGVtcDMpIHtcbiAgICBsZXQge1xuICAgICAgcm91dGVJZCxcbiAgICAgIHJlcXVlc3RDb250ZXh0XG4gICAgfSA9IF90ZW1wMyA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDM7XG4gICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGxldCBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcIlwiLCBjcmVhdGVQYXRoKHVybCksIG51bGwsIFwiZGVmYXVsdFwiKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uLCBiYXNlbmFtZSk7XG4gICAgLy8gU1NSIHN1cHBvcnRzIEhFQUQgcmVxdWVzdHMgd2hpbGUgU1BBIGRvZXNuJ3RcbiAgICBpZiAoIWlzVmFsaWRNZXRob2QobWV0aG9kKSAmJiBtZXRob2QgIT09IFwiSEVBRFwiICYmIG1ldGhvZCAhPT0gXCJPUFRJT05TXCIpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghbWF0Y2hlcykge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IG1hdGNoID0gcm91dGVJZCA/IG1hdGNoZXMuZmluZChtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpIDogZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuICAgIGlmIChyb3V0ZUlkICYmICFtYXRjaCkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDMsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICByb3V0ZUlkXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFtYXRjaCkge1xuICAgICAgLy8gVGhpcyBzaG91bGQgbmV2ZXIgaGl0IEkgZG9uJ3QgdGhpbms/XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgcXVlcnlJbXBsKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgbWF0Y2gpO1xuICAgIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGxldCBlcnJvciA9IHJlc3VsdC5lcnJvcnMgPyBPYmplY3QudmFsdWVzKHJlc3VsdC5lcnJvcnMpWzBdIDogdW5kZWZpbmVkO1xuICAgIGlmIChlcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBJZiB3ZSBnb3QgYmFjayByZXN1bHQuZXJyb3JzLCB0aGF0IG1lYW5zIHRoZSBsb2FkZXIvYWN0aW9uIHRocmV3XG4gICAgICAvLyBfc29tZXRoaW5nXyB0aGF0IHdhc24ndCBhIFJlc3BvbnNlLCBidXQgaXQncyBub3QgZ3VhcmFudGVlZC9yZXF1aXJlZFxuICAgICAgLy8gdG8gYmUgYW4gYGluc3RhbmNlb2YgRXJyb3JgIGVpdGhlciwgc28gd2UgaGF2ZSB0byB1c2UgdGhyb3cgaGVyZSB0b1xuICAgICAgLy8gcHJlc2VydmUgdGhlIFwiZXJyb3JcIiBzdGF0ZSBvdXRzaWRlIG9mIHF1ZXJ5SW1wbC5cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICAvLyBQaWNrIG9mZiB0aGUgcmlnaHQgc3RhdGUgdmFsdWUgdG8gcmV0dXJuXG4gICAgaWYgKHJlc3VsdC5hY3Rpb25EYXRhKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhyZXN1bHQuYWN0aW9uRGF0YSlbMF07XG4gICAgfVxuICAgIGlmIChyZXN1bHQubG9hZGVyRGF0YSkge1xuICAgICAgdmFyIF9yZXN1bHQkYWN0aXZlRGVmZXJyZTtcbiAgICAgIGxldCBkYXRhID0gT2JqZWN0LnZhbHVlcyhyZXN1bHQubG9hZGVyRGF0YSlbMF07XG4gICAgICBpZiAoKF9yZXN1bHQkYWN0aXZlRGVmZXJyZSA9IHJlc3VsdC5hY3RpdmVEZWZlcnJlZHMpICE9IG51bGwgJiYgX3Jlc3VsdCRhY3RpdmVEZWZlcnJlW21hdGNoLnJvdXRlLmlkXSkge1xuICAgICAgICBkYXRhW1VOU0FGRV9ERUZFUlJFRF9TWU1CT0xdID0gcmVzdWx0LmFjdGl2ZURlZmVycmVkc1ttYXRjaC5yb3V0ZS5pZF07XG4gICAgICB9XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBhc3luYyBmdW5jdGlvbiBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoKSB7XG4gICAgaW52YXJpYW50KHJlcXVlc3Quc2lnbmFsLCBcInF1ZXJ5KCkvcXVlcnlSb3V0ZSgpIHJlcXVlc3RzIG11c3QgY29udGFpbiBhbiBBYm9ydENvbnRyb2xsZXIgc2lnbmFsXCIpO1xuICAgIHRyeSB7XG4gICAgICBpZiAoaXNNdXRhdGlvbk1ldGhvZChyZXF1ZXN0Lm1ldGhvZC50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgc3VibWl0KHJlcXVlc3QsIG1hdGNoZXMsIHJvdXRlTWF0Y2ggfHwgZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pLCByZXF1ZXN0Q29udGV4dCwgcm91dGVNYXRjaCAhPSBudWxsKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBsb2FkUm91dGVEYXRhKHJlcXVlc3QsIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoKTtcbiAgICAgIHJldHVybiBpc1Jlc3BvbnNlKHJlc3VsdCkgPyByZXN1bHQgOiBfZXh0ZW5kcyh7fSwgcmVzdWx0LCB7XG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB0aHJldy9yZXR1cm5lZCBhIFJlc3BvbnNlIGluIGNhbGxMb2FkZXJPckFjdGlvbiwgd2UgdGhyb3dcbiAgICAgIC8vIGl0IHRvIGJhaWwgb3V0IGFuZCB0aGVuIHJldHVybiBvciB0aHJvdyBoZXJlIGJhc2VkIG9uIHdoZXRoZXIgdGhlIHVzZXJcbiAgICAgIC8vIHJldHVybmVkIG9yIHRocmV3XG4gICAgICBpZiAoaXNRdWVyeVJvdXRlUmVzcG9uc2UoZSkpIHtcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcikge1xuICAgICAgICAgIHRocm93IGUucmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGUucmVzcG9uc2U7XG4gICAgICB9XG4gICAgICAvLyBSZWRpcmVjdHMgYXJlIGFsd2F5cyByZXR1cm5lZCBzaW5jZSB0aGV5IGRvbid0IHByb3BhZ2F0ZSB0byBjYXRjaFxuICAgICAgLy8gYm91bmRhcmllc1xuICAgICAgaWYgKGlzUmVkaXJlY3RSZXNwb25zZShlKSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICAgIH1cbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIHN1Ym1pdChyZXF1ZXN0LCBtYXRjaGVzLCBhY3Rpb25NYXRjaCwgcmVxdWVzdENvbnRleHQsIGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBpZiAoIWFjdGlvbk1hdGNoLnJvdXRlLmFjdGlvbiAmJiAhYWN0aW9uTWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgcGF0aG5hbWU6IG5ldyBVUkwocmVxdWVzdC51cmwpLnBhdGhuYW1lLFxuICAgICAgICByb3V0ZUlkOiBhY3Rpb25NYXRjaC5yb3V0ZS5pZFxuICAgICAgfSk7XG4gICAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJhY3Rpb25cIiwgcmVxdWVzdCwgYWN0aW9uTWF0Y2gsIG1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGJhc2VuYW1lLCB7XG4gICAgICAgIGlzU3RhdGljUmVxdWVzdDogdHJ1ZSxcbiAgICAgICAgaXNSb3V0ZVJlcXVlc3QsXG4gICAgICAgIHJlcXVlc3RDb250ZXh0XG4gICAgICB9KTtcbiAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgIGxldCBtZXRob2QgPSBpc1JvdXRlUmVxdWVzdCA/IFwicXVlcnlSb3V0ZVwiIDogXCJxdWVyeVwiO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWV0aG9kICsgXCIoKSBjYWxsIGFib3J0ZWRcIik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFVoaGhoIC0gdGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuLCB3ZSBzaG91bGQgYWx3YXlzIHRocm93IHRoZXNlIGZyb21cbiAgICAgIC8vIGNhbGxMb2FkZXJPckFjdGlvbiwgYnV0IHRoZSB0eXBlIG5hcnJvd2luZyBoZXJlIGtlZXBzIFRTIGhhcHB5IGFuZCB3ZVxuICAgICAgLy8gY2FuIGdldCBiYWNrIG9uIHRoZSBcInRocm93IGFsbCByZWRpcmVjdCByZXNwb25zZXNcIiB0cmFpbiBoZXJlIHNob3VsZFxuICAgICAgLy8gdGhpcyBldmVyIGhhcHBlbiA6L1xuICAgICAgdGhyb3cgbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiByZXN1bHQuc3RhdHVzLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgTG9jYXRpb246IHJlc3VsdC5sb2NhdGlvblxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgICAgdHlwZTogXCJkZWZlci1hY3Rpb25cIlxuICAgICAgfSk7XG4gICAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgIC8vIE5vdGU6IFRoaXMgc2hvdWxkIG9ubHkgYmUgbm9uLVJlc3BvbnNlIHZhbHVlcyBpZiB3ZSBnZXQgaGVyZSwgc2luY2VcbiAgICAgIC8vIGlzUm91dGVSZXF1ZXN0IHNob3VsZCB0aHJvdyBhbnkgUmVzcG9uc2UgcmVjZWl2ZWQgaW4gY2FsbExvYWRlck9yQWN0aW9uXG4gICAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAgIHRocm93IHJlc3VsdC5lcnJvcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1hdGNoZXM6IFthY3Rpb25NYXRjaF0sXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBhY3Rpb25EYXRhOiB7XG4gICAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmRhdGFcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3JzOiBudWxsLFxuICAgICAgICAvLyBOb3RlOiBzdGF0dXNDb2RlICsgaGVhZGVycyBhcmUgdW51c2VkIGhlcmUgc2luY2UgcXVlcnlSb3V0ZSB3aWxsXG4gICAgICAgIC8vIHJldHVybiB0aGUgcmF3IFJlc3BvbnNlIG9yIHZhbHVlXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9LFxuICAgICAgICBhY3RpdmVEZWZlcnJlZHM6IG51bGxcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFN0b3JlIG9mZiB0aGUgcGVuZGluZyBlcnJvciAtIHdlIHVzZSBpdCB0byBkZXRlcm1pbmUgd2hpY2ggbG9hZGVyc1xuICAgICAgLy8gdG8gY2FsbCBhbmQgd2lsbCBjb21taXQgaXQgd2hlbiB3ZSBjb21wbGV0ZSB0aGUgbmF2aWdhdGlvblxuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGFjdGlvbk1hdGNoLnJvdXRlLmlkKTtcbiAgICAgIGxldCBjb250ZXh0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgdW5kZWZpbmVkLCB7XG4gICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICB9KTtcbiAgICAgIC8vIGFjdGlvbiBzdGF0dXMgY29kZXMgdGFrZSBwcmVjZWRlbmNlIG92ZXIgbG9hZGVyIHN0YXR1cyBjb2Rlc1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCB7XG4gICAgICAgIHN0YXR1c0NvZGU6IGlzUm91dGVFcnJvclJlc3BvbnNlKHJlc3VsdC5lcnJvcikgPyByZXN1bHQuZXJyb3Iuc3RhdHVzIDogNTAwLFxuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiBfZXh0ZW5kcyh7fSwgcmVzdWx0LmhlYWRlcnMgPyB7XG4gICAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmhlYWRlcnNcbiAgICAgICAgfSA6IHt9KVxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIENyZWF0ZSBhIEdFVCByZXF1ZXN0IGZvciB0aGUgbG9hZGVyc1xuICAgIGxldCBsb2FkZXJSZXF1ZXN0ID0gbmV3IFJlcXVlc3QocmVxdWVzdC51cmwsIHtcbiAgICAgIGhlYWRlcnM6IHJlcXVlc3QuaGVhZGVycyxcbiAgICAgIHJlZGlyZWN0OiByZXF1ZXN0LnJlZGlyZWN0LFxuICAgICAgc2lnbmFsOiByZXF1ZXN0LnNpZ25hbFxuICAgIH0pO1xuICAgIGxldCBjb250ZXh0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShsb2FkZXJSZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCByZXN1bHQuc3RhdHVzQ29kZSA/IHtcbiAgICAgIHN0YXR1c0NvZGU6IHJlc3VsdC5zdGF0dXNDb2RlXG4gICAgfSA6IHt9LCB7XG4gICAgICBhY3Rpb25EYXRhOiB7XG4gICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICB9LFxuICAgICAgYWN0aW9uSGVhZGVyczogX2V4dGVuZHMoe30sIHJlc3VsdC5oZWFkZXJzID8ge1xuICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuaGVhZGVyc1xuICAgICAgfSA6IHt9KVxuICAgIH0pO1xuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIGxvYWRSb3V0ZURhdGEocmVxdWVzdCwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIHJvdXRlTWF0Y2gsIHBlbmRpbmdBY3Rpb25FcnJvcikge1xuICAgIGxldCBpc1JvdXRlUmVxdWVzdCA9IHJvdXRlTWF0Y2ggIT0gbnVsbDtcbiAgICAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW4gKHF1ZXJ5Um91dGUoKSlcbiAgICBpZiAoaXNSb3V0ZVJlcXVlc3QgJiYgIShyb3V0ZU1hdGNoICE9IG51bGwgJiYgcm91dGVNYXRjaC5yb3V0ZS5sb2FkZXIpICYmICEocm91dGVNYXRjaCAhPSBudWxsICYmIHJvdXRlTWF0Y2gucm91dGUubGF6eSkpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBuZXcgVVJMKHJlcXVlc3QudXJsKS5wYXRobmFtZSxcbiAgICAgICAgcm91dGVJZDogcm91dGVNYXRjaCA9PSBudWxsID8gdm9pZCAwIDogcm91dGVNYXRjaC5yb3V0ZS5pZFxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCByZXF1ZXN0TWF0Y2hlcyA9IHJvdXRlTWF0Y2ggPyBbcm91dGVNYXRjaF0gOiBnZXRMb2FkZXJNYXRjaGVzVW50aWxCb3VuZGFyeShtYXRjaGVzLCBPYmplY3Qua2V5cyhwZW5kaW5nQWN0aW9uRXJyb3IgfHwge30pWzBdKTtcbiAgICBsZXQgbWF0Y2hlc1RvTG9hZCA9IHJlcXVlc3RNYXRjaGVzLmZpbHRlcihtID0+IG0ucm91dGUubG9hZGVyIHx8IG0ucm91dGUubGF6eSk7XG4gICAgLy8gU2hvcnQgY2lyY3VpdCBpZiB3ZSBoYXZlIG5vIGxvYWRlcnMgdG8gcnVuIChxdWVyeSgpKVxuICAgIGlmIChtYXRjaGVzVG9Mb2FkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgLy8gQWRkIGEgbnVsbCBmb3IgYWxsIG1hdGNoZWQgcm91dGVzIGZvciBwcm9wZXIgcmV2YWxpZGF0aW9uIG9uIHRoZSBjbGllbnRcbiAgICAgICAgbG9hZGVyRGF0YTogbWF0Y2hlcy5yZWR1Y2UoKGFjYywgbSkgPT4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgICBbbS5yb3V0ZS5pZF06IG51bGxcbiAgICAgICAgfSksIHt9KSxcbiAgICAgICAgZXJyb3JzOiBwZW5kaW5nQWN0aW9uRXJyb3IgfHwgbnVsbCxcbiAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH1cbiAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFsuLi5tYXRjaGVzVG9Mb2FkLm1hcChtYXRjaCA9PiBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgcmVxdWVzdCwgbWF0Y2gsIG1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGJhc2VuYW1lLCB7XG4gICAgICBpc1N0YXRpY1JlcXVlc3Q6IHRydWUsXG4gICAgICBpc1JvdXRlUmVxdWVzdCxcbiAgICAgIHJlcXVlc3RDb250ZXh0XG4gICAgfSkpXSk7XG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIGxldCBtZXRob2QgPSBpc1JvdXRlUmVxdWVzdCA/IFwicXVlcnlSb3V0ZVwiIDogXCJxdWVyeVwiO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArIFwiKCkgY2FsbCBhYm9ydGVkXCIpO1xuICAgIH1cbiAgICAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuICAgIGxldCBhY3RpdmVEZWZlcnJlZHMgPSBuZXcgTWFwKCk7XG4gICAgbGV0IGNvbnRleHQgPSBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdBY3Rpb25FcnJvciwgYWN0aXZlRGVmZXJyZWRzKTtcbiAgICAvLyBBZGQgYSBudWxsIGZvciBhbnkgbm9uLWxvYWRlciBtYXRjaGVzIGZvciBwcm9wZXIgcmV2YWxpZGF0aW9uIG9uIHRoZSBjbGllbnRcbiAgICBsZXQgZXhlY3V0ZWRMb2FkZXJzID0gbmV3IFNldChtYXRjaGVzVG9Mb2FkLm1hcChtYXRjaCA9PiBtYXRjaC5yb3V0ZS5pZCkpO1xuICAgIG1hdGNoZXMuZm9yRWFjaChtYXRjaCA9PiB7XG4gICAgICBpZiAoIWV4ZWN1dGVkTG9hZGVycy5oYXMobWF0Y2gucm91dGUuaWQpKSB7XG4gICAgICAgIGNvbnRleHQubG9hZGVyRGF0YVttYXRjaC5yb3V0ZS5pZF0gPSBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dCwge1xuICAgICAgbWF0Y2hlcyxcbiAgICAgIGFjdGl2ZURlZmVycmVkczogYWN0aXZlRGVmZXJyZWRzLnNpemUgPiAwID8gT2JqZWN0LmZyb21FbnRyaWVzKGFjdGl2ZURlZmVycmVkcy5lbnRyaWVzKCkpIDogbnVsbFxuICAgIH0pO1xuICB9XG4gIHJldHVybiB7XG4gICAgZGF0YVJvdXRlcyxcbiAgICBxdWVyeSxcbiAgICBxdWVyeVJvdXRlXG4gIH07XG59XG4vLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gSGVscGVyc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8qKlxuICogR2l2ZW4gYW4gZXhpc3RpbmcgU3RhdGljSGFuZGxlckNvbnRleHQgYW5kIGFuIGVycm9yIHRocm93biBhdCByZW5kZXIgdGltZSxcbiAqIHByb3ZpZGUgYW4gdXBkYXRlZCBTdGF0aWNIYW5kbGVyQ29udGV4dCBzdWl0YWJsZSBmb3IgYSBzZWNvbmQgU1NSIHJlbmRlclxuICovXG5mdW5jdGlvbiBnZXRTdGF0aWNDb250ZXh0RnJvbUVycm9yKHJvdXRlcywgY29udGV4dCwgZXJyb3IpIHtcbiAgbGV0IG5ld0NvbnRleHQgPSBfZXh0ZW5kcyh7fSwgY29udGV4dCwge1xuICAgIHN0YXR1c0NvZGU6IDUwMCxcbiAgICBlcnJvcnM6IHtcbiAgICAgIFtjb250ZXh0Ll9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkIHx8IHJvdXRlc1swXS5pZF06IGVycm9yXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG5ld0NvbnRleHQ7XG59XG5mdW5jdGlvbiBpc1N1Ym1pc3Npb25OYXZpZ2F0aW9uKG9wdHMpIHtcbiAgcmV0dXJuIG9wdHMgIT0gbnVsbCAmJiAoXCJmb3JtRGF0YVwiIGluIG9wdHMgJiYgb3B0cy5mb3JtRGF0YSAhPSBudWxsIHx8IFwiYm9keVwiIGluIG9wdHMgJiYgb3B0cy5ib2R5ICE9PSB1bmRlZmluZWQpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplVG8obG9jYXRpb24sIG1hdGNoZXMsIGJhc2VuYW1lLCBwcmVwZW5kQmFzZW5hbWUsIHRvLCBmcm9tUm91dGVJZCwgcmVsYXRpdmUpIHtcbiAgbGV0IGNvbnRleHR1YWxNYXRjaGVzO1xuICBsZXQgYWN0aXZlUm91dGVNYXRjaDtcbiAgaWYgKGZyb21Sb3V0ZUlkICE9IG51bGwgJiYgcmVsYXRpdmUgIT09IFwicGF0aFwiKSB7XG4gICAgLy8gR3JhYiBtYXRjaGVzIHVwIHRvIHRoZSBjYWxsaW5nIHJvdXRlIHNvIG91ciByb3V0ZS1yZWxhdGl2ZSBsb2dpYyBpc1xuICAgIC8vIHJlbGF0aXZlIHRvIHRoZSBjb3JyZWN0IHNvdXJjZSByb3V0ZS4gIFdoZW4gdXNpbmcgcmVsYXRpdmU6cGF0aCxcbiAgICAvLyBmcm9tUm91dGVJZCBpcyBpZ25vcmVkIHNpbmNlIHRoYXQgaXMgYWx3YXlzIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50XG4gICAgLy8gbG9jYXRpb24gcGF0aFxuICAgIGNvbnRleHR1YWxNYXRjaGVzID0gW107XG4gICAgZm9yIChsZXQgbWF0Y2ggb2YgbWF0Y2hlcykge1xuICAgICAgY29udGV4dHVhbE1hdGNoZXMucHVzaChtYXRjaCk7XG4gICAgICBpZiAobWF0Y2gucm91dGUuaWQgPT09IGZyb21Sb3V0ZUlkKSB7XG4gICAgICAgIGFjdGl2ZVJvdXRlTWF0Y2ggPSBtYXRjaDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnRleHR1YWxNYXRjaGVzID0gbWF0Y2hlcztcbiAgICBhY3RpdmVSb3V0ZU1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdO1xuICB9XG4gIC8vIFJlc29sdmUgdGhlIHJlbGF0aXZlIHBhdGhcbiAgbGV0IHBhdGggPSByZXNvbHZlVG8odG8gPyB0byA6IFwiLlwiLCBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhjb250ZXh0dWFsTWF0Y2hlcykubWFwKG0gPT4gbS5wYXRobmFtZUJhc2UpLCBzdHJpcEJhc2VuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgbG9jYXRpb24ucGF0aG5hbWUsIHJlbGF0aXZlID09PSBcInBhdGhcIik7XG4gIC8vIFdoZW4gYHRvYCBpcyBub3Qgc3BlY2lmaWVkIHdlIGluaGVyaXQgc2VhcmNoL2hhc2ggZnJvbSB0aGUgY3VycmVudFxuICAvLyBsb2NhdGlvbiwgdW5saWtlIHdoZW4gdG89XCIuXCIgYW5kIHdlIGp1c3QgaW5oZXJpdCB0aGUgcGF0aC5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVtaXgvaXNzdWVzLzkyN1xuICBpZiAodG8gPT0gbnVsbCkge1xuICAgIHBhdGguc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoO1xuICAgIHBhdGguaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIH1cbiAgLy8gQWRkIGFuID9pbmRleCBwYXJhbSBmb3IgbWF0Y2hlZCBpbmRleCByb3V0ZXMgaWYgd2UgZG9uJ3QgYWxyZWFkeSBoYXZlIG9uZVxuICBpZiAoKHRvID09IG51bGwgfHwgdG8gPT09IFwiXCIgfHwgdG8gPT09IFwiLlwiKSAmJiBhY3RpdmVSb3V0ZU1hdGNoICYmIGFjdGl2ZVJvdXRlTWF0Y2gucm91dGUuaW5kZXggJiYgIWhhc05ha2VkSW5kZXhRdWVyeShwYXRoLnNlYXJjaCkpIHtcbiAgICBwYXRoLnNlYXJjaCA9IHBhdGguc2VhcmNoID8gcGF0aC5zZWFyY2gucmVwbGFjZSgvXlxcPy8sIFwiP2luZGV4JlwiKSA6IFwiP2luZGV4XCI7XG4gIH1cbiAgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZS4gIElmXG4gIC8vIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2UgdGhlIHJhdyBiYXNlbmFtZSB3aGljaCBhbGxvd3NcbiAgLy8gdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlIHByZXNlbmNlIG9mIGEgdHJhaWxpbmcgc2xhc2hcbiAgLy8gb24gcm9vdCBhY3Rpb25zXG4gIGlmIChwcmVwZW5kQmFzZW5hbWUgJiYgYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgcGF0aC5wYXRobmFtZSA9IHBhdGgucGF0aG5hbWUgPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoLnBhdGhuYW1lXSk7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZVBhdGgocGF0aCk7XG59XG4vLyBOb3JtYWxpemUgbmF2aWdhdGlvbiBvcHRpb25zIGJ5IGNvbnZlcnRpbmcgZm9ybU1ldGhvZD1HRVQgZm9ybURhdGEgb2JqZWN0cyB0b1xuLy8gVVJMU2VhcmNoUGFyYW1zIHNvIHRoZXkgYmVoYXZlIGlkZW50aWNhbGx5IHRvIGxpbmtzIHdpdGggcXVlcnkgcGFyYW1zXG5mdW5jdGlvbiBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMobm9ybWFsaXplRm9ybU1ldGhvZCwgaXNGZXRjaGVyLCBwYXRoLCBvcHRzKSB7XG4gIC8vIFJldHVybiBsb2NhdGlvbiB2ZXJiYXRpbSBvbiBub24tc3VibWlzc2lvbiBuYXZpZ2F0aW9uc1xuICBpZiAoIW9wdHMgfHwgIWlzU3VibWlzc2lvbk5hdmlnYXRpb24ob3B0cykpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aFxuICAgIH07XG4gIH1cbiAgaWYgKG9wdHMuZm9ybU1ldGhvZCAmJiAhaXNWYWxpZE1ldGhvZChvcHRzLmZvcm1NZXRob2QpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsXG4gICAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kOiBvcHRzLmZvcm1NZXRob2RcbiAgICAgIH0pXG4gICAgfTtcbiAgfVxuICBsZXQgZ2V0SW52YWxpZEJvZHlFcnJvciA9ICgpID0+ICh7XG4gICAgcGF0aCxcbiAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgIHR5cGU6IFwiaW52YWxpZC1ib2R5XCJcbiAgICB9KVxuICB9KTtcbiAgLy8gQ3JlYXRlIGEgU3VibWlzc2lvbiBvbiBub24tR0VUIG5hdmlnYXRpb25zXG4gIGxldCByYXdGb3JtTWV0aG9kID0gb3B0cy5mb3JtTWV0aG9kIHx8IFwiZ2V0XCI7XG4gIGxldCBmb3JtTWV0aG9kID0gbm9ybWFsaXplRm9ybU1ldGhvZCA/IHJhd0Zvcm1NZXRob2QudG9VcHBlckNhc2UoKSA6IHJhd0Zvcm1NZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgbGV0IGZvcm1BY3Rpb24gPSBzdHJpcEhhc2hGcm9tUGF0aChwYXRoKTtcbiAgaWYgKG9wdHMuYm9keSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKG9wdHMuZm9ybUVuY1R5cGUgPT09IFwidGV4dC9wbGFpblwiKSB7XG4gICAgICAvLyB0ZXh0IG9ubHkgc3VwcG9ydCBQT1NUL1BVVC9QQVRDSC9ERUxFVEUgc3VibWlzc2lvbnNcbiAgICAgIGlmICghaXNNdXRhdGlvbk1ldGhvZChmb3JtTWV0aG9kKSkge1xuICAgICAgICByZXR1cm4gZ2V0SW52YWxpZEJvZHlFcnJvcigpO1xuICAgICAgfVxuICAgICAgbGV0IHRleHQgPSB0eXBlb2Ygb3B0cy5ib2R5ID09PSBcInN0cmluZ1wiID8gb3B0cy5ib2R5IDogb3B0cy5ib2R5IGluc3RhbmNlb2YgRm9ybURhdGEgfHwgb3B0cy5ib2R5IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zID9cbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI3BsYWluLXRleHQtZm9ybS1kYXRhXG4gICAgICBBcnJheS5mcm9tKG9wdHMuYm9keS5lbnRyaWVzKCkpLnJlZHVjZSgoYWNjLCBfcmVmMykgPT4ge1xuICAgICAgICBsZXQgW25hbWUsIHZhbHVlXSA9IF9yZWYzO1xuICAgICAgICByZXR1cm4gXCJcIiArIGFjYyArIG5hbWUgKyBcIj1cIiArIHZhbHVlICsgXCJcXG5cIjtcbiAgICAgIH0sIFwiXCIpIDogU3RyaW5nKG9wdHMuYm9keSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRoLFxuICAgICAgICBzdWJtaXNzaW9uOiB7XG4gICAgICAgICAgZm9ybU1ldGhvZCxcbiAgICAgICAgICBmb3JtQWN0aW9uLFxuICAgICAgICAgIGZvcm1FbmNUeXBlOiBvcHRzLmZvcm1FbmNUeXBlLFxuICAgICAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICAgICAganNvbjogdW5kZWZpbmVkLFxuICAgICAgICAgIHRleHRcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKG9wdHMuZm9ybUVuY1R5cGUgPT09IFwiYXBwbGljYXRpb24vanNvblwiKSB7XG4gICAgICAvLyBqc29uIG9ubHkgc3VwcG9ydHMgUE9TVC9QVVQvUEFUQ0gvREVMRVRFIHN1Ym1pc3Npb25zXG4gICAgICBpZiAoIWlzTXV0YXRpb25NZXRob2QoZm9ybU1ldGhvZCkpIHtcbiAgICAgICAgcmV0dXJuIGdldEludmFsaWRCb2R5RXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBqc29uID0gdHlwZW9mIG9wdHMuYm9keSA9PT0gXCJzdHJpbmdcIiA/IEpTT04ucGFyc2Uob3B0cy5ib2R5KSA6IG9wdHMuYm9keTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwYXRoLFxuICAgICAgICAgIHN1Ym1pc3Npb246IHtcbiAgICAgICAgICAgIGZvcm1NZXRob2QsXG4gICAgICAgICAgICBmb3JtQWN0aW9uLFxuICAgICAgICAgICAgZm9ybUVuY1R5cGU6IG9wdHMuZm9ybUVuY1R5cGUsXG4gICAgICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICAgICAganNvbixcbiAgICAgICAgICAgIHRleHQ6IHVuZGVmaW5lZFxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGdldEludmFsaWRCb2R5RXJyb3IoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaW52YXJpYW50KHR5cGVvZiBGb3JtRGF0YSA9PT0gXCJmdW5jdGlvblwiLCBcIkZvcm1EYXRhIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudFwiKTtcbiAgbGV0IHNlYXJjaFBhcmFtcztcbiAgbGV0IGZvcm1EYXRhO1xuICBpZiAob3B0cy5mb3JtRGF0YSkge1xuICAgIHNlYXJjaFBhcmFtcyA9IGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKG9wdHMuZm9ybURhdGEpO1xuICAgIGZvcm1EYXRhID0gb3B0cy5mb3JtRGF0YTtcbiAgfSBlbHNlIGlmIChvcHRzLmJvZHkgaW5zdGFuY2VvZiBGb3JtRGF0YSkge1xuICAgIHNlYXJjaFBhcmFtcyA9IGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKG9wdHMuYm9keSk7XG4gICAgZm9ybURhdGEgPSBvcHRzLmJvZHk7XG4gIH0gZWxzZSBpZiAob3B0cy5ib2R5IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zKSB7XG4gICAgc2VhcmNoUGFyYW1zID0gb3B0cy5ib2R5O1xuICAgIGZvcm1EYXRhID0gY29udmVydFNlYXJjaFBhcmFtc1RvRm9ybURhdGEoc2VhcmNoUGFyYW1zKTtcbiAgfSBlbHNlIGlmIChvcHRzLmJvZHkgPT0gbnVsbCkge1xuICAgIHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKG9wdHMuYm9keSk7XG4gICAgICBmb3JtRGF0YSA9IGNvbnZlcnRTZWFyY2hQYXJhbXNUb0Zvcm1EYXRhKHNlYXJjaFBhcmFtcyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGdldEludmFsaWRCb2R5RXJyb3IoKTtcbiAgICB9XG4gIH1cbiAgbGV0IHN1Ym1pc3Npb24gPSB7XG4gICAgZm9ybU1ldGhvZCxcbiAgICBmb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlOiBvcHRzICYmIG9wdHMuZm9ybUVuY1R5cGUgfHwgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICBmb3JtRGF0YSxcbiAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgdGV4dDogdW5kZWZpbmVkXG4gIH07XG4gIGlmIChpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aCxcbiAgICAgIHN1Ym1pc3Npb25cbiAgICB9O1xuICB9XG4gIC8vIEZsYXR0ZW4gc3VibWlzc2lvbiBvbnRvIFVSTFNlYXJjaFBhcmFtcyBmb3IgR0VUIHN1Ym1pc3Npb25zXG4gIGxldCBwYXJzZWRQYXRoID0gcGFyc2VQYXRoKHBhdGgpO1xuICAvLyBPbiBHRVQgbmF2aWdhdGlvbiBzdWJtaXNzaW9ucyB3ZSBjYW4gZHJvcCB0aGUgP2luZGV4IHBhcmFtIGZyb20gdGhlXG4gIC8vIHJlc3VsdGluZyBsb2NhdGlvbiBzaW5jZSBhbGwgbG9hZGVycyB3aWxsIHJ1bi4gIEJ1dCBmZXRjaGVyIEdFVCBzdWJtaXNzaW9uc1xuICAvLyBvbmx5IHJ1biBhIHNpbmdsZSBsb2FkZXIgc28gd2UgbmVlZCB0byBwcmVzZXJ2ZSBhbnkgaW5jb21pbmcgP2luZGV4IHBhcmFtc1xuICBpZiAoaXNGZXRjaGVyICYmIHBhcnNlZFBhdGguc2VhcmNoICYmIGhhc05ha2VkSW5kZXhRdWVyeShwYXJzZWRQYXRoLnNlYXJjaCkpIHtcbiAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKFwiaW5kZXhcIiwgXCJcIik7XG4gIH1cbiAgcGFyc2VkUGF0aC5zZWFyY2ggPSBcIj9cIiArIHNlYXJjaFBhcmFtcztcbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBjcmVhdGVQYXRoKHBhcnNlZFBhdGgpLFxuICAgIHN1Ym1pc3Npb25cbiAgfTtcbn1cbi8vIEZpbHRlciBvdXQgYWxsIHJvdXRlcyBiZWxvdyBhbnkgY2F1Z2h0IGVycm9yIGFzIHRoZXkgYXJlbid0IGdvaW5nIHRvXG4vLyByZW5kZXIgc28gd2UgZG9uJ3QgbmVlZCB0byBsb2FkIHRoZW1cbmZ1bmN0aW9uIGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIGJvdW5kYXJ5SWQpIHtcbiAgbGV0IGJvdW5kYXJ5TWF0Y2hlcyA9IG1hdGNoZXM7XG4gIGlmIChib3VuZGFyeUlkKSB7XG4gICAgbGV0IGluZGV4ID0gbWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkID09PSBib3VuZGFyeUlkKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgYm91bmRhcnlNYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgwLCBpbmRleCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBib3VuZGFyeU1hdGNoZXM7XG59XG5mdW5jdGlvbiBnZXRNYXRjaGVzVG9Mb2FkKGhpc3RvcnksIHN0YXRlLCBtYXRjaGVzLCBzdWJtaXNzaW9uLCBsb2NhdGlvbiwgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCwgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMsIGNhbmNlbGxlZEZldGNoZXJMb2FkcywgZmV0Y2hMb2FkTWF0Y2hlcywgZmV0Y2hSZWRpcmVjdElkcywgcm91dGVzVG9Vc2UsIGJhc2VuYW1lLCBwZW5kaW5nQWN0aW9uRGF0YSwgcGVuZGluZ0Vycm9yKSB7XG4gIGxldCBhY3Rpb25SZXN1bHQgPSBwZW5kaW5nRXJyb3IgPyBPYmplY3QudmFsdWVzKHBlbmRpbmdFcnJvcilbMF0gOiBwZW5kaW5nQWN0aW9uRGF0YSA/IE9iamVjdC52YWx1ZXMocGVuZGluZ0FjdGlvbkRhdGEpWzBdIDogdW5kZWZpbmVkO1xuICBsZXQgY3VycmVudFVybCA9IGhpc3RvcnkuY3JlYXRlVVJMKHN0YXRlLmxvY2F0aW9uKTtcbiAgbGV0IG5leHRVcmwgPSBoaXN0b3J5LmNyZWF0ZVVSTChsb2NhdGlvbik7XG4gIC8vIFBpY2sgbmF2aWdhdGlvbiBtYXRjaGVzIHRoYXQgYXJlIG5ldC1uZXcgb3IgcXVhbGlmeSBmb3IgcmV2YWxpZGF0aW9uXG4gIGxldCBib3VuZGFyeUlkID0gcGVuZGluZ0Vycm9yID8gT2JqZWN0LmtleXMocGVuZGluZ0Vycm9yKVswXSA6IHVuZGVmaW5lZDtcbiAgbGV0IGJvdW5kYXJ5TWF0Y2hlcyA9IGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIGJvdW5kYXJ5SWQpO1xuICBsZXQgbmF2aWdhdGlvbk1hdGNoZXMgPSBib3VuZGFyeU1hdGNoZXMuZmlsdGVyKChtYXRjaCwgaW5kZXgpID0+IHtcbiAgICBpZiAobWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgLy8gV2UgaGF2ZW4ndCBsb2FkZWQgdGhpcyByb3V0ZSB5ZXQgc28gd2UgZG9uJ3Qga25vdyBpZiBpdCdzIGdvdCBhIGxvYWRlciFcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAobWF0Y2gucm91dGUubG9hZGVyID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gQWx3YXlzIGNhbGwgdGhlIGxvYWRlciBvbiBuZXcgcm91dGUgaW5zdGFuY2VzIGFuZCBwZW5kaW5nIGRlZmVyIGNhbmNlbGxhdGlvbnNcbiAgICBpZiAoaXNOZXdMb2FkZXIoc3RhdGUubG9hZGVyRGF0YSwgc3RhdGUubWF0Y2hlc1tpbmRleF0sIG1hdGNoKSB8fCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcy5zb21lKGlkID0+IGlkID09PSBtYXRjaC5yb3V0ZS5pZCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBUaGlzIGlzIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGZvciB3aGVuIHdlIHJldmFsaWRhdGUuICBJZiB0aGUgcm91dGVcbiAgICAvLyBwcm92aWRlcyBpdCdzIG93biBpbXBsZW1lbnRhdGlvbiwgdGhlbiB3ZSBnaXZlIHRoZW0gZnVsbCBjb250cm9sIGJ1dFxuICAgIC8vIHByb3ZpZGUgdGhpcyB2YWx1ZSBzbyB0aGV5IGNhbiBsZXZlcmFnZSBpdCBpZiBuZWVkZWQgYWZ0ZXIgdGhleSBjaGVja1xuICAgIC8vIHRoZWlyIG93biBzcGVjaWZpYyB1c2UgY2FzZXNcbiAgICBsZXQgY3VycmVudFJvdXRlTWF0Y2ggPSBzdGF0ZS5tYXRjaGVzW2luZGV4XTtcbiAgICBsZXQgbmV4dFJvdXRlTWF0Y2ggPSBtYXRjaDtcbiAgICByZXR1cm4gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihtYXRjaCwgX2V4dGVuZHMoe1xuICAgICAgY3VycmVudFVybCxcbiAgICAgIGN1cnJlbnRQYXJhbXM6IGN1cnJlbnRSb3V0ZU1hdGNoLnBhcmFtcyxcbiAgICAgIG5leHRVcmwsXG4gICAgICBuZXh0UGFyYW1zOiBuZXh0Um91dGVNYXRjaC5wYXJhbXNcbiAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICBhY3Rpb25SZXN1bHQsXG4gICAgICBkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZTpcbiAgICAgIC8vIEZvcmNlZCByZXZhbGlkYXRpb24gZHVlIHRvIHN1Ym1pc3Npb24sIHVzZVJldmFsaWRhdG9yLCBvciBYLVJlbWl4LVJldmFsaWRhdGVcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgfHxcbiAgICAgIC8vIENsaWNrZWQgdGhlIHNhbWUgbGluaywgcmVzdWJtaXR0ZWQgYSBHRVQgZm9ybVxuICAgICAgY3VycmVudFVybC5wYXRobmFtZSArIGN1cnJlbnRVcmwuc2VhcmNoID09PSBuZXh0VXJsLnBhdGhuYW1lICsgbmV4dFVybC5zZWFyY2ggfHxcbiAgICAgIC8vIFNlYXJjaCBwYXJhbXMgYWZmZWN0IGFsbCBsb2FkZXJzXG4gICAgICBjdXJyZW50VXJsLnNlYXJjaCAhPT0gbmV4dFVybC5zZWFyY2ggfHwgaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRSb3V0ZU1hdGNoLCBuZXh0Um91dGVNYXRjaClcbiAgICB9KSk7XG4gIH0pO1xuICAvLyBQaWNrIGZldGNoZXIubG9hZHMgdGhhdCBuZWVkIHRvIGJlIHJldmFsaWRhdGVkXG4gIGxldCByZXZhbGlkYXRpbmdGZXRjaGVycyA9IFtdO1xuICBmZXRjaExvYWRNYXRjaGVzLmZvckVhY2goKGYsIGtleSkgPT4ge1xuICAgIC8vIERvbid0IHJldmFsaWRhdGUgaWYgZmV0Y2hlciB3b24ndCBiZSBwcmVzZW50IGluIHRoZSBzdWJzZXF1ZW50IHJlbmRlclxuICAgIGlmICghbWF0Y2hlcy5zb21lKG0gPT4gbS5yb3V0ZS5pZCA9PT0gZi5yb3V0ZUlkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgZmV0Y2hlck1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgZi5wYXRoLCBiYXNlbmFtZSk7XG4gICAgLy8gSWYgdGhlIGZldGNoZXIgcGF0aCBubyBsb25nZXIgbWF0Y2hlcywgcHVzaCBpdCBpbiB3aXRoIG51bGwgbWF0Y2hlcyBzb1xuICAgIC8vIHdlIGNhbiB0cmlnZ2VyIGEgNDA0IGluIGNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YS4gIE5vdGUgdGhpcyBpc1xuICAgIC8vIGN1cnJlbnRseSBvbmx5IGEgdXNlLWNhc2UgZm9yIFJlbWl4IEhNUiB3aGVyZSB0aGUgcm91dGUgdHJlZSBjYW4gY2hhbmdlXG4gICAgLy8gYXQgcnVudGltZSBhbmQgcmVtb3ZlIGEgcm91dGUgcHJldmlvdXNseSBsb2FkZWQgdmlhIGEgZmV0Y2hlclxuICAgIGlmICghZmV0Y2hlck1hdGNoZXMpIHtcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLnB1c2goe1xuICAgICAgICBrZXksXG4gICAgICAgIHJvdXRlSWQ6IGYucm91dGVJZCxcbiAgICAgICAgcGF0aDogZi5wYXRoLFxuICAgICAgICBtYXRjaGVzOiBudWxsLFxuICAgICAgICBtYXRjaDogbnVsbCxcbiAgICAgICAgY29udHJvbGxlcjogbnVsbFxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFJldmFsaWRhdGluZyBmZXRjaGVycyBhcmUgZGVjb3VwbGVkIGZyb20gdGhlIHJvdXRlIG1hdGNoZXMgc2luY2UgdGhleVxuICAgIC8vIGxvYWQgZnJvbSBhIHN0YXRpYyBocmVmLiAgVGhleSByZXZhbGlkYXRlIGJhc2VkIG9uIGV4cGxpY2l0IHJldmFsaWRhdGlvblxuICAgIC8vIChzdWJtaXNzaW9uLCB1c2VSZXZhbGlkYXRvciwgb3IgWC1SZW1peC1SZXZhbGlkYXRlKVxuICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgbGV0IGZldGNoZXJNYXRjaCA9IGdldFRhcmdldE1hdGNoKGZldGNoZXJNYXRjaGVzLCBmLnBhdGgpO1xuICAgIGxldCBzaG91bGRSZXZhbGlkYXRlID0gZmFsc2U7XG4gICAgaWYgKGZldGNoUmVkaXJlY3RJZHMuaGFzKGtleSkpIHtcbiAgICAgIC8vIE5ldmVyIHRyaWdnZXIgYSByZXZhbGlkYXRpb24gb2YgYW4gYWN0aXZlbHkgcmVkaXJlY3RpbmcgZmV0Y2hlclxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoY2FuY2VsbGVkRmV0Y2hlckxvYWRzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgIC8vIEFsd2F5cyByZXZhbGlkYXRlIGlmIHRoZSBmZXRjaGVyIHdhcyBjYW5jZWxsZWRcbiAgICAgIHNob3VsZFJldmFsaWRhdGUgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoZmV0Y2hlciAmJiBmZXRjaGVyLnN0YXRlICE9PSBcImlkbGVcIiAmJiBmZXRjaGVyLmRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gSWYgdGhlIGZldGNoZXIgaGFzbid0IGV2ZXIgY29tcGxldGVkIGxvYWRpbmcgeWV0LCB0aGVuIHRoaXMgaXNuJ3QgYVxuICAgICAgLy8gcmV2YWxpZGF0aW9uLCBpdCB3b3VsZCBqdXN0IGJlIGEgYnJhbmQgbmV3IGxvYWQgaWYgYW4gZXhwbGljaXRcbiAgICAgIC8vIHJldmFsaWRhdGlvbiBpcyByZXF1aXJlZFxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZSA9IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSBmYWxsIGJhY2sgb24gYW55IHVzZXItZGVmaW5lZCBzaG91bGRSZXZhbGlkYXRlLCBkZWZhdWx0aW5nXG4gICAgICAvLyB0byBleHBsaWNpdCByZXZhbGlkYXRpb25zIG9ubHlcbiAgICAgIHNob3VsZFJldmFsaWRhdGUgPSBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKGZldGNoZXJNYXRjaCwgX2V4dGVuZHMoe1xuICAgICAgICBjdXJyZW50VXJsLFxuICAgICAgICBjdXJyZW50UGFyYW1zOiBzdGF0ZS5tYXRjaGVzW3N0YXRlLm1hdGNoZXMubGVuZ3RoIC0gMV0ucGFyYW1zLFxuICAgICAgICBuZXh0VXJsLFxuICAgICAgICBuZXh0UGFyYW1zOiBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucGFyYW1zXG4gICAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICAgIGFjdGlvblJlc3VsdCxcbiAgICAgICAgZGVmYXVsdFNob3VsZFJldmFsaWRhdGU6IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWRcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgaWYgKHNob3VsZFJldmFsaWRhdGUpIHtcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLnB1c2goe1xuICAgICAgICBrZXksXG4gICAgICAgIHJvdXRlSWQ6IGYucm91dGVJZCxcbiAgICAgICAgcGF0aDogZi5wYXRoLFxuICAgICAgICBtYXRjaGVzOiBmZXRjaGVyTWF0Y2hlcyxcbiAgICAgICAgbWF0Y2g6IGZldGNoZXJNYXRjaCxcbiAgICAgICAgY29udHJvbGxlcjogbmV3IEFib3J0Q29udHJvbGxlcigpXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gW25hdmlnYXRpb25NYXRjaGVzLCByZXZhbGlkYXRpbmdGZXRjaGVyc107XG59XG5mdW5jdGlvbiBpc05ld0xvYWRlcihjdXJyZW50TG9hZGVyRGF0YSwgY3VycmVudE1hdGNoLCBtYXRjaCkge1xuICBsZXQgaXNOZXcgPVxuICAvLyBbYV0gLT4gW2EsIGJdXG4gICFjdXJyZW50TWF0Y2ggfHxcbiAgLy8gW2EsIGJdIC0+IFthLCBjXVxuICBtYXRjaC5yb3V0ZS5pZCAhPT0gY3VycmVudE1hdGNoLnJvdXRlLmlkO1xuICAvLyBIYW5kbGUgdGhlIGNhc2UgdGhhdCB3ZSBkb24ndCBoYXZlIGRhdGEgZm9yIGEgcmUtdXNlZCByb3V0ZSwgcG90ZW50aWFsbHlcbiAgLy8gZnJvbSBhIHByaW9yIGVycm9yIG9yIGZyb20gYSBjYW5jZWxsZWQgcGVuZGluZyBkZWZlcnJlZFxuICBsZXQgaXNNaXNzaW5nRGF0YSA9IGN1cnJlbnRMb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9PT0gdW5kZWZpbmVkO1xuICAvLyBBbHdheXMgbG9hZCBpZiB0aGlzIGlzIGEgbmV0LW5ldyByb3V0ZSBvciB3ZSBkb24ndCB5ZXQgaGF2ZSBkYXRhXG4gIHJldHVybiBpc05ldyB8fCBpc01pc3NpbmdEYXRhO1xufVxuZnVuY3Rpb24gaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRNYXRjaCwgbWF0Y2gpIHtcbiAgbGV0IGN1cnJlbnRQYXRoID0gY3VycmVudE1hdGNoLnJvdXRlLnBhdGg7XG4gIHJldHVybiAoXG4gICAgLy8gcGFyYW0gY2hhbmdlIGZvciB0aGlzIG1hdGNoLCAvdXNlcnMvMTIzIC0+IC91c2Vycy80NTZcbiAgICBjdXJyZW50TWF0Y2gucGF0aG5hbWUgIT09IG1hdGNoLnBhdGhuYW1lIHx8XG4gICAgLy8gc3BsYXQgcGFyYW0gY2hhbmdlZCwgd2hpY2ggaXMgbm90IHByZXNlbnQgaW4gbWF0Y2gucGF0aFxuICAgIC8vIGUuZy4gL2ZpbGVzL2ltYWdlcy9hdmF0YXIuanBnIC0+IGZpbGVzL2ZpbmFuY2VzLnhsc1xuICAgIGN1cnJlbnRQYXRoICE9IG51bGwgJiYgY3VycmVudFBhdGguZW5kc1dpdGgoXCIqXCIpICYmIGN1cnJlbnRNYXRjaC5wYXJhbXNbXCIqXCJdICE9PSBtYXRjaC5wYXJhbXNbXCIqXCJdXG4gICk7XG59XG5mdW5jdGlvbiBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKGxvYWRlck1hdGNoLCBhcmcpIHtcbiAgaWYgKGxvYWRlck1hdGNoLnJvdXRlLnNob3VsZFJldmFsaWRhdGUpIHtcbiAgICBsZXQgcm91dGVDaG9pY2UgPSBsb2FkZXJNYXRjaC5yb3V0ZS5zaG91bGRSZXZhbGlkYXRlKGFyZyk7XG4gICAgaWYgKHR5cGVvZiByb3V0ZUNob2ljZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIHJldHVybiByb3V0ZUNob2ljZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFyZy5kZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZTtcbn1cbi8qKlxuICogRXhlY3V0ZSByb3V0ZS5sYXp5KCkgbWV0aG9kcyB0byBsYXppbHkgbG9hZCByb3V0ZSBtb2R1bGVzIChsb2FkZXIsIGFjdGlvbixcbiAqIHNob3VsZFJldmFsaWRhdGUpIGFuZCB1cGRhdGUgdGhlIHJvdXRlTWFuaWZlc3QgaW4gcGxhY2Ugd2hpY2ggc2hhcmVzIG9iamVjdHNcbiAqIHdpdGggZGF0YVJvdXRlcyBzbyB0aG9zZSBnZXQgdXBkYXRlZCBhcyB3ZWxsLlxuICovXG5hc3luYyBmdW5jdGlvbiBsb2FkTGF6eVJvdXRlTW9kdWxlKHJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMsIG1hbmlmZXN0KSB7XG4gIGlmICghcm91dGUubGF6eSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgbGF6eVJvdXRlID0gYXdhaXQgcm91dGUubGF6eSgpO1xuICAvLyBJZiB0aGUgbGF6eSByb3V0ZSBmdW5jdGlvbiB3YXMgZXhlY3V0ZWQgYW5kIHJlbW92ZWQgYnkgYW5vdGhlciBwYXJhbGxlbFxuICAvLyBjYWxsIHRoZW4gd2UgY2FuIHJldHVybiAtIGZpcnN0IGxhenkoKSB0byBmaW5pc2ggd2lucyBiZWNhdXNlIHRoZSByZXR1cm5cbiAgLy8gdmFsdWUgb2YgbGF6eSBpcyBleHBlY3RlZCB0byBiZSBzdGF0aWNcbiAgaWYgKCFyb3V0ZS5sYXp5KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCByb3V0ZVRvVXBkYXRlID0gbWFuaWZlc3Rbcm91dGUuaWRdO1xuICBpbnZhcmlhbnQocm91dGVUb1VwZGF0ZSwgXCJObyByb3V0ZSBmb3VuZCBpbiBtYW5pZmVzdFwiKTtcbiAgLy8gVXBkYXRlIHRoZSByb3V0ZSBpbiBwbGFjZS4gIFRoaXMgc2hvdWxkIGJlIHNhZmUgYmVjYXVzZSB0aGVyZSdzIG5vIHdheVxuICAvLyB3ZSBjb3VsZCB5ZXQgYmUgc2l0dGluZyBvbiB0aGlzIHJvdXRlIGFzIHdlIGNhbid0IGdldCB0aGVyZSB3aXRob3V0XG4gIC8vIHJlc29sdmluZyBsYXp5KCkgZmlyc3QuXG4gIC8vXG4gIC8vIFRoaXMgaXMgZGlmZmVyZW50IHRoYW4gdGhlIEhNUiBcInVwZGF0ZVwiIHVzZS1jYXNlIHdoZXJlIHdlIG1heSBhY3RpdmVseSBiZVxuICAvLyBvbiB0aGUgcm91dGUgYmVpbmcgdXBkYXRlZC4gIFRoZSBtYWluIGNvbmNlcm4gYm9pbHMgZG93biB0byBcImRvZXMgdGhpc1xuICAvLyBtdXRhdGlvbiBhZmZlY3QgYW55IG9uZ29pbmcgbmF2aWdhdGlvbnMgb3IgYW55IGN1cnJlbnQgc3RhdGUubWF0Y2hlc1xuICAvLyB2YWx1ZXM/XCIuICBJZiBub3QsIGl0IHNob3VsZCBiZSBzYWZlIHRvIHVwZGF0ZSBpbiBwbGFjZS5cbiAgbGV0IHJvdXRlVXBkYXRlcyA9IHt9O1xuICBmb3IgKGxldCBsYXp5Um91dGVQcm9wZXJ0eSBpbiBsYXp5Um91dGUpIHtcbiAgICBsZXQgc3RhdGljUm91dGVWYWx1ZSA9IHJvdXRlVG9VcGRhdGVbbGF6eVJvdXRlUHJvcGVydHldO1xuICAgIGxldCBpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQgPSBzdGF0aWNSb3V0ZVZhbHVlICE9PSB1bmRlZmluZWQgJiZcbiAgICAvLyBUaGlzIHByb3BlcnR5IGlzbid0IHN0YXRpYyBzaW5jZSBpdCBzaG91bGQgYWx3YXlzIGJlIHVwZGF0ZWQgYmFzZWRcbiAgICAvLyBvbiB0aGUgcm91dGUgdXBkYXRlc1xuICAgIGxhenlSb3V0ZVByb3BlcnR5ICE9PSBcImhhc0Vycm9yQm91bmRhcnlcIjtcbiAgICB3YXJuaW5nKCFpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQsIFwiUm91dGUgXFxcIlwiICsgcm91dGVUb1VwZGF0ZS5pZCArIFwiXFxcIiBoYXMgYSBzdGF0aWMgcHJvcGVydHkgXFxcIlwiICsgbGF6eVJvdXRlUHJvcGVydHkgKyBcIlxcXCIgXCIgKyBcImRlZmluZWQgYnV0IGl0cyBsYXp5IGZ1bmN0aW9uIGlzIGFsc28gcmV0dXJuaW5nIGEgdmFsdWUgZm9yIHRoaXMgcHJvcGVydHkuIFwiICsgKFwiVGhlIGxhenkgcm91dGUgcHJvcGVydHkgXFxcIlwiICsgbGF6eVJvdXRlUHJvcGVydHkgKyBcIlxcXCIgd2lsbCBiZSBpZ25vcmVkLlwiKSk7XG4gICAgaWYgKCFpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQgJiYgIWltbXV0YWJsZVJvdXRlS2V5cy5oYXMobGF6eVJvdXRlUHJvcGVydHkpKSB7XG4gICAgICByb3V0ZVVwZGF0ZXNbbGF6eVJvdXRlUHJvcGVydHldID0gbGF6eVJvdXRlW2xhenlSb3V0ZVByb3BlcnR5XTtcbiAgICB9XG4gIH1cbiAgLy8gTXV0YXRlIHRoZSByb3V0ZSB3aXRoIHRoZSBwcm92aWRlZCB1cGRhdGVzLiAgRG8gdGhpcyBmaXJzdCBzbyB3ZSBwYXNzXG4gIC8vIHRoZSB1cGRhdGVkIHZlcnNpb24gdG8gbWFwUm91dGVQcm9wZXJ0aWVzXG4gIE9iamVjdC5hc3NpZ24ocm91dGVUb1VwZGF0ZSwgcm91dGVVcGRhdGVzKTtcbiAgLy8gTXV0YXRlIHRoZSBgaGFzRXJyb3JCb3VuZGFyeWAgcHJvcGVydHkgb24gdGhlIHJvdXRlIGJhc2VkIG9uIHRoZSByb3V0ZVxuICAvLyB1cGRhdGVzIGFuZCByZW1vdmUgdGhlIGBsYXp5YCBmdW5jdGlvbiBzbyB3ZSBkb24ndCByZXNvbHZlIHRoZSBsYXp5XG4gIC8vIHJvdXRlIGFnYWluLlxuICBPYmplY3QuYXNzaWduKHJvdXRlVG9VcGRhdGUsIF9leHRlbmRzKHt9LCBtYXBSb3V0ZVByb3BlcnRpZXMocm91dGVUb1VwZGF0ZSksIHtcbiAgICBsYXp5OiB1bmRlZmluZWRcbiAgfSkpO1xufVxuYXN5bmMgZnVuY3Rpb24gY2FsbExvYWRlck9yQWN0aW9uKHR5cGUsIHJlcXVlc3QsIG1hdGNoLCBtYXRjaGVzLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBiYXNlbmFtZSwgb3B0cykge1xuICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0cyA9IHt9O1xuICB9XG4gIGxldCByZXN1bHRUeXBlO1xuICBsZXQgcmVzdWx0O1xuICBsZXQgb25SZWplY3Q7XG4gIGxldCBydW5IYW5kbGVyID0gaGFuZGxlciA9PiB7XG4gICAgLy8gU2V0dXAgYSBwcm9taXNlIHdlIGNhbiByYWNlIGFnYWluc3Qgc28gdGhhdCBhYm9ydCBzaWduYWxzIHNob3J0IGNpcmN1aXRcbiAgICBsZXQgcmVqZWN0O1xuICAgIGxldCBhYm9ydFByb21pc2UgPSBuZXcgUHJvbWlzZSgoXywgcikgPT4gcmVqZWN0ID0gcik7XG4gICAgb25SZWplY3QgPSAoKSA9PiByZWplY3QoKTtcbiAgICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25SZWplY3QpO1xuICAgIHJldHVybiBQcm9taXNlLnJhY2UoW2hhbmRsZXIoe1xuICAgICAgcmVxdWVzdCxcbiAgICAgIHBhcmFtczogbWF0Y2gucGFyYW1zLFxuICAgICAgY29udGV4dDogb3B0cy5yZXF1ZXN0Q29udGV4dFxuICAgIH0pLCBhYm9ydFByb21pc2VdKTtcbiAgfTtcbiAgdHJ5IHtcbiAgICBsZXQgaGFuZGxlciA9IG1hdGNoLnJvdXRlW3R5cGVdO1xuICAgIGlmIChtYXRjaC5yb3V0ZS5sYXp5KSB7XG4gICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAvLyBSdW4gc3RhdGljYWxseSBkZWZpbmVkIGhhbmRsZXIgaW4gcGFyYWxsZWwgd2l0aCBsYXp5KClcbiAgICAgICAgbGV0IHZhbHVlcyA9IGF3YWl0IFByb21pc2UuYWxsKFtydW5IYW5kbGVyKGhhbmRsZXIpLCBsb2FkTGF6eVJvdXRlTW9kdWxlKG1hdGNoLnJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMsIG1hbmlmZXN0KV0pO1xuICAgICAgICByZXN1bHQgPSB2YWx1ZXNbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBMb2FkIGxhenkgcm91dGUgbW9kdWxlLCB0aGVuIHJ1biBhbnkgcmV0dXJuZWQgaGFuZGxlclxuICAgICAgICBhd2FpdCBsb2FkTGF6eVJvdXRlTW9kdWxlKG1hdGNoLnJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMsIG1hbmlmZXN0KTtcbiAgICAgICAgaGFuZGxlciA9IG1hdGNoLnJvdXRlW3R5cGVdO1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIC8vIEhhbmRsZXIgc3RpbGwgcnVuIGV2ZW4gaWYgd2UgZ290IGludGVycnVwdGVkIHRvIG1haW50YWluIGNvbnNpc3RlbmN5XG4gICAgICAgICAgLy8gd2l0aCB1bi1hYm9ydGFibGUgYmVoYXZpb3Igb2YgaGFuZGxlciBleGVjdXRpb24gb24gbm9uLWxhenkgb3JcbiAgICAgICAgICAvLyBwcmV2aW91c2x5LWxhenktbG9hZGVkIHJvdXRlc1xuICAgICAgICAgIHJlc3VsdCA9IGF3YWl0IHJ1bkhhbmRsZXIoaGFuZGxlcik7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJhY3Rpb25cIikge1xuICAgICAgICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICAgICAgICBsZXQgcGF0aG5hbWUgPSB1cmwucGF0aG5hbWUgKyB1cmwuc2VhcmNoO1xuICAgICAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICAgICAgcGF0aG5hbWUsXG4gICAgICAgICAgICByb3V0ZUlkOiBtYXRjaC5yb3V0ZS5pZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGxhenkoKSByb3V0ZSBoYXMgbm8gbG9hZGVyIHRvIHJ1bi4gIFNob3J0IGNpcmN1aXQgaGVyZSBzbyB3ZSBkb24ndFxuICAgICAgICAgIC8vIGhpdCB0aGUgaW52YXJpYW50IGJlbG93IHRoYXQgZXJyb3JzIG9uIHJldHVybmluZyB1bmRlZmluZWQuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgICAgICAgIGRhdGE6IHVuZGVmaW5lZFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFoYW5kbGVyKSB7XG4gICAgICBsZXQgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgICBsZXQgcGF0aG5hbWUgPSB1cmwucGF0aG5hbWUgKyB1cmwuc2VhcmNoO1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBydW5IYW5kbGVyKGhhbmRsZXIpO1xuICAgIH1cbiAgICBpbnZhcmlhbnQocmVzdWx0ICE9PSB1bmRlZmluZWQsIFwiWW91IGRlZmluZWQgXCIgKyAodHlwZSA9PT0gXCJhY3Rpb25cIiA/IFwiYW4gYWN0aW9uXCIgOiBcImEgbG9hZGVyXCIpICsgXCIgZm9yIHJvdXRlIFwiICsgKFwiXFxcIlwiICsgbWF0Y2gucm91dGUuaWQgKyBcIlxcXCIgYnV0IGRpZG4ndCByZXR1cm4gYW55dGhpbmcgZnJvbSB5b3VyIGBcIiArIHR5cGUgKyBcImAgXCIpICsgXCJmdW5jdGlvbi4gUGxlYXNlIHJldHVybiBhIHZhbHVlIG9yIGBudWxsYC5cIik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXN1bHRUeXBlID0gUmVzdWx0VHlwZS5lcnJvcjtcbiAgICByZXN1bHQgPSBlO1xuICB9IGZpbmFsbHkge1xuICAgIGlmIChvblJlamVjdCkge1xuICAgICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uUmVqZWN0KTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgIGxldCBzdGF0dXMgPSByZXN1bHQuc3RhdHVzO1xuICAgIC8vIFByb2Nlc3MgcmVkaXJlY3RzXG4gICAgaWYgKHJlZGlyZWN0U3RhdHVzQ29kZXMuaGFzKHN0YXR1cykpIHtcbiAgICAgIGxldCBsb2NhdGlvbiA9IHJlc3VsdC5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpO1xuICAgICAgaW52YXJpYW50KGxvY2F0aW9uLCBcIlJlZGlyZWN0cyByZXR1cm5lZC90aHJvd24gZnJvbSBsb2FkZXJzL2FjdGlvbnMgbXVzdCBoYXZlIGEgTG9jYXRpb24gaGVhZGVyXCIpO1xuICAgICAgLy8gU3VwcG9ydCByZWxhdGl2ZSByb3V0aW5nIGluIGludGVybmFsIHJlZGlyZWN0c1xuICAgICAgaWYgKCFBQlNPTFVURV9VUkxfUkVHRVgudGVzdChsb2NhdGlvbikpIHtcbiAgICAgICAgbG9jYXRpb24gPSBub3JtYWxpemVUbyhuZXcgVVJMKHJlcXVlc3QudXJsKSwgbWF0Y2hlcy5zbGljZSgwLCBtYXRjaGVzLmluZGV4T2YobWF0Y2gpICsgMSksIGJhc2VuYW1lLCB0cnVlLCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2UgaWYgKCFvcHRzLmlzU3RhdGljUmVxdWVzdCkge1xuICAgICAgICAvLyBTdHJpcCBvZmYgdGhlIHByb3RvY29sK29yaWdpbiBmb3Igc2FtZS1vcmlnaW4gKyBzYW1lLWJhc2VuYW1lIGFic29sdXRlXG4gICAgICAgIC8vIHJlZGlyZWN0cy4gSWYgdGhpcyBpcyBhIHN0YXRpYyByZXF1ZXN0LCB3ZSBjYW4gbGV0IGl0IGdvIGJhY2sgdG8gdGhlXG4gICAgICAgIC8vIGJyb3dzZXIgYXMtaXNcbiAgICAgICAgbGV0IGN1cnJlbnRVcmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICAgICAgbGV0IHVybCA9IGxvY2F0aW9uLnN0YXJ0c1dpdGgoXCIvL1wiKSA/IG5ldyBVUkwoY3VycmVudFVybC5wcm90b2NvbCArIGxvY2F0aW9uKSA6IG5ldyBVUkwobG9jYXRpb24pO1xuICAgICAgICBsZXQgaXNTYW1lQmFzZW5hbWUgPSBzdHJpcEJhc2VuYW1lKHVybC5wYXRobmFtZSwgYmFzZW5hbWUpICE9IG51bGw7XG4gICAgICAgIGlmICh1cmwub3JpZ2luID09PSBjdXJyZW50VXJsLm9yaWdpbiAmJiBpc1NhbWVCYXNlbmFtZSkge1xuICAgICAgICAgIGxvY2F0aW9uID0gdXJsLnBhdGhuYW1lICsgdXJsLnNlYXJjaCArIHVybC5oYXNoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBEb24ndCBwcm9jZXNzIHJlZGlyZWN0cyBpbiB0aGUgcm91dGVyIGR1cmluZyBzdGF0aWMgcmVxdWVzdHMgcmVxdWVzdHMuXG4gICAgICAvLyBJbnN0ZWFkLCB0aHJvdyB0aGUgUmVzcG9uc2UgYW5kIGxldCB0aGUgc2VydmVyIGhhbmRsZSBpdCB3aXRoIGFuIEhUVFBcbiAgICAgIC8vIHJlZGlyZWN0LiAgV2UgYWxzbyB1cGRhdGUgdGhlIExvY2F0aW9uIGhlYWRlciBpbiBwbGFjZSBpbiB0aGlzIGZsb3cgc29cbiAgICAgIC8vIGJhc2VuYW1lIGFuZCByZWxhdGl2ZSByb3V0aW5nIGlzIHRha2VuIGludG8gYWNjb3VudFxuICAgICAgaWYgKG9wdHMuaXNTdGF0aWNSZXF1ZXN0KSB7XG4gICAgICAgIHJlc3VsdC5oZWFkZXJzLnNldChcIkxvY2F0aW9uXCIsIGxvY2F0aW9uKTtcbiAgICAgICAgdGhyb3cgcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5yZWRpcmVjdCxcbiAgICAgICAgc3RhdHVzLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgcmV2YWxpZGF0ZTogcmVzdWx0LmhlYWRlcnMuZ2V0KFwiWC1SZW1peC1SZXZhbGlkYXRlXCIpICE9PSBudWxsLFxuICAgICAgICByZWxvYWREb2N1bWVudDogcmVzdWx0LmhlYWRlcnMuZ2V0KFwiWC1SZW1peC1SZWxvYWQtRG9jdW1lbnRcIikgIT09IG51bGxcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIEZvciBTU1Igc2luZ2xlLXJvdXRlIHJlcXVlc3RzLCB3ZSB3YW50IHRvIGhhbmQgUmVzcG9uc2VzIGJhY2sgZGlyZWN0bHlcbiAgICAvLyB3aXRob3V0IHVud3JhcHBpbmcuICBXZSBkbyB0aGlzIHdpdGggdGhlIFF1ZXJ5Um91dGVSZXNwb25zZSB3cmFwcGVyXG4gICAgLy8gaW50ZXJmYWNlIHNvIHdlIGNhbiBrbm93IHdoZXRoZXIgaXQgd2FzIHJldHVybmVkIG9yIHRocm93blxuICAgIGlmIChvcHRzLmlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICBsZXQgcXVlcnlSb3V0ZVJlc3BvbnNlID0ge1xuICAgICAgICB0eXBlOiByZXN1bHRUeXBlID09PSBSZXN1bHRUeXBlLmVycm9yID8gUmVzdWx0VHlwZS5lcnJvciA6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgICAgcmVzcG9uc2U6IHJlc3VsdFxuICAgICAgfTtcbiAgICAgIHRocm93IHF1ZXJ5Um91dGVSZXNwb25zZTtcbiAgICB9XG4gICAgbGV0IGRhdGE7XG4gICAgbGV0IGNvbnRlbnRUeXBlID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpO1xuICAgIC8vIENoZWNrIGJldHdlZW4gd29yZCBib3VuZGFyaWVzIGluc3RlYWQgb2Ygc3RhcnRzV2l0aCgpIGR1ZSB0byB0aGUgbGFzdFxuICAgIC8vIHBhcmFncmFwaCBvZiBodHRwczovL2h0dHB3Zy5vcmcvc3BlY3MvcmZjOTExMC5odG1sI2ZpZWxkLmNvbnRlbnQtdHlwZVxuICAgIGlmIChjb250ZW50VHlwZSAmJiAvXFxiYXBwbGljYXRpb25cXC9qc29uXFxiLy50ZXN0KGNvbnRlbnRUeXBlKSkge1xuICAgICAgZGF0YSA9IGF3YWl0IHJlc3VsdC5qc29uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSBhd2FpdCByZXN1bHQudGV4dCgpO1xuICAgIH1cbiAgICBpZiAocmVzdWx0VHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogcmVzdWx0VHlwZSxcbiAgICAgICAgZXJyb3I6IG5ldyBFcnJvclJlc3BvbnNlKHN0YXR1cywgcmVzdWx0LnN0YXR1c1RleHQsIGRhdGEpLFxuICAgICAgICBoZWFkZXJzOiByZXN1bHQuaGVhZGVyc1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgIGRhdGEsXG4gICAgICBzdGF0dXNDb2RlOiByZXN1bHQuc3RhdHVzLFxuICAgICAgaGVhZGVyczogcmVzdWx0LmhlYWRlcnNcbiAgICB9O1xuICB9XG4gIGlmIChyZXN1bHRUeXBlID09PSBSZXN1bHRUeXBlLmVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IHJlc3VsdFR5cGUsXG4gICAgICBlcnJvcjogcmVzdWx0XG4gICAgfTtcbiAgfVxuICBpZiAoaXNEZWZlcnJlZERhdGEocmVzdWx0KSkge1xuICAgIHZhciBfcmVzdWx0JGluaXQsIF9yZXN1bHQkaW5pdDI7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGVmZXJyZWQsXG4gICAgICBkZWZlcnJlZERhdGE6IHJlc3VsdCxcbiAgICAgIHN0YXR1c0NvZGU6IChfcmVzdWx0JGluaXQgPSByZXN1bHQuaW5pdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZXN1bHQkaW5pdC5zdGF0dXMsXG4gICAgICBoZWFkZXJzOiAoKF9yZXN1bHQkaW5pdDIgPSByZXN1bHQuaW5pdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZXN1bHQkaW5pdDIuaGVhZGVycykgJiYgbmV3IEhlYWRlcnMocmVzdWx0LmluaXQuaGVhZGVycylcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgIGRhdGE6IHJlc3VsdFxuICB9O1xufVxuLy8gVXRpbGl0eSBtZXRob2QgZm9yIGNyZWF0aW5nIHRoZSBSZXF1ZXN0IGluc3RhbmNlcyBmb3IgbG9hZGVycy9hY3Rpb25zIGR1cmluZ1xuLy8gY2xpZW50LXNpZGUgbmF2aWdhdGlvbnMgYW5kIGZldGNoZXMuICBEdXJpbmcgU1NSIHdlIHdpbGwgYWx3YXlzIGhhdmUgYVxuLy8gUmVxdWVzdCBpbnN0YW5jZSBmcm9tIHRoZSBzdGF0aWMgaGFuZGxlciAocXVlcnkvcXVlcnlSb3V0ZSlcbmZ1bmN0aW9uIGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGhpc3RvcnksIGxvY2F0aW9uLCBzaWduYWwsIHN1Ym1pc3Npb24pIHtcbiAgbGV0IHVybCA9IGhpc3RvcnkuY3JlYXRlVVJMKHN0cmlwSGFzaEZyb21QYXRoKGxvY2F0aW9uKSkudG9TdHJpbmcoKTtcbiAgbGV0IGluaXQgPSB7XG4gICAgc2lnbmFsXG4gIH07XG4gIGlmIChzdWJtaXNzaW9uICYmIGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgIGxldCB7XG4gICAgICBmb3JtTWV0aG9kLFxuICAgICAgZm9ybUVuY1R5cGVcbiAgICB9ID0gc3VibWlzc2lvbjtcbiAgICAvLyBEaWRuJ3QgdGhpbmsgd2UgbmVlZGVkIHRoaXMgYnV0IGl0IHR1cm5zIG91dCB1bmxpa2Ugb3RoZXIgbWV0aG9kcywgcGF0Y2hcbiAgICAvLyB3b24ndCBiZSBwcm9wZXJseSBub3JtYWxpemVkIHRvIHVwcGVyY2FzZSBhbmQgcmVzdWx0cyBpbiBhIDQwNSBlcnJvci5cbiAgICAvLyBTZWU6IGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LW1ldGhvZFxuICAgIGluaXQubWV0aG9kID0gZm9ybU1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuICAgIGlmIChmb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi9qc29uXCIpIHtcbiAgICAgIGluaXQuaGVhZGVycyA9IG5ldyBIZWFkZXJzKHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogZm9ybUVuY1R5cGVcbiAgICAgIH0pO1xuICAgICAgaW5pdC5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoc3VibWlzc2lvbi5qc29uKTtcbiAgICB9IGVsc2UgaWYgKGZvcm1FbmNUeXBlID09PSBcInRleHQvcGxhaW5cIikge1xuICAgICAgLy8gQ29udGVudC1UeXBlIGlzIGluZmVycmVkIChodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jZG9tLXJlcXVlc3QpXG4gICAgICBpbml0LmJvZHkgPSBzdWJtaXNzaW9uLnRleHQ7XG4gICAgfSBlbHNlIGlmIChmb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiAmJiBzdWJtaXNzaW9uLmZvcm1EYXRhKSB7XG4gICAgICAvLyBDb250ZW50LVR5cGUgaXMgaW5mZXJyZWQgKGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNkb20tcmVxdWVzdClcbiAgICAgIGluaXQuYm9keSA9IGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKHN1Ym1pc3Npb24uZm9ybURhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDb250ZW50LVR5cGUgaXMgaW5mZXJyZWQgKGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNkb20tcmVxdWVzdClcbiAgICAgIGluaXQuYm9keSA9IHN1Ym1pc3Npb24uZm9ybURhdGE7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgUmVxdWVzdCh1cmwsIGluaXQpO1xufVxuZnVuY3Rpb24gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMoZm9ybURhdGEpIHtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIGZvcm1EYXRhLmVudHJpZXMoKSkge1xuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2NvbnZlcnRpbmctYW4tZW50cnktbGlzdC10by1hLWxpc3Qtb2YtbmFtZS12YWx1ZS1wYWlyc1xuICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZSA6IHZhbHVlLm5hbWUpO1xuICB9XG4gIHJldHVybiBzZWFyY2hQYXJhbXM7XG59XG5mdW5jdGlvbiBjb252ZXJ0U2VhcmNoUGFyYW1zVG9Gb3JtRGF0YShzZWFyY2hQYXJhbXMpIHtcbiAgbGV0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBzZWFyY2hQYXJhbXMuZW50cmllcygpKSB7XG4gICAgZm9ybURhdGEuYXBwZW5kKGtleSwgdmFsdWUpO1xuICB9XG4gIHJldHVybiBmb3JtRGF0YTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NSb3V0ZUxvYWRlckRhdGEobWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0Vycm9yLCBhY3RpdmVEZWZlcnJlZHMpIHtcbiAgLy8gRmlsbCBpbiBsb2FkZXJEYXRhL2Vycm9ycyBmcm9tIG91ciBsb2FkZXJzXG4gIGxldCBsb2FkZXJEYXRhID0ge307XG4gIGxldCBlcnJvcnMgPSBudWxsO1xuICBsZXQgc3RhdHVzQ29kZTtcbiAgbGV0IGZvdW5kRXJyb3IgPSBmYWxzZTtcbiAgbGV0IGxvYWRlckhlYWRlcnMgPSB7fTtcbiAgLy8gUHJvY2VzcyBsb2FkZXIgcmVzdWx0cyBpbnRvIHN0YXRlLmxvYWRlckRhdGEvc3RhdGUuZXJyb3JzXG4gIHJlc3VsdHMuZm9yRWFjaCgocmVzdWx0LCBpbmRleCkgPT4ge1xuICAgIGxldCBpZCA9IG1hdGNoZXNUb0xvYWRbaW5kZXhdLnJvdXRlLmlkO1xuICAgIGludmFyaWFudCghaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpLCBcIkNhbm5vdCBoYW5kbGUgcmVkaXJlY3QgcmVzdWx0cyBpbiBwcm9jZXNzTG9hZGVyRGF0YVwiKTtcbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBMb29rIHVwd2FyZHMgZnJvbSB0aGUgbWF0Y2hlZCByb3V0ZSBmb3IgdGhlIGNsb3Nlc3QgYW5jZXN0b3JcbiAgICAgIC8vIGVycm9yIGJvdW5kYXJ5LCBkZWZhdWx0aW5nIHRvIHRoZSByb290IG1hdGNoXG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgaWQpO1xuICAgICAgbGV0IGVycm9yID0gcmVzdWx0LmVycm9yO1xuICAgICAgLy8gSWYgd2UgaGF2ZSBhIHBlbmRpbmcgYWN0aW9uIGVycm9yLCB3ZSByZXBvcnQgaXQgYXQgdGhlIGhpZ2hlc3Qtcm91dGVcbiAgICAgIC8vIHRoYXQgdGhyb3dzIGEgbG9hZGVyIGVycm9yLCBhbmQgdGhlbiBjbGVhciBpdCBvdXQgdG8gaW5kaWNhdGUgdGhhdFxuICAgICAgLy8gaXQgd2FzIGNvbnN1bWVkXG4gICAgICBpZiAocGVuZGluZ0Vycm9yKSB7XG4gICAgICAgIGVycm9yID0gT2JqZWN0LnZhbHVlcyhwZW5kaW5nRXJyb3IpWzBdO1xuICAgICAgICBwZW5kaW5nRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBlcnJvcnMgPSBlcnJvcnMgfHwge307XG4gICAgICAvLyBQcmVmZXIgaGlnaGVyIGVycm9yIHZhbHVlcyBpZiBsb3dlciBlcnJvcnMgYnViYmxlIHRvIHRoZSBzYW1lIGJvdW5kYXJ5XG4gICAgICBpZiAoZXJyb3JzW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdID09IG51bGwpIHtcbiAgICAgICAgZXJyb3JzW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdID0gZXJyb3I7XG4gICAgICB9XG4gICAgICAvLyBDbGVhciBvdXIgYW55IHByaW9yIGxvYWRlckRhdGEgZm9yIHRoZSB0aHJvd2luZyByb3V0ZVxuICAgICAgbG9hZGVyRGF0YVtpZF0gPSB1bmRlZmluZWQ7XG4gICAgICAvLyBPbmNlIHdlIGZpbmQgb3VyIGZpcnN0IChoaWdoZXN0KSBlcnJvciwgd2Ugc2V0IHRoZSBzdGF0dXMgY29kZSBhbmRcbiAgICAgIC8vIHByZXZlbnQgZGVlcGVyIHN0YXR1cyBjb2RlcyBmcm9tIG92ZXJyaWRpbmdcbiAgICAgIGlmICghZm91bmRFcnJvcikge1xuICAgICAgICBmb3VuZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgc3RhdHVzQ29kZSA9IGlzUm91dGVFcnJvclJlc3BvbnNlKHJlc3VsdC5lcnJvcikgPyByZXN1bHQuZXJyb3Iuc3RhdHVzIDogNTAwO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzLnNldChpZCwgcmVzdWx0LmRlZmVycmVkRGF0YSk7XG4gICAgICAgIGxvYWRlckRhdGFbaWRdID0gcmVzdWx0LmRlZmVycmVkRGF0YS5kYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9hZGVyRGF0YVtpZF0gPSByZXN1bHQuZGF0YTtcbiAgICAgIH1cbiAgICAgIC8vIEVycm9yIHN0YXR1cyBjb2RlcyBhbHdheXMgb3ZlcnJpZGUgc3VjY2VzcyBzdGF0dXMgY29kZXMsIGJ1dCBpZiBhbGxcbiAgICAgIC8vIGxvYWRlcnMgYXJlIHN1Y2Nlc3NmdWwgd2UgdGFrZSB0aGUgZGVlcGVzdCBzdGF0dXMgY29kZS5cbiAgICAgIGlmIChyZXN1bHQuc3RhdHVzQ29kZSAhPSBudWxsICYmIHJlc3VsdC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgIWZvdW5kRXJyb3IpIHtcbiAgICAgICAgc3RhdHVzQ29kZSA9IHJlc3VsdC5zdGF0dXNDb2RlO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgLy8gSWYgd2UgZGlkbid0IGNvbnN1bWUgdGhlIHBlbmRpbmcgYWN0aW9uIGVycm9yIChpLmUuLCBhbGwgbG9hZGVyc1xuICAvLyByZXNvbHZlZCksIHRoZW4gY29uc3VtZSBpdCBoZXJlLiAgQWxzbyBjbGVhciBvdXQgYW55IGxvYWRlckRhdGEgZm9yIHRoZVxuICAvLyB0aHJvd2luZyByb3V0ZVxuICBpZiAocGVuZGluZ0Vycm9yKSB7XG4gICAgZXJyb3JzID0gcGVuZGluZ0Vycm9yO1xuICAgIGxvYWRlckRhdGFbT2JqZWN0LmtleXMocGVuZGluZ0Vycm9yKVswXV0gPSB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBsb2FkZXJEYXRhLFxuICAgIGVycm9ycyxcbiAgICBzdGF0dXNDb2RlOiBzdGF0dXNDb2RlIHx8IDIwMCxcbiAgICBsb2FkZXJIZWFkZXJzXG4gIH07XG59XG5mdW5jdGlvbiBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0Vycm9yLCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcykge1xuICBsZXQge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzXG4gIH0gPSBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdFcnJvciwgYWN0aXZlRGVmZXJyZWRzKTtcbiAgLy8gUHJvY2VzcyByZXN1bHRzIGZyb20gb3VyIHJldmFsaWRhdGluZyBmZXRjaGVyc1xuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgbGV0IHtcbiAgICAgIGtleSxcbiAgICAgIG1hdGNoLFxuICAgICAgY29udHJvbGxlclxuICAgIH0gPSByZXZhbGlkYXRpbmdGZXRjaGVyc1tpbmRleF07XG4gICAgaW52YXJpYW50KGZldGNoZXJSZXN1bHRzICE9PSB1bmRlZmluZWQgJiYgZmV0Y2hlclJlc3VsdHNbaW5kZXhdICE9PSB1bmRlZmluZWQsIFwiRGlkIG5vdCBmaW5kIGNvcnJlc3BvbmRpbmcgZmV0Y2hlciByZXN1bHRcIik7XG4gICAgbGV0IHJlc3VsdCA9IGZldGNoZXJSZXN1bHRzW2luZGV4XTtcbiAgICAvLyBQcm9jZXNzIGZldGNoZXIgbm9uLXJlZGlyZWN0IGVycm9yc1xuICAgIGlmIChjb250cm9sbGVyICYmIGNvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIC8vIE5vdGhpbmcgdG8gZG8gZm9yIGFib3J0ZWQgZmV0Y2hlcnNcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgbWF0Y2ggPT0gbnVsbCA/IHZvaWQgMCA6IG1hdGNoLnJvdXRlLmlkKTtcbiAgICAgIGlmICghKGVycm9ycyAmJiBlcnJvcnNbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF0pKSB7XG4gICAgICAgIGVycm9ycyA9IF9leHRlbmRzKHt9LCBlcnJvcnMsIHtcbiAgICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5lcnJvclxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICAgIH0gZWxzZSBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTaG91bGQgbmV2ZXIgZ2V0IGhlcmUsIHJlZGlyZWN0cyBzaG91bGQgZ2V0IHByb2Nlc3NlZCBhYm92ZSwgYnV0IHdlXG4gICAgICAvLyBrZWVwIHRoaXMgdG8gdHlwZSBuYXJyb3cgdG8gYSBzdWNjZXNzIHJlc3VsdCBpbiB0aGUgZWxzZVxuICAgICAgaW52YXJpYW50KGZhbHNlLCBcIlVuaGFuZGxlZCBmZXRjaGVyIHJldmFsaWRhdGlvbiByZWRpcmVjdFwiKTtcbiAgICB9IGVsc2UgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU2hvdWxkIG5ldmVyIGdldCBoZXJlLCBkZWZlcnJlZCBkYXRhIHNob3VsZCBiZSBhd2FpdGVkIGZvciBmZXRjaGVyc1xuICAgICAgLy8gaW4gcmVzb2x2ZURlZmVycmVkUmVzdWx0c1xuICAgICAgaW52YXJpYW50KGZhbHNlLCBcIlVuaGFuZGxlZCBmZXRjaGVyIGRlZmVycmVkIGRhdGFcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IGdldERvbmVGZXRjaGVyKHJlc3VsdC5kYXRhKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBsb2FkZXJEYXRhLFxuICAgIGVycm9yc1xuICB9O1xufVxuZnVuY3Rpb24gbWVyZ2VMb2FkZXJEYXRhKGxvYWRlckRhdGEsIG5ld0xvYWRlckRhdGEsIG1hdGNoZXMsIGVycm9ycykge1xuICBsZXQgbWVyZ2VkTG9hZGVyRGF0YSA9IF9leHRlbmRzKHt9LCBuZXdMb2FkZXJEYXRhKTtcbiAgZm9yIChsZXQgbWF0Y2ggb2YgbWF0Y2hlcykge1xuICAgIGxldCBpZCA9IG1hdGNoLnJvdXRlLmlkO1xuICAgIGlmIChuZXdMb2FkZXJEYXRhLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgaWYgKG5ld0xvYWRlckRhdGFbaWRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbWVyZ2VkTG9hZGVyRGF0YVtpZF0gPSBuZXdMb2FkZXJEYXRhW2lkXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGxvYWRlckRhdGFbaWRdICE9PSB1bmRlZmluZWQgJiYgbWF0Y2gucm91dGUubG9hZGVyKSB7XG4gICAgICAvLyBQcmVzZXJ2ZSBleGlzdGluZyBrZXlzIG5vdCBpbmNsdWRlZCBpbiBuZXdMb2FkZXJEYXRhIGFuZCB3aGVyZSBhIGxvYWRlclxuICAgICAgLy8gd2Fzbid0IHJlbW92ZWQgYnkgSE1SXG4gICAgICBtZXJnZWRMb2FkZXJEYXRhW2lkXSA9IGxvYWRlckRhdGFbaWRdO1xuICAgIH1cbiAgICBpZiAoZXJyb3JzICYmIGVycm9ycy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgIC8vIERvbid0IGtlZXAgYW55IGxvYWRlciBkYXRhIGJlbG93IHRoZSBib3VuZGFyeVxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtZXJnZWRMb2FkZXJEYXRhO1xufVxuLy8gRmluZCB0aGUgbmVhcmVzdCBlcnJvciBib3VuZGFyeSwgbG9va2luZyB1cHdhcmRzIGZyb20gdGhlIGxlYWYgcm91dGUgKG9yIHRoZVxuLy8gcm91dGUgc3BlY2lmaWVkIGJ5IHJvdXRlSWQpIGZvciB0aGUgY2xvc2VzdCBhbmNlc3RvciBlcnJvciBib3VuZGFyeSxcbi8vIGRlZmF1bHRpbmcgdG8gdGhlIHJvb3QgbWF0Y2hcbmZ1bmN0aW9uIGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgcm91dGVJZCkge1xuICBsZXQgZWxpZ2libGVNYXRjaGVzID0gcm91dGVJZCA/IG1hdGNoZXMuc2xpY2UoMCwgbWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSArIDEpIDogWy4uLm1hdGNoZXNdO1xuICByZXR1cm4gZWxpZ2libGVNYXRjaGVzLnJldmVyc2UoKS5maW5kKG0gPT4gbS5yb3V0ZS5oYXNFcnJvckJvdW5kYXJ5ID09PSB0cnVlKSB8fCBtYXRjaGVzWzBdO1xufVxuZnVuY3Rpb24gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhyb3V0ZXMpIHtcbiAgLy8gUHJlZmVyIGEgcm9vdCBsYXlvdXQgcm91dGUgaWYgcHJlc2VudCwgb3RoZXJ3aXNlIHNoaW0gaW4gYSByb3V0ZSBvYmplY3RcbiAgbGV0IHJvdXRlID0gcm91dGVzLmZpbmQociA9PiByLmluZGV4IHx8ICFyLnBhdGggfHwgci5wYXRoID09PSBcIi9cIikgfHwge1xuICAgIGlkOiBcIl9fc2hpbS1lcnJvci1yb3V0ZV9fXCJcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBtYXRjaGVzOiBbe1xuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIHBhdGhuYW1lOiBcIlwiLFxuICAgICAgcGF0aG5hbWVCYXNlOiBcIlwiLFxuICAgICAgcm91dGVcbiAgICB9XSxcbiAgICByb3V0ZVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcihzdGF0dXMsIF90ZW1wNCkge1xuICBsZXQge1xuICAgIHBhdGhuYW1lLFxuICAgIHJvdXRlSWQsXG4gICAgbWV0aG9kLFxuICAgIHR5cGVcbiAgfSA9IF90ZW1wNCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDQ7XG4gIGxldCBzdGF0dXNUZXh0ID0gXCJVbmtub3duIFNlcnZlciBFcnJvclwiO1xuICBsZXQgZXJyb3JNZXNzYWdlID0gXCJVbmtub3duIEByZW1peC1ydW4vcm91dGVyIGVycm9yXCI7XG4gIGlmIChzdGF0dXMgPT09IDQwMCkge1xuICAgIHN0YXR1c1RleHQgPSBcIkJhZCBSZXF1ZXN0XCI7XG4gICAgaWYgKG1ldGhvZCAmJiBwYXRobmFtZSAmJiByb3V0ZUlkKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIllvdSBtYWRlIGEgXCIgKyBtZXRob2QgKyBcIiByZXF1ZXN0IHRvIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiIGJ1dCBcIiArIChcImRpZCBub3QgcHJvdmlkZSBhIGBsb2FkZXJgIGZvciByb3V0ZSBcXFwiXCIgKyByb3V0ZUlkICsgXCJcXFwiLCBcIikgKyBcInNvIHRoZXJlIGlzIG5vIHdheSB0byBoYW5kbGUgdGhlIHJlcXVlc3QuXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBcImRlZmVyLWFjdGlvblwiKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcImRlZmVyKCkgaXMgbm90IHN1cHBvcnRlZCBpbiBhY3Rpb25zXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBcImludmFsaWQtYm9keVwiKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIlVuYWJsZSB0byBlbmNvZGUgc3VibWlzc2lvbiBib2R5XCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDAzKSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiRm9yYmlkZGVuXCI7XG4gICAgZXJyb3JNZXNzYWdlID0gXCJSb3V0ZSBcXFwiXCIgKyByb3V0ZUlkICsgXCJcXFwiIGRvZXMgbm90IG1hdGNoIFVSTCBcXFwiXCIgKyBwYXRobmFtZSArIFwiXFxcIlwiO1xuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDA0KSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiTm90IEZvdW5kXCI7XG4gICAgZXJyb3JNZXNzYWdlID0gXCJObyByb3V0ZSBtYXRjaGVzIFVSTCBcXFwiXCIgKyBwYXRobmFtZSArIFwiXFxcIlwiO1xuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDA1KSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiTWV0aG9kIE5vdCBBbGxvd2VkXCI7XG4gICAgaWYgKG1ldGhvZCAmJiBwYXRobmFtZSAmJiByb3V0ZUlkKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIllvdSBtYWRlIGEgXCIgKyBtZXRob2QudG9VcHBlckNhc2UoKSArIFwiIHJlcXVlc3QgdG8gXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCIgYnV0IFwiICsgKFwiZGlkIG5vdCBwcm92aWRlIGFuIGBhY3Rpb25gIGZvciByb3V0ZSBcXFwiXCIgKyByb3V0ZUlkICsgXCJcXFwiLCBcIikgKyBcInNvIHRoZXJlIGlzIG5vIHdheSB0byBoYW5kbGUgdGhlIHJlcXVlc3QuXCI7XG4gICAgfSBlbHNlIGlmIChtZXRob2QpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCByZXF1ZXN0IG1ldGhvZCBcXFwiXCIgKyBtZXRob2QudG9VcHBlckNhc2UoKSArIFwiXFxcIlwiO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IEVycm9yUmVzcG9uc2Uoc3RhdHVzIHx8IDUwMCwgc3RhdHVzVGV4dCwgbmV3IEVycm9yKGVycm9yTWVzc2FnZSksIHRydWUpO1xufVxuLy8gRmluZCBhbnkgcmV0dXJuZWQgcmVkaXJlY3QgZXJyb3JzLCBzdGFydGluZyBmcm9tIHRoZSBsb3dlc3QgbWF0Y2hcbmZ1bmN0aW9uIGZpbmRSZWRpcmVjdChyZXN1bHRzKSB7XG4gIGZvciAobGV0IGkgPSByZXN1bHRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdWx0LFxuICAgICAgICBpZHg6IGlcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzdHJpcEhhc2hGcm9tUGF0aChwYXRoKSB7XG4gIGxldCBwYXJzZWRQYXRoID0gdHlwZW9mIHBhdGggPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgocGF0aCkgOiBwYXRoO1xuICByZXR1cm4gY3JlYXRlUGF0aChfZXh0ZW5kcyh7fSwgcGFyc2VkUGF0aCwge1xuICAgIGhhc2g6IFwiXCJcbiAgfSkpO1xufVxuZnVuY3Rpb24gaXNIYXNoQ2hhbmdlT25seShhLCBiKSB7XG4gIGlmIChhLnBhdGhuYW1lICE9PSBiLnBhdGhuYW1lIHx8IGEuc2VhcmNoICE9PSBiLnNlYXJjaCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoYS5oYXNoID09PSBcIlwiKSB7XG4gICAgLy8gL3BhZ2UgLT4gL3BhZ2UjaGFzaFxuICAgIHJldHVybiBiLmhhc2ggIT09IFwiXCI7XG4gIH0gZWxzZSBpZiAoYS5oYXNoID09PSBiLmhhc2gpIHtcbiAgICAvLyAvcGFnZSNoYXNoIC0+IC9wYWdlI2hhc2hcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChiLmhhc2ggIT09IFwiXCIpIHtcbiAgICAvLyAvcGFnZSNoYXNoIC0+IC9wYWdlI290aGVyXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gSWYgdGhlIGhhc2ggaXMgcmVtb3ZlZCB0aGUgYnJvd3NlciB3aWxsIHJlLXBlcmZvcm0gYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXJcbiAgLy8gL3BhZ2UjaGFzaCAtPiAvcGFnZVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gcmVzdWx0LnR5cGUgPT09IFJlc3VsdFR5cGUuZGVmZXJyZWQ7XG59XG5mdW5jdGlvbiBpc0Vycm9yUmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gcmVzdWx0LnR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3I7XG59XG5mdW5jdGlvbiBpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gKHJlc3VsdCAmJiByZXN1bHQudHlwZSkgPT09IFJlc3VsdFR5cGUucmVkaXJlY3Q7XG59XG5mdW5jdGlvbiBpc0RlZmVycmVkRGF0YSh2YWx1ZSkge1xuICBsZXQgZGVmZXJyZWQgPSB2YWx1ZTtcbiAgcmV0dXJuIGRlZmVycmVkICYmIHR5cGVvZiBkZWZlcnJlZCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgZGVmZXJyZWQuZGF0YSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgZGVmZXJyZWQuc3Vic2NyaWJlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGRlZmVycmVkLmNhbmNlbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBkZWZlcnJlZC5yZXNvbHZlRGF0YSA9PT0gXCJmdW5jdGlvblwiO1xufVxuZnVuY3Rpb24gaXNSZXNwb25zZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUuc3RhdHVzID09PSBcIm51bWJlclwiICYmIHR5cGVvZiB2YWx1ZS5zdGF0dXNUZXh0ID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiB2YWx1ZS5oZWFkZXJzID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2YWx1ZS5ib2R5ICE9PSBcInVuZGVmaW5lZFwiO1xufVxuZnVuY3Rpb24gaXNSZWRpcmVjdFJlc3BvbnNlKHJlc3VsdCkge1xuICBpZiAoIWlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBsZXQgc3RhdHVzID0gcmVzdWx0LnN0YXR1cztcbiAgbGV0IGxvY2F0aW9uID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIik7XG4gIHJldHVybiBzdGF0dXMgPj0gMzAwICYmIHN0YXR1cyA8PSAzOTkgJiYgbG9jYXRpb24gIT0gbnVsbDtcbn1cbmZ1bmN0aW9uIGlzUXVlcnlSb3V0ZVJlc3BvbnNlKG9iaikge1xuICByZXR1cm4gb2JqICYmIGlzUmVzcG9uc2Uob2JqLnJlc3BvbnNlKSAmJiAob2JqLnR5cGUgPT09IFJlc3VsdFR5cGUuZGF0YSB8fCBvYmoudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcik7XG59XG5mdW5jdGlvbiBpc1ZhbGlkTWV0aG9kKG1ldGhvZCkge1xuICByZXR1cm4gdmFsaWRSZXF1ZXN0TWV0aG9kcy5oYXMobWV0aG9kLnRvTG93ZXJDYXNlKCkpO1xufVxuZnVuY3Rpb24gaXNNdXRhdGlvbk1ldGhvZChtZXRob2QpIHtcbiAgcmV0dXJuIHZhbGlkTXV0YXRpb25NZXRob2RzLmhhcyhtZXRob2QudG9Mb3dlckNhc2UoKSk7XG59XG5hc3luYyBmdW5jdGlvbiByZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBzaWduYWxzLCBpc0ZldGNoZXIsIGN1cnJlbnRMb2FkZXJEYXRhKSB7XG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByZXN1bHRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGxldCByZXN1bHQgPSByZXN1bHRzW2luZGV4XTtcbiAgICBsZXQgbWF0Y2ggPSBtYXRjaGVzVG9Mb2FkW2luZGV4XTtcbiAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgbWF0Y2gsIHRoZW4gd2UgY2FuIGhhdmUgYSBkZWZlcnJlZCByZXN1bHQgdG8gZG9cbiAgICAvLyBhbnl0aGluZyB3aXRoLiAgVGhpcyBpcyBmb3IgcmV2YWxpZGF0aW5nIGZldGNoZXJzIHdoZXJlIHRoZSByb3V0ZSB3YXNcbiAgICAvLyByZW1vdmVkIGR1cmluZyBITVJcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgbGV0IGN1cnJlbnRNYXRjaCA9IGN1cnJlbnRNYXRjaGVzLmZpbmQobSA9PiBtLnJvdXRlLmlkID09PSBtYXRjaC5yb3V0ZS5pZCk7XG4gICAgbGV0IGlzUmV2YWxpZGF0aW5nTG9hZGVyID0gY3VycmVudE1hdGNoICE9IG51bGwgJiYgIWlzTmV3Um91dGVJbnN0YW5jZShjdXJyZW50TWF0Y2gsIG1hdGNoKSAmJiAoY3VycmVudExvYWRlckRhdGEgJiYgY3VycmVudExvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdKSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkgJiYgKGlzRmV0Y2hlciB8fCBpc1JldmFsaWRhdGluZ0xvYWRlcikpIHtcbiAgICAgIC8vIE5vdGU6IHdlIGRvIG5vdCBoYXZlIHRvIHRvdWNoIGFjdGl2ZURlZmVycmVkcyBoZXJlIHNpbmNlIHdlIHJhY2UgdGhlbVxuICAgICAgLy8gYWdhaW5zdCB0aGUgc2lnbmFsIGluIHJlc29sdmVEZWZlcnJlZERhdGEgYW5kIHRoZXknbGwgZ2V0IGFib3J0ZWRcbiAgICAgIC8vIHRoZXJlIGlmIG5lZWRlZFxuICAgICAgbGV0IHNpZ25hbCA9IHNpZ25hbHNbaW5kZXhdO1xuICAgICAgaW52YXJpYW50KHNpZ25hbCwgXCJFeHBlY3RlZCBhbiBBYm9ydFNpZ25hbCBmb3IgcmV2YWxpZGF0aW5nIGZldGNoZXIgZGVmZXJyZWQgcmVzdWx0XCIpO1xuICAgICAgYXdhaXQgcmVzb2x2ZURlZmVycmVkRGF0YShyZXN1bHQsIHNpZ25hbCwgaXNGZXRjaGVyKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHRzW2luZGV4XSA9IHJlc3VsdCB8fCByZXN1bHRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5hc3luYyBmdW5jdGlvbiByZXNvbHZlRGVmZXJyZWREYXRhKHJlc3VsdCwgc2lnbmFsLCB1bndyYXApIHtcbiAgaWYgKHVud3JhcCA9PT0gdm9pZCAwKSB7XG4gICAgdW53cmFwID0gZmFsc2U7XG4gIH1cbiAgbGV0IGFib3J0ZWQgPSBhd2FpdCByZXN1bHQuZGVmZXJyZWREYXRhLnJlc29sdmVEYXRhKHNpZ25hbCk7XG4gIGlmIChhYm9ydGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh1bndyYXApIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgICAgICBkYXRhOiByZXN1bHQuZGVmZXJyZWREYXRhLnVud3JhcHBlZERhdGFcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gSGFuZGxlIGFueSBUcmFja2VkUHJvbWlzZS5fZXJyb3IgdmFsdWVzIGVuY291bnRlcmVkIHdoaWxlIHVud3JhcHBpbmdcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yOiBlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICBkYXRhOiByZXN1bHQuZGVmZXJyZWREYXRhLmRhdGFcbiAgfTtcbn1cbmZ1bmN0aW9uIGhhc05ha2VkSW5kZXhRdWVyeShzZWFyY2gpIHtcbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXMoc2VhcmNoKS5nZXRBbGwoXCJpbmRleFwiKS5zb21lKHYgPT4gdiA9PT0gXCJcIik7XG59XG4vLyBOb3RlOiBUaGlzIHNob3VsZCBtYXRjaCB0aGUgZm9ybWF0IGV4cG9ydGVkIGJ5IHVzZU1hdGNoZXMsIHNvIGlmIHlvdSBjaGFuZ2Vcbi8vIHRoaXMgcGxlYXNlIGFsc28gY2hhbmdlIHRoYXQgOikgIEV2ZW50dWFsbHkgd2UnbGwgRFJZIHRoaXMgdXBcbmZ1bmN0aW9uIGNyZWF0ZVVzZU1hdGNoZXNNYXRjaChtYXRjaCwgbG9hZGVyRGF0YSkge1xuICBsZXQge1xuICAgIHJvdXRlLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtc1xuICB9ID0gbWF0Y2g7XG4gIHJldHVybiB7XG4gICAgaWQ6IHJvdXRlLmlkLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtcyxcbiAgICBkYXRhOiBsb2FkZXJEYXRhW3JvdXRlLmlkXSxcbiAgICBoYW5kbGU6IHJvdXRlLmhhbmRsZVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pIHtcbiAgbGV0IHNlYXJjaCA9IHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbikuc2VhcmNoIDogbG9jYXRpb24uc2VhcmNoO1xuICBpZiAobWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLmluZGV4ICYmIGhhc05ha2VkSW5kZXhRdWVyeShzZWFyY2ggfHwgXCJcIikpIHtcbiAgICAvLyBSZXR1cm4gdGhlIGxlYWYgaW5kZXggcm91dGUgd2hlbiBpbmRleCBpcyBwcmVzZW50XG4gICAgcmV0dXJuIG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgfVxuICAvLyBPdGhlcndpc2UgZ3JhYiB0aGUgZGVlcGVzdCBcInBhdGggY29udHJpYnV0aW5nXCIgbWF0Y2ggKGlnbm9yaW5nIGluZGV4IGFuZFxuICAvLyBwYXRobGVzcyBsYXlvdXQgcm91dGVzKVxuICBsZXQgcGF0aE1hdGNoZXMgPSBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKTtcbiAgcmV0dXJuIHBhdGhNYXRjaGVzW3BhdGhNYXRjaGVzLmxlbmd0aCAtIDFdO1xufVxuZnVuY3Rpb24gZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uKG5hdmlnYXRpb24pIHtcbiAgbGV0IHtcbiAgICBmb3JtTWV0aG9kLFxuICAgIGZvcm1BY3Rpb24sXG4gICAgZm9ybUVuY1R5cGUsXG4gICAgdGV4dCxcbiAgICBmb3JtRGF0YSxcbiAgICBqc29uXG4gIH0gPSBuYXZpZ2F0aW9uO1xuICBpZiAoIWZvcm1NZXRob2QgfHwgIWZvcm1BY3Rpb24gfHwgIWZvcm1FbmNUeXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0ZXh0ICE9IG51bGwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICB0ZXh0XG4gICAgfTtcbiAgfSBlbHNlIGlmIChmb3JtRGF0YSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YSxcbiAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgIHRleHQ6IHVuZGVmaW5lZFxuICAgIH07XG4gIH0gZWxzZSBpZiAoanNvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAganNvbixcbiAgICAgIHRleHQ6IHVuZGVmaW5lZFxuICAgIH07XG4gIH1cbn1cbmZ1bmN0aW9uIGdldExvYWRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBzdWJtaXNzaW9uKSB7XG4gIGlmIChzdWJtaXNzaW9uKSB7XG4gICAgbGV0IG5hdmlnYXRpb24gPSB7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGZvcm1NZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb246IHN1Ym1pc3Npb24uZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGE6IHN1Ym1pc3Npb24uZm9ybURhdGEsXG4gICAgICBqc29uOiBzdWJtaXNzaW9uLmpzb24sXG4gICAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHRcbiAgICB9O1xuICAgIHJldHVybiBuYXZpZ2F0aW9uO1xuICB9IGVsc2Uge1xuICAgIGxldCBuYXZpZ2F0aW9uID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgIHRleHQ6IHVuZGVmaW5lZFxuICAgIH07XG4gICAgcmV0dXJuIG5hdmlnYXRpb247XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFN1Ym1pdHRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBzdWJtaXNzaW9uKSB7XG4gIGxldCBuYXZpZ2F0aW9uID0ge1xuICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIixcbiAgICBsb2NhdGlvbixcbiAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbi5mb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgIGpzb246IHN1Ym1pc3Npb24uanNvbixcbiAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHRcbiAgfTtcbiAgcmV0dXJuIG5hdmlnYXRpb247XG59XG5mdW5jdGlvbiBnZXRMb2FkaW5nRmV0Y2hlcihzdWJtaXNzaW9uLCBkYXRhKSB7XG4gIGlmIChzdWJtaXNzaW9uKSB7XG4gICAgbGV0IGZldGNoZXIgPSB7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uOiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZTogc3VibWlzc2lvbi5mb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgICAganNvbjogc3VibWlzc2lvbi5qc29uLFxuICAgICAgdGV4dDogc3VibWlzc2lvbi50ZXh0LFxuICAgICAgZGF0YSxcbiAgICAgIFwiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nIFwiOiB0cnVlXG4gICAgfTtcbiAgICByZXR1cm4gZmV0Y2hlcjtcbiAgfSBlbHNlIHtcbiAgICBsZXQgZmV0Y2hlciA9IHtcbiAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAganNvbjogdW5kZWZpbmVkLFxuICAgICAgdGV4dDogdW5kZWZpbmVkLFxuICAgICAgZGF0YSxcbiAgICAgIFwiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nIFwiOiB0cnVlXG4gICAgfTtcbiAgICByZXR1cm4gZmV0Y2hlcjtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0U3VibWl0dGluZ0ZldGNoZXIoc3VibWlzc2lvbiwgZXhpc3RpbmdGZXRjaGVyKSB7XG4gIGxldCBmZXRjaGVyID0ge1xuICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIixcbiAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbi5mb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgIGpzb246IHN1Ym1pc3Npb24uanNvbixcbiAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHQsXG4gICAgZGF0YTogZXhpc3RpbmdGZXRjaGVyID8gZXhpc3RpbmdGZXRjaGVyLmRhdGEgOiB1bmRlZmluZWQsXG4gICAgXCIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgXCI6IHRydWVcbiAgfTtcbiAgcmV0dXJuIGZldGNoZXI7XG59XG5mdW5jdGlvbiBnZXREb25lRmV0Y2hlcihkYXRhKSB7XG4gIGxldCBmZXRjaGVyID0ge1xuICAgIHN0YXRlOiBcImlkbGVcIixcbiAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgdGV4dDogdW5kZWZpbmVkLFxuICAgIGRhdGEsXG4gICAgXCIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgXCI6IHRydWVcbiAgfTtcbiAgcmV0dXJuIGZldGNoZXI7XG59XG4vLyNlbmRyZWdpb25cblxuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEFjdGlvbiwgRXJyb3JSZXNwb25zZSwgSURMRV9CTE9DS0VSLCBJRExFX0ZFVENIRVIsIElETEVfTkFWSUdBVElPTiwgVU5TQUZFX0RFRkVSUkVEX1NZTUJPTCwgRGVmZXJyZWREYXRhIGFzIFVOU0FGRV9EZWZlcnJlZERhdGEsIGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMgYXMgVU5TQUZFX2NvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMsIGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzIGFzIFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcywgaW52YXJpYW50IGFzIFVOU0FGRV9pbnZhcmlhbnQsIHdhcm5pbmcgYXMgVU5TQUZFX3dhcm5pbmcsIGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlUGF0aCwgY3JlYXRlUm91dGVyLCBjcmVhdGVTdGF0aWNIYW5kbGVyLCBkZWZlciwgZ2VuZXJhdGVQYXRoLCBnZXRTdGF0aWNDb250ZXh0RnJvbUVycm9yLCBnZXRUb1BhdGhuYW1lLCBpc0RlZmVycmVkRGF0YSwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpvaW5QYXRocywganNvbiwgbWF0Y2hQYXRoLCBtYXRjaFJvdXRlcywgbm9ybWFsaXplUGF0aG5hbWUsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlZGlyZWN0RG9jdW1lbnQsIHJlc29sdmVQYXRoLCByZXNvbHZlVG8sIHN0cmlwQmFzZW5hbWUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRlci5qcy5tYXBcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWFpbi5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWFpbi5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiLyoqXG4gKiBSZWFjdCBSb3V0ZXIgdjYuMTUuMFxuICpcbiAqIENvcHlyaWdodCAoYykgUmVtaXggU29mdHdhcmUgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRS5tZCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBVTlNBRkVfaW52YXJpYW50LCBqb2luUGF0aHMsIG1hdGNoUGF0aCwgVU5TQUZFX2dldFBhdGhDb250cmlidXRpbmdNYXRjaGVzLCBVTlNBRkVfd2FybmluZywgcmVzb2x2ZVRvLCBwYXJzZVBhdGgsIG1hdGNoUm91dGVzLCBBY3Rpb24sIHN0cmlwQmFzZW5hbWUsIElETEVfQkxPQ0tFUiwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGNyZWF0ZU1lbW9yeUhpc3RvcnksIEFib3J0ZWREZWZlcnJlZEVycm9yLCBjcmVhdGVSb3V0ZXIgfSBmcm9tICdAcmVtaXgtcnVuL3JvdXRlcic7XG5leHBvcnQgeyBBYm9ydGVkRGVmZXJyZWRFcnJvciwgQWN0aW9uIGFzIE5hdmlnYXRpb25UeXBlLCBjcmVhdGVQYXRoLCBkZWZlciwgZ2VuZXJhdGVQYXRoLCBpc1JvdXRlRXJyb3JSZXNwb25zZSwganNvbiwgbWF0Y2hQYXRoLCBtYXRjaFJvdXRlcywgcGFyc2VQYXRoLCByZWRpcmVjdCwgcmVkaXJlY3REb2N1bWVudCwgcmVzb2x2ZVBhdGggfSBmcm9tICdAcmVtaXgtcnVuL3JvdXRlcic7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG4vLyBDcmVhdGUgcmVhY3Qtc3BlY2lmaWMgdHlwZXMgZnJvbSB0aGUgYWdub3N0aWMgdHlwZXMgaW4gQHJlbWl4LXJ1bi9yb3V0ZXIgdG9cbi8vIGV4cG9ydCBmcm9tIHJlYWN0LXJvdXRlclxuY29uc3QgRGF0YVJvdXRlckNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgRGF0YVJvdXRlckNvbnRleHQuZGlzcGxheU5hbWUgPSBcIkRhdGFSb3V0ZXJcIjtcbn1cbmNvbnN0IERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgRGF0YVJvdXRlclN0YXRlQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiRGF0YVJvdXRlclN0YXRlXCI7XG59XG5jb25zdCBBd2FpdENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQXdhaXRDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJBd2FpdFwiO1xufVxuXG4vKipcbiAqIEEgTmF2aWdhdG9yIGlzIGEgXCJsb2NhdGlvbiBjaGFuZ2VyXCI7IGl0J3MgaG93IHlvdSBnZXQgdG8gZGlmZmVyZW50IGxvY2F0aW9ucy5cbiAqXG4gKiBFdmVyeSBoaXN0b3J5IGluc3RhbmNlIGNvbmZvcm1zIHRvIHRoZSBOYXZpZ2F0b3IgaW50ZXJmYWNlLCBidXQgdGhlXG4gKiBkaXN0aW5jdGlvbiBpcyB1c2VmdWwgcHJpbWFyaWx5IHdoZW4gaXQgY29tZXMgdG8gdGhlIGxvdy1sZXZlbCA8Um91dGVyPiBBUElcbiAqIHdoZXJlIGJvdGggdGhlIGxvY2F0aW9uIGFuZCBhIG5hdmlnYXRvciBtdXN0IGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgaW4gb3JkZXJcbiAqIHRvIGF2b2lkIFwidGVhcmluZ1wiIHRoYXQgbWF5IG9jY3VyIGluIGEgc3VzcGVuc2UtZW5hYmxlZCBhcHAgaWYgdGhlIGFjdGlvblxuICogYW5kL29yIGxvY2F0aW9uIHdlcmUgdG8gYmUgcmVhZCBkaXJlY3RseSBmcm9tIHRoZSBoaXN0b3J5IGluc3RhbmNlLlxuICovXG5cbmNvbnN0IE5hdmlnYXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdmlnYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJOYXZpZ2F0aW9uXCI7XG59XG5jb25zdCBMb2NhdGlvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTG9jYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJMb2NhdGlvblwiO1xufVxuY29uc3QgUm91dGVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICBvdXRsZXQ6IG51bGwsXG4gIG1hdGNoZXM6IFtdLFxuICBpc0RhdGFSb3V0ZTogZmFsc2Vcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlXCI7XG59XG5jb25zdCBSb3V0ZUVycm9yQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZUVycm9yQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiUm91dGVFcnJvclwiO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGZ1bGwgaHJlZiBmb3IgdGhlIGdpdmVuIFwidG9cIiB2YWx1ZS4gVGhpcyBpcyB1c2VmdWwgZm9yIGJ1aWxkaW5nXG4gKiBjdXN0b20gbGlua3MgdGhhdCBhcmUgYWxzbyBhY2Nlc3NpYmxlIGFuZCBwcmVzZXJ2ZSByaWdodC1jbGljayBiZWhhdmlvci5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1ocmVmXG4gKi9cbmZ1bmN0aW9uIHVzZUhyZWYodG8sIF90ZW1wKSB7XG4gIGxldCB7XG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZUhyZWYoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgaGFzaCxcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2hcbiAgfSA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICBsZXQgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZTtcblxuICAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yXG4gIC8vIHRvIGNyZWF0aW5nIHRoZSBocmVmLiAgSWYgdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiBqdXN0IHVzZSB0aGUgcmF3XG4gIC8vIGJhc2VuYW1lIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2VcbiAgLy8gb2YgYSB0cmFpbGluZyBzbGFzaCBvbiByb290IGxpbmtzXG4gIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBqb2luZWRQYXRobmFtZSA9IHBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aG5hbWVdKTtcbiAgfVxuICByZXR1cm4gbmF2aWdhdG9yLmNyZWF0ZUhyZWYoe1xuICAgIHBhdGhuYW1lOiBqb2luZWRQYXRobmFtZSxcbiAgICBzZWFyY2gsXG4gICAgaGFzaFxuICB9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGEgPFJvdXRlcj4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtaW4tcm91dGVyLWNvbnRleHRcbiAqL1xuZnVuY3Rpb24gdXNlSW5Sb3V0ZXJDb250ZXh0KCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpICE9IG51bGw7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBsb2NhdGlvbiBvYmplY3QsIHdoaWNoIHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgVVJMIGluIHdlYlxuICogYnJvd3NlcnMuXG4gKlxuICogTm90ZTogSWYgeW91J3JlIHVzaW5nIHRoaXMgaXQgbWF5IG1lYW4geW91J3JlIGRvaW5nIHNvbWUgb2YgeW91ciBvd25cbiAqIFwicm91dGluZ1wiIGluIHlvdXIgYXBwLCBhbmQgd2UnZCBsaWtlIHRvIGtub3cgd2hhdCB5b3VyIHVzZSBjYXNlIGlzLiBXZSBtYXlcbiAqIGJlIGFibGUgdG8gcHJvdmlkZSBzb21ldGhpbmcgaGlnaGVyLWxldmVsIHRvIGJldHRlciBzdWl0IHlvdXIgbmVlZHMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbG9jYXRpb25cbiAqL1xuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTG9jYXRpb24oKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLmxvY2F0aW9uO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBhY3Rpb24gd2hpY2ggZGVzY3JpYmVzIGhvdyB0aGUgcm91dGVyIGNhbWUgdG9cbiAqIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBlaXRoZXIgYnkgYSBwb3AsIHB1c2gsIG9yIHJlcGxhY2Ugb24gdGhlIGhpc3Rvcnkgc3RhY2suXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbmF2aWdhdGlvbi10eXBlXG4gKi9cbmZ1bmN0aW9uIHVzZU5hdmlnYXRpb25UeXBlKCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLm5hdmlnYXRpb25UeXBlO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBQYXRoTWF0Y2ggb2JqZWN0IGlmIHRoZSBnaXZlbiBwYXR0ZXJuIG1hdGNoZXMgdGhlIGN1cnJlbnQgVVJMLlxuICogVGhpcyBpcyB1c2VmdWwgZm9yIGNvbXBvbmVudHMgdGhhdCBuZWVkIHRvIGtub3cgXCJhY3RpdmVcIiBzdGF0ZSwgZS5nLlxuICogPE5hdkxpbms+LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW1hdGNoXG4gKi9cbmZ1bmN0aW9uIHVzZU1hdGNoKHBhdHRlcm4pIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VNYXRjaCgpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgcGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IG1hdGNoUGF0aChwYXR0ZXJuLCBwYXRobmFtZSksIFtwYXRobmFtZSwgcGF0dGVybl0pO1xufVxuXG4vKipcbiAqIFRoZSBpbnRlcmZhY2UgZm9yIHRoZSBuYXZpZ2F0ZSgpIGZ1bmN0aW9uIHJldHVybmVkIGZyb20gdXNlTmF2aWdhdGUoKS5cbiAqL1xuXG5jb25zdCBuYXZpZ2F0ZUVmZmVjdFdhcm5pbmcgPSBcIllvdSBzaG91bGQgY2FsbCBuYXZpZ2F0ZSgpIGluIGEgUmVhY3QudXNlRWZmZWN0KCksIG5vdCB3aGVuIFwiICsgXCJ5b3VyIGNvbXBvbmVudCBpcyBmaXJzdCByZW5kZXJlZC5cIjtcblxuLy8gTXV0ZSB3YXJuaW5ncyBmb3IgY2FsbHMgdG8gdXNlTmF2aWdhdGUgaW4gU1NSIGVudmlyb25tZW50c1xuZnVuY3Rpb24gdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChjYikge1xuICBsZXQgaXNTdGF0aWMgPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KS5zdGF0aWM7XG4gIGlmICghaXNTdGF0aWMpIHtcbiAgICAvLyBXZSBzaG91bGQgYmUgYWJsZSB0byBnZXQgcmlkIG9mIHRoaXMgb25jZSByZWFjdCAxOC4zIGlzIHJlbGVhc2VkXG4gICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC8yNjM5NVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdChjYik7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGltcGVyYXRpdmUgbWV0aG9kIGZvciBjaGFuZ2luZyB0aGUgbG9jYXRpb24uIFVzZWQgYnkgPExpbms+cywgYnV0XG4gKiBtYXkgYWxzbyBiZSB1c2VkIGJ5IG90aGVyIGVsZW1lbnRzIHRvIGNoYW5nZSB0aGUgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGUoKSB7XG4gIGxldCB7XG4gICAgaXNEYXRhUm91dGVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgLy8gQ29uZGl0aW9uYWwgdXNhZ2UgaXMgT0sgaGVyZSBiZWNhdXNlIHRoZSB1c2FnZSBvZiBhIGRhdGEgcm91dGVyIGlzIHN0YXRpY1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgcmV0dXJuIGlzRGF0YVJvdXRlID8gdXNlTmF2aWdhdGVTdGFibGUoKSA6IHVzZU5hdmlnYXRlVW5zdGFibGUoKTtcbn1cbmZ1bmN0aW9uIHVzZU5hdmlnYXRlVW5zdGFibGUoKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTmF2aWdhdGUoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlUGF0aG5hbWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKS5tYXAobWF0Y2ggPT4gbWF0Y2gucGF0aG5hbWVCYXNlKSk7XG4gIGxldCBhY3RpdmVSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBhY3RpdmVSZWYuY3VycmVudCA9IHRydWU7XG4gIH0pO1xuICBsZXQgbmF2aWdhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAodG8sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGFjdGl2ZVJlZi5jdXJyZW50LCBuYXZpZ2F0ZUVmZmVjdFdhcm5pbmcpIDogdm9pZCAwO1xuXG4gICAgLy8gU2hvcnQgY2lyY3VpdCBoZXJlIHNpbmNlIGlmIHRoaXMgaGFwcGVucyBvbiBmaXJzdCByZW5kZXIgdGhlIG5hdmlnYXRlXG4gICAgLy8gaXMgdXNlbGVzcyBiZWNhdXNlIHdlIGhhdmVuJ3Qgd2lyZWQgdXAgb3VyIGhpc3RvcnkgbGlzdGVuZXIgeWV0XG4gICAgaWYgKCFhY3RpdmVSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIG5hdmlnYXRvci5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBwYXRoID0gcmVzb2x2ZVRvKHRvLCBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksIGxvY2F0aW9uUGF0aG5hbWUsIG9wdGlvbnMucmVsYXRpdmUgPT09IFwicGF0aFwiKTtcblxuICAgIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUgcHJpb3JcbiAgICAvLyB0byBoYW5kaW5nIG9mZiB0byBoaXN0b3J5IChidXQgb25seSBpZiB3ZSdyZSBub3QgaW4gYSBkYXRhIHJvdXRlcixcbiAgICAvLyBvdGhlcndpc2UgaXQnbGwgcHJlcGVuZCB0aGUgYmFzZW5hbWUgaW5zaWRlIG9mIHRoZSByb3V0ZXIpLlxuICAgIC8vIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4gd2UgbmF2aWdhdGUgdG8gdGhlIHJhdyBiYXNlbmFtZVxuICAgIC8vIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2Ugb2YgYVxuICAgIC8vIHRyYWlsaW5nIHNsYXNoIG9uIHJvb3QgbGlua3NcbiAgICBpZiAoZGF0YVJvdXRlckNvbnRleHQgPT0gbnVsbCAmJiBiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICAgIH1cbiAgICAoISFvcHRpb25zLnJlcGxhY2UgPyBuYXZpZ2F0b3IucmVwbGFjZSA6IG5hdmlnYXRvci5wdXNoKShwYXRoLCBvcHRpb25zLnN0YXRlLCBvcHRpb25zKTtcbiAgfSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZSwgZGF0YVJvdXRlckNvbnRleHRdKTtcbiAgcmV0dXJuIG5hdmlnYXRlO1xufVxuY29uc3QgT3V0bGV0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGNvbnRleHQgKGlmIHByb3ZpZGVkKSBmb3IgdGhlIGNoaWxkIHJvdXRlIGF0IHRoaXMgbGV2ZWwgb2YgdGhlIHJvdXRlXG4gKiBoaWVyYXJjaHkuXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1vdXRsZXQtY29udGV4dFxuICovXG5mdW5jdGlvbiB1c2VPdXRsZXRDb250ZXh0KCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChPdXRsZXRDb250ZXh0KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS4gVXNlZCBpbnRlcm5hbGx5IGJ5IDxPdXRsZXQ+IHRvIHJlbmRlciBjaGlsZCByb3V0ZXMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2Utb3V0bGV0XG4gKi9cbmZ1bmN0aW9uIHVzZU91dGxldChjb250ZXh0KSB7XG4gIGxldCBvdXRsZXQgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCkub3V0bGV0O1xuICBpZiAob3V0bGV0KSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE91dGxldENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBjb250ZXh0XG4gICAgfSwgb3V0bGV0KTtcbiAgfVxuICByZXR1cm4gb3V0bGV0O1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IG9mIGtleS92YWx1ZSBwYWlycyBvZiB0aGUgZHluYW1pYyBwYXJhbXMgZnJvbSB0aGUgY3VycmVudFxuICogVVJMIHRoYXQgd2VyZSBtYXRjaGVkIGJ5IHRoZSByb3V0ZSBwYXRoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLXBhcmFtc1xuICovXG5mdW5jdGlvbiB1c2VQYXJhbXMoKSB7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVNYXRjaCA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9O1xufVxuXG4vKipcbiAqIFJlc29sdmVzIHRoZSBwYXRobmFtZSBvZiB0aGUgZ2l2ZW4gYHRvYCB2YWx1ZSBhZ2FpbnN0IHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLXJlc29sdmVkLXBhdGhcbiAqL1xuZnVuY3Rpb24gdXNlUmVzb2x2ZWRQYXRoKHRvLCBfdGVtcDIpIHtcbiAgbGV0IHtcbiAgICByZWxhdGl2ZVxuICB9ID0gX3RlbXAyID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMjtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZVBhdGhuYW1lc0pzb24gPSBKU09OLnN0cmluZ2lmeShVTlNBRkVfZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcykubWFwKG1hdGNoID0+IG1hdGNoLnBhdGhuYW1lQmFzZSkpO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiByZXNvbHZlVG8odG8sIEpTT04ucGFyc2Uocm91dGVQYXRobmFtZXNKc29uKSwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmUgPT09IFwicGF0aFwiKSwgW3RvLCByb3V0ZVBhdGhuYW1lc0pzb24sIGxvY2F0aW9uUGF0aG5hbWUsIHJlbGF0aXZlXSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZWxlbWVudCBvZiB0aGUgcm91dGUgdGhhdCBtYXRjaGVkIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBwcmVwYXJlZFxuICogd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0IHRvIHJlbmRlciB0aGUgcmVtYWluZGVyIG9mIHRoZSByb3V0ZSB0cmVlLiBSb3V0ZVxuICogZWxlbWVudHMgaW4gdGhlIHRyZWUgbXVzdCByZW5kZXIgYW4gPE91dGxldD4gdG8gcmVuZGVyIHRoZWlyIGNoaWxkIHJvdXRlJ3NcbiAqIGVsZW1lbnQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2Utcm91dGVzXG4gKi9cbmZ1bmN0aW9uIHVzZVJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uQXJnKSB7XG4gIHJldHVybiB1c2VSb3V0ZXNJbXBsKHJvdXRlcywgbG9jYXRpb25BcmcpO1xufVxuXG4vLyBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiB3aXRoIGFjY2VwdCBvcHRpb25hbCBwYXJhbSBmb3IgUm91dGVyUHJvdmlkZXIgdXNhZ2VcbmZ1bmN0aW9uIHVzZVJvdXRlc0ltcGwocm91dGVzLCBsb2NhdGlvbkFyZywgZGF0YVJvdXRlclN0YXRlKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlUm91dGVzKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIG1hdGNoZXM6IHBhcmVudE1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlTWF0Y2ggPSBwYXJlbnRNYXRjaGVzW3BhcmVudE1hdGNoZXMubGVuZ3RoIC0gMV07XG4gIGxldCBwYXJlbnRQYXJhbXMgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXJhbXMgOiB7fTtcbiAgbGV0IHBhcmVudFBhdGhuYW1lID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGF0aG5hbWUgOiBcIi9cIjtcbiAgbGV0IHBhcmVudFBhdGhuYW1lQmFzZSA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhdGhuYW1lQmFzZSA6IFwiL1wiO1xuICBsZXQgcGFyZW50Um91dGUgPSByb3V0ZU1hdGNoICYmIHJvdXRlTWF0Y2gucm91dGU7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAvLyBZb3Ugd29uJ3QgZ2V0IGEgd2FybmluZyBhYm91dCAyIGRpZmZlcmVudCA8Um91dGVzPiB1bmRlciBhIDxSb3V0ZT5cbiAgICAvLyB3aXRob3V0IGEgdHJhaWxpbmcgKiwgYnV0IHRoaXMgaXMgYSBiZXN0LWVmZm9ydCB3YXJuaW5nIGFueXdheSBzaW5jZSB3ZVxuICAgIC8vIGNhbm5vdCBldmVuIGdpdmUgdGhlIHdhcm5pbmcgdW5sZXNzIHRoZXkgbGFuZCBhdCB0aGUgcGFyZW50IHJvdXRlLlxuICAgIC8vXG4gICAgLy8gRXhhbXBsZTpcbiAgICAvL1xuICAgIC8vIDxSb3V0ZXM+XG4gICAgLy8gICB7LyogVGhpcyByb3V0ZSBwYXRoIE1VU1QgZW5kIHdpdGggLyogYmVjYXVzZSBvdGhlcndpc2VcbiAgICAvLyAgICAgICBpdCB3aWxsIG5ldmVyIG1hdGNoIC9ibG9nL3Bvc3QvMTIzICovfVxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nXCIgZWxlbWVudD17PEJsb2cgLz59IC8+XG4gICAgLy8gICA8Um91dGUgcGF0aD1cImJsb2cvZmVlZFwiIGVsZW1lbnQ9ezxCbG9nRmVlZCAvPn0gLz5cbiAgICAvLyA8L1JvdXRlcz5cbiAgICAvL1xuICAgIC8vIGZ1bmN0aW9uIEJsb2coKSB7XG4gICAgLy8gICByZXR1cm4gKFxuICAgIC8vICAgICA8Um91dGVzPlxuICAgIC8vICAgICAgIDxSb3V0ZSBwYXRoPVwicG9zdC86aWRcIiBlbGVtZW50PXs8UG9zdCAvPn0gLz5cbiAgICAvLyAgICAgPC9Sb3V0ZXM+XG4gICAgLy8gICApO1xuICAgIC8vIH1cbiAgICBsZXQgcGFyZW50UGF0aCA9IHBhcmVudFJvdXRlICYmIHBhcmVudFJvdXRlLnBhdGggfHwgXCJcIjtcbiAgICB3YXJuaW5nT25jZShwYXJlbnRQYXRobmFtZSwgIXBhcmVudFJvdXRlIHx8IHBhcmVudFBhdGguZW5kc1dpdGgoXCIqXCIpLCBcIllvdSByZW5kZXJlZCBkZXNjZW5kYW50IDxSb3V0ZXM+IChvciBjYWxsZWQgYHVzZVJvdXRlcygpYCkgYXQgXCIgKyAoXCJcXFwiXCIgKyBwYXJlbnRQYXRobmFtZSArIFwiXFxcIiAodW5kZXIgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4pIGJ1dCB0aGUgXCIpICsgXCJwYXJlbnQgcm91dGUgcGF0aCBoYXMgbm8gdHJhaWxpbmcgXFxcIipcXFwiLiBUaGlzIG1lYW5zIGlmIHlvdSBuYXZpZ2F0ZSBcIiArIFwiZGVlcGVyLCB0aGUgcGFyZW50IHdvbid0IG1hdGNoIGFueW1vcmUgYW5kIHRoZXJlZm9yZSB0aGUgY2hpbGQgXCIgKyBcInJvdXRlcyB3aWxsIG5ldmVyIHJlbmRlci5cXG5cXG5cIiArIChcIlBsZWFzZSBjaGFuZ2UgdGhlIHBhcmVudCA8Um91dGUgcGF0aD1cXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiPiB0byA8Um91dGUgXCIpICsgKFwicGF0aD1cXFwiXCIgKyAocGFyZW50UGF0aCA9PT0gXCIvXCIgPyBcIipcIiA6IHBhcmVudFBhdGggKyBcIi8qXCIpICsgXCJcXFwiPi5cIikpO1xuICB9XG4gIGxldCBsb2NhdGlvbkZyb21Db250ZXh0ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IGxvY2F0aW9uO1xuICBpZiAobG9jYXRpb25BcmcpIHtcbiAgICB2YXIgX3BhcnNlZExvY2F0aW9uQXJnJHBhO1xuICAgIGxldCBwYXJzZWRMb2NhdGlvbkFyZyA9IHR5cGVvZiBsb2NhdGlvbkFyZyA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbkFyZykgOiBsb2NhdGlvbkFyZztcbiAgICAhKHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgfHwgKChfcGFyc2VkTG9jYXRpb25BcmckcGEgPSBwYXJzZWRMb2NhdGlvbkFyZy5wYXRobmFtZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wYXJzZWRMb2NhdGlvbkFyZyRwYS5zdGFydHNXaXRoKHBhcmVudFBhdGhuYW1lQmFzZSkpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiV2hlbiBvdmVycmlkaW5nIHRoZSBsb2NhdGlvbiB1c2luZyBgPFJvdXRlcyBsb2NhdGlvbj5gIG9yIGB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbilgLCBcIiArIFwidGhlIGxvY2F0aW9uIHBhdGhuYW1lIG11c3QgYmVnaW4gd2l0aCB0aGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIFwiICsgKFwibWF0Y2hlZCBieSBhbGwgcGFyZW50IHJvdXRlcy4gVGhlIGN1cnJlbnQgcGF0aG5hbWUgYmFzZSBpcyBcXFwiXCIgKyBwYXJlbnRQYXRobmFtZUJhc2UgKyBcIlxcXCIgXCIpICsgKFwiYnV0IHBhdGhuYW1lIFxcXCJcIiArIHBhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lICsgXCJcXFwiIHdhcyBnaXZlbiBpbiB0aGUgYGxvY2F0aW9uYCBwcm9wLlwiKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBsb2NhdGlvbiA9IHBhcnNlZExvY2F0aW9uQXJnO1xuICB9IGVsc2Uge1xuICAgIGxvY2F0aW9uID0gbG9jYXRpb25Gcm9tQ29udGV4dDtcbiAgfVxuICBsZXQgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSB8fCBcIi9cIjtcbiAgbGV0IHJlbWFpbmluZ1BhdGhuYW1lID0gcGFyZW50UGF0aG5hbWVCYXNlID09PSBcIi9cIiA/IHBhdGhuYW1lIDogcGF0aG5hbWUuc2xpY2UocGFyZW50UGF0aG5hbWVCYXNlLmxlbmd0aCkgfHwgXCIvXCI7XG4gIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzLCB7XG4gICAgcGF0aG5hbWU6IHJlbWFpbmluZ1BhdGhuYW1lXG4gIH0pO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcocGFyZW50Um91dGUgfHwgbWF0Y2hlcyAhPSBudWxsLCBcIk5vIHJvdXRlcyBtYXRjaGVkIGxvY2F0aW9uIFxcXCJcIiArIGxvY2F0aW9uLnBhdGhuYW1lICsgbG9jYXRpb24uc2VhcmNoICsgbG9jYXRpb24uaGFzaCArIFwiXFxcIiBcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcobWF0Y2hlcyA9PSBudWxsIHx8IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5lbGVtZW50ICE9PSB1bmRlZmluZWQgfHwgbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLkNvbXBvbmVudCAhPT0gdW5kZWZpbmVkLCBcIk1hdGNoZWQgbGVhZiByb3V0ZSBhdCBsb2NhdGlvbiBcXFwiXCIgKyBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCArIGxvY2F0aW9uLmhhc2ggKyBcIlxcXCIgXCIgKyBcImRvZXMgbm90IGhhdmUgYW4gZWxlbWVudCBvciBDb21wb25lbnQuIFRoaXMgbWVhbnMgaXQgd2lsbCByZW5kZXIgYW4gPE91dGxldCAvPiB3aXRoIGEgXCIgKyBcIm51bGwgdmFsdWUgYnkgZGVmYXVsdCByZXN1bHRpbmcgaW4gYW4gXFxcImVtcHR5XFxcIiBwYWdlLlwiKSA6IHZvaWQgMDtcbiAgfVxuICBsZXQgcmVuZGVyZWRNYXRjaGVzID0gX3JlbmRlck1hdGNoZXMobWF0Y2hlcyAmJiBtYXRjaGVzLm1hcChtYXRjaCA9PiBPYmplY3QuYXNzaWduKHt9LCBtYXRjaCwge1xuICAgIHBhcmFtczogT2JqZWN0LmFzc2lnbih7fSwgcGFyZW50UGFyYW1zLCBtYXRjaC5wYXJhbXMpLFxuICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSxcbiAgICAvLyBSZS1lbmNvZGUgcGF0aG5hbWVzIHRoYXQgd2VyZSBkZWNvZGVkIGluc2lkZSBtYXRjaFJvdXRlc1xuICAgIG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbiA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihtYXRjaC5wYXRobmFtZSkucGF0aG5hbWUgOiBtYXRjaC5wYXRobmFtZV0pLFxuICAgIHBhdGhuYW1lQmFzZTogbWF0Y2gucGF0aG5hbWVCYXNlID09PSBcIi9cIiA/IHBhcmVudFBhdGhuYW1lQmFzZSA6IGpvaW5QYXRocyhbcGFyZW50UGF0aG5hbWVCYXNlLFxuICAgIC8vIFJlLWVuY29kZSBwYXRobmFtZXMgdGhhdCB3ZXJlIGRlY29kZWQgaW5zaWRlIG1hdGNoUm91dGVzXG4gICAgbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uID8gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uKG1hdGNoLnBhdGhuYW1lQmFzZSkucGF0aG5hbWUgOiBtYXRjaC5wYXRobmFtZUJhc2VdKVxuICB9KSksIHBhcmVudE1hdGNoZXMsIGRhdGFSb3V0ZXJTdGF0ZSk7XG5cbiAgLy8gV2hlbiBhIHVzZXIgcGFzc2VzIGluIGEgYGxvY2F0aW9uQXJnYCwgdGhlIGFzc29jaWF0ZWQgcm91dGVzIG5lZWQgdG9cbiAgLy8gYmUgd3JhcHBlZCBpbiBhIG5ldyBgTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyYCBpbiBvcmRlciBmb3IgYHVzZUxvY2F0aW9uYFxuICAvLyB0byB1c2UgdGhlIHNjb3BlZCBsb2NhdGlvbiBpbnN0ZWFkIG9mIHRoZSBnbG9iYWwgbG9jYXRpb24uXG4gIGlmIChsb2NhdGlvbkFyZyAmJiByZW5kZXJlZE1hdGNoZXMpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZToge1xuICAgICAgICBsb2NhdGlvbjogX2V4dGVuZHMoe1xuICAgICAgICAgIHBhdGhuYW1lOiBcIi9cIixcbiAgICAgICAgICBzZWFyY2g6IFwiXCIsXG4gICAgICAgICAgaGFzaDogXCJcIixcbiAgICAgICAgICBzdGF0ZTogbnVsbCxcbiAgICAgICAgICBrZXk6IFwiZGVmYXVsdFwiXG4gICAgICAgIH0sIGxvY2F0aW9uKSxcbiAgICAgICAgbmF2aWdhdGlvblR5cGU6IEFjdGlvbi5Qb3BcbiAgICAgIH1cbiAgICB9LCByZW5kZXJlZE1hdGNoZXMpO1xuICB9XG4gIHJldHVybiByZW5kZXJlZE1hdGNoZXM7XG59XG5mdW5jdGlvbiBEZWZhdWx0RXJyb3JDb21wb25lbnQoKSB7XG4gIGxldCBlcnJvciA9IHVzZVJvdXRlRXJyb3IoKTtcbiAgbGV0IG1lc3NhZ2UgPSBpc1JvdXRlRXJyb3JSZXNwb25zZShlcnJvcikgPyBlcnJvci5zdGF0dXMgKyBcIiBcIiArIGVycm9yLnN0YXR1c1RleHQgOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IEpTT04uc3RyaW5naWZ5KGVycm9yKTtcbiAgbGV0IHN0YWNrID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLnN0YWNrIDogbnVsbDtcbiAgbGV0IGxpZ2h0Z3JleSA9IFwicmdiYSgyMDAsMjAwLDIwMCwgMC41KVwiO1xuICBsZXQgcHJlU3R5bGVzID0ge1xuICAgIHBhZGRpbmc6IFwiMC41cmVtXCIsXG4gICAgYmFja2dyb3VuZENvbG9yOiBsaWdodGdyZXlcbiAgfTtcbiAgbGV0IGNvZGVTdHlsZXMgPSB7XG4gICAgcGFkZGluZzogXCIycHggNHB4XCIsXG4gICAgYmFja2dyb3VuZENvbG9yOiBsaWdodGdyZXlcbiAgfTtcbiAgbGV0IGRldkluZm8gPSBudWxsO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGhhbmRsZWQgYnkgUmVhY3QgUm91dGVyIGRlZmF1bHQgRXJyb3JCb3VuZGFyeTpcIiwgZXJyb3IpO1xuICAgIGRldkluZm8gPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIG51bGwsIFwiXFx1RDgzRFxcdURDQkYgSGV5IGRldmVsb3BlciBcXHVEODNEXFx1REM0QlwiKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIG51bGwsIFwiWW91IGNhbiBwcm92aWRlIGEgd2F5IGJldHRlciBVWCB0aGFuIHRoaXMgd2hlbiB5b3VyIGFwcCB0aHJvd3MgZXJyb3JzIGJ5IHByb3ZpZGluZyB5b3VyIG93biBcIiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjb2RlXCIsIHtcbiAgICAgIHN0eWxlOiBjb2RlU3R5bGVzXG4gICAgfSwgXCJFcnJvckJvdW5kYXJ5XCIpLCBcIiBvclwiLCBcIiBcIiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjb2RlXCIsIHtcbiAgICAgIHN0eWxlOiBjb2RlU3R5bGVzXG4gICAgfSwgXCJlcnJvckVsZW1lbnRcIiksIFwiIHByb3Agb24geW91ciByb3V0ZS5cIikpO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoMlwiLCBudWxsLCBcIlVuZXhwZWN0ZWQgQXBwbGljYXRpb24gRXJyb3IhXCIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImgzXCIsIHtcbiAgICBzdHlsZToge1xuICAgICAgZm9udFN0eWxlOiBcIml0YWxpY1wiXG4gICAgfVxuICB9LCBtZXNzYWdlKSwgc3RhY2sgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInByZVwiLCB7XG4gICAgc3R5bGU6IHByZVN0eWxlc1xuICB9LCBzdGFjaykgOiBudWxsLCBkZXZJbmZvKTtcbn1cbmNvbnN0IGRlZmF1bHRFcnJvckVsZW1lbnQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0RXJyb3JDb21wb25lbnQsIG51bGwpO1xuY2xhc3MgUmVuZGVyRXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBsb2NhdGlvbjogcHJvcHMubG9jYXRpb24sXG4gICAgICByZXZhbGlkYXRpb246IHByb3BzLnJldmFsaWRhdGlvbixcbiAgICAgIGVycm9yOiBwcm9wcy5lcnJvclxuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvcjogZXJyb3JcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSB7XG4gICAgLy8gV2hlbiB3ZSBnZXQgaW50byBhbiBlcnJvciBzdGF0ZSwgdGhlIHVzZXIgd2lsbCBsaWtlbHkgY2xpY2sgXCJiYWNrXCIgdG8gdGhlXG4gICAgLy8gcHJldmlvdXMgcGFnZSB0aGF0IGRpZG4ndCBoYXZlIGFuIGVycm9yLiBCZWNhdXNlIHRoaXMgd3JhcHMgdGhlIGVudGlyZVxuICAgIC8vIGFwcGxpY2F0aW9uLCB0aGF0IHdpbGwgaGF2ZSBubyBlZmZlY3QtLXRoZSBlcnJvciBwYWdlIGNvbnRpbnVlcyB0byBkaXNwbGF5LlxuICAgIC8vIFRoaXMgZ2l2ZXMgdXMgYSBtZWNoYW5pc20gdG8gcmVjb3ZlciBmcm9tIHRoZSBlcnJvciB3aGVuIHRoZSBsb2NhdGlvbiBjaGFuZ2VzLlxuICAgIC8vXG4gICAgLy8gV2hldGhlciB3ZSdyZSBpbiBhbiBlcnJvciBzdGF0ZSBvciBub3QsIHdlIHVwZGF0ZSB0aGUgbG9jYXRpb24gaW4gc3RhdGVcbiAgICAvLyBzbyB0aGF0IHdoZW4gd2UgYXJlIGluIGFuIGVycm9yIHN0YXRlLCBpdCBnZXRzIHJlc2V0IHdoZW4gYSBuZXcgbG9jYXRpb25cbiAgICAvLyBjb21lcyBpbiBhbmQgdGhlIHVzZXIgcmVjb3ZlcnMgZnJvbSB0aGUgZXJyb3IuXG4gICAgaWYgKHN0YXRlLmxvY2F0aW9uICE9PSBwcm9wcy5sb2NhdGlvbiB8fCBzdGF0ZS5yZXZhbGlkYXRpb24gIT09IFwiaWRsZVwiICYmIHByb3BzLnJldmFsaWRhdGlvbiA9PT0gXCJpZGxlXCIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiBwcm9wcy5lcnJvcixcbiAgICAgICAgbG9jYXRpb246IHByb3BzLmxvY2F0aW9uLFxuICAgICAgICByZXZhbGlkYXRpb246IHByb3BzLnJldmFsaWRhdGlvblxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSdyZSBub3QgY2hhbmdpbmcgbG9jYXRpb25zLCBwcmVzZXJ2ZSB0aGUgbG9jYXRpb24gYnV0IHN0aWxsIHN1cmZhY2VcbiAgICAvLyBhbnkgbmV3IGVycm9ycyB0aGF0IG1heSBjb21lIHRocm91Z2guIFdlIHJldGFpbiB0aGUgZXhpc3RpbmcgZXJyb3IsIHdlIGRvXG4gICAgLy8gdGhpcyBiZWNhdXNlIHRoZSBlcnJvciBwcm92aWRlZCBmcm9tIHRoZSBhcHAgc3RhdGUgbWF5IGJlIGNsZWFyZWQgd2l0aG91dFxuICAgIC8vIHRoZSBsb2NhdGlvbiBjaGFuZ2luZy5cbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IHByb3BzLmVycm9yIHx8IHN0YXRlLmVycm9yLFxuICAgICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgICAgcmV2YWxpZGF0aW9uOiBwcm9wcy5yZXZhbGlkYXRpb24gfHwgc3RhdGUucmV2YWxpZGF0aW9uXG4gICAgfTtcbiAgfVxuICBjb21wb25lbnREaWRDYXRjaChlcnJvciwgZXJyb3JJbmZvKSB7XG4gICAgY29uc29sZS5lcnJvcihcIlJlYWN0IFJvdXRlciBjYXVnaHQgdGhlIGZvbGxvd2luZyBlcnJvciBkdXJpbmcgcmVuZGVyXCIsIGVycm9yLCBlcnJvckluZm8pO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5lcnJvciA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMucHJvcHMucm91dGVDb250ZXh0XG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVFcnJvckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLmVycm9yLFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY29tcG9uZW50XG4gICAgfSkpIDogdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgfVxufVxuZnVuY3Rpb24gUmVuZGVyZWRSb3V0ZShfcmVmKSB7XG4gIGxldCB7XG4gICAgcm91dGVDb250ZXh0LFxuICAgIG1hdGNoLFxuICAgIGNoaWxkcmVuXG4gIH0gPSBfcmVmO1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJDb250ZXh0KTtcblxuICAvLyBUcmFjayBob3cgZGVlcCB3ZSBnb3QgaW4gb3VyIHJlbmRlciBwYXNzIHRvIGVtdWxhdGUgU1NSIGNvbXBvbmVudERpZENhdGNoXG4gIC8vIGluIGEgRGF0YVN0YXRpY1JvdXRlclxuICBpZiAoZGF0YVJvdXRlckNvbnRleHQgJiYgZGF0YVJvdXRlckNvbnRleHQuc3RhdGljICYmIGRhdGFSb3V0ZXJDb250ZXh0LnN0YXRpY0NvbnRleHQgJiYgKG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCB8fCBtYXRjaC5yb3V0ZS5FcnJvckJvdW5kYXJ5KSkge1xuICAgIGRhdGFSb3V0ZXJDb250ZXh0LnN0YXRpY0NvbnRleHQuX2RlZXBlc3RSZW5kZXJlZEJvdW5kYXJ5SWQgPSBtYXRjaC5yb3V0ZS5pZDtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHJvdXRlQ29udGV4dFxuICB9LCBjaGlsZHJlbik7XG59XG5mdW5jdGlvbiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzLCBwYXJlbnRNYXRjaGVzLCBkYXRhUm91dGVyU3RhdGUpIHtcbiAgdmFyIF9kYXRhUm91dGVyU3RhdGUyO1xuICBpZiAocGFyZW50TWF0Y2hlcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50TWF0Y2hlcyA9IFtdO1xuICB9XG4gIGlmIChkYXRhUm91dGVyU3RhdGUgPT09IHZvaWQgMCkge1xuICAgIGRhdGFSb3V0ZXJTdGF0ZSA9IG51bGw7XG4gIH1cbiAgaWYgKG1hdGNoZXMgPT0gbnVsbCkge1xuICAgIHZhciBfZGF0YVJvdXRlclN0YXRlO1xuICAgIGlmICgoX2RhdGFSb3V0ZXJTdGF0ZSA9IGRhdGFSb3V0ZXJTdGF0ZSkgIT0gbnVsbCAmJiBfZGF0YVJvdXRlclN0YXRlLmVycm9ycykge1xuICAgICAgLy8gRG9uJ3QgYmFpbCBpZiB3ZSBoYXZlIGRhdGEgcm91dGVyIGVycm9ycyBzbyB3ZSBjYW4gcmVuZGVyIHRoZW0gaW4gdGhlXG4gICAgICAvLyBib3VuZGFyeS4gIFVzZSB0aGUgcHJlLW1hdGNoZWQgKG9yIHNoaW1tZWQpIG1hdGNoZXNcbiAgICAgIG1hdGNoZXMgPSBkYXRhUm91dGVyU3RhdGUubWF0Y2hlcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIGxldCByZW5kZXJlZE1hdGNoZXMgPSBtYXRjaGVzO1xuXG4gIC8vIElmIHdlIGhhdmUgZGF0YSBlcnJvcnMsIHRyaW0gbWF0Y2hlcyB0byB0aGUgaGlnaGVzdCBlcnJvciBib3VuZGFyeVxuICBsZXQgZXJyb3JzID0gKF9kYXRhUm91dGVyU3RhdGUyID0gZGF0YVJvdXRlclN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2RhdGFSb3V0ZXJTdGF0ZTIuZXJyb3JzO1xuICBpZiAoZXJyb3JzICE9IG51bGwpIHtcbiAgICBsZXQgZXJyb3JJbmRleCA9IHJlbmRlcmVkTWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkICYmIChlcnJvcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yc1ttLnJvdXRlLmlkXSkpO1xuICAgICEoZXJyb3JJbmRleCA+PSAwKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiQ291bGQgbm90IGZpbmQgYSBtYXRjaGluZyByb3V0ZSBmb3IgZXJyb3JzIG9uIHJvdXRlIElEczogXCIgKyBPYmplY3Qua2V5cyhlcnJvcnMpLmpvaW4oXCIsXCIpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJlbmRlcmVkTWF0Y2hlcyA9IHJlbmRlcmVkTWF0Y2hlcy5zbGljZSgwLCBNYXRoLm1pbihyZW5kZXJlZE1hdGNoZXMubGVuZ3RoLCBlcnJvckluZGV4ICsgMSkpO1xuICB9XG4gIHJldHVybiByZW5kZXJlZE1hdGNoZXMucmVkdWNlUmlnaHQoKG91dGxldCwgbWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgbGV0IGVycm9yID0gbWF0Y2gucm91dGUuaWQgPyBlcnJvcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yc1ttYXRjaC5yb3V0ZS5pZF0gOiBudWxsO1xuICAgIC8vIE9ubHkgZGF0YSByb3V0ZXJzIGhhbmRsZSBlcnJvcnNcbiAgICBsZXQgZXJyb3JFbGVtZW50ID0gbnVsbDtcbiAgICBpZiAoZGF0YVJvdXRlclN0YXRlKSB7XG4gICAgICBlcnJvckVsZW1lbnQgPSBtYXRjaC5yb3V0ZS5lcnJvckVsZW1lbnQgfHwgZGVmYXVsdEVycm9yRWxlbWVudDtcbiAgICB9XG4gICAgbGV0IG1hdGNoZXMgPSBwYXJlbnRNYXRjaGVzLmNvbmNhdChyZW5kZXJlZE1hdGNoZXMuc2xpY2UoMCwgaW5kZXggKyAxKSk7XG4gICAgbGV0IGdldENoaWxkcmVuID0gKCkgPT4ge1xuICAgICAgbGV0IGNoaWxkcmVuO1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNoaWxkcmVuID0gZXJyb3JFbGVtZW50O1xuICAgICAgfSBlbHNlIGlmIChtYXRjaC5yb3V0ZS5Db21wb25lbnQpIHtcbiAgICAgICAgLy8gTm90ZTogVGhpcyBpcyBhIGRlLW9wdGltaXplZCBwYXRoIHNpbmNlIFJlYWN0IHdvbid0IHJlLXVzZSB0aGVcbiAgICAgICAgLy8gUmVhY3RFbGVtZW50IHNpbmNlIGl0J3MgaWRlbnRpdHkgY2hhbmdlcyB3aXRoIGVhY2ggbmV3XG4gICAgICAgIC8vIFJlYWN0LmNyZWF0ZUVsZW1lbnQgY2FsbC4gIFdlIGtlZXAgdGhpcyBzbyBmb2xrcyBjYW4gdXNlXG4gICAgICAgIC8vIGA8Um91dGUgQ29tcG9uZW50PXsuLi59PmAgaW4gYDxSb3V0ZXM+YCBidXQgZ2VuZXJhbGx5IGBDb21wb25lbnRgXG4gICAgICAgIC8vIHVzYWdlIGlzIG9ubHkgYWR2aXNlZCBpbiBgUm91dGVyUHJvdmlkZXJgIHdoZW4gd2UgY2FuIGNvbnZlcnQgaXQgdG9cbiAgICAgICAgLy8gYGVsZW1lbnRgIGFoZWFkIG9mIHRpbWUuXG4gICAgICAgIGNoaWxkcmVuID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQobWF0Y2gucm91dGUuQ29tcG9uZW50LCBudWxsKTtcbiAgICAgIH0gZWxzZSBpZiAobWF0Y2gucm91dGUuZWxlbWVudCkge1xuICAgICAgICBjaGlsZHJlbiA9IG1hdGNoLnJvdXRlLmVsZW1lbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGlsZHJlbiA9IG91dGxldDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZW5kZXJlZFJvdXRlLCB7XG4gICAgICAgIG1hdGNoOiBtYXRjaCxcbiAgICAgICAgcm91dGVDb250ZXh0OiB7XG4gICAgICAgICAgb3V0bGV0LFxuICAgICAgICAgIG1hdGNoZXMsXG4gICAgICAgICAgaXNEYXRhUm91dGU6IGRhdGFSb3V0ZXJTdGF0ZSAhPSBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyBPbmx5IHdyYXAgaW4gYW4gZXJyb3IgYm91bmRhcnkgd2l0aGluIGRhdGEgcm91dGVyIHVzYWdlcyB3aGVuIHdlIGhhdmUgYW5cbiAgICAvLyBFcnJvckJvdW5kYXJ5L2Vycm9yRWxlbWVudCBvbiB0aGlzIHJvdXRlLiAgT3RoZXJ3aXNlIGxldCBpdCBidWJibGUgdXAgdG9cbiAgICAvLyBhbiBhbmNlc3RvciBFcnJvckJvdW5kYXJ5L2Vycm9yRWxlbWVudFxuICAgIHJldHVybiBkYXRhUm91dGVyU3RhdGUgJiYgKG1hdGNoLnJvdXRlLkVycm9yQm91bmRhcnkgfHwgbWF0Y2gucm91dGUuZXJyb3JFbGVtZW50IHx8IGluZGV4ID09PSAwKSA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlbmRlckVycm9yQm91bmRhcnksIHtcbiAgICAgIGxvY2F0aW9uOiBkYXRhUm91dGVyU3RhdGUubG9jYXRpb24sXG4gICAgICByZXZhbGlkYXRpb246IGRhdGFSb3V0ZXJTdGF0ZS5yZXZhbGlkYXRpb24sXG4gICAgICBjb21wb25lbnQ6IGVycm9yRWxlbWVudCxcbiAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgIGNoaWxkcmVuOiBnZXRDaGlsZHJlbigpLFxuICAgICAgcm91dGVDb250ZXh0OiB7XG4gICAgICAgIG91dGxldDogbnVsbCxcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgaXNEYXRhUm91dGU6IHRydWVcbiAgICAgIH1cbiAgICB9KSA6IGdldENoaWxkcmVuKCk7XG4gIH0sIG51bGwpO1xufVxudmFyIERhdGFSb3V0ZXJIb29rID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChEYXRhUm91dGVySG9vaykge1xuICBEYXRhUm91dGVySG9va1tcIlVzZUJsb2NrZXJcIl0gPSBcInVzZUJsb2NrZXJcIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VSZXZhbGlkYXRvclwiXSA9IFwidXNlUmV2YWxpZGF0b3JcIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VOYXZpZ2F0ZVN0YWJsZVwiXSA9IFwidXNlTmF2aWdhdGVcIjtcbiAgcmV0dXJuIERhdGFSb3V0ZXJIb29rO1xufShEYXRhUm91dGVySG9vayB8fCB7fSk7XG52YXIgRGF0YVJvdXRlclN0YXRlSG9vayA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoRGF0YVJvdXRlclN0YXRlSG9vaykge1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlQmxvY2tlclwiXSA9IFwidXNlQmxvY2tlclwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlTG9hZGVyRGF0YVwiXSA9IFwidXNlTG9hZGVyRGF0YVwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlQWN0aW9uRGF0YVwiXSA9IFwidXNlQWN0aW9uRGF0YVwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlUm91dGVFcnJvclwiXSA9IFwidXNlUm91dGVFcnJvclwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlTmF2aWdhdGlvblwiXSA9IFwidXNlTmF2aWdhdGlvblwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlUm91dGVMb2FkZXJEYXRhXCJdID0gXCJ1c2VSb3V0ZUxvYWRlckRhdGFcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZU1hdGNoZXNcIl0gPSBcInVzZU1hdGNoZXNcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJldmFsaWRhdG9yXCJdID0gXCJ1c2VSZXZhbGlkYXRvclwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlTmF2aWdhdGVTdGFibGVcIl0gPSBcInVzZU5hdmlnYXRlXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSb3V0ZUlkXCJdID0gXCJ1c2VSb3V0ZUlkXCI7XG4gIHJldHVybiBEYXRhUm91dGVyU3RhdGVIb29rO1xufShEYXRhUm91dGVyU3RhdGVIb29rIHx8IHt9KTtcbmZ1bmN0aW9uIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpIHtcbiAgcmV0dXJuIGhvb2tOYW1lICsgXCIgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGRhdGEgcm91dGVyLiAgU2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlcnMvcGlja2luZy1hLXJvdXRlci5cIjtcbn1cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJDb250ZXh0KGhvb2tOYW1lKSB7XG4gIGxldCBjdHggPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJDb250ZXh0KTtcbiAgIWN0eCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gY3R4O1xufVxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlclN0YXRlKGhvb2tOYW1lKSB7XG4gIGxldCBzdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gICFzdGF0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gc3RhdGU7XG59XG5mdW5jdGlvbiB1c2VSb3V0ZUNvbnRleHQoaG9va05hbWUpIHtcbiAgbGV0IHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICAhcm91dGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHJvdXRlO1xufVxuXG4vLyBJbnRlcm5hbCB2ZXJzaW9uIHdpdGggaG9va05hbWUtYXdhcmUgZGVidWdnaW5nXG5mdW5jdGlvbiB1c2VDdXJyZW50Um91dGVJZChob29rTmFtZSkge1xuICBsZXQgcm91dGUgPSB1c2VSb3V0ZUNvbnRleHQoaG9va05hbWUpO1xuICBsZXQgdGhpc1JvdXRlID0gcm91dGUubWF0Y2hlc1tyb3V0ZS5tYXRjaGVzLmxlbmd0aCAtIDFdO1xuICAhdGhpc1JvdXRlLnJvdXRlLmlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgaG9va05hbWUgKyBcIiBjYW4gb25seSBiZSB1c2VkIG9uIHJvdXRlcyB0aGF0IGNvbnRhaW4gYSB1bmlxdWUgXFxcImlkXFxcIlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gdGhpc1JvdXRlLnJvdXRlLmlkO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIElEIGZvciB0aGUgbmVhcmVzdCBjb250ZXh0dWFsIHJvdXRlXG4gKi9cbmZ1bmN0aW9uIHVzZVJvdXRlSWQoKSB7XG4gIHJldHVybiB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlSWQpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiwgZGVmYXVsdGluZyB0byBhbiBcImlkbGVcIiBuYXZpZ2F0aW9uIHdoZW5cbiAqIG5vIG5hdmlnYXRpb24gaXMgaW4gcHJvZ3Jlc3NcbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGlvbigpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTmF2aWdhdGlvbik7XG4gIHJldHVybiBzdGF0ZS5uYXZpZ2F0aW9uO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSByZXZhbGlkYXRlIGZ1bmN0aW9uIGZvciBtYW51YWxseSB0cmlnZ2VyaW5nIHJldmFsaWRhdGlvbiwgYXMgd2VsbFxuICogYXMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgYW55IG1hbnVhbCByZXZhbGlkYXRpb25zXG4gKi9cbmZ1bmN0aW9uIHVzZVJldmFsaWRhdG9yKCkge1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VSZXZhbGlkYXRvcik7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJldmFsaWRhdG9yKTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICByZXZhbGlkYXRlOiBkYXRhUm91dGVyQ29udGV4dC5yb3V0ZXIucmV2YWxpZGF0ZSxcbiAgICBzdGF0ZTogc3RhdGUucmV2YWxpZGF0aW9uXG4gIH0pLCBbZGF0YVJvdXRlckNvbnRleHQucm91dGVyLnJldmFsaWRhdGUsIHN0YXRlLnJldmFsaWRhdGlvbl0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGFjdGl2ZSByb3V0ZSBtYXRjaGVzLCB1c2VmdWwgZm9yIGFjY2Vzc2luZyBsb2FkZXJEYXRhIGZvclxuICogcGFyZW50L2NoaWxkIHJvdXRlcyBvciB0aGUgcm91dGUgXCJoYW5kbGVcIiBwcm9wZXJ0eVxuICovXG5mdW5jdGlvbiB1c2VNYXRjaGVzKCkge1xuICBsZXQge1xuICAgIG1hdGNoZXMsXG4gICAgbG9hZGVyRGF0YVxuICB9ID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTWF0Y2hlcyk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IG1hdGNoZXMubWFwKG1hdGNoID0+IHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gbWF0Y2g7XG4gICAgLy8gTm90ZTogVGhpcyBzdHJ1Y3R1cmUgbWF0Y2hlcyB0aGF0IGNyZWF0ZWQgYnkgY3JlYXRlVXNlTWF0Y2hlc01hdGNoXG4gICAgLy8gaW4gdGhlIEByZW1peC1ydW4vcm91dGVyICwgc28gaWYgeW91IGNoYW5nZSB0aGlzIHBsZWFzZSBhbHNvIGNoYW5nZVxuICAgIC8vIHRoYXQgOikgIEV2ZW50dWFsbHkgd2UnbGwgRFJZIHRoaXMgdXBcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IG1hdGNoLnJvdXRlLmlkLFxuICAgICAgcGF0aG5hbWUsXG4gICAgICBwYXJhbXMsXG4gICAgICBkYXRhOiBsb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSxcbiAgICAgIGhhbmRsZTogbWF0Y2gucm91dGUuaGFuZGxlXG4gICAgfTtcbiAgfSksIFttYXRjaGVzLCBsb2FkZXJEYXRhXSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbG9hZGVyIGRhdGEgZm9yIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGxvYWRlclxuICovXG5mdW5jdGlvbiB1c2VMb2FkZXJEYXRhKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcbiAgbGV0IHJvdXRlSWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZUxvYWRlckRhdGEpO1xuICBpZiAoc3RhdGUuZXJyb3JzICYmIHN0YXRlLmVycm9yc1tyb3V0ZUlkXSAhPSBudWxsKSB7XG4gICAgY29uc29sZS5lcnJvcihcIllvdSBjYW5ub3QgYHVzZUxvYWRlckRhdGFgIGluIGFuIGVycm9yRWxlbWVudCAocm91dGVJZDogXCIgKyByb3V0ZUlkICsgXCIpXCIpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLmxvYWRlckRhdGFbcm91dGVJZF07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbG9hZGVyRGF0YSBmb3IgdGhlIGdpdmVuIHJvdXRlSWRcbiAqL1xuZnVuY3Rpb24gdXNlUm91dGVMb2FkZXJEYXRhKHJvdXRlSWQpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVMb2FkZXJEYXRhKTtcbiAgcmV0dXJuIHN0YXRlLmxvYWRlckRhdGFbcm91dGVJZF07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aW9uIGRhdGEgZm9yIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGFjdGlvblxuICovXG5mdW5jdGlvbiB1c2VBY3Rpb25EYXRhKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VBY3Rpb25EYXRhKTtcbiAgbGV0IHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICAhcm91dGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUFjdGlvbkRhdGEgbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dFwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gT2JqZWN0LnZhbHVlcygoc3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IHN0YXRlLmFjdGlvbkRhdGEpIHx8IHt9KVswXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGVycm9yLCB3aGljaCBjb3VsZCBiZSBhIGxvYWRlci9hY3Rpb25cbiAqIGVycm9yIG9yIGEgcmVuZGVyIGVycm9yLiAgVGhpcyBpcyBpbnRlbmRlZCB0byBiZSBjYWxsZWQgZnJvbSB5b3VyXG4gKiBFcnJvckJvdW5kYXJ5L2Vycm9yRWxlbWVudCB0byBkaXNwbGF5IGEgcHJvcGVyIGVycm9yIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIHVzZVJvdXRlRXJyb3IoKSB7XG4gIHZhciBfc3RhdGUkZXJyb3JzO1xuICBsZXQgZXJyb3IgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlRXJyb3JDb250ZXh0KTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVFcnJvcik7XG4gIGxldCByb3V0ZUlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUVycm9yKTtcblxuICAvLyBJZiB0aGlzIHdhcyBhIHJlbmRlciBlcnJvciwgd2UgcHV0IGl0IGluIGEgUm91dGVFcnJvciBjb250ZXh0IGluc2lkZVxuICAvLyBvZiBSZW5kZXJFcnJvckJvdW5kYXJ5XG4gIGlmIChlcnJvcikge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuXG4gIC8vIE90aGVyd2lzZSBsb29rIGZvciBlcnJvcnMgZnJvbSBvdXIgZGF0YSByb3V0ZXIgc3RhdGVcbiAgcmV0dXJuIChfc3RhdGUkZXJyb3JzID0gc3RhdGUuZXJyb3JzKSA9PSBudWxsID8gdm9pZCAwIDogX3N0YXRlJGVycm9yc1tyb3V0ZUlkXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBoYXBweS1wYXRoIGRhdGEgZnJvbSB0aGUgbmVhcmVzdCBhbmNlc3RvciA8QXdhaXQgLz4gdmFsdWVcbiAqL1xuZnVuY3Rpb24gdXNlQXN5bmNWYWx1ZSgpIHtcbiAgbGV0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChBd2FpdENvbnRleHQpO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLl9kYXRhO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVycm9yIGZyb20gdGhlIG5lYXJlc3QgYW5jZXN0b3IgPEF3YWl0IC8+IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHVzZUFzeW5jRXJyb3IoKSB7XG4gIGxldCB2YWx1ZSA9IFJlYWN0LnVzZUNvbnRleHQoQXdhaXRDb250ZXh0KTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB2b2lkIDAgOiB2YWx1ZS5fZXJyb3I7XG59XG5sZXQgYmxvY2tlcklkID0gMDtcblxuLyoqXG4gKiBBbGxvdyB0aGUgYXBwbGljYXRpb24gdG8gYmxvY2sgbmF2aWdhdGlvbnMgd2l0aGluIHRoZSBTUEEgYW5kIHByZXNlbnQgdGhlXG4gKiB1c2VyIGEgY29uZmlybWF0aW9uIGRpYWxvZyB0byBjb25maXJtIHRoZSBuYXZpZ2F0aW9uLiAgTW9zdGx5IHVzZWQgdG8gYXZvaWRcbiAqIHVzaW5nIGhhbGYtZmlsbGVkIGZvcm0gZGF0YS4gIFRoaXMgZG9lcyBub3QgaGFuZGxlIGhhcmQtcmVsb2FkcyBvclxuICogY3Jvc3Mtb3JpZ2luIG5hdmlnYXRpb25zLlxuICovXG5mdW5jdGlvbiB1c2VCbG9ja2VyKHNob3VsZEJsb2NrKSB7XG4gIGxldCB7XG4gICAgcm91dGVyLFxuICAgIGJhc2VuYW1lXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VCbG9ja2VyKTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlQmxvY2tlcik7XG4gIGxldCBbYmxvY2tlcktleSwgc2V0QmxvY2tlcktleV0gPSBSZWFjdC51c2VTdGF0ZShcIlwiKTtcbiAgbGV0IGJsb2NrZXJGdW5jdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrKGFyZyA9PiB7XG4gICAgaWYgKHR5cGVvZiBzaG91bGRCbG9jayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm4gISFzaG91bGRCbG9jaztcbiAgICB9XG4gICAgaWYgKGJhc2VuYW1lID09PSBcIi9cIikge1xuICAgICAgcmV0dXJuIHNob3VsZEJsb2NrKGFyZyk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhleSBwcm92aWRlZCB1cyBhIGZ1bmN0aW9uIGFuZCB3ZSd2ZSBnb3QgYW4gYWN0aXZlIGJhc2VuYW1lLCBzdHJpcFxuICAgIC8vIGl0IGZyb20gdGhlIGxvY2F0aW9ucyB3ZSBleHBvc2UgdG8gdGhlIHVzZXIgdG8gbWF0Y2ggdGhlIGJlaGF2aW9yIG9mXG4gICAgLy8gdXNlTG9jYXRpb25cbiAgICBsZXQge1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0gPSBhcmc7XG4gICAgcmV0dXJuIHNob3VsZEJsb2NrKHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbjogX2V4dGVuZHMoe30sIGN1cnJlbnRMb2NhdGlvbiwge1xuICAgICAgICBwYXRobmFtZTogc3RyaXBCYXNlbmFtZShjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUsIGJhc2VuYW1lKSB8fCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pLFxuICAgICAgbmV4dExvY2F0aW9uOiBfZXh0ZW5kcyh7fSwgbmV4dExvY2F0aW9uLCB7XG4gICAgICAgIHBhdGhuYW1lOiBzdHJpcEJhc2VuYW1lKG5leHRMb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IG5leHRMb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSksXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSk7XG4gIH0sIFtiYXNlbmFtZSwgc2hvdWxkQmxvY2tdKTtcblxuICAvLyBUaGlzIGVmZmVjdCBpcyBpbiBjaGFyZ2Ugb2YgYmxvY2tlciBrZXkgYXNzaWdubWVudCBhbmQgZGVsZXRpb24gKHdoaWNoIGlzXG4gIC8vIHRpZ2h0bHkgY291cGxlZCB0byB0aGUga2V5KVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBrZXkgPSBTdHJpbmcoKytibG9ja2VySWQpO1xuICAgIHNldEJsb2NrZXJLZXkoa2V5KTtcbiAgICByZXR1cm4gKCkgPT4gcm91dGVyLmRlbGV0ZUJsb2NrZXIoa2V5KTtcbiAgfSwgW3JvdXRlcl0pO1xuXG4gIC8vIFRoaXMgZWZmZWN0IGhhbmRsZXMgYXNzaWduaW5nIHRoZSBibG9ja2VyRnVuY3Rpb24uICBUaGlzIGlzIHRvIGhhbmRsZVxuICAvLyB1bnN0YWJsZSBibG9ja2VyIGZ1bmN0aW9uIGlkZW50aXRpZXMsIGFuZCBoYXBwZW5zIG9ubHkgYWZ0ZXIgdGhlIHByaW9yXG4gIC8vIGVmZmVjdCBzbyB3ZSBkb24ndCBnZXQgYW4gb3JwaGFuZWQgYmxvY2tlckZ1bmN0aW9uIGluIHRoZSByb3V0ZXIgd2l0aCBhXG4gIC8vIGtleSBvZiBcIlwiLiAgVW50aWwgdGhlbiB3ZSBqdXN0IGhhdmUgdGhlIElETEVfQkxPQ0tFUi5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYmxvY2tlcktleSAhPT0gXCJcIikge1xuICAgICAgcm91dGVyLmdldEJsb2NrZXIoYmxvY2tlcktleSwgYmxvY2tlckZ1bmN0aW9uKTtcbiAgICB9XG4gIH0sIFtyb3V0ZXIsIGJsb2NrZXJLZXksIGJsb2NrZXJGdW5jdGlvbl0pO1xuXG4gIC8vIFByZWZlciB0aGUgYmxvY2tlciBmcm9tIGBzdGF0ZWAgbm90IGByb3V0ZXIuc3RhdGVgIHNpbmNlIERhdGFSb3V0ZXJDb250ZXh0XG4gIC8vIGlzIG1lbW9pemVkIHNvIHRoaXMgZW5zdXJlcyB3ZSB1cGRhdGUgb24gYmxvY2tlciBzdGF0ZSB1cGRhdGVzXG4gIHJldHVybiBibG9ja2VyS2V5ICYmIHN0YXRlLmJsb2NrZXJzLmhhcyhibG9ja2VyS2V5KSA/IHN0YXRlLmJsb2NrZXJzLmdldChibG9ja2VyS2V5KSA6IElETEVfQkxPQ0tFUjtcbn1cblxuLyoqXG4gKiBTdGFibGUgdmVyc2lvbiBvZiB1c2VOYXZpZ2F0ZSB0aGF0IGlzIHVzZWQgd2hlbiB3ZSBhcmUgaW4gdGhlIGNvbnRleHQgb2ZcbiAqIGEgUm91dGVyUHJvdmlkZXIuXG4gKi9cbmZ1bmN0aW9uIHVzZU5hdmlnYXRlU3RhYmxlKCkge1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlTmF2aWdhdGVTdGFibGUpO1xuICBsZXQgaWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZU5hdmlnYXRlU3RhYmxlKTtcbiAgbGV0IGFjdGl2ZVJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGFjdGl2ZVJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgfSk7XG4gIGxldCBuYXZpZ2F0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICh0bywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoYWN0aXZlUmVmLmN1cnJlbnQsIG5hdmlnYXRlRWZmZWN0V2FybmluZykgOiB2b2lkIDA7XG5cbiAgICAvLyBTaG9ydCBjaXJjdWl0IGhlcmUgc2luY2UgaWYgdGhpcyBoYXBwZW5zIG9uIGZpcnN0IHJlbmRlciB0aGUgbmF2aWdhdGVcbiAgICAvLyBpcyB1c2VsZXNzIGJlY2F1c2Ugd2UgaGF2ZW4ndCB3aXJlZCB1cCBvdXIgcm91dGVyIHN1YnNjcmliZXIgeWV0XG4gICAgaWYgKCFhY3RpdmVSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJvdXRlci5uYXZpZ2F0ZSh0byk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvdXRlci5uYXZpZ2F0ZSh0bywgX2V4dGVuZHMoe1xuICAgICAgICBmcm9tUm91dGVJZDogaWRcbiAgICAgIH0sIG9wdGlvbnMpKTtcbiAgICB9XG4gIH0sIFtyb3V0ZXIsIGlkXSk7XG4gIHJldHVybiBuYXZpZ2F0ZTtcbn1cbmNvbnN0IGFscmVhZHlXYXJuZWQgPSB7fTtcbmZ1bmN0aW9uIHdhcm5pbmdPbmNlKGtleSwgY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQgJiYgIWFscmVhZHlXYXJuZWRba2V5XSkge1xuICAgIGFscmVhZHlXYXJuZWRba2V5XSA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIG1lc3NhZ2UpIDogdm9pZCAwO1xuICB9XG59XG5cbi8qKlxuICBXZWJwYWNrICsgUmVhY3QgMTcgZmFpbHMgdG8gY29tcGlsZSBvbiBhbnkgb2YgdGhlIGZvbGxvd2luZyBiZWNhdXNlIHdlYnBhY2tcbiAgY29tcGxhaW5zIHRoYXQgYHN0YXJ0VHJhbnNpdGlvbmAgZG9lc24ndCBleGlzdCBpbiBgUmVhY3RgOlxuICAqIGltcG9ydCB7IHN0YXJ0VHJhbnNpdGlvbiB9IGZyb20gXCJyZWFjdFwiXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3Quc3RhcnRUcmFuc2l0aW9uKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuICAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gZnJvbSBcInJlYWN0XCI7XG4gICAgXCJzdGFydFRyYW5zaXRpb25cIiBpbiBSZWFjdCA/IFJlYWN0W1wic3RhcnRUcmFuc2l0aW9uXCJdKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuXG4gIE1vdmluZyBpdCB0byBhIGNvbnN0YW50IHN1Y2ggYXMgdGhlIGZvbGxvd2luZyBzb2x2ZXMgdGhlIFdlYnBhY2svUmVhY3QgMTcgaXNzdWU6XG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBjb25zdCBTVEFSVF9UUkFOU0lUSU9OID0gXCJzdGFydFRyYW5zaXRpb25cIjtcbiAgICBTVEFSVF9UUkFOU0lUSU9OIGluIFJlYWN0ID8gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgSG93ZXZlciwgdGhhdCBpbnRyb2R1Y2VzIHdlYnBhY2svdGVyc2VyIG1pbmlmaWNhdGlvbiBpc3N1ZXMgaW4gcHJvZHVjdGlvbiBidWlsZHNcbiAgaW4gUmVhY3QgMTggd2hlcmUgbWluaWZpY2F0aW9uL29iZnVzY2F0aW9uIGVuZHMgdXAgcmVtb3ZpbmcgdGhlIGNhbGwgb2ZcbiAgUmVhY3Quc3RhcnRUcmFuc2l0aW9uIGVudGlyZWx5IGZyb20gdGhlIGZpcnN0IGhhbGYgb2YgdGhlIHRlcm5hcnkuICBHcmFiYmluZ1xuICB0aGlzIGV4cG9ydGVkIHJlZmVyZW5jZSBvbmNlIHVwIGZyb250IHJlc29sdmVzIHRoYXQgaXNzdWUuXG5cbiAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVhY3Qtcm91dGVyL2lzc3Vlcy8xMDU3OVxuKi9cbmNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuY29uc3Qgc3RhcnRUcmFuc2l0aW9uSW1wbCA9IFJlYWN0W1NUQVJUX1RSQU5TSVRJT05dO1xuXG4vKipcbiAqIEdpdmVuIGEgUmVtaXggUm91dGVyIGluc3RhbmNlLCByZW5kZXIgdGhlIGFwcHJvcHJpYXRlIFVJXG4gKi9cbmZ1bmN0aW9uIFJvdXRlclByb3ZpZGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBmYWxsYmFja0VsZW1lbnQsXG4gICAgcm91dGVyLFxuICAgIGZ1dHVyZVxuICB9ID0gX3JlZjtcbiAgLy8gTmVlZCB0byB1c2UgYSBsYXlvdXQgZWZmZWN0IGhlcmUgc28gd2UgYXJlIHN1YnNjcmliZWQgZWFybHkgZW5vdWdoIHRvXG4gIC8vIHBpY2sgdXAgb24gYW55IHJlbmRlci1kcml2ZW4gcmVkaXJlY3RzL25hdmlnYXRpb25zICh1c2VFZmZlY3QvPE5hdmlnYXRlPilcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHJvdXRlci5zdGF0ZSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSkgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHJvdXRlci5zdWJzY3JpYmUoc2V0U3RhdGUpLCBbcm91dGVyLCBzZXRTdGF0ZV0pO1xuICBsZXQgbmF2aWdhdG9yID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNyZWF0ZUhyZWY6IHJvdXRlci5jcmVhdGVIcmVmLFxuICAgICAgZW5jb2RlTG9jYXRpb246IHJvdXRlci5lbmNvZGVMb2NhdGlvbixcbiAgICAgIGdvOiBuID0+IHJvdXRlci5uYXZpZ2F0ZShuKSxcbiAgICAgIHB1c2g6ICh0bywgc3RhdGUsIG9wdHMpID0+IHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSksXG4gICAgICByZXBsYWNlOiAodG8sIHN0YXRlLCBvcHRzKSA9PiByb3V0ZXIubmF2aWdhdGUodG8sIHtcbiAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pXG4gICAgfTtcbiAgfSwgW3JvdXRlcl0pO1xuICBsZXQgYmFzZW5hbWUgPSByb3V0ZXIuYmFzZW5hbWUgfHwgXCIvXCI7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICByb3V0ZXIsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogZmFsc2UsXG4gICAgYmFzZW5hbWVcbiAgfSksIFtyb3V0ZXIsIG5hdmlnYXRvciwgYmFzZW5hbWVdKTtcblxuICAvLyBUaGUgZnJhZ21lbnQgYW5kIHtudWxsfSBoZXJlIGFyZSBpbXBvcnRhbnQhICBXZSBuZWVkIHRoZW0gdG8ga2VlcCBSZWFjdCAxOCdzXG4gIC8vIHVzZUlkIGhhcHB5IHdoZW4gd2UgYXJlIHNlcnZlci1yZW5kZXJpbmcgc2luY2Ugd2UgbWF5IGhhdmUgYSA8c2NyaXB0PiBoZXJlXG4gIC8vIGNvbnRhaW5pbmcgdGhlIGh5ZHJhdGVkIHNlcnZlci1zaWRlIHN0YXRpY0NvbnRleHQgKGZyb20gU3RhdGljUm91dGVyUHJvdmlkZXIpLlxuICAvLyB1c2VJZCByZWxpZXMgb24gdGhlIGNvbXBvbmVudCB0cmVlIHN0cnVjdHVyZSB0byBnZW5lcmF0ZSBkZXRlcm1pbmlzdGljIGlkJ3NcbiAgLy8gc28gd2UgbmVlZCB0byBlbnN1cmUgaXQgcmVtYWlucyB0aGUgc2FtZSBvbiB0aGUgY2xpZW50IGV2ZW4gdGhvdWdoXG4gIC8vIHdlIGRvbid0IG5lZWQgdGhlIDxzY3JpcHQ+IHRhZ1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGRhdGFSb3V0ZXJDb250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogc3RhdGVcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuaGlzdG9yeUFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IG5hdmlnYXRvclxuICB9LCBzdGF0ZS5pbml0aWFsaXplZCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXMsIHtcbiAgICByb3V0ZXM6IHJvdXRlci5yb3V0ZXMsXG4gICAgc3RhdGU6IHN0YXRlXG4gIH0pIDogZmFsbGJhY2tFbGVtZW50KSkpLCBudWxsKTtcbn1cbmZ1bmN0aW9uIERhdGFSb3V0ZXMoX3JlZjIpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXMsXG4gICAgc3RhdGVcbiAgfSA9IF9yZWYyO1xuICByZXR1cm4gdXNlUm91dGVzSW1wbChyb3V0ZXMsIHVuZGVmaW5lZCwgc3RhdGUpO1xufVxuLyoqXG4gKiBBIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGFsbCBlbnRyaWVzIGluIG1lbW9yeS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlci1jb21wb25lbnRzL21lbW9yeS1yb3V0ZXJcbiAqL1xuZnVuY3Rpb24gTWVtb3J5Um91dGVyKF9yZWYzKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgaW5pdGlhbEVudHJpZXMsXG4gICAgaW5pdGlhbEluZGV4LFxuICAgIGZ1dHVyZVxuICB9ID0gX3JlZjM7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXgsXG4gICAgICB2NUNvbXBhdDogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSkgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnksIHNldFN0YXRlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cbi8qKlxuICogQ2hhbmdlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBOb3RlOiBUaGlzIEFQSSBpcyBtb3N0bHkgdXNlZnVsIGluIFJlYWN0LkNvbXBvbmVudCBzdWJjbGFzc2VzIHRoYXQgYXJlIG5vdFxuICogYWJsZSB0byB1c2UgaG9va3MuIEluIGZ1bmN0aW9uYWwgY29tcG9uZW50cywgd2UgcmVjb21tZW5kIHlvdSB1c2UgdGhlXG4gKiBgdXNlTmF2aWdhdGVgIGhvb2sgaW5zdGVhZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gTmF2aWdhdGUoX3JlZjQpIHtcbiAgbGV0IHtcbiAgICB0byxcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHJlbGF0aXZlXG4gIH0gPSBfcmVmNDtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2ZcbiAgLy8gdGhlIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCI8TmF2aWdhdGU+IG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKCFSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KS5zdGF0aWMsIFwiPE5hdmlnYXRlPiBtdXN0IG5vdCBiZSB1c2VkIG9uIHRoZSBpbml0aWFsIHJlbmRlciBpbiBhIDxTdGF0aWNSb3V0ZXI+LiBcIiArIFwiVGhpcyBpcyBhIG5vLW9wLCBidXQgeW91IHNob3VsZCBtb2RpZnkgeW91ciBjb2RlIHNvIHRoZSA8TmF2aWdhdGU+IGlzIFwiICsgXCJvbmx5IGV2ZXIgcmVuZGVyZWQgaW4gcmVzcG9uc2UgdG8gc29tZSB1c2VyIGludGVyYWN0aW9uIG9yIHN0YXRlIGNoYW5nZS5cIikgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuXG4gIC8vIFJlc29sdmUgdGhlIHBhdGggb3V0c2lkZSBvZiB0aGUgZWZmZWN0IHNvIHRoYXQgd2hlbiBlZmZlY3RzIHJ1biB0d2ljZSBpblxuICAvLyBTdHJpY3RNb2RlIHRoZXkgbmF2aWdhdGUgdG8gdGhlIHNhbWUgcGxhY2VcbiAgbGV0IHBhdGggPSByZXNvbHZlVG8odG8sIFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKS5tYXAobWF0Y2ggPT4gbWF0Y2gucGF0aG5hbWVCYXNlKSwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmUgPT09IFwicGF0aFwiKTtcbiAgbGV0IGpzb25QYXRoID0gSlNPTi5zdHJpbmdpZnkocGF0aCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiBuYXZpZ2F0ZShKU09OLnBhcnNlKGpzb25QYXRoKSwge1xuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgcmVsYXRpdmVcbiAgfSksIFtuYXZpZ2F0ZSwganNvblBhdGgsIHJlbGF0aXZlLCByZXBsYWNlLCBzdGF0ZV0pO1xuICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogUmVuZGVycyB0aGUgY2hpbGQgcm91dGUncyBlbGVtZW50LCBpZiB0aGVyZSBpcyBvbmUuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL291dGxldFxuICovXG5mdW5jdGlvbiBPdXRsZXQocHJvcHMpIHtcbiAgcmV0dXJuIHVzZU91dGxldChwcm9wcy5jb250ZXh0KTtcbn1cbi8qKlxuICogRGVjbGFyZXMgYW4gZWxlbWVudCB0aGF0IHNob3VsZCBiZSByZW5kZXJlZCBhdCBhIGNlcnRhaW4gVVJMIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL3JvdXRlXG4gKi9cbmZ1bmN0aW9uIFJvdXRlKF9wcm9wcykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIkEgPFJvdXRlPiBpcyBvbmx5IGV2ZXIgdG8gYmUgdXNlZCBhcyB0aGUgY2hpbGQgb2YgPFJvdXRlcz4gZWxlbWVudCwgXCIgKyBcIm5ldmVyIHJlbmRlcmVkIGRpcmVjdGx5LiBQbGVhc2Ugd3JhcCB5b3VyIDxSb3V0ZT4gaW4gYSA8Um91dGVzPi5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA7XG59XG4vKipcbiAqIFByb3ZpZGVzIGxvY2F0aW9uIGNvbnRleHQgZm9yIHRoZSByZXN0IG9mIHRoZSBhcHAuXG4gKlxuICogTm90ZTogWW91IHVzdWFsbHkgd29uJ3QgcmVuZGVyIGEgPFJvdXRlcj4gZGlyZWN0bHkuIEluc3RlYWQsIHlvdSdsbCByZW5kZXIgYVxuICogcm91dGVyIHRoYXQgaXMgbW9yZSBzcGVjaWZpYyB0byB5b3VyIGVudmlyb25tZW50IHN1Y2ggYXMgYSA8QnJvd3NlclJvdXRlcj5cbiAqIGluIHdlYiBicm93c2VycyBvciBhIDxTdGF0aWNSb3V0ZXI+IGZvciBzZXJ2ZXIgcmVuZGVyaW5nLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVyLWNvbXBvbmVudHMvcm91dGVyXG4gKi9cbmZ1bmN0aW9uIFJvdXRlcihfcmVmNSkge1xuICBsZXQge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZVByb3AgPSBcIi9cIixcbiAgICBjaGlsZHJlbiA9IG51bGwsXG4gICAgbG9jYXRpb246IGxvY2F0aW9uUHJvcCxcbiAgICBuYXZpZ2F0aW9uVHlwZSA9IEFjdGlvbi5Qb3AsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogc3RhdGljUHJvcCA9IGZhbHNlXG4gIH0gPSBfcmVmNTtcbiAgISF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCByZW5kZXIgYSA8Um91dGVyPiBpbnNpZGUgYW5vdGhlciA8Um91dGVyPi5cIiArIFwiIFlvdSBzaG91bGQgbmV2ZXIgaGF2ZSBtb3JlIHRoYW4gb25lIGluIHlvdXIgYXBwLlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIC8vIFByZXNlcnZlIHRyYWlsaW5nIHNsYXNoZXMgb24gYmFzZW5hbWUsIHNvIHdlIGNhbiBsZXQgdGhlIHVzZXIgY29udHJvbFxuICAvLyB0aGUgZW5mb3JjZW1lbnQgb2YgdHJhaWxpbmcgc2xhc2hlcyB0aHJvdWdob3V0IHRoZSBhcHBcbiAgbGV0IGJhc2VuYW1lID0gYmFzZW5hbWVQcm9wLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpO1xuICBsZXQgbmF2aWdhdGlvbkNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogc3RhdGljUHJvcFxuICB9KSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHN0YXRpY1Byb3BdKTtcbiAgaWYgKHR5cGVvZiBsb2NhdGlvblByb3AgPT09IFwic3RyaW5nXCIpIHtcbiAgICBsb2NhdGlvblByb3AgPSBwYXJzZVBhdGgobG9jYXRpb25Qcm9wKTtcbiAgfVxuICBsZXQge1xuICAgIHBhdGhuYW1lID0gXCIvXCIsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIixcbiAgICBzdGF0ZSA9IG51bGwsXG4gICAga2V5ID0gXCJkZWZhdWx0XCJcbiAgfSA9IGxvY2F0aW9uUHJvcDtcbiAgbGV0IGxvY2F0aW9uQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGxldCB0cmFpbGluZ1BhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShwYXRobmFtZSwgYmFzZW5hbWUpO1xuICAgIGlmICh0cmFpbGluZ1BhdGhuYW1lID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgbG9jYXRpb246IHtcbiAgICAgICAgcGF0aG5hbWU6IHRyYWlsaW5nUGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCxcbiAgICAgICAgaGFzaCxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIGtleVxuICAgICAgfSxcbiAgICAgIG5hdmlnYXRpb25UeXBlXG4gICAgfTtcbiAgfSwgW2Jhc2VuYW1lLCBwYXRobmFtZSwgc2VhcmNoLCBoYXNoLCBzdGF0ZSwga2V5LCBuYXZpZ2F0aW9uVHlwZV0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhsb2NhdGlvbkNvbnRleHQgIT0gbnVsbCwgXCI8Um91dGVyIGJhc2VuYW1lPVxcXCJcIiArIGJhc2VuYW1lICsgXCJcXFwiPiBpcyBub3QgYWJsZSB0byBtYXRjaCB0aGUgVVJMIFwiICsgKFwiXFxcIlwiICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoICsgXCJcXFwiIGJlY2F1c2UgaXQgZG9lcyBub3Qgc3RhcnQgd2l0aCB0aGUgXCIpICsgXCJiYXNlbmFtZSwgc28gdGhlIDxSb3V0ZXI+IHdvbid0IHJlbmRlciBhbnl0aGluZy5cIikgOiB2b2lkIDA7XG4gIGlmIChsb2NhdGlvbkNvbnRleHQgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChOYXZpZ2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBuYXZpZ2F0aW9uQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMb2NhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgdmFsdWU6IGxvY2F0aW9uQ29udGV4dFxuICB9KSk7XG59XG4vKipcbiAqIEEgY29udGFpbmVyIGZvciBhIG5lc3RlZCB0cmVlIG9mIDxSb3V0ZT4gZWxlbWVudHMgdGhhdCByZW5kZXJzIHRoZSBicmFuY2hcbiAqIHRoYXQgYmVzdCBtYXRjaGVzIHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vY29tcG9uZW50cy9yb3V0ZXNcbiAqL1xuZnVuY3Rpb24gUm91dGVzKF9yZWY2KSB7XG4gIGxldCB7XG4gICAgY2hpbGRyZW4sXG4gICAgbG9jYXRpb25cbiAgfSA9IF9yZWY2O1xuICByZXR1cm4gdXNlUm91dGVzKGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihjaGlsZHJlbiksIGxvY2F0aW9uKTtcbn1cbi8qKlxuICogQ29tcG9uZW50IHRvIHVzZSBmb3IgcmVuZGVyaW5nIGxhemlseSBsb2FkZWQgZGF0YSBmcm9tIHJldHVybmluZyBkZWZlcigpXG4gKiBpbiBhIGxvYWRlciBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBBd2FpdChfcmVmNykge1xuICBsZXQge1xuICAgIGNoaWxkcmVuLFxuICAgIGVycm9yRWxlbWVudCxcbiAgICByZXNvbHZlXG4gIH0gPSBfcmVmNztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEF3YWl0RXJyb3JCb3VuZGFyeSwge1xuICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgZXJyb3JFbGVtZW50OiBlcnJvckVsZW1lbnRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVzb2x2ZUF3YWl0LCBudWxsLCBjaGlsZHJlbikpO1xufVxudmFyIEF3YWl0UmVuZGVyU3RhdHVzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChBd2FpdFJlbmRlclN0YXR1cykge1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcInBlbmRpbmdcIl0gPSAwXSA9IFwicGVuZGluZ1wiO1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcInN1Y2Nlc3NcIl0gPSAxXSA9IFwic3VjY2Vzc1wiO1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcImVycm9yXCJdID0gMl0gPSBcImVycm9yXCI7XG4gIHJldHVybiBBd2FpdFJlbmRlclN0YXR1cztcbn0oQXdhaXRSZW5kZXJTdGF0dXMgfHwge30pO1xuY29uc3QgbmV2ZXJTZXR0bGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKCgpID0+IHt9KTtcbmNsYXNzIEF3YWl0RXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBlcnJvcjogbnVsbFxuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvclxuICAgIH07XG4gIH1cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGVycm9ySW5mbykge1xuICAgIGNvbnNvbGUuZXJyb3IoXCI8QXdhaXQ+IGNhdWdodCB0aGUgZm9sbG93aW5nIGVycm9yIGR1cmluZyByZW5kZXJcIiwgZXJyb3IsIGVycm9ySW5mbyk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGxldCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGVycm9yRWxlbWVudCxcbiAgICAgIHJlc29sdmVcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBsZXQgcHJvbWlzZSA9IG51bGw7XG4gICAgbGV0IHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7XG4gICAgaWYgKCEocmVzb2x2ZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICAvLyBEaWRuJ3QgZ2V0IGEgcHJvbWlzZSAtIHByb3ZpZGUgYXMgYSByZXNvbHZlZCBwcm9taXNlXG4gICAgICBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2RhdGFcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHJlc29sdmVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5lcnJvcikge1xuICAgICAgLy8gQ2F1Z2h0IGEgcmVuZGVyIGVycm9yLCBwcm92aWRlIGl0IGFzIGEgcmVqZWN0ZWQgcHJvbWlzZVxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3I7XG4gICAgICBsZXQgcmVuZGVyRXJyb3IgPSB0aGlzLnN0YXRlLmVycm9yO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVqZWN0KCkuY2F0Y2goKCkgPT4ge30pOyAvLyBBdm9pZCB1bmhhbmRsZWQgcmVqZWN0aW9uIHdhcm5pbmdzXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfdHJhY2tlZFwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gdHJ1ZVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHJlbmRlckVycm9yXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHJlc29sdmUuX3RyYWNrZWQpIHtcbiAgICAgIC8vIEFscmVhZHkgdHJhY2tlZCBwcm9taXNlIC0gY2hlY2sgY29udGVudHNcbiAgICAgIHByb21pc2UgPSByZXNvbHZlO1xuICAgICAgc3RhdHVzID0gcHJvbWlzZS5fZXJyb3IgIT09IHVuZGVmaW5lZCA/IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yIDogcHJvbWlzZS5fZGF0YSAhPT0gdW5kZWZpbmVkID8gQXdhaXRSZW5kZXJTdGF0dXMuc3VjY2VzcyA6IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJhdyAodW50cmFja2VkKSBwcm9taXNlIC0gdHJhY2sgaXRcbiAgICAgIHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfdHJhY2tlZFwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gdHJ1ZVxuICAgICAgfSk7XG4gICAgICBwcm9taXNlID0gcmVzb2x2ZS50aGVuKGRhdGEgPT4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc29sdmUsIFwiX2RhdGFcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGRhdGFcbiAgICAgIH0pLCBlcnJvciA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGVycm9yXG4gICAgICB9KSk7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yICYmIHByb21pc2UuX2Vycm9yIGluc3RhbmNlb2YgQWJvcnRlZERlZmVycmVkRXJyb3IpIHtcbiAgICAgIC8vIEZyZWV6ZSB0aGUgVUkgYnkgdGhyb3dpbmcgYSBuZXZlciByZXNvbHZlZCBwcm9taXNlXG4gICAgICB0aHJvdyBuZXZlclNldHRsZWRQcm9taXNlO1xuICAgIH1cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvciAmJiAhZXJyb3JFbGVtZW50KSB7XG4gICAgICAvLyBObyBlcnJvckVsZW1lbnQsIHRocm93IHRvIHRoZSBuZWFyZXN0IHJvdXRlLWxldmVsIGVycm9yIGJvdW5kYXJ5XG4gICAgICB0aHJvdyBwcm9taXNlLl9lcnJvcjtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IpIHtcbiAgICAgIC8vIFJlbmRlciB2aWEgb3VyIGVycm9yRWxlbWVudFxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEF3YWl0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvbWlzZSxcbiAgICAgICAgY2hpbGRyZW46IGVycm9yRWxlbWVudFxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLnN1Y2Nlc3MpIHtcbiAgICAgIC8vIFJlbmRlciBjaGlsZHJlbiB3aXRoIHJlc29sdmVkIHZhbHVlXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQXdhaXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9taXNlLFxuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFRocm93IHRvIHRoZSBzdXNwZW5zZSBib3VuZGFyeVxuICAgIHRocm93IHByb21pc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogSW5kaXJlY3Rpb24gdG8gbGV2ZXJhZ2UgdXNlQXN5bmNWYWx1ZSBmb3IgYSByZW5kZXItcHJvcCBBUEkgb24gPEF3YWl0PlxuICovXG5mdW5jdGlvbiBSZXNvbHZlQXdhaXQoX3JlZjgpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlblxuICB9ID0gX3JlZjg7XG4gIGxldCBkYXRhID0gdXNlQXN5bmNWYWx1ZSgpO1xuICBsZXQgdG9SZW5kZXIgPSB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IGNoaWxkcmVuKGRhdGEpIDogY2hpbGRyZW47XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgdG9SZW5kZXIpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBVVElMU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIENyZWF0ZXMgYSByb3V0ZSBjb25maWcgZnJvbSBhIFJlYWN0IFwiY2hpbGRyZW5cIiBvYmplY3QsIHdoaWNoIGlzIHVzdWFsbHlcbiAqIGVpdGhlciBhIGA8Um91dGU+YCBlbGVtZW50IG9yIGFuIGFycmF5IG9mIHRoZW0uIFVzZWQgaW50ZXJuYWxseSBieVxuICogYDxSb3V0ZXM+YCB0byBjcmVhdGUgYSByb3V0ZSBjb25maWcgZnJvbSBpdHMgY2hpbGRyZW4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9jcmVhdGUtcm91dGVzLWZyb20tY2hpbGRyZW5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuLCBwYXJlbnRQYXRoKSB7XG4gIGlmIChwYXJlbnRQYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRQYXRoID0gW107XG4gIH1cbiAgbGV0IHJvdXRlcyA9IFtdO1xuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCAoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgIC8vIElnbm9yZSBub24tZWxlbWVudHMuIFRoaXMgYWxsb3dzIHBlb3BsZSB0byBtb3JlIGVhc2lseSBpbmxpbmVcbiAgICAgIC8vIGNvbmRpdGlvbmFscyBpbiB0aGVpciByb3V0ZSBjb25maWcuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB0cmVlUGF0aCA9IFsuLi5wYXJlbnRQYXRoLCBpbmRleF07XG4gICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gUmVhY3QuRnJhZ21lbnQpIHtcbiAgICAgIC8vIFRyYW5zcGFyZW50bHkgc3VwcG9ydCBSZWFjdC5GcmFnbWVudCBhbmQgaXRzIGNoaWxkcmVuLlxuICAgICAgcm91dGVzLnB1c2guYXBwbHkocm91dGVzLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oZWxlbWVudC5wcm9wcy5jaGlsZHJlbiwgdHJlZVBhdGgpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgIShlbGVtZW50LnR5cGUgPT09IFJvdXRlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiW1wiICsgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09IFwic3RyaW5nXCIgPyBlbGVtZW50LnR5cGUgOiBlbGVtZW50LnR5cGUubmFtZSkgKyBcIl0gaXMgbm90IGEgPFJvdXRlPiBjb21wb25lbnQuIEFsbCBjb21wb25lbnQgY2hpbGRyZW4gb2YgPFJvdXRlcz4gbXVzdCBiZSBhIDxSb3V0ZT4gb3IgPFJlYWN0LkZyYWdtZW50PlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICEoIWVsZW1lbnQucHJvcHMuaW5kZXggfHwgIWVsZW1lbnQucHJvcHMuY2hpbGRyZW4pID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJBbiBpbmRleCByb3V0ZSBjYW5ub3QgaGF2ZSBjaGlsZCByb3V0ZXMuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgbGV0IHJvdXRlID0ge1xuICAgICAgaWQ6IGVsZW1lbnQucHJvcHMuaWQgfHwgdHJlZVBhdGguam9pbihcIi1cIiksXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBlbGVtZW50LnByb3BzLmNhc2VTZW5zaXRpdmUsXG4gICAgICBlbGVtZW50OiBlbGVtZW50LnByb3BzLmVsZW1lbnQsXG4gICAgICBDb21wb25lbnQ6IGVsZW1lbnQucHJvcHMuQ29tcG9uZW50LFxuICAgICAgaW5kZXg6IGVsZW1lbnQucHJvcHMuaW5kZXgsXG4gICAgICBwYXRoOiBlbGVtZW50LnByb3BzLnBhdGgsXG4gICAgICBsb2FkZXI6IGVsZW1lbnQucHJvcHMubG9hZGVyLFxuICAgICAgYWN0aW9uOiBlbGVtZW50LnByb3BzLmFjdGlvbixcbiAgICAgIGVycm9yRWxlbWVudDogZWxlbWVudC5wcm9wcy5lcnJvckVsZW1lbnQsXG4gICAgICBFcnJvckJvdW5kYXJ5OiBlbGVtZW50LnByb3BzLkVycm9yQm91bmRhcnksXG4gICAgICBoYXNFcnJvckJvdW5kYXJ5OiBlbGVtZW50LnByb3BzLkVycm9yQm91bmRhcnkgIT0gbnVsbCB8fCBlbGVtZW50LnByb3BzLmVycm9yRWxlbWVudCAhPSBudWxsLFxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZTogZWxlbWVudC5wcm9wcy5zaG91bGRSZXZhbGlkYXRlLFxuICAgICAgaGFuZGxlOiBlbGVtZW50LnByb3BzLmhhbmRsZSxcbiAgICAgIGxhenk6IGVsZW1lbnQucHJvcHMubGF6eVxuICAgIH07XG4gICAgaWYgKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgIHJvdXRlLmNoaWxkcmVuID0gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sIHRyZWVQYXRoKTtcbiAgICB9XG4gICAgcm91dGVzLnB1c2gocm91dGUpO1xuICB9KTtcbiAgcmV0dXJuIHJvdXRlcztcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSByZXN1bHQgb2YgYG1hdGNoUm91dGVzKClgIGludG8gYSBSZWFjdCBlbGVtZW50LlxuICovXG5mdW5jdGlvbiByZW5kZXJNYXRjaGVzKG1hdGNoZXMpIHtcbiAgcmV0dXJuIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMpO1xufVxuXG5mdW5jdGlvbiBtYXBSb3V0ZVByb3BlcnRpZXMocm91dGUpIHtcbiAgbGV0IHVwZGF0ZXMgPSB7XG4gICAgLy8gTm90ZTogdGhpcyBjaGVjayBhbHNvIG9jY3VycyBpbiBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4gc28gdXBkYXRlXG4gICAgLy8gdGhlcmUgaWYgeW91IGNoYW5nZSB0aGlzIC0tIHBsZWFzZSBhbmQgdGhhbmsgeW91IVxuICAgIGhhc0Vycm9yQm91bmRhcnk6IHJvdXRlLkVycm9yQm91bmRhcnkgIT0gbnVsbCB8fCByb3V0ZS5lcnJvckVsZW1lbnQgIT0gbnVsbFxuICB9O1xuICBpZiAocm91dGUuQ29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKHJvdXRlLmVsZW1lbnQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgaW5jbHVkZSBib3RoIGBDb21wb25lbnRgIGFuZCBgZWxlbWVudGAgb24geW91ciByb3V0ZSAtIFwiICsgXCJgQ29tcG9uZW50YCB3aWxsIGJlIHVzZWQuXCIpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHVwZGF0ZXMsIHtcbiAgICAgIGVsZW1lbnQ6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KHJvdXRlLkNvbXBvbmVudCksXG4gICAgICBDb21wb25lbnQ6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9XG4gIGlmIChyb3V0ZS5FcnJvckJvdW5kYXJ5KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKHJvdXRlLmVycm9yRWxlbWVudCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCBpbmNsdWRlIGJvdGggYEVycm9yQm91bmRhcnlgIGFuZCBgZXJyb3JFbGVtZW50YCBvbiB5b3VyIHJvdXRlIC0gXCIgKyBcImBFcnJvckJvdW5kYXJ5YCB3aWxsIGJlIHVzZWQuXCIpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHVwZGF0ZXMsIHtcbiAgICAgIGVycm9yRWxlbWVudDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQocm91dGUuRXJyb3JCb3VuZGFyeSksXG4gICAgICBFcnJvckJvdW5kYXJ5OiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdXBkYXRlcztcbn1cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeVJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgZnV0dXJlOiBfZXh0ZW5kcyh7fSwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mdXR1cmUsIHtcbiAgICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogdHJ1ZVxuICAgIH0pLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXM6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXg6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaW5pdGlhbEluZGV4XG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhLFxuICAgIHJvdXRlcyxcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXNcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufVxuXG5leHBvcnQgeyBBd2FpdCwgTWVtb3J5Um91dGVyLCBOYXZpZ2F0ZSwgT3V0bGV0LCBSb3V0ZSwgUm91dGVyLCBSb3V0ZXJQcm92aWRlciwgUm91dGVzLCBEYXRhUm91dGVyQ29udGV4dCBhcyBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQsIERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQgYXMgVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsIExvY2F0aW9uQ29udGV4dCBhcyBVTlNBRkVfTG9jYXRpb25Db250ZXh0LCBOYXZpZ2F0aW9uQ29udGV4dCBhcyBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIFJvdXRlQ29udGV4dCBhcyBVTlNBRkVfUm91dGVDb250ZXh0LCBtYXBSb3V0ZVByb3BlcnRpZXMgYXMgVU5TQUZFX21hcFJvdXRlUHJvcGVydGllcywgdXNlUm91dGVJZCBhcyBVTlNBRkVfdXNlUm91dGVJZCwgdXNlUm91dGVzSW1wbCBhcyBVTlNBRkVfdXNlUm91dGVzSW1wbCwgY3JlYXRlTWVtb3J5Um91dGVyLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4sIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiBhcyBjcmVhdGVSb3V0ZXNGcm9tRWxlbWVudHMsIHJlbmRlck1hdGNoZXMsIHVzZUJsb2NrZXIgYXMgdW5zdGFibGVfdXNlQmxvY2tlciwgdXNlQWN0aW9uRGF0YSwgdXNlQXN5bmNFcnJvciwgdXNlQXN5bmNWYWx1ZSwgdXNlSHJlZiwgdXNlSW5Sb3V0ZXJDb250ZXh0LCB1c2VMb2FkZXJEYXRhLCB1c2VMb2NhdGlvbiwgdXNlTWF0Y2gsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRlLCB1c2VOYXZpZ2F0aW9uLCB1c2VOYXZpZ2F0aW9uVHlwZSwgdXNlT3V0bGV0LCB1c2VPdXRsZXRDb250ZXh0LCB1c2VQYXJhbXMsIHVzZVJlc29sdmVkUGF0aCwgdXNlUmV2YWxpZGF0b3IsIHVzZVJvdXRlRXJyb3IsIHVzZVJvdXRlTG9hZGVyRGF0YSwgdXNlUm91dGVzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIi8qKlxuICogUmVhY3QgUm91dGVyIERPTSB2Ni4xNS4wXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFVOU0FGRV9tYXBSb3V0ZVByb3BlcnRpZXMsIFJvdXRlciwgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCB1c2VIcmVmLCB1c2VSZXNvbHZlZFBhdGgsIHVzZUxvY2F0aW9uLCBVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCwgdXNlTmF2aWdhdGUsIGNyZWF0ZVBhdGgsIFVOU0FGRV91c2VSb3V0ZUlkLCBVTlNBRkVfUm91dGVDb250ZXh0LCB1c2VNYXRjaGVzLCB1c2VOYXZpZ2F0aW9uLCB1bnN0YWJsZV91c2VCbG9ja2VyLCBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEF3YWl0LCBNZW1vcnlSb3V0ZXIsIE5hdmlnYXRlLCBOYXZpZ2F0aW9uVHlwZSwgT3V0bGV0LCBSb3V0ZSwgUm91dGVyLCBSb3V0ZXJQcm92aWRlciwgUm91dGVzLCBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQsIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LCBVTlNBRkVfTG9jYXRpb25Db250ZXh0LCBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIFVOU0FGRV91c2VSb3V0ZUlkLCBjcmVhdGVNZW1vcnlSb3V0ZXIsIGNyZWF0ZVBhdGgsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiwgY3JlYXRlUm91dGVzRnJvbUVsZW1lbnRzLCBkZWZlciwgZ2VuZXJhdGVQYXRoLCBpc1JvdXRlRXJyb3JSZXNwb25zZSwganNvbiwgbWF0Y2hQYXRoLCBtYXRjaFJvdXRlcywgcGFyc2VQYXRoLCByZWRpcmVjdCwgcmVkaXJlY3REb2N1bWVudCwgcmVuZGVyTWF0Y2hlcywgcmVzb2x2ZVBhdGgsIHVuc3RhYmxlX3VzZUJsb2NrZXIsIHVzZUFjdGlvbkRhdGEsIHVzZUFzeW5jRXJyb3IsIHVzZUFzeW5jVmFsdWUsIHVzZUhyZWYsIHVzZUluUm91dGVyQ29udGV4dCwgdXNlTG9hZGVyRGF0YSwgdXNlTG9jYXRpb24sIHVzZU1hdGNoLCB1c2VNYXRjaGVzLCB1c2VOYXZpZ2F0ZSwgdXNlTmF2aWdhdGlvbiwgdXNlTmF2aWdhdGlvblR5cGUsIHVzZU91dGxldCwgdXNlT3V0bGV0Q29udGV4dCwgdXNlUGFyYW1zLCB1c2VSZXNvbHZlZFBhdGgsIHVzZVJldmFsaWRhdG9yLCB1c2VSb3V0ZUVycm9yLCB1c2VSb3V0ZUxvYWRlckRhdGEsIHVzZVJvdXRlcyB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgeyBzdHJpcEJhc2VuYW1lLCBVTlNBRkVfd2FybmluZywgY3JlYXRlUm91dGVyLCBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIEVycm9yUmVzcG9uc2UsIFVOU0FGRV9pbnZhcmlhbnQsIGpvaW5QYXRocyB9IGZyb20gJ0ByZW1peC1ydW4vcm91dGVyJztcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5jb25zdCBkZWZhdWx0TWV0aG9kID0gXCJnZXRcIjtcbmNvbnN0IGRlZmF1bHRFbmNUeXBlID0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIjtcbmZ1bmN0aW9uIGlzSHRtbEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0LnRhZ05hbWUgPT09IFwic3RyaW5nXCI7XG59XG5mdW5jdGlvbiBpc0J1dHRvbkVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJidXR0b25cIjtcbn1cbmZ1bmN0aW9uIGlzRm9ybUVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmb3JtXCI7XG59XG5mdW5jdGlvbiBpc0lucHV0RWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIGlzSHRtbEVsZW1lbnQob2JqZWN0KSAmJiBvYmplY3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCI7XG59XG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuZnVuY3Rpb24gc2hvdWxkUHJvY2Vzc0xpbmtDbGljayhldmVudCwgdGFyZ2V0KSB7XG4gIHJldHVybiBldmVudC5idXR0b24gPT09IDAgJiYgKFxuICAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiZcbiAgLy8gTGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gSWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gaW5pdGlhbGl6ZXIuXG4gKlxuICogVGhpcyBpcyBpZGVudGljYWwgdG8gYG5ldyBVUkxTZWFyY2hQYXJhbXMoaW5pdClgIGV4Y2VwdCBpdCBhbHNvXG4gKiBzdXBwb3J0cyBhcnJheXMgYXMgdmFsdWVzIGluIHRoZSBvYmplY3QgZm9ybSBvZiB0aGUgaW5pdGlhbGl6ZXJcbiAqIGluc3RlYWQgb2YganVzdCBzdHJpbmdzLiBUaGlzIGlzIGNvbnZlbmllbnQgd2hlbiB5b3UgbmVlZCBtdWx0aXBsZVxuICogdmFsdWVzIGZvciBhIGdpdmVuIGtleSwgYnV0IGRvbid0IHdhbnQgdG8gdXNlIGFuIGFycmF5IGluaXRpYWxpemVyLlxuICpcbiAqIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mOlxuICpcbiAqICAgbGV0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoW1xuICogICAgIFsnc29ydCcsICduYW1lJ10sXG4gKiAgICAgWydzb3J0JywgJ3ByaWNlJ11cbiAqICAgXSk7XG4gKlxuICogeW91IGNhbiBkbzpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMoe1xuICogICAgIHNvcnQ6IFsnbmFtZScsICdwcmljZSddXG4gKiAgIH0pO1xuICovXG5mdW5jdGlvbiBjcmVhdGVTZWFyY2hQYXJhbXMoaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IFwiXCI7XG4gIH1cbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXModHlwZW9mIGluaXQgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShpbml0KSB8fCBpbml0IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zID8gaW5pdCA6IE9iamVjdC5rZXlzKGluaXQpLnJlZHVjZSgobWVtbywga2V5KSA9PiB7XG4gICAgbGV0IHZhbHVlID0gaW5pdFtrZXldO1xuICAgIHJldHVybiBtZW1vLmNvbmNhdChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcCh2ID0+IFtrZXksIHZdKSA6IFtba2V5LCB2YWx1ZV1dKTtcbiAgfSwgW10pKTtcbn1cbmZ1bmN0aW9uIGdldFNlYXJjaFBhcmFtc0ZvckxvY2F0aW9uKGxvY2F0aW9uU2VhcmNoLCBkZWZhdWx0U2VhcmNoUGFyYW1zKSB7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMobG9jYXRpb25TZWFyY2gpO1xuICBpZiAoZGVmYXVsdFNlYXJjaFBhcmFtcykge1xuICAgIC8vIFVzZSBgZGVmYXVsdFNlYXJjaFBhcmFtcy5mb3JFYWNoKC4uLilgIGhlcmUgaW5zdGVhZCBvZiBpdGVyYXRpbmcgb2ZcbiAgICAvLyBgZGVmYXVsdFNlYXJjaFBhcmFtcy5rZXlzKClgIHRvIHdvcmstYXJvdW5kIGEgYnVnIGluIEZpcmVmb3ggcmVsYXRlZCB0b1xuICAgIC8vIHdlYiBleHRlbnNpb25zLiBSZWxldmFudCBCdWd6aWxsYSB0aWNrZXRzOlxuICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTE0MTQ2MDJcbiAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDIzOTg0XG4gICAgZGVmYXVsdFNlYXJjaFBhcmFtcy5mb3JFYWNoKChfLCBrZXkpID0+IHtcbiAgICAgIGlmICghc2VhcmNoUGFyYW1zLmhhcyhrZXkpKSB7XG4gICAgICAgIGRlZmF1bHRTZWFyY2hQYXJhbXMuZ2V0QWxsKGtleSkuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICAgICAgc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHNlYXJjaFBhcmFtcztcbn1cbi8vIE9uZS10aW1lIGNoZWNrIGZvciBzdWJtaXR0ZXIgc3VwcG9ydFxubGV0IF9mb3JtRGF0YVN1cHBvcnRzU3VibWl0dGVyID0gbnVsbDtcbmZ1bmN0aW9uIGlzRm9ybURhdGFTdWJtaXR0ZXJTdXBwb3J0ZWQoKSB7XG4gIGlmIChfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciA9PT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICBuZXcgRm9ybURhdGEoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIiksXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGlmIEZvcm1EYXRhIHN1cHBvcnRzIHRoZSBzdWJtaXR0ZXIgcGFyYW1ldGVyLCB0aGlzIHdpbGwgdGhyb3dcbiAgICAgIDApO1xuICAgICAgX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXIgPSBmYWxzZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlcjtcbn1cbmNvbnN0IHN1cHBvcnRlZEZvcm1FbmNUeXBlcyA9IG5ldyBTZXQoW1wiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsIFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiLCBcInRleHQvcGxhaW5cIl0pO1xuZnVuY3Rpb24gZ2V0Rm9ybUVuY1R5cGUoZW5jVHlwZSkge1xuICBpZiAoZW5jVHlwZSAhPSBudWxsICYmICFzdXBwb3J0ZWRGb3JtRW5jVHlwZXMuaGFzKGVuY1R5cGUpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiXFxcIlwiICsgZW5jVHlwZSArIFwiXFxcIiBpcyBub3QgYSB2YWxpZCBgZW5jVHlwZWAgZm9yIGA8Rm9ybT5gL2A8ZmV0Y2hlci5Gb3JtPmAgXCIgKyAoXCJhbmQgd2lsbCBkZWZhdWx0IHRvIFxcXCJcIiArIGRlZmF1bHRFbmNUeXBlICsgXCJcXFwiXCIpKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gZW5jVHlwZTtcbn1cbmZ1bmN0aW9uIGdldEZvcm1TdWJtaXNzaW9uSW5mbyh0YXJnZXQsIGJhc2VuYW1lKSB7XG4gIGxldCBtZXRob2Q7XG4gIGxldCBhY3Rpb247XG4gIGxldCBlbmNUeXBlO1xuICBsZXQgZm9ybURhdGE7XG4gIGxldCBib2R5O1xuICBpZiAoaXNGb3JtRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgLy8gV2hlbiBncmFiYmluZyB0aGUgYWN0aW9uIGZyb20gdGhlIGVsZW1lbnQsIGl0IHdpbGwgaGF2ZSBoYWQgdGhlIGJhc2VuYW1lXG4gICAgLy8gcHJlZml4ZWQgdG8gZW5zdXJlIG5vbi1KUyBzY2VuYXJpb3Mgd29yaywgc28gc3RyaXAgaXQgc2luY2Ugd2UnbGxcbiAgICAvLyByZS1wcmVmaXggaW4gdGhlIHJvdXRlclxuICAgIGxldCBhdHRyID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImFjdGlvblwiKTtcbiAgICBhY3Rpb24gPSBhdHRyID8gc3RyaXBCYXNlbmFtZShhdHRyLCBiYXNlbmFtZSkgOiBudWxsO1xuICAgIG1ldGhvZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJtZXRob2RcIikgfHwgZGVmYXVsdE1ldGhvZDtcbiAgICBlbmNUeXBlID0gZ2V0Rm9ybUVuY1R5cGUodGFyZ2V0LmdldEF0dHJpYnV0ZShcImVuY3R5cGVcIikpIHx8IGRlZmF1bHRFbmNUeXBlO1xuICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKHRhcmdldCk7XG4gIH0gZWxzZSBpZiAoaXNCdXR0b25FbGVtZW50KHRhcmdldCkgfHwgaXNJbnB1dEVsZW1lbnQodGFyZ2V0KSAmJiAodGFyZ2V0LnR5cGUgPT09IFwic3VibWl0XCIgfHwgdGFyZ2V0LnR5cGUgPT09IFwiaW1hZ2VcIikpIHtcbiAgICBsZXQgZm9ybSA9IHRhcmdldC5mb3JtO1xuICAgIGlmIChmb3JtID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzdWJtaXQgYSA8YnV0dG9uPiBvciA8aW5wdXQgdHlwZT1cXFwic3VibWl0XFxcIj4gd2l0aG91dCBhIDxmb3JtPlwiKTtcbiAgICB9XG4gICAgLy8gPGJ1dHRvbj4vPGlucHV0IHR5cGU9XCJzdWJtaXRcIj4gbWF5IG92ZXJyaWRlIGF0dHJpYnV0ZXMgb2YgPGZvcm0+XG4gICAgLy8gV2hlbiBncmFiYmluZyB0aGUgYWN0aW9uIGZyb20gdGhlIGVsZW1lbnQsIGl0IHdpbGwgaGF2ZSBoYWQgdGhlIGJhc2VuYW1lXG4gICAgLy8gcHJlZml4ZWQgdG8gZW5zdXJlIG5vbi1KUyBzY2VuYXJpb3Mgd29yaywgc28gc3RyaXAgaXQgc2luY2Ugd2UnbGxcbiAgICAvLyByZS1wcmVmaXggaW4gdGhlIHJvdXRlclxuICAgIGxldCBhdHRyID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1hY3Rpb25cIikgfHwgZm9ybS5nZXRBdHRyaWJ1dGUoXCJhY3Rpb25cIik7XG4gICAgYWN0aW9uID0gYXR0ciA/IHN0cmlwQmFzZW5hbWUoYXR0ciwgYmFzZW5hbWUpIDogbnVsbDtcbiAgICBtZXRob2QgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybW1ldGhvZFwiKSB8fCBmb3JtLmdldEF0dHJpYnV0ZShcIm1ldGhvZFwiKSB8fCBkZWZhdWx0TWV0aG9kO1xuICAgIGVuY1R5cGUgPSBnZXRGb3JtRW5jVHlwZSh0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybWVuY3R5cGVcIikpIHx8IGdldEZvcm1FbmNUeXBlKGZvcm0uZ2V0QXR0cmlidXRlKFwiZW5jdHlwZVwiKSkgfHwgZGVmYXVsdEVuY1R5cGU7XG4gICAgLy8gQnVpbGQgYSBGb3JtRGF0YSBvYmplY3QgcG9wdWxhdGVkIGZyb20gYSBmb3JtIGFuZCBzdWJtaXR0ZXJcbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShmb3JtLCB0YXJnZXQpO1xuICAgIC8vIElmIHRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgdGhlIGBGb3JtRGF0YShlbCwgc3VibWl0dGVyKWAgZm9ybWF0LFxuICAgIC8vIHRoZW4gdGFjayBvbiB0aGUgc3VibWl0dGVyIHZhbHVlIGF0IHRoZSBlbmQuICBUaGlzIGlzIGEgbGlnaHR3ZWlnaHRcbiAgICAvLyBzb2x1dGlvbiB0aGF0IGlzIG5vdCAxMDAlIHNwZWMgY29tcGxpYW50LiAgRm9yIGNvbXBsZXRlIHN1cHBvcnQgaW4gb2xkZXJcbiAgICAvLyBicm93c2VycywgY29uc2lkZXIgdXNpbmcgdGhlIGBmb3JtZGF0YS1zdWJtaXR0ZXItcG9seWZpbGxgIHBhY2thZ2VcbiAgICBpZiAoIWlzRm9ybURhdGFTdWJtaXR0ZXJTdXBwb3J0ZWQoKSkge1xuICAgICAgbGV0IHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgdmFsdWVcbiAgICAgIH0gPSB0YXJnZXQ7XG4gICAgICBpZiAodHlwZSA9PT0gXCJpbWFnZVwiKSB7XG4gICAgICAgIGxldCBwcmVmaXggPSBuYW1lID8gbmFtZSArIFwiLlwiIDogXCJcIjtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKHByZWZpeCArIFwieFwiLCBcIjBcIik7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChwcmVmaXggKyBcInlcIiwgXCIwXCIpO1xuICAgICAgfSBlbHNlIGlmIChuYW1lKSB7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzSHRtbEVsZW1lbnQodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzdWJtaXQgZWxlbWVudCB0aGF0IGlzIG5vdCA8Zm9ybT4sIDxidXR0b24+LCBvciBcIiArIFwiPGlucHV0IHR5cGU9XFxcInN1Ym1pdHxpbWFnZVxcXCI+XCIpO1xuICB9IGVsc2Uge1xuICAgIG1ldGhvZCA9IGRlZmF1bHRNZXRob2Q7XG4gICAgYWN0aW9uID0gbnVsbDtcbiAgICBlbmNUeXBlID0gZGVmYXVsdEVuY1R5cGU7XG4gICAgYm9keSA9IHRhcmdldDtcbiAgfVxuICAvLyBTZW5kIGJvZHkgZm9yIDxGb3JtIGVuY1R5cGU9XCJ0ZXh0L3BsYWluXCIgc28gd2UgZW5jb2RlIGl0IGludG8gdGV4dFxuICBpZiAoZm9ybURhdGEgJiYgZW5jVHlwZSA9PT0gXCJ0ZXh0L3BsYWluXCIpIHtcbiAgICBib2R5ID0gZm9ybURhdGE7XG4gICAgZm9ybURhdGEgPSB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBhY3Rpb24sXG4gICAgbWV0aG9kOiBtZXRob2QudG9Mb3dlckNhc2UoKSxcbiAgICBlbmNUeXBlLFxuICAgIGZvcm1EYXRhLFxuICAgIGJvZHlcbiAgfTtcbn1cblxuY29uc3QgX2V4Y2x1ZGVkID0gW1wib25DbGlja1wiLCBcInJlbGF0aXZlXCIsIFwicmVsb2FkRG9jdW1lbnRcIiwgXCJyZXBsYWNlXCIsIFwic3RhdGVcIiwgXCJ0YXJnZXRcIiwgXCJ0b1wiLCBcInByZXZlbnRTY3JvbGxSZXNldFwiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcImFyaWEtY3VycmVudFwiLCBcImNhc2VTZW5zaXRpdmVcIiwgXCJjbGFzc05hbWVcIiwgXCJlbmRcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwiY2hpbGRyZW5cIl0sXG4gIF9leGNsdWRlZDMgPSBbXCJyZWxvYWREb2N1bWVudFwiLCBcInJlcGxhY2VcIiwgXCJzdGF0ZVwiLCBcIm1ldGhvZFwiLCBcImFjdGlvblwiLCBcIm9uU3VibWl0XCIsIFwic3VibWl0XCIsIFwicmVsYXRpdmVcIiwgXCJwcmV2ZW50U2Nyb2xsUmVzZXRcIl07XG5mdW5jdGlvbiBjcmVhdGVCcm93c2VyUm91dGVyKHJvdXRlcywgb3B0cykge1xuICByZXR1cm4gY3JlYXRlUm91dGVyKHtcbiAgICBiYXNlbmFtZTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5iYXNlbmFtZSxcbiAgICBmdXR1cmU6IF9leHRlbmRzKHt9LCBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmZ1dHVyZSwge1xuICAgICAgdjdfcHJlcGVuZEJhc2VuYW1lOiB0cnVlXG4gICAgfSksXG4gICAgaGlzdG9yeTogY3JlYXRlQnJvd3Nlckhpc3Rvcnkoe1xuICAgICAgd2luZG93OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLndpbmRvd1xuICAgIH0pLFxuICAgIGh5ZHJhdGlvbkRhdGE6IChvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmh5ZHJhdGlvbkRhdGEpIHx8IHBhcnNlSHlkcmF0aW9uRGF0YSgpLFxuICAgIHJvdXRlcyxcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXM6IFVOU0FGRV9tYXBSb3V0ZVByb3BlcnRpZXNcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufVxuZnVuY3Rpb24gY3JlYXRlSGFzaFJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgZnV0dXJlOiBfZXh0ZW5kcyh7fSwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mdXR1cmUsIHtcbiAgICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogdHJ1ZVxuICAgIH0pLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZUhhc2hIaXN0b3J5KHtcbiAgICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhKSB8fCBwYXJzZUh5ZHJhdGlvbkRhdGEoKSxcbiAgICByb3V0ZXMsXG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzOiBVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzXG4gIH0pLmluaXRpYWxpemUoKTtcbn1cbmZ1bmN0aW9uIHBhcnNlSHlkcmF0aW9uRGF0YSgpIHtcbiAgdmFyIF93aW5kb3c7XG4gIGxldCBzdGF0ZSA9IChfd2luZG93ID0gd2luZG93KSA9PSBudWxsID8gdm9pZCAwIDogX3dpbmRvdy5fX3N0YXRpY1JvdXRlckh5ZHJhdGlvbkRhdGE7XG4gIGlmIChzdGF0ZSAmJiBzdGF0ZS5lcnJvcnMpIHtcbiAgICBzdGF0ZSA9IF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgZXJyb3JzOiBkZXNlcmlhbGl6ZUVycm9ycyhzdGF0ZS5lcnJvcnMpXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufVxuZnVuY3Rpb24gZGVzZXJpYWxpemVFcnJvcnMoZXJyb3JzKSB7XG4gIGlmICghZXJyb3JzKSByZXR1cm4gbnVsbDtcbiAgbGV0IGVudHJpZXMgPSBPYmplY3QuZW50cmllcyhlcnJvcnMpO1xuICBsZXQgc2VyaWFsaXplZCA9IHt9O1xuICBmb3IgKGxldCBba2V5LCB2YWxdIG9mIGVudHJpZXMpIHtcbiAgICAvLyBIZXkgeW91ISAgSWYgeW91IGNoYW5nZSB0aGlzLCBwbGVhc2UgY2hhbmdlIHRoZSBjb3JyZXNwb25kaW5nIGxvZ2ljIGluXG4gICAgLy8gc2VyaWFsaXplRXJyb3JzIGluIHJlYWN0LXJvdXRlci1kb20vc2VydmVyLnRzeCA6KVxuICAgIGlmICh2YWwgJiYgdmFsLl9fdHlwZSA9PT0gXCJSb3V0ZUVycm9yUmVzcG9uc2VcIikge1xuICAgICAgc2VyaWFsaXplZFtrZXldID0gbmV3IEVycm9yUmVzcG9uc2UodmFsLnN0YXR1cywgdmFsLnN0YXR1c1RleHQsIHZhbC5kYXRhLCB2YWwuaW50ZXJuYWwgPT09IHRydWUpO1xuICAgIH0gZWxzZSBpZiAodmFsICYmIHZhbC5fX3R5cGUgPT09IFwiRXJyb3JcIikge1xuICAgICAgLy8gQXR0ZW1wdCB0byByZWNvbnN0cnVjdCB0aGUgcmlnaHQgdHlwZSBvZiBFcnJvciAoaS5lLiwgUmVmZXJlbmNlRXJyb3IpXG4gICAgICBpZiAodmFsLl9fc3ViVHlwZSkge1xuICAgICAgICBsZXQgRXJyb3JDb25zdHJ1Y3RvciA9IHdpbmRvd1t2YWwuX19zdWJUeXBlXTtcbiAgICAgICAgaWYgKHR5cGVvZiBFcnJvckNvbnN0cnVjdG9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yQ29uc3RydWN0b3IodmFsLm1lc3NhZ2UpO1xuICAgICAgICAgICAgLy8gV2lwZSBhd2F5IHRoZSBjbGllbnQtc2lkZSBzdGFjayB0cmFjZS4gIE5vdGhpbmcgdG8gZmlsbCBpdCBpbiB3aXRoXG4gICAgICAgICAgICAvLyBiZWNhdXNlIHdlIGRvbid0IHNlcmlhbGl6ZSBTU1Igc3RhY2sgdHJhY2VzIGZvciBzZWN1cml0eSByZWFzb25zXG4gICAgICAgICAgICBlcnJvci5zdGFjayA9IFwiXCI7XG4gICAgICAgICAgICBzZXJpYWxpemVkW2tleV0gPSBlcnJvcjtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBuby1vcCAtIGZhbGwgdGhyb3VnaCBhbmQgY3JlYXRlIGEgbm9ybWFsIEVycm9yXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2VyaWFsaXplZFtrZXldID09IG51bGwpIHtcbiAgICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yKHZhbC5tZXNzYWdlKTtcbiAgICAgICAgLy8gV2lwZSBhd2F5IHRoZSBjbGllbnQtc2lkZSBzdGFjayB0cmFjZS4gIE5vdGhpbmcgdG8gZmlsbCBpdCBpbiB3aXRoXG4gICAgICAgIC8vIGJlY2F1c2Ugd2UgZG9uJ3Qgc2VyaWFsaXplIFNTUiBzdGFjayB0cmFjZXMgZm9yIHNlY3VyaXR5IHJlYXNvbnNcbiAgICAgICAgZXJyb3Iuc3RhY2sgPSBcIlwiO1xuICAgICAgICBzZXJpYWxpemVkW2tleV0gPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VyaWFsaXplZFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2VyaWFsaXplZDtcbn1cbi8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBDb21wb25lbnRzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLyoqXG4gIFdlYnBhY2sgKyBSZWFjdCAxNyBmYWlscyB0byBjb21waWxlIG9uIGFueSBvZiB0aGUgZm9sbG93aW5nIGJlY2F1c2Ugd2VicGFja1xuICBjb21wbGFpbnMgdGhhdCBgc3RhcnRUcmFuc2l0aW9uYCBkb2Vzbid0IGV4aXN0IGluIGBSZWFjdGA6XG4gICogaW1wb3J0IHsgc3RhcnRUcmFuc2l0aW9uIH0gZnJvbSBcInJlYWN0XCJcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QgPyBSZWFjdC5zdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3RbXCJzdGFydFRyYW5zaXRpb25cIl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgTW92aW5nIGl0IHRvIGEgY29uc3RhbnQgc3VjaCBhcyB0aGUgZm9sbG93aW5nIHNvbHZlcyB0aGUgV2VicGFjay9SZWFjdCAxNyBpc3N1ZTpcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIGNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuICAgIFNUQVJUX1RSQU5TSVRJT04gaW4gUmVhY3QgPyBSZWFjdFtTVEFSVF9UUkFOU0lUSU9OXSgoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcblxuICBIb3dldmVyLCB0aGF0IGludHJvZHVjZXMgd2VicGFjay90ZXJzZXIgbWluaWZpY2F0aW9uIGlzc3VlcyBpbiBwcm9kdWN0aW9uIGJ1aWxkc1xuICBpbiBSZWFjdCAxOCB3aGVyZSBtaW5pZmljYXRpb24vb2JmdXNjYXRpb24gZW5kcyB1cCByZW1vdmluZyB0aGUgY2FsbCBvZlxuICBSZWFjdC5zdGFydFRyYW5zaXRpb24gZW50aXJlbHkgZnJvbSB0aGUgZmlyc3QgaGFsZiBvZiB0aGUgdGVybmFyeS4gIEdyYWJiaW5nXG4gIHRoaXMgZXhwb3J0ZWQgcmVmZXJlbmNlIG9uY2UgdXAgZnJvbnQgcmVzb2x2ZXMgdGhhdCBpc3N1ZS5cblxuICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZWFjdC1yb3V0ZXIvaXNzdWVzLzEwNTc5XG4qL1xuY29uc3QgU1RBUlRfVFJBTlNJVElPTiA9IFwic3RhcnRUcmFuc2l0aW9uXCI7XG5jb25zdCBzdGFydFRyYW5zaXRpb25JbXBsID0gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl07XG4vKipcbiAqIEEgYDxSb3V0ZXI+YCBmb3IgdXNlIGluIHdlYiBicm93c2Vycy4gUHJvdmlkZXMgdGhlIGNsZWFuZXN0IFVSTHMuXG4gKi9cbmZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoX3JlZikge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGZ1dHVyZSxcbiAgICB3aW5kb3dcbiAgfSA9IF9yZWY7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHtcbiAgICAgIHdpbmRvdyxcbiAgICAgIHY1Q29tcGF0OiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlSW1wbF0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3U3RhdGUgPT4ge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvbiAmJiBzdGFydFRyYW5zaXRpb25JbXBsID8gc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKSA6IHNldFN0YXRlSW1wbChuZXdTdGF0ZSk7XG4gIH0sIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeSwgc2V0U3RhdGVdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5XG4gIH0pO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFN0b3JlcyB0aGUgbG9jYXRpb24gaW4gdGhlIGhhc2hcbiAqIHBvcnRpb24gb2YgdGhlIFVSTCBzbyBpdCBpcyBub3Qgc2VudCB0byB0aGUgc2VydmVyLlxuICovXG5mdW5jdGlvbiBIYXNoUm91dGVyKF9yZWYyKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgZnV0dXJlLFxuICAgIHdpbmRvd1xuICB9ID0gX3JlZjI7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUhhc2hIaXN0b3J5KHtcbiAgICAgIHdpbmRvdyxcbiAgICAgIHY1Q29tcGF0OiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlSW1wbF0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3U3RhdGUgPT4ge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvbiAmJiBzdGFydFRyYW5zaXRpb25JbXBsID8gc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKSA6IHNldFN0YXRlSW1wbChuZXdTdGF0ZSk7XG4gIH0sIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeSwgc2V0U3RhdGVdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5XG4gIH0pO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgdGhhdCBhY2NlcHRzIGEgcHJlLWluc3RhbnRpYXRlZCBoaXN0b3J5IG9iamVjdC4gSXQncyBpbXBvcnRhbnRcbiAqIHRvIG5vdGUgdGhhdCB1c2luZyB5b3VyIG93biBoaXN0b3J5IG9iamVjdCBpcyBoaWdobHkgZGlzY291cmFnZWQgYW5kIG1heSBhZGRcbiAqIHR3byB2ZXJzaW9ucyBvZiB0aGUgaGlzdG9yeSBsaWJyYXJ5IHRvIHlvdXIgYnVuZGxlcyB1bmxlc3MgeW91IHVzZSB0aGUgc2FtZVxuICogdmVyc2lvbiBvZiB0aGUgaGlzdG9yeSBsaWJyYXJ5IHRoYXQgUmVhY3QgUm91dGVyIHVzZXMgaW50ZXJuYWxseS5cbiAqL1xuZnVuY3Rpb24gSGlzdG9yeVJvdXRlcihfcmVmMykge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGZ1dHVyZSxcbiAgICBoaXN0b3J5XG4gIH0gPSBfcmVmMztcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBsZXQge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvblxuICB9ID0gZnV0dXJlIHx8IHt9O1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdTdGF0ZSA9PiB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGwgPyBzdGFydFRyYW5zaXRpb25JbXBsKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpIDogc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgfSwgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5LCBzZXRTdGF0ZV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhpc3RvcnlSb3V0ZXIuZGlzcGxheU5hbWUgPSBcInVuc3RhYmxlX0hpc3RvcnlSb3V0ZXJcIjtcbn1cbmNvbnN0IGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG5jb25zdCBBQlNPTFVURV9VUkxfUkVHRVggPSAvXig/OlthLXpdW2EtejAtOSsuLV0qOnxcXC9cXC8pL2k7XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuY29uc3QgTGluayA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpbmtXaXRoUmVmKF9yZWY0LCByZWYpIHtcbiAgbGV0IHtcbiAgICAgIG9uQ2xpY2ssXG4gICAgICByZWxhdGl2ZSxcbiAgICAgIHJlbG9hZERvY3VtZW50LFxuICAgICAgcmVwbGFjZSxcbiAgICAgIHN0YXRlLFxuICAgICAgdGFyZ2V0LFxuICAgICAgdG8sXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICB9ID0gX3JlZjQsXG4gICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY0LCBfZXhjbHVkZWQpO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIC8vIFJlbmRlcmVkIGludG8gPGEgaHJlZj4gZm9yIGFic29sdXRlIFVSTHNcbiAgbGV0IGFic29sdXRlSHJlZjtcbiAgbGV0IGlzRXh0ZXJuYWwgPSBmYWxzZTtcbiAgaWYgKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiAmJiBBQlNPTFVURV9VUkxfUkVHRVgudGVzdCh0bykpIHtcbiAgICAvLyBSZW5kZXIgdGhlIGFic29sdXRlIGhyZWYgc2VydmVyLSBhbmQgY2xpZW50LXNpZGVcbiAgICBhYnNvbHV0ZUhyZWYgPSB0bztcbiAgICAvLyBPbmx5IGNoZWNrIGZvciBleHRlcm5hbCBvcmlnaW5zIGNsaWVudC1zaWRlXG4gICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGN1cnJlbnRVcmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgbGV0IHRhcmdldFVybCA9IHRvLnN0YXJ0c1dpdGgoXCIvL1wiKSA/IG5ldyBVUkwoY3VycmVudFVybC5wcm90b2NvbCArIHRvKSA6IG5ldyBVUkwodG8pO1xuICAgICAgICBsZXQgcGF0aCA9IHN0cmlwQmFzZW5hbWUodGFyZ2V0VXJsLnBhdGhuYW1lLCBiYXNlbmFtZSk7XG4gICAgICAgIGlmICh0YXJnZXRVcmwub3JpZ2luID09PSBjdXJyZW50VXJsLm9yaWdpbiAmJiBwYXRoICE9IG51bGwpIHtcbiAgICAgICAgICAvLyBTdHJpcCB0aGUgcHJvdG9jb2wvb3JpZ2luL2Jhc2VuYW1lIGZvciBzYW1lLW9yaWdpbiBhYnNvbHV0ZSBVUkxzXG4gICAgICAgICAgdG8gPSBwYXRoICsgdGFyZ2V0VXJsLnNlYXJjaCArIHRhcmdldFVybC5oYXNoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlzRXh0ZXJuYWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIFdlIGNhbid0IGRvIGV4dGVybmFsIFVSTCBkZXRlY3Rpb24gd2l0aG91dCBhIHZhbGlkIFVSTFxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCI8TGluayB0bz1cXFwiXCIgKyB0byArIFwiXFxcIj4gY29udGFpbnMgYW4gaW52YWxpZCBVUkwgd2hpY2ggd2lsbCBwcm9iYWJseSBicmVhayBcIiArIFwid2hlbiBjbGlja2VkIC0gcGxlYXNlIHVwZGF0ZSB0byBhIHZhbGlkIFVSTCBwYXRoLlwiKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gUmVuZGVyZWQgaW50byA8YSBocmVmPiBmb3IgcmVsYXRpdmUgVVJMc1xuICBsZXQgaHJlZiA9IHVzZUhyZWYodG8sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgbGV0IGludGVybmFsT25DbGljayA9IHVzZUxpbmtDbGlja0hhbmRsZXIodG8sIHtcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHRhcmdldCxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgcmVsYXRpdmVcbiAgfSk7XG4gIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgaWYgKG9uQ2xpY2spIG9uQ2xpY2soZXZlbnQpO1xuICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgaW50ZXJuYWxPbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBhYnNvbHV0ZUhyZWYgfHwgaHJlZixcbiAgICAgIG9uQ2xpY2s6IGlzRXh0ZXJuYWwgfHwgcmVsb2FkRG9jdW1lbnQgPyBvbkNsaWNrIDogaGFuZGxlQ2xpY2ssXG4gICAgICByZWY6IHJlZixcbiAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgfSkpXG4gICk7XG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xufVxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuY29uc3QgTmF2TGluayA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE5hdkxpbmtXaXRoUmVmKF9yZWY1LCByZWYpIHtcbiAgbGV0IHtcbiAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50UHJvcCA9IFwicGFnZVwiLFxuICAgICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVQcm9wID0gXCJcIixcbiAgICAgIGVuZCA9IGZhbHNlLFxuICAgICAgc3R5bGU6IHN0eWxlUHJvcCxcbiAgICAgIHRvLFxuICAgICAgY2hpbGRyZW5cbiAgICB9ID0gX3JlZjUsXG4gICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY1LCBfZXhjbHVkZWQyKTtcbiAgbGV0IHBhdGggPSB1c2VSZXNvbHZlZFBhdGgodG8sIHtcbiAgICByZWxhdGl2ZTogcmVzdC5yZWxhdGl2ZVxuICB9KTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlclN0YXRlID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbmF2aWdhdG9yXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB0b1BhdGhuYW1lID0gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uID8gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uKHBhdGgpLnBhdGhuYW1lIDogcGF0aC5wYXRobmFtZTtcbiAgbGV0IGxvY2F0aW9uUGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZTtcbiAgbGV0IG5leHRMb2NhdGlvblBhdGhuYW1lID0gcm91dGVyU3RhdGUgJiYgcm91dGVyU3RhdGUubmF2aWdhdGlvbiAmJiByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uID8gcm91dGVyU3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbi5wYXRobmFtZSA6IG51bGw7XG4gIGlmICghY2FzZVNlbnNpdGl2ZSkge1xuICAgIGxvY2F0aW9uUGF0aG5hbWUgPSBsb2NhdGlvblBhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgbmV4dExvY2F0aW9uUGF0aG5hbWUgPSBuZXh0TG9jYXRpb25QYXRobmFtZSA/IG5leHRMb2NhdGlvblBhdGhuYW1lLnRvTG93ZXJDYXNlKCkgOiBudWxsO1xuICAgIHRvUGF0aG5hbWUgPSB0b1BhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gIH1cbiAgbGV0IGlzQWN0aXZlID0gbG9jYXRpb25QYXRobmFtZSA9PT0gdG9QYXRobmFtZSB8fCAhZW5kICYmIGxvY2F0aW9uUGF0aG5hbWUuc3RhcnRzV2l0aCh0b1BhdGhuYW1lKSAmJiBsb2NhdGlvblBhdGhuYW1lLmNoYXJBdCh0b1BhdGhuYW1lLmxlbmd0aCkgPT09IFwiL1wiO1xuICBsZXQgaXNQZW5kaW5nID0gbmV4dExvY2F0aW9uUGF0aG5hbWUgIT0gbnVsbCAmJiAobmV4dExvY2F0aW9uUGF0aG5hbWUgPT09IHRvUGF0aG5hbWUgfHwgIWVuZCAmJiBuZXh0TG9jYXRpb25QYXRobmFtZS5zdGFydHNXaXRoKHRvUGF0aG5hbWUpICYmIG5leHRMb2NhdGlvblBhdGhuYW1lLmNoYXJBdCh0b1BhdGhuYW1lLmxlbmd0aCkgPT09IFwiL1wiKTtcbiAgbGV0IGFyaWFDdXJyZW50ID0gaXNBY3RpdmUgPyBhcmlhQ3VycmVudFByb3AgOiB1bmRlZmluZWQ7XG4gIGxldCBjbGFzc05hbWU7XG4gIGlmICh0eXBlb2YgY2xhc3NOYW1lUHJvcCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lUHJvcCh7XG4gICAgICBpc0FjdGl2ZSxcbiAgICAgIGlzUGVuZGluZ1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIHRoZSBjbGFzc05hbWUgcHJvcCBpcyBub3QgYSBmdW5jdGlvbiwgd2UgdXNlIGEgZGVmYXVsdCBgYWN0aXZlYFxuICAgIC8vIGNsYXNzIGZvciA8TmF2TGluayAvPnMgdGhhdCBhcmUgYWN0aXZlLiBJbiB2NSBgYWN0aXZlYCB3YXMgdGhlIGRlZmF1bHRcbiAgICAvLyB2YWx1ZSBmb3IgYGFjdGl2ZUNsYXNzTmFtZWAsIGJ1dCB3ZSBhcmUgcmVtb3ZpbmcgdGhhdCBBUEkgYW5kIGNhbiBzdGlsbFxuICAgIC8vIHVzZSB0aGUgb2xkIGRlZmF1bHQgYmVoYXZpb3IgZm9yIGEgY2xlYW5lciB1cGdyYWRlIHBhdGggYW5kIGtlZXAgdGhlXG4gICAgLy8gc2ltcGxlIHN0eWxpbmcgcnVsZXMgd29ya2luZyBhcyB0aGV5IGN1cnJlbnRseSBkby5cbiAgICBjbGFzc05hbWUgPSBbY2xhc3NOYW1lUHJvcCwgaXNBY3RpdmUgPyBcImFjdGl2ZVwiIDogbnVsbCwgaXNQZW5kaW5nID8gXCJwZW5kaW5nXCIgOiBudWxsXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIik7XG4gIH1cbiAgbGV0IHN0eWxlID0gdHlwZW9mIHN0eWxlUHJvcCA9PT0gXCJmdW5jdGlvblwiID8gc3R5bGVQcm9wKHtcbiAgICBpc0FjdGl2ZSxcbiAgICBpc1BlbmRpbmdcbiAgfSkgOiBzdHlsZVByb3A7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50LFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIHJlZjogcmVmLFxuICAgIHN0eWxlOiBzdHlsZSxcbiAgICB0bzogdG9cbiAgfSksIHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gY2hpbGRyZW4oe1xuICAgIGlzQWN0aXZlLFxuICAgIGlzUGVuZGluZ1xuICB9KSA6IGNoaWxkcmVuKTtcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG59XG4vKipcbiAqIEEgYEByZW1peC1ydW4vcm91dGVyYC1hd2FyZSBgPGZvcm0+YC4gSXQgYmVoYXZlcyBsaWtlIGEgbm9ybWFsIGZvcm0gZXhjZXB0XG4gKiB0aGF0IHRoZSBpbnRlcmFjdGlvbiB3aXRoIHRoZSBzZXJ2ZXIgaXMgd2l0aCBgZmV0Y2hgIGluc3RlYWQgb2YgbmV3IGRvY3VtZW50XG4gKiByZXF1ZXN0cywgYWxsb3dpbmcgY29tcG9uZW50cyB0byBhZGQgbmljZXIgVVggdG8gdGhlIHBhZ2UgYXMgdGhlIGZvcm0gaXNcbiAqIHN1Ym1pdHRlZCBhbmQgcmV0dXJucyB3aXRoIGRhdGEuXG4gKi9cbmNvbnN0IEZvcm0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICBsZXQgc3VibWl0ID0gdXNlU3VibWl0KCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtSW1wbCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgc3VibWl0OiBzdWJtaXQsXG4gICAgcmVmOiByZWZcbiAgfSkpO1xufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEZvcm0uZGlzcGxheU5hbWUgPSBcIkZvcm1cIjtcbn1cbmNvbnN0IEZvcm1JbXBsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKF9yZWY2LCBmb3J3YXJkZWRSZWYpID0+IHtcbiAgbGV0IHtcbiAgICAgIHJlbG9hZERvY3VtZW50LFxuICAgICAgcmVwbGFjZSxcbiAgICAgIHN0YXRlLFxuICAgICAgbWV0aG9kID0gZGVmYXVsdE1ldGhvZCxcbiAgICAgIGFjdGlvbixcbiAgICAgIG9uU3VibWl0LFxuICAgICAgc3VibWl0LFxuICAgICAgcmVsYXRpdmUsXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICB9ID0gX3JlZjYsXG4gICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmNiwgX2V4Y2x1ZGVkMyk7XG4gIGxldCBmb3JtTWV0aG9kID0gbWV0aG9kLnRvTG93ZXJDYXNlKCkgPT09IFwiZ2V0XCIgPyBcImdldFwiIDogXCJwb3N0XCI7XG4gIGxldCBmb3JtQWN0aW9uID0gdXNlRm9ybUFjdGlvbihhY3Rpb24sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgbGV0IHN1Ym1pdEhhbmRsZXIgPSBldmVudCA9PiB7XG4gICAgb25TdWJtaXQgJiYgb25TdWJtaXQoZXZlbnQpO1xuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSByZXR1cm47XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBsZXQgc3VibWl0dGVyID0gZXZlbnQubmF0aXZlRXZlbnQuc3VibWl0dGVyO1xuICAgIGxldCBzdWJtaXRNZXRob2QgPSAoc3VibWl0dGVyID09IG51bGwgPyB2b2lkIDAgOiBzdWJtaXR0ZXIuZ2V0QXR0cmlidXRlKFwiZm9ybW1ldGhvZFwiKSkgfHwgbWV0aG9kO1xuICAgIHN1Ym1pdChzdWJtaXR0ZXIgfHwgZXZlbnQuY3VycmVudFRhcmdldCwge1xuICAgICAgbWV0aG9kOiBzdWJtaXRNZXRob2QsXG4gICAgICByZXBsYWNlLFxuICAgICAgc3RhdGUsXG4gICAgICByZWxhdGl2ZSxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldFxuICAgIH0pO1xuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIsIF9leHRlbmRzKHtcbiAgICByZWY6IGZvcndhcmRlZFJlZixcbiAgICBtZXRob2Q6IGZvcm1NZXRob2QsXG4gICAgYWN0aW9uOiBmb3JtQWN0aW9uLFxuICAgIG9uU3VibWl0OiByZWxvYWREb2N1bWVudCA/IG9uU3VibWl0IDogc3VibWl0SGFuZGxlclxuICB9LCBwcm9wcykpO1xufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEZvcm1JbXBsLmRpc3BsYXlOYW1lID0gXCJGb3JtSW1wbFwiO1xufVxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCB3aWxsIGVtdWxhdGUgdGhlIGJyb3dzZXIncyBzY3JvbGwgcmVzdG9yYXRpb24gb24gbG9jYXRpb25cbiAqIGNoYW5nZXMuXG4gKi9cbmZ1bmN0aW9uIFNjcm9sbFJlc3RvcmF0aW9uKF9yZWY3KSB7XG4gIGxldCB7XG4gICAgZ2V0S2V5LFxuICAgIHN0b3JhZ2VLZXlcbiAgfSA9IF9yZWY3O1xuICB1c2VTY3JvbGxSZXN0b3JhdGlvbih7XG4gICAgZ2V0S2V5LFxuICAgIHN0b3JhZ2VLZXlcbiAgfSk7XG4gIHJldHVybiBudWxsO1xufVxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTY3JvbGxSZXN0b3JhdGlvbi5kaXNwbGF5TmFtZSA9IFwiU2Nyb2xsUmVzdG9yYXRpb25cIjtcbn1cbi8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBIb29rc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbnZhciBEYXRhUm91dGVySG9vaztcbihmdW5jdGlvbiAoRGF0YVJvdXRlckhvb2spIHtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTY3JvbGxSZXN0b3JhdGlvblwiXSA9IFwidXNlU2Nyb2xsUmVzdG9yYXRpb25cIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTdWJtaXRcIl0gPSBcInVzZVN1Ym1pdFwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZVN1Ym1pdEZldGNoZXJcIl0gPSBcInVzZVN1Ym1pdEZldGNoZXJcIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VGZXRjaGVyXCJdID0gXCJ1c2VGZXRjaGVyXCI7XG59KShEYXRhUm91dGVySG9vayB8fCAoRGF0YVJvdXRlckhvb2sgPSB7fSkpO1xudmFyIERhdGFSb3V0ZXJTdGF0ZUhvb2s7XG4oZnVuY3Rpb24gKERhdGFSb3V0ZXJTdGF0ZUhvb2spIHtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUZldGNoZXJzXCJdID0gXCJ1c2VGZXRjaGVyc1wiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlU2Nyb2xsUmVzdG9yYXRpb25cIl0gPSBcInVzZVNjcm9sbFJlc3RvcmF0aW9uXCI7XG59KShEYXRhUm91dGVyU3RhdGVIb29rIHx8IChEYXRhUm91dGVyU3RhdGVIb29rID0ge30pKTtcbmZ1bmN0aW9uIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpIHtcbiAgcmV0dXJuIGhvb2tOYW1lICsgXCIgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGRhdGEgcm91dGVyLiAgU2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlcnMvcGlja2luZy1hLXJvdXRlci5cIjtcbn1cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJDb250ZXh0KGhvb2tOYW1lKSB7XG4gIGxldCBjdHggPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCk7XG4gICFjdHggPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGN0eDtcbn1cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJTdGF0ZShob29rTmFtZSkge1xuICBsZXQgc3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgIXN0YXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBzdGF0ZTtcbn1cbi8qKlxuICogSGFuZGxlcyB0aGUgY2xpY2sgYmVoYXZpb3IgZm9yIHJvdXRlciBgPExpbms+YCBjb21wb25lbnRzLiBUaGlzIGlzIHVzZWZ1bCBpZlxuICogeW91IG5lZWQgdG8gY3JlYXRlIGN1c3RvbSBgPExpbms+YCBjb21wb25lbnRzIHdpdGggdGhlIHNhbWUgY2xpY2sgYmVoYXZpb3Igd2VcbiAqIHVzZSBpbiBvdXIgZXhwb3J0ZWQgYDxMaW5rPmAuXG4gKi9cbmZ1bmN0aW9uIHVzZUxpbmtDbGlja0hhbmRsZXIodG8sIF90ZW1wKSB7XG4gIGxldCB7XG4gICAgdGFyZ2V0LFxuICAgIHJlcGxhY2U6IHJlcGxhY2VQcm9wLFxuICAgIHN0YXRlLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICByZWxhdGl2ZVxuICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvLCB7XG4gICAgcmVsYXRpdmVcbiAgfSk7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhldmVudCA9PiB7XG4gICAgaWYgKHNob3VsZFByb2Nlc3NMaW5rQ2xpY2soZXZlbnQsIHRhcmdldCkpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAvLyBJZiB0aGUgVVJMIGhhc24ndCBjaGFuZ2VkLCBhIHJlZ3VsYXIgPGE+IHdpbGwgZG8gYSByZXBsYWNlIGluc3RlYWQgb2ZcbiAgICAgIC8vIGEgcHVzaCwgc28gZG8gdGhlIHNhbWUgaGVyZSB1bmxlc3MgdGhlIHJlcGxhY2UgcHJvcCBpcyBleHBsaWNpdGx5IHNldFxuICAgICAgbGV0IHJlcGxhY2UgPSByZXBsYWNlUHJvcCAhPT0gdW5kZWZpbmVkID8gcmVwbGFjZVByb3AgOiBjcmVhdGVQYXRoKGxvY2F0aW9uKSA9PT0gY3JlYXRlUGF0aChwYXRoKTtcbiAgICAgIG5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHJlcGxhY2UsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICAgIHJlbGF0aXZlXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtsb2NhdGlvbiwgbmF2aWdhdGUsIHBhdGgsIHJlcGxhY2VQcm9wLCBzdGF0ZSwgdGFyZ2V0LCB0bywgcHJldmVudFNjcm9sbFJlc2V0LCByZWxhdGl2ZV0pO1xufVxuLyoqXG4gKiBBIGNvbnZlbmllbnQgd3JhcHBlciBmb3IgcmVhZGluZyBhbmQgd3JpdGluZyBzZWFyY2ggcGFyYW1ldGVycyB2aWEgdGhlXG4gKiBVUkxTZWFyY2hQYXJhbXMgaW50ZXJmYWNlLlxuICovXG5mdW5jdGlvbiB1c2VTZWFyY2hQYXJhbXMoZGVmYXVsdEluaXQpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcodHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gXCJ1bmRlZmluZWRcIiwgXCJZb3UgY2Fubm90IHVzZSB0aGUgYHVzZVNlYXJjaFBhcmFtc2AgaG9vayBpbiBhIGJyb3dzZXIgdGhhdCBkb2VzIG5vdCBcIiArIFwic3VwcG9ydCB0aGUgVVJMU2VhcmNoUGFyYW1zIEFQSS4gSWYgeW91IG5lZWQgdG8gc3VwcG9ydCBJbnRlcm5ldCBcIiArIFwiRXhwbG9yZXIgMTEsIHdlIHJlY29tbWVuZCB5b3UgbG9hZCBhIHBvbHlmaWxsIHN1Y2ggYXMgXCIgKyBcImh0dHBzOi8vZ2l0aHViLmNvbS91bmdhcC91cmwtc2VhcmNoLXBhcmFtc1xcblxcblwiICsgXCJJZiB5b3UncmUgdW5zdXJlIGhvdyB0byBsb2FkIHBvbHlmaWxscywgd2UgcmVjb21tZW5kIHlvdSBjaGVjayBvdXQgXCIgKyBcImh0dHBzOi8vcG9seWZpbGwuaW8vdjMvIHdoaWNoIHByb3ZpZGVzIHNvbWUgcmVjb21tZW5kYXRpb25zIGFib3V0IGhvdyBcIiArIFwidG8gbG9hZCBwb2x5ZmlsbHMgb25seSBmb3IgdXNlcnMgdGhhdCBuZWVkIHRoZW0sIGluc3RlYWQgb2YgZm9yIGV2ZXJ5IFwiICsgXCJ1c2VyLlwiKSA6IHZvaWQgMDtcbiAgbGV0IGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoY3JlYXRlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSk7XG4gIGxldCBoYXNTZXRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgc2VhcmNoUGFyYW1zID0gUmVhY3QudXNlTWVtbygoKSA9PlxuICAvLyBPbmx5IG1lcmdlIGluIHRoZSBkZWZhdWx0cyBpZiB3ZSBoYXZlbid0IHlldCBjYWxsZWQgc2V0U2VhcmNoUGFyYW1zLlxuICAvLyBPbmNlIHdlIGNhbGwgdGhhdCB3ZSB3YW50IHRob3NlIHRvIHRha2UgcHJlY2VkZW5jZSwgb3RoZXJ3aXNlIHlvdSBjYW4ndFxuICAvLyByZW1vdmUgYSBwYXJhbSB3aXRoIHNldFNlYXJjaFBhcmFtcyh7fSkgaWYgaXQgaGFzIGFuIGluaXRpYWwgdmFsdWVcbiAgZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24obG9jYXRpb24uc2VhcmNoLCBoYXNTZXRTZWFyY2hQYXJhbXNSZWYuY3VycmVudCA/IG51bGwgOiBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQpLCBbbG9jYXRpb24uc2VhcmNoXSk7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGxldCBzZXRTZWFyY2hQYXJhbXMgPSBSZWFjdC51c2VDYWxsYmFjaygobmV4dEluaXQsIG5hdmlnYXRlT3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IG5ld1NlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyh0eXBlb2YgbmV4dEluaXQgPT09IFwiZnVuY3Rpb25cIiA/IG5leHRJbml0KHNlYXJjaFBhcmFtcykgOiBuZXh0SW5pdCk7XG4gICAgaGFzU2V0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIG5hdmlnYXRlKFwiP1wiICsgbmV3U2VhcmNoUGFyYW1zLCBuYXZpZ2F0ZU9wdGlvbnMpO1xuICB9LCBbbmF2aWdhdGUsIHNlYXJjaFBhcmFtc10pO1xuICByZXR1cm4gW3NlYXJjaFBhcmFtcywgc2V0U2VhcmNoUGFyYW1zXTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlQ2xpZW50U2lkZVN1Ym1pc3Npb24oKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGNhbGxpbmcgc3VibWl0IGR1cmluZyB0aGUgc2VydmVyIHJlbmRlci4gXCIgKyBcIlRyeSBjYWxsaW5nIHN1Ym1pdCB3aXRoaW4gYSBgdXNlRWZmZWN0YCBvciBjYWxsYmFjayBpbnN0ZWFkLlwiKTtcbiAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBtYXkgYmUgdXNlZCB0byBwcm9ncmFtbWF0aWNhbGx5IHN1Ym1pdCBhIGZvcm0gKG9yXG4gKiBzb21lIGFyYml0cmFyeSBkYXRhKSB0byB0aGUgc2VydmVyLlxuICovXG5mdW5jdGlvbiB1c2VTdWJtaXQoKSB7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VTdWJtaXQpO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCBjdXJyZW50Um91dGVJZCA9IFVOU0FGRV91c2VSb3V0ZUlkKCk7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAodGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICB2YWxpZGF0ZUNsaWVudFNpZGVTdWJtaXNzaW9uKCk7XG4gICAgbGV0IHtcbiAgICAgIGFjdGlvbixcbiAgICAgIG1ldGhvZCxcbiAgICAgIGVuY1R5cGUsXG4gICAgICBmb3JtRGF0YSxcbiAgICAgIGJvZHlcbiAgICB9ID0gZ2V0Rm9ybVN1Ym1pc3Npb25JbmZvKHRhcmdldCwgYmFzZW5hbWUpO1xuICAgIHJvdXRlci5uYXZpZ2F0ZShvcHRpb25zLmFjdGlvbiB8fCBhY3Rpb24sIHtcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0aW9ucy5wcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICBmb3JtRGF0YSxcbiAgICAgIGJvZHksXG4gICAgICBmb3JtTWV0aG9kOiBvcHRpb25zLm1ldGhvZCB8fCBtZXRob2QsXG4gICAgICBmb3JtRW5jVHlwZTogb3B0aW9ucy5lbmNUeXBlIHx8IGVuY1R5cGUsXG4gICAgICByZXBsYWNlOiBvcHRpb25zLnJlcGxhY2UsXG4gICAgICBzdGF0ZTogb3B0aW9ucy5zdGF0ZSxcbiAgICAgIGZyb21Sb3V0ZUlkOiBjdXJyZW50Um91dGVJZFxuICAgIH0pO1xuICB9LCBbcm91dGVyLCBiYXNlbmFtZSwgY3VycmVudFJvdXRlSWRdKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgaW1wbGVtZW50YXRpb24gZm9yIGZldGNoZXIuc3VibWl0XG4gKi9cbmZ1bmN0aW9uIHVzZVN1Ym1pdEZldGNoZXIoZmV0Y2hlcktleSwgZmV0Y2hlclJvdXRlSWQpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVN1Ym1pdEZldGNoZXIpO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAodGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICB2YWxpZGF0ZUNsaWVudFNpZGVTdWJtaXNzaW9uKCk7XG4gICAgbGV0IHtcbiAgICAgIGFjdGlvbixcbiAgICAgIG1ldGhvZCxcbiAgICAgIGVuY1R5cGUsXG4gICAgICBmb3JtRGF0YSxcbiAgICAgIGJvZHlcbiAgICB9ID0gZ2V0Rm9ybVN1Ym1pc3Npb25JbmZvKHRhcmdldCwgYmFzZW5hbWUpO1xuICAgICEoZmV0Y2hlclJvdXRlSWQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIk5vIHJvdXRlSWQgYXZhaWxhYmxlIGZvciB1c2VGZXRjaGVyKClcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByb3V0ZXIuZmV0Y2goZmV0Y2hlcktleSwgZmV0Y2hlclJvdXRlSWQsIG9wdGlvbnMuYWN0aW9uIHx8IGFjdGlvbiwge1xuICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRpb25zLnByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIGZvcm1EYXRhLFxuICAgICAgYm9keSxcbiAgICAgIGZvcm1NZXRob2Q6IG9wdGlvbnMubWV0aG9kIHx8IG1ldGhvZCxcbiAgICAgIGZvcm1FbmNUeXBlOiBvcHRpb25zLmVuY1R5cGUgfHwgZW5jVHlwZVxuICAgIH0pO1xuICB9LCBbcm91dGVyLCBiYXNlbmFtZSwgZmV0Y2hlcktleSwgZmV0Y2hlclJvdXRlSWRdKTtcbn1cbi8vIHY3OiBFdmVudHVhbGx5IHdlIHNob3VsZCBkZXByZWNhdGUgdGhpcyBlbnRpcmVseSBpbiBmYXZvciBvZiB1c2luZyB0aGVcbi8vIHJvdXRlciBtZXRob2QgZGlyZWN0bHk/XG5mdW5jdGlvbiB1c2VGb3JtQWN0aW9uKGFjdGlvbiwgX3RlbXAyKSB7XG4gIGxldCB7XG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDI7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHJvdXRlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX1JvdXRlQ29udGV4dCk7XG4gICFyb3V0ZUNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZvcm1BY3Rpb24gbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dFwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgW21hdGNoXSA9IHJvdXRlQ29udGV4dC5tYXRjaGVzLnNsaWNlKC0xKTtcbiAgLy8gU2hhbGxvdyBjbG9uZSBwYXRoIHNvIHdlIGNhbiBtb2RpZnkgaXQgYmVsb3csIG90aGVyd2lzZSB3ZSBtb2RpZnkgdGhlXG4gIC8vIG9iamVjdCByZWZlcmVuY2VkIGJ5IHVzZU1lbW8gaW5zaWRlIHVzZVJlc29sdmVkUGF0aFxuICBsZXQgcGF0aCA9IF9leHRlbmRzKHt9LCB1c2VSZXNvbHZlZFBhdGgoYWN0aW9uID8gYWN0aW9uIDogXCIuXCIsIHtcbiAgICByZWxhdGl2ZVxuICB9KSk7XG4gIC8vIFByZXZpb3VzbHkgd2Ugc2V0IHRoZSBkZWZhdWx0IGFjdGlvbiB0byBcIi5cIi4gVGhlIHByb2JsZW0gd2l0aCB0aGlzIGlzIHRoYXRcbiAgLy8gYHVzZVJlc29sdmVkUGF0aChcIi5cIilgIGV4Y2x1ZGVzIHNlYXJjaCBwYXJhbXMgb2YgdGhlIHJlc29sdmVkIFVSTC4gVGhpcyBpc1xuICAvLyB0aGUgaW50ZW5kZWQgYmVoYXZpb3Igb2Ygd2hlbiBcIi5cIiBpcyBzcGVjaWZpY2FsbHkgcHJvdmlkZWQgYXNcbiAgLy8gdGhlIGZvcm0gYWN0aW9uLCBidXQgaW5jb25zaXN0ZW50IHcvIGJyb3dzZXJzIHdoZW4gdGhlIGFjdGlvbiBpcyBvbWl0dGVkLlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlbWl4L2lzc3Vlcy85MjdcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgaWYgKGFjdGlvbiA9PSBudWxsKSB7XG4gICAgLy8gU2FmZSB0byB3cml0ZSB0byB0aGlzIGRpcmVjdGx5IGhlcmUgc2luY2UgaWYgYWN0aW9uIHdhcyB1bmRlZmluZWQsIHdlXG4gICAgLy8gd291bGQgaGF2ZSBjYWxsZWQgdXNlUmVzb2x2ZWRQYXRoKFwiLlwiKSB3aGljaCB3aWxsIG5ldmVyIGluY2x1ZGUgYSBzZWFyY2hcbiAgICBwYXRoLnNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaDtcbiAgICAvLyBXaGVuIGdyYWJiaW5nIHNlYXJjaCBwYXJhbXMgZnJvbSB0aGUgVVJMLCByZW1vdmUgdGhlIGF1dG9tYXRpY2FsbHlcbiAgICAvLyBpbnNlcnRlZCA/aW5kZXggcGFyYW0gc28gd2UgbWF0Y2ggdGhlIHVzZVJlc29sdmVkUGF0aCBzZWFyY2ggYmVoYXZpb3JcbiAgICAvLyB3aGljaCB3b3VsZCBub3QgaW5jbHVkZSA/aW5kZXhcbiAgICBpZiAobWF0Y2gucm91dGUuaW5kZXgpIHtcbiAgICAgIGxldCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHBhdGguc2VhcmNoKTtcbiAgICAgIHBhcmFtcy5kZWxldGUoXCJpbmRleFwiKTtcbiAgICAgIHBhdGguc2VhcmNoID0gcGFyYW1zLnRvU3RyaW5nKCkgPyBcIj9cIiArIHBhcmFtcy50b1N0cmluZygpIDogXCJcIjtcbiAgICB9XG4gIH1cbiAgaWYgKCghYWN0aW9uIHx8IGFjdGlvbiA9PT0gXCIuXCIpICYmIG1hdGNoLnJvdXRlLmluZGV4KSB7XG4gICAgcGF0aC5zZWFyY2ggPSBwYXRoLnNlYXJjaCA/IHBhdGguc2VhcmNoLnJlcGxhY2UoL15cXD8vLCBcIj9pbmRleCZcIikgOiBcIj9pbmRleFwiO1xuICB9XG4gIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUgcHJpb3JcbiAgLy8gdG8gY3JlYXRpbmcgdGhlIGZvcm0gYWN0aW9uLiAgSWYgdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiBqdXN0IHVzZVxuICAvLyB0aGUgcmF3IGJhc2VuYW1lIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGVcbiAgLy8gcHJlc2VuY2Ugb2YgYSB0cmFpbGluZyBzbGFzaCBvbiByb290IGFjdGlvbnNcbiAgaWYgKGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICB9XG4gIHJldHVybiBjcmVhdGVQYXRoKHBhdGgpO1xufVxuZnVuY3Rpb24gY3JlYXRlRmV0Y2hlckZvcm0oZmV0Y2hlcktleSwgcm91dGVJZCkge1xuICBsZXQgRmV0Y2hlckZvcm0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICAgIGxldCBzdWJtaXQgPSB1c2VTdWJtaXRGZXRjaGVyKGZldGNoZXJLZXksIHJvdXRlSWQpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtSW1wbCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICByZWY6IHJlZixcbiAgICAgIHN1Ym1pdDogc3VibWl0XG4gICAgfSkpO1xuICB9KTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEZldGNoZXJGb3JtLmRpc3BsYXlOYW1lID0gXCJmZXRjaGVyLkZvcm1cIjtcbiAgfVxuICByZXR1cm4gRmV0Y2hlckZvcm07XG59XG5sZXQgZmV0Y2hlcklkID0gMDtcbi8qKlxuICogSW50ZXJhY3RzIHdpdGggcm91dGUgbG9hZGVycyBhbmQgYWN0aW9ucyB3aXRob3V0IGNhdXNpbmcgYSBuYXZpZ2F0aW9uLiBHcmVhdFxuICogZm9yIGFueSBpbnRlcmFjdGlvbiB0aGF0IHN0YXlzIG9uIHRoZSBzYW1lIHBhZ2UuXG4gKi9cbmZ1bmN0aW9uIHVzZUZldGNoZXIoKSB7XG4gIHZhciBfcm91dGUkbWF0Y2hlcztcbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZUZldGNoZXIpO1xuICBsZXQgcm91dGUgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9Sb3V0ZUNvbnRleHQpO1xuICAhcm91dGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZldGNoZXIgbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dFwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgcm91dGVJZCA9IChfcm91dGUkbWF0Y2hlcyA9IHJvdXRlLm1hdGNoZXNbcm91dGUubWF0Y2hlcy5sZW5ndGggLSAxXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yb3V0ZSRtYXRjaGVzLnJvdXRlLmlkO1xuICAhKHJvdXRlSWQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZldGNoZXIgY2FuIG9ubHkgYmUgdXNlZCBvbiByb3V0ZXMgdGhhdCBjb250YWluIGEgdW5pcXVlIFxcXCJpZFxcXCJcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IFtmZXRjaGVyS2V5XSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IFN0cmluZygrK2ZldGNoZXJJZCkpO1xuICBsZXQgW0Zvcm1dID0gUmVhY3QudXNlU3RhdGUoKCkgPT4ge1xuICAgICFyb3V0ZUlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJObyByb3V0ZUlkIGF2YWlsYWJsZSBmb3IgZmV0Y2hlci5Gb3JtKClcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gY3JlYXRlRmV0Y2hlckZvcm0oZmV0Y2hlcktleSwgcm91dGVJZCk7XG4gIH0pO1xuICBsZXQgW2xvYWRdID0gUmVhY3QudXNlU3RhdGUoKCkgPT4gaHJlZiA9PiB7XG4gICAgIXJvdXRlciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiTm8gcm91dGVyIGF2YWlsYWJsZSBmb3IgZmV0Y2hlci5sb2FkKClcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhcm91dGVJZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiTm8gcm91dGVJZCBhdmFpbGFibGUgZm9yIGZldGNoZXIubG9hZCgpXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcm91dGVyLmZldGNoKGZldGNoZXJLZXksIHJvdXRlSWQsIGhyZWYpO1xuICB9KTtcbiAgbGV0IHN1Ym1pdCA9IHVzZVN1Ym1pdEZldGNoZXIoZmV0Y2hlcktleSwgcm91dGVJZCk7XG4gIGxldCBmZXRjaGVyID0gcm91dGVyLmdldEZldGNoZXIoZmV0Y2hlcktleSk7XG4gIGxldCBmZXRjaGVyV2l0aENvbXBvbmVudHMgPSBSZWFjdC51c2VNZW1vKCgpID0+IF9leHRlbmRzKHtcbiAgICBGb3JtLFxuICAgIHN1Ym1pdCxcbiAgICBsb2FkXG4gIH0sIGZldGNoZXIpLCBbZmV0Y2hlciwgRm9ybSwgc3VibWl0LCBsb2FkXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gSXMgdGhpcyBidXN0ZWQgd2hlbiB0aGUgUmVhY3QgdGVhbSBnZXRzIHJlYWwgd2VpcmQgYW5kIGNhbGxzIGVmZmVjdHNcbiAgICAvLyB0d2ljZSBvbiBtb3VudD8gIFdlIHJlYWxseSBqdXN0IG5lZWQgdG8gZ2FyYmFnZSBjb2xsZWN0IGhlcmUgd2hlbiB0aGlzXG4gICAgLy8gZmV0Y2hlciBpcyBubyBsb25nZXIgYXJvdW5kLlxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoIXJvdXRlcikge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJObyByb3V0ZXIgYXZhaWxhYmxlIHRvIGNsZWFuIHVwIGZyb20gdXNlRmV0Y2hlcigpXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByb3V0ZXIuZGVsZXRlRmV0Y2hlcihmZXRjaGVyS2V5KTtcbiAgICB9O1xuICB9LCBbcm91dGVyLCBmZXRjaGVyS2V5XSk7XG4gIHJldHVybiBmZXRjaGVyV2l0aENvbXBvbmVudHM7XG59XG4vKipcbiAqIFByb3ZpZGVzIGFsbCBmZXRjaGVycyBjdXJyZW50bHkgb24gdGhlIHBhZ2UuIFVzZWZ1bCBmb3IgbGF5b3V0cyBhbmQgcGFyZW50XG4gKiByb3V0ZXMgdGhhdCBuZWVkIHRvIHByb3ZpZGUgcGVuZGluZy9vcHRpbWlzdGljIFVJIHJlZ2FyZGluZyB0aGUgZmV0Y2guXG4gKi9cbmZ1bmN0aW9uIHVzZUZldGNoZXJzKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VGZXRjaGVycyk7XG4gIHJldHVybiBbLi4uc3RhdGUuZmV0Y2hlcnMudmFsdWVzKCldO1xufVxuY29uc3QgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZID0gXCJyZWFjdC1yb3V0ZXItc2Nyb2xsLXBvc2l0aW9uc1wiO1xubGV0IHNhdmVkU2Nyb2xsUG9zaXRpb25zID0ge307XG4vKipcbiAqIFdoZW4gcmVuZGVyZWQgaW5zaWRlIGEgUm91dGVyUHJvdmlkZXIsIHdpbGwgcmVzdG9yZSBzY3JvbGwgcG9zaXRpb25zIG9uIG5hdmlnYXRpb25zXG4gKi9cbmZ1bmN0aW9uIHVzZVNjcm9sbFJlc3RvcmF0aW9uKF90ZW1wMykge1xuICBsZXQge1xuICAgIGdldEtleSxcbiAgICBzdG9yYWdlS2V5XG4gIH0gPSBfdGVtcDMgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAzO1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlU2Nyb2xsUmVzdG9yYXRpb24pO1xuICBsZXQge1xuICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbixcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXRcbiAgfSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVNjcm9sbFJlc3RvcmF0aW9uKTtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbWF0Y2hlcyA9IHVzZU1hdGNoZXMoKTtcbiAgbGV0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uKCk7XG4gIC8vIFRyaWdnZXIgbWFudWFsIHNjcm9sbCByZXN0b3JhdGlvbiB3aGlsZSB3ZSdyZSBhY3RpdmVcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwibWFudWFsXCI7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJhdXRvXCI7XG4gICAgfTtcbiAgfSwgW10pO1xuICAvLyBTYXZlIHBvc2l0aW9ucyBvbiBwYWdlaGlkZVxuICB1c2VQYWdlSGlkZShSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKG5hdmlnYXRpb24uc3RhdGUgPT09IFwiaWRsZVwiKSB7XG4gICAgICBsZXQga2V5ID0gKGdldEtleSA/IGdldEtleShsb2NhdGlvbiwgbWF0Y2hlcykgOiBudWxsKSB8fCBsb2NhdGlvbi5rZXk7XG4gICAgICBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldID0gd2luZG93LnNjcm9sbFk7XG4gICAgfVxuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oc3RvcmFnZUtleSB8fCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVksIEpTT04uc3RyaW5naWZ5KHNhdmVkU2Nyb2xsUG9zaXRpb25zKSk7XG4gICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcImF1dG9cIjtcbiAgfSwgW3N0b3JhZ2VLZXksIGdldEtleSwgbmF2aWdhdGlvbi5zdGF0ZSwgbG9jYXRpb24sIG1hdGNoZXNdKSk7XG4gIC8vIFJlYWQgaW4gYW55IHNhdmVkIHNjcm9sbCBsb2NhdGlvbnNcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgc2Vzc2lvblBvc2l0aW9ucyA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oc3RvcmFnZUtleSB8fCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVkpO1xuICAgICAgICBpZiAoc2Vzc2lvblBvc2l0aW9ucykge1xuICAgICAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gSlNPTi5wYXJzZShzZXNzaW9uUG9zaXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBuby1vcCwgdXNlIGRlZmF1bHQgZW1wdHkgb2JqZWN0XG4gICAgICB9XG4gICAgfSwgW3N0b3JhZ2VLZXldKTtcbiAgICAvLyBFbmFibGUgc2Nyb2xsIHJlc3RvcmF0aW9uIGluIHRoZSByb3V0ZXJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgbGV0IGdldEtleVdpdGhvdXRCYXNlbmFtZSA9IGdldEtleSAmJiBiYXNlbmFtZSAhPT0gXCIvXCIgPyAobG9jYXRpb24sIG1hdGNoZXMpID0+IGdldEtleSggLy8gU3RyaXAgdGhlIGJhc2VuYW1lIHRvIG1hdGNoIHVzZUxvY2F0aW9uKClcbiAgICAgIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICBwYXRobmFtZTogc3RyaXBCYXNlbmFtZShsb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KSwgbWF0Y2hlcykgOiBnZXRLZXk7XG4gICAgICBsZXQgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uID0gcm91dGVyID09IG51bGwgPyB2b2lkIDAgOiByb3V0ZXIuZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24oc2F2ZWRTY3JvbGxQb3NpdGlvbnMsICgpID0+IHdpbmRvdy5zY3JvbGxZLCBnZXRLZXlXaXRob3V0QmFzZW5hbWUpO1xuICAgICAgcmV0dXJuICgpID0+IGRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbiAmJiBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24oKTtcbiAgICB9LCBbcm91dGVyLCBiYXNlbmFtZSwgZ2V0S2V5XSk7XG4gICAgLy8gUmVzdG9yZSBzY3JvbGxpbmcgd2hlbiBzdGF0ZS5yZXN0b3JlU2Nyb2xsUG9zaXRpb24gY2hhbmdlc1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAvLyBFeHBsaWNpdCBmYWxzZSBtZWFucyBkb24ndCBkbyBhbnl0aGluZyAodXNlZCBmb3Igc3VibWlzc2lvbnMpXG4gICAgICBpZiAocmVzdG9yZVNjcm9sbFBvc2l0aW9uID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBiZWVuIGhlcmUgYmVmb3JlLCBzY3JvbGwgdG8gaXRcbiAgICAgIGlmICh0eXBlb2YgcmVzdG9yZVNjcm9sbFBvc2l0aW9uID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCByZXN0b3JlU2Nyb2xsUG9zaXRpb24pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyB0cnkgdG8gc2Nyb2xsIHRvIHRoZSBoYXNoXG4gICAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgICBsZXQgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkZWNvZGVVUklDb21wb25lbnQobG9jYXRpb24uaGFzaC5zbGljZSgxKSkpO1xuICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICBlbC5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRG9uJ3QgcmVzZXQgaWYgdGhpcyBuYXZpZ2F0aW9uIG9wdGVkIG91dFxuICAgICAgaWYgKHByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBvdGhlcndpc2UgZ28gdG8gdGhlIHRvcCBvbiBuZXcgbG9jYXRpb25zXG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgfSwgW2xvY2F0aW9uLCByZXN0b3JlU2Nyb2xsUG9zaXRpb24sIHByZXZlbnRTY3JvbGxSZXNldF0pO1xuICB9XG59XG4vKipcbiAqIFNldHVwIGEgY2FsbGJhY2sgdG8gYmUgZmlyZWQgb24gdGhlIHdpbmRvdydzIGBiZWZvcmV1bmxvYWRgIGV2ZW50LiBUaGlzIGlzXG4gKiB1c2VmdWwgZm9yIHNhdmluZyBzb21lIGRhdGEgdG8gYHdpbmRvdy5sb2NhbFN0b3JhZ2VgIGp1c3QgYmVmb3JlIHRoZSBwYWdlXG4gKiByZWZyZXNoZXMuXG4gKlxuICogTm90ZTogVGhlIGBjYWxsYmFja2AgYXJndW1lbnQgc2hvdWxkIGJlIGEgZnVuY3Rpb24gY3JlYXRlZCB3aXRoXG4gKiBgUmVhY3QudXNlQ2FsbGJhY2soKWAuXG4gKi9cbmZ1bmN0aW9uIHVzZUJlZm9yZVVubG9hZChjYWxsYmFjaywgb3B0aW9ucykge1xuICBsZXQge1xuICAgIGNhcHR1cmVcbiAgfSA9IG9wdGlvbnMgfHwge307XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IG9wdHMgPSBjYXB0dXJlICE9IG51bGwgPyB7XG4gICAgICBjYXB0dXJlXG4gICAgfSA6IHVuZGVmaW5lZDtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICB9O1xuICB9LCBbY2FsbGJhY2ssIGNhcHR1cmVdKTtcbn1cbi8qKlxuICogU2V0dXAgYSBjYWxsYmFjayB0byBiZSBmaXJlZCBvbiB0aGUgd2luZG93J3MgYHBhZ2VoaWRlYCBldmVudC4gVGhpcyBpc1xuICogdXNlZnVsIGZvciBzYXZpbmcgc29tZSBkYXRhIHRvIGB3aW5kb3cubG9jYWxTdG9yYWdlYCBqdXN0IGJlZm9yZSB0aGUgcGFnZVxuICogcmVmcmVzaGVzLiAgVGhpcyBldmVudCBpcyBiZXR0ZXIgc3VwcG9ydGVkIHRoYW4gYmVmb3JldW5sb2FkIGFjcm9zcyBicm93c2Vycy5cbiAqXG4gKiBOb3RlOiBUaGUgYGNhbGxiYWNrYCBhcmd1bWVudCBzaG91bGQgYmUgYSBmdW5jdGlvbiBjcmVhdGVkIHdpdGhcbiAqIGBSZWFjdC51c2VDYWxsYmFjaygpYC5cbiAqL1xuZnVuY3Rpb24gdXNlUGFnZUhpZGUoY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgbGV0IHtcbiAgICBjYXB0dXJlXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBvcHRzID0gY2FwdHVyZSAhPSBudWxsID8ge1xuICAgICAgY2FwdHVyZVxuICAgIH0gOiB1bmRlZmluZWQ7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIH07XG4gIH0sIFtjYWxsYmFjaywgY2FwdHVyZV0pO1xufVxuLyoqXG4gKiBXcmFwcGVyIGFyb3VuZCB1c2VCbG9ja2VyIHRvIHNob3cgYSB3aW5kb3cuY29uZmlybSBwcm9tcHQgdG8gdXNlcnMgaW5zdGVhZFxuICogb2YgYnVpbGRpbmcgYSBjdXN0b20gVUkgd2l0aCB1c2VCbG9ja2VyLlxuICpcbiAqIFdhcm5pbmc6IFRoaXMgaGFzICphIGxvdCBvZiByb3VnaCBlZGdlcyogYW5kIGJlaGF2ZXMgdmVyeSBkaWZmZXJlbnRseSAoYW5kXG4gKiB2ZXJ5IGluY29ycmVjdGx5IGluIHNvbWUgY2FzZXMpIGFjcm9zcyBicm93c2VycyBpZiB1c2VyIGNsaWNrIGFkZGl0aW9uXG4gKiBiYWNrL2ZvcndhcmQgbmF2aWdhdGlvbnMgd2hpbGUgdGhlIGNvbmZpcm0gaXMgb3Blbi4gIFVzZSBhdCB5b3VyIG93biByaXNrLlxuICovXG5mdW5jdGlvbiB1c2VQcm9tcHQoX3JlZjgpIHtcbiAgbGV0IHtcbiAgICB3aGVuLFxuICAgIG1lc3NhZ2VcbiAgfSA9IF9yZWY4O1xuICBsZXQgYmxvY2tlciA9IHVuc3RhYmxlX3VzZUJsb2NrZXIod2hlbik7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiKSB7XG4gICAgICBsZXQgcHJvY2VlZCA9IHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpO1xuICAgICAgaWYgKHByb2NlZWQpIHtcbiAgICAgICAgLy8gVGhpcyB0aW1lb3V0IGlzIG5lZWRlZCB0byBhdm9pZCBhIHdlaXJkIFwicmFjZVwiIG9uIFBPUCBuYXZpZ2F0aW9uc1xuICAgICAgICAvLyBiZXR3ZWVuIHRoZSBgd2luZG93Lmhpc3RvcnlgIHJldmVydCBuYXZpZ2F0aW9uIGFuZCB0aGUgcmVzdWx0IG9mXG4gICAgICAgIC8vIGB3aW5kb3cuY29uZmlybWBcbiAgICAgICAgc2V0VGltZW91dChibG9ja2VyLnByb2NlZWQsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmxvY2tlci5yZXNldCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2Jsb2NrZXIsIG1lc3NhZ2VdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgIXdoZW4pIHtcbiAgICAgIGJsb2NrZXIucmVzZXQoKTtcbiAgICB9XG4gIH0sIFtibG9ja2VyLCB3aGVuXSk7XG59XG4vLyNlbmRyZWdpb25cblxuZXhwb3J0IHsgQnJvd3NlclJvdXRlciwgRm9ybSwgSGFzaFJvdXRlciwgTGluaywgTmF2TGluaywgU2Nyb2xsUmVzdG9yYXRpb24sIHVzZVNjcm9sbFJlc3RvcmF0aW9uIGFzIFVOU0FGRV91c2VTY3JvbGxSZXN0b3JhdGlvbiwgY3JlYXRlQnJvd3NlclJvdXRlciwgY3JlYXRlSGFzaFJvdXRlciwgY3JlYXRlU2VhcmNoUGFyYW1zLCBIaXN0b3J5Um91dGVyIGFzIHVuc3RhYmxlX0hpc3RvcnlSb3V0ZXIsIHVzZVByb21wdCBhcyB1bnN0YWJsZV91c2VQcm9tcHQsIHVzZUJlZm9yZVVubG9hZCwgdXNlRmV0Y2hlciwgdXNlRmV0Y2hlcnMsIHVzZUZvcm1BY3Rpb24sIHVzZUxpbmtDbGlja0hhbmRsZXIsIHVzZVNlYXJjaFBhcmFtcywgdXNlU3VibWl0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQmFja1RvVG9wKCkge1xyXG4gIGNvbnN0IFt2aXNpYmxlLCBzZXRWaXNpYmxlXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGNvbnN0IGhhbmRsZVNjcm9sbFZpc2liaWxpdHkgPSAoKSA9PiB7XHJcbiAgICAgIHdpbmRvdy5wYWdlWU9mZnNldCA+IDMwMCA/IHNldFZpc2libGUodHJ1ZSkgOiBzZXRWaXNpYmxlKGZhbHNlKTtcclxuICAgIH07XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaGFuZGxlU2Nyb2xsVmlzaWJpbGl0eSk7XHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaGFuZGxlU2Nyb2xsVmlzaWJpbGl0eSk7XHJcbiAgICB9O1xyXG4gIH0sIFtdKTtcclxuICBjb25zdCBoYW5kbGVTY3JvbGxPblRvcCA9ICgpID0+IHtcclxuICAgIHdpbmRvdy5zY3JvbGxUbyh7IHRvcDogMCwgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2PlxyXG4gICAgICB7dmlzaWJsZSAmJiAoXHJcbiAgICAgICAgPHNwYW4+XHJcbiAgICAgICAgICA8ZGl2IG9uQ2xpY2s9e2hhbmRsZVNjcm9sbE9uVG9wfSBjbGFzc05hbWU9J2JhY2stdG8tdG9wJz5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2Fycm93dXAnPlxyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgXlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9zcGFuPlxyXG4gICAgICApfVxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufVxyXG4iLCJcclxuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBCYWNrVG9Ub3AgZnJvbSBcIi4vQmFja1RvVG9wXCI7XHJcbi8vIGltcG9ydCBTZWFyY2hOdXRyaXRpb24gZnJvbSBcIi4vU2VhcmNoTnV0cml0aW9uXCI7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbmNvbnN0IEthbG9yaWplID0gKCkgPT4ge1xyXG5cclxuXHJcbiAgICBjb25zdCBbaW5wdXRWYWx1ZTEsIHNldElucHV0VmFsdWUxXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG5cclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMiwgc2V0SW5wdXRWYWx1ZTJdID0gdXNlU3RhdGUoXCJcIik7XHJcbiAgICBjb25zdCBbaW5wdXRWYWx1ZTMsIHNldElucHV0VmFsdWUzXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWU0LCBzZXRJbnB1dFZhbHVlNF0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlNSwgc2V0SW5wdXRWYWx1ZTVdID0gdXNlU3RhdGUoXCJcIik7XHJcbiAgICBjb25zdCBbaW5wdXRWYWx1ZTYsIHNldElucHV0VmFsdWU2XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWU3LCBzZXRJbnB1dFZhbHVlN10gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlOCwgc2V0SW5wdXRWYWx1ZThdID0gdXNlU3RhdGUoXCJcIik7XHJcbiAgICBjb25zdCBbaW5wdXRWYWx1ZTksIHNldElucHV0VmFsdWU5XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUxMCwgc2V0SW5wdXRWYWx1ZTEwXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUxMSwgc2V0SW5wdXRWYWx1ZTExXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUxMiwgc2V0SW5wdXRWYWx1ZTEyXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUxMywgc2V0SW5wdXRWYWx1ZTEzXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUxNCwgc2V0SW5wdXRWYWx1ZTE0XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUxNSwgc2V0SW5wdXRWYWx1ZTE1XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUxNiwgc2V0SW5wdXRWYWx1ZTE2XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUxNywgc2V0SW5wdXRWYWx1ZTE3XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUxOCwgc2V0SW5wdXRWYWx1ZTE4XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUxOSwgc2V0SW5wdXRWYWx1ZTE5XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUyMCwgc2V0SW5wdXRWYWx1ZTIwXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUyMSwgc2V0SW5wdXRWYWx1ZTIxXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUyMiwgc2V0SW5wdXRWYWx1ZTIyXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUyMywgc2V0SW5wdXRWYWx1ZTIzXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUyNCwgc2V0SW5wdXRWYWx1ZTI0XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUyNSwgc2V0SW5wdXRWYWx1ZTI1XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUyNiwgc2V0SW5wdXRWYWx1ZTI2XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUyNywgc2V0SW5wdXRWYWx1ZTI3XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUyOCwgc2V0SW5wdXRWYWx1ZTI4XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUyOSwgc2V0SW5wdXRWYWx1ZTI5XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUzMCwgc2V0SW5wdXRWYWx1ZTMwXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUzMSwgc2V0SW5wdXRWYWx1ZTMxXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUzMiwgc2V0SW5wdXRWYWx1ZTMyXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUzMywgc2V0SW5wdXRWYWx1ZTMzXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUzNCwgc2V0SW5wdXRWYWx1ZTM0XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUzNSwgc2V0SW5wdXRWYWx1ZTM1XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUzNiwgc2V0SW5wdXRWYWx1ZTM2XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUzNywgc2V0SW5wdXRWYWx1ZTM3XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUzOCwgc2V0SW5wdXRWYWx1ZTM4XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUzOSwgc2V0SW5wdXRWYWx1ZTM5XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWU0MCwgc2V0SW5wdXRWYWx1ZTQwXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWU0MSwgc2V0SW5wdXRWYWx1ZTQxXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWU0Miwgc2V0SW5wdXRWYWx1ZTQyXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWU0Mywgc2V0SW5wdXRWYWx1ZTQzXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWU0NCwgc2V0SW5wdXRWYWx1ZTQ0XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWU0NSwgc2V0SW5wdXRWYWx1ZTQ1XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWU0Niwgc2V0SW5wdXRWYWx1ZTQ2XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWU0Nywgc2V0SW5wdXRWYWx1ZTQ3XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWU0OCwgc2V0SW5wdXRWYWx1ZTQ4XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWU0OSwgc2V0SW5wdXRWYWx1ZTQ5XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWU1MCwgc2V0SW5wdXRWYWx1ZTUwXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG5cclxuXHJcblxyXG4gICAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xyXG5cclxuXHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTEgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElucHV0VmFsdWUxKGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUyID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMihlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZVZhbHVlMyA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTMoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTQgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElucHV0VmFsdWU0KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWU1ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlNShlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZVZhbHVlNiA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTYoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTcgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElucHV0VmFsdWU3KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWU4ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlOChlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZVZhbHVlOSA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTkoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTEwID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMTAoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTExID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMTEoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTEyID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMTIoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTEzID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMTMoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTE0ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMTQoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTE1ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMTUoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTE2ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMTYoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTE3ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMTcoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTE4ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMTgoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTE5ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMTkoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTIwID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMjAoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTIxID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMjEoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTIyID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMjIoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTIzID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMjMoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTI0ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMjQoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTI1ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMjUoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTI2ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMjYoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTI3ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMjcoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTI4ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMjgoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTI5ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMjkoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTMwID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMzAoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTMxID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMzEoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTMyID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMzIoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTMzID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMzMoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTM0ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMzQoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTM1ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMzUoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTM2ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMzYoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTM3ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMzcoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTM4ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMzgoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTM5ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMzkoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTQwID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlNDAoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTQxID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlNDEoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTQyID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlNDIoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTQzID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlNDMoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTQ0ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlNDQoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTQ1ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlNDUoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTQ2ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlNDYoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTQ3ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlNDcoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTQ4ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlNDgoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTQ5ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlNDkoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTUwID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlNTAoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICByZXR1cm4gKFxyXG5cclxuICAgICAgICA8PlxyXG5cclxuICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cImhyYW5hXCI+XHJcbiAgICAgICAgICAgICAgICA8dGhlYWQgPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoID5IcmFuYTwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5nIG1sPC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlByb3RlaW48L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGg+VUg8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGg+TWFzdDwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5LYWxvcmlqZTwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgICAgICAgICA8dGJvZHkgID5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwiaGlkcmF0aVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+UGlyaW5hxI08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWUxXCIgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUxfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTF9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxICogMC4wNzYpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJ1Z0hpZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMSAqIDAuNzgpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJtYXN0XCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMSAqIDMuNTEpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwiaGlkcmF0aVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+T3ZzZW5lIHBhaHVsamljZTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTJ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyICogMC4xMzkpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyICogMC42NDQpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMiAqIDMuNzQpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwiaGlkcmF0aVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+S3JvbXBpcjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlM1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTN9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUzICogMC4wOSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTMgKiAwLjIpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMyAqIDAuODUpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwiaGlkcmF0aVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+S3VrdXJ1em5pIGdyaXo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlNH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWU0fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNCAqIDAuMDcpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0ICogMC43NykudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTQgKiAwLjAxNSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTQgKiAzLjUpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwiaGlkcmF0aVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+xaBwYWdldGUgZHVydW08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlNX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWU1fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNSAqIDAuMTIpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU1ICogMC42MykudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTUgKiAwLjAxOCkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTUgKiAzLjM3KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cInByb3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPlNvxI1pdm88L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTZcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlNn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWU2fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNiAqIDAuMjUpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU2ICogMC42KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNiAqIDAuMDEpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU2ICogMy40KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cInByb3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPsW9dXRpIGdyYcWhYWs8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTdcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlN31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWU3fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNyAqIDAuMjIpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU3ICogMC41NikudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTcgKiAwLjAxKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNyAqIDMuMSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJwcm90XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5QYXN1bGo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZThcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlOH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWU4fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlOCAqIDAuMjEpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU4ICogMC40NSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTggKiAwLjAxNikudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTggKiAyLjcpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwicHJvdFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+VHVuYSBrb256ZXJ2YTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlOVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWU5fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU5ICogMC4yMykudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU5ICogMC4yMDkpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU5ICogMi44NCkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJwcm90XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5QaWxldGluYTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMTBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMTB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMTB9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxMCAqIDAuMjA4KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTEwICogMC4wNjgpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxMCAqIDEuNDUpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwicHJvdFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+xIZ1cmXEh2EgcHJzYTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMTFcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMTF9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMTF9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxMSAqIDAuMTkpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTEgKiAwLjAxKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTEgKiAwLjk1KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cInByb3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPkdvdmVkaW5hIG5lbWFzbmE8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTEyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTEyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTEyfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTIgKiAwLjE5NSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxMiAqIDAuMTI1KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTIgKiAxLjE5KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cInByb3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPkp1bmV0aW5hIChidXQpPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWUxM1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUxM31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWUxM30gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTEzICogMC4xOTUpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTMgKiAwLjEyNSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTEzICogMS45MSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJwcm90XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5TdmluamV0aW5hIG5lbWFzbmE8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTE0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTE0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTE0fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTQgKiAwLjIpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTQgKiAwLjA5KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTQgKiAxLjYxKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cInByb3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPkphamUgY2VsbzwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMTVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMTV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMTV9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxNSAqIDYpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTUgKiA1KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTUgKiA1NSAqIDEuNjIpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwibWxla29cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPk1hc2xhYzwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMTZcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMTZ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMTZ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxNiAqIDAuMDEpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTYgKiAwLjgzKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTYgKiA3LjUpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwibWxla29cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPk1sZWtvIDIuOCU8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTE3XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTE3fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTE3fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTcgKiAwLjAzKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTcgKiAwLjA0NSkudG9GaXhlZCgxKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxNyAqIDAuMjgpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxNyAqIDAuNTYpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwibWxla29cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPk1sYWRpIHNpcjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMThcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMTh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMTh9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxOCAqIDAuMTI1KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTggKiAwLjA0KS50b0ZpeGVkKDEpfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTE4ICogMC4wNTUpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxOCAqIDEuMTUpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwibWxla29cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPkpvZ3VydCAyLjglPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWUxOVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUxOX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWUxOX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTE5ICogMC4wMzIpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxOSAqIDAuMDM1KS50b0ZpeGVkKDEpfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTE5ICogMC4wMjgpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxOSAqIDAuNTIpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwibWxla29cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPlBhcm1lemFuPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWUyMFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUyMH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWUyMH0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTIwICogMC40MykudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTIwICogMC4wMykudG9GaXhlZCgxKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyMCAqIDAuMzUpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyMCAqIDUpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwib2lsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5NYXNsaW5vdm8gdWxqZTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMjFcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMjF9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMjF9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyMSAqIDEpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyMSAqIDguODQpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwib2lsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5NYXNsaW5lIHplbGVuZTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMjJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMjJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMjJ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyMiAqIDAuMTQpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyMiAqIDEuNDYpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwib2lsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5Lb2tvc292byB1bGplPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWUyM1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUyM31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWUyM30gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTIzICogMSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTIzICogOC45KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cIm9yYWhcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPktva29zPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWUyNFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUyNH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWUyNH0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTI0ICogMC4wMykudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTI0ICogMC4xNSkudG9GaXhlZCgxKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyNCAqIDAuMzM1KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMjQgKiAzLjU0KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cIm9yYWhcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPkJhZGVtPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWUyNVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUyNX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWUyNX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTI1ICogMC4yMikudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTI1ICogMC4yKS50b0ZpeGVkKDEpfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTI1ICogMC41NCkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTI1ICogNi4zNCkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJvcmFoXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5PcmFoPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWUyNlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUyNn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWUyNn0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTI2ICogMC42MjIpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyNiAqIDYuNzcpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwib3JhaFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+TGXFoW5pazwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMjdcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMjd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMjd9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyNyAqIDAuNjA1KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMjcgKiA2LjU3KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cIm9yYWhcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPlN1bmNva3JldCBzZW1lPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWUyOFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUyOH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWUyOH0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTI4ICogMC4yKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMjggKiAwLjIpLnRvRml4ZWQoMSl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMjggKiAwLjUxNSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTI4ICogNS44NCkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJvcmFoXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5MYW4gc2VtZTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMjlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMjl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMjl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyOSAqIDAuMTgpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyOSAqIDAuMjgpLnRvRml4ZWQoMSl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMjkgKiAwLjQyKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMjkgKiA1LjM0KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cInZvY2VcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPkJhbmFuYTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMzBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMzB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMzB9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUzMCAqIDAuMDEpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUzMCAqIDAuMjMpLnRvRml4ZWQoMSl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTMwICogMC44OSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJ2b2NlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5KYWJ1a2E8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTMxXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTMxfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTMxfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTMxICogMC4xMykudG9GaXhlZCgxKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMzEgKiAwLjUpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwidm9jZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+TmFyYW5kxb5hPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWUzMlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUzMn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWUzMn0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUzMiAqIDAuMTE3KS50b0ZpeGVkKDEpfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUzMiAqIDAuNDcpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwidm9jZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+RGluamE8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTMzXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTMzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTMzfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTMzICogMC44MTYpLnRvRml4ZWQoMSl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTMzICogMC4zNCkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJ2b2NlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5HcmVqcGZydXQ8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTM0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTM0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTM0fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTM0ICogMC4wNykudG9GaXhlZCgxKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMzQgKiAwLjI4KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cInZvY2VcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPkFuYW5hczwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMzVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMzV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMzV9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMzUgKiAwLjEyNikudG9GaXhlZCgxKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMzUgKiAwLjQ4KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cInZvY2VcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPlN1dm8gZ3Jvxb5kamU8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTM2XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTM2fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTM2fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMzYgKiAwLjAxNikudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTM2ICogMC42NikudG9GaXhlZCgxKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUzNiAqIDAuMDEpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUzNiAqIDIuNykudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJrdXB1c1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+S3VwdXM8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTM3XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTM3fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTM3fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMzcgKiAwLjAyKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMzcgKiAwLjAzKS50b0ZpeGVkKDEpfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUzNyAqIDAuMjIpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwia3VwdXNcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPsWgYXJnYXJlcGE8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTM4XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTM4fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTM4fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMzggKiAwLjAxKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMzggKiAwLjA5KS50b0ZpeGVkKDEpfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUzOCAqIDAuNCkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJrdXB1c1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+Q3Zla2xhPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWUzOVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUzOX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWUzOX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTM5ICogMC4wMTYpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUzOSAqIDAuMSkudG9GaXhlZCgxKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMzkgKiAwLjQzKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cImt1cHVzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5Ccm9rb2xpPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWU0MFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWU0MH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWU0MH0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTQwICogMC4wMykudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTQwICogMC4wNykudG9GaXhlZCgxKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNDAgKiAwLjM0KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cImt1cHVzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5LZWxqPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWU0MVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWU0MX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWU0MX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTQxICogMC4wMikudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTQxICogMC4xKS50b0ZpeGVkKDEpfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0MSAqIDAuNSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJrdXB1c1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+xaBwYW5hdDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlNDJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlNDJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlNDJ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0MiAqIDAuMDI5KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNDIgKiAwLjAzNikudG9GaXhlZCgxKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNDIgKiAwLjIzKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cImt1cHVzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5UaWt2aWNhPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWU0M1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWU0M31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWU0M30gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTQzICogMC4wMSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTQzICogMC4wMykudG9GaXhlZCgxKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNDMgKiAwLjE2KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cImt1cHVzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5QcmF6aWx1azwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlNDRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlNDR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlNDR9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0NCAqIDAuMDEpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0NCAqIDAuMTQpLnRvRml4ZWQoMSl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTQ0ICogMC42MSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJrdXB1c1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+UGF0bGlkxb5hbjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlNDVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlNDV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlNDV9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0NSAqIDAuMDExKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNDUgKiAwLjAyOSkudG9GaXhlZCgxKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNDUgKiAwLjE2KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cImt1cHVzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5QYXJhZGFqejwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlNDZcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlNDZ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlNDZ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0NiAqIDAuMDA4OCkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTQ2ICogMC4wMzkpLnRvRml4ZWQoMSl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTQ2ICogMC4xOCkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJrdXB1c1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+UGFyYWRhanogc29rPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWU0N1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWU0N31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWU0N30gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTQ3ICogMC4wMDgpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0NyAqIDAuMDU5KS50b0ZpeGVkKDEpfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0NyAqIDAuMjcpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwiYWxjb2hvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+VmlubyBjcm5vPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWU0OFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWU0OH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWU0OH0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTQ4ICogMC4wMjYpLnRvRml4ZWQoMSl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTQ4ICogMC44NSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJhbGNvaG9sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5QaXZvIHN2ZXRsbzwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlNDlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlNDl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlNDl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0OSAqIDAuMDM1KS50b0ZpeGVkKDEpfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0OSAqIDAuNDMpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwiYWxjb2hvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+UmFraWphPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWU1MFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWU1MH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWU1MH0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTUwICogMy41KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcblxyXG4gICAgICAgICAgICAgICAgPC90Ym9keT5cclxuICAgICAgICAgICAgICAgIDx0Zm9vdD5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+VWt1cG5vPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KE51bWJlcihpbnB1dFZhbHVlMSAqIDAuMDc2KSArIE51bWJlcihpbnB1dFZhbHVlMiAqIDAuMTM5KSArIE51bWJlcihpbnB1dFZhbHVlMyAqIDAuMDkpICsgTnVtYmVyKGlucHV0VmFsdWU0ICogMC4wNylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE51bWJlcihpbnB1dFZhbHVlNSAqIDAuMDEyKSArIE51bWJlcihpbnB1dFZhbHVlNiAqIDAuMjUpICsgTnVtYmVyKGlucHV0VmFsdWU3ICogMC4yMikgKyBOdW1iZXIoaW5wdXRWYWx1ZTggKiAwLjIxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWU5ICogMC4wMjMpICsgTnVtYmVyKGlucHV0VmFsdWUxMCAqIDAuMjA4KSArIE51bWJlcihpbnB1dFZhbHVlMTEgKiAwLjE5KSArIE51bWJlcihpbnB1dFZhbHVlMTIgKiAwLjE5NSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE51bWJlcihpbnB1dFZhbHVlMTMgKiAwLjE5NSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTE0ICogMC4yKSArIE51bWJlcihpbnB1dFZhbHVlMTUgKiA2KSArIE51bWJlcihpbnB1dFZhbHVlMTYgKiAwLjAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWUxNyAqIDAuMDMpICsgTnVtYmVyKGlucHV0VmFsdWUxOCAqIDAuMTI1KSArIE51bWJlcihpbnB1dFZhbHVlMTkgKiAwLjAzMikgKyBOdW1iZXIoaW5wdXRWYWx1ZTIwICogMC40MylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE51bWJlcihpbnB1dFZhbHVlMjQgKiAwLjAzKSArIE51bWJlcihpbnB1dFZhbHVlMjUgKiAwLjIyKSArIE51bWJlcihpbnB1dFZhbHVlMjggKiAwLjIpICsgTnVtYmVyKGlucHV0VmFsdWUyOSAqIDAuMTgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTMwICogMC4wMSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTM2ICogMC4wMTYpICsgTnVtYmVyKGlucHV0VmFsdWUzNyAqIDAuMDIpICsgTnVtYmVyKGlucHV0VmFsdWUzOCAqIDAuMDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTM5ICogMC4wMTYpICsgTnVtYmVyKGlucHV0VmFsdWU0MCAqIDAuMDMpICsgTnVtYmVyKGlucHV0VmFsdWU0MSAqIDAuMDIpICsgTnVtYmVyKGlucHV0VmFsdWU0MiAqIDAuMDI5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWU0MyAqIDAuMDEpICsgTnVtYmVyKGlucHV0VmFsdWU0NCAqIDAuMDEpICsgTnVtYmVyKGlucHV0VmFsdWU0NSAqIDAuMDExKSArIE51bWJlcihpbnB1dFZhbHVlNDYgKiAwLjAwODgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTQ3ICogMC4wMDgpKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhOdW1iZXIoaW5wdXRWYWx1ZTEgKiAwLjc4KSArIE51bWJlcihpbnB1dFZhbHVlMiAqIDAuNjQ0KSArIE51bWJlcihpbnB1dFZhbHVlMyAqIDAuMikgKyBOdW1iZXIoaW5wdXRWYWx1ZTQgKiAwLjc3KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWU1ICogMC4wNjMpICsgTnVtYmVyKGlucHV0VmFsdWU2ICogMC42KSArIE51bWJlcihpbnB1dFZhbHVlNyAqIDAuNTYpICsgTnVtYmVyKGlucHV0VmFsdWU4ICogMC40NSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE51bWJlcihpbnB1dFZhbHVlMTcgKiAwLjA0NSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTE4ICogMC4wNCkgKyAoaW5wdXRWYWx1ZTE5ICogMC4wMzUpICsgTnVtYmVyKGlucHV0VmFsdWUyMCAqIDAuMDMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTI0ICogMC4xNSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTI1ICogMC4yKSArIE51bWJlcihpbnB1dFZhbHVlMjggKiAwLjIpICsgTnVtYmVyKGlucHV0VmFsdWUyOSAqIDAuMjgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTMwICogMC4yMykgKyBOdW1iZXIoaW5wdXRWYWx1ZTMxICogMC4xMykgKyBOdW1iZXIoaW5wdXRWYWx1ZTMyICogMC4xMTcpICsgTnVtYmVyKGlucHV0VmFsdWUzMyAqIDAuODE2KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWUzNCAqIDAuMDcpICsgTnVtYmVyKGlucHV0VmFsdWUzNSAqIDAuMTI2KSArIE51bWJlcihpbnB1dFZhbHVlMzYgKiAwLjY2KSArIE51bWJlcihpbnB1dFZhbHVlMzcgKiAwLjAzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWUzOCAqIDAuMDkpICsgTnVtYmVyKGlucHV0VmFsdWUzOSAqIDAuMSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTQwICogMC4wNykgKyBOdW1iZXIoaW5wdXRWYWx1ZTQxICogMC4xKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWU0MiAqIDAuMDM2KSArIE51bWJlcihpbnB1dFZhbHVlNDMgKiAwLjAzKSArIE51bWJlcihpbnB1dFZhbHVlNDQgKiAwLjE0KSArIE51bWJlcihpbnB1dFZhbHVlNDUgKiAwLjAyOSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE51bWJlcihpbnB1dFZhbHVlNDYgKiAwLjAzOSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTQ3ICogMC4wNTkpICsgTnVtYmVyKGlucHV0VmFsdWU0OCAqIDAuMDI2KSArIE51bWJlcihpbnB1dFZhbHVlNDkgKiAwLjAzNSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkudG9GaXhlZCgxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhOdW1iZXIoaW5wdXRWYWx1ZTQgKiAwLjAxNSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTUgKiAwLjAxOCkgKyBOdW1iZXIoaW5wdXRWYWx1ZTYgKiAwLjAxKSArIE51bWJlcihpbnB1dFZhbHVlNyAqIDAuMDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTggKiAwLjAxNikgKyBOdW1iZXIoaW5wdXRWYWx1ZTkgKiAwLjIwOSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTEwICogMC4wNjgpICsgTnVtYmVyKGlucHV0VmFsdWUxMSAqIDAuMDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTEyICogMC4xMjUpICsgTnVtYmVyKGlucHV0VmFsdWUxMyAqIDAuMTI1KSArIE51bWJlcihpbnB1dFZhbHVlMTQgKiAwLjA5KSArIE51bWJlcihpbnB1dFZhbHVlMTUgKiA1KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWUxNiAqIDAuODMpICsgTnVtYmVyKGlucHV0VmFsdWUxNyAqIDAuMjgpICsgTnVtYmVyKGlucHV0VmFsdWUxOCAqIDAuMDU1KSArIE51bWJlcihpbnB1dFZhbHVlMTkgKiAwLjAyOClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE51bWJlcihpbnB1dFZhbHVlMjAgKiAwLjM1KSArIE51bWJlcihpbnB1dFZhbHVlMjEgKiAxKSArIE51bWJlcihpbnB1dFZhbHVlMjIgKiAwLjE0KSArIE51bWJlcihpbnB1dFZhbHVlMjMgKiAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWUyNCAqIDAuMzM1KSArIE51bWJlcihpbnB1dFZhbHVlMjUgKiAwLjU0KSArIE51bWJlcihpbnB1dFZhbHVlMjYgKiAwLjYyMikgKyBOdW1iZXIoaW5wdXRWYWx1ZTI3ICogMC42MDUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTI4ICogMC41MTUpICsgTnVtYmVyKGlucHV0VmFsdWUyOSAqIDAuNDIpICsgTnVtYmVyKGlucHV0VmFsdWUzNiAqIDAuMDEpKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhOdW1iZXIoaW5wdXRWYWx1ZTEgKiAzLjUxKSArIE51bWJlcihpbnB1dFZhbHVlMiAqIDMuNzQpICsgTnVtYmVyKGlucHV0VmFsdWUzICogMC44NSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTQgKiAzLjUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTUgKiAzLjM3KSArIE51bWJlcihpbnB1dFZhbHVlNiAqIDMuNCkgKyBOdW1iZXIoaW5wdXRWYWx1ZTcgKiAzLjEpICsgTnVtYmVyKGlucHV0VmFsdWU4ICogMi43KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWU5ICogMi44NCkgKyBOdW1iZXIoaW5wdXRWYWx1ZTEwICogMS40NSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTExICogMC45NSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTEyICogMS4xOSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE51bWJlcihpbnB1dFZhbHVlMTMgKiAxLjkxKSArIE51bWJlcihpbnB1dFZhbHVlMTQgKiAxLjYxKSArIE51bWJlcihpbnB1dFZhbHVlMTUgKiA1NSAqIDEuNjIpICsgTnVtYmVyKGlucHV0VmFsdWUxNiAqIDcuNSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE51bWJlcihpbnB1dFZhbHVlMTcgKiAwLjU2KSArIE51bWJlcihpbnB1dFZhbHVlMTggKiAxLjE1KSArIE51bWJlcihpbnB1dFZhbHVlMTkgKiAwLjUyKSArIE51bWJlcihpbnB1dFZhbHVlMjAgKiA1KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWUyMSAqIDguODQpICsgTnVtYmVyKGlucHV0VmFsdWUyMiAqIDEuNDYpICsgTnVtYmVyKGlucHV0VmFsdWUyMyAqIDguOSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTI0ICogMy41NClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE51bWJlcihpbnB1dFZhbHVlMjUgKiA2LjM0KSArIE51bWJlcihpbnB1dFZhbHVlMjYgKiA2Ljc3KSArIE51bWJlcihpbnB1dFZhbHVlMjcgKiA2LjU3KSArIE51bWJlcihpbnB1dFZhbHVlMjggKiA1Ljg0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWUyOSAqIDUuMzQpICsgTnVtYmVyKGlucHV0VmFsdWUzMCAqIDAuODkpICsgTnVtYmVyKGlucHV0VmFsdWUzMSAqIDAuNSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTMyICogMC40NylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE51bWJlcihpbnB1dFZhbHVlMzMgKiAwLjM0KSArIE51bWJlcihpbnB1dFZhbHVlMzQgKiAwLjI4KSArIE51bWJlcihpbnB1dFZhbHVlMzUgKiAwLjQ4KSArIE51bWJlcihpbnB1dFZhbHVlMzYgKiAyLjcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTM3ICogMC4yMikgKyBOdW1iZXIoaW5wdXRWYWx1ZTM4ICogMC40KSArIE51bWJlcihpbnB1dFZhbHVlMzkgKiAwLjQzKSArIE51bWJlcihpbnB1dFZhbHVlNDAgKiAwLjM0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWU0MSAqIDAuNSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTQyICogMC4yMykgKyBOdW1iZXIoaW5wdXRWYWx1ZTQzICogMC4xNikgKyBOdW1iZXIoaW5wdXRWYWx1ZTQ0ICogMC42MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE51bWJlcihpbnB1dFZhbHVlNDUgKiAwLjE2KSArIE51bWJlcihpbnB1dFZhbHVlNDYgKiAwLjE4KSArIE51bWJlcihpbnB1dFZhbHVlNDcgKiAwLjI3KSArIE51bWJlcihpbnB1dFZhbHVlNDggKiAwLjg1KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWU0OSAqIDAuNDMpICsgTnVtYmVyKGlucHV0VmFsdWU1MCAqIDMuNSkpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICB7LyogPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbFNwYW49ezN9PiA8U2VhcmNoTnV0cml0aW9uIC8+PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbFNwYW49ezJ9PiA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+ICovfVxyXG5cclxuICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgPC90Zm9vdD5cclxuICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICAgICAgPGRpdj5cclxuXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2Pns8QmFja1RvVG9wIC8+fTwvZGl2PlxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IEthbG9yaWplOyIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XHJcbi8vIGltcG9ydCBDYWxjdWxhdG9yIGZyb20gXCIuL0NhbGN1bGF0b3JcIjtcclxuaW1wb3J0IERpZ2l0cm9uIGZyb20gXCIuL0RpZ2l0cm9uXCJcclxuXHJcblxyXG5cclxuY29uc3QgT2Rub3NpID0gKCkgPT4ge1xyXG5cclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMSwgc2V0SW5wdXRWYWx1ZTFdID0gdXNlU3RhdGUoKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMiwgc2V0SW5wdXRWYWx1ZTJdID0gdXNlU3RhdGUoKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMywgc2V0SW5wdXRWYWx1ZTNdID0gdXNlU3RhdGUoKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlNCwgc2V0SW5wdXRWYWx1ZTRdID0gdXNlU3RhdGUoKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlNSwgc2V0SW5wdXRWYWx1ZTVdID0gdXNlU3RhdGUoKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlNiwgc2V0SW5wdXRWYWx1ZTZdID0gdXNlU3RhdGUoKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlNywgc2V0SW5wdXRWYWx1ZTddID0gdXNlU3RhdGUoKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlOCwgc2V0SW5wdXRWYWx1ZThdID0gdXNlU3RhdGUoKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlOSwgc2V0SW5wdXRWYWx1ZTldID0gdXNlU3RhdGUoKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMTAsIHNldElucHV0VmFsdWUxMF0gPSB1c2VTdGF0ZSgpO1xyXG4vLyBvZGF2ZGUgbmEgZG9sZSB1YmFjZW5vIDNkIGdsZWRhbmplXHJcbiAgICBjb25zdCBtb2RlbFJlZiA9IFJlYWN0LnVzZVJlZigpO1xyXG4gICAgY29uc3QgW2Fubm90cywgc2V0QW5ub3RzXSA9IHVzZVN0YXRlKFtdKTtcclxuXHJcbiAgICBjb25zdCBoYW5kbGVDbGljayA9IChldmVudCkgPT4ge1xyXG4gICAgICBjb25zdCB7IGNsaWVudFgsIGNsaWVudFkgfSA9IGV2ZW50O1xyXG4gIFxyXG4gICAgICBpZiAobW9kZWxSZWYuY3VycmVudCkge1xyXG4gICAgICAgIGxldCBoaXQgPSBtb2RlbFJlZi5jdXJyZW50LnBvc2l0aW9uQW5kTm9ybWFsRnJvbVBvaW50KGNsaWVudFgsIGNsaWVudFkpO1xyXG4gICAgICAgIGlmIChoaXQpIHtcclxuICAgICAgICAgIHNldEFubm90cygoYW5ub3RzKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBbLi4uYW5ub3RzLCBoaXRdO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIFxyXG4gICAgY29uc3QgZ2V0RGF0YVBvc2l0aW9uID0gKGFubm90KSA9PiB7XHJcbiAgICAgIHJldHVybiBgJHthbm5vdC5wb3NpdGlvbi54fSAke2Fubm90LnBvc2l0aW9uLnl9ICR7YW5ub3QucG9zaXRpb24uen1gO1xyXG4gICAgfTtcclxuICBcclxuICAgIGNvbnN0IGdldERhdGFOb3JtYWwgPSAoYW5ub3QpID0+IHtcclxuICAgICAgcmV0dXJuIGAke2Fubm90Lm5vcm1hbC54fSAke2Fubm90Lm5vcm1hbC55fSAke2Fubm90Lm5vcm1hbC56fWA7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGtyYWogZG9kYXRrYSB6YSAzZFxyXG5cclxuXHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTEgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElucHV0VmFsdWUxKGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUyID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMihlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZVZhbHVlMyA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTMoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTQgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElucHV0VmFsdWU0KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWU1ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlNShlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZVZhbHVlNiA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTYoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTcgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElucHV0VmFsdWU3KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWU4ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlOChlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZVZhbHVlOSA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTkoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTEwID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMTAoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8dGFibGUgY2xhc3NOYW1lPVwib2Rub3NpXCI+XHJcbiAgICAgICAgICAgICAgICA8dGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGggY29sU3Bhbj17N30+T2Rub3NpPC90aD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG5cclxuICAgICAgICAgICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWUxXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTF9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkID5wcmVtYTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWUyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMn0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkID5pc3RvIGplIGthbzwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWUzXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlM30gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkID5wcmVtYTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJyZWxhY2lqYVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeygoaW5wdXRWYWx1ZTMgKiBpbnB1dFZhbHVlMikgLyBpbnB1dFZhbHVlMSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlNH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWU0fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgPnByZW1hPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlNX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWU1fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgPmlzdG8gamUga2FvPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInJlbGFjaWphXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KChpbnB1dFZhbHVlNCAqIGlucHV0VmFsdWU2KSAvIGlucHV0VmFsdWU1KS50b0ZpeGVkKDEpfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkID5wcmVtYTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWU2XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTZ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlNn0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZCA+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgICAgICA8L3RhYmxlPlxyXG4gICAgICAgICBcclxuICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cIm9kbm9zaVwiPlxyXG4gICAgICAgICAgICAgICAgPHRoZWFkPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNvbFNwYW49ezV9PlByb2NlbnRpPC90aD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgPC90aGVhZD5cclxuICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTdcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlN31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWU3fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+T2Q8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWU4XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlOH0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkl6bm9zaTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJyZWxhY2lqYVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeygoaW5wdXRWYWx1ZTcgLyBpbnB1dFZhbHVlOCkgKiAxMDApLnRvRml4ZWQoMSl9ICVcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb2NcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlOX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWU5fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+T2Q8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWUxMFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUxMH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWUxMH0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkl6bm9zaTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJyZWxhY2lqYVwiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoKGlucHV0VmFsdWU5ICogaW5wdXRWYWx1ZTEwKSAvIDEwMCkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgPC90Ym9keT5cclxuXHJcbiAgICAgICAgICAgIDwvdGFibGU+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FsY1wiPlxyXG4gICAgICAgICAgICAgICA8RGlnaXRyb24gLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxicj48L2JyPlxyXG4gICAgICAgICAgIHsvKiBkb2RhdGFrIHphIDNkIG5hIGRvbGUgKi99XHJcbiAgICAgICAgICAgICA8bW9kZWwtdmlld2VyXHJcbiAgICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3NlYXJjaC1hci1lZHUvcGVyaW9kaWMtdGFibGUvZWxlbWVudF8wMDZfY2FyYm9uL2VsZW1lbnRfMDA2X2NhcmJvbi5nbGJcIlxyXG4gICAgICAgICAgICAvLyAgIHNyYz1cIkF1dG9tYXRCaWVwaS5nbGJcIlxyXG4gICAgICAgICAgICAgIHNoYWRvdy1pbnRlbnNpdHk9XCIxXCJcclxuICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIGNhbWVyYS1jb250cm9sc1xyXG4gICAgICAgICAgICAgIGFyXHJcbiAgICAgICAgICAgICAgYXItbW9kZXM9XCJ3ZWJ4clwiXHJcbiAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlQ2xpY2t9XHJcbiAgICAgICAgICAgICAgcmVmPXsocmVmKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBtb2RlbFJlZi5jdXJyZW50ID0gcmVmO1xyXG4gICAgICAgICAgICAgIH19IFxyXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJtb2R1bGVWaWV3XCI+XHJcbiAgICAgICAgICAgICAgICB7YW5ub3RzLm1hcCgoYW5ub3QsIGlkeCkgPT4gKFxyXG4gICAgICAgIDxidXR0b25cclxuICAgICAgICAgIGtleT17YGhvdHNwb3QtJHtpZHh9YH1cclxuICAgICAgICAgIGNsYXNzTmFtZT1cInZpZXctYnV0dG9uXCJcclxuICAgICAgICAgIHNsb3Q9e2Bob3RzcG90LSR7aWR4fWB9XHJcbiAgICAgICAgICBkYXRhLXBvc2l0aW9uPXtnZXREYXRhUG9zaXRpb24oYW5ub3QpfVxyXG4gICAgICAgICAgZGF0YS1ub3JtYWw9e2dldERhdGFOb3JtYWwoYW5ub3QpfVxyXG4gICAgICAgID48L2J1dHRvbj5cclxuICAgICAgKSl9XHJcbiAgICAgICAgPC9tb2RlbC12aWV3ZXI+XHJcbiAgICAgICAgey8qIGtyYWogZG9kYXRrYSB6YSAzZCAqL31cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBcclxuICAgICAgICAgIFxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IE9kbm9zaTsiLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuY29uc3QgTW90aW9uQ29uZmlnQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoe1xuICAgIHRyYW5zZm9ybVBhZ2VQb2ludDogKHApID0+IHAsXG4gICAgaXNTdGF0aWM6IGZhbHNlLFxuICAgIHJlZHVjZWRNb3Rpb246IFwibmV2ZXJcIixcbn0pO1xuXG5leHBvcnQgeyBNb3Rpb25Db25maWdDb250ZXh0IH07XG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCBNb3Rpb25Db250ZXh0ID0gY3JlYXRlQ29udGV4dCh7fSk7XG5cbmV4cG9ydCB7IE1vdGlvbkNvbnRleHQgfTtcbiIsImltcG9ydCB7IGNyZWF0ZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5jb25zdCBQcmVzZW5jZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0KG51bGwpO1xuXG5leHBvcnQgeyBQcmVzZW5jZUNvbnRleHQgfTtcbiIsImNvbnN0IGlzQnJvd3NlciA9IHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcblxuZXhwb3J0IHsgaXNCcm93c2VyIH07XG4iLCJpbXBvcnQgeyB1c2VMYXlvdXRFZmZlY3QsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzQnJvd3NlciB9IGZyb20gJy4vaXMtYnJvd3Nlci5tanMnO1xuXG5jb25zdCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gaXNCcm93c2VyID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0O1xuXG5leHBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH07XG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCBMYXp5Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQoeyBzdHJpY3Q6IGZhbHNlIH0pO1xuXG5leHBvcnQgeyBMYXp5Q29udGV4dCB9O1xuIiwiZnVuY3Rpb24gaXNSZWZPYmplY3QocmVmKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgcmVmID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZWYsIFwiY3VycmVudFwiKSk7XG59XG5cbmV4cG9ydCB7IGlzUmVmT2JqZWN0IH07XG4iLCIvKipcbiAqIERlY2lkZXMgaWYgdGhlIHN1cHBsaWVkIHZhcmlhYmxlIGlzIHZhcmlhbnQgbGFiZWxcbiAqL1xuZnVuY3Rpb24gaXNWYXJpYW50TGFiZWwodikge1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KHYpO1xufVxuXG5leHBvcnQgeyBpc1ZhcmlhbnRMYWJlbCB9O1xuIiwiZnVuY3Rpb24gaXNBbmltYXRpb25Db250cm9scyh2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2LnN0YXJ0ID09PSBcImZ1bmN0aW9uXCI7XG59XG5cbmV4cG9ydCB7IGlzQW5pbWF0aW9uQ29udHJvbHMgfTtcbiIsImNvbnN0IHZhcmlhbnRQcmlvcml0eU9yZGVyID0gW1xuICAgIFwiYW5pbWF0ZVwiLFxuICAgIFwid2hpbGVJblZpZXdcIixcbiAgICBcIndoaWxlRm9jdXNcIixcbiAgICBcIndoaWxlSG92ZXJcIixcbiAgICBcIndoaWxlVGFwXCIsXG4gICAgXCJ3aGlsZURyYWdcIixcbiAgICBcImV4aXRcIixcbl07XG5jb25zdCB2YXJpYW50UHJvcHMgPSBbXCJpbml0aWFsXCIsIC4uLnZhcmlhbnRQcmlvcml0eU9yZGVyXTtcblxuZXhwb3J0IHsgdmFyaWFudFByaW9yaXR5T3JkZXIsIHZhcmlhbnRQcm9wcyB9O1xuIiwiaW1wb3J0IHsgaXNBbmltYXRpb25Db250cm9scyB9IGZyb20gJy4uLy4uL2FuaW1hdGlvbi91dGlscy9pcy1hbmltYXRpb24tY29udHJvbHMubWpzJztcbmltcG9ydCB7IGlzVmFyaWFudExhYmVsIH0gZnJvbSAnLi9pcy12YXJpYW50LWxhYmVsLm1qcyc7XG5pbXBvcnQgeyB2YXJpYW50UHJvcHMgfSBmcm9tICcuL3ZhcmlhbnQtcHJvcHMubWpzJztcblxuZnVuY3Rpb24gaXNDb250cm9sbGluZ1ZhcmlhbnRzKHByb3BzKSB7XG4gICAgcmV0dXJuIChpc0FuaW1hdGlvbkNvbnRyb2xzKHByb3BzLmFuaW1hdGUpIHx8XG4gICAgICAgIHZhcmlhbnRQcm9wcy5zb21lKChuYW1lKSA9PiBpc1ZhcmlhbnRMYWJlbChwcm9wc1tuYW1lXSkpKTtcbn1cbmZ1bmN0aW9uIGlzVmFyaWFudE5vZGUocHJvcHMpIHtcbiAgICByZXR1cm4gQm9vbGVhbihpc0NvbnRyb2xsaW5nVmFyaWFudHMocHJvcHMpIHx8IHByb3BzLnZhcmlhbnRzKTtcbn1cblxuZXhwb3J0IHsgaXNDb250cm9sbGluZ1ZhcmlhbnRzLCBpc1ZhcmlhbnROb2RlIH07XG4iLCJpbXBvcnQgeyB1c2VDb250ZXh0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTW90aW9uQ29udGV4dCB9IGZyb20gJy4vaW5kZXgubWpzJztcbmltcG9ydCB7IGdldEN1cnJlbnRUcmVlVmFyaWFudHMgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIHVzZUNyZWF0ZU1vdGlvbkNvbnRleHQocHJvcHMpIHtcbiAgICBjb25zdCB7IGluaXRpYWwsIGFuaW1hdGUgfSA9IGdldEN1cnJlbnRUcmVlVmFyaWFudHMocHJvcHMsIHVzZUNvbnRleHQoTW90aW9uQ29udGV4dCkpO1xuICAgIHJldHVybiB1c2VNZW1vKCgpID0+ICh7IGluaXRpYWwsIGFuaW1hdGUgfSksIFt2YXJpYW50TGFiZWxzQXNEZXBlbmRlbmN5KGluaXRpYWwpLCB2YXJpYW50TGFiZWxzQXNEZXBlbmRlbmN5KGFuaW1hdGUpXSk7XG59XG5mdW5jdGlvbiB2YXJpYW50TGFiZWxzQXNEZXBlbmRlbmN5KHByb3ApIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShwcm9wKSA/IHByb3Auam9pbihcIiBcIikgOiBwcm9wO1xufVxuXG5leHBvcnQgeyB1c2VDcmVhdGVNb3Rpb25Db250ZXh0IH07XG4iLCJjb25zdCBmZWF0dXJlUHJvcHMgPSB7XG4gICAgYW5pbWF0aW9uOiBbXG4gICAgICAgIFwiYW5pbWF0ZVwiLFxuICAgICAgICBcInZhcmlhbnRzXCIsXG4gICAgICAgIFwid2hpbGVIb3ZlclwiLFxuICAgICAgICBcIndoaWxlVGFwXCIsXG4gICAgICAgIFwiZXhpdFwiLFxuICAgICAgICBcIndoaWxlSW5WaWV3XCIsXG4gICAgICAgIFwid2hpbGVGb2N1c1wiLFxuICAgICAgICBcIndoaWxlRHJhZ1wiLFxuICAgIF0sXG4gICAgZXhpdDogW1wiZXhpdFwiXSxcbiAgICBkcmFnOiBbXCJkcmFnXCIsIFwiZHJhZ0NvbnRyb2xzXCJdLFxuICAgIGZvY3VzOiBbXCJ3aGlsZUZvY3VzXCJdLFxuICAgIGhvdmVyOiBbXCJ3aGlsZUhvdmVyXCIsIFwib25Ib3ZlclN0YXJ0XCIsIFwib25Ib3ZlckVuZFwiXSxcbiAgICB0YXA6IFtcIndoaWxlVGFwXCIsIFwib25UYXBcIiwgXCJvblRhcFN0YXJ0XCIsIFwib25UYXBDYW5jZWxcIl0sXG4gICAgcGFuOiBbXCJvblBhblwiLCBcIm9uUGFuU3RhcnRcIiwgXCJvblBhblNlc3Npb25TdGFydFwiLCBcIm9uUGFuRW5kXCJdLFxuICAgIGluVmlldzogW1wid2hpbGVJblZpZXdcIiwgXCJvblZpZXdwb3J0RW50ZXJcIiwgXCJvblZpZXdwb3J0TGVhdmVcIl0sXG4gICAgbGF5b3V0OiBbXCJsYXlvdXRcIiwgXCJsYXlvdXRJZFwiXSxcbn07XG5jb25zdCBmZWF0dXJlRGVmaW5pdGlvbnMgPSB7fTtcbmZvciAoY29uc3Qga2V5IGluIGZlYXR1cmVQcm9wcykge1xuICAgIGZlYXR1cmVEZWZpbml0aW9uc1trZXldID0ge1xuICAgICAgICBpc0VuYWJsZWQ6IChwcm9wcykgPT4gZmVhdHVyZVByb3BzW2tleV0uc29tZSgobmFtZSkgPT4gISFwcm9wc1tuYW1lXSksXG4gICAgfTtcbn1cblxuZXhwb3J0IHsgZmVhdHVyZURlZmluaXRpb25zIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCBMYXlvdXRHcm91cENvbnRleHQgPSBjcmVhdGVDb250ZXh0KHt9KTtcblxuZXhwb3J0IHsgTGF5b3V0R3JvdXBDb250ZXh0IH07XG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEludGVybmFsLCBleHBvcnRlZCBvbmx5IGZvciB1c2FnZSBpbiBGcmFtZXJcbiAqL1xuY29uc3QgU3dpdGNoTGF5b3V0R3JvdXBDb250ZXh0ID0gY3JlYXRlQ29udGV4dCh7fSk7XG5cbmV4cG9ydCB7IFN3aXRjaExheW91dEdyb3VwQ29udGV4dCB9O1xuIiwiY29uc3QgbW90aW9uQ29tcG9uZW50U3ltYm9sID0gU3ltYm9sLmZvcihcIm1vdGlvbkNvbXBvbmVudFN5bWJvbFwiKTtcblxuZXhwb3J0IHsgbW90aW9uQ29tcG9uZW50U3ltYm9sIH07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBmb3J3YXJkUmVmLCB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTW90aW9uQ29uZmlnQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQvTW90aW9uQ29uZmlnQ29udGV4dC5tanMnO1xuaW1wb3J0IHsgTW90aW9uQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQvTW90aW9uQ29udGV4dC9pbmRleC5tanMnO1xuaW1wb3J0IHsgdXNlVmlzdWFsRWxlbWVudCB9IGZyb20gJy4vdXRpbHMvdXNlLXZpc3VhbC1lbGVtZW50Lm1qcyc7XG5pbXBvcnQgeyB1c2VNb3Rpb25SZWYgfSBmcm9tICcuL3V0aWxzL3VzZS1tb3Rpb24tcmVmLm1qcyc7XG5pbXBvcnQgeyB1c2VDcmVhdGVNb3Rpb25Db250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9Nb3Rpb25Db250ZXh0L2NyZWF0ZS5tanMnO1xuaW1wb3J0IHsgbG9hZEZlYXR1cmVzIH0gZnJvbSAnLi9mZWF0dXJlcy9sb2FkLWZlYXR1cmVzLm1qcyc7XG5pbXBvcnQgeyBpc0Jyb3dzZXIgfSBmcm9tICcuLi91dGlscy9pcy1icm93c2VyLm1qcyc7XG5pbXBvcnQgeyBMYXlvdXRHcm91cENvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L0xheW91dEdyb3VwQ29udGV4dC5tanMnO1xuaW1wb3J0IHsgTGF6eUNvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L0xhenlDb250ZXh0Lm1qcyc7XG5pbXBvcnQgeyBTd2l0Y2hMYXlvdXRHcm91cENvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L1N3aXRjaExheW91dEdyb3VwQ29udGV4dC5tanMnO1xuaW1wb3J0IHsgbW90aW9uQ29tcG9uZW50U3ltYm9sIH0gZnJvbSAnLi91dGlscy9zeW1ib2wubWpzJztcblxuLyoqXG4gKiBDcmVhdGUgYSBgbW90aW9uYCBjb21wb25lbnQuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGEgQ29tcG9uZW50IGFyZ3VtZW50LCB3aGljaCBjYW4gYmUgZWl0aGVyIGEgc3RyaW5nIChpZSBcImRpdlwiXG4gKiBmb3IgYG1vdGlvbi5kaXZgKSwgb3IgYW4gYWN0dWFsIFJlYWN0IGNvbXBvbmVudC5cbiAqXG4gKiBBbG9uZ3NpZGUgdGhpcyBpcyBhIGNvbmZpZyBvcHRpb24gd2hpY2ggcHJvdmlkZXMgYSB3YXkgb2YgcmVuZGVyaW5nIHRoZSBwcm92aWRlZFxuICogY29tcG9uZW50IFwib2ZmbGluZVwiLCBvciBvdXRzaWRlIHRoZSBSZWFjdCByZW5kZXIgY3ljbGUuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU1vdGlvbkNvbXBvbmVudCh7IHByZWxvYWRlZEZlYXR1cmVzLCBjcmVhdGVWaXN1YWxFbGVtZW50LCB1c2VSZW5kZXIsIHVzZVZpc3VhbFN0YXRlLCBDb21wb25lbnQsIH0pIHtcbiAgICBwcmVsb2FkZWRGZWF0dXJlcyAmJiBsb2FkRmVhdHVyZXMocHJlbG9hZGVkRmVhdHVyZXMpO1xuICAgIGZ1bmN0aW9uIE1vdGlvbkNvbXBvbmVudChwcm9wcywgZXh0ZXJuYWxSZWYpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHdlIG5lZWQgdG8gbWVhc3VyZSB0aGUgZWxlbWVudCB3ZSBsb2FkIHRoaXMgZnVuY3Rpb25hbGl0eSBpbiBhXG4gICAgICAgICAqIHNlcGFyYXRlIGNsYXNzIGNvbXBvbmVudCBpbiBvcmRlciB0byBnYWluIGFjY2VzcyB0byBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZS5cbiAgICAgICAgICovXG4gICAgICAgIGxldCBNZWFzdXJlTGF5b3V0O1xuICAgICAgICBjb25zdCBjb25maWdBbmRQcm9wcyA9IHtcbiAgICAgICAgICAgIC4uLnVzZUNvbnRleHQoTW90aW9uQ29uZmlnQ29udGV4dCksXG4gICAgICAgICAgICAuLi5wcm9wcyxcbiAgICAgICAgICAgIGxheW91dElkOiB1c2VMYXlvdXRJZChwcm9wcyksXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHsgaXNTdGF0aWMgfSA9IGNvbmZpZ0FuZFByb3BzO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gdXNlQ3JlYXRlTW90aW9uQ29udGV4dChwcm9wcyk7XG4gICAgICAgIGNvbnN0IHZpc3VhbFN0YXRlID0gdXNlVmlzdWFsU3RhdGUocHJvcHMsIGlzU3RhdGljKTtcbiAgICAgICAgaWYgKCFpc1N0YXRpYyAmJiBpc0Jyb3dzZXIpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlIGEgVmlzdWFsRWxlbWVudCBmb3IgdGhpcyBjb21wb25lbnQuIEEgVmlzdWFsRWxlbWVudCBwcm92aWRlcyBhIGNvbW1vblxuICAgICAgICAgICAgICogaW50ZXJmYWNlIHRvIHJlbmRlcmVyLXNwZWNpZmljIEFQSXMgKGllIERPTS9UaHJlZS5qcyBldGMpIGFzIHdlbGwgYXNcbiAgICAgICAgICAgICAqIHByb3ZpZGluZyBhIHdheSBvZiByZW5kZXJpbmcgdG8gdGhlc2UgQVBJcyBvdXRzaWRlIG9mIHRoZSBSZWFjdCByZW5kZXIgbG9vcFxuICAgICAgICAgICAgICogZm9yIG1vcmUgcGVyZm9ybWFudCBhbmltYXRpb25zIGFuZCBpbnRlcmFjdGlvbnNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29udGV4dC52aXN1YWxFbGVtZW50ID0gdXNlVmlzdWFsRWxlbWVudChDb21wb25lbnQsIHZpc3VhbFN0YXRlLCBjb25maWdBbmRQcm9wcywgY3JlYXRlVmlzdWFsRWxlbWVudCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIExvYWQgTW90aW9uIGdlc3R1cmUgYW5kIGFuaW1hdGlvbiBmZWF0dXJlcy4gVGhlc2UgYXJlIHJlbmRlcmVkIGFzIHJlbmRlcmxlc3NcbiAgICAgICAgICAgICAqIGNvbXBvbmVudHMgc28gZWFjaCBmZWF0dXJlIGNhbiBvcHRpb25hbGx5IG1ha2UgdXNlIG9mIFJlYWN0IGxpZmVjeWNsZSBtZXRob2RzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCBpbml0aWFsTGF5b3V0R3JvdXBDb25maWcgPSB1c2VDb250ZXh0KFN3aXRjaExheW91dEdyb3VwQ29udGV4dCk7XG4gICAgICAgICAgICBjb25zdCBpc1N0cmljdCA9IHVzZUNvbnRleHQoTGF6eUNvbnRleHQpLnN0cmljdDtcbiAgICAgICAgICAgIGlmIChjb250ZXh0LnZpc3VhbEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBNZWFzdXJlTGF5b3V0ID0gY29udGV4dC52aXN1YWxFbGVtZW50LmxvYWRGZWF0dXJlcyhcbiAgICAgICAgICAgICAgICAvLyBOb3RlOiBQYXNzIHRoZSBmdWxsIG5ldyBjb21iaW5lZCBwcm9wcyB0byBjb3JyZWN0bHkgcmUtcmVuZGVyIGR5bmFtaWMgZmVhdHVyZSBjb21wb25lbnRzLlxuICAgICAgICAgICAgICAgIGNvbmZpZ0FuZFByb3BzLCBpc1N0cmljdCwgcHJlbG9hZGVkRmVhdHVyZXMsIGluaXRpYWxMYXlvdXRHcm91cENvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBtb3VudCBvcmRlciBhbmQgaGllcmFyY2h5IGlzIHNwZWNpZmljIHRvIGVuc3VyZSBvdXIgZWxlbWVudCByZWZcbiAgICAgICAgICogaXMgaHlkcmF0ZWQgYnkgdGhlIHRpbWUgZmVhdHVyZXMgZmlyZSB0aGVpciBlZmZlY3RzLlxuICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KE1vdGlvbkNvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IGNvbnRleHQgfSxcbiAgICAgICAgICAgIE1lYXN1cmVMYXlvdXQgJiYgY29udGV4dC52aXN1YWxFbGVtZW50ID8gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWVhc3VyZUxheW91dCwgeyB2aXN1YWxFbGVtZW50OiBjb250ZXh0LnZpc3VhbEVsZW1lbnQsIC4uLmNvbmZpZ0FuZFByb3BzIH0pKSA6IG51bGwsXG4gICAgICAgICAgICB1c2VSZW5kZXIoQ29tcG9uZW50LCBwcm9wcywgdXNlTW90aW9uUmVmKHZpc3VhbFN0YXRlLCBjb250ZXh0LnZpc3VhbEVsZW1lbnQsIGV4dGVybmFsUmVmKSwgdmlzdWFsU3RhdGUsIGlzU3RhdGljLCBjb250ZXh0LnZpc3VhbEVsZW1lbnQpKSk7XG4gICAgfVxuICAgIGNvbnN0IEZvcndhcmRSZWZDb21wb25lbnQgPSBmb3J3YXJkUmVmKE1vdGlvbkNvbXBvbmVudCk7XG4gICAgRm9yd2FyZFJlZkNvbXBvbmVudFttb3Rpb25Db21wb25lbnRTeW1ib2xdID0gQ29tcG9uZW50O1xuICAgIHJldHVybiBGb3J3YXJkUmVmQ29tcG9uZW50O1xufVxuZnVuY3Rpb24gdXNlTGF5b3V0SWQoeyBsYXlvdXRJZCB9KSB7XG4gICAgY29uc3QgbGF5b3V0R3JvdXBJZCA9IHVzZUNvbnRleHQoTGF5b3V0R3JvdXBDb250ZXh0KS5pZDtcbiAgICByZXR1cm4gbGF5b3V0R3JvdXBJZCAmJiBsYXlvdXRJZCAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gbGF5b3V0R3JvdXBJZCArIFwiLVwiICsgbGF5b3V0SWRcbiAgICAgICAgOiBsYXlvdXRJZDtcbn1cblxuZXhwb3J0IHsgY3JlYXRlTW90aW9uQ29tcG9uZW50IH07XG4iLCJpbXBvcnQgeyBmZWF0dXJlRGVmaW5pdGlvbnMgfSBmcm9tICcuL2RlZmluaXRpb25zLm1qcyc7XG5cbmZ1bmN0aW9uIGxvYWRGZWF0dXJlcyhmZWF0dXJlcykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIGZlYXR1cmVzKSB7XG4gICAgICAgIGZlYXR1cmVEZWZpbml0aW9uc1trZXldID0ge1xuICAgICAgICAgICAgLi4uZmVhdHVyZURlZmluaXRpb25zW2tleV0sXG4gICAgICAgICAgICAuLi5mZWF0dXJlc1trZXldLFxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IHsgbG9hZEZlYXR1cmVzIH07XG4iLCJpbXBvcnQgeyBpc1ZhcmlhbnRMYWJlbCB9IGZyb20gJy4uLy4uL3JlbmRlci91dGlscy9pcy12YXJpYW50LWxhYmVsLm1qcyc7XG5pbXBvcnQgeyBpc0NvbnRyb2xsaW5nVmFyaWFudHMgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXRpbHMvaXMtY29udHJvbGxpbmctdmFyaWFudHMubWpzJztcblxuZnVuY3Rpb24gZ2V0Q3VycmVudFRyZWVWYXJpYW50cyhwcm9wcywgY29udGV4dCkge1xuICAgIGlmIChpc0NvbnRyb2xsaW5nVmFyaWFudHMocHJvcHMpKSB7XG4gICAgICAgIGNvbnN0IHsgaW5pdGlhbCwgYW5pbWF0ZSB9ID0gcHJvcHM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbml0aWFsOiBpbml0aWFsID09PSBmYWxzZSB8fCBpc1ZhcmlhbnRMYWJlbChpbml0aWFsKVxuICAgICAgICAgICAgICAgID8gaW5pdGlhbFxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgYW5pbWF0ZTogaXNWYXJpYW50TGFiZWwoYW5pbWF0ZSkgPyBhbmltYXRlIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcHJvcHMuaW5oZXJpdCAhPT0gZmFsc2UgPyBjb250ZXh0IDoge307XG59XG5cbmV4cG9ydCB7IGdldEN1cnJlbnRUcmVlVmFyaWFudHMgfTtcbiIsImltcG9ydCB7IHVzZUNvbnRleHQsIHVzZVJlZiwgdXNlSW5zZXJ0aW9uRWZmZWN0LCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBQcmVzZW5jZUNvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L1ByZXNlbmNlQ29udGV4dC5tanMnO1xuaW1wb3J0IHsgTW90aW9uQ29udGV4dCB9IGZyb20gJy4uLy4uL2NvbnRleHQvTW90aW9uQ29udGV4dC9pbmRleC5tanMnO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uLy4uL3V0aWxzL3VzZS1pc29tb3JwaGljLWVmZmVjdC5tanMnO1xuaW1wb3J0IHsgTGF6eUNvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L0xhenlDb250ZXh0Lm1qcyc7XG5pbXBvcnQgeyBNb3Rpb25Db25maWdDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9Nb3Rpb25Db25maWdDb250ZXh0Lm1qcyc7XG5cbmZ1bmN0aW9uIHVzZVZpc3VhbEVsZW1lbnQoQ29tcG9uZW50LCB2aXN1YWxTdGF0ZSwgcHJvcHMsIGNyZWF0ZVZpc3VhbEVsZW1lbnQpIHtcbiAgICBjb25zdCB7IHZpc3VhbEVsZW1lbnQ6IHBhcmVudCB9ID0gdXNlQ29udGV4dChNb3Rpb25Db250ZXh0KTtcbiAgICBjb25zdCBsYXp5Q29udGV4dCA9IHVzZUNvbnRleHQoTGF6eUNvbnRleHQpO1xuICAgIGNvbnN0IHByZXNlbmNlQ29udGV4dCA9IHVzZUNvbnRleHQoUHJlc2VuY2VDb250ZXh0KTtcbiAgICBjb25zdCByZWR1Y2VkTW90aW9uQ29uZmlnID0gdXNlQ29udGV4dChNb3Rpb25Db25maWdDb250ZXh0KS5yZWR1Y2VkTW90aW9uO1xuICAgIGNvbnN0IHZpc3VhbEVsZW1lbnRSZWYgPSB1c2VSZWYoKTtcbiAgICAvKipcbiAgICAgKiBJZiB3ZSBoYXZlbid0IHByZWxvYWRlZCBhIHJlbmRlcmVyLCBjaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBvbmUgbGF6eS1sb2FkZWRcbiAgICAgKi9cbiAgICBjcmVhdGVWaXN1YWxFbGVtZW50ID0gY3JlYXRlVmlzdWFsRWxlbWVudCB8fCBsYXp5Q29udGV4dC5yZW5kZXJlcjtcbiAgICBpZiAoIXZpc3VhbEVsZW1lbnRSZWYuY3VycmVudCAmJiBjcmVhdGVWaXN1YWxFbGVtZW50KSB7XG4gICAgICAgIHZpc3VhbEVsZW1lbnRSZWYuY3VycmVudCA9IGNyZWF0ZVZpc3VhbEVsZW1lbnQoQ29tcG9uZW50LCB7XG4gICAgICAgICAgICB2aXN1YWxTdGF0ZSxcbiAgICAgICAgICAgIHBhcmVudCxcbiAgICAgICAgICAgIHByb3BzLFxuICAgICAgICAgICAgcHJlc2VuY2VDb250ZXh0LFxuICAgICAgICAgICAgYmxvY2tJbml0aWFsQW5pbWF0aW9uOiBwcmVzZW5jZUNvbnRleHRcbiAgICAgICAgICAgICAgICA/IHByZXNlbmNlQ29udGV4dC5pbml0aWFsID09PSBmYWxzZVxuICAgICAgICAgICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICByZWR1Y2VkTW90aW9uQ29uZmlnLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgdmlzdWFsRWxlbWVudCA9IHZpc3VhbEVsZW1lbnRSZWYuY3VycmVudDtcbiAgICB1c2VJbnNlcnRpb25FZmZlY3QoKCkgPT4ge1xuICAgICAgICB2aXN1YWxFbGVtZW50ICYmIHZpc3VhbEVsZW1lbnQudXBkYXRlKHByb3BzLCBwcmVzZW5jZUNvbnRleHQpO1xuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIENhY2hlIHRoaXMgdmFsdWUgYXMgd2Ugd2FudCB0byBrbm93IHdoZXRoZXIgSGFuZG9mZkFwcGVhckFuaW1hdGlvbnNcbiAgICAgKiB3YXMgcHJlc2VudCBvbiBpbml0aWFsIHJlbmRlciAtIGl0IHdpbGwgYmUgZGVsZXRlZCBhZnRlciB0aGlzLlxuICAgICAqL1xuICAgIGNvbnN0IGNhbkhhbmRvZmYgPSB1c2VSZWYoQm9vbGVhbih3aW5kb3cuSGFuZG9mZkFwcGVhckFuaW1hdGlvbnMpKTtcbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCF2aXN1YWxFbGVtZW50KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2aXN1YWxFbGVtZW50LnJlbmRlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWRlYWxseSB0aGlzIGZ1bmN0aW9uIHdvdWxkIGFsd2F5cyBydW4gaW4gYSB1c2VFZmZlY3QuXG4gICAgICAgICAqXG4gICAgICAgICAqIEhvd2V2ZXIsIGlmIHdlIGhhdmUgb3B0aW1pc2VkIGFwcGVhciBhbmltYXRpb25zIHRvIGhhbmRvZmYgZnJvbSxcbiAgICAgICAgICogaXQgbmVlZHMgdG8gaGFwcGVuIHN5bmNocm9ub3VzbHkgdG8gZW5zdXJlIHRoZXJlJ3Mgbm8gZmxhc2ggb2ZcbiAgICAgICAgICogaW5jb3JyZWN0IHN0eWxlcyBpbiB0aGUgZXZlbnQgb2YgYSBoeWRyYXRpb24gZXJyb3IuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNvIGlmIHdlIGRldGVjdCBhIHNpdHV0YXRpb24gd2hlcmUgb3B0aW1pc2VkIGFwcGVhciBhbmltYXRpb25zXG4gICAgICAgICAqIGFyZSBydW5uaW5nLCB3ZSB1c2UgdXNlTGF5b3V0RWZmZWN0IHRvIHRyaWdnZXIgYW5pbWF0aW9ucy5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChjYW5IYW5kb2ZmLmN1cnJlbnQgJiYgdmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZSkge1xuICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZS5hbmltYXRlQ2hhbmdlcygpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCF2aXN1YWxFbGVtZW50KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2aXN1YWxFbGVtZW50LnVwZGF0ZUZlYXR1cmVzKCk7XG4gICAgICAgIGlmICghY2FuSGFuZG9mZi5jdXJyZW50ICYmIHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpIHtcbiAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUuYW5pbWF0ZUNoYW5nZXMoKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogT25jZSB3ZSd2ZSBoYW5kZWQgb2ZmIGFuaW1hdGlvbnMgd2UgY2FuIGRlbGV0ZSBIYW5kb2ZmQXBwZWFyQW5pbWF0aW9uc1xuICAgICAgICAgKiBzbyBjb21wb25lbnRzIGFkZGVkIGFmdGVyIHRoZSBpbml0aWFsIHJlbmRlciBjYW4gYW5pbWF0ZSBjaGFuZ2VzXG4gICAgICAgICAqIGluIHVzZUVmZmVjdCB2cyB1c2VMYXlvdXRFZmZlY3QuXG4gICAgICAgICAqL1xuICAgICAgICB3aW5kb3cuSGFuZG9mZkFwcGVhckFuaW1hdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGNhbkhhbmRvZmYuY3VycmVudCA9IGZhbHNlO1xuICAgIH0pO1xuICAgIHJldHVybiB2aXN1YWxFbGVtZW50O1xufVxuXG5leHBvcnQgeyB1c2VWaXN1YWxFbGVtZW50IH07XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzUmVmT2JqZWN0IH0gZnJvbSAnLi4vLi4vdXRpbHMvaXMtcmVmLW9iamVjdC5tanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSByZWYgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsIGh5ZHJhdGVzIHRoZSBwcm92aWRlZFxuICogZXh0ZXJuYWwgcmVmIGFuZCBWaXN1YWxFbGVtZW50LlxuICovXG5mdW5jdGlvbiB1c2VNb3Rpb25SZWYodmlzdWFsU3RhdGUsIHZpc3VhbEVsZW1lbnQsIGV4dGVybmFsUmVmKSB7XG4gICAgcmV0dXJuIHVzZUNhbGxiYWNrKChpbnN0YW5jZSkgPT4ge1xuICAgICAgICBpbnN0YW5jZSAmJiB2aXN1YWxTdGF0ZS5tb3VudCAmJiB2aXN1YWxTdGF0ZS5tb3VudChpbnN0YW5jZSk7XG4gICAgICAgIGlmICh2aXN1YWxFbGVtZW50KSB7XG4gICAgICAgICAgICBpbnN0YW5jZVxuICAgICAgICAgICAgICAgID8gdmlzdWFsRWxlbWVudC5tb3VudChpbnN0YW5jZSlcbiAgICAgICAgICAgICAgICA6IHZpc3VhbEVsZW1lbnQudW5tb3VudCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleHRlcm5hbFJlZikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBleHRlcm5hbFJlZiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgZXh0ZXJuYWxSZWYoaW5zdGFuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNSZWZPYmplY3QoZXh0ZXJuYWxSZWYpKSB7XG4gICAgICAgICAgICAgICAgZXh0ZXJuYWxSZWYuY3VycmVudCA9IGluc3RhbmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogT25seSBwYXNzIGEgbmV3IHJlZiBjYWxsYmFjayB0byBSZWFjdCBpZiB3ZSd2ZSByZWNlaXZlZCBhIHZpc3VhbCBlbGVtZW50XG4gICAgICogZmFjdG9yeS4gT3RoZXJ3aXNlIHdlJ2xsIGJlIG1vdW50aW5nL3JlbW91bnRpbmcgZXZlcnkgdGltZSBleHRlcm5hbFJlZlxuICAgICAqIG9yIG90aGVyIGRlcGVuZGVuY2llcyBjaGFuZ2UuXG4gICAgICovXG4gICAgW3Zpc3VhbEVsZW1lbnRdKTtcbn1cblxuZXhwb3J0IHsgdXNlTW90aW9uUmVmIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVNb3Rpb25Db21wb25lbnQgfSBmcm9tICcuLi8uLi9tb3Rpb24vaW5kZXgubWpzJztcblxuLyoqXG4gKiBDb252ZXJ0IGFueSBSZWFjdCBjb21wb25lbnQgaW50byBhIGBtb3Rpb25gIGNvbXBvbmVudC4gVGhlIHByb3ZpZGVkIGNvbXBvbmVudFxuICogKiptdXN0KiogdXNlIGBSZWFjdC5mb3J3YXJkUmVmYCB0byB0aGUgdW5kZXJseWluZyBET00gY29tcG9uZW50IHlvdSB3YW50IHRvIGFuaW1hdGUuXG4gKlxuICogYGBganN4XG4gKiBjb25zdCBDb21wb25lbnQgPSBSZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiB7XG4gKiAgIHJldHVybiA8ZGl2IHJlZj17cmVmfSAvPlxuICogfSlcbiAqXG4gKiBjb25zdCBNb3Rpb25Db21wb25lbnQgPSBtb3Rpb24oQ29tcG9uZW50KVxuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBjcmVhdGVNb3Rpb25Qcm94eShjcmVhdGVDb25maWcpIHtcbiAgICBmdW5jdGlvbiBjdXN0b20oQ29tcG9uZW50LCBjdXN0b21Nb3Rpb25Db21wb25lbnRDb25maWcgPSB7fSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTW90aW9uQ29tcG9uZW50KGNyZWF0ZUNvbmZpZyhDb21wb25lbnQsIGN1c3RvbU1vdGlvbkNvbXBvbmVudENvbmZpZykpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIFByb3h5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBjdXN0b207XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgY2FjaGUgb2YgZ2VuZXJhdGVkIGBtb3Rpb25gIGNvbXBvbmVudHMsIGUuZyBgbW90aW9uLmRpdmAsIGBtb3Rpb24uaW5wdXRgIGV0Yy5cbiAgICAgKiBSYXRoZXIgdGhhbiBnZW5lcmF0aW5nIHRoZW0gYW5ldyBldmVyeSByZW5kZXIuXG4gICAgICovXG4gICAgY29uc3QgY29tcG9uZW50Q2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgcmV0dXJuIG5ldyBQcm94eShjdXN0b20sIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGxlZCB3aGVuIGBtb3Rpb25gIGlzIHJlZmVyZW5jZWQgd2l0aCBhIHByb3A6IGBtb3Rpb24uZGl2YCwgYG1vdGlvbi5pbnB1dGAgZXRjLlxuICAgICAgICAgKiBUaGUgcHJvcCBuYW1lIGlzIHBhc3NlZCB0aHJvdWdoIGFzIGBrZXlgIGFuZCB3ZSBjYW4gdXNlIHRoYXQgdG8gZ2VuZXJhdGUgYSBgbW90aW9uYFxuICAgICAgICAgKiBET00gY29tcG9uZW50IHdpdGggdGhhdCBuYW1lLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiAoX3RhcmdldCwga2V5KSA9PiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgZWxlbWVudCBkb2Vzbid0IGV4aXN0IGluIHRoZSBjb21wb25lbnQgY2FjaGUsIGNyZWF0ZSBpdCBhbmQgY2FjaGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICghY29tcG9uZW50Q2FjaGUuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRDYWNoZS5zZXQoa2V5LCBjdXN0b20oa2V5KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29tcG9uZW50Q2FjaGUuZ2V0KGtleSk7XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZU1vdGlvblByb3h5IH07XG4iLCIvKipcbiAqIFdlIGtlZXAgdGhlc2UgbGlzdGVkIHNlcGVyYXRlbHkgYXMgd2UgdXNlIHRoZSBsb3dlcmNhc2UgdGFnIG5hbWVzIGFzIHBhcnRcbiAqIG9mIHRoZSBydW50aW1lIGJ1bmRsZSB0byBkZXRlY3QgU1ZHIGNvbXBvbmVudHNcbiAqL1xuY29uc3QgbG93ZXJjYXNlU1ZHRWxlbWVudHMgPSBbXG4gICAgXCJhbmltYXRlXCIsXG4gICAgXCJjaXJjbGVcIixcbiAgICBcImRlZnNcIixcbiAgICBcImRlc2NcIixcbiAgICBcImVsbGlwc2VcIixcbiAgICBcImdcIixcbiAgICBcImltYWdlXCIsXG4gICAgXCJsaW5lXCIsXG4gICAgXCJmaWx0ZXJcIixcbiAgICBcIm1hcmtlclwiLFxuICAgIFwibWFza1wiLFxuICAgIFwibWV0YWRhdGFcIixcbiAgICBcInBhdGhcIixcbiAgICBcInBhdHRlcm5cIixcbiAgICBcInBvbHlnb25cIixcbiAgICBcInBvbHlsaW5lXCIsXG4gICAgXCJyZWN0XCIsXG4gICAgXCJzdG9wXCIsXG4gICAgXCJzd2l0Y2hcIixcbiAgICBcInN5bWJvbFwiLFxuICAgIFwic3ZnXCIsXG4gICAgXCJ0ZXh0XCIsXG4gICAgXCJ0c3BhblwiLFxuICAgIFwidXNlXCIsXG4gICAgXCJ2aWV3XCIsXG5dO1xuXG5leHBvcnQgeyBsb3dlcmNhc2VTVkdFbGVtZW50cyB9O1xuIiwiaW1wb3J0IHsgbG93ZXJjYXNlU1ZHRWxlbWVudHMgfSBmcm9tICcuLi8uLi9zdmcvbG93ZXJjYXNlLWVsZW1lbnRzLm1qcyc7XG5cbmZ1bmN0aW9uIGlzU1ZHQ29tcG9uZW50KENvbXBvbmVudCkge1xuICAgIGlmIChcbiAgICAvKipcbiAgICAgKiBJZiBpdCdzIG5vdCBhIHN0cmluZywgaXQncyBhIGN1c3RvbSBSZWFjdCBjb21wb25lbnQuIEN1cnJlbnRseSB3ZSBvbmx5IHN1cHBvcnRcbiAgICAgKiBIVE1MIGN1c3RvbSBSZWFjdCBjb21wb25lbnRzLlxuICAgICAqL1xuICAgIHR5cGVvZiBDb21wb25lbnQgIT09IFwic3RyaW5nXCIgfHxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGl0IGNvbnRhaW5zIGEgZGFzaCwgdGhlIGVsZW1lbnQgaXMgYSBjdXN0b20gSFRNTCB3ZWJjb21wb25lbnQuXG4gICAgICAgICAqL1xuICAgICAgICBDb21wb25lbnQuaW5jbHVkZXMoXCItXCIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoXG4gICAgLyoqXG4gICAgICogSWYgaXQncyBpbiBvdXIgbGlzdCBvZiBsb3dlcmNhc2UgU1ZHIHRhZ3MsIGl0J3MgYW4gU1ZHIGNvbXBvbmVudFxuICAgICAqL1xuICAgIGxvd2VyY2FzZVNWR0VsZW1lbnRzLmluZGV4T2YoQ29tcG9uZW50KSA+IC0xIHx8XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBpdCBjb250YWlucyBhIGNhcGl0YWwgbGV0dGVyLCBpdCdzIGFuIFNWRyBjb21wb25lbnRcbiAgICAgICAgICovXG4gICAgICAgIC9bQS1aXS8udGVzdChDb21wb25lbnQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCB7IGlzU1ZHQ29tcG9uZW50IH07XG4iLCJjb25zdCBzY2FsZUNvcnJlY3RvcnMgPSB7fTtcbmZ1bmN0aW9uIGFkZFNjYWxlQ29ycmVjdG9yKGNvcnJlY3RvcnMpIHtcbiAgICBPYmplY3QuYXNzaWduKHNjYWxlQ29ycmVjdG9ycywgY29ycmVjdG9ycyk7XG59XG5cbmV4cG9ydCB7IGFkZFNjYWxlQ29ycmVjdG9yLCBzY2FsZUNvcnJlY3RvcnMgfTtcbiIsIi8qKlxuICogR2VuZXJhdGUgYSBsaXN0IG9mIGV2ZXJ5IHBvc3NpYmxlIHRyYW5zZm9ybSBrZXkuXG4gKi9cbmNvbnN0IHRyYW5zZm9ybVByb3BPcmRlciA9IFtcbiAgICBcInRyYW5zZm9ybVBlcnNwZWN0aXZlXCIsXG4gICAgXCJ4XCIsXG4gICAgXCJ5XCIsXG4gICAgXCJ6XCIsXG4gICAgXCJ0cmFuc2xhdGVYXCIsXG4gICAgXCJ0cmFuc2xhdGVZXCIsXG4gICAgXCJ0cmFuc2xhdGVaXCIsXG4gICAgXCJzY2FsZVwiLFxuICAgIFwic2NhbGVYXCIsXG4gICAgXCJzY2FsZVlcIixcbiAgICBcInJvdGF0ZVwiLFxuICAgIFwicm90YXRlWFwiLFxuICAgIFwicm90YXRlWVwiLFxuICAgIFwicm90YXRlWlwiLFxuICAgIFwic2tld1wiLFxuICAgIFwic2tld1hcIixcbiAgICBcInNrZXdZXCIsXG5dO1xuLyoqXG4gKiBBIHF1aWNrIGxvb2t1cCBmb3IgdHJhbnNmb3JtIHByb3BzLlxuICovXG5jb25zdCB0cmFuc2Zvcm1Qcm9wcyA9IG5ldyBTZXQodHJhbnNmb3JtUHJvcE9yZGVyKTtcblxuZXhwb3J0IHsgdHJhbnNmb3JtUHJvcE9yZGVyLCB0cmFuc2Zvcm1Qcm9wcyB9O1xuIiwiaW1wb3J0IHsgc2NhbGVDb3JyZWN0b3JzIH0gZnJvbSAnLi4vLi4vcHJvamVjdGlvbi9zdHlsZXMvc2NhbGUtY29ycmVjdGlvbi5tanMnO1xuaW1wb3J0IHsgdHJhbnNmb3JtUHJvcHMgfSBmcm9tICcuLi8uLi9yZW5kZXIvaHRtbC91dGlscy90cmFuc2Zvcm0ubWpzJztcblxuZnVuY3Rpb24gaXNGb3JjZWRNb3Rpb25WYWx1ZShrZXksIHsgbGF5b3V0LCBsYXlvdXRJZCB9KSB7XG4gICAgcmV0dXJuICh0cmFuc2Zvcm1Qcm9wcy5oYXMoa2V5KSB8fFxuICAgICAgICBrZXkuc3RhcnRzV2l0aChcIm9yaWdpblwiKSB8fFxuICAgICAgICAoKGxheW91dCB8fCBsYXlvdXRJZCAhPT0gdW5kZWZpbmVkKSAmJlxuICAgICAgICAgICAgKCEhc2NhbGVDb3JyZWN0b3JzW2tleV0gfHwga2V5ID09PSBcIm9wYWNpdHlcIikpKTtcbn1cblxuZXhwb3J0IHsgaXNGb3JjZWRNb3Rpb25WYWx1ZSB9O1xuIiwiY29uc3QgaXNNb3Rpb25WYWx1ZSA9ICh2YWx1ZSkgPT4gQm9vbGVhbih2YWx1ZSAmJiB2YWx1ZS5nZXRWZWxvY2l0eSk7XG5cbmV4cG9ydCB7IGlzTW90aW9uVmFsdWUgfTtcbiIsImltcG9ydCB7IHRyYW5zZm9ybVByb3BPcmRlciB9IGZyb20gJy4vdHJhbnNmb3JtLm1qcyc7XG5cbmNvbnN0IHRyYW5zbGF0ZUFsaWFzID0ge1xuICAgIHg6IFwidHJhbnNsYXRlWFwiLFxuICAgIHk6IFwidHJhbnNsYXRlWVwiLFxuICAgIHo6IFwidHJhbnNsYXRlWlwiLFxuICAgIHRyYW5zZm9ybVBlcnNwZWN0aXZlOiBcInBlcnNwZWN0aXZlXCIsXG59O1xuY29uc3QgbnVtVHJhbnNmb3JtcyA9IHRyYW5zZm9ybVByb3BPcmRlci5sZW5ndGg7XG4vKipcbiAqIEJ1aWxkIGEgQ1NTIHRyYW5zZm9ybSBzdHlsZSBmcm9tIGluZGl2aWR1YWwgeC95L3NjYWxlIGV0YyBwcm9wZXJ0aWVzLlxuICpcbiAqIFRoaXMgb3V0cHV0cyB3aXRoIGEgZGVmYXVsdCBvcmRlciBvZiB0cmFuc2Zvcm1zL3NjYWxlcy9yb3RhdGlvbnMsIHRoaXMgY2FuIGJlIGN1c3RvbWlzZWQgYnlcbiAqIHByb3ZpZGluZyBhIHRyYW5zZm9ybVRlbXBsYXRlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBidWlsZFRyYW5zZm9ybSh0cmFuc2Zvcm0sIHsgZW5hYmxlSGFyZHdhcmVBY2NlbGVyYXRpb24gPSB0cnVlLCBhbGxvd1RyYW5zZm9ybU5vbmUgPSB0cnVlLCB9LCB0cmFuc2Zvcm1Jc0RlZmF1bHQsIHRyYW5zZm9ybVRlbXBsYXRlKSB7XG4gICAgLy8gVGhlIHRyYW5zZm9ybSBzdHJpbmcgd2UncmUgZ29pbmcgdG8gYnVpbGQgaW50by5cbiAgICBsZXQgdHJhbnNmb3JtU3RyaW5nID0gXCJcIjtcbiAgICAvKipcbiAgICAgKiBMb29wIG92ZXIgYWxsIHBvc3NpYmxlIHRyYW5zZm9ybXMgaW4gb3JkZXIsIGFkZGluZyB0aGUgb25lcyB0aGF0XG4gICAgICogYXJlIHByZXNlbnQgdG8gdGhlIHRyYW5zZm9ybSBzdHJpbmcuXG4gICAgICovXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1UcmFuc2Zvcm1zOyBpKyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdHJhbnNmb3JtUHJvcE9yZGVyW2ldO1xuICAgICAgICBpZiAodHJhbnNmb3JtW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtTmFtZSA9IHRyYW5zbGF0ZUFsaWFzW2tleV0gfHwga2V5O1xuICAgICAgICAgICAgdHJhbnNmb3JtU3RyaW5nICs9IGAke3RyYW5zZm9ybU5hbWV9KCR7dHJhbnNmb3JtW2tleV19KSBgO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbiAmJiAhdHJhbnNmb3JtLnopIHtcbiAgICAgICAgdHJhbnNmb3JtU3RyaW5nICs9IFwidHJhbnNsYXRlWigwKVwiO1xuICAgIH1cbiAgICB0cmFuc2Zvcm1TdHJpbmcgPSB0cmFuc2Zvcm1TdHJpbmcudHJpbSgpO1xuICAgIC8vIElmIHdlIGhhdmUgYSBjdXN0b20gYHRyYW5zZm9ybWAgdGVtcGxhdGUsIHBhc3Mgb3VyIHRyYW5zZm9ybSB2YWx1ZXMgYW5kXG4gICAgLy8gZ2VuZXJhdGVkIHRyYW5zZm9ybVN0cmluZyB0byB0aGF0IGJlZm9yZSByZXR1cm5pbmdcbiAgICBpZiAodHJhbnNmb3JtVGVtcGxhdGUpIHtcbiAgICAgICAgdHJhbnNmb3JtU3RyaW5nID0gdHJhbnNmb3JtVGVtcGxhdGUodHJhbnNmb3JtLCB0cmFuc2Zvcm1Jc0RlZmF1bHQgPyBcIlwiIDogdHJhbnNmb3JtU3RyaW5nKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYWxsb3dUcmFuc2Zvcm1Ob25lICYmIHRyYW5zZm9ybUlzRGVmYXVsdCkge1xuICAgICAgICB0cmFuc2Zvcm1TdHJpbmcgPSBcIm5vbmVcIjtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zZm9ybVN0cmluZztcbn1cblxuZXhwb3J0IHsgYnVpbGRUcmFuc2Zvcm0gfTtcbiIsImNvbnN0IGNoZWNrU3RyaW5nU3RhcnRzV2l0aCA9ICh0b2tlbikgPT4gKGtleSkgPT4gdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiAmJiBrZXkuc3RhcnRzV2l0aCh0b2tlbik7XG5jb25zdCBpc0NTU1ZhcmlhYmxlTmFtZSA9IGNoZWNrU3RyaW5nU3RhcnRzV2l0aChcIi0tXCIpO1xuY29uc3QgaXNDU1NWYXJpYWJsZVRva2VuID0gY2hlY2tTdHJpbmdTdGFydHNXaXRoKFwidmFyKC0tXCIpO1xuY29uc3QgY3NzVmFyaWFibGVSZWdleCA9IC92YXJcXHMqXFwoXFxzKi0tW1xcdy1dKyhcXHMqLFxccyooPzooPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKikrKT9cXHMqXFwpL2c7XG5cbmV4cG9ydCB7IGNzc1ZhcmlhYmxlUmVnZXgsIGlzQ1NTVmFyaWFibGVOYW1lLCBpc0NTU1ZhcmlhYmxlVG9rZW4gfTtcbiIsIi8qKlxuICogUHJvdmlkZWQgYSB2YWx1ZSBhbmQgYSBWYWx1ZVR5cGUsIHJldHVybnMgdGhlIHZhbHVlIGFzIHRoYXQgdmFsdWUgdHlwZS5cbiAqL1xuY29uc3QgZ2V0VmFsdWVBc1R5cGUgPSAodmFsdWUsIHR5cGUpID0+IHtcbiAgICByZXR1cm4gdHlwZSAmJiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCJcbiAgICAgICAgPyB0eXBlLnRyYW5zZm9ybSh2YWx1ZSlcbiAgICAgICAgOiB2YWx1ZTtcbn07XG5cbmV4cG9ydCB7IGdldFZhbHVlQXNUeXBlIH07XG4iLCJjb25zdCBjbGFtcCA9IChtaW4sIG1heCwgdikgPT4gTWF0aC5taW4oTWF0aC5tYXgodiwgbWluKSwgbWF4KTtcblxuZXhwb3J0IHsgY2xhbXAgfTtcbiIsImltcG9ydCB7IGNsYW1wIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvY2xhbXAubWpzJztcblxuY29uc3QgbnVtYmVyID0ge1xuICAgIHRlc3Q6ICh2KSA9PiB0eXBlb2YgdiA9PT0gXCJudW1iZXJcIixcbiAgICBwYXJzZTogcGFyc2VGbG9hdCxcbiAgICB0cmFuc2Zvcm06ICh2KSA9PiB2LFxufTtcbmNvbnN0IGFscGhhID0ge1xuICAgIC4uLm51bWJlcixcbiAgICB0cmFuc2Zvcm06ICh2KSA9PiBjbGFtcCgwLCAxLCB2KSxcbn07XG5jb25zdCBzY2FsZSA9IHtcbiAgICAuLi5udW1iZXIsXG4gICAgZGVmYXVsdDogMSxcbn07XG5cbmV4cG9ydCB7IGFscGhhLCBudW1iZXIsIHNjYWxlIH07XG4iLCIvKipcbiAqIFRPRE86IFdoZW4gd2UgbW92ZSBmcm9tIHN0cmluZyBhcyBhIHNvdXJjZSBvZiB0cnV0aCB0byBkYXRhIG1vZGVsc1xuICogZXZlcnl0aGluZyBpbiB0aGlzIGZvbGRlciBzaG91bGQgcHJvYmFibHkgYmUgcmVmZXJyZWQgdG8gYXMgbW9kZWxzIHZzIHR5cGVzXG4gKi9cbi8vIElmIHRoaXMgbnVtYmVyIGlzIGEgZGVjaW1hbCwgbWFrZSBpdCBqdXN0IGZpdmUgZGVjaW1hbCBwbGFjZXNcbi8vIHRvIGF2b2lkIGV4cG9uZW50c1xuY29uc3Qgc2FuaXRpemUgPSAodikgPT4gTWF0aC5yb3VuZCh2ICogMTAwMDAwKSAvIDEwMDAwMDtcbmNvbnN0IGZsb2F0UmVnZXggPSAvKC0pPyhbXFxkXSpcXC4/W1xcZF0pKy9nO1xuY29uc3QgY29sb3JSZWdleCA9IC8oI1swLTlhLWZdezMsOH18KHJnYnxoc2wpYT9cXCgoLT9bXFxkXFwuXSslP1ssXFxzXSspezJ9KC0/W1xcZFxcLl0rJT8pXFxzKltcXCxcXC9dP1xccypbXFxkXFwuXSolP1xcKSkvZ2k7XG5jb25zdCBzaW5nbGVDb2xvclJlZ2V4ID0gL14oI1swLTlhLWZdezMsOH18KHJnYnxoc2wpYT9cXCgoLT9bXFxkXFwuXSslP1ssXFxzXSspezJ9KC0/W1xcZFxcLl0rJT8pXFxzKltcXCxcXC9dP1xccypbXFxkXFwuXSolP1xcKSkkL2k7XG5mdW5jdGlvbiBpc1N0cmluZyh2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSBcInN0cmluZ1wiO1xufVxuXG5leHBvcnQgeyBjb2xvclJlZ2V4LCBmbG9hdFJlZ2V4LCBpc1N0cmluZywgc2FuaXRpemUsIHNpbmdsZUNvbG9yUmVnZXggfTtcbiIsImltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnLi4vdXRpbHMubWpzJztcblxuY29uc3QgY3JlYXRlVW5pdFR5cGUgPSAodW5pdCkgPT4gKHtcbiAgICB0ZXN0OiAodikgPT4gaXNTdHJpbmcodikgJiYgdi5lbmRzV2l0aCh1bml0KSAmJiB2LnNwbGl0KFwiIFwiKS5sZW5ndGggPT09IDEsXG4gICAgcGFyc2U6IHBhcnNlRmxvYXQsXG4gICAgdHJhbnNmb3JtOiAodikgPT4gYCR7dn0ke3VuaXR9YCxcbn0pO1xuY29uc3QgZGVncmVlcyA9IGNyZWF0ZVVuaXRUeXBlKFwiZGVnXCIpO1xuY29uc3QgcGVyY2VudCA9IGNyZWF0ZVVuaXRUeXBlKFwiJVwiKTtcbmNvbnN0IHB4ID0gY3JlYXRlVW5pdFR5cGUoXCJweFwiKTtcbmNvbnN0IHZoID0gY3JlYXRlVW5pdFR5cGUoXCJ2aFwiKTtcbmNvbnN0IHZ3ID0gY3JlYXRlVW5pdFR5cGUoXCJ2d1wiKTtcbmNvbnN0IHByb2dyZXNzUGVyY2VudGFnZSA9IHtcbiAgICAuLi5wZXJjZW50LFxuICAgIHBhcnNlOiAodikgPT4gcGVyY2VudC5wYXJzZSh2KSAvIDEwMCxcbiAgICB0cmFuc2Zvcm06ICh2KSA9PiBwZXJjZW50LnRyYW5zZm9ybSh2ICogMTAwKSxcbn07XG5cbmV4cG9ydCB7IGRlZ3JlZXMsIHBlcmNlbnQsIHByb2dyZXNzUGVyY2VudGFnZSwgcHgsIHZoLCB2dyB9O1xuIiwiaW1wb3J0IHsgbnVtYmVyIH0gZnJvbSAnLi4vLi4vLi4vdmFsdWUvdHlwZXMvbnVtYmVycy9pbmRleC5tanMnO1xuXG5jb25zdCBpbnQgPSB7XG4gICAgLi4ubnVtYmVyLFxuICAgIHRyYW5zZm9ybTogTWF0aC5yb3VuZCxcbn07XG5cbmV4cG9ydCB7IGludCB9O1xuIiwiaW1wb3J0IHsgc2NhbGUsIGFscGhhIH0gZnJvbSAnLi4vLi4vLi4vdmFsdWUvdHlwZXMvbnVtYmVycy9pbmRleC5tanMnO1xuaW1wb3J0IHsgcHgsIGRlZ3JlZXMsIHByb2dyZXNzUGVyY2VudGFnZSB9IGZyb20gJy4uLy4uLy4uL3ZhbHVlL3R5cGVzL251bWJlcnMvdW5pdHMubWpzJztcbmltcG9ydCB7IGludCB9IGZyb20gJy4vdHlwZS1pbnQubWpzJztcblxuY29uc3QgbnVtYmVyVmFsdWVUeXBlcyA9IHtcbiAgICAvLyBCb3JkZXIgcHJvcHNcbiAgICBib3JkZXJXaWR0aDogcHgsXG4gICAgYm9yZGVyVG9wV2lkdGg6IHB4LFxuICAgIGJvcmRlclJpZ2h0V2lkdGg6IHB4LFxuICAgIGJvcmRlckJvdHRvbVdpZHRoOiBweCxcbiAgICBib3JkZXJMZWZ0V2lkdGg6IHB4LFxuICAgIGJvcmRlclJhZGl1czogcHgsXG4gICAgcmFkaXVzOiBweCxcbiAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiBweCxcbiAgICBib3JkZXJUb3BSaWdodFJhZGl1czogcHgsXG4gICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IHB4LFxuICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IHB4LFxuICAgIC8vIFBvc2l0aW9uaW5nIHByb3BzXG4gICAgd2lkdGg6IHB4LFxuICAgIG1heFdpZHRoOiBweCxcbiAgICBoZWlnaHQ6IHB4LFxuICAgIG1heEhlaWdodDogcHgsXG4gICAgc2l6ZTogcHgsXG4gICAgdG9wOiBweCxcbiAgICByaWdodDogcHgsXG4gICAgYm90dG9tOiBweCxcbiAgICBsZWZ0OiBweCxcbiAgICAvLyBTcGFjaW5nIHByb3BzXG4gICAgcGFkZGluZzogcHgsXG4gICAgcGFkZGluZ1RvcDogcHgsXG4gICAgcGFkZGluZ1JpZ2h0OiBweCxcbiAgICBwYWRkaW5nQm90dG9tOiBweCxcbiAgICBwYWRkaW5nTGVmdDogcHgsXG4gICAgbWFyZ2luOiBweCxcbiAgICBtYXJnaW5Ub3A6IHB4LFxuICAgIG1hcmdpblJpZ2h0OiBweCxcbiAgICBtYXJnaW5Cb3R0b206IHB4LFxuICAgIG1hcmdpbkxlZnQ6IHB4LFxuICAgIC8vIFRyYW5zZm9ybSBwcm9wc1xuICAgIHJvdGF0ZTogZGVncmVlcyxcbiAgICByb3RhdGVYOiBkZWdyZWVzLFxuICAgIHJvdGF0ZVk6IGRlZ3JlZXMsXG4gICAgcm90YXRlWjogZGVncmVlcyxcbiAgICBzY2FsZSxcbiAgICBzY2FsZVg6IHNjYWxlLFxuICAgIHNjYWxlWTogc2NhbGUsXG4gICAgc2NhbGVaOiBzY2FsZSxcbiAgICBza2V3OiBkZWdyZWVzLFxuICAgIHNrZXdYOiBkZWdyZWVzLFxuICAgIHNrZXdZOiBkZWdyZWVzLFxuICAgIGRpc3RhbmNlOiBweCxcbiAgICB0cmFuc2xhdGVYOiBweCxcbiAgICB0cmFuc2xhdGVZOiBweCxcbiAgICB0cmFuc2xhdGVaOiBweCxcbiAgICB4OiBweCxcbiAgICB5OiBweCxcbiAgICB6OiBweCxcbiAgICBwZXJzcGVjdGl2ZTogcHgsXG4gICAgdHJhbnNmb3JtUGVyc3BlY3RpdmU6IHB4LFxuICAgIG9wYWNpdHk6IGFscGhhLFxuICAgIG9yaWdpblg6IHByb2dyZXNzUGVyY2VudGFnZSxcbiAgICBvcmlnaW5ZOiBwcm9ncmVzc1BlcmNlbnRhZ2UsXG4gICAgb3JpZ2luWjogcHgsXG4gICAgLy8gTWlzY1xuICAgIHpJbmRleDogaW50LFxuICAgIC8vIFNWR1xuICAgIGZpbGxPcGFjaXR5OiBhbHBoYSxcbiAgICBzdHJva2VPcGFjaXR5OiBhbHBoYSxcbiAgICBudW1PY3RhdmVzOiBpbnQsXG59O1xuXG5leHBvcnQgeyBudW1iZXJWYWx1ZVR5cGVzIH07XG4iLCJpbXBvcnQgeyBidWlsZFRyYW5zZm9ybSB9IGZyb20gJy4vYnVpbGQtdHJhbnNmb3JtLm1qcyc7XG5pbXBvcnQgeyBpc0NTU1ZhcmlhYmxlTmFtZSB9IGZyb20gJy4uLy4uL2RvbS91dGlscy9pcy1jc3MtdmFyaWFibGUubWpzJztcbmltcG9ydCB7IHRyYW5zZm9ybVByb3BzIH0gZnJvbSAnLi90cmFuc2Zvcm0ubWpzJztcbmltcG9ydCB7IGdldFZhbHVlQXNUeXBlIH0gZnJvbSAnLi4vLi4vZG9tL3ZhbHVlLXR5cGVzL2dldC1hcy10eXBlLm1qcyc7XG5pbXBvcnQgeyBudW1iZXJWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vLi4vZG9tL3ZhbHVlLXR5cGVzL251bWJlci5tanMnO1xuXG5mdW5jdGlvbiBidWlsZEhUTUxTdHlsZXMoc3RhdGUsIGxhdGVzdFZhbHVlcywgb3B0aW9ucywgdHJhbnNmb3JtVGVtcGxhdGUpIHtcbiAgICBjb25zdCB7IHN0eWxlLCB2YXJzLCB0cmFuc2Zvcm0sIHRyYW5zZm9ybU9yaWdpbiB9ID0gc3RhdGU7XG4gICAgLy8gVHJhY2sgd2hldGhlciB3ZSBlbmNvdW50ZXIgYW55IHRyYW5zZm9ybSBvciB0cmFuc2Zvcm1PcmlnaW4gdmFsdWVzLlxuICAgIGxldCBoYXNUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgICBsZXQgaGFzVHJhbnNmb3JtT3JpZ2luID0gZmFsc2U7XG4gICAgLy8gRG9lcyB0aGUgY2FsY3VsYXRlZCB0cmFuc2Zvcm0gZXNzZW50aWFsbHkgZXF1YWwgXCJub25lXCI/XG4gICAgbGV0IHRyYW5zZm9ybUlzTm9uZSA9IHRydWU7XG4gICAgLyoqXG4gICAgICogTG9vcCBvdmVyIGFsbCBvdXIgbGF0ZXN0IGFuaW1hdGVkIHZhbHVlcyBhbmQgZGVjaWRlIHdoZXRoZXIgdG8gaGFuZGxlIHRoZW1cbiAgICAgKiBhcyBhIHN0eWxlIG9yIENTUyB2YXJpYWJsZS5cbiAgICAgKlxuICAgICAqIFRyYW5zZm9ybXMgYW5kIHRyYW5zZm9ybSBvcmlnaW5zIGFyZSBrZXB0IHNlcGVyYXRlbHkgZm9yIGZ1cnRoZXIgcHJvY2Vzc2luZy5cbiAgICAgKi9cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBsYXRlc3RWYWx1ZXMpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBsYXRlc3RWYWx1ZXNba2V5XTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoaXMgaXMgYSBDU1MgdmFyaWFibGUgd2UgZG9uJ3QgZG8gYW55IGZ1cnRoZXIgcHJvY2Vzc2luZy5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChpc0NTU1ZhcmlhYmxlTmFtZShrZXkpKSB7XG4gICAgICAgICAgICB2YXJzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIENvbnZlcnQgdGhlIHZhbHVlIHRvIGl0cyBkZWZhdWx0IHZhbHVlIHR5cGUsIGllIDAgLT4gXCIwcHhcIlxuICAgICAgICBjb25zdCB2YWx1ZVR5cGUgPSBudW1iZXJWYWx1ZVR5cGVzW2tleV07XG4gICAgICAgIGNvbnN0IHZhbHVlQXNUeXBlID0gZ2V0VmFsdWVBc1R5cGUodmFsdWUsIHZhbHVlVHlwZSk7XG4gICAgICAgIGlmICh0cmFuc2Zvcm1Qcm9wcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHRyYW5zZm9ybSwgZmxhZyB0byBlbmFibGUgZnVydGhlciB0cmFuc2Zvcm0gcHJvY2Vzc2luZ1xuICAgICAgICAgICAgaGFzVHJhbnNmb3JtID0gdHJ1ZTtcbiAgICAgICAgICAgIHRyYW5zZm9ybVtrZXldID0gdmFsdWVBc1R5cGU7XG4gICAgICAgICAgICAvLyBJZiB3ZSBhbHJlYWR5IGtub3cgd2UgaGF2ZSBhIG5vbi1kZWZhdWx0IHRyYW5zZm9ybSwgZWFybHkgcmV0dXJuXG4gICAgICAgICAgICBpZiAoIXRyYW5zZm9ybUlzTm9uZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSBjaGVjayB0byBzZWUgaWYgdGhpcyBpcyBhIGRlZmF1bHQgdHJhbnNmb3JtXG4gICAgICAgICAgICBpZiAodmFsdWUgIT09ICh2YWx1ZVR5cGUuZGVmYXVsdCB8fCAwKSlcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1Jc05vbmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkuc3RhcnRzV2l0aChcIm9yaWdpblwiKSkge1xuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHRyYW5zZm9ybSBvcmlnaW4sIGZsYWcgYW5kIGVuYWJsZSBmdXJ0aGVyIHRyYW5zZm9ybS1vcmlnaW4gcHJvY2Vzc2luZ1xuICAgICAgICAgICAgaGFzVHJhbnNmb3JtT3JpZ2luID0gdHJ1ZTtcbiAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbltrZXldID0gdmFsdWVBc1R5cGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdHlsZVtrZXldID0gdmFsdWVBc1R5cGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFsYXRlc3RWYWx1ZXMudHJhbnNmb3JtKSB7XG4gICAgICAgIGlmIChoYXNUcmFuc2Zvcm0gfHwgdHJhbnNmb3JtVGVtcGxhdGUpIHtcbiAgICAgICAgICAgIHN0eWxlLnRyYW5zZm9ybSA9IGJ1aWxkVHJhbnNmb3JtKHN0YXRlLnRyYW5zZm9ybSwgb3B0aW9ucywgdHJhbnNmb3JtSXNOb25lLCB0cmFuc2Zvcm1UZW1wbGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3R5bGUudHJhbnNmb3JtKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlIGhhdmUgcHJldmlvdXNseSBjcmVhdGVkIGEgdHJhbnNmb3JtIGJ1dCBjdXJyZW50bHkgZG9uJ3QgaGF2ZSBhbnksXG4gICAgICAgICAgICAgKiByZXNldCB0cmFuc2Zvcm0gc3R5bGUgdG8gbm9uZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc3R5bGUudHJhbnNmb3JtID0gXCJub25lXCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQnVpbGQgYSB0cmFuc2Zvcm1PcmlnaW4gc3R5bGUuIFVzZXMgdGhlIHNhbWUgZGVmYXVsdHMgYXMgdGhlIGJyb3dzZXIgZm9yXG4gICAgICogdW5kZWZpbmVkIG9yaWdpbnMuXG4gICAgICovXG4gICAgaWYgKGhhc1RyYW5zZm9ybU9yaWdpbikge1xuICAgICAgICBjb25zdCB7IG9yaWdpblggPSBcIjUwJVwiLCBvcmlnaW5ZID0gXCI1MCVcIiwgb3JpZ2luWiA9IDAsIH0gPSB0cmFuc2Zvcm1PcmlnaW47XG4gICAgICAgIHN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IGAke29yaWdpblh9ICR7b3JpZ2luWX0gJHtvcmlnaW5afWA7XG4gICAgfVxufVxuXG5leHBvcnQgeyBidWlsZEhUTUxTdHlsZXMgfTtcbiIsImNvbnN0IGNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSA9ICgpID0+ICh7XG4gICAgc3R5bGU6IHt9LFxuICAgIHRyYW5zZm9ybToge30sXG4gICAgdHJhbnNmb3JtT3JpZ2luOiB7fSxcbiAgICB2YXJzOiB7fSxcbn0pO1xuXG5leHBvcnQgeyBjcmVhdGVIdG1sUmVuZGVyU3RhdGUgfTtcbiIsImltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc0ZvcmNlZE1vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vbW90aW9uL3V0aWxzL2lzLWZvcmNlZC1tb3Rpb24tdmFsdWUubWpzJztcbmltcG9ydCB7IGlzTW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi92YWx1ZS91dGlscy9pcy1tb3Rpb24tdmFsdWUubWpzJztcbmltcG9ydCB7IGJ1aWxkSFRNTFN0eWxlcyB9IGZyb20gJy4vdXRpbHMvYnVpbGQtc3R5bGVzLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVIdG1sUmVuZGVyU3RhdGUgfSBmcm9tICcuL3V0aWxzL2NyZWF0ZS1yZW5kZXItc3RhdGUubWpzJztcblxuZnVuY3Rpb24gY29weVJhd1ZhbHVlc09ubHkodGFyZ2V0LCBzb3VyY2UsIHByb3BzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmICghaXNNb3Rpb25WYWx1ZShzb3VyY2Vba2V5XSkgJiYgIWlzRm9yY2VkTW90aW9uVmFsdWUoa2V5LCBwcm9wcykpIHtcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB1c2VJbml0aWFsTW90aW9uVmFsdWVzKHsgdHJhbnNmb3JtVGVtcGxhdGUgfSwgdmlzdWFsU3RhdGUsIGlzU3RhdGljKSB7XG4gICAgcmV0dXJuIHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IGNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSgpO1xuICAgICAgICBidWlsZEhUTUxTdHlsZXMoc3RhdGUsIHZpc3VhbFN0YXRlLCB7IGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uOiAhaXNTdGF0aWMgfSwgdHJhbnNmb3JtVGVtcGxhdGUpO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUudmFycywgc3RhdGUuc3R5bGUpO1xuICAgIH0sIFt2aXN1YWxTdGF0ZV0pO1xufVxuZnVuY3Rpb24gdXNlU3R5bGUocHJvcHMsIHZpc3VhbFN0YXRlLCBpc1N0YXRpYykge1xuICAgIGNvbnN0IHN0eWxlUHJvcCA9IHByb3BzLnN0eWxlIHx8IHt9O1xuICAgIGNvbnN0IHN0eWxlID0ge307XG4gICAgLyoqXG4gICAgICogQ29weSBub24tTW90aW9uIFZhbHVlcyBzdHJhaWdodCBpbnRvIHN0eWxlXG4gICAgICovXG4gICAgY29weVJhd1ZhbHVlc09ubHkoc3R5bGUsIHN0eWxlUHJvcCwgcHJvcHMpO1xuICAgIE9iamVjdC5hc3NpZ24oc3R5bGUsIHVzZUluaXRpYWxNb3Rpb25WYWx1ZXMocHJvcHMsIHZpc3VhbFN0YXRlLCBpc1N0YXRpYykpO1xuICAgIHJldHVybiBwcm9wcy50cmFuc2Zvcm1WYWx1ZXMgPyBwcm9wcy50cmFuc2Zvcm1WYWx1ZXMoc3R5bGUpIDogc3R5bGU7XG59XG5mdW5jdGlvbiB1c2VIVE1MUHJvcHMocHJvcHMsIHZpc3VhbFN0YXRlLCBpc1N0YXRpYykge1xuICAgIC8vIFRoZSBgYW55YCBpc24ndCBpZGVhbCBidXQgaXQgaXMgdGhlIHR5cGUgb2YgY3JlYXRlRWxlbWVudCBwcm9wcyBhcmd1bWVudFxuICAgIGNvbnN0IGh0bWxQcm9wcyA9IHt9O1xuICAgIGNvbnN0IHN0eWxlID0gdXNlU3R5bGUocHJvcHMsIHZpc3VhbFN0YXRlLCBpc1N0YXRpYyk7XG4gICAgaWYgKHByb3BzLmRyYWcgJiYgcHJvcHMuZHJhZ0xpc3RlbmVyICE9PSBmYWxzZSkge1xuICAgICAgICAvLyBEaXNhYmxlIHRoZSBnaG9zdCBlbGVtZW50IHdoZW4gYSB1c2VyIGRyYWdzXG4gICAgICAgIGh0bWxQcm9wcy5kcmFnZ2FibGUgPSBmYWxzZTtcbiAgICAgICAgLy8gRGlzYWJsZSB0ZXh0IHNlbGVjdGlvblxuICAgICAgICBzdHlsZS51c2VyU2VsZWN0ID1cbiAgICAgICAgICAgIHN0eWxlLldlYmtpdFVzZXJTZWxlY3QgPVxuICAgICAgICAgICAgICAgIHN0eWxlLldlYmtpdFRvdWNoQ2FsbG91dCA9XG4gICAgICAgICAgICAgICAgICAgIFwibm9uZVwiO1xuICAgICAgICAvLyBEaXNhYmxlIHNjcm9sbGluZyBvbiB0aGUgZHJhZ2dhYmxlIGRpcmVjdGlvblxuICAgICAgICBzdHlsZS50b3VjaEFjdGlvbiA9XG4gICAgICAgICAgICBwcm9wcy5kcmFnID09PSB0cnVlXG4gICAgICAgICAgICAgICAgPyBcIm5vbmVcIlxuICAgICAgICAgICAgICAgIDogYHBhbi0ke3Byb3BzLmRyYWcgPT09IFwieFwiID8gXCJ5XCIgOiBcInhcIn1gO1xuICAgIH1cbiAgICBpZiAocHJvcHMudGFiSW5kZXggPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAocHJvcHMub25UYXAgfHwgcHJvcHMub25UYXBTdGFydCB8fCBwcm9wcy53aGlsZVRhcCkpIHtcbiAgICAgICAgaHRtbFByb3BzLnRhYkluZGV4ID0gMDtcbiAgICB9XG4gICAgaHRtbFByb3BzLnN0eWxlID0gc3R5bGU7XG4gICAgcmV0dXJuIGh0bWxQcm9wcztcbn1cblxuZXhwb3J0IHsgY29weVJhd1ZhbHVlc09ubHksIHVzZUhUTUxQcm9wcyB9O1xuIiwiLyoqXG4gKiBBIGxpc3Qgb2YgYWxsIHZhbGlkIE1vdGlvblByb3BzLlxuICpcbiAqIEBwcml2YXRlUmVtYXJrc1xuICogVGhpcyBkb2Vzbid0IHRocm93IGlmIGEgYE1vdGlvblByb3BgIG5hbWUgaXMgbWlzc2luZyAtIGl0IHNob3VsZC5cbiAqL1xuY29uc3QgdmFsaWRNb3Rpb25Qcm9wcyA9IG5ldyBTZXQoW1xuICAgIFwiYW5pbWF0ZVwiLFxuICAgIFwiZXhpdFwiLFxuICAgIFwidmFyaWFudHNcIixcbiAgICBcImluaXRpYWxcIixcbiAgICBcInN0eWxlXCIsXG4gICAgXCJ2YWx1ZXNcIixcbiAgICBcInZhcmlhbnRzXCIsXG4gICAgXCJ0cmFuc2l0aW9uXCIsXG4gICAgXCJ0cmFuc2Zvcm1UZW1wbGF0ZVwiLFxuICAgIFwidHJhbnNmb3JtVmFsdWVzXCIsXG4gICAgXCJjdXN0b21cIixcbiAgICBcImluaGVyaXRcIixcbiAgICBcIm9uTGF5b3V0QW5pbWF0aW9uU3RhcnRcIixcbiAgICBcIm9uTGF5b3V0QW5pbWF0aW9uQ29tcGxldGVcIixcbiAgICBcIm9uTGF5b3V0TWVhc3VyZVwiLFxuICAgIFwib25CZWZvcmVMYXlvdXRNZWFzdXJlXCIsXG4gICAgXCJvbkFuaW1hdGlvblN0YXJ0XCIsXG4gICAgXCJvbkFuaW1hdGlvbkNvbXBsZXRlXCIsXG4gICAgXCJvblVwZGF0ZVwiLFxuICAgIFwib25EcmFnU3RhcnRcIixcbiAgICBcIm9uRHJhZ1wiLFxuICAgIFwib25EcmFnRW5kXCIsXG4gICAgXCJvbk1lYXN1cmVEcmFnQ29uc3RyYWludHNcIixcbiAgICBcIm9uRGlyZWN0aW9uTG9ja1wiLFxuICAgIFwib25EcmFnVHJhbnNpdGlvbkVuZFwiLFxuICAgIFwiX2RyYWdYXCIsXG4gICAgXCJfZHJhZ1lcIixcbiAgICBcIm9uSG92ZXJTdGFydFwiLFxuICAgIFwib25Ib3ZlckVuZFwiLFxuICAgIFwib25WaWV3cG9ydEVudGVyXCIsXG4gICAgXCJvblZpZXdwb3J0TGVhdmVcIixcbiAgICBcImlnbm9yZVN0cmljdFwiLFxuICAgIFwidmlld3BvcnRcIixcbl0pO1xuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGEgcHJvcCBuYW1lIGlzIGEgdmFsaWQgYE1vdGlvblByb3BgIGtleS5cbiAqXG4gKiBAcGFyYW0ga2V5IC0gTmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gY2hlY2tcbiAqIEByZXR1cm5zIGB0cnVlYCBpcyBrZXkgaXMgYSB2YWxpZCBgTW90aW9uUHJvcGAuXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBpc1ZhbGlkTW90aW9uUHJvcChrZXkpIHtcbiAgICByZXR1cm4gKGtleS5zdGFydHNXaXRoKFwid2hpbGVcIikgfHxcbiAgICAgICAgKGtleS5zdGFydHNXaXRoKFwiZHJhZ1wiKSAmJiBrZXkgIT09IFwiZHJhZ2dhYmxlXCIpIHx8XG4gICAgICAgIGtleS5zdGFydHNXaXRoKFwibGF5b3V0XCIpIHx8XG4gICAgICAgIGtleS5zdGFydHNXaXRoKFwib25UYXBcIikgfHxcbiAgICAgICAga2V5LnN0YXJ0c1dpdGgoXCJvblBhblwiKSB8fFxuICAgICAgICB2YWxpZE1vdGlvblByb3BzLmhhcyhrZXkpKTtcbn1cblxuZXhwb3J0IHsgaXNWYWxpZE1vdGlvblByb3AgfTtcbiIsImltcG9ydCB7IGlzVmFsaWRNb3Rpb25Qcm9wIH0gZnJvbSAnLi4vLi4vLi4vbW90aW9uL3V0aWxzL3ZhbGlkLXByb3AubWpzJztcblxubGV0IHNob3VsZEZvcndhcmQgPSAoa2V5KSA9PiAhaXNWYWxpZE1vdGlvblByb3Aoa2V5KTtcbmZ1bmN0aW9uIGxvYWRFeHRlcm5hbElzVmFsaWRQcm9wKGlzVmFsaWRQcm9wKSB7XG4gICAgaWYgKCFpc1ZhbGlkUHJvcClcbiAgICAgICAgcmV0dXJuO1xuICAgIC8vIEV4cGxpY2l0bHkgZmlsdGVyIG91ciBldmVudHNcbiAgICBzaG91bGRGb3J3YXJkID0gKGtleSkgPT4ga2V5LnN0YXJ0c1dpdGgoXCJvblwiKSA/ICFpc1ZhbGlkTW90aW9uUHJvcChrZXkpIDogaXNWYWxpZFByb3Aoa2V5KTtcbn1cbi8qKlxuICogRW1vdGlvbiBhbmQgU3R5bGVkIENvbXBvbmVudHMgYm90aCBhbGxvdyB1c2VycyB0byBwYXNzIHRocm91Z2ggYXJiaXRyYXJ5IHByb3BzIHRvIHRoZWlyIGNvbXBvbmVudHNcbiAqIHRvIGR5bmFtaWNhbGx5IGdlbmVyYXRlIENTUy4gVGhleSBib3RoIHVzZSB0aGUgYEBlbW90aW9uL2lzLXByb3AtdmFsaWRgIHBhY2thZ2UgdG8gZGV0ZXJtaW5lIHdoaWNoXG4gKiBvZiB0aGVzZSBzaG91bGQgYmUgcGFzc2VkIHRvIHRoZSB1bmRlcmx5aW5nIERPTSBub2RlLlxuICpcbiAqIEhvd2V2ZXIsIHdoZW4gc3R5bGluZyBhIE1vdGlvbiBjb21wb25lbnQgYHN0eWxlZChtb3Rpb24uZGl2KWAsIGJvdGggcGFja2FnZXMgcGFzcyB0aHJvdWdoICphbGwqIHByb3BzXG4gKiBhcyBpdCdzIHNlZW4gYXMgYW4gYXJiaXRyYXJ5IGNvbXBvbmVudCByYXRoZXIgdGhhbiBhIERPTSBub2RlLiBNb3Rpb24gb25seSBhbGxvd3MgYXJiaXRyYXJ5IHByb3BzXG4gKiBwYXNzZWQgdGhyb3VnaCB0aGUgYGN1c3RvbWAgcHJvcCBzbyBpdCBkb2Vzbid0ICpuZWVkKiB0aGUgcGF5bG9hZCBvciBjb21wdXRhdGlvbmFsIG92ZXJoZWFkIG9mXG4gKiBgQGVtb3Rpb24vaXMtcHJvcC12YWxpZGAsIGhvd2V2ZXIgdG8gZml4IHRoaXMgcHJvYmxlbSB3ZSBuZWVkIHRvIHVzZSBpdC5cbiAqXG4gKiBCeSBtYWtpbmcgaXQgYW4gb3B0aW9uYWxEZXBlbmRlbmN5IHdlIGNhbiBvZmZlciB0aGlzIGZ1bmN0aW9uYWxpdHkgb25seSBpbiB0aGUgc2l0dWF0aW9ucyB3aGVyZSBpdCdzXG4gKiBhY3R1YWxseSByZXF1aXJlZC5cbiAqL1xudHJ5IHtcbiAgICAvKipcbiAgICAgKiBXZSBhdHRlbXB0IHRvIGltcG9ydCB0aGlzIHBhY2thZ2UgYnV0IHJlcXVpcmUgd29uJ3QgYmUgZGVmaW5lZCBpbiBlc20gZW52aXJvbm1lbnRzLCBpbiB0aGF0IGNhc2VcbiAgICAgKiBpc1Byb3BWYWxpZCB3aWxsIGhhdmUgdG8gYmUgcHJvdmlkZWQgdmlhIGBNb3Rpb25Db250ZXh0YC4gSW4gYSA2LjAuMCB0aGlzIHNob3VsZCBwcm9iYWJseSBiZSByZW1vdmVkXG4gICAgICogaW4gZmF2b3VyIG9mIGV4cGxpY2l0IGluamVjdGlvbi5cbiAgICAgKi9cbiAgICBsb2FkRXh0ZXJuYWxJc1ZhbGlkUHJvcChyZXF1aXJlKFwiQGVtb3Rpb24vaXMtcHJvcC12YWxpZFwiKS5kZWZhdWx0KTtcbn1cbmNhdGNoIChfYSkge1xuICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gYWN0dWFsbHkgZG8gYW55dGhpbmcgaGVyZSAtIHRoZSBmYWxsYmFjayBpcyB0aGUgZXhpc3RpbmcgYGlzUHJvcFZhbGlkYC5cbn1cbmZ1bmN0aW9uIGZpbHRlclByb3BzKHByb3BzLCBpc0RvbSwgZm9yd2FyZE1vdGlvblByb3BzKSB7XG4gICAgY29uc3QgZmlsdGVyZWRQcm9wcyA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiB2YWx1ZXMgaXMgY29uc2lkZXJlZCBhIHZhbGlkIHByb3AgYnkgRW1vdGlvbiwgc28gaWYgaXQncyBwcmVzZW50XG4gICAgICAgICAqIHRoaXMgd2lsbCBiZSByZW5kZXJlZCBvdXQgdG8gdGhlIERPTSB1bmxlc3MgZXhwbGljaXRseSBmaWx0ZXJlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogV2UgY2hlY2sgdGhlIHR5cGUgYXMgaXQgY291bGQgYmUgdXNlZCB3aXRoIHRoZSBgZmVDb2xvck1hdHJpeGBcbiAgICAgICAgICogZWxlbWVudCwgd2hpY2ggd2Ugc3VwcG9ydC5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChrZXkgPT09IFwidmFsdWVzXCIgJiYgdHlwZW9mIHByb3BzLnZhbHVlcyA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBpZiAoc2hvdWxkRm9yd2FyZChrZXkpIHx8XG4gICAgICAgICAgICAoZm9yd2FyZE1vdGlvblByb3BzID09PSB0cnVlICYmIGlzVmFsaWRNb3Rpb25Qcm9wKGtleSkpIHx8XG4gICAgICAgICAgICAoIWlzRG9tICYmICFpc1ZhbGlkTW90aW9uUHJvcChrZXkpKSB8fFxuICAgICAgICAgICAgLy8gSWYgdHJ5aW5nIHRvIHVzZSBuYXRpdmUgSFRNTCBkcmFnIGV2ZW50cywgZm9yd2FyZCBkcmFnIGxpc3RlbmVyc1xuICAgICAgICAgICAgKHByb3BzW1wiZHJhZ2dhYmxlXCJdICYmIGtleS5zdGFydHNXaXRoKFwib25EcmFnXCIpKSkge1xuICAgICAgICAgICAgZmlsdGVyZWRQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmlsdGVyZWRQcm9wcztcbn1cblxuZXhwb3J0IHsgZmlsdGVyUHJvcHMsIGxvYWRFeHRlcm5hbElzVmFsaWRQcm9wIH07XG4iLCJpbXBvcnQgeyBweCB9IGZyb20gJy4uLy4uLy4uL3ZhbHVlL3R5cGVzL251bWJlcnMvdW5pdHMubWpzJztcblxuZnVuY3Rpb24gY2FsY09yaWdpbihvcmlnaW4sIG9mZnNldCwgc2l6ZSkge1xuICAgIHJldHVybiB0eXBlb2Ygb3JpZ2luID09PSBcInN0cmluZ1wiXG4gICAgICAgID8gb3JpZ2luXG4gICAgICAgIDogcHgudHJhbnNmb3JtKG9mZnNldCArIHNpemUgKiBvcmlnaW4pO1xufVxuLyoqXG4gKiBUaGUgU1ZHIHRyYW5zZm9ybSBvcmlnaW4gZGVmYXVsdHMgYXJlIGRpZmZlcmVudCB0byBDU1MgYW5kIGlzIGxlc3MgaW50dWl0aXZlLFxuICogc28gd2UgdXNlIHRoZSBtZWFzdXJlZCBkaW1lbnNpb25zIG9mIHRoZSBTVkcgdG8gcmVjb25jaWxlIHRoZXNlLlxuICovXG5mdW5jdGlvbiBjYWxjU1ZHVHJhbnNmb3JtT3JpZ2luKGRpbWVuc2lvbnMsIG9yaWdpblgsIG9yaWdpblkpIHtcbiAgICBjb25zdCBweE9yaWdpblggPSBjYWxjT3JpZ2luKG9yaWdpblgsIGRpbWVuc2lvbnMueCwgZGltZW5zaW9ucy53aWR0aCk7XG4gICAgY29uc3QgcHhPcmlnaW5ZID0gY2FsY09yaWdpbihvcmlnaW5ZLCBkaW1lbnNpb25zLnksIGRpbWVuc2lvbnMuaGVpZ2h0KTtcbiAgICByZXR1cm4gYCR7cHhPcmlnaW5YfSAke3B4T3JpZ2luWX1gO1xufVxuXG5leHBvcnQgeyBjYWxjU1ZHVHJhbnNmb3JtT3JpZ2luIH07XG4iLCJpbXBvcnQgeyBweCB9IGZyb20gJy4uLy4uLy4uL3ZhbHVlL3R5cGVzL251bWJlcnMvdW5pdHMubWpzJztcblxuY29uc3QgZGFzaEtleXMgPSB7XG4gICAgb2Zmc2V0OiBcInN0cm9rZS1kYXNob2Zmc2V0XCIsXG4gICAgYXJyYXk6IFwic3Ryb2tlLWRhc2hhcnJheVwiLFxufTtcbmNvbnN0IGNhbWVsS2V5cyA9IHtcbiAgICBvZmZzZXQ6IFwic3Ryb2tlRGFzaG9mZnNldFwiLFxuICAgIGFycmF5OiBcInN0cm9rZURhc2hhcnJheVwiLFxufTtcbi8qKlxuICogQnVpbGQgU1ZHIHBhdGggcHJvcGVydGllcy4gVXNlcyB0aGUgcGF0aCdzIG1lYXN1cmVkIGxlbmd0aCB0byBjb252ZXJ0XG4gKiBvdXIgY3VzdG9tIHBhdGhMZW5ndGgsIHBhdGhTcGFjaW5nIGFuZCBwYXRoT2Zmc2V0IGludG8gc3Ryb2tlLWRhc2hvZmZzZXRcbiAqIGFuZCBzdHJva2UtZGFzaGFycmF5IGF0dHJpYnV0ZXMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBtdXRhdGl2ZSB0byByZWR1Y2UgcGVyLWZyYW1lIEdDLlxuICovXG5mdW5jdGlvbiBidWlsZFNWR1BhdGgoYXR0cnMsIGxlbmd0aCwgc3BhY2luZyA9IDEsIG9mZnNldCA9IDAsIHVzZURhc2hDYXNlID0gdHJ1ZSkge1xuICAgIC8vIE5vcm1hbGlzZSBwYXRoIGxlbmd0aCBieSBzZXR0aW5nIFNWRyBhdHRyaWJ1dGUgcGF0aExlbmd0aCB0byAxXG4gICAgYXR0cnMucGF0aExlbmd0aCA9IDE7XG4gICAgLy8gV2UgdXNlIGRhc2ggY2FzZSB3aGVuIHNldHRpbmcgYXR0cmlidXRlcyBkaXJlY3RseSB0byB0aGUgRE9NIG5vZGUgYW5kIGNhbWVsIGNhc2VcbiAgICAvLyB3aGVuIGRlZmluaW5nIHByb3BzIG9uIGEgUmVhY3QgY29tcG9uZW50LlxuICAgIGNvbnN0IGtleXMgPSB1c2VEYXNoQ2FzZSA/IGRhc2hLZXlzIDogY2FtZWxLZXlzO1xuICAgIC8vIEJ1aWxkIHRoZSBkYXNoIG9mZnNldFxuICAgIGF0dHJzW2tleXMub2Zmc2V0XSA9IHB4LnRyYW5zZm9ybSgtb2Zmc2V0KTtcbiAgICAvLyBCdWlsZCB0aGUgZGFzaCBhcnJheVxuICAgIGNvbnN0IHBhdGhMZW5ndGggPSBweC50cmFuc2Zvcm0obGVuZ3RoKTtcbiAgICBjb25zdCBwYXRoU3BhY2luZyA9IHB4LnRyYW5zZm9ybShzcGFjaW5nKTtcbiAgICBhdHRyc1trZXlzLmFycmF5XSA9IGAke3BhdGhMZW5ndGh9ICR7cGF0aFNwYWNpbmd9YDtcbn1cblxuZXhwb3J0IHsgYnVpbGRTVkdQYXRoIH07XG4iLCJpbXBvcnQgeyBidWlsZEhUTUxTdHlsZXMgfSBmcm9tICcuLi8uLi9odG1sL3V0aWxzL2J1aWxkLXN0eWxlcy5tanMnO1xuaW1wb3J0IHsgY2FsY1NWR1RyYW5zZm9ybU9yaWdpbiB9IGZyb20gJy4vdHJhbnNmb3JtLW9yaWdpbi5tanMnO1xuaW1wb3J0IHsgYnVpbGRTVkdQYXRoIH0gZnJvbSAnLi9wYXRoLm1qcyc7XG5cbi8qKlxuICogQnVpbGQgU1ZHIHZpc3VhbCBhdHRyYnV0ZXMsIGxpa2UgY3ggYW5kIHN0eWxlLnRyYW5zZm9ybVxuICovXG5mdW5jdGlvbiBidWlsZFNWR0F0dHJzKHN0YXRlLCB7IGF0dHJYLCBhdHRyWSwgYXR0clNjYWxlLCBvcmlnaW5YLCBvcmlnaW5ZLCBwYXRoTGVuZ3RoLCBwYXRoU3BhY2luZyA9IDEsIHBhdGhPZmZzZXQgPSAwLCBcbi8vIFRoaXMgaXMgb2JqZWN0IGNyZWF0aW9uLCB3aGljaCB3ZSB0cnkgdG8gYXZvaWQgcGVyLWZyYW1lLlxuLi4ubGF0ZXN0IH0sIG9wdGlvbnMsIGlzU1ZHVGFnLCB0cmFuc2Zvcm1UZW1wbGF0ZSkge1xuICAgIGJ1aWxkSFRNTFN0eWxlcyhzdGF0ZSwgbGF0ZXN0LCBvcHRpb25zLCB0cmFuc2Zvcm1UZW1wbGF0ZSk7XG4gICAgLyoqXG4gICAgICogRm9yIHN2ZyB0YWdzIHdlIGp1c3Qgd2FudCB0byBtYWtlIHN1cmUgdmlld0JveCBpcyBhbmltYXRhYmxlIGFuZCB0cmVhdCBhbGwgdGhlIHN0eWxlc1xuICAgICAqIGFzIG5vcm1hbCBIVE1MIHRhZ3MuXG4gICAgICovXG4gICAgaWYgKGlzU1ZHVGFnKSB7XG4gICAgICAgIGlmIChzdGF0ZS5zdHlsZS52aWV3Qm94KSB7XG4gICAgICAgICAgICBzdGF0ZS5hdHRycy52aWV3Qm94ID0gc3RhdGUuc3R5bGUudmlld0JveDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHN0YXRlLmF0dHJzID0gc3RhdGUuc3R5bGU7XG4gICAgc3RhdGUuc3R5bGUgPSB7fTtcbiAgICBjb25zdCB7IGF0dHJzLCBzdHlsZSwgZGltZW5zaW9ucyB9ID0gc3RhdGU7XG4gICAgLyoqXG4gICAgICogSG93ZXZlciwgd2UgYXBwbHkgdHJhbnNmb3JtcyBhcyBDU1MgdHJhbnNmb3Jtcy4gU28gaWYgd2UgZGV0ZWN0IGEgdHJhbnNmb3JtIHdlIHRha2UgaXQgZnJvbSBhdHRyc1xuICAgICAqIGFuZCBjb3B5IGl0IGludG8gc3R5bGUuXG4gICAgICovXG4gICAgaWYgKGF0dHJzLnRyYW5zZm9ybSkge1xuICAgICAgICBpZiAoZGltZW5zaW9ucylcbiAgICAgICAgICAgIHN0eWxlLnRyYW5zZm9ybSA9IGF0dHJzLnRyYW5zZm9ybTtcbiAgICAgICAgZGVsZXRlIGF0dHJzLnRyYW5zZm9ybTtcbiAgICB9XG4gICAgLy8gUGFyc2UgdHJhbnNmb3JtT3JpZ2luXG4gICAgaWYgKGRpbWVuc2lvbnMgJiZcbiAgICAgICAgKG9yaWdpblggIT09IHVuZGVmaW5lZCB8fCBvcmlnaW5ZICE9PSB1bmRlZmluZWQgfHwgc3R5bGUudHJhbnNmb3JtKSkge1xuICAgICAgICBzdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBjYWxjU1ZHVHJhbnNmb3JtT3JpZ2luKGRpbWVuc2lvbnMsIG9yaWdpblggIT09IHVuZGVmaW5lZCA/IG9yaWdpblggOiAwLjUsIG9yaWdpblkgIT09IHVuZGVmaW5lZCA/IG9yaWdpblkgOiAwLjUpO1xuICAgIH1cbiAgICAvLyBSZW5kZXIgYXR0clgvYXR0clkvYXR0clNjYWxlIGFzIGF0dHJpYnV0ZXNcbiAgICBpZiAoYXR0clggIT09IHVuZGVmaW5lZClcbiAgICAgICAgYXR0cnMueCA9IGF0dHJYO1xuICAgIGlmIChhdHRyWSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICBhdHRycy55ID0gYXR0clk7XG4gICAgaWYgKGF0dHJTY2FsZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICBhdHRycy5zY2FsZSA9IGF0dHJTY2FsZTtcbiAgICAvLyBCdWlsZCBTVkcgcGF0aCBpZiBvbmUgaGFzIGJlZW4gZGVmaW5lZFxuICAgIGlmIChwYXRoTGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYnVpbGRTVkdQYXRoKGF0dHJzLCBwYXRoTGVuZ3RoLCBwYXRoU3BhY2luZywgcGF0aE9mZnNldCwgZmFsc2UpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgYnVpbGRTVkdBdHRycyB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlSHRtbFJlbmRlclN0YXRlIH0gZnJvbSAnLi4vLi4vaHRtbC91dGlscy9jcmVhdGUtcmVuZGVyLXN0YXRlLm1qcyc7XG5cbmNvbnN0IGNyZWF0ZVN2Z1JlbmRlclN0YXRlID0gKCkgPT4gKHtcbiAgICAuLi5jcmVhdGVIdG1sUmVuZGVyU3RhdGUoKSxcbiAgICBhdHRyczoge30sXG59KTtcblxuZXhwb3J0IHsgY3JlYXRlU3ZnUmVuZGVyU3RhdGUgfTtcbiIsImNvbnN0IGlzU1ZHVGFnID0gKHRhZykgPT4gdHlwZW9mIHRhZyA9PT0gXCJzdHJpbmdcIiAmJiB0YWcudG9Mb3dlckNhc2UoKSA9PT0gXCJzdmdcIjtcblxuZXhwb3J0IHsgaXNTVkdUYWcgfTtcbiIsImltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb3B5UmF3VmFsdWVzT25seSB9IGZyb20gJy4uL2h0bWwvdXNlLXByb3BzLm1qcyc7XG5pbXBvcnQgeyBidWlsZFNWR0F0dHJzIH0gZnJvbSAnLi91dGlscy9idWlsZC1hdHRycy5tanMnO1xuaW1wb3J0IHsgY3JlYXRlU3ZnUmVuZGVyU3RhdGUgfSBmcm9tICcuL3V0aWxzL2NyZWF0ZS1yZW5kZXItc3RhdGUubWpzJztcbmltcG9ydCB7IGlzU1ZHVGFnIH0gZnJvbSAnLi91dGlscy9pcy1zdmctdGFnLm1qcyc7XG5cbmZ1bmN0aW9uIHVzZVNWR1Byb3BzKHByb3BzLCB2aXN1YWxTdGF0ZSwgX2lzU3RhdGljLCBDb21wb25lbnQpIHtcbiAgICBjb25zdCB2aXN1YWxQcm9wcyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IGNyZWF0ZVN2Z1JlbmRlclN0YXRlKCk7XG4gICAgICAgIGJ1aWxkU1ZHQXR0cnMoc3RhdGUsIHZpc3VhbFN0YXRlLCB7IGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uOiBmYWxzZSB9LCBpc1NWR1RhZyhDb21wb25lbnQpLCBwcm9wcy50cmFuc2Zvcm1UZW1wbGF0ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zdGF0ZS5hdHRycyxcbiAgICAgICAgICAgIHN0eWxlOiB7IC4uLnN0YXRlLnN0eWxlIH0sXG4gICAgICAgIH07XG4gICAgfSwgW3Zpc3VhbFN0YXRlXSk7XG4gICAgaWYgKHByb3BzLnN0eWxlKSB7XG4gICAgICAgIGNvbnN0IHJhd1N0eWxlcyA9IHt9O1xuICAgICAgICBjb3B5UmF3VmFsdWVzT25seShyYXdTdHlsZXMsIHByb3BzLnN0eWxlLCBwcm9wcyk7XG4gICAgICAgIHZpc3VhbFByb3BzLnN0eWxlID0geyAuLi5yYXdTdHlsZXMsIC4uLnZpc3VhbFByb3BzLnN0eWxlIH07XG4gICAgfVxuICAgIHJldHVybiB2aXN1YWxQcm9wcztcbn1cblxuZXhwb3J0IHsgdXNlU1ZHUHJvcHMgfTtcbiIsImltcG9ydCB7IHVzZU1lbW8sIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VIVE1MUHJvcHMgfSBmcm9tICcuLi9odG1sL3VzZS1wcm9wcy5tanMnO1xuaW1wb3J0IHsgZmlsdGVyUHJvcHMgfSBmcm9tICcuL3V0aWxzL2ZpbHRlci1wcm9wcy5tanMnO1xuaW1wb3J0IHsgaXNTVkdDb21wb25lbnQgfSBmcm9tICcuL3V0aWxzL2lzLXN2Zy1jb21wb25lbnQubWpzJztcbmltcG9ydCB7IHVzZVNWR1Byb3BzIH0gZnJvbSAnLi4vc3ZnL3VzZS1wcm9wcy5tanMnO1xuaW1wb3J0IHsgaXNNb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uL3ZhbHVlL3V0aWxzL2lzLW1vdGlvbi12YWx1ZS5tanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVVc2VSZW5kZXIoZm9yd2FyZE1vdGlvblByb3BzID0gZmFsc2UpIHtcbiAgICBjb25zdCB1c2VSZW5kZXIgPSAoQ29tcG9uZW50LCBwcm9wcywgcmVmLCB7IGxhdGVzdFZhbHVlcyB9LCBpc1N0YXRpYykgPT4ge1xuICAgICAgICBjb25zdCB1c2VWaXN1YWxQcm9wcyA9IGlzU1ZHQ29tcG9uZW50KENvbXBvbmVudClcbiAgICAgICAgICAgID8gdXNlU1ZHUHJvcHNcbiAgICAgICAgICAgIDogdXNlSFRNTFByb3BzO1xuICAgICAgICBjb25zdCB2aXN1YWxQcm9wcyA9IHVzZVZpc3VhbFByb3BzKHByb3BzLCBsYXRlc3RWYWx1ZXMsIGlzU3RhdGljLCBDb21wb25lbnQpO1xuICAgICAgICBjb25zdCBmaWx0ZXJlZFByb3BzID0gZmlsdGVyUHJvcHMocHJvcHMsIHR5cGVvZiBDb21wb25lbnQgPT09IFwic3RyaW5nXCIsIGZvcndhcmRNb3Rpb25Qcm9wcyk7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRQcm9wcyA9IHtcbiAgICAgICAgICAgIC4uLmZpbHRlcmVkUHJvcHMsXG4gICAgICAgICAgICAuLi52aXN1YWxQcm9wcyxcbiAgICAgICAgICAgIHJlZixcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGNvbXBvbmVudCBoYXMgYmVlbiBoYW5kZWQgYSBtb3Rpb24gdmFsdWUgYXMgaXRzIGNoaWxkLFxuICAgICAgICAgKiBtZW1vaXNlIGl0cyBpbml0aWFsIHZhbHVlIGFuZCByZW5kZXIgdGhhdC4gU3Vic2VxdWVudCB1cGRhdGVzXG4gICAgICAgICAqIHdpbGwgYmUgaGFuZGxlZCBieSB0aGUgb25DaGFuZ2UgaGFuZGxlclxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gcHJvcHM7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVkQ2hpbGRyZW4gPSB1c2VNZW1vKCgpID0+IChpc01vdGlvblZhbHVlKGNoaWxkcmVuKSA/IGNoaWxkcmVuLmdldCgpIDogY2hpbGRyZW4pLCBbY2hpbGRyZW5dKTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCB7XG4gICAgICAgICAgICAuLi5lbGVtZW50UHJvcHMsXG4gICAgICAgICAgICBjaGlsZHJlbjogcmVuZGVyZWRDaGlsZHJlbixcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gdXNlUmVuZGVyO1xufVxuXG5leHBvcnQgeyBjcmVhdGVVc2VSZW5kZXIgfTtcbiIsIi8qKlxuICogQ29udmVydCBjYW1lbENhc2UgdG8gZGFzaC1jYXNlIHByb3BlcnRpZXMuXG4gKi9cbmNvbnN0IGNhbWVsVG9EYXNoID0gKHN0cikgPT4gc3RyLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csIFwiJDEtJDJcIikudG9Mb3dlckNhc2UoKTtcblxuZXhwb3J0IHsgY2FtZWxUb0Rhc2ggfTtcbiIsImZ1bmN0aW9uIHJlbmRlckhUTUwoZWxlbWVudCwgeyBzdHlsZSwgdmFycyB9LCBzdHlsZVByb3AsIHByb2plY3Rpb24pIHtcbiAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlLCBwcm9qZWN0aW9uICYmIHByb2plY3Rpb24uZ2V0UHJvamVjdGlvblN0eWxlcyhzdHlsZVByb3ApKTtcbiAgICAvLyBMb29wIG92ZXIgYW55IENTUyB2YXJpYWJsZXMgYW5kIGFzc2lnbiB0aG9zZS5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiB2YXJzKSB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoa2V5LCB2YXJzW2tleV0pO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgcmVuZGVySFRNTCB9O1xuIiwiLyoqXG4gKiBBIHNldCBvZiBhdHRyaWJ1dGUgbmFtZXMgdGhhdCBhcmUgYWx3YXlzIHJlYWQvd3JpdHRlbiBhcyBjYW1lbCBjYXNlLlxuICovXG5jb25zdCBjYW1lbENhc2VBdHRyaWJ1dGVzID0gbmV3IFNldChbXG4gICAgXCJiYXNlRnJlcXVlbmN5XCIsXG4gICAgXCJkaWZmdXNlQ29uc3RhbnRcIixcbiAgICBcImtlcm5lbE1hdHJpeFwiLFxuICAgIFwia2VybmVsVW5pdExlbmd0aFwiLFxuICAgIFwia2V5U3BsaW5lc1wiLFxuICAgIFwia2V5VGltZXNcIixcbiAgICBcImxpbWl0aW5nQ29uZUFuZ2xlXCIsXG4gICAgXCJtYXJrZXJIZWlnaHRcIixcbiAgICBcIm1hcmtlcldpZHRoXCIsXG4gICAgXCJudW1PY3RhdmVzXCIsXG4gICAgXCJ0YXJnZXRYXCIsXG4gICAgXCJ0YXJnZXRZXCIsXG4gICAgXCJzdXJmYWNlU2NhbGVcIixcbiAgICBcInNwZWN1bGFyQ29uc3RhbnRcIixcbiAgICBcInNwZWN1bGFyRXhwb25lbnRcIixcbiAgICBcInN0ZERldmlhdGlvblwiLFxuICAgIFwidGFibGVWYWx1ZXNcIixcbiAgICBcInZpZXdCb3hcIixcbiAgICBcImdyYWRpZW50VHJhbnNmb3JtXCIsXG4gICAgXCJwYXRoTGVuZ3RoXCIsXG4gICAgXCJzdGFydE9mZnNldFwiLFxuICAgIFwidGV4dExlbmd0aFwiLFxuICAgIFwibGVuZ3RoQWRqdXN0XCIsXG5dKTtcblxuZXhwb3J0IHsgY2FtZWxDYXNlQXR0cmlidXRlcyB9O1xuIiwiaW1wb3J0IHsgY2FtZWxUb0Rhc2ggfSBmcm9tICcuLi8uLi9kb20vdXRpbHMvY2FtZWwtdG8tZGFzaC5tanMnO1xuaW1wb3J0IHsgcmVuZGVySFRNTCB9IGZyb20gJy4uLy4uL2h0bWwvdXRpbHMvcmVuZGVyLm1qcyc7XG5pbXBvcnQgeyBjYW1lbENhc2VBdHRyaWJ1dGVzIH0gZnJvbSAnLi9jYW1lbC1jYXNlLWF0dHJzLm1qcyc7XG5cbmZ1bmN0aW9uIHJlbmRlclNWRyhlbGVtZW50LCByZW5kZXJTdGF0ZSwgX3N0eWxlUHJvcCwgcHJvamVjdGlvbikge1xuICAgIHJlbmRlckhUTUwoZWxlbWVudCwgcmVuZGVyU3RhdGUsIHVuZGVmaW5lZCwgcHJvamVjdGlvbik7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcmVuZGVyU3RhdGUuYXR0cnMpIHtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoIWNhbWVsQ2FzZUF0dHJpYnV0ZXMuaGFzKGtleSkgPyBjYW1lbFRvRGFzaChrZXkpIDoga2V5LCByZW5kZXJTdGF0ZS5hdHRyc1trZXldKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IHJlbmRlclNWRyB9O1xuIiwiaW1wb3J0IHsgaXNGb3JjZWRNb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uLy4uL21vdGlvbi91dGlscy9pcy1mb3JjZWQtbW90aW9uLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vLi4vdmFsdWUvdXRpbHMvaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5cbmZ1bmN0aW9uIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyhwcm9wcywgcHJldlByb3BzKSB7XG4gICAgY29uc3QgeyBzdHlsZSB9ID0gcHJvcHM7XG4gICAgY29uc3QgbmV3VmFsdWVzID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc3R5bGUpIHtcbiAgICAgICAgaWYgKGlzTW90aW9uVmFsdWUoc3R5bGVba2V5XSkgfHxcbiAgICAgICAgICAgIChwcmV2UHJvcHMuc3R5bGUgJiYgaXNNb3Rpb25WYWx1ZShwcmV2UHJvcHMuc3R5bGVba2V5XSkpIHx8XG4gICAgICAgICAgICBpc0ZvcmNlZE1vdGlvblZhbHVlKGtleSwgcHJvcHMpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZXNba2V5XSA9IHN0eWxlW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld1ZhbHVlcztcbn1cblxuZXhwb3J0IHsgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzIH07XG4iLCJpbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vLi4vdmFsdWUvdXRpbHMvaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMgYXMgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzJDEgfSBmcm9tICcuLi8uLi9odG1sL3V0aWxzL3NjcmFwZS1tb3Rpb24tdmFsdWVzLm1qcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm1Qcm9wT3JkZXIgfSBmcm9tICcuLi8uLi9odG1sL3V0aWxzL3RyYW5zZm9ybS5tanMnO1xuXG5mdW5jdGlvbiBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMocHJvcHMsIHByZXZQcm9wcykge1xuICAgIGNvbnN0IG5ld1ZhbHVlcyA9IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyQxKHByb3BzLCBwcmV2UHJvcHMpO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XG4gICAgICAgIGlmIChpc01vdGlvblZhbHVlKHByb3BzW2tleV0pIHx8IGlzTW90aW9uVmFsdWUocHJldlByb3BzW2tleV0pKSB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRLZXkgPSB0cmFuc2Zvcm1Qcm9wT3JkZXIuaW5kZXhPZihrZXkpICE9PSAtMVxuICAgICAgICAgICAgICAgID8gXCJhdHRyXCIgKyBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc3Vic3RyaW5nKDEpXG4gICAgICAgICAgICAgICAgOiBrZXk7XG4gICAgICAgICAgICBuZXdWYWx1ZXNbdGFyZ2V0S2V5XSA9IHByb3BzW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld1ZhbHVlcztcbn1cblxuZXhwb3J0IHsgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzIH07XG4iLCJmdW5jdGlvbiByZXNvbHZlVmFyaWFudEZyb21Qcm9wcyhwcm9wcywgZGVmaW5pdGlvbiwgY3VzdG9tLCBjdXJyZW50VmFsdWVzID0ge30sIGN1cnJlbnRWZWxvY2l0eSA9IHt9KSB7XG4gICAgLyoqXG4gICAgICogSWYgdGhlIHZhcmlhbnQgZGVmaW5pdGlvbiBpcyBhIGZ1bmN0aW9uLCByZXNvbHZlLlxuICAgICAqL1xuICAgIGlmICh0eXBlb2YgZGVmaW5pdGlvbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGRlZmluaXRpb24gPSBkZWZpbml0aW9uKGN1c3RvbSAhPT0gdW5kZWZpbmVkID8gY3VzdG9tIDogcHJvcHMuY3VzdG9tLCBjdXJyZW50VmFsdWVzLCBjdXJyZW50VmVsb2NpdHkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJZiB0aGUgdmFyaWFudCBkZWZpbml0aW9uIGlzIGEgdmFyaWFudCBsYWJlbCwgb3JcbiAgICAgKiB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYSB2YXJpYW50IGxhYmVsLCByZXNvbHZlLlxuICAgICAqL1xuICAgIGlmICh0eXBlb2YgZGVmaW5pdGlvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBkZWZpbml0aW9uID0gcHJvcHMudmFyaWFudHMgJiYgcHJvcHMudmFyaWFudHNbZGVmaW5pdGlvbl07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF0IHRoaXMgcG9pbnQgd2UndmUgcmVzb2x2ZWQgYm90aCBmdW5jdGlvbnMgYW5kIHZhcmlhbnQgbGFiZWxzLFxuICAgICAqIGJ1dCB0aGUgcmVzb2x2ZWQgdmFyaWFudCBsYWJlbCBtaWdodCBpdHNlbGYgaGF2ZSBiZWVuIGEgZnVuY3Rpb24uXG4gICAgICogSWYgc28sIHJlc29sdmUuIFRoaXMgY2FuIG9ubHkgaGF2ZSByZXR1cm5lZCBhIHZhbGlkIHRhcmdldCBvYmplY3QuXG4gICAgICovXG4gICAgaWYgKHR5cGVvZiBkZWZpbml0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZGVmaW5pdGlvbiA9IGRlZmluaXRpb24oY3VzdG9tICE9PSB1bmRlZmluZWQgPyBjdXN0b20gOiBwcm9wcy5jdXN0b20sIGN1cnJlbnRWYWx1ZXMsIGN1cnJlbnRWZWxvY2l0eSk7XG4gICAgfVxuICAgIHJldHVybiBkZWZpbml0aW9uO1xufVxuXG5leHBvcnQgeyByZXNvbHZlVmFyaWFudEZyb21Qcm9wcyB9O1xuIiwiY29uc3QgaXNLZXlmcmFtZXNUYXJnZXQgPSAodikgPT4ge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHYpO1xufTtcblxuZXhwb3J0IHsgaXNLZXlmcmFtZXNUYXJnZXQgfTtcbiIsImltcG9ydCB7IGlzS2V5ZnJhbWVzVGFyZ2V0IH0gZnJvbSAnLi4vYW5pbWF0aW9uL3V0aWxzL2lzLWtleWZyYW1lcy10YXJnZXQubWpzJztcblxuY29uc3QgaXNDdXN0b21WYWx1ZSA9ICh2KSA9PiB7XG4gICAgcmV0dXJuIEJvb2xlYW4odiAmJiB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2Lm1peCAmJiB2LnRvVmFsdWUpO1xufTtcbmNvbnN0IHJlc29sdmVGaW5hbFZhbHVlSW5LZXlmcmFtZXMgPSAodikgPT4ge1xuICAgIC8vIFRPRE8gbWF5YmUgdGhyb3cgaWYgdi5sZW5ndGggLSAxIGlzIHBsYWNlaG9sZGVyIHRva2VuP1xuICAgIHJldHVybiBpc0tleWZyYW1lc1RhcmdldCh2KSA/IHZbdi5sZW5ndGggLSAxXSB8fCAwIDogdjtcbn07XG5cbmV4cG9ydCB7IGlzQ3VzdG9tVmFsdWUsIHJlc29sdmVGaW5hbFZhbHVlSW5LZXlmcmFtZXMgfTtcbiIsImltcG9ydCB7IGlzQ3VzdG9tVmFsdWUgfSBmcm9tICcuLi8uLi91dGlscy9yZXNvbHZlLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi9pcy1tb3Rpb24tdmFsdWUubWpzJztcblxuLyoqXG4gKiBJZiB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgYSBNb3Rpb25WYWx1ZSwgdGhpcyByZXR1cm5zIHRoZSBhY3R1YWwgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHRoZSB2YWx1ZSBpdHNlbGZcbiAqXG4gKiBUT0RPOiBSZW1vdmUgYW5kIG1vdmUgdG8gbGlicmFyeVxuICovXG5mdW5jdGlvbiByZXNvbHZlTW90aW9uVmFsdWUodmFsdWUpIHtcbiAgICBjb25zdCB1bndyYXBwZWRWYWx1ZSA9IGlzTW90aW9uVmFsdWUodmFsdWUpID8gdmFsdWUuZ2V0KCkgOiB2YWx1ZTtcbiAgICByZXR1cm4gaXNDdXN0b21WYWx1ZSh1bndyYXBwZWRWYWx1ZSlcbiAgICAgICAgPyB1bndyYXBwZWRWYWx1ZS50b1ZhbHVlKClcbiAgICAgICAgOiB1bndyYXBwZWRWYWx1ZTtcbn1cblxuZXhwb3J0IHsgcmVzb2x2ZU1vdGlvblZhbHVlIH07XG4iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNBbmltYXRpb25Db250cm9scyB9IGZyb20gJy4uLy4uL2FuaW1hdGlvbi91dGlscy9pcy1hbmltYXRpb24tY29udHJvbHMubWpzJztcbmltcG9ydCB7IFByZXNlbmNlQ29udGV4dCB9IGZyb20gJy4uLy4uL2NvbnRleHQvUHJlc2VuY2VDb250ZXh0Lm1qcyc7XG5pbXBvcnQgeyByZXNvbHZlVmFyaWFudEZyb21Qcm9wcyB9IGZyb20gJy4uLy4uL3JlbmRlci91dGlscy9yZXNvbHZlLXZhcmlhbnRzLm1qcyc7XG5pbXBvcnQgeyB1c2VDb25zdGFudCB9IGZyb20gJy4uLy4uL3V0aWxzL3VzZS1jb25zdGFudC5tanMnO1xuaW1wb3J0IHsgcmVzb2x2ZU1vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vdmFsdWUvdXRpbHMvcmVzb2x2ZS1tb3Rpb24tdmFsdWUubWpzJztcbmltcG9ydCB7IE1vdGlvbkNvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L01vdGlvbkNvbnRleHQvaW5kZXgubWpzJztcbmltcG9ydCB7IGlzQ29udHJvbGxpbmdWYXJpYW50cywgaXNWYXJpYW50Tm9kZSB9IGZyb20gJy4uLy4uL3JlbmRlci91dGlscy9pcy1jb250cm9sbGluZy12YXJpYW50cy5tanMnO1xuXG5mdW5jdGlvbiBtYWtlU3RhdGUoeyBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMsIGNyZWF0ZVJlbmRlclN0YXRlLCBvbk1vdW50LCB9LCBwcm9wcywgY29udGV4dCwgcHJlc2VuY2VDb250ZXh0KSB7XG4gICAgY29uc3Qgc3RhdGUgPSB7XG4gICAgICAgIGxhdGVzdFZhbHVlczogbWFrZUxhdGVzdFZhbHVlcyhwcm9wcywgY29udGV4dCwgcHJlc2VuY2VDb250ZXh0LCBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMpLFxuICAgICAgICByZW5kZXJTdGF0ZTogY3JlYXRlUmVuZGVyU3RhdGUoKSxcbiAgICB9O1xuICAgIGlmIChvbk1vdW50KSB7XG4gICAgICAgIHN0YXRlLm1vdW50ID0gKGluc3RhbmNlKSA9PiBvbk1vdW50KHByb3BzLCBpbnN0YW5jZSwgc3RhdGUpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdGU7XG59XG5jb25zdCBtYWtlVXNlVmlzdWFsU3RhdGUgPSAoY29uZmlnKSA9PiAocHJvcHMsIGlzU3RhdGljKSA9PiB7XG4gICAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoTW90aW9uQ29udGV4dCk7XG4gICAgY29uc3QgcHJlc2VuY2VDb250ZXh0ID0gdXNlQ29udGV4dChQcmVzZW5jZUNvbnRleHQpO1xuICAgIGNvbnN0IG1ha2UgPSAoKSA9PiBtYWtlU3RhdGUoY29uZmlnLCBwcm9wcywgY29udGV4dCwgcHJlc2VuY2VDb250ZXh0KTtcbiAgICByZXR1cm4gaXNTdGF0aWMgPyBtYWtlKCkgOiB1c2VDb25zdGFudChtYWtlKTtcbn07XG5mdW5jdGlvbiBtYWtlTGF0ZXN0VmFsdWVzKHByb3BzLCBjb250ZXh0LCBwcmVzZW5jZUNvbnRleHQsIHNjcmFwZU1vdGlvblZhbHVlcykge1xuICAgIGNvbnN0IHZhbHVlcyA9IHt9O1xuICAgIGNvbnN0IG1vdGlvblZhbHVlcyA9IHNjcmFwZU1vdGlvblZhbHVlcyhwcm9wcywge30pO1xuICAgIGZvciAoY29uc3Qga2V5IGluIG1vdGlvblZhbHVlcykge1xuICAgICAgICB2YWx1ZXNba2V5XSA9IHJlc29sdmVNb3Rpb25WYWx1ZShtb3Rpb25WYWx1ZXNba2V5XSk7XG4gICAgfVxuICAgIGxldCB7IGluaXRpYWwsIGFuaW1hdGUgfSA9IHByb3BzO1xuICAgIGNvbnN0IGlzQ29udHJvbGxpbmdWYXJpYW50cyQxID0gaXNDb250cm9sbGluZ1ZhcmlhbnRzKHByb3BzKTtcbiAgICBjb25zdCBpc1ZhcmlhbnROb2RlJDEgPSBpc1ZhcmlhbnROb2RlKHByb3BzKTtcbiAgICBpZiAoY29udGV4dCAmJlxuICAgICAgICBpc1ZhcmlhbnROb2RlJDEgJiZcbiAgICAgICAgIWlzQ29udHJvbGxpbmdWYXJpYW50cyQxICYmXG4gICAgICAgIHByb3BzLmluaGVyaXQgIT09IGZhbHNlKSB7XG4gICAgICAgIGlmIChpbml0aWFsID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBpbml0aWFsID0gY29udGV4dC5pbml0aWFsO1xuICAgICAgICBpZiAoYW5pbWF0ZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgYW5pbWF0ZSA9IGNvbnRleHQuYW5pbWF0ZTtcbiAgICB9XG4gICAgbGV0IGlzSW5pdGlhbEFuaW1hdGlvbkJsb2NrZWQgPSBwcmVzZW5jZUNvbnRleHRcbiAgICAgICAgPyBwcmVzZW5jZUNvbnRleHQuaW5pdGlhbCA9PT0gZmFsc2VcbiAgICAgICAgOiBmYWxzZTtcbiAgICBpc0luaXRpYWxBbmltYXRpb25CbG9ja2VkID0gaXNJbml0aWFsQW5pbWF0aW9uQmxvY2tlZCB8fCBpbml0aWFsID09PSBmYWxzZTtcbiAgICBjb25zdCB2YXJpYW50VG9TZXQgPSBpc0luaXRpYWxBbmltYXRpb25CbG9ja2VkID8gYW5pbWF0ZSA6IGluaXRpYWw7XG4gICAgaWYgKHZhcmlhbnRUb1NldCAmJlxuICAgICAgICB0eXBlb2YgdmFyaWFudFRvU2V0ICE9PSBcImJvb2xlYW5cIiAmJlxuICAgICAgICAhaXNBbmltYXRpb25Db250cm9scyh2YXJpYW50VG9TZXQpKSB7XG4gICAgICAgIGNvbnN0IGxpc3QgPSBBcnJheS5pc0FycmF5KHZhcmlhbnRUb1NldCkgPyB2YXJpYW50VG9TZXQgOiBbdmFyaWFudFRvU2V0XTtcbiAgICAgICAgbGlzdC5mb3JFYWNoKChkZWZpbml0aW9uKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXNvbHZlZCA9IHJlc29sdmVWYXJpYW50RnJvbVByb3BzKHByb3BzLCBkZWZpbml0aW9uKTtcbiAgICAgICAgICAgIGlmICghcmVzb2x2ZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgeyB0cmFuc2l0aW9uRW5kLCB0cmFuc2l0aW9uLCAuLi50YXJnZXQgfSA9IHJlc29sdmVkO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlVGFyZ2V0ID0gdGFyZ2V0W2tleV07XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVUYXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBUYWtlIGZpbmFsIGtleWZyYW1lIGlmIHRoZSBpbml0aWFsIGFuaW1hdGlvbiBpcyBibG9ja2VkIGJlY2F1c2VcbiAgICAgICAgICAgICAgICAgICAgICogd2Ugd2FudCB0byBpbml0aWFsaXNlIGF0IHRoZSBlbmQgb2YgdGhhdCBibG9ja2VkIGFuaW1hdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gaXNJbml0aWFsQW5pbWF0aW9uQmxvY2tlZFxuICAgICAgICAgICAgICAgICAgICAgICAgPyB2YWx1ZVRhcmdldC5sZW5ndGggLSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDA7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlVGFyZ2V0ID0gdmFsdWVUYXJnZXRbaW5kZXhdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodmFsdWVUYXJnZXQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2tleV0gPSB2YWx1ZVRhcmdldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0cmFuc2l0aW9uRW5kKVxuICAgICAgICAgICAgICAgIHZhbHVlc1trZXldID0gdHJhbnNpdGlvbkVuZFtrZXldO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbn1cblxuZXhwb3J0IHsgbWFrZVVzZVZpc3VhbFN0YXRlIH07XG4iLCJpbXBvcnQgeyB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNvbnN0YW50IHZhbHVlIG92ZXIgdGhlIGxpZmVjeWNsZSBvZiBhIGNvbXBvbmVudC5cbiAqXG4gKiBFdmVuIGlmIGB1c2VNZW1vYCBpcyBwcm92aWRlZCBhbiBlbXB0eSBhcnJheSBhcyBpdHMgZmluYWwgYXJndW1lbnQsIGl0IGRvZXNuJ3Qgb2ZmZXJcbiAqIGEgZ3VhcmFudGVlIHRoYXQgaXQgd29uJ3QgcmUtcnVuIGZvciBwZXJmb3JtYW5jZSByZWFzb25zIGxhdGVyIG9uLiBCeSB1c2luZyBgdXNlQ29uc3RhbnRgXG4gKiB5b3UgY2FuIGVuc3VyZSB0aGF0IGluaXRpYWxpc2VycyBkb24ndCBleGVjdXRlIHR3aWNlIG9yIG1vcmUuXG4gKi9cbmZ1bmN0aW9uIHVzZUNvbnN0YW50KGluaXQpIHtcbiAgICBjb25zdCByZWYgPSB1c2VSZWYobnVsbCk7XG4gICAgaWYgKHJlZi5jdXJyZW50ID09PSBudWxsKSB7XG4gICAgICAgIHJlZi5jdXJyZW50ID0gaW5pdCgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVmLmN1cnJlbnQ7XG59XG5cbmV4cG9ydCB7IHVzZUNvbnN0YW50IH07XG4iLCJjb25zdCBub29wID0gKGFueSkgPT4gYW55O1xuXG5leHBvcnQgeyBub29wIH07XG4iLCJjbGFzcyBRdWV1ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMub3JkZXIgPSBbXTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZWQgPSBuZXcgU2V0KCk7XG4gICAgfVxuICAgIGFkZChwcm9jZXNzKSB7XG4gICAgICAgIGlmICghdGhpcy5zY2hlZHVsZWQuaGFzKHByb2Nlc3MpKSB7XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlZC5hZGQocHJvY2Vzcyk7XG4gICAgICAgICAgICB0aGlzLm9yZGVyLnB1c2gocHJvY2Vzcyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUocHJvY2Vzcykge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMub3JkZXIuaW5kZXhPZihwcm9jZXNzKTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5vcmRlci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZWQuZGVsZXRlKHByb2Nlc3MpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLm9yZGVyLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVkLmNsZWFyKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlUmVuZGVyU3RlcChydW5OZXh0RnJhbWUpIHtcbiAgICAvKipcbiAgICAgKiBXZSBjcmVhdGUgYW5kIHJldXNlIHR3byBxdWV1ZXMsIG9uZSB0byBxdWV1ZSBqb2JzIGZvciB0aGUgY3VycmVudCBmcmFtZVxuICAgICAqIGFuZCBvbmUgZm9yIHRoZSBuZXh0LiBXZSByZXVzZSB0byBhdm9pZCB0cmlnZ2VyaW5nIEdDIGFmdGVyIHggZnJhbWVzLlxuICAgICAqL1xuICAgIGxldCB0aGlzRnJhbWUgPSBuZXcgUXVldWUoKTtcbiAgICBsZXQgbmV4dEZyYW1lID0gbmV3IFF1ZXVlKCk7XG4gICAgbGV0IG51bVRvUnVuID0gMDtcbiAgICAvKipcbiAgICAgKiBUcmFjayB3aGV0aGVyIHdlJ3JlIGN1cnJlbnRseSBwcm9jZXNzaW5nIGpvYnMgaW4gdGhpcyBzdGVwLiBUaGlzIHdheVxuICAgICAqIHdlIGNhbiBkZWNpZGUgd2hldGhlciB0byBzY2hlZHVsZSBuZXcgam9icyBmb3IgdGhpcyBmcmFtZSBvciBuZXh0LlxuICAgICAqL1xuICAgIGxldCBpc1Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICBsZXQgZmx1c2hOZXh0RnJhbWUgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBBIHNldCBvZiBwcm9jZXNzZXMgd2hpY2ggd2VyZSBtYXJrZWQga2VlcEFsaXZlIHdoZW4gc2NoZWR1bGVkLlxuICAgICAqL1xuICAgIGNvbnN0IHRvS2VlcEFsaXZlID0gbmV3IFdlYWtTZXQoKTtcbiAgICBjb25zdCBzdGVwID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2NoZWR1bGUgYSBwcm9jZXNzIHRvIHJ1biBvbiB0aGUgbmV4dCBmcmFtZS5cbiAgICAgICAgICovXG4gICAgICAgIHNjaGVkdWxlOiAoY2FsbGJhY2ssIGtlZXBBbGl2ZSA9IGZhbHNlLCBpbW1lZGlhdGUgPSBmYWxzZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYWRkVG9DdXJyZW50RnJhbWUgPSBpbW1lZGlhdGUgJiYgaXNQcm9jZXNzaW5nO1xuICAgICAgICAgICAgY29uc3QgcXVldWUgPSBhZGRUb0N1cnJlbnRGcmFtZSA/IHRoaXNGcmFtZSA6IG5leHRGcmFtZTtcbiAgICAgICAgICAgIGlmIChrZWVwQWxpdmUpXG4gICAgICAgICAgICAgICAgdG9LZWVwQWxpdmUuYWRkKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIGlmIChxdWV1ZS5hZGQoY2FsbGJhY2spICYmIGFkZFRvQ3VycmVudEZyYW1lICYmIGlzUHJvY2Vzc2luZykge1xuICAgICAgICAgICAgICAgIC8vIElmIHdlJ3JlIGFkZGluZyBpdCB0byB0aGUgY3VycmVudGx5IHJ1bm5pbmcgcXVldWUsIHVwZGF0ZSBpdHMgbWVhc3VyZWQgc2l6ZVxuICAgICAgICAgICAgICAgIG51bVRvUnVuID0gdGhpc0ZyYW1lLm9yZGVyLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbmNlbCB0aGUgcHJvdmlkZWQgY2FsbGJhY2sgZnJvbSBydW5uaW5nIG9uIHRoZSBuZXh0IGZyYW1lLlxuICAgICAgICAgKi9cbiAgICAgICAgY2FuY2VsOiAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIG5leHRGcmFtZS5yZW1vdmUoY2FsbGJhY2spO1xuICAgICAgICAgICAgdG9LZWVwQWxpdmUuZGVsZXRlKGNhbGxiYWNrKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEV4ZWN1dGUgYWxsIHNjaGVkdWxlIGNhbGxiYWNrcy5cbiAgICAgICAgICovXG4gICAgICAgIHByb2Nlc3M6IChmcmFtZURhdGEpID0+IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgd2UncmUgYWxyZWFkeSBwcm9jZXNzaW5nIHdlJ3ZlIHByb2JhYmx5IGJlZW4gdHJpZ2dlcmVkIGJ5IGEgZmx1c2hTeW5jXG4gICAgICAgICAgICAgKiBpbnNpZGUgYW4gZXhpc3RpbmcgcHJvY2Vzcy4gSW5zdGVhZCBvZiBleGVjdXRpbmcsIG1hcmsgZmx1c2hOZXh0RnJhbWVcbiAgICAgICAgICAgICAqIGFzIHRydWUgYW5kIGVuc3VyZSB3ZSBmbHVzaCB0aGUgZm9sbG93aW5nIGZyYW1lIGF0IHRoZSBlbmQgb2YgdGhpcyBvbmUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChpc1Byb2Nlc3NpbmcpIHtcbiAgICAgICAgICAgICAgICBmbHVzaE5leHRGcmFtZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXNQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIFt0aGlzRnJhbWUsIG5leHRGcmFtZV0gPSBbbmV4dEZyYW1lLCB0aGlzRnJhbWVdO1xuICAgICAgICAgICAgLy8gQ2xlYXIgdGhlIG5leHQgZnJhbWUgcXVldWVcbiAgICAgICAgICAgIG5leHRGcmFtZS5jbGVhcigpO1xuICAgICAgICAgICAgLy8gRXhlY3V0ZSB0aGlzIGZyYW1lXG4gICAgICAgICAgICBudW1Ub1J1biA9IHRoaXNGcmFtZS5vcmRlci5sZW5ndGg7XG4gICAgICAgICAgICBpZiAobnVtVG9SdW4pIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVRvUnVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSB0aGlzRnJhbWUub3JkZXJbaV07XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGZyYW1lRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b0tlZXBBbGl2ZS5oYXMoY2FsbGJhY2spKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGVwLnNjaGVkdWxlKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bk5leHRGcmFtZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoZmx1c2hOZXh0RnJhbWUpIHtcbiAgICAgICAgICAgICAgICBmbHVzaE5leHRGcmFtZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHN0ZXAucHJvY2VzcyhmcmFtZURhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIHN0ZXA7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVJlbmRlclN0ZXAgfTtcbiIsImltcG9ydCB7IGNyZWF0ZVJlbmRlclN0ZXAgfSBmcm9tICcuL3JlbmRlci1zdGVwLm1qcyc7XG5cbmNvbnN0IHN0ZXBzT3JkZXIgPSBbXG4gICAgXCJwcmVwYXJlXCIsXG4gICAgXCJyZWFkXCIsXG4gICAgXCJ1cGRhdGVcIixcbiAgICBcInByZVJlbmRlclwiLFxuICAgIFwicmVuZGVyXCIsXG4gICAgXCJwb3N0UmVuZGVyXCIsXG5dO1xuY29uc3QgbWF4RWxhcHNlZCA9IDQwO1xuZnVuY3Rpb24gY3JlYXRlUmVuZGVyQmF0Y2hlcihzY2hlZHVsZU5leHRCYXRjaCwgYWxsb3dLZWVwQWxpdmUpIHtcbiAgICBsZXQgcnVuTmV4dEZyYW1lID0gZmFsc2U7XG4gICAgbGV0IHVzZURlZmF1bHRFbGFwc2VkID0gdHJ1ZTtcbiAgICBjb25zdCBzdGF0ZSA9IHtcbiAgICAgICAgZGVsdGE6IDAsXG4gICAgICAgIHRpbWVzdGFtcDogMCxcbiAgICAgICAgaXNQcm9jZXNzaW5nOiBmYWxzZSxcbiAgICB9O1xuICAgIGNvbnN0IHN0ZXBzID0gc3RlcHNPcmRlci5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgICAgIGFjY1trZXldID0gY3JlYXRlUmVuZGVyU3RlcCgoKSA9PiAocnVuTmV4dEZyYW1lID0gdHJ1ZSkpO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgICBjb25zdCBwcm9jZXNzU3RlcCA9IChzdGVwSWQpID0+IHN0ZXBzW3N0ZXBJZF0ucHJvY2VzcyhzdGF0ZSk7XG4gICAgY29uc3QgcHJvY2Vzc0JhdGNoID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgcnVuTmV4dEZyYW1lID0gZmFsc2U7XG4gICAgICAgIHN0YXRlLmRlbHRhID0gdXNlRGVmYXVsdEVsYXBzZWRcbiAgICAgICAgICAgID8gMTAwMCAvIDYwXG4gICAgICAgICAgICA6IE1hdGgubWF4KE1hdGgubWluKHRpbWVzdGFtcCAtIHN0YXRlLnRpbWVzdGFtcCwgbWF4RWxhcHNlZCksIDEpO1xuICAgICAgICBzdGF0ZS50aW1lc3RhbXAgPSB0aW1lc3RhbXA7XG4gICAgICAgIHN0YXRlLmlzUHJvY2Vzc2luZyA9IHRydWU7XG4gICAgICAgIHN0ZXBzT3JkZXIuZm9yRWFjaChwcm9jZXNzU3RlcCk7XG4gICAgICAgIHN0YXRlLmlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgICAgICBpZiAocnVuTmV4dEZyYW1lICYmIGFsbG93S2VlcEFsaXZlKSB7XG4gICAgICAgICAgICB1c2VEZWZhdWx0RWxhcHNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgc2NoZWR1bGVOZXh0QmF0Y2gocHJvY2Vzc0JhdGNoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgd2FrZSA9ICgpID0+IHtcbiAgICAgICAgcnVuTmV4dEZyYW1lID0gdHJ1ZTtcbiAgICAgICAgdXNlRGVmYXVsdEVsYXBzZWQgPSB0cnVlO1xuICAgICAgICBpZiAoIXN0YXRlLmlzUHJvY2Vzc2luZykge1xuICAgICAgICAgICAgc2NoZWR1bGVOZXh0QmF0Y2gocHJvY2Vzc0JhdGNoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc2NoZWR1bGUgPSBzdGVwc09yZGVyLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICAgICAgY29uc3Qgc3RlcCA9IHN0ZXBzW2tleV07XG4gICAgICAgIGFjY1trZXldID0gKHByb2Nlc3MsIGtlZXBBbGl2ZSA9IGZhbHNlLCBpbW1lZGlhdGUgPSBmYWxzZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFydW5OZXh0RnJhbWUpXG4gICAgICAgICAgICAgICAgd2FrZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHN0ZXAuc2NoZWR1bGUocHJvY2Vzcywga2VlcEFsaXZlLCBpbW1lZGlhdGUpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgICBjb25zdCBjYW5jZWwgPSAocHJvY2VzcykgPT4gc3RlcHNPcmRlci5mb3JFYWNoKChrZXkpID0+IHN0ZXBzW2tleV0uY2FuY2VsKHByb2Nlc3MpKTtcbiAgICByZXR1cm4geyBzY2hlZHVsZSwgY2FuY2VsLCBzdGF0ZSwgc3RlcHMgfTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlUmVuZGVyQmF0Y2hlciwgc3RlcHNPcmRlciB9O1xuIiwiaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uL3V0aWxzL25vb3AubWpzJztcbmltcG9ydCB7IGNyZWF0ZVJlbmRlckJhdGNoZXIgfSBmcm9tICcuL2JhdGNoZXIubWpzJztcblxuY29uc3QgeyBzY2hlZHVsZTogZnJhbWUsIGNhbmNlbDogY2FuY2VsRnJhbWUsIHN0YXRlOiBmcmFtZURhdGEsIHN0ZXBzLCB9ID0gY3JlYXRlUmVuZGVyQmF0Y2hlcih0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lICE9PSBcInVuZGVmaW5lZFwiID8gcmVxdWVzdEFuaW1hdGlvbkZyYW1lIDogbm9vcCwgdHJ1ZSk7XG5cbmV4cG9ydCB7IGNhbmNlbEZyYW1lLCBmcmFtZSwgZnJhbWVEYXRhLCBzdGVwcyB9O1xuIiwiaW1wb3J0IHsgcmVuZGVyU1ZHIH0gZnJvbSAnLi91dGlscy9yZW5kZXIubWpzJztcbmltcG9ydCB7IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyB9IGZyb20gJy4vdXRpbHMvc2NyYXBlLW1vdGlvbi12YWx1ZXMubWpzJztcbmltcG9ydCB7IG1ha2VVc2VWaXN1YWxTdGF0ZSB9IGZyb20gJy4uLy4uL21vdGlvbi91dGlscy91c2UtdmlzdWFsLXN0YXRlLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVTdmdSZW5kZXJTdGF0ZSB9IGZyb20gJy4vdXRpbHMvY3JlYXRlLXJlbmRlci1zdGF0ZS5tanMnO1xuaW1wb3J0IHsgYnVpbGRTVkdBdHRycyB9IGZyb20gJy4vdXRpbHMvYnVpbGQtYXR0cnMubWpzJztcbmltcG9ydCB7IGlzU1ZHVGFnIH0gZnJvbSAnLi91dGlscy9pcy1zdmctdGFnLm1qcyc7XG5pbXBvcnQgeyBmcmFtZSB9IGZyb20gJy4uLy4uL2ZyYW1lbG9vcC9mcmFtZS5tanMnO1xuXG5jb25zdCBzdmdNb3Rpb25Db25maWcgPSB7XG4gICAgdXNlVmlzdWFsU3RhdGU6IG1ha2VVc2VWaXN1YWxTdGF0ZSh7XG4gICAgICAgIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wczogc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzLFxuICAgICAgICBjcmVhdGVSZW5kZXJTdGF0ZTogY3JlYXRlU3ZnUmVuZGVyU3RhdGUsXG4gICAgICAgIG9uTW91bnQ6IChwcm9wcywgaW5zdGFuY2UsIHsgcmVuZGVyU3RhdGUsIGxhdGVzdFZhbHVlcyB9KSA9PiB7XG4gICAgICAgICAgICBmcmFtZS5yZWFkKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZW5kZXJTdGF0ZS5kaW1lbnNpb25zID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBpbnN0YW5jZS5nZXRCQm94ID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gaW5zdGFuY2UuZ2V0QkJveCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBpbnN0YW5jZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTW9zdCBsaWtlbHkgdHJ5aW5nIHRvIG1lYXN1cmUgYW4gdW5yZW5kZXJlZCBlbGVtZW50IHVuZGVyIEZpcmVmb3hcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyU3RhdGUuZGltZW5zaW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmcmFtZS5yZW5kZXIoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGJ1aWxkU1ZHQXR0cnMocmVuZGVyU3RhdGUsIGxhdGVzdFZhbHVlcywgeyBlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbjogZmFsc2UgfSwgaXNTVkdUYWcoaW5zdGFuY2UudGFnTmFtZSksIHByb3BzLnRyYW5zZm9ybVRlbXBsYXRlKTtcbiAgICAgICAgICAgICAgICByZW5kZXJTVkcoaW5zdGFuY2UsIHJlbmRlclN0YXRlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgIH0pLFxufTtcblxuZXhwb3J0IHsgc3ZnTW90aW9uQ29uZmlnIH07XG4iLCJpbXBvcnQgeyBtYWtlVXNlVmlzdWFsU3RhdGUgfSBmcm9tICcuLi8uLi9tb3Rpb24vdXRpbHMvdXNlLXZpc3VhbC1zdGF0ZS5tanMnO1xuaW1wb3J0IHsgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzIH0gZnJvbSAnLi91dGlscy9zY3JhcGUtbW90aW9uLXZhbHVlcy5tanMnO1xuaW1wb3J0IHsgY3JlYXRlSHRtbFJlbmRlclN0YXRlIH0gZnJvbSAnLi91dGlscy9jcmVhdGUtcmVuZGVyLXN0YXRlLm1qcyc7XG5cbmNvbnN0IGh0bWxNb3Rpb25Db25maWcgPSB7XG4gICAgdXNlVmlzdWFsU3RhdGU6IG1ha2VVc2VWaXN1YWxTdGF0ZSh7XG4gICAgICAgIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyxcbiAgICAgICAgY3JlYXRlUmVuZGVyU3RhdGU6IGNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSxcbiAgICB9KSxcbn07XG5cbmV4cG9ydCB7IGh0bWxNb3Rpb25Db25maWcgfTtcbiIsImZ1bmN0aW9uIGFkZERvbUV2ZW50KHRhcmdldCwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zID0geyBwYXNzaXZlOiB0cnVlIH0pIHtcbiAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiAoKSA9PiB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIpO1xufVxuXG5leHBvcnQgeyBhZGREb21FdmVudCB9O1xuIiwiY29uc3QgaXNQcmltYXJ5UG9pbnRlciA9IChldmVudCkgPT4ge1xuICAgIGlmIChldmVudC5wb2ludGVyVHlwZSA9PT0gXCJtb3VzZVwiKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgZXZlbnQuYnV0dG9uICE9PSBcIm51bWJlclwiIHx8IGV2ZW50LmJ1dHRvbiA8PSAwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGlzUHJpbWFyeSBpcyB0cnVlIGZvciBhbGwgbWljZSBidXR0b25zLCB3aGVyZWFzIGV2ZXJ5IHRvdWNoIHBvaW50XG4gICAgICAgICAqIGlzIHJlZ2FyZGVkIGFzIGl0cyBvd24gaW5wdXQuIFNvIHN1YnNlcXVlbnQgY29uY3VycmVudCB0b3VjaCBwb2ludHNcbiAgICAgICAgICogd2lsbCBiZSBmYWxzZS5cbiAgICAgICAgICpcbiAgICAgICAgICogU3BlY2lmaWNhbGx5IG1hdGNoIGFnYWluc3QgZmFsc2UgaGVyZSBhcyBpbmNvbXBsZXRlIHZlcnNpb25zIG9mXG4gICAgICAgICAqIFBvaW50ZXJFdmVudHMgaW4gdmVyeSBvbGQgYnJvd3NlciBtaWdodCBoYXZlIGl0IHNldCBhcyB1bmRlZmluZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZXR1cm4gZXZlbnQuaXNQcmltYXJ5ICE9PSBmYWxzZTtcbiAgICB9XG59O1xuXG5leHBvcnQgeyBpc1ByaW1hcnlQb2ludGVyIH07XG4iLCJpbXBvcnQgeyBpc1ByaW1hcnlQb2ludGVyIH0gZnJvbSAnLi91dGlscy9pcy1wcmltYXJ5LXBvaW50ZXIubWpzJztcblxuZnVuY3Rpb24gZXh0cmFjdEV2ZW50SW5mbyhldmVudCwgcG9pbnRUeXBlID0gXCJwYWdlXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBwb2ludDoge1xuICAgICAgICAgICAgeDogZXZlbnRbcG9pbnRUeXBlICsgXCJYXCJdLFxuICAgICAgICAgICAgeTogZXZlbnRbcG9pbnRUeXBlICsgXCJZXCJdLFxuICAgICAgICB9LFxuICAgIH07XG59XG5jb25zdCBhZGRQb2ludGVySW5mbyA9IChoYW5kbGVyKSA9PiB7XG4gICAgcmV0dXJuIChldmVudCkgPT4gaXNQcmltYXJ5UG9pbnRlcihldmVudCkgJiYgaGFuZGxlcihldmVudCwgZXh0cmFjdEV2ZW50SW5mbyhldmVudCkpO1xufTtcblxuZXhwb3J0IHsgYWRkUG9pbnRlckluZm8sIGV4dHJhY3RFdmVudEluZm8gfTtcbiIsImltcG9ydCB7IGFkZERvbUV2ZW50IH0gZnJvbSAnLi9hZGQtZG9tLWV2ZW50Lm1qcyc7XG5pbXBvcnQgeyBhZGRQb2ludGVySW5mbyB9IGZyb20gJy4vZXZlbnQtaW5mby5tanMnO1xuXG5mdW5jdGlvbiBhZGRQb2ludGVyRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gYWRkRG9tRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIGFkZFBvaW50ZXJJbmZvKGhhbmRsZXIpLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IHsgYWRkUG9pbnRlckV2ZW50IH07XG4iLCIvKipcbiAqIFBpcGVcbiAqIENvbXBvc2Ugb3RoZXIgdHJhbnNmb3JtZXJzIHRvIHJ1biBsaW5lYXJpbHlcbiAqIHBpcGUobWluKDIwKSwgbWF4KDQwKSlcbiAqIEBwYXJhbSAgey4uLmZ1bmN0aW9uc30gdHJhbnNmb3JtZXJzXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuY29uc3QgY29tYmluZUZ1bmN0aW9ucyA9IChhLCBiKSA9PiAodikgPT4gYihhKHYpKTtcbmNvbnN0IHBpcGUgPSAoLi4udHJhbnNmb3JtZXJzKSA9PiB0cmFuc2Zvcm1lcnMucmVkdWNlKGNvbWJpbmVGdW5jdGlvbnMpO1xuXG5leHBvcnQgeyBwaXBlIH07XG4iLCJmdW5jdGlvbiBjcmVhdGVMb2NrKG5hbWUpIHtcbiAgICBsZXQgbG9jayA9IG51bGw7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgY29uc3Qgb3BlbkxvY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICBsb2NrID0gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGxvY2sgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGxvY2sgPSBuYW1lO1xuICAgICAgICAgICAgcmV0dXJuIG9wZW5Mb2NrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xufVxuY29uc3QgZ2xvYmFsSG9yaXpvbnRhbExvY2sgPSBjcmVhdGVMb2NrKFwiZHJhZ0hvcml6b250YWxcIik7XG5jb25zdCBnbG9iYWxWZXJ0aWNhbExvY2sgPSBjcmVhdGVMb2NrKFwiZHJhZ1ZlcnRpY2FsXCIpO1xuZnVuY3Rpb24gZ2V0R2xvYmFsTG9jayhkcmFnKSB7XG4gICAgbGV0IGxvY2sgPSBmYWxzZTtcbiAgICBpZiAoZHJhZyA9PT0gXCJ5XCIpIHtcbiAgICAgICAgbG9jayA9IGdsb2JhbFZlcnRpY2FsTG9jaygpO1xuICAgIH1cbiAgICBlbHNlIGlmIChkcmFnID09PSBcInhcIikge1xuICAgICAgICBsb2NrID0gZ2xvYmFsSG9yaXpvbnRhbExvY2soKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IG9wZW5Ib3Jpem9udGFsID0gZ2xvYmFsSG9yaXpvbnRhbExvY2soKTtcbiAgICAgICAgY29uc3Qgb3BlblZlcnRpY2FsID0gZ2xvYmFsVmVydGljYWxMb2NrKCk7XG4gICAgICAgIGlmIChvcGVuSG9yaXpvbnRhbCAmJiBvcGVuVmVydGljYWwpIHtcbiAgICAgICAgICAgIGxvY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgb3Blbkhvcml6b250YWwoKTtcbiAgICAgICAgICAgICAgICBvcGVuVmVydGljYWwoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBSZWxlYXNlIHRoZSBsb2NrcyBiZWNhdXNlIHdlIGRvbid0IHVzZSB0aGVtXG4gICAgICAgICAgICBpZiAob3Blbkhvcml6b250YWwpXG4gICAgICAgICAgICAgICAgb3Blbkhvcml6b250YWwoKTtcbiAgICAgICAgICAgIGlmIChvcGVuVmVydGljYWwpXG4gICAgICAgICAgICAgICAgb3BlblZlcnRpY2FsKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxvY2s7XG59XG5mdW5jdGlvbiBpc0RyYWdBY3RpdmUoKSB7XG4gICAgLy8gQ2hlY2sgdGhlIGdlc3R1cmUgbG9jayAtIGlmIHdlIGdldCBpdCwgaXQgbWVhbnMgbm8gZHJhZyBnZXN0dXJlIGlzIGFjdGl2ZVxuICAgIC8vIGFuZCB3ZSBjYW4gc2FmZWx5IGZpcmUgdGhlIHRhcCBnZXN0dXJlLlxuICAgIGNvbnN0IG9wZW5HZXN0dXJlTG9jayA9IGdldEdsb2JhbExvY2sodHJ1ZSk7XG4gICAgaWYgKCFvcGVuR2VzdHVyZUxvY2spXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIG9wZW5HZXN0dXJlTG9jaygpO1xuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlTG9jaywgZ2V0R2xvYmFsTG9jaywgaXNEcmFnQWN0aXZlIH07XG4iLCJjbGFzcyBGZWF0dXJlIHtcbiAgICBjb25zdHJ1Y3Rvcihub2RlKSB7XG4gICAgICAgIHRoaXMuaXNNb3VudGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgfVxuICAgIHVwZGF0ZSgpIHsgfVxufVxuXG5leHBvcnQgeyBGZWF0dXJlIH07XG4iLCJpbXBvcnQgeyBhZGRQb2ludGVyRXZlbnQgfSBmcm9tICcuLi9ldmVudHMvYWRkLXBvaW50ZXItZXZlbnQubWpzJztcbmltcG9ydCB7IHBpcGUgfSBmcm9tICcuLi91dGlscy9waXBlLm1qcyc7XG5pbXBvcnQgeyBpc0RyYWdBY3RpdmUgfSBmcm9tICcuL2RyYWcvdXRpbHMvbG9jay5tanMnO1xuaW1wb3J0IHsgRmVhdHVyZSB9IGZyb20gJy4uL21vdGlvbi9mZWF0dXJlcy9GZWF0dXJlLm1qcyc7XG5pbXBvcnQgeyBmcmFtZSB9IGZyb20gJy4uL2ZyYW1lbG9vcC9mcmFtZS5tanMnO1xuXG5mdW5jdGlvbiBhZGRIb3ZlckV2ZW50KG5vZGUsIGlzQWN0aXZlKSB7XG4gICAgY29uc3QgZXZlbnROYW1lID0gXCJwb2ludGVyXCIgKyAoaXNBY3RpdmUgPyBcImVudGVyXCIgOiBcImxlYXZlXCIpO1xuICAgIGNvbnN0IGNhbGxiYWNrTmFtZSA9IFwib25Ib3ZlclwiICsgKGlzQWN0aXZlID8gXCJTdGFydFwiIDogXCJFbmRcIik7XG4gICAgY29uc3QgaGFuZGxlRXZlbnQgPSAoZXZlbnQsIGluZm8pID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09IFwidG91Y2hcIiB8fCBpc0RyYWdBY3RpdmUoKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgcHJvcHMgPSBub2RlLmdldFByb3BzKCk7XG4gICAgICAgIGlmIChub2RlLmFuaW1hdGlvblN0YXRlICYmIHByb3BzLndoaWxlSG92ZXIpIHtcbiAgICAgICAgICAgIG5vZGUuYW5pbWF0aW9uU3RhdGUuc2V0QWN0aXZlKFwid2hpbGVIb3ZlclwiLCBpc0FjdGl2ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BzW2NhbGxiYWNrTmFtZV0pIHtcbiAgICAgICAgICAgIGZyYW1lLnVwZGF0ZSgoKSA9PiBwcm9wc1tjYWxsYmFja05hbWVdKGV2ZW50LCBpbmZvKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhZGRQb2ludGVyRXZlbnQobm9kZS5jdXJyZW50LCBldmVudE5hbWUsIGhhbmRsZUV2ZW50LCB7XG4gICAgICAgIHBhc3NpdmU6ICFub2RlLmdldFByb3BzKClbY2FsbGJhY2tOYW1lXSxcbiAgICB9KTtcbn1cbmNsYXNzIEhvdmVyR2VzdHVyZSBleHRlbmRzIEZlYXR1cmUge1xuICAgIG1vdW50KCkge1xuICAgICAgICB0aGlzLnVubW91bnQgPSBwaXBlKGFkZEhvdmVyRXZlbnQodGhpcy5ub2RlLCB0cnVlKSwgYWRkSG92ZXJFdmVudCh0aGlzLm5vZGUsIGZhbHNlKSk7XG4gICAgfVxuICAgIHVubW91bnQoKSB7IH1cbn1cblxuZXhwb3J0IHsgSG92ZXJHZXN0dXJlIH07XG4iLCIvKipcbiAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlIHVwIHRoZSB0cmVlIHRvIGNoZWNrIHdoZXRoZXIgdGhlIHByb3ZpZGVkIGNoaWxkIG5vZGVcbiAqIGlzIHRoZSBwYXJlbnQgb3IgYSBkZXNjZW5kYW50IG9mIGl0LlxuICpcbiAqIEBwYXJhbSBwYXJlbnQgLSBFbGVtZW50IHRvIGZpbmRcbiAqIEBwYXJhbSBjaGlsZCAtIEVsZW1lbnQgdG8gdGVzdCBhZ2FpbnN0IHBhcmVudFxuICovXG5jb25zdCBpc05vZGVPckNoaWxkID0gKHBhcmVudCwgY2hpbGQpID0+IHtcbiAgICBpZiAoIWNoaWxkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSBpZiAocGFyZW50ID09PSBjaGlsZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBpc05vZGVPckNoaWxkKHBhcmVudCwgY2hpbGQucGFyZW50RWxlbWVudCk7XG4gICAgfVxufTtcblxuZXhwb3J0IHsgaXNOb2RlT3JDaGlsZCB9O1xuIiwiaW1wb3J0IHsgZXh0cmFjdEV2ZW50SW5mbyB9IGZyb20gJy4uL2V2ZW50cy9ldmVudC1pbmZvLm1qcyc7XG5pbXBvcnQgeyBhZGREb21FdmVudCB9IGZyb20gJy4uL2V2ZW50cy9hZGQtZG9tLWV2ZW50Lm1qcyc7XG5pbXBvcnQgeyBhZGRQb2ludGVyRXZlbnQgfSBmcm9tICcuLi9ldmVudHMvYWRkLXBvaW50ZXItZXZlbnQubWpzJztcbmltcG9ydCB7IEZlYXR1cmUgfSBmcm9tICcuLi9tb3Rpb24vZmVhdHVyZXMvRmVhdHVyZS5tanMnO1xuaW1wb3J0IHsgcGlwZSB9IGZyb20gJy4uL3V0aWxzL3BpcGUubWpzJztcbmltcG9ydCB7IGlzRHJhZ0FjdGl2ZSB9IGZyb20gJy4vZHJhZy91dGlscy9sb2NrLm1qcyc7XG5pbXBvcnQgeyBpc05vZGVPckNoaWxkIH0gZnJvbSAnLi91dGlscy9pcy1ub2RlLW9yLWNoaWxkLm1qcyc7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vdXRpbHMvbm9vcC5tanMnO1xuaW1wb3J0IHsgZnJhbWUgfSBmcm9tICcuLi9mcmFtZWxvb3AvZnJhbWUubWpzJztcblxuZnVuY3Rpb24gZmlyZVN5bnRoZXRpY1BvaW50ZXJFdmVudChuYW1lLCBoYW5kbGVyKSB7XG4gICAgaWYgKCFoYW5kbGVyKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc3Qgc3ludGhldGljUG9pbnRlckV2ZW50ID0gbmV3IFBvaW50ZXJFdmVudChcInBvaW50ZXJcIiArIG5hbWUpO1xuICAgIGhhbmRsZXIoc3ludGhldGljUG9pbnRlckV2ZW50LCBleHRyYWN0RXZlbnRJbmZvKHN5bnRoZXRpY1BvaW50ZXJFdmVudCkpO1xufVxuY2xhc3MgUHJlc3NHZXN0dXJlIGV4dGVuZHMgRmVhdHVyZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMucmVtb3ZlU3RhcnRMaXN0ZW5lcnMgPSBub29wO1xuICAgICAgICB0aGlzLnJlbW92ZUVuZExpc3RlbmVycyA9IG5vb3A7XG4gICAgICAgIHRoaXMucmVtb3ZlQWNjZXNzaWJsZUxpc3RlbmVycyA9IG5vb3A7XG4gICAgICAgIHRoaXMuc3RhcnRQb2ludGVyUHJlc3MgPSAoc3RhcnRFdmVudCwgc3RhcnRJbmZvKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUVuZExpc3RlbmVycygpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNQcmVzc2luZylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCBwcm9wcyA9IHRoaXMubm9kZS5nZXRQcm9wcygpO1xuICAgICAgICAgICAgY29uc3QgZW5kUG9pbnRlclByZXNzID0gKGVuZEV2ZW50LCBlbmRJbmZvKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNoZWNrUHJlc3NFbmQoKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgb25UYXAsIG9uVGFwQ2FuY2VsIH0gPSB0aGlzLm5vZGUuZ2V0UHJvcHMoKTtcbiAgICAgICAgICAgICAgICBmcmFtZS51cGRhdGUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogV2Ugb25seSBjb3VudCB0aGlzIGFzIGEgdGFwIGdlc3R1cmUgaWYgdGhlIGV2ZW50LnRhcmdldCBpcyB0aGUgc2FtZVxuICAgICAgICAgICAgICAgICAgICAgKiBhcywgb3IgYSBjaGlsZCBvZiwgdGhpcyBjb21wb25lbnQncyBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAhaXNOb2RlT3JDaGlsZCh0aGlzLm5vZGUuY3VycmVudCwgZW5kRXZlbnQudGFyZ2V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBvblRhcENhbmNlbCAmJiBvblRhcENhbmNlbChlbmRFdmVudCwgZW5kSW5mbylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogb25UYXAgJiYgb25UYXAoZW5kRXZlbnQsIGVuZEluZm8pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZVBvaW50ZXJVcExpc3RlbmVyID0gYWRkUG9pbnRlckV2ZW50KHdpbmRvdywgXCJwb2ludGVydXBcIiwgZW5kUG9pbnRlclByZXNzLCB7IHBhc3NpdmU6ICEocHJvcHMub25UYXAgfHwgcHJvcHNbXCJvblBvaW50ZXJVcFwiXSkgfSk7XG4gICAgICAgICAgICBjb25zdCByZW1vdmVQb2ludGVyQ2FuY2VsTGlzdGVuZXIgPSBhZGRQb2ludGVyRXZlbnQod2luZG93LCBcInBvaW50ZXJjYW5jZWxcIiwgKGNhbmNlbEV2ZW50LCBjYW5jZWxJbmZvKSA9PiB0aGlzLmNhbmNlbFByZXNzKGNhbmNlbEV2ZW50LCBjYW5jZWxJbmZvKSwgeyBwYXNzaXZlOiAhKHByb3BzLm9uVGFwQ2FuY2VsIHx8IHByb3BzW1wib25Qb2ludGVyQ2FuY2VsXCJdKSB9KTtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRW5kTGlzdGVuZXJzID0gcGlwZShyZW1vdmVQb2ludGVyVXBMaXN0ZW5lciwgcmVtb3ZlUG9pbnRlckNhbmNlbExpc3RlbmVyKTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRQcmVzcyhzdGFydEV2ZW50LCBzdGFydEluZm8pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnN0YXJ0QWNjZXNzaWJsZVByZXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaGFuZGxlS2V5ZG93biA9IChrZXlkb3duRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ZG93bkV2ZW50LmtleSAhPT0gXCJFbnRlclwiIHx8IHRoaXMuaXNQcmVzc2luZylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZUtleXVwID0gKGtleXVwRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleXVwRXZlbnQua2V5ICE9PSBcIkVudGVyXCIgfHwgIXRoaXMuY2hlY2tQcmVzc0VuZCgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBmaXJlU3ludGhldGljUG9pbnRlckV2ZW50KFwidXBcIiwgKGV2ZW50LCBpbmZvKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IG9uVGFwIH0gPSB0aGlzLm5vZGUuZ2V0UHJvcHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvblRhcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lLnVwZGF0ZSgoKSA9PiBvblRhcChldmVudCwgaW5mbykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRW5kTGlzdGVuZXJzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVFbmRMaXN0ZW5lcnMgPSBhZGREb21FdmVudCh0aGlzLm5vZGUuY3VycmVudCwgXCJrZXl1cFwiLCBoYW5kbGVLZXl1cCk7XG4gICAgICAgICAgICAgICAgZmlyZVN5bnRoZXRpY1BvaW50ZXJFdmVudChcImRvd25cIiwgKGV2ZW50LCBpbmZvKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRQcmVzcyhldmVudCwgaW5mbyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVtb3ZlS2V5ZG93bkxpc3RlbmVyID0gYWRkRG9tRXZlbnQodGhpcy5ub2RlLmN1cnJlbnQsIFwia2V5ZG93blwiLCBoYW5kbGVLZXlkb3duKTtcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZUJsdXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzUHJlc3NpbmcpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBmaXJlU3ludGhldGljUG9pbnRlckV2ZW50KFwiY2FuY2VsXCIsIChjYW5jZWxFdmVudCwgY2FuY2VsSW5mbykgPT4gdGhpcy5jYW5jZWxQcmVzcyhjYW5jZWxFdmVudCwgY2FuY2VsSW5mbykpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZUJsdXJMaXN0ZW5lciA9IGFkZERvbUV2ZW50KHRoaXMubm9kZS5jdXJyZW50LCBcImJsdXJcIiwgaGFuZGxlQmx1cik7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUFjY2Vzc2libGVMaXN0ZW5lcnMgPSBwaXBlKHJlbW92ZUtleWRvd25MaXN0ZW5lciwgcmVtb3ZlQmx1ckxpc3RlbmVyKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc3RhcnRQcmVzcyhldmVudCwgaW5mbykge1xuICAgICAgICB0aGlzLmlzUHJlc3NpbmcgPSB0cnVlO1xuICAgICAgICBjb25zdCB7IG9uVGFwU3RhcnQsIHdoaWxlVGFwIH0gPSB0aGlzLm5vZGUuZ2V0UHJvcHMoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuc3VyZSB3ZSB0cmlnZ2VyIGFuaW1hdGlvbnMgYmVmb3JlIGZpcmluZyBldmVudCBjYWxsYmFja1xuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHdoaWxlVGFwICYmIHRoaXMubm9kZS5hbmltYXRpb25TdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5ub2RlLmFuaW1hdGlvblN0YXRlLnNldEFjdGl2ZShcIndoaWxlVGFwXCIsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvblRhcFN0YXJ0KSB7XG4gICAgICAgICAgICBmcmFtZS51cGRhdGUoKCkgPT4gb25UYXBTdGFydChldmVudCwgaW5mbykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNoZWNrUHJlc3NFbmQoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRW5kTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuaXNQcmVzc2luZyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBwcm9wcyA9IHRoaXMubm9kZS5nZXRQcm9wcygpO1xuICAgICAgICBpZiAocHJvcHMud2hpbGVUYXAgJiYgdGhpcy5ub2RlLmFuaW1hdGlvblN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGUuYW5pbWF0aW9uU3RhdGUuc2V0QWN0aXZlKFwid2hpbGVUYXBcIiwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhaXNEcmFnQWN0aXZlKCk7XG4gICAgfVxuICAgIGNhbmNlbFByZXNzKGV2ZW50LCBpbmZvKSB7XG4gICAgICAgIGlmICghdGhpcy5jaGVja1ByZXNzRW5kKCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHsgb25UYXBDYW5jZWwgfSA9IHRoaXMubm9kZS5nZXRQcm9wcygpO1xuICAgICAgICBpZiAob25UYXBDYW5jZWwpIHtcbiAgICAgICAgICAgIGZyYW1lLnVwZGF0ZSgoKSA9PiBvblRhcENhbmNlbChldmVudCwgaW5mbykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG1vdW50KCkge1xuICAgICAgICBjb25zdCBwcm9wcyA9IHRoaXMubm9kZS5nZXRQcm9wcygpO1xuICAgICAgICBjb25zdCByZW1vdmVQb2ludGVyTGlzdGVuZXIgPSBhZGRQb2ludGVyRXZlbnQodGhpcy5ub2RlLmN1cnJlbnQsIFwicG9pbnRlcmRvd25cIiwgdGhpcy5zdGFydFBvaW50ZXJQcmVzcywgeyBwYXNzaXZlOiAhKHByb3BzLm9uVGFwU3RhcnQgfHwgcHJvcHNbXCJvblBvaW50ZXJTdGFydFwiXSkgfSk7XG4gICAgICAgIGNvbnN0IHJlbW92ZUZvY3VzTGlzdGVuZXIgPSBhZGREb21FdmVudCh0aGlzLm5vZGUuY3VycmVudCwgXCJmb2N1c1wiLCB0aGlzLnN0YXJ0QWNjZXNzaWJsZVByZXNzKTtcbiAgICAgICAgdGhpcy5yZW1vdmVTdGFydExpc3RlbmVycyA9IHBpcGUocmVtb3ZlUG9pbnRlckxpc3RlbmVyLCByZW1vdmVGb2N1c0xpc3RlbmVyKTtcbiAgICB9XG4gICAgdW5tb3VudCgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVTdGFydExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLnJlbW92ZUVuZExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLnJlbW92ZUFjY2Vzc2libGVMaXN0ZW5lcnMoKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFByZXNzR2VzdHVyZSB9O1xuIiwiLyoqXG4gKiBNYXAgYW4gSW50ZXJzZWN0aW9uSGFuZGxlciBjYWxsYmFjayB0byBhbiBlbGVtZW50LiBXZSBvbmx5IGV2ZXIgbWFrZSBvbmUgaGFuZGxlciBmb3Igb25lXG4gKiBlbGVtZW50LCBzbyBldmVuIHRob3VnaCB0aGVzZSBoYW5kbGVycyBtaWdodCBhbGwgYmUgdHJpZ2dlcmVkIGJ5IGRpZmZlcmVudFxuICogb2JzZXJ2ZXJzLCB3ZSBjYW4ga2VlcCB0aGVtIGluIHRoZSBzYW1lIG1hcC5cbiAqL1xuY29uc3Qgb2JzZXJ2ZXJDYWxsYmFja3MgPSBuZXcgV2Vha01hcCgpO1xuLyoqXG4gKiBNdWx0aXBsZSBvYnNlcnZlcnMgY2FuIGJlIGNyZWF0ZWQgZm9yIG11bHRpcGxlIGVsZW1lbnQvZG9jdW1lbnQgcm9vdHMuIEVhY2ggd2l0aFxuICogZGlmZmVyZW50IHNldHRpbmdzLiBTbyBoZXJlIHdlIHN0b3JlIGRpY3Rpb25hcmllcyBvZiBvYnNlcnZlcnMgdG8gZWFjaCByb290LFxuICogdXNpbmcgc2VyaWFsaXNlZCBzZXR0aW5ncyAodGhyZXNob2xkL21hcmdpbikgYXMgbG9va3VwIGtleXMuXG4gKi9cbmNvbnN0IG9ic2VydmVycyA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCBmaXJlT2JzZXJ2ZXJDYWxsYmFjayA9IChlbnRyeSkgPT4ge1xuICAgIGNvbnN0IGNhbGxiYWNrID0gb2JzZXJ2ZXJDYWxsYmFja3MuZ2V0KGVudHJ5LnRhcmdldCk7XG4gICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soZW50cnkpO1xufTtcbmNvbnN0IGZpcmVBbGxPYnNlcnZlckNhbGxiYWNrcyA9IChlbnRyaWVzKSA9PiB7XG4gICAgZW50cmllcy5mb3JFYWNoKGZpcmVPYnNlcnZlckNhbGxiYWNrKTtcbn07XG5mdW5jdGlvbiBpbml0SW50ZXJzZWN0aW9uT2JzZXJ2ZXIoeyByb290LCAuLi5vcHRpb25zIH0pIHtcbiAgICBjb25zdCBsb29rdXBSb290ID0gcm9vdCB8fCBkb2N1bWVudDtcbiAgICAvKipcbiAgICAgKiBJZiB3ZSBkb24ndCBoYXZlIGFuIG9ic2VydmVyIGxvb2t1cCBtYXAgZm9yIHRoaXMgcm9vdCwgY3JlYXRlIG9uZS5cbiAgICAgKi9cbiAgICBpZiAoIW9ic2VydmVycy5oYXMobG9va3VwUm9vdCkpIHtcbiAgICAgICAgb2JzZXJ2ZXJzLnNldChsb29rdXBSb290LCB7fSk7XG4gICAgfVxuICAgIGNvbnN0IHJvb3RPYnNlcnZlcnMgPSBvYnNlcnZlcnMuZ2V0KGxvb2t1cFJvb3QpO1xuICAgIGNvbnN0IGtleSA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpO1xuICAgIC8qKlxuICAgICAqIElmIHdlIGRvbid0IGhhdmUgYW4gb2JzZXJ2ZXIgZm9yIHRoaXMgY29tYmluYXRpb24gb2Ygcm9vdCBhbmQgc2V0dGluZ3MsXG4gICAgICogY3JlYXRlIG9uZS5cbiAgICAgKi9cbiAgICBpZiAoIXJvb3RPYnNlcnZlcnNba2V5XSkge1xuICAgICAgICByb290T2JzZXJ2ZXJzW2tleV0gPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZmlyZUFsbE9ic2VydmVyQ2FsbGJhY2tzLCB7IHJvb3QsIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxuICAgIHJldHVybiByb290T2JzZXJ2ZXJzW2tleV07XG59XG5mdW5jdGlvbiBvYnNlcnZlSW50ZXJzZWN0aW9uKGVsZW1lbnQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgY29uc3Qgcm9vdEludGVyZXNlY3Rpb25PYnNlcnZlciA9IGluaXRJbnRlcnNlY3Rpb25PYnNlcnZlcihvcHRpb25zKTtcbiAgICBvYnNlcnZlckNhbGxiYWNrcy5zZXQoZWxlbWVudCwgY2FsbGJhY2spO1xuICAgIHJvb3RJbnRlcmVzZWN0aW9uT2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBvYnNlcnZlckNhbGxiYWNrcy5kZWxldGUoZWxlbWVudCk7XG4gICAgICAgIHJvb3RJbnRlcmVzZWN0aW9uT2JzZXJ2ZXIudW5vYnNlcnZlKGVsZW1lbnQpO1xuICAgIH07XG59XG5cbmV4cG9ydCB7IG9ic2VydmVJbnRlcnNlY3Rpb24gfTtcbiIsImltcG9ydCB7IEZlYXR1cmUgfSBmcm9tICcuLi9GZWF0dXJlLm1qcyc7XG5pbXBvcnQgeyBvYnNlcnZlSW50ZXJzZWN0aW9uIH0gZnJvbSAnLi9vYnNlcnZlcnMubWpzJztcblxuY29uc3QgdGhyZXNob2xkTmFtZXMgPSB7XG4gICAgc29tZTogMCxcbiAgICBhbGw6IDEsXG59O1xuY2xhc3MgSW5WaWV3RmVhdHVyZSBleHRlbmRzIEZlYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmhhc0VudGVyZWRWaWV3ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNJblZpZXcgPSBmYWxzZTtcbiAgICB9XG4gICAgc3RhcnRPYnNlcnZlcigpIHtcbiAgICAgICAgdGhpcy51bm1vdW50KCk7XG4gICAgICAgIGNvbnN0IHsgdmlld3BvcnQgPSB7fSB9ID0gdGhpcy5ub2RlLmdldFByb3BzKCk7XG4gICAgICAgIGNvbnN0IHsgcm9vdCwgbWFyZ2luOiByb290TWFyZ2luLCBhbW91bnQgPSBcInNvbWVcIiwgb25jZSB9ID0gdmlld3BvcnQ7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICByb290OiByb290ID8gcm9vdC5jdXJyZW50IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcm9vdE1hcmdpbixcbiAgICAgICAgICAgIHRocmVzaG9sZDogdHlwZW9mIGFtb3VudCA9PT0gXCJudW1iZXJcIiA/IGFtb3VudCA6IHRocmVzaG9sZE5hbWVzW2Ftb3VudF0sXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IG9uSW50ZXJzZWN0aW9uVXBkYXRlID0gKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGlzSW50ZXJzZWN0aW5nIH0gPSBlbnRyeTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhlcmUncyBiZWVuIG5vIGNoYW5nZSBpbiB0aGUgdmlld3BvcnQgc3RhdGUsIGVhcmx5IHJldHVybi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNJblZpZXcgPT09IGlzSW50ZXJzZWN0aW5nKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuaXNJblZpZXcgPSBpc0ludGVyc2VjdGluZztcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSGFuZGxlIGhhc0VudGVyZWRWaWV3LiBJZiB0aGlzIGlzIG9ubHkgbWVhbnQgdG8gcnVuIG9uY2UsIGFuZFxuICAgICAgICAgICAgICogZWxlbWVudCBpc24ndCB2aXNpYmxlLCBlYXJseSByZXR1cm4uIE90aGVyd2lzZSBzZXQgaGFzRW50ZXJlZFZpZXcgdG8gdHJ1ZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKG9uY2UgJiYgIWlzSW50ZXJzZWN0aW5nICYmIHRoaXMuaGFzRW50ZXJlZFZpZXcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0ludGVyc2VjdGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFzRW50ZXJlZFZpZXcgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubm9kZS5hbmltYXRpb25TdGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubm9kZS5hbmltYXRpb25TdGF0ZS5zZXRBY3RpdmUoXCJ3aGlsZUluVmlld1wiLCBpc0ludGVyc2VjdGluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVzZSB0aGUgbGF0ZXN0IGNvbW1pdHRlZCBwcm9wcyByYXRoZXIgdGhhbiB0aGUgb25lcyBpbiBzY29wZVxuICAgICAgICAgICAgICogd2hlbiB0aGlzIG9ic2VydmVyIGlzIGNyZWF0ZWRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgeyBvblZpZXdwb3J0RW50ZXIsIG9uVmlld3BvcnRMZWF2ZSB9ID0gdGhpcy5ub2RlLmdldFByb3BzKCk7XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IGlzSW50ZXJzZWN0aW5nID8gb25WaWV3cG9ydEVudGVyIDogb25WaWV3cG9ydExlYXZlO1xuICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soZW50cnkpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gb2JzZXJ2ZUludGVyc2VjdGlvbih0aGlzLm5vZGUuY3VycmVudCwgb3B0aW9ucywgb25JbnRlcnNlY3Rpb25VcGRhdGUpO1xuICAgIH1cbiAgICBtb3VudCgpIHtcbiAgICAgICAgdGhpcy5zdGFydE9ic2VydmVyKCk7XG4gICAgfVxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBJbnRlcnNlY3Rpb25PYnNlcnZlciA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgeyBwcm9wcywgcHJldlByb3BzIH0gPSB0aGlzLm5vZGU7XG4gICAgICAgIGNvbnN0IGhhc09wdGlvbnNDaGFuZ2VkID0gW1wiYW1vdW50XCIsIFwibWFyZ2luXCIsIFwicm9vdFwiXS5zb21lKGhhc1ZpZXdwb3J0T3B0aW9uQ2hhbmdlZChwcm9wcywgcHJldlByb3BzKSk7XG4gICAgICAgIGlmIChoYXNPcHRpb25zQ2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydE9ic2VydmVyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdW5tb3VudCgpIHsgfVxufVxuZnVuY3Rpb24gaGFzVmlld3BvcnRPcHRpb25DaGFuZ2VkKHsgdmlld3BvcnQgPSB7fSB9LCB7IHZpZXdwb3J0OiBwcmV2Vmlld3BvcnQgPSB7fSB9ID0ge30pIHtcbiAgICByZXR1cm4gKG5hbWUpID0+IHZpZXdwb3J0W25hbWVdICE9PSBwcmV2Vmlld3BvcnRbbmFtZV07XG59XG5cbmV4cG9ydCB7IEluVmlld0ZlYXR1cmUgfTtcbiIsImltcG9ydCB7IEhvdmVyR2VzdHVyZSB9IGZyb20gJy4uLy4uL2dlc3R1cmVzL2hvdmVyLm1qcyc7XG5pbXBvcnQgeyBGb2N1c0dlc3R1cmUgfSBmcm9tICcuLi8uLi9nZXN0dXJlcy9mb2N1cy5tanMnO1xuaW1wb3J0IHsgUHJlc3NHZXN0dXJlIH0gZnJvbSAnLi4vLi4vZ2VzdHVyZXMvcHJlc3MubWpzJztcbmltcG9ydCB7IEluVmlld0ZlYXR1cmUgfSBmcm9tICcuL3ZpZXdwb3J0L2luZGV4Lm1qcyc7XG5cbmNvbnN0IGdlc3R1cmVBbmltYXRpb25zID0ge1xuICAgIGluVmlldzoge1xuICAgICAgICBGZWF0dXJlOiBJblZpZXdGZWF0dXJlLFxuICAgIH0sXG4gICAgdGFwOiB7XG4gICAgICAgIEZlYXR1cmU6IFByZXNzR2VzdHVyZSxcbiAgICB9LFxuICAgIGZvY3VzOiB7XG4gICAgICAgIEZlYXR1cmU6IEZvY3VzR2VzdHVyZSxcbiAgICB9LFxuICAgIGhvdmVyOiB7XG4gICAgICAgIEZlYXR1cmU6IEhvdmVyR2VzdHVyZSxcbiAgICB9LFxufTtcblxuZXhwb3J0IHsgZ2VzdHVyZUFuaW1hdGlvbnMgfTtcbiIsImltcG9ydCB7IGFkZERvbUV2ZW50IH0gZnJvbSAnLi4vZXZlbnRzL2FkZC1kb20tZXZlbnQubWpzJztcbmltcG9ydCB7IEZlYXR1cmUgfSBmcm9tICcuLi9tb3Rpb24vZmVhdHVyZXMvRmVhdHVyZS5tanMnO1xuaW1wb3J0IHsgcGlwZSB9IGZyb20gJy4uL3V0aWxzL3BpcGUubWpzJztcblxuY2xhc3MgRm9jdXNHZXN0dXJlIGV4dGVuZHMgRmVhdHVyZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICB9XG4gICAgb25Gb2N1cygpIHtcbiAgICAgICAgbGV0IGlzRm9jdXNWaXNpYmxlID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGlzIGVsZW1lbnQgZG9lc24ndCBtYXRjaCBmb2N1cy12aXNpYmxlIHRoZW4gZG9uJ3RcbiAgICAgICAgICogYXBwbHkgd2hpbGVIb3Zlci4gQnV0LCBpZiBtYXRjaGVzIHRocm93cyB0aGF0IGZvY3VzLXZpc2libGVcbiAgICAgICAgICogaXMgbm90IGEgdmFsaWQgc2VsZWN0b3IgdGhlbiBpbiB0aGF0IGJyb3dzZXIgb3V0bGluZSBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkXG4gICAgICAgICAqIHRvIHRoZSBlbGVtZW50IGJ5IGRlZmF1bHQgYW5kIHdlIHdhbnQgdG8gbWF0Y2ggdGhhdCBiZWhhdmlvdXIgd2l0aCB3aGlsZUZvY3VzLlxuICAgICAgICAgKi9cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlzRm9jdXNWaXNpYmxlID0gdGhpcy5ub2RlLmN1cnJlbnQubWF0Y2hlcyhcIjpmb2N1cy12aXNpYmxlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpc0ZvY3VzVmlzaWJsZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0ZvY3VzVmlzaWJsZSB8fCAhdGhpcy5ub2RlLmFuaW1hdGlvblN0YXRlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLm5vZGUuYW5pbWF0aW9uU3RhdGUuc2V0QWN0aXZlKFwid2hpbGVGb2N1c1wiLCB0cnVlKTtcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIG9uQmx1cigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzQWN0aXZlIHx8ICF0aGlzLm5vZGUuYW5pbWF0aW9uU3RhdGUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMubm9kZS5hbmltYXRpb25TdGF0ZS5zZXRBY3RpdmUoXCJ3aGlsZUZvY3VzXCIsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgIH1cbiAgICBtb3VudCgpIHtcbiAgICAgICAgdGhpcy51bm1vdW50ID0gcGlwZShhZGREb21FdmVudCh0aGlzLm5vZGUuY3VycmVudCwgXCJmb2N1c1wiLCAoKSA9PiB0aGlzLm9uRm9jdXMoKSksIGFkZERvbUV2ZW50KHRoaXMubm9kZS5jdXJyZW50LCBcImJsdXJcIiwgKCkgPT4gdGhpcy5vbkJsdXIoKSkpO1xuICAgIH1cbiAgICB1bm1vdW50KCkgeyB9XG59XG5cbmV4cG9ydCB7IEZvY3VzR2VzdHVyZSB9O1xuIiwiZnVuY3Rpb24gc2hhbGxvd0NvbXBhcmUobmV4dCwgcHJldikge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShwcmV2KSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IHByZXZMZW5ndGggPSBwcmV2Lmxlbmd0aDtcbiAgICBpZiAocHJldkxlbmd0aCAhPT0gbmV4dC5sZW5ndGgpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZXZMZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocHJldltpXSAhPT0gbmV4dFtpXSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCB7IHNoYWxsb3dDb21wYXJlIH07XG4iLCJpbXBvcnQgeyByZXNvbHZlVmFyaWFudEZyb21Qcm9wcyB9IGZyb20gJy4vcmVzb2x2ZS12YXJpYW50cy5tanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGxhdGVzdCBzdGF0ZSBvZiBldmVyeSBNb3Rpb25WYWx1ZSBvbiBhIFZpc3VhbEVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0Q3VycmVudCh2aXN1YWxFbGVtZW50KSB7XG4gICAgY29uc3QgY3VycmVudCA9IHt9O1xuICAgIHZpc3VhbEVsZW1lbnQudmFsdWVzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IChjdXJyZW50W2tleV0gPSB2YWx1ZS5nZXQoKSkpO1xuICAgIHJldHVybiBjdXJyZW50O1xufVxuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBsYXRlc3QgdmVsb2NpdHkgb2YgZXZlcnkgTW90aW9uVmFsdWUgb24gYSBWaXN1YWxFbGVtZW50XG4gKi9cbmZ1bmN0aW9uIGdldFZlbG9jaXR5KHZpc3VhbEVsZW1lbnQpIHtcbiAgICBjb25zdCB2ZWxvY2l0eSA9IHt9O1xuICAgIHZpc3VhbEVsZW1lbnQudmFsdWVzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+ICh2ZWxvY2l0eVtrZXldID0gdmFsdWUuZ2V0VmVsb2NpdHkoKSkpO1xuICAgIHJldHVybiB2ZWxvY2l0eTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVWYXJpYW50KHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24sIGN1c3RvbSkge1xuICAgIGNvbnN0IHByb3BzID0gdmlzdWFsRWxlbWVudC5nZXRQcm9wcygpO1xuICAgIHJldHVybiByZXNvbHZlVmFyaWFudEZyb21Qcm9wcyhwcm9wcywgZGVmaW5pdGlvbiwgY3VzdG9tICE9PSB1bmRlZmluZWQgPyBjdXN0b20gOiBwcm9wcy5jdXN0b20sIGdldEN1cnJlbnQodmlzdWFsRWxlbWVudCksIGdldFZlbG9jaXR5KHZpc3VhbEVsZW1lbnQpKTtcbn1cblxuZXhwb3J0IHsgcmVzb2x2ZVZhcmlhbnQgfTtcbiIsImltcG9ydCB7IGNhbWVsVG9EYXNoIH0gZnJvbSAnLi4vLi4vcmVuZGVyL2RvbS91dGlscy9jYW1lbC10by1kYXNoLm1qcyc7XG5cbmNvbnN0IG9wdGltaXplZEFwcGVhckRhdGFJZCA9IFwiZnJhbWVyQXBwZWFySWRcIjtcbmNvbnN0IG9wdGltaXplZEFwcGVhckRhdGFBdHRyaWJ1dGUgPSBcImRhdGEtXCIgKyBjYW1lbFRvRGFzaChvcHRpbWl6ZWRBcHBlYXJEYXRhSWQpO1xuXG5leHBvcnQgeyBvcHRpbWl6ZWRBcHBlYXJEYXRhQXR0cmlidXRlLCBvcHRpbWl6ZWRBcHBlYXJEYXRhSWQgfTtcbiIsImltcG9ydCB7IG5vb3AgfSBmcm9tICcuL25vb3AubWpzJztcblxubGV0IHdhcm5pbmcgPSBub29wO1xubGV0IGludmFyaWFudCA9IG5vb3A7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgd2FybmluZyA9IChjaGVjaywgbWVzc2FnZSkgPT4ge1xuICAgICAgICBpZiAoIWNoZWNrICYmIHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGludmFyaWFudCA9IChjaGVjaywgbWVzc2FnZSkgPT4ge1xuICAgICAgICBpZiAoIWNoZWNrKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5leHBvcnQgeyBpbnZhcmlhbnQsIHdhcm5pbmcgfTtcbiIsIi8qKlxuICogQ29udmVydHMgc2Vjb25kcyB0byBtaWxsaXNlY29uZHNcbiAqXG4gKiBAcGFyYW0gc2Vjb25kcyAtIFRpbWUgaW4gc2Vjb25kcy5cbiAqIEByZXR1cm4gbWlsbGlzZWNvbmRzIC0gQ29udmVydGVkIHRpbWUgaW4gbWlsbGlzZWNvbmRzLlxuICovXG5jb25zdCBzZWNvbmRzVG9NaWxsaXNlY29uZHMgPSAoc2Vjb25kcykgPT4gc2Vjb25kcyAqIDEwMDA7XG5jb25zdCBtaWxsaXNlY29uZHNUb1NlY29uZHMgPSAobWlsbGlzZWNvbmRzKSA9PiBtaWxsaXNlY29uZHMgLyAxMDAwO1xuXG5leHBvcnQgeyBtaWxsaXNlY29uZHNUb1NlY29uZHMsIHNlY29uZHNUb01pbGxpc2Vjb25kcyB9O1xuIiwiY29uc3QgaXNCZXppZXJEZWZpbml0aW9uID0gKGVhc2luZykgPT4gQXJyYXkuaXNBcnJheShlYXNpbmcpICYmIHR5cGVvZiBlYXNpbmdbMF0gPT09IFwibnVtYmVyXCI7XG5cbmV4cG9ydCB7IGlzQmV6aWVyRGVmaW5pdGlvbiB9O1xuIiwiaW1wb3J0IHsgaXNCZXppZXJEZWZpbml0aW9uIH0gZnJvbSAnLi4vLi4vLi4vZWFzaW5nL3V0aWxzL2lzLWJlemllci1kZWZpbml0aW9uLm1qcyc7XG5cbmZ1bmN0aW9uIGlzV2FhcGlTdXBwb3J0ZWRFYXNpbmcoZWFzaW5nKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4oIWVhc2luZyB8fFxuICAgICAgICAodHlwZW9mIGVhc2luZyA9PT0gXCJzdHJpbmdcIiAmJiBzdXBwb3J0ZWRXYWFwaUVhc2luZ1tlYXNpbmddKSB8fFxuICAgICAgICBpc0JlemllckRlZmluaXRpb24oZWFzaW5nKSB8fFxuICAgICAgICAoQXJyYXkuaXNBcnJheShlYXNpbmcpICYmIGVhc2luZy5ldmVyeShpc1dhYXBpU3VwcG9ydGVkRWFzaW5nKSkpO1xufVxuY29uc3QgY3ViaWNCZXppZXJBc1N0cmluZyA9IChbYSwgYiwgYywgZF0pID0+IGBjdWJpYy1iZXppZXIoJHthfSwgJHtifSwgJHtjfSwgJHtkfSlgO1xuY29uc3Qgc3VwcG9ydGVkV2FhcGlFYXNpbmcgPSB7XG4gICAgbGluZWFyOiBcImxpbmVhclwiLFxuICAgIGVhc2U6IFwiZWFzZVwiLFxuICAgIGVhc2VJbjogXCJlYXNlLWluXCIsXG4gICAgZWFzZU91dDogXCJlYXNlLW91dFwiLFxuICAgIGVhc2VJbk91dDogXCJlYXNlLWluLW91dFwiLFxuICAgIGNpcmNJbjogY3ViaWNCZXppZXJBc1N0cmluZyhbMCwgMC42NSwgMC41NSwgMV0pLFxuICAgIGNpcmNPdXQ6IGN1YmljQmV6aWVyQXNTdHJpbmcoWzAuNTUsIDAsIDEsIDAuNDVdKSxcbiAgICBiYWNrSW46IGN1YmljQmV6aWVyQXNTdHJpbmcoWzAuMzEsIDAuMDEsIDAuNjYsIC0wLjU5XSksXG4gICAgYmFja091dDogY3ViaWNCZXppZXJBc1N0cmluZyhbMC4zMywgMS41MywgMC42OSwgMC45OV0pLFxufTtcbmZ1bmN0aW9uIG1hcEVhc2luZ1RvTmF0aXZlRWFzaW5nKGVhc2luZykge1xuICAgIGlmICghZWFzaW5nKVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHJldHVybiBpc0JlemllckRlZmluaXRpb24oZWFzaW5nKVxuICAgICAgICA/IGN1YmljQmV6aWVyQXNTdHJpbmcoZWFzaW5nKVxuICAgICAgICA6IEFycmF5LmlzQXJyYXkoZWFzaW5nKVxuICAgICAgICAgICAgPyBlYXNpbmcubWFwKG1hcEVhc2luZ1RvTmF0aXZlRWFzaW5nKVxuICAgICAgICAgICAgOiBzdXBwb3J0ZWRXYWFwaUVhc2luZ1tlYXNpbmddO1xufVxuXG5leHBvcnQgeyBjdWJpY0JlemllckFzU3RyaW5nLCBpc1dhYXBpU3VwcG9ydGVkRWFzaW5nLCBtYXBFYXNpbmdUb05hdGl2ZUVhc2luZywgc3VwcG9ydGVkV2FhcGlFYXNpbmcgfTtcbiIsImltcG9ydCB7IG5vb3AgfSBmcm9tICcuLi91dGlscy9ub29wLm1qcyc7XG5cbi8qXG4gIEJlemllciBmdW5jdGlvbiBnZW5lcmF0b3JcbiAgVGhpcyBoYXMgYmVlbiBtb2RpZmllZCBmcm9tIEdhw6t0YW4gUmVuYXVkZWF1J3MgQmV6aWVyRWFzaW5nXG4gIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmUvYmV6aWVyLWVhc2luZy9ibG9iL21hc3Rlci9zcmMvaW5kZXguanNcbiAgaHR0cHM6Ly9naXRodWIuY29tL2dyZS9iZXppZXItZWFzaW5nL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAgXG4gIEkndmUgcmVtb3ZlZCB0aGUgbmV3dG9uUmFwaHNvbkl0ZXJhdGUgYWxnbyBiZWNhdXNlIGluIGJlbmNobWFya2luZyBpdFxuICB3YXNuJ3Qgbm90aWNpYWJseSBmYXN0ZXIgdGhhbiBiaW5hcnlTdWJkaXZpc2lvbiwgaW5kZWVkIHJlbW92aW5nIGl0XG4gIHVzdWFsbHkgaW1wcm92ZWQgdGltZXMsIGRlcGVuZGluZyBvbiB0aGUgY3VydmUuXG4gIEkgYWxzbyByZW1vdmVkIHRoZSBsb29rdXAgdGFibGUsIGFzIGZvciB0aGUgYWRkZWQgYnVuZGxlIHNpemUgYW5kIGxvb3Agd2UncmVcbiAgb25seSBjdXR0aW5nIH40IG9yIHNvIHN1YmRpdmlzaW9uIGl0ZXJhdGlvbnMuIEkgYnVtcGVkIHRoZSBtYXggaXRlcmF0aW9ucyB1cFxuICB0byAxMiB0byBjb21wZW5zYXRlIGFuZCB0aGlzIHN0aWxsIHRlbmRlZCB0byBiZSBmYXN0ZXIgZm9yIG5vIHBlcmNlaXZhYmxlXG4gIGxvc3MgaW4gYWNjdXJhY3kuXG4gIFVzYWdlXG4gICAgY29uc3QgZWFzZU91dCA9IGN1YmljQmV6aWVyKC4xNywuNjcsLjgzLC42Nyk7XG4gICAgY29uc3QgeCA9IGVhc2VPdXQoMC41KTsgLy8gcmV0dXJucyAwLjYyNy4uLlxuKi9cbi8vIFJldHVybnMgeCh0KSBnaXZlbiB0LCB4MSwgYW5kIHgyLCBvciB5KHQpIGdpdmVuIHQsIHkxLCBhbmQgeTIuXG5jb25zdCBjYWxjQmV6aWVyID0gKHQsIGExLCBhMikgPT4gKCgoMS4wIC0gMy4wICogYTIgKyAzLjAgKiBhMSkgKiB0ICsgKDMuMCAqIGEyIC0gNi4wICogYTEpKSAqIHQgKyAzLjAgKiBhMSkgKlxuICAgIHQ7XG5jb25zdCBzdWJkaXZpc2lvblByZWNpc2lvbiA9IDAuMDAwMDAwMTtcbmNvbnN0IHN1YmRpdmlzaW9uTWF4SXRlcmF0aW9ucyA9IDEyO1xuZnVuY3Rpb24gYmluYXJ5U3ViZGl2aWRlKHgsIGxvd2VyQm91bmQsIHVwcGVyQm91bmQsIG1YMSwgbVgyKSB7XG4gICAgbGV0IGN1cnJlbnRYO1xuICAgIGxldCBjdXJyZW50VDtcbiAgICBsZXQgaSA9IDA7XG4gICAgZG8ge1xuICAgICAgICBjdXJyZW50VCA9IGxvd2VyQm91bmQgKyAodXBwZXJCb3VuZCAtIGxvd2VyQm91bmQpIC8gMi4wO1xuICAgICAgICBjdXJyZW50WCA9IGNhbGNCZXppZXIoY3VycmVudFQsIG1YMSwgbVgyKSAtIHg7XG4gICAgICAgIGlmIChjdXJyZW50WCA+IDAuMCkge1xuICAgICAgICAgICAgdXBwZXJCb3VuZCA9IGN1cnJlbnRUO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG93ZXJCb3VuZCA9IGN1cnJlbnRUO1xuICAgICAgICB9XG4gICAgfSB3aGlsZSAoTWF0aC5hYnMoY3VycmVudFgpID4gc3ViZGl2aXNpb25QcmVjaXNpb24gJiZcbiAgICAgICAgKytpIDwgc3ViZGl2aXNpb25NYXhJdGVyYXRpb25zKTtcbiAgICByZXR1cm4gY3VycmVudFQ7XG59XG5mdW5jdGlvbiBjdWJpY0JlemllcihtWDEsIG1ZMSwgbVgyLCBtWTIpIHtcbiAgICAvLyBJZiB0aGlzIGlzIGEgbGluZWFyIGdyYWRpZW50LCByZXR1cm4gbGluZWFyIGVhc2luZ1xuICAgIGlmIChtWDEgPT09IG1ZMSAmJiBtWDIgPT09IG1ZMilcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgY29uc3QgZ2V0VEZvclggPSAoYVgpID0+IGJpbmFyeVN1YmRpdmlkZShhWCwgMCwgMSwgbVgxLCBtWDIpO1xuICAgIC8vIElmIGFuaW1hdGlvbiBpcyBhdCBzdGFydC9lbmQsIHJldHVybiB0IHdpdGhvdXQgZWFzaW5nXG4gICAgcmV0dXJuICh0KSA9PiB0ID09PSAwIHx8IHQgPT09IDEgPyB0IDogY2FsY0JlemllcihnZXRURm9yWCh0KSwgbVkxLCBtWTIpO1xufVxuXG5leHBvcnQgeyBjdWJpY0JlemllciB9O1xuIiwiaW1wb3J0IHsgY3ViaWNCZXppZXIgfSBmcm9tICcuL2N1YmljLWJlemllci5tanMnO1xuXG5jb25zdCBlYXNlSW4gPSBjdWJpY0JlemllcigwLjQyLCAwLCAxLCAxKTtcbmNvbnN0IGVhc2VPdXQgPSBjdWJpY0JlemllcigwLCAwLCAwLjU4LCAxKTtcbmNvbnN0IGVhc2VJbk91dCA9IGN1YmljQmV6aWVyKDAuNDIsIDAsIDAuNTgsIDEpO1xuXG5leHBvcnQgeyBlYXNlSW4sIGVhc2VJbk91dCwgZWFzZU91dCB9O1xuIiwiY29uc3QgaXNFYXNpbmdBcnJheSA9IChlYXNlKSA9PiB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZWFzZSkgJiYgdHlwZW9mIGVhc2VbMF0gIT09IFwibnVtYmVyXCI7XG59O1xuXG5leHBvcnQgeyBpc0Vhc2luZ0FycmF5IH07XG4iLCIvLyBBY2NlcHRzIGFuIGVhc2luZyBmdW5jdGlvbiBhbmQgcmV0dXJucyBhIG5ldyBvbmUgdGhhdCBvdXRwdXRzIG1pcnJvcmVkIHZhbHVlcyBmb3Jcbi8vIHRoZSBzZWNvbmQgaGFsZiBvZiB0aGUgYW5pbWF0aW9uLiBUdXJucyBlYXNlSW4gaW50byBlYXNlSW5PdXQuXG5jb25zdCBtaXJyb3JFYXNpbmcgPSAoZWFzaW5nKSA9PiAocCkgPT4gcCA8PSAwLjUgPyBlYXNpbmcoMiAqIHApIC8gMiA6ICgyIC0gZWFzaW5nKDIgKiAoMSAtIHApKSkgLyAyO1xuXG5leHBvcnQgeyBtaXJyb3JFYXNpbmcgfTtcbiIsIi8vIEFjY2VwdHMgYW4gZWFzaW5nIGZ1bmN0aW9uIGFuZCByZXR1cm5zIGEgbmV3IG9uZSB0aGF0IG91dHB1dHMgcmV2ZXJzZWQgdmFsdWVzLlxuLy8gVHVybnMgZWFzZUluIGludG8gZWFzZU91dC5cbmNvbnN0IHJldmVyc2VFYXNpbmcgPSAoZWFzaW5nKSA9PiAocCkgPT4gMSAtIGVhc2luZygxIC0gcCk7XG5cbmV4cG9ydCB7IHJldmVyc2VFYXNpbmcgfTtcbiIsImltcG9ydCB7IG1pcnJvckVhc2luZyB9IGZyb20gJy4vbW9kaWZpZXJzL21pcnJvci5tanMnO1xuaW1wb3J0IHsgcmV2ZXJzZUVhc2luZyB9IGZyb20gJy4vbW9kaWZpZXJzL3JldmVyc2UubWpzJztcblxuY29uc3QgY2lyY0luID0gKHApID0+IDEgLSBNYXRoLnNpbihNYXRoLmFjb3MocCkpO1xuY29uc3QgY2lyY091dCA9IHJldmVyc2VFYXNpbmcoY2lyY0luKTtcbmNvbnN0IGNpcmNJbk91dCA9IG1pcnJvckVhc2luZyhjaXJjT3V0KTtcblxuZXhwb3J0IHsgY2lyY0luLCBjaXJjSW5PdXQsIGNpcmNPdXQgfTtcbiIsImltcG9ydCB7IGN1YmljQmV6aWVyIH0gZnJvbSAnLi9jdWJpYy1iZXppZXIubWpzJztcbmltcG9ydCB7IG1pcnJvckVhc2luZyB9IGZyb20gJy4vbW9kaWZpZXJzL21pcnJvci5tanMnO1xuaW1wb3J0IHsgcmV2ZXJzZUVhc2luZyB9IGZyb20gJy4vbW9kaWZpZXJzL3JldmVyc2UubWpzJztcblxuY29uc3QgYmFja091dCA9IGN1YmljQmV6aWVyKDAuMzMsIDEuNTMsIDAuNjksIDAuOTkpO1xuY29uc3QgYmFja0luID0gcmV2ZXJzZUVhc2luZyhiYWNrT3V0KTtcbmNvbnN0IGJhY2tJbk91dCA9IG1pcnJvckVhc2luZyhiYWNrSW4pO1xuXG5leHBvcnQgeyBiYWNrSW4sIGJhY2tJbk91dCwgYmFja091dCB9O1xuIiwiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvZXJyb3JzLm1qcyc7XG5pbXBvcnQgeyBjdWJpY0JlemllciB9IGZyb20gJy4uL2N1YmljLWJlemllci5tanMnO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uLy4uL3V0aWxzL25vb3AubWpzJztcbmltcG9ydCB7IGVhc2VJbiwgZWFzZUluT3V0LCBlYXNlT3V0IH0gZnJvbSAnLi4vZWFzZS5tanMnO1xuaW1wb3J0IHsgY2lyY0luLCBjaXJjSW5PdXQsIGNpcmNPdXQgfSBmcm9tICcuLi9jaXJjLm1qcyc7XG5pbXBvcnQgeyBiYWNrSW4sIGJhY2tJbk91dCwgYmFja091dCB9IGZyb20gJy4uL2JhY2subWpzJztcbmltcG9ydCB7IGFudGljaXBhdGUgfSBmcm9tICcuLi9hbnRpY2lwYXRlLm1qcyc7XG5cbmNvbnN0IGVhc2luZ0xvb2t1cCA9IHtcbiAgICBsaW5lYXI6IG5vb3AsXG4gICAgZWFzZUluLFxuICAgIGVhc2VJbk91dCxcbiAgICBlYXNlT3V0LFxuICAgIGNpcmNJbixcbiAgICBjaXJjSW5PdXQsXG4gICAgY2lyY091dCxcbiAgICBiYWNrSW4sXG4gICAgYmFja0luT3V0LFxuICAgIGJhY2tPdXQsXG4gICAgYW50aWNpcGF0ZSxcbn07XG5jb25zdCBlYXNpbmdEZWZpbml0aW9uVG9GdW5jdGlvbiA9IChkZWZpbml0aW9uKSA9PiB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgLy8gSWYgY3ViaWMgYmV6aWVyIGRlZmluaXRpb24sIGNyZWF0ZSBiZXppZXIgY3VydmVcbiAgICAgICAgaW52YXJpYW50KGRlZmluaXRpb24ubGVuZ3RoID09PSA0LCBgQ3ViaWMgYmV6aWVyIGFycmF5cyBtdXN0IGNvbnRhaW4gZm91ciBudW1lcmljYWwgdmFsdWVzLmApO1xuICAgICAgICBjb25zdCBbeDEsIHkxLCB4MiwgeTJdID0gZGVmaW5pdGlvbjtcbiAgICAgICAgcmV0dXJuIGN1YmljQmV6aWVyKHgxLCB5MSwgeDIsIHkyKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGRlZmluaXRpb24gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgLy8gRWxzZSBsb29rdXAgZnJvbSB0YWJsZVxuICAgICAgICBpbnZhcmlhbnQoZWFzaW5nTG9va3VwW2RlZmluaXRpb25dICE9PSB1bmRlZmluZWQsIGBJbnZhbGlkIGVhc2luZyB0eXBlICcke2RlZmluaXRpb259J2ApO1xuICAgICAgICByZXR1cm4gZWFzaW5nTG9va3VwW2RlZmluaXRpb25dO1xuICAgIH1cbiAgICByZXR1cm4gZGVmaW5pdGlvbjtcbn07XG5cbmV4cG9ydCB7IGVhc2luZ0RlZmluaXRpb25Ub0Z1bmN0aW9uIH07XG4iLCJpbXBvcnQgeyBiYWNrSW4gfSBmcm9tICcuL2JhY2subWpzJztcblxuY29uc3QgYW50aWNpcGF0ZSA9IChwKSA9PiAocCAqPSAyKSA8IDEgPyAwLjUgKiBiYWNrSW4ocCkgOiAwLjUgKiAoMiAtIE1hdGgucG93KDIsIC0xMCAqIChwIC0gMSkpKTtcblxuZXhwb3J0IHsgYW50aWNpcGF0ZSB9O1xuIiwiaW1wb3J0IHsgaXNTdHJpbmcsIHNpbmdsZUNvbG9yUmVnZXgsIGZsb2F0UmVnZXggfSBmcm9tICcuLi91dGlscy5tanMnO1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcHJvdmlkZWQgc3RyaW5nIGlzIGEgY29sb3IsIGllIHJnYmEoMCwwLDAsMCkgb3IgIzAwMCxcbiAqIGJ1dCBmYWxzZSBpZiBhIG51bWJlciBvciBtdWx0aXBsZSBjb2xvcnNcbiAqL1xuY29uc3QgaXNDb2xvclN0cmluZyA9ICh0eXBlLCB0ZXN0UHJvcCkgPT4gKHYpID0+IHtcbiAgICByZXR1cm4gQm9vbGVhbigoaXNTdHJpbmcodikgJiYgc2luZ2xlQ29sb3JSZWdleC50ZXN0KHYpICYmIHYuc3RhcnRzV2l0aCh0eXBlKSkgfHxcbiAgICAgICAgKHRlc3RQcm9wICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh2LCB0ZXN0UHJvcCkpKTtcbn07XG5jb25zdCBzcGxpdENvbG9yID0gKGFOYW1lLCBiTmFtZSwgY05hbWUpID0+ICh2KSA9PiB7XG4gICAgaWYgKCFpc1N0cmluZyh2KSlcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgY29uc3QgW2EsIGIsIGMsIGFscGhhXSA9IHYubWF0Y2goZmxvYXRSZWdleCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgW2FOYW1lXTogcGFyc2VGbG9hdChhKSxcbiAgICAgICAgW2JOYW1lXTogcGFyc2VGbG9hdChiKSxcbiAgICAgICAgW2NOYW1lXTogcGFyc2VGbG9hdChjKSxcbiAgICAgICAgYWxwaGE6IGFscGhhICE9PSB1bmRlZmluZWQgPyBwYXJzZUZsb2F0KGFscGhhKSA6IDEsXG4gICAgfTtcbn07XG5cbmV4cG9ydCB7IGlzQ29sb3JTdHJpbmcsIHNwbGl0Q29sb3IgfTtcbiIsImltcG9ydCB7IGNsYW1wIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvY2xhbXAubWpzJztcbmltcG9ydCB7IG51bWJlciwgYWxwaGEgfSBmcm9tICcuLi9udW1iZXJzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBzYW5pdGl6ZSB9IGZyb20gJy4uL3V0aWxzLm1qcyc7XG5pbXBvcnQgeyBpc0NvbG9yU3RyaW5nLCBzcGxpdENvbG9yIH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5jb25zdCBjbGFtcFJnYlVuaXQgPSAodikgPT4gY2xhbXAoMCwgMjU1LCB2KTtcbmNvbnN0IHJnYlVuaXQgPSB7XG4gICAgLi4ubnVtYmVyLFxuICAgIHRyYW5zZm9ybTogKHYpID0+IE1hdGgucm91bmQoY2xhbXBSZ2JVbml0KHYpKSxcbn07XG5jb25zdCByZ2JhID0ge1xuICAgIHRlc3Q6IGlzQ29sb3JTdHJpbmcoXCJyZ2JcIiwgXCJyZWRcIiksXG4gICAgcGFyc2U6IHNwbGl0Q29sb3IoXCJyZWRcIiwgXCJncmVlblwiLCBcImJsdWVcIiksXG4gICAgdHJhbnNmb3JtOiAoeyByZWQsIGdyZWVuLCBibHVlLCBhbHBoYTogYWxwaGEkMSA9IDEgfSkgPT4gXCJyZ2JhKFwiICtcbiAgICAgICAgcmdiVW5pdC50cmFuc2Zvcm0ocmVkKSArXG4gICAgICAgIFwiLCBcIiArXG4gICAgICAgIHJnYlVuaXQudHJhbnNmb3JtKGdyZWVuKSArXG4gICAgICAgIFwiLCBcIiArXG4gICAgICAgIHJnYlVuaXQudHJhbnNmb3JtKGJsdWUpICtcbiAgICAgICAgXCIsIFwiICtcbiAgICAgICAgc2FuaXRpemUoYWxwaGEudHJhbnNmb3JtKGFscGhhJDEpKSArXG4gICAgICAgIFwiKVwiLFxufTtcblxuZXhwb3J0IHsgcmdiVW5pdCwgcmdiYSB9O1xuIiwiaW1wb3J0IHsgcmdiYSB9IGZyb20gJy4vcmdiYS5tanMnO1xuaW1wb3J0IHsgaXNDb2xvclN0cmluZyB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuZnVuY3Rpb24gcGFyc2VIZXgodikge1xuICAgIGxldCByID0gXCJcIjtcbiAgICBsZXQgZyA9IFwiXCI7XG4gICAgbGV0IGIgPSBcIlwiO1xuICAgIGxldCBhID0gXCJcIjtcbiAgICAvLyBJZiB3ZSBoYXZlIDYgY2hhcmFjdGVycywgaWUgI0ZGMDAwMFxuICAgIGlmICh2Lmxlbmd0aCA+IDUpIHtcbiAgICAgICAgciA9IHYuc3Vic3RyaW5nKDEsIDMpO1xuICAgICAgICBnID0gdi5zdWJzdHJpbmcoMywgNSk7XG4gICAgICAgIGIgPSB2LnN1YnN0cmluZyg1LCA3KTtcbiAgICAgICAgYSA9IHYuc3Vic3RyaW5nKDcsIDkpO1xuICAgICAgICAvLyBPciB3ZSBoYXZlIDMgY2hhcmFjdGVycywgaWUgI0YwMFxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgciA9IHYuc3Vic3RyaW5nKDEsIDIpO1xuICAgICAgICBnID0gdi5zdWJzdHJpbmcoMiwgMyk7XG4gICAgICAgIGIgPSB2LnN1YnN0cmluZygzLCA0KTtcbiAgICAgICAgYSA9IHYuc3Vic3RyaW5nKDQsIDUpO1xuICAgICAgICByICs9IHI7XG4gICAgICAgIGcgKz0gZztcbiAgICAgICAgYiArPSBiO1xuICAgICAgICBhICs9IGE7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJlZDogcGFyc2VJbnQociwgMTYpLFxuICAgICAgICBncmVlbjogcGFyc2VJbnQoZywgMTYpLFxuICAgICAgICBibHVlOiBwYXJzZUludChiLCAxNiksXG4gICAgICAgIGFscGhhOiBhID8gcGFyc2VJbnQoYSwgMTYpIC8gMjU1IDogMSxcbiAgICB9O1xufVxuY29uc3QgaGV4ID0ge1xuICAgIHRlc3Q6IGlzQ29sb3JTdHJpbmcoXCIjXCIpLFxuICAgIHBhcnNlOiBwYXJzZUhleCxcbiAgICB0cmFuc2Zvcm06IHJnYmEudHJhbnNmb3JtLFxufTtcblxuZXhwb3J0IHsgaGV4IH07XG4iLCJpbXBvcnQgeyBhbHBoYSB9IGZyb20gJy4uL251bWJlcnMvaW5kZXgubWpzJztcbmltcG9ydCB7IHBlcmNlbnQgfSBmcm9tICcuLi9udW1iZXJzL3VuaXRzLm1qcyc7XG5pbXBvcnQgeyBzYW5pdGl6ZSB9IGZyb20gJy4uL3V0aWxzLm1qcyc7XG5pbXBvcnQgeyBpc0NvbG9yU3RyaW5nLCBzcGxpdENvbG9yIH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5jb25zdCBoc2xhID0ge1xuICAgIHRlc3Q6IGlzQ29sb3JTdHJpbmcoXCJoc2xcIiwgXCJodWVcIiksXG4gICAgcGFyc2U6IHNwbGl0Q29sb3IoXCJodWVcIiwgXCJzYXR1cmF0aW9uXCIsIFwibGlnaHRuZXNzXCIpLFxuICAgIHRyYW5zZm9ybTogKHsgaHVlLCBzYXR1cmF0aW9uLCBsaWdodG5lc3MsIGFscGhhOiBhbHBoYSQxID0gMSB9KSA9PiB7XG4gICAgICAgIHJldHVybiAoXCJoc2xhKFwiICtcbiAgICAgICAgICAgIE1hdGgucm91bmQoaHVlKSArXG4gICAgICAgICAgICBcIiwgXCIgK1xuICAgICAgICAgICAgcGVyY2VudC50cmFuc2Zvcm0oc2FuaXRpemUoc2F0dXJhdGlvbikpICtcbiAgICAgICAgICAgIFwiLCBcIiArXG4gICAgICAgICAgICBwZXJjZW50LnRyYW5zZm9ybShzYW5pdGl6ZShsaWdodG5lc3MpKSArXG4gICAgICAgICAgICBcIiwgXCIgK1xuICAgICAgICAgICAgc2FuaXRpemUoYWxwaGEudHJhbnNmb3JtKGFscGhhJDEpKSArXG4gICAgICAgICAgICBcIilcIik7XG4gICAgfSxcbn07XG5cbmV4cG9ydCB7IGhzbGEgfTtcbiIsImltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnLi4vdXRpbHMubWpzJztcbmltcG9ydCB7IGhleCB9IGZyb20gJy4vaGV4Lm1qcyc7XG5pbXBvcnQgeyBoc2xhIH0gZnJvbSAnLi9oc2xhLm1qcyc7XG5pbXBvcnQgeyByZ2JhIH0gZnJvbSAnLi9yZ2JhLm1qcyc7XG5cbmNvbnN0IGNvbG9yID0ge1xuICAgIHRlc3Q6ICh2KSA9PiByZ2JhLnRlc3QodikgfHwgaGV4LnRlc3QodikgfHwgaHNsYS50ZXN0KHYpLFxuICAgIHBhcnNlOiAodikgPT4ge1xuICAgICAgICBpZiAocmdiYS50ZXN0KHYpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmdiYS5wYXJzZSh2KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChoc2xhLnRlc3QodikpIHtcbiAgICAgICAgICAgIHJldHVybiBoc2xhLnBhcnNlKHYpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGhleC5wYXJzZSh2KTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdHJhbnNmb3JtOiAodikgPT4ge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcodilcbiAgICAgICAgICAgID8gdlxuICAgICAgICAgICAgOiB2Lmhhc093blByb3BlcnR5KFwicmVkXCIpXG4gICAgICAgICAgICAgICAgPyByZ2JhLnRyYW5zZm9ybSh2KVxuICAgICAgICAgICAgICAgIDogaHNsYS50cmFuc2Zvcm0odik7XG4gICAgfSxcbn07XG5cbmV4cG9ydCB7IGNvbG9yIH07XG4iLCIvKlxuICBWYWx1ZSBpbiByYW5nZSBmcm9tIHByb2dyZXNzXG5cbiAgR2l2ZW4gYSBsb3dlciBsaW1pdCBhbmQgYW4gdXBwZXIgbGltaXQsIHdlIHJldHVybiB0aGUgdmFsdWUgd2l0aGluXG4gIHRoYXQgcmFuZ2UgYXMgZXhwcmVzc2VkIGJ5IHByb2dyZXNzICh1c3VhbGx5IGEgbnVtYmVyIGZyb20gMCB0byAxKVxuXG4gIFNvIHByb2dyZXNzID0gMC41IHdvdWxkIGNoYW5nZVxuXG4gIGZyb20gLS0tLS0tLS0gdG9cblxuICB0b1xuXG4gIGZyb20gLS0tLSB0b1xuXG4gIEUuZy4gZnJvbSA9IDEwLCB0byA9IDIwLCBwcm9ncmVzcyA9IDAuNSA9PiAxNVxuXG4gIEBwYXJhbSBbbnVtYmVyXTogTG93ZXIgbGltaXQgb2YgcmFuZ2VcbiAgQHBhcmFtIFtudW1iZXJdOiBVcHBlciBsaW1pdCBvZiByYW5nZVxuICBAcGFyYW0gW251bWJlcl06IFRoZSBwcm9ncmVzcyBiZXR3ZWVuIGxvd2VyIGFuZCB1cHBlciBsaW1pdHMgZXhwcmVzc2VkIDAtMVxuICBAcmV0dXJuIFtudW1iZXJdOiBWYWx1ZSBhcyBjYWxjdWxhdGVkIGZyb20gcHJvZ3Jlc3Mgd2l0aGluIHJhbmdlIChub3QgbGltaXRlZCB3aXRoaW4gcmFuZ2UpXG4qL1xuY29uc3QgbWl4ID0gKGZyb20sIHRvLCBwcm9ncmVzcykgPT4gLXByb2dyZXNzICogZnJvbSArIHByb2dyZXNzICogdG8gKyBmcm9tO1xuXG5leHBvcnQgeyBtaXggfTtcbiIsIi8vIEFkYXB0ZWQgZnJvbSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9tamFja3Nvbi81MzExMjU2XG5mdW5jdGlvbiBodWVUb1JnYihwLCBxLCB0KSB7XG4gICAgaWYgKHQgPCAwKVxuICAgICAgICB0ICs9IDE7XG4gICAgaWYgKHQgPiAxKVxuICAgICAgICB0IC09IDE7XG4gICAgaWYgKHQgPCAxIC8gNilcbiAgICAgICAgcmV0dXJuIHAgKyAocSAtIHApICogNiAqIHQ7XG4gICAgaWYgKHQgPCAxIC8gMilcbiAgICAgICAgcmV0dXJuIHE7XG4gICAgaWYgKHQgPCAyIC8gMylcbiAgICAgICAgcmV0dXJuIHAgKyAocSAtIHApICogKDIgLyAzIC0gdCkgKiA2O1xuICAgIHJldHVybiBwO1xufVxuZnVuY3Rpb24gaHNsYVRvUmdiYSh7IGh1ZSwgc2F0dXJhdGlvbiwgbGlnaHRuZXNzLCBhbHBoYSB9KSB7XG4gICAgaHVlIC89IDM2MDtcbiAgICBzYXR1cmF0aW9uIC89IDEwMDtcbiAgICBsaWdodG5lc3MgLz0gMTAwO1xuICAgIGxldCByZWQgPSAwO1xuICAgIGxldCBncmVlbiA9IDA7XG4gICAgbGV0IGJsdWUgPSAwO1xuICAgIGlmICghc2F0dXJhdGlvbikge1xuICAgICAgICByZWQgPSBncmVlbiA9IGJsdWUgPSBsaWdodG5lc3M7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBxID0gbGlnaHRuZXNzIDwgMC41XG4gICAgICAgICAgICA/IGxpZ2h0bmVzcyAqICgxICsgc2F0dXJhdGlvbilcbiAgICAgICAgICAgIDogbGlnaHRuZXNzICsgc2F0dXJhdGlvbiAtIGxpZ2h0bmVzcyAqIHNhdHVyYXRpb247XG4gICAgICAgIGNvbnN0IHAgPSAyICogbGlnaHRuZXNzIC0gcTtcbiAgICAgICAgcmVkID0gaHVlVG9SZ2IocCwgcSwgaHVlICsgMSAvIDMpO1xuICAgICAgICBncmVlbiA9IGh1ZVRvUmdiKHAsIHEsIGh1ZSk7XG4gICAgICAgIGJsdWUgPSBodWVUb1JnYihwLCBxLCBodWUgLSAxIC8gMyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJlZDogTWF0aC5yb3VuZChyZWQgKiAyNTUpLFxuICAgICAgICBncmVlbjogTWF0aC5yb3VuZChncmVlbiAqIDI1NSksXG4gICAgICAgIGJsdWU6IE1hdGgucm91bmQoYmx1ZSAqIDI1NSksXG4gICAgICAgIGFscGhhLFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGhzbGFUb1JnYmEgfTtcbiIsImltcG9ydCB7IG1peCB9IGZyb20gJy4vbWl4Lm1qcyc7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICcuL2Vycm9ycy5tanMnO1xuaW1wb3J0IHsgaHNsYVRvUmdiYSB9IGZyb20gJy4vaHNsYS10by1yZ2JhLm1qcyc7XG5pbXBvcnQgeyBoZXggfSBmcm9tICcuLi92YWx1ZS90eXBlcy9jb2xvci9oZXgubWpzJztcbmltcG9ydCB7IHJnYmEgfSBmcm9tICcuLi92YWx1ZS90eXBlcy9jb2xvci9yZ2JhLm1qcyc7XG5pbXBvcnQgeyBoc2xhIH0gZnJvbSAnLi4vdmFsdWUvdHlwZXMvY29sb3IvaHNsYS5tanMnO1xuXG4vLyBMaW5lYXIgY29sb3Igc3BhY2UgYmxlbmRpbmdcbi8vIEV4cGxhaW5lZCBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUxLbnFFQ2NnNkd3XG4vLyBEZW1vbnN0cmF0ZWQgaHR0cDovL2NvZGVwZW4uaW8vb3N1Ymxha2UvcGVuL3hHVlZhTlxuY29uc3QgbWl4TGluZWFyQ29sb3IgPSAoZnJvbSwgdG8sIHYpID0+IHtcbiAgICBjb25zdCBmcm9tRXhwbyA9IGZyb20gKiBmcm9tO1xuICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5tYXgoMCwgdiAqICh0byAqIHRvIC0gZnJvbUV4cG8pICsgZnJvbUV4cG8pKTtcbn07XG5jb25zdCBjb2xvclR5cGVzID0gW2hleCwgcmdiYSwgaHNsYV07XG5jb25zdCBnZXRDb2xvclR5cGUgPSAodikgPT4gY29sb3JUeXBlcy5maW5kKCh0eXBlKSA9PiB0eXBlLnRlc3QodikpO1xuZnVuY3Rpb24gYXNSR0JBKGNvbG9yKSB7XG4gICAgY29uc3QgdHlwZSA9IGdldENvbG9yVHlwZShjb2xvcik7XG4gICAgaW52YXJpYW50KEJvb2xlYW4odHlwZSksIGAnJHtjb2xvcn0nIGlzIG5vdCBhbiBhbmltYXRhYmxlIGNvbG9yLiBVc2UgdGhlIGVxdWl2YWxlbnQgY29sb3IgY29kZSBpbnN0ZWFkLmApO1xuICAgIGxldCBtb2RlbCA9IHR5cGUucGFyc2UoY29sb3IpO1xuICAgIGlmICh0eXBlID09PSBoc2xhKSB7XG4gICAgICAgIC8vIFRPRE8gUmVtb3ZlIHRoaXMgY2FzdCAtIG5lZWRlZCBzaW5jZSBGcmFtZXIgTW90aW9uJ3Mgc3RyaWN0ZXIgdHlwaW5nXG4gICAgICAgIG1vZGVsID0gaHNsYVRvUmdiYShtb2RlbCk7XG4gICAgfVxuICAgIHJldHVybiBtb2RlbDtcbn1cbmNvbnN0IG1peENvbG9yID0gKGZyb20sIHRvKSA9PiB7XG4gICAgY29uc3QgZnJvbVJHQkEgPSBhc1JHQkEoZnJvbSk7XG4gICAgY29uc3QgdG9SR0JBID0gYXNSR0JBKHRvKTtcbiAgICBjb25zdCBibGVuZGVkID0geyAuLi5mcm9tUkdCQSB9O1xuICAgIHJldHVybiAodikgPT4ge1xuICAgICAgICBibGVuZGVkLnJlZCA9IG1peExpbmVhckNvbG9yKGZyb21SR0JBLnJlZCwgdG9SR0JBLnJlZCwgdik7XG4gICAgICAgIGJsZW5kZWQuZ3JlZW4gPSBtaXhMaW5lYXJDb2xvcihmcm9tUkdCQS5ncmVlbiwgdG9SR0JBLmdyZWVuLCB2KTtcbiAgICAgICAgYmxlbmRlZC5ibHVlID0gbWl4TGluZWFyQ29sb3IoZnJvbVJHQkEuYmx1ZSwgdG9SR0JBLmJsdWUsIHYpO1xuICAgICAgICBibGVuZGVkLmFscGhhID0gbWl4KGZyb21SR0JBLmFscGhhLCB0b1JHQkEuYWxwaGEsIHYpO1xuICAgICAgICByZXR1cm4gcmdiYS50cmFuc2Zvcm0oYmxlbmRlZCk7XG4gICAgfTtcbn07XG5cbmV4cG9ydCB7IG1peENvbG9yLCBtaXhMaW5lYXJDb2xvciB9O1xuIiwiaW1wb3J0IHsgY3NzVmFyaWFibGVSZWdleCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlci9kb20vdXRpbHMvaXMtY3NzLXZhcmlhYmxlLm1qcyc7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvbm9vcC5tanMnO1xuaW1wb3J0IHsgY29sb3IgfSBmcm9tICcuLi9jb2xvci9pbmRleC5tanMnO1xuaW1wb3J0IHsgbnVtYmVyIH0gZnJvbSAnLi4vbnVtYmVycy9pbmRleC5tanMnO1xuaW1wb3J0IHsgY29sb3JSZWdleCwgZmxvYXRSZWdleCwgaXNTdHJpbmcsIHNhbml0aXplIH0gZnJvbSAnLi4vdXRpbHMubWpzJztcblxuZnVuY3Rpb24gdGVzdCh2KSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICByZXR1cm4gKGlzTmFOKHYpICYmXG4gICAgICAgIGlzU3RyaW5nKHYpICYmXG4gICAgICAgICgoKF9hID0gdi5tYXRjaChmbG9hdFJlZ2V4KSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgfHwgMCkgK1xuICAgICAgICAgICAgKCgoX2IgPSB2Lm1hdGNoKGNvbG9yUmVnZXgpKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubGVuZ3RoKSB8fCAwKSA+XG4gICAgICAgICAgICAwKTtcbn1cbmNvbnN0IGNzc1ZhclRva2VuaXNlciA9IHtcbiAgICByZWdleDogY3NzVmFyaWFibGVSZWdleCxcbiAgICBjb3VudEtleTogXCJWYXJzXCIsXG4gICAgdG9rZW46IFwiJHt2fVwiLFxuICAgIHBhcnNlOiBub29wLFxufTtcbmNvbnN0IGNvbG9yVG9rZW5pc2VyID0ge1xuICAgIHJlZ2V4OiBjb2xvclJlZ2V4LFxuICAgIGNvdW50S2V5OiBcIkNvbG9yc1wiLFxuICAgIHRva2VuOiBcIiR7Y31cIixcbiAgICBwYXJzZTogY29sb3IucGFyc2UsXG59O1xuY29uc3QgbnVtYmVyVG9rZW5pc2VyID0ge1xuICAgIHJlZ2V4OiBmbG9hdFJlZ2V4LFxuICAgIGNvdW50S2V5OiBcIk51bWJlcnNcIixcbiAgICB0b2tlbjogXCIke259XCIsXG4gICAgcGFyc2U6IG51bWJlci5wYXJzZSxcbn07XG5mdW5jdGlvbiB0b2tlbmlzZShpbmZvLCB7IHJlZ2V4LCBjb3VudEtleSwgdG9rZW4sIHBhcnNlIH0pIHtcbiAgICBjb25zdCBtYXRjaGVzID0gaW5mby50b2tlbmlzZWQubWF0Y2gocmVnZXgpO1xuICAgIGlmICghbWF0Y2hlcylcbiAgICAgICAgcmV0dXJuO1xuICAgIGluZm9bXCJudW1cIiArIGNvdW50S2V5XSA9IG1hdGNoZXMubGVuZ3RoO1xuICAgIGluZm8udG9rZW5pc2VkID0gaW5mby50b2tlbmlzZWQucmVwbGFjZShyZWdleCwgdG9rZW4pO1xuICAgIGluZm8udmFsdWVzLnB1c2goLi4ubWF0Y2hlcy5tYXAocGFyc2UpKTtcbn1cbmZ1bmN0aW9uIGFuYWx5c2VDb21wbGV4VmFsdWUodmFsdWUpIHtcbiAgICBjb25zdCBvcmlnaW5hbFZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICBjb25zdCBpbmZvID0ge1xuICAgICAgICB2YWx1ZTogb3JpZ2luYWxWYWx1ZSxcbiAgICAgICAgdG9rZW5pc2VkOiBvcmlnaW5hbFZhbHVlLFxuICAgICAgICB2YWx1ZXM6IFtdLFxuICAgICAgICBudW1WYXJzOiAwLFxuICAgICAgICBudW1Db2xvcnM6IDAsXG4gICAgICAgIG51bU51bWJlcnM6IDAsXG4gICAgfTtcbiAgICBpZiAoaW5mby52YWx1ZS5pbmNsdWRlcyhcInZhcigtLVwiKSlcbiAgICAgICAgdG9rZW5pc2UoaW5mbywgY3NzVmFyVG9rZW5pc2VyKTtcbiAgICB0b2tlbmlzZShpbmZvLCBjb2xvclRva2VuaXNlcik7XG4gICAgdG9rZW5pc2UoaW5mbywgbnVtYmVyVG9rZW5pc2VyKTtcbiAgICByZXR1cm4gaW5mbztcbn1cbmZ1bmN0aW9uIHBhcnNlQ29tcGxleFZhbHVlKHYpIHtcbiAgICByZXR1cm4gYW5hbHlzZUNvbXBsZXhWYWx1ZSh2KS52YWx1ZXM7XG59XG5mdW5jdGlvbiBjcmVhdGVUcmFuc2Zvcm1lcihzb3VyY2UpIHtcbiAgICBjb25zdCB7IHZhbHVlcywgbnVtQ29sb3JzLCBudW1WYXJzLCB0b2tlbmlzZWQgfSA9IGFuYWx5c2VDb21wbGV4VmFsdWUoc291cmNlKTtcbiAgICBjb25zdCBudW1WYWx1ZXMgPSB2YWx1ZXMubGVuZ3RoO1xuICAgIHJldHVybiAodikgPT4ge1xuICAgICAgICBsZXQgb3V0cHV0ID0gdG9rZW5pc2VkO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVZhbHVlczsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaSA8IG51bVZhcnMpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZShjc3NWYXJUb2tlbmlzZXIudG9rZW4sIHZbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaSA8IG51bVZhcnMgKyBudW1Db2xvcnMpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZShjb2xvclRva2VuaXNlci50b2tlbiwgY29sb3IudHJhbnNmb3JtKHZbaV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKG51bWJlclRva2VuaXNlci50b2tlbiwgc2FuaXRpemUodltpXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcbn1cbmNvbnN0IGNvbnZlcnROdW1iZXJzVG9aZXJvID0gKHYpID0+IHR5cGVvZiB2ID09PSBcIm51bWJlclwiID8gMCA6IHY7XG5mdW5jdGlvbiBnZXRBbmltYXRhYmxlTm9uZSh2KSB7XG4gICAgY29uc3QgcGFyc2VkID0gcGFyc2VDb21wbGV4VmFsdWUodik7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVUcmFuc2Zvcm1lcih2KTtcbiAgICByZXR1cm4gdHJhbnNmb3JtZXIocGFyc2VkLm1hcChjb252ZXJ0TnVtYmVyc1RvWmVybykpO1xufVxuY29uc3QgY29tcGxleCA9IHtcbiAgICB0ZXN0LFxuICAgIHBhcnNlOiBwYXJzZUNvbXBsZXhWYWx1ZSxcbiAgICBjcmVhdGVUcmFuc2Zvcm1lcixcbiAgICBnZXRBbmltYXRhYmxlTm9uZSxcbn07XG5cbmV4cG9ydCB7IGFuYWx5c2VDb21wbGV4VmFsdWUsIGNvbXBsZXggfTtcbiIsImltcG9ydCB7IG1peCB9IGZyb20gJy4vbWl4Lm1qcyc7XG5pbXBvcnQgeyBtaXhDb2xvciB9IGZyb20gJy4vbWl4LWNvbG9yLm1qcyc7XG5pbXBvcnQgeyBwaXBlIH0gZnJvbSAnLi9waXBlLm1qcyc7XG5pbXBvcnQgeyB3YXJuaW5nIH0gZnJvbSAnLi9lcnJvcnMubWpzJztcbmltcG9ydCB7IGNvbG9yIH0gZnJvbSAnLi4vdmFsdWUvdHlwZXMvY29sb3IvaW5kZXgubWpzJztcbmltcG9ydCB7IGNvbXBsZXgsIGFuYWx5c2VDb21wbGV4VmFsdWUgfSBmcm9tICcuLi92YWx1ZS90eXBlcy9jb21wbGV4L2luZGV4Lm1qcyc7XG5cbmNvbnN0IG1peEltbWVkaWF0ZSA9IChvcmlnaW4sIHRhcmdldCkgPT4gKHApID0+IGAke3AgPiAwID8gdGFyZ2V0IDogb3JpZ2lufWA7XG5mdW5jdGlvbiBnZXRNaXhlcihvcmlnaW4sIHRhcmdldCkge1xuICAgIGlmICh0eXBlb2Ygb3JpZ2luID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiAodikgPT4gbWl4KG9yaWdpbiwgdGFyZ2V0LCB2KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29sb3IudGVzdChvcmlnaW4pKSB7XG4gICAgICAgIHJldHVybiBtaXhDb2xvcihvcmlnaW4sIHRhcmdldCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gb3JpZ2luLnN0YXJ0c1dpdGgoXCJ2YXIoXCIpXG4gICAgICAgICAgICA/IG1peEltbWVkaWF0ZShvcmlnaW4sIHRhcmdldClcbiAgICAgICAgICAgIDogbWl4Q29tcGxleChvcmlnaW4sIHRhcmdldCk7XG4gICAgfVxufVxuY29uc3QgbWl4QXJyYXkgPSAoZnJvbSwgdG8pID0+IHtcbiAgICBjb25zdCBvdXRwdXQgPSBbLi4uZnJvbV07XG4gICAgY29uc3QgbnVtVmFsdWVzID0gb3V0cHV0Lmxlbmd0aDtcbiAgICBjb25zdCBibGVuZFZhbHVlID0gZnJvbS5tYXAoKGZyb21UaGlzLCBpKSA9PiBnZXRNaXhlcihmcm9tVGhpcywgdG9baV0pKTtcbiAgICByZXR1cm4gKHYpID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1WYWx1ZXM7IGkrKykge1xuICAgICAgICAgICAgb3V0cHV0W2ldID0gYmxlbmRWYWx1ZVtpXSh2KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG59O1xuY29uc3QgbWl4T2JqZWN0ID0gKG9yaWdpbiwgdGFyZ2V0KSA9PiB7XG4gICAgY29uc3Qgb3V0cHV0ID0geyAuLi5vcmlnaW4sIC4uLnRhcmdldCB9O1xuICAgIGNvbnN0IGJsZW5kVmFsdWUgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvdXRwdXQpIHtcbiAgICAgICAgaWYgKG9yaWdpbltrZXldICE9PSB1bmRlZmluZWQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYmxlbmRWYWx1ZVtrZXldID0gZ2V0TWl4ZXIob3JpZ2luW2tleV0sIHRhcmdldFtrZXldKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKHYpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gYmxlbmRWYWx1ZSkge1xuICAgICAgICAgICAgb3V0cHV0W2tleV0gPSBibGVuZFZhbHVlW2tleV0odik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xufTtcbmNvbnN0IG1peENvbXBsZXggPSAob3JpZ2luLCB0YXJnZXQpID0+IHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGNvbXBsZXguY3JlYXRlVHJhbnNmb3JtZXIodGFyZ2V0KTtcbiAgICBjb25zdCBvcmlnaW5TdGF0cyA9IGFuYWx5c2VDb21wbGV4VmFsdWUob3JpZ2luKTtcbiAgICBjb25zdCB0YXJnZXRTdGF0cyA9IGFuYWx5c2VDb21wbGV4VmFsdWUodGFyZ2V0KTtcbiAgICBjb25zdCBjYW5JbnRlcnBvbGF0ZSA9IG9yaWdpblN0YXRzLm51bVZhcnMgPT09IHRhcmdldFN0YXRzLm51bVZhcnMgJiZcbiAgICAgICAgb3JpZ2luU3RhdHMubnVtQ29sb3JzID09PSB0YXJnZXRTdGF0cy5udW1Db2xvcnMgJiZcbiAgICAgICAgb3JpZ2luU3RhdHMubnVtTnVtYmVycyA+PSB0YXJnZXRTdGF0cy5udW1OdW1iZXJzO1xuICAgIGlmIChjYW5JbnRlcnBvbGF0ZSkge1xuICAgICAgICByZXR1cm4gcGlwZShtaXhBcnJheShvcmlnaW5TdGF0cy52YWx1ZXMsIHRhcmdldFN0YXRzLnZhbHVlcyksIHRlbXBsYXRlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHdhcm5pbmcodHJ1ZSwgYENvbXBsZXggdmFsdWVzICcke29yaWdpbn0nIGFuZCAnJHt0YXJnZXR9JyB0b28gZGlmZmVyZW50IHRvIG1peC4gRW5zdXJlIGFsbCBjb2xvcnMgYXJlIG9mIHRoZSBzYW1lIHR5cGUsIGFuZCB0aGF0IGVhY2ggY29udGFpbnMgdGhlIHNhbWUgcXVhbnRpdHkgb2YgbnVtYmVyIGFuZCBjb2xvciB2YWx1ZXMuIEZhbGxpbmcgYmFjayB0byBpbnN0YW50IHRyYW5zaXRpb24uYCk7XG4gICAgICAgIHJldHVybiBtaXhJbW1lZGlhdGUob3JpZ2luLCB0YXJnZXQpO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IG1peEFycmF5LCBtaXhDb21wbGV4LCBtaXhPYmplY3QgfTtcbiIsIi8qXG4gIFByb2dyZXNzIHdpdGhpbiBnaXZlbiByYW5nZVxuXG4gIEdpdmVuIGEgbG93ZXIgbGltaXQgYW5kIGFuIHVwcGVyIGxpbWl0LCB3ZSByZXR1cm4gdGhlIHByb2dyZXNzXG4gIChleHByZXNzZWQgYXMgYSBudW1iZXIgMC0xKSByZXByZXNlbnRlZCBieSB0aGUgZ2l2ZW4gdmFsdWUsIGFuZFxuICBsaW1pdCB0aGF0IHByb2dyZXNzIHRvIHdpdGhpbiAwLTEuXG5cbiAgQHBhcmFtIFtudW1iZXJdOiBMb3dlciBsaW1pdFxuICBAcGFyYW0gW251bWJlcl06IFVwcGVyIGxpbWl0XG4gIEBwYXJhbSBbbnVtYmVyXTogVmFsdWUgdG8gZmluZCBwcm9ncmVzcyB3aXRoaW4gZ2l2ZW4gcmFuZ2VcbiAgQHJldHVybiBbbnVtYmVyXTogUHJvZ3Jlc3Mgb2YgdmFsdWUgd2l0aGluIHJhbmdlIGFzIGV4cHJlc3NlZCAwLTFcbiovXG5jb25zdCBwcm9ncmVzcyA9IChmcm9tLCB0bywgdmFsdWUpID0+IHtcbiAgICBjb25zdCB0b0Zyb21EaWZmZXJlbmNlID0gdG8gLSBmcm9tO1xuICAgIHJldHVybiB0b0Zyb21EaWZmZXJlbmNlID09PSAwID8gMSA6ICh2YWx1ZSAtIGZyb20pIC8gdG9Gcm9tRGlmZmVyZW5jZTtcbn07XG5cbmV4cG9ydCB7IHByb2dyZXNzIH07XG4iLCJpbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICcuL2Vycm9ycy5tanMnO1xuaW1wb3J0IHsgY29sb3IgfSBmcm9tICcuLi92YWx1ZS90eXBlcy9jb2xvci9pbmRleC5tanMnO1xuaW1wb3J0IHsgY2xhbXAgfSBmcm9tICcuL2NsYW1wLm1qcyc7XG5pbXBvcnQgeyBtaXggfSBmcm9tICcuL21peC5tanMnO1xuaW1wb3J0IHsgbWl4Q29sb3IgfSBmcm9tICcuL21peC1jb2xvci5tanMnO1xuaW1wb3J0IHsgbWl4Q29tcGxleCwgbWl4QXJyYXksIG1peE9iamVjdCB9IGZyb20gJy4vbWl4LWNvbXBsZXgubWpzJztcbmltcG9ydCB7IHBpcGUgfSBmcm9tICcuL3BpcGUubWpzJztcbmltcG9ydCB7IHByb2dyZXNzIH0gZnJvbSAnLi9wcm9ncmVzcy5tanMnO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4vbm9vcC5tanMnO1xuXG5jb25zdCBtaXhOdW1iZXIgPSAoZnJvbSwgdG8pID0+IChwKSA9PiBtaXgoZnJvbSwgdG8sIHApO1xuZnVuY3Rpb24gZGV0ZWN0TWl4ZXJGYWN0b3J5KHYpIHtcbiAgICBpZiAodHlwZW9mIHYgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIG1peE51bWJlcjtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHYgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGNvbG9yLnRlc3QodikgPyBtaXhDb2xvciA6IG1peENvbXBsZXg7XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodikpIHtcbiAgICAgICAgcmV0dXJuIG1peEFycmF5O1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdiA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICByZXR1cm4gbWl4T2JqZWN0O1xuICAgIH1cbiAgICByZXR1cm4gbWl4TnVtYmVyO1xufVxuZnVuY3Rpb24gY3JlYXRlTWl4ZXJzKG91dHB1dCwgZWFzZSwgY3VzdG9tTWl4ZXIpIHtcbiAgICBjb25zdCBtaXhlcnMgPSBbXTtcbiAgICBjb25zdCBtaXhlckZhY3RvcnkgPSBjdXN0b21NaXhlciB8fCBkZXRlY3RNaXhlckZhY3Rvcnkob3V0cHV0WzBdKTtcbiAgICBjb25zdCBudW1NaXhlcnMgPSBvdXRwdXQubGVuZ3RoIC0gMTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bU1peGVyczsgaSsrKSB7XG4gICAgICAgIGxldCBtaXhlciA9IG1peGVyRmFjdG9yeShvdXRwdXRbaV0sIG91dHB1dFtpICsgMV0pO1xuICAgICAgICBpZiAoZWFzZSkge1xuICAgICAgICAgICAgY29uc3QgZWFzaW5nRnVuY3Rpb24gPSBBcnJheS5pc0FycmF5KGVhc2UpID8gZWFzZVtpXSB8fCBub29wIDogZWFzZTtcbiAgICAgICAgICAgIG1peGVyID0gcGlwZShlYXNpbmdGdW5jdGlvbiwgbWl4ZXIpO1xuICAgICAgICB9XG4gICAgICAgIG1peGVycy5wdXNoKG1peGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIG1peGVycztcbn1cbi8qKlxuICogQ3JlYXRlIGEgZnVuY3Rpb24gdGhhdCBtYXBzIGZyb20gYSBudW1lcmljYWwgaW5wdXQgYXJyYXkgdG8gYSBnZW5lcmljIG91dHB1dCBhcnJheS5cbiAqXG4gKiBBY2NlcHRzOlxuICogICAtIE51bWJlcnNcbiAqICAgLSBDb2xvcnMgKGhleCwgaHNsLCBoc2xhLCByZ2IsIHJnYmEpXG4gKiAgIC0gQ29tcGxleCAoY29tYmluYXRpb25zIG9mIG9uZSBvciBtb3JlIG51bWJlcnMgb3Igc3RyaW5ncylcbiAqXG4gKiBgYGBqc3hcbiAqIGNvbnN0IG1peENvbG9yID0gaW50ZXJwb2xhdGUoWzAsIDFdLCBbJyNmZmYnLCAnIzAwMCddKVxuICpcbiAqIG1peENvbG9yKDAuNSkgLy8gJ3JnYmEoMTI4LCAxMjgsIDEyOCwgMSknXG4gKiBgYGBcbiAqXG4gKiBUT0RPIFJldmlzdCB0aGlzIGFwcHJvYWNoIG9uY2Ugd2UndmUgbW92ZWQgdG8gZGF0YSBtb2RlbHMgZm9yIHZhbHVlcyxcbiAqIHByb2JhYmx5IG5vdCBuZWVkZWQgdG8gcHJlZ2VuZXJhdGUgbWl4ZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gaW50ZXJwb2xhdGUoaW5wdXQsIG91dHB1dCwgeyBjbGFtcDogaXNDbGFtcCA9IHRydWUsIGVhc2UsIG1peGVyIH0gPSB7fSkge1xuICAgIGNvbnN0IGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuICAgIGludmFyaWFudChpbnB1dExlbmd0aCA9PT0gb3V0cHV0Lmxlbmd0aCwgXCJCb3RoIGlucHV0IGFuZCBvdXRwdXQgcmFuZ2VzIG11c3QgYmUgdGhlIHNhbWUgbGVuZ3RoXCIpO1xuICAgIC8qKlxuICAgICAqIElmIHdlJ3JlIG9ubHkgcHJvdmlkZWQgYSBzaW5nbGUgaW5wdXQsIHdlIGNhbiBqdXN0IG1ha2UgYSBmdW5jdGlvblxuICAgICAqIHRoYXQgcmV0dXJucyB0aGUgb3V0cHV0LlxuICAgICAqL1xuICAgIGlmIChpbnB1dExlbmd0aCA9PT0gMSlcbiAgICAgICAgcmV0dXJuICgpID0+IG91dHB1dFswXTtcbiAgICAvLyBJZiBpbnB1dCBydW5zIGhpZ2hlc3QgLT4gbG93ZXN0LCByZXZlcnNlIGJvdGggYXJyYXlzXG4gICAgaWYgKGlucHV0WzBdID4gaW5wdXRbaW5wdXRMZW5ndGggLSAxXSkge1xuICAgICAgICBpbnB1dCA9IFsuLi5pbnB1dF0ucmV2ZXJzZSgpO1xuICAgICAgICBvdXRwdXQgPSBbLi4ub3V0cHV0XS5yZXZlcnNlKCk7XG4gICAgfVxuICAgIGNvbnN0IG1peGVycyA9IGNyZWF0ZU1peGVycyhvdXRwdXQsIGVhc2UsIG1peGVyKTtcbiAgICBjb25zdCBudW1NaXhlcnMgPSBtaXhlcnMubGVuZ3RoO1xuICAgIGNvbnN0IGludGVycG9sYXRvciA9ICh2KSA9PiB7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgaWYgKG51bU1peGVycyA+IDEpIHtcbiAgICAgICAgICAgIGZvciAoOyBpIDwgaW5wdXQubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHYgPCBpbnB1dFtpICsgMV0pXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByb2dyZXNzSW5SYW5nZSA9IHByb2dyZXNzKGlucHV0W2ldLCBpbnB1dFtpICsgMV0sIHYpO1xuICAgICAgICByZXR1cm4gbWl4ZXJzW2ldKHByb2dyZXNzSW5SYW5nZSk7XG4gICAgfTtcbiAgICByZXR1cm4gaXNDbGFtcFxuICAgICAgICA/ICh2KSA9PiBpbnRlcnBvbGF0b3IoY2xhbXAoaW5wdXRbMF0sIGlucHV0W2lucHV0TGVuZ3RoIC0gMV0sIHYpKVxuICAgICAgICA6IGludGVycG9sYXRvcjtcbn1cblxuZXhwb3J0IHsgaW50ZXJwb2xhdGUgfTtcbiIsImltcG9ydCB7IGVhc2VJbk91dCB9IGZyb20gJy4uLy4uL2Vhc2luZy9lYXNlLm1qcyc7XG5pbXBvcnQgeyBpc0Vhc2luZ0FycmF5IH0gZnJvbSAnLi4vLi4vZWFzaW5nL3V0aWxzL2lzLWVhc2luZy1hcnJheS5tanMnO1xuaW1wb3J0IHsgZWFzaW5nRGVmaW5pdGlvblRvRnVuY3Rpb24gfSBmcm9tICcuLi8uLi9lYXNpbmcvdXRpbHMvbWFwLm1qcyc7XG5pbXBvcnQgeyBpbnRlcnBvbGF0ZSB9IGZyb20gJy4uLy4uL3V0aWxzL2ludGVycG9sYXRlLm1qcyc7XG5pbXBvcnQgeyBkZWZhdWx0T2Zmc2V0IH0gZnJvbSAnLi4vLi4vdXRpbHMvb2Zmc2V0cy9kZWZhdWx0Lm1qcyc7XG5pbXBvcnQgeyBjb252ZXJ0T2Zmc2V0VG9UaW1lcyB9IGZyb20gJy4uLy4uL3V0aWxzL29mZnNldHMvdGltZS5tanMnO1xuXG5mdW5jdGlvbiBkZWZhdWx0RWFzaW5nKHZhbHVlcywgZWFzaW5nKSB7XG4gICAgcmV0dXJuIHZhbHVlcy5tYXAoKCkgPT4gZWFzaW5nIHx8IGVhc2VJbk91dCkuc3BsaWNlKDAsIHZhbHVlcy5sZW5ndGggLSAxKTtcbn1cbmZ1bmN0aW9uIGtleWZyYW1lcyh7IGR1cmF0aW9uID0gMzAwLCBrZXlmcmFtZXM6IGtleWZyYW1lVmFsdWVzLCB0aW1lcywgZWFzZSA9IFwiZWFzZUluT3V0XCIsIH0pIHtcbiAgICAvKipcbiAgICAgKiBFYXNpbmcgZnVuY3Rpb25zIGNhbiBiZSBleHRlcm5hbGx5IGRlZmluZWQgYXMgc3RyaW5ncy4gSGVyZSB3ZSBjb252ZXJ0IHRoZW1cbiAgICAgKiBpbnRvIGFjdHVhbCBmdW5jdGlvbnMuXG4gICAgICovXG4gICAgY29uc3QgZWFzaW5nRnVuY3Rpb25zID0gaXNFYXNpbmdBcnJheShlYXNlKVxuICAgICAgICA/IGVhc2UubWFwKGVhc2luZ0RlZmluaXRpb25Ub0Z1bmN0aW9uKVxuICAgICAgICA6IGVhc2luZ0RlZmluaXRpb25Ub0Z1bmN0aW9uKGVhc2UpO1xuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgdGhlIEl0ZXJhdG9yLXNwZWMgcmV0dXJuIHZhbHVlLiBXZSBlbnN1cmUgaXQncyBtdXRhYmxlIHJhdGhlciB0aGFuIHVzaW5nIGEgZ2VuZXJhdG9yXG4gICAgICogdG8gcmVkdWNlIEdDIGR1cmluZyBhbmltYXRpb24uXG4gICAgICovXG4gICAgY29uc3Qgc3RhdGUgPSB7XG4gICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICB2YWx1ZToga2V5ZnJhbWVWYWx1ZXNbMF0sXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSB0aW1lcyBhcnJheSBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgMC0xIG9mZnNldHNcbiAgICAgKi9cbiAgICBjb25zdCBhYnNvbHV0ZVRpbWVzID0gY29udmVydE9mZnNldFRvVGltZXMoXG4gICAgLy8gT25seSB1c2UgdGhlIHByb3ZpZGVkIG9mZnNldHMgaWYgdGhleSdyZSB0aGUgY29ycmVjdCBsZW5ndGhcbiAgICAvLyBUT0RPIE1heWJlIHdlIHNob3VsZCB3YXJuIGhlcmUgaWYgdGhlcmUncyBhIGxlbmd0aCBtaXNtYXRjaFxuICAgIHRpbWVzICYmIHRpbWVzLmxlbmd0aCA9PT0ga2V5ZnJhbWVWYWx1ZXMubGVuZ3RoXG4gICAgICAgID8gdGltZXNcbiAgICAgICAgOiBkZWZhdWx0T2Zmc2V0KGtleWZyYW1lVmFsdWVzKSwgZHVyYXRpb24pO1xuICAgIGNvbnN0IG1hcFRpbWVUb0tleWZyYW1lID0gaW50ZXJwb2xhdGUoYWJzb2x1dGVUaW1lcywga2V5ZnJhbWVWYWx1ZXMsIHtcbiAgICAgICAgZWFzZTogQXJyYXkuaXNBcnJheShlYXNpbmdGdW5jdGlvbnMpXG4gICAgICAgICAgICA/IGVhc2luZ0Z1bmN0aW9uc1xuICAgICAgICAgICAgOiBkZWZhdWx0RWFzaW5nKGtleWZyYW1lVmFsdWVzLCBlYXNpbmdGdW5jdGlvbnMpLFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGNhbGN1bGF0ZWREdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgIG5leHQ6ICh0KSA9PiB7XG4gICAgICAgICAgICBzdGF0ZS52YWx1ZSA9IG1hcFRpbWVUb0tleWZyYW1lKHQpO1xuICAgICAgICAgICAgc3RhdGUuZG9uZSA9IHQgPj0gZHVyYXRpb247XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cblxuZXhwb3J0IHsgZGVmYXVsdEVhc2luZywga2V5ZnJhbWVzIH07XG4iLCJmdW5jdGlvbiBjb252ZXJ0T2Zmc2V0VG9UaW1lcyhvZmZzZXQsIGR1cmF0aW9uKSB7XG4gICAgcmV0dXJuIG9mZnNldC5tYXAoKG8pID0+IG8gKiBkdXJhdGlvbik7XG59XG5cbmV4cG9ydCB7IGNvbnZlcnRPZmZzZXRUb1RpbWVzIH07XG4iLCJpbXBvcnQgeyBmaWxsT2Zmc2V0IH0gZnJvbSAnLi9maWxsLm1qcyc7XG5cbmZ1bmN0aW9uIGRlZmF1bHRPZmZzZXQoYXJyKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gWzBdO1xuICAgIGZpbGxPZmZzZXQob2Zmc2V0LCBhcnIubGVuZ3RoIC0gMSk7XG4gICAgcmV0dXJuIG9mZnNldDtcbn1cblxuZXhwb3J0IHsgZGVmYXVsdE9mZnNldCB9O1xuIiwiaW1wb3J0IHsgbWl4IH0gZnJvbSAnLi4vbWl4Lm1qcyc7XG5pbXBvcnQgeyBwcm9ncmVzcyB9IGZyb20gJy4uL3Byb2dyZXNzLm1qcyc7XG5cbmZ1bmN0aW9uIGZpbGxPZmZzZXQob2Zmc2V0LCByZW1haW5pbmcpIHtcbiAgICBjb25zdCBtaW4gPSBvZmZzZXRbb2Zmc2V0Lmxlbmd0aCAtIDFdO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHJlbWFpbmluZzsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldFByb2dyZXNzID0gcHJvZ3Jlc3MoMCwgcmVtYWluaW5nLCBpKTtcbiAgICAgICAgb2Zmc2V0LnB1c2gobWl4KG1pbiwgMSwgb2Zmc2V0UHJvZ3Jlc3MpKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IGZpbGxPZmZzZXQgfTtcbiIsIi8qXG4gIENvbnZlcnQgdmVsb2NpdHkgaW50byB2ZWxvY2l0eSBwZXIgc2Vjb25kXG5cbiAgQHBhcmFtIFtudW1iZXJdOiBVbml0IHBlciBmcmFtZVxuICBAcGFyYW0gW251bWJlcl06IEZyYW1lIGR1cmF0aW9uIGluIG1zXG4qL1xuZnVuY3Rpb24gdmVsb2NpdHlQZXJTZWNvbmQodmVsb2NpdHksIGZyYW1lRHVyYXRpb24pIHtcbiAgICByZXR1cm4gZnJhbWVEdXJhdGlvbiA/IHZlbG9jaXR5ICogKDEwMDAgLyBmcmFtZUR1cmF0aW9uKSA6IDA7XG59XG5cbmV4cG9ydCB7IHZlbG9jaXR5UGVyU2Vjb25kIH07XG4iLCJpbXBvcnQgeyB2ZWxvY2l0eVBlclNlY29uZCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3ZlbG9jaXR5LXBlci1zZWNvbmQubWpzJztcblxuY29uc3QgdmVsb2NpdHlTYW1wbGVEdXJhdGlvbiA9IDU7IC8vIG1zXG5mdW5jdGlvbiBjYWxjR2VuZXJhdG9yVmVsb2NpdHkocmVzb2x2ZVZhbHVlLCB0LCBjdXJyZW50KSB7XG4gICAgY29uc3QgcHJldlQgPSBNYXRoLm1heCh0IC0gdmVsb2NpdHlTYW1wbGVEdXJhdGlvbiwgMCk7XG4gICAgcmV0dXJuIHZlbG9jaXR5UGVyU2Vjb25kKGN1cnJlbnQgLSByZXNvbHZlVmFsdWUocHJldlQpLCB0IC0gcHJldlQpO1xufVxuXG5leHBvcnQgeyBjYWxjR2VuZXJhdG9yVmVsb2NpdHkgfTtcbiIsImltcG9ydCB7IHdhcm5pbmcgfSBmcm9tICcuLi8uLi8uLi91dGlscy9lcnJvcnMubWpzJztcbmltcG9ydCB7IGNsYW1wIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvY2xhbXAubWpzJztcbmltcG9ydCB7IHNlY29uZHNUb01pbGxpc2Vjb25kcywgbWlsbGlzZWNvbmRzVG9TZWNvbmRzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdGltZS1jb252ZXJzaW9uLm1qcyc7XG5cbmNvbnN0IHNhZmVNaW4gPSAwLjAwMTtcbmNvbnN0IG1pbkR1cmF0aW9uID0gMC4wMTtcbmNvbnN0IG1heER1cmF0aW9uID0gMTAuMDtcbmNvbnN0IG1pbkRhbXBpbmcgPSAwLjA1O1xuY29uc3QgbWF4RGFtcGluZyA9IDE7XG5mdW5jdGlvbiBmaW5kU3ByaW5nKHsgZHVyYXRpb24gPSA4MDAsIGJvdW5jZSA9IDAuMjUsIHZlbG9jaXR5ID0gMCwgbWFzcyA9IDEsIH0pIHtcbiAgICBsZXQgZW52ZWxvcGU7XG4gICAgbGV0IGRlcml2YXRpdmU7XG4gICAgd2FybmluZyhkdXJhdGlvbiA8PSBzZWNvbmRzVG9NaWxsaXNlY29uZHMobWF4RHVyYXRpb24pLCBcIlNwcmluZyBkdXJhdGlvbiBtdXN0IGJlIDEwIHNlY29uZHMgb3IgbGVzc1wiKTtcbiAgICBsZXQgZGFtcGluZ1JhdGlvID0gMSAtIGJvdW5jZTtcbiAgICAvKipcbiAgICAgKiBSZXN0cmljdCBkYW1waW5nUmF0aW8gYW5kIGR1cmF0aW9uIHRvIHdpdGhpbiBhY2NlcHRhYmxlIHJhbmdlcy5cbiAgICAgKi9cbiAgICBkYW1waW5nUmF0aW8gPSBjbGFtcChtaW5EYW1waW5nLCBtYXhEYW1waW5nLCBkYW1waW5nUmF0aW8pO1xuICAgIGR1cmF0aW9uID0gY2xhbXAobWluRHVyYXRpb24sIG1heER1cmF0aW9uLCBtaWxsaXNlY29uZHNUb1NlY29uZHMoZHVyYXRpb24pKTtcbiAgICBpZiAoZGFtcGluZ1JhdGlvIDwgMSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVW5kZXJkYW1wZWQgc3ByaW5nXG4gICAgICAgICAqL1xuICAgICAgICBlbnZlbG9wZSA9ICh1bmRhbXBlZEZyZXEpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGV4cG9uZW50aWFsRGVjYXkgPSB1bmRhbXBlZEZyZXEgKiBkYW1waW5nUmF0aW87XG4gICAgICAgICAgICBjb25zdCBkZWx0YSA9IGV4cG9uZW50aWFsRGVjYXkgKiBkdXJhdGlvbjtcbiAgICAgICAgICAgIGNvbnN0IGEgPSBleHBvbmVudGlhbERlY2F5IC0gdmVsb2NpdHk7XG4gICAgICAgICAgICBjb25zdCBiID0gY2FsY0FuZ3VsYXJGcmVxKHVuZGFtcGVkRnJlcSwgZGFtcGluZ1JhdGlvKTtcbiAgICAgICAgICAgIGNvbnN0IGMgPSBNYXRoLmV4cCgtZGVsdGEpO1xuICAgICAgICAgICAgcmV0dXJuIHNhZmVNaW4gLSAoYSAvIGIpICogYztcbiAgICAgICAgfTtcbiAgICAgICAgZGVyaXZhdGl2ZSA9ICh1bmRhbXBlZEZyZXEpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGV4cG9uZW50aWFsRGVjYXkgPSB1bmRhbXBlZEZyZXEgKiBkYW1waW5nUmF0aW87XG4gICAgICAgICAgICBjb25zdCBkZWx0YSA9IGV4cG9uZW50aWFsRGVjYXkgKiBkdXJhdGlvbjtcbiAgICAgICAgICAgIGNvbnN0IGQgPSBkZWx0YSAqIHZlbG9jaXR5ICsgdmVsb2NpdHk7XG4gICAgICAgICAgICBjb25zdCBlID0gTWF0aC5wb3coZGFtcGluZ1JhdGlvLCAyKSAqIE1hdGgucG93KHVuZGFtcGVkRnJlcSwgMikgKiBkdXJhdGlvbjtcbiAgICAgICAgICAgIGNvbnN0IGYgPSBNYXRoLmV4cCgtZGVsdGEpO1xuICAgICAgICAgICAgY29uc3QgZyA9IGNhbGNBbmd1bGFyRnJlcShNYXRoLnBvdyh1bmRhbXBlZEZyZXEsIDIpLCBkYW1waW5nUmF0aW8pO1xuICAgICAgICAgICAgY29uc3QgZmFjdG9yID0gLWVudmVsb3BlKHVuZGFtcGVkRnJlcSkgKyBzYWZlTWluID4gMCA/IC0xIDogMTtcbiAgICAgICAgICAgIHJldHVybiAoZmFjdG9yICogKChkIC0gZSkgKiBmKSkgLyBnO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyaXRpY2FsbHktZGFtcGVkIHNwcmluZ1xuICAgICAgICAgKi9cbiAgICAgICAgZW52ZWxvcGUgPSAodW5kYW1wZWRGcmVxKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhID0gTWF0aC5leHAoLXVuZGFtcGVkRnJlcSAqIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IGIgPSAodW5kYW1wZWRGcmVxIC0gdmVsb2NpdHkpICogZHVyYXRpb24gKyAxO1xuICAgICAgICAgICAgcmV0dXJuIC1zYWZlTWluICsgYSAqIGI7XG4gICAgICAgIH07XG4gICAgICAgIGRlcml2YXRpdmUgPSAodW5kYW1wZWRGcmVxKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhID0gTWF0aC5leHAoLXVuZGFtcGVkRnJlcSAqIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IGIgPSAodmVsb2NpdHkgLSB1bmRhbXBlZEZyZXEpICogKGR1cmF0aW9uICogZHVyYXRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIGEgKiBiO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBpbml0aWFsR3Vlc3MgPSA1IC8gZHVyYXRpb247XG4gICAgY29uc3QgdW5kYW1wZWRGcmVxID0gYXBwcm94aW1hdGVSb290KGVudmVsb3BlLCBkZXJpdmF0aXZlLCBpbml0aWFsR3Vlc3MpO1xuICAgIGR1cmF0aW9uID0gc2Vjb25kc1RvTWlsbGlzZWNvbmRzKGR1cmF0aW9uKTtcbiAgICBpZiAoaXNOYU4odW5kYW1wZWRGcmVxKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RpZmZuZXNzOiAxMDAsXG4gICAgICAgICAgICBkYW1waW5nOiAxMCxcbiAgICAgICAgICAgIGR1cmF0aW9uLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3Qgc3RpZmZuZXNzID0gTWF0aC5wb3codW5kYW1wZWRGcmVxLCAyKSAqIG1hc3M7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGlmZm5lc3MsXG4gICAgICAgICAgICBkYW1waW5nOiBkYW1waW5nUmF0aW8gKiAyICogTWF0aC5zcXJ0KG1hc3MgKiBzdGlmZm5lc3MpLFxuICAgICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIH07XG4gICAgfVxufVxuY29uc3Qgcm9vdEl0ZXJhdGlvbnMgPSAxMjtcbmZ1bmN0aW9uIGFwcHJveGltYXRlUm9vdChlbnZlbG9wZSwgZGVyaXZhdGl2ZSwgaW5pdGlhbEd1ZXNzKSB7XG4gICAgbGV0IHJlc3VsdCA9IGluaXRpYWxHdWVzcztcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHJvb3RJdGVyYXRpb25zOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0IC0gZW52ZWxvcGUocmVzdWx0KSAvIGRlcml2YXRpdmUocmVzdWx0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNhbGNBbmd1bGFyRnJlcSh1bmRhbXBlZEZyZXEsIGRhbXBpbmdSYXRpbykge1xuICAgIHJldHVybiB1bmRhbXBlZEZyZXEgKiBNYXRoLnNxcnQoMSAtIGRhbXBpbmdSYXRpbyAqIGRhbXBpbmdSYXRpbyk7XG59XG5cbmV4cG9ydCB7IGNhbGNBbmd1bGFyRnJlcSwgZmluZFNwcmluZywgbWF4RGFtcGluZywgbWF4RHVyYXRpb24sIG1pbkRhbXBpbmcsIG1pbkR1cmF0aW9uIH07XG4iLCJpbXBvcnQgeyBtaWxsaXNlY29uZHNUb1NlY29uZHMgfSBmcm9tICcuLi8uLi8uLi91dGlscy90aW1lLWNvbnZlcnNpb24ubWpzJztcbmltcG9ydCB7IGNhbGNHZW5lcmF0b3JWZWxvY2l0eSB9IGZyb20gJy4uL3V0aWxzL3ZlbG9jaXR5Lm1qcyc7XG5pbXBvcnQgeyBmaW5kU3ByaW5nLCBjYWxjQW5ndWxhckZyZXEgfSBmcm9tICcuL2ZpbmQubWpzJztcblxuY29uc3QgZHVyYXRpb25LZXlzID0gW1wiZHVyYXRpb25cIiwgXCJib3VuY2VcIl07XG5jb25zdCBwaHlzaWNzS2V5cyA9IFtcInN0aWZmbmVzc1wiLCBcImRhbXBpbmdcIiwgXCJtYXNzXCJdO1xuZnVuY3Rpb24gaXNTcHJpbmdUeXBlKG9wdGlvbnMsIGtleXMpIHtcbiAgICByZXR1cm4ga2V5cy5zb21lKChrZXkpID0+IG9wdGlvbnNba2V5XSAhPT0gdW5kZWZpbmVkKTtcbn1cbmZ1bmN0aW9uIGdldFNwcmluZ09wdGlvbnMob3B0aW9ucykge1xuICAgIGxldCBzcHJpbmdPcHRpb25zID0ge1xuICAgICAgICB2ZWxvY2l0eTogMC4wLFxuICAgICAgICBzdGlmZm5lc3M6IDEwMCxcbiAgICAgICAgZGFtcGluZzogMTAsXG4gICAgICAgIG1hc3M6IDEuMCxcbiAgICAgICAgaXNSZXNvbHZlZEZyb21EdXJhdGlvbjogZmFsc2UsXG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgfTtcbiAgICAvLyBzdGlmZm5lc3MvZGFtcGluZy9tYXNzIG92ZXJyaWRlcyBkdXJhdGlvbi9ib3VuY2VcbiAgICBpZiAoIWlzU3ByaW5nVHlwZShvcHRpb25zLCBwaHlzaWNzS2V5cykgJiZcbiAgICAgICAgaXNTcHJpbmdUeXBlKG9wdGlvbnMsIGR1cmF0aW9uS2V5cykpIHtcbiAgICAgICAgY29uc3QgZGVyaXZlZCA9IGZpbmRTcHJpbmcob3B0aW9ucyk7XG4gICAgICAgIHNwcmluZ09wdGlvbnMgPSB7XG4gICAgICAgICAgICAuLi5zcHJpbmdPcHRpb25zLFxuICAgICAgICAgICAgLi4uZGVyaXZlZCxcbiAgICAgICAgICAgIHZlbG9jaXR5OiAwLjAsXG4gICAgICAgICAgICBtYXNzOiAxLjAsXG4gICAgICAgIH07XG4gICAgICAgIHNwcmluZ09wdGlvbnMuaXNSZXNvbHZlZEZyb21EdXJhdGlvbiA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBzcHJpbmdPcHRpb25zO1xufVxuZnVuY3Rpb24gc3ByaW5nKHsga2V5ZnJhbWVzLCByZXN0RGVsdGEsIHJlc3RTcGVlZCwgLi4ub3B0aW9ucyB9KSB7XG4gICAgY29uc3Qgb3JpZ2luID0ga2V5ZnJhbWVzWzBdO1xuICAgIGNvbnN0IHRhcmdldCA9IGtleWZyYW1lc1trZXlmcmFtZXMubGVuZ3RoIC0gMV07XG4gICAgLyoqXG4gICAgICogVGhpcyBpcyB0aGUgSXRlcmF0b3Itc3BlYyByZXR1cm4gdmFsdWUuIFdlIGVuc3VyZSBpdCdzIG11dGFibGUgcmF0aGVyIHRoYW4gdXNpbmcgYSBnZW5lcmF0b3JcbiAgICAgKiB0byByZWR1Y2UgR0MgZHVyaW5nIGFuaW1hdGlvbi5cbiAgICAgKi9cbiAgICBjb25zdCBzdGF0ZSA9IHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvcmlnaW4gfTtcbiAgICBjb25zdCB7IHN0aWZmbmVzcywgZGFtcGluZywgbWFzcywgdmVsb2NpdHksIGR1cmF0aW9uLCBpc1Jlc29sdmVkRnJvbUR1cmF0aW9uLCB9ID0gZ2V0U3ByaW5nT3B0aW9ucyhvcHRpb25zKTtcbiAgICBjb25zdCBpbml0aWFsVmVsb2NpdHkgPSB2ZWxvY2l0eSA/IC1taWxsaXNlY29uZHNUb1NlY29uZHModmVsb2NpdHkpIDogMC4wO1xuICAgIGNvbnN0IGRhbXBpbmdSYXRpbyA9IGRhbXBpbmcgLyAoMiAqIE1hdGguc3FydChzdGlmZm5lc3MgKiBtYXNzKSk7XG4gICAgY29uc3QgaW5pdGlhbERlbHRhID0gdGFyZ2V0IC0gb3JpZ2luO1xuICAgIGNvbnN0IHVuZGFtcGVkQW5ndWxhckZyZXEgPSBtaWxsaXNlY29uZHNUb1NlY29uZHMoTWF0aC5zcXJ0KHN0aWZmbmVzcyAvIG1hc3MpKTtcbiAgICAvKipcbiAgICAgKiBJZiB3ZSdyZSB3b3JraW5nIG9uIGEgZ3JhbnVsYXIgc2NhbGUsIHVzZSBzbWFsbGVyIGRlZmF1bHRzIGZvciBkZXRlcm1pbmluZ1xuICAgICAqIHdoZW4gdGhlIHNwcmluZyBpcyBmaW5pc2hlZC5cbiAgICAgKlxuICAgICAqIFRoZXNlIGRlZmF1bHRzIGhhdmUgYmVlbiBzZWxlY3RlZCBlbXByaWNhbGx5IGJhc2VkIG9uIHdoYXQgc3RyaWtlcyBhIGdvb2RcbiAgICAgKiByYXRpbyBiZXR3ZWVuIGZlZWxpbmcgZ29vZCBhbmQgZmluaXNoaW5nIGFzIHNvb24gYXMgY2hhbmdlcyBhcmUgaW1wZXJjZXB0aWJsZS5cbiAgICAgKi9cbiAgICBjb25zdCBpc0dyYW51bGFyU2NhbGUgPSBNYXRoLmFicyhpbml0aWFsRGVsdGEpIDwgNTtcbiAgICByZXN0U3BlZWQgfHwgKHJlc3RTcGVlZCA9IGlzR3JhbnVsYXJTY2FsZSA/IDAuMDEgOiAyKTtcbiAgICByZXN0RGVsdGEgfHwgKHJlc3REZWx0YSA9IGlzR3JhbnVsYXJTY2FsZSA/IDAuMDA1IDogMC41KTtcbiAgICBsZXQgcmVzb2x2ZVNwcmluZztcbiAgICBpZiAoZGFtcGluZ1JhdGlvIDwgMSkge1xuICAgICAgICBjb25zdCBhbmd1bGFyRnJlcSA9IGNhbGNBbmd1bGFyRnJlcSh1bmRhbXBlZEFuZ3VsYXJGcmVxLCBkYW1waW5nUmF0aW8pO1xuICAgICAgICAvLyBVbmRlcmRhbXBlZCBzcHJpbmdcbiAgICAgICAgcmVzb2x2ZVNwcmluZyA9ICh0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbnZlbG9wZSA9IE1hdGguZXhwKC1kYW1waW5nUmF0aW8gKiB1bmRhbXBlZEFuZ3VsYXJGcmVxICogdCk7XG4gICAgICAgICAgICByZXR1cm4gKHRhcmdldCAtXG4gICAgICAgICAgICAgICAgZW52ZWxvcGUgKlxuICAgICAgICAgICAgICAgICAgICAoKChpbml0aWFsVmVsb2NpdHkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgZGFtcGluZ1JhdGlvICogdW5kYW1wZWRBbmd1bGFyRnJlcSAqIGluaXRpYWxEZWx0YSkgL1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhckZyZXEpICpcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguc2luKGFuZ3VsYXJGcmVxICogdCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbERlbHRhICogTWF0aC5jb3MoYW5ndWxhckZyZXEgKiB0KSkpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChkYW1waW5nUmF0aW8gPT09IDEpIHtcbiAgICAgICAgLy8gQ3JpdGljYWxseSBkYW1wZWQgc3ByaW5nXG4gICAgICAgIHJlc29sdmVTcHJpbmcgPSAodCkgPT4gdGFyZ2V0IC1cbiAgICAgICAgICAgIE1hdGguZXhwKC11bmRhbXBlZEFuZ3VsYXJGcmVxICogdCkgKlxuICAgICAgICAgICAgICAgIChpbml0aWFsRGVsdGEgK1xuICAgICAgICAgICAgICAgICAgICAoaW5pdGlhbFZlbG9jaXR5ICsgdW5kYW1wZWRBbmd1bGFyRnJlcSAqIGluaXRpYWxEZWx0YSkgKiB0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIE92ZXJkYW1wZWQgc3ByaW5nXG4gICAgICAgIGNvbnN0IGRhbXBlZEFuZ3VsYXJGcmVxID0gdW5kYW1wZWRBbmd1bGFyRnJlcSAqIE1hdGguc3FydChkYW1waW5nUmF0aW8gKiBkYW1waW5nUmF0aW8gLSAxKTtcbiAgICAgICAgcmVzb2x2ZVNwcmluZyA9ICh0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbnZlbG9wZSA9IE1hdGguZXhwKC1kYW1waW5nUmF0aW8gKiB1bmRhbXBlZEFuZ3VsYXJGcmVxICogdCk7XG4gICAgICAgICAgICAvLyBXaGVuIHBlcmZvcm1pbmcgc2luaCBvciBjb3NoIHZhbHVlcyBjYW4gaGl0IEluZmluaXR5IHNvIHdlIGNhcCB0aGVtIGhlcmVcbiAgICAgICAgICAgIGNvbnN0IGZyZXFGb3JUID0gTWF0aC5taW4oZGFtcGVkQW5ndWxhckZyZXEgKiB0LCAzMDApO1xuICAgICAgICAgICAgcmV0dXJuICh0YXJnZXQgLVxuICAgICAgICAgICAgICAgIChlbnZlbG9wZSAqXG4gICAgICAgICAgICAgICAgICAgICgoaW5pdGlhbFZlbG9jaXR5ICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhbXBpbmdSYXRpbyAqIHVuZGFtcGVkQW5ndWxhckZyZXEgKiBpbml0aWFsRGVsdGEpICpcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguc2luaChmcmVxRm9yVCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgZGFtcGVkQW5ndWxhckZyZXEgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxEZWx0YSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5jb3NoKGZyZXFGb3JUKSkpIC9cbiAgICAgICAgICAgICAgICAgICAgZGFtcGVkQW5ndWxhckZyZXEpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBjYWxjdWxhdGVkRHVyYXRpb246IGlzUmVzb2x2ZWRGcm9tRHVyYXRpb24gPyBkdXJhdGlvbiB8fCBudWxsIDogbnVsbCxcbiAgICAgICAgbmV4dDogKHQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSByZXNvbHZlU3ByaW5nKHQpO1xuICAgICAgICAgICAgaWYgKCFpc1Jlc29sdmVkRnJvbUR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRWZWxvY2l0eSA9IGluaXRpYWxWZWxvY2l0eTtcbiAgICAgICAgICAgICAgICBpZiAodCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogV2Ugb25seSBuZWVkIHRvIGNhbGN1bGF0ZSB2ZWxvY2l0eSBmb3IgdW5kZXItZGFtcGVkIHNwcmluZ3NcbiAgICAgICAgICAgICAgICAgICAgICogYXMgb3Zlci0gYW5kIGNyaXRpY2FsbHktZGFtcGVkIHNwcmluZ3MgY2FuJ3Qgb3ZlcnNob290LCBzb1xuICAgICAgICAgICAgICAgICAgICAgKiBjaGVja2luZyBvbmx5IGZvciBkaXNwbGFjZW1lbnQgaXMgZW5vdWdoLlxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhbXBpbmdSYXRpbyA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWZWxvY2l0eSA9IGNhbGNHZW5lcmF0b3JWZWxvY2l0eShyZXNvbHZlU3ByaW5nLCB0LCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWZWxvY2l0eSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgaXNCZWxvd1ZlbG9jaXR5VGhyZXNob2xkID0gTWF0aC5hYnMoY3VycmVudFZlbG9jaXR5KSA8PSByZXN0U3BlZWQ7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNCZWxvd0Rpc3BsYWNlbWVudFRocmVzaG9sZCA9IE1hdGguYWJzKHRhcmdldCAtIGN1cnJlbnQpIDw9IHJlc3REZWx0YTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5kb25lID1cbiAgICAgICAgICAgICAgICAgICAgaXNCZWxvd1ZlbG9jaXR5VGhyZXNob2xkICYmIGlzQmVsb3dEaXNwbGFjZW1lbnRUaHJlc2hvbGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5kb25lID0gdCA+PSBkdXJhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXRlLnZhbHVlID0gc3RhdGUuZG9uZSA/IHRhcmdldCA6IGN1cnJlbnQ7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cblxuZXhwb3J0IHsgc3ByaW5nIH07XG4iLCJpbXBvcnQgeyBzcHJpbmcgfSBmcm9tICcuL3NwcmluZy9pbmRleC5tanMnO1xuaW1wb3J0IHsgY2FsY0dlbmVyYXRvclZlbG9jaXR5IH0gZnJvbSAnLi91dGlscy92ZWxvY2l0eS5tanMnO1xuXG5mdW5jdGlvbiBpbmVydGlhKHsga2V5ZnJhbWVzLCB2ZWxvY2l0eSA9IDAuMCwgcG93ZXIgPSAwLjgsIHRpbWVDb25zdGFudCA9IDMyNSwgYm91bmNlRGFtcGluZyA9IDEwLCBib3VuY2VTdGlmZm5lc3MgPSA1MDAsIG1vZGlmeVRhcmdldCwgbWluLCBtYXgsIHJlc3REZWx0YSA9IDAuNSwgcmVzdFNwZWVkLCB9KSB7XG4gICAgY29uc3Qgb3JpZ2luID0ga2V5ZnJhbWVzWzBdO1xuICAgIGNvbnN0IHN0YXRlID0ge1xuICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IG9yaWdpbixcbiAgICB9O1xuICAgIGNvbnN0IGlzT3V0T2ZCb3VuZHMgPSAodikgPT4gKG1pbiAhPT0gdW5kZWZpbmVkICYmIHYgPCBtaW4pIHx8IChtYXggIT09IHVuZGVmaW5lZCAmJiB2ID4gbWF4KTtcbiAgICBjb25zdCBuZWFyZXN0Qm91bmRhcnkgPSAodikgPT4ge1xuICAgICAgICBpZiAobWluID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gbWF4O1xuICAgICAgICBpZiAobWF4ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gbWluO1xuICAgICAgICByZXR1cm4gTWF0aC5hYnMobWluIC0gdikgPCBNYXRoLmFicyhtYXggLSB2KSA/IG1pbiA6IG1heDtcbiAgICB9O1xuICAgIGxldCBhbXBsaXR1ZGUgPSBwb3dlciAqIHZlbG9jaXR5O1xuICAgIGNvbnN0IGlkZWFsID0gb3JpZ2luICsgYW1wbGl0dWRlO1xuICAgIGNvbnN0IHRhcmdldCA9IG1vZGlmeVRhcmdldCA9PT0gdW5kZWZpbmVkID8gaWRlYWwgOiBtb2RpZnlUYXJnZXQoaWRlYWwpO1xuICAgIC8qKlxuICAgICAqIElmIHRoZSB0YXJnZXQgaGFzIGNoYW5nZWQgd2UgbmVlZCB0byByZS1jYWxjdWxhdGUgdGhlIGFtcGxpdHVkZSwgb3RoZXJ3aXNlXG4gICAgICogdGhlIGFuaW1hdGlvbiB3aWxsIHN0YXJ0IGZyb20gdGhlIHdyb25nIHBvc2l0aW9uLlxuICAgICAqL1xuICAgIGlmICh0YXJnZXQgIT09IGlkZWFsKVxuICAgICAgICBhbXBsaXR1ZGUgPSB0YXJnZXQgLSBvcmlnaW47XG4gICAgY29uc3QgY2FsY0RlbHRhID0gKHQpID0+IC1hbXBsaXR1ZGUgKiBNYXRoLmV4cCgtdCAvIHRpbWVDb25zdGFudCk7XG4gICAgY29uc3QgY2FsY0xhdGVzdCA9ICh0KSA9PiB0YXJnZXQgKyBjYWxjRGVsdGEodCk7XG4gICAgY29uc3QgYXBwbHlGcmljdGlvbiA9ICh0KSA9PiB7XG4gICAgICAgIGNvbnN0IGRlbHRhID0gY2FsY0RlbHRhKHQpO1xuICAgICAgICBjb25zdCBsYXRlc3QgPSBjYWxjTGF0ZXN0KHQpO1xuICAgICAgICBzdGF0ZS5kb25lID0gTWF0aC5hYnMoZGVsdGEpIDw9IHJlc3REZWx0YTtcbiAgICAgICAgc3RhdGUudmFsdWUgPSBzdGF0ZS5kb25lID8gdGFyZ2V0IDogbGF0ZXN0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSWRlYWxseSB0aGlzIHdvdWxkIHJlc29sdmUgZm9yIHQgaW4gYSBzdGF0ZWxlc3Mgd2F5LCB3ZSBjb3VsZFxuICAgICAqIGRvIHRoYXQgYnkgYWx3YXlzIHByZWNhbGN1bGF0aW5nIHRoZSBhbmltYXRpb24gYnV0IGFzIHdlIGtub3dcbiAgICAgKiB0aGlzIHdpbGwgYmUgZG9uZSBhbnl3YXkgd2UgY2FuIGFzc3VtZSB0aGF0IHNwcmluZyB3aWxsXG4gICAgICogYmUgZGlzY292ZXJlZCBkdXJpbmcgdGhhdC5cbiAgICAgKi9cbiAgICBsZXQgdGltZVJlYWNoZWRCb3VuZGFyeTtcbiAgICBsZXQgc3ByaW5nJDE7XG4gICAgY29uc3QgY2hlY2tDYXRjaEJvdW5kYXJ5ID0gKHQpID0+IHtcbiAgICAgICAgaWYgKCFpc091dE9mQm91bmRzKHN0YXRlLnZhbHVlKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGltZVJlYWNoZWRCb3VuZGFyeSA9IHQ7XG4gICAgICAgIHNwcmluZyQxID0gc3ByaW5nKHtcbiAgICAgICAgICAgIGtleWZyYW1lczogW3N0YXRlLnZhbHVlLCBuZWFyZXN0Qm91bmRhcnkoc3RhdGUudmFsdWUpXSxcbiAgICAgICAgICAgIHZlbG9jaXR5OiBjYWxjR2VuZXJhdG9yVmVsb2NpdHkoY2FsY0xhdGVzdCwgdCwgc3RhdGUudmFsdWUpLFxuICAgICAgICAgICAgZGFtcGluZzogYm91bmNlRGFtcGluZyxcbiAgICAgICAgICAgIHN0aWZmbmVzczogYm91bmNlU3RpZmZuZXNzLFxuICAgICAgICAgICAgcmVzdERlbHRhLFxuICAgICAgICAgICAgcmVzdFNwZWVkLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNoZWNrQ2F0Y2hCb3VuZGFyeSgwKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBjYWxjdWxhdGVkRHVyYXRpb246IG51bGwsXG4gICAgICAgIG5leHQ6ICh0KSA9PiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdlIG5lZWQgdG8gcmVzb2x2ZSB0aGUgZnJpY3Rpb24gdG8gZmlndXJlIG91dCBpZiB3ZSBuZWVkIGFcbiAgICAgICAgICAgICAqIHNwcmluZyBidXQgd2UgZG9uJ3Qgd2FudCB0byBkbyB0aGlzIHR3aWNlIHBlciBmcmFtZS4gU28gaGVyZVxuICAgICAgICAgICAgICogd2UgZmxhZyBpZiB3ZSB1cGRhdGVkIGZvciB0aGlzIGZyYW1lIGFuZCBsYXRlciBpZiB3ZSBkaWRcbiAgICAgICAgICAgICAqIHdlIGNhbiBza2lwIGRvaW5nIGl0IGFnYWluLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBsZXQgaGFzVXBkYXRlZEZyYW1lID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNwcmluZyQxICYmIHRpbWVSZWFjaGVkQm91bmRhcnkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGhhc1VwZGF0ZWRGcmFtZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYXBwbHlGcmljdGlvbih0KTtcbiAgICAgICAgICAgICAgICBjaGVja0NhdGNoQm91bmRhcnkodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlIGhhdmUgYSBzcHJpbmcgYW5kIHRoZSBwcm92aWRlZCB0IGlzIGJleW9uZCB0aGUgbW9tZW50IHRoZSBmcmljdGlvblxuICAgICAgICAgICAgICogYW5pbWF0aW9uIGNyb3NzZWQgdGhlIG1pbi9tYXggYm91bmRhcnksIHVzZSB0aGUgc3ByaW5nLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAodGltZVJlYWNoZWRCb3VuZGFyeSAhPT0gdW5kZWZpbmVkICYmIHQgPiB0aW1lUmVhY2hlZEJvdW5kYXJ5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNwcmluZyQxLm5leHQodCAtIHRpbWVSZWFjaGVkQm91bmRhcnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgIWhhc1VwZGF0ZWRGcmFtZSAmJiBhcHBseUZyaWN0aW9uKHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9O1xufVxuXG5leHBvcnQgeyBpbmVydGlhIH07XG4iLCJpbXBvcnQgeyBmcmFtZSwgY2FuY2VsRnJhbWUsIGZyYW1lRGF0YSB9IGZyb20gJy4uLy4uLy4uL2ZyYW1lbG9vcC9mcmFtZS5tanMnO1xuXG5jb25zdCBmcmFtZWxvb3BEcml2ZXIgPSAodXBkYXRlKSA9PiB7XG4gICAgY29uc3QgcGFzc1RpbWVzdGFtcCA9ICh7IHRpbWVzdGFtcCB9KSA9PiB1cGRhdGUodGltZXN0YW1wKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydDogKCkgPT4gZnJhbWUudXBkYXRlKHBhc3NUaW1lc3RhbXAsIHRydWUpLFxuICAgICAgICBzdG9wOiAoKSA9PiBjYW5jZWxGcmFtZShwYXNzVGltZXN0YW1wKSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHdlJ3JlIHByb2Nlc3NpbmcgdGhpcyBmcmFtZSB3ZSBjYW4gdXNlIHRoZVxuICAgICAgICAgKiBmcmFtZWxvY2tlZCB0aW1lc3RhbXAgdG8ga2VlcCB0aGluZ3MgaW4gc3luYy5cbiAgICAgICAgICovXG4gICAgICAgIG5vdzogKCkgPT4gZnJhbWVEYXRhLmlzUHJvY2Vzc2luZyA/IGZyYW1lRGF0YS50aW1lc3RhbXAgOiBwZXJmb3JtYW5jZS5ub3coKSxcbiAgICB9O1xufTtcblxuZXhwb3J0IHsgZnJhbWVsb29wRHJpdmVyIH07XG4iLCIvKipcbiAqIEltcGxlbWVudCBhIHByYWN0aWNhbCBtYXggZHVyYXRpb24gZm9yIGtleWZyYW1lIGdlbmVyYXRpb25cbiAqIHRvIHByZXZlbnQgaW5maW5pdGUgbG9vcHNcbiAqL1xuY29uc3QgbWF4R2VuZXJhdG9yRHVyYXRpb24gPSAyMDAwMDtcbmZ1bmN0aW9uIGNhbGNHZW5lcmF0b3JEdXJhdGlvbihnZW5lcmF0b3IpIHtcbiAgICBsZXQgZHVyYXRpb24gPSAwO1xuICAgIGNvbnN0IHRpbWVTdGVwID0gNTA7XG4gICAgbGV0IHN0YXRlID0gZ2VuZXJhdG9yLm5leHQoZHVyYXRpb24pO1xuICAgIHdoaWxlICghc3RhdGUuZG9uZSAmJiBkdXJhdGlvbiA8IG1heEdlbmVyYXRvckR1cmF0aW9uKSB7XG4gICAgICAgIGR1cmF0aW9uICs9IHRpbWVTdGVwO1xuICAgICAgICBzdGF0ZSA9IGdlbmVyYXRvci5uZXh0KGR1cmF0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIGR1cmF0aW9uID49IG1heEdlbmVyYXRvckR1cmF0aW9uID8gSW5maW5pdHkgOiBkdXJhdGlvbjtcbn1cblxuZXhwb3J0IHsgY2FsY0dlbmVyYXRvckR1cmF0aW9uLCBtYXhHZW5lcmF0b3JEdXJhdGlvbiB9O1xuIiwiaW1wb3J0IHsga2V5ZnJhbWVzIH0gZnJvbSAnLi4vLi4vZ2VuZXJhdG9ycy9rZXlmcmFtZXMubWpzJztcbmltcG9ydCB7IHNwcmluZyB9IGZyb20gJy4uLy4uL2dlbmVyYXRvcnMvc3ByaW5nL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBpbmVydGlhIH0gZnJvbSAnLi4vLi4vZ2VuZXJhdG9ycy9pbmVydGlhLm1qcyc7XG5pbXBvcnQgeyBmcmFtZWxvb3BEcml2ZXIgfSBmcm9tICcuL2RyaXZlci1mcmFtZWxvb3AubWpzJztcbmltcG9ydCB7IGludGVycG9sYXRlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvaW50ZXJwb2xhdGUubWpzJztcbmltcG9ydCB7IGNsYW1wIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvY2xhbXAubWpzJztcbmltcG9ydCB7IG1pbGxpc2Vjb25kc1RvU2Vjb25kcywgc2Vjb25kc1RvTWlsbGlzZWNvbmRzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdGltZS1jb252ZXJzaW9uLm1qcyc7XG5pbXBvcnQgeyBjYWxjR2VuZXJhdG9yRHVyYXRpb24gfSBmcm9tICcuLi8uLi9nZW5lcmF0b3JzL3V0aWxzL2NhbGMtZHVyYXRpb24ubWpzJztcblxuY29uc3QgdHlwZXMgPSB7XG4gICAgZGVjYXk6IGluZXJ0aWEsXG4gICAgaW5lcnRpYSxcbiAgICB0d2Vlbjoga2V5ZnJhbWVzLFxuICAgIGtleWZyYW1lczoga2V5ZnJhbWVzLFxuICAgIHNwcmluZyxcbn07XG4vKipcbiAqIEFuaW1hdGUgYSBzaW5nbGUgdmFsdWUgb24gdGhlIG1haW4gdGhyZWFkLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgd3JpdHRlbiwgd2hlcmUgZnVuY3Rpb25hbGl0eSBvdmVybGFwcyxcbiAqIHRvIGJlIGxhcmdlbHkgc3BlYy1jb21wbGlhbnQgd2l0aCBXQUFQSSB0byBhbGxvdyBmdW5naWJpbGl0eVxuICogYmV0d2VlbiB0aGUgdHdvLlxuICovXG5mdW5jdGlvbiBhbmltYXRlVmFsdWUoeyBhdXRvcGxheSA9IHRydWUsIGRlbGF5ID0gMCwgZHJpdmVyID0gZnJhbWVsb29wRHJpdmVyLCBrZXlmcmFtZXM6IGtleWZyYW1lcyQxLCB0eXBlID0gXCJrZXlmcmFtZXNcIiwgcmVwZWF0ID0gMCwgcmVwZWF0RGVsYXkgPSAwLCByZXBlYXRUeXBlID0gXCJsb29wXCIsIG9uUGxheSwgb25TdG9wLCBvbkNvbXBsZXRlLCBvblVwZGF0ZSwgLi4ub3B0aW9ucyB9KSB7XG4gICAgbGV0IHNwZWVkID0gMTtcbiAgICBsZXQgaGFzU3RvcHBlZCA9IGZhbHNlO1xuICAgIGxldCByZXNvbHZlRmluaXNoZWRQcm9taXNlO1xuICAgIGxldCBjdXJyZW50RmluaXNoZWRQcm9taXNlO1xuICAgIC8qKlxuICAgICAqIFJlc29sdmUgdGhlIGN1cnJlbnQgUHJvbWlzZSBldmVyeSB0aW1lIHdlIGVudGVyIHRoZVxuICAgICAqIGZpbmlzaGVkIHN0YXRlLiBUaGlzIGlzIFdBQVBJLWNvbXBhdGlibGUgYmVoYXZpb3VyLlxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZUZpbmlzaGVkUHJvbWlzZSA9ICgpID0+IHtcbiAgICAgICAgY3VycmVudEZpbmlzaGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlRmluaXNoZWRQcm9taXNlID0gcmVzb2x2ZTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyBDcmVhdGUgdGhlIGZpcnN0IGZpbmlzaGVkIHByb21pc2VcbiAgICB1cGRhdGVGaW5pc2hlZFByb21pc2UoKTtcbiAgICBsZXQgYW5pbWF0aW9uRHJpdmVyO1xuICAgIGNvbnN0IGdlbmVyYXRvckZhY3RvcnkgPSB0eXBlc1t0eXBlXSB8fCBrZXlmcmFtZXM7XG4gICAgLyoqXG4gICAgICogSWYgdGhpcyBpc24ndCB0aGUga2V5ZnJhbWVzIGdlbmVyYXRvciBhbmQgd2UndmUgYmVlbiBwcm92aWRlZFxuICAgICAqIHN0cmluZ3MgYXMga2V5ZnJhbWVzLCB3ZSBuZWVkIHRvIGludGVycG9sYXRlIHRoZXNlLlxuICAgICAqIFRPRE86IFN1cHBvcnQgdmVsb2NpdHkgZm9yIHVuaXRzIGFuZCBjb21wbGV4IHZhbHVlIHR5cGVzL1xuICAgICAqL1xuICAgIGxldCBtYXBOdW1iZXJzVG9LZXlmcmFtZXM7XG4gICAgaWYgKGdlbmVyYXRvckZhY3RvcnkgIT09IGtleWZyYW1lcyAmJlxuICAgICAgICB0eXBlb2Yga2V5ZnJhbWVzJDFbMF0gIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgbWFwTnVtYmVyc1RvS2V5ZnJhbWVzID0gaW50ZXJwb2xhdGUoWzAsIDEwMF0sIGtleWZyYW1lcyQxLCB7XG4gICAgICAgICAgICBjbGFtcDogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgICAgICBrZXlmcmFtZXMkMSA9IFswLCAxMDBdO1xuICAgIH1cbiAgICBjb25zdCBnZW5lcmF0b3IgPSBnZW5lcmF0b3JGYWN0b3J5KHsgLi4ub3B0aW9ucywga2V5ZnJhbWVzOiBrZXlmcmFtZXMkMSB9KTtcbiAgICBsZXQgbWlycm9yZWRHZW5lcmF0b3I7XG4gICAgaWYgKHJlcGVhdFR5cGUgPT09IFwibWlycm9yXCIpIHtcbiAgICAgICAgbWlycm9yZWRHZW5lcmF0b3IgPSBnZW5lcmF0b3JGYWN0b3J5KHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBrZXlmcmFtZXM6IFsuLi5rZXlmcmFtZXMkMV0ucmV2ZXJzZSgpLFxuICAgICAgICAgICAgdmVsb2NpdHk6IC0ob3B0aW9ucy52ZWxvY2l0eSB8fCAwKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBwbGF5U3RhdGUgPSBcImlkbGVcIjtcbiAgICBsZXQgaG9sZFRpbWUgPSBudWxsO1xuICAgIGxldCBzdGFydFRpbWUgPSBudWxsO1xuICAgIGxldCBjYW5jZWxUaW1lID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBJZiBkdXJhdGlvbiBpcyB1bmRlZmluZWQgYW5kIHdlIGhhdmUgcmVwZWF0IG9wdGlvbnMsXG4gICAgICogd2UgbmVlZCB0byBjYWxjdWxhdGUgYSBkdXJhdGlvbiBmcm9tIHRoZSBnZW5lcmF0b3IuXG4gICAgICpcbiAgICAgKiBXZSBzZXQgaXQgdG8gdGhlIGdlbmVyYXRvciBpdHNlbGYgdG8gY2FjaGUgdGhlIGR1cmF0aW9uLlxuICAgICAqIEFueSB0aW1lbGluZSByZXNvbHZlciB3aWxsIG5lZWQgdG8gaGF2ZSBhbHJlYWR5IHByZWNhbGN1bGF0ZWRcbiAgICAgKiB0aGUgZHVyYXRpb24gYnkgdGhpcyBzdGVwLlxuICAgICAqL1xuICAgIGlmIChnZW5lcmF0b3IuY2FsY3VsYXRlZER1cmF0aW9uID09PSBudWxsICYmIHJlcGVhdCkge1xuICAgICAgICBnZW5lcmF0b3IuY2FsY3VsYXRlZER1cmF0aW9uID0gY2FsY0dlbmVyYXRvckR1cmF0aW9uKGdlbmVyYXRvcik7XG4gICAgfVxuICAgIGNvbnN0IHsgY2FsY3VsYXRlZER1cmF0aW9uIH0gPSBnZW5lcmF0b3I7XG4gICAgbGV0IHJlc29sdmVkRHVyYXRpb24gPSBJbmZpbml0eTtcbiAgICBsZXQgdG90YWxEdXJhdGlvbiA9IEluZmluaXR5O1xuICAgIGlmIChjYWxjdWxhdGVkRHVyYXRpb24gIT09IG51bGwpIHtcbiAgICAgICAgcmVzb2x2ZWREdXJhdGlvbiA9IGNhbGN1bGF0ZWREdXJhdGlvbiArIHJlcGVhdERlbGF5O1xuICAgICAgICB0b3RhbER1cmF0aW9uID0gcmVzb2x2ZWREdXJhdGlvbiAqIChyZXBlYXQgKyAxKSAtIHJlcGVhdERlbGF5O1xuICAgIH1cbiAgICBsZXQgY3VycmVudFRpbWUgPSAwO1xuICAgIGNvbnN0IHRpY2sgPSAodGltZXN0YW1wKSA9PiB7XG4gICAgICAgIGlmIChzdGFydFRpbWUgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgdGltZXN0YW1wcyBjYW4gY29tZSB0aHJvdWdoIGFzIGxvd2VyIHRoYW5cbiAgICAgICAgICogdGhlIHN0YXJ0VGltZSBhcyBzZXQgYnkgcGVyZm9ybWFuY2Uubm93KCkuIEhlcmUgd2UgcHJldmVudCB0aGlzLFxuICAgICAgICAgKiB0aG91Z2ggaW4gdGhlIGZ1dHVyZSBpdCBjb3VsZCBiZSBwb3NzaWJsZSB0byBtYWtlIHNldHRpbmcgc3RhcnRUaW1lXG4gICAgICAgICAqIGEgcGVuZGluZyBvcGVyYXRpb24gdGhhdCBnZXRzIHJlc29sdmVkIGhlcmUuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoc3BlZWQgPiAwKVxuICAgICAgICAgICAgc3RhcnRUaW1lID0gTWF0aC5taW4oc3RhcnRUaW1lLCB0aW1lc3RhbXApO1xuICAgICAgICBpZiAoc3BlZWQgPCAwKVxuICAgICAgICAgICAgc3RhcnRUaW1lID0gTWF0aC5taW4odGltZXN0YW1wIC0gdG90YWxEdXJhdGlvbiAvIHNwZWVkLCBzdGFydFRpbWUpO1xuICAgICAgICBpZiAoaG9sZFRpbWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lID0gaG9sZFRpbWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBSb3VuZGluZyB0aGUgdGltZSBiZWNhdXNlIGZsb2F0aW5nIHBvaW50IGFyaXRobWV0aWMgaXMgbm90IGFsd2F5cyBhY2N1cmF0ZSwgZS5nLiAzMDAwLjM2NyAtIDEwMDAuMzY3ID1cbiAgICAgICAgICAgIC8vIDIwMDAuMDAwMDAwMDAwMDAwMi4gVGhpcyBpcyBhIHByb2JsZW0gd2hlbiB3ZSBhcmUgY29tcGFyaW5nIHRoZSBjdXJyZW50VGltZSB3aXRoIHRoZSBkdXJhdGlvbiwgZm9yXG4gICAgICAgICAgICAvLyBleGFtcGxlLlxuICAgICAgICAgICAgY3VycmVudFRpbWUgPSBNYXRoLnJvdW5kKHRpbWVzdGFtcCAtIHN0YXJ0VGltZSkgKiBzcGVlZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWJhc2Ugb24gZGVsYXlcbiAgICAgICAgY29uc3QgdGltZVdpdGhvdXREZWxheSA9IGN1cnJlbnRUaW1lIC0gZGVsYXkgKiAoc3BlZWQgPj0gMCA/IDEgOiAtMSk7XG4gICAgICAgIGNvbnN0IGlzSW5EZWxheVBoYXNlID0gc3BlZWQgPj0gMCA/IHRpbWVXaXRob3V0RGVsYXkgPCAwIDogdGltZVdpdGhvdXREZWxheSA+IHRvdGFsRHVyYXRpb247XG4gICAgICAgIGN1cnJlbnRUaW1lID0gTWF0aC5tYXgodGltZVdpdGhvdXREZWxheSwgMCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGlzIGFuaW1hdGlvbiBoYXMgZmluaXNoZWQsIHNldCB0aGUgY3VycmVudCB0aW1lXG4gICAgICAgICAqIHRvIHRoZSB0b3RhbCBkdXJhdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChwbGF5U3RhdGUgPT09IFwiZmluaXNoZWRcIiAmJiBob2xkVGltZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY3VycmVudFRpbWUgPSB0b3RhbER1cmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGxldCBlbGFwc2VkID0gY3VycmVudFRpbWU7XG4gICAgICAgIGxldCBmcmFtZUdlbmVyYXRvciA9IGdlbmVyYXRvcjtcbiAgICAgICAgaWYgKHJlcGVhdCkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBHZXQgdGhlIGN1cnJlbnQgcHJvZ3Jlc3MgKDAtMSkgb2YgdGhlIGFuaW1hdGlvbi4gSWYgdCBpcyA+XG4gICAgICAgICAgICAgKiB0aGFuIGR1cmF0aW9uIHdlJ2xsIGdldCB2YWx1ZXMgbGlrZSAyLjUgKG1pZHdheSB0aHJvdWdoIHRoZVxuICAgICAgICAgICAgICogdGhpcmQgaXRlcmF0aW9uKVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCBwcm9ncmVzcyA9IGN1cnJlbnRUaW1lIC8gcmVzb2x2ZWREdXJhdGlvbjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2V0IHRoZSBjdXJyZW50IGl0ZXJhdGlvbiAoMCBpbmRleGVkKS4gRm9yIGluc3RhbmNlIHRoZSBmbG9vciBvZlxuICAgICAgICAgICAgICogMi41IGlzIDIuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGxldCBjdXJyZW50SXRlcmF0aW9uID0gTWF0aC5mbG9vcihwcm9ncmVzcyk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdldCB0aGUgY3VycmVudCBwcm9ncmVzcyBvZiB0aGUgaXRlcmF0aW9uIGJ5IHRha2luZyB0aGUgcmVtYWluZGVyXG4gICAgICAgICAgICAgKiBzbyAyLjUgaXMgMC41IHRocm91Z2ggaXRlcmF0aW9uIDJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbGV0IGl0ZXJhdGlvblByb2dyZXNzID0gcHJvZ3Jlc3MgJSAxLjA7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIGl0ZXJhdGlvbiBwcm9ncmVzcyBpcyAxIHdlIGNvdW50IHRoYXQgYXMgdGhlIGVuZFxuICAgICAgICAgICAgICogb2YgdGhlIHByZXZpb3VzIGl0ZXJhdGlvbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKCFpdGVyYXRpb25Qcm9ncmVzcyAmJiBwcm9ncmVzcyA+PSAxKSB7XG4gICAgICAgICAgICAgICAgaXRlcmF0aW9uUHJvZ3Jlc3MgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXRlcmF0aW9uUHJvZ3Jlc3MgPT09IDEgJiYgY3VycmVudEl0ZXJhdGlvbi0tO1xuICAgICAgICAgICAgY3VycmVudEl0ZXJhdGlvbiA9IE1hdGgubWluKGN1cnJlbnRJdGVyYXRpb24sIHJlcGVhdCArIDEpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXZlcnNlIHByb2dyZXNzIGlmIHdlJ3JlIG5vdCBydW5uaW5nIGluIFwibm9ybWFsXCIgZGlyZWN0aW9uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IGl0ZXJhdGlvbklzT2RkID0gQm9vbGVhbihjdXJyZW50SXRlcmF0aW9uICUgMik7XG4gICAgICAgICAgICBpZiAoaXRlcmF0aW9uSXNPZGQpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVwZWF0VHlwZSA9PT0gXCJyZXZlcnNlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlcmF0aW9uUHJvZ3Jlc3MgPSAxIC0gaXRlcmF0aW9uUHJvZ3Jlc3M7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXBlYXREZWxheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlcmF0aW9uUHJvZ3Jlc3MgLT0gcmVwZWF0RGVsYXkgLyByZXNvbHZlZER1cmF0aW9uO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlcGVhdFR5cGUgPT09IFwibWlycm9yXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVHZW5lcmF0b3IgPSBtaXJyb3JlZEdlbmVyYXRvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcCA9IGNsYW1wKDAsIDEsIGl0ZXJhdGlvblByb2dyZXNzKTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50VGltZSA+IHRvdGFsRHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBwID0gcmVwZWF0VHlwZSA9PT0gXCJyZXZlcnNlXCIgJiYgaXRlcmF0aW9uSXNPZGQgPyAxIDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsYXBzZWQgPSBwICogcmVzb2x2ZWREdXJhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgd2UncmUgaW4gbmVnYXRpdmUgdGltZSwgc2V0IHN0YXRlIGFzIHRoZSBpbml0aWFsIGtleWZyYW1lLlxuICAgICAgICAgKiBUaGlzIHByZXZlbnRzIGRlbGF5OiB4LCBkdXJhdGlvbjogMCBhbmltYXRpb25zIGZyb20gZmluaXNoaW5nXG4gICAgICAgICAqIGluc3RhbnRseS5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IHN0YXRlID0gaXNJbkRlbGF5UGhhc2VcbiAgICAgICAgICAgID8geyBkb25lOiBmYWxzZSwgdmFsdWU6IGtleWZyYW1lcyQxWzBdIH1cbiAgICAgICAgICAgIDogZnJhbWVHZW5lcmF0b3IubmV4dChlbGFwc2VkKTtcbiAgICAgICAgaWYgKG1hcE51bWJlcnNUb0tleWZyYW1lcykge1xuICAgICAgICAgICAgc3RhdGUudmFsdWUgPSBtYXBOdW1iZXJzVG9LZXlmcmFtZXMoc3RhdGUudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGxldCB7IGRvbmUgfSA9IHN0YXRlO1xuICAgICAgICBpZiAoIWlzSW5EZWxheVBoYXNlICYmIGNhbGN1bGF0ZWREdXJhdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgZG9uZSA9IHNwZWVkID49IDAgPyBjdXJyZW50VGltZSA+PSB0b3RhbER1cmF0aW9uIDogY3VycmVudFRpbWUgPD0gMDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc0FuaW1hdGlvbkZpbmlzaGVkID0gaG9sZFRpbWUgPT09IG51bGwgJiZcbiAgICAgICAgICAgIChwbGF5U3RhdGUgPT09IFwiZmluaXNoZWRcIiB8fCAocGxheVN0YXRlID09PSBcInJ1bm5pbmdcIiAmJiBkb25lKSk7XG4gICAgICAgIGlmIChvblVwZGF0ZSkge1xuICAgICAgICAgICAgb25VcGRhdGUoc3RhdGUudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FuaW1hdGlvbkZpbmlzaGVkKSB7XG4gICAgICAgICAgICBmaW5pc2goKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfTtcbiAgICBjb25zdCBzdG9wQW5pbWF0aW9uRHJpdmVyID0gKCkgPT4ge1xuICAgICAgICBhbmltYXRpb25Ecml2ZXIgJiYgYW5pbWF0aW9uRHJpdmVyLnN0b3AoKTtcbiAgICAgICAgYW5pbWF0aW9uRHJpdmVyID0gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgY29uc3QgY2FuY2VsID0gKCkgPT4ge1xuICAgICAgICBwbGF5U3RhdGUgPSBcImlkbGVcIjtcbiAgICAgICAgc3RvcEFuaW1hdGlvbkRyaXZlcigpO1xuICAgICAgICByZXNvbHZlRmluaXNoZWRQcm9taXNlKCk7XG4gICAgICAgIHVwZGF0ZUZpbmlzaGVkUHJvbWlzZSgpO1xuICAgICAgICBzdGFydFRpbWUgPSBjYW5jZWxUaW1lID0gbnVsbDtcbiAgICB9O1xuICAgIGNvbnN0IGZpbmlzaCA9ICgpID0+IHtcbiAgICAgICAgcGxheVN0YXRlID0gXCJmaW5pc2hlZFwiO1xuICAgICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUoKTtcbiAgICAgICAgc3RvcEFuaW1hdGlvbkRyaXZlcigpO1xuICAgICAgICByZXNvbHZlRmluaXNoZWRQcm9taXNlKCk7XG4gICAgfTtcbiAgICBjb25zdCBwbGF5ID0gKCkgPT4ge1xuICAgICAgICBpZiAoaGFzU3RvcHBlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKCFhbmltYXRpb25Ecml2ZXIpXG4gICAgICAgICAgICBhbmltYXRpb25Ecml2ZXIgPSBkcml2ZXIodGljayk7XG4gICAgICAgIGNvbnN0IG5vdyA9IGFuaW1hdGlvbkRyaXZlci5ub3coKTtcbiAgICAgICAgb25QbGF5ICYmIG9uUGxheSgpO1xuICAgICAgICBpZiAoaG9sZFRpbWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHN0YXJ0VGltZSA9IG5vdyAtIGhvbGRUaW1lO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFzdGFydFRpbWUgfHwgcGxheVN0YXRlID09PSBcImZpbmlzaGVkXCIpIHtcbiAgICAgICAgICAgIHN0YXJ0VGltZSA9IG5vdztcbiAgICAgICAgfVxuICAgICAgICBpZiAocGxheVN0YXRlID09PSBcImZpbmlzaGVkXCIpIHtcbiAgICAgICAgICAgIHVwZGF0ZUZpbmlzaGVkUHJvbWlzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNhbmNlbFRpbWUgPSBzdGFydFRpbWU7XG4gICAgICAgIGhvbGRUaW1lID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCBwbGF5U3RhdGUgdG8gcnVubmluZyBvbmx5IGFmdGVyIHdlJ3ZlIHVzZWQgaXQgaW5cbiAgICAgICAgICogdGhlIHByZXZpb3VzIGxvZ2ljLlxuICAgICAgICAgKi9cbiAgICAgICAgcGxheVN0YXRlID0gXCJydW5uaW5nXCI7XG4gICAgICAgIGFuaW1hdGlvbkRyaXZlci5zdGFydCgpO1xuICAgIH07XG4gICAgaWYgKGF1dG9wbGF5KSB7XG4gICAgICAgIHBsYXkoKTtcbiAgICB9XG4gICAgY29uc3QgY29udHJvbHMgPSB7XG4gICAgICAgIHRoZW4ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudEZpbmlzaGVkUHJvbWlzZS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCB0aW1lKCkge1xuICAgICAgICAgICAgcmV0dXJuIG1pbGxpc2Vjb25kc1RvU2Vjb25kcyhjdXJyZW50VGltZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCB0aW1lKG5ld1RpbWUpIHtcbiAgICAgICAgICAgIG5ld1RpbWUgPSBzZWNvbmRzVG9NaWxsaXNlY29uZHMobmV3VGltZSk7XG4gICAgICAgICAgICBjdXJyZW50VGltZSA9IG5ld1RpbWU7XG4gICAgICAgICAgICBpZiAoaG9sZFRpbWUgIT09IG51bGwgfHwgIWFuaW1hdGlvbkRyaXZlciB8fCBzcGVlZCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGhvbGRUaW1lID0gbmV3VGltZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXJ0VGltZSA9IGFuaW1hdGlvbkRyaXZlci5ub3coKSAtIG5ld1RpbWUgLyBzcGVlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IGR1cmF0aW9uKCkge1xuICAgICAgICAgICAgY29uc3QgZHVyYXRpb24gPSBnZW5lcmF0b3IuY2FsY3VsYXRlZER1cmF0aW9uID09PSBudWxsXG4gICAgICAgICAgICAgICAgPyBjYWxjR2VuZXJhdG9yRHVyYXRpb24oZ2VuZXJhdG9yKVxuICAgICAgICAgICAgICAgIDogZ2VuZXJhdG9yLmNhbGN1bGF0ZWREdXJhdGlvbjtcbiAgICAgICAgICAgIHJldHVybiBtaWxsaXNlY29uZHNUb1NlY29uZHMoZHVyYXRpb24pO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgc3BlZWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3BlZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCBzcGVlZChuZXdTcGVlZCkge1xuICAgICAgICAgICAgaWYgKG5ld1NwZWVkID09PSBzcGVlZCB8fCAhYW5pbWF0aW9uRHJpdmVyKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHNwZWVkID0gbmV3U3BlZWQ7XG4gICAgICAgICAgICBjb250cm9scy50aW1lID0gbWlsbGlzZWNvbmRzVG9TZWNvbmRzKGN1cnJlbnRUaW1lKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IHN0YXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBsYXlTdGF0ZTtcbiAgICAgICAgfSxcbiAgICAgICAgcGxheSxcbiAgICAgICAgcGF1c2U6ICgpID0+IHtcbiAgICAgICAgICAgIHBsYXlTdGF0ZSA9IFwicGF1c2VkXCI7XG4gICAgICAgICAgICBob2xkVGltZSA9IGN1cnJlbnRUaW1lO1xuICAgICAgICB9LFxuICAgICAgICBzdG9wOiAoKSA9PiB7XG4gICAgICAgICAgICBoYXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChwbGF5U3RhdGUgPT09IFwiaWRsZVwiKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHBsYXlTdGF0ZSA9IFwiaWRsZVwiO1xuICAgICAgICAgICAgb25TdG9wICYmIG9uU3RvcCgpO1xuICAgICAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGNhbmNlbDogKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNhbmNlbFRpbWUgIT09IG51bGwpXG4gICAgICAgICAgICAgICAgdGljayhjYW5jZWxUaW1lKTtcbiAgICAgICAgICAgIGNhbmNlbCgpO1xuICAgICAgICB9LFxuICAgICAgICBjb21wbGV0ZTogKCkgPT4ge1xuICAgICAgICAgICAgcGxheVN0YXRlID0gXCJmaW5pc2hlZFwiO1xuICAgICAgICB9LFxuICAgICAgICBzYW1wbGU6IChlbGFwc2VkKSA9PiB7XG4gICAgICAgICAgICBzdGFydFRpbWUgPSAwO1xuICAgICAgICAgICAgcmV0dXJuIHRpY2soZWxhcHNlZCk7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gY29udHJvbHM7XG59XG5cbmV4cG9ydCB7IGFuaW1hdGVWYWx1ZSB9O1xuIiwiaW1wb3J0IHsgYW5pbWF0ZVN0eWxlIH0gZnJvbSAnLi9pbmRleC5tanMnO1xuaW1wb3J0IHsgaXNXYWFwaVN1cHBvcnRlZEVhc2luZyB9IGZyb20gJy4vZWFzaW5nLm1qcyc7XG5pbXBvcnQgeyBnZXRGaW5hbEtleWZyYW1lIH0gZnJvbSAnLi91dGlscy9nZXQtZmluYWwta2V5ZnJhbWUubWpzJztcbmltcG9ydCB7IGFuaW1hdGVWYWx1ZSB9IGZyb20gJy4uL2pzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBtaWxsaXNlY29uZHNUb1NlY29uZHMsIHNlY29uZHNUb01pbGxpc2Vjb25kcyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3RpbWUtY29udmVyc2lvbi5tanMnO1xuaW1wb3J0IHsgbWVtbyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL21lbW8ubWpzJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuLi8uLi8uLi91dGlscy9ub29wLm1qcyc7XG5pbXBvcnQgeyBmcmFtZURhdGEsIGZyYW1lLCBjYW5jZWxGcmFtZSB9IGZyb20gJy4uLy4uLy4uL2ZyYW1lbG9vcC9mcmFtZS5tanMnO1xuXG5jb25zdCBzdXBwb3J0c1dhYXBpID0gbWVtbygoKSA9PiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChFbGVtZW50LnByb3RvdHlwZSwgXCJhbmltYXRlXCIpKTtcbi8qKlxuICogQSBsaXN0IG9mIHZhbHVlcyB0aGF0IGNhbiBiZSBoYXJkd2FyZS1hY2NlbGVyYXRlZC5cbiAqL1xuY29uc3QgYWNjZWxlcmF0ZWRWYWx1ZXMgPSBuZXcgU2V0KFtcbiAgICBcIm9wYWNpdHlcIixcbiAgICBcImNsaXBQYXRoXCIsXG4gICAgXCJmaWx0ZXJcIixcbiAgICBcInRyYW5zZm9ybVwiLFxuICAgIFwiYmFja2dyb3VuZENvbG9yXCIsXG5dKTtcbi8qKlxuICogMTBtcyBpcyBjaG9zZW4gaGVyZSBhcyBpdCBzdHJpa2VzIGEgYmFsYW5jZSBiZXR3ZWVuIHNtb290aFxuICogcmVzdWx0cyAobW9yZSB0aGFuIG9uZSBrZXlmcmFtZSBwZXIgZnJhbWUgYXQgNjBmcHMpIGFuZFxuICoga2V5ZnJhbWUgcXVhbnRpdHkuXG4gKi9cbmNvbnN0IHNhbXBsZURlbHRhID0gMTA7IC8vbXNcbi8qKlxuICogSW1wbGVtZW50IGEgcHJhY3RpY2FsIG1heCBkdXJhdGlvbiBmb3Iga2V5ZnJhbWUgZ2VuZXJhdGlvblxuICogdG8gcHJldmVudCBpbmZpbml0ZSBsb29wc1xuICovXG5jb25zdCBtYXhEdXJhdGlvbiA9IDIwMDAwO1xuY29uc3QgcmVxdWlyZXNQcmVnZW5lcmF0ZWRLZXlmcmFtZXMgPSAodmFsdWVOYW1lLCBvcHRpb25zKSA9PiBvcHRpb25zLnR5cGUgPT09IFwic3ByaW5nXCIgfHxcbiAgICB2YWx1ZU5hbWUgPT09IFwiYmFja2dyb3VuZENvbG9yXCIgfHxcbiAgICAhaXNXYWFwaVN1cHBvcnRlZEVhc2luZyhvcHRpb25zLmVhc2UpO1xuZnVuY3Rpb24gY3JlYXRlQWNjZWxlcmF0ZWRBbmltYXRpb24odmFsdWUsIHZhbHVlTmFtZSwgeyBvblVwZGF0ZSwgb25Db21wbGV0ZSwgLi4ub3B0aW9ucyB9KSB7XG4gICAgY29uc3QgY2FuQWNjZWxlcmF0ZUFuaW1hdGlvbiA9IHN1cHBvcnRzV2FhcGkoKSAmJlxuICAgICAgICBhY2NlbGVyYXRlZFZhbHVlcy5oYXModmFsdWVOYW1lKSAmJlxuICAgICAgICAhb3B0aW9ucy5yZXBlYXREZWxheSAmJlxuICAgICAgICBvcHRpb25zLnJlcGVhdFR5cGUgIT09IFwibWlycm9yXCIgJiZcbiAgICAgICAgb3B0aW9ucy5kYW1waW5nICE9PSAwICYmXG4gICAgICAgIG9wdGlvbnMudHlwZSAhPT0gXCJpbmVydGlhXCI7XG4gICAgaWYgKCFjYW5BY2NlbGVyYXRlQW5pbWF0aW9uKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgLyoqXG4gICAgICogVE9ETzogVW5pZnkgd2l0aCBqcy9pbmRleFxuICAgICAqL1xuICAgIGxldCBoYXNTdG9wcGVkID0gZmFsc2U7XG4gICAgbGV0IHJlc29sdmVGaW5pc2hlZFByb21pc2U7XG4gICAgbGV0IGN1cnJlbnRGaW5pc2hlZFByb21pc2U7XG4gICAgLyoqXG4gICAgICogUmVzb2x2ZSB0aGUgY3VycmVudCBQcm9taXNlIGV2ZXJ5IHRpbWUgd2UgZW50ZXIgdGhlXG4gICAgICogZmluaXNoZWQgc3RhdGUuIFRoaXMgaXMgV0FBUEktY29tcGF0aWJsZSBiZWhhdmlvdXIuXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlRmluaXNoZWRQcm9taXNlID0gKCkgPT4ge1xuICAgICAgICBjdXJyZW50RmluaXNoZWRQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmVGaW5pc2hlZFByb21pc2UgPSByZXNvbHZlO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8vIENyZWF0ZSB0aGUgZmlyc3QgZmluaXNoZWQgcHJvbWlzZVxuICAgIHVwZGF0ZUZpbmlzaGVkUHJvbWlzZSgpO1xuICAgIGxldCB7IGtleWZyYW1lcywgZHVyYXRpb24gPSAzMDAsIGVhc2UsIHRpbWVzIH0gPSBvcHRpb25zO1xuICAgIC8qKlxuICAgICAqIElmIHRoaXMgYW5pbWF0aW9uIG5lZWRzIHByZS1nZW5lcmF0ZWQga2V5ZnJhbWVzIHRoZW4gZ2VuZXJhdGUuXG4gICAgICovXG4gICAgaWYgKHJlcXVpcmVzUHJlZ2VuZXJhdGVkS2V5ZnJhbWVzKHZhbHVlTmFtZSwgb3B0aW9ucykpIHtcbiAgICAgICAgY29uc3Qgc2FtcGxlQW5pbWF0aW9uID0gYW5pbWF0ZVZhbHVlKHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICByZXBlYXQ6IDAsXG4gICAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBzdGF0ZSA9IHsgZG9uZTogZmFsc2UsIHZhbHVlOiBrZXlmcmFtZXNbMF0gfTtcbiAgICAgICAgY29uc3QgcHJlZ2VuZXJhdGVkS2V5ZnJhbWVzID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCYWlsIGFmdGVyIDIwIHNlY29uZHMgb2YgcHJlLWdlbmVyYXRlZCBrZXlmcmFtZXMgYXMgaXQncyBsaWtlbHlcbiAgICAgICAgICogd2UncmUgaGVhZGluZyBmb3IgYW4gaW5maW5pdGUgbG9vcC5cbiAgICAgICAgICovXG4gICAgICAgIGxldCB0ID0gMDtcbiAgICAgICAgd2hpbGUgKCFzdGF0ZS5kb25lICYmIHQgPCBtYXhEdXJhdGlvbikge1xuICAgICAgICAgICAgc3RhdGUgPSBzYW1wbGVBbmltYXRpb24uc2FtcGxlKHQpO1xuICAgICAgICAgICAgcHJlZ2VuZXJhdGVkS2V5ZnJhbWVzLnB1c2goc3RhdGUudmFsdWUpO1xuICAgICAgICAgICAgdCArPSBzYW1wbGVEZWx0YTtcbiAgICAgICAgfVxuICAgICAgICB0aW1lcyA9IHVuZGVmaW5lZDtcbiAgICAgICAga2V5ZnJhbWVzID0gcHJlZ2VuZXJhdGVkS2V5ZnJhbWVzO1xuICAgICAgICBkdXJhdGlvbiA9IHQgLSBzYW1wbGVEZWx0YTtcbiAgICAgICAgZWFzZSA9IFwibGluZWFyXCI7XG4gICAgfVxuICAgIGNvbnN0IGFuaW1hdGlvbiA9IGFuaW1hdGVTdHlsZSh2YWx1ZS5vd25lci5jdXJyZW50LCB2YWx1ZU5hbWUsIGtleWZyYW1lcywge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgY3VycmVudGx5IG5vdCBjYWxsZWQgaWYgZWFzZSBpcyBwcm92aWRlZFxuICAgICAgICAgKiBhcyBhIGZ1bmN0aW9uIHNvIHRoZSBjYXN0IGlzIHNhZmUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEhvd2V2ZXIgaXQgd291bGQgYmUgcG9zc2libGUgZm9yIGEgZnV0dXJlIHJlZmluZW1lbnQgdG8gcG9ydFxuICAgICAgICAgKiBpbiBlYXNpbmcgcHJlZ2VuZXJhdGlvbiBmcm9tIE1vdGlvbiBPbmUgZm9yIGJyb3dzZXJzIHRoYXRcbiAgICAgICAgICogc3VwcG9ydCB0aGUgdXBjb21pbmcgYGxpbmVhcigpYCBlYXNpbmcgZnVuY3Rpb24uXG4gICAgICAgICAqL1xuICAgICAgICBlYXNlOiBlYXNlLFxuICAgICAgICB0aW1lcyxcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBXQUFQSSBhbmltYXRpb25zIGRvbid0IHJlc29sdmUgc3RhcnRUaW1lIHN5bmNocm9ub3VzbHkuIEJ1dCBhIGJsb2NrZWRcbiAgICAgKiB0aHJlYWQgY291bGQgZGVsYXkgdGhlIHN0YXJ0VGltZSByZXNvbHV0aW9uIGJ5IGEgbm90aWNlYWJsZSBhbW91bnQuXG4gICAgICogRm9yIHN5bmNoaW5nIGhhbmRvZmYgYW5pbWF0aW9ucyB3aXRoIHRoZSBuZXcgTW90aW9uIGFuaW1hdGlvbiB3ZSB3YW50XG4gICAgICogdG8gZW5zdXJlIHN0YXJ0VGltZSBpcyBzeW5jaHJvbm91c2x5IHNldC5cbiAgICAgKi9cbiAgICBpZiAob3B0aW9ucy5zeW5jU3RhcnQpIHtcbiAgICAgICAgYW5pbWF0aW9uLnN0YXJ0VGltZSA9IGZyYW1lRGF0YS5pc1Byb2Nlc3NpbmdcbiAgICAgICAgICAgID8gZnJhbWVEYXRhLnRpbWVzdGFtcFxuICAgICAgICAgICAgOiBkb2N1bWVudC50aW1lbGluZVxuICAgICAgICAgICAgICAgID8gZG9jdW1lbnQudGltZWxpbmUuY3VycmVudFRpbWVcbiAgICAgICAgICAgICAgICA6IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIH1cbiAgICBjb25zdCBjYW5jZWxBbmltYXRpb24gPSAoKSA9PiBhbmltYXRpb24uY2FuY2VsKCk7XG4gICAgY29uc3Qgc2FmZUNhbmNlbCA9ICgpID0+IHtcbiAgICAgICAgZnJhbWUudXBkYXRlKGNhbmNlbEFuaW1hdGlvbik7XG4gICAgICAgIHJlc29sdmVGaW5pc2hlZFByb21pc2UoKTtcbiAgICAgICAgdXBkYXRlRmluaXNoZWRQcm9taXNlKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQcmVmZXIgdGhlIGBvbmZpbmlzaGAgcHJvcCBhcyBpdCdzIG1vcmUgd2lkZWx5IHN1cHBvcnRlZCB0aGFuXG4gICAgICogdGhlIGBmaW5pc2hlZGAgcHJvbWlzZS5cbiAgICAgKlxuICAgICAqIEhlcmUsIHdlIHN5bmNocm9ub3VzbHkgc2V0IHRoZSBwcm92aWRlZCBNb3Rpb25WYWx1ZSB0byB0aGUgZW5kXG4gICAgICoga2V5ZnJhbWUuIElmIHdlIGRpZG4ndCwgd2hlbiB0aGUgV0FBUEkgYW5pbWF0aW9uIGlzIGZpbmlzaGVkIGl0IHdvdWxkXG4gICAgICogYmUgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50IHdoaWNoIHdvdWxkIHRoZW4gcmV2ZXJ0IHRvIGl0cyBvbGQgc3R5bGVzLlxuICAgICAqL1xuICAgIGFuaW1hdGlvbi5vbmZpbmlzaCA9ICgpID0+IHtcbiAgICAgICAgdmFsdWUuc2V0KGdldEZpbmFsS2V5ZnJhbWUoa2V5ZnJhbWVzLCBvcHRpb25zKSk7XG4gICAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZSgpO1xuICAgICAgICBzYWZlQ2FuY2VsKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBbmltYXRpb24gaW50ZXJydXB0IGNhbGxiYWNrLlxuICAgICAqL1xuICAgIGNvbnN0IGNvbnRyb2xzID0ge1xuICAgICAgICB0aGVuKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRGaW5pc2hlZFByb21pc2UudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9LFxuICAgICAgICBhdHRhY2hUaW1lbGluZSh0aW1lbGluZSkge1xuICAgICAgICAgICAgYW5pbWF0aW9uLnRpbWVsaW5lID0gdGltZWxpbmU7XG4gICAgICAgICAgICBhbmltYXRpb24ub25maW5pc2ggPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCB0aW1lKCkge1xuICAgICAgICAgICAgcmV0dXJuIG1pbGxpc2Vjb25kc1RvU2Vjb25kcyhhbmltYXRpb24uY3VycmVudFRpbWUgfHwgMCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCB0aW1lKG5ld1RpbWUpIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbi5jdXJyZW50VGltZSA9IHNlY29uZHNUb01pbGxpc2Vjb25kcyhuZXdUaW1lKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IHNwZWVkKCkge1xuICAgICAgICAgICAgcmV0dXJuIGFuaW1hdGlvbi5wbGF5YmFja1JhdGU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCBzcGVlZChuZXdTcGVlZCkge1xuICAgICAgICAgICAgYW5pbWF0aW9uLnBsYXliYWNrUmF0ZSA9IG5ld1NwZWVkO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgZHVyYXRpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbWlsbGlzZWNvbmRzVG9TZWNvbmRzKGR1cmF0aW9uKTtcbiAgICAgICAgfSxcbiAgICAgICAgcGxheTogKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGhhc1N0b3BwZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgYW5pbWF0aW9uLnBsYXkoKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FuY2VsIGFueSBwZW5kaW5nIGNhbmNlbCB0YXNrc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjYW5jZWxGcmFtZShjYW5jZWxBbmltYXRpb24pO1xuICAgICAgICB9LFxuICAgICAgICBwYXVzZTogKCkgPT4gYW5pbWF0aW9uLnBhdXNlKCksXG4gICAgICAgIHN0b3A6ICgpID0+IHtcbiAgICAgICAgICAgIGhhc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbi5wbGF5U3RhdGUgPT09IFwiaWRsZVwiKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogV0FBUEkgZG9lc24ndCBuYXRpdmVseSBoYXZlIGFueSBpbnRlcnJ1cHRpb24gY2FwYWJpbGl0aWVzLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFJhdGhlciB0aGFuIHJlYWQgY29tbWl0ZWQgc3R5bGVzIGJhY2sgb3V0IG9mIHRoZSBET00sIHdlIGNhblxuICAgICAgICAgICAgICogY3JlYXRlIGEgcmVuZGVybGVzcyBKUyBhbmltYXRpb24gYW5kIHNhbXBsZSBpdCB0d2ljZSB0byBjYWxjdWxhdGVcbiAgICAgICAgICAgICAqIGl0cyBjdXJyZW50IHZhbHVlLCBcInByZXZpb3VzXCIgdmFsdWUsIGFuZCB0aGVyZWZvcmUgYWxsb3dcbiAgICAgICAgICAgICAqIE1vdGlvbiB0byBjYWxjdWxhdGUgdmVsb2NpdHkgZm9yIGFueSBzdWJzZXF1ZW50IGFuaW1hdGlvbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgeyBjdXJyZW50VGltZSB9ID0gYW5pbWF0aW9uO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRUaW1lKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2FtcGxlQW5pbWF0aW9uID0gYW5pbWF0ZVZhbHVlKHtcbiAgICAgICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZhbHVlLnNldFdpdGhWZWxvY2l0eShzYW1wbGVBbmltYXRpb24uc2FtcGxlKGN1cnJlbnRUaW1lIC0gc2FtcGxlRGVsdGEpLnZhbHVlLCBzYW1wbGVBbmltYXRpb24uc2FtcGxlKGN1cnJlbnRUaW1lKS52YWx1ZSwgc2FtcGxlRGVsdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2FmZUNhbmNlbCgpO1xuICAgICAgICB9LFxuICAgICAgICBjb21wbGV0ZTogKCkgPT4gYW5pbWF0aW9uLmZpbmlzaCgpLFxuICAgICAgICBjYW5jZWw6IHNhZmVDYW5jZWwsXG4gICAgfTtcbiAgICByZXR1cm4gY29udHJvbHM7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUFjY2VsZXJhdGVkQW5pbWF0aW9uIH07XG4iLCJmdW5jdGlvbiBtZW1vKGNhbGxiYWNrKSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXN1bHQgPSBjYWxsYmFjaygpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59XG5cbmV4cG9ydCB7IG1lbW8gfTtcbiIsImltcG9ydCB7IHRyYW5zZm9ybVByb3BzIH0gZnJvbSAnLi4vLi4vcmVuZGVyL2h0bWwvdXRpbHMvdHJhbnNmb3JtLm1qcyc7XG5cbmNvbnN0IHVuZGVyRGFtcGVkU3ByaW5nID0ge1xuICAgIHR5cGU6IFwic3ByaW5nXCIsXG4gICAgc3RpZmZuZXNzOiA1MDAsXG4gICAgZGFtcGluZzogMjUsXG4gICAgcmVzdFNwZWVkOiAxMCxcbn07XG5jb25zdCBjcml0aWNhbGx5RGFtcGVkU3ByaW5nID0gKHRhcmdldCkgPT4gKHtcbiAgICB0eXBlOiBcInNwcmluZ1wiLFxuICAgIHN0aWZmbmVzczogNTUwLFxuICAgIGRhbXBpbmc6IHRhcmdldCA9PT0gMCA/IDIgKiBNYXRoLnNxcnQoNTUwKSA6IDMwLFxuICAgIHJlc3RTcGVlZDogMTAsXG59KTtcbmNvbnN0IGtleWZyYW1lc1RyYW5zaXRpb24gPSB7XG4gICAgdHlwZTogXCJrZXlmcmFtZXNcIixcbiAgICBkdXJhdGlvbjogMC44LFxufTtcbi8qKlxuICogRGVmYXVsdCBlYXNpbmcgY3VydmUgaXMgYSBzbGlnaHRseSBzaGFsbG93ZXIgdmVyc2lvbiBvZlxuICogdGhlIGRlZmF1bHQgYnJvd3NlciBlYXNpbmcgY3VydmUuXG4gKi9cbmNvbnN0IGVhc2UgPSB7XG4gICAgdHlwZTogXCJrZXlmcmFtZXNcIixcbiAgICBlYXNlOiBbMC4yNSwgMC4xLCAwLjM1LCAxXSxcbiAgICBkdXJhdGlvbjogMC4zLFxufTtcbmNvbnN0IGdldERlZmF1bHRUcmFuc2l0aW9uID0gKHZhbHVlS2V5LCB7IGtleWZyYW1lcyB9KSA9PiB7XG4gICAgaWYgKGtleWZyYW1lcy5sZW5ndGggPiAyKSB7XG4gICAgICAgIHJldHVybiBrZXlmcmFtZXNUcmFuc2l0aW9uO1xuICAgIH1cbiAgICBlbHNlIGlmICh0cmFuc2Zvcm1Qcm9wcy5oYXModmFsdWVLZXkpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZUtleS5zdGFydHNXaXRoKFwic2NhbGVcIilcbiAgICAgICAgICAgID8gY3JpdGljYWxseURhbXBlZFNwcmluZyhrZXlmcmFtZXNbMV0pXG4gICAgICAgICAgICA6IHVuZGVyRGFtcGVkU3ByaW5nO1xuICAgIH1cbiAgICByZXR1cm4gZWFzZTtcbn07XG5cbmV4cG9ydCB7IGdldERlZmF1bHRUcmFuc2l0aW9uIH07XG4iLCJpbXBvcnQgeyBjb21wbGV4IH0gZnJvbSAnLi4vLi4vdmFsdWUvdHlwZXMvY29tcGxleC9pbmRleC5tanMnO1xuXG4vKipcbiAqIENoZWNrIGlmIGEgdmFsdWUgaXMgYW5pbWF0YWJsZS4gRXhhbXBsZXM6XG4gKlxuICog4pyFOiAxMDAsIFwiMTAwcHhcIiwgXCIjZmZmXCJcbiAqIOKdjDogXCJibG9ja1wiLCBcInVybCgyLmpwZylcIlxuICogQHBhcmFtIHZhbHVlXG4gKlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IGlzQW5pbWF0YWJsZSA9IChrZXksIHZhbHVlKSA9PiB7XG4gICAgLy8gSWYgdGhlIGxpc3Qgb2Yga2V5cyB0YXQgbWlnaHQgYmUgbm9uLWFuaW1hdGFibGUgZ3Jvd3MsIHJlcGxhY2Ugd2l0aCBTZXRcbiAgICBpZiAoa2V5ID09PSBcInpJbmRleFwiKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgLy8gSWYgaXQncyBhIG51bWJlciBvciBhIGtleWZyYW1lcyBhcnJheSwgd2UgY2FuIGFuaW1hdGUgaXQuIFdlIG1pZ2h0IGF0IHNvbWUgcG9pbnRcbiAgICAvLyBuZWVkIHRvIGRvIGEgZGVlcCBpc0FuaW1hdGFibGUgY2hlY2sgb2Yga2V5ZnJhbWVzLCBvciBsZXQgUG9wbW90aW9uIGhhbmRsZSB0aGlzLFxuICAgIC8vIGJ1dCBmb3Igbm93IGxldHMgbGVhdmUgaXQgbGlrZSB0aGlzIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiB8fCBBcnJheS5pc0FycmF5KHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAvLyBJdCdzIGFuaW1hdGFibGUgaWYgd2UgaGF2ZSBhIHN0cmluZ1xuICAgICAgICAoY29tcGxleC50ZXN0KHZhbHVlKSB8fCB2YWx1ZSA9PT0gXCIwXCIpICYmIC8vIEFuZCBpdCBjb250YWlucyBudW1iZXJzIGFuZC9vciBjb2xvcnNcbiAgICAgICAgIXZhbHVlLnN0YXJ0c1dpdGgoXCJ1cmwoXCIpIC8vIFVubGVzcyBpdCBzdGFydHMgd2l0aCBcInVybChcIlxuICAgICkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IHsgaXNBbmltYXRhYmxlIH07XG4iLCJpbXBvcnQgeyBjb21wbGV4IH0gZnJvbSAnLi9pbmRleC5tanMnO1xuaW1wb3J0IHsgZmxvYXRSZWdleCB9IGZyb20gJy4uL3V0aWxzLm1qcyc7XG5cbi8qKlxuICogUHJvcGVydGllcyB0aGF0IHNob3VsZCBkZWZhdWx0IHRvIDEgb3IgMTAwJVxuICovXG5jb25zdCBtYXhEZWZhdWx0cyA9IG5ldyBTZXQoW1wiYnJpZ2h0bmVzc1wiLCBcImNvbnRyYXN0XCIsIFwic2F0dXJhdGVcIiwgXCJvcGFjaXR5XCJdKTtcbmZ1bmN0aW9uIGFwcGx5RGVmYXVsdEZpbHRlcih2KSB7XG4gICAgY29uc3QgW25hbWUsIHZhbHVlXSA9IHYuc2xpY2UoMCwgLTEpLnNwbGl0KFwiKFwiKTtcbiAgICBpZiAobmFtZSA9PT0gXCJkcm9wLXNoYWRvd1wiKVxuICAgICAgICByZXR1cm4gdjtcbiAgICBjb25zdCBbbnVtYmVyXSA9IHZhbHVlLm1hdGNoKGZsb2F0UmVnZXgpIHx8IFtdO1xuICAgIGlmICghbnVtYmVyKVxuICAgICAgICByZXR1cm4gdjtcbiAgICBjb25zdCB1bml0ID0gdmFsdWUucmVwbGFjZShudW1iZXIsIFwiXCIpO1xuICAgIGxldCBkZWZhdWx0VmFsdWUgPSBtYXhEZWZhdWx0cy5oYXMobmFtZSkgPyAxIDogMDtcbiAgICBpZiAobnVtYmVyICE9PSB2YWx1ZSlcbiAgICAgICAgZGVmYXVsdFZhbHVlICo9IDEwMDtcbiAgICByZXR1cm4gbmFtZSArIFwiKFwiICsgZGVmYXVsdFZhbHVlICsgdW5pdCArIFwiKVwiO1xufVxuY29uc3QgZnVuY3Rpb25SZWdleCA9IC8oW2Etei1dKilcXCguKj9cXCkvZztcbmNvbnN0IGZpbHRlciA9IHtcbiAgICAuLi5jb21wbGV4LFxuICAgIGdldEFuaW1hdGFibGVOb25lOiAodikgPT4ge1xuICAgICAgICBjb25zdCBmdW5jdGlvbnMgPSB2Lm1hdGNoKGZ1bmN0aW9uUmVnZXgpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb25zID8gZnVuY3Rpb25zLm1hcChhcHBseURlZmF1bHRGaWx0ZXIpLmpvaW4oXCIgXCIpIDogdjtcbiAgICB9LFxufTtcblxuZXhwb3J0IHsgZmlsdGVyIH07XG4iLCJpbXBvcnQgeyBjb2xvciB9IGZyb20gJy4uLy4uLy4uL3ZhbHVlL3R5cGVzL2NvbG9yL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICcuLi8uLi8uLi92YWx1ZS90eXBlcy9jb21wbGV4L2ZpbHRlci5tanMnO1xuaW1wb3J0IHsgbnVtYmVyVmFsdWVUeXBlcyB9IGZyb20gJy4vbnVtYmVyLm1qcyc7XG5cbi8qKlxuICogQSBtYXAgb2YgZGVmYXVsdCB2YWx1ZSB0eXBlcyBmb3IgY29tbW9uIHZhbHVlc1xuICovXG5jb25zdCBkZWZhdWx0VmFsdWVUeXBlcyA9IHtcbiAgICAuLi5udW1iZXJWYWx1ZVR5cGVzLFxuICAgIC8vIENvbG9yIHByb3BzXG4gICAgY29sb3IsXG4gICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcixcbiAgICBvdXRsaW5lQ29sb3I6IGNvbG9yLFxuICAgIGZpbGw6IGNvbG9yLFxuICAgIHN0cm9rZTogY29sb3IsXG4gICAgLy8gQm9yZGVyIHByb3BzXG4gICAgYm9yZGVyQ29sb3I6IGNvbG9yLFxuICAgIGJvcmRlclRvcENvbG9yOiBjb2xvcixcbiAgICBib3JkZXJSaWdodENvbG9yOiBjb2xvcixcbiAgICBib3JkZXJCb3R0b21Db2xvcjogY29sb3IsXG4gICAgYm9yZGVyTGVmdENvbG9yOiBjb2xvcixcbiAgICBmaWx0ZXIsXG4gICAgV2Via2l0RmlsdGVyOiBmaWx0ZXIsXG59O1xuLyoqXG4gKiBHZXRzIHRoZSBkZWZhdWx0IFZhbHVlVHlwZSBmb3IgdGhlIHByb3ZpZGVkIHZhbHVlIGtleVxuICovXG5jb25zdCBnZXREZWZhdWx0VmFsdWVUeXBlID0gKGtleSkgPT4gZGVmYXVsdFZhbHVlVHlwZXNba2V5XTtcblxuZXhwb3J0IHsgZGVmYXVsdFZhbHVlVHlwZXMsIGdldERlZmF1bHRWYWx1ZVR5cGUgfTtcbiIsImltcG9ydCB7IGNvbXBsZXggfSBmcm9tICcuLi8uLi8uLi92YWx1ZS90eXBlcy9jb21wbGV4L2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICcuLi8uLi8uLi92YWx1ZS90eXBlcy9jb21wbGV4L2ZpbHRlci5tanMnO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdFZhbHVlVHlwZSB9IGZyb20gJy4vZGVmYXVsdHMubWpzJztcblxuZnVuY3Rpb24gZ2V0QW5pbWF0YWJsZU5vbmUoa2V5LCB2YWx1ZSkge1xuICAgIGxldCBkZWZhdWx0VmFsdWVUeXBlID0gZ2V0RGVmYXVsdFZhbHVlVHlwZShrZXkpO1xuICAgIGlmIChkZWZhdWx0VmFsdWVUeXBlICE9PSBmaWx0ZXIpXG4gICAgICAgIGRlZmF1bHRWYWx1ZVR5cGUgPSBjb21wbGV4O1xuICAgIC8vIElmIHZhbHVlIGlzIG5vdCByZWNvZ25pc2VkIGFzIGFuaW1hdGFibGUsIGllIFwibm9uZVwiLCBjcmVhdGUgYW4gYW5pbWF0YWJsZSB2ZXJzaW9uIG9yaWdpbiBiYXNlZCBvbiB0aGUgdGFyZ2V0XG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZVR5cGUuZ2V0QW5pbWF0YWJsZU5vbmVcbiAgICAgICAgPyBkZWZhdWx0VmFsdWVUeXBlLmdldEFuaW1hdGFibGVOb25lKHZhbHVlKVxuICAgICAgICA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IHsgZ2V0QW5pbWF0YWJsZU5vbmUgfTtcbiIsIi8qKlxuICogQ2hlY2sgaWYgdGhlIHZhbHVlIGlzIGEgemVybyB2YWx1ZSBzdHJpbmcgbGlrZSBcIjBweFwiIG9yIFwiMCVcIlxuICovXG5jb25zdCBpc1plcm9WYWx1ZVN0cmluZyA9ICh2KSA9PiAvXjBbXi5cXHNdKyQvLnRlc3Qodik7XG5cbmV4cG9ydCB7IGlzWmVyb1ZhbHVlU3RyaW5nIH07XG4iLCJpbXBvcnQgeyBpc1plcm9WYWx1ZVN0cmluZyB9IGZyb20gJy4uLy4uL3V0aWxzL2lzLXplcm8tdmFsdWUtc3RyaW5nLm1qcyc7XG5cbmZ1bmN0aW9uIGlzTm9uZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwO1xuICAgIH1cbiAgICBlbHNlIGlmICh2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IFwibm9uZVwiIHx8IHZhbHVlID09PSBcIjBcIiB8fCBpc1plcm9WYWx1ZVN0cmluZyh2YWx1ZSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBpc05vbmUgfTtcbiIsIi8qKlxuICogRGVjaWRlIHdoZXRoZXIgYSB0cmFuc2l0aW9uIGlzIGRlZmluZWQgb24gYSBnaXZlbiBUcmFuc2l0aW9uLlxuICogVGhpcyBmaWx0ZXJzIG91dCBvcmNoZXN0cmF0aW9uIG9wdGlvbnMgYW5kIHJldHVybnMgdHJ1ZVxuICogaWYgYW55IG9wdGlvbnMgYXJlIGxlZnQuXG4gKi9cbmZ1bmN0aW9uIGlzVHJhbnNpdGlvbkRlZmluZWQoeyB3aGVuLCBkZWxheTogX2RlbGF5LCBkZWxheUNoaWxkcmVuLCBzdGFnZ2VyQ2hpbGRyZW4sIHN0YWdnZXJEaXJlY3Rpb24sIHJlcGVhdCwgcmVwZWF0VHlwZSwgcmVwZWF0RGVsYXksIGZyb20sIGVsYXBzZWQsIC4uLnRyYW5zaXRpb24gfSkge1xuICAgIHJldHVybiAhIU9iamVjdC5rZXlzKHRyYW5zaXRpb24pLmxlbmd0aDtcbn1cbmZ1bmN0aW9uIGdldFZhbHVlVHJhbnNpdGlvbih0cmFuc2l0aW9uLCBrZXkpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbltrZXldIHx8IHRyYW5zaXRpb25bXCJkZWZhdWx0XCJdIHx8IHRyYW5zaXRpb247XG59XG5cbmV4cG9ydCB7IGdldFZhbHVlVHJhbnNpdGlvbiwgaXNUcmFuc2l0aW9uRGVmaW5lZCB9O1xuIiwiaW1wb3J0IHsgd2FybmluZyB9IGZyb20gJy4uLy4uL3V0aWxzL2Vycm9ycy5tanMnO1xuaW1wb3J0IHsgc2Vjb25kc1RvTWlsbGlzZWNvbmRzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdGltZS1jb252ZXJzaW9uLm1qcyc7XG5pbXBvcnQgeyBpbnN0YW50QW5pbWF0aW9uU3RhdGUgfSBmcm9tICcuLi8uLi91dGlscy91c2UtaW5zdGFudC10cmFuc2l0aW9uLXN0YXRlLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVBY2NlbGVyYXRlZEFuaW1hdGlvbiB9IGZyb20gJy4uL2FuaW1hdG9ycy93YWFwaS9jcmVhdGUtYWNjZWxlcmF0ZWQtYW5pbWF0aW9uLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVJbnN0YW50QW5pbWF0aW9uIH0gZnJvbSAnLi4vYW5pbWF0b3JzL2luc3RhbnQubWpzJztcbmltcG9ydCB7IGdldERlZmF1bHRUcmFuc2l0aW9uIH0gZnJvbSAnLi4vdXRpbHMvZGVmYXVsdC10cmFuc2l0aW9ucy5tanMnO1xuaW1wb3J0IHsgaXNBbmltYXRhYmxlIH0gZnJvbSAnLi4vdXRpbHMvaXMtYW5pbWF0YWJsZS5tanMnO1xuaW1wb3J0IHsgZ2V0S2V5ZnJhbWVzIH0gZnJvbSAnLi4vdXRpbHMva2V5ZnJhbWVzLm1qcyc7XG5pbXBvcnQgeyBnZXRWYWx1ZVRyYW5zaXRpb24sIGlzVHJhbnNpdGlvbkRlZmluZWQgfSBmcm9tICcuLi91dGlscy90cmFuc2l0aW9ucy5tanMnO1xuaW1wb3J0IHsgYW5pbWF0ZVZhbHVlIH0gZnJvbSAnLi4vYW5pbWF0b3JzL2pzL2luZGV4Lm1qcyc7XG5cbmNvbnN0IGFuaW1hdGVNb3Rpb25WYWx1ZSA9ICh2YWx1ZU5hbWUsIHZhbHVlLCB0YXJnZXQsIHRyYW5zaXRpb24gPSB7fSkgPT4ge1xuICAgIHJldHVybiAob25Db21wbGV0ZSkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZVRyYW5zaXRpb24gPSBnZXRWYWx1ZVRyYW5zaXRpb24odHJhbnNpdGlvbiwgdmFsdWVOYW1lKSB8fCB7fTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1vc3QgdHJhbnNpdGlvbiB2YWx1ZXMgYXJlIGN1cnJlbnRseSBjb21wbGV0ZWx5IG92ZXJ3cml0dGVuIGJ5IHZhbHVlLXNwZWNpZmljXG4gICAgICAgICAqIHRyYW5zaXRpb25zLiBJbiB0aGUgZnV0dXJlIGl0J2QgYmUgbmljZXIgdG8gYmxlbmQgdGhlc2UgdHJhbnNpdGlvbnMuIEJ1dCBmb3Igbm93XG4gICAgICAgICAqIGRlbGF5IGFjdHVhbGx5IGRvZXMgaW5oZXJpdCBmcm9tIHRoZSByb290IHRyYW5zaXRpb24gaWYgbm90IHZhbHVlLXNwZWNpZmljLlxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgZGVsYXkgPSB2YWx1ZVRyYW5zaXRpb24uZGVsYXkgfHwgdHJhbnNpdGlvbi5kZWxheSB8fCAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogRWxhcHNlZCBpc24ndCBhIHB1YmxpYyB0cmFuc2l0aW9uIG9wdGlvbiBidXQgY2FuIGJlIHBhc3NlZCB0aHJvdWdoIGZyb21cbiAgICAgICAgICogb3B0aW1pemVkIGFwcGVhciBlZmZlY3RzIGluIG1pbGxpc2Vjb25kcy5cbiAgICAgICAgICovXG4gICAgICAgIGxldCB7IGVsYXBzZWQgPSAwIH0gPSB0cmFuc2l0aW9uO1xuICAgICAgICBlbGFwc2VkID0gZWxhcHNlZCAtIHNlY29uZHNUb01pbGxpc2Vjb25kcyhkZWxheSk7XG4gICAgICAgIGNvbnN0IGtleWZyYW1lcyA9IGdldEtleWZyYW1lcyh2YWx1ZSwgdmFsdWVOYW1lLCB0YXJnZXQsIHZhbHVlVHJhbnNpdGlvbik7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVjayBpZiB3ZSdyZSBhYmxlIHRvIGFuaW1hdGUgYmV0d2VlbiB0aGUgc3RhcnQgYW5kIGVuZCBrZXlmcmFtZXMsXG4gICAgICAgICAqIGFuZCB0aHJvdyBhIHdhcm5pbmcgaWYgd2UncmUgYXR0ZW1wdGluZyB0byBhbmltYXRlIGJldHdlZW4gb25lIHRoYXQnc1xuICAgICAgICAgKiBhbmltYXRhYmxlIGFuZCBhbm90aGVyIHRoYXQgaXNuJ3QuXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBvcmlnaW5LZXlmcmFtZSA9IGtleWZyYW1lc1swXTtcbiAgICAgICAgY29uc3QgdGFyZ2V0S2V5ZnJhbWUgPSBrZXlmcmFtZXNba2V5ZnJhbWVzLmxlbmd0aCAtIDFdO1xuICAgICAgICBjb25zdCBpc09yaWdpbkFuaW1hdGFibGUgPSBpc0FuaW1hdGFibGUodmFsdWVOYW1lLCBvcmlnaW5LZXlmcmFtZSk7XG4gICAgICAgIGNvbnN0IGlzVGFyZ2V0QW5pbWF0YWJsZSA9IGlzQW5pbWF0YWJsZSh2YWx1ZU5hbWUsIHRhcmdldEtleWZyYW1lKTtcbiAgICAgICAgd2FybmluZyhpc09yaWdpbkFuaW1hdGFibGUgPT09IGlzVGFyZ2V0QW5pbWF0YWJsZSwgYFlvdSBhcmUgdHJ5aW5nIHRvIGFuaW1hdGUgJHt2YWx1ZU5hbWV9IGZyb20gXCIke29yaWdpbktleWZyYW1lfVwiIHRvIFwiJHt0YXJnZXRLZXlmcmFtZX1cIi4gJHtvcmlnaW5LZXlmcmFtZX0gaXMgbm90IGFuIGFuaW1hdGFibGUgdmFsdWUgLSB0byBlbmFibGUgdGhpcyBhbmltYXRpb24gc2V0ICR7b3JpZ2luS2V5ZnJhbWV9IHRvIGEgdmFsdWUgYW5pbWF0YWJsZSB0byAke3RhcmdldEtleWZyYW1lfSB2aWEgdGhlIFxcYHN0eWxlXFxgIHByb3BlcnR5LmApO1xuICAgICAgICBsZXQgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGtleWZyYW1lcyxcbiAgICAgICAgICAgIHZlbG9jaXR5OiB2YWx1ZS5nZXRWZWxvY2l0eSgpLFxuICAgICAgICAgICAgZWFzZTogXCJlYXNlT3V0XCIsXG4gICAgICAgICAgICAuLi52YWx1ZVRyYW5zaXRpb24sXG4gICAgICAgICAgICBkZWxheTogLWVsYXBzZWQsXG4gICAgICAgICAgICBvblVwZGF0ZTogKHYpID0+IHtcbiAgICAgICAgICAgICAgICB2YWx1ZS5zZXQodik7XG4gICAgICAgICAgICAgICAgdmFsdWVUcmFuc2l0aW9uLm9uVXBkYXRlICYmIHZhbHVlVHJhbnNpdGlvbi5vblVwZGF0ZSh2KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIHZhbHVlVHJhbnNpdGlvbi5vbkNvbXBsZXRlICYmIHZhbHVlVHJhbnNpdGlvbi5vbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhlcmUncyBubyB0cmFuc2l0aW9uIGRlZmluZWQgZm9yIHRoaXMgdmFsdWUsIHdlIGNhbiBnZW5lcmF0ZVxuICAgICAgICAgKiB1bnFpdWUgdHJhbnNpdGlvbiBzZXR0aW5ncyBmb3IgdGhpcyB2YWx1ZS5cbiAgICAgICAgICovXG4gICAgICAgIGlmICghaXNUcmFuc2l0aW9uRGVmaW5lZCh2YWx1ZVRyYW5zaXRpb24pKSB7XG4gICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgLi4uZ2V0RGVmYXVsdFRyYW5zaXRpb24odmFsdWVOYW1lLCBvcHRpb25zKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJvdGggV0FBUEkgYW5kIG91ciBpbnRlcm5hbCBhbmltYXRpb24gZnVuY3Rpb25zIHVzZSBkdXJhdGlvbnNcbiAgICAgICAgICogYXMgZGVmaW5lZCBieSBtaWxsaXNlY29uZHMsIHdoaWxlIG91ciBleHRlcm5hbCBBUEkgZGVmaW5lcyB0aGVtXG4gICAgICAgICAqIGFzIHNlY29uZHMuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAob3B0aW9ucy5kdXJhdGlvbikge1xuICAgICAgICAgICAgb3B0aW9ucy5kdXJhdGlvbiA9IHNlY29uZHNUb01pbGxpc2Vjb25kcyhvcHRpb25zLmR1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5yZXBlYXREZWxheSkge1xuICAgICAgICAgICAgb3B0aW9ucy5yZXBlYXREZWxheSA9IHNlY29uZHNUb01pbGxpc2Vjb25kcyhvcHRpb25zLnJlcGVhdERlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzT3JpZ2luQW5pbWF0YWJsZSB8fFxuICAgICAgICAgICAgIWlzVGFyZ2V0QW5pbWF0YWJsZSB8fFxuICAgICAgICAgICAgaW5zdGFudEFuaW1hdGlvblN0YXRlLmN1cnJlbnQgfHxcbiAgICAgICAgICAgIHZhbHVlVHJhbnNpdGlvbi50eXBlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB3ZSBjYW4ndCBhbmltYXRlIHRoaXMgdmFsdWUsIG9yIHRoZSBnbG9iYWwgaW5zdGFudCBhbmltYXRpb24gZmxhZyBpcyBzZXQsXG4gICAgICAgICAgICAgKiBvciB0aGlzIGlzIHNpbXBseSBkZWZpbmVkIGFzIGFuIGluc3RhbnQgdHJhbnNpdGlvbiwgcmV0dXJuIGFuIGluc3RhbnQgdHJhbnNpdGlvbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUluc3RhbnRBbmltYXRpb24oaW5zdGFudEFuaW1hdGlvblN0YXRlLmN1cnJlbnRcbiAgICAgICAgICAgICAgICA/IHsgLi4ub3B0aW9ucywgZGVsYXk6IDAgfVxuICAgICAgICAgICAgICAgIDogb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuaW1hdGUgdmlhIFdBQVBJIGlmIHBvc3NpYmxlLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHZhbHVlLm93bmVyICYmXG4gICAgICAgICAgICB2YWx1ZS5vd25lci5jdXJyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiZcbiAgICAgICAgICAgICF2YWx1ZS5vd25lci5nZXRQcm9wcygpLm9uVXBkYXRlKSB7XG4gICAgICAgICAgICBjb25zdCBhY2NlbGVyYXRlZEFuaW1hdGlvbiA9IGNyZWF0ZUFjY2VsZXJhdGVkQW5pbWF0aW9uKHZhbHVlLCB2YWx1ZU5hbWUsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKGFjY2VsZXJhdGVkQW5pbWF0aW9uKVxuICAgICAgICAgICAgICAgIHJldHVybiBhY2NlbGVyYXRlZEFuaW1hdGlvbjtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgd2UgZGlkbid0IGNyZWF0ZSBhbiBhY2NlbGVyYXRlZCBhbmltYXRpb24sIGNyZWF0ZSBhIEpTIGFuaW1hdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIGFuaW1hdGVWYWx1ZShvcHRpb25zKTtcbiAgICB9O1xufTtcblxuZXhwb3J0IHsgYW5pbWF0ZU1vdGlvblZhbHVlIH07XG4iLCJpbXBvcnQgeyBnZXRBbmltYXRhYmxlTm9uZSB9IGZyb20gJy4uLy4uL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvYW5pbWF0YWJsZS1ub25lLm1qcyc7XG5pbXBvcnQgeyBpc0FuaW1hdGFibGUgfSBmcm9tICcuL2lzLWFuaW1hdGFibGUubWpzJztcbmltcG9ydCB7IGlzTm9uZSB9IGZyb20gJy4vaXMtbm9uZS5tanMnO1xuXG5mdW5jdGlvbiBnZXRLZXlmcmFtZXModmFsdWUsIHZhbHVlTmFtZSwgdGFyZ2V0LCB0cmFuc2l0aW9uKSB7XG4gICAgY29uc3QgaXNUYXJnZXRBbmltYXRhYmxlID0gaXNBbmltYXRhYmxlKHZhbHVlTmFtZSwgdGFyZ2V0KTtcbiAgICBsZXQga2V5ZnJhbWVzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkpIHtcbiAgICAgICAga2V5ZnJhbWVzID0gWy4uLnRhcmdldF07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBrZXlmcmFtZXMgPSBbbnVsbCwgdGFyZ2V0XTtcbiAgICB9XG4gICAgY29uc3QgZGVmYXVsdE9yaWdpbiA9IHRyYW5zaXRpb24uZnJvbSAhPT0gdW5kZWZpbmVkID8gdHJhbnNpdGlvbi5mcm9tIDogdmFsdWUuZ2V0KCk7XG4gICAgbGV0IGFuaW1hdGFibGVUZW1wbGF0ZVZhbHVlID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IG5vbmVLZXlmcmFtZUluZGV4ZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleWZyYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlsbCBudWxsL3dpbGRjYXJkIGtleWZyYW1lc1xuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGtleWZyYW1lc1tpXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAga2V5ZnJhbWVzW2ldID0gaSA9PT0gMCA/IGRlZmF1bHRPcmlnaW4gOiBrZXlmcmFtZXNbaSAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc05vbmUoa2V5ZnJhbWVzW2ldKSkge1xuICAgICAgICAgICAgbm9uZUtleWZyYW1lSW5kZXhlcy5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE86IENsZWFuIHRoaXMgY29uZGl0aW9uYWwsIGl0IHdvcmtzIGZvciBub3dcbiAgICAgICAgaWYgKHR5cGVvZiBrZXlmcmFtZXNbaV0gPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgIGtleWZyYW1lc1tpXSAhPT0gXCJub25lXCIgJiZcbiAgICAgICAgICAgIGtleWZyYW1lc1tpXSAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIGFuaW1hdGFibGVUZW1wbGF0ZVZhbHVlID0ga2V5ZnJhbWVzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc1RhcmdldEFuaW1hdGFibGUgJiZcbiAgICAgICAgbm9uZUtleWZyYW1lSW5kZXhlcy5sZW5ndGggJiZcbiAgICAgICAgYW5pbWF0YWJsZVRlbXBsYXRlVmFsdWUpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub25lS2V5ZnJhbWVJbmRleGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IG5vbmVLZXlmcmFtZUluZGV4ZXNbaV07XG4gICAgICAgICAgICBrZXlmcmFtZXNbaW5kZXhdID0gZ2V0QW5pbWF0YWJsZU5vbmUodmFsdWVOYW1lLCBhbmltYXRhYmxlVGVtcGxhdGVWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGtleWZyYW1lcztcbn1cblxuZXhwb3J0IHsgZ2V0S2V5ZnJhbWVzIH07XG4iLCJpbXBvcnQgeyBhbmltYXRlVmFsdWUgfSBmcm9tICcuL2pzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vLi4vdXRpbHMvbm9vcC5tanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW50QW5pbWF0aW9uKHsga2V5ZnJhbWVzLCBkZWxheSwgb25VcGRhdGUsIG9uQ29tcGxldGUsIH0pIHtcbiAgICBjb25zdCBzZXRWYWx1ZSA9ICgpID0+IHtcbiAgICAgICAgb25VcGRhdGUgJiYgb25VcGRhdGUoa2V5ZnJhbWVzW2tleWZyYW1lcy5sZW5ndGggLSAxXSk7XG4gICAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZSgpO1xuICAgICAgICAvKipcbiAgICAgICAgICogVE9ETzogQXMgdGhpcyBBUEkgZ3Jvd3MgaXQgY291bGQgbWFrZSBzZW5zZSB0byBhbHdheXMgcmV0dXJuXG4gICAgICAgICAqIGFuaW1hdGVWYWx1ZS4gVGhpcyB3aWxsIGJlIGEgYmlnZ2VyIHByb2plY3QgYXMgYW5pbWF0ZVZhbHVlXG4gICAgICAgICAqIGlzIGZyYW1lLWxvY2tlZCB3aGVyZWFzIHRoaXMgZnVuY3Rpb24gcmVzb2x2ZXMgaW5zdGFudGx5LlxuICAgICAgICAgKiBUaGlzIGlzIGEgYmVoYXZpb3VyYWwgY2hhbmdlIGFuZCBhbHNvIGhhcyByYW1pZmljYXRpb25zIHJlZ2FyZGluZ1xuICAgICAgICAgKiBhc3N1bXB0aW9ucyB3aXRoaW4gdGVzdHMuXG4gICAgICAgICAqL1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGltZTogMCxcbiAgICAgICAgICAgIHNwZWVkOiAxLFxuICAgICAgICAgICAgZHVyYXRpb246IDAsXG4gICAgICAgICAgICBwbGF5OiAobm9vcCksXG4gICAgICAgICAgICBwYXVzZTogKG5vb3ApLFxuICAgICAgICAgICAgc3RvcDogKG5vb3ApLFxuICAgICAgICAgICAgdGhlbjogKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhbmNlbDogKG5vb3ApLFxuICAgICAgICAgICAgY29tcGxldGU6IChub29wKSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBkZWxheVxuICAgICAgICA/IGFuaW1hdGVWYWx1ZSh7XG4gICAgICAgICAgICBrZXlmcmFtZXM6IFswLCAxXSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAwLFxuICAgICAgICAgICAgZGVsYXksXG4gICAgICAgICAgICBvbkNvbXBsZXRlOiBzZXRWYWx1ZSxcbiAgICAgICAgfSlcbiAgICAgICAgOiBzZXRWYWx1ZSgpO1xufVxuXG5leHBvcnQgeyBjcmVhdGVJbnN0YW50QW5pbWF0aW9uIH07XG4iLCJpbXBvcnQgeyBtYXBFYXNpbmdUb05hdGl2ZUVhc2luZyB9IGZyb20gJy4vZWFzaW5nLm1qcyc7XG5cbmZ1bmN0aW9uIGFuaW1hdGVTdHlsZShlbGVtZW50LCB2YWx1ZU5hbWUsIGtleWZyYW1lcywgeyBkZWxheSA9IDAsIGR1cmF0aW9uLCByZXBlYXQgPSAwLCByZXBlYXRUeXBlID0gXCJsb29wXCIsIGVhc2UsIHRpbWVzLCB9ID0ge30pIHtcbiAgICBjb25zdCBrZXlmcmFtZU9wdGlvbnMgPSB7IFt2YWx1ZU5hbWVdOiBrZXlmcmFtZXMgfTtcbiAgICBpZiAodGltZXMpXG4gICAgICAgIGtleWZyYW1lT3B0aW9ucy5vZmZzZXQgPSB0aW1lcztcbiAgICBjb25zdCBlYXNpbmcgPSBtYXBFYXNpbmdUb05hdGl2ZUVhc2luZyhlYXNlKTtcbiAgICAvKipcbiAgICAgKiBJZiB0aGlzIGlzIGFuIGVhc2luZyBhcnJheSwgYXBwbHkgdG8ga2V5ZnJhbWVzLCBub3QgYW5pbWF0aW9uIGFzIGEgd2hvbGVcbiAgICAgKi9cbiAgICBpZiAoQXJyYXkuaXNBcnJheShlYXNpbmcpKVxuICAgICAgICBrZXlmcmFtZU9wdGlvbnMuZWFzaW5nID0gZWFzaW5nO1xuICAgIHJldHVybiBlbGVtZW50LmFuaW1hdGUoa2V5ZnJhbWVPcHRpb25zLCB7XG4gICAgICAgIGRlbGF5LFxuICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgZWFzaW5nOiAhQXJyYXkuaXNBcnJheShlYXNpbmcpID8gZWFzaW5nIDogXCJsaW5lYXJcIixcbiAgICAgICAgZmlsbDogXCJib3RoXCIsXG4gICAgICAgIGl0ZXJhdGlvbnM6IHJlcGVhdCArIDEsXG4gICAgICAgIGRpcmVjdGlvbjogcmVwZWF0VHlwZSA9PT0gXCJyZXZlcnNlXCIgPyBcImFsdGVybmF0ZVwiIDogXCJub3JtYWxcIixcbiAgICB9KTtcbn1cblxuZXhwb3J0IHsgYW5pbWF0ZVN0eWxlIH07XG4iLCJmdW5jdGlvbiBnZXRGaW5hbEtleWZyYW1lKGtleWZyYW1lcywgeyByZXBlYXQsIHJlcGVhdFR5cGUgPSBcImxvb3BcIiB9KSB7XG4gICAgY29uc3QgaW5kZXggPSByZXBlYXQgJiYgcmVwZWF0VHlwZSAhPT0gXCJsb29wXCIgJiYgcmVwZWF0ICUgMiA9PT0gMVxuICAgICAgICA/IDBcbiAgICAgICAgOiBrZXlmcmFtZXMubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4ga2V5ZnJhbWVzW2luZGV4XTtcbn1cblxuZXhwb3J0IHsgZ2V0RmluYWxLZXlmcmFtZSB9O1xuIiwiaW1wb3J0IHsgaXNNb3Rpb25WYWx1ZSB9IGZyb20gJy4uL3V0aWxzL2lzLW1vdGlvbi12YWx1ZS5tanMnO1xuXG5mdW5jdGlvbiBpc1dpbGxDaGFuZ2VNb3Rpb25WYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiBCb29sZWFuKGlzTW90aW9uVmFsdWUodmFsdWUpICYmIHZhbHVlLmFkZCk7XG59XG5cbmV4cG9ydCB7IGlzV2lsbENoYW5nZU1vdGlvblZhbHVlIH07XG4iLCIvKipcbiAqIENoZWNrIGlmIHZhbHVlIGlzIGEgbnVtZXJpY2FsIHN0cmluZywgaWUgYSBzdHJpbmcgdGhhdCBpcyBwdXJlbHkgYSBudW1iZXIgZWcgXCIxMDBcIiBvciBcIi0xMDAuMVwiXG4gKi9cbmNvbnN0IGlzTnVtZXJpY2FsU3RyaW5nID0gKHYpID0+IC9eXFwtP1xcZCpcXC4/XFxkKyQvLnRlc3Qodik7XG5cbmV4cG9ydCB7IGlzTnVtZXJpY2FsU3RyaW5nIH07XG4iLCJmdW5jdGlvbiBhZGRVbmlxdWVJdGVtKGFyciwgaXRlbSkge1xuICAgIGlmIChhcnIuaW5kZXhPZihpdGVtKSA9PT0gLTEpXG4gICAgICAgIGFyci5wdXNoKGl0ZW0pO1xufVxuZnVuY3Rpb24gcmVtb3ZlSXRlbShhcnIsIGl0ZW0pIHtcbiAgICBjb25zdCBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgIGlmIChpbmRleCA+IC0xKVxuICAgICAgICBhcnIuc3BsaWNlKGluZGV4LCAxKTtcbn1cbi8vIEFkYXB0ZWQgZnJvbSBhcnJheS1tb3ZlXG5mdW5jdGlvbiBtb3ZlSXRlbShbLi4uYXJyXSwgZnJvbUluZGV4LCB0b0luZGV4KSB7XG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IGZyb21JbmRleCA8IDAgPyBhcnIubGVuZ3RoICsgZnJvbUluZGV4IDogZnJvbUluZGV4O1xuICAgIGlmIChzdGFydEluZGV4ID49IDAgJiYgc3RhcnRJbmRleCA8IGFyci5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgZW5kSW5kZXggPSB0b0luZGV4IDwgMCA/IGFyci5sZW5ndGggKyB0b0luZGV4IDogdG9JbmRleDtcbiAgICAgICAgY29uc3QgW2l0ZW1dID0gYXJyLnNwbGljZShmcm9tSW5kZXgsIDEpO1xuICAgICAgICBhcnIuc3BsaWNlKGVuZEluZGV4LCAwLCBpdGVtKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbn1cblxuZXhwb3J0IHsgYWRkVW5pcXVlSXRlbSwgbW92ZUl0ZW0sIHJlbW92ZUl0ZW0gfTtcbiIsImltcG9ydCB7IGFkZFVuaXF1ZUl0ZW0sIHJlbW92ZUl0ZW0gfSBmcm9tICcuL2FycmF5Lm1qcyc7XG5cbmNsYXNzIFN1YnNjcmlwdGlvbk1hbmFnZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBbXTtcbiAgICB9XG4gICAgYWRkKGhhbmRsZXIpIHtcbiAgICAgICAgYWRkVW5pcXVlSXRlbSh0aGlzLnN1YnNjcmlwdGlvbnMsIGhhbmRsZXIpO1xuICAgICAgICByZXR1cm4gKCkgPT4gcmVtb3ZlSXRlbSh0aGlzLnN1YnNjcmlwdGlvbnMsIGhhbmRsZXIpO1xuICAgIH1cbiAgICBub3RpZnkoYSwgYiwgYykge1xuICAgICAgICBjb25zdCBudW1TdWJzY3JpcHRpb25zID0gdGhpcy5zdWJzY3JpcHRpb25zLmxlbmd0aDtcbiAgICAgICAgaWYgKCFudW1TdWJzY3JpcHRpb25zKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAobnVtU3Vic2NyaXB0aW9ucyA9PT0gMSkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGVyZSdzIG9ubHkgYSBzaW5nbGUgaGFuZGxlciB3ZSBjYW4ganVzdCBjYWxsIGl0IHdpdGhvdXQgaW52b2tpbmcgYSBsb29wLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnNbMF0oYSwgYiwgYyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVN1YnNjcmlwdGlvbnM7IGkrKykge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIENoZWNrIHdoZXRoZXIgdGhlIGhhbmRsZXIgZXhpc3RzIGJlZm9yZSBmaXJpbmcgYXMgaXQncyBwb3NzaWJsZVxuICAgICAgICAgICAgICAgICAqIHRoZSBzdWJzY3JpcHRpb25zIHdlcmUgbW9kaWZpZWQgZHVyaW5nIHRoaXMgbG9vcCBydW5uaW5nLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLnN1YnNjcmlwdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgaGFuZGxlciAmJiBoYW5kbGVyKGEsIGIsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldFNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN1YnNjcmlwdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmxlbmd0aCA9IDA7XG4gICAgfVxufVxuXG5leHBvcnQgeyBTdWJzY3JpcHRpb25NYW5hZ2VyIH07XG4iLCJpbXBvcnQgeyBTdWJzY3JpcHRpb25NYW5hZ2VyIH0gZnJvbSAnLi4vdXRpbHMvc3Vic2NyaXB0aW9uLW1hbmFnZXIubWpzJztcbmltcG9ydCB7IHZlbG9jaXR5UGVyU2Vjb25kIH0gZnJvbSAnLi4vdXRpbHMvdmVsb2NpdHktcGVyLXNlY29uZC5tanMnO1xuaW1wb3J0IHsgd2Fybk9uY2UgfSBmcm9tICcuLi91dGlscy93YXJuLW9uY2UubWpzJztcbmltcG9ydCB7IGZyYW1lLCBmcmFtZURhdGEgfSBmcm9tICcuLi9mcmFtZWxvb3AvZnJhbWUubWpzJztcblxuY29uc3QgaXNGbG9hdCA9ICh2YWx1ZSkgPT4ge1xuICAgIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpO1xufTtcbmNvbnN0IGNvbGxlY3RNb3Rpb25WYWx1ZXMgPSB7XG4gICAgY3VycmVudDogdW5kZWZpbmVkLFxufTtcbi8qKlxuICogYE1vdGlvblZhbHVlYCBpcyB1c2VkIHRvIHRyYWNrIHRoZSBzdGF0ZSBhbmQgdmVsb2NpdHkgb2YgbW90aW9uIHZhbHVlcy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIE1vdGlvblZhbHVlIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gaW5pdCAtIFRoZSBpbml0aWF0aW5nIHZhbHVlXG4gICAgICogQHBhcmFtIGNvbmZpZyAtIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb3B0aW9uc1xuICAgICAqXG4gICAgICogLSAgYHRyYW5zZm9ybWVyYDogQSBmdW5jdGlvbiB0byB0cmFuc2Zvcm0gaW5jb21pbmcgdmFsdWVzIHdpdGguXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihpbml0LCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgd2lsbCBiZSByZXBsYWNlZCBieSB0aGUgYnVpbGQgc3RlcCB3aXRoIHRoZSBsYXRlc3QgdmVyc2lvbiBudW1iZXIuXG4gICAgICAgICAqIFdoZW4gTW90aW9uVmFsdWVzIGFyZSBwcm92aWRlZCB0byBtb3Rpb24gY29tcG9uZW50cywgd2FybiBpZiB2ZXJzaW9ucyBhcmUgbWl4ZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnZlcnNpb24gPSBcIjEwLjE2LjRcIjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIER1cmF0aW9uLCBpbiBtaWxsaXNlY29uZHMsIHNpbmNlIGxhc3QgdXBkYXRpbmcgZnJhbWUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50aW1lRGVsdGEgPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGltZXN0YW1wIG9mIHRoZSBsYXN0IHRpbWUgdGhpcyBgTW90aW9uVmFsdWVgIHdhcyB1cGRhdGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubGFzdFVwZGF0ZWQgPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogVHJhY2tzIHdoZXRoZXIgdGhpcyB2YWx1ZSBjYW4gb3V0cHV0IGEgdmVsb2NpdHkuIEN1cnJlbnRseSB0aGlzIGlzIG9ubHkgdHJ1ZVxuICAgICAgICAgKiBpZiB0aGUgdmFsdWUgaXMgbnVtZXJpY2FsLCBidXQgd2UgbWlnaHQgYmUgYWJsZSB0byB3aWRlbiB0aGUgc2NvcGUgaGVyZSBhbmQgc3VwcG9ydFxuICAgICAgICAgKiBvdGhlciB2YWx1ZSB0eXBlcy5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNhblRyYWNrVmVsb2NpdHkgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIG9iamVjdCBjb250YWluaW5nIGEgU3Vic2NyaXB0aW9uTWFuYWdlciBmb3IgZWFjaCBhY3RpdmUgZXZlbnQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmV2ZW50cyA9IHt9O1xuICAgICAgICB0aGlzLnVwZGF0ZUFuZE5vdGlmeSA9ICh2LCByZW5kZXIgPSB0cnVlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnByZXYgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSB2O1xuICAgICAgICAgICAgLy8gVXBkYXRlIHRpbWVzdGFtcFxuICAgICAgICAgICAgY29uc3QgeyBkZWx0YSwgdGltZXN0YW1wIH0gPSBmcmFtZURhdGE7XG4gICAgICAgICAgICBpZiAodGhpcy5sYXN0VXBkYXRlZCAhPT0gdGltZXN0YW1wKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50aW1lRGVsdGEgPSBkZWx0YTtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RVcGRhdGVkID0gdGltZXN0YW1wO1xuICAgICAgICAgICAgICAgIGZyYW1lLnBvc3RSZW5kZXIodGhpcy5zY2hlZHVsZVZlbG9jaXR5Q2hlY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXBkYXRlIHVwZGF0ZSBzdWJzY3JpYmVyc1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiAhPT0gdGhpcy5jdXJyZW50ICYmIHRoaXMuZXZlbnRzLmNoYW5nZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzLmNoYW5nZS5ub3RpZnkodGhpcy5jdXJyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB2ZWxvY2l0eSBzdWJzY3JpYmVyc1xuICAgICAgICAgICAgaWYgKHRoaXMuZXZlbnRzLnZlbG9jaXR5Q2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudHMudmVsb2NpdHlDaGFuZ2Uubm90aWZ5KHRoaXMuZ2V0VmVsb2NpdHkoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVcGRhdGUgcmVuZGVyIHN1YnNjcmliZXJzXG4gICAgICAgICAgICBpZiAocmVuZGVyICYmIHRoaXMuZXZlbnRzLnJlbmRlclJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cy5yZW5kZXJSZXF1ZXN0Lm5vdGlmeSh0aGlzLmN1cnJlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogU2NoZWR1bGUgYSB2ZWxvY2l0eSBjaGVjayBmb3IgdGhlIG5leHQgZnJhbWUuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgaXMgYW4gaW5zdGFuY2VkIGFuZCBib3VuZCBmdW5jdGlvbiB0byBwcmV2ZW50IGdlbmVyYXRpbmcgYSBuZXdcbiAgICAgICAgICogZnVuY3Rpb24gb25jZSBwZXIgZnJhbWUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zY2hlZHVsZVZlbG9jaXR5Q2hlY2sgPSAoKSA9PiBmcmFtZS5wb3N0UmVuZGVyKHRoaXMudmVsb2NpdHlDaGVjayk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVcGRhdGVzIGBwcmV2YCB3aXRoIGBjdXJyZW50YCBpZiB0aGUgdmFsdWUgaGFzbid0IGJlZW4gdXBkYXRlZCB0aGlzIGZyYW1lLlxuICAgICAgICAgKiBUaGlzIGVuc3VyZXMgdmVsb2NpdHkgY2FsY3VsYXRpb25zIHJldHVybiBgMGAuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgaXMgYW4gaW5zdGFuY2VkIGFuZCBib3VuZCBmdW5jdGlvbiB0byBwcmV2ZW50IGdlbmVyYXRpbmcgYSBuZXdcbiAgICAgICAgICogZnVuY3Rpb24gb25jZSBwZXIgZnJhbWUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52ZWxvY2l0eUNoZWNrID0gKHsgdGltZXN0YW1wIH0pID0+IHtcbiAgICAgICAgICAgIGlmICh0aW1lc3RhbXAgIT09IHRoaXMubGFzdFVwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByZXYgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZXZlbnRzLnZlbG9jaXR5Q2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzLnZlbG9jaXR5Q2hhbmdlLm5vdGlmeSh0aGlzLmdldFZlbG9jaXR5KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYXNBbmltYXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByZXYgPSB0aGlzLmN1cnJlbnQgPSBpbml0O1xuICAgICAgICB0aGlzLmNhblRyYWNrVmVsb2NpdHkgPSBpc0Zsb2F0KHRoaXMuY3VycmVudCk7XG4gICAgICAgIHRoaXMub3duZXIgPSBvcHRpb25zLm93bmVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIG5vdGlmaWVkIHdoZW4gdGhlIGBNb3Rpb25WYWx1ZWAgaXMgdXBkYXRlZC5cbiAgICAgKlxuICAgICAqIEl0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCwgd2lsbCBjYW5jZWwgdGhlIHN1YnNjcmlwdGlvbi5cbiAgICAgKlxuICAgICAqIFdoZW4gY2FsbGluZyBgb25DaGFuZ2VgIGluc2lkZSBhIFJlYWN0IGNvbXBvbmVudCwgaXQgc2hvdWxkIGJlIHdyYXBwZWQgd2l0aCB0aGVcbiAgICAgKiBgdXNlRWZmZWN0YCBob29rLiBBcyBpdCByZXR1cm5zIGFuIHVuc3Vic2NyaWJlIGZ1bmN0aW9uLCB0aGlzIHNob3VsZCBiZSByZXR1cm5lZFxuICAgICAqIGZyb20gdGhlIGB1c2VFZmZlY3RgIGZ1bmN0aW9uIHRvIGVuc3VyZSB5b3UgZG9uJ3QgYWRkIGR1cGxpY2F0ZSBzdWJzY3JpYmVycy4uXG4gICAgICpcbiAgICAgKiBgYGBqc3hcbiAgICAgKiBleHBvcnQgY29uc3QgTXlDb21wb25lbnQgPSAoKSA9PiB7XG4gICAgICogICBjb25zdCB4ID0gdXNlTW90aW9uVmFsdWUoMClcbiAgICAgKiAgIGNvbnN0IHkgPSB1c2VNb3Rpb25WYWx1ZSgwKVxuICAgICAqICAgY29uc3Qgb3BhY2l0eSA9IHVzZU1vdGlvblZhbHVlKDEpXG4gICAgICpcbiAgICAgKiAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICogICAgIGZ1bmN0aW9uIHVwZGF0ZU9wYWNpdHkoKSB7XG4gICAgICogICAgICAgY29uc3QgbWF4WFkgPSBNYXRoLm1heCh4LmdldCgpLCB5LmdldCgpKVxuICAgICAqICAgICAgIGNvbnN0IG5ld09wYWNpdHkgPSB0cmFuc2Zvcm0obWF4WFksIFswLCAxMDBdLCBbMSwgMF0pXG4gICAgICogICAgICAgb3BhY2l0eS5zZXQobmV3T3BhY2l0eSlcbiAgICAgKiAgICAgfVxuICAgICAqXG4gICAgICogICAgIGNvbnN0IHVuc3Vic2NyaWJlWCA9IHgub24oXCJjaGFuZ2VcIiwgdXBkYXRlT3BhY2l0eSlcbiAgICAgKiAgICAgY29uc3QgdW5zdWJzY3JpYmVZID0geS5vbihcImNoYW5nZVwiLCB1cGRhdGVPcGFjaXR5KVxuICAgICAqXG4gICAgICogICAgIHJldHVybiAoKSA9PiB7XG4gICAgICogICAgICAgdW5zdWJzY3JpYmVYKClcbiAgICAgKiAgICAgICB1bnN1YnNjcmliZVkoKVxuICAgICAqICAgICB9XG4gICAgICogICB9LCBbXSlcbiAgICAgKlxuICAgICAqICAgcmV0dXJuIDxtb3Rpb24uZGl2IHN0eWxlPXt7IHggfX0gLz5cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3Vic2NyaWJlciAtIEEgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyB0aGUgbGF0ZXN0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsIHdpbGwgY2FuY2VsIHRoaXMgc3Vic2NyaXB0aW9uLlxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBvbkNoYW5nZShzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgd2Fybk9uY2UoZmFsc2UsIGB2YWx1ZS5vbkNoYW5nZShjYWxsYmFjaykgaXMgZGVwcmVjYXRlZC4gU3dpdGNoIHRvIHZhbHVlLm9uKFwiY2hhbmdlXCIsIGNhbGxiYWNrKS5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5vbihcImNoYW5nZVwiLCBzdWJzY3JpcHRpb24pO1xuICAgIH1cbiAgICBvbihldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghdGhpcy5ldmVudHNbZXZlbnROYW1lXSkge1xuICAgICAgICAgICAgdGhpcy5ldmVudHNbZXZlbnROYW1lXSA9IG5ldyBTdWJzY3JpcHRpb25NYW5hZ2VyKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdW5zdWJzY3JpYmUgPSB0aGlzLmV2ZW50c1tldmVudE5hbWVdLmFkZChjYWxsYmFjayk7XG4gICAgICAgIGlmIChldmVudE5hbWUgPT09IFwiY2hhbmdlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBJZiB3ZSBoYXZlIG5vIG1vcmUgY2hhbmdlIGxpc3RlbmVycyBieSB0aGUgc3RhcnRcbiAgICAgICAgICAgICAgICAgKiBvZiB0aGUgbmV4dCBmcmFtZSwgc3RvcCBhY3RpdmUgYW5pbWF0aW9ucy5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBmcmFtZS5yZWFkKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmV2ZW50cy5jaGFuZ2UuZ2V0U2l6ZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5zdWJzY3JpYmU7XG4gICAgfVxuICAgIGNsZWFyTGlzdGVuZXJzKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGV2ZW50TWFuYWdlcnMgaW4gdGhpcy5ldmVudHMpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50TWFuYWdlcnNdLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQXR0YWNoZXMgYSBwYXNzaXZlIGVmZmVjdCB0byB0aGUgYE1vdGlvblZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGF0dGFjaChwYXNzaXZlRWZmZWN0LCBzdG9wUGFzc2l2ZUVmZmVjdCkge1xuICAgICAgICB0aGlzLnBhc3NpdmVFZmZlY3QgPSBwYXNzaXZlRWZmZWN0O1xuICAgICAgICB0aGlzLnN0b3BQYXNzaXZlRWZmZWN0ID0gc3RvcFBhc3NpdmVFZmZlY3Q7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHN0YXRlIG9mIHRoZSBgTW90aW9uVmFsdWVgLlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKlxuICAgICAqIGBgYGpzeFxuICAgICAqIGNvbnN0IHggPSB1c2VNb3Rpb25WYWx1ZSgwKVxuICAgICAqIHguc2V0KDEwKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGxhdGVzdCAtIExhdGVzdCB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHJlbmRlciAtIFdoZXRoZXIgdG8gbm90aWZ5IHJlbmRlciBzdWJzY3JpYmVycy4gRGVmYXVsdHMgdG8gYHRydWVgXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgc2V0KHYsIHJlbmRlciA9IHRydWUpIHtcbiAgICAgICAgaWYgKCFyZW5kZXIgfHwgIXRoaXMucGFzc2l2ZUVmZmVjdCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVBbmROb3RpZnkodiwgcmVuZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGFzc2l2ZUVmZmVjdCh2LCB0aGlzLnVwZGF0ZUFuZE5vdGlmeSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0V2l0aFZlbG9jaXR5KHByZXYsIGN1cnJlbnQsIGRlbHRhKSB7XG4gICAgICAgIHRoaXMuc2V0KGN1cnJlbnQpO1xuICAgICAgICB0aGlzLnByZXYgPSBwcmV2O1xuICAgICAgICB0aGlzLnRpbWVEZWx0YSA9IGRlbHRhO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHN0YXRlIG9mIHRoZSBgTW90aW9uVmFsdWVgLCBzdG9wcGluZyBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsXG4gICAgICogZWZmZWN0cywgYW5kIHJlc2V0cyB2ZWxvY2l0eSB0byBgMGAuXG4gICAgICovXG4gICAganVtcCh2KSB7XG4gICAgICAgIHRoaXMudXBkYXRlQW5kTm90aWZ5KHYpO1xuICAgICAgICB0aGlzLnByZXYgPSB2O1xuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgaWYgKHRoaXMuc3RvcFBhc3NpdmVFZmZlY3QpXG4gICAgICAgICAgICB0aGlzLnN0b3BQYXNzaXZlRWZmZWN0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxhdGVzdCBzdGF0ZSBvZiBgTW90aW9uVmFsdWVgXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyAtIFRoZSBsYXRlc3Qgc3RhdGUgb2YgYE1vdGlvblZhbHVlYFxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGdldCgpIHtcbiAgICAgICAgaWYgKGNvbGxlY3RNb3Rpb25WYWx1ZXMuY3VycmVudCkge1xuICAgICAgICAgICAgY29sbGVjdE1vdGlvblZhbHVlcy5jdXJyZW50LnB1c2godGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGdldFByZXZpb3VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmV2O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsYXRlc3QgdmVsb2NpdHkgb2YgYE1vdGlvblZhbHVlYFxuICAgICAqXG4gICAgICogQHJldHVybnMgLSBUaGUgbGF0ZXN0IHZlbG9jaXR5IG9mIGBNb3Rpb25WYWx1ZWAuIFJldHVybnMgYDBgIGlmIHRoZSBzdGF0ZSBpcyBub24tbnVtZXJpY2FsLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGdldFZlbG9jaXR5KCkge1xuICAgICAgICAvLyBUaGlzIGNvdWxkIGJlIGlzRmxvYXQodGhpcy5wcmV2KSAmJiBpc0Zsb2F0KHRoaXMuY3VycmVudCksIGJ1dCB0aGF0IHdvdWxkIGJlIHdhc3RlZnVsXG4gICAgICAgIHJldHVybiB0aGlzLmNhblRyYWNrVmVsb2NpdHlcbiAgICAgICAgICAgID8gLy8gVGhlc2UgY2FzdHMgY291bGQgYmUgYXZvaWRlZCBpZiBwYXJzZUZsb2F0IHdvdWxkIGJlIHR5cGVkIGJldHRlclxuICAgICAgICAgICAgICAgIHZlbG9jaXR5UGVyU2Vjb25kKHBhcnNlRmxvYXQodGhpcy5jdXJyZW50KSAtXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQodGhpcy5wcmV2KSwgdGhpcy50aW1lRGVsdGEpXG4gICAgICAgICAgICA6IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIG5ldyBhbmltYXRpb24gdG8gY29udHJvbCB0aGlzIGBNb3Rpb25WYWx1ZWAuIE9ubHkgb25lXG4gICAgICogYW5pbWF0aW9uIGNhbiBkcml2ZSBhIGBNb3Rpb25WYWx1ZWAgYXQgb25lIHRpbWUuXG4gICAgICpcbiAgICAgKiBgYGBqc3hcbiAgICAgKiB2YWx1ZS5zdGFydCgpXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYW5pbWF0aW9uIC0gQSBmdW5jdGlvbiB0aGF0IHN0YXJ0cyB0aGUgcHJvdmlkZWQgYW5pbWF0aW9uXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBzdGFydChzdGFydEFuaW1hdGlvbikge1xuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmhhc0FuaW1hdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uID0gc3RhcnRBbmltYXRpb24ocmVzb2x2ZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5ldmVudHMuYW5pbWF0aW9uU3RhcnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cy5hbmltYXRpb25TdGFydC5ub3RpZnkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5ldmVudHMuYW5pbWF0aW9uQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cy5hbmltYXRpb25Db21wbGV0ZS5ub3RpZnkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2xlYXJBbmltYXRpb24oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0b3AgdGhlIGN1cnJlbnRseSBhY3RpdmUgYW5pbWF0aW9uLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHN0b3AoKSB7XG4gICAgICAgIGlmICh0aGlzLmFuaW1hdGlvbikge1xuICAgICAgICAgICAgdGhpcy5hbmltYXRpb24uc3RvcCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZXZlbnRzLmFuaW1hdGlvbkNhbmNlbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzLmFuaW1hdGlvbkNhbmNlbC5ub3RpZnkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsZWFyQW5pbWF0aW9uKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIHRoaXMgdmFsdWUgaXMgY3VycmVudGx5IGFuaW1hdGluZy5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBpc0FuaW1hdGluZygpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5hbmltYXRpb247XG4gICAgfVxuICAgIGNsZWFyQW5pbWF0aW9uKCkge1xuICAgICAgICBkZWxldGUgdGhpcy5hbmltYXRpb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgYW5kIGNsZWFuIHVwIHN1YnNjcmliZXJzIHRvIHRoaXMgYE1vdGlvblZhbHVlYC5cbiAgICAgKlxuICAgICAqIFRoZSBgTW90aW9uVmFsdWVgIGhvb2tzIGxpa2UgYHVzZU1vdGlvblZhbHVlYCBhbmQgYHVzZVRyYW5zZm9ybWAgYXV0b21hdGljYWxseVxuICAgICAqIGhhbmRsZSB0aGUgbGlmZWN5Y2xlIG9mIHRoZSByZXR1cm5lZCBgTW90aW9uVmFsdWVgLCBzbyB0aGlzIG1ldGhvZCBpcyBvbmx5IG5lY2Vzc2FyeSBpZiB5b3UndmUgbWFudWFsbHlcbiAgICAgKiBjcmVhdGVkIGEgYE1vdGlvblZhbHVlYCB2aWEgdGhlIGBtb3Rpb25WYWx1ZWAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5jbGVhckxpc3RlbmVycygpO1xuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgaWYgKHRoaXMuc3RvcFBhc3NpdmVFZmZlY3QpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcFBhc3NpdmVFZmZlY3QoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIG1vdGlvblZhbHVlKGluaXQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IE1vdGlvblZhbHVlKGluaXQsIG9wdGlvbnMpO1xufVxuXG5leHBvcnQgeyBNb3Rpb25WYWx1ZSwgY29sbGVjdE1vdGlvblZhbHVlcywgbW90aW9uVmFsdWUgfTtcbiIsIi8qKlxuICogVGVzdHMgYSBwcm92aWRlZCB2YWx1ZSBhZ2FpbnN0IGEgVmFsdWVUeXBlXG4gKi9cbmNvbnN0IHRlc3RWYWx1ZVR5cGUgPSAodikgPT4gKHR5cGUpID0+IHR5cGUudGVzdCh2KTtcblxuZXhwb3J0IHsgdGVzdFZhbHVlVHlwZSB9O1xuIiwiaW1wb3J0IHsgbnVtYmVyIH0gZnJvbSAnLi4vLi4vLi4vdmFsdWUvdHlwZXMvbnVtYmVycy9pbmRleC5tanMnO1xuaW1wb3J0IHsgcHgsIHBlcmNlbnQsIGRlZ3JlZXMsIHZ3LCB2aCB9IGZyb20gJy4uLy4uLy4uL3ZhbHVlL3R5cGVzL251bWJlcnMvdW5pdHMubWpzJztcbmltcG9ydCB7IHRlc3RWYWx1ZVR5cGUgfSBmcm9tICcuL3Rlc3QubWpzJztcbmltcG9ydCB7IGF1dG8gfSBmcm9tICcuL3R5cGUtYXV0by5tanMnO1xuXG4vKipcbiAqIEEgbGlzdCBvZiB2YWx1ZSB0eXBlcyBjb21tb25seSB1c2VkIGZvciBkaW1lbnNpb25zXG4gKi9cbmNvbnN0IGRpbWVuc2lvblZhbHVlVHlwZXMgPSBbbnVtYmVyLCBweCwgcGVyY2VudCwgZGVncmVlcywgdncsIHZoLCBhdXRvXTtcbi8qKlxuICogVGVzdHMgYSBkaW1lbnNpb25hbCB2YWx1ZSBhZ2FpbnN0IHRoZSBsaXN0IG9mIGRpbWVuc2lvbiBWYWx1ZVR5cGVzXG4gKi9cbmNvbnN0IGZpbmREaW1lbnNpb25WYWx1ZVR5cGUgPSAodikgPT4gZGltZW5zaW9uVmFsdWVUeXBlcy5maW5kKHRlc3RWYWx1ZVR5cGUodikpO1xuXG5leHBvcnQgeyBkaW1lbnNpb25WYWx1ZVR5cGVzLCBmaW5kRGltZW5zaW9uVmFsdWVUeXBlIH07XG4iLCIvKipcbiAqIFZhbHVlVHlwZSBmb3IgXCJhdXRvXCJcbiAqL1xuY29uc3QgYXV0byA9IHtcbiAgICB0ZXN0OiAodikgPT4gdiA9PT0gXCJhdXRvXCIsXG4gICAgcGFyc2U6ICh2KSA9PiB2LFxufTtcblxuZXhwb3J0IHsgYXV0byB9O1xuIiwiaW1wb3J0IHsgY29sb3IgfSBmcm9tICcuLi8uLi8uLi92YWx1ZS90eXBlcy9jb2xvci9pbmRleC5tanMnO1xuaW1wb3J0IHsgY29tcGxleCB9IGZyb20gJy4uLy4uLy4uL3ZhbHVlL3R5cGVzL2NvbXBsZXgvaW5kZXgubWpzJztcbmltcG9ydCB7IGRpbWVuc2lvblZhbHVlVHlwZXMgfSBmcm9tICcuL2RpbWVuc2lvbnMubWpzJztcbmltcG9ydCB7IHRlc3RWYWx1ZVR5cGUgfSBmcm9tICcuL3Rlc3QubWpzJztcblxuLyoqXG4gKiBBIGxpc3Qgb2YgYWxsIFZhbHVlVHlwZXNcbiAqL1xuY29uc3QgdmFsdWVUeXBlcyA9IFsuLi5kaW1lbnNpb25WYWx1ZVR5cGVzLCBjb2xvciwgY29tcGxleF07XG4vKipcbiAqIFRlc3RzIGEgdmFsdWUgYWdhaW5zdCB0aGUgbGlzdCBvZiBWYWx1ZVR5cGVzXG4gKi9cbmNvbnN0IGZpbmRWYWx1ZVR5cGUgPSAodikgPT4gdmFsdWVUeXBlcy5maW5kKHRlc3RWYWx1ZVR5cGUodikpO1xuXG5leHBvcnQgeyBmaW5kVmFsdWVUeXBlIH07XG4iLCJpbXBvcnQgeyBpc051bWVyaWNhbFN0cmluZyB9IGZyb20gJy4uLy4uL3V0aWxzL2lzLW51bWVyaWNhbC1zdHJpbmcubWpzJztcbmltcG9ydCB7IGlzWmVyb1ZhbHVlU3RyaW5nIH0gZnJvbSAnLi4vLi4vdXRpbHMvaXMtemVyby12YWx1ZS1zdHJpbmcubWpzJztcbmltcG9ydCB7IHJlc29sdmVGaW5hbFZhbHVlSW5LZXlmcmFtZXMgfSBmcm9tICcuLi8uLi91dGlscy9yZXNvbHZlLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyBtb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uL3ZhbHVlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBjb21wbGV4IH0gZnJvbSAnLi4vLi4vdmFsdWUvdHlwZXMvY29tcGxleC9pbmRleC5tanMnO1xuaW1wb3J0IHsgZ2V0QW5pbWF0YWJsZU5vbmUgfSBmcm9tICcuLi9kb20vdmFsdWUtdHlwZXMvYW5pbWF0YWJsZS1ub25lLm1qcyc7XG5pbXBvcnQgeyBmaW5kVmFsdWVUeXBlIH0gZnJvbSAnLi4vZG9tL3ZhbHVlLXR5cGVzL2ZpbmQubWpzJztcbmltcG9ydCB7IHJlc29sdmVWYXJpYW50IH0gZnJvbSAnLi9yZXNvbHZlLWR5bmFtaWMtdmFyaWFudHMubWpzJztcblxuLyoqXG4gKiBTZXQgVmlzdWFsRWxlbWVudCdzIE1vdGlvblZhbHVlLCBjcmVhdGluZyBhIG5ldyBNb3Rpb25WYWx1ZSBmb3IgaXQgaWZcbiAqIGl0IGRvZXNuJ3QgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIHNldE1vdGlvblZhbHVlKHZpc3VhbEVsZW1lbnQsIGtleSwgdmFsdWUpIHtcbiAgICBpZiAodmlzdWFsRWxlbWVudC5oYXNWYWx1ZShrZXkpKSB7XG4gICAgICAgIHZpc3VhbEVsZW1lbnQuZ2V0VmFsdWUoa2V5KS5zZXQodmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmlzdWFsRWxlbWVudC5hZGRWYWx1ZShrZXksIG1vdGlvblZhbHVlKHZhbHVlKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0VGFyZ2V0KHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24pIHtcbiAgICBjb25zdCByZXNvbHZlZCA9IHJlc29sdmVWYXJpYW50KHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24pO1xuICAgIGxldCB7IHRyYW5zaXRpb25FbmQgPSB7fSwgdHJhbnNpdGlvbiA9IHt9LCAuLi50YXJnZXQgfSA9IHJlc29sdmVkID8gdmlzdWFsRWxlbWVudC5tYWtlVGFyZ2V0QW5pbWF0YWJsZShyZXNvbHZlZCwgZmFsc2UpIDoge307XG4gICAgdGFyZ2V0ID0geyAuLi50YXJnZXQsIC4uLnRyYW5zaXRpb25FbmQgfTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0YXJnZXQpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSByZXNvbHZlRmluYWxWYWx1ZUluS2V5ZnJhbWVzKHRhcmdldFtrZXldKTtcbiAgICAgICAgc2V0TW90aW9uVmFsdWUodmlzdWFsRWxlbWVudCwga2V5LCB2YWx1ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0VmFyaWFudHModmlzdWFsRWxlbWVudCwgdmFyaWFudExhYmVscykge1xuICAgIGNvbnN0IHJldmVyc2VkTGFiZWxzID0gWy4uLnZhcmlhbnRMYWJlbHNdLnJldmVyc2UoKTtcbiAgICByZXZlcnNlZExhYmVscy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgY29uc3QgdmFyaWFudCA9IHZpc3VhbEVsZW1lbnQuZ2V0VmFyaWFudChrZXkpO1xuICAgICAgICB2YXJpYW50ICYmIHNldFRhcmdldCh2aXN1YWxFbGVtZW50LCB2YXJpYW50KTtcbiAgICAgICAgaWYgKHZpc3VhbEVsZW1lbnQudmFyaWFudENoaWxkcmVuKSB7XG4gICAgICAgICAgICB2aXN1YWxFbGVtZW50LnZhcmlhbnRDaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldFZhcmlhbnRzKGNoaWxkLCB2YXJpYW50TGFiZWxzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiBzZXRWYWx1ZXModmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGRlZmluaXRpb24pKSB7XG4gICAgICAgIHJldHVybiBzZXRWYXJpYW50cyh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGRlZmluaXRpb24gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHNldFZhcmlhbnRzKHZpc3VhbEVsZW1lbnQsIFtkZWZpbml0aW9uXSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzZXRUYXJnZXQodmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbik7XG4gICAgfVxufVxuZnVuY3Rpb24gY2hlY2tUYXJnZXRGb3JOZXdWYWx1ZXModmlzdWFsRWxlbWVudCwgdGFyZ2V0LCBvcmlnaW4pIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IG5ld1ZhbHVlS2V5cyA9IE9iamVjdC5rZXlzKHRhcmdldCkuZmlsdGVyKChrZXkpID0+ICF2aXN1YWxFbGVtZW50Lmhhc1ZhbHVlKGtleSkpO1xuICAgIGNvbnN0IG51bU5ld1ZhbHVlcyA9IG5ld1ZhbHVlS2V5cy5sZW5ndGg7XG4gICAgaWYgKCFudW1OZXdWYWx1ZXMpXG4gICAgICAgIHJldHVybjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bU5ld1ZhbHVlczsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IG5ld1ZhbHVlS2V5c1tpXTtcbiAgICAgICAgY29uc3QgdGFyZ2V0VmFsdWUgPSB0YXJnZXRba2V5XTtcbiAgICAgICAgbGV0IHZhbHVlID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoZSB0YXJnZXQgaXMgYSBzZXJpZXMgb2Yga2V5ZnJhbWVzLCB3ZSBjYW4gdXNlIHRoZSBmaXJzdCB2YWx1ZVxuICAgICAgICAgKiBpbiB0aGUgYXJyYXkuIElmIHRoaXMgZmlyc3QgdmFsdWUgaXMgbnVsbCwgd2UnbGwgc3RpbGwgbmVlZCB0byByZWFkIGZyb20gdGhlIERPTS5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldFZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUgPSB0YXJnZXRWYWx1ZVswXTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhlIHRhcmdldCBpc24ndCBrZXlmcmFtZXMsIG9yIHRoZSBmaXJzdCBrZXlmcmFtZSB3YXMgbnVsbCwgd2UgbmVlZCB0b1xuICAgICAgICAgKiBmaXJzdCBjaGVjayBpZiBhbiBvcmlnaW4gdmFsdWUgd2FzIGV4cGxpY2l0bHkgZGVmaW5lZCBpbiB0aGUgdHJhbnNpdGlvbiBhcyBcImZyb21cIixcbiAgICAgICAgICogaWYgbm90IHJlYWQgdGhlIHZhbHVlIGZyb20gdGhlIERPTS4gQXMgYW4gYWJzb2x1dGUgZmFsbGJhY2ssIHRha2UgdGhlIGRlZmluZWQgdGFyZ2V0IHZhbHVlLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IChfYiA9IChfYSA9IG9yaWdpbltrZXldKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB2aXN1YWxFbGVtZW50LnJlYWRWYWx1ZShrZXkpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiB0YXJnZXRba2V5XTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdmFsdWUgaXMgc3RpbGwgdW5kZWZpbmVkIG9yIG51bGwsIGlnbm9yZSBpdC4gUHJlZmVyYWJseSB0aGlzIHdvdWxkIHRocm93LFxuICAgICAgICAgKiBidXQgdGhpcyB3YXMgY2F1c2luZyBpc3N1ZXMgaW4gRnJhbWVyLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgKGlzTnVtZXJpY2FsU3RyaW5nKHZhbHVlKSB8fCBpc1plcm9WYWx1ZVN0cmluZyh2YWx1ZSkpKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGlzIGlzIGEgbnVtYmVyIHJlYWQgYXMgYSBzdHJpbmcsIGllIFwiMFwiIG9yIFwiMjAwXCIsIGNvbnZlcnQgaXQgdG8gYSBudW1iZXJcbiAgICAgICAgICAgIHZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWZpbmRWYWx1ZVR5cGUodmFsdWUpICYmIGNvbXBsZXgudGVzdCh0YXJnZXRWYWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gZ2V0QW5pbWF0YWJsZU5vbmUoa2V5LCB0YXJnZXRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmlzdWFsRWxlbWVudC5hZGRWYWx1ZShrZXksIG1vdGlvblZhbHVlKHZhbHVlLCB7IG93bmVyOiB2aXN1YWxFbGVtZW50IH0pKTtcbiAgICAgICAgaWYgKG9yaWdpbltrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG9yaWdpbltrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsKVxuICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5zZXRCYXNlVGFyZ2V0KGtleSwgdmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldE9yaWdpbkZyb21UcmFuc2l0aW9uKGtleSwgdHJhbnNpdGlvbikge1xuICAgIGlmICghdHJhbnNpdGlvbilcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHZhbHVlVHJhbnNpdGlvbiA9IHRyYW5zaXRpb25ba2V5XSB8fCB0cmFuc2l0aW9uW1wiZGVmYXVsdFwiXSB8fCB0cmFuc2l0aW9uO1xuICAgIHJldHVybiB2YWx1ZVRyYW5zaXRpb24uZnJvbTtcbn1cbmZ1bmN0aW9uIGdldE9yaWdpbih0YXJnZXQsIHRyYW5zaXRpb24sIHZpc3VhbEVsZW1lbnQpIHtcbiAgICBjb25zdCBvcmlnaW4gPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0YXJnZXQpIHtcbiAgICAgICAgY29uc3QgdHJhbnNpdGlvbk9yaWdpbiA9IGdldE9yaWdpbkZyb21UcmFuc2l0aW9uKGtleSwgdHJhbnNpdGlvbik7XG4gICAgICAgIGlmICh0cmFuc2l0aW9uT3JpZ2luICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG9yaWdpbltrZXldID0gdHJhbnNpdGlvbk9yaWdpbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmlzdWFsRWxlbWVudC5nZXRWYWx1ZShrZXkpO1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgb3JpZ2luW2tleV0gPSB2YWx1ZS5nZXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3JpZ2luO1xufVxuXG5leHBvcnQgeyBjaGVja1RhcmdldEZvck5ld1ZhbHVlcywgZ2V0T3JpZ2luLCBnZXRPcmlnaW5Gcm9tVHJhbnNpdGlvbiwgc2V0VGFyZ2V0LCBzZXRWYWx1ZXMgfTtcbiIsImltcG9ydCB7IHRyYW5zZm9ybVByb3BzIH0gZnJvbSAnLi4vLi4vcmVuZGVyL2h0bWwvdXRpbHMvdHJhbnNmb3JtLm1qcyc7XG5pbXBvcnQgeyBvcHRpbWl6ZWRBcHBlYXJEYXRhQXR0cmlidXRlIH0gZnJvbSAnLi4vb3B0aW1pemVkLWFwcGVhci9kYXRhLWlkLm1qcyc7XG5pbXBvcnQgeyBhbmltYXRlTW90aW9uVmFsdWUgfSBmcm9tICcuL21vdGlvbi12YWx1ZS5tanMnO1xuaW1wb3J0IHsgaXNXaWxsQ2hhbmdlTW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi92YWx1ZS91c2Utd2lsbC1jaGFuZ2UvaXMubWpzJztcbmltcG9ydCB7IHNldFRhcmdldCB9IGZyb20gJy4uLy4uL3JlbmRlci91dGlscy9zZXR0ZXJzLm1qcyc7XG5pbXBvcnQgeyBmcmFtZSB9IGZyb20gJy4uLy4uL2ZyYW1lbG9vcC9mcmFtZS5tanMnO1xuXG4vKipcbiAqIERlY2lkZSB3aGV0aGVyIHdlIHNob3VsZCBibG9jayB0aGlzIGFuaW1hdGlvbi4gUHJldmlvdXNseSwgd2UgYWNoaWV2ZWQgdGhpc1xuICoganVzdCBieSBjaGVja2luZyB3aGV0aGVyIHRoZSBrZXkgd2FzIGxpc3RlZCBpbiBwcm90ZWN0ZWRLZXlzLCBidXQgdGhpc1xuICogcG9zZWQgcHJvYmxlbXMgaWYgYW4gYW5pbWF0aW9uIHdhcyB0cmlnZ2VyZWQgYnkgYWZ0ZXJDaGlsZHJlbiBhbmQgcHJvdGVjdGVkS2V5c1xuICogaGFkIGJlZW4gc2V0IHRvIHRydWUgaW4gdGhlIG1lYW50aW1lLlxuICovXG5mdW5jdGlvbiBzaG91bGRCbG9ja0FuaW1hdGlvbih7IHByb3RlY3RlZEtleXMsIG5lZWRzQW5pbWF0aW5nIH0sIGtleSkge1xuICAgIGNvbnN0IHNob3VsZEJsb2NrID0gcHJvdGVjdGVkS2V5cy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIG5lZWRzQW5pbWF0aW5nW2tleV0gIT09IHRydWU7XG4gICAgbmVlZHNBbmltYXRpbmdba2V5XSA9IGZhbHNlO1xuICAgIHJldHVybiBzaG91bGRCbG9jaztcbn1cbmZ1bmN0aW9uIGFuaW1hdGVUYXJnZXQodmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbiwgeyBkZWxheSA9IDAsIHRyYW5zaXRpb25PdmVycmlkZSwgdHlwZSB9ID0ge30pIHtcbiAgICBsZXQgeyB0cmFuc2l0aW9uID0gdmlzdWFsRWxlbWVudC5nZXREZWZhdWx0VHJhbnNpdGlvbigpLCB0cmFuc2l0aW9uRW5kLCAuLi50YXJnZXQgfSA9IHZpc3VhbEVsZW1lbnQubWFrZVRhcmdldEFuaW1hdGFibGUoZGVmaW5pdGlvbik7XG4gICAgY29uc3Qgd2lsbENoYW5nZSA9IHZpc3VhbEVsZW1lbnQuZ2V0VmFsdWUoXCJ3aWxsQ2hhbmdlXCIpO1xuICAgIGlmICh0cmFuc2l0aW9uT3ZlcnJpZGUpXG4gICAgICAgIHRyYW5zaXRpb24gPSB0cmFuc2l0aW9uT3ZlcnJpZGU7XG4gICAgY29uc3QgYW5pbWF0aW9ucyA9IFtdO1xuICAgIGNvbnN0IGFuaW1hdGlvblR5cGVTdGF0ZSA9IHR5cGUgJiZcbiAgICAgICAgdmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZSAmJlxuICAgICAgICB2aXN1YWxFbGVtZW50LmFuaW1hdGlvblN0YXRlLmdldFN0YXRlKClbdHlwZV07XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdmlzdWFsRWxlbWVudC5nZXRWYWx1ZShrZXkpO1xuICAgICAgICBjb25zdCB2YWx1ZVRhcmdldCA9IHRhcmdldFtrZXldO1xuICAgICAgICBpZiAoIXZhbHVlIHx8XG4gICAgICAgICAgICB2YWx1ZVRhcmdldCA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAoYW5pbWF0aW9uVHlwZVN0YXRlICYmXG4gICAgICAgICAgICAgICAgc2hvdWxkQmxvY2tBbmltYXRpb24oYW5pbWF0aW9uVHlwZVN0YXRlLCBrZXkpKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWVUcmFuc2l0aW9uID0ge1xuICAgICAgICAgICAgZGVsYXksXG4gICAgICAgICAgICBlbGFwc2VkOiAwLFxuICAgICAgICAgICAgLi4udHJhbnNpdGlvbixcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgYSB2YWx1ZSBpcyBiZWluZyBhbmltYXRlZCwgY2hlY2tcbiAgICAgICAgICogdG8gc2VlIGlmIHdlJ3JlIGhhbmRsaW5nIG9mZiBmcm9tIGFuIGV4aXN0aW5nIGFuaW1hdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGlmICh3aW5kb3cuSGFuZG9mZkFwcGVhckFuaW1hdGlvbnMgJiYgIXZhbHVlLmhhc0FuaW1hdGVkKSB7XG4gICAgICAgICAgICBjb25zdCBhcHBlYXJJZCA9IHZpc3VhbEVsZW1lbnQuZ2V0UHJvcHMoKVtvcHRpbWl6ZWRBcHBlYXJEYXRhQXR0cmlidXRlXTtcbiAgICAgICAgICAgIGlmIChhcHBlYXJJZCkge1xuICAgICAgICAgICAgICAgIHZhbHVlVHJhbnNpdGlvbi5lbGFwc2VkID0gd2luZG93LkhhbmRvZmZBcHBlYXJBbmltYXRpb25zKGFwcGVhcklkLCBrZXksIHZhbHVlLCBmcmFtZSk7XG4gICAgICAgICAgICAgICAgdmFsdWVUcmFuc2l0aW9uLnN5bmNTdGFydCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUuc3RhcnQoYW5pbWF0ZU1vdGlvblZhbHVlKGtleSwgdmFsdWUsIHZhbHVlVGFyZ2V0LCB2aXN1YWxFbGVtZW50LnNob3VsZFJlZHVjZU1vdGlvbiAmJiB0cmFuc2Zvcm1Qcm9wcy5oYXMoa2V5KVxuICAgICAgICAgICAgPyB7IHR5cGU6IGZhbHNlIH1cbiAgICAgICAgICAgIDogdmFsdWVUcmFuc2l0aW9uKSk7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbiA9IHZhbHVlLmFuaW1hdGlvbjtcbiAgICAgICAgaWYgKGlzV2lsbENoYW5nZU1vdGlvblZhbHVlKHdpbGxDaGFuZ2UpKSB7XG4gICAgICAgICAgICB3aWxsQ2hhbmdlLmFkZChrZXkpO1xuICAgICAgICAgICAgYW5pbWF0aW9uLnRoZW4oKCkgPT4gd2lsbENoYW5nZS5yZW1vdmUoa2V5KSk7XG4gICAgICAgIH1cbiAgICAgICAgYW5pbWF0aW9ucy5wdXNoKGFuaW1hdGlvbik7XG4gICAgfVxuICAgIGlmICh0cmFuc2l0aW9uRW5kKSB7XG4gICAgICAgIFByb21pc2UuYWxsKGFuaW1hdGlvbnMpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdHJhbnNpdGlvbkVuZCAmJiBzZXRUYXJnZXQodmlzdWFsRWxlbWVudCwgdHJhbnNpdGlvbkVuZCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYW5pbWF0aW9ucztcbn1cblxuZXhwb3J0IHsgYW5pbWF0ZVRhcmdldCB9O1xuIiwiaW1wb3J0IHsgcmVzb2x2ZVZhcmlhbnQgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXRpbHMvcmVzb2x2ZS1keW5hbWljLXZhcmlhbnRzLm1qcyc7XG5pbXBvcnQgeyBhbmltYXRlVGFyZ2V0IH0gZnJvbSAnLi92aXN1YWwtZWxlbWVudC10YXJnZXQubWpzJztcblxuZnVuY3Rpb24gYW5pbWF0ZVZhcmlhbnQodmlzdWFsRWxlbWVudCwgdmFyaWFudCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgcmVzb2x2ZWQgPSByZXNvbHZlVmFyaWFudCh2aXN1YWxFbGVtZW50LCB2YXJpYW50LCBvcHRpb25zLmN1c3RvbSk7XG4gICAgbGV0IHsgdHJhbnNpdGlvbiA9IHZpc3VhbEVsZW1lbnQuZ2V0RGVmYXVsdFRyYW5zaXRpb24oKSB8fCB7fSB9ID0gcmVzb2x2ZWQgfHwge307XG4gICAgaWYgKG9wdGlvbnMudHJhbnNpdGlvbk92ZXJyaWRlKSB7XG4gICAgICAgIHRyYW5zaXRpb24gPSBvcHRpb25zLnRyYW5zaXRpb25PdmVycmlkZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgd2UgaGF2ZSBhIHZhcmlhbnQsIGNyZWF0ZSBhIGNhbGxiYWNrIHRoYXQgcnVucyBpdCBhcyBhbiBhbmltYXRpb24uXG4gICAgICogT3RoZXJ3aXNlLCB3ZSByZXNvbHZlIGEgUHJvbWlzZSBpbW1lZGlhdGVseSBmb3IgYSBjb21wb3NhYmxlIG5vLW9wLlxuICAgICAqL1xuICAgIGNvbnN0IGdldEFuaW1hdGlvbiA9IHJlc29sdmVkXG4gICAgICAgID8gKCkgPT4gUHJvbWlzZS5hbGwoYW5pbWF0ZVRhcmdldCh2aXN1YWxFbGVtZW50LCByZXNvbHZlZCwgb3B0aW9ucykpXG4gICAgICAgIDogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgLyoqXG4gICAgICogSWYgd2UgaGF2ZSBjaGlsZHJlbiwgY3JlYXRlIGEgY2FsbGJhY2sgdGhhdCBydW5zIGFsbCB0aGVpciBhbmltYXRpb25zLlxuICAgICAqIE90aGVyd2lzZSwgd2UgcmVzb2x2ZSBhIFByb21pc2UgaW1tZWRpYXRlbHkgZm9yIGEgY29tcG9zYWJsZSBuby1vcC5cbiAgICAgKi9cbiAgICBjb25zdCBnZXRDaGlsZEFuaW1hdGlvbnMgPSB2aXN1YWxFbGVtZW50LnZhcmlhbnRDaGlsZHJlbiAmJiB2aXN1YWxFbGVtZW50LnZhcmlhbnRDaGlsZHJlbi5zaXplXG4gICAgICAgID8gKGZvcndhcmREZWxheSA9IDApID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZGVsYXlDaGlsZHJlbiA9IDAsIHN0YWdnZXJDaGlsZHJlbiwgc3RhZ2dlckRpcmVjdGlvbiwgfSA9IHRyYW5zaXRpb247XG4gICAgICAgICAgICByZXR1cm4gYW5pbWF0ZUNoaWxkcmVuKHZpc3VhbEVsZW1lbnQsIHZhcmlhbnQsIGRlbGF5Q2hpbGRyZW4gKyBmb3J3YXJkRGVsYXksIHN0YWdnZXJDaGlsZHJlbiwgc3RhZ2dlckRpcmVjdGlvbiwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgdHJhbnNpdGlvbiBleHBsaWNpdGx5IGRlZmluZXMgYSBcIndoZW5cIiBvcHRpb24sIHdlIG5lZWQgdG8gcmVzb2x2ZSBlaXRoZXJcbiAgICAgKiB0aGlzIGFuaW1hdGlvbiBvciBhbGwgY2hpbGRyZW4gYW5pbWF0aW9ucyBiZWZvcmUgcGxheWluZyB0aGUgb3RoZXIuXG4gICAgICovXG4gICAgY29uc3QgeyB3aGVuIH0gPSB0cmFuc2l0aW9uO1xuICAgIGlmICh3aGVuKSB7XG4gICAgICAgIGNvbnN0IFtmaXJzdCwgbGFzdF0gPSB3aGVuID09PSBcImJlZm9yZUNoaWxkcmVuXCJcbiAgICAgICAgICAgID8gW2dldEFuaW1hdGlvbiwgZ2V0Q2hpbGRBbmltYXRpb25zXVxuICAgICAgICAgICAgOiBbZ2V0Q2hpbGRBbmltYXRpb25zLCBnZXRBbmltYXRpb25dO1xuICAgICAgICByZXR1cm4gZmlyc3QoKS50aGVuKCgpID0+IGxhc3QoKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW2dldEFuaW1hdGlvbigpLCBnZXRDaGlsZEFuaW1hdGlvbnMob3B0aW9ucy5kZWxheSldKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhbmltYXRlQ2hpbGRyZW4odmlzdWFsRWxlbWVudCwgdmFyaWFudCwgZGVsYXlDaGlsZHJlbiA9IDAsIHN0YWdnZXJDaGlsZHJlbiA9IDAsIHN0YWdnZXJEaXJlY3Rpb24gPSAxLCBvcHRpb25zKSB7XG4gICAgY29uc3QgYW5pbWF0aW9ucyA9IFtdO1xuICAgIGNvbnN0IG1heFN0YWdnZXJEdXJhdGlvbiA9ICh2aXN1YWxFbGVtZW50LnZhcmlhbnRDaGlsZHJlbi5zaXplIC0gMSkgKiBzdGFnZ2VyQ2hpbGRyZW47XG4gICAgY29uc3QgZ2VuZXJhdGVTdGFnZ2VyRHVyYXRpb24gPSBzdGFnZ2VyRGlyZWN0aW9uID09PSAxXG4gICAgICAgID8gKGkgPSAwKSA9PiBpICogc3RhZ2dlckNoaWxkcmVuXG4gICAgICAgIDogKGkgPSAwKSA9PiBtYXhTdGFnZ2VyRHVyYXRpb24gLSBpICogc3RhZ2dlckNoaWxkcmVuO1xuICAgIEFycmF5LmZyb20odmlzdWFsRWxlbWVudC52YXJpYW50Q2hpbGRyZW4pXG4gICAgICAgIC5zb3J0KHNvcnRCeVRyZWVPcmRlcilcbiAgICAgICAgLmZvckVhY2goKGNoaWxkLCBpKSA9PiB7XG4gICAgICAgIGNoaWxkLm5vdGlmeShcIkFuaW1hdGlvblN0YXJ0XCIsIHZhcmlhbnQpO1xuICAgICAgICBhbmltYXRpb25zLnB1c2goYW5pbWF0ZVZhcmlhbnQoY2hpbGQsIHZhcmlhbnQsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBkZWxheTogZGVsYXlDaGlsZHJlbiArIGdlbmVyYXRlU3RhZ2dlckR1cmF0aW9uKGkpLFxuICAgICAgICB9KS50aGVuKCgpID0+IGNoaWxkLm5vdGlmeShcIkFuaW1hdGlvbkNvbXBsZXRlXCIsIHZhcmlhbnQpKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKGFuaW1hdGlvbnMpO1xufVxuZnVuY3Rpb24gc29ydEJ5VHJlZU9yZGVyKGEsIGIpIHtcbiAgICByZXR1cm4gYS5zb3J0Tm9kZVBvc2l0aW9uKGIpO1xufVxuXG5leHBvcnQgeyBhbmltYXRlVmFyaWFudCwgc29ydEJ5VHJlZU9yZGVyIH07XG4iLCJpbXBvcnQgeyBpc0FuaW1hdGlvbkNvbnRyb2xzIH0gZnJvbSAnLi4vLi4vYW5pbWF0aW9uL3V0aWxzL2lzLWFuaW1hdGlvbi1jb250cm9scy5tanMnO1xuaW1wb3J0IHsgaXNLZXlmcmFtZXNUYXJnZXQgfSBmcm9tICcuLi8uLi9hbmltYXRpb24vdXRpbHMvaXMta2V5ZnJhbWVzLXRhcmdldC5tanMnO1xuaW1wb3J0IHsgc2hhbGxvd0NvbXBhcmUgfSBmcm9tICcuLi8uLi91dGlscy9zaGFsbG93LWNvbXBhcmUubWpzJztcbmltcG9ydCB7IGlzVmFyaWFudExhYmVsIH0gZnJvbSAnLi9pcy12YXJpYW50LWxhYmVsLm1qcyc7XG5pbXBvcnQgeyByZXNvbHZlVmFyaWFudCB9IGZyb20gJy4vcmVzb2x2ZS1keW5hbWljLXZhcmlhbnRzLm1qcyc7XG5pbXBvcnQgeyB2YXJpYW50UHJpb3JpdHlPcmRlciB9IGZyb20gJy4vdmFyaWFudC1wcm9wcy5tanMnO1xuaW1wb3J0IHsgYW5pbWF0ZVZpc3VhbEVsZW1lbnQgfSBmcm9tICcuLi8uLi9hbmltYXRpb24vaW50ZXJmYWNlcy92aXN1YWwtZWxlbWVudC5tanMnO1xuXG5jb25zdCByZXZlcnNlUHJpb3JpdHlPcmRlciA9IFsuLi52YXJpYW50UHJpb3JpdHlPcmRlcl0ucmV2ZXJzZSgpO1xuY29uc3QgbnVtQW5pbWF0aW9uVHlwZXMgPSB2YXJpYW50UHJpb3JpdHlPcmRlci5sZW5ndGg7XG5mdW5jdGlvbiBhbmltYXRlTGlzdCh2aXN1YWxFbGVtZW50KSB7XG4gICAgcmV0dXJuIChhbmltYXRpb25zKSA9PiBQcm9taXNlLmFsbChhbmltYXRpb25zLm1hcCgoeyBhbmltYXRpb24sIG9wdGlvbnMgfSkgPT4gYW5pbWF0ZVZpc3VhbEVsZW1lbnQodmlzdWFsRWxlbWVudCwgYW5pbWF0aW9uLCBvcHRpb25zKSkpO1xufVxuZnVuY3Rpb24gY3JlYXRlQW5pbWF0aW9uU3RhdGUodmlzdWFsRWxlbWVudCkge1xuICAgIGxldCBhbmltYXRlID0gYW5pbWF0ZUxpc3QodmlzdWFsRWxlbWVudCk7XG4gICAgY29uc3Qgc3RhdGUgPSBjcmVhdGVTdGF0ZSgpO1xuICAgIGxldCBpc0luaXRpYWxSZW5kZXIgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSB1c2VkIHRvIHJlZHVjZSB0aGUgYW5pbWF0aW9uIGRlZmluaXRpb25zIGZvclxuICAgICAqIGVhY2ggYWN0aXZlIGFuaW1hdGlvbiB0eXBlIGludG8gYW4gb2JqZWN0IG9mIHJlc29sdmVkIHZhbHVlcyBmb3IgaXQuXG4gICAgICovXG4gICAgY29uc3QgYnVpbGRSZXNvbHZlZFR5cGVWYWx1ZXMgPSAoYWNjLCBkZWZpbml0aW9uKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc29sdmVkID0gcmVzb2x2ZVZhcmlhbnQodmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbik7XG4gICAgICAgIGlmIChyZXNvbHZlZCkge1xuICAgICAgICAgICAgY29uc3QgeyB0cmFuc2l0aW9uLCB0cmFuc2l0aW9uRW5kLCAuLi50YXJnZXQgfSA9IHJlc29sdmVkO1xuICAgICAgICAgICAgYWNjID0geyAuLi5hY2MsIC4uLnRhcmdldCwgLi4udHJhbnNpdGlvbkVuZCB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGlzIGp1c3QgYWxsb3dzIHVzIHRvIGluamVjdCBtb2NrZWQgYW5pbWF0aW9uIGZ1bmN0aW9uc1xuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldEFuaW1hdGVGdW5jdGlvbihtYWtlQW5pbWF0b3IpIHtcbiAgICAgICAgYW5pbWF0ZSA9IG1ha2VBbmltYXRvcih2aXN1YWxFbGVtZW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hlbiB3ZSByZWNlaXZlIG5ldyBwcm9wcywgd2UgbmVlZCB0bzpcbiAgICAgKiAxLiBDcmVhdGUgYSBsaXN0IG9mIHByb3RlY3RlZCBrZXlzIGZvciBlYWNoIHR5cGUuIFRoaXMgaXMgYSBkaXJlY3Rvcnkgb2ZcbiAgICAgKiAgICB2YWx1ZSBrZXlzIHRoYXQgYXJlIGN1cnJlbnRseSBiZWluZyBcImhhbmRsZWRcIiBieSB0eXBlcyBvZiBhIGhpZ2hlciBwcmlvcml0eVxuICAgICAqICAgIHNvIHRoYXQgd2hlbmV2ZXIgYW4gYW5pbWF0aW9uIGlzIHBsYXllZCBvZiBhIGdpdmVuIHR5cGUsIHRoZXNlIHZhbHVlcyBhcmVcbiAgICAgKiAgICBwcm90ZWN0ZWQgZnJvbSBiZWluZyBhbmltYXRlZC5cbiAgICAgKiAyLiBEZXRlcm1pbmUgaWYgYW4gYW5pbWF0aW9uIHR5cGUgbmVlZHMgYW5pbWF0aW5nLlxuICAgICAqIDMuIERldGVybWluZSBpZiBhbnkgdmFsdWVzIGhhdmUgYmVlbiByZW1vdmVkIGZyb20gYSB0eXBlIGFuZCBmaWd1cmUgb3V0XG4gICAgICogICAgd2hhdCB0byBhbmltYXRlIHRob3NlIHRvLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFuaW1hdGVDaGFuZ2VzKG9wdGlvbnMsIGNoYW5nZWRBY3RpdmVUeXBlKSB7XG4gICAgICAgIGNvbnN0IHByb3BzID0gdmlzdWFsRWxlbWVudC5nZXRQcm9wcygpO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gdmlzdWFsRWxlbWVudC5nZXRWYXJpYW50Q29udGV4dCh0cnVlKSB8fCB7fTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgbGlzdCBvZiBhbmltYXRpb25zIHRoYXQgd2UnbGwgYnVpbGQgaW50byBhcyB3ZSBpdGVyYXRlIHRocm91Z2ggdGhlIGFuaW1hdGlvblxuICAgICAgICAgKiB0eXBlcy4gVGhpcyB3aWxsIGdldCBleGVjdXRlZCBhdCB0aGUgZW5kIG9mIHRoZSBmdW5jdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEtlZXAgdHJhY2sgb2Ygd2hpY2ggdmFsdWVzIGhhdmUgYmVlbiByZW1vdmVkLiBUaGVuLCBhcyB3ZSBoaXQgbG93ZXIgcHJpb3JpdHlcbiAgICAgICAgICogYW5pbWF0aW9uIHR5cGVzLCB3ZSBjYW4gY2hlY2sgaWYgdGhleSBjb250YWluIHJlbW92ZWQgdmFsdWVzIGFuZCBhbmltYXRlIHRvIHRoYXQuXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCByZW1vdmVkS2V5cyA9IG5ldyBTZXQoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgZGljdGlvbmFyeSBvZiBhbGwgZW5jb3VudGVyZWQga2V5cy4gVGhpcyBpcyBhbiBvYmplY3QgdG8gbGV0IHVzIGJ1aWxkIGludG8gYW5kXG4gICAgICAgICAqIGNvcHkgaXQgd2l0aG91dCBpdGVyYXRpb24uIEVhY2ggdGltZSB3ZSBoaXQgYW4gYW5pbWF0aW9uIHR5cGUgd2Ugc2V0IGl0cyBwcm90ZWN0ZWRcbiAgICAgICAgICoga2V5cyAtIHRoZSBrZXlzIGl0cyBub3QgYWxsb3dlZCB0byBhbmltYXRlIC0gdG8gdGhlIGxhdGVzdCB2ZXJzaW9uIG9mIHRoaXMgb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgbGV0IGVuY291bnRlcmVkS2V5cyA9IHt9O1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgYSB2YXJpYW50IGhhcyBiZWVuIHJlbW92ZWQgYXQgYSBnaXZlbiBpbmRleCwgYW5kIHRoaXMgY29tcG9uZW50IGlzIGNvbnRyb2xsaW5nXG4gICAgICAgICAqIHZhcmlhbnQgYW5pbWF0aW9ucywgd2Ugd2FudCB0byBlbnN1cmUgbG93ZXItcHJpb3JpdHkgdmFyaWFudHMgYXJlIGZvcmNlZCB0byBhbmltYXRlLlxuICAgICAgICAgKi9cbiAgICAgICAgbGV0IHJlbW92ZWRWYXJpYW50SW5kZXggPSBJbmZpbml0eTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEl0ZXJhdGUgdGhyb3VnaCBhbGwgYW5pbWF0aW9uIHR5cGVzIGluIHJldmVyc2UgcHJpb3JpdHkgb3JkZXIuIEZvciBlYWNoLCB3ZSB3YW50IHRvXG4gICAgICAgICAqIGRldGVjdCB3aGljaCB2YWx1ZXMgaXQncyBoYW5kbGluZyBhbmQgd2hldGhlciBvciBub3QgdGhleSd2ZSBjaGFuZ2VkIChhbmQgdGhlcmVmb3JlXG4gICAgICAgICAqIG5lZWQgdG8gYmUgYW5pbWF0ZWQpLiBJZiBhbnkgdmFsdWVzIGhhdmUgYmVlbiByZW1vdmVkLCB3ZSB3YW50IHRvIGRldGVjdCB0aG9zZSBpblxuICAgICAgICAgKiBsb3dlciBwcmlvcml0eSBwcm9wcyBhbmQgZmxhZyBmb3IgYW5pbWF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1BbmltYXRpb25UeXBlczsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gcmV2ZXJzZVByaW9yaXR5T3JkZXJbaV07XG4gICAgICAgICAgICBjb25zdCB0eXBlU3RhdGUgPSBzdGF0ZVt0eXBlXTtcbiAgICAgICAgICAgIGNvbnN0IHByb3AgPSBwcm9wc1t0eXBlXSAhPT0gdW5kZWZpbmVkID8gcHJvcHNbdHlwZV0gOiBjb250ZXh0W3R5cGVdO1xuICAgICAgICAgICAgY29uc3QgcHJvcElzVmFyaWFudCA9IGlzVmFyaWFudExhYmVsKHByb3ApO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIHR5cGUgaGFzICpqdXN0KiBjaGFuZ2VkIGlzQWN0aXZlIHN0YXR1cywgc2V0IGFjdGl2ZURlbHRhXG4gICAgICAgICAgICAgKiB0byB0aGF0IHN0YXR1cy4gT3RoZXJ3aXNlIHNldCB0byBudWxsLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCBhY3RpdmVEZWx0YSA9IHR5cGUgPT09IGNoYW5nZWRBY3RpdmVUeXBlID8gdHlwZVN0YXRlLmlzQWN0aXZlIDogbnVsbDtcbiAgICAgICAgICAgIGlmIChhY3RpdmVEZWx0YSA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgcmVtb3ZlZFZhcmlhbnRJbmRleCA9IGk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgcHJvcCBpcyBhbiBpbmhlcml0ZWQgdmFyaWFudCwgcmF0aGVyIHRoYW4gYmVlbiBzZXQgZGlyZWN0bHkgb24gdGhlXG4gICAgICAgICAgICAgKiBjb21wb25lbnQgaXRzZWxmLCB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB3ZSBhbGxvdyB0aGUgcGFyZW50IHRvIHRyaWdnZXIgYW5pbWF0aW9ucy5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBUT0RPOiBDYW4gcHJvYmFibHkgY2hhbmdlIHRoaXMgdG8gYSAhaXNDb250cm9sbGluZ1ZhcmlhbnRzIGNoZWNrXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGxldCBpc0luaGVyaXRlZCA9IHByb3AgPT09IGNvbnRleHRbdHlwZV0gJiYgcHJvcCAhPT0gcHJvcHNbdHlwZV0gJiYgcHJvcElzVmFyaWFudDtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKGlzSW5oZXJpdGVkICYmXG4gICAgICAgICAgICAgICAgaXNJbml0aWFsUmVuZGVyICYmXG4gICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5tYW51YWxseUFuaW1hdGVPbk1vdW50KSB7XG4gICAgICAgICAgICAgICAgaXNJbmhlcml0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0IGFsbCBlbmNvdW50ZXJlZCBrZXlzIHNvIGZhciBhcyB0aGUgcHJvdGVjdGVkIGtleXMgZm9yIHRoaXMgdHlwZS4gVGhpcyB3aWxsXG4gICAgICAgICAgICAgKiBiZSBhbnkga2V5IHRoYXQgaGFzIGJlZW4gYW5pbWF0ZWQgb3Igb3RoZXJ3aXNlIGhhbmRsZWQgYnkgYWN0aXZlLCBoaWdoZXItcHJpb3J0aXkgdHlwZXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHR5cGVTdGF0ZS5wcm90ZWN0ZWRLZXlzID0geyAuLi5lbmNvdW50ZXJlZEtleXMgfTtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHdlIGNhbiBza2lwIGFuYWx5c2luZyB0aGlzIHByb3AgZWFybHlcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIC8vIElmIGl0IGlzbid0IGFjdGl2ZSBhbmQgaGFzbid0ICpqdXN0KiBiZWVuIHNldCBhcyBpbmFjdGl2ZVxuICAgICAgICAgICAgKCF0eXBlU3RhdGUuaXNBY3RpdmUgJiYgYWN0aXZlRGVsdGEgPT09IG51bGwpIHx8XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgZGlkbid0IGFuZCBkb24ndCBoYXZlIGFueSBkZWZpbmVkIHByb3AgZm9yIHRoaXMgYW5pbWF0aW9uIHR5cGVcbiAgICAgICAgICAgICAgICAoIXByb3AgJiYgIXR5cGVTdGF0ZS5wcmV2UHJvcCkgfHxcbiAgICAgICAgICAgICAgICAvLyBPciBpZiB0aGUgcHJvcCBkb2Vzbid0IGRlZmluZSBhbiBhbmltYXRpb25cbiAgICAgICAgICAgICAgICBpc0FuaW1hdGlvbkNvbnRyb2xzKHByb3ApIHx8XG4gICAgICAgICAgICAgICAgdHlwZW9mIHByb3AgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFzIHdlIGdvIGxvb2sgdGhyb3VnaCB0aGUgdmFsdWVzIGRlZmluZWQgb24gdGhpcyB0eXBlLCBpZiB3ZSBkZXRlY3RcbiAgICAgICAgICAgICAqIGEgY2hhbmdlZCB2YWx1ZSBvciBhIHZhbHVlIHRoYXQgd2FzIHJlbW92ZWQgaW4gYSBoaWdoZXIgcHJpb3JpdHksIHdlIHNldFxuICAgICAgICAgICAgICogdGhpcyB0byB0cnVlIGFuZCBhZGQgdGhpcyBwcm9wIHRvIHRoZSBhbmltYXRpb24gbGlzdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgdmFyaWFudERpZENoYW5nZSA9IGNoZWNrVmFyaWFudHNEaWRDaGFuZ2UodHlwZVN0YXRlLnByZXZQcm9wLCBwcm9wKTtcbiAgICAgICAgICAgIGxldCBzaG91bGRBbmltYXRlVHlwZSA9IHZhcmlhbnREaWRDaGFuZ2UgfHxcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSdyZSBtYWtpbmcgdGhpcyB2YXJpYW50IGFjdGl2ZSwgd2Ugd2FudCB0byBhbHdheXMgbWFrZSBpdCBhY3RpdmVcbiAgICAgICAgICAgICAgICAodHlwZSA9PT0gY2hhbmdlZEFjdGl2ZVR5cGUgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZVN0YXRlLmlzQWN0aXZlICYmXG4gICAgICAgICAgICAgICAgICAgICFpc0luaGVyaXRlZCAmJlxuICAgICAgICAgICAgICAgICAgICBwcm9wSXNWYXJpYW50KSB8fFxuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlbW92ZWQgYSBoaWdoZXItcHJpb3JpdHkgdmFyaWFudCAoaSBpcyBpbiByZXZlcnNlIG9yZGVyKVxuICAgICAgICAgICAgICAgIChpID4gcmVtb3ZlZFZhcmlhbnRJbmRleCAmJiBwcm9wSXNWYXJpYW50KTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQXMgYW5pbWF0aW9ucyBjYW4gYmUgc2V0IGFzIHZhcmlhbnQgbGlzdHMsIHZhcmlhbnRzIG9yIHRhcmdldCBvYmplY3RzLCB3ZVxuICAgICAgICAgICAgICogY29lcmNlIGV2ZXJ5dGhpbmcgdG8gYW4gYXJyYXkgaWYgaXQgaXNuJ3Qgb25lIGFscmVhZHlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgZGVmaW5pdGlvbkxpc3QgPSBBcnJheS5pc0FycmF5KHByb3ApID8gcHJvcCA6IFtwcm9wXTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQnVpbGQgYW4gb2JqZWN0IG9mIGFsbCB0aGUgcmVzb2x2ZWQgdmFsdWVzLiBXZSdsbCB1c2UgdGhpcyBpbiB0aGUgc3Vic2VxdWVudFxuICAgICAgICAgICAgICogYW5pbWF0ZUNoYW5nZXMgY2FsbHMgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSB2YWx1ZSBoYXMgY2hhbmdlZC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbGV0IHJlc29sdmVkVmFsdWVzID0gZGVmaW5pdGlvbkxpc3QucmVkdWNlKGJ1aWxkUmVzb2x2ZWRUeXBlVmFsdWVzLCB7fSk7XG4gICAgICAgICAgICBpZiAoYWN0aXZlRGVsdGEgPT09IGZhbHNlKVxuICAgICAgICAgICAgICAgIHJlc29sdmVkVmFsdWVzID0ge307XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE5vdyB3ZSBuZWVkIHRvIGxvb3AgdGhyb3VnaCBhbGwgdGhlIGtleXMgaW4gdGhlIHByZXYgcHJvcCBhbmQgdGhpcyBwcm9wLFxuICAgICAgICAgICAgICogYW5kIGRlY2lkZTpcbiAgICAgICAgICAgICAqIDEuIElmIHRoZSB2YWx1ZSBoYXMgY2hhbmdlZCwgYW5kIG5lZWRzIGFuaW1hdGluZ1xuICAgICAgICAgICAgICogMi4gSWYgaXQgaGFzIGJlZW4gcmVtb3ZlZCwgYW5kIG5lZWRzIGFkZGluZyB0byB0aGUgcmVtb3ZlZEtleXMgc2V0XG4gICAgICAgICAgICAgKiAzLiBJZiBpdCBoYXMgYmVlbiByZW1vdmVkIGluIGEgaGlnaGVyIHByaW9yaXR5IHR5cGUgYW5kIG5lZWRzIGFuaW1hdGluZ1xuICAgICAgICAgICAgICogNC4gSWYgaXQgaGFzbid0IGJlZW4gcmVtb3ZlZCBpbiBhIGhpZ2hlciBwcmlvcml0eSBidXQgaGFzbid0IGNoYW5nZWQsIGFuZFxuICAgICAgICAgICAgICogICAgbmVlZHMgYWRkaW5nIHRvIHRoZSB0eXBlJ3MgcHJvdGVjdGVkS2V5cyBsaXN0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCB7IHByZXZSZXNvbHZlZFZhbHVlcyA9IHt9IH0gPSB0eXBlU3RhdGU7XG4gICAgICAgICAgICBjb25zdCBhbGxLZXlzID0ge1xuICAgICAgICAgICAgICAgIC4uLnByZXZSZXNvbHZlZFZhbHVlcyxcbiAgICAgICAgICAgICAgICAuLi5yZXNvbHZlZFZhbHVlcyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBtYXJrVG9BbmltYXRlID0gKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIHNob3VsZEFuaW1hdGVUeXBlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZW1vdmVkS2V5cy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgICAgICB0eXBlU3RhdGUubmVlZHNBbmltYXRpbmdba2V5XSA9IHRydWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gYWxsS2V5cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSByZXNvbHZlZFZhbHVlc1trZXldO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBwcmV2UmVzb2x2ZWRWYWx1ZXNba2V5XTtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhpcyB3ZSBjYW4ganVzdCBza2lwIGFoZWFkXG4gICAgICAgICAgICAgICAgaWYgKGVuY291bnRlcmVkS2V5cy5oYXNPd25Qcm9wZXJ0eShrZXkpKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBJZiB0aGUgdmFsdWUgaGFzIGNoYW5nZWQsIHdlIHByb2JhYmx5IHdhbnQgdG8gYW5pbWF0ZSBpdC5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAobmV4dCAhPT0gcHJldikge1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogSWYgYm90aCB2YWx1ZXMgYXJlIGtleWZyYW1lcywgd2UgbmVlZCB0byBzaGFsbG93IGNvbXBhcmUgdGhlbSB0b1xuICAgICAgICAgICAgICAgICAgICAgKiBkZXRlY3Qgd2hldGhlciBhbnkgdmFsdWUgaGFzIGNoYW5nZWQuIElmIGl0IGhhcywgd2UgYW5pbWF0ZSBpdC5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0tleWZyYW1lc1RhcmdldChuZXh0KSAmJiBpc0tleWZyYW1lc1RhcmdldChwcmV2KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzaGFsbG93Q29tcGFyZShuZXh0LCBwcmV2KSB8fCB2YXJpYW50RGlkQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya1RvQW5pbWF0ZShrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICogSWYgaXQgaGFzbid0IGNoYW5nZWQsIHdlIHdhbnQgdG8gZW5zdXJlIGl0IGRvZXNuJ3QgYW5pbWF0ZSBieVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIGFkZGluZyBpdCB0byB0aGUgbGlzdCBvZiBwcm90ZWN0ZWQga2V5cy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlU3RhdGUucHJvdGVjdGVkS2V5c1trZXldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIG5leHQgaXMgZGVmaW5lZCBhbmQgZG9lc24ndCBlcXVhbCBwcmV2LCBpdCBuZWVkcyBhbmltYXRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtUb0FuaW1hdGUoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGl0J3MgdW5kZWZpbmVkLCBpdCdzIGJlZW4gcmVtb3ZlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWRLZXlzLmFkZChrZXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5leHQgIT09IHVuZGVmaW5lZCAmJiByZW1vdmVkS2V5cy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogSWYgbmV4dCBoYXNuJ3QgY2hhbmdlZCBhbmQgaXQgaXNuJ3QgdW5kZWZpbmVkLCB3ZSB3YW50IHRvIGNoZWNrIGlmIGl0J3NcbiAgICAgICAgICAgICAgICAgICAgICogYmVlbiByZW1vdmVkIGJ5IGEgaGlnaGVyIHByaW9yaXR5XG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBtYXJrVG9BbmltYXRlKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogSWYgaXQgaGFzbid0IGNoYW5nZWQsIHdlIGFkZCBpdCB0byB0aGUgbGlzdCBvZiBwcm90ZWN0ZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgICAqIHRvIGVuc3VyZSBpdCBkb2Vzbid0IGdldCBhbmltYXRlZC5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHR5cGVTdGF0ZS5wcm90ZWN0ZWRLZXlzW2tleV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVXBkYXRlIHRoZSB0eXBlU3RhdGUgc28gbmV4dCB0aW1lIGFuaW1hdGVDaGFuZ2VzIGlzIGNhbGxlZCB3ZSBjYW4gY29tcGFyZSB0aGVcbiAgICAgICAgICAgICAqIGxhdGVzdCBwcm9wIGFuZCByZXNvbHZlZFZhbHVlcyB0byB0aGVzZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdHlwZVN0YXRlLnByZXZQcm9wID0gcHJvcDtcbiAgICAgICAgICAgIHR5cGVTdGF0ZS5wcmV2UmVzb2x2ZWRWYWx1ZXMgPSByZXNvbHZlZFZhbHVlcztcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHR5cGVTdGF0ZS5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgIGVuY291bnRlcmVkS2V5cyA9IHsgLi4uZW5jb3VudGVyZWRLZXlzLCAuLi5yZXNvbHZlZFZhbHVlcyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzSW5pdGlhbFJlbmRlciAmJiB2aXN1YWxFbGVtZW50LmJsb2NrSW5pdGlhbEFuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgIHNob3VsZEFuaW1hdGVUeXBlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgaXMgYW4gaW5oZXJpdGVkIHByb3Agd2Ugd2FudCB0byBoYXJkLWJsb2NrIGFuaW1hdGlvbnNcbiAgICAgICAgICAgICAqIFRPRE86IFRlc3QgYXMgdGhpcyBzaG91bGQgcHJvYmFibHkgc3RpbGwgaGFuZGxlIGFuaW1hdGlvbnMgdHJpZ2dlcmVkXG4gICAgICAgICAgICAgKiBieSByZW1vdmVkIHZhbHVlcz9cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHNob3VsZEFuaW1hdGVUeXBlICYmICFpc0luaGVyaXRlZCkge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbnMucHVzaCguLi5kZWZpbml0aW9uTGlzdC5tYXAoKGFuaW1hdGlvbikgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uOiBhbmltYXRpb24sXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHsgdHlwZSwgLi4ub3B0aW9ucyB9LFxuICAgICAgICAgICAgICAgIH0pKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoZXJlIGFyZSBzb21lIHJlbW92ZWQgdmFsdWUgdGhhdCBoYXZlbid0IGJlZW4gZGVhbHQgd2l0aCxcbiAgICAgICAgICogd2UgbmVlZCB0byBjcmVhdGUgYSBuZXcgYW5pbWF0aW9uIHRoYXQgZmFsbHMgYmFjayBlaXRoZXIgdG8gdGhlIHZhbHVlXG4gICAgICAgICAqIGRlZmluZWQgaW4gdGhlIHN0eWxlIHByb3AsIG9yIHRoZSBsYXN0IHJlYWQgdmFsdWUuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAocmVtb3ZlZEtleXMuc2l6ZSkge1xuICAgICAgICAgICAgY29uc3QgZmFsbGJhY2tBbmltYXRpb24gPSB7fTtcbiAgICAgICAgICAgIHJlbW92ZWRLZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZhbGxiYWNrVGFyZ2V0ID0gdmlzdWFsRWxlbWVudC5nZXRCYXNlVGFyZ2V0KGtleSk7XG4gICAgICAgICAgICAgICAgaWYgKGZhbGxiYWNrVGFyZ2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2tBbmltYXRpb25ba2V5XSA9IGZhbGxiYWNrVGFyZ2V0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYW5pbWF0aW9ucy5wdXNoKHsgYW5pbWF0aW9uOiBmYWxsYmFja0FuaW1hdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc2hvdWxkQW5pbWF0ZSA9IEJvb2xlYW4oYW5pbWF0aW9ucy5sZW5ndGgpO1xuICAgICAgICBpZiAoaXNJbml0aWFsUmVuZGVyICYmXG4gICAgICAgICAgICBwcm9wcy5pbml0aWFsID09PSBmYWxzZSAmJlxuICAgICAgICAgICAgIXZpc3VhbEVsZW1lbnQubWFudWFsbHlBbmltYXRlT25Nb3VudCkge1xuICAgICAgICAgICAgc2hvdWxkQW5pbWF0ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlzSW5pdGlhbFJlbmRlciA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gc2hvdWxkQW5pbWF0ZSA/IGFuaW1hdGUoYW5pbWF0aW9ucykgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hhbmdlIHdoZXRoZXIgYSBjZXJ0YWluIGFuaW1hdGlvbiB0eXBlIGlzIGFjdGl2ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRBY3RpdmUodHlwZSwgaXNBY3RpdmUsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAvLyBJZiB0aGUgYWN0aXZlIHN0YXRlIGhhc24ndCBjaGFuZ2VkLCB3ZSBjYW4gc2FmZWx5IGRvIG5vdGhpbmcgaGVyZVxuICAgICAgICBpZiAoc3RhdGVbdHlwZV0uaXNBY3RpdmUgPT09IGlzQWN0aXZlKVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAvLyBQcm9wYWdhdGUgYWN0aXZlIGNoYW5nZSB0byBjaGlsZHJlblxuICAgICAgICAoX2EgPSB2aXN1YWxFbGVtZW50LnZhcmlhbnRDaGlsZHJlbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvckVhY2goKGNoaWxkKSA9PiB7IHZhciBfYTsgcmV0dXJuIChfYSA9IGNoaWxkLmFuaW1hdGlvblN0YXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0QWN0aXZlKHR5cGUsIGlzQWN0aXZlKTsgfSk7XG4gICAgICAgIHN0YXRlW3R5cGVdLmlzQWN0aXZlID0gaXNBY3RpdmU7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBhbmltYXRlQ2hhbmdlcyhvcHRpb25zLCB0eXBlKTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gc3RhdGUpIHtcbiAgICAgICAgICAgIHN0YXRlW2tleV0ucHJvdGVjdGVkS2V5cyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbmltYXRpb25zO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBhbmltYXRlQ2hhbmdlcyxcbiAgICAgICAgc2V0QWN0aXZlLFxuICAgICAgICBzZXRBbmltYXRlRnVuY3Rpb24sXG4gICAgICAgIGdldFN0YXRlOiAoKSA9PiBzdGF0ZSxcbiAgICB9O1xufVxuZnVuY3Rpb24gY2hlY2tWYXJpYW50c0RpZENoYW5nZShwcmV2LCBuZXh0KSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBuZXh0ICE9PSBwcmV2O1xuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KG5leHQpKSB7XG4gICAgICAgIHJldHVybiAhc2hhbGxvd0NvbXBhcmUobmV4dCwgcHJldik7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVR5cGVTdGF0ZShpc0FjdGl2ZSA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXNBY3RpdmUsXG4gICAgICAgIHByb3RlY3RlZEtleXM6IHt9LFxuICAgICAgICBuZWVkc0FuaW1hdGluZzoge30sXG4gICAgICAgIHByZXZSZXNvbHZlZFZhbHVlczoge30sXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFuaW1hdGU6IGNyZWF0ZVR5cGVTdGF0ZSh0cnVlKSxcbiAgICAgICAgd2hpbGVJblZpZXc6IGNyZWF0ZVR5cGVTdGF0ZSgpLFxuICAgICAgICB3aGlsZUhvdmVyOiBjcmVhdGVUeXBlU3RhdGUoKSxcbiAgICAgICAgd2hpbGVUYXA6IGNyZWF0ZVR5cGVTdGF0ZSgpLFxuICAgICAgICB3aGlsZURyYWc6IGNyZWF0ZVR5cGVTdGF0ZSgpLFxuICAgICAgICB3aGlsZUZvY3VzOiBjcmVhdGVUeXBlU3RhdGUoKSxcbiAgICAgICAgZXhpdDogY3JlYXRlVHlwZVN0YXRlKCksXG4gICAgfTtcbn1cblxuZXhwb3J0IHsgY2hlY2tWYXJpYW50c0RpZENoYW5nZSwgY3JlYXRlQW5pbWF0aW9uU3RhdGUgfTtcbiIsImltcG9ydCB7IHJlc29sdmVWYXJpYW50IH0gZnJvbSAnLi4vLi4vcmVuZGVyL3V0aWxzL3Jlc29sdmUtZHluYW1pYy12YXJpYW50cy5tanMnO1xuaW1wb3J0IHsgYW5pbWF0ZVRhcmdldCB9IGZyb20gJy4vdmlzdWFsLWVsZW1lbnQtdGFyZ2V0Lm1qcyc7XG5pbXBvcnQgeyBhbmltYXRlVmFyaWFudCB9IGZyb20gJy4vdmlzdWFsLWVsZW1lbnQtdmFyaWFudC5tanMnO1xuXG5mdW5jdGlvbiBhbmltYXRlVmlzdWFsRWxlbWVudCh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uLCBvcHRpb25zID0ge30pIHtcbiAgICB2aXN1YWxFbGVtZW50Lm5vdGlmeShcIkFuaW1hdGlvblN0YXJ0XCIsIGRlZmluaXRpb24pO1xuICAgIGxldCBhbmltYXRpb247XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgY29uc3QgYW5pbWF0aW9ucyA9IGRlZmluaXRpb24ubWFwKCh2YXJpYW50KSA9PiBhbmltYXRlVmFyaWFudCh2aXN1YWxFbGVtZW50LCB2YXJpYW50LCBvcHRpb25zKSk7XG4gICAgICAgIGFuaW1hdGlvbiA9IFByb21pc2UuYWxsKGFuaW1hdGlvbnMpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZGVmaW5pdGlvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBhbmltYXRpb24gPSBhbmltYXRlVmFyaWFudCh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uLCBvcHRpb25zKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHJlc29sdmVkRGVmaW5pdGlvbiA9IHR5cGVvZiBkZWZpbml0aW9uID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgID8gcmVzb2x2ZVZhcmlhbnQodmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbiwgb3B0aW9ucy5jdXN0b20pXG4gICAgICAgICAgICA6IGRlZmluaXRpb247XG4gICAgICAgIGFuaW1hdGlvbiA9IFByb21pc2UuYWxsKGFuaW1hdGVUYXJnZXQodmlzdWFsRWxlbWVudCwgcmVzb2x2ZWREZWZpbml0aW9uLCBvcHRpb25zKSk7XG4gICAgfVxuICAgIHJldHVybiBhbmltYXRpb24udGhlbigoKSA9PiB2aXN1YWxFbGVtZW50Lm5vdGlmeShcIkFuaW1hdGlvbkNvbXBsZXRlXCIsIGRlZmluaXRpb24pKTtcbn1cblxuZXhwb3J0IHsgYW5pbWF0ZVZpc3VhbEVsZW1lbnQgfTtcbiIsImltcG9ydCB7IEZlYXR1cmUgfSBmcm9tICcuLi9GZWF0dXJlLm1qcyc7XG5cbmxldCBpZCA9IDA7XG5jbGFzcyBFeGl0QW5pbWF0aW9uRmVhdHVyZSBleHRlbmRzIEZlYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmlkID0gaWQrKztcbiAgICB9XG4gICAgdXBkYXRlKCkge1xuICAgICAgICBpZiAoIXRoaXMubm9kZS5wcmVzZW5jZUNvbnRleHQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHsgaXNQcmVzZW50LCBvbkV4aXRDb21wbGV0ZSwgY3VzdG9tIH0gPSB0aGlzLm5vZGUucHJlc2VuY2VDb250ZXh0O1xuICAgICAgICBjb25zdCB7IGlzUHJlc2VudDogcHJldklzUHJlc2VudCB9ID0gdGhpcy5ub2RlLnByZXZQcmVzZW5jZUNvbnRleHQgfHwge307XG4gICAgICAgIGlmICghdGhpcy5ub2RlLmFuaW1hdGlvblN0YXRlIHx8IGlzUHJlc2VudCA9PT0gcHJldklzUHJlc2VudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV4aXRBbmltYXRpb24gPSB0aGlzLm5vZGUuYW5pbWF0aW9uU3RhdGUuc2V0QWN0aXZlKFwiZXhpdFwiLCAhaXNQcmVzZW50LCB7IGN1c3RvbTogY3VzdG9tICE9PSBudWxsICYmIGN1c3RvbSAhPT0gdm9pZCAwID8gY3VzdG9tIDogdGhpcy5ub2RlLmdldFByb3BzKCkuY3VzdG9tIH0pO1xuICAgICAgICBpZiAob25FeGl0Q29tcGxldGUgJiYgIWlzUHJlc2VudCkge1xuICAgICAgICAgICAgZXhpdEFuaW1hdGlvbi50aGVuKCgpID0+IG9uRXhpdENvbXBsZXRlKHRoaXMuaWQpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtb3VudCgpIHtcbiAgICAgICAgY29uc3QgeyByZWdpc3RlciB9ID0gdGhpcy5ub2RlLnByZXNlbmNlQ29udGV4dCB8fCB7fTtcbiAgICAgICAgaWYgKHJlZ2lzdGVyKSB7XG4gICAgICAgICAgICB0aGlzLnVubW91bnQgPSByZWdpc3Rlcih0aGlzLmlkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1bm1vdW50KCkgeyB9XG59XG5cbmV4cG9ydCB7IEV4aXRBbmltYXRpb25GZWF0dXJlIH07XG4iLCJpbXBvcnQgeyBBbmltYXRpb25GZWF0dXJlIH0gZnJvbSAnLi9hbmltYXRpb24vaW5kZXgubWpzJztcbmltcG9ydCB7IEV4aXRBbmltYXRpb25GZWF0dXJlIH0gZnJvbSAnLi9hbmltYXRpb24vZXhpdC5tanMnO1xuXG5jb25zdCBhbmltYXRpb25zID0ge1xuICAgIGFuaW1hdGlvbjoge1xuICAgICAgICBGZWF0dXJlOiBBbmltYXRpb25GZWF0dXJlLFxuICAgIH0sXG4gICAgZXhpdDoge1xuICAgICAgICBGZWF0dXJlOiBFeGl0QW5pbWF0aW9uRmVhdHVyZSxcbiAgICB9LFxufTtcblxuZXhwb3J0IHsgYW5pbWF0aW9ucyB9O1xuIiwiaW1wb3J0IHsgaXNBbmltYXRpb25Db250cm9scyB9IGZyb20gJy4uLy4uLy4uL2FuaW1hdGlvbi91dGlscy9pcy1hbmltYXRpb24tY29udHJvbHMubWpzJztcbmltcG9ydCB7IGNyZWF0ZUFuaW1hdGlvblN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyL3V0aWxzL2FuaW1hdGlvbi1zdGF0ZS5tanMnO1xuaW1wb3J0IHsgRmVhdHVyZSB9IGZyb20gJy4uL0ZlYXR1cmUubWpzJztcblxuY2xhc3MgQW5pbWF0aW9uRmVhdHVyZSBleHRlbmRzIEZlYXR1cmUge1xuICAgIC8qKlxuICAgICAqIFdlIGR5bmFtaWNhbGx5IGdlbmVyYXRlIHRoZSBBbmltYXRpb25TdGF0ZSBtYW5hZ2VyIGFzIGl0IGNvbnRhaW5zIGEgcmVmZXJlbmNlXG4gICAgICogdG8gdGhlIHVuZGVybHlpbmcgYW5pbWF0aW9uIGxpYnJhcnkuIFdlIG9ubHkgd2FudCB0byBsb2FkIHRoYXQgaWYgd2UgbG9hZCB0aGlzLFxuICAgICAqIHNvIHBlb3BsZSBjYW4gb3B0aW9uYWxseSBjb2RlIHNwbGl0IGl0IG91dCB1c2luZyB0aGUgYG1gIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihub2RlKSB7XG4gICAgICAgIHN1cGVyKG5vZGUpO1xuICAgICAgICBub2RlLmFuaW1hdGlvblN0YXRlIHx8IChub2RlLmFuaW1hdGlvblN0YXRlID0gY3JlYXRlQW5pbWF0aW9uU3RhdGUobm9kZSkpO1xuICAgIH1cbiAgICB1cGRhdGVBbmltYXRpb25Db250cm9sc1N1YnNjcmlwdGlvbigpIHtcbiAgICAgICAgY29uc3QgeyBhbmltYXRlIH0gPSB0aGlzLm5vZGUuZ2V0UHJvcHMoKTtcbiAgICAgICAgdGhpcy51bm1vdW50KCk7XG4gICAgICAgIGlmIChpc0FuaW1hdGlvbkNvbnRyb2xzKGFuaW1hdGUpKSB7XG4gICAgICAgICAgICB0aGlzLnVubW91bnQgPSBhbmltYXRlLnN1YnNjcmliZSh0aGlzLm5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZSBhbnkgcHJvdmlkZWQgQW5pbWF0aW9uQ29udHJvbHMgdG8gdGhlIGNvbXBvbmVudCdzIFZpc3VhbEVsZW1lbnRcbiAgICAgKi9cbiAgICBtb3VudCgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVBbmltYXRpb25Db250cm9sc1N1YnNjcmlwdGlvbigpO1xuICAgIH1cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIGNvbnN0IHsgYW5pbWF0ZSB9ID0gdGhpcy5ub2RlLmdldFByb3BzKCk7XG4gICAgICAgIGNvbnN0IHsgYW5pbWF0ZTogcHJldkFuaW1hdGUgfSA9IHRoaXMubm9kZS5wcmV2UHJvcHMgfHwge307XG4gICAgICAgIGlmIChhbmltYXRlICE9PSBwcmV2QW5pbWF0ZSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVBbmltYXRpb25Db250cm9sc1N1YnNjcmlwdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVubW91bnQoKSB7IH1cbn1cblxuZXhwb3J0IHsgQW5pbWF0aW9uRmVhdHVyZSB9O1xuIiwiY29uc3QgZGlzdGFuY2UgPSAoYSwgYikgPT4gTWF0aC5hYnMoYSAtIGIpO1xuZnVuY3Rpb24gZGlzdGFuY2UyRChhLCBiKSB7XG4gICAgLy8gTXVsdGktZGltZW5zaW9uYWxcbiAgICBjb25zdCB4RGVsdGEgPSBkaXN0YW5jZShhLngsIGIueCk7XG4gICAgY29uc3QgeURlbHRhID0gZGlzdGFuY2UoYS55LCBiLnkpO1xuICAgIHJldHVybiBNYXRoLnNxcnQoeERlbHRhICoqIDIgKyB5RGVsdGEgKiogMik7XG59XG5cbmV4cG9ydCB7IGRpc3RhbmNlLCBkaXN0YW5jZTJEIH07XG4iLCJpbXBvcnQgeyBleHRyYWN0RXZlbnRJbmZvIH0gZnJvbSAnLi4vLi4vZXZlbnRzL2V2ZW50LWluZm8ubWpzJztcbmltcG9ydCB7IHNlY29uZHNUb01pbGxpc2Vjb25kcywgbWlsbGlzZWNvbmRzVG9TZWNvbmRzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdGltZS1jb252ZXJzaW9uLm1qcyc7XG5pbXBvcnQgeyBhZGRQb2ludGVyRXZlbnQgfSBmcm9tICcuLi8uLi9ldmVudHMvYWRkLXBvaW50ZXItZXZlbnQubWpzJztcbmltcG9ydCB7IHBpcGUgfSBmcm9tICcuLi8uLi91dGlscy9waXBlLm1qcyc7XG5pbXBvcnQgeyBkaXN0YW5jZTJEIH0gZnJvbSAnLi4vLi4vdXRpbHMvZGlzdGFuY2UubWpzJztcbmltcG9ydCB7IGlzUHJpbWFyeVBvaW50ZXIgfSBmcm9tICcuLi8uLi9ldmVudHMvdXRpbHMvaXMtcHJpbWFyeS1wb2ludGVyLm1qcyc7XG5pbXBvcnQgeyBmcmFtZSwgY2FuY2VsRnJhbWUsIGZyYW1lRGF0YSB9IGZyb20gJy4uLy4uL2ZyYW1lbG9vcC9mcmFtZS5tanMnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBQYW5TZXNzaW9uIHtcbiAgICBjb25zdHJ1Y3RvcihldmVudCwgaGFuZGxlcnMsIHsgdHJhbnNmb3JtUGFnZVBvaW50IH0gPSB7fSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YXJ0RXZlbnQgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxhc3RNb3ZlRXZlbnQgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxhc3RNb3ZlRXZlbnRJbmZvID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5oYW5kbGVycyA9IHt9O1xuICAgICAgICB0aGlzLnVwZGF0ZVBvaW50ID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCEodGhpcy5sYXN0TW92ZUV2ZW50ICYmIHRoaXMubGFzdE1vdmVFdmVudEluZm8pKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IGluZm8gPSBnZXRQYW5JbmZvKHRoaXMubGFzdE1vdmVFdmVudEluZm8sIHRoaXMuaGlzdG9yeSk7XG4gICAgICAgICAgICBjb25zdCBpc1BhblN0YXJ0ZWQgPSB0aGlzLnN0YXJ0RXZlbnQgIT09IG51bGw7XG4gICAgICAgICAgICAvLyBPbmx5IHN0YXJ0IHBhbm5pbmcgaWYgdGhlIG9mZnNldCBpcyBsYXJnZXIgdGhhbiAzIHBpeGVscy4gSWYgd2UgbWFrZSBpdFxuICAgICAgICAgICAgLy8gYW55IGxhcmdlciB0aGFuIHRoaXMgd2UnbGwgd2FudCB0byByZXNldCB0aGUgcG9pbnRlciBoaXN0b3J5XG4gICAgICAgICAgICAvLyBvbiB0aGUgZmlyc3QgdXBkYXRlIHRvIGF2b2lkIHZpc3VhbCBzbmFwcGluZyB0byB0aGUgY3Vyc29lLlxuICAgICAgICAgICAgY29uc3QgaXNEaXN0YW5jZVBhc3RUaHJlc2hvbGQgPSBkaXN0YW5jZTJEKGluZm8ub2Zmc2V0LCB7IHg6IDAsIHk6IDAgfSkgPj0gMztcbiAgICAgICAgICAgIGlmICghaXNQYW5TdGFydGVkICYmICFpc0Rpc3RhbmNlUGFzdFRocmVzaG9sZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCB7IHBvaW50IH0gPSBpbmZvO1xuICAgICAgICAgICAgY29uc3QgeyB0aW1lc3RhbXAgfSA9IGZyYW1lRGF0YTtcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKHsgLi4ucG9pbnQsIHRpbWVzdGFtcCB9KTtcbiAgICAgICAgICAgIGNvbnN0IHsgb25TdGFydCwgb25Nb3ZlIH0gPSB0aGlzLmhhbmRsZXJzO1xuICAgICAgICAgICAgaWYgKCFpc1BhblN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICBvblN0YXJ0ICYmIG9uU3RhcnQodGhpcy5sYXN0TW92ZUV2ZW50LCBpbmZvKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0RXZlbnQgPSB0aGlzLmxhc3RNb3ZlRXZlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvbk1vdmUgJiYgb25Nb3ZlKHRoaXMubGFzdE1vdmVFdmVudCwgaW5mbyk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlUG9pbnRlck1vdmUgPSAoZXZlbnQsIGluZm8pID0+IHtcbiAgICAgICAgICAgIHRoaXMubGFzdE1vdmVFdmVudCA9IGV2ZW50O1xuICAgICAgICAgICAgdGhpcy5sYXN0TW92ZUV2ZW50SW5mbyA9IHRyYW5zZm9ybVBvaW50KGluZm8sIHRoaXMudHJhbnNmb3JtUGFnZVBvaW50KTtcbiAgICAgICAgICAgIC8vIFRocm90dGxlIG1vdXNlIG1vdmUgZXZlbnQgdG8gb25jZSBwZXIgZnJhbWVcbiAgICAgICAgICAgIGZyYW1lLnVwZGF0ZSh0aGlzLnVwZGF0ZVBvaW50LCB0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVQb2ludGVyVXAgPSAoZXZlbnQsIGluZm8pID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW5kKCk7XG4gICAgICAgICAgICBpZiAoISh0aGlzLmxhc3RNb3ZlRXZlbnQgJiYgdGhpcy5sYXN0TW92ZUV2ZW50SW5mbykpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgeyBvbkVuZCwgb25TZXNzaW9uRW5kIH0gPSB0aGlzLmhhbmRsZXJzO1xuICAgICAgICAgICAgY29uc3QgcGFuSW5mbyA9IGdldFBhbkluZm8oZXZlbnQudHlwZSA9PT0gXCJwb2ludGVyY2FuY2VsXCJcbiAgICAgICAgICAgICAgICA/IHRoaXMubGFzdE1vdmVFdmVudEluZm9cbiAgICAgICAgICAgICAgICA6IHRyYW5zZm9ybVBvaW50KGluZm8sIHRoaXMudHJhbnNmb3JtUGFnZVBvaW50KSwgdGhpcy5oaXN0b3J5KTtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXJ0RXZlbnQgJiYgb25FbmQpIHtcbiAgICAgICAgICAgICAgICBvbkVuZChldmVudCwgcGFuSW5mbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvblNlc3Npb25FbmQgJiYgb25TZXNzaW9uRW5kKGV2ZW50LCBwYW5JbmZvKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBtb3JlIHRoYW4gb25lIHRvdWNoLCBkb24ndCBzdGFydCBkZXRlY3RpbmcgdGhpcyBnZXN0dXJlXG4gICAgICAgIGlmICghaXNQcmltYXJ5UG9pbnRlcihldmVudCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuaGFuZGxlcnMgPSBoYW5kbGVycztcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1QYWdlUG9pbnQgPSB0cmFuc2Zvcm1QYWdlUG9pbnQ7XG4gICAgICAgIGNvbnN0IGluZm8gPSBleHRyYWN0RXZlbnRJbmZvKGV2ZW50KTtcbiAgICAgICAgY29uc3QgaW5pdGlhbEluZm8gPSB0cmFuc2Zvcm1Qb2ludChpbmZvLCB0aGlzLnRyYW5zZm9ybVBhZ2VQb2ludCk7XG4gICAgICAgIGNvbnN0IHsgcG9pbnQgfSA9IGluaXRpYWxJbmZvO1xuICAgICAgICBjb25zdCB7IHRpbWVzdGFtcCB9ID0gZnJhbWVEYXRhO1xuICAgICAgICB0aGlzLmhpc3RvcnkgPSBbeyAuLi5wb2ludCwgdGltZXN0YW1wIH1dO1xuICAgICAgICBjb25zdCB7IG9uU2Vzc2lvblN0YXJ0IH0gPSBoYW5kbGVycztcbiAgICAgICAgb25TZXNzaW9uU3RhcnQgJiZcbiAgICAgICAgICAgIG9uU2Vzc2lvblN0YXJ0KGV2ZW50LCBnZXRQYW5JbmZvKGluaXRpYWxJbmZvLCB0aGlzLmhpc3RvcnkpKTtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMgPSBwaXBlKGFkZFBvaW50ZXJFdmVudCh3aW5kb3csIFwicG9pbnRlcm1vdmVcIiwgdGhpcy5oYW5kbGVQb2ludGVyTW92ZSksIGFkZFBvaW50ZXJFdmVudCh3aW5kb3csIFwicG9pbnRlcnVwXCIsIHRoaXMuaGFuZGxlUG9pbnRlclVwKSwgYWRkUG9pbnRlckV2ZW50KHdpbmRvdywgXCJwb2ludGVyY2FuY2VsXCIsIHRoaXMuaGFuZGxlUG9pbnRlclVwKSk7XG4gICAgfVxuICAgIHVwZGF0ZUhhbmRsZXJzKGhhbmRsZXJzKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlcnMgPSBoYW5kbGVycztcbiAgICB9XG4gICAgZW5kKCkge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVycyAmJiB0aGlzLnJlbW92ZUxpc3RlbmVycygpO1xuICAgICAgICBjYW5jZWxGcmFtZSh0aGlzLnVwZGF0ZVBvaW50KTtcbiAgICB9XG59XG5mdW5jdGlvbiB0cmFuc2Zvcm1Qb2ludChpbmZvLCB0cmFuc2Zvcm1QYWdlUG9pbnQpIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtUGFnZVBvaW50ID8geyBwb2ludDogdHJhbnNmb3JtUGFnZVBvaW50KGluZm8ucG9pbnQpIH0gOiBpbmZvO1xufVxuZnVuY3Rpb24gc3VidHJhY3RQb2ludChhLCBiKSB7XG4gICAgcmV0dXJuIHsgeDogYS54IC0gYi54LCB5OiBhLnkgLSBiLnkgfTtcbn1cbmZ1bmN0aW9uIGdldFBhbkluZm8oeyBwb2ludCB9LCBoaXN0b3J5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcG9pbnQsXG4gICAgICAgIGRlbHRhOiBzdWJ0cmFjdFBvaW50KHBvaW50LCBsYXN0RGV2aWNlUG9pbnQoaGlzdG9yeSkpLFxuICAgICAgICBvZmZzZXQ6IHN1YnRyYWN0UG9pbnQocG9pbnQsIHN0YXJ0RGV2aWNlUG9pbnQoaGlzdG9yeSkpLFxuICAgICAgICB2ZWxvY2l0eTogZ2V0VmVsb2NpdHkoaGlzdG9yeSwgMC4xKSxcbiAgICB9O1xufVxuZnVuY3Rpb24gc3RhcnREZXZpY2VQb2ludChoaXN0b3J5KSB7XG4gICAgcmV0dXJuIGhpc3RvcnlbMF07XG59XG5mdW5jdGlvbiBsYXN0RGV2aWNlUG9pbnQoaGlzdG9yeSkge1xuICAgIHJldHVybiBoaXN0b3J5W2hpc3RvcnkubGVuZ3RoIC0gMV07XG59XG5mdW5jdGlvbiBnZXRWZWxvY2l0eShoaXN0b3J5LCB0aW1lRGVsdGEpIHtcbiAgICBpZiAoaGlzdG9yeS5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiB7IHg6IDAsIHk6IDAgfTtcbiAgICB9XG4gICAgbGV0IGkgPSBoaXN0b3J5Lmxlbmd0aCAtIDE7XG4gICAgbGV0IHRpbWVzdGFtcGVkUG9pbnQgPSBudWxsO1xuICAgIGNvbnN0IGxhc3RQb2ludCA9IGxhc3REZXZpY2VQb2ludChoaXN0b3J5KTtcbiAgICB3aGlsZSAoaSA+PSAwKSB7XG4gICAgICAgIHRpbWVzdGFtcGVkUG9pbnQgPSBoaXN0b3J5W2ldO1xuICAgICAgICBpZiAobGFzdFBvaW50LnRpbWVzdGFtcCAtIHRpbWVzdGFtcGVkUG9pbnQudGltZXN0YW1wID5cbiAgICAgICAgICAgIHNlY29uZHNUb01pbGxpc2Vjb25kcyh0aW1lRGVsdGEpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpLS07XG4gICAgfVxuICAgIGlmICghdGltZXN0YW1wZWRQb2ludCkge1xuICAgICAgICByZXR1cm4geyB4OiAwLCB5OiAwIH07XG4gICAgfVxuICAgIGNvbnN0IHRpbWUgPSBtaWxsaXNlY29uZHNUb1NlY29uZHMobGFzdFBvaW50LnRpbWVzdGFtcCAtIHRpbWVzdGFtcGVkUG9pbnQudGltZXN0YW1wKTtcbiAgICBpZiAodGltZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4geyB4OiAwLCB5OiAwIH07XG4gICAgfVxuICAgIGNvbnN0IGN1cnJlbnRWZWxvY2l0eSA9IHtcbiAgICAgICAgeDogKGxhc3RQb2ludC54IC0gdGltZXN0YW1wZWRQb2ludC54KSAvIHRpbWUsXG4gICAgICAgIHk6IChsYXN0UG9pbnQueSAtIHRpbWVzdGFtcGVkUG9pbnQueSkgLyB0aW1lLFxuICAgIH07XG4gICAgaWYgKGN1cnJlbnRWZWxvY2l0eS54ID09PSBJbmZpbml0eSkge1xuICAgICAgICBjdXJyZW50VmVsb2NpdHkueCA9IDA7XG4gICAgfVxuICAgIGlmIChjdXJyZW50VmVsb2NpdHkueSA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgY3VycmVudFZlbG9jaXR5LnkgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gY3VycmVudFZlbG9jaXR5O1xufVxuXG5leHBvcnQgeyBQYW5TZXNzaW9uIH07XG4iLCJpbXBvcnQgeyBtaXggfSBmcm9tICcuLi8uLi91dGlscy9taXgubWpzJztcblxuZnVuY3Rpb24gY2FsY0xlbmd0aChheGlzKSB7XG4gICAgcmV0dXJuIGF4aXMubWF4IC0gYXhpcy5taW47XG59XG5mdW5jdGlvbiBpc05lYXIodmFsdWUsIHRhcmdldCA9IDAsIG1heERpc3RhbmNlID0gMC4wMSkge1xuICAgIHJldHVybiBNYXRoLmFicyh2YWx1ZSAtIHRhcmdldCkgPD0gbWF4RGlzdGFuY2U7XG59XG5mdW5jdGlvbiBjYWxjQXhpc0RlbHRhKGRlbHRhLCBzb3VyY2UsIHRhcmdldCwgb3JpZ2luID0gMC41KSB7XG4gICAgZGVsdGEub3JpZ2luID0gb3JpZ2luO1xuICAgIGRlbHRhLm9yaWdpblBvaW50ID0gbWl4KHNvdXJjZS5taW4sIHNvdXJjZS5tYXgsIGRlbHRhLm9yaWdpbik7XG4gICAgZGVsdGEuc2NhbGUgPSBjYWxjTGVuZ3RoKHRhcmdldCkgLyBjYWxjTGVuZ3RoKHNvdXJjZSk7XG4gICAgaWYgKGlzTmVhcihkZWx0YS5zY2FsZSwgMSwgMC4wMDAxKSB8fCBpc05hTihkZWx0YS5zY2FsZSkpXG4gICAgICAgIGRlbHRhLnNjYWxlID0gMTtcbiAgICBkZWx0YS50cmFuc2xhdGUgPVxuICAgICAgICBtaXgodGFyZ2V0Lm1pbiwgdGFyZ2V0Lm1heCwgZGVsdGEub3JpZ2luKSAtIGRlbHRhLm9yaWdpblBvaW50O1xuICAgIGlmIChpc05lYXIoZGVsdGEudHJhbnNsYXRlKSB8fCBpc05hTihkZWx0YS50cmFuc2xhdGUpKVxuICAgICAgICBkZWx0YS50cmFuc2xhdGUgPSAwO1xufVxuZnVuY3Rpb24gY2FsY0JveERlbHRhKGRlbHRhLCBzb3VyY2UsIHRhcmdldCwgb3JpZ2luKSB7XG4gICAgY2FsY0F4aXNEZWx0YShkZWx0YS54LCBzb3VyY2UueCwgdGFyZ2V0LngsIG9yaWdpbiA/IG9yaWdpbi5vcmlnaW5YIDogdW5kZWZpbmVkKTtcbiAgICBjYWxjQXhpc0RlbHRhKGRlbHRhLnksIHNvdXJjZS55LCB0YXJnZXQueSwgb3JpZ2luID8gb3JpZ2luLm9yaWdpblkgOiB1bmRlZmluZWQpO1xufVxuZnVuY3Rpb24gY2FsY1JlbGF0aXZlQXhpcyh0YXJnZXQsIHJlbGF0aXZlLCBwYXJlbnQpIHtcbiAgICB0YXJnZXQubWluID0gcGFyZW50Lm1pbiArIHJlbGF0aXZlLm1pbjtcbiAgICB0YXJnZXQubWF4ID0gdGFyZ2V0Lm1pbiArIGNhbGNMZW5ndGgocmVsYXRpdmUpO1xufVxuZnVuY3Rpb24gY2FsY1JlbGF0aXZlQm94KHRhcmdldCwgcmVsYXRpdmUsIHBhcmVudCkge1xuICAgIGNhbGNSZWxhdGl2ZUF4aXModGFyZ2V0LngsIHJlbGF0aXZlLngsIHBhcmVudC54KTtcbiAgICBjYWxjUmVsYXRpdmVBeGlzKHRhcmdldC55LCByZWxhdGl2ZS55LCBwYXJlbnQueSk7XG59XG5mdW5jdGlvbiBjYWxjUmVsYXRpdmVBeGlzUG9zaXRpb24odGFyZ2V0LCBsYXlvdXQsIHBhcmVudCkge1xuICAgIHRhcmdldC5taW4gPSBsYXlvdXQubWluIC0gcGFyZW50Lm1pbjtcbiAgICB0YXJnZXQubWF4ID0gdGFyZ2V0Lm1pbiArIGNhbGNMZW5ndGgobGF5b3V0KTtcbn1cbmZ1bmN0aW9uIGNhbGNSZWxhdGl2ZVBvc2l0aW9uKHRhcmdldCwgbGF5b3V0LCBwYXJlbnQpIHtcbiAgICBjYWxjUmVsYXRpdmVBeGlzUG9zaXRpb24odGFyZ2V0LngsIGxheW91dC54LCBwYXJlbnQueCk7XG4gICAgY2FsY1JlbGF0aXZlQXhpc1Bvc2l0aW9uKHRhcmdldC55LCBsYXlvdXQueSwgcGFyZW50LnkpO1xufVxuXG5leHBvcnQgeyBjYWxjQXhpc0RlbHRhLCBjYWxjQm94RGVsdGEsIGNhbGNMZW5ndGgsIGNhbGNSZWxhdGl2ZUF4aXMsIGNhbGNSZWxhdGl2ZUF4aXNQb3NpdGlvbiwgY2FsY1JlbGF0aXZlQm94LCBjYWxjUmVsYXRpdmVQb3NpdGlvbiwgaXNOZWFyIH07XG4iLCJpbXBvcnQgeyBwcm9ncmVzcyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3Byb2dyZXNzLm1qcyc7XG5pbXBvcnQgeyBjYWxjTGVuZ3RoIH0gZnJvbSAnLi4vLi4vLi4vcHJvamVjdGlvbi9nZW9tZXRyeS9kZWx0YS1jYWxjLm1qcyc7XG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2NsYW1wLm1qcyc7XG5pbXBvcnQgeyBtaXggfSBmcm9tICcuLi8uLi8uLi91dGlscy9taXgubWpzJztcblxuLyoqXG4gKiBBcHBseSBjb25zdHJhaW50cyB0byBhIHBvaW50LiBUaGVzZSBjb25zdHJhaW50cyBhcmUgYm90aCBwaHlzaWNhbCBhbG9uZyBhblxuICogYXhpcywgYW5kIGFuIGVsYXN0aWMgZmFjdG9yIHRoYXQgZGV0ZXJtaW5lcyBob3cgbXVjaCB0byBjb25zdHJhaW4gdGhlIHBvaW50XG4gKiBieSBpZiBpdCBkb2VzIGxpZSBvdXRzaWRlIHRoZSBkZWZpbmVkIHBhcmFtZXRlcnMuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5Q29uc3RyYWludHMocG9pbnQsIHsgbWluLCBtYXggfSwgZWxhc3RpYykge1xuICAgIGlmIChtaW4gIT09IHVuZGVmaW5lZCAmJiBwb2ludCA8IG1pbikge1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgbWluIHBvaW50IGRlZmluZWQsIGFuZCB0aGlzIGlzIG91dHNpZGUgb2YgdGhhdCwgY29uc3RyYWluXG4gICAgICAgIHBvaW50ID0gZWxhc3RpYyA/IG1peChtaW4sIHBvaW50LCBlbGFzdGljLm1pbikgOiBNYXRoLm1heChwb2ludCwgbWluKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobWF4ICE9PSB1bmRlZmluZWQgJiYgcG9pbnQgPiBtYXgpIHtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIG1heCBwb2ludCBkZWZpbmVkLCBhbmQgdGhpcyBpcyBvdXRzaWRlIG9mIHRoYXQsIGNvbnN0cmFpblxuICAgICAgICBwb2ludCA9IGVsYXN0aWMgPyBtaXgobWF4LCBwb2ludCwgZWxhc3RpYy5tYXgpIDogTWF0aC5taW4ocG9pbnQsIG1heCk7XG4gICAgfVxuICAgIHJldHVybiBwb2ludDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlIGNvbnN0cmFpbnRzIGluIHRlcm1zIG9mIHRoZSB2aWV3cG9ydCB3aGVuIGRlZmluZWQgcmVsYXRpdmVseSB0byB0aGVcbiAqIG1lYXN1cmVkIGF4aXMuIFRoaXMgaXMgbWVhc3VyZWQgZnJvbSB0aGUgbmVhcmVzdCBlZGdlLCBzbyBhIG1heCBjb25zdHJhaW50IG9mIDIwMFxuICogb24gYW4gYXhpcyB3aXRoIGEgbWF4IHZhbHVlIG9mIDMwMCB3b3VsZCByZXR1cm4gYSBjb25zdHJhaW50IG9mIDUwMCAtIGF4aXMgbGVuZ3RoXG4gKi9cbmZ1bmN0aW9uIGNhbGNSZWxhdGl2ZUF4aXNDb25zdHJhaW50cyhheGlzLCBtaW4sIG1heCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG1pbjogbWluICE9PSB1bmRlZmluZWQgPyBheGlzLm1pbiArIG1pbiA6IHVuZGVmaW5lZCxcbiAgICAgICAgbWF4OiBtYXggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBheGlzLm1heCArIG1heCAtIChheGlzLm1heCAtIGF4aXMubWluKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgfTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlIGNvbnN0cmFpbnRzIGluIHRlcm1zIG9mIHRoZSB2aWV3cG9ydCB3aGVuXG4gKiBkZWZpbmVkIHJlbGF0aXZlbHkgdG8gdGhlIG1lYXN1cmVkIGJvdW5kaW5nIGJveC5cbiAqL1xuZnVuY3Rpb24gY2FsY1JlbGF0aXZlQ29uc3RyYWludHMobGF5b3V0Qm94LCB7IHRvcCwgbGVmdCwgYm90dG9tLCByaWdodCB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogY2FsY1JlbGF0aXZlQXhpc0NvbnN0cmFpbnRzKGxheW91dEJveC54LCBsZWZ0LCByaWdodCksXG4gICAgICAgIHk6IGNhbGNSZWxhdGl2ZUF4aXNDb25zdHJhaW50cyhsYXlvdXRCb3gueSwgdG9wLCBib3R0b20pLFxuICAgIH07XG59XG4vKipcbiAqIENhbGN1bGF0ZSB2aWV3cG9ydCBjb25zdHJhaW50cyB3aGVuIGRlZmluZWQgYXMgYW5vdGhlciB2aWV3cG9ydC1yZWxhdGl2ZSBheGlzXG4gKi9cbmZ1bmN0aW9uIGNhbGNWaWV3cG9ydEF4aXNDb25zdHJhaW50cyhsYXlvdXRBeGlzLCBjb25zdHJhaW50c0F4aXMpIHtcbiAgICBsZXQgbWluID0gY29uc3RyYWludHNBeGlzLm1pbiAtIGxheW91dEF4aXMubWluO1xuICAgIGxldCBtYXggPSBjb25zdHJhaW50c0F4aXMubWF4IC0gbGF5b3V0QXhpcy5tYXg7XG4gICAgLy8gSWYgdGhlIGNvbnN0cmFpbnRzIGF4aXMgaXMgYWN0dWFsbHkgc21hbGxlciB0aGFuIHRoZSBsYXlvdXQgYXhpcyB0aGVuIHdlIGNhblxuICAgIC8vIGZsaXAgdGhlIGNvbnN0cmFpbnRzXG4gICAgaWYgKGNvbnN0cmFpbnRzQXhpcy5tYXggLSBjb25zdHJhaW50c0F4aXMubWluIDxcbiAgICAgICAgbGF5b3V0QXhpcy5tYXggLSBsYXlvdXRBeGlzLm1pbikge1xuICAgICAgICBbbWluLCBtYXhdID0gW21heCwgbWluXTtcbiAgICB9XG4gICAgcmV0dXJuIHsgbWluLCBtYXggfTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlIHZpZXdwb3J0IGNvbnN0cmFpbnRzIHdoZW4gZGVmaW5lZCBhcyBhbm90aGVyIHZpZXdwb3J0LXJlbGF0aXZlIGJveFxuICovXG5mdW5jdGlvbiBjYWxjVmlld3BvcnRDb25zdHJhaW50cyhsYXlvdXRCb3gsIGNvbnN0cmFpbnRzQm94KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogY2FsY1ZpZXdwb3J0QXhpc0NvbnN0cmFpbnRzKGxheW91dEJveC54LCBjb25zdHJhaW50c0JveC54KSxcbiAgICAgICAgeTogY2FsY1ZpZXdwb3J0QXhpc0NvbnN0cmFpbnRzKGxheW91dEJveC55LCBjb25zdHJhaW50c0JveC55KSxcbiAgICB9O1xufVxuLyoqXG4gKiBDYWxjdWxhdGUgYSB0cmFuc2Zvcm0gb3JpZ2luIHJlbGF0aXZlIHRvIHRoZSBzb3VyY2UgYXhpcywgYmV0d2VlbiAwLTEsIHRoYXQgcmVzdWx0c1xuICogaW4gYW4gYXN0aGV0aWNhbGx5IHBsZWFzaW5nIHNjYWxlL3RyYW5zZm9ybSBuZWVkZWQgdG8gcHJvamVjdCBmcm9tIHNvdXJjZSB0byB0YXJnZXQuXG4gKi9cbmZ1bmN0aW9uIGNhbGNPcmlnaW4oc291cmNlLCB0YXJnZXQpIHtcbiAgICBsZXQgb3JpZ2luID0gMC41O1xuICAgIGNvbnN0IHNvdXJjZUxlbmd0aCA9IGNhbGNMZW5ndGgoc291cmNlKTtcbiAgICBjb25zdCB0YXJnZXRMZW5ndGggPSBjYWxjTGVuZ3RoKHRhcmdldCk7XG4gICAgaWYgKHRhcmdldExlbmd0aCA+IHNvdXJjZUxlbmd0aCkge1xuICAgICAgICBvcmlnaW4gPSBwcm9ncmVzcyh0YXJnZXQubWluLCB0YXJnZXQubWF4IC0gc291cmNlTGVuZ3RoLCBzb3VyY2UubWluKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc291cmNlTGVuZ3RoID4gdGFyZ2V0TGVuZ3RoKSB7XG4gICAgICAgIG9yaWdpbiA9IHByb2dyZXNzKHNvdXJjZS5taW4sIHNvdXJjZS5tYXggLSB0YXJnZXRMZW5ndGgsIHRhcmdldC5taW4pO1xuICAgIH1cbiAgICByZXR1cm4gY2xhbXAoMCwgMSwgb3JpZ2luKTtcbn1cbi8qKlxuICogUmViYXNlIHRoZSBjYWxjdWxhdGVkIHZpZXdwb3J0IGNvbnN0cmFpbnRzIHJlbGF0aXZlIHRvIHRoZSBsYXlvdXQubWluIHBvaW50LlxuICovXG5mdW5jdGlvbiByZWJhc2VBeGlzQ29uc3RyYWludHMobGF5b3V0LCBjb25zdHJhaW50cykge1xuICAgIGNvbnN0IHJlbGF0aXZlQ29uc3RyYWludHMgPSB7fTtcbiAgICBpZiAoY29uc3RyYWludHMubWluICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVsYXRpdmVDb25zdHJhaW50cy5taW4gPSBjb25zdHJhaW50cy5taW4gLSBsYXlvdXQubWluO1xuICAgIH1cbiAgICBpZiAoY29uc3RyYWludHMubWF4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVsYXRpdmVDb25zdHJhaW50cy5tYXggPSBjb25zdHJhaW50cy5tYXggLSBsYXlvdXQubWluO1xuICAgIH1cbiAgICByZXR1cm4gcmVsYXRpdmVDb25zdHJhaW50cztcbn1cbmNvbnN0IGRlZmF1bHRFbGFzdGljID0gMC4zNTtcbi8qKlxuICogQWNjZXB0cyBhIGRyYWdFbGFzdGljIHByb3AgYW5kIHJldHVybnMgcmVzb2x2ZWQgZWxhc3RpYyB2YWx1ZXMgZm9yIGVhY2ggYXhpcy5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZURyYWdFbGFzdGljKGRyYWdFbGFzdGljID0gZGVmYXVsdEVsYXN0aWMpIHtcbiAgICBpZiAoZHJhZ0VsYXN0aWMgPT09IGZhbHNlKSB7XG4gICAgICAgIGRyYWdFbGFzdGljID0gMDtcbiAgICB9XG4gICAgZWxzZSBpZiAoZHJhZ0VsYXN0aWMgPT09IHRydWUpIHtcbiAgICAgICAgZHJhZ0VsYXN0aWMgPSBkZWZhdWx0RWxhc3RpYztcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogcmVzb2x2ZUF4aXNFbGFzdGljKGRyYWdFbGFzdGljLCBcImxlZnRcIiwgXCJyaWdodFwiKSxcbiAgICAgICAgeTogcmVzb2x2ZUF4aXNFbGFzdGljKGRyYWdFbGFzdGljLCBcInRvcFwiLCBcImJvdHRvbVwiKSxcbiAgICB9O1xufVxuZnVuY3Rpb24gcmVzb2x2ZUF4aXNFbGFzdGljKGRyYWdFbGFzdGljLCBtaW5MYWJlbCwgbWF4TGFiZWwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBtaW46IHJlc29sdmVQb2ludEVsYXN0aWMoZHJhZ0VsYXN0aWMsIG1pbkxhYmVsKSxcbiAgICAgICAgbWF4OiByZXNvbHZlUG9pbnRFbGFzdGljKGRyYWdFbGFzdGljLCBtYXhMYWJlbCksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVQb2ludEVsYXN0aWMoZHJhZ0VsYXN0aWMsIGxhYmVsKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBkcmFnRWxhc3RpYyA9PT0gXCJudW1iZXJcIlxuICAgICAgICA/IGRyYWdFbGFzdGljXG4gICAgICAgIDogZHJhZ0VsYXN0aWNbbGFiZWxdIHx8IDA7XG59XG5cbmV4cG9ydCB7IGFwcGx5Q29uc3RyYWludHMsIGNhbGNPcmlnaW4sIGNhbGNSZWxhdGl2ZUF4aXNDb25zdHJhaW50cywgY2FsY1JlbGF0aXZlQ29uc3RyYWludHMsIGNhbGNWaWV3cG9ydEF4aXNDb25zdHJhaW50cywgY2FsY1ZpZXdwb3J0Q29uc3RyYWludHMsIGRlZmF1bHRFbGFzdGljLCByZWJhc2VBeGlzQ29uc3RyYWludHMsIHJlc29sdmVBeGlzRWxhc3RpYywgcmVzb2x2ZURyYWdFbGFzdGljLCByZXNvbHZlUG9pbnRFbGFzdGljIH07XG4iLCJjb25zdCBjcmVhdGVBeGlzRGVsdGEgPSAoKSA9PiAoe1xuICAgIHRyYW5zbGF0ZTogMCxcbiAgICBzY2FsZTogMSxcbiAgICBvcmlnaW46IDAsXG4gICAgb3JpZ2luUG9pbnQ6IDAsXG59KTtcbmNvbnN0IGNyZWF0ZURlbHRhID0gKCkgPT4gKHtcbiAgICB4OiBjcmVhdGVBeGlzRGVsdGEoKSxcbiAgICB5OiBjcmVhdGVBeGlzRGVsdGEoKSxcbn0pO1xuY29uc3QgY3JlYXRlQXhpcyA9ICgpID0+ICh7IG1pbjogMCwgbWF4OiAwIH0pO1xuY29uc3QgY3JlYXRlQm94ID0gKCkgPT4gKHtcbiAgICB4OiBjcmVhdGVBeGlzKCksXG4gICAgeTogY3JlYXRlQXhpcygpLFxufSk7XG5cbmV4cG9ydCB7IGNyZWF0ZUF4aXMsIGNyZWF0ZUF4aXNEZWx0YSwgY3JlYXRlQm94LCBjcmVhdGVEZWx0YSB9O1xuIiwiZnVuY3Rpb24gZWFjaEF4aXMoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gW2NhbGxiYWNrKFwieFwiKSwgY2FsbGJhY2soXCJ5XCIpXTtcbn1cblxuZXhwb3J0IHsgZWFjaEF4aXMgfTtcbiIsIi8qKlxuICogQm91bmRpbmcgYm94ZXMgdGVuZCB0byBiZSBkZWZpbmVkIGFzIHRvcCwgbGVmdCwgcmlnaHQsIGJvdHRvbS4gRm9yIHZhcmlvdXMgb3BlcmF0aW9uc1xuICogaXQncyBlYXNpZXIgdG8gY29uc2lkZXIgZWFjaCBheGlzIGluZGl2aWR1YWxseS4gVGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgYm91bmRpbmcgYm94XG4gKiBhcyBhIG1hcCBvZiBzaW5nbGUtYXhpcyBtaW4vbWF4IHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gY29udmVydEJvdW5kaW5nQm94VG9Cb3goeyB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20sIH0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiB7IG1pbjogbGVmdCwgbWF4OiByaWdodCB9LFxuICAgICAgICB5OiB7IG1pbjogdG9wLCBtYXg6IGJvdHRvbSB9LFxuICAgIH07XG59XG5mdW5jdGlvbiBjb252ZXJ0Qm94VG9Cb3VuZGluZ0JveCh7IHgsIHkgfSkge1xuICAgIHJldHVybiB7IHRvcDogeS5taW4sIHJpZ2h0OiB4Lm1heCwgYm90dG9tOiB5Lm1heCwgbGVmdDogeC5taW4gfTtcbn1cbi8qKlxuICogQXBwbGllcyBhIFRyYW5zZm9ybVBvaW50IGZ1bmN0aW9uIHRvIGEgYm91bmRpbmcgYm94LiBUcmFuc2Zvcm1Qb2ludCBpcyB1c3VhbGx5IGEgZnVuY3Rpb25cbiAqIHByb3ZpZGVkIGJ5IEZyYW1lciB0byBhbGxvdyBtZWFzdXJlZCBwb2ludHMgdG8gYmUgY29ycmVjdGVkIGZvciBkZXZpY2Ugc2NhbGluZy4gVGhpcyBpcyB1c2VkXG4gKiB3aGVuIG1lYXN1cmluZyBET00gZWxlbWVudHMgYW5kIERPTSBldmVudCBwb2ludHMuXG4gKi9cbmZ1bmN0aW9uIHRyYW5zZm9ybUJveFBvaW50cyhwb2ludCwgdHJhbnNmb3JtUG9pbnQpIHtcbiAgICBpZiAoIXRyYW5zZm9ybVBvaW50KVxuICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgY29uc3QgdG9wTGVmdCA9IHRyYW5zZm9ybVBvaW50KHsgeDogcG9pbnQubGVmdCwgeTogcG9pbnQudG9wIH0pO1xuICAgIGNvbnN0IGJvdHRvbVJpZ2h0ID0gdHJhbnNmb3JtUG9pbnQoeyB4OiBwb2ludC5yaWdodCwgeTogcG9pbnQuYm90dG9tIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogdG9wTGVmdC55LFxuICAgICAgICBsZWZ0OiB0b3BMZWZ0LngsXG4gICAgICAgIGJvdHRvbTogYm90dG9tUmlnaHQueSxcbiAgICAgICAgcmlnaHQ6IGJvdHRvbVJpZ2h0LngsXG4gICAgfTtcbn1cblxuZXhwb3J0IHsgY29udmVydEJvdW5kaW5nQm94VG9Cb3gsIGNvbnZlcnRCb3hUb0JvdW5kaW5nQm94LCB0cmFuc2Zvcm1Cb3hQb2ludHMgfTtcbiIsImZ1bmN0aW9uIGlzSWRlbnRpdHlTY2FsZShzY2FsZSkge1xuICAgIHJldHVybiBzY2FsZSA9PT0gdW5kZWZpbmVkIHx8IHNjYWxlID09PSAxO1xufVxuZnVuY3Rpb24gaGFzU2NhbGUoeyBzY2FsZSwgc2NhbGVYLCBzY2FsZVkgfSkge1xuICAgIHJldHVybiAoIWlzSWRlbnRpdHlTY2FsZShzY2FsZSkgfHxcbiAgICAgICAgIWlzSWRlbnRpdHlTY2FsZShzY2FsZVgpIHx8XG4gICAgICAgICFpc0lkZW50aXR5U2NhbGUoc2NhbGVZKSk7XG59XG5mdW5jdGlvbiBoYXNUcmFuc2Zvcm0odmFsdWVzKSB7XG4gICAgcmV0dXJuIChoYXNTY2FsZSh2YWx1ZXMpIHx8XG4gICAgICAgIGhhczJEVHJhbnNsYXRlKHZhbHVlcykgfHxcbiAgICAgICAgdmFsdWVzLnogfHxcbiAgICAgICAgdmFsdWVzLnJvdGF0ZSB8fFxuICAgICAgICB2YWx1ZXMucm90YXRlWCB8fFxuICAgICAgICB2YWx1ZXMucm90YXRlWSk7XG59XG5mdW5jdGlvbiBoYXMyRFRyYW5zbGF0ZSh2YWx1ZXMpIHtcbiAgICByZXR1cm4gaXMyRFRyYW5zbGF0ZSh2YWx1ZXMueCkgfHwgaXMyRFRyYW5zbGF0ZSh2YWx1ZXMueSk7XG59XG5mdW5jdGlvbiBpczJEVHJhbnNsYXRlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlICE9PSBcIjAlXCI7XG59XG5cbmV4cG9ydCB7IGhhczJEVHJhbnNsYXRlLCBoYXNTY2FsZSwgaGFzVHJhbnNmb3JtIH07XG4iLCJpbXBvcnQgeyBtaXggfSBmcm9tICcuLi8uLi91dGlscy9taXgubWpzJztcbmltcG9ydCB7IGhhc1RyYW5zZm9ybSB9IGZyb20gJy4uL3V0aWxzL2hhcy10cmFuc2Zvcm0ubWpzJztcblxuLyoqXG4gKiBTY2FsZXMgYSBwb2ludCBiYXNlZCBvbiBhIGZhY3RvciBhbmQgYW4gb3JpZ2luUG9pbnRcbiAqL1xuZnVuY3Rpb24gc2NhbGVQb2ludChwb2ludCwgc2NhbGUsIG9yaWdpblBvaW50KSB7XG4gICAgY29uc3QgZGlzdGFuY2VGcm9tT3JpZ2luID0gcG9pbnQgLSBvcmlnaW5Qb2ludDtcbiAgICBjb25zdCBzY2FsZWQgPSBzY2FsZSAqIGRpc3RhbmNlRnJvbU9yaWdpbjtcbiAgICByZXR1cm4gb3JpZ2luUG9pbnQgKyBzY2FsZWQ7XG59XG4vKipcbiAqIEFwcGxpZXMgYSB0cmFuc2xhdGUvc2NhbGUgZGVsdGEgdG8gYSBwb2ludFxuICovXG5mdW5jdGlvbiBhcHBseVBvaW50RGVsdGEocG9pbnQsIHRyYW5zbGF0ZSwgc2NhbGUsIG9yaWdpblBvaW50LCBib3hTY2FsZSkge1xuICAgIGlmIChib3hTY2FsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBvaW50ID0gc2NhbGVQb2ludChwb2ludCwgYm94U2NhbGUsIG9yaWdpblBvaW50KTtcbiAgICB9XG4gICAgcmV0dXJuIHNjYWxlUG9pbnQocG9pbnQsIHNjYWxlLCBvcmlnaW5Qb2ludCkgKyB0cmFuc2xhdGU7XG59XG4vKipcbiAqIEFwcGxpZXMgYSB0cmFuc2xhdGUvc2NhbGUgZGVsdGEgdG8gYW4gYXhpc1xuICovXG5mdW5jdGlvbiBhcHBseUF4aXNEZWx0YShheGlzLCB0cmFuc2xhdGUgPSAwLCBzY2FsZSA9IDEsIG9yaWdpblBvaW50LCBib3hTY2FsZSkge1xuICAgIGF4aXMubWluID0gYXBwbHlQb2ludERlbHRhKGF4aXMubWluLCB0cmFuc2xhdGUsIHNjYWxlLCBvcmlnaW5Qb2ludCwgYm94U2NhbGUpO1xuICAgIGF4aXMubWF4ID0gYXBwbHlQb2ludERlbHRhKGF4aXMubWF4LCB0cmFuc2xhdGUsIHNjYWxlLCBvcmlnaW5Qb2ludCwgYm94U2NhbGUpO1xufVxuLyoqXG4gKiBBcHBsaWVzIGEgdHJhbnNsYXRlL3NjYWxlIGRlbHRhIHRvIGEgYm94XG4gKi9cbmZ1bmN0aW9uIGFwcGx5Qm94RGVsdGEoYm94LCB7IHgsIHkgfSkge1xuICAgIGFwcGx5QXhpc0RlbHRhKGJveC54LCB4LnRyYW5zbGF0ZSwgeC5zY2FsZSwgeC5vcmlnaW5Qb2ludCk7XG4gICAgYXBwbHlBeGlzRGVsdGEoYm94LnksIHkudHJhbnNsYXRlLCB5LnNjYWxlLCB5Lm9yaWdpblBvaW50KTtcbn1cbi8qKlxuICogQXBwbHkgYSB0cmVlIG9mIGRlbHRhcyB0byBhIGJveC4gV2UgZG8gdGhpcyB0byBjYWxjdWxhdGUgdGhlIGVmZmVjdCBvZiBhbGwgdGhlIHRyYW5zZm9ybXNcbiAqIGluIGEgdHJlZSB1cG9uIG91ciBib3ggYmVmb3JlIHRoZW4gY2FsY3VsYXRpbmcgaG93IHRvIHByb2plY3QgaXQgaW50byBvdXIgZGVzaXJlZCB2aWV3cG9ydC1yZWxhdGl2ZSBib3hcbiAqXG4gKiBUaGlzIGlzIHRoZSBmaW5hbCBuZXN0ZWQgbG9vcCB3aXRoaW4gdXBkYXRlTGF5b3V0RGVsdGEgZm9yIGZ1dHVyZSByZWZhY3RvcmluZ1xuICovXG5mdW5jdGlvbiBhcHBseVRyZWVEZWx0YXMoYm94LCB0cmVlU2NhbGUsIHRyZWVQYXRoLCBpc1NoYXJlZFRyYW5zaXRpb24gPSBmYWxzZSkge1xuICAgIGNvbnN0IHRyZWVMZW5ndGggPSB0cmVlUGF0aC5sZW5ndGg7XG4gICAgaWYgKCF0cmVlTGVuZ3RoKVxuICAgICAgICByZXR1cm47XG4gICAgLy8gUmVzZXQgdGhlIHRyZWVTY2FsZVxuICAgIHRyZWVTY2FsZS54ID0gdHJlZVNjYWxlLnkgPSAxO1xuICAgIGxldCBub2RlO1xuICAgIGxldCBkZWx0YTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyZWVMZW5ndGg7IGkrKykge1xuICAgICAgICBub2RlID0gdHJlZVBhdGhbaV07XG4gICAgICAgIGRlbHRhID0gbm9kZS5wcm9qZWN0aW9uRGVsdGE7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUT0RPOiBQcmVmZXIgdG8gcmVtb3ZlIHRoaXMsIGJ1dCBjdXJyZW50bHkgd2UgaGF2ZSBtb3Rpb24gY29tcG9uZW50cyB3aXRoXG4gICAgICAgICAqIGRpc3BsYXk6IGNvbnRlbnRzIGluIEZyYW1lci5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gbm9kZS5pbnN0YW5jZTtcbiAgICAgICAgaWYgKGluc3RhbmNlICYmXG4gICAgICAgICAgICBpbnN0YW5jZS5zdHlsZSAmJlxuICAgICAgICAgICAgaW5zdGFuY2Uuc3R5bGUuZGlzcGxheSA9PT0gXCJjb250ZW50c1wiKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTaGFyZWRUcmFuc2l0aW9uICYmXG4gICAgICAgICAgICBub2RlLm9wdGlvbnMubGF5b3V0U2Nyb2xsICYmXG4gICAgICAgICAgICBub2RlLnNjcm9sbCAmJlxuICAgICAgICAgICAgbm9kZSAhPT0gbm9kZS5yb290KSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1Cb3goYm94LCB7XG4gICAgICAgICAgICAgICAgeDogLW5vZGUuc2Nyb2xsLm9mZnNldC54LFxuICAgICAgICAgICAgICAgIHk6IC1ub2RlLnNjcm9sbC5vZmZzZXQueSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWx0YSkge1xuICAgICAgICAgICAgLy8gSW5jb3BvcmF0ZSBlYWNoIGFuY2VzdG9yJ3Mgc2NhbGUgaW50byBhIGN1bG11bGF0aXZlIHRyZWVTY2FsZSBmb3IgdGhpcyBjb21wb25lbnRcbiAgICAgICAgICAgIHRyZWVTY2FsZS54ICo9IGRlbHRhLnguc2NhbGU7XG4gICAgICAgICAgICB0cmVlU2NhbGUueSAqPSBkZWx0YS55LnNjYWxlO1xuICAgICAgICAgICAgLy8gQXBwbHkgZWFjaCBhbmNlc3RvcidzIGNhbGN1bGF0ZWQgZGVsdGEgaW50byB0aGlzIGNvbXBvbmVudCdzIHJlY29yZGVkIGxheW91dCBib3hcbiAgICAgICAgICAgIGFwcGx5Qm94RGVsdGEoYm94LCBkZWx0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU2hhcmVkVHJhbnNpdGlvbiAmJiBoYXNUcmFuc2Zvcm0obm9kZS5sYXRlc3RWYWx1ZXMpKSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1Cb3goYm94LCBub2RlLmxhdGVzdFZhbHVlcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU25hcCB0cmVlIHNjYWxlIGJhY2sgdG8gMSBpZiBpdCdzIHdpdGhpbiBhIG5vbi1wZXJjZWl2YWJsZSB0aHJlc2hvbGQuXG4gICAgICogVGhpcyB3aWxsIGhlbHAgcmVkdWNlIHVzZWxlc3Mgc2NhbGVzIGdldHRpbmcgcmVuZGVyZWQuXG4gICAgICovXG4gICAgdHJlZVNjYWxlLnggPSBzbmFwVG9EZWZhdWx0KHRyZWVTY2FsZS54KTtcbiAgICB0cmVlU2NhbGUueSA9IHNuYXBUb0RlZmF1bHQodHJlZVNjYWxlLnkpO1xufVxuZnVuY3Rpb24gc25hcFRvRGVmYXVsdChzY2FsZSkge1xuICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKHNjYWxlKSlcbiAgICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIHJldHVybiBzY2FsZSA+IDEuMDAwMDAwMDAwMDAwMSB8fCBzY2FsZSA8IDAuOTk5OTk5OTk5OTk5ID8gc2NhbGUgOiAxO1xufVxuZnVuY3Rpb24gdHJhbnNsYXRlQXhpcyhheGlzLCBkaXN0YW5jZSkge1xuICAgIGF4aXMubWluID0gYXhpcy5taW4gKyBkaXN0YW5jZTtcbiAgICBheGlzLm1heCA9IGF4aXMubWF4ICsgZGlzdGFuY2U7XG59XG4vKipcbiAqIEFwcGx5IGEgdHJhbnNmb3JtIHRvIGFuIGF4aXMgZnJvbSB0aGUgbGF0ZXN0IHJlc29sdmVkIG1vdGlvbiB2YWx1ZXMuXG4gKiBUaGlzIGZ1bmN0aW9uIGJhc2ljYWxseSBhY3RzIGFzIGEgYnJpZGdlIGJldHdlZW4gYSBmbGF0IG1vdGlvbiB2YWx1ZSBtYXBcbiAqIGFuZCBhcHBseUF4aXNEZWx0YVxuICovXG5mdW5jdGlvbiB0cmFuc2Zvcm1BeGlzKGF4aXMsIHRyYW5zZm9ybXMsIFtrZXksIHNjYWxlS2V5LCBvcmlnaW5LZXldKSB7XG4gICAgY29uc3QgYXhpc09yaWdpbiA9IHRyYW5zZm9ybXNbb3JpZ2luS2V5XSAhPT0gdW5kZWZpbmVkID8gdHJhbnNmb3Jtc1tvcmlnaW5LZXldIDogMC41O1xuICAgIGNvbnN0IG9yaWdpblBvaW50ID0gbWl4KGF4aXMubWluLCBheGlzLm1heCwgYXhpc09yaWdpbik7XG4gICAgLy8gQXBwbHkgdGhlIGF4aXMgZGVsdGEgdG8gdGhlIGZpbmFsIGF4aXNcbiAgICBhcHBseUF4aXNEZWx0YShheGlzLCB0cmFuc2Zvcm1zW2tleV0sIHRyYW5zZm9ybXNbc2NhbGVLZXldLCBvcmlnaW5Qb2ludCwgdHJhbnNmb3Jtcy5zY2FsZSk7XG59XG4vKipcbiAqIFRoZSBuYW1lcyBvZiB0aGUgbW90aW9uIHZhbHVlcyB3ZSB3YW50IHRvIGFwcGx5IGFzIHRyYW5zbGF0aW9uLCBzY2FsZSBhbmQgb3JpZ2luLlxuICovXG5jb25zdCB4S2V5cyA9IFtcInhcIiwgXCJzY2FsZVhcIiwgXCJvcmlnaW5YXCJdO1xuY29uc3QgeUtleXMgPSBbXCJ5XCIsIFwic2NhbGVZXCIsIFwib3JpZ2luWVwiXTtcbi8qKlxuICogQXBwbHkgYSB0cmFuc2Zvcm0gdG8gYSBib3ggZnJvbSB0aGUgbGF0ZXN0IHJlc29sdmVkIG1vdGlvbiB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHRyYW5zZm9ybUJveChib3gsIHRyYW5zZm9ybSkge1xuICAgIHRyYW5zZm9ybUF4aXMoYm94LngsIHRyYW5zZm9ybSwgeEtleXMpO1xuICAgIHRyYW5zZm9ybUF4aXMoYm94LnksIHRyYW5zZm9ybSwgeUtleXMpO1xufVxuXG5leHBvcnQgeyBhcHBseUF4aXNEZWx0YSwgYXBwbHlCb3hEZWx0YSwgYXBwbHlQb2ludERlbHRhLCBhcHBseVRyZWVEZWx0YXMsIHNjYWxlUG9pbnQsIHRyYW5zZm9ybUF4aXMsIHRyYW5zZm9ybUJveCwgdHJhbnNsYXRlQXhpcyB9O1xuIiwiaW1wb3J0IHsgY29udmVydEJvdW5kaW5nQm94VG9Cb3gsIHRyYW5zZm9ybUJveFBvaW50cyB9IGZyb20gJy4uL2dlb21ldHJ5L2NvbnZlcnNpb24ubWpzJztcbmltcG9ydCB7IHRyYW5zbGF0ZUF4aXMgfSBmcm9tICcuLi9nZW9tZXRyeS9kZWx0YS1hcHBseS5tanMnO1xuXG5mdW5jdGlvbiBtZWFzdXJlVmlld3BvcnRCb3goaW5zdGFuY2UsIHRyYW5zZm9ybVBvaW50KSB7XG4gICAgcmV0dXJuIGNvbnZlcnRCb3VuZGluZ0JveFRvQm94KHRyYW5zZm9ybUJveFBvaW50cyhpbnN0YW5jZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgdHJhbnNmb3JtUG9pbnQpKTtcbn1cbmZ1bmN0aW9uIG1lYXN1cmVQYWdlQm94KGVsZW1lbnQsIHJvb3RQcm9qZWN0aW9uTm9kZSwgdHJhbnNmb3JtUGFnZVBvaW50KSB7XG4gICAgY29uc3Qgdmlld3BvcnRCb3ggPSBtZWFzdXJlVmlld3BvcnRCb3goZWxlbWVudCwgdHJhbnNmb3JtUGFnZVBvaW50KTtcbiAgICBjb25zdCB7IHNjcm9sbCB9ID0gcm9vdFByb2plY3Rpb25Ob2RlO1xuICAgIGlmIChzY3JvbGwpIHtcbiAgICAgICAgdHJhbnNsYXRlQXhpcyh2aWV3cG9ydEJveC54LCBzY3JvbGwub2Zmc2V0LngpO1xuICAgICAgICB0cmFuc2xhdGVBeGlzKHZpZXdwb3J0Qm94LnksIHNjcm9sbC5vZmZzZXQueSk7XG4gICAgfVxuICAgIHJldHVybiB2aWV3cG9ydEJveDtcbn1cblxuZXhwb3J0IHsgbWVhc3VyZVBhZ2VCb3gsIG1lYXN1cmVWaWV3cG9ydEJveCB9O1xuIiwiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvZXJyb3JzLm1qcyc7XG5pbXBvcnQgeyBQYW5TZXNzaW9uIH0gZnJvbSAnLi4vcGFuL1BhblNlc3Npb24ubWpzJztcbmltcG9ydCB7IGdldEdsb2JhbExvY2sgfSBmcm9tICcuL3V0aWxzL2xvY2subWpzJztcbmltcG9ydCB7IGlzUmVmT2JqZWN0IH0gZnJvbSAnLi4vLi4vdXRpbHMvaXMtcmVmLW9iamVjdC5tanMnO1xuaW1wb3J0IHsgYWRkUG9pbnRlckV2ZW50IH0gZnJvbSAnLi4vLi4vZXZlbnRzL2FkZC1wb2ludGVyLWV2ZW50Lm1qcyc7XG5pbXBvcnQgeyBhcHBseUNvbnN0cmFpbnRzLCBjYWxjUmVsYXRpdmVDb25zdHJhaW50cywgcmVzb2x2ZURyYWdFbGFzdGljLCBjYWxjVmlld3BvcnRDb25zdHJhaW50cywgZGVmYXVsdEVsYXN0aWMsIHJlYmFzZUF4aXNDb25zdHJhaW50cywgY2FsY09yaWdpbiB9IGZyb20gJy4vdXRpbHMvY29uc3RyYWludHMubWpzJztcbmltcG9ydCB7IGNyZWF0ZUJveCB9IGZyb20gJy4uLy4uL3Byb2plY3Rpb24vZ2VvbWV0cnkvbW9kZWxzLm1qcyc7XG5pbXBvcnQgeyBlYWNoQXhpcyB9IGZyb20gJy4uLy4uL3Byb2plY3Rpb24vdXRpbHMvZWFjaC1heGlzLm1qcyc7XG5pbXBvcnQgeyBtZWFzdXJlUGFnZUJveCB9IGZyb20gJy4uLy4uL3Byb2plY3Rpb24vdXRpbHMvbWVhc3VyZS5tanMnO1xuaW1wb3J0IHsgZXh0cmFjdEV2ZW50SW5mbyB9IGZyb20gJy4uLy4uL2V2ZW50cy9ldmVudC1pbmZvLm1qcyc7XG5pbXBvcnQgeyBjb252ZXJ0Qm94VG9Cb3VuZGluZ0JveCwgY29udmVydEJvdW5kaW5nQm94VG9Cb3ggfSBmcm9tICcuLi8uLi9wcm9qZWN0aW9uL2dlb21ldHJ5L2NvbnZlcnNpb24ubWpzJztcbmltcG9ydCB7IGFkZERvbUV2ZW50IH0gZnJvbSAnLi4vLi4vZXZlbnRzL2FkZC1kb20tZXZlbnQubWpzJztcbmltcG9ydCB7IGNhbGNMZW5ndGggfSBmcm9tICcuLi8uLi9wcm9qZWN0aW9uL2dlb21ldHJ5L2RlbHRhLWNhbGMubWpzJztcbmltcG9ydCB7IG1peCB9IGZyb20gJy4uLy4uL3V0aWxzL21peC5tanMnO1xuaW1wb3J0IHsgcGVyY2VudCB9IGZyb20gJy4uLy4uL3ZhbHVlL3R5cGVzL251bWJlcnMvdW5pdHMubWpzJztcbmltcG9ydCB7IGFuaW1hdGVNb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uL2FuaW1hdGlvbi9pbnRlcmZhY2VzL21vdGlvbi12YWx1ZS5tanMnO1xuaW1wb3J0IHsgZnJhbWUgfSBmcm9tICcuLi8uLi9mcmFtZWxvb3AvZnJhbWUubWpzJztcblxuY29uc3QgZWxlbWVudERyYWdDb250cm9scyA9IG5ldyBXZWFrTWFwKCk7XG4vKipcbiAqXG4gKi9cbi8vIGxldCBsYXRlc3RQb2ludGVyRXZlbnQ6IFBvaW50ZXJFdmVudFxuY2xhc3MgVmlzdWFsRWxlbWVudERyYWdDb250cm9scyB7XG4gICAgY29uc3RydWN0b3IodmlzdWFsRWxlbWVudCkge1xuICAgICAgICAvLyBUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgZHJhZyBnZXN0dXJlIGxvY2ssIGVuc3VyaW5nIG9ubHkgb25lIGNvbXBvbmVudFxuICAgICAgICAvLyBjYW4gXCJjYXB0dXJlXCIgdGhlIGRyYWcgb2Ygb25lIG9yIGJvdGggYXhlcy5cbiAgICAgICAgLy8gVE9ETzogTG9vayBpbnRvIG1vdmluZyB0aGlzIGludG8gcGFuc2Vzc2lvbj9cbiAgICAgICAgdGhpcy5vcGVuR2xvYmFsTG9jayA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmN1cnJlbnREaXJlY3Rpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm9yaWdpblBvaW50ID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcGVybWl0dGVkIGJvdW5kYXJpZXMgb2YgdHJhdmVsLCBpbiBwaXhlbHMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvbnN0cmFpbnRzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaGFzTXV0YXRlZENvbnN0cmFpbnRzID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcGVyLWF4aXMgcmVzb2x2ZWQgZWxhc3RpYyB2YWx1ZXMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmVsYXN0aWMgPSBjcmVhdGVCb3goKTtcbiAgICAgICAgdGhpcy52aXN1YWxFbGVtZW50ID0gdmlzdWFsRWxlbWVudDtcbiAgICB9XG4gICAgc3RhcnQob3JpZ2luRXZlbnQsIHsgc25hcFRvQ3Vyc29yID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEb24ndCBzdGFydCBkcmFnZ2luZyBpZiB0aGlzIGNvbXBvbmVudCBpcyBleGl0aW5nXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCB7IHByZXNlbmNlQ29udGV4dCB9ID0gdGhpcy52aXN1YWxFbGVtZW50O1xuICAgICAgICBpZiAocHJlc2VuY2VDb250ZXh0ICYmIHByZXNlbmNlQ29udGV4dC5pc1ByZXNlbnQgPT09IGZhbHNlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBvblNlc3Npb25TdGFydCA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gU3RvcCBhbnkgYW5pbWF0aW9ucyBvbiBib3RoIGF4aXMgdmFsdWVzIGltbWVkaWF0ZWx5LiBUaGlzIGFsbG93cyB0aGUgdXNlciB0byB0aHJvdyBhbmQgY2F0Y2hcbiAgICAgICAgICAgIC8vIHRoZSBjb21wb25lbnQuXG4gICAgICAgICAgICB0aGlzLnN0b3BBbmltYXRpb24oKTtcbiAgICAgICAgICAgIGlmIChzbmFwVG9DdXJzb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNuYXBUb0N1cnNvcihleHRyYWN0RXZlbnRJbmZvKGV2ZW50LCBcInBhZ2VcIikucG9pbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBvblN0YXJ0ID0gKGV2ZW50LCBpbmZvKSA9PiB7XG4gICAgICAgICAgICAvLyBBdHRlbXB0IHRvIGdyYWIgdGhlIGdsb2JhbCBkcmFnIGdlc3R1cmUgbG9jayAtIG1heWJlIG1ha2UgdGhpcyBwYXJ0IG9mIFBhblNlc3Npb25cbiAgICAgICAgICAgIGNvbnN0IHsgZHJhZywgZHJhZ1Byb3BhZ2F0aW9uLCBvbkRyYWdTdGFydCB9ID0gdGhpcy5nZXRQcm9wcygpO1xuICAgICAgICAgICAgaWYgKGRyYWcgJiYgIWRyYWdQcm9wYWdhdGlvbikge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wZW5HbG9iYWxMb2NrKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW5HbG9iYWxMb2NrKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuR2xvYmFsTG9jayA9IGdldEdsb2JhbExvY2soZHJhZyk7XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgZG9uICd0IGhhdmUgdGhlIGxvY2ssIGRvbid0IHN0YXJ0IGRyYWdnaW5nXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wZW5HbG9iYWxMb2NrKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50RGlyZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZUNvbnN0cmFpbnRzKCk7XG4gICAgICAgICAgICBpZiAodGhpcy52aXN1YWxFbGVtZW50LnByb2plY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpc3VhbEVsZW1lbnQucHJvamVjdGlvbi5pc0FuaW1hdGlvbkJsb2NrZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMudmlzdWFsRWxlbWVudC5wcm9qZWN0aW9uLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmVjb3JkIGdlc3R1cmUgb3JpZ2luXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGVhY2hBeGlzKChheGlzKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzLmdldEF4aXNNb3Rpb25WYWx1ZShheGlzKS5nZXQoKSB8fCAwO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIHRoZSBNb3Rpb25WYWx1ZSBpcyBhIHBlcmNlbnRhZ2UgdmFsdWUgY29udmVydCB0byBweFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGlmIChwZXJjZW50LnRlc3QoY3VycmVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBwcm9qZWN0aW9uIH0gPSB0aGlzLnZpc3VhbEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9qZWN0aW9uICYmIHByb2plY3Rpb24ubGF5b3V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZWFzdXJlZEF4aXMgPSBwcm9qZWN0aW9uLmxheW91dC5sYXlvdXRCb3hbYXhpc107XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVhc3VyZWRBeGlzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gY2FsY0xlbmd0aChtZWFzdXJlZEF4aXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBsZW5ndGggKiAocGFyc2VGbG9hdChjdXJyZW50KSAvIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5vcmlnaW5Qb2ludFtheGlzXSA9IGN1cnJlbnQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIEZpcmUgb25EcmFnU3RhcnQgZXZlbnRcbiAgICAgICAgICAgIGlmIChvbkRyYWdTdGFydCkge1xuICAgICAgICAgICAgICAgIGZyYW1lLnVwZGF0ZSgoKSA9PiBvbkRyYWdTdGFydChldmVudCwgaW5mbyksIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgYW5pbWF0aW9uU3RhdGUgfSA9IHRoaXMudmlzdWFsRWxlbWVudDtcbiAgICAgICAgICAgIGFuaW1hdGlvblN0YXRlICYmIGFuaW1hdGlvblN0YXRlLnNldEFjdGl2ZShcIndoaWxlRHJhZ1wiLCB0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgb25Nb3ZlID0gKGV2ZW50LCBpbmZvKSA9PiB7XG4gICAgICAgICAgICAvLyBsYXRlc3RQb2ludGVyRXZlbnQgPSBldmVudFxuICAgICAgICAgICAgY29uc3QgeyBkcmFnUHJvcGFnYXRpb24sIGRyYWdEaXJlY3Rpb25Mb2NrLCBvbkRpcmVjdGlvbkxvY2ssIG9uRHJhZywgfSA9IHRoaXMuZ2V0UHJvcHMoKTtcbiAgICAgICAgICAgIC8vIElmIHdlIGRpZG4ndCBzdWNjZXNzZnVsbHkgcmVjZWl2ZSB0aGUgZ2VzdHVyZSBsb2NrLCBlYXJseSByZXR1cm4uXG4gICAgICAgICAgICBpZiAoIWRyYWdQcm9wYWdhdGlvbiAmJiAhdGhpcy5vcGVuR2xvYmFsTG9jaylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCB7IG9mZnNldCB9ID0gaW5mbztcbiAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gZGV0ZWN0IGRyYWcgZGlyZWN0aW9uIGlmIGRpcmVjdGlvbkxvY2sgaXMgdHJ1ZVxuICAgICAgICAgICAgaWYgKGRyYWdEaXJlY3Rpb25Mb2NrICYmIHRoaXMuY3VycmVudERpcmVjdGlvbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudERpcmVjdGlvbiA9IGdldEN1cnJlbnREaXJlY3Rpb24ob2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSd2ZSBzdWNjZXNzZnVsbHkgc2V0IGEgZGlyZWN0aW9uLCBub3RpZnkgbGlzdGVuZXJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50RGlyZWN0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRGlyZWN0aW9uTG9jayAmJiBvbkRpcmVjdGlvbkxvY2sodGhpcy5jdXJyZW50RGlyZWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXBkYXRlIGVhY2ggcG9pbnQgd2l0aCB0aGUgbGF0ZXN0IHBvc2l0aW9uXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUF4aXMoXCJ4XCIsIGluZm8ucG9pbnQsIG9mZnNldCk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUF4aXMoXCJ5XCIsIGluZm8ucG9pbnQsIG9mZnNldCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElkZWFsbHkgd2Ugd291bGQgbGVhdmUgdGhlIHJlbmRlcmVyIHRvIGZpcmUgbmF0dXJhbGx5IGF0IHRoZSBlbmQgb2ZcbiAgICAgICAgICAgICAqIHRoaXMgZnJhbWUgYnV0IGlmIHRoZSBlbGVtZW50IGlzIGFib3V0IHRvIGNoYW5nZSBsYXlvdXQgYXMgdGhlIHJlc3VsdFxuICAgICAgICAgICAgICogb2YgYSByZS1yZW5kZXIgd2Ugd2FudCB0byBlbnN1cmUgdGhlIGJyb3dzZXIgY2FuIHJlYWQgdGhlIGxhdGVzdFxuICAgICAgICAgICAgICogYm91bmRpbmcgYm94IHRvIGVuc3VyZSB0aGUgcG9pbnRlciBhbmQgZWxlbWVudCBkb24ndCBmYWxsIG91dCBvZiBzeW5jLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLnZpc3VhbEVsZW1lbnQucmVuZGVyKCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoaXMgbXVzdCBmaXJlIGFmdGVyIHRoZSByZW5kZXIgY2FsbCBhcyBpdCBtaWdodCB0cmlnZ2VyIGEgc3RhdGVcbiAgICAgICAgICAgICAqIGNoYW5nZSB3aGljaCBpdHNlbGYgbWlnaHQgdHJpZ2dlciBhIGxheW91dCB1cGRhdGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG9uRHJhZyAmJiBvbkRyYWcoZXZlbnQsIGluZm8pO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBvblNlc3Npb25FbmQgPSAoZXZlbnQsIGluZm8pID0+IHRoaXMuc3RvcChldmVudCwgaW5mbyk7XG4gICAgICAgIHRoaXMucGFuU2Vzc2lvbiA9IG5ldyBQYW5TZXNzaW9uKG9yaWdpbkV2ZW50LCB7XG4gICAgICAgICAgICBvblNlc3Npb25TdGFydCxcbiAgICAgICAgICAgIG9uU3RhcnQsXG4gICAgICAgICAgICBvbk1vdmUsXG4gICAgICAgICAgICBvblNlc3Npb25FbmQsXG4gICAgICAgIH0sIHsgdHJhbnNmb3JtUGFnZVBvaW50OiB0aGlzLnZpc3VhbEVsZW1lbnQuZ2V0VHJhbnNmb3JtUGFnZVBvaW50KCkgfSk7XG4gICAgfVxuICAgIHN0b3AoZXZlbnQsIGluZm8pIHtcbiAgICAgICAgY29uc3QgaXNEcmFnZ2luZyA9IHRoaXMuaXNEcmFnZ2luZztcbiAgICAgICAgdGhpcy5jYW5jZWwoKTtcbiAgICAgICAgaWYgKCFpc0RyYWdnaW5nKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB7IHZlbG9jaXR5IH0gPSBpbmZvO1xuICAgICAgICB0aGlzLnN0YXJ0QW5pbWF0aW9uKHZlbG9jaXR5KTtcbiAgICAgICAgY29uc3QgeyBvbkRyYWdFbmQgfSA9IHRoaXMuZ2V0UHJvcHMoKTtcbiAgICAgICAgaWYgKG9uRHJhZ0VuZCkge1xuICAgICAgICAgICAgZnJhbWUudXBkYXRlKCgpID0+IG9uRHJhZ0VuZChldmVudCwgaW5mbykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhbmNlbCgpIHtcbiAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHsgcHJvamVjdGlvbiwgYW5pbWF0aW9uU3RhdGUgfSA9IHRoaXMudmlzdWFsRWxlbWVudDtcbiAgICAgICAgaWYgKHByb2plY3Rpb24pIHtcbiAgICAgICAgICAgIHByb2plY3Rpb24uaXNBbmltYXRpb25CbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYW5TZXNzaW9uICYmIHRoaXMucGFuU2Vzc2lvbi5lbmQoKTtcbiAgICAgICAgdGhpcy5wYW5TZXNzaW9uID0gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCB7IGRyYWdQcm9wYWdhdGlvbiB9ID0gdGhpcy5nZXRQcm9wcygpO1xuICAgICAgICBpZiAoIWRyYWdQcm9wYWdhdGlvbiAmJiB0aGlzLm9wZW5HbG9iYWxMb2NrKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW5HbG9iYWxMb2NrKCk7XG4gICAgICAgICAgICB0aGlzLm9wZW5HbG9iYWxMb2NrID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBhbmltYXRpb25TdGF0ZSAmJiBhbmltYXRpb25TdGF0ZS5zZXRBY3RpdmUoXCJ3aGlsZURyYWdcIiwgZmFsc2UpO1xuICAgIH1cbiAgICB1cGRhdGVBeGlzKGF4aXMsIF9wb2ludCwgb2Zmc2V0KSB7XG4gICAgICAgIGNvbnN0IHsgZHJhZyB9ID0gdGhpcy5nZXRQcm9wcygpO1xuICAgICAgICAvLyBJZiB3ZSdyZSBub3QgZHJhZ2dpbmcgdGhpcyBheGlzLCBkbyBhbiBlYXJseSByZXR1cm4uXG4gICAgICAgIGlmICghb2Zmc2V0IHx8ICFzaG91bGREcmFnKGF4aXMsIGRyYWcsIHRoaXMuY3VycmVudERpcmVjdGlvbikpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGF4aXNWYWx1ZSA9IHRoaXMuZ2V0QXhpc01vdGlvblZhbHVlKGF4aXMpO1xuICAgICAgICBsZXQgbmV4dCA9IHRoaXMub3JpZ2luUG9pbnRbYXhpc10gKyBvZmZzZXRbYXhpc107XG4gICAgICAgIC8vIEFwcGx5IGNvbnN0cmFpbnRzXG4gICAgICAgIGlmICh0aGlzLmNvbnN0cmFpbnRzICYmIHRoaXMuY29uc3RyYWludHNbYXhpc10pIHtcbiAgICAgICAgICAgIG5leHQgPSBhcHBseUNvbnN0cmFpbnRzKG5leHQsIHRoaXMuY29uc3RyYWludHNbYXhpc10sIHRoaXMuZWxhc3RpY1theGlzXSk7XG4gICAgICAgIH1cbiAgICAgICAgYXhpc1ZhbHVlLnNldChuZXh0KTtcbiAgICB9XG4gICAgcmVzb2x2ZUNvbnN0cmFpbnRzKCkge1xuICAgICAgICBjb25zdCB7IGRyYWdDb25zdHJhaW50cywgZHJhZ0VsYXN0aWMgfSA9IHRoaXMuZ2V0UHJvcHMoKTtcbiAgICAgICAgY29uc3QgeyBsYXlvdXQgfSA9IHRoaXMudmlzdWFsRWxlbWVudC5wcm9qZWN0aW9uIHx8IHt9O1xuICAgICAgICBjb25zdCBwcmV2Q29uc3RyYWludHMgPSB0aGlzLmNvbnN0cmFpbnRzO1xuICAgICAgICBpZiAoZHJhZ0NvbnN0cmFpbnRzICYmIGlzUmVmT2JqZWN0KGRyYWdDb25zdHJhaW50cykpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jb25zdHJhaW50cykge1xuICAgICAgICAgICAgICAgIHRoaXMuY29uc3RyYWludHMgPSB0aGlzLnJlc29sdmVSZWZDb25zdHJhaW50cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRyYWdDb25zdHJhaW50cyAmJiBsYXlvdXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnN0cmFpbnRzID0gY2FsY1JlbGF0aXZlQ29uc3RyYWludHMobGF5b3V0LmxheW91dEJveCwgZHJhZ0NvbnN0cmFpbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY29uc3RyYWludHMgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVsYXN0aWMgPSByZXNvbHZlRHJhZ0VsYXN0aWMoZHJhZ0VsYXN0aWMpO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgd2UncmUgb3V0cHV0dGluZyB0byBleHRlcm5hbCBNb3Rpb25WYWx1ZXMsIHdlIHdhbnQgdG8gcmViYXNlIHRoZSBtZWFzdXJlZCBjb25zdHJhaW50c1xuICAgICAgICAgKiBmcm9tIHZpZXdwb3J0LXJlbGF0aXZlIHRvIGNvbXBvbmVudC1yZWxhdGl2ZS5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChwcmV2Q29uc3RyYWludHMgIT09IHRoaXMuY29uc3RyYWludHMgJiZcbiAgICAgICAgICAgIGxheW91dCAmJlxuICAgICAgICAgICAgdGhpcy5jb25zdHJhaW50cyAmJlxuICAgICAgICAgICAgIXRoaXMuaGFzTXV0YXRlZENvbnN0cmFpbnRzKSB7XG4gICAgICAgICAgICBlYWNoQXhpcygoYXhpcykgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdldEF4aXNNb3Rpb25WYWx1ZShheGlzKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnN0cmFpbnRzW2F4aXNdID0gcmViYXNlQXhpc0NvbnN0cmFpbnRzKGxheW91dC5sYXlvdXRCb3hbYXhpc10sIHRoaXMuY29uc3RyYWludHNbYXhpc10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlc29sdmVSZWZDb25zdHJhaW50cygpIHtcbiAgICAgICAgY29uc3QgeyBkcmFnQ29uc3RyYWludHM6IGNvbnN0cmFpbnRzLCBvbk1lYXN1cmVEcmFnQ29uc3RyYWludHMgfSA9IHRoaXMuZ2V0UHJvcHMoKTtcbiAgICAgICAgaWYgKCFjb25zdHJhaW50cyB8fCAhaXNSZWZPYmplY3QoY29uc3RyYWludHMpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCBjb25zdHJhaW50c0VsZW1lbnQgPSBjb25zdHJhaW50cy5jdXJyZW50O1xuICAgICAgICBpbnZhcmlhbnQoY29uc3RyYWludHNFbGVtZW50ICE9PSBudWxsLCBcIklmIGBkcmFnQ29uc3RyYWludHNgIGlzIHNldCBhcyBhIFJlYWN0IHJlZiwgdGhhdCByZWYgbXVzdCBiZSBwYXNzZWQgdG8gYW5vdGhlciBjb21wb25lbnQncyBgcmVmYCBwcm9wLlwiKTtcbiAgICAgICAgY29uc3QgeyBwcm9qZWN0aW9uIH0gPSB0aGlzLnZpc3VhbEVsZW1lbnQ7XG4gICAgICAgIC8vIFRPRE9cbiAgICAgICAgaWYgKCFwcm9qZWN0aW9uIHx8ICFwcm9qZWN0aW9uLmxheW91dClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3QgY29uc3RyYWludHNCb3ggPSBtZWFzdXJlUGFnZUJveChjb25zdHJhaW50c0VsZW1lbnQsIHByb2plY3Rpb24ucm9vdCwgdGhpcy52aXN1YWxFbGVtZW50LmdldFRyYW5zZm9ybVBhZ2VQb2ludCgpKTtcbiAgICAgICAgbGV0IG1lYXN1cmVkQ29uc3RyYWludHMgPSBjYWxjVmlld3BvcnRDb25zdHJhaW50cyhwcm9qZWN0aW9uLmxheW91dC5sYXlvdXRCb3gsIGNvbnN0cmFpbnRzQm94KTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoZXJlJ3MgYW4gb25NZWFzdXJlRHJhZ0NvbnN0cmFpbnRzIGxpc3RlbmVyIHdlIGNhbGwgaXQgYW5kXG4gICAgICAgICAqIGlmIGRpZmZlcmVudCBjb25zdHJhaW50cyBhcmUgcmV0dXJuZWQsIHNldCBjb25zdHJhaW50cyB0byB0aGF0XG4gICAgICAgICAqL1xuICAgICAgICBpZiAob25NZWFzdXJlRHJhZ0NvbnN0cmFpbnRzKSB7XG4gICAgICAgICAgICBjb25zdCB1c2VyQ29uc3RyYWludHMgPSBvbk1lYXN1cmVEcmFnQ29uc3RyYWludHMoY29udmVydEJveFRvQm91bmRpbmdCb3gobWVhc3VyZWRDb25zdHJhaW50cykpO1xuICAgICAgICAgICAgdGhpcy5oYXNNdXRhdGVkQ29uc3RyYWludHMgPSAhIXVzZXJDb25zdHJhaW50cztcbiAgICAgICAgICAgIGlmICh1c2VyQ29uc3RyYWludHMpIHtcbiAgICAgICAgICAgICAgICBtZWFzdXJlZENvbnN0cmFpbnRzID0gY29udmVydEJvdW5kaW5nQm94VG9Cb3godXNlckNvbnN0cmFpbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVhc3VyZWRDb25zdHJhaW50cztcbiAgICB9XG4gICAgc3RhcnRBbmltYXRpb24odmVsb2NpdHkpIHtcbiAgICAgICAgY29uc3QgeyBkcmFnLCBkcmFnTW9tZW50dW0sIGRyYWdFbGFzdGljLCBkcmFnVHJhbnNpdGlvbiwgZHJhZ1NuYXBUb09yaWdpbiwgb25EcmFnVHJhbnNpdGlvbkVuZCwgfSA9IHRoaXMuZ2V0UHJvcHMoKTtcbiAgICAgICAgY29uc3QgY29uc3RyYWludHMgPSB0aGlzLmNvbnN0cmFpbnRzIHx8IHt9O1xuICAgICAgICBjb25zdCBtb21lbnR1bUFuaW1hdGlvbnMgPSBlYWNoQXhpcygoYXhpcykgPT4ge1xuICAgICAgICAgICAgaWYgKCFzaG91bGREcmFnKGF4aXMsIGRyYWcsIHRoaXMuY3VycmVudERpcmVjdGlvbikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdHJhbnNpdGlvbiA9IChjb25zdHJhaW50cyAmJiBjb25zdHJhaW50c1theGlzXSkgfHwge307XG4gICAgICAgICAgICBpZiAoZHJhZ1NuYXBUb09yaWdpbilcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uID0geyBtaW46IDAsIG1heDogMCB9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBPdmVyZGFtcCB0aGUgYm91bmRhcnkgc3ByaW5nIGlmIGBkcmFnRWxhc3RpY2AgaXMgZGlzYWJsZWQuIFRoZXJlJ3Mgc3RpbGwgYSBmcmFtZVxuICAgICAgICAgICAgICogb2Ygc3ByaW5nIGFuaW1hdGlvbnMgc28gd2Ugc2hvdWxkIGxvb2sgaW50byBhZGRpbmcgYSBkaXNhYmxlIHNwcmluZyBvcHRpb24gdG8gYGluZXJ0aWFgLlxuICAgICAgICAgICAgICogV2UgY291bGQgZG8gc29tZXRoaW5nIGhlcmUgd2hlcmUgd2UgYWZmZWN0IHRoZSBgYm91bmNlU3RpZmZuZXNzYCBhbmQgYGJvdW5jZURhbXBpbmdgXG4gICAgICAgICAgICAgKiB1c2luZyB0aGUgdmFsdWUgb2YgYGRyYWdFbGFzdGljYC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgYm91bmNlU3RpZmZuZXNzID0gZHJhZ0VsYXN0aWMgPyAyMDAgOiAxMDAwMDAwO1xuICAgICAgICAgICAgY29uc3QgYm91bmNlRGFtcGluZyA9IGRyYWdFbGFzdGljID8gNDAgOiAxMDAwMDAwMDtcbiAgICAgICAgICAgIGNvbnN0IGluZXJ0aWEgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJpbmVydGlhXCIsXG4gICAgICAgICAgICAgICAgdmVsb2NpdHk6IGRyYWdNb21lbnR1bSA/IHZlbG9jaXR5W2F4aXNdIDogMCxcbiAgICAgICAgICAgICAgICBib3VuY2VTdGlmZm5lc3MsXG4gICAgICAgICAgICAgICAgYm91bmNlRGFtcGluZyxcbiAgICAgICAgICAgICAgICB0aW1lQ29uc3RhbnQ6IDc1MCxcbiAgICAgICAgICAgICAgICByZXN0RGVsdGE6IDEsXG4gICAgICAgICAgICAgICAgcmVzdFNwZWVkOiAxMCxcbiAgICAgICAgICAgICAgICAuLi5kcmFnVHJhbnNpdGlvbixcbiAgICAgICAgICAgICAgICAuLi50cmFuc2l0aW9uLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIElmIHdlJ3JlIG5vdCBhbmltYXRpbmcgb24gYW4gZXh0ZXJuYWxseS1wcm92aWRlZCBgTW90aW9uVmFsdWVgIHdlIGNhbiB1c2UgdGhlXG4gICAgICAgICAgICAvLyBjb21wb25lbnQncyBhbmltYXRpb24gY29udHJvbHMgd2hpY2ggd2lsbCBoYW5kbGUgaW50ZXJhY3Rpb25zIHdpdGggd2hpbGVIb3ZlciAoZXRjKSxcbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSB3ZSBqdXN0IGhhdmUgdG8gYW5pbWF0ZSB0aGUgYE1vdGlvblZhbHVlYCBpdHNlbGYuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydEF4aXNWYWx1ZUFuaW1hdGlvbihheGlzLCBpbmVydGlhKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFJ1biBhbGwgYW5pbWF0aW9ucyBhbmQgdGhlbiByZXNvbHZlIHRoZSBuZXcgZHJhZyBjb25zdHJhaW50cy5cbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKG1vbWVudHVtQW5pbWF0aW9ucykudGhlbihvbkRyYWdUcmFuc2l0aW9uRW5kKTtcbiAgICB9XG4gICAgc3RhcnRBeGlzVmFsdWVBbmltYXRpb24oYXhpcywgdHJhbnNpdGlvbikge1xuICAgICAgICBjb25zdCBheGlzVmFsdWUgPSB0aGlzLmdldEF4aXNNb3Rpb25WYWx1ZShheGlzKTtcbiAgICAgICAgcmV0dXJuIGF4aXNWYWx1ZS5zdGFydChhbmltYXRlTW90aW9uVmFsdWUoYXhpcywgYXhpc1ZhbHVlLCAwLCB0cmFuc2l0aW9uKSk7XG4gICAgfVxuICAgIHN0b3BBbmltYXRpb24oKSB7XG4gICAgICAgIGVhY2hBeGlzKChheGlzKSA9PiB0aGlzLmdldEF4aXNNb3Rpb25WYWx1ZShheGlzKS5zdG9wKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEcmFnIHdvcmtzIGRpZmZlcmVudGx5IGRlcGVuZGluZyBvbiB3aGljaCBwcm9wcyBhcmUgcHJvdmlkZWQuXG4gICAgICpcbiAgICAgKiAtIElmIF9kcmFnWCBhbmQgX2RyYWdZIGFyZSBwcm92aWRlZCwgd2Ugb3V0cHV0IHRoZSBnZXN0dXJlIGRlbHRhIGRpcmVjdGx5IHRvIHRob3NlIG1vdGlvbiB2YWx1ZXMuXG4gICAgICogLSBPdGhlcndpc2UsIHdlIGFwcGx5IHRoZSBkZWx0YSB0byB0aGUgeC95IG1vdGlvbiB2YWx1ZXMuXG4gICAgICovXG4gICAgZ2V0QXhpc01vdGlvblZhbHVlKGF4aXMpIHtcbiAgICAgICAgY29uc3QgZHJhZ0tleSA9IFwiX2RyYWdcIiArIGF4aXMudG9VcHBlckNhc2UoKTtcbiAgICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLnZpc3VhbEVsZW1lbnQuZ2V0UHJvcHMoKTtcbiAgICAgICAgY29uc3QgZXh0ZXJuYWxNb3Rpb25WYWx1ZSA9IHByb3BzW2RyYWdLZXldO1xuICAgICAgICByZXR1cm4gZXh0ZXJuYWxNb3Rpb25WYWx1ZVxuICAgICAgICAgICAgPyBleHRlcm5hbE1vdGlvblZhbHVlXG4gICAgICAgICAgICA6IHRoaXMudmlzdWFsRWxlbWVudC5nZXRWYWx1ZShheGlzLCAocHJvcHMuaW5pdGlhbCA/IHByb3BzLmluaXRpYWxbYXhpc10gOiB1bmRlZmluZWQpIHx8IDApO1xuICAgIH1cbiAgICBzbmFwVG9DdXJzb3IocG9pbnQpIHtcbiAgICAgICAgZWFjaEF4aXMoKGF4aXMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZHJhZyB9ID0gdGhpcy5nZXRQcm9wcygpO1xuICAgICAgICAgICAgLy8gSWYgd2UncmUgbm90IGRyYWdnaW5nIHRoaXMgYXhpcywgZG8gYW4gZWFybHkgcmV0dXJuLlxuICAgICAgICAgICAgaWYgKCFzaG91bGREcmFnKGF4aXMsIGRyYWcsIHRoaXMuY3VycmVudERpcmVjdGlvbikpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgeyBwcm9qZWN0aW9uIH0gPSB0aGlzLnZpc3VhbEVsZW1lbnQ7XG4gICAgICAgICAgICBjb25zdCBheGlzVmFsdWUgPSB0aGlzLmdldEF4aXNNb3Rpb25WYWx1ZShheGlzKTtcbiAgICAgICAgICAgIGlmIChwcm9qZWN0aW9uICYmIHByb2plY3Rpb24ubGF5b3V0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBtaW4sIG1heCB9ID0gcHJvamVjdGlvbi5sYXlvdXQubGF5b3V0Qm94W2F4aXNdO1xuICAgICAgICAgICAgICAgIGF4aXNWYWx1ZS5zZXQocG9pbnRbYXhpc10gLSBtaXgobWluLCBtYXgsIDAuNSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgdmlld3BvcnQgcmVzaXplcyB3ZSB3YW50IHRvIGNoZWNrIGlmIHRoZSBtZWFzdXJlZCBjb25zdHJhaW50c1xuICAgICAqIGhhdmUgY2hhbmdlZCBhbmQsIGlmIHNvLCByZXBvc2l0aW9uIHRoZSBlbGVtZW50IHdpdGhpbiB0aG9zZSBuZXcgY29uc3RyYWludHNcbiAgICAgKiByZWxhdGl2ZSB0byB3aGVyZSBpdCB3YXMgYmVmb3JlIHRoZSByZXNpemUuXG4gICAgICovXG4gICAgc2NhbGVQb3NpdGlvbldpdGhpbkNvbnN0cmFpbnRzKCkge1xuICAgICAgICBpZiAoIXRoaXMudmlzdWFsRWxlbWVudC5jdXJyZW50KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB7IGRyYWcsIGRyYWdDb25zdHJhaW50cyB9ID0gdGhpcy5nZXRQcm9wcygpO1xuICAgICAgICBjb25zdCB7IHByb2plY3Rpb24gfSA9IHRoaXMudmlzdWFsRWxlbWVudDtcbiAgICAgICAgaWYgKCFpc1JlZk9iamVjdChkcmFnQ29uc3RyYWludHMpIHx8ICFwcm9qZWN0aW9uIHx8ICF0aGlzLmNvbnN0cmFpbnRzKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvKipcbiAgICAgICAgICogU3RvcCBjdXJyZW50IGFuaW1hdGlvbnMgYXMgdGhlcmUgY2FuIGJlIHZpc3VhbCBnbGl0Y2hpbmcgaWYgd2UgdHJ5IHRvIGRvXG4gICAgICAgICAqIHRoaXMgbWlkLWFuaW1hdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdG9wQW5pbWF0aW9uKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZWNvcmQgdGhlIHJlbGF0aXZlIHBvc2l0aW9uIG9mIHRoZSBkcmFnZ2VkIGVsZW1lbnQgcmVsYXRpdmUgdG8gdGhlXG4gICAgICAgICAqIGNvbnN0cmFpbnRzIGJveCBhbmQgc2F2ZSBhcyBhIHByb2dyZXNzIHZhbHVlLlxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgYm94UHJvZ3Jlc3MgPSB7IHg6IDAsIHk6IDAgfTtcbiAgICAgICAgZWFjaEF4aXMoKGF4aXMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGF4aXNWYWx1ZSA9IHRoaXMuZ2V0QXhpc01vdGlvblZhbHVlKGF4aXMpO1xuICAgICAgICAgICAgaWYgKGF4aXNWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhdGVzdCA9IGF4aXNWYWx1ZS5nZXQoKTtcbiAgICAgICAgICAgICAgICBib3hQcm9ncmVzc1theGlzXSA9IGNhbGNPcmlnaW4oeyBtaW46IGxhdGVzdCwgbWF4OiBsYXRlc3QgfSwgdGhpcy5jb25zdHJhaW50c1theGlzXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlIHRoZSBsYXlvdXQgb2YgdGhpcyBlbGVtZW50IGFuZCByZXNvbHZlIHRoZSBsYXRlc3QgZHJhZyBjb25zdHJhaW50c1xuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgeyB0cmFuc2Zvcm1UZW1wbGF0ZSB9ID0gdGhpcy52aXN1YWxFbGVtZW50LmdldFByb3BzKCk7XG4gICAgICAgIHRoaXMudmlzdWFsRWxlbWVudC5jdXJyZW50LnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVRlbXBsYXRlXG4gICAgICAgICAgICA/IHRyYW5zZm9ybVRlbXBsYXRlKHt9LCBcIlwiKVxuICAgICAgICAgICAgOiBcIm5vbmVcIjtcbiAgICAgICAgcHJvamVjdGlvbi5yb290ICYmIHByb2plY3Rpb24ucm9vdC51cGRhdGVTY3JvbGwoKTtcbiAgICAgICAgcHJvamVjdGlvbi51cGRhdGVMYXlvdXQoKTtcbiAgICAgICAgdGhpcy5yZXNvbHZlQ29uc3RyYWludHMoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZvciBlYWNoIGF4aXMsIGNhbGN1bGF0ZSB0aGUgY3VycmVudCBwcm9ncmVzcyBvZiB0aGUgbGF5b3V0IGF4aXNcbiAgICAgICAgICogd2l0aGluIHRoZSBuZXcgY29uc3RyYWludHMuXG4gICAgICAgICAqL1xuICAgICAgICBlYWNoQXhpcygoYXhpcykgPT4ge1xuICAgICAgICAgICAgaWYgKCFzaG91bGREcmFnKGF4aXMsIGRyYWcsIG51bGwpKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsY3VsYXRlIGEgbmV3IHRyYW5zZm9ybSBiYXNlZCBvbiB0aGUgcHJldmlvdXMgYm94IHByb2dyZXNzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IGF4aXNWYWx1ZSA9IHRoaXMuZ2V0QXhpc01vdGlvblZhbHVlKGF4aXMpO1xuICAgICAgICAgICAgY29uc3QgeyBtaW4sIG1heCB9ID0gdGhpcy5jb25zdHJhaW50c1theGlzXTtcbiAgICAgICAgICAgIGF4aXNWYWx1ZS5zZXQobWl4KG1pbiwgbWF4LCBib3hQcm9ncmVzc1theGlzXSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWRkTGlzdGVuZXJzKCkge1xuICAgICAgICBpZiAoIXRoaXMudmlzdWFsRWxlbWVudC5jdXJyZW50KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBlbGVtZW50RHJhZ0NvbnRyb2xzLnNldCh0aGlzLnZpc3VhbEVsZW1lbnQsIHRoaXMpO1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy52aXN1YWxFbGVtZW50LmN1cnJlbnQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBdHRhY2ggYSBwb2ludGVyZG93biBldmVudCBsaXN0ZW5lciBvbiB0aGlzIERPTSBlbGVtZW50IHRvIGluaXRpYXRlIGRyYWcgdHJhY2tpbmcuXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBzdG9wUG9pbnRlckxpc3RlbmVyID0gYWRkUG9pbnRlckV2ZW50KGVsZW1lbnQsIFwicG9pbnRlcmRvd25cIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGRyYWcsIGRyYWdMaXN0ZW5lciA9IHRydWUgfSA9IHRoaXMuZ2V0UHJvcHMoKTtcbiAgICAgICAgICAgIGRyYWcgJiYgZHJhZ0xpc3RlbmVyICYmIHRoaXMuc3RhcnQoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgbWVhc3VyZURyYWdDb25zdHJhaW50cyA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZHJhZ0NvbnN0cmFpbnRzIH0gPSB0aGlzLmdldFByb3BzKCk7XG4gICAgICAgICAgICBpZiAoaXNSZWZPYmplY3QoZHJhZ0NvbnN0cmFpbnRzKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29uc3RyYWludHMgPSB0aGlzLnJlc29sdmVSZWZDb25zdHJhaW50cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB7IHByb2plY3Rpb24gfSA9IHRoaXMudmlzdWFsRWxlbWVudDtcbiAgICAgICAgY29uc3Qgc3RvcE1lYXN1cmVMYXlvdXRMaXN0ZW5lciA9IHByb2plY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcihcIm1lYXN1cmVcIiwgbWVhc3VyZURyYWdDb25zdHJhaW50cyk7XG4gICAgICAgIGlmIChwcm9qZWN0aW9uICYmICFwcm9qZWN0aW9uLmxheW91dCkge1xuICAgICAgICAgICAgcHJvamVjdGlvbi5yb290ICYmIHByb2plY3Rpb24ucm9vdC51cGRhdGVTY3JvbGwoKTtcbiAgICAgICAgICAgIHByb2plY3Rpb24udXBkYXRlTGF5b3V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgbWVhc3VyZURyYWdDb25zdHJhaW50cygpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQXR0YWNoIGEgd2luZG93IHJlc2l6ZSBsaXN0ZW5lciB0byBzY2FsZSB0aGUgZHJhZ2dhYmxlIHRhcmdldCB3aXRoaW4gaXRzIGRlZmluZWRcbiAgICAgICAgICogY29uc3RyYWludHMgYXMgdGhlIHdpbmRvdyByZXNpemVzLlxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3Qgc3RvcFJlc2l6ZUxpc3RlbmVyID0gYWRkRG9tRXZlbnQod2luZG93LCBcInJlc2l6ZVwiLCAoKSA9PiB0aGlzLnNjYWxlUG9zaXRpb25XaXRoaW5Db25zdHJhaW50cygpKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoZSBlbGVtZW50J3MgbGF5b3V0IGNoYW5nZXMsIGNhbGN1bGF0ZSB0aGUgZGVsdGEgYW5kIGFwcGx5IHRoYXQgdG9cbiAgICAgICAgICogdGhlIGRyYWcgZ2VzdHVyZSdzIG9yaWdpbiBwb2ludC5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IHN0b3BMYXlvdXRVcGRhdGVMaXN0ZW5lciA9IHByb2plY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcihcImRpZFVwZGF0ZVwiLCAoKHsgZGVsdGEsIGhhc0xheW91dENoYW5nZWQgfSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNEcmFnZ2luZyAmJiBoYXNMYXlvdXRDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgZWFjaEF4aXMoKGF4aXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbW90aW9uVmFsdWUgPSB0aGlzLmdldEF4aXNNb3Rpb25WYWx1ZShheGlzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtb3Rpb25WYWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcmlnaW5Qb2ludFtheGlzXSArPSBkZWx0YVtheGlzXS50cmFuc2xhdGU7XG4gICAgICAgICAgICAgICAgICAgIG1vdGlvblZhbHVlLnNldChtb3Rpb25WYWx1ZS5nZXQoKSArIGRlbHRhW2F4aXNdLnRyYW5zbGF0ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy52aXN1YWxFbGVtZW50LnJlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzdG9wUmVzaXplTGlzdGVuZXIoKTtcbiAgICAgICAgICAgIHN0b3BQb2ludGVyTGlzdGVuZXIoKTtcbiAgICAgICAgICAgIHN0b3BNZWFzdXJlTGF5b3V0TGlzdGVuZXIoKTtcbiAgICAgICAgICAgIHN0b3BMYXlvdXRVcGRhdGVMaXN0ZW5lciAmJiBzdG9wTGF5b3V0VXBkYXRlTGlzdGVuZXIoKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0UHJvcHMoKSB7XG4gICAgICAgIGNvbnN0IHByb3BzID0gdGhpcy52aXN1YWxFbGVtZW50LmdldFByb3BzKCk7XG4gICAgICAgIGNvbnN0IHsgZHJhZyA9IGZhbHNlLCBkcmFnRGlyZWN0aW9uTG9jayA9IGZhbHNlLCBkcmFnUHJvcGFnYXRpb24gPSBmYWxzZSwgZHJhZ0NvbnN0cmFpbnRzID0gZmFsc2UsIGRyYWdFbGFzdGljID0gZGVmYXVsdEVsYXN0aWMsIGRyYWdNb21lbnR1bSA9IHRydWUsIH0gPSBwcm9wcztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnByb3BzLFxuICAgICAgICAgICAgZHJhZyxcbiAgICAgICAgICAgIGRyYWdEaXJlY3Rpb25Mb2NrLFxuICAgICAgICAgICAgZHJhZ1Byb3BhZ2F0aW9uLFxuICAgICAgICAgICAgZHJhZ0NvbnN0cmFpbnRzLFxuICAgICAgICAgICAgZHJhZ0VsYXN0aWMsXG4gICAgICAgICAgICBkcmFnTW9tZW50dW0sXG4gICAgICAgIH07XG4gICAgfVxufVxuZnVuY3Rpb24gc2hvdWxkRHJhZyhkaXJlY3Rpb24sIGRyYWcsIGN1cnJlbnREaXJlY3Rpb24pIHtcbiAgICByZXR1cm4gKChkcmFnID09PSB0cnVlIHx8IGRyYWcgPT09IGRpcmVjdGlvbikgJiZcbiAgICAgICAgKGN1cnJlbnREaXJlY3Rpb24gPT09IG51bGwgfHwgY3VycmVudERpcmVjdGlvbiA9PT0gZGlyZWN0aW9uKSk7XG59XG4vKipcbiAqIEJhc2VkIG9uIGFuIHgveSBvZmZzZXQgZGV0ZXJtaW5lIHRoZSBjdXJyZW50IGRyYWcgZGlyZWN0aW9uLiBJZiBib3RoIGF4aXMnIG9mZnNldHMgYXJlIGxvd2VyXG4gKiB0aGFuIHRoZSBwcm92aWRlZCB0aHJlc2hvbGQsIHJldHVybiBgbnVsbGAuXG4gKlxuICogQHBhcmFtIG9mZnNldCAtIFRoZSB4L3kgb2Zmc2V0IGZyb20gb3JpZ2luLlxuICogQHBhcmFtIGxvY2tUaHJlc2hvbGQgLSAoT3B0aW9uYWwpIC0gdGhlIG1pbmltdW0gYWJzb2x1dGUgb2Zmc2V0IGJlZm9yZSB3ZSBjYW4gZGV0ZXJtaW5lIGEgZHJhZyBkaXJlY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGdldEN1cnJlbnREaXJlY3Rpb24ob2Zmc2V0LCBsb2NrVGhyZXNob2xkID0gMTApIHtcbiAgICBsZXQgZGlyZWN0aW9uID0gbnVsbDtcbiAgICBpZiAoTWF0aC5hYnMob2Zmc2V0LnkpID4gbG9ja1RocmVzaG9sZCkge1xuICAgICAgICBkaXJlY3Rpb24gPSBcInlcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAoTWF0aC5hYnMob2Zmc2V0LngpID4gbG9ja1RocmVzaG9sZCkge1xuICAgICAgICBkaXJlY3Rpb24gPSBcInhcIjtcbiAgICB9XG4gICAgcmV0dXJuIGRpcmVjdGlvbjtcbn1cblxuZXhwb3J0IHsgVmlzdWFsRWxlbWVudERyYWdDb250cm9scywgZWxlbWVudERyYWdDb250cm9scyB9O1xuIiwiaW1wb3J0IHsgUGFuU2Vzc2lvbiB9IGZyb20gJy4vUGFuU2Vzc2lvbi5tanMnO1xuaW1wb3J0IHsgYWRkUG9pbnRlckV2ZW50IH0gZnJvbSAnLi4vLi4vZXZlbnRzL2FkZC1wb2ludGVyLWV2ZW50Lm1qcyc7XG5pbXBvcnQgeyBGZWF0dXJlIH0gZnJvbSAnLi4vLi4vbW90aW9uL2ZlYXR1cmVzL0ZlYXR1cmUubWpzJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuLi8uLi91dGlscy9ub29wLm1qcyc7XG5pbXBvcnQgeyBmcmFtZSB9IGZyb20gJy4uLy4uL2ZyYW1lbG9vcC9mcmFtZS5tanMnO1xuXG5jb25zdCBhc3luY0hhbmRsZXIgPSAoaGFuZGxlcikgPT4gKGV2ZW50LCBpbmZvKSA9PiB7XG4gICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgZnJhbWUudXBkYXRlKCgpID0+IGhhbmRsZXIoZXZlbnQsIGluZm8pKTtcbiAgICB9XG59O1xuY2xhc3MgUGFuR2VzdHVyZSBleHRlbmRzIEZlYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnJlbW92ZVBvaW50ZXJEb3duTGlzdGVuZXIgPSBub29wO1xuICAgIH1cbiAgICBvblBvaW50ZXJEb3duKHBvaW50ZXJEb3duRXZlbnQpIHtcbiAgICAgICAgdGhpcy5zZXNzaW9uID0gbmV3IFBhblNlc3Npb24ocG9pbnRlckRvd25FdmVudCwgdGhpcy5jcmVhdGVQYW5IYW5kbGVycygpLCB7IHRyYW5zZm9ybVBhZ2VQb2ludDogdGhpcy5ub2RlLmdldFRyYW5zZm9ybVBhZ2VQb2ludCgpIH0pO1xuICAgIH1cbiAgICBjcmVhdGVQYW5IYW5kbGVycygpIHtcbiAgICAgICAgY29uc3QgeyBvblBhblNlc3Npb25TdGFydCwgb25QYW5TdGFydCwgb25QYW4sIG9uUGFuRW5kIH0gPSB0aGlzLm5vZGUuZ2V0UHJvcHMoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9uU2Vzc2lvblN0YXJ0OiBhc3luY0hhbmRsZXIob25QYW5TZXNzaW9uU3RhcnQpLFxuICAgICAgICAgICAgb25TdGFydDogYXN5bmNIYW5kbGVyKG9uUGFuU3RhcnQpLFxuICAgICAgICAgICAgb25Nb3ZlOiBvblBhbixcbiAgICAgICAgICAgIG9uRW5kOiAoZXZlbnQsIGluZm8pID0+IHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5zZXNzaW9uO1xuICAgICAgICAgICAgICAgIGlmIChvblBhbkVuZCkge1xuICAgICAgICAgICAgICAgICAgICBmcmFtZS51cGRhdGUoKCkgPT4gb25QYW5FbmQoZXZlbnQsIGluZm8pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBtb3VudCgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVQb2ludGVyRG93bkxpc3RlbmVyID0gYWRkUG9pbnRlckV2ZW50KHRoaXMubm9kZS5jdXJyZW50LCBcInBvaW50ZXJkb3duXCIsIChldmVudCkgPT4gdGhpcy5vblBvaW50ZXJEb3duKGV2ZW50KSk7XG4gICAgfVxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgdGhpcy5zZXNzaW9uICYmIHRoaXMuc2Vzc2lvbi51cGRhdGVIYW5kbGVycyh0aGlzLmNyZWF0ZVBhbkhhbmRsZXJzKCkpO1xuICAgIH1cbiAgICB1bm1vdW50KCkge1xuICAgICAgICB0aGlzLnJlbW92ZVBvaW50ZXJEb3duTGlzdGVuZXIoKTtcbiAgICAgICAgdGhpcy5zZXNzaW9uICYmIHRoaXMuc2Vzc2lvbi5lbmQoKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFBhbkdlc3R1cmUgfTtcbiIsIi8qKlxuICogVGhpcyBzaG91bGQgb25seSBldmVyIGJlIG1vZGlmaWVkIG9uIHRoZSBjbGllbnQgb3RoZXJ3aXNlIGl0J2xsXG4gKiBwZXJzaXN0IHRocm91Z2ggc2VydmVyIHJlcXVlc3RzLiBJZiB3ZSBuZWVkIGluc3RhbmNlZCBzdGF0ZXMgd2VcbiAqIGNvdWxkIGxhenktaW5pdCB2aWEgcm9vdC5cbiAqL1xuY29uc3QgZ2xvYmFsUHJvamVjdGlvblN0YXRlID0ge1xuICAgIC8qKlxuICAgICAqIEdsb2JhbCBmbGFnIGFzIHRvIHdoZXRoZXIgdGhlIHRyZWUgaGFzIGFuaW1hdGVkIHNpbmNlIHRoZSBsYXN0IHRpbWVcbiAgICAgKiB3ZSByZXNpemVkIHRoZSB3aW5kb3dcbiAgICAgKi9cbiAgICBoYXNBbmltYXRlZFNpbmNlUmVzaXplOiB0cnVlLFxuICAgIC8qKlxuICAgICAqIFdlIHNldCB0aGlzIHRvIHRydWUgb25jZSwgb24gdGhlIGZpcnN0IHVwZGF0ZS4gQW55IG5vZGVzIGFkZGVkIHRvIHRoZSB0cmVlIGJleW9uZCB0aGF0XG4gICAgICogdXBkYXRlIHdpbGwgYmUgZ2l2ZW4gYSBgZGF0YS1wcm9qZWN0aW9uLWlkYCBhdHRyaWJ1dGUuXG4gICAgICovXG4gICAgaGFzRXZlclVwZGF0ZWQ6IGZhbHNlLFxufTtcblxuZXhwb3J0IHsgZ2xvYmFsUHJvamVjdGlvblN0YXRlIH07XG4iLCJpbXBvcnQgeyBweCB9IGZyb20gJy4uLy4uL3ZhbHVlL3R5cGVzL251bWJlcnMvdW5pdHMubWpzJztcblxuZnVuY3Rpb24gcGl4ZWxzVG9QZXJjZW50KHBpeGVscywgYXhpcykge1xuICAgIGlmIChheGlzLm1heCA9PT0gYXhpcy5taW4pXG4gICAgICAgIHJldHVybiAwO1xuICAgIHJldHVybiAocGl4ZWxzIC8gKGF4aXMubWF4IC0gYXhpcy5taW4pKSAqIDEwMDtcbn1cbi8qKlxuICogV2UgYWx3YXlzIGNvcnJlY3QgYm9yZGVyUmFkaXVzIGFzIGEgcGVyY2VudGFnZSByYXRoZXIgdGhhbiBwaXhlbHMgdG8gcmVkdWNlIHBhaW50cy5cbiAqIEZvciBleGFtcGxlLCBpZiB5b3UgYXJlIHByb2plY3RpbmcgYSBib3ggdGhhdCBpcyAxMDBweCB3aWRlIHdpdGggYSAxMHB4IGJvcmRlclJhZGl1c1xuICogaW50byBhIGJveCB0aGF0IGlzIDIwMHB4IHdpZGUgd2l0aCBhIDIwcHggYm9yZGVyUmFkaXVzLCB0aGF0IGlzIGFjdHVhbGx5IGEgMTAlXG4gKiBib3JkZXJSYWRpdXMgaW4gYm90aCBzdGF0ZXMuIElmIHdlIGFuaW1hdGUgYmV0d2VlbiB0aGUgdHdvIGluIHBpeGVscyB0aGF0IHdpbGwgdHJpZ2dlclxuICogYSBwYWludCBlYWNoIHRpbWUuIElmIHdlIGFuaW1hdGUgYmV0d2VlbiB0aGUgdHdvIGluIHBlcmNlbnRhZ2Ugd2UnbGwgYXZvaWQgYSBwYWludC5cbiAqL1xuY29uc3QgY29ycmVjdEJvcmRlclJhZGl1cyA9IHtcbiAgICBjb3JyZWN0OiAobGF0ZXN0LCBub2RlKSA9PiB7XG4gICAgICAgIGlmICghbm9kZS50YXJnZXQpXG4gICAgICAgICAgICByZXR1cm4gbGF0ZXN0O1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgbGF0ZXN0IGlzIGEgc3RyaW5nLCBpZiBpdCdzIGEgcGVyY2VudGFnZSB3ZSBjYW4gcmV0dXJuIGltbWVkaWF0ZWx5IGFzIGl0J3NcbiAgICAgICAgICogZ29pbmcgdG8gYmUgc3RyZXRjaGVkIGFwcHJvcHJpYXRlbHkuIE90aGVyd2lzZSwgaWYgaXQncyBhIHBpeGVsLCBjb252ZXJ0IGl0IHRvIGEgbnVtYmVyLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHR5cGVvZiBsYXRlc3QgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGlmIChweC50ZXN0KGxhdGVzdCkpIHtcbiAgICAgICAgICAgICAgICBsYXRlc3QgPSBwYXJzZUZsb2F0KGxhdGVzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGF0ZXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBsYXRlc3QgaXMgYSBudW1iZXIsIGl0J3MgYSBwaXhlbCB2YWx1ZS4gV2UgdXNlIHRoZSBjdXJyZW50IHZpZXdwb3J0Qm94IHRvIGNhbGN1bGF0ZSB0aGF0XG4gICAgICAgICAqIHBpeGVsIHZhbHVlIGFzIGEgcGVyY2VudGFnZSBvZiBlYWNoIGF4aXNcbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IHggPSBwaXhlbHNUb1BlcmNlbnQobGF0ZXN0LCBub2RlLnRhcmdldC54KTtcbiAgICAgICAgY29uc3QgeSA9IHBpeGVsc1RvUGVyY2VudChsYXRlc3QsIG5vZGUudGFyZ2V0LnkpO1xuICAgICAgICByZXR1cm4gYCR7eH0lICR7eX0lYDtcbiAgICB9LFxufTtcblxuZXhwb3J0IHsgY29ycmVjdEJvcmRlclJhZGl1cywgcGl4ZWxzVG9QZXJjZW50IH07XG4iLCJpbXBvcnQgeyBtaXggfSBmcm9tICcuLi8uLi91dGlscy9taXgubWpzJztcbmltcG9ydCB7IGNvbXBsZXggfSBmcm9tICcuLi8uLi92YWx1ZS90eXBlcy9jb21wbGV4L2luZGV4Lm1qcyc7XG5cbmNvbnN0IGNvcnJlY3RCb3hTaGFkb3cgPSB7XG4gICAgY29ycmVjdDogKGxhdGVzdCwgeyB0cmVlU2NhbGUsIHByb2plY3Rpb25EZWx0YSB9KSA9PiB7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsID0gbGF0ZXN0O1xuICAgICAgICBjb25zdCBzaGFkb3cgPSBjb21wbGV4LnBhcnNlKGxhdGVzdCk7XG4gICAgICAgIC8vIFRPRE86IERvZXNuJ3Qgc3VwcG9ydCBtdWx0aXBsZSBzaGFkb3dzXG4gICAgICAgIGlmIChzaGFkb3cubGVuZ3RoID4gNSlcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbDtcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBjb21wbGV4LmNyZWF0ZVRyYW5zZm9ybWVyKGxhdGVzdCk7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHR5cGVvZiBzaGFkb3dbMF0gIT09IFwibnVtYmVyXCIgPyAxIDogMDtcbiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBvdmVyYWxsIGNvbnRleHQgc2NhbGVcbiAgICAgICAgY29uc3QgeFNjYWxlID0gcHJvamVjdGlvbkRlbHRhLnguc2NhbGUgKiB0cmVlU2NhbGUueDtcbiAgICAgICAgY29uc3QgeVNjYWxlID0gcHJvamVjdGlvbkRlbHRhLnkuc2NhbGUgKiB0cmVlU2NhbGUueTtcbiAgICAgICAgc2hhZG93WzAgKyBvZmZzZXRdIC89IHhTY2FsZTtcbiAgICAgICAgc2hhZG93WzEgKyBvZmZzZXRdIC89IHlTY2FsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElkZWFsbHkgd2UnZCBjb3JyZWN0IHggYW5kIHkgc2NhbGVzIGluZGl2aWR1YWxseSwgYnV0IGJlY2F1c2UgYmx1ciBhbmRcbiAgICAgICAgICogc3ByZWFkIGFwcGx5IHRvIGJvdGggd2UgaGF2ZSB0byB0YWtlIGEgc2NhbGUgYXZlcmFnZSBhbmQgYXBwbHkgdGhhdCBpbnN0ZWFkLlxuICAgICAgICAgKiBXZSBjb3VsZCBwb3RlbnRpYWxseSBpbXByb3ZlIHRoZSBvdXRjb21lIG9mIHRoaXMgYnkgaW5jb3Jwb3JhdGluZyB0aGUgcmF0aW8gYmV0d2VlblxuICAgICAgICAgKiB0aGUgdHdvIHNjYWxlcy5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IGF2ZXJhZ2VTY2FsZSA9IG1peCh4U2NhbGUsIHlTY2FsZSwgMC41KTtcbiAgICAgICAgLy8gQmx1clxuICAgICAgICBpZiAodHlwZW9mIHNoYWRvd1syICsgb2Zmc2V0XSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHNoYWRvd1syICsgb2Zmc2V0XSAvPSBhdmVyYWdlU2NhbGU7XG4gICAgICAgIC8vIFNwcmVhZFxuICAgICAgICBpZiAodHlwZW9mIHNoYWRvd1szICsgb2Zmc2V0XSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHNoYWRvd1szICsgb2Zmc2V0XSAvPSBhdmVyYWdlU2NhbGU7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZShzaGFkb3cpO1xuICAgIH0sXG59O1xuXG5leHBvcnQgeyBjb3JyZWN0Qm94U2hhZG93IH07XG4iLCJpbXBvcnQgUmVhY3RfX2RlZmF1bHQsIHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVByZXNlbmNlIH0gZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy9BbmltYXRlUHJlc2VuY2UvdXNlLXByZXNlbmNlLm1qcyc7XG5pbXBvcnQgeyBMYXlvdXRHcm91cENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9jb250ZXh0L0xheW91dEdyb3VwQ29udGV4dC5tanMnO1xuaW1wb3J0IHsgU3dpdGNoTGF5b3V0R3JvdXBDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vY29udGV4dC9Td2l0Y2hMYXlvdXRHcm91cENvbnRleHQubWpzJztcbmltcG9ydCB7IGdsb2JhbFByb2plY3Rpb25TdGF0ZSB9IGZyb20gJy4uLy4uLy4uL3Byb2plY3Rpb24vbm9kZS9zdGF0ZS5tanMnO1xuaW1wb3J0IHsgY29ycmVjdEJvcmRlclJhZGl1cyB9IGZyb20gJy4uLy4uLy4uL3Byb2plY3Rpb24vc3R5bGVzL3NjYWxlLWJvcmRlci1yYWRpdXMubWpzJztcbmltcG9ydCB7IGNvcnJlY3RCb3hTaGFkb3cgfSBmcm9tICcuLi8uLi8uLi9wcm9qZWN0aW9uL3N0eWxlcy9zY2FsZS1ib3gtc2hhZG93Lm1qcyc7XG5pbXBvcnQgeyBhZGRTY2FsZUNvcnJlY3RvciB9IGZyb20gJy4uLy4uLy4uL3Byb2plY3Rpb24vc3R5bGVzL3NjYWxlLWNvcnJlY3Rpb24ubWpzJztcbmltcG9ydCB7IGZyYW1lIH0gZnJvbSAnLi4vLi4vLi4vZnJhbWVsb29wL2ZyYW1lLm1qcyc7XG5cbmNsYXNzIE1lYXN1cmVMYXlvdXRXaXRoQ29udGV4dCBleHRlbmRzIFJlYWN0X19kZWZhdWx0LkNvbXBvbmVudCB7XG4gICAgLyoqXG4gICAgICogVGhpcyBvbmx5IG1vdW50cyBwcm9qZWN0aW9uIG5vZGVzIGZvciBjb21wb25lbnRzIHRoYXRcbiAgICAgKiBuZWVkIG1lYXN1cmluZywgd2UgbWlnaHQgd2FudCB0byBkbyBpdCBmb3IgYWxsIGNvbXBvbmVudHNcbiAgICAgKiBpbiBvcmRlciB0byBpbmNvcnBvcmF0ZSB0cmFuc2Zvcm1zXG4gICAgICovXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGNvbnN0IHsgdmlzdWFsRWxlbWVudCwgbGF5b3V0R3JvdXAsIHN3aXRjaExheW91dEdyb3VwLCBsYXlvdXRJZCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgeyBwcm9qZWN0aW9uIH0gPSB2aXN1YWxFbGVtZW50O1xuICAgICAgICBhZGRTY2FsZUNvcnJlY3RvcihkZWZhdWx0U2NhbGVDb3JyZWN0b3JzKTtcbiAgICAgICAgaWYgKHByb2plY3Rpb24pIHtcbiAgICAgICAgICAgIGlmIChsYXlvdXRHcm91cC5ncm91cClcbiAgICAgICAgICAgICAgICBsYXlvdXRHcm91cC5ncm91cC5hZGQocHJvamVjdGlvbik7XG4gICAgICAgICAgICBpZiAoc3dpdGNoTGF5b3V0R3JvdXAgJiYgc3dpdGNoTGF5b3V0R3JvdXAucmVnaXN0ZXIgJiYgbGF5b3V0SWQpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2hMYXlvdXRHcm91cC5yZWdpc3Rlcihwcm9qZWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByb2plY3Rpb24ucm9vdC5kaWRVcGRhdGUoKTtcbiAgICAgICAgICAgIHByb2plY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcihcImFuaW1hdGlvbkNvbXBsZXRlXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNhZmVUb1JlbW92ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwcm9qZWN0aW9uLnNldE9wdGlvbnMoe1xuICAgICAgICAgICAgICAgIC4uLnByb2plY3Rpb24ub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBvbkV4aXRDb21wbGV0ZTogKCkgPT4gdGhpcy5zYWZlVG9SZW1vdmUoKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGdsb2JhbFByb2plY3Rpb25TdGF0ZS5oYXNFdmVyVXBkYXRlZCA9IHRydWU7XG4gICAgfVxuICAgIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgICBjb25zdCB7IGxheW91dERlcGVuZGVuY3ksIHZpc3VhbEVsZW1lbnQsIGRyYWcsIGlzUHJlc2VudCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgcHJvamVjdGlvbiA9IHZpc3VhbEVsZW1lbnQucHJvamVjdGlvbjtcbiAgICAgICAgaWYgKCFwcm9qZWN0aW9uKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUT0RPOiBXZSB1c2UgdGhpcyBkYXRhIGluIHJlbGVnYXRlIHRvIGRldGVybWluZSB3aGV0aGVyIHRvXG4gICAgICAgICAqIHByb21vdGUgYSBwcmV2aW91cyBlbGVtZW50LiBUaGVyZSdzIG5vIGd1YXJhbnRlZSBpdHMgcHJlc2VuY2UgZGF0YVxuICAgICAgICAgKiB3aWxsIGhhdmUgdXBkYXRlZCBieSB0aGlzIHBvaW50IC0gaWYgYSBidWcgbGlrZSB0aGlzIGFyaXNlcyBpdCB3aWxsXG4gICAgICAgICAqIGhhdmUgdG8gYmUgdGhhdCB3ZSBtYXJrRm9yUmVsZWdhdGlvbiBhbmQgdGhlbiBmaW5kIGEgbmV3IGxlYWQgc29tZSBvdGhlciB3YXksXG4gICAgICAgICAqIHBlcmhhcHMgaW4gZGlkVXBkYXRlXG4gICAgICAgICAqL1xuICAgICAgICBwcm9qZWN0aW9uLmlzUHJlc2VudCA9IGlzUHJlc2VudDtcbiAgICAgICAgaWYgKGRyYWcgfHxcbiAgICAgICAgICAgIHByZXZQcm9wcy5sYXlvdXREZXBlbmRlbmN5ICE9PSBsYXlvdXREZXBlbmRlbmN5IHx8XG4gICAgICAgICAgICBsYXlvdXREZXBlbmRlbmN5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHByb2plY3Rpb24ud2lsbFVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zYWZlVG9SZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJldlByb3BzLmlzUHJlc2VudCAhPT0gaXNQcmVzZW50KSB7XG4gICAgICAgICAgICBpZiAoaXNQcmVzZW50KSB7XG4gICAgICAgICAgICAgICAgcHJvamVjdGlvbi5wcm9tb3RlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghcHJvamVjdGlvbi5yZWxlZ2F0ZSgpKSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSWYgdGhlcmUncyBhbm90aGVyIHN0YWNrIG1lbWJlciB0YWtpbmcgb3ZlciBmcm9tIHRoaXMgb25lLFxuICAgICAgICAgICAgICAgICAqIGl0J3MgaW4gY2hhcmdlIG9mIHRoZSBleGl0IGFuaW1hdGlvbiBhbmQgdGhlcmVmb3JlIHNob3VsZFxuICAgICAgICAgICAgICAgICAqIGJlIGluIGNoYXJnZSBvZiB0aGUgc2FmZSB0byByZW1vdmUuIE90aGVyd2lzZSB3ZSBjYWxsIGl0IGhlcmUuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgZnJhbWUucG9zdFJlbmRlcigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gcHJvamVjdGlvbi5nZXRTdGFjaygpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YWNrIHx8ICFzdGFjay5tZW1iZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYWZlVG9SZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICAgIGNvbnN0IHsgcHJvamVjdGlvbiB9ID0gdGhpcy5wcm9wcy52aXN1YWxFbGVtZW50O1xuICAgICAgICBpZiAocHJvamVjdGlvbikge1xuICAgICAgICAgICAgcHJvamVjdGlvbi5yb290LmRpZFVwZGF0ZSgpO1xuICAgICAgICAgICAgcXVldWVNaWNyb3Rhc2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghcHJvamVjdGlvbi5jdXJyZW50QW5pbWF0aW9uICYmIHByb2plY3Rpb24uaXNMZWFkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYWZlVG9SZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgY29uc3QgeyB2aXN1YWxFbGVtZW50LCBsYXlvdXRHcm91cCwgc3dpdGNoTGF5b3V0R3JvdXA6IHByb21vdGVDb250ZXh0LCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgeyBwcm9qZWN0aW9uIH0gPSB2aXN1YWxFbGVtZW50O1xuICAgICAgICBpZiAocHJvamVjdGlvbikge1xuICAgICAgICAgICAgcHJvamVjdGlvbi5zY2hlZHVsZUNoZWNrQWZ0ZXJVbm1vdW50KCk7XG4gICAgICAgICAgICBpZiAobGF5b3V0R3JvdXAgJiYgbGF5b3V0R3JvdXAuZ3JvdXApXG4gICAgICAgICAgICAgICAgbGF5b3V0R3JvdXAuZ3JvdXAucmVtb3ZlKHByb2plY3Rpb24pO1xuICAgICAgICAgICAgaWYgKHByb21vdGVDb250ZXh0ICYmIHByb21vdGVDb250ZXh0LmRlcmVnaXN0ZXIpXG4gICAgICAgICAgICAgICAgcHJvbW90ZUNvbnRleHQuZGVyZWdpc3Rlcihwcm9qZWN0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzYWZlVG9SZW1vdmUoKSB7XG4gICAgICAgIGNvbnN0IHsgc2FmZVRvUmVtb3ZlIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBzYWZlVG9SZW1vdmUgJiYgc2FmZVRvUmVtb3ZlKCk7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuZnVuY3Rpb24gTWVhc3VyZUxheW91dChwcm9wcykge1xuICAgIGNvbnN0IFtpc1ByZXNlbnQsIHNhZmVUb1JlbW92ZV0gPSB1c2VQcmVzZW5jZSgpO1xuICAgIGNvbnN0IGxheW91dEdyb3VwID0gdXNlQ29udGV4dChMYXlvdXRHcm91cENvbnRleHQpO1xuICAgIHJldHVybiAoUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChNZWFzdXJlTGF5b3V0V2l0aENvbnRleHQsIHsgLi4ucHJvcHMsIGxheW91dEdyb3VwOiBsYXlvdXRHcm91cCwgc3dpdGNoTGF5b3V0R3JvdXA6IHVzZUNvbnRleHQoU3dpdGNoTGF5b3V0R3JvdXBDb250ZXh0KSwgaXNQcmVzZW50OiBpc1ByZXNlbnQsIHNhZmVUb1JlbW92ZTogc2FmZVRvUmVtb3ZlIH0pKTtcbn1cbmNvbnN0IGRlZmF1bHRTY2FsZUNvcnJlY3RvcnMgPSB7XG4gICAgYm9yZGVyUmFkaXVzOiB7XG4gICAgICAgIC4uLmNvcnJlY3RCb3JkZXJSYWRpdXMsXG4gICAgICAgIGFwcGx5VG86IFtcbiAgICAgICAgICAgIFwiYm9yZGVyVG9wTGVmdFJhZGl1c1wiLFxuICAgICAgICAgICAgXCJib3JkZXJUb3BSaWdodFJhZGl1c1wiLFxuICAgICAgICAgICAgXCJib3JkZXJCb3R0b21MZWZ0UmFkaXVzXCIsXG4gICAgICAgICAgICBcImJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzXCIsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiBjb3JyZWN0Qm9yZGVyUmFkaXVzLFxuICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiBjb3JyZWN0Qm9yZGVyUmFkaXVzLFxuICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IGNvcnJlY3RCb3JkZXJSYWRpdXMsXG4gICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IGNvcnJlY3RCb3JkZXJSYWRpdXMsXG4gICAgYm94U2hhZG93OiBjb3JyZWN0Qm94U2hhZG93LFxufTtcblxuZXhwb3J0IHsgTWVhc3VyZUxheW91dCB9O1xuIiwiaW1wb3J0IHsgdXNlQ29udGV4dCwgdXNlSWQsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFByZXNlbmNlQ29udGV4dCB9IGZyb20gJy4uLy4uL2NvbnRleHQvUHJlc2VuY2VDb250ZXh0Lm1qcyc7XG5cbi8qKlxuICogV2hlbiBhIGNvbXBvbmVudCBpcyB0aGUgY2hpbGQgb2YgYEFuaW1hdGVQcmVzZW5jZWAsIGl0IGNhbiB1c2UgYHVzZVByZXNlbmNlYFxuICogdG8gYWNjZXNzIGluZm9ybWF0aW9uIGFib3V0IHdoZXRoZXIgaXQncyBzdGlsbCBwcmVzZW50IGluIHRoZSBSZWFjdCB0cmVlLlxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0IHsgdXNlUHJlc2VuY2UgfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiXG4gKlxuICogZXhwb3J0IGNvbnN0IENvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3QgW2lzUHJlc2VudCwgc2FmZVRvUmVtb3ZlXSA9IHVzZVByZXNlbmNlKClcbiAqXG4gKiAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gKiAgICAgIWlzUHJlc2VudCAmJiBzZXRUaW1lb3V0KHNhZmVUb1JlbW92ZSwgMTAwMClcbiAqICAgfSwgW2lzUHJlc2VudF0pXG4gKlxuICogICByZXR1cm4gPGRpdiAvPlxuICogfVxuICogYGBgXG4gKlxuICogSWYgYGlzUHJlc2VudGAgaXMgYGZhbHNlYCwgaXQgbWVhbnMgdGhhdCBhIGNvbXBvbmVudCBoYXMgYmVlbiByZW1vdmVkIHRoZSB0cmVlLCBidXRcbiAqIGBBbmltYXRlUHJlc2VuY2VgIHdvbid0IHJlYWxseSByZW1vdmUgaXQgdW50aWwgYHNhZmVUb1JlbW92ZWAgaGFzIGJlZW4gY2FsbGVkLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdXNlUHJlc2VuY2UoKSB7XG4gICAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoUHJlc2VuY2VDb250ZXh0KTtcbiAgICBpZiAoY29udGV4dCA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIFt0cnVlLCBudWxsXTtcbiAgICBjb25zdCB7IGlzUHJlc2VudCwgb25FeGl0Q29tcGxldGUsIHJlZ2lzdGVyIH0gPSBjb250ZXh0O1xuICAgIC8vIEl0J3Mgc2FmZSB0byBjYWxsIHRoZSBmb2xsb3dpbmcgaG9va3MgY29uZGl0aW9uYWxseSAoYWZ0ZXIgYW4gZWFybHkgcmV0dXJuKSBiZWNhdXNlIHRoZSBjb250ZXh0IHdpbGwgYWx3YXlzXG4gICAgLy8gZWl0aGVyIGJlIG51bGwgb3Igbm9uLW51bGwgZm9yIHRoZSBsaWZlc3BhbiBvZiB0aGUgY29tcG9uZW50LlxuICAgIGNvbnN0IGlkID0gdXNlSWQoKTtcbiAgICB1c2VFZmZlY3QoKCkgPT4gcmVnaXN0ZXIoaWQpLCBbXSk7XG4gICAgY29uc3Qgc2FmZVRvUmVtb3ZlID0gKCkgPT4gb25FeGl0Q29tcGxldGUgJiYgb25FeGl0Q29tcGxldGUoaWQpO1xuICAgIHJldHVybiAhaXNQcmVzZW50ICYmIG9uRXhpdENvbXBsZXRlID8gW2ZhbHNlLCBzYWZlVG9SZW1vdmVdIDogW3RydWVdO1xufVxuLyoqXG4gKiBTaW1pbGFyIHRvIGB1c2VQcmVzZW5jZWAsIGV4Y2VwdCBgdXNlSXNQcmVzZW50YCBzaW1wbHkgcmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgY29tcG9uZW50IGlzIHByZXNlbnQuXG4gKiBUaGVyZSBpcyBubyBgc2FmZVRvUmVtb3ZlYCBmdW5jdGlvbi5cbiAqXG4gKiBgYGBqc3hcbiAqIGltcG9ydCB7IHVzZUlzUHJlc2VudCB9IGZyb20gXCJmcmFtZXItbW90aW9uXCJcbiAqXG4gKiBleHBvcnQgY29uc3QgQ29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBpc1ByZXNlbnQgPSB1c2VJc1ByZXNlbnQoKVxuICpcbiAqICAgdXNlRWZmZWN0KCgpID0+IHtcbiAqICAgICAhaXNQcmVzZW50ICYmIGNvbnNvbGUubG9nKFwiSSd2ZSBiZWVuIHJlbW92ZWQhXCIpXG4gKiAgIH0sIFtpc1ByZXNlbnRdKVxuICpcbiAqICAgcmV0dXJuIDxkaXYgLz5cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdXNlSXNQcmVzZW50KCkge1xuICAgIHJldHVybiBpc1ByZXNlbnQodXNlQ29udGV4dChQcmVzZW5jZUNvbnRleHQpKTtcbn1cbmZ1bmN0aW9uIGlzUHJlc2VudChjb250ZXh0KSB7XG4gICAgcmV0dXJuIGNvbnRleHQgPT09IG51bGwgPyB0cnVlIDogY29udGV4dC5pc1ByZXNlbnQ7XG59XG5cbmV4cG9ydCB7IGlzUHJlc2VudCwgdXNlSXNQcmVzZW50LCB1c2VQcmVzZW5jZSB9O1xuIiwiaW1wb3J0IHsgY2lyY091dCB9IGZyb20gJy4uLy4uL2Vhc2luZy9jaXJjLm1qcyc7XG5pbXBvcnQgeyBwcm9ncmVzcyB9IGZyb20gJy4uLy4uL3V0aWxzL3Byb2dyZXNzLm1qcyc7XG5pbXBvcnQgeyBtaXggfSBmcm9tICcuLi8uLi91dGlscy9taXgubWpzJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuLi8uLi91dGlscy9ub29wLm1qcyc7XG5pbXBvcnQgeyBwZXJjZW50LCBweCB9IGZyb20gJy4uLy4uL3ZhbHVlL3R5cGVzL251bWJlcnMvdW5pdHMubWpzJztcblxuY29uc3QgYm9yZGVycyA9IFtcIlRvcExlZnRcIiwgXCJUb3BSaWdodFwiLCBcIkJvdHRvbUxlZnRcIiwgXCJCb3R0b21SaWdodFwiXTtcbmNvbnN0IG51bUJvcmRlcnMgPSBib3JkZXJzLmxlbmd0aDtcbmNvbnN0IGFzTnVtYmVyID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyBwYXJzZUZsb2F0KHZhbHVlKSA6IHZhbHVlO1xuY29uc3QgaXNQeCA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiIHx8IHB4LnRlc3QodmFsdWUpO1xuZnVuY3Rpb24gbWl4VmFsdWVzKHRhcmdldCwgZm9sbG93LCBsZWFkLCBwcm9ncmVzcywgc2hvdWxkQ3Jvc3NmYWRlT3BhY2l0eSwgaXNPbmx5TWVtYmVyKSB7XG4gICAgaWYgKHNob3VsZENyb3NzZmFkZU9wYWNpdHkpIHtcbiAgICAgICAgdGFyZ2V0Lm9wYWNpdHkgPSBtaXgoMCwgXG4gICAgICAgIC8vIFRPRE8gUmVpbnN0YXRlIHRoaXMgaWYgb25seSBjaGlsZFxuICAgICAgICBsZWFkLm9wYWNpdHkgIT09IHVuZGVmaW5lZCA/IGxlYWQub3BhY2l0eSA6IDEsIGVhc2VDcm9zc2ZhZGVJbihwcm9ncmVzcykpO1xuICAgICAgICB0YXJnZXQub3BhY2l0eUV4aXQgPSBtaXgoZm9sbG93Lm9wYWNpdHkgIT09IHVuZGVmaW5lZCA/IGZvbGxvdy5vcGFjaXR5IDogMSwgMCwgZWFzZUNyb3NzZmFkZU91dChwcm9ncmVzcykpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc09ubHlNZW1iZXIpIHtcbiAgICAgICAgdGFyZ2V0Lm9wYWNpdHkgPSBtaXgoZm9sbG93Lm9wYWNpdHkgIT09IHVuZGVmaW5lZCA/IGZvbGxvdy5vcGFjaXR5IDogMSwgbGVhZC5vcGFjaXR5ICE9PSB1bmRlZmluZWQgPyBsZWFkLm9wYWNpdHkgOiAxLCBwcm9ncmVzcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1peCBib3JkZXIgcmFkaXVzXG4gICAgICovXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1Cb3JkZXJzOyBpKyspIHtcbiAgICAgICAgY29uc3QgYm9yZGVyTGFiZWwgPSBgYm9yZGVyJHtib3JkZXJzW2ldfVJhZGl1c2A7XG4gICAgICAgIGxldCBmb2xsb3dSYWRpdXMgPSBnZXRSYWRpdXMoZm9sbG93LCBib3JkZXJMYWJlbCk7XG4gICAgICAgIGxldCBsZWFkUmFkaXVzID0gZ2V0UmFkaXVzKGxlYWQsIGJvcmRlckxhYmVsKTtcbiAgICAgICAgaWYgKGZvbGxvd1JhZGl1cyA9PT0gdW5kZWZpbmVkICYmIGxlYWRSYWRpdXMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBmb2xsb3dSYWRpdXMgfHwgKGZvbGxvd1JhZGl1cyA9IDApO1xuICAgICAgICBsZWFkUmFkaXVzIHx8IChsZWFkUmFkaXVzID0gMCk7XG4gICAgICAgIGNvbnN0IGNhbk1peCA9IGZvbGxvd1JhZGl1cyA9PT0gMCB8fFxuICAgICAgICAgICAgbGVhZFJhZGl1cyA9PT0gMCB8fFxuICAgICAgICAgICAgaXNQeChmb2xsb3dSYWRpdXMpID09PSBpc1B4KGxlYWRSYWRpdXMpO1xuICAgICAgICBpZiAoY2FuTWl4KSB7XG4gICAgICAgICAgICB0YXJnZXRbYm9yZGVyTGFiZWxdID0gTWF0aC5tYXgobWl4KGFzTnVtYmVyKGZvbGxvd1JhZGl1cyksIGFzTnVtYmVyKGxlYWRSYWRpdXMpLCBwcm9ncmVzcyksIDApO1xuICAgICAgICAgICAgaWYgKHBlcmNlbnQudGVzdChsZWFkUmFkaXVzKSB8fCBwZXJjZW50LnRlc3QoZm9sbG93UmFkaXVzKSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFtib3JkZXJMYWJlbF0gKz0gXCIlXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXRbYm9yZGVyTGFiZWxdID0gbGVhZFJhZGl1cztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBNaXggcm90YXRpb25cbiAgICAgKi9cbiAgICBpZiAoZm9sbG93LnJvdGF0ZSB8fCBsZWFkLnJvdGF0ZSkge1xuICAgICAgICB0YXJnZXQucm90YXRlID0gbWl4KGZvbGxvdy5yb3RhdGUgfHwgMCwgbGVhZC5yb3RhdGUgfHwgMCwgcHJvZ3Jlc3MpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFJhZGl1cyh2YWx1ZXMsIHJhZGl1c05hbWUpIHtcbiAgICByZXR1cm4gdmFsdWVzW3JhZGl1c05hbWVdICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyB2YWx1ZXNbcmFkaXVzTmFtZV1cbiAgICAgICAgOiB2YWx1ZXMuYm9yZGVyUmFkaXVzO1xufVxuLy8gLyoqXG4vLyAgKiBXZSBvbmx5IHdhbnQgdG8gbWl4IHRoZSBiYWNrZ3JvdW5kIGNvbG9yIGlmIHRoZXJlJ3MgYSBmb2xsb3cgZWxlbWVudFxuLy8gICogdGhhdCB3ZSdyZSBub3QgY3Jvc3NmYWRpbmcgb3BhY2l0eSBiZXR3ZWVuLiBGb3IgaW5zdGFuY2Ugd2l0aCBzd2l0Y2hcbi8vICAqIEFuaW1hdGVTaGFyZWRMYXlvdXQgYW5pbWF0aW9ucywgdGhpcyBoZWxwcyB0aGUgaWxsdXNpb24gb2YgYSBjb250aW51b3VzXG4vLyAgKiBlbGVtZW50IGJlaW5nIGFuaW1hdGVkIGJ1dCBhbHNvIGN1dHMgZG93biBvbiB0aGUgbnVtYmVyIG9mIHBhaW50cyB0cmlnZ2VyZWRcbi8vICAqIGZvciBlbGVtZW50cyB3aGVyZSBvcGFjaXR5IGlzIGRvaW5nIHRoYXQgd29yayBmb3IgdXMuXG4vLyAgKi9cbi8vIGlmIChcbi8vICAgICAhaGFzRm9sbG93RWxlbWVudCAmJlxuLy8gICAgIGxhdGVzdExlYWRWYWx1ZXMuYmFja2dyb3VuZENvbG9yICYmXG4vLyAgICAgbGF0ZXN0Rm9sbG93VmFsdWVzLmJhY2tncm91bmRDb2xvclxuLy8gKSB7XG4vLyAgICAgLyoqXG4vLyAgICAgICogVGhpcyBpc24ndCBpZGVhbCBwZXJmb3JtYW5jZS13aXNlIGFzIG1peENvbG9yIGlzIGNyZWF0aW5nIGEgbmV3IGZ1bmN0aW9uIGV2ZXJ5IGZyYW1lLlxuLy8gICAgICAqIFdlIGNvdWxkIHByb2JhYmx5IGNyZWF0ZSBhIG1peGVyIHRoYXQgcnVucyBhdCB0aGUgc3RhcnQgb2YgdGhlIGFuaW1hdGlvbiBidXRcbi8vICAgICAgKiB0aGUgaWRlYSBiZWhpbmQgdGhlIGNyb3NzZmFkZXIgaXMgdGhhdCBpdCBydW5zIGR5bmFtaWNhbGx5IGJldHdlZW4gdHdvIHBvdGVudGlhbGx5XG4vLyAgICAgICogY2hhbmdpbmcgdGFyZ2V0cyAoaWUgb3BhY2l0eSBvciBib3JkZXJSYWRpdXMgbWF5IGJlIGFuaW1hdGluZyBpbmRlcGVuZGVudGx5IHZpYSB2YXJpYW50cylcbi8vICAgICAgKi9cbi8vICAgICBsZWFkU3RhdGUuYmFja2dyb3VuZENvbG9yID0gZm9sbG93U3RhdGUuYmFja2dyb3VuZENvbG9yID0gbWl4Q29sb3IoXG4vLyAgICAgICAgIGxhdGVzdEZvbGxvd1ZhbHVlcy5iYWNrZ3JvdW5kQ29sb3IgYXMgc3RyaW5nLFxuLy8gICAgICAgICBsYXRlc3RMZWFkVmFsdWVzLmJhY2tncm91bmRDb2xvciBhcyBzdHJpbmdcbi8vICAgICApKHApXG4vLyB9XG5jb25zdCBlYXNlQ3Jvc3NmYWRlSW4gPSBjb21wcmVzcygwLCAwLjUsIGNpcmNPdXQpO1xuY29uc3QgZWFzZUNyb3NzZmFkZU91dCA9IGNvbXByZXNzKDAuNSwgMC45NSwgbm9vcCk7XG5mdW5jdGlvbiBjb21wcmVzcyhtaW4sIG1heCwgZWFzaW5nKSB7XG4gICAgcmV0dXJuIChwKSA9PiB7XG4gICAgICAgIC8vIENvdWxkIHJlcGxhY2UgaWZzIHdpdGggY2xhbXBcbiAgICAgICAgaWYgKHAgPCBtaW4pXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgaWYgKHAgPiBtYXgpXG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgcmV0dXJuIGVhc2luZyhwcm9ncmVzcyhtaW4sIG1heCwgcCkpO1xuICAgIH07XG59XG5cbmV4cG9ydCB7IG1peFZhbHVlcyB9O1xuIiwiLyoqXG4gKiBSZXNldCBhbiBheGlzIHRvIHRoZSBwcm92aWRlZCBvcmlnaW4gYm94LlxuICpcbiAqIFRoaXMgaXMgYSBtdXRhdGl2ZSBvcGVyYXRpb24uXG4gKi9cbmZ1bmN0aW9uIGNvcHlBeGlzSW50byhheGlzLCBvcmlnaW5BeGlzKSB7XG4gICAgYXhpcy5taW4gPSBvcmlnaW5BeGlzLm1pbjtcbiAgICBheGlzLm1heCA9IG9yaWdpbkF4aXMubWF4O1xufVxuLyoqXG4gKiBSZXNldCBhIGJveCB0byB0aGUgcHJvdmlkZWQgb3JpZ2luIGJveC5cbiAqXG4gKiBUaGlzIGlzIGEgbXV0YXRpdmUgb3BlcmF0aW9uLlxuICovXG5mdW5jdGlvbiBjb3B5Qm94SW50byhib3gsIG9yaWdpbkJveCkge1xuICAgIGNvcHlBeGlzSW50byhib3gueCwgb3JpZ2luQm94LngpO1xuICAgIGNvcHlBeGlzSW50byhib3gueSwgb3JpZ2luQm94LnkpO1xufVxuXG5leHBvcnQgeyBjb3B5QXhpc0ludG8sIGNvcHlCb3hJbnRvIH07XG4iLCJpbXBvcnQgeyBtaXggfSBmcm9tICcuLi8uLi91dGlscy9taXgubWpzJztcbmltcG9ydCB7IHBlcmNlbnQgfSBmcm9tICcuLi8uLi92YWx1ZS90eXBlcy9udW1iZXJzL3VuaXRzLm1qcyc7XG5pbXBvcnQgeyBzY2FsZVBvaW50IH0gZnJvbSAnLi9kZWx0YS1hcHBseS5tanMnO1xuXG4vKipcbiAqIFJlbW92ZSBhIGRlbHRhIGZyb20gYSBwb2ludC4gVGhpcyBpcyBlc3NlbnRpYWxseSB0aGUgc3RlcHMgb2YgYXBwbHlQb2ludERlbHRhIGluIHJldmVyc2VcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlUG9pbnREZWx0YShwb2ludCwgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luUG9pbnQsIGJveFNjYWxlKSB7XG4gICAgcG9pbnQgLT0gdHJhbnNsYXRlO1xuICAgIHBvaW50ID0gc2NhbGVQb2ludChwb2ludCwgMSAvIHNjYWxlLCBvcmlnaW5Qb2ludCk7XG4gICAgaWYgKGJveFNjYWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcG9pbnQgPSBzY2FsZVBvaW50KHBvaW50LCAxIC8gYm94U2NhbGUsIG9yaWdpblBvaW50KTtcbiAgICB9XG4gICAgcmV0dXJuIHBvaW50O1xufVxuLyoqXG4gKiBSZW1vdmUgYSBkZWx0YSBmcm9tIGFuIGF4aXMuIFRoaXMgaXMgZXNzZW50aWFsbHkgdGhlIHN0ZXBzIG9mIGFwcGx5QXhpc0RlbHRhIGluIHJldmVyc2VcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQXhpc0RlbHRhKGF4aXMsIHRyYW5zbGF0ZSA9IDAsIHNjYWxlID0gMSwgb3JpZ2luID0gMC41LCBib3hTY2FsZSwgb3JpZ2luQXhpcyA9IGF4aXMsIHNvdXJjZUF4aXMgPSBheGlzKSB7XG4gICAgaWYgKHBlcmNlbnQudGVzdCh0cmFuc2xhdGUpKSB7XG4gICAgICAgIHRyYW5zbGF0ZSA9IHBhcnNlRmxvYXQodHJhbnNsYXRlKTtcbiAgICAgICAgY29uc3QgcmVsYXRpdmVQcm9ncmVzcyA9IG1peChzb3VyY2VBeGlzLm1pbiwgc291cmNlQXhpcy5tYXgsIHRyYW5zbGF0ZSAvIDEwMCk7XG4gICAgICAgIHRyYW5zbGF0ZSA9IHJlbGF0aXZlUHJvZ3Jlc3MgLSBzb3VyY2VBeGlzLm1pbjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0cmFuc2xhdGUgIT09IFwibnVtYmVyXCIpXG4gICAgICAgIHJldHVybjtcbiAgICBsZXQgb3JpZ2luUG9pbnQgPSBtaXgob3JpZ2luQXhpcy5taW4sIG9yaWdpbkF4aXMubWF4LCBvcmlnaW4pO1xuICAgIGlmIChheGlzID09PSBvcmlnaW5BeGlzKVxuICAgICAgICBvcmlnaW5Qb2ludCAtPSB0cmFuc2xhdGU7XG4gICAgYXhpcy5taW4gPSByZW1vdmVQb2ludERlbHRhKGF4aXMubWluLCB0cmFuc2xhdGUsIHNjYWxlLCBvcmlnaW5Qb2ludCwgYm94U2NhbGUpO1xuICAgIGF4aXMubWF4ID0gcmVtb3ZlUG9pbnREZWx0YShheGlzLm1heCwgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luUG9pbnQsIGJveFNjYWxlKTtcbn1cbi8qKlxuICogUmVtb3ZlIGEgdHJhbnNmb3JtcyBmcm9tIGFuIGF4aXMuIFRoaXMgaXMgZXNzZW50aWFsbHkgdGhlIHN0ZXBzIG9mIGFwcGx5QXhpc1RyYW5zZm9ybXMgaW4gcmV2ZXJzZVxuICogYW5kIGFjdHMgYXMgYSBicmlkZ2UgYmV0d2VlbiBtb3Rpb24gdmFsdWVzIGFuZCByZW1vdmVBeGlzRGVsdGFcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQXhpc1RyYW5zZm9ybXMoYXhpcywgdHJhbnNmb3JtcywgW2tleSwgc2NhbGVLZXksIG9yaWdpbktleV0sIG9yaWdpbiwgc291cmNlQXhpcykge1xuICAgIHJlbW92ZUF4aXNEZWx0YShheGlzLCB0cmFuc2Zvcm1zW2tleV0sIHRyYW5zZm9ybXNbc2NhbGVLZXldLCB0cmFuc2Zvcm1zW29yaWdpbktleV0sIHRyYW5zZm9ybXMuc2NhbGUsIG9yaWdpbiwgc291cmNlQXhpcyk7XG59XG4vKipcbiAqIFRoZSBuYW1lcyBvZiB0aGUgbW90aW9uIHZhbHVlcyB3ZSB3YW50IHRvIGFwcGx5IGFzIHRyYW5zbGF0aW9uLCBzY2FsZSBhbmQgb3JpZ2luLlxuICovXG5jb25zdCB4S2V5cyA9IFtcInhcIiwgXCJzY2FsZVhcIiwgXCJvcmlnaW5YXCJdO1xuY29uc3QgeUtleXMgPSBbXCJ5XCIsIFwic2NhbGVZXCIsIFwib3JpZ2luWVwiXTtcbi8qKlxuICogUmVtb3ZlIGEgdHJhbnNmb3JtcyBmcm9tIGFuIGJveC4gVGhpcyBpcyBlc3NlbnRpYWxseSB0aGUgc3RlcHMgb2YgYXBwbHlBeGlzQm94IGluIHJldmVyc2VcbiAqIGFuZCBhY3RzIGFzIGEgYnJpZGdlIGJldHdlZW4gbW90aW9uIHZhbHVlcyBhbmQgcmVtb3ZlQXhpc0RlbHRhXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUJveFRyYW5zZm9ybXMoYm94LCB0cmFuc2Zvcm1zLCBvcmlnaW5Cb3gsIHNvdXJjZUJveCkge1xuICAgIHJlbW92ZUF4aXNUcmFuc2Zvcm1zKGJveC54LCB0cmFuc2Zvcm1zLCB4S2V5cywgb3JpZ2luQm94ID8gb3JpZ2luQm94LnggOiB1bmRlZmluZWQsIHNvdXJjZUJveCA/IHNvdXJjZUJveC54IDogdW5kZWZpbmVkKTtcbiAgICByZW1vdmVBeGlzVHJhbnNmb3Jtcyhib3gueSwgdHJhbnNmb3JtcywgeUtleXMsIG9yaWdpbkJveCA/IG9yaWdpbkJveC55IDogdW5kZWZpbmVkLCBzb3VyY2VCb3ggPyBzb3VyY2VCb3gueSA6IHVuZGVmaW5lZCk7XG59XG5cbmV4cG9ydCB7IHJlbW92ZUF4aXNEZWx0YSwgcmVtb3ZlQXhpc1RyYW5zZm9ybXMsIHJlbW92ZUJveFRyYW5zZm9ybXMsIHJlbW92ZVBvaW50RGVsdGEgfTtcbiIsImltcG9ydCB7IGNhbGNMZW5ndGggfSBmcm9tICcuL2RlbHRhLWNhbGMubWpzJztcblxuZnVuY3Rpb24gaXNBeGlzRGVsdGFaZXJvKGRlbHRhKSB7XG4gICAgcmV0dXJuIGRlbHRhLnRyYW5zbGF0ZSA9PT0gMCAmJiBkZWx0YS5zY2FsZSA9PT0gMTtcbn1cbmZ1bmN0aW9uIGlzRGVsdGFaZXJvKGRlbHRhKSB7XG4gICAgcmV0dXJuIGlzQXhpc0RlbHRhWmVybyhkZWx0YS54KSAmJiBpc0F4aXNEZWx0YVplcm8oZGVsdGEueSk7XG59XG5mdW5jdGlvbiBib3hFcXVhbHMoYSwgYikge1xuICAgIHJldHVybiAoYS54Lm1pbiA9PT0gYi54Lm1pbiAmJlxuICAgICAgICBhLngubWF4ID09PSBiLngubWF4ICYmXG4gICAgICAgIGEueS5taW4gPT09IGIueS5taW4gJiZcbiAgICAgICAgYS55Lm1heCA9PT0gYi55Lm1heCk7XG59XG5mdW5jdGlvbiBib3hFcXVhbHNSb3VuZGVkKGEsIGIpIHtcbiAgICByZXR1cm4gKE1hdGgucm91bmQoYS54Lm1pbikgPT09IE1hdGgucm91bmQoYi54Lm1pbikgJiZcbiAgICAgICAgTWF0aC5yb3VuZChhLngubWF4KSA9PT0gTWF0aC5yb3VuZChiLngubWF4KSAmJlxuICAgICAgICBNYXRoLnJvdW5kKGEueS5taW4pID09PSBNYXRoLnJvdW5kKGIueS5taW4pICYmXG4gICAgICAgIE1hdGgucm91bmQoYS55Lm1heCkgPT09IE1hdGgucm91bmQoYi55Lm1heCkpO1xufVxuZnVuY3Rpb24gYXNwZWN0UmF0aW8oYm94KSB7XG4gICAgcmV0dXJuIGNhbGNMZW5ndGgoYm94LngpIC8gY2FsY0xlbmd0aChib3gueSk7XG59XG5cbmV4cG9ydCB7IGFzcGVjdFJhdGlvLCBib3hFcXVhbHMsIGJveEVxdWFsc1JvdW5kZWQsIGlzRGVsdGFaZXJvIH07XG4iLCJpbXBvcnQgeyBhZGRVbmlxdWVJdGVtLCByZW1vdmVJdGVtIH0gZnJvbSAnLi4vLi4vdXRpbHMvYXJyYXkubWpzJztcblxuY2xhc3MgTm9kZVN0YWNrIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5tZW1iZXJzID0gW107XG4gICAgfVxuICAgIGFkZChub2RlKSB7XG4gICAgICAgIGFkZFVuaXF1ZUl0ZW0odGhpcy5tZW1iZXJzLCBub2RlKTtcbiAgICAgICAgbm9kZS5zY2hlZHVsZVJlbmRlcigpO1xuICAgIH1cbiAgICByZW1vdmUobm9kZSkge1xuICAgICAgICByZW1vdmVJdGVtKHRoaXMubWVtYmVycywgbm9kZSk7XG4gICAgICAgIGlmIChub2RlID09PSB0aGlzLnByZXZMZWFkKSB7XG4gICAgICAgICAgICB0aGlzLnByZXZMZWFkID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlID09PSB0aGlzLmxlYWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHByZXZMZWFkID0gdGhpcy5tZW1iZXJzW3RoaXMubWVtYmVycy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGlmIChwcmV2TGVhZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvbW90ZShwcmV2TGVhZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVsZWdhdGUobm9kZSkge1xuICAgICAgICBjb25zdCBpbmRleE9mTm9kZSA9IHRoaXMubWVtYmVycy5maW5kSW5kZXgoKG1lbWJlcikgPT4gbm9kZSA9PT0gbWVtYmVyKTtcbiAgICAgICAgaWYgKGluZGV4T2ZOb2RlID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmluZCB0aGUgbmV4dCBwcm9qZWN0aW9uIG5vZGUgdGhhdCBpcyBwcmVzZW50XG4gICAgICAgICAqL1xuICAgICAgICBsZXQgcHJldkxlYWQ7XG4gICAgICAgIGZvciAobGV0IGkgPSBpbmRleE9mTm9kZTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGNvbnN0IG1lbWJlciA9IHRoaXMubWVtYmVyc1tpXTtcbiAgICAgICAgICAgIGlmIChtZW1iZXIuaXNQcmVzZW50ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHByZXZMZWFkID0gbWVtYmVyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwcmV2TGVhZCkge1xuICAgICAgICAgICAgdGhpcy5wcm9tb3RlKHByZXZMZWFkKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHByb21vdGUobm9kZSwgcHJlc2VydmVGb2xsb3dPcGFjaXR5KSB7XG4gICAgICAgIGNvbnN0IHByZXZMZWFkID0gdGhpcy5sZWFkO1xuICAgICAgICBpZiAobm9kZSA9PT0gcHJldkxlYWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMucHJldkxlYWQgPSBwcmV2TGVhZDtcbiAgICAgICAgdGhpcy5sZWFkID0gbm9kZTtcbiAgICAgICAgbm9kZS5zaG93KCk7XG4gICAgICAgIGlmIChwcmV2TGVhZCkge1xuICAgICAgICAgICAgcHJldkxlYWQuaW5zdGFuY2UgJiYgcHJldkxlYWQuc2NoZWR1bGVSZW5kZXIoKTtcbiAgICAgICAgICAgIG5vZGUuc2NoZWR1bGVSZW5kZXIoKTtcbiAgICAgICAgICAgIG5vZGUucmVzdW1lRnJvbSA9IHByZXZMZWFkO1xuICAgICAgICAgICAgaWYgKHByZXNlcnZlRm9sbG93T3BhY2l0eSkge1xuICAgICAgICAgICAgICAgIG5vZGUucmVzdW1lRnJvbS5wcmVzZXJ2ZU9wYWNpdHkgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByZXZMZWFkLnNuYXBzaG90KSB7XG4gICAgICAgICAgICAgICAgbm9kZS5zbmFwc2hvdCA9IHByZXZMZWFkLnNuYXBzaG90O1xuICAgICAgICAgICAgICAgIG5vZGUuc25hcHNob3QubGF0ZXN0VmFsdWVzID1cbiAgICAgICAgICAgICAgICAgICAgcHJldkxlYWQuYW5pbWF0aW9uVmFsdWVzIHx8IHByZXZMZWFkLmxhdGVzdFZhbHVlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub2RlLnJvb3QgJiYgbm9kZS5yb290LmlzVXBkYXRpbmcpIHtcbiAgICAgICAgICAgICAgICBub2RlLmlzTGF5b3V0RGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyBjcm9zc2ZhZGUgfSA9IG5vZGUub3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjcm9zc2ZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcHJldkxlYWQuaGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUT0RPOlxuICAgICAgICAgICAgICogICAtIFRlc3QgYm9yZGVyIHJhZGl1cyB3aGVuIHByZXZpb3VzIG5vZGUgd2FzIGRlbGV0ZWRcbiAgICAgICAgICAgICAqICAgLSBib3hTaGFkb3cgbWl4aW5nXG4gICAgICAgICAgICAgKiAgIC0gU2hhcmVkIGJldHdlZW4gZWxlbWVudCBBIGluIHNjcm9sbGVkIGNvbnRhaW5lciBhbmQgZWxlbWVudCBCIChzY3JvbGwgc3RheXMgdGhlIHNhbWUgb3IgY2hhbmdlcylcbiAgICAgICAgICAgICAqICAgLSBTaGFyZWQgYmV0d2VlbiBlbGVtZW50IEEgaW4gdHJhbnNmb3JtZWQgY29udGFpbmVyIGFuZCBlbGVtZW50IEIgKHRyYW5zZm9ybSBzdGF5cyB0aGUgc2FtZSBvciBjaGFuZ2VzKVxuICAgICAgICAgICAgICogICAtIFNoYXJlZCBiZXR3ZWVuIGVsZW1lbnQgQSBpbiBzY3JvbGxlZCBwYWdlIGFuZCBlbGVtZW50IEIgKHNjcm9sbCBzdGF5cyB0aGUgc2FtZSBvciBjaGFuZ2VzKVxuICAgICAgICAgICAgICogLS0tXG4gICAgICAgICAgICAgKiAgIC0gQ3Jvc3NmYWRlIG9wYWNpdHkgb2Ygcm9vdCBub2Rlc1xuICAgICAgICAgICAgICogICAtIGxheW91dElkIGNoYW5nZXMgYWZ0ZXIgYW5pbWF0aW9uXG4gICAgICAgICAgICAgKiAgIC0gbGF5b3V0SWQgY2hhbmdlcyBtaWQgYW5pbWF0aW9uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgfVxuICAgIH1cbiAgICBleGl0QW5pbWF0aW9uQ29tcGxldGUoKSB7XG4gICAgICAgIHRoaXMubWVtYmVycy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IG9wdGlvbnMsIHJlc3VtaW5nRnJvbSB9ID0gbm9kZTtcbiAgICAgICAgICAgIG9wdGlvbnMub25FeGl0Q29tcGxldGUgJiYgb3B0aW9ucy5vbkV4aXRDb21wbGV0ZSgpO1xuICAgICAgICAgICAgaWYgKHJlc3VtaW5nRnJvbSkge1xuICAgICAgICAgICAgICAgIHJlc3VtaW5nRnJvbS5vcHRpb25zLm9uRXhpdENvbXBsZXRlICYmXG4gICAgICAgICAgICAgICAgICAgIHJlc3VtaW5nRnJvbS5vcHRpb25zLm9uRXhpdENvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzY2hlZHVsZVJlbmRlcigpIHtcbiAgICAgICAgdGhpcy5tZW1iZXJzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgICAgIG5vZGUuaW5zdGFuY2UgJiYgbm9kZS5zY2hlZHVsZVJlbmRlcihmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhciBhbnkgbGVhZHMgdGhhdCBoYXZlIGJlZW4gcmVtb3ZlZCB0aGlzIHJlbmRlciB0byBwcmV2ZW50IHRoZW0gZnJvbSBiZWluZ1xuICAgICAqIHVzZWQgaW4gZnV0dXJlIGFuaW1hdGlvbnMgYW5kIHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzXG4gICAgICovXG4gICAgcmVtb3ZlTGVhZFNuYXBzaG90KCkge1xuICAgICAgICBpZiAodGhpcy5sZWFkICYmIHRoaXMubGVhZC5zbmFwc2hvdCkge1xuICAgICAgICAgICAgdGhpcy5sZWFkLnNuYXBzaG90ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBOb2RlU3RhY2sgfTtcbiIsImZ1bmN0aW9uIGJ1aWxkUHJvamVjdGlvblRyYW5zZm9ybShkZWx0YSwgdHJlZVNjYWxlLCBsYXRlc3RUcmFuc2Zvcm0pIHtcbiAgICBsZXQgdHJhbnNmb3JtID0gXCJcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgdHJhbnNsYXRpb25zIHdlIHVzZSB0byBjYWxjdWxhdGUgYXJlIGFsd2F5cyByZWxhdGl2ZSB0byB0aGUgdmlld3BvcnQgY29vcmRpbmF0ZSBzcGFjZS5cbiAgICAgKiBCdXQgd2hlbiB3ZSBhcHBseSBzY2FsZXMsIHdlIGFsc28gc2NhbGUgdGhlIGNvb3JkaW5hdGUgc3BhY2Ugb2YgYW4gZWxlbWVudCBhbmQgaXRzIGNoaWxkcmVuLlxuICAgICAqIEZvciBpbnN0YW5jZSBpZiB3ZSBoYXZlIGEgdHJlZVNjYWxlICh0aGUgY3VsbWluYXRpb24gb2YgYWxsIHBhcmVudCBzY2FsZXMpIG9mIDAuNSBhbmQgd2UgbmVlZFxuICAgICAqIHRvIG1vdmUgYW4gZWxlbWVudCAxMDAgcGl4ZWxzLCB3ZSBhY3R1YWxseSBuZWVkIHRvIG1vdmUgaXQgMjAwIGluIHdpdGhpbiB0aGF0IHNjYWxlZCBzcGFjZS5cbiAgICAgKi9cbiAgICBjb25zdCB4VHJhbnNsYXRlID0gZGVsdGEueC50cmFuc2xhdGUgLyB0cmVlU2NhbGUueDtcbiAgICBjb25zdCB5VHJhbnNsYXRlID0gZGVsdGEueS50cmFuc2xhdGUgLyB0cmVlU2NhbGUueTtcbiAgICBpZiAoeFRyYW5zbGF0ZSB8fCB5VHJhbnNsYXRlKSB7XG4gICAgICAgIHRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3hUcmFuc2xhdGV9cHgsICR7eVRyYW5zbGF0ZX1weCwgMCkgYDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwbHkgc2NhbGUgY29ycmVjdGlvbiBmb3IgdGhlIHRyZWUgdHJhbnNmb3JtLlxuICAgICAqIFRoaXMgd2lsbCBhcHBseSBzY2FsZSB0byB0aGUgc2NyZWVuLW9yaWVudGF0ZWQgYXhlcy5cbiAgICAgKi9cbiAgICBpZiAodHJlZVNjYWxlLnggIT09IDEgfHwgdHJlZVNjYWxlLnkgIT09IDEpIHtcbiAgICAgICAgdHJhbnNmb3JtICs9IGBzY2FsZSgkezEgLyB0cmVlU2NhbGUueH0sICR7MSAvIHRyZWVTY2FsZS55fSkgYDtcbiAgICB9XG4gICAgaWYgKGxhdGVzdFRyYW5zZm9ybSkge1xuICAgICAgICBjb25zdCB7IHJvdGF0ZSwgcm90YXRlWCwgcm90YXRlWSB9ID0gbGF0ZXN0VHJhbnNmb3JtO1xuICAgICAgICBpZiAocm90YXRlKVxuICAgICAgICAgICAgdHJhbnNmb3JtICs9IGByb3RhdGUoJHtyb3RhdGV9ZGVnKSBgO1xuICAgICAgICBpZiAocm90YXRlWClcbiAgICAgICAgICAgIHRyYW5zZm9ybSArPSBgcm90YXRlWCgke3JvdGF0ZVh9ZGVnKSBgO1xuICAgICAgICBpZiAocm90YXRlWSlcbiAgICAgICAgICAgIHRyYW5zZm9ybSArPSBgcm90YXRlWSgke3JvdGF0ZVl9ZGVnKSBgO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBseSBzY2FsZSB0byBtYXRjaCB0aGUgc2l6ZSBvZiB0aGUgZWxlbWVudCB0byB0aGUgc2l6ZSB3ZSB3YW50IGl0LlxuICAgICAqIFRoaXMgd2lsbCBhcHBseSBzY2FsZSB0byB0aGUgZWxlbWVudC1vcmllbnRhdGVkIGF4ZXMuXG4gICAgICovXG4gICAgY29uc3QgZWxlbWVudFNjYWxlWCA9IGRlbHRhLnguc2NhbGUgKiB0cmVlU2NhbGUueDtcbiAgICBjb25zdCBlbGVtZW50U2NhbGVZID0gZGVsdGEueS5zY2FsZSAqIHRyZWVTY2FsZS55O1xuICAgIGlmIChlbGVtZW50U2NhbGVYICE9PSAxIHx8IGVsZW1lbnRTY2FsZVkgIT09IDEpIHtcbiAgICAgICAgdHJhbnNmb3JtICs9IGBzY2FsZSgke2VsZW1lbnRTY2FsZVh9LCAke2VsZW1lbnRTY2FsZVl9KWA7XG4gICAgfVxuICAgIHJldHVybiB0cmFuc2Zvcm0gfHwgXCJub25lXCI7XG59XG5cbmV4cG9ydCB7IGJ1aWxkUHJvamVjdGlvblRyYW5zZm9ybSB9O1xuIiwiY29uc3QgY29tcGFyZUJ5RGVwdGggPSAoYSwgYikgPT4gYS5kZXB0aCAtIGIuZGVwdGg7XG5cbmV4cG9ydCB7IGNvbXBhcmVCeURlcHRoIH07XG4iLCJpbXBvcnQgeyBhZGRVbmlxdWVJdGVtLCByZW1vdmVJdGVtIH0gZnJvbSAnLi4vLi4vdXRpbHMvYXJyYXkubWpzJztcbmltcG9ydCB7IGNvbXBhcmVCeURlcHRoIH0gZnJvbSAnLi9jb21wYXJlLWJ5LWRlcHRoLm1qcyc7XG5cbmNsYXNzIEZsYXRUcmVlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgICAgICB0aGlzLmlzRGlydHkgPSBmYWxzZTtcbiAgICB9XG4gICAgYWRkKGNoaWxkKSB7XG4gICAgICAgIGFkZFVuaXF1ZUl0ZW0odGhpcy5jaGlsZHJlbiwgY2hpbGQpO1xuICAgICAgICB0aGlzLmlzRGlydHkgPSB0cnVlO1xuICAgIH1cbiAgICByZW1vdmUoY2hpbGQpIHtcbiAgICAgICAgcmVtb3ZlSXRlbSh0aGlzLmNoaWxkcmVuLCBjaGlsZCk7XG4gICAgICAgIHRoaXMuaXNEaXJ0eSA9IHRydWU7XG4gICAgfVxuICAgIGZvckVhY2goY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5pc0RpcnR5ICYmIHRoaXMuY2hpbGRyZW4uc29ydChjb21wYXJlQnlEZXB0aCk7XG4gICAgICAgIHRoaXMuaXNEaXJ0eSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goY2FsbGJhY2spO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgRmxhdFRyZWUgfTtcbiIsImltcG9ydCB7IFN1YnNjcmlwdGlvbk1hbmFnZXIgfSBmcm9tICcuLi8uLi91dGlscy9zdWJzY3JpcHRpb24tbWFuYWdlci5tanMnO1xuaW1wb3J0IHsgbWl4VmFsdWVzIH0gZnJvbSAnLi4vYW5pbWF0aW9uL21peC12YWx1ZXMubWpzJztcbmltcG9ydCB7IGNvcHlCb3hJbnRvIH0gZnJvbSAnLi4vZ2VvbWV0cnkvY29weS5tanMnO1xuaW1wb3J0IHsgdHJhbnNsYXRlQXhpcywgdHJhbnNmb3JtQm94LCBhcHBseUJveERlbHRhLCBhcHBseVRyZWVEZWx0YXMgfSBmcm9tICcuLi9nZW9tZXRyeS9kZWx0YS1hcHBseS5tanMnO1xuaW1wb3J0IHsgY2FsY1JlbGF0aXZlUG9zaXRpb24sIGNhbGNSZWxhdGl2ZUJveCwgY2FsY0JveERlbHRhLCBjYWxjTGVuZ3RoLCBpc05lYXIgfSBmcm9tICcuLi9nZW9tZXRyeS9kZWx0YS1jYWxjLm1qcyc7XG5pbXBvcnQgeyByZW1vdmVCb3hUcmFuc2Zvcm1zIH0gZnJvbSAnLi4vZ2VvbWV0cnkvZGVsdGEtcmVtb3ZlLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVCb3gsIGNyZWF0ZURlbHRhIH0gZnJvbSAnLi4vZ2VvbWV0cnkvbW9kZWxzLm1qcyc7XG5pbXBvcnQgeyBnZXRWYWx1ZVRyYW5zaXRpb24gfSBmcm9tICcuLi8uLi9hbmltYXRpb24vdXRpbHMvdHJhbnNpdGlvbnMubWpzJztcbmltcG9ydCB7IGJveEVxdWFsc1JvdW5kZWQsIGlzRGVsdGFaZXJvLCBhc3BlY3RSYXRpbywgYm94RXF1YWxzIH0gZnJvbSAnLi4vZ2VvbWV0cnkvdXRpbHMubWpzJztcbmltcG9ydCB7IE5vZGVTdGFjayB9IGZyb20gJy4uL3NoYXJlZC9zdGFjay5tanMnO1xuaW1wb3J0IHsgc2NhbGVDb3JyZWN0b3JzIH0gZnJvbSAnLi4vc3R5bGVzL3NjYWxlLWNvcnJlY3Rpb24ubWpzJztcbmltcG9ydCB7IGJ1aWxkUHJvamVjdGlvblRyYW5zZm9ybSB9IGZyb20gJy4uL3N0eWxlcy90cmFuc2Zvcm0ubWpzJztcbmltcG9ydCB7IGVhY2hBeGlzIH0gZnJvbSAnLi4vdXRpbHMvZWFjaC1heGlzLm1qcyc7XG5pbXBvcnQgeyBoYXNUcmFuc2Zvcm0sIGhhc1NjYWxlLCBoYXMyRFRyYW5zbGF0ZSB9IGZyb20gJy4uL3V0aWxzL2hhcy10cmFuc2Zvcm0ubWpzJztcbmltcG9ydCB7IEZsYXRUcmVlIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3V0aWxzL2ZsYXQtdHJlZS5tanMnO1xuaW1wb3J0IHsgcmVzb2x2ZU1vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vdmFsdWUvdXRpbHMvcmVzb2x2ZS1tb3Rpb24tdmFsdWUubWpzJztcbmltcG9ydCB7IGdsb2JhbFByb2plY3Rpb25TdGF0ZSB9IGZyb20gJy4vc3RhdGUubWpzJztcbmltcG9ydCB7IGRlbGF5IH0gZnJvbSAnLi4vLi4vdXRpbHMvZGVsYXkubWpzJztcbmltcG9ydCB7IG1peCB9IGZyb20gJy4uLy4uL3V0aWxzL21peC5tanMnO1xuaW1wb3J0IHsgcmVjb3JkIH0gZnJvbSAnLi4vLi4vZGVidWcvcmVjb3JkLm1qcyc7XG5pbXBvcnQgeyBpc1NWR0VsZW1lbnQgfSBmcm9tICcuLi8uLi9yZW5kZXIvZG9tL3V0aWxzL2lzLXN2Zy1lbGVtZW50Lm1qcyc7XG5pbXBvcnQgeyBhbmltYXRlU2luZ2xlVmFsdWUgfSBmcm9tICcuLi8uLi9hbmltYXRpb24vaW50ZXJmYWNlcy9zaW5nbGUtdmFsdWUubWpzJztcbmltcG9ydCB7IGNsYW1wIH0gZnJvbSAnLi4vLi4vdXRpbHMvY2xhbXAubWpzJztcbmltcG9ydCB7IGNhbmNlbEZyYW1lLCBmcmFtZURhdGEsIHN0ZXBzLCBmcmFtZSB9IGZyb20gJy4uLy4uL2ZyYW1lbG9vcC9mcmFtZS5tanMnO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uLy4uL3V0aWxzL25vb3AubWpzJztcblxuY29uc3QgdHJhbnNmb3JtQXhlcyA9IFtcIlwiLCBcIlhcIiwgXCJZXCIsIFwiWlwiXTtcbi8qKlxuICogV2UgdXNlIDEwMDAgYXMgdGhlIGFuaW1hdGlvbiB0YXJnZXQgYXMgMC0xMDAwIG1hcHMgYmV0dGVyIHRvIHBpeGVscyB0aGFuIDAtMVxuICogd2hpY2ggaGFzIGEgbm90aWNlYWJsZSBkaWZmZXJlbmNlIGluIHNwcmluZyBhbmltYXRpb25zXG4gKi9cbmNvbnN0IGFuaW1hdGlvblRhcmdldCA9IDEwMDA7XG5sZXQgaWQgPSAwO1xuLyoqXG4gKiBVc2UgYSBtdXRhYmxlIGRhdGEgb2JqZWN0IGZvciBkZWJ1ZyBkYXRhIHNvIGFzIHRvIG5vdCBjcmVhdGUgYSBuZXdcbiAqIG9iamVjdCBldmVyeSBmcmFtZS5cbiAqL1xuY29uc3QgcHJvamVjdGlvbkZyYW1lRGF0YSA9IHtcbiAgICB0eXBlOiBcInByb2plY3Rpb25GcmFtZVwiLFxuICAgIHRvdGFsTm9kZXM6IDAsXG4gICAgcmVzb2x2ZWRUYXJnZXREZWx0YXM6IDAsXG4gICAgcmVjYWxjdWxhdGVkUHJvamVjdGlvbjogMCxcbn07XG5mdW5jdGlvbiBjcmVhdGVQcm9qZWN0aW9uTm9kZSh7IGF0dGFjaFJlc2l6ZUxpc3RlbmVyLCBkZWZhdWx0UGFyZW50LCBtZWFzdXJlU2Nyb2xsLCBjaGVja0lzU2Nyb2xsUm9vdCwgcmVzZXRUcmFuc2Zvcm0sIH0pIHtcbiAgICByZXR1cm4gY2xhc3MgUHJvamVjdGlvbk5vZGUge1xuICAgICAgICBjb25zdHJ1Y3RvcihsYXRlc3RWYWx1ZXMgPSB7fSwgcGFyZW50ID0gZGVmYXVsdFBhcmVudCA9PT0gbnVsbCB8fCBkZWZhdWx0UGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWZhdWx0UGFyZW50KCkpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQSB1bmlxdWUgSUQgZ2VuZXJhdGVkIGZvciBldmVyeSBwcm9qZWN0aW9uIG5vZGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuaWQgPSBpZCsrO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBbiBpZCB0aGF0IHJlcHJlc2VudHMgYSB1bmlxdWUgc2Vzc2lvbiBpbnN0aWdhdGVkIGJ5IHN0YXJ0VXBkYXRlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbklkID0gMDtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQSBTZXQgY29udGFpbmluZyBhbGwgdGhpcyBjb21wb25lbnQncyBjaGlsZHJlbi4gVGhpcyBpcyB1c2VkIHRvIGl0ZXJhdGVcbiAgICAgICAgICAgICAqIHRocm91Z2ggdGhlIGNoaWxkcmVuLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFRPRE86IFRoaXMgY291bGQgYmUgZmFzdGVyIHRvIGl0ZXJhdGUgYXMgYSBmbGF0IGFycmF5IHN0b3JlZCBvbiB0aGUgcm9vdCBub2RlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuID0gbmV3IFNldCgpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBPcHRpb25zIGZvciB0aGUgbm9kZS4gV2UgdXNlIHRoaXMgdG8gY29uZmlndXJlIHdoYXQga2luZCBvZiBsYXlvdXQgYW5pbWF0aW9uc1xuICAgICAgICAgICAgICogd2Ugc2hvdWxkIHBlcmZvcm0gKGlmIGFueSkuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXZSB1c2UgdGhpcyB0byBkZXRlY3Qgd2hlbiBpdHMgc2FmZSB0byBzaHV0IGRvd24gcGFydCBvZiBhIHByb2plY3Rpb24gdHJlZS5cbiAgICAgICAgICAgICAqIFdlIGhhdmUgdG8ga2VlcCBwcm9qZWN0aW5nIGNoaWxkcmVuIGZvciBzY2FsZSBjb3JyZWN0aW9uIGFuZCByZWxhdGl2ZSBwcm9qZWN0aW9uXG4gICAgICAgICAgICAgKiB1bnRpbCBhbGwgdGhlaXIgcGFyZW50cyBzdG9wIHBlcmZvcm1pbmcgbGF5b3V0IGFuaW1hdGlvbnMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuaXNUcmVlQW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmlzQW5pbWF0aW9uQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGbGFnIHRvIHRydWUgaWYgd2UgdGhpbmsgdGhpcyBsYXlvdXQgaGFzIGJlZW4gY2hhbmdlZC4gV2UgY2FuJ3QgYWx3YXlzIGtub3cgdGhpcyxcbiAgICAgICAgICAgICAqIGN1cnJlbnRseSB3ZSBzZXQgaXQgdG8gdHJ1ZSBldmVyeSB0aW1lIGEgY29tcG9uZW50IHJlbmRlcnMsIG9yIGlmIGl0IGhhcyBhIGxheW91dERlcGVuZGVuY3lcbiAgICAgICAgICAgICAqIGlmIHRoYXQgaGFzIGNoYW5nZWQgYmV0d2VlbiByZW5kZXJzLiBBZGRpdGlvbmFsbHksIGNvbXBvbmVudHMgY2FuIGJlIGdyb3VwZWQgYnkgTGF5b3V0R3JvdXBcbiAgICAgICAgICAgICAqIGFuZCBpZiBvbmUgbm9kZSBpcyBkaXJ0aWVkLCB0aGV5IGFsbCBhcmUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuaXNMYXlvdXREaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGbGFnIHRvIHRydWUgaWYgd2UgdGhpbmsgdGhlIHByb2plY3Rpb24gY2FsY3VsYXRpb25zIGZvciB0aGlzIG5vZGUgbmVlZHNcbiAgICAgICAgICAgICAqIHJlY2FsY3VsYXRpbmcgYXMgYSByZXN1bHQgb2YgYW4gdXBkYXRlZCB0cmFuc2Zvcm0gb3IgbGF5b3V0IGFuaW1hdGlvbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5pc1Byb2plY3Rpb25EaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGbGFnIHRvIHRydWUgaWYgdGhlIGxheW91dCAqb3IqIHRyYW5zZm9ybSBoYXMgY2hhbmdlZC4gVGhpcyB0aGVuIGdldHMgcHJvcGFnYXRlZFxuICAgICAgICAgICAgICogdGhyb3VnaG91dCB0aGUgcHJvamVjdGlvbiB0cmVlLCBmb3JjaW5nIGFueSBlbGVtZW50IGJlbG93IHRvIHJlY2FsY3VsYXRlIG9uIHRoZSBuZXh0IGZyYW1lLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmlzU2hhcmVkUHJvamVjdGlvbkRpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEZsYWcgdHJhbnNmb3JtIGRpcnR5LiBUaGlzIGdldHMgcHJvcGFnYXRlZCB0aHJvdWdob3V0IHRoZSB3aG9sZSB0cmVlIGJ1dCBpcyBvbmx5XG4gICAgICAgICAgICAgKiByZXNwZWN0ZWQgYnkgc2hhcmVkIG5vZGVzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmlzVHJhbnNmb3JtRGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQmxvY2sgbGF5b3V0IHVwZGF0ZXMgZm9yIGluc3RhbnQgbGF5b3V0IHRyYW5zaXRpb25zIHRocm91Z2hvdXQgdGhlIHRyZWUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMudXBkYXRlTWFudWFsbHlCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUJsb2NrZWRCeVJlc2l6ZSA9IGZhbHNlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZXQgdG8gdHJ1ZSBiZXR3ZWVuIHRoZSBzdGFydCBvZiB0aGUgZmlyc3QgYHdpbGxVcGRhdGVgIGNhbGwgYW5kIHRoZSBlbmQgb2YgdGhlIGBkaWRVcGRhdGVgXG4gICAgICAgICAgICAgKiBjYWxsLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmlzVXBkYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhpcyBpcyBhbiBTVkcgZWxlbWVudCB3ZSBjdXJyZW50bHkgZGlzYWJsZSBwcm9qZWN0aW9uIHRyYW5zZm9ybXNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5pc1NWRyA9IGZhbHNlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGbGFnIHRvIHRydWUgKGR1cmluZyBwcm9tb3Rpb24pIGlmIGEgbm9kZSBkb2luZyBhbiBpbnN0YW50IGxheW91dCB0cmFuc2l0aW9uIG5lZWRzIHRvIHJlc2V0XG4gICAgICAgICAgICAgKiBpdHMgcHJvamVjdGlvbiBzdHlsZXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMubmVlZHNSZXNldCA9IGZhbHNlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGbGFncyB3aGV0aGVyIHRoaXMgbm9kZSBzaG91bGQgaGF2ZSBpdHMgdHJhbnNmb3JtIHJlc2V0IHByaW9yIHRvIG1lYXN1cmluZy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5zaG91bGRSZXNldFRyYW5zZm9ybSA9IGZhbHNlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBjYWxjdWxhdGVkIGNvbnRleHR1YWwvYWNjdW11bGF0ZWQvdHJlZSBzY2FsZS5cbiAgICAgICAgICAgICAqIFRoaXMgd2lsbCBiZSB1c2VkIHRvIHNjYWxlIGNhbGN1bGNhdGVkIHByb2plY3Rpb24gdHJhbnNmb3JtcywgYXMgdGhlc2UgYXJlXG4gICAgICAgICAgICAgKiBjYWxjdWxhdGVkIGluIHNjcmVlbi1zcGFjZSBidXQgbmVlZCB0byBiZSBzY2FsZWQgZm9yIGVsZW1lbnRzIHRvIGxheW91dGx5XG4gICAgICAgICAgICAgKiBtYWtlIGl0IHRvIHRoZWlyIGNhbGN1bGF0ZWQgZGVzdGluYXRpb25zLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFRPRE86IExhenktaW5pdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLnRyZWVTY2FsZSA9IHsgeDogMSwgeTogMSB9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmV2ZW50SGFuZGxlcnMgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICB0aGlzLmhhc1RyZWVBbmltYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gTm90ZTogQ3VycmVudGx5IG9ubHkgcnVubmluZyBvbiByb290IG5vZGVcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmNoZWNrVXBkYXRlRmFpbGVkID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVXBkYXRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1VwZGF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJBbGxTbmFwc2hvdHMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGlzIGlzIGEgbXVsdGktc3RlcCBwcm9jZXNzIGFzIHNoYXJlZCBub2RlcyBtaWdodCBiZSBvZiBkaWZmZXJlbnQgZGVwdGhzLiBOb2Rlc1xuICAgICAgICAgICAgICogYXJlIHNvcnRlZCBieSBkZXB0aCBvcmRlciwgc28gd2UgbmVlZCB0byByZXNvbHZlIHRoZSBlbnRpcmUgdHJlZSBiZWZvcmUgbW92aW5nIHRvXG4gICAgICAgICAgICAgKiB0aGUgbmV4dCBzdGVwLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVByb2plY3Rpb24gPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogUmVzZXQgZGVidWcgY291bnRzLiBNYW51YWxseSByZXNldHRpbmcgcmF0aGVyIHRoYW4gY3JlYXRpbmcgYSBuZXdcbiAgICAgICAgICAgICAgICAgKiBvYmplY3QgZWFjaCBmcmFtZS5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBwcm9qZWN0aW9uRnJhbWVEYXRhLnRvdGFsTm9kZXMgPVxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0aW9uRnJhbWVEYXRhLnJlc29sdmVkVGFyZ2V0RGVsdGFzID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3Rpb25GcmFtZURhdGEucmVjYWxjdWxhdGVkUHJvamVjdGlvbiA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMDtcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVzLmZvckVhY2gocHJvcGFnYXRlRGlydHlOb2Rlcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKHJlc29sdmVUYXJnZXREZWx0YSk7XG4gICAgICAgICAgICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKGNhbGNQcm9qZWN0aW9uKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVzLmZvckVhY2goY2xlYW5EaXJ0eU5vZGVzKTtcbiAgICAgICAgICAgICAgICByZWNvcmQocHJvamVjdGlvbkZyYW1lRGF0YSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5oYXNQcm9qZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuaXNWaXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uUHJvZ3Jlc3MgPSAwO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTaGFyZWQgbGF5b3V0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8vIFRPRE8gT25seSBydW5uaW5nIG9uIHJvb3Qgbm9kZVxuICAgICAgICAgICAgdGhpcy5zaGFyZWROb2RlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIHRoaXMubGF0ZXN0VmFsdWVzID0gbGF0ZXN0VmFsdWVzO1xuICAgICAgICAgICAgdGhpcy5yb290ID0gcGFyZW50ID8gcGFyZW50LnJvb3QgfHwgcGFyZW50IDogdGhpcztcbiAgICAgICAgICAgIHRoaXMucGF0aCA9IHBhcmVudCA/IFsuLi5wYXJlbnQucGF0aCwgcGFyZW50XSA6IFtdO1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgICAgICB0aGlzLmRlcHRoID0gcGFyZW50ID8gcGFyZW50LmRlcHRoICsgMSA6IDA7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGF0aC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMucGF0aFtpXS5zaG91bGRSZXNldFRyYW5zZm9ybSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5yb290ID09PSB0aGlzKVxuICAgICAgICAgICAgICAgIHRoaXMubm9kZXMgPSBuZXcgRmxhdFRyZWUoKTtcbiAgICAgICAgfVxuICAgICAgICBhZGRFdmVudExpc3RlbmVyKG5hbWUsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5ldmVudEhhbmRsZXJzLmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRIYW5kbGVycy5zZXQobmFtZSwgbmV3IFN1YnNjcmlwdGlvbk1hbmFnZXIoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ldmVudEhhbmRsZXJzLmdldChuYW1lKS5hZGQoaGFuZGxlcik7XG4gICAgICAgIH1cbiAgICAgICAgbm90aWZ5TGlzdGVuZXJzKG5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbk1hbmFnZXIgPSB0aGlzLmV2ZW50SGFuZGxlcnMuZ2V0KG5hbWUpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uTWFuYWdlciAmJiBzdWJzY3JpcHRpb25NYW5hZ2VyLm5vdGlmeSguLi5hcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBoYXNMaXN0ZW5lcnMobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRIYW5kbGVycy5oYXMobmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIExpZmVjeWNsZXNcbiAgICAgICAgICovXG4gICAgICAgIG1vdW50KGluc3RhbmNlLCBpc0xheW91dERpcnR5ID0gdGhpcy5yb290Lmhhc1RyZWVBbmltYXRlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5pc1NWRyA9IGlzU1ZHRWxlbWVudChpbnN0YW5jZSk7XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgICAgICBjb25zdCB7IGxheW91dElkLCBsYXlvdXQsIHZpc3VhbEVsZW1lbnQgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgICAgIGlmICh2aXN1YWxFbGVtZW50ICYmICF2aXN1YWxFbGVtZW50LmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICB2aXN1YWxFbGVtZW50Lm1vdW50KGluc3RhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucm9vdC5ub2Rlcy5hZGQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5jaGlsZHJlbi5hZGQodGhpcyk7XG4gICAgICAgICAgICBpZiAoaXNMYXlvdXREaXJ0eSAmJiAobGF5b3V0IHx8IGxheW91dElkKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNMYXlvdXREaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYXR0YWNoUmVzaXplTGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICBsZXQgY2FuY2VsRGVsYXk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzaXplVW5ibG9ja1VwZGF0ZSA9ICgpID0+ICh0aGlzLnJvb3QudXBkYXRlQmxvY2tlZEJ5UmVzaXplID0gZmFsc2UpO1xuICAgICAgICAgICAgICAgIGF0dGFjaFJlc2l6ZUxpc3RlbmVyKGluc3RhbmNlLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdC51cGRhdGVCbG9ja2VkQnlSZXNpemUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBjYW5jZWxEZWxheSAmJiBjYW5jZWxEZWxheSgpO1xuICAgICAgICAgICAgICAgICAgICBjYW5jZWxEZWxheSA9IGRlbGF5KHJlc2l6ZVVuYmxvY2tVcGRhdGUsIDI1MCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnbG9iYWxQcm9qZWN0aW9uU3RhdGUuaGFzQW5pbWF0ZWRTaW5jZVJlc2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsUHJvamVjdGlvblN0YXRlLmhhc0FuaW1hdGVkU2luY2VSZXNpemUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm9kZXMuZm9yRWFjaChmaW5pc2hBbmltYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGF5b3V0SWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3QucmVnaXN0ZXJTaGFyZWROb2RlKGxheW91dElkLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE9ubHkgcmVnaXN0ZXIgdGhlIGhhbmRsZXIgaWYgaXQgcmVxdWlyZXMgbGF5b3V0IGFuaW1hdGlvblxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRlICE9PSBmYWxzZSAmJlxuICAgICAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQgJiZcbiAgICAgICAgICAgICAgICAobGF5b3V0SWQgfHwgbGF5b3V0KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcImRpZFVwZGF0ZVwiLCAoeyBkZWx0YSwgaGFzTGF5b3V0Q2hhbmdlZCwgaGFzUmVsYXRpdmVUYXJnZXRDaGFuZ2VkLCBsYXlvdXQ6IG5ld0xheW91dCwgfSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1RyZWVBbmltYXRpb25CbG9ja2VkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZVRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBDaGVjayBoZXJlIGlmIGFuIGFuaW1hdGlvbiBleGlzdHNcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGF5b3V0VHJhbnNpdGlvbiA9IHRoaXMub3B0aW9ucy50cmFuc2l0aW9uIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB2aXN1YWxFbGVtZW50LmdldERlZmF1bHRUcmFuc2l0aW9uKCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRMYXlvdXRUcmFuc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IG9uTGF5b3V0QW5pbWF0aW9uU3RhcnQsIG9uTGF5b3V0QW5pbWF0aW9uQ29tcGxldGUsIH0gPSB2aXN1YWxFbGVtZW50LmdldFByb3BzKCk7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBUaGUgdGFyZ2V0IGxheW91dCBvZiB0aGUgZWxlbWVudCBtaWdodCBzdGF5IHRoZSBzYW1lLFxuICAgICAgICAgICAgICAgICAgICAgKiBidXQgaXRzIHBvc2l0aW9uIHJlbGF0aXZlIHRvIGl0cyBwYXJlbnQgaGFzIGNoYW5nZWQuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRDaGFuZ2VkID0gIXRoaXMudGFyZ2V0TGF5b3V0IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAhYm94RXF1YWxzUm91bmRlZCh0aGlzLnRhcmdldExheW91dCwgbmV3TGF5b3V0KSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzUmVsYXRpdmVUYXJnZXRDaGFuZ2VkO1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogSWYgdGhlIGxheW91dCBoYXNuJ3Qgc2VlbWVkIHRvIGhhdmUgY2hhbmdlZCwgaXQgbWlnaHQgYmUgdGhhdCB0aGVcbiAgICAgICAgICAgICAgICAgICAgICogZWxlbWVudCBpcyB2aXN1YWxseSBpbiB0aGUgc2FtZSBwbGFjZSBpbiB0aGUgZG9jdW1lbnQgYnV0IGl0cyBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAgKiByZWxhdGl2ZSB0byBpdHMgcGFyZW50IGhhcyBpbmRlZWQgY2hhbmdlZC4gU28gaGVyZSB3ZSBjaGVjayBmb3IgdGhhdC5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhc09ubHlSZWxhdGl2ZVRhcmdldENoYW5nZWQgPSAhaGFzTGF5b3V0Q2hhbmdlZCAmJiBoYXNSZWxhdGl2ZVRhcmdldENoYW5nZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMubGF5b3V0Um9vdCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMucmVzdW1lRnJvbSAmJiB0aGlzLnJlc3VtZUZyb20uaW5zdGFuY2UpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNPbmx5UmVsYXRpdmVUYXJnZXRDaGFuZ2VkIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoaGFzTGF5b3V0Q2hhbmdlZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0YXJnZXRDaGFuZ2VkIHx8ICF0aGlzLmN1cnJlbnRBbmltYXRpb24pKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVzdW1lRnJvbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdW1pbmdGcm9tID0gdGhpcy5yZXN1bWVGcm9tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdW1pbmdGcm9tLnJlc3VtaW5nRnJvbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QW5pbWF0aW9uT3JpZ2luKGRlbHRhLCBoYXNPbmx5UmVsYXRpdmVUYXJnZXRDaGFuZ2VkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvbk9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZ2V0VmFsdWVUcmFuc2l0aW9uKGxheW91dFRyYW5zaXRpb24sIFwibGF5b3V0XCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUGxheTogb25MYXlvdXRBbmltYXRpb25TdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiBvbkxheW91dEFuaW1hdGlvbkNvbXBsZXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2aXN1YWxFbGVtZW50LnNob3VsZFJlZHVjZU1vdGlvbiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5sYXlvdXRSb290KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uT3B0aW9ucy5kZWxheSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uT3B0aW9ucy50eXBlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0QW5pbWF0aW9uKGFuaW1hdGlvbk9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBJZiB0aGUgbGF5b3V0IGhhc24ndCBjaGFuZ2VkIGFuZCB3ZSBoYXZlIGFuIGFuaW1hdGlvbiB0aGF0IGhhc24ndCBzdGFydGVkIHlldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIGZpbmlzaCBpdCBpbW1lZGlhdGVseS4gT3RoZXJ3aXNlIGl0IHdpbGwgYmUgYW5pbWF0aW5nIGZyb20gYSBsb2NhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICogdGhhdCB3YXMgcHJvYmFibHkgbmV2ZXIgY29tbWl0ZWQgdG8gc2NyZWVuIGFuZCBsb29rIGxpa2UgYSBqdW1weSBib3guXG4gICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGFzTGF5b3V0Q2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaEFuaW1hdGlvbih0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzTGVhZCgpICYmIHRoaXMub3B0aW9ucy5vbkV4aXRDb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5vbkV4aXRDb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0TGF5b3V0ID0gbmV3TGF5b3V0O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHVubW91bnQoKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMubGF5b3V0SWQgJiYgdGhpcy53aWxsVXBkYXRlKCk7XG4gICAgICAgICAgICB0aGlzLnJvb3Qubm9kZXMucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgY29uc3Qgc3RhY2sgPSB0aGlzLmdldFN0YWNrKCk7XG4gICAgICAgICAgICBzdGFjayAmJiBzdGFjay5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICB0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5jaGlsZHJlbi5kZWxldGUodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FuY2VsRnJhbWUodGhpcy51cGRhdGVQcm9qZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBvbmx5IG9uIHRoZSByb290XG4gICAgICAgIGJsb2NrVXBkYXRlKCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVNYW51YWxseUJsb2NrZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHVuYmxvY2tVcGRhdGUoKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU1hbnVhbGx5QmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlzVXBkYXRlQmxvY2tlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZU1hbnVhbGx5QmxvY2tlZCB8fCB0aGlzLnVwZGF0ZUJsb2NrZWRCeVJlc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBpc1RyZWVBbmltYXRpb25CbG9ja2VkKCkge1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLmlzQW5pbWF0aW9uQmxvY2tlZCB8fFxuICAgICAgICAgICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5pc1RyZWVBbmltYXRpb25CbG9ja2VkKCkpIHx8XG4gICAgICAgICAgICAgICAgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIC8vIE5vdGU6IGN1cnJlbnRseSBvbmx5IHJ1bm5pbmcgb24gcm9vdCBub2RlXG4gICAgICAgIHN0YXJ0VXBkYXRlKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNVcGRhdGVCbG9ja2VkKCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5pc1VwZGF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubm9kZXMgJiYgdGhpcy5ub2Rlcy5mb3JFYWNoKHJlc2V0Um90YXRpb24pO1xuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25JZCsrO1xuICAgICAgICB9XG4gICAgICAgIGdldFRyYW5zZm9ybVRlbXBsYXRlKCkge1xuICAgICAgICAgICAgY29uc3QgeyB2aXN1YWxFbGVtZW50IH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgICAgICByZXR1cm4gdmlzdWFsRWxlbWVudCAmJiB2aXN1YWxFbGVtZW50LmdldFByb3BzKCkudHJhbnNmb3JtVGVtcGxhdGU7XG4gICAgICAgIH1cbiAgICAgICAgd2lsbFVwZGF0ZShzaG91bGROb3RpZnlMaXN0ZW5lcnMgPSB0cnVlKSB7XG4gICAgICAgICAgICB0aGlzLnJvb3QuaGFzVHJlZUFuaW1hdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLnJvb3QuaXNVcGRhdGVCbG9ja2VkKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMub25FeGl0Q29tcGxldGUgJiYgdGhpcy5vcHRpb25zLm9uRXhpdENvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgIXRoaXMucm9vdC5pc1VwZGF0aW5nICYmIHRoaXMucm9vdC5zdGFydFVwZGF0ZSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNMYXlvdXREaXJ0eSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmlzTGF5b3V0RGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gdGhpcy5wYXRoW2ldO1xuICAgICAgICAgICAgICAgIG5vZGUuc2hvdWxkUmVzZXRUcmFuc2Zvcm0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIG5vZGUudXBkYXRlU2Nyb2xsKFwic25hcHNob3RcIik7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUub3B0aW9ucy5sYXlvdXRSb290KSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUud2lsbFVwZGF0ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyBsYXlvdXRJZCwgbGF5b3V0IH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgICAgICBpZiAobGF5b3V0SWQgPT09IHVuZGVmaW5lZCAmJiAhbGF5b3V0KVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybVRlbXBsYXRlID0gdGhpcy5nZXRUcmFuc2Zvcm1UZW1wbGF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5wcmV2VHJhbnNmb3JtVGVtcGxhdGVWYWx1ZSA9IHRyYW5zZm9ybVRlbXBsYXRlXG4gICAgICAgICAgICAgICAgPyB0cmFuc2Zvcm1UZW1wbGF0ZSh0aGlzLmxhdGVzdFZhbHVlcywgXCJcIilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU25hcHNob3QoKTtcbiAgICAgICAgICAgIHNob3VsZE5vdGlmeUxpc3RlbmVycyAmJiB0aGlzLm5vdGlmeUxpc3RlbmVycyhcIndpbGxVcGRhdGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlKCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZVdhc0Jsb2NrZWQgPSB0aGlzLmlzVXBkYXRlQmxvY2tlZCgpO1xuICAgICAgICAgICAgLy8gV2hlbiBkb2luZyBhbiBpbnN0YW50IHRyYW5zaXRpb24sIHdlIHNraXAgdGhlIGxheW91dCB1cGRhdGUsXG4gICAgICAgICAgICAvLyBidXQgc2hvdWxkIHN0aWxsIGNsZWFuIHVwIHRoZSBtZWFzdXJlbWVudHMgc28gdGhhdCB0aGUgbmV4dFxuICAgICAgICAgICAgLy8gc25hcHNob3QgY291bGQgYmUgdGFrZW4gY29ycmVjdGx5LlxuICAgICAgICAgICAgaWYgKHVwZGF0ZVdhc0Jsb2NrZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuYmxvY2tVcGRhdGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQWxsU25hcHNob3RzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKGNsZWFyTWVhc3VyZW1lbnRzKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNVcGRhdGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMubm9kZXMuZm9yRWFjaChjbGVhcklzTGF5b3V0RGlydHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pc1VwZGF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdyaXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMubm9kZXMuZm9yRWFjaChyZXNldFRyYW5zZm9ybVN0eWxlKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmVhZCA9PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLy8gVXBkYXRlIGxheW91dCBtZWFzdXJlbWVudHMgb2YgdXBkYXRlZCBjaGlsZHJlblxuICAgICAgICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKHVwZGF0ZUxheW91dCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdyaXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8vIE5vdGlmeSBsaXN0ZW5lcnMgdGhhdCB0aGUgbGF5b3V0IGlzIHVwZGF0ZWRcbiAgICAgICAgICAgIHRoaXMubm9kZXMuZm9yRWFjaChub3RpZnlMYXlvdXRVcGRhdGUpO1xuICAgICAgICAgICAgdGhpcy5jbGVhckFsbFNuYXBzaG90cygpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBNYW51YWxseSBmbHVzaCBhbnkgcGVuZGluZyB1cGRhdGVzLiBJZGVhbGx5XG4gICAgICAgICAgICAgKiB3ZSBjb3VsZCBsZWF2ZSB0aGlzIHRvIHRoZSBmb2xsb3dpbmcgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGJ1dCB0aGlzIHNlZW1zXG4gICAgICAgICAgICAgKiB0byBsZWF2ZSBhIGZsYXNoIG9mIGluY29ycmVjdGx5IHN0eWxlZCBjb250ZW50LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCBub3cgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgICAgIGZyYW1lRGF0YS5kZWx0YSA9IGNsYW1wKDAsIDEwMDAgLyA2MCwgbm93IC0gZnJhbWVEYXRhLnRpbWVzdGFtcCk7XG4gICAgICAgICAgICBmcmFtZURhdGEudGltZXN0YW1wID0gbm93O1xuICAgICAgICAgICAgZnJhbWVEYXRhLmlzUHJvY2Vzc2luZyA9IHRydWU7XG4gICAgICAgICAgICBzdGVwcy51cGRhdGUucHJvY2VzcyhmcmFtZURhdGEpO1xuICAgICAgICAgICAgc3RlcHMucHJlUmVuZGVyLnByb2Nlc3MoZnJhbWVEYXRhKTtcbiAgICAgICAgICAgIHN0ZXBzLnJlbmRlci5wcm9jZXNzKGZyYW1lRGF0YSk7XG4gICAgICAgICAgICBmcmFtZURhdGEuaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZGlkVXBkYXRlKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnVwZGF0ZVNjaGVkdWxlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB0aGlzLnVwZGF0ZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjbGVhckFsbFNuYXBzaG90cygpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZXMuZm9yRWFjaChjbGVhclNuYXBzaG90KTtcbiAgICAgICAgICAgIHRoaXMuc2hhcmVkTm9kZXMuZm9yRWFjaChyZW1vdmVMZWFkU25hcHNob3RzKTtcbiAgICAgICAgfVxuICAgICAgICBzY2hlZHVsZVVwZGF0ZVByb2plY3Rpb24oKSB7XG4gICAgICAgICAgICBmcmFtZS5wcmVSZW5kZXIodGhpcy51cGRhdGVQcm9qZWN0aW9uLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgc2NoZWR1bGVDaGVja0FmdGVyVW5tb3VudCgpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhlIHVubW91bnRpbmcgbm9kZSBpcyBpbiBhIGxheW91dEdyb3VwIGFuZCBkaWQgdHJpZ2dlciBhIHdpbGxVcGRhdGUsXG4gICAgICAgICAgICAgKiB3ZSBtYW51YWxseSBjYWxsIGRpZFVwZGF0ZSB0byBnaXZlIGEgY2hhbmNlIHRvIHRoZSBzaWJsaW5ncyB0byBhbmltYXRlLlxuICAgICAgICAgICAgICogT3RoZXJ3aXNlLCBjbGVhbnVwIGFsbCBzbmFwc2hvdHMgdG8gcHJldmVudHMgZnV0dXJlIG5vZGVzIGZyb20gcmV1c2luZyB0aGVtLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmcmFtZS5wb3N0UmVuZGVyKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0xheW91dERpcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdC5kaWRVcGRhdGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdC5jaGVja1VwZGF0ZUZhaWxlZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVcGRhdGUgbWVhc3VyZW1lbnRzXG4gICAgICAgICAqL1xuICAgICAgICB1cGRhdGVTbmFwc2hvdCgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNuYXBzaG90IHx8ICF0aGlzLmluc3RhbmNlKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuc25hcHNob3QgPSB0aGlzLm1lYXN1cmUoKTtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVMYXlvdXQoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaW5zdGFuY2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgLy8gVE9ETzogSW5jb3Jwb3JhdGUgaW50byBhIGZvcndhcmRlZCBzY3JvbGwgb2Zmc2V0XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNjcm9sbCgpO1xuICAgICAgICAgICAgaWYgKCEodGhpcy5vcHRpb25zLmFsd2F5c01lYXN1cmVMYXlvdXQgJiYgdGhpcy5pc0xlYWQoKSkgJiZcbiAgICAgICAgICAgICAgICAhdGhpcy5pc0xheW91dERpcnR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXaGVuIGEgbm9kZSBpcyBtb3VudGVkLCBpdCBzaW1wbHkgcmVzdW1lcyBmcm9tIHRoZSBwcmV2TGVhZCdzXG4gICAgICAgICAgICAgKiBzbmFwc2hvdCBpbnN0ZWFkIG9mIHRha2luZyBhIG5ldyBvbmUsIGJ1dCB0aGUgYW5jZXN0b3JzIHNjcm9sbFxuICAgICAgICAgICAgICogbWlnaHQgaGF2ZSB1cGRhdGVkIHdoaWxlIHRoZSBwcmV2TGVhZCBpcyB1bm1vdW50ZWQuIFdlIG5lZWQgdG9cbiAgICAgICAgICAgICAqIHVwZGF0ZSB0aGUgc2Nyb2xsIGFnYWluIHRvIG1ha2Ugc3VyZSB0aGUgbGF5b3V0IHdlIG1lYXN1cmUgaXNcbiAgICAgICAgICAgICAqIHVwIHRvIGRhdGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3VtZUZyb20gJiYgIXRoaXMucmVzdW1lRnJvbS5pbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnBhdGhbaV07XG4gICAgICAgICAgICAgICAgICAgIG5vZGUudXBkYXRlU2Nyb2xsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJldkxheW91dCA9IHRoaXMubGF5b3V0O1xuICAgICAgICAgICAgdGhpcy5sYXlvdXQgPSB0aGlzLm1lYXN1cmUoZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5sYXlvdXRDb3JyZWN0ZWQgPSBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgIHRoaXMuaXNMYXlvdXREaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5wcm9qZWN0aW9uRGVsdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLm5vdGlmeUxpc3RlbmVycyhcIm1lYXN1cmVcIiwgdGhpcy5sYXlvdXQubGF5b3V0Qm94KTtcbiAgICAgICAgICAgIGNvbnN0IHsgdmlzdWFsRWxlbWVudCB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgdmlzdWFsRWxlbWVudCAmJlxuICAgICAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQubm90aWZ5KFwiTGF5b3V0TWVhc3VyZVwiLCB0aGlzLmxheW91dC5sYXlvdXRCb3gsIHByZXZMYXlvdXQgPyBwcmV2TGF5b3V0LmxheW91dEJveCA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlU2Nyb2xsKHBoYXNlID0gXCJtZWFzdXJlXCIpIHtcbiAgICAgICAgICAgIGxldCBuZWVkc01lYXN1cmVtZW50ID0gQm9vbGVhbih0aGlzLm9wdGlvbnMubGF5b3V0U2Nyb2xsICYmIHRoaXMuaW5zdGFuY2UpO1xuICAgICAgICAgICAgaWYgKHRoaXMuc2Nyb2xsICYmXG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGwuYW5pbWF0aW9uSWQgPT09IHRoaXMucm9vdC5hbmltYXRpb25JZCAmJlxuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsLnBoYXNlID09PSBwaGFzZSkge1xuICAgICAgICAgICAgICAgIG5lZWRzTWVhc3VyZW1lbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZWVkc01lYXN1cmVtZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGwgPSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbklkOiB0aGlzLnJvb3QuYW5pbWF0aW9uSWQsXG4gICAgICAgICAgICAgICAgICAgIHBoYXNlLFxuICAgICAgICAgICAgICAgICAgICBpc1Jvb3Q6IGNoZWNrSXNTY3JvbGxSb290KHRoaXMuaW5zdGFuY2UpLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IG1lYXN1cmVTY3JvbGwodGhpcy5pbnN0YW5jZSksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXNldFRyYW5zZm9ybSgpIHtcbiAgICAgICAgICAgIGlmICghcmVzZXRUcmFuc2Zvcm0pXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgaXNSZXNldFJlcXVlc3RlZCA9IHRoaXMuaXNMYXlvdXREaXJ0eSB8fCB0aGlzLnNob3VsZFJlc2V0VHJhbnNmb3JtO1xuICAgICAgICAgICAgY29uc3QgaGFzUHJvamVjdGlvbiA9IHRoaXMucHJvamVjdGlvbkRlbHRhICYmICFpc0RlbHRhWmVybyh0aGlzLnByb2plY3Rpb25EZWx0YSk7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1UZW1wbGF0ZSA9IHRoaXMuZ2V0VHJhbnNmb3JtVGVtcGxhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybVRlbXBsYXRlVmFsdWUgPSB0cmFuc2Zvcm1UZW1wbGF0ZVxuICAgICAgICAgICAgICAgID8gdHJhbnNmb3JtVGVtcGxhdGUodGhpcy5sYXRlc3RWYWx1ZXMsIFwiXCIpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1UZW1wbGF0ZUhhc0NoYW5nZWQgPSB0cmFuc2Zvcm1UZW1wbGF0ZVZhbHVlICE9PSB0aGlzLnByZXZUcmFuc2Zvcm1UZW1wbGF0ZVZhbHVlO1xuICAgICAgICAgICAgaWYgKGlzUmVzZXRSZXF1ZXN0ZWQgJiZcbiAgICAgICAgICAgICAgICAoaGFzUHJvamVjdGlvbiB8fFxuICAgICAgICAgICAgICAgICAgICBoYXNUcmFuc2Zvcm0odGhpcy5sYXRlc3RWYWx1ZXMpIHx8XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybVRlbXBsYXRlSGFzQ2hhbmdlZCkpIHtcbiAgICAgICAgICAgICAgICByZXNldFRyYW5zZm9ybSh0aGlzLmluc3RhbmNlLCB0cmFuc2Zvcm1UZW1wbGF0ZVZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3VsZFJlc2V0VHJhbnNmb3JtID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZVJlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1lYXN1cmUocmVtb3ZlVHJhbnNmb3JtID0gdHJ1ZSkge1xuICAgICAgICAgICAgY29uc3QgcGFnZUJveCA9IHRoaXMubWVhc3VyZVBhZ2VCb3goKTtcbiAgICAgICAgICAgIGxldCBsYXlvdXRCb3ggPSB0aGlzLnJlbW92ZUVsZW1lbnRTY3JvbGwocGFnZUJveCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE1lYXN1cmVtZW50cyB0YWtlbiBkdXJpbmcgdGhlIHByZS1yZW5kZXIgc3RhZ2VcbiAgICAgICAgICAgICAqIHN0aWxsIGhhdmUgdHJhbnNmb3JtcyBhcHBsaWVkIHNvIHdlIHJlbW92ZSB0aGVtXG4gICAgICAgICAgICAgKiB2aWEgY2FsY3VsYXRpb24uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChyZW1vdmVUcmFuc2Zvcm0pIHtcbiAgICAgICAgICAgICAgICBsYXlvdXRCb3ggPSB0aGlzLnJlbW92ZVRyYW5zZm9ybShsYXlvdXRCb3gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcm91bmRCb3gobGF5b3V0Qm94KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uSWQ6IHRoaXMucm9vdC5hbmltYXRpb25JZCxcbiAgICAgICAgICAgICAgICBtZWFzdXJlZEJveDogcGFnZUJveCxcbiAgICAgICAgICAgICAgICBsYXlvdXRCb3gsXG4gICAgICAgICAgICAgICAgbGF0ZXN0VmFsdWVzOiB7fSxcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHRoaXMuaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIG1lYXN1cmVQYWdlQm94KCkge1xuICAgICAgICAgICAgY29uc3QgeyB2aXN1YWxFbGVtZW50IH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoIXZpc3VhbEVsZW1lbnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgY29uc3QgYm94ID0gdmlzdWFsRWxlbWVudC5tZWFzdXJlVmlld3BvcnRCb3goKTtcbiAgICAgICAgICAgIC8vIFJlbW92ZSB2aWV3cG9ydCBzY3JvbGwgdG8gZ2l2ZSBwYWdlLXJlbGF0aXZlIGNvb3JkaW5hdGVzXG4gICAgICAgICAgICBjb25zdCB7IHNjcm9sbCB9ID0gdGhpcy5yb290O1xuICAgICAgICAgICAgaWYgKHNjcm9sbCkge1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZUF4aXMoYm94LngsIHNjcm9sbC5vZmZzZXQueCk7XG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlQXhpcyhib3gueSwgc2Nyb2xsLm9mZnNldC55KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBib3g7XG4gICAgICAgIH1cbiAgICAgICAgcmVtb3ZlRWxlbWVudFNjcm9sbChib3gpIHtcbiAgICAgICAgICAgIGNvbnN0IGJveFdpdGhvdXRTY3JvbGwgPSBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgIGNvcHlCb3hJbnRvKGJveFdpdGhvdXRTY3JvbGwsIGJveCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFBlcmZvcm1hbmNlIFRPRE86IEtlZXAgYSBjdW11bGF0aXZlIHNjcm9sbCBvZmZzZXQgZG93biB0aGUgdHJlZVxuICAgICAgICAgICAgICogcmF0aGVyIHRoYW4gbG9vcCBiYWNrIHVwIHRoZSBwYXRoLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGF0aC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnBhdGhbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgeyBzY3JvbGwsIG9wdGlvbnMgfSA9IG5vZGU7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUgIT09IHRoaXMucm9vdCAmJiBzY3JvbGwgJiYgb3B0aW9ucy5sYXlvdXRTY3JvbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIElmIHRoaXMgaXMgYSBuZXcgc2Nyb2xsIHJvb3QsIHdlIHdhbnQgdG8gcmVtb3ZlIGFsbCBwcmV2aW91cyBzY3JvbGxzXG4gICAgICAgICAgICAgICAgICAgICAqIGZyb20gdGhlIHZpZXdwb3J0IGJveC5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGlmIChzY3JvbGwuaXNSb290KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3B5Qm94SW50byhib3hXaXRob3V0U2Nyb2xsLCBib3gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBzY3JvbGw6IHJvb3RTY3JvbGwgfSA9IHRoaXMucm9vdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICogVW5kbyB0aGUgYXBwbGljYXRpb24gb2YgcGFnZSBzY3JvbGwgdGhhdCB3YXMgb3JpZ2luYWxseSBhZGRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICogdG8gdGhlIG1lYXN1cmVkIGJvdW5kaW5nIGJveC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvb3RTY3JvbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVBeGlzKGJveFdpdGhvdXRTY3JvbGwueCwgLXJvb3RTY3JvbGwub2Zmc2V0LngpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZUF4aXMoYm94V2l0aG91dFNjcm9sbC55LCAtcm9vdFNjcm9sbC5vZmZzZXQueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlQXhpcyhib3hXaXRob3V0U2Nyb2xsLngsIHNjcm9sbC5vZmZzZXQueCk7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZUF4aXMoYm94V2l0aG91dFNjcm9sbC55LCBzY3JvbGwub2Zmc2V0LnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBib3hXaXRob3V0U2Nyb2xsO1xuICAgICAgICB9XG4gICAgICAgIGFwcGx5VHJhbnNmb3JtKGJveCwgdHJhbnNmb3JtT25seSA9IGZhbHNlKSB7XG4gICAgICAgICAgICBjb25zdCB3aXRoVHJhbnNmb3JtcyA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgY29weUJveEludG8od2l0aFRyYW5zZm9ybXMsIGJveCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGF0aC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnBhdGhbaV07XG4gICAgICAgICAgICAgICAgaWYgKCF0cmFuc2Zvcm1Pbmx5ICYmXG4gICAgICAgICAgICAgICAgICAgIG5vZGUub3B0aW9ucy5sYXlvdXRTY3JvbGwgJiZcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5zY3JvbGwgJiZcbiAgICAgICAgICAgICAgICAgICAgbm9kZSAhPT0gbm9kZS5yb290KSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybUJveCh3aXRoVHJhbnNmb3Jtcywge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogLW5vZGUuc2Nyb2xsLm9mZnNldC54LFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogLW5vZGUuc2Nyb2xsLm9mZnNldC55LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNUcmFuc2Zvcm0obm9kZS5sYXRlc3RWYWx1ZXMpKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1Cb3god2l0aFRyYW5zZm9ybXMsIG5vZGUubGF0ZXN0VmFsdWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYXNUcmFuc2Zvcm0odGhpcy5sYXRlc3RWYWx1ZXMpKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtQm94KHdpdGhUcmFuc2Zvcm1zLCB0aGlzLmxhdGVzdFZhbHVlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gd2l0aFRyYW5zZm9ybXM7XG4gICAgICAgIH1cbiAgICAgICAgcmVtb3ZlVHJhbnNmb3JtKGJveCkge1xuICAgICAgICAgICAgY29uc3QgYm94V2l0aG91dFRyYW5zZm9ybSA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgY29weUJveEludG8oYm94V2l0aG91dFRyYW5zZm9ybSwgYm94KTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMucGF0aFtpXTtcbiAgICAgICAgICAgICAgICBpZiAoIW5vZGUuaW5zdGFuY2UpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGlmICghaGFzVHJhbnNmb3JtKG5vZGUubGF0ZXN0VmFsdWVzKSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgaGFzU2NhbGUobm9kZS5sYXRlc3RWYWx1ZXMpICYmIG5vZGUudXBkYXRlU25hcHNob3QoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2VCb3ggPSBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlQm94ID0gbm9kZS5tZWFzdXJlUGFnZUJveCgpO1xuICAgICAgICAgICAgICAgIGNvcHlCb3hJbnRvKHNvdXJjZUJveCwgbm9kZUJveCk7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQm94VHJhbnNmb3Jtcyhib3hXaXRob3V0VHJhbnNmb3JtLCBub2RlLmxhdGVzdFZhbHVlcywgbm9kZS5zbmFwc2hvdCA/IG5vZGUuc25hcHNob3QubGF5b3V0Qm94IDogdW5kZWZpbmVkLCBzb3VyY2VCb3gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhc1RyYW5zZm9ybSh0aGlzLmxhdGVzdFZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVCb3hUcmFuc2Zvcm1zKGJveFdpdGhvdXRUcmFuc2Zvcm0sIHRoaXMubGF0ZXN0VmFsdWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBib3hXaXRob3V0VHJhbnNmb3JtO1xuICAgICAgICB9XG4gICAgICAgIHNldFRhcmdldERlbHRhKGRlbHRhKSB7XG4gICAgICAgICAgICB0aGlzLnRhcmdldERlbHRhID0gZGVsdGE7XG4gICAgICAgICAgICB0aGlzLnJvb3Quc2NoZWR1bGVVcGRhdGVQcm9qZWN0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLmlzUHJvamVjdGlvbkRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBjcm9zc2ZhZGU6IG9wdGlvbnMuY3Jvc3NmYWRlICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNyb3NzZmFkZSA6IHRydWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNsZWFyTWVhc3VyZW1lbnRzKCkge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGwgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLmxheW91dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuc25hcHNob3QgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLnByZXZUcmFuc2Zvcm1UZW1wbGF0ZVZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy50YXJnZXREZWx0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5pc0xheW91dERpcnR5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yY2VSZWxhdGl2ZVBhcmVudFRvUmVzb2x2ZVRhcmdldCgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5yZWxhdGl2ZVBhcmVudClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoZSBwYXJlbnQgdGFyZ2V0IGlzbid0IHVwLXRvLWRhdGUsIGZvcmNlIGl0IHRvIHVwZGF0ZS5cbiAgICAgICAgICAgICAqIFRoaXMgaXMgYW4gdW5mb3J0dW5hdGUgZGUtb3B0aW1pc2F0aW9uIGFzIGl0IG1lYW5zIGFueSB1cGRhdGluZyByZWxhdGl2ZVxuICAgICAgICAgICAgICogcHJvamVjdGlvbiB3aWxsIGNhdXNlIGFsbCB0aGUgcmVsYXRpdmUgcGFyZW50cyB0byByZWNhbGN1bGF0ZSBiYWNrXG4gICAgICAgICAgICAgKiB1cCB0aGUgdHJlZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHRoaXMucmVsYXRpdmVQYXJlbnQucmVzb2x2ZWRSZWxhdGl2ZVRhcmdldEF0ICE9PVxuICAgICAgICAgICAgICAgIGZyYW1lRGF0YS50aW1lc3RhbXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aXZlUGFyZW50LnJlc29sdmVUYXJnZXREZWx0YSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlVGFyZ2V0RGVsdGEoZm9yY2VSZWNhbGN1bGF0aW9uID0gZmFsc2UpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogT25jZSB0aGUgZGlydHkgc3RhdHVzIG9mIG5vZGVzIGhhcyBiZWVuIHNwcmVhZCB0aHJvdWdoIHRoZSB0cmVlLCB3ZSBhbHNvXG4gICAgICAgICAgICAgKiBuZWVkIHRvIGNoZWNrIGlmIHdlIGhhdmUgYSBzaGFyZWQgbm9kZSBvZiBhIGRpZmZlcmVudCBkZXB0aCB0aGF0IGhhcyBpdHNlbGZcbiAgICAgICAgICAgICAqIGJlZW4gZGlydGllZC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgbGVhZCA9IHRoaXMuZ2V0TGVhZCgpO1xuICAgICAgICAgICAgdGhpcy5pc1Byb2plY3Rpb25EaXJ0eSB8fCAodGhpcy5pc1Byb2plY3Rpb25EaXJ0eSA9IGxlYWQuaXNQcm9qZWN0aW9uRGlydHkpO1xuICAgICAgICAgICAgdGhpcy5pc1RyYW5zZm9ybURpcnR5IHx8ICh0aGlzLmlzVHJhbnNmb3JtRGlydHkgPSBsZWFkLmlzVHJhbnNmb3JtRGlydHkpO1xuICAgICAgICAgICAgdGhpcy5pc1NoYXJlZFByb2plY3Rpb25EaXJ0eSB8fCAodGhpcy5pc1NoYXJlZFByb2plY3Rpb25EaXJ0eSA9IGxlYWQuaXNTaGFyZWRQcm9qZWN0aW9uRGlydHkpO1xuICAgICAgICAgICAgY29uc3QgaXNTaGFyZWQgPSBCb29sZWFuKHRoaXMucmVzdW1pbmdGcm9tKSB8fCB0aGlzICE9PSBsZWFkO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXZSBkb24ndCB1c2UgdHJhbnNmb3JtIGZvciB0aGlzIHN0ZXAgb2YgcHJvY2Vzc2luZyBzbyB3ZSBkb24ndFxuICAgICAgICAgICAgICogbmVlZCB0byBjaGVjayB3aGV0aGVyIGFueSBub2RlcyBoYXZlIGNoYW5nZWQgdHJhbnNmb3JtLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCBjYW5Ta2lwID0gIShmb3JjZVJlY2FsY3VsYXRpb24gfHxcbiAgICAgICAgICAgICAgICAoaXNTaGFyZWQgJiYgdGhpcy5pc1NoYXJlZFByb2plY3Rpb25EaXJ0eSkgfHxcbiAgICAgICAgICAgICAgICB0aGlzLmlzUHJvamVjdGlvbkRpcnR5IHx8XG4gICAgICAgICAgICAgICAgKChfYSA9IHRoaXMucGFyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaXNQcm9qZWN0aW9uRGlydHkpIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5hdHRlbXB0VG9SZXNvbHZlUmVsYXRpdmVUYXJnZXQpO1xuICAgICAgICAgICAgaWYgKGNhblNraXApXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgeyBsYXlvdXQsIGxheW91dElkIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlIGhhdmUgbm8gbGF5b3V0LCB3ZSBjYW4ndCBwZXJmb3JtIHByb2plY3Rpb24sIHNvIGVhcmx5IHJldHVyblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoIXRoaXMubGF5b3V0IHx8ICEobGF5b3V0IHx8IGxheW91dElkKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLnJlc29sdmVkUmVsYXRpdmVUYXJnZXRBdCA9IGZyYW1lRGF0YS50aW1lc3RhbXA7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlIGRvbid0IGhhdmUgYSB0YXJnZXREZWx0YSBidXQgZG8gaGF2ZSBhIGxheW91dCwgd2UgY2FuIGF0dGVtcHQgdG8gcmVzb2x2ZVxuICAgICAgICAgICAgICogYSByZWxhdGl2ZVBhcmVudC4gVGhpcyB3aWxsIGFsbG93IGEgY29tcG9uZW50IHRvIHBlcmZvcm0gc2NhbGUgY29ycmVjdGlvblxuICAgICAgICAgICAgICogZXZlbiBpZiBubyBhbmltYXRpb24gaGFzIHN0YXJ0ZWQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8vIFRPRE8gSWYgdGhpcyBpcyB1bnN1Y2Nlc3NmdWwgdGhpcyBjdXJyZW50bHkgaGFwcGVucyBldmVyeSBmcmFtZVxuICAgICAgICAgICAgaWYgKCF0aGlzLnRhcmdldERlbHRhICYmICF0aGlzLnJlbGF0aXZlVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogVGhpcyBpcyBhIHNlbWktcmVwZXRpdGlvbiBvZiBmdXJ0aGVyIGRvd24gdGhpcyBmdW5jdGlvbiwgbWFrZSBEUllcbiAgICAgICAgICAgICAgICBjb25zdCByZWxhdGl2ZVBhcmVudCA9IHRoaXMuZ2V0Q2xvc2VzdFByb2plY3RpbmdQYXJlbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAocmVsYXRpdmVQYXJlbnQgJiZcbiAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVQYXJlbnQubGF5b3V0ICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uUHJvZ3Jlc3MgIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZVBhcmVudCA9IHJlbGF0aXZlUGFyZW50O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcmNlUmVsYXRpdmVQYXJlbnRUb1Jlc29sdmVUYXJnZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZVRhcmdldCA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aXZlVGFyZ2V0T3JpZ2luID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICAgICAgICAgIGNhbGNSZWxhdGl2ZVBvc2l0aW9uKHRoaXMucmVsYXRpdmVUYXJnZXRPcmlnaW4sIHRoaXMubGF5b3V0LmxheW91dEJveCwgcmVsYXRpdmVQYXJlbnQubGF5b3V0LmxheW91dEJveCk7XG4gICAgICAgICAgICAgICAgICAgIGNvcHlCb3hJbnRvKHRoaXMucmVsYXRpdmVUYXJnZXQsIHRoaXMucmVsYXRpdmVUYXJnZXRPcmlnaW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZVBhcmVudCA9IHRoaXMucmVsYXRpdmVUYXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB3ZSBoYXZlIG5vIHJlbGF0aXZlIHRhcmdldCBvciBubyB0YXJnZXQgZGVsdGEgb3VyIHRhcmdldCBpc24ndCB2YWxpZFxuICAgICAgICAgICAgICogZm9yIHRoaXMgZnJhbWUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICghdGhpcy5yZWxhdGl2ZVRhcmdldCAmJiAhdGhpcy50YXJnZXREZWx0YSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIExhenktaW5pdCB0YXJnZXQgZGF0YSBzdHJ1Y3R1cmVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKCF0aGlzLnRhcmdldCkge1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXRXaXRoVHJhbnNmb3JtcyA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB3ZSd2ZSBnb3QgYSByZWxhdGl2ZSBib3ggZm9yIHRoaXMgY29tcG9uZW50LCByZXNvbHZlIGl0IGludG8gYSB0YXJnZXQgcmVsYXRpdmUgdG8gdGhlIHBhcmVudC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHRoaXMucmVsYXRpdmVUYXJnZXQgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aXZlVGFyZ2V0T3JpZ2luICYmXG4gICAgICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZVBhcmVudCAmJlxuICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmVQYXJlbnQudGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JjZVJlbGF0aXZlUGFyZW50VG9SZXNvbHZlVGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgY2FsY1JlbGF0aXZlQm94KHRoaXMudGFyZ2V0LCB0aGlzLnJlbGF0aXZlVGFyZ2V0LCB0aGlzLnJlbGF0aXZlUGFyZW50LnRhcmdldCk7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSWYgd2UndmUgb25seSBnb3QgYSB0YXJnZXREZWx0YSwgcmVzb2x2ZSBpdCBpbnRvIGEgdGFyZ2V0XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnRhcmdldERlbHRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKEJvb2xlYW4odGhpcy5yZXN1bWluZ0Zyb20pKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IFRoaXMgaXMgY3JlYXRpbmcgYSBuZXcgb2JqZWN0IGV2ZXJ5IGZyYW1lXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gdGhpcy5hcHBseVRyYW5zZm9ybSh0aGlzLmxheW91dC5sYXlvdXRCb3gpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29weUJveEludG8odGhpcy50YXJnZXQsIHRoaXMubGF5b3V0LmxheW91dEJveCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFwcGx5Qm94RGVsdGEodGhpcy50YXJnZXQsIHRoaXMudGFyZ2V0RGVsdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSWYgbm8gdGFyZ2V0LCB1c2Ugb3duIGxheW91dCBhcyB0YXJnZXRcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBjb3B5Qm94SW50byh0aGlzLnRhcmdldCwgdGhpcy5sYXlvdXQubGF5b3V0Qm94KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgd2UndmUgYmVlbiB0b2xkIHRvIGF0dGVtcHQgdG8gcmVzb2x2ZSBhIHJlbGF0aXZlIHRhcmdldCwgZG8gc28uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0aGlzLmF0dGVtcHRUb1Jlc29sdmVSZWxhdGl2ZVRhcmdldCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXR0ZW1wdFRvUmVzb2x2ZVJlbGF0aXZlVGFyZ2V0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVsYXRpdmVQYXJlbnQgPSB0aGlzLmdldENsb3Nlc3RQcm9qZWN0aW5nUGFyZW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlbGF0aXZlUGFyZW50ICYmXG4gICAgICAgICAgICAgICAgICAgIEJvb2xlYW4ocmVsYXRpdmVQYXJlbnQucmVzdW1pbmdGcm9tKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgIEJvb2xlYW4odGhpcy5yZXN1bWluZ0Zyb20pICYmXG4gICAgICAgICAgICAgICAgICAgICFyZWxhdGl2ZVBhcmVudC5vcHRpb25zLmxheW91dFNjcm9sbCAmJlxuICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZVBhcmVudC50YXJnZXQgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25Qcm9ncmVzcyAhPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aXZlUGFyZW50ID0gcmVsYXRpdmVQYXJlbnQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VSZWxhdGl2ZVBhcmVudFRvUmVzb2x2ZVRhcmdldCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aXZlVGFyZ2V0ID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmVUYXJnZXRPcmlnaW4gPSBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsY1JlbGF0aXZlUG9zaXRpb24odGhpcy5yZWxhdGl2ZVRhcmdldE9yaWdpbiwgdGhpcy50YXJnZXQsIHJlbGF0aXZlUGFyZW50LnRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIGNvcHlCb3hJbnRvKHRoaXMucmVsYXRpdmVUYXJnZXQsIHRoaXMucmVsYXRpdmVUYXJnZXRPcmlnaW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZVBhcmVudCA9IHRoaXMucmVsYXRpdmVUYXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJbmNyZWFzZSBkZWJ1ZyBjb3VudGVyIGZvciByZXNvbHZlZCB0YXJnZXQgZGVsdGFzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHByb2plY3Rpb25GcmFtZURhdGEucmVzb2x2ZWRUYXJnZXREZWx0YXMrKztcbiAgICAgICAgfVxuICAgICAgICBnZXRDbG9zZXN0UHJvamVjdGluZ1BhcmVudCgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5wYXJlbnQgfHxcbiAgICAgICAgICAgICAgICBoYXNTY2FsZSh0aGlzLnBhcmVudC5sYXRlc3RWYWx1ZXMpIHx8XG4gICAgICAgICAgICAgICAgaGFzMkRUcmFuc2xhdGUodGhpcy5wYXJlbnQubGF0ZXN0VmFsdWVzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5wYXJlbnQuaXNQcm9qZWN0aW5nKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuZ2V0Q2xvc2VzdFByb2plY3RpbmdQYXJlbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpc1Byb2plY3RpbmcoKSB7XG4gICAgICAgICAgICByZXR1cm4gQm9vbGVhbigodGhpcy5yZWxhdGl2ZVRhcmdldCB8fFxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0RGVsdGEgfHxcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMubGF5b3V0Um9vdCkgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmxheW91dCk7XG4gICAgICAgIH1cbiAgICAgICAgY2FsY1Byb2plY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBjb25zdCBsZWFkID0gdGhpcy5nZXRMZWFkKCk7XG4gICAgICAgICAgICBjb25zdCBpc1NoYXJlZCA9IEJvb2xlYW4odGhpcy5yZXN1bWluZ0Zyb20pIHx8IHRoaXMgIT09IGxlYWQ7XG4gICAgICAgICAgICBsZXQgY2FuU2tpcCA9IHRydWU7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgaXMgYSBub3JtYWwgbGF5b3V0IGFuaW1hdGlvbiBhbmQgbmVpdGhlciB0aGlzIG5vZGUgbm9yIGl0cyBuZWFyZXN0IHByb2plY3RpbmdcbiAgICAgICAgICAgICAqIGlzIGRpcnR5IHRoZW4gd2UgY2FuJ3Qgc2tpcC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNQcm9qZWN0aW9uRGlydHkgfHwgKChfYSA9IHRoaXMucGFyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaXNQcm9qZWN0aW9uRGlydHkpKSB7XG4gICAgICAgICAgICAgICAgY2FuU2tpcCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIGlzIGEgc2hhcmVkIGxheW91dCBhbmltYXRpb24gYW5kIHRoaXMgbm9kZSdzIHNoYXJlZCBwcm9qZWN0aW9uIGlzIGRpcnR5IHRoZW5cbiAgICAgICAgICAgICAqIHdlIGNhbid0IHNraXAuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChpc1NoYXJlZCAmJlxuICAgICAgICAgICAgICAgICh0aGlzLmlzU2hhcmVkUHJvamVjdGlvbkRpcnR5IHx8IHRoaXMuaXNUcmFuc2Zvcm1EaXJ0eSkpIHtcbiAgICAgICAgICAgICAgICBjYW5Ta2lwID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlIGhhdmUgcmVzb2x2ZWQgdGhlIHRhcmdldCB0aGlzIGZyYW1lIHdlIG11c3QgcmVjYWxjdWxhdGUgdGhlXG4gICAgICAgICAgICAgKiBwcm9qZWN0aW9uIHRvIGVuc3VyZSBpdCB2aXN1YWxseSByZXByZXNlbnRzIHRoZSBpbnRlcm5hbCBjYWxjdWxhdGlvbnMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0aGlzLnJlc29sdmVkUmVsYXRpdmVUYXJnZXRBdCA9PT0gZnJhbWVEYXRhLnRpbWVzdGFtcCkge1xuICAgICAgICAgICAgICAgIGNhblNraXAgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYW5Ta2lwKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IHsgbGF5b3V0LCBsYXlvdXRJZCB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIHNlY3Rpb24gb2YgdGhlIHRyZWUgaXNuJ3QgYW5pbWF0aW5nIHdlIGNhblxuICAgICAgICAgICAgICogZGVsZXRlIG91ciB0YXJnZXQgc291cmNlcyBmb3IgdGhlIGZvbGxvd2luZyBmcmFtZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5pc1RyZWVBbmltYXRpbmcgPSBCb29sZWFuKCh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5pc1RyZWVBbmltYXRpbmcpIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50QW5pbWF0aW9uIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nQW5pbWF0aW9uKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1RyZWVBbmltYXRpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldERlbHRhID0gdGhpcy5yZWxhdGl2ZVRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5sYXlvdXQgfHwgIShsYXlvdXQgfHwgbGF5b3V0SWQpKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmVzZXQgdGhlIGNvcnJlY3RlZCBib3ggd2l0aCB0aGUgbGF0ZXN0IHZhbHVlcyBmcm9tIGJveCwgYXMgd2UncmUgdGhlbiBnb2luZ1xuICAgICAgICAgICAgICogdG8gcGVyZm9ybSBtdXRhdGl2ZSBvcGVyYXRpb25zIG9uIGl0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb3B5Qm94SW50byh0aGlzLmxheW91dENvcnJlY3RlZCwgdGhpcy5sYXlvdXQubGF5b3V0Qm94KTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmVjb3JkIHByZXZpb3VzIHRyZWUgc2NhbGVzIGJlZm9yZSB1cGRhdGluZy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgcHJldlRyZWVTY2FsZVggPSB0aGlzLnRyZWVTY2FsZS54O1xuICAgICAgICAgICAgY29uc3QgcHJldlRyZWVTY2FsZVkgPSB0aGlzLnRyZWVTY2FsZS55O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBcHBseSBhbGwgdGhlIHBhcmVudCBkZWx0YXMgdG8gdGhpcyBib3ggdG8gcHJvZHVjZSB0aGUgY29ycmVjdGVkIGJveC4gVGhpc1xuICAgICAgICAgICAgICogaXMgdGhlIGxheW91dCBib3gsIGFzIGl0IHdpbGwgYXBwZWFyIG9uIHNjcmVlbiBhcyBhIHJlc3VsdCBvZiB0aGUgdHJhbnNmb3JtcyBvZiBpdHMgcGFyZW50cy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgYXBwbHlUcmVlRGVsdGFzKHRoaXMubGF5b3V0Q29ycmVjdGVkLCB0aGlzLnRyZWVTY2FsZSwgdGhpcy5wYXRoLCBpc1NoYXJlZCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgbGF5ZXIgbmVlZHMgdG8gcGVyZm9ybSBzY2FsZSBjb3JyZWN0aW9uIGJ1dCBkb2Vzbid0IGhhdmUgYSB0YXJnZXQsXG4gICAgICAgICAgICAgKiB1c2UgdGhlIGxheW91dCBhcyB0aGUgdGFyZ2V0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAobGVhZC5sYXlvdXQgJiZcbiAgICAgICAgICAgICAgICAhbGVhZC50YXJnZXQgJiZcbiAgICAgICAgICAgICAgICAodGhpcy50cmVlU2NhbGUueCAhPT0gMSB8fCB0aGlzLnRyZWVTY2FsZS55ICE9PSAxKSkge1xuICAgICAgICAgICAgICAgIGxlYWQudGFyZ2V0ID0gbGVhZC5sYXlvdXQubGF5b3V0Qm94O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyB0YXJnZXQgfSA9IGxlYWQ7XG4gICAgICAgICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIHdlIGRvbid0IGhhdmUgYSB0YXJnZXQgdG8gcHJvamVjdCBpbnRvLCBidXQgd2Ugd2VyZSBwcmV2aW91c2x5XG4gICAgICAgICAgICAgICAgICogcHJvamVjdGluZywgd2Ugd2FudCB0byByZW1vdmUgdGhlIHN0b3JlZCB0cmFuc2Zvcm0gYW5kIHNjaGVkdWxlXG4gICAgICAgICAgICAgICAgICogYSByZW5kZXIgdG8gZW5zdXJlIHRoZSBlbGVtZW50cyByZWZsZWN0IHRoZSByZW1vdmVkIHRyYW5zZm9ybS5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9qZWN0aW9uVHJhbnNmb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvamVjdGlvbkRlbHRhID0gY3JlYXRlRGVsdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9qZWN0aW9uVHJhbnNmb3JtID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVSZW5kZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLnByb2plY3Rpb25EZWx0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvamVjdGlvbkRlbHRhID0gY3JlYXRlRGVsdGEoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnByb2plY3Rpb25EZWx0YVdpdGhUcmFuc2Zvcm0gPSBjcmVhdGVEZWx0YSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJldlByb2plY3Rpb25UcmFuc2Zvcm0gPSB0aGlzLnByb2plY3Rpb25UcmFuc2Zvcm07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVwZGF0ZSB0aGUgZGVsdGEgYmV0d2VlbiB0aGUgY29ycmVjdGVkIGJveCBhbmQgdGhlIHRhcmdldCBib3ggYmVmb3JlIHVzZXItc2V0IHRyYW5zZm9ybXMgd2VyZSBhcHBsaWVkLlxuICAgICAgICAgICAgICogVGhpcyB3aWxsIGFsbG93IHVzIHRvIGNhbGN1bGF0ZSB0aGUgY29ycmVjdGVkIGJvcmRlclJhZGl1cyBhbmQgYm94U2hhZG93IHRvIGNvbXBlbnNhdGVcbiAgICAgICAgICAgICAqIGZvciBvdXIgbGF5b3V0IHJlcHJvamVjdGlvbiwgYnV0IHN0aWxsIGFsbG93IHRoZW0gdG8gYmUgc2NhbGVkIGNvcnJlY3RseSBieSB0aGUgdXNlci5cbiAgICAgICAgICAgICAqIEl0IG1pZ2h0IGJlIHRoYXQgdG8gc2ltcGxpZnkgdGhpcyB3ZSBtYXkgd2FudCB0byBhY2NlcHQgdGhhdCB1c2VyLXNldCBzY2FsZSBpcyBhbHNvIGNvcnJlY3RlZFxuICAgICAgICAgICAgICogYW5kIHdlIHdvdWxkbid0IGhhdmUgdG8ga2VlcCBhbmQgY2FsYyBib3RoIGRlbHRhcywgT1Igd2UgY291bGQgc3VwcG9ydCBhIHVzZXIgc2V0dGluZ1xuICAgICAgICAgICAgICogdG8gYWxsb3cgcGVvcGxlIHRvIGNob29zZSB3aGV0aGVyIHRoZXNlIHN0eWxlcyBhcmUgY29ycmVjdGVkIGJhc2VkIG9uIGp1c3QgdGhlXG4gICAgICAgICAgICAgKiBsYXlvdXQgcmVwcm9qZWN0aW9uIG9yIHRoZSBmaW5hbCBib3VuZGluZyBib3guXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNhbGNCb3hEZWx0YSh0aGlzLnByb2plY3Rpb25EZWx0YSwgdGhpcy5sYXlvdXRDb3JyZWN0ZWQsIHRhcmdldCwgdGhpcy5sYXRlc3RWYWx1ZXMpO1xuICAgICAgICAgICAgdGhpcy5wcm9qZWN0aW9uVHJhbnNmb3JtID0gYnVpbGRQcm9qZWN0aW9uVHJhbnNmb3JtKHRoaXMucHJvamVjdGlvbkRlbHRhLCB0aGlzLnRyZWVTY2FsZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9qZWN0aW9uVHJhbnNmb3JtICE9PSBwcmV2UHJvamVjdGlvblRyYW5zZm9ybSB8fFxuICAgICAgICAgICAgICAgIHRoaXMudHJlZVNjYWxlLnggIT09IHByZXZUcmVlU2NhbGVYIHx8XG4gICAgICAgICAgICAgICAgdGhpcy50cmVlU2NhbGUueSAhPT0gcHJldlRyZWVTY2FsZVkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhc1Byb2plY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZVJlbmRlcigpO1xuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5TGlzdGVuZXJzKFwicHJvamVjdGlvblVwZGF0ZVwiLCB0YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJbmNyZWFzZSBkZWJ1ZyBjb3VudGVyIGZvciByZWNhbGN1bGF0ZWQgcHJvamVjdGlvbnNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHJvamVjdGlvbkZyYW1lRGF0YS5yZWNhbGN1bGF0ZWRQcm9qZWN0aW9uKys7XG4gICAgICAgIH1cbiAgICAgICAgaGlkZSgpIHtcbiAgICAgICAgICAgIHRoaXMuaXNWaXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBUT0RPOiBTY2hlZHVsZSByZW5kZXJcbiAgICAgICAgfVxuICAgICAgICBzaG93KCkge1xuICAgICAgICAgICAgdGhpcy5pc1Zpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgLy8gVE9ETzogU2NoZWR1bGUgcmVuZGVyXG4gICAgICAgIH1cbiAgICAgICAgc2NoZWR1bGVSZW5kZXIobm90aWZ5QWxsID0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnNjaGVkdWxlUmVuZGVyICYmIHRoaXMub3B0aW9ucy5zY2hlZHVsZVJlbmRlcigpO1xuICAgICAgICAgICAgaWYgKG5vdGlmeUFsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gdGhpcy5nZXRTdGFjaygpO1xuICAgICAgICAgICAgICAgIHN0YWNrICYmIHN0YWNrLnNjaGVkdWxlUmVuZGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5yZXN1bWluZ0Zyb20gJiYgIXRoaXMucmVzdW1pbmdGcm9tLmluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bWluZ0Zyb20gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2V0QW5pbWF0aW9uT3JpZ2luKGRlbHRhLCBoYXNPbmx5UmVsYXRpdmVUYXJnZXRDaGFuZ2VkID0gZmFsc2UpIHtcbiAgICAgICAgICAgIGNvbnN0IHNuYXBzaG90ID0gdGhpcy5zbmFwc2hvdDtcbiAgICAgICAgICAgIGNvbnN0IHNuYXBzaG90TGF0ZXN0VmFsdWVzID0gc25hcHNob3RcbiAgICAgICAgICAgICAgICA/IHNuYXBzaG90LmxhdGVzdFZhbHVlc1xuICAgICAgICAgICAgICAgIDoge307XG4gICAgICAgICAgICBjb25zdCBtaXhlZFZhbHVlcyA9IHsgLi4udGhpcy5sYXRlc3RWYWx1ZXMgfTtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldERlbHRhID0gY3JlYXRlRGVsdGEoKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5yZWxhdGl2ZVBhcmVudCB8fFxuICAgICAgICAgICAgICAgICF0aGlzLnJlbGF0aXZlUGFyZW50Lm9wdGlvbnMubGF5b3V0Um9vdCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmVUYXJnZXQgPSB0aGlzLnJlbGF0aXZlVGFyZ2V0T3JpZ2luID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hdHRlbXB0VG9SZXNvbHZlUmVsYXRpdmVUYXJnZXQgPSAhaGFzT25seVJlbGF0aXZlVGFyZ2V0Q2hhbmdlZDtcbiAgICAgICAgICAgIGNvbnN0IHJlbGF0aXZlTGF5b3V0ID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICBjb25zdCBzbmFwc2hvdFNvdXJjZSA9IHNuYXBzaG90ID8gc25hcHNob3Quc291cmNlIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgY29uc3QgbGF5b3V0U291cmNlID0gdGhpcy5sYXlvdXQgPyB0aGlzLmxheW91dC5zb3VyY2UgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb25zdCBpc1NoYXJlZExheW91dEFuaW1hdGlvbiA9IHNuYXBzaG90U291cmNlICE9PSBsYXlvdXRTb3VyY2U7XG4gICAgICAgICAgICBjb25zdCBzdGFjayA9IHRoaXMuZ2V0U3RhY2soKTtcbiAgICAgICAgICAgIGNvbnN0IGlzT25seU1lbWJlciA9ICFzdGFjayB8fCBzdGFjay5tZW1iZXJzLmxlbmd0aCA8PSAxO1xuICAgICAgICAgICAgY29uc3Qgc2hvdWxkQ3Jvc3NmYWRlT3BhY2l0eSA9IEJvb2xlYW4oaXNTaGFyZWRMYXlvdXRBbmltYXRpb24gJiZcbiAgICAgICAgICAgICAgICAhaXNPbmx5TWVtYmVyICYmXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmNyb3NzZmFkZSA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgICAgICF0aGlzLnBhdGguc29tZShoYXNPcGFjaXR5Q3Jvc3NmYWRlKSk7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvblByb2dyZXNzID0gMDtcbiAgICAgICAgICAgIGxldCBwcmV2UmVsYXRpdmVUYXJnZXQ7XG4gICAgICAgICAgICB0aGlzLm1peFRhcmdldERlbHRhID0gKGxhdGVzdCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzID0gbGF0ZXN0IC8gMTAwMDtcbiAgICAgICAgICAgICAgICBtaXhBeGlzRGVsdGEodGFyZ2V0RGVsdGEueCwgZGVsdGEueCwgcHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgIG1peEF4aXNEZWx0YSh0YXJnZXREZWx0YS55LCBkZWx0YS55LCBwcm9ncmVzcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUYXJnZXREZWx0YSh0YXJnZXREZWx0YSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVsYXRpdmVUYXJnZXQgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZVRhcmdldE9yaWdpbiAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxheW91dCAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aXZlUGFyZW50ICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmVQYXJlbnQubGF5b3V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGNSZWxhdGl2ZVBvc2l0aW9uKHJlbGF0aXZlTGF5b3V0LCB0aGlzLmxheW91dC5sYXlvdXRCb3gsIHRoaXMucmVsYXRpdmVQYXJlbnQubGF5b3V0LmxheW91dEJveCk7XG4gICAgICAgICAgICAgICAgICAgIG1peEJveCh0aGlzLnJlbGF0aXZlVGFyZ2V0LCB0aGlzLnJlbGF0aXZlVGFyZ2V0T3JpZ2luLCByZWxhdGl2ZUxheW91dCwgcHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogSWYgdGhpcyBpcyBhbiB1bmNoYW5nZWQgcmVsYXRpdmUgdGFyZ2V0IHdlIGNhbiBjb25zaWRlciB0aGVcbiAgICAgICAgICAgICAgICAgICAgICogcHJvamVjdGlvbiBub3QgZGlydHkuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJldlJlbGF0aXZlVGFyZ2V0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBib3hFcXVhbHModGhpcy5yZWxhdGl2ZVRhcmdldCwgcHJldlJlbGF0aXZlVGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1Byb2plY3Rpb25EaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghcHJldlJlbGF0aXZlVGFyZ2V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldlJlbGF0aXZlVGFyZ2V0ID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvcHlCb3hJbnRvKHByZXZSZWxhdGl2ZVRhcmdldCwgdGhpcy5yZWxhdGl2ZVRhcmdldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc1NoYXJlZExheW91dEFuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvblZhbHVlcyA9IG1peGVkVmFsdWVzO1xuICAgICAgICAgICAgICAgICAgICBtaXhWYWx1ZXMobWl4ZWRWYWx1ZXMsIHNuYXBzaG90TGF0ZXN0VmFsdWVzLCB0aGlzLmxhdGVzdFZhbHVlcywgcHJvZ3Jlc3MsIHNob3VsZENyb3NzZmFkZU9wYWNpdHksIGlzT25seU1lbWJlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucm9vdC5zY2hlZHVsZVVwZGF0ZVByb2plY3Rpb24oKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlUmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25Qcm9ncmVzcyA9IHByb2dyZXNzO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMubWl4VGFyZ2V0RGVsdGEodGhpcy5vcHRpb25zLmxheW91dFJvb3QgPyAxMDAwIDogMCk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhcnRBbmltYXRpb24ob3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5ub3RpZnlMaXN0ZW5lcnMoXCJhbmltYXRpb25TdGFydFwiKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEFuaW1hdGlvbiAmJiB0aGlzLmN1cnJlbnRBbmltYXRpb24uc3RvcCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMucmVzdW1pbmdGcm9tICYmIHRoaXMucmVzdW1pbmdGcm9tLmN1cnJlbnRBbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VtaW5nRnJvbS5jdXJyZW50QW5pbWF0aW9uLnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnBlbmRpbmdBbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgICBjYW5jZWxGcmFtZSh0aGlzLnBlbmRpbmdBbmltYXRpb24pO1xuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ0FuaW1hdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU3RhcnQgdGhlIGFuaW1hdGlvbiBpbiB0aGUgbmV4dCBmcmFtZSB0byBoYXZlIGEgZnJhbWUgd2l0aCBwcm9ncmVzcyAwLFxuICAgICAgICAgICAgICogd2hlcmUgdGhlIHRhcmdldCBpcyB0aGUgc2FtZSBhcyB3aGVuIHRoZSBhbmltYXRpb24gc3RhcnRlZCwgc28gd2UgY2FuXG4gICAgICAgICAgICAgKiBjYWxjdWxhdGUgdGhlIHJlbGF0aXZlIHBvc2l0aW9ucyBjb3JyZWN0bHkgZm9yIGluc3RhbnQgdHJhbnNpdGlvbnMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMucGVuZGluZ0FuaW1hdGlvbiA9IGZyYW1lLnVwZGF0ZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsUHJvamVjdGlvblN0YXRlLmhhc0FuaW1hdGVkU2luY2VSZXNpemUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEFuaW1hdGlvbiA9IGFuaW1hdGVTaW5nbGVWYWx1ZSgwLCBhbmltYXRpb25UYXJnZXQsIHtcbiAgICAgICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgb25VcGRhdGU6IChsYXRlc3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWl4VGFyZ2V0RGVsdGEobGF0ZXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMub25VcGRhdGUgJiYgb3B0aW9ucy5vblVwZGF0ZShsYXRlc3QpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uQ29tcGxldGUgJiYgb3B0aW9ucy5vbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVzdW1pbmdGcm9tKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdW1pbmdGcm9tLmN1cnJlbnRBbmltYXRpb24gPSB0aGlzLmN1cnJlbnRBbmltYXRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ0FuaW1hdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbXBsZXRlQW5pbWF0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucmVzdW1pbmdGcm9tKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bWluZ0Zyb20uY3VycmVudEFuaW1hdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VtaW5nRnJvbS5wcmVzZXJ2ZU9wYWNpdHkgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzdGFjayA9IHRoaXMuZ2V0U3RhY2soKTtcbiAgICAgICAgICAgIHN0YWNrICYmIHN0YWNrLmV4aXRBbmltYXRpb25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgdGhpcy5yZXN1bWluZ0Zyb20gPVxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEFuaW1hdGlvbiA9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uVmFsdWVzID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5TGlzdGVuZXJzKFwiYW5pbWF0aW9uQ29tcGxldGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgZmluaXNoQW5pbWF0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudEFuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMubWl4VGFyZ2V0RGVsdGEgJiYgdGhpcy5taXhUYXJnZXREZWx0YShhbmltYXRpb25UYXJnZXQpO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEFuaW1hdGlvbi5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvbXBsZXRlQW5pbWF0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgYXBwbHlUcmFuc2Zvcm1zVG9UYXJnZXQoKSB7XG4gICAgICAgICAgICBjb25zdCBsZWFkID0gdGhpcy5nZXRMZWFkKCk7XG4gICAgICAgICAgICBsZXQgeyB0YXJnZXRXaXRoVHJhbnNmb3JtcywgdGFyZ2V0LCBsYXlvdXQsIGxhdGVzdFZhbHVlcyB9ID0gbGVhZDtcbiAgICAgICAgICAgIGlmICghdGFyZ2V0V2l0aFRyYW5zZm9ybXMgfHwgIXRhcmdldCB8fCAhbGF5b3V0KVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgd2UncmUgb25seSBhbmltYXRpbmcgcG9zaXRpb24sIGFuZCB0aGlzIGVsZW1lbnQgaXNuJ3QgdGhlIGxlYWQgZWxlbWVudCxcbiAgICAgICAgICAgICAqIHRoZW4gaW5zdGVhZCBvZiBwcm9qZWN0aW5nIGludG8gdGhlIGxlYWQgYm94IHdlIGluc3RlYWQgd2FudCB0byBjYWxjdWxhdGVcbiAgICAgICAgICAgICAqIGEgbmV3IHRhcmdldCB0aGF0IGFsaWducyB0aGUgdHdvIGJveGVzIGJ1dCBtYWludGFpbnMgdGhlIGxheW91dCBzaGFwZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHRoaXMgIT09IGxlYWQgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmxheW91dCAmJlxuICAgICAgICAgICAgICAgIGxheW91dCAmJlxuICAgICAgICAgICAgICAgIHNob3VsZEFuaW1hdGVQb3NpdGlvbk9ubHkodGhpcy5vcHRpb25zLmFuaW1hdGlvblR5cGUsIHRoaXMubGF5b3V0LmxheW91dEJveCwgbGF5b3V0LmxheW91dEJveCkpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSB0aGlzLnRhcmdldCB8fCBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgICAgICBjb25zdCB4TGVuZ3RoID0gY2FsY0xlbmd0aCh0aGlzLmxheW91dC5sYXlvdXRCb3gueCk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LngubWluID0gbGVhZC50YXJnZXQueC5taW47XG4gICAgICAgICAgICAgICAgdGFyZ2V0LngubWF4ID0gdGFyZ2V0LngubWluICsgeExlbmd0aDtcbiAgICAgICAgICAgICAgICBjb25zdCB5TGVuZ3RoID0gY2FsY0xlbmd0aCh0aGlzLmxheW91dC5sYXlvdXRCb3gueSk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LnkubWluID0gbGVhZC50YXJnZXQueS5taW47XG4gICAgICAgICAgICAgICAgdGFyZ2V0LnkubWF4ID0gdGFyZ2V0LnkubWluICsgeUxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvcHlCb3hJbnRvKHRhcmdldFdpdGhUcmFuc2Zvcm1zLCB0YXJnZXQpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBcHBseSB0aGUgbGF0ZXN0IHVzZXItc2V0IHRyYW5zZm9ybXMgdG8gdGhlIHRhcmdldEJveCB0byBwcm9kdWNlIHRoZSB0YXJnZXRCb3hGaW5hbC5cbiAgICAgICAgICAgICAqIFRoaXMgaXMgdGhlIGZpbmFsIGJveCB0aGF0IHdlIHdpbGwgdGhlbiBwcm9qZWN0IGludG8gYnkgY2FsY3VsYXRpbmcgYSB0cmFuc2Zvcm0gZGVsdGEgYW5kXG4gICAgICAgICAgICAgKiBhcHBseWluZyBpdCB0byB0aGUgY29ycmVjdGVkIGJveC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdHJhbnNmb3JtQm94KHRhcmdldFdpdGhUcmFuc2Zvcm1zLCBsYXRlc3RWYWx1ZXMpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVcGRhdGUgdGhlIGRlbHRhIGJldHdlZW4gdGhlIGNvcnJlY3RlZCBib3ggYW5kIHRoZSBmaW5hbCB0YXJnZXQgYm94LCBhZnRlclxuICAgICAgICAgICAgICogdXNlci1zZXQgdHJhbnNmb3JtcyBhcmUgYXBwbGllZCB0byBpdC4gVGhpcyB3aWxsIGJlIHVzZWQgYnkgdGhlIHJlbmRlcmVyIHRvXG4gICAgICAgICAgICAgKiBjcmVhdGUgYSB0cmFuc2Zvcm0gc3R5bGUgdGhhdCB3aWxsIHJlcHJvamVjdCB0aGUgZWxlbWVudCBmcm9tIGl0cyBsYXlvdXQgbGF5b3V0XG4gICAgICAgICAgICAgKiBpbnRvIHRoZSBkZXNpcmVkIGJvdW5kaW5nIGJveC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY2FsY0JveERlbHRhKHRoaXMucHJvamVjdGlvbkRlbHRhV2l0aFRyYW5zZm9ybSwgdGhpcy5sYXlvdXRDb3JyZWN0ZWQsIHRhcmdldFdpdGhUcmFuc2Zvcm1zLCBsYXRlc3RWYWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJlZ2lzdGVyU2hhcmVkTm9kZShsYXlvdXRJZCwgbm9kZSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnNoYXJlZE5vZGVzLmhhcyhsYXlvdXRJZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNoYXJlZE5vZGVzLnNldChsYXlvdXRJZCwgbmV3IE5vZGVTdGFjaygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gdGhpcy5zaGFyZWROb2Rlcy5nZXQobGF5b3V0SWQpO1xuICAgICAgICAgICAgc3RhY2suYWRkKG5vZGUpO1xuICAgICAgICAgICAgY29uc3QgY29uZmlnID0gbm9kZS5vcHRpb25zLmluaXRpYWxQcm9tb3Rpb25Db25maWc7XG4gICAgICAgICAgICBub2RlLnByb21vdGUoe1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGNvbmZpZyA/IGNvbmZpZy50cmFuc2l0aW9uIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHByZXNlcnZlRm9sbG93T3BhY2l0eTogY29uZmlnICYmIGNvbmZpZy5zaG91bGRQcmVzZXJ2ZUZvbGxvd09wYWNpdHlcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWcuc2hvdWxkUHJlc2VydmVGb2xsb3dPcGFjaXR5KG5vZGUpXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaXNMZWFkKCkge1xuICAgICAgICAgICAgY29uc3Qgc3RhY2sgPSB0aGlzLmdldFN0YWNrKCk7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2sgPyBzdGFjay5sZWFkID09PSB0aGlzIDogdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBnZXRMZWFkKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgY29uc3QgeyBsYXlvdXRJZCB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgcmV0dXJuIGxheW91dElkID8gKChfYSA9IHRoaXMuZ2V0U3RhY2soKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlYWQpIHx8IHRoaXMgOiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGdldFByZXZMZWFkKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgY29uc3QgeyBsYXlvdXRJZCB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgcmV0dXJuIGxheW91dElkID8gKF9hID0gdGhpcy5nZXRTdGFjaygpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucHJldkxlYWQgOiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0U3RhY2soKSB7XG4gICAgICAgICAgICBjb25zdCB7IGxheW91dElkIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgICAgICBpZiAobGF5b3V0SWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5zaGFyZWROb2Rlcy5nZXQobGF5b3V0SWQpO1xuICAgICAgICB9XG4gICAgICAgIHByb21vdGUoeyBuZWVkc1Jlc2V0LCB0cmFuc2l0aW9uLCBwcmVzZXJ2ZUZvbGxvd09wYWNpdHksIH0gPSB7fSkge1xuICAgICAgICAgICAgY29uc3Qgc3RhY2sgPSB0aGlzLmdldFN0YWNrKCk7XG4gICAgICAgICAgICBpZiAoc3RhY2spXG4gICAgICAgICAgICAgICAgc3RhY2sucHJvbW90ZSh0aGlzLCBwcmVzZXJ2ZUZvbGxvd09wYWNpdHkpO1xuICAgICAgICAgICAgaWYgKG5lZWRzUmVzZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb2plY3Rpb25EZWx0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB0aGlzLm5lZWRzUmVzZXQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRyYW5zaXRpb24pXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRPcHRpb25zKHsgdHJhbnNpdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgICByZWxlZ2F0ZSgpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gdGhpcy5nZXRTdGFjaygpO1xuICAgICAgICAgICAgaWYgKHN0YWNrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YWNrLnJlbGVnYXRlKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc2V0Um90YXRpb24oKSB7XG4gICAgICAgICAgICBjb25zdCB7IHZpc3VhbEVsZW1lbnQgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgICAgIGlmICghdmlzdWFsRWxlbWVudClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIGRldGVjdGVkIHJvdGF0aW9uIHZhbHVlcywgd2UgY2FuIGVhcmx5IHJldHVybiB3aXRob3V0IGEgZm9yY2VkIHJlbmRlci5cbiAgICAgICAgICAgIGxldCBoYXNSb3RhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQW4gdW5yb2xsZWQgY2hlY2sgZm9yIHJvdGF0aW9uIHZhbHVlcy4gTW9zdCBlbGVtZW50cyBkb24ndCBoYXZlIGFueSByb3RhdGlvbiBhbmRcbiAgICAgICAgICAgICAqIHNraXBwaW5nIHRoZSBuZXN0ZWQgbG9vcCBhbmQgbmV3IG9iamVjdCBjcmVhdGlvbiBpcyA1MCUgZmFzdGVyLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCB7IGxhdGVzdFZhbHVlcyB9ID0gdmlzdWFsRWxlbWVudDtcbiAgICAgICAgICAgIGlmIChsYXRlc3RWYWx1ZXMucm90YXRlIHx8XG4gICAgICAgICAgICAgICAgbGF0ZXN0VmFsdWVzLnJvdGF0ZVggfHxcbiAgICAgICAgICAgICAgICBsYXRlc3RWYWx1ZXMucm90YXRlWSB8fFxuICAgICAgICAgICAgICAgIGxhdGVzdFZhbHVlcy5yb3RhdGVaKSB7XG4gICAgICAgICAgICAgICAgaGFzUm90YXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gcm90YXRpb24gdmFsdWVzLCB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueSBtb3JlLlxuICAgICAgICAgICAgaWYgKCFoYXNSb3RhdGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgcmVzZXRWYWx1ZXMgPSB7fTtcbiAgICAgICAgICAgIC8vIENoZWNrIHRoZSByb3RhdGUgdmFsdWUgb2YgYWxsIGF4ZXMgYW5kIHJlc2V0IHRvIDBcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJhbnNmb3JtQXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IFwicm90YXRlXCIgKyB0cmFuc2Zvcm1BeGVzW2ldO1xuICAgICAgICAgICAgICAgIC8vIFJlY29yZCB0aGUgcm90YXRpb24gYW5kIHRoZW4gdGVtcG9yYXJpbHkgc2V0IGl0IHRvIDBcbiAgICAgICAgICAgICAgICBpZiAobGF0ZXN0VmFsdWVzW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzZXRWYWx1ZXNba2V5XSA9IGxhdGVzdFZhbHVlc1trZXldO1xuICAgICAgICAgICAgICAgICAgICB2aXN1YWxFbGVtZW50LnNldFN0YXRpY1ZhbHVlKGtleSwgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRm9yY2UgYSByZW5kZXIgb2YgdGhpcyBlbGVtZW50IHRvIGFwcGx5IHRoZSB0cmFuc2Zvcm0gd2l0aCBhbGwgcm90YXRpb25zXG4gICAgICAgICAgICAvLyBzZXQgdG8gMC5cbiAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQucmVuZGVyKCk7XG4gICAgICAgICAgICAvLyBQdXQgYmFjayBhbGwgdGhlIHZhbHVlcyB3ZSByZXNldFxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcmVzZXRWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICB2aXN1YWxFbGVtZW50LnNldFN0YXRpY1ZhbHVlKGtleSwgcmVzZXRWYWx1ZXNba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTY2hlZHVsZSBhIHJlbmRlciBmb3IgdGhlIG5leHQgZnJhbWUuIFRoaXMgZW5zdXJlcyB3ZSB3b24ndCB2aXN1YWxseVxuICAgICAgICAgICAgLy8gc2VlIHRoZSBlbGVtZW50IHdpdGggdGhlIHJlc2V0IHJvdGF0ZSB2YWx1ZSBhcHBsaWVkLlxuICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5zY2hlZHVsZVJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICAgIGdldFByb2plY3Rpb25TdHlsZXMoc3R5bGVQcm9wID0ge30pIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICAvLyBUT0RPOiBSZXR1cm4gbGlmZWN5Y2xlLXBlcnNpc3RlbnQgb2JqZWN0XG4gICAgICAgICAgICBjb25zdCBzdHlsZXMgPSB7fTtcbiAgICAgICAgICAgIGlmICghdGhpcy5pbnN0YW5jZSB8fCB0aGlzLmlzU1ZHKVxuICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3R5bGVzLnZpc2liaWxpdHkgPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtVGVtcGxhdGUgPSB0aGlzLmdldFRyYW5zZm9ybVRlbXBsYXRlKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5uZWVkc1Jlc2V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5uZWVkc1Jlc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc3R5bGVzLm9wYWNpdHkgPSBcIlwiO1xuICAgICAgICAgICAgICAgIHN0eWxlcy5wb2ludGVyRXZlbnRzID1cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZU1vdGlvblZhbHVlKHN0eWxlUHJvcC5wb2ludGVyRXZlbnRzKSB8fCBcIlwiO1xuICAgICAgICAgICAgICAgIHN0eWxlcy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1UZW1wbGF0ZVxuICAgICAgICAgICAgICAgICAgICA/IHRyYW5zZm9ybVRlbXBsYXRlKHRoaXMubGF0ZXN0VmFsdWVzLCBcIlwiKVxuICAgICAgICAgICAgICAgICAgICA6IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsZWFkID0gdGhpcy5nZXRMZWFkKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMucHJvamVjdGlvbkRlbHRhIHx8ICF0aGlzLmxheW91dCB8fCAhbGVhZC50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbXB0eVN0eWxlcyA9IHt9O1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMubGF5b3V0SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZW1wdHlTdHlsZXMub3BhY2l0eSA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhdGVzdFZhbHVlcy5vcGFjaXR5ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMubGF0ZXN0VmFsdWVzLm9wYWNpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IDE7XG4gICAgICAgICAgICAgICAgICAgIGVtcHR5U3R5bGVzLnBvaW50ZXJFdmVudHMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZU1vdGlvblZhbHVlKHN0eWxlUHJvcC5wb2ludGVyRXZlbnRzKSB8fCBcIlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5oYXNQcm9qZWN0ZWQgJiYgIWhhc1RyYW5zZm9ybSh0aGlzLmxhdGVzdFZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgZW1wdHlTdHlsZXMudHJhbnNmb3JtID0gdHJhbnNmb3JtVGVtcGxhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdHJhbnNmb3JtVGVtcGxhdGUoe30sIFwiXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhc1Byb2plY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZW1wdHlTdHlsZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB2YWx1ZXNUb1JlbmRlciA9IGxlYWQuYW5pbWF0aW9uVmFsdWVzIHx8IGxlYWQubGF0ZXN0VmFsdWVzO1xuICAgICAgICAgICAgdGhpcy5hcHBseVRyYW5zZm9ybXNUb1RhcmdldCgpO1xuICAgICAgICAgICAgc3R5bGVzLnRyYW5zZm9ybSA9IGJ1aWxkUHJvamVjdGlvblRyYW5zZm9ybSh0aGlzLnByb2plY3Rpb25EZWx0YVdpdGhUcmFuc2Zvcm0sIHRoaXMudHJlZVNjYWxlLCB2YWx1ZXNUb1JlbmRlcik7XG4gICAgICAgICAgICBpZiAodHJhbnNmb3JtVGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgICBzdHlsZXMudHJhbnNmb3JtID0gdHJhbnNmb3JtVGVtcGxhdGUodmFsdWVzVG9SZW5kZXIsIHN0eWxlcy50cmFuc2Zvcm0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyB4LCB5IH0gPSB0aGlzLnByb2plY3Rpb25EZWx0YTtcbiAgICAgICAgICAgIHN0eWxlcy50cmFuc2Zvcm1PcmlnaW4gPSBgJHt4Lm9yaWdpbiAqIDEwMH0lICR7eS5vcmlnaW4gKiAxMDB9JSAwYDtcbiAgICAgICAgICAgIGlmIChsZWFkLmFuaW1hdGlvblZhbHVlcykge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIHRoZSBsZWFkIGNvbXBvbmVudCBpcyBhbmltYXRpbmcsIGFzc2lnbiB0aGlzIGVpdGhlciB0aGUgZW50ZXJpbmcvbGVhdmluZ1xuICAgICAgICAgICAgICAgICAqIG9wYWNpdHlcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBzdHlsZXMub3BhY2l0eSA9XG4gICAgICAgICAgICAgICAgICAgIGxlYWQgPT09IHRoaXNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKF9iID0gKF9hID0gdmFsdWVzVG9SZW5kZXIub3BhY2l0eSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGhpcy5sYXRlc3RWYWx1ZXMub3BhY2l0eSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnByZXNlcnZlT3BhY2l0eVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5sYXRlc3RWYWx1ZXMub3BhY2l0eVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdmFsdWVzVG9SZW5kZXIub3BhY2l0eUV4aXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBPciB3ZSdyZSBub3QgYW5pbWF0aW5nIGF0IGFsbCwgc2V0IHRoZSBsZWFkIGNvbXBvbmVudCB0byBpdHMgbGF5b3V0XG4gICAgICAgICAgICAgICAgICogb3BhY2l0eSBhbmQgb3RoZXIgY29tcG9uZW50cyB0byBoaWRkZW4uXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgc3R5bGVzLm9wYWNpdHkgPVxuICAgICAgICAgICAgICAgICAgICBsZWFkID09PSB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHZhbHVlc1RvUmVuZGVyLm9wYWNpdHkgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdmFsdWVzVG9SZW5kZXIub3BhY2l0eVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZXNUb1JlbmRlci5vcGFjaXR5RXhpdCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB2YWx1ZXNUb1JlbmRlci5vcGFjaXR5RXhpdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQXBwbHkgc2NhbGUgY29ycmVjdGlvblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzY2FsZUNvcnJlY3RvcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzVG9SZW5kZXJba2V5XSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGNvcnJlY3QsIGFwcGx5VG8gfSA9IHNjYWxlQ29ycmVjdG9yc1trZXldO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIE9ubHkgYXBwbHkgc2NhbGUgY29ycmVjdGlvbiB0byB0aGUgdmFsdWUgaWYgd2UgaGF2ZSBhblxuICAgICAgICAgICAgICAgICAqIGFjdGl2ZSBwcm9qZWN0aW9uIHRyYW5zZm9ybS4gT3RoZXJ3aXNlIHRoZXNlIHZhbHVlcyBiZWNvbWVcbiAgICAgICAgICAgICAgICAgKiB2dWxuZXJhYmxlIHRvIGRpc3RvcnRpb24gaWYgdGhlIGVsZW1lbnQgY2hhbmdlcyBzaXplIHdpdGhvdXRcbiAgICAgICAgICAgICAgICAgKiBhIGNvcnJlc3BvbmRpbmcgbGF5b3V0IGFuaW1hdGlvbi5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBjb25zdCBjb3JyZWN0ZWQgPSBzdHlsZXMudHJhbnNmb3JtID09PSBcIm5vbmVcIlxuICAgICAgICAgICAgICAgICAgICA/IHZhbHVlc1RvUmVuZGVyW2tleV1cbiAgICAgICAgICAgICAgICAgICAgOiBjb3JyZWN0KHZhbHVlc1RvUmVuZGVyW2tleV0sIGxlYWQpO1xuICAgICAgICAgICAgICAgIGlmIChhcHBseVRvKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG51bSA9IGFwcGx5VG8ubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZXNbYXBwbHlUb1tpXV0gPSBjb3JyZWN0ZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlc1trZXldID0gY29ycmVjdGVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGlzYWJsZSBwb2ludGVyIGV2ZW50cyBvbiBmb2xsb3cgY29tcG9uZW50cy4gVGhpcyBpcyB0byBlbnN1cmVcbiAgICAgICAgICAgICAqIHRoYXQgaWYgYSBmb2xsb3cgY29tcG9uZW50IGNvdmVycyBhIGxlYWQgY29tcG9uZW50IGl0IGRvZXNuJ3QgYmxvY2tcbiAgICAgICAgICAgICAqIHBvaW50ZXIgZXZlbnRzIG9uIHRoZSBsZWFkLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmxheW91dElkKSB7XG4gICAgICAgICAgICAgICAgc3R5bGVzLnBvaW50ZXJFdmVudHMgPVxuICAgICAgICAgICAgICAgICAgICBsZWFkID09PSB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHJlc29sdmVNb3Rpb25WYWx1ZShzdHlsZVByb3AucG9pbnRlckV2ZW50cykgfHwgXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOiBcIm5vbmVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgICAgIH1cbiAgICAgICAgY2xlYXJTbmFwc2hvdCgpIHtcbiAgICAgICAgICAgIHRoaXMucmVzdW1lRnJvbSA9IHRoaXMuc25hcHNob3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gT25seSBydW4gb24gcm9vdFxuICAgICAgICByZXNldFRyZWUoKSB7XG4gICAgICAgICAgICB0aGlzLnJvb3Qubm9kZXMuZm9yRWFjaCgobm9kZSkgPT4geyB2YXIgX2E7IHJldHVybiAoX2EgPSBub2RlLmN1cnJlbnRBbmltYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdG9wKCk7IH0pO1xuICAgICAgICAgICAgdGhpcy5yb290Lm5vZGVzLmZvckVhY2goY2xlYXJNZWFzdXJlbWVudHMpO1xuICAgICAgICAgICAgdGhpcy5yb290LnNoYXJlZE5vZGVzLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gdXBkYXRlTGF5b3V0KG5vZGUpIHtcbiAgICBub2RlLnVwZGF0ZUxheW91dCgpO1xufVxuZnVuY3Rpb24gbm90aWZ5TGF5b3V0VXBkYXRlKG5vZGUpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3Qgc25hcHNob3QgPSAoKF9hID0gbm9kZS5yZXN1bWVGcm9tKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc25hcHNob3QpIHx8IG5vZGUuc25hcHNob3Q7XG4gICAgaWYgKG5vZGUuaXNMZWFkKCkgJiZcbiAgICAgICAgbm9kZS5sYXlvdXQgJiZcbiAgICAgICAgc25hcHNob3QgJiZcbiAgICAgICAgbm9kZS5oYXNMaXN0ZW5lcnMoXCJkaWRVcGRhdGVcIikpIHtcbiAgICAgICAgY29uc3QgeyBsYXlvdXRCb3g6IGxheW91dCwgbWVhc3VyZWRCb3g6IG1lYXN1cmVkTGF5b3V0IH0gPSBub2RlLmxheW91dDtcbiAgICAgICAgY29uc3QgeyBhbmltYXRpb25UeXBlIH0gPSBub2RlLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGlzU2hhcmVkID0gc25hcHNob3Quc291cmNlICE9PSBub2RlLmxheW91dC5zb3VyY2U7XG4gICAgICAgIC8vIFRPRE8gTWF5YmUgd2Ugd2FudCB0byBhbHNvIHJlc2l6ZSB0aGUgbGF5b3V0IHNuYXBzaG90IHNvIHdlIGRvbid0IHRyaWdnZXJcbiAgICAgICAgLy8gYW5pbWF0aW9ucyBmb3IgaW5zdGFuY2UgaWYgbGF5b3V0PVwic2l6ZVwiIGFuZCBhbiBlbGVtZW50IGhhcyBvbmx5IGNoYW5nZWQgcG9zaXRpb25cbiAgICAgICAgaWYgKGFuaW1hdGlvblR5cGUgPT09IFwic2l6ZVwiKSB7XG4gICAgICAgICAgICBlYWNoQXhpcygoYXhpcykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aXNTbmFwc2hvdCA9IGlzU2hhcmVkXG4gICAgICAgICAgICAgICAgICAgID8gc25hcHNob3QubWVhc3VyZWRCb3hbYXhpc11cbiAgICAgICAgICAgICAgICAgICAgOiBzbmFwc2hvdC5sYXlvdXRCb3hbYXhpc107XG4gICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gY2FsY0xlbmd0aChheGlzU25hcHNob3QpO1xuICAgICAgICAgICAgICAgIGF4aXNTbmFwc2hvdC5taW4gPSBsYXlvdXRbYXhpc10ubWluO1xuICAgICAgICAgICAgICAgIGF4aXNTbmFwc2hvdC5tYXggPSBheGlzU25hcHNob3QubWluICsgbGVuZ3RoO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2hvdWxkQW5pbWF0ZVBvc2l0aW9uT25seShhbmltYXRpb25UeXBlLCBzbmFwc2hvdC5sYXlvdXRCb3gsIGxheW91dCkpIHtcbiAgICAgICAgICAgIGVhY2hBeGlzKChheGlzKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpc1NuYXBzaG90ID0gaXNTaGFyZWRcbiAgICAgICAgICAgICAgICAgICAgPyBzbmFwc2hvdC5tZWFzdXJlZEJveFtheGlzXVxuICAgICAgICAgICAgICAgICAgICA6IHNuYXBzaG90LmxheW91dEJveFtheGlzXTtcbiAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSBjYWxjTGVuZ3RoKGxheW91dFtheGlzXSk7XG4gICAgICAgICAgICAgICAgYXhpc1NuYXBzaG90Lm1heCA9IGF4aXNTbmFwc2hvdC5taW4gKyBsZW5ndGg7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogRW5zdXJlIHJlbGF0aXZlIHRhcmdldCBnZXRzIHJlc2l6ZWQgYW5kIHJlcmVuZGVyZXJkXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUucmVsYXRpdmVUYXJnZXQgJiYgIW5vZGUuY3VycmVudEFuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBub2RlLmlzUHJvamVjdGlvbkRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5yZWxhdGl2ZVRhcmdldFtheGlzXS5tYXggPVxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5yZWxhdGl2ZVRhcmdldFtheGlzXS5taW4gKyBsZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGF5b3V0RGVsdGEgPSBjcmVhdGVEZWx0YSgpO1xuICAgICAgICBjYWxjQm94RGVsdGEobGF5b3V0RGVsdGEsIGxheW91dCwgc25hcHNob3QubGF5b3V0Qm94KTtcbiAgICAgICAgY29uc3QgdmlzdWFsRGVsdGEgPSBjcmVhdGVEZWx0YSgpO1xuICAgICAgICBpZiAoaXNTaGFyZWQpIHtcbiAgICAgICAgICAgIGNhbGNCb3hEZWx0YSh2aXN1YWxEZWx0YSwgbm9kZS5hcHBseVRyYW5zZm9ybShtZWFzdXJlZExheW91dCwgdHJ1ZSksIHNuYXBzaG90Lm1lYXN1cmVkQm94KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNhbGNCb3hEZWx0YSh2aXN1YWxEZWx0YSwgbGF5b3V0LCBzbmFwc2hvdC5sYXlvdXRCb3gpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhhc0xheW91dENoYW5nZWQgPSAhaXNEZWx0YVplcm8obGF5b3V0RGVsdGEpO1xuICAgICAgICBsZXQgaGFzUmVsYXRpdmVUYXJnZXRDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIGlmICghbm9kZS5yZXN1bWVGcm9tKSB7XG4gICAgICAgICAgICBjb25zdCByZWxhdGl2ZVBhcmVudCA9IG5vZGUuZ2V0Q2xvc2VzdFByb2plY3RpbmdQYXJlbnQoKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhlIHJlbGF0aXZlUGFyZW50IGlzIGl0c2VsZiByZXN1bWluZyBmcm9tIGEgZGlmZmVyZW50IGVsZW1lbnQgdGhlblxuICAgICAgICAgICAgICogdGhlIHJlbGF0aXZlIHNuYXBzaG90IGlzIG5vdCByZWxhdmVudFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAocmVsYXRpdmVQYXJlbnQgJiYgIXJlbGF0aXZlUGFyZW50LnJlc3VtZUZyb20pIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHNuYXBzaG90OiBwYXJlbnRTbmFwc2hvdCwgbGF5b3V0OiBwYXJlbnRMYXlvdXQgfSA9IHJlbGF0aXZlUGFyZW50O1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnRTbmFwc2hvdCAmJiBwYXJlbnRMYXlvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVsYXRpdmVTbmFwc2hvdCA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgICAgICAgICBjYWxjUmVsYXRpdmVQb3NpdGlvbihyZWxhdGl2ZVNuYXBzaG90LCBzbmFwc2hvdC5sYXlvdXRCb3gsIHBhcmVudFNuYXBzaG90LmxheW91dEJveCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbGF0aXZlTGF5b3V0ID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICAgICAgICAgIGNhbGNSZWxhdGl2ZVBvc2l0aW9uKHJlbGF0aXZlTGF5b3V0LCBsYXlvdXQsIHBhcmVudExheW91dC5sYXlvdXRCb3gpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWJveEVxdWFsc1JvdW5kZWQocmVsYXRpdmVTbmFwc2hvdCwgcmVsYXRpdmVMYXlvdXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNSZWxhdGl2ZVRhcmdldENoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWxhdGl2ZVBhcmVudC5vcHRpb25zLmxheW91dFJvb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucmVsYXRpdmVUYXJnZXQgPSByZWxhdGl2ZUxheW91dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucmVsYXRpdmVUYXJnZXRPcmlnaW4gPSByZWxhdGl2ZVNuYXBzaG90O1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5yZWxhdGl2ZVBhcmVudCA9IHJlbGF0aXZlUGFyZW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5vZGUubm90aWZ5TGlzdGVuZXJzKFwiZGlkVXBkYXRlXCIsIHtcbiAgICAgICAgICAgIGxheW91dCxcbiAgICAgICAgICAgIHNuYXBzaG90LFxuICAgICAgICAgICAgZGVsdGE6IHZpc3VhbERlbHRhLFxuICAgICAgICAgICAgbGF5b3V0RGVsdGEsXG4gICAgICAgICAgICBoYXNMYXlvdXRDaGFuZ2VkLFxuICAgICAgICAgICAgaGFzUmVsYXRpdmVUYXJnZXRDaGFuZ2VkLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAobm9kZS5pc0xlYWQoKSkge1xuICAgICAgICBjb25zdCB7IG9uRXhpdENvbXBsZXRlIH0gPSBub2RlLm9wdGlvbnM7XG4gICAgICAgIG9uRXhpdENvbXBsZXRlICYmIG9uRXhpdENvbXBsZXRlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFyaW5nIHRyYW5zaXRpb25cbiAgICAgKiBUT0RPOiBJbnZlc3RpZ2F0ZSB3aHkgdGhpcyB0cmFuc2l0aW9uIGlzIGJlaW5nIHBhc3NlZCBpbiBhcyB7dHlwZTogZmFsc2UgfSBmcm9tIEZyYW1lclxuICAgICAqIGFuZCB3aHkgd2UgbmVlZCBpdCBhdCBhbGxcbiAgICAgKi9cbiAgICBub2RlLm9wdGlvbnMudHJhbnNpdGlvbiA9IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIHByb3BhZ2F0ZURpcnR5Tm9kZXMobm9kZSkge1xuICAgIC8qKlxuICAgICAqIEluY3JlYXNlIGRlYnVnIGNvdW50ZXIgZm9yIG5vZGVzIGVuY291bnRlcmVkIHRoaXMgZnJhbWVcbiAgICAgKi9cbiAgICBwcm9qZWN0aW9uRnJhbWVEYXRhLnRvdGFsTm9kZXMrKztcbiAgICBpZiAoIW5vZGUucGFyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgLyoqXG4gICAgICogSWYgdGhpcyBub2RlIGlzbid0IHByb2plY3RpbmcsIHByb3BhZ2F0ZSBpc1Byb2plY3Rpb25EaXJ0eS4gSXQgd2lsbCBoYXZlXG4gICAgICogbm8gcGVyZm9ybWFuY2UgaW1wYWN0IGJ1dCBpdCB3aWxsIGFsbG93IHRoZSBuZXh0IGNoaWxkIHRoYXQgKmlzKiBwcm9qZWN0aW5nXG4gICAgICogYnV0ICppc24ndCogZGlydHkgdG8ganVzdCBjaGVjayBpdHMgcGFyZW50IHRvIHNlZSBpZiAqYW55KiBhbmNlc3RvciBuZWVkc1xuICAgICAqIGNvcnJlY3RpbmcuXG4gICAgICovXG4gICAgaWYgKCFub2RlLmlzUHJvamVjdGluZygpKSB7XG4gICAgICAgIG5vZGUuaXNQcm9qZWN0aW9uRGlydHkgPSBub2RlLnBhcmVudC5pc1Byb2plY3Rpb25EaXJ0eTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvcGFnYXRlIGlzU2hhcmVkUHJvamVjdGlvbkRpcnR5IGFuZCBpc1RyYW5zZm9ybURpcnR5XG4gICAgICogdGhyb3VnaG91dCB0aGUgd2hvbGUgdHJlZS4gQSBmdXR1cmUgcmV2aXNpb24gY2FuIHRha2UgYW5vdGhlciBsb29rIGF0XG4gICAgICogdGhpcyBidXQgZm9yIHNhZmV0eSB3ZSBzdGlsbCByZWNhbGN1YWx0ZSBzaGFyZWQgbm9kZXMuXG4gICAgICovXG4gICAgbm9kZS5pc1NoYXJlZFByb2plY3Rpb25EaXJ0eSB8fCAobm9kZS5pc1NoYXJlZFByb2plY3Rpb25EaXJ0eSA9IEJvb2xlYW4obm9kZS5pc1Byb2plY3Rpb25EaXJ0eSB8fFxuICAgICAgICBub2RlLnBhcmVudC5pc1Byb2plY3Rpb25EaXJ0eSB8fFxuICAgICAgICBub2RlLnBhcmVudC5pc1NoYXJlZFByb2plY3Rpb25EaXJ0eSkpO1xuICAgIG5vZGUuaXNUcmFuc2Zvcm1EaXJ0eSB8fCAobm9kZS5pc1RyYW5zZm9ybURpcnR5ID0gbm9kZS5wYXJlbnQuaXNUcmFuc2Zvcm1EaXJ0eSk7XG59XG5mdW5jdGlvbiBjbGVhbkRpcnR5Tm9kZXMobm9kZSkge1xuICAgIG5vZGUuaXNQcm9qZWN0aW9uRGlydHkgPVxuICAgICAgICBub2RlLmlzU2hhcmVkUHJvamVjdGlvbkRpcnR5ID1cbiAgICAgICAgICAgIG5vZGUuaXNUcmFuc2Zvcm1EaXJ0eSA9XG4gICAgICAgICAgICAgICAgZmFsc2U7XG59XG5mdW5jdGlvbiBjbGVhclNuYXBzaG90KG5vZGUpIHtcbiAgICBub2RlLmNsZWFyU25hcHNob3QoKTtcbn1cbmZ1bmN0aW9uIGNsZWFyTWVhc3VyZW1lbnRzKG5vZGUpIHtcbiAgICBub2RlLmNsZWFyTWVhc3VyZW1lbnRzKCk7XG59XG5mdW5jdGlvbiBjbGVhcklzTGF5b3V0RGlydHkobm9kZSkge1xuICAgIG5vZGUuaXNMYXlvdXREaXJ0eSA9IGZhbHNlO1xufVxuZnVuY3Rpb24gcmVzZXRUcmFuc2Zvcm1TdHlsZShub2RlKSB7XG4gICAgY29uc3QgeyB2aXN1YWxFbGVtZW50IH0gPSBub2RlLm9wdGlvbnM7XG4gICAgaWYgKHZpc3VhbEVsZW1lbnQgJiYgdmlzdWFsRWxlbWVudC5nZXRQcm9wcygpLm9uQmVmb3JlTGF5b3V0TWVhc3VyZSkge1xuICAgICAgICB2aXN1YWxFbGVtZW50Lm5vdGlmeShcIkJlZm9yZUxheW91dE1lYXN1cmVcIik7XG4gICAgfVxuICAgIG5vZGUucmVzZXRUcmFuc2Zvcm0oKTtcbn1cbmZ1bmN0aW9uIGZpbmlzaEFuaW1hdGlvbihub2RlKSB7XG4gICAgbm9kZS5maW5pc2hBbmltYXRpb24oKTtcbiAgICBub2RlLnRhcmdldERlbHRhID0gbm9kZS5yZWxhdGl2ZVRhcmdldCA9IG5vZGUudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgIG5vZGUuaXNQcm9qZWN0aW9uRGlydHkgPSB0cnVlO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVRhcmdldERlbHRhKG5vZGUpIHtcbiAgICBub2RlLnJlc29sdmVUYXJnZXREZWx0YSgpO1xufVxuZnVuY3Rpb24gY2FsY1Byb2plY3Rpb24obm9kZSkge1xuICAgIG5vZGUuY2FsY1Byb2plY3Rpb24oKTtcbn1cbmZ1bmN0aW9uIHJlc2V0Um90YXRpb24obm9kZSkge1xuICAgIG5vZGUucmVzZXRSb3RhdGlvbigpO1xufVxuZnVuY3Rpb24gcmVtb3ZlTGVhZFNuYXBzaG90cyhzdGFjaykge1xuICAgIHN0YWNrLnJlbW92ZUxlYWRTbmFwc2hvdCgpO1xufVxuZnVuY3Rpb24gbWl4QXhpc0RlbHRhKG91dHB1dCwgZGVsdGEsIHApIHtcbiAgICBvdXRwdXQudHJhbnNsYXRlID0gbWl4KGRlbHRhLnRyYW5zbGF0ZSwgMCwgcCk7XG4gICAgb3V0cHV0LnNjYWxlID0gbWl4KGRlbHRhLnNjYWxlLCAxLCBwKTtcbiAgICBvdXRwdXQub3JpZ2luID0gZGVsdGEub3JpZ2luO1xuICAgIG91dHB1dC5vcmlnaW5Qb2ludCA9IGRlbHRhLm9yaWdpblBvaW50O1xufVxuZnVuY3Rpb24gbWl4QXhpcyhvdXRwdXQsIGZyb20sIHRvLCBwKSB7XG4gICAgb3V0cHV0Lm1pbiA9IG1peChmcm9tLm1pbiwgdG8ubWluLCBwKTtcbiAgICBvdXRwdXQubWF4ID0gbWl4KGZyb20ubWF4LCB0by5tYXgsIHApO1xufVxuZnVuY3Rpb24gbWl4Qm94KG91dHB1dCwgZnJvbSwgdG8sIHApIHtcbiAgICBtaXhBeGlzKG91dHB1dC54LCBmcm9tLngsIHRvLngsIHApO1xuICAgIG1peEF4aXMob3V0cHV0LnksIGZyb20ueSwgdG8ueSwgcCk7XG59XG5mdW5jdGlvbiBoYXNPcGFjaXR5Q3Jvc3NmYWRlKG5vZGUpIHtcbiAgICByZXR1cm4gKG5vZGUuYW5pbWF0aW9uVmFsdWVzICYmIG5vZGUuYW5pbWF0aW9uVmFsdWVzLm9wYWNpdHlFeGl0ICE9PSB1bmRlZmluZWQpO1xufVxuY29uc3QgZGVmYXVsdExheW91dFRyYW5zaXRpb24gPSB7XG4gICAgZHVyYXRpb246IDAuNDUsXG4gICAgZWFzZTogWzAuNCwgMCwgMC4xLCAxXSxcbn07XG5jb25zdCB1c2VyQWdlbnRDb250YWlucyA9IChzdHJpbmcpID0+IHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoc3RyaW5nKTtcbi8qKlxuICogTWVhc3VyZWQgYm91bmRpbmcgYm94ZXMgbXVzdCBiZSByb3VuZGVkIGluIFNhZmFyaSBhbmRcbiAqIGxlZnQgdW50b3VjaGVkIGluIENocm9tZSwgb3RoZXJ3aXNlIG5vbi1pbnRlZ2VyIGxheW91dHMgd2l0aGluIHNjYWxlZC11cCBlbGVtZW50c1xuICogY2FuIGFwcGVhciB0byBqdW1wLlxuICovXG5jb25zdCByb3VuZFBvaW50ID0gdXNlckFnZW50Q29udGFpbnMoXCJhcHBsZXdlYmtpdC9cIikgJiYgIXVzZXJBZ2VudENvbnRhaW5zKFwiY2hyb21lL1wiKVxuICAgID8gTWF0aC5yb3VuZFxuICAgIDogbm9vcDtcbmZ1bmN0aW9uIHJvdW5kQXhpcyhheGlzKSB7XG4gICAgLy8gUm91bmQgdG8gdGhlIG5lYXJlc3QgLjUgcGl4ZWxzIHRvIHN1cHBvcnQgc3VicGl4ZWwgbGF5b3V0c1xuICAgIGF4aXMubWluID0gcm91bmRQb2ludChheGlzLm1pbik7XG4gICAgYXhpcy5tYXggPSByb3VuZFBvaW50KGF4aXMubWF4KTtcbn1cbmZ1bmN0aW9uIHJvdW5kQm94KGJveCkge1xuICAgIHJvdW5kQXhpcyhib3gueCk7XG4gICAgcm91bmRBeGlzKGJveC55KTtcbn1cbmZ1bmN0aW9uIHNob3VsZEFuaW1hdGVQb3NpdGlvbk9ubHkoYW5pbWF0aW9uVHlwZSwgc25hcHNob3QsIGxheW91dCkge1xuICAgIHJldHVybiAoYW5pbWF0aW9uVHlwZSA9PT0gXCJwb3NpdGlvblwiIHx8XG4gICAgICAgIChhbmltYXRpb25UeXBlID09PSBcInByZXNlcnZlLWFzcGVjdFwiICYmXG4gICAgICAgICAgICAhaXNOZWFyKGFzcGVjdFJhdGlvKHNuYXBzaG90KSwgYXNwZWN0UmF0aW8obGF5b3V0KSwgMC4yKSkpO1xufVxuXG5leHBvcnQgeyBjbGVhbkRpcnR5Tm9kZXMsIGNyZWF0ZVByb2plY3Rpb25Ob2RlLCBtaXhBeGlzLCBtaXhBeGlzRGVsdGEsIG1peEJveCwgcHJvcGFnYXRlRGlydHlOb2RlcyB9O1xuIiwiZnVuY3Rpb24gcmVjb3JkKGRhdGEpIHtcbiAgICBpZiAod2luZG93Lk1vdGlvbkRlYnVnKSB7XG4gICAgICAgIHdpbmRvdy5Nb3Rpb25EZWJ1Zy5yZWNvcmQoZGF0YSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyByZWNvcmQgfTtcbiIsImZ1bmN0aW9uIGlzU1ZHRWxlbWVudChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgaW5zdGFuY2VvZiBTVkdFbGVtZW50ICYmIGVsZW1lbnQudGFnTmFtZSAhPT0gXCJzdmdcIjtcbn1cblxuZXhwb3J0IHsgaXNTVkdFbGVtZW50IH07XG4iLCJpbXBvcnQgeyBmcmFtZSwgY2FuY2VsRnJhbWUgfSBmcm9tICcuLi9mcmFtZWxvb3AvZnJhbWUubWpzJztcblxuLyoqXG4gKiBUaW1lb3V0IGRlZmluZWQgaW4gbXNcbiAqL1xuZnVuY3Rpb24gZGVsYXkoY2FsbGJhY2ssIHRpbWVvdXQpIHtcbiAgICBjb25zdCBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIGNvbnN0IGNoZWNrRWxhcHNlZCA9ICh7IHRpbWVzdGFtcCB9KSA9PiB7XG4gICAgICAgIGNvbnN0IGVsYXBzZWQgPSB0aW1lc3RhbXAgLSBzdGFydDtcbiAgICAgICAgaWYgKGVsYXBzZWQgPj0gdGltZW91dCkge1xuICAgICAgICAgICAgY2FuY2VsRnJhbWUoY2hlY2tFbGFwc2VkKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVsYXBzZWQgLSB0aW1lb3V0KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgZnJhbWUucmVhZChjaGVja0VsYXBzZWQsIHRydWUpO1xuICAgIHJldHVybiAoKSA9PiBjYW5jZWxGcmFtZShjaGVja0VsYXBzZWQpO1xufVxuXG5leHBvcnQgeyBkZWxheSB9O1xuIiwiaW1wb3J0IHsgYW5pbWF0ZU1vdGlvblZhbHVlIH0gZnJvbSAnLi9tb3Rpb24tdmFsdWUubWpzJztcbmltcG9ydCB7IG1vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vdmFsdWUvaW5kZXgubWpzJztcbmltcG9ydCB7IGlzTW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi92YWx1ZS91dGlscy9pcy1tb3Rpb24tdmFsdWUubWpzJztcblxuZnVuY3Rpb24gYW5pbWF0ZVNpbmdsZVZhbHVlKHZhbHVlLCBrZXlmcmFtZXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBtb3Rpb25WYWx1ZSQxID0gaXNNb3Rpb25WYWx1ZSh2YWx1ZSkgPyB2YWx1ZSA6IG1vdGlvblZhbHVlKHZhbHVlKTtcbiAgICBtb3Rpb25WYWx1ZSQxLnN0YXJ0KGFuaW1hdGVNb3Rpb25WYWx1ZShcIlwiLCBtb3Rpb25WYWx1ZSQxLCBrZXlmcmFtZXMsIG9wdGlvbnMpKTtcbiAgICByZXR1cm4gbW90aW9uVmFsdWUkMS5hbmltYXRpb247XG59XG5cbmV4cG9ydCB7IGFuaW1hdGVTaW5nbGVWYWx1ZSB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlUHJvamVjdGlvbk5vZGUgfSBmcm9tICcuL2NyZWF0ZS1wcm9qZWN0aW9uLW5vZGUubWpzJztcbmltcG9ydCB7IGFkZERvbUV2ZW50IH0gZnJvbSAnLi4vLi4vZXZlbnRzL2FkZC1kb20tZXZlbnQubWpzJztcblxuY29uc3QgRG9jdW1lbnRQcm9qZWN0aW9uTm9kZSA9IGNyZWF0ZVByb2plY3Rpb25Ob2RlKHtcbiAgICBhdHRhY2hSZXNpemVMaXN0ZW5lcjogKHJlZiwgbm90aWZ5KSA9PiBhZGREb21FdmVudChyZWYsIFwicmVzaXplXCIsIG5vdGlmeSksXG4gICAgbWVhc3VyZVNjcm9sbDogKCkgPT4gKHtcbiAgICAgICAgeDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0LFxuICAgICAgICB5OiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wLFxuICAgIH0pLFxuICAgIGNoZWNrSXNTY3JvbGxSb290OiAoKSA9PiB0cnVlLFxufSk7XG5cbmV4cG9ydCB7IERvY3VtZW50UHJvamVjdGlvbk5vZGUgfTtcbiIsImltcG9ydCB7IGNyZWF0ZVByb2plY3Rpb25Ob2RlIH0gZnJvbSAnLi9jcmVhdGUtcHJvamVjdGlvbi1ub2RlLm1qcyc7XG5pbXBvcnQgeyBEb2N1bWVudFByb2plY3Rpb25Ob2RlIH0gZnJvbSAnLi9Eb2N1bWVudFByb2plY3Rpb25Ob2RlLm1qcyc7XG5cbmNvbnN0IHJvb3RQcm9qZWN0aW9uTm9kZSA9IHtcbiAgICBjdXJyZW50OiB1bmRlZmluZWQsXG59O1xuY29uc3QgSFRNTFByb2plY3Rpb25Ob2RlID0gY3JlYXRlUHJvamVjdGlvbk5vZGUoe1xuICAgIG1lYXN1cmVTY3JvbGw6IChpbnN0YW5jZSkgPT4gKHtcbiAgICAgICAgeDogaW5zdGFuY2Uuc2Nyb2xsTGVmdCxcbiAgICAgICAgeTogaW5zdGFuY2Uuc2Nyb2xsVG9wLFxuICAgIH0pLFxuICAgIGRlZmF1bHRQYXJlbnQ6ICgpID0+IHtcbiAgICAgICAgaWYgKCFyb290UHJvamVjdGlvbk5vZGUuY3VycmVudCkge1xuICAgICAgICAgICAgY29uc3QgZG9jdW1lbnROb2RlID0gbmV3IERvY3VtZW50UHJvamVjdGlvbk5vZGUoe30pO1xuICAgICAgICAgICAgZG9jdW1lbnROb2RlLm1vdW50KHdpbmRvdyk7XG4gICAgICAgICAgICBkb2N1bWVudE5vZGUuc2V0T3B0aW9ucyh7IGxheW91dFNjcm9sbDogdHJ1ZSB9KTtcbiAgICAgICAgICAgIHJvb3RQcm9qZWN0aW9uTm9kZS5jdXJyZW50ID0gZG9jdW1lbnROb2RlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByb290UHJvamVjdGlvbk5vZGUuY3VycmVudDtcbiAgICB9LFxuICAgIHJlc2V0VHJhbnNmb3JtOiAoaW5zdGFuY2UsIHZhbHVlKSA9PiB7XG4gICAgICAgIGluc3RhbmNlLnN0eWxlLnRyYW5zZm9ybSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IFwibm9uZVwiO1xuICAgIH0sXG4gICAgY2hlY2tJc1Njcm9sbFJvb3Q6IChpbnN0YW5jZSkgPT4gQm9vbGVhbih3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShpbnN0YW5jZSkucG9zaXRpb24gPT09IFwiZml4ZWRcIiksXG59KTtcblxuZXhwb3J0IHsgSFRNTFByb2plY3Rpb25Ob2RlLCByb290UHJvamVjdGlvbk5vZGUgfTtcbiIsImltcG9ydCB7IERyYWdHZXN0dXJlIH0gZnJvbSAnLi4vLi4vZ2VzdHVyZXMvZHJhZy9pbmRleC5tanMnO1xuaW1wb3J0IHsgUGFuR2VzdHVyZSB9IGZyb20gJy4uLy4uL2dlc3R1cmVzL3Bhbi9pbmRleC5tanMnO1xuaW1wb3J0IHsgTWVhc3VyZUxheW91dCB9IGZyb20gJy4vbGF5b3V0L01lYXN1cmVMYXlvdXQubWpzJztcbmltcG9ydCB7IEhUTUxQcm9qZWN0aW9uTm9kZSB9IGZyb20gJy4uLy4uL3Byb2plY3Rpb24vbm9kZS9IVE1MUHJvamVjdGlvbk5vZGUubWpzJztcblxuY29uc3QgZHJhZyA9IHtcbiAgICBwYW46IHtcbiAgICAgICAgRmVhdHVyZTogUGFuR2VzdHVyZSxcbiAgICB9LFxuICAgIGRyYWc6IHtcbiAgICAgICAgRmVhdHVyZTogRHJhZ0dlc3R1cmUsXG4gICAgICAgIFByb2plY3Rpb25Ob2RlOiBIVE1MUHJvamVjdGlvbk5vZGUsXG4gICAgICAgIE1lYXN1cmVMYXlvdXQsXG4gICAgfSxcbn07XG5cbmV4cG9ydCB7IGRyYWcgfTtcbiIsImltcG9ydCB7IEZlYXR1cmUgfSBmcm9tICcuLi8uLi9tb3Rpb24vZmVhdHVyZXMvRmVhdHVyZS5tanMnO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uLy4uL3V0aWxzL25vb3AubWpzJztcbmltcG9ydCB7IFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMgfSBmcm9tICcuL1Zpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMubWpzJztcblxuY2xhc3MgRHJhZ0dlc3R1cmUgZXh0ZW5kcyBGZWF0dXJlIHtcbiAgICBjb25zdHJ1Y3Rvcihub2RlKSB7XG4gICAgICAgIHN1cGVyKG5vZGUpO1xuICAgICAgICB0aGlzLnJlbW92ZUdyb3VwQ29udHJvbHMgPSBub29wO1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVycyA9IG5vb3A7XG4gICAgICAgIHRoaXMuY29udHJvbHMgPSBuZXcgVmlzdWFsRWxlbWVudERyYWdDb250cm9scyhub2RlKTtcbiAgICB9XG4gICAgbW91bnQoKSB7XG4gICAgICAgIC8vIElmIHdlJ3ZlIGJlZW4gcHJvdmlkZWQgYSBEcmFnQ29udHJvbHMgZm9yIG1hbnVhbCBjb250cm9sIG92ZXIgdGhlIGRyYWcgZ2VzdHVyZSxcbiAgICAgICAgLy8gc3Vic2NyaWJlIHRoaXMgY29tcG9uZW50IHRvIGl0IG9uIG1vdW50LlxuICAgICAgICBjb25zdCB7IGRyYWdDb250cm9scyB9ID0gdGhpcy5ub2RlLmdldFByb3BzKCk7XG4gICAgICAgIGlmIChkcmFnQ29udHJvbHMpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlR3JvdXBDb250cm9scyA9IGRyYWdDb250cm9scy5zdWJzY3JpYmUodGhpcy5jb250cm9scyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMgPSB0aGlzLmNvbnRyb2xzLmFkZExpc3RlbmVycygpIHx8IG5vb3A7XG4gICAgfVxuICAgIHVubW91bnQoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlR3JvdXBDb250cm9scygpO1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVycygpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgRHJhZ0dlc3R1cmUgfTtcbiIsImltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2Vycm9ycy5tanMnO1xuaW1wb3J0IHsgaXNOdW1lcmljYWxTdHJpbmcgfSBmcm9tICcuLi8uLi8uLi91dGlscy9pcy1udW1lcmljYWwtc3RyaW5nLm1qcyc7XG5pbXBvcnQgeyBpc0NTU1ZhcmlhYmxlVG9rZW4gfSBmcm9tICcuL2lzLWNzcy12YXJpYWJsZS5tanMnO1xuXG4vKipcbiAqIFBhcnNlIEZyYW1lcidzIHNwZWNpYWwgQ1NTIHZhcmlhYmxlIGZvcm1hdCBpbnRvIGEgQ1NTIHRva2VuIGFuZCBhIGZhbGxiYWNrLlxuICpcbiAqIGBgYFxuICogYHZhcigtLWZvbywgI2ZmZilgID0+IFtgLS1mb29gLCAnI2ZmZiddXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gY3VycmVudFxuICovXG5jb25zdCBzcGxpdENTU1ZhcmlhYmxlUmVnZXggPSAvdmFyXFwoKC0tW2EtekEtWjAtOS1fXSspLD8gPyhbYS16QS1aMC05ICgpJSMuLC1dKyk/XFwpLztcbmZ1bmN0aW9uIHBhcnNlQ1NTVmFyaWFibGUoY3VycmVudCkge1xuICAgIGNvbnN0IG1hdGNoID0gc3BsaXRDU1NWYXJpYWJsZVJlZ2V4LmV4ZWMoY3VycmVudCk7XG4gICAgaWYgKCFtYXRjaClcbiAgICAgICAgcmV0dXJuIFssXTtcbiAgICBjb25zdCBbLCB0b2tlbiwgZmFsbGJhY2tdID0gbWF0Y2g7XG4gICAgcmV0dXJuIFt0b2tlbiwgZmFsbGJhY2tdO1xufVxuY29uc3QgbWF4RGVwdGggPSA0O1xuZnVuY3Rpb24gZ2V0VmFyaWFibGVWYWx1ZShjdXJyZW50LCBlbGVtZW50LCBkZXB0aCA9IDEpIHtcbiAgICBpbnZhcmlhbnQoZGVwdGggPD0gbWF4RGVwdGgsIGBNYXggQ1NTIHZhcmlhYmxlIGZhbGxiYWNrIGRlcHRoIGRldGVjdGVkIGluIHByb3BlcnR5IFwiJHtjdXJyZW50fVwiLiBUaGlzIG1heSBpbmRpY2F0ZSBhIGNpcmN1bGFyIGZhbGxiYWNrIGRlcGVuZGVuY3kuYCk7XG4gICAgY29uc3QgW3Rva2VuLCBmYWxsYmFja10gPSBwYXJzZUNTU1ZhcmlhYmxlKGN1cnJlbnQpO1xuICAgIC8vIE5vIENTUyB2YXJpYWJsZSBkZXRlY3RlZFxuICAgIGlmICghdG9rZW4pXG4gICAgICAgIHJldHVybjtcbiAgICAvLyBBdHRlbXB0IHRvIHJlYWQgdGhpcyBDU1MgdmFyaWFibGUgb2ZmIHRoZSBlbGVtZW50XG4gICAgY29uc3QgcmVzb2x2ZWQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKHRva2VuKTtcbiAgICBpZiAocmVzb2x2ZWQpIHtcbiAgICAgICAgY29uc3QgdHJpbW1lZCA9IHJlc29sdmVkLnRyaW0oKTtcbiAgICAgICAgcmV0dXJuIGlzTnVtZXJpY2FsU3RyaW5nKHRyaW1tZWQpID8gcGFyc2VGbG9hdCh0cmltbWVkKSA6IHRyaW1tZWQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQ1NTVmFyaWFibGVUb2tlbihmYWxsYmFjaykpIHtcbiAgICAgICAgLy8gVGhlIGZhbGxiYWNrIG1pZ2h0IGl0c2VsZiBiZSBhIENTUyB2YXJpYWJsZSwgaW4gd2hpY2ggY2FzZSB3ZSBhdHRlbXB0IHRvIHJlc29sdmUgaXQgdG9vLlxuICAgICAgICByZXR1cm4gZ2V0VmFyaWFibGVWYWx1ZShmYWxsYmFjaywgZWxlbWVudCwgZGVwdGggKyAxKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxsYmFjaztcbiAgICB9XG59XG4vKipcbiAqIFJlc29sdmUgQ1NTIHZhcmlhYmxlcyBmcm9tXG4gKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVDU1NWYXJpYWJsZXModmlzdWFsRWxlbWVudCwgeyAuLi50YXJnZXQgfSwgdHJhbnNpdGlvbkVuZCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSB2aXN1YWxFbGVtZW50LmN1cnJlbnQ7XG4gICAgaWYgKCEoZWxlbWVudCBpbnN0YW5jZW9mIEVsZW1lbnQpKVxuICAgICAgICByZXR1cm4geyB0YXJnZXQsIHRyYW5zaXRpb25FbmQgfTtcbiAgICAvLyBJZiBgdHJhbnNpdGlvbkVuZGAgaXNuJ3QgYHVuZGVmaW5lZGAsIGNsb25lIGl0LiBXZSBjb3VsZCBjbG9uZSBgdGFyZ2V0YCBhbmQgYHRyYW5zaXRpb25FbmRgXG4gICAgLy8gb25seSBpZiB0aGV5IGNoYW5nZSBidXQgSSB0aGluayB0aGlzIHJlYWRzIGNsZWFyZXIgYW5kIHRoaXMgaXNuJ3QgYSBwZXJmb3JtYW5jZS1jcml0aWNhbCBwYXRoLlxuICAgIGlmICh0cmFuc2l0aW9uRW5kKSB7XG4gICAgICAgIHRyYW5zaXRpb25FbmQgPSB7IC4uLnRyYW5zaXRpb25FbmQgfTtcbiAgICB9XG4gICAgLy8gR28gdGhyb3VnaCBleGlzdGluZyBgTW90aW9uVmFsdWVgcyBhbmQgZW5zdXJlIGFueSBleGlzdGluZyBDU1MgdmFyaWFibGVzIGFyZSByZXNvbHZlZFxuICAgIHZpc3VhbEVsZW1lbnQudmFsdWVzLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSB2YWx1ZS5nZXQoKTtcbiAgICAgICAgaWYgKCFpc0NTU1ZhcmlhYmxlVG9rZW4oY3VycmVudCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHJlc29sdmVkID0gZ2V0VmFyaWFibGVWYWx1ZShjdXJyZW50LCBlbGVtZW50KTtcbiAgICAgICAgaWYgKHJlc29sdmVkKVxuICAgICAgICAgICAgdmFsdWUuc2V0KHJlc29sdmVkKTtcbiAgICB9KTtcbiAgICAvLyBDeWNsZSB0aHJvdWdoIGV2ZXJ5IHRhcmdldCBwcm9wZXJ0eSBhbmQgcmVzb2x2ZSBDU1MgdmFyaWFibGVzLiBDdXJyZW50bHlcbiAgICAvLyB3ZSBvbmx5IHJlYWQgc2luZ2xlLXZhciBwcm9wZXJ0aWVzIGxpa2UgYHZhcigtLWZvbylgLCBub3QgYGNhbGModmFyKC0tZm9vKSArIDIwcHgpYFxuICAgIGZvciAoY29uc3Qga2V5IGluIHRhcmdldCkge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gdGFyZ2V0W2tleV07XG4gICAgICAgIGlmICghaXNDU1NWYXJpYWJsZVRva2VuKGN1cnJlbnQpKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNvbnN0IHJlc29sdmVkID0gZ2V0VmFyaWFibGVWYWx1ZShjdXJyZW50LCBlbGVtZW50KTtcbiAgICAgICAgaWYgKCFyZXNvbHZlZClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAvLyBDbG9uZSB0YXJnZXQgaWYgaXQgaGFzbid0IGFscmVhZHkgYmVlblxuICAgICAgICB0YXJnZXRba2V5XSA9IHJlc29sdmVkO1xuICAgICAgICBpZiAoIXRyYW5zaXRpb25FbmQpXG4gICAgICAgICAgICB0cmFuc2l0aW9uRW5kID0ge307XG4gICAgICAgIC8vIElmIHRoZSB1c2VyIGhhc24ndCBhbHJlYWR5IHNldCB0aGlzIGtleSBvbiBgdHJhbnNpdGlvbkVuZGAsIHNldCBpdCB0byB0aGUgdW5yZXNvbHZlZFxuICAgICAgICAvLyBDU1MgdmFyaWFibGUuIFRoaXMgd2lsbCBlbnN1cmUgdGhhdCBhZnRlciB0aGUgYW5pbWF0aW9uIHRoZSBjb21wb25lbnQgd2lsbCByZWZsZWN0XG4gICAgICAgIC8vIGNoYW5nZXMgaW4gdGhlIHZhbHVlIG9mIHRoZSBDU1MgdmFyaWFibGUuXG4gICAgICAgIGlmICh0cmFuc2l0aW9uRW5kW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbkVuZFtrZXldID0gY3VycmVudDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyB0YXJnZXQsIHRyYW5zaXRpb25FbmQgfTtcbn1cblxuZXhwb3J0IHsgcGFyc2VDU1NWYXJpYWJsZSwgcmVzb2x2ZUNTU1ZhcmlhYmxlcyB9O1xuIiwiaW1wb3J0IHsgaXNLZXlmcmFtZXNUYXJnZXQgfSBmcm9tICcuLi8uLi8uLi9hbmltYXRpb24vdXRpbHMvaXMta2V5ZnJhbWVzLXRhcmdldC5tanMnO1xuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvZXJyb3JzLm1qcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm1Qcm9wT3JkZXIgfSBmcm9tICcuLi8uLi9odG1sL3V0aWxzL3RyYW5zZm9ybS5tanMnO1xuaW1wb3J0IHsgZmluZERpbWVuc2lvblZhbHVlVHlwZSB9IGZyb20gJy4uL3ZhbHVlLXR5cGVzL2RpbWVuc2lvbnMubWpzJztcbmltcG9ydCB7IGlzQnJvd3NlciB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2lzLWJyb3dzZXIubWpzJztcbmltcG9ydCB7IG51bWJlciB9IGZyb20gJy4uLy4uLy4uL3ZhbHVlL3R5cGVzL251bWJlcnMvaW5kZXgubWpzJztcbmltcG9ydCB7IHB4IH0gZnJvbSAnLi4vLi4vLi4vdmFsdWUvdHlwZXMvbnVtYmVycy91bml0cy5tanMnO1xuXG5jb25zdCBwb3NpdGlvbmFsS2V5cyA9IG5ldyBTZXQoW1xuICAgIFwid2lkdGhcIixcbiAgICBcImhlaWdodFwiLFxuICAgIFwidG9wXCIsXG4gICAgXCJsZWZ0XCIsXG4gICAgXCJyaWdodFwiLFxuICAgIFwiYm90dG9tXCIsXG4gICAgXCJ4XCIsXG4gICAgXCJ5XCIsXG4gICAgXCJ0cmFuc2xhdGVYXCIsXG4gICAgXCJ0cmFuc2xhdGVZXCIsXG5dKTtcbmNvbnN0IGlzUG9zaXRpb25hbEtleSA9IChrZXkpID0+IHBvc2l0aW9uYWxLZXlzLmhhcyhrZXkpO1xuY29uc3QgaGFzUG9zaXRpb25hbEtleSA9ICh0YXJnZXQpID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGFyZ2V0KS5zb21lKGlzUG9zaXRpb25hbEtleSk7XG59O1xuY29uc3QgaXNOdW1PclB4VHlwZSA9ICh2KSA9PiB2ID09PSBudW1iZXIgfHwgdiA9PT0gcHg7XG5jb25zdCBnZXRQb3NGcm9tTWF0cml4ID0gKG1hdHJpeCwgcG9zKSA9PiBwYXJzZUZsb2F0KG1hdHJpeC5zcGxpdChcIiwgXCIpW3Bvc10pO1xuY29uc3QgZ2V0VHJhbnNsYXRlRnJvbU1hdHJpeCA9IChwb3MyLCBwb3MzKSA9PiAoX2Jib3gsIHsgdHJhbnNmb3JtIH0pID0+IHtcbiAgICBpZiAodHJhbnNmb3JtID09PSBcIm5vbmVcIiB8fCAhdHJhbnNmb3JtKVxuICAgICAgICByZXR1cm4gMDtcbiAgICBjb25zdCBtYXRyaXgzZCA9IHRyYW5zZm9ybS5tYXRjaCgvXm1hdHJpeDNkXFwoKC4rKVxcKSQvKTtcbiAgICBpZiAobWF0cml4M2QpIHtcbiAgICAgICAgcmV0dXJuIGdldFBvc0Zyb21NYXRyaXgobWF0cml4M2RbMV0sIHBvczMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgbWF0cml4ID0gdHJhbnNmb3JtLm1hdGNoKC9ebWF0cml4XFwoKC4rKVxcKSQvKTtcbiAgICAgICAgaWYgKG1hdHJpeCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldFBvc0Zyb21NYXRyaXgobWF0cml4WzFdLCBwb3MyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgfVxufTtcbmNvbnN0IHRyYW5zZm9ybUtleXMgPSBuZXcgU2V0KFtcInhcIiwgXCJ5XCIsIFwielwiXSk7XG5jb25zdCBub25UcmFuc2xhdGlvbmFsVHJhbnNmb3JtS2V5cyA9IHRyYW5zZm9ybVByb3BPcmRlci5maWx0ZXIoKGtleSkgPT4gIXRyYW5zZm9ybUtleXMuaGFzKGtleSkpO1xuZnVuY3Rpb24gcmVtb3ZlTm9uVHJhbnNsYXRpb25hbFRyYW5zZm9ybSh2aXN1YWxFbGVtZW50KSB7XG4gICAgY29uc3QgcmVtb3ZlZFRyYW5zZm9ybXMgPSBbXTtcbiAgICBub25UcmFuc2xhdGlvbmFsVHJhbnNmb3JtS2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB2aXN1YWxFbGVtZW50LmdldFZhbHVlKGtleSk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZW1vdmVkVHJhbnNmb3Jtcy5wdXNoKFtrZXksIHZhbHVlLmdldCgpXSk7XG4gICAgICAgICAgICB2YWx1ZS5zZXQoa2V5LnN0YXJ0c1dpdGgoXCJzY2FsZVwiKSA/IDEgOiAwKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIEFwcGx5IGNoYW5nZXMgdG8gZWxlbWVudCBiZWZvcmUgbWVhc3VyZW1lbnRcbiAgICBpZiAocmVtb3ZlZFRyYW5zZm9ybXMubGVuZ3RoKVxuICAgICAgICB2aXN1YWxFbGVtZW50LnJlbmRlcigpO1xuICAgIHJldHVybiByZW1vdmVkVHJhbnNmb3Jtcztcbn1cbmNvbnN0IHBvc2l0aW9uYWxWYWx1ZXMgPSB7XG4gICAgLy8gRGltZW5zaW9uc1xuICAgIHdpZHRoOiAoeyB4IH0sIHsgcGFkZGluZ0xlZnQgPSBcIjBcIiwgcGFkZGluZ1JpZ2h0ID0gXCIwXCIgfSkgPT4geC5tYXggLSB4Lm1pbiAtIHBhcnNlRmxvYXQocGFkZGluZ0xlZnQpIC0gcGFyc2VGbG9hdChwYWRkaW5nUmlnaHQpLFxuICAgIGhlaWdodDogKHsgeSB9LCB7IHBhZGRpbmdUb3AgPSBcIjBcIiwgcGFkZGluZ0JvdHRvbSA9IFwiMFwiIH0pID0+IHkubWF4IC0geS5taW4gLSBwYXJzZUZsb2F0KHBhZGRpbmdUb3ApIC0gcGFyc2VGbG9hdChwYWRkaW5nQm90dG9tKSxcbiAgICB0b3A6IChfYmJveCwgeyB0b3AgfSkgPT4gcGFyc2VGbG9hdCh0b3ApLFxuICAgIGxlZnQ6IChfYmJveCwgeyBsZWZ0IH0pID0+IHBhcnNlRmxvYXQobGVmdCksXG4gICAgYm90dG9tOiAoeyB5IH0sIHsgdG9wIH0pID0+IHBhcnNlRmxvYXQodG9wKSArICh5Lm1heCAtIHkubWluKSxcbiAgICByaWdodDogKHsgeCB9LCB7IGxlZnQgfSkgPT4gcGFyc2VGbG9hdChsZWZ0KSArICh4Lm1heCAtIHgubWluKSxcbiAgICAvLyBUcmFuc2Zvcm1cbiAgICB4OiBnZXRUcmFuc2xhdGVGcm9tTWF0cml4KDQsIDEzKSxcbiAgICB5OiBnZXRUcmFuc2xhdGVGcm9tTWF0cml4KDUsIDE0KSxcbn07XG4vLyBBbGlhcyB0cmFuc2xhdGUgbG9uZ2Zvcm0gbmFtZXNcbnBvc2l0aW9uYWxWYWx1ZXMudHJhbnNsYXRlWCA9IHBvc2l0aW9uYWxWYWx1ZXMueDtcbnBvc2l0aW9uYWxWYWx1ZXMudHJhbnNsYXRlWSA9IHBvc2l0aW9uYWxWYWx1ZXMueTtcbmNvbnN0IGNvbnZlcnRDaGFuZ2VkVmFsdWVUeXBlcyA9ICh0YXJnZXQsIHZpc3VhbEVsZW1lbnQsIGNoYW5nZWRLZXlzKSA9PiB7XG4gICAgY29uc3Qgb3JpZ2luQmJveCA9IHZpc3VhbEVsZW1lbnQubWVhc3VyZVZpZXdwb3J0Qm94KCk7XG4gICAgY29uc3QgZWxlbWVudCA9IHZpc3VhbEVsZW1lbnQuY3VycmVudDtcbiAgICBjb25zdCBlbGVtZW50Q29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gICAgY29uc3QgeyBkaXNwbGF5IH0gPSBlbGVtZW50Q29tcHV0ZWRTdHlsZTtcbiAgICBjb25zdCBvcmlnaW4gPSB7fTtcbiAgICAvLyBJZiB0aGUgZWxlbWVudCBpcyBjdXJyZW50bHkgc2V0IHRvIGRpc3BsYXk6IFwibm9uZVwiLCBtYWtlIGl0IHZpc2libGUgYmVmb3JlXG4gICAgLy8gbWVhc3VyaW5nIHRoZSB0YXJnZXQgYm91bmRpbmcgYm94XG4gICAgaWYgKGRpc3BsYXkgPT09IFwibm9uZVwiKSB7XG4gICAgICAgIHZpc3VhbEVsZW1lbnQuc2V0U3RhdGljVmFsdWUoXCJkaXNwbGF5XCIsIHRhcmdldC5kaXNwbGF5IHx8IFwiYmxvY2tcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlY29yZCBvcmlnaW5zIGJlZm9yZSB3ZSByZW5kZXIgYW5kIHVwZGF0ZSBzdHlsZXNcbiAgICAgKi9cbiAgICBjaGFuZ2VkS2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgb3JpZ2luW2tleV0gPSBwb3NpdGlvbmFsVmFsdWVzW2tleV0ob3JpZ2luQmJveCwgZWxlbWVudENvbXB1dGVkU3R5bGUpO1xuICAgIH0pO1xuICAgIC8vIEFwcGx5IHRoZSBsYXRlc3QgdmFsdWVzIChhcyBzZXQgaW4gY2hlY2tBbmRDb252ZXJ0Q2hhbmdlZFZhbHVlVHlwZXMpXG4gICAgdmlzdWFsRWxlbWVudC5yZW5kZXIoKTtcbiAgICBjb25zdCB0YXJnZXRCYm94ID0gdmlzdWFsRWxlbWVudC5tZWFzdXJlVmlld3BvcnRCb3goKTtcbiAgICBjaGFuZ2VkS2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgLy8gUmVzdG9yZSBzdHlsZXMgdG8gdGhlaXIgKipjYWxjdWxhdGVkIGNvbXB1dGVkIHN0eWxlKiosIG5vdCB0aGVpciBhY3R1YWxcbiAgICAgICAgLy8gb3JpZ2luYWxseSBzZXQgc3R5bGUuIFRoaXMgYWxsb3dzIHVzIHRvIGFuaW1hdGUgYmV0d2VlbiBlcXVpdmFsZW50IHBpeGVsIHVuaXRzLlxuICAgICAgICBjb25zdCB2YWx1ZSA9IHZpc3VhbEVsZW1lbnQuZ2V0VmFsdWUoa2V5KTtcbiAgICAgICAgdmFsdWUgJiYgdmFsdWUuanVtcChvcmlnaW5ba2V5XSk7XG4gICAgICAgIHRhcmdldFtrZXldID0gcG9zaXRpb25hbFZhbHVlc1trZXldKHRhcmdldEJib3gsIGVsZW1lbnRDb21wdXRlZFN0eWxlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGFyZ2V0O1xufTtcbmNvbnN0IGNoZWNrQW5kQ29udmVydENoYW5nZWRWYWx1ZVR5cGVzID0gKHZpc3VhbEVsZW1lbnQsIHRhcmdldCwgb3JpZ2luID0ge30sIHRyYW5zaXRpb25FbmQgPSB7fSkgPT4ge1xuICAgIHRhcmdldCA9IHsgLi4udGFyZ2V0IH07XG4gICAgdHJhbnNpdGlvbkVuZCA9IHsgLi4udHJhbnNpdGlvbkVuZCB9O1xuICAgIGNvbnN0IHRhcmdldFBvc2l0aW9uYWxLZXlzID0gT2JqZWN0LmtleXModGFyZ2V0KS5maWx0ZXIoaXNQb3NpdGlvbmFsS2V5KTtcbiAgICAvLyBXZSB3YW50IHRvIHJlbW92ZSBhbnkgdHJhbnNmb3JtIHZhbHVlcyB0aGF0IGNvdWxkIGFmZmVjdCB0aGUgZWxlbWVudCdzIGJvdW5kaW5nIGJveCBiZWZvcmVcbiAgICAvLyBpdCdzIG1lYXN1cmVkLiBXZSdsbCByZWFwcGx5IHRoZXNlIGxhdGVyLlxuICAgIGxldCByZW1vdmVkVHJhbnNmb3JtVmFsdWVzID0gW107XG4gICAgbGV0IGhhc0F0dGVtcHRlZFRvUmVtb3ZlVHJhbnNmb3JtVmFsdWVzID0gZmFsc2U7XG4gICAgY29uc3QgY2hhbmdlZFZhbHVlVHlwZUtleXMgPSBbXTtcbiAgICB0YXJnZXRQb3NpdGlvbmFsS2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB2aXN1YWxFbGVtZW50LmdldFZhbHVlKGtleSk7XG4gICAgICAgIGlmICghdmlzdWFsRWxlbWVudC5oYXNWYWx1ZShrZXkpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBsZXQgZnJvbSA9IG9yaWdpbltrZXldO1xuICAgICAgICBsZXQgZnJvbVR5cGUgPSBmaW5kRGltZW5zaW9uVmFsdWVUeXBlKGZyb20pO1xuICAgICAgICBjb25zdCB0byA9IHRhcmdldFtrZXldO1xuICAgICAgICBsZXQgdG9UeXBlO1xuICAgICAgICAvLyBUT0RPOiBUaGUgY3VycmVudCBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIGJhc2ljYWxseSB0aHJvd3MgYW4gZXJyb3JcbiAgICAgICAgLy8gaWYgeW91IHRyeSBhbmQgZG8gdmFsdWUgY29udmVyc2lvbiB2aWEga2V5ZnJhbWVzLiBUaGVyZSdzIHByb2JhYmx5XG4gICAgICAgIC8vIGEgd2F5IG9mIGRvaW5nIHRoaXMgYnV0IHRoZSBwZXJmb3JtYW5jZSBpbXBsaWNhdGlvbnMgd291bGQgbmVlZCBncmVhdGVyIHNjcnV0aW55LFxuICAgICAgICAvLyBhcyBpdCdkIGJlIGRvaW5nIG11bHRpcGxlIHJlc2l6ZS1yZW1lYXN1cmUgb3BlcmF0aW9ucy5cbiAgICAgICAgaWYgKGlzS2V5ZnJhbWVzVGFyZ2V0KHRvKSkge1xuICAgICAgICAgICAgY29uc3QgbnVtS2V5ZnJhbWVzID0gdG8ubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgZnJvbUluZGV4ID0gdG9bMF0gPT09IG51bGwgPyAxIDogMDtcbiAgICAgICAgICAgIGZyb20gPSB0b1tmcm9tSW5kZXhdO1xuICAgICAgICAgICAgZnJvbVR5cGUgPSBmaW5kRGltZW5zaW9uVmFsdWVUeXBlKGZyb20pO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGZyb21JbmRleDsgaSA8IG51bUtleWZyYW1lczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogRG9uJ3QgYWxsb3cgd2lsZGNhcmQga2V5ZnJhbWVzIHRvIGJlIHVzZWQgdG8gZGV0ZWN0XG4gICAgICAgICAgICAgICAgICogYSBkaWZmZXJlbmNlIGluIHZhbHVlIHR5cGVzLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGlmICh0b1tpXSA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgaWYgKCF0b1R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9UeXBlID0gZmluZERpbWVuc2lvblZhbHVlVHlwZSh0b1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIGludmFyaWFudCh0b1R5cGUgPT09IGZyb21UeXBlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoaXNOdW1PclB4VHlwZShmcm9tVHlwZSkgJiYgaXNOdW1PclB4VHlwZSh0b1R5cGUpKSwgXCJLZXlmcmFtZXMgbXVzdCBiZSBvZiB0aGUgc2FtZSBkaW1lbnNpb24gYXMgdGhlIGN1cnJlbnQgdmFsdWVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbnZhcmlhbnQoZmluZERpbWVuc2lvblZhbHVlVHlwZSh0b1tpXSkgPT09IHRvVHlwZSwgXCJBbGwga2V5ZnJhbWVzIG11c3QgYmUgb2YgdGhlIHNhbWUgdHlwZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0b1R5cGUgPSBmaW5kRGltZW5zaW9uVmFsdWVUeXBlKHRvKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnJvbVR5cGUgIT09IHRvVHlwZSkge1xuICAgICAgICAgICAgLy8gSWYgdGhleSdyZSBib3RoIGp1c3QgbnVtYmVyIG9yIHB4LCBjb252ZXJ0IHRoZW0gYm90aCB0byBudW1iZXJzIHJhdGhlciB0aGFuXG4gICAgICAgICAgICAvLyByZWx5aW5nIG9uIHJlc2l6ZS9yZW1lYXN1cmUgdG8gY29udmVydCAod2hpY2ggaXMgd2FzdGVmdWwgaW4gdGhpcyBzaXR1YXRpb24pXG4gICAgICAgICAgICBpZiAoaXNOdW1PclB4VHlwZShmcm9tVHlwZSkgJiYgaXNOdW1PclB4VHlwZSh0b1R5cGUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IHZhbHVlLmdldCgpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VycmVudCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZS5zZXQocGFyc2VGbG9hdChjdXJyZW50KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBwYXJzZUZsb2F0KHRvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0bykgJiYgdG9UeXBlID09PSBweCkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHRvLm1hcChwYXJzZUZsb2F0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgoZnJvbVR5cGUgPT09IG51bGwgfHwgZnJvbVR5cGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZyb21UeXBlLnRyYW5zZm9ybSkgJiZcbiAgICAgICAgICAgICAgICAodG9UeXBlID09PSBudWxsIHx8IHRvVHlwZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdG9UeXBlLnRyYW5zZm9ybSkgJiZcbiAgICAgICAgICAgICAgICAoZnJvbSA9PT0gMCB8fCB0byA9PT0gMCkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBvbmUgb3IgdGhlIG90aGVyIHZhbHVlIGlzIDAsIGl0J3Mgc2FmZSB0byBjb2VyY2UgaXQgdG8gdGhlXG4gICAgICAgICAgICAgICAgLy8gdHlwZSBvZiB0aGUgb3RoZXIgd2l0aG91dCBtZWFzdXJlbWVudFxuICAgICAgICAgICAgICAgIGlmIChmcm9tID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLnNldCh0b1R5cGUudHJhbnNmb3JtKGZyb20pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gZnJvbVR5cGUudHJhbnNmb3JtKHRvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSdyZSBnb2luZyB0byBkbyB2YWx1ZSBjb252ZXJzaW9uIHZpYSBET00gbWVhc3VyZW1lbnRzLCB3ZSBmaXJzdFxuICAgICAgICAgICAgICAgIC8vIG5lZWQgdG8gcmVtb3ZlIG5vbi1wb3NpdGlvbmFsIHRyYW5zZm9ybSB2YWx1ZXMgdGhhdCBjb3VsZCBhZmZlY3QgdGhlIGJib3ggbWVhc3VyZW1lbnRzLlxuICAgICAgICAgICAgICAgIGlmICghaGFzQXR0ZW1wdGVkVG9SZW1vdmVUcmFuc2Zvcm1WYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZFRyYW5zZm9ybVZhbHVlcyA9XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVOb25UcmFuc2xhdGlvbmFsVHJhbnNmb3JtKHZpc3VhbEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICBoYXNBdHRlbXB0ZWRUb1JlbW92ZVRyYW5zZm9ybVZhbHVlcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNoYW5nZWRWYWx1ZVR5cGVLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uRW5kW2tleV0gPVxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uRW5kW2tleV0gIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0cmFuc2l0aW9uRW5kW2tleV1cbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGFyZ2V0W2tleV07XG4gICAgICAgICAgICAgICAgdmFsdWUuanVtcCh0byk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoY2hhbmdlZFZhbHVlVHlwZUtleXMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHNjcm9sbFkgPSBjaGFuZ2VkVmFsdWVUeXBlS2V5cy5pbmRleE9mKFwiaGVpZ2h0XCIpID49IDBcbiAgICAgICAgICAgID8gd2luZG93LnBhZ2VZT2Zmc2V0XG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIGNvbnN0IGNvbnZlcnRlZFRhcmdldCA9IGNvbnZlcnRDaGFuZ2VkVmFsdWVUeXBlcyh0YXJnZXQsIHZpc3VhbEVsZW1lbnQsIGNoYW5nZWRWYWx1ZVR5cGVLZXlzKTtcbiAgICAgICAgLy8gSWYgd2UgcmVtb3ZlZCB0cmFuc2Zvcm0gdmFsdWVzLCByZWFwcGx5IHRoZW0gYmVmb3JlIHRoZSBuZXh0IHJlbmRlclxuICAgICAgICBpZiAocmVtb3ZlZFRyYW5zZm9ybVZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlbW92ZWRUcmFuc2Zvcm1WYWx1ZXMuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5nZXRWYWx1ZShrZXkpLnNldCh2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWFwcGx5IG9yaWdpbmFsIHZhbHVlc1xuICAgICAgICB2aXN1YWxFbGVtZW50LnJlbmRlcigpO1xuICAgICAgICAvLyBSZXN0b3JlIHNjcm9sbCBwb3NpdGlvblxuICAgICAgICBpZiAoaXNCcm93c2VyICYmIHNjcm9sbFkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbyh7IHRvcDogc2Nyb2xsWSB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyB0YXJnZXQ6IGNvbnZlcnRlZFRhcmdldCwgdHJhbnNpdGlvbkVuZCB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgdGFyZ2V0LCB0cmFuc2l0aW9uRW5kIH07XG4gICAgfVxufTtcbi8qKlxuICogQ29udmVydCB2YWx1ZSB0eXBlcyBmb3IgeC95L3dpZHRoL2hlaWdodC90b3AvbGVmdC9ib3R0b20vcmlnaHRcbiAqXG4gKiBBbGxvd3MgYW5pbWF0aW9uIGJldHdlZW4gYCdhdXRvJ2AgLT4gYCcxMDAlJ2Agb3IgYDBgIC0+IGAnY2FsYyg1MCUgLSAxMHZ3KSdgXG4gKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHVuaXRDb252ZXJzaW9uKHZpc3VhbEVsZW1lbnQsIHRhcmdldCwgb3JpZ2luLCB0cmFuc2l0aW9uRW5kKSB7XG4gICAgcmV0dXJuIGhhc1Bvc2l0aW9uYWxLZXkodGFyZ2V0KVxuICAgICAgICA/IGNoZWNrQW5kQ29udmVydENoYW5nZWRWYWx1ZVR5cGVzKHZpc3VhbEVsZW1lbnQsIHRhcmdldCwgb3JpZ2luLCB0cmFuc2l0aW9uRW5kKVxuICAgICAgICA6IHsgdGFyZ2V0LCB0cmFuc2l0aW9uRW5kIH07XG59XG5cbmV4cG9ydCB7IHBvc2l0aW9uYWxWYWx1ZXMsIHVuaXRDb252ZXJzaW9uIH07XG4iLCJpbXBvcnQgeyByZXNvbHZlQ1NTVmFyaWFibGVzIH0gZnJvbSAnLi9jc3MtdmFyaWFibGVzLWNvbnZlcnNpb24ubWpzJztcbmltcG9ydCB7IHVuaXRDb252ZXJzaW9uIH0gZnJvbSAnLi91bml0LWNvbnZlcnNpb24ubWpzJztcblxuLyoqXG4gKiBQYXJzZSBhIERPTSB2YXJpYW50IHRvIG1ha2UgaXQgYW5pbWF0YWJsZS4gVGhpcyBpbnZvbHZlcyByZXNvbHZpbmcgQ1NTIHZhcmlhYmxlc1xuICogYW5kIGVuc3VyaW5nIGFuaW1hdGlvbnMgbGlrZSBcIjIwJVwiID0+IFwiY2FsYyg1MHZ3KVwiIGFyZSBwZXJmb3JtZWQgaW4gcGl4ZWxzLlxuICovXG5jb25zdCBwYXJzZURvbVZhcmlhbnQgPSAodmlzdWFsRWxlbWVudCwgdGFyZ2V0LCBvcmlnaW4sIHRyYW5zaXRpb25FbmQpID0+IHtcbiAgICBjb25zdCByZXNvbHZlZCA9IHJlc29sdmVDU1NWYXJpYWJsZXModmlzdWFsRWxlbWVudCwgdGFyZ2V0LCB0cmFuc2l0aW9uRW5kKTtcbiAgICB0YXJnZXQgPSByZXNvbHZlZC50YXJnZXQ7XG4gICAgdHJhbnNpdGlvbkVuZCA9IHJlc29sdmVkLnRyYW5zaXRpb25FbmQ7XG4gICAgcmV0dXJuIHVuaXRDb252ZXJzaW9uKHZpc3VhbEVsZW1lbnQsIHRhcmdldCwgb3JpZ2luLCB0cmFuc2l0aW9uRW5kKTtcbn07XG5cbmV4cG9ydCB7IHBhcnNlRG9tVmFyaWFudCB9O1xuIiwiLy8gRG9lcyB0aGlzIGRldmljZSBwcmVmZXIgcmVkdWNlZCBtb3Rpb24/IFJldHVybnMgYG51bGxgIHNlcnZlci1zaWRlLlxuY29uc3QgcHJlZmVyc1JlZHVjZWRNb3Rpb24gPSB7IGN1cnJlbnQ6IG51bGwgfTtcbmNvbnN0IGhhc1JlZHVjZWRNb3Rpb25MaXN0ZW5lciA9IHsgY3VycmVudDogZmFsc2UgfTtcblxuZXhwb3J0IHsgaGFzUmVkdWNlZE1vdGlvbkxpc3RlbmVyLCBwcmVmZXJzUmVkdWNlZE1vdGlvbiB9O1xuIiwiY29uc3QgdmlzdWFsRWxlbWVudFN0b3JlID0gbmV3IFdlYWtNYXAoKTtcblxuZXhwb3J0IHsgdmlzdWFsRWxlbWVudFN0b3JlIH07XG4iLCJpbXBvcnQgeyB3YXJuaW5nLCBpbnZhcmlhbnQgfSBmcm9tICcuLi91dGlscy9lcnJvcnMubWpzJztcbmltcG9ydCB7IGNyZWF0ZUJveCB9IGZyb20gJy4uL3Byb2plY3Rpb24vZ2VvbWV0cnkvbW9kZWxzLm1qcyc7XG5pbXBvcnQgeyBpc1JlZk9iamVjdCB9IGZyb20gJy4uL3V0aWxzL2lzLXJlZi1vYmplY3QubWpzJztcbmltcG9ydCB7IGluaXRQcmVmZXJzUmVkdWNlZE1vdGlvbiB9IGZyb20gJy4uL3V0aWxzL3JlZHVjZWQtbW90aW9uL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBoYXNSZWR1Y2VkTW90aW9uTGlzdGVuZXIsIHByZWZlcnNSZWR1Y2VkTW90aW9uIH0gZnJvbSAnLi4vdXRpbHMvcmVkdWNlZC1tb3Rpb24vc3RhdGUubWpzJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbk1hbmFnZXIgfSBmcm9tICcuLi91dGlscy9zdWJzY3JpcHRpb24tbWFuYWdlci5tanMnO1xuaW1wb3J0IHsgbW90aW9uVmFsdWUgfSBmcm9tICcuLi92YWx1ZS9pbmRleC5tanMnO1xuaW1wb3J0IHsgaXNXaWxsQ2hhbmdlTW90aW9uVmFsdWUgfSBmcm9tICcuLi92YWx1ZS91c2Utd2lsbC1jaGFuZ2UvaXMubWpzJztcbmltcG9ydCB7IGlzTW90aW9uVmFsdWUgfSBmcm9tICcuLi92YWx1ZS91dGlscy9pcy1tb3Rpb24tdmFsdWUubWpzJztcbmltcG9ydCB7IHRyYW5zZm9ybVByb3BzIH0gZnJvbSAnLi9odG1sL3V0aWxzL3RyYW5zZm9ybS5tanMnO1xuaW1wb3J0IHsgaXNDb250cm9sbGluZ1ZhcmlhbnRzLCBpc1ZhcmlhbnROb2RlIH0gZnJvbSAnLi91dGlscy9pcy1jb250cm9sbGluZy12YXJpYW50cy5tanMnO1xuaW1wb3J0IHsgaXNWYXJpYW50TGFiZWwgfSBmcm9tICcuL3V0aWxzL2lzLXZhcmlhbnQtbGFiZWwubWpzJztcbmltcG9ydCB7IHVwZGF0ZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyB9IGZyb20gJy4vdXRpbHMvbW90aW9uLXZhbHVlcy5tanMnO1xuaW1wb3J0IHsgcmVzb2x2ZVZhcmlhbnRGcm9tUHJvcHMgfSBmcm9tICcuL3V0aWxzL3Jlc29sdmUtdmFyaWFudHMubWpzJztcbmltcG9ydCB7IHdhcm5PbmNlIH0gZnJvbSAnLi4vdXRpbHMvd2Fybi1vbmNlLm1qcyc7XG5pbXBvcnQgeyBmZWF0dXJlRGVmaW5pdGlvbnMgfSBmcm9tICcuLi9tb3Rpb24vZmVhdHVyZXMvZGVmaW5pdGlvbnMubWpzJztcbmltcG9ydCB7IHZhcmlhbnRQcm9wcyB9IGZyb20gJy4vdXRpbHMvdmFyaWFudC1wcm9wcy5tanMnO1xuaW1wb3J0IHsgdmlzdWFsRWxlbWVudFN0b3JlIH0gZnJvbSAnLi9zdG9yZS5tanMnO1xuaW1wb3J0IHsgZnJhbWUsIGNhbmNlbEZyYW1lIH0gZnJvbSAnLi4vZnJhbWVsb29wL2ZyYW1lLm1qcyc7XG5cbmNvbnN0IGZlYXR1cmVOYW1lcyA9IE9iamVjdC5rZXlzKGZlYXR1cmVEZWZpbml0aW9ucyk7XG5jb25zdCBudW1GZWF0dXJlcyA9IGZlYXR1cmVOYW1lcy5sZW5ndGg7XG5jb25zdCBwcm9wRXZlbnRIYW5kbGVycyA9IFtcbiAgICBcIkFuaW1hdGlvblN0YXJ0XCIsXG4gICAgXCJBbmltYXRpb25Db21wbGV0ZVwiLFxuICAgIFwiVXBkYXRlXCIsXG4gICAgXCJCZWZvcmVMYXlvdXRNZWFzdXJlXCIsXG4gICAgXCJMYXlvdXRNZWFzdXJlXCIsXG4gICAgXCJMYXlvdXRBbmltYXRpb25TdGFydFwiLFxuICAgIFwiTGF5b3V0QW5pbWF0aW9uQ29tcGxldGVcIixcbl07XG5jb25zdCBudW1WYXJpYW50UHJvcHMgPSB2YXJpYW50UHJvcHMubGVuZ3RoO1xuLyoqXG4gKiBBIFZpc3VhbEVsZW1lbnQgaXMgYW4gaW1wZXJhdGl2ZSBhYnN0cmFjdGlvbiBhcm91bmQgVUkgZWxlbWVudHMgc3VjaCBhc1xuICogSFRNTEVsZW1lbnQsIFNWR0VsZW1lbnQsIFRocmVlLk9iamVjdDNEIGV0Yy5cbiAqL1xuY2xhc3MgVmlzdWFsRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoeyBwYXJlbnQsIHByb3BzLCBwcmVzZW5jZUNvbnRleHQsIHJlZHVjZWRNb3Rpb25Db25maWcsIHZpc3VhbFN0YXRlLCB9LCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IHVuZGVybHlpbmcgSW5zdGFuY2UsIGUuZy4gYSBIVE1MRWxlbWVudFxuICAgICAgICAgKiBvciBUaHJlZS5NZXNoIGV0Yy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY3VycmVudCA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHNldCBjb250YWluaW5nIHJlZmVyZW5jZXMgdG8gdGhpcyBWaXN1YWxFbGVtZW50J3MgY2hpbGRyZW4uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gbmV3IFNldCgpO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGV0ZXJtaW5lIHdoYXQgcm9sZSB0aGlzIHZpc3VhbCBlbGVtZW50IHNob3VsZCB0YWtlIGluIHRoZSB2YXJpYW50IHRyZWUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmlzVmFyaWFudE5vZGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc0NvbnRyb2xsaW5nVmFyaWFudHMgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY2lkZXMgd2hldGhlciB0aGlzIFZpc3VhbEVsZW1lbnQgc2hvdWxkIGFuaW1hdGUgaW4gcmVkdWNlZCBtb3Rpb25cbiAgICAgICAgICogbW9kZS5cbiAgICAgICAgICpcbiAgICAgICAgICogVE9ETzogVGhpcyBpcyBjdXJyZW50bHkgc2V0IG9uIGV2ZXJ5IGluZGl2aWR1YWwgVmlzdWFsRWxlbWVudCBidXQgZmVlbHNcbiAgICAgICAgICogbGlrZSBpdCBjb3VsZCBiZSBzZXQgZ2xvYmFsbHkuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNob3VsZFJlZHVjZU1vdGlvbiA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIG1hcCBvZiBhbGwgbW90aW9uIHZhbHVlcyBhdHRhY2hlZCB0byB0aGlzIHZpc3VhbCBlbGVtZW50LiBNb3Rpb25cbiAgICAgICAgICogdmFsdWVzIGFyZSBzb3VyY2Ugb2YgdHJ1dGggZm9yIGFueSBnaXZlbiBhbmltYXRlZCB2YWx1ZS4gQSBtb3Rpb25cbiAgICAgICAgICogdmFsdWUgbWlnaHQgYmUgcHJvdmlkZWQgZXh0ZXJuYWxseSBieSB0aGUgY29tcG9uZW50IHZpYSBwcm9wcy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudmFsdWVzID0gbmV3IE1hcCgpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ2xlYW51cCBmdW5jdGlvbnMgZm9yIGFjdGl2ZSBmZWF0dXJlcyAoaG92ZXIvdGFwL2V4aXQgZXRjKVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5mZWF0dXJlcyA9IHt9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBtYXAgb2YgZXZlcnkgc3Vic2NyaXB0aW9uIHRoYXQgYmluZHMgdGhlIHByb3ZpZGVkIG9yIGdlbmVyYXRlZFxuICAgICAgICAgKiBtb3Rpb24gdmFsdWVzIG9uQ2hhbmdlIGxpc3RlbmVycyB0byB0aGlzIHZpc3VhbCBlbGVtZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52YWx1ZVN1YnNjcmlwdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgcHJldmlvdXNseS1wcm92aWRlZCBtb3Rpb24gdmFsdWVzIGFzIHJldHVybmVkXG4gICAgICAgICAqIGZyb20gc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzLiBXZSB1c2UgdGhlIGtleXMgaW4gaGVyZSB0byBkZXRlcm1pbmVcbiAgICAgICAgICogaWYgYW55IG1vdGlvbiB2YWx1ZXMgbmVlZCB0byBiZSByZW1vdmVkIGFmdGVyIHByb3BzIGFyZSB1cGRhdGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wcmV2TW90aW9uVmFsdWVzID0ge307XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBvYmplY3QgY29udGFpbmluZyBhIFN1YnNjcmlwdGlvbk1hbmFnZXIgZm9yIGVhY2ggYWN0aXZlIGV2ZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ldmVudHMgPSB7fTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIG9iamVjdCBjb250YWluaW5nIGFuIHVuc3Vic2NyaWJlIGZ1bmN0aW9uIGZvciBlYWNoIHByb3AgZXZlbnQgc3Vic2NyaXB0aW9uLlxuICAgICAgICAgKiBGb3IgZXhhbXBsZSwgZXZlcnkgXCJVcGRhdGVcIiBldmVudCBjYW4gaGF2ZSBtdWx0aXBsZSBzdWJzY3JpYmVycyB2aWFcbiAgICAgICAgICogVmlzdWFsRWxlbWVudC5vbigpLCBidXQgb25seSBvbmUgb2YgdGhvc2UgY2FuIGJlIGRlZmluZWQgdmlhIHRoZSBvblVwZGF0ZSBwcm9wLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wcm9wRXZlbnRTdWJzY3JpcHRpb25zID0ge307XG4gICAgICAgIHRoaXMubm90aWZ5VXBkYXRlID0gKCkgPT4gdGhpcy5ub3RpZnkoXCJVcGRhdGVcIiwgdGhpcy5sYXRlc3RWYWx1ZXMpO1xuICAgICAgICB0aGlzLnJlbmRlciA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jdXJyZW50KVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlckJ1aWxkKCk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckluc3RhbmNlKHRoaXMuY3VycmVudCwgdGhpcy5yZW5kZXJTdGF0ZSwgdGhpcy5wcm9wcy5zdHlsZSwgdGhpcy5wcm9qZWN0aW9uKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZVJlbmRlciA9ICgpID0+IGZyYW1lLnJlbmRlcih0aGlzLnJlbmRlciwgZmFsc2UsIHRydWUpO1xuICAgICAgICBjb25zdCB7IGxhdGVzdFZhbHVlcywgcmVuZGVyU3RhdGUgfSA9IHZpc3VhbFN0YXRlO1xuICAgICAgICB0aGlzLmxhdGVzdFZhbHVlcyA9IGxhdGVzdFZhbHVlcztcbiAgICAgICAgdGhpcy5iYXNlVGFyZ2V0ID0geyAuLi5sYXRlc3RWYWx1ZXMgfTtcbiAgICAgICAgdGhpcy5pbml0aWFsVmFsdWVzID0gcHJvcHMuaW5pdGlhbCA/IHsgLi4ubGF0ZXN0VmFsdWVzIH0gOiB7fTtcbiAgICAgICAgdGhpcy5yZW5kZXJTdGF0ZSA9IHJlbmRlclN0YXRlO1xuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLnByZXNlbmNlQ29udGV4dCA9IHByZXNlbmNlQ29udGV4dDtcbiAgICAgICAgdGhpcy5kZXB0aCA9IHBhcmVudCA/IHBhcmVudC5kZXB0aCArIDEgOiAwO1xuICAgICAgICB0aGlzLnJlZHVjZWRNb3Rpb25Db25maWcgPSByZWR1Y2VkTW90aW9uQ29uZmlnO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmlzQ29udHJvbGxpbmdWYXJpYW50cyA9IGlzQ29udHJvbGxpbmdWYXJpYW50cyhwcm9wcyk7XG4gICAgICAgIHRoaXMuaXNWYXJpYW50Tm9kZSA9IGlzVmFyaWFudE5vZGUocHJvcHMpO1xuICAgICAgICBpZiAodGhpcy5pc1ZhcmlhbnROb2RlKSB7XG4gICAgICAgICAgICB0aGlzLnZhcmlhbnRDaGlsZHJlbiA9IG5ldyBTZXQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1hbnVhbGx5QW5pbWF0ZU9uTW91bnQgPSBCb29sZWFuKHBhcmVudCAmJiBwYXJlbnQuY3VycmVudCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbnkgbW90aW9uIHZhbHVlcyB0aGF0IGFyZSBwcm92aWRlZCB0byB0aGUgZWxlbWVudCB3aGVuIGNyZWF0ZWRcbiAgICAgICAgICogYXJlbid0IHlldCBib3VuZCB0byB0aGUgZWxlbWVudCwgYXMgdGhpcyB3b3VsZCB0ZWNobmljYWxseSBiZSBpbXB1cmUuXG4gICAgICAgICAqIEhvd2V2ZXIsIHdlIGl0ZXJhdGUgdGhyb3VnaCB0aGUgbW90aW9uIHZhbHVlcyBhbmQgc2V0IHRoZW0gdG8gdGhlXG4gICAgICAgICAqIGluaXRpYWwgdmFsdWVzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICAgICAgICpcbiAgICAgICAgICogVE9ETzogVGhpcyBpcyBpbXB1cmUgYW5kIHdlIHNob3VsZCBsb29rIGF0IGNoYW5naW5nIHRoaXMgdG8gcnVuIG9uIG1vdW50LlxuICAgICAgICAgKiBEb2luZyBzbyB3aWxsIGJyZWFrIHNvbWUgdGVzdHMgYnV0IHRoaXMgaXNuJ3QgbmVjY2Vzc2FyaWx5IGEgYnJlYWtpbmcgY2hhbmdlLFxuICAgICAgICAgKiBtb3JlIGEgcmVmbGVjdGlvbiBvZiB0aGUgdGVzdC5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IHsgd2lsbENoYW5nZSwgLi4uaW5pdGlhbE1vdGlvblZhbHVlcyB9ID0gdGhpcy5zY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMocHJvcHMsIHt9KTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gaW5pdGlhbE1vdGlvblZhbHVlcykge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBpbml0aWFsTW90aW9uVmFsdWVzW2tleV07XG4gICAgICAgICAgICBpZiAobGF0ZXN0VmFsdWVzW2tleV0gIT09IHVuZGVmaW5lZCAmJiBpc01vdGlvblZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlLnNldChsYXRlc3RWYWx1ZXNba2V5XSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGlmIChpc1dpbGxDaGFuZ2VNb3Rpb25WYWx1ZSh3aWxsQ2hhbmdlKSkge1xuICAgICAgICAgICAgICAgICAgICB3aWxsQ2hhbmdlLmFkZChrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCB0YWtlcyBSZWFjdCBwcm9wcyBhbmQgcmV0dXJucyBmb3VuZCBNb3Rpb25WYWx1ZXMuIEZvciBleGFtcGxlLCBIVE1MXG4gICAgICogTW90aW9uVmFsdWVzIHdpbGwgYmUgZm91bmQgd2l0aGluIHRoZSBzdHlsZSBwcm9wLCB3aGVyZWFzIGZvciBUaHJlZS5qcyB3aXRoaW4gYXR0cmlidXRlIGFycmF5cy5cbiAgICAgKlxuICAgICAqIFRoaXMgaXNuJ3QgYW4gYWJzdHJhY3QgbWV0aG9kIGFzIGl0IG5lZWRzIGNhbGxpbmcgaW4gdGhlIGNvbnN0cnVjdG9yLCBidXQgaXQgaXNcbiAgICAgKiBpbnRlbmRlZCB0byBiZSBvbmUuXG4gICAgICovXG4gICAgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzKF9wcm9wcywgX3ByZXZQcm9wcykge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIG1vdW50KGluc3RhbmNlKSB7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IGluc3RhbmNlO1xuICAgICAgICB2aXN1YWxFbGVtZW50U3RvcmUuc2V0KGluc3RhbmNlLCB0aGlzKTtcbiAgICAgICAgaWYgKHRoaXMucHJvamVjdGlvbiAmJiAhdGhpcy5wcm9qZWN0aW9uLmluc3RhbmNlKSB7XG4gICAgICAgICAgICB0aGlzLnByb2plY3Rpb24ubW91bnQoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBhcmVudCAmJiB0aGlzLmlzVmFyaWFudE5vZGUgJiYgIXRoaXMuaXNDb250cm9sbGluZ1ZhcmlhbnRzKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUZyb21WYXJpYW50VHJlZSA9IHRoaXMucGFyZW50LmFkZFZhcmlhbnRDaGlsZCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB0aGlzLmJpbmRUb01vdGlvblZhbHVlKGtleSwgdmFsdWUpKTtcbiAgICAgICAgaWYgKCFoYXNSZWR1Y2VkTW90aW9uTGlzdGVuZXIuY3VycmVudCkge1xuICAgICAgICAgICAgaW5pdFByZWZlcnNSZWR1Y2VkTW90aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zaG91bGRSZWR1Y2VNb3Rpb24gPVxuICAgICAgICAgICAgdGhpcy5yZWR1Y2VkTW90aW9uQ29uZmlnID09PSBcIm5ldmVyXCJcbiAgICAgICAgICAgICAgICA/IGZhbHNlXG4gICAgICAgICAgICAgICAgOiB0aGlzLnJlZHVjZWRNb3Rpb25Db25maWcgPT09IFwiYWx3YXlzXCJcbiAgICAgICAgICAgICAgICAgICAgPyB0cnVlXG4gICAgICAgICAgICAgICAgICAgIDogcHJlZmVyc1JlZHVjZWRNb3Rpb24uY3VycmVudDtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgd2Fybk9uY2UodGhpcy5zaG91bGRSZWR1Y2VNb3Rpb24gIT09IHRydWUsIFwiWW91IGhhdmUgUmVkdWNlZCBNb3Rpb24gZW5hYmxlZCBvbiB5b3VyIGRldmljZS4gQW5pbWF0aW9ucyBtYXkgbm90IGFwcGVhciBhcyBleHBlY3RlZC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucGFyZW50KVxuICAgICAgICAgICAgdGhpcy5wYXJlbnQuY2hpbGRyZW4uYWRkKHRoaXMpO1xuICAgICAgICB0aGlzLnVwZGF0ZSh0aGlzLnByb3BzLCB0aGlzLnByZXNlbmNlQ29udGV4dCk7XG4gICAgfVxuICAgIHVubW91bnQoKSB7XG4gICAgICAgIHZpc3VhbEVsZW1lbnRTdG9yZS5kZWxldGUodGhpcy5jdXJyZW50KTtcbiAgICAgICAgdGhpcy5wcm9qZWN0aW9uICYmIHRoaXMucHJvamVjdGlvbi51bm1vdW50KCk7XG4gICAgICAgIGNhbmNlbEZyYW1lKHRoaXMubm90aWZ5VXBkYXRlKTtcbiAgICAgICAgY2FuY2VsRnJhbWUodGhpcy5yZW5kZXIpO1xuICAgICAgICB0aGlzLnZhbHVlU3Vic2NyaXB0aW9ucy5mb3JFYWNoKChyZW1vdmUpID0+IHJlbW92ZSgpKTtcbiAgICAgICAgdGhpcy5yZW1vdmVGcm9tVmFyaWFudFRyZWUgJiYgdGhpcy5yZW1vdmVGcm9tVmFyaWFudFRyZWUoKTtcbiAgICAgICAgdGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuY2hpbGRyZW4uZGVsZXRlKHRoaXMpO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmV2ZW50cykge1xuICAgICAgICAgICAgdGhpcy5ldmVudHNba2V5XS5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuZmVhdHVyZXMpIHtcbiAgICAgICAgICAgIHRoaXMuZmVhdHVyZXNba2V5XS51bm1vdW50KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG4gICAgYmluZFRvTW90aW9uVmFsdWUoa2V5LCB2YWx1ZSkge1xuICAgICAgICBjb25zdCB2YWx1ZUlzVHJhbnNmb3JtID0gdHJhbnNmb3JtUHJvcHMuaGFzKGtleSk7XG4gICAgICAgIGNvbnN0IHJlbW92ZU9uQ2hhbmdlID0gdmFsdWUub24oXCJjaGFuZ2VcIiwgKGxhdGVzdFZhbHVlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmxhdGVzdFZhbHVlc1trZXldID0gbGF0ZXN0VmFsdWU7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uVXBkYXRlICYmXG4gICAgICAgICAgICAgICAgZnJhbWUudXBkYXRlKHRoaXMubm90aWZ5VXBkYXRlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAodmFsdWVJc1RyYW5zZm9ybSAmJiB0aGlzLnByb2plY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb2plY3Rpb24uaXNUcmFuc2Zvcm1EaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZW1vdmVPblJlbmRlclJlcXVlc3QgPSB2YWx1ZS5vbihcInJlbmRlclJlcXVlc3RcIiwgdGhpcy5zY2hlZHVsZVJlbmRlcik7XG4gICAgICAgIHRoaXMudmFsdWVTdWJzY3JpcHRpb25zLnNldChrZXksICgpID0+IHtcbiAgICAgICAgICAgIHJlbW92ZU9uQ2hhbmdlKCk7XG4gICAgICAgICAgICByZW1vdmVPblJlbmRlclJlcXVlc3QoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNvcnROb2RlUG9zaXRpb24ob3RoZXIpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoZXNlIG5vZGVzIGFyZW4ndCBldmVuIG9mIHRoZSBzYW1lIHR5cGUgd2UgY2FuJ3QgY29tcGFyZSB0aGVpciBkZXB0aC5cbiAgICAgICAgICovXG4gICAgICAgIGlmICghdGhpcy5jdXJyZW50IHx8XG4gICAgICAgICAgICAhdGhpcy5zb3J0SW5zdGFuY2VOb2RlUG9zaXRpb24gfHxcbiAgICAgICAgICAgIHRoaXMudHlwZSAhPT0gb3RoZXIudHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc29ydEluc3RhbmNlTm9kZVBvc2l0aW9uKHRoaXMuY3VycmVudCwgb3RoZXIuY3VycmVudCk7XG4gICAgfVxuICAgIGxvYWRGZWF0dXJlcyh7IGNoaWxkcmVuLCAuLi5yZW5kZXJlZFByb3BzIH0sIGlzU3RyaWN0LCBwcmVsb2FkZWRGZWF0dXJlcywgaW5pdGlhbExheW91dEdyb3VwQ29uZmlnKSB7XG4gICAgICAgIGxldCBQcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yO1xuICAgICAgICBsZXQgTWVhc3VyZUxheW91dDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHdlJ3JlIGluIGRldmVsb3BtZW50IG1vZGUsIGNoZWNrIHRvIG1ha2Ugc3VyZSB3ZSdyZSBub3QgcmVuZGVyaW5nIGEgbW90aW9uIGNvbXBvbmVudFxuICAgICAgICAgKiBhcyBhIGNoaWxkIG9mIExhenlNb3Rpb24sIGFzIHRoaXMgd2lsbCBicmVhayB0aGUgZmlsZS1zaXplIGJlbmVmaXRzIG9mIHVzaW5nIGl0LlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICAgICAgcHJlbG9hZGVkRmVhdHVyZXMgJiZcbiAgICAgICAgICAgIGlzU3RyaWN0KSB7XG4gICAgICAgICAgICBjb25zdCBzdHJpY3RNZXNzYWdlID0gXCJZb3UgaGF2ZSByZW5kZXJlZCBhIGBtb3Rpb25gIGNvbXBvbmVudCB3aXRoaW4gYSBgTGF6eU1vdGlvbmAgY29tcG9uZW50LiBUaGlzIHdpbGwgYnJlYWsgdHJlZSBzaGFraW5nLiBJbXBvcnQgYW5kIHJlbmRlciBhIGBtYCBjb21wb25lbnQgaW5zdGVhZC5cIjtcbiAgICAgICAgICAgIHJlbmRlcmVkUHJvcHMuaWdub3JlU3RyaWN0XG4gICAgICAgICAgICAgICAgPyB3YXJuaW5nKGZhbHNlLCBzdHJpY3RNZXNzYWdlKVxuICAgICAgICAgICAgICAgIDogaW52YXJpYW50KGZhbHNlLCBzdHJpY3RNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUZlYXR1cmVzOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBmZWF0dXJlTmFtZXNbaV07XG4gICAgICAgICAgICBjb25zdCB7IGlzRW5hYmxlZCwgRmVhdHVyZTogRmVhdHVyZUNvbnN0cnVjdG9yLCBQcm9qZWN0aW9uTm9kZSwgTWVhc3VyZUxheW91dDogTWVhc3VyZUxheW91dENvbXBvbmVudCwgfSA9IGZlYXR1cmVEZWZpbml0aW9uc1tuYW1lXTtcbiAgICAgICAgICAgIGlmIChQcm9qZWN0aW9uTm9kZSlcbiAgICAgICAgICAgICAgICBQcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yID0gUHJvamVjdGlvbk5vZGU7XG4gICAgICAgICAgICBpZiAoaXNFbmFibGVkKHJlbmRlcmVkUHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmZlYXR1cmVzW25hbWVdICYmIEZlYXR1cmVDb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZlYXR1cmVzW25hbWVdID0gbmV3IEZlYXR1cmVDb25zdHJ1Y3Rvcih0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKE1lYXN1cmVMYXlvdXRDb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgTWVhc3VyZUxheW91dCA9IE1lYXN1cmVMYXlvdXRDb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5wcm9qZWN0aW9uICYmIFByb2plY3Rpb25Ob2RlQ29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIHRoaXMucHJvamVjdGlvbiA9IG5ldyBQcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yKHRoaXMubGF0ZXN0VmFsdWVzLCB0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5wcm9qZWN0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IHsgbGF5b3V0SWQsIGxheW91dCwgZHJhZywgZHJhZ0NvbnN0cmFpbnRzLCBsYXlvdXRTY3JvbGwsIGxheW91dFJvb3QsIH0gPSByZW5kZXJlZFByb3BzO1xuICAgICAgICAgICAgdGhpcy5wcm9qZWN0aW9uLnNldE9wdGlvbnMoe1xuICAgICAgICAgICAgICAgIGxheW91dElkLFxuICAgICAgICAgICAgICAgIGxheW91dCxcbiAgICAgICAgICAgICAgICBhbHdheXNNZWFzdXJlTGF5b3V0OiBCb29sZWFuKGRyYWcpIHx8XG4gICAgICAgICAgICAgICAgICAgIChkcmFnQ29uc3RyYWludHMgJiYgaXNSZWZPYmplY3QoZHJhZ0NvbnN0cmFpbnRzKSksXG4gICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudDogdGhpcyxcbiAgICAgICAgICAgICAgICBzY2hlZHVsZVJlbmRlcjogKCkgPT4gdGhpcy5zY2hlZHVsZVJlbmRlcigpLFxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFRPRE86IFVwZGF0ZSBvcHRpb25zIGluIGFuIGVmZmVjdC4gVGhpcyBjb3VsZCBiZSB0cmlja3kgYXMgaXQnbGwgYmUgdG9vIGxhdGVcbiAgICAgICAgICAgICAgICAgKiB0byB1cGRhdGUgYnkgdGhlIHRpbWUgbGF5b3V0IGFuaW1hdGlvbnMgcnVuLlxuICAgICAgICAgICAgICAgICAqIFdlIGFsc28gbmVlZCB0byBmaXggdGhpcyBzYWZlVG9SZW1vdmUgYnkgbGlua2luZyBpdCB1cCB0byB0aGUgb25lIHJldHVybmVkIGJ5IHVzZVByZXNlbmNlLFxuICAgICAgICAgICAgICAgICAqIGVuc3VyaW5nIGl0IGdldHMgY2FsbGVkIGlmIHRoZXJlJ3Mgbm8gcG90ZW50aWFsIGxheW91dCBhbmltYXRpb25zLlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uVHlwZTogdHlwZW9mIGxheW91dCA9PT0gXCJzdHJpbmdcIiA/IGxheW91dCA6IFwiYm90aFwiLFxuICAgICAgICAgICAgICAgIGluaXRpYWxQcm9tb3Rpb25Db25maWc6IGluaXRpYWxMYXlvdXRHcm91cENvbmZpZyxcbiAgICAgICAgICAgICAgICBsYXlvdXRTY3JvbGwsXG4gICAgICAgICAgICAgICAgbGF5b3V0Um9vdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBNZWFzdXJlTGF5b3V0O1xuICAgIH1cbiAgICB1cGRhdGVGZWF0dXJlcygpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5mZWF0dXJlcykge1xuICAgICAgICAgICAgY29uc3QgZmVhdHVyZSA9IHRoaXMuZmVhdHVyZXNba2V5XTtcbiAgICAgICAgICAgIGlmIChmZWF0dXJlLmlzTW91bnRlZCkge1xuICAgICAgICAgICAgICAgIGZlYXR1cmUudXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlLm1vdW50KCk7XG4gICAgICAgICAgICAgICAgZmVhdHVyZS5pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHRyaWdnZXJCdWlsZCgpIHtcbiAgICAgICAgdGhpcy5idWlsZCh0aGlzLnJlbmRlclN0YXRlLCB0aGlzLmxhdGVzdFZhbHVlcywgdGhpcy5vcHRpb25zLCB0aGlzLnByb3BzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWVhc3VyZSB0aGUgY3VycmVudCB2aWV3cG9ydCBib3ggd2l0aCBvciB3aXRob3V0IHRyYW5zZm9ybXMuXG4gICAgICogT25seSBtZWFzdXJlcyBheGlzLWFsaWduZWQgYm94ZXMsIHJvdGF0ZSBhbmQgc2tldyBtdXN0IGJlIG1hbnVhbGx5XG4gICAgICogcmVtb3ZlZCB3aXRoIGEgcmUtcmVuZGVyIHRvIHdvcmsuXG4gICAgICovXG4gICAgbWVhc3VyZVZpZXdwb3J0Qm94KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50XG4gICAgICAgICAgICA/IHRoaXMubWVhc3VyZUluc3RhbmNlVmlld3BvcnRCb3godGhpcy5jdXJyZW50LCB0aGlzLnByb3BzKVxuICAgICAgICAgICAgOiBjcmVhdGVCb3goKTtcbiAgICB9XG4gICAgZ2V0U3RhdGljVmFsdWUoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxhdGVzdFZhbHVlc1trZXldO1xuICAgIH1cbiAgICBzZXRTdGF0aWNWYWx1ZShrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMubGF0ZXN0VmFsdWVzW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFrZSBhIHRhcmdldCBhbmltYXRhYmxlIGJ5IFBvcG1vdGlvbi4gRm9yIGluc3RhbmNlLCBpZiB3ZSdyZVxuICAgICAqIHRyeWluZyB0byBhbmltYXRlIHdpZHRoIGZyb20gMTAwcHggdG8gMTAwdncgd2UgbmVlZCB0byBtZWFzdXJlIDEwMHZ3XG4gICAgICogaW4gcGl4ZWxzIHRvIGRldGVybWluZSB3aGF0IHdlIHJlYWxseSBuZWVkIHRvIGFuaW1hdGUgdG8uIFRoaXMgaXMgYWxzb1xuICAgICAqIHBsdWdnYWJsZSB0byBzdXBwb3J0IEZyYW1lcidzIGN1c3RvbSB2YWx1ZSB0eXBlcyBsaWtlIENvbG9yLFxuICAgICAqIGFuZCBDU1MgdmFyaWFibGVzLlxuICAgICAqL1xuICAgIG1ha2VUYXJnZXRBbmltYXRhYmxlKHRhcmdldCwgY2FuTXV0YXRlID0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYWtlVGFyZ2V0QW5pbWF0YWJsZUZyb21JbnN0YW5jZSh0YXJnZXQsIHRoaXMucHJvcHMsIGNhbk11dGF0ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgcHJvdmlkZWQgcHJvcHMuIEVuc3VyZSBhbnkgbmV3bHktYWRkZWQgbW90aW9uIHZhbHVlcyBhcmVcbiAgICAgKiBhZGRlZCB0byBvdXIgbWFwLCBvbGQgb25lcyByZW1vdmVkLCBhbmQgbGlzdGVuZXJzIHVwZGF0ZWQuXG4gICAgICovXG4gICAgdXBkYXRlKHByb3BzLCBwcmVzZW5jZUNvbnRleHQpIHtcbiAgICAgICAgaWYgKHByb3BzLnRyYW5zZm9ybVRlbXBsYXRlIHx8IHRoaXMucHJvcHMudHJhbnNmb3JtVGVtcGxhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVSZW5kZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByZXZQcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5wcmV2UHJlc2VuY2VDb250ZXh0ID0gdGhpcy5wcmVzZW5jZUNvbnRleHQ7XG4gICAgICAgIHRoaXMucHJlc2VuY2VDb250ZXh0ID0gcHJlc2VuY2VDb250ZXh0O1xuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlIHByb3AgZXZlbnQgaGFuZGxlcnMgaWUgb25BbmltYXRpb25TdGFydCwgb25BbmltYXRpb25Db21wbGV0ZVxuICAgICAgICAgKi9cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wRXZlbnRIYW5kbGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gcHJvcEV2ZW50SGFuZGxlcnNbaV07XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wRXZlbnRTdWJzY3JpcHRpb25zW2tleV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BFdmVudFN1YnNjcmlwdGlvbnNba2V5XSgpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnByb3BFdmVudFN1YnNjcmlwdGlvbnNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxpc3RlbmVyID0gcHJvcHNbXCJvblwiICsga2V5XTtcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcEV2ZW50U3Vic2NyaXB0aW9uc1trZXldID0gdGhpcy5vbihrZXksIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByZXZNb3Rpb25WYWx1ZXMgPSB1cGRhdGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHModGhpcywgdGhpcy5zY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMocHJvcHMsIHRoaXMucHJldlByb3BzKSwgdGhpcy5wcmV2TW90aW9uVmFsdWVzKTtcbiAgICAgICAgaWYgKHRoaXMuaGFuZGxlQ2hpbGRNb3Rpb25WYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVDaGlsZE1vdGlvblZhbHVlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0UHJvcHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB2YXJpYW50IGRlZmluaXRpb24gd2l0aCBhIGdpdmVuIG5hbWUuXG4gICAgICovXG4gICAgZ2V0VmFyaWFudChuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnZhcmlhbnRzID8gdGhpcy5wcm9wcy52YXJpYW50c1tuYW1lXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZGVmaW5lZCBkZWZhdWx0IHRyYW5zaXRpb24gb24gdGhpcyBjb21wb25lbnQuXG4gICAgICovXG4gICAgZ2V0RGVmYXVsdFRyYW5zaXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnRyYW5zaXRpb247XG4gICAgfVxuICAgIGdldFRyYW5zZm9ybVBhZ2VQb2ludCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMudHJhbnNmb3JtUGFnZVBvaW50O1xuICAgIH1cbiAgICBnZXRDbG9zZXN0VmFyaWFudE5vZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFyaWFudE5vZGVcbiAgICAgICAgICAgID8gdGhpc1xuICAgICAgICAgICAgOiB0aGlzLnBhcmVudFxuICAgICAgICAgICAgICAgID8gdGhpcy5wYXJlbnQuZ2V0Q2xvc2VzdFZhcmlhbnROb2RlKClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0VmFyaWFudENvbnRleHQoc3RhcnRBdFBhcmVudCA9IGZhbHNlKSB7XG4gICAgICAgIGlmIChzdGFydEF0UGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC5nZXRWYXJpYW50Q29udGV4dCgpIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pc0NvbnRyb2xsaW5nVmFyaWFudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLnBhcmVudFxuICAgICAgICAgICAgICAgID8gdGhpcy5wYXJlbnQuZ2V0VmFyaWFudENvbnRleHQoKSB8fCB7fVxuICAgICAgICAgICAgICAgIDoge307XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5pbml0aWFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmluaXRpYWwgPSB0aGlzLnByb3BzLmluaXRpYWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250ZXh0ID0ge307XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVmFyaWFudFByb3BzOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB2YXJpYW50UHJvcHNbaV07XG4gICAgICAgICAgICBjb25zdCBwcm9wID0gdGhpcy5wcm9wc1tuYW1lXTtcbiAgICAgICAgICAgIGlmIChpc1ZhcmlhbnRMYWJlbChwcm9wKSB8fCBwcm9wID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGNvbnRleHRbbmFtZV0gPSBwcm9wO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYSBjaGlsZCB2aXN1YWwgZWxlbWVudCB0byBvdXIgc2V0IG9mIGNoaWxkcmVuLlxuICAgICAqL1xuICAgIGFkZFZhcmlhbnRDaGlsZChjaGlsZCkge1xuICAgICAgICBjb25zdCBjbG9zZXN0VmFyaWFudE5vZGUgPSB0aGlzLmdldENsb3Nlc3RWYXJpYW50Tm9kZSgpO1xuICAgICAgICBpZiAoY2xvc2VzdFZhcmlhbnROb2RlKSB7XG4gICAgICAgICAgICBjbG9zZXN0VmFyaWFudE5vZGUudmFyaWFudENoaWxkcmVuICYmXG4gICAgICAgICAgICAgICAgY2xvc2VzdFZhcmlhbnROb2RlLnZhcmlhbnRDaGlsZHJlbi5hZGQoY2hpbGQpO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IGNsb3Nlc3RWYXJpYW50Tm9kZS52YXJpYW50Q2hpbGRyZW4uZGVsZXRlKGNoaWxkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYSBtb3Rpb24gdmFsdWUgYW5kIGJpbmQgaXQgdG8gdGhpcyB2aXN1YWwgZWxlbWVudC5cbiAgICAgKi9cbiAgICBhZGRWYWx1ZShrZXksIHZhbHVlKSB7XG4gICAgICAgIC8vIFJlbW92ZSBleGlzdGluZyB2YWx1ZSBpZiBpdCBleGlzdHNcbiAgICAgICAgaWYgKHZhbHVlICE9PSB0aGlzLnZhbHVlcy5nZXQoa2V5KSkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVWYWx1ZShrZXkpO1xuICAgICAgICAgICAgdGhpcy5iaW5kVG9Nb3Rpb25WYWx1ZShrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIHRoaXMubGF0ZXN0VmFsdWVzW2tleV0gPSB2YWx1ZS5nZXQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgbW90aW9uIHZhbHVlIGFuZCB1bmJpbmQgYW55IGFjdGl2ZSBzdWJzY3JpcHRpb25zLlxuICAgICAqL1xuICAgIHJlbW92ZVZhbHVlKGtleSkge1xuICAgICAgICB0aGlzLnZhbHVlcy5kZWxldGUoa2V5KTtcbiAgICAgICAgY29uc3QgdW5zdWJzY3JpYmUgPSB0aGlzLnZhbHVlU3Vic2NyaXB0aW9ucy5nZXQoa2V5KTtcbiAgICAgICAgaWYgKHVuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy52YWx1ZVN1YnNjcmlwdGlvbnMuZGVsZXRlKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHRoaXMubGF0ZXN0VmFsdWVzW2tleV07XG4gICAgICAgIHRoaXMucmVtb3ZlVmFsdWVGcm9tUmVuZGVyU3RhdGUoa2V5LCB0aGlzLnJlbmRlclN0YXRlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgd2hldGhlciB3ZSBoYXZlIGEgbW90aW9uIHZhbHVlIGZvciB0aGlzIGtleVxuICAgICAqL1xuICAgIGhhc1ZhbHVlKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXMuaGFzKGtleSk7XG4gICAgfVxuICAgIGdldFZhbHVlKGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlcyAmJiB0aGlzLnByb3BzLnZhbHVlc1trZXldKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy52YWx1ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLnZhbHVlcy5nZXQoa2V5KTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhbHVlID0gbW90aW9uVmFsdWUoZGVmYXVsdFZhbHVlLCB7IG93bmVyOiB0aGlzIH0pO1xuICAgICAgICAgICAgdGhpcy5hZGRWYWx1ZShrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIHdlJ3JlIHRyeWluZyB0byBhbmltYXRlIHRvIGEgcHJldmlvdXNseSB1bmVuY291bnRlcmVkIHZhbHVlLFxuICAgICAqIHdlIG5lZWQgdG8gY2hlY2sgZm9yIGl0IGluIG91ciBzdGF0ZSBhbmQgYXMgYSBsYXN0IHJlc29ydCByZWFkIGl0XG4gICAgICogZGlyZWN0bHkgZnJvbSB0aGUgaW5zdGFuY2UgKHdoaWNoIG1pZ2h0IGhhdmUgcGVyZm9ybWFuY2UgaW1wbGljYXRpb25zKS5cbiAgICAgKi9cbiAgICByZWFkVmFsdWUoa2V5KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIHRoaXMubGF0ZXN0VmFsdWVzW2tleV0gIT09IHVuZGVmaW5lZCB8fCAhdGhpcy5jdXJyZW50XG4gICAgICAgICAgICA/IHRoaXMubGF0ZXN0VmFsdWVzW2tleV1cbiAgICAgICAgICAgIDogKF9hID0gdGhpcy5nZXRCYXNlVGFyZ2V0RnJvbVByb3BzKHRoaXMucHJvcHMsIGtleSkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMucmVhZFZhbHVlRnJvbUluc3RhbmNlKHRoaXMuY3VycmVudCwga2V5LCB0aGlzLm9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGJhc2UgdGFyZ2V0IHRvIGxhdGVyIGFuaW1hdGUgYmFjayB0by4gVGhpcyBpcyBjdXJyZW50bHlcbiAgICAgKiBvbmx5IGh5ZHJhdGVkIG9uIGNyZWF0aW9uIGFuZCB3aGVuIHdlIGZpcnN0IHJlYWQgYSB2YWx1ZS5cbiAgICAgKi9cbiAgICBzZXRCYXNlVGFyZ2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5iYXNlVGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmluZCB0aGUgYmFzZSB0YXJnZXQgZm9yIGEgdmFsdWUgdGhhdHMgYmVlbiByZW1vdmVkIGZyb20gYWxsIGFuaW1hdGlvblxuICAgICAqIHByb3BzLlxuICAgICAqL1xuICAgIGdldEJhc2VUYXJnZXQoa2V5KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgeyBpbml0aWFsIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBjb25zdCB2YWx1ZUZyb21Jbml0aWFsID0gdHlwZW9mIGluaXRpYWwgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGluaXRpYWwgPT09IFwib2JqZWN0XCJcbiAgICAgICAgICAgID8gKF9hID0gcmVzb2x2ZVZhcmlhbnRGcm9tUHJvcHModGhpcy5wcm9wcywgaW5pdGlhbCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtrZXldXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoaXMgdmFsdWUgc3RpbGwgZXhpc3RzIGluIHRoZSBjdXJyZW50IGluaXRpYWwgdmFyaWFudCwgcmVhZCB0aGF0LlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGluaXRpYWwgJiYgdmFsdWVGcm9tSW5pdGlhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVGcm9tSW5pdGlhbDtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogQWx0ZXJuYXRpdmVseSwgaWYgdGhpcyBWaXN1YWxFbGVtZW50IGNvbmZpZyBoYXMgZGVmaW5lZCBhIGdldEJhc2VUYXJnZXRcbiAgICAgICAgICogc28gd2UgY2FuIHJlYWQgdGhlIHZhbHVlIGZyb20gYW4gYWx0ZXJuYXRpdmUgc291cmNlLCB0cnkgdGhhdC5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuZ2V0QmFzZVRhcmdldEZyb21Qcm9wcyh0aGlzLnByb3BzLCBrZXkpO1xuICAgICAgICBpZiAodGFyZ2V0ICE9PSB1bmRlZmluZWQgJiYgIWlzTW90aW9uVmFsdWUodGFyZ2V0KSlcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGUgdmFsdWUgd2FzIGluaXRpYWxseSBkZWZpbmVkIG9uIGluaXRpYWwsIGJ1dCBpdCBkb2Vzbid0IGFueSBtb3JlLFxuICAgICAgICAgKiByZXR1cm4gdW5kZWZpbmVkLiBPdGhlcndpc2UgcmV0dXJuIHRoZSB2YWx1ZSBhcyBpbml0aWFsbHkgcmVhZCBmcm9tIHRoZSBET00uXG4gICAgICAgICAqL1xuICAgICAgICByZXR1cm4gdGhpcy5pbml0aWFsVmFsdWVzW2tleV0gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgdmFsdWVGcm9tSW5pdGlhbCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgOiB0aGlzLmJhc2VUYXJnZXRba2V5XTtcbiAgICB9XG4gICAgb24oZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIXRoaXMuZXZlbnRzW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0gPSBuZXcgU3Vic2NyaXB0aW9uTWFuYWdlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50c1tldmVudE5hbWVdLmFkZChjYWxsYmFjayk7XG4gICAgfVxuICAgIG5vdGlmeShldmVudE5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0ubm90aWZ5KC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBWaXN1YWxFbGVtZW50IH07XG4iLCJpbXBvcnQgeyBpc0Jyb3dzZXIgfSBmcm9tICcuLi9pcy1icm93c2VyLm1qcyc7XG5pbXBvcnQgeyBoYXNSZWR1Y2VkTW90aW9uTGlzdGVuZXIsIHByZWZlcnNSZWR1Y2VkTW90aW9uIH0gZnJvbSAnLi9zdGF0ZS5tanMnO1xuXG5mdW5jdGlvbiBpbml0UHJlZmVyc1JlZHVjZWRNb3Rpb24oKSB7XG4gICAgaGFzUmVkdWNlZE1vdGlvbkxpc3RlbmVyLmN1cnJlbnQgPSB0cnVlO1xuICAgIGlmICghaXNCcm93c2VyKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKSB7XG4gICAgICAgIGNvbnN0IG1vdGlvbk1lZGlhUXVlcnkgPSB3aW5kb3cubWF0Y2hNZWRpYShcIihwcmVmZXJzLXJlZHVjZWQtbW90aW9uKVwiKTtcbiAgICAgICAgY29uc3Qgc2V0UmVkdWNlZE1vdGlvblByZWZlcmVuY2VzID0gKCkgPT4gKHByZWZlcnNSZWR1Y2VkTW90aW9uLmN1cnJlbnQgPSBtb3Rpb25NZWRpYVF1ZXJ5Lm1hdGNoZXMpO1xuICAgICAgICBtb3Rpb25NZWRpYVF1ZXJ5LmFkZExpc3RlbmVyKHNldFJlZHVjZWRNb3Rpb25QcmVmZXJlbmNlcyk7XG4gICAgICAgIHNldFJlZHVjZWRNb3Rpb25QcmVmZXJlbmNlcygpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcHJlZmVyc1JlZHVjZWRNb3Rpb24uY3VycmVudCA9IGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgaW5pdFByZWZlcnNSZWR1Y2VkTW90aW9uIH07XG4iLCJpbXBvcnQgeyBpc1dpbGxDaGFuZ2VNb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uL3ZhbHVlL3VzZS13aWxsLWNoYW5nZS9pcy5tanMnO1xuaW1wb3J0IHsgd2Fybk9uY2UgfSBmcm9tICcuLi8uLi91dGlscy93YXJuLW9uY2UubWpzJztcbmltcG9ydCB7IG1vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vdmFsdWUvaW5kZXgubWpzJztcbmltcG9ydCB7IGlzTW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi92YWx1ZS91dGlscy9pcy1tb3Rpb24tdmFsdWUubWpzJztcblxuZnVuY3Rpb24gdXBkYXRlTW90aW9uVmFsdWVzRnJvbVByb3BzKGVsZW1lbnQsIG5leHQsIHByZXYpIHtcbiAgICBjb25zdCB7IHdpbGxDaGFuZ2UgfSA9IG5leHQ7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gbmV4dCkge1xuICAgICAgICBjb25zdCBuZXh0VmFsdWUgPSBuZXh0W2tleV07XG4gICAgICAgIGNvbnN0IHByZXZWYWx1ZSA9IHByZXZba2V5XTtcbiAgICAgICAgaWYgKGlzTW90aW9uVmFsdWUobmV4dFZhbHVlKSkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIGlzIGEgbW90aW9uIHZhbHVlIGZvdW5kIGluIHByb3BzIG9yIHN0eWxlLCB3ZSB3YW50IHRvIGFkZCBpdFxuICAgICAgICAgICAgICogdG8gb3VyIHZpc3VhbCBlbGVtZW50J3MgbW90aW9uIHZhbHVlIG1hcC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZWxlbWVudC5hZGRWYWx1ZShrZXksIG5leHRWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoaXNXaWxsQ2hhbmdlTW90aW9uVmFsdWUod2lsbENoYW5nZSkpIHtcbiAgICAgICAgICAgICAgICB3aWxsQ2hhbmdlLmFkZChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDaGVjayB0aGUgdmVyc2lvbiBvZiB0aGUgaW5jb21pbmcgbW90aW9uIHZhbHVlIHdpdGggdGhpcyB2ZXJzaW9uXG4gICAgICAgICAgICAgKiBhbmQgd2FybiBhZ2FpbnN0IG1pc21hdGNoZXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJkZXZlbG9wbWVudFwiKSB7XG4gICAgICAgICAgICAgICAgd2Fybk9uY2UobmV4dFZhbHVlLnZlcnNpb24gPT09IFwiMTAuMTYuNFwiLCBgQXR0ZW1wdGluZyB0byBtaXggRnJhbWVyIE1vdGlvbiB2ZXJzaW9ucyAke25leHRWYWx1ZS52ZXJzaW9ufSB3aXRoIDEwLjE2LjQgbWF5IG5vdCB3b3JrIGFzIGV4cGVjdGVkLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzTW90aW9uVmFsdWUocHJldlZhbHVlKSkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB3ZSdyZSBzd2FwcGluZyBmcm9tIGEgbW90aW9uIHZhbHVlIHRvIGEgc3RhdGljIHZhbHVlLFxuICAgICAgICAgICAgICogY3JlYXRlIGEgbmV3IG1vdGlvbiB2YWx1ZSBmcm9tIHRoYXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZWxlbWVudC5hZGRWYWx1ZShrZXksIG1vdGlvblZhbHVlKG5leHRWYWx1ZSwgeyBvd25lcjogZWxlbWVudCB9KSk7XG4gICAgICAgICAgICBpZiAoaXNXaWxsQ2hhbmdlTW90aW9uVmFsdWUod2lsbENoYW5nZSkpIHtcbiAgICAgICAgICAgICAgICB3aWxsQ2hhbmdlLnJlbW92ZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHByZXZWYWx1ZSAhPT0gbmV4dFZhbHVlKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgaXMgYSBmbGF0IHZhbHVlIHRoYXQgaGFzIGNoYW5nZWQsIHVwZGF0ZSB0aGUgbW90aW9uIHZhbHVlXG4gICAgICAgICAgICAgKiBvciBjcmVhdGUgb25lIGlmIGl0IGRvZXNuJ3QgZXhpc3QuIFdlIG9ubHkgd2FudCB0byBkbyB0aGlzIGlmIHdlJ3JlXG4gICAgICAgICAgICAgKiBub3QgaGFuZGxpbmcgdGhlIHZhbHVlIHdpdGggb3VyIGFuaW1hdGlvbiBzdGF0ZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQuaGFzVmFsdWUoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nVmFsdWUgPSBlbGVtZW50LmdldFZhbHVlKGtleSk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogT25seSB1cGRhdGUgdmFsdWVzIHRoYXQgYXJlbid0IGJlaW5nIGFuaW1hdGVkIG9yIGV2ZW4gbG9va2VkIGF0XG4gICAgICAgICAgICAgICAgIWV4aXN0aW5nVmFsdWUuaGFzQW5pbWF0ZWQgJiYgZXhpc3RpbmdWYWx1ZS5zZXQobmV4dFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhdGVzdFZhbHVlID0gZWxlbWVudC5nZXRTdGF0aWNWYWx1ZShrZXkpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkVmFsdWUoa2V5LCBtb3Rpb25WYWx1ZShsYXRlc3RWYWx1ZSAhPT0gdW5kZWZpbmVkID8gbGF0ZXN0VmFsdWUgOiBuZXh0VmFsdWUsIHsgb3duZXI6IGVsZW1lbnQgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEhhbmRsZSByZW1vdmVkIHZhbHVlc1xuICAgIGZvciAoY29uc3Qga2V5IGluIHByZXYpIHtcbiAgICAgICAgaWYgKG5leHRba2V5XSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVWYWx1ZShrZXkpO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dDtcbn1cblxuZXhwb3J0IHsgdXBkYXRlTW90aW9uVmFsdWVzRnJvbVByb3BzIH07XG4iLCJpbXBvcnQgeyBnZXRPcmlnaW4sIGNoZWNrVGFyZ2V0Rm9yTmV3VmFsdWVzIH0gZnJvbSAnLi4vdXRpbHMvc2V0dGVycy5tanMnO1xuaW1wb3J0IHsgcGFyc2VEb21WYXJpYW50IH0gZnJvbSAnLi91dGlscy9wYXJzZS1kb20tdmFyaWFudC5tanMnO1xuaW1wb3J0IHsgVmlzdWFsRWxlbWVudCB9IGZyb20gJy4uL1Zpc3VhbEVsZW1lbnQubWpzJztcblxuY2xhc3MgRE9NVmlzdWFsRWxlbWVudCBleHRlbmRzIFZpc3VhbEVsZW1lbnQge1xuICAgIHNvcnRJbnN0YW5jZU5vZGVQb3NpdGlvbihhLCBiKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiByZXR1cm5zIGEgYml0bWFzaywgYnkgdXNpbmcgdGhlIGJpdHdpc2UgJlxuICAgICAgICAgKiB3ZSdyZSByZXR1cm5pbmcgdHJ1ZSBpZiAyIGluIHRoYXQgYml0bWFzayBpcyBzZXQgdG8gdHJ1ZS4gMiBpcyBzZXRcbiAgICAgICAgICogdG8gdHJ1ZSBpZiBiIHByZWNlZWRzIGEuXG4gICAgICAgICAqL1xuICAgICAgICByZXR1cm4gYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSAmIDIgPyAxIDogLTE7XG4gICAgfVxuICAgIGdldEJhc2VUYXJnZXRGcm9tUHJvcHMocHJvcHMsIGtleSkge1xuICAgICAgICByZXR1cm4gcHJvcHMuc3R5bGUgPyBwcm9wcy5zdHlsZVtrZXldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZW1vdmVWYWx1ZUZyb21SZW5kZXJTdGF0ZShrZXksIHsgdmFycywgc3R5bGUgfSkge1xuICAgICAgICBkZWxldGUgdmFyc1trZXldO1xuICAgICAgICBkZWxldGUgc3R5bGVba2V5XTtcbiAgICB9XG4gICAgbWFrZVRhcmdldEFuaW1hdGFibGVGcm9tSW5zdGFuY2UoeyB0cmFuc2l0aW9uLCB0cmFuc2l0aW9uRW5kLCAuLi50YXJnZXQgfSwgeyB0cmFuc2Zvcm1WYWx1ZXMgfSwgaXNNb3VudGVkKSB7XG4gICAgICAgIGxldCBvcmlnaW4gPSBnZXRPcmlnaW4odGFyZ2V0LCB0cmFuc2l0aW9uIHx8IHt9LCB0aGlzKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIEZyYW1lciBoYXMgcHJvdmlkZWQgYSBmdW5jdGlvbiB0byBjb252ZXJ0IGBDb2xvcmAgZXRjIHZhbHVlIHR5cGVzLCBjb252ZXJ0IHRoZW1cbiAgICAgICAgICovXG4gICAgICAgIGlmICh0cmFuc2Zvcm1WYWx1ZXMpIHtcbiAgICAgICAgICAgIGlmICh0cmFuc2l0aW9uRW5kKVxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25FbmQgPSB0cmFuc2Zvcm1WYWx1ZXModHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgICBpZiAodGFyZ2V0KVxuICAgICAgICAgICAgICAgIHRhcmdldCA9IHRyYW5zZm9ybVZhbHVlcyh0YXJnZXQpO1xuICAgICAgICAgICAgaWYgKG9yaWdpbilcbiAgICAgICAgICAgICAgICBvcmlnaW4gPSB0cmFuc2Zvcm1WYWx1ZXMob3JpZ2luKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNNb3VudGVkKSB7XG4gICAgICAgICAgICBjaGVja1RhcmdldEZvck5ld1ZhbHVlcyh0aGlzLCB0YXJnZXQsIG9yaWdpbik7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSBwYXJzZURvbVZhcmlhbnQodGhpcywgdGFyZ2V0LCBvcmlnaW4sIHRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgICAgdHJhbnNpdGlvbkVuZCA9IHBhcnNlZC50cmFuc2l0aW9uRW5kO1xuICAgICAgICAgICAgdGFyZ2V0ID0gcGFyc2VkLnRhcmdldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHJhbnNpdGlvbixcbiAgICAgICAgICAgIHRyYW5zaXRpb25FbmQsXG4gICAgICAgICAgICAuLi50YXJnZXQsXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5leHBvcnQgeyBET01WaXN1YWxFbGVtZW50IH07XG4iLCJpbXBvcnQgeyBidWlsZEhUTUxTdHlsZXMgfSBmcm9tICcuL3V0aWxzL2J1aWxkLXN0eWxlcy5tanMnO1xuaW1wb3J0IHsgaXNDU1NWYXJpYWJsZU5hbWUgfSBmcm9tICcuLi9kb20vdXRpbHMvaXMtY3NzLXZhcmlhYmxlLm1qcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm1Qcm9wcyB9IGZyb20gJy4vdXRpbHMvdHJhbnNmb3JtLm1qcyc7XG5pbXBvcnQgeyBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMgfSBmcm9tICcuL3V0aWxzL3NjcmFwZS1tb3Rpb24tdmFsdWVzLm1qcyc7XG5pbXBvcnQgeyByZW5kZXJIVE1MIH0gZnJvbSAnLi91dGlscy9yZW5kZXIubWpzJztcbmltcG9ydCB7IGdldERlZmF1bHRWYWx1ZVR5cGUgfSBmcm9tICcuLi9kb20vdmFsdWUtdHlwZXMvZGVmYXVsdHMubWpzJztcbmltcG9ydCB7IG1lYXN1cmVWaWV3cG9ydEJveCB9IGZyb20gJy4uLy4uL3Byb2plY3Rpb24vdXRpbHMvbWVhc3VyZS5tanMnO1xuaW1wb3J0IHsgRE9NVmlzdWFsRWxlbWVudCB9IGZyb20gJy4uL2RvbS9ET01WaXN1YWxFbGVtZW50Lm1qcyc7XG5pbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vdmFsdWUvdXRpbHMvaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5cbmZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkge1xuICAgIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbn1cbmNsYXNzIEhUTUxWaXN1YWxFbGVtZW50IGV4dGVuZHMgRE9NVmlzdWFsRWxlbWVudCB7XG4gICAgcmVhZFZhbHVlRnJvbUluc3RhbmNlKGluc3RhbmNlLCBrZXkpIHtcbiAgICAgICAgaWYgKHRyYW5zZm9ybVByb3BzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0VHlwZSA9IGdldERlZmF1bHRWYWx1ZVR5cGUoa2V5KTtcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0VHlwZSA/IGRlZmF1bHRUeXBlLmRlZmF1bHQgfHwgMCA6IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShpbnN0YW5jZSk7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IChpc0NTU1ZhcmlhYmxlTmFtZShrZXkpXG4gICAgICAgICAgICAgICAgPyBjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoa2V5KVxuICAgICAgICAgICAgICAgIDogY29tcHV0ZWRTdHlsZVtrZXldKSB8fCAwO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnRyaW0oKSA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIG1lYXN1cmVJbnN0YW5jZVZpZXdwb3J0Qm94KGluc3RhbmNlLCB7IHRyYW5zZm9ybVBhZ2VQb2ludCB9KSB7XG4gICAgICAgIHJldHVybiBtZWFzdXJlVmlld3BvcnRCb3goaW5zdGFuY2UsIHRyYW5zZm9ybVBhZ2VQb2ludCk7XG4gICAgfVxuICAgIGJ1aWxkKHJlbmRlclN0YXRlLCBsYXRlc3RWYWx1ZXMsIG9wdGlvbnMsIHByb3BzKSB7XG4gICAgICAgIGJ1aWxkSFRNTFN0eWxlcyhyZW5kZXJTdGF0ZSwgbGF0ZXN0VmFsdWVzLCBvcHRpb25zLCBwcm9wcy50cmFuc2Zvcm1UZW1wbGF0ZSk7XG4gICAgfVxuICAgIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyhwcm9wcywgcHJldlByb3BzKSB7XG4gICAgICAgIHJldHVybiBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMocHJvcHMsIHByZXZQcm9wcyk7XG4gICAgfVxuICAgIGhhbmRsZUNoaWxkTW90aW9uVmFsdWUoKSB7XG4gICAgICAgIGlmICh0aGlzLmNoaWxkU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5jaGlsZFN1YnNjcmlwdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBpZiAoaXNNb3Rpb25WYWx1ZShjaGlsZHJlbikpIHtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRTdWJzY3JpcHRpb24gPSBjaGlsZHJlbi5vbihcImNoYW5nZVwiLCAobGF0ZXN0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LnRleHRDb250ZW50ID0gYCR7bGF0ZXN0fWA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW5kZXJJbnN0YW5jZShpbnN0YW5jZSwgcmVuZGVyU3RhdGUsIHN0eWxlUHJvcCwgcHJvamVjdGlvbikge1xuICAgICAgICByZW5kZXJIVE1MKGluc3RhbmNlLCByZW5kZXJTdGF0ZSwgc3R5bGVQcm9wLCBwcm9qZWN0aW9uKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEhUTUxWaXN1YWxFbGVtZW50LCBnZXRDb21wdXRlZFN0eWxlIH07XG4iLCJpbXBvcnQgeyBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMgfSBmcm9tICcuL3V0aWxzL3NjcmFwZS1tb3Rpb24tdmFsdWVzLm1qcyc7XG5pbXBvcnQgeyBET01WaXN1YWxFbGVtZW50IH0gZnJvbSAnLi4vZG9tL0RPTVZpc3VhbEVsZW1lbnQubWpzJztcbmltcG9ydCB7IGJ1aWxkU1ZHQXR0cnMgfSBmcm9tICcuL3V0aWxzL2J1aWxkLWF0dHJzLm1qcyc7XG5pbXBvcnQgeyBjYW1lbFRvRGFzaCB9IGZyb20gJy4uL2RvbS91dGlscy9jYW1lbC10by1kYXNoLm1qcyc7XG5pbXBvcnQgeyBjYW1lbENhc2VBdHRyaWJ1dGVzIH0gZnJvbSAnLi91dGlscy9jYW1lbC1jYXNlLWF0dHJzLm1qcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm1Qcm9wcyB9IGZyb20gJy4uL2h0bWwvdXRpbHMvdHJhbnNmb3JtLm1qcyc7XG5pbXBvcnQgeyByZW5kZXJTVkcgfSBmcm9tICcuL3V0aWxzL3JlbmRlci5tanMnO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdFZhbHVlVHlwZSB9IGZyb20gJy4uL2RvbS92YWx1ZS10eXBlcy9kZWZhdWx0cy5tanMnO1xuaW1wb3J0IHsgY3JlYXRlQm94IH0gZnJvbSAnLi4vLi4vcHJvamVjdGlvbi9nZW9tZXRyeS9tb2RlbHMubWpzJztcbmltcG9ydCB7IGlzU1ZHVGFnIH0gZnJvbSAnLi91dGlscy9pcy1zdmctdGFnLm1qcyc7XG5cbmNsYXNzIFNWR1Zpc3VhbEVsZW1lbnQgZXh0ZW5kcyBET01WaXN1YWxFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5pc1NWR1RhZyA9IGZhbHNlO1xuICAgIH1cbiAgICBnZXRCYXNlVGFyZ2V0RnJvbVByb3BzKHByb3BzLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzW2tleV07XG4gICAgfVxuICAgIHJlYWRWYWx1ZUZyb21JbnN0YW5jZShpbnN0YW5jZSwga2V5KSB7XG4gICAgICAgIGlmICh0cmFuc2Zvcm1Qcm9wcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdFR5cGUgPSBnZXREZWZhdWx0VmFsdWVUeXBlKGtleSk7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFR5cGUgPyBkZWZhdWx0VHlwZS5kZWZhdWx0IHx8IDAgOiAwO1xuICAgICAgICB9XG4gICAgICAgIGtleSA9ICFjYW1lbENhc2VBdHRyaWJ1dGVzLmhhcyhrZXkpID8gY2FtZWxUb0Rhc2goa2V5KSA6IGtleTtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLmdldEF0dHJpYnV0ZShrZXkpO1xuICAgIH1cbiAgICBtZWFzdXJlSW5zdGFuY2VWaWV3cG9ydEJveCgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJveCgpO1xuICAgIH1cbiAgICBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMocHJvcHMsIHByZXZQcm9wcykge1xuICAgICAgICByZXR1cm4gc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzKHByb3BzLCBwcmV2UHJvcHMpO1xuICAgIH1cbiAgICBidWlsZChyZW5kZXJTdGF0ZSwgbGF0ZXN0VmFsdWVzLCBvcHRpb25zLCBwcm9wcykge1xuICAgICAgICBidWlsZFNWR0F0dHJzKHJlbmRlclN0YXRlLCBsYXRlc3RWYWx1ZXMsIG9wdGlvbnMsIHRoaXMuaXNTVkdUYWcsIHByb3BzLnRyYW5zZm9ybVRlbXBsYXRlKTtcbiAgICB9XG4gICAgcmVuZGVySW5zdGFuY2UoaW5zdGFuY2UsIHJlbmRlclN0YXRlLCBzdHlsZVByb3AsIHByb2plY3Rpb24pIHtcbiAgICAgICAgcmVuZGVyU1ZHKGluc3RhbmNlLCByZW5kZXJTdGF0ZSwgc3R5bGVQcm9wLCBwcm9qZWN0aW9uKTtcbiAgICB9XG4gICAgbW91bnQoaW5zdGFuY2UpIHtcbiAgICAgICAgdGhpcy5pc1NWR1RhZyA9IGlzU1ZHVGFnKGluc3RhbmNlLnRhZ05hbWUpO1xuICAgICAgICBzdXBlci5tb3VudChpbnN0YW5jZSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBTVkdWaXN1YWxFbGVtZW50IH07XG4iLCJpbXBvcnQgeyBIVE1MVmlzdWFsRWxlbWVudCB9IGZyb20gJy4uL2h0bWwvSFRNTFZpc3VhbEVsZW1lbnQubWpzJztcbmltcG9ydCB7IFNWR1Zpc3VhbEVsZW1lbnQgfSBmcm9tICcuLi9zdmcvU1ZHVmlzdWFsRWxlbWVudC5tanMnO1xuaW1wb3J0IHsgaXNTVkdDb21wb25lbnQgfSBmcm9tICcuL3V0aWxzL2lzLXN2Zy1jb21wb25lbnQubWpzJztcblxuY29uc3QgY3JlYXRlRG9tVmlzdWFsRWxlbWVudCA9IChDb21wb25lbnQsIG9wdGlvbnMpID0+IHtcbiAgICByZXR1cm4gaXNTVkdDb21wb25lbnQoQ29tcG9uZW50KVxuICAgICAgICA/IG5ldyBTVkdWaXN1YWxFbGVtZW50KG9wdGlvbnMsIHsgZW5hYmxlSGFyZHdhcmVBY2NlbGVyYXRpb246IGZhbHNlIH0pXG4gICAgICAgIDogbmV3IEhUTUxWaXN1YWxFbGVtZW50KG9wdGlvbnMsIHsgZW5hYmxlSGFyZHdhcmVBY2NlbGVyYXRpb246IHRydWUgfSk7XG59O1xuXG5leHBvcnQgeyBjcmVhdGVEb21WaXN1YWxFbGVtZW50IH07XG4iLCJpbXBvcnQgeyBjcmVhdGVNb3Rpb25Db21wb25lbnQgfSBmcm9tICcuLi8uLi9tb3Rpb24vaW5kZXgubWpzJztcbmltcG9ydCB7IGNyZWF0ZU1vdGlvblByb3h5IH0gZnJvbSAnLi9tb3Rpb24tcHJveHkubWpzJztcbmltcG9ydCB7IGNyZWF0ZURvbU1vdGlvbkNvbmZpZyB9IGZyb20gJy4vdXRpbHMvY3JlYXRlLWNvbmZpZy5tanMnO1xuaW1wb3J0IHsgZ2VzdHVyZUFuaW1hdGlvbnMgfSBmcm9tICcuLi8uLi9tb3Rpb24vZmVhdHVyZXMvZ2VzdHVyZXMubWpzJztcbmltcG9ydCB7IGFuaW1hdGlvbnMgfSBmcm9tICcuLi8uLi9tb3Rpb24vZmVhdHVyZXMvYW5pbWF0aW9ucy5tanMnO1xuaW1wb3J0IHsgZHJhZyB9IGZyb20gJy4uLy4uL21vdGlvbi9mZWF0dXJlcy9kcmFnLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVEb21WaXN1YWxFbGVtZW50IH0gZnJvbSAnLi9jcmVhdGUtdmlzdWFsLWVsZW1lbnQubWpzJztcbmltcG9ydCB7IGxheW91dCB9IGZyb20gJy4uLy4uL21vdGlvbi9mZWF0dXJlcy9sYXlvdXQubWpzJztcblxuY29uc3QgcHJlbG9hZGVkRmVhdHVyZXMgPSB7XG4gICAgLi4uYW5pbWF0aW9ucyxcbiAgICAuLi5nZXN0dXJlQW5pbWF0aW9ucyxcbiAgICAuLi5kcmFnLFxuICAgIC4uLmxheW91dCxcbn07XG4vKipcbiAqIEhUTUwgJiBTVkcgY29tcG9uZW50cywgb3B0aW1pc2VkIGZvciB1c2Ugd2l0aCBnZXN0dXJlcyBhbmQgYW5pbWF0aW9uLiBUaGVzZSBjYW4gYmUgdXNlZCBhc1xuICogZHJvcC1pbiByZXBsYWNlbWVudHMgZm9yIGFueSBIVE1MICYgU1ZHIGNvbXBvbmVudCwgYWxsIENTUyAmIFNWRyBwcm9wZXJ0aWVzIGFyZSBzdXBwb3J0ZWQuXG4gKlxuICogQHB1YmxpY1xuICovXG5jb25zdCBtb3Rpb24gPSAvKkBfX1BVUkVfXyovIGNyZWF0ZU1vdGlvblByb3h5KChDb21wb25lbnQsIGNvbmZpZykgPT4gY3JlYXRlRG9tTW90aW9uQ29uZmlnKENvbXBvbmVudCwgY29uZmlnLCBwcmVsb2FkZWRGZWF0dXJlcywgY3JlYXRlRG9tVmlzdWFsRWxlbWVudCkpO1xuLyoqXG4gKiBDcmVhdGUgYSBET00gYG1vdGlvbmAgY29tcG9uZW50IHdpdGggdGhlIHByb3ZpZGVkIHN0cmluZy4gVGhpcyBpcyBwcmltYXJpbHkgaW50ZW5kZWRcbiAqIGFzIGEgZnVsbCBhbHRlcm5hdGl2ZSB0byBgbW90aW9uYCBmb3IgY29uc3VtZXJzIHdobyBoYXZlIHRvIHN1cHBvcnQgZW52aXJvbm1lbnRzIHRoYXQgZG9uJ3RcbiAqIHN1cHBvcnQgYFByb3h5YC5cbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBpbXBvcnQgeyBjcmVhdGVEb21Nb3Rpb25Db21wb25lbnQgfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiXG4gKlxuICogY29uc3QgbW90aW9uID0ge1xuICogICBkaXY6IGNyZWF0ZURvbU1vdGlvbkNvbXBvbmVudCgnZGl2JylcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRG9tTW90aW9uQ29tcG9uZW50KGtleSkge1xuICAgIHJldHVybiBjcmVhdGVNb3Rpb25Db21wb25lbnQoY3JlYXRlRG9tTW90aW9uQ29uZmlnKGtleSwgeyBmb3J3YXJkTW90aW9uUHJvcHM6IGZhbHNlIH0sIHByZWxvYWRlZEZlYXR1cmVzLCBjcmVhdGVEb21WaXN1YWxFbGVtZW50KSk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZURvbU1vdGlvbkNvbXBvbmVudCwgbW90aW9uIH07XG4iLCJpbXBvcnQgeyBIVE1MUHJvamVjdGlvbk5vZGUgfSBmcm9tICcuLi8uLi9wcm9qZWN0aW9uL25vZGUvSFRNTFByb2plY3Rpb25Ob2RlLm1qcyc7XG5pbXBvcnQgeyBNZWFzdXJlTGF5b3V0IH0gZnJvbSAnLi9sYXlvdXQvTWVhc3VyZUxheW91dC5tanMnO1xuXG5jb25zdCBsYXlvdXQgPSB7XG4gICAgbGF5b3V0OiB7XG4gICAgICAgIFByb2plY3Rpb25Ob2RlOiBIVE1MUHJvamVjdGlvbk5vZGUsXG4gICAgICAgIE1lYXN1cmVMYXlvdXQsXG4gICAgfSxcbn07XG5cbmV4cG9ydCB7IGxheW91dCB9O1xuIiwiaW1wb3J0IHsgaXNTVkdDb21wb25lbnQgfSBmcm9tICcuL2lzLXN2Zy1jb21wb25lbnQubWpzJztcbmltcG9ydCB7IGNyZWF0ZVVzZVJlbmRlciB9IGZyb20gJy4uL3VzZS1yZW5kZXIubWpzJztcbmltcG9ydCB7IHN2Z01vdGlvbkNvbmZpZyB9IGZyb20gJy4uLy4uL3N2Zy9jb25maWctbW90aW9uLm1qcyc7XG5pbXBvcnQgeyBodG1sTW90aW9uQ29uZmlnIH0gZnJvbSAnLi4vLi4vaHRtbC9jb25maWctbW90aW9uLm1qcyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZURvbU1vdGlvbkNvbmZpZyhDb21wb25lbnQsIHsgZm9yd2FyZE1vdGlvblByb3BzID0gZmFsc2UgfSwgcHJlbG9hZGVkRmVhdHVyZXMsIGNyZWF0ZVZpc3VhbEVsZW1lbnQpIHtcbiAgICBjb25zdCBiYXNlQ29uZmlnID0gaXNTVkdDb21wb25lbnQoQ29tcG9uZW50KVxuICAgICAgICA/IHN2Z01vdGlvbkNvbmZpZ1xuICAgICAgICA6IGh0bWxNb3Rpb25Db25maWc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uYmFzZUNvbmZpZyxcbiAgICAgICAgcHJlbG9hZGVkRmVhdHVyZXMsXG4gICAgICAgIHVzZVJlbmRlcjogY3JlYXRlVXNlUmVuZGVyKGZvcndhcmRNb3Rpb25Qcm9wcyksXG4gICAgICAgIGNyZWF0ZVZpc3VhbEVsZW1lbnQsXG4gICAgICAgIENvbXBvbmVudCxcbiAgICB9O1xufVxuXG5leHBvcnQgeyBjcmVhdGVEb21Nb3Rpb25Db25maWcgfTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBtb3Rpb24gfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiXHJcblxyXG5cclxuY29uc3QgVGFqbWVyID0gKCkgPT4ge1xyXG5cclxuICAgIGNvbnN0IFtpc09wZW4sIHNldE9wZW5dID0gdXNlU3RhdGUoZmFsc2UpXHJcbiAgICBjb25zdCBbaXNPcGVuMSwgc2V0T3BlbjFdID0gdXNlU3RhdGUoZmFsc2UpXHJcbiAgICBjb25zdCBbaXNPcGVuMiwgc2V0T3BlbjJdID0gdXNlU3RhdGUoZmFsc2UpXHJcbiAgICBjb25zdCBbaXNPcGVuMywgc2V0T3BlbjNdID0gdXNlU3RhdGUoZmFsc2UpXHJcbiAgICBjb25zdCBbaXNPcGVuNCwgc2V0T3BlbjRdID0gdXNlU3RhdGUoZmFsc2UpXHJcbiAgICBjb25zdCBbaXNPcGVuNSwgc2V0T3BlbjVdID0gdXNlU3RhdGUoZmFsc2UpXHJcbiAgICBjb25zdCBbaXNPcGVuNiwgc2V0T3BlbjZdID0gdXNlU3RhdGUoZmFsc2UpXHJcbiAgICBjb25zdCBbaXNPcGVuNywgc2V0T3BlbjddID0gdXNlU3RhdGUoZmFsc2UpXHJcbiAgICBjb25zdCBbaXNPcGVuOCwgc2V0T3BlbjhdID0gdXNlU3RhdGUoZmFsc2UpXHJcbiAgICBjb25zdCBbaXNPcGVuOSwgc2V0T3BlbjldID0gdXNlU3RhdGUoZmFsc2UpXHJcblxyXG5cclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMSwgc2V0SW5wdXRWYWx1ZTFdID0gdXNlU3RhdGUoMCk7XHJcbiAgICBjb25zdCBbaW5wdXRWYWx1ZTIsIHNldElucHV0VmFsdWUyXSA9IHVzZVN0YXRlKDApO1xyXG5cclxuXHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTEgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElucHV0VmFsdWUxKGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUyID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMihlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xvckJveFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxtb3Rpb24uZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJib3hcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5b3V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBoZWlnaHQ6IGlzT3BlbiA/IFwiMzE1cHhcIiA6IFwiMHB4XCIgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYXNlOiBcImxpbmVhclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhdDogSW5maW5pdHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXsoKSA9PiBzZXRPcGVuKCFpc09wZW4pfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYm94QmF0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgPjUgc2VrPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bW90aW9uLmRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYm94MVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXlvdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IGhlaWdodDogaXNPcGVuMSA/IFwiMzE1cHhcIiA6IFwiMHB4XCIgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYXNlOiBcImxpbmVhclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAxMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBlYXQ6IEluZmluaXR5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IG9uQ2xpY2s9eygpID0+IHNldE9wZW4xKCFpc09wZW4xKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJveEJhdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID4xMCBzZWs8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bW90aW9uLmRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYm94MlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXlvdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IGhlaWdodDogaXNPcGVuMiA/IFwiMzE1cHhcIiA6IFwiMHB4XCIgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYXNlOiBcImxpbmVhclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhdDogSW5maW5pdHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDIwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IG9uQ2xpY2s9eygpID0+IHNldE9wZW4yKCFpc09wZW4yKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJveEJhdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID4yMCBzZWs8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bW90aW9uLmRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYm94M1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXlvdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IGhlaWdodDogaXNPcGVuMyA/IFwiMzE1cHhcIiA6IFwiMHB4XCIgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYXNlOiBcImxpbmVhclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBpbnB1dFZhbHVlMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBlYXQ6IEluZmluaXR5LFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgb25DbGljaz17KCkgPT4gc2V0T3BlbjMoIWlzT3BlbjMpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYm94QmF0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgPntpbnB1dFZhbHVlMX08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bW90aW9uLmRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYm94NFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXlvdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IGhlaWdodDogaXNPcGVuNCA/IFwiMzE1cHhcIiA6IFwiMHB4XCIgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYXNlOiBcImxpbmVhclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBpbnB1dFZhbHVlMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBlYXQ6IEluZmluaXR5LFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgb25DbGljaz17KCkgPT4gc2V0T3BlbjQoIWlzT3BlbjQpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYm94QmF0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgPntpbnB1dFZhbHVlMn08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0VGV4dFwiID4gVXBpxaFpIGJyb2ogc2VrdW5kaSA8c3BhbiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgY2xhc3NOYW1lPVwiaW5wdXRQbGFjZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJicm9qXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUxfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWUxfSAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0VGV4dFwiID4gVXBpxaFpIGJyb2ogc2VrdW5kaSA8c3BhbiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgY2xhc3NOYW1lPVwiaW5wdXRQbGFjZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJicm9qXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWUyfSAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gW3NldE9wZW40KCFpc09wZW40KSwgc2V0T3BlbjMoIWlzT3BlbjMpLCBzZXRPcGVuMighaXNPcGVuMiksXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0T3BlbjEoIWlzT3BlbjEpLCBzZXRPcGVuKCFpc09wZW4pXX1cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJib3hCYXRBbGxcIlxyXG4gICAgICAgICAgICAgICAgPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzdmU8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxocj48L2hyPlxyXG4gICAgICAgICAgICAgICAgPGgxPkNlbyBkYW4gdSBwcm9sYXp1IDwvaDE+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbG9yQm94XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPG1vdGlvbi5kaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJveDRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5b3V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBoZWlnaHQ6IGlzT3BlbjUgPyBcIjMwOHB4XCIgOiBcIjBweFwiIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFzZTogXCJlYXNlSW5PdXRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInNwcmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhdDogSW5maW5pdHksXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMSBzZWtcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPG1vdGlvbi5kaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJveDNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5b3V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBoZWlnaHQ6IGlzT3BlbjYgPyBcIjMxNXB4XCIgOiBcIjBweFwiIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFzZTogXCJsaW5lYXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMTUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwZWF0OiBJbmZpbml0eSxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpdGxlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxNSBzZWtcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPG1vdGlvbi5kaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJveDJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5b3V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBoZWlnaHQ6IGlzT3BlbjcgPyBcIjMxNXB4XCIgOiBcIjBweFwiIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFzZTogXCJsaW5lYXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNjAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwZWF0OiBJbmZpbml0eSxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpdGxlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxIG1pbnV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxtb3Rpb24uZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJib3gxXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheW91dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgaGVpZ2h0OiBpc09wZW44ID8gXCIzMTVweFwiIDogXCIwcHhcIiB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbj17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhc2U6IFwibGluZWFyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDM2MDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwZWF0OiBJbmZpbml0eSxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpdGxlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxIHNhdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bW90aW9uLmRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYm94XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheW91dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgaGVpZ2h0OiBpc09wZW45ID8gXCIzMTVweFwiIDogXCIwcHhcIiB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbj17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhc2U6IFwibGluZWFyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDg2NDAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhdDogSW5maW5pdHksXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMSBkYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gW3NldE9wZW41KCFpc09wZW41KSwgc2V0T3BlbjYoIWlzT3BlbjYpLCBzZXRPcGVuNyghaXNPcGVuNyksXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0T3BlbjgoIWlzT3BlbjgpLCBzZXRPcGVuOSghaXNPcGVuOSldfVxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJveEJhdEFsbFwiXHJcbiAgICAgICAgICAgICAgICA+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIFBPS1JFTkkgREFOPC9kaXY+XHJcblxyXG5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG5cclxuICAgICAgICA8Lz5cclxuICAgIClcclxuXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgVGFqbWVyOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJndW1lbnRzKTtcbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGJpbmQgZnJvbSAnLi9oZWxwZXJzL2JpbmQuanMnO1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG5jb25zdCB7dG9TdHJpbmd9ID0gT2JqZWN0LnByb3RvdHlwZTtcbmNvbnN0IHtnZXRQcm90b3R5cGVPZn0gPSBPYmplY3Q7XG5cbmNvbnN0IGtpbmRPZiA9IChjYWNoZSA9PiB0aGluZyA9PiB7XG4gICAgY29uc3Qgc3RyID0gdG9TdHJpbmcuY2FsbCh0aGluZyk7XG4gICAgcmV0dXJuIGNhY2hlW3N0cl0gfHwgKGNhY2hlW3N0cl0gPSBzdHIuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCkpO1xufSkoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG5cbmNvbnN0IGtpbmRPZlRlc3QgPSAodHlwZSkgPT4ge1xuICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKHRoaW5nKSA9PiBraW5kT2YodGhpbmcpID09PSB0eXBlXG59XG5cbmNvbnN0IHR5cGVPZlRlc3QgPSB0eXBlID0+IHRoaW5nID0+IHR5cGVvZiB0aGluZyA9PT0gdHlwZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IHtpc0FycmF5fSA9IEFycmF5O1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVW5kZWZpbmVkID0gdHlwZU9mVGVzdCgndW5kZWZpbmVkJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgaXNGdW5jdGlvbih2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIpICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQXJyYXlCdWZmZXIgPSBraW5kT2ZUZXN0KCdBcnJheUJ1ZmZlcicpO1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgbGV0IHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAoaXNBcnJheUJ1ZmZlcih2YWwuYnVmZmVyKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmluZyA9IHR5cGVPZlRlc3QoJ3N0cmluZycpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRnVuY3Rpb24gPSB0eXBlT2ZUZXN0KCdmdW5jdGlvbicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzTnVtYmVyID0gdHlwZU9mVGVzdCgnbnVtYmVyJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyAhPT0gbnVsbCAmJiB0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQm9vbGVhblxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQm9vbGVhbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQm9vbGVhbiA9IHRoaW5nID0+IHRoaW5nID09PSB0cnVlIHx8IHRoaW5nID09PSBmYWxzZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4ge1xuICBpZiAoa2luZE9mKHZhbCkgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgcHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIChwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90b3R5cGUpID09PSBudWxsKSAmJiAhKFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWwpICYmICEoU3ltYm9sLml0ZXJhdG9yIGluIHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0RhdGUgPSBraW5kT2ZUZXN0KCdEYXRlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0ZpbGUgPSBraW5kT2ZUZXN0KCdGaWxlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Jsb2IgPSBraW5kT2ZUZXN0KCdCbG9iJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlTGlzdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGaWxlTGlzdCA9IGtpbmRPZlRlc3QoJ0ZpbGVMaXN0Jyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNTdHJlYW0gPSAodmFsKSA9PiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Zvcm1EYXRhID0gKHRoaW5nKSA9PiB7XG4gIGxldCBraW5kO1xuICByZXR1cm4gdGhpbmcgJiYgKFxuICAgICh0eXBlb2YgRm9ybURhdGEgPT09ICdmdW5jdGlvbicgJiYgdGhpbmcgaW5zdGFuY2VvZiBGb3JtRGF0YSkgfHwgKFxuICAgICAgaXNGdW5jdGlvbih0aGluZy5hcHBlbmQpICYmIChcbiAgICAgICAgKGtpbmQgPSBraW5kT2YodGhpbmcpKSA9PT0gJ2Zvcm1kYXRhJyB8fFxuICAgICAgICAvLyBkZXRlY3QgZm9ybS1kYXRhIGluc3RhbmNlXG4gICAgICAgIChraW5kID09PSAnb2JqZWN0JyAmJiBpc0Z1bmN0aW9uKHRoaW5nLnRvU3RyaW5nKSAmJiB0aGluZy50b1N0cmluZygpID09PSAnW29iamVjdCBGb3JtRGF0YV0nKVxuICAgICAgKVxuICAgIClcbiAgKVxufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNVUkxTZWFyY2hQYXJhbXMgPSBraW5kT2ZUZXN0KCdVUkxTZWFyY2hQYXJhbXMnKTtcblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuY29uc3QgdHJpbSA9IChzdHIpID0+IHN0ci50cmltID9cbiAgc3RyLnRyaW0oKSA6IHN0ci5yZXBsYWNlKC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZywgJycpO1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBbYWxsT3duS2V5cyA9IGZhbHNlXVxuICogQHJldHVybnMge2FueX1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuLCB7YWxsT3duS2V5cyA9IGZhbHNlfSA9IHt9KSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGk7XG4gIGxldCBsO1xuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yIChpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBjb25zdCBrZXlzID0gYWxsT3duS2V5cyA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikgOiBPYmplY3Qua2V5cyhvYmopO1xuICAgIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICAgIGxldCBrZXk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRLZXkob2JqLCBrZXkpIHtcbiAga2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICBsZXQgX2tleTtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBfa2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoa2V5ID09PSBfa2V5LnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIHJldHVybiBfa2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuY29uc3QgX2dsb2JhbCA9ICgoKSA9PiB7XG4gIC8qZXNsaW50IG5vLXVuZGVmOjAqL1xuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpIHJldHVybiBnbG9iYWxUaGlzO1xuICByZXR1cm4gdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKVxufSkoKTtcblxuY29uc3QgaXNDb250ZXh0RGVmaW5lZCA9IChjb250ZXh0KSA9PiAhaXNVbmRlZmluZWQoY29udGV4dCkgJiYgY29udGV4dCAhPT0gX2dsb2JhbDtcblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKlxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICBjb25zdCB7Y2FzZWxlc3N9ID0gaXNDb250ZXh0RGVmaW5lZCh0aGlzKSAmJiB0aGlzIHx8IHt9O1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgY29uc3QgYXNzaWduVmFsdWUgPSAodmFsLCBrZXkpID0+IHtcbiAgICBjb25zdCB0YXJnZXRLZXkgPSBjYXNlbGVzcyAmJiBmaW5kS2V5KHJlc3VsdCwga2V5KSB8fCBrZXk7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W3RhcmdldEtleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSBtZXJnZShyZXN1bHRbdGFyZ2V0S2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgYXJndW1lbnRzW2ldICYmIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXNdXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmNvbnN0IGV4dGVuZCA9IChhLCBiLCB0aGlzQXJnLCB7YWxsT3duS2V5c309IHt9KSA9PiB7XG4gIGZvckVhY2goYiwgKHZhbCwga2V5KSA9PiB7XG4gICAgaWYgKHRoaXNBcmcgJiYgaXNGdW5jdGlvbih2YWwpKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0sIHthbGxPd25LZXlzfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5jb25zdCBzdHJpcEJPTSA9IChjb250ZW50KSA9PiB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlclxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ29uc3RydWN0b3JcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcHJvcHNdXG4gKiBAcGFyYW0ge29iamVjdH0gW2Rlc2NyaXB0b3JzXVxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5jb25zdCBpbmhlcml0cyA9IChjb25zdHJ1Y3Rvciwgc3VwZXJDb25zdHJ1Y3RvciwgcHJvcHMsIGRlc2NyaXB0b3JzKSA9PiB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIGRlc2NyaXB0b3JzKTtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb25zdHJ1Y3RvciwgJ3N1cGVyJywge1xuICAgIHZhbHVlOiBzdXBlckNvbnN0cnVjdG9yLnByb3RvdHlwZVxuICB9KTtcbiAgcHJvcHMgJiYgT2JqZWN0LmFzc2lnbihjb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3BzKTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlIG9iamVjdCB3aXRoIGRlZXAgcHJvdG90eXBlIGNoYWluIHRvIGEgZmxhdCBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2VPYmogc291cmNlIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IFtkZXN0T2JqXVxuICogQHBhcmFtIHtGdW5jdGlvbnxCb29sZWFufSBbZmlsdGVyXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Byb3BGaWx0ZXJdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuY29uc3QgdG9GbGF0T2JqZWN0ID0gKHNvdXJjZU9iaiwgZGVzdE9iaiwgZmlsdGVyLCBwcm9wRmlsdGVyKSA9PiB7XG4gIGxldCBwcm9wcztcbiAgbGV0IGk7XG4gIGxldCBwcm9wO1xuICBjb25zdCBtZXJnZWQgPSB7fTtcblxuICBkZXN0T2JqID0gZGVzdE9iaiB8fCB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIGlmIChzb3VyY2VPYmogPT0gbnVsbCkgcmV0dXJuIGRlc3RPYmo7XG5cbiAgZG8ge1xuICAgIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc291cmNlT2JqKTtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICBwcm9wID0gcHJvcHNbaV07XG4gICAgICBpZiAoKCFwcm9wRmlsdGVyIHx8IHByb3BGaWx0ZXIocHJvcCwgc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgIW1lcmdlZFtwcm9wXSkge1xuICAgICAgICBkZXN0T2JqW3Byb3BdID0gc291cmNlT2JqW3Byb3BdO1xuICAgICAgICBtZXJnZWRbcHJvcF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3VyY2VPYmogPSBmaWx0ZXIgIT09IGZhbHNlICYmIGdldFByb3RvdHlwZU9mKHNvdXJjZU9iaik7XG4gIH0gd2hpbGUgKHNvdXJjZU9iaiAmJiAoIWZpbHRlciB8fCBmaWx0ZXIoc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgc291cmNlT2JqICE9PSBPYmplY3QucHJvdG90eXBlKTtcblxuICByZXR1cm4gZGVzdE9iajtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBzdHJpbmcgZW5kcyB3aXRoIHRoZSBjaGFyYWN0ZXJzIG9mIGEgc3BlY2lmaWVkIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWFyY2hTdHJpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb249IDBdXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGVuZHNXaXRoID0gKHN0ciwgc2VhcmNoU3RyaW5nLCBwb3NpdGlvbikgPT4ge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQgfHwgcG9zaXRpb24gPiBzdHIubGVuZ3RoKSB7XG4gICAgcG9zaXRpb24gPSBzdHIubGVuZ3RoO1xuICB9XG4gIHBvc2l0aW9uIC09IHNlYXJjaFN0cmluZy5sZW5ndGg7XG4gIGNvbnN0IGxhc3RJbmRleCA9IHN0ci5pbmRleE9mKHNlYXJjaFN0cmluZywgcG9zaXRpb24pO1xuICByZXR1cm4gbGFzdEluZGV4ICE9PSAtMSAmJiBsYXN0SW5kZXggPT09IHBvc2l0aW9uO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyBuZXcgYXJyYXkgZnJvbSBhcnJheSBsaWtlIG9iamVjdCBvciBudWxsIGlmIGZhaWxlZFxuICpcbiAqIEBwYXJhbSB7Kn0gW3RoaW5nXVxuICpcbiAqIEByZXR1cm5zIHs/QXJyYXl9XG4gKi9cbmNvbnN0IHRvQXJyYXkgPSAodGhpbmcpID0+IHtcbiAgaWYgKCF0aGluZykgcmV0dXJuIG51bGw7XG4gIGlmIChpc0FycmF5KHRoaW5nKSkgcmV0dXJuIHRoaW5nO1xuICBsZXQgaSA9IHRoaW5nLmxlbmd0aDtcbiAgaWYgKCFpc051bWJlcihpKSkgcmV0dXJuIG51bGw7XG4gIGNvbnN0IGFyciA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBhcnJbaV0gPSB0aGluZ1tpXTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG4vKipcbiAqIENoZWNraW5nIGlmIHRoZSBVaW50OEFycmF5IGV4aXN0cyBhbmQgaWYgaXQgZG9lcywgaXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmIHRoZVxuICogdGhpbmcgcGFzc2VkIGluIGlzIGFuIGluc3RhbmNlIG9mIFVpbnQ4QXJyYXlcbiAqXG4gKiBAcGFyYW0ge1R5cGVkQXJyYXl9XG4gKlxuICogQHJldHVybnMge0FycmF5fVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuY29uc3QgaXNUeXBlZEFycmF5ID0gKFR5cGVkQXJyYXkgPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gdGhpbmcgPT4ge1xuICAgIHJldHVybiBUeXBlZEFycmF5ICYmIHRoaW5nIGluc3RhbmNlb2YgVHlwZWRBcnJheTtcbiAgfTtcbn0pKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBnZXRQcm90b3R5cGVPZihVaW50OEFycmF5KSk7XG5cbi8qKlxuICogRm9yIGVhY2ggZW50cnkgaW4gdGhlIG9iamVjdCwgY2FsbCB0aGUgZnVuY3Rpb24gd2l0aCB0aGUga2V5IGFuZCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBlbnRyeS5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgZm9yRWFjaEVudHJ5ID0gKG9iaiwgZm4pID0+IHtcbiAgY29uc3QgZ2VuZXJhdG9yID0gb2JqICYmIG9ialtTeW1ib2wuaXRlcmF0b3JdO1xuXG4gIGNvbnN0IGl0ZXJhdG9yID0gZ2VuZXJhdG9yLmNhbGwob2JqKTtcblxuICBsZXQgcmVzdWx0O1xuXG4gIHdoaWxlICgocmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpKSAmJiAhcmVzdWx0LmRvbmUpIHtcbiAgICBjb25zdCBwYWlyID0gcmVzdWx0LnZhbHVlO1xuICAgIGZuLmNhbGwob2JqLCBwYWlyWzBdLCBwYWlyWzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgcmVndWxhciBleHByZXNzaW9uIGFuZCBhIHN0cmluZywgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgYWxsIHRoZSBtYXRjaGVzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJlZ0V4cCAtIFRoZSByZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggYWdhaW5zdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBUaGUgc3RyaW5nIHRvIHNlYXJjaC5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXk8Ym9vbGVhbj59XG4gKi9cbmNvbnN0IG1hdGNoQWxsID0gKHJlZ0V4cCwgc3RyKSA9PiB7XG4gIGxldCBtYXRjaGVzO1xuICBjb25zdCBhcnIgPSBbXTtcblxuICB3aGlsZSAoKG1hdGNoZXMgPSByZWdFeHAuZXhlYyhzdHIpKSAhPT0gbnVsbCkge1xuICAgIGFyci5wdXNoKG1hdGNoZXMpO1xuICB9XG5cbiAgcmV0dXJuIGFycjtcbn1cblxuLyogQ2hlY2tpbmcgaWYgdGhlIGtpbmRPZlRlc3QgZnVuY3Rpb24gcmV0dXJucyB0cnVlIHdoZW4gcGFzc2VkIGFuIEhUTUxGb3JtRWxlbWVudC4gKi9cbmNvbnN0IGlzSFRNTEZvcm0gPSBraW5kT2ZUZXN0KCdIVE1MRm9ybUVsZW1lbnQnKTtcblxuY29uc3QgdG9DYW1lbENhc2UgPSBzdHIgPT4ge1xuICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvWy1fXFxzXShbYS16XFxkXSkoXFx3KikvZyxcbiAgICBmdW5jdGlvbiByZXBsYWNlcihtLCBwMSwgcDIpIHtcbiAgICAgIHJldHVybiBwMS50b1VwcGVyQ2FzZSgpICsgcDI7XG4gICAgfVxuICApO1xufTtcblxuLyogQ3JlYXRpbmcgYSBmdW5jdGlvbiB0aGF0IHdpbGwgY2hlY2sgaWYgYW4gb2JqZWN0IGhhcyBhIHByb3BlcnR5LiAqL1xuY29uc3QgaGFzT3duUHJvcGVydHkgPSAoKHtoYXNPd25Qcm9wZXJ0eX0pID0+IChvYmosIHByb3ApID0+IGhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkoT2JqZWN0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1JlZ0V4cCA9IGtpbmRPZlRlc3QoJ1JlZ0V4cCcpO1xuXG5jb25zdCByZWR1Y2VEZXNjcmlwdG9ycyA9IChvYmosIHJlZHVjZXIpID0+IHtcbiAgY29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmopO1xuICBjb25zdCByZWR1Y2VkRGVzY3JpcHRvcnMgPSB7fTtcblxuICBmb3JFYWNoKGRlc2NyaXB0b3JzLCAoZGVzY3JpcHRvciwgbmFtZSkgPT4ge1xuICAgIGxldCByZXQ7XG4gICAgaWYgKChyZXQgPSByZWR1Y2VyKGRlc2NyaXB0b3IsIG5hbWUsIG9iaikpICE9PSBmYWxzZSkge1xuICAgICAgcmVkdWNlZERlc2NyaXB0b3JzW25hbWVdID0gcmV0IHx8IGRlc2NyaXB0b3I7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvYmosIHJlZHVjZWREZXNjcmlwdG9ycyk7XG59XG5cbi8qKlxuICogTWFrZXMgYWxsIG1ldGhvZHMgcmVhZC1vbmx5XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKi9cblxuY29uc3QgZnJlZXplTWV0aG9kcyA9IChvYmopID0+IHtcbiAgcmVkdWNlRGVzY3JpcHRvcnMob2JqLCAoZGVzY3JpcHRvciwgbmFtZSkgPT4ge1xuICAgIC8vIHNraXAgcmVzdHJpY3RlZCBwcm9wcyBpbiBzdHJpY3QgbW9kZVxuICAgIGlmIChpc0Z1bmN0aW9uKG9iaikgJiYgWydhcmd1bWVudHMnLCAnY2FsbGVyJywgJ2NhbGxlZSddLmluZGV4T2YobmFtZSkgIT09IC0xKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsdWUgPSBvYmpbbmFtZV07XG5cbiAgICBpZiAoIWlzRnVuY3Rpb24odmFsdWUpKSByZXR1cm47XG5cbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBmYWxzZTtcblxuICAgIGlmICgnd3JpdGFibGUnIGluIGRlc2NyaXB0b3IpIHtcbiAgICAgIGRlc2NyaXB0b3Iud3JpdGFibGUgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWRlc2NyaXB0b3Iuc2V0KSB7XG4gICAgICBkZXNjcmlwdG9yLnNldCA9ICgpID0+IHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0NhbiBub3QgcmV3cml0ZSByZWFkLW9ubHkgbWV0aG9kIFxcJycgKyBuYW1lICsgJ1xcJycpO1xuICAgICAgfTtcbiAgICB9XG4gIH0pO1xufVxuXG5jb25zdCB0b09iamVjdFNldCA9IChhcnJheU9yU3RyaW5nLCBkZWxpbWl0ZXIpID0+IHtcbiAgY29uc3Qgb2JqID0ge307XG5cbiAgY29uc3QgZGVmaW5lID0gKGFycikgPT4ge1xuICAgIGFyci5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgIG9ialt2YWx1ZV0gPSB0cnVlO1xuICAgIH0pO1xuICB9XG5cbiAgaXNBcnJheShhcnJheU9yU3RyaW5nKSA/IGRlZmluZShhcnJheU9yU3RyaW5nKSA6IGRlZmluZShTdHJpbmcoYXJyYXlPclN0cmluZykuc3BsaXQoZGVsaW1pdGVyKSk7XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuY29uc3Qgbm9vcCA9ICgpID0+IHt9XG5cbmNvbnN0IHRvRmluaXRlTnVtYmVyID0gKHZhbHVlLCBkZWZhdWx0VmFsdWUpID0+IHtcbiAgdmFsdWUgPSArdmFsdWU7XG4gIHJldHVybiBOdW1iZXIuaXNGaW5pdGUodmFsdWUpID8gdmFsdWUgOiBkZWZhdWx0VmFsdWU7XG59XG5cbmNvbnN0IEFMUEhBID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6J1xuXG5jb25zdCBESUdJVCA9ICcwMTIzNDU2Nzg5JztcblxuY29uc3QgQUxQSEFCRVQgPSB7XG4gIERJR0lULFxuICBBTFBIQSxcbiAgQUxQSEFfRElHSVQ6IEFMUEhBICsgQUxQSEEudG9VcHBlckNhc2UoKSArIERJR0lUXG59XG5cbmNvbnN0IGdlbmVyYXRlU3RyaW5nID0gKHNpemUgPSAxNiwgYWxwaGFiZXQgPSBBTFBIQUJFVC5BTFBIQV9ESUdJVCkgPT4ge1xuICBsZXQgc3RyID0gJyc7XG4gIGNvbnN0IHtsZW5ndGh9ID0gYWxwaGFiZXQ7XG4gIHdoaWxlIChzaXplLS0pIHtcbiAgICBzdHIgKz0gYWxwaGFiZXRbTWF0aC5yYW5kb20oKSAqIGxlbmd0aHwwXVxuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn1cblxuLyoqXG4gKiBJZiB0aGUgdGhpbmcgaXMgYSBGb3JtRGF0YSBvYmplY3QsIHJldHVybiB0cnVlLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gdGhpbmcgLSBUaGUgdGhpbmcgdG8gY2hlY2suXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzU3BlY0NvbXBsaWFudEZvcm0odGhpbmcpIHtcbiAgcmV0dXJuICEhKHRoaW5nICYmIGlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiB0aGluZ1tTeW1ib2wudG9TdHJpbmdUYWddID09PSAnRm9ybURhdGEnICYmIHRoaW5nW1N5bWJvbC5pdGVyYXRvcl0pO1xufVxuXG5jb25zdCB0b0pTT05PYmplY3QgPSAob2JqKSA9PiB7XG4gIGNvbnN0IHN0YWNrID0gbmV3IEFycmF5KDEwKTtcblxuICBjb25zdCB2aXNpdCA9IChzb3VyY2UsIGkpID0+IHtcblxuICAgIGlmIChpc09iamVjdChzb3VyY2UpKSB7XG4gICAgICBpZiAoc3RhY2suaW5kZXhPZihzb3VyY2UpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZighKCd0b0pTT04nIGluIHNvdXJjZSkpIHtcbiAgICAgICAgc3RhY2tbaV0gPSBzb3VyY2U7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGlzQXJyYXkoc291cmNlKSA/IFtdIDoge307XG5cbiAgICAgICAgZm9yRWFjaChzb3VyY2UsICh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVkdWNlZFZhbHVlID0gdmlzaXQodmFsdWUsIGkgKyAxKTtcbiAgICAgICAgICAhaXNVbmRlZmluZWQocmVkdWNlZFZhbHVlKSAmJiAodGFyZ2V0W2tleV0gPSByZWR1Y2VkVmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzdGFja1tpXSA9IHVuZGVmaW5lZDtcblxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICByZXR1cm4gdmlzaXQob2JqLCAwKTtcbn1cblxuY29uc3QgaXNBc3luY0ZuID0ga2luZE9mVGVzdCgnQXN5bmNGdW5jdGlvbicpO1xuXG5jb25zdCBpc1RoZW5hYmxlID0gKHRoaW5nKSA9PlxuICB0aGluZyAmJiAoaXNPYmplY3QodGhpbmcpIHx8IGlzRnVuY3Rpb24odGhpbmcpKSAmJiBpc0Z1bmN0aW9uKHRoaW5nLnRoZW4pICYmIGlzRnVuY3Rpb24odGhpbmcuY2F0Y2gpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmcsXG4gIGlzTnVtYmVyLFxuICBpc0Jvb2xlYW4sXG4gIGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0LFxuICBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlLFxuICBpc0ZpbGUsXG4gIGlzQmxvYixcbiAgaXNSZWdFeHAsXG4gIGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNUeXBlZEFycmF5LFxuICBpc0ZpbGVMaXN0LFxuICBmb3JFYWNoLFxuICBtZXJnZSxcbiAgZXh0ZW5kLFxuICB0cmltLFxuICBzdHJpcEJPTSxcbiAgaW5oZXJpdHMsXG4gIHRvRmxhdE9iamVjdCxcbiAga2luZE9mLFxuICBraW5kT2ZUZXN0LFxuICBlbmRzV2l0aCxcbiAgdG9BcnJheSxcbiAgZm9yRWFjaEVudHJ5LFxuICBtYXRjaEFsbCxcbiAgaXNIVE1MRm9ybSxcbiAgaGFzT3duUHJvcGVydHksXG4gIGhhc093blByb3A6IGhhc093blByb3BlcnR5LCAvLyBhbiBhbGlhcyB0byBhdm9pZCBFU0xpbnQgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIGRldGVjdGlvblxuICByZWR1Y2VEZXNjcmlwdG9ycyxcbiAgZnJlZXplTWV0aG9kcyxcbiAgdG9PYmplY3RTZXQsXG4gIHRvQ2FtZWxDYXNlLFxuICBub29wLFxuICB0b0Zpbml0ZU51bWJlcixcbiAgZmluZEtleSxcbiAgZ2xvYmFsOiBfZ2xvYmFsLFxuICBpc0NvbnRleHREZWZpbmVkLFxuICBBTFBIQUJFVCxcbiAgZ2VuZXJhdGVTdHJpbmcsXG4gIGlzU3BlY0NvbXBsaWFudEZvcm0sXG4gIHRvSlNPTk9iamVjdCxcbiAgaXNBc3luY0ZuLFxuICBpc1RoZW5hYmxlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZ10gVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQXhpb3NFcnJvcihtZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIEVycm9yLmNhbGwodGhpcyk7XG5cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IoKSkuc3RhY2s7XG4gIH1cblxuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLm5hbWUgPSAnQXhpb3NFcnJvcic7XG4gIGNvZGUgJiYgKHRoaXMuY29kZSA9IGNvZGUpO1xuICBjb25maWcgJiYgKHRoaXMuY29uZmlnID0gY29uZmlnKTtcbiAgcmVxdWVzdCAmJiAodGhpcy5yZXF1ZXN0ID0gcmVxdWVzdCk7XG4gIHJlc3BvbnNlICYmICh0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2UpO1xufVxuXG51dGlscy5pbmhlcml0cyhBeGlvc0Vycm9yLCBFcnJvciwge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB1dGlscy50b0pTT05PYmplY3QodGhpcy5jb25maWcpLFxuICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgc3RhdHVzOiB0aGlzLnJlc3BvbnNlICYmIHRoaXMucmVzcG9uc2Uuc3RhdHVzID8gdGhpcy5yZXNwb25zZS5zdGF0dXMgOiBudWxsXG4gICAgfTtcbiAgfVxufSk7XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zRXJyb3IucHJvdG90eXBlO1xuY29uc3QgZGVzY3JpcHRvcnMgPSB7fTtcblxuW1xuICAnRVJSX0JBRF9PUFRJT05fVkFMVUUnLFxuICAnRVJSX0JBRF9PUFRJT04nLFxuICAnRUNPTk5BQk9SVEVEJyxcbiAgJ0VUSU1FRE9VVCcsXG4gICdFUlJfTkVUV09SSycsXG4gICdFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTJyxcbiAgJ0VSUl9ERVBSRUNBVEVEJyxcbiAgJ0VSUl9CQURfUkVTUE9OU0UnLFxuICAnRVJSX0JBRF9SRVFVRVNUJyxcbiAgJ0VSUl9DQU5DRUxFRCcsXG4gICdFUlJfTk9UX1NVUFBPUlQnLFxuICAnRVJSX0lOVkFMSURfVVJMJ1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbl0uZm9yRWFjaChjb2RlID0+IHtcbiAgZGVzY3JpcHRvcnNbY29kZV0gPSB7dmFsdWU6IGNvZGV9O1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEF4aW9zRXJyb3IsIGRlc2NyaXB0b3JzKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsICdpc0F4aW9zRXJyb3InLCB7dmFsdWU6IHRydWV9KTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbkF4aW9zRXJyb3IuZnJvbSA9IChlcnJvciwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSwgY3VzdG9tUHJvcHMpID0+IHtcbiAgY29uc3QgYXhpb3NFcnJvciA9IE9iamVjdC5jcmVhdGUocHJvdG90eXBlKTtcblxuICB1dGlscy50b0ZsYXRPYmplY3QoZXJyb3IsIGF4aW9zRXJyb3IsIGZ1bmN0aW9uIGZpbHRlcihvYmopIHtcbiAgICByZXR1cm4gb2JqICE9PSBFcnJvci5wcm90b3R5cGU7XG4gIH0sIHByb3AgPT4ge1xuICAgIHJldHVybiBwcm9wICE9PSAnaXNBeGlvc0Vycm9yJztcbiAgfSk7XG5cbiAgQXhpb3NFcnJvci5jYWxsKGF4aW9zRXJyb3IsIGVycm9yLm1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpO1xuXG4gIGF4aW9zRXJyb3IuY2F1c2UgPSBlcnJvcjtcblxuICBheGlvc0Vycm9yLm5hbWUgPSBlcnJvci5uYW1lO1xuXG4gIGN1c3RvbVByb3BzICYmIE9iamVjdC5hc3NpZ24oYXhpb3NFcnJvciwgY3VzdG9tUHJvcHMpO1xuXG4gIHJldHVybiBheGlvc0Vycm9yO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG4vLyB0ZW1wb3JhcnkgaG90Zml4IHRvIGF2b2lkIGNpcmN1bGFyIHJlZmVyZW5jZXMgdW50aWwgQXhpb3NVUkxTZWFyY2hQYXJhbXMgaXMgcmVmYWN0b3JlZFxuaW1wb3J0IFBsYXRmb3JtRm9ybURhdGEgZnJvbSAnLi4vcGxhdGZvcm0vbm9kZS9jbGFzc2VzL0Zvcm1EYXRhLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiB0aGluZyBpcyBhIGFycmF5IG9yIGpzIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGhpbmcgLSBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGJlIHZpc2l0ZWQuXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVmlzaXRhYmxlKHRoaW5nKSB7XG4gIHJldHVybiB1dGlscy5pc1BsYWluT2JqZWN0KHRoaW5nKSB8fCB1dGlscy5pc0FycmF5KHRoaW5nKTtcbn1cblxuLyoqXG4gKiBJdCByZW1vdmVzIHRoZSBicmFja2V0cyBmcm9tIHRoZSBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSBvZiB0aGUgcGFyYW1ldGVyLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBrZXkgd2l0aG91dCB0aGUgYnJhY2tldHMuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUJyYWNrZXRzKGtleSkge1xuICByZXR1cm4gdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSA/IGtleS5zbGljZSgwLCAtMikgOiBrZXk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXRoLCBhIGtleSwgYW5kIGEgYm9vbGVhbiwgYW5kIHJldHVybnMgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIFRoZSBwYXRoIHRvIHRoZSBjdXJyZW50IGtleS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBjdXJyZW50IG9iamVjdCBiZWluZyBpdGVyYXRlZCBvdmVyLlxuICogQHBhcmFtIHtzdHJpbmd9IGRvdHMgLSBJZiB0cnVlLCB0aGUga2V5IHdpbGwgYmUgcmVuZGVyZWQgd2l0aCBkb3RzIGluc3RlYWQgb2YgYnJhY2tldHMuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICovXG5mdW5jdGlvbiByZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSB7XG4gIGlmICghcGF0aCkgcmV0dXJuIGtleTtcbiAgcmV0dXJuIHBhdGguY29uY2F0KGtleSkubWFwKGZ1bmN0aW9uIGVhY2godG9rZW4sIGkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB0b2tlbiA9IHJlbW92ZUJyYWNrZXRzKHRva2VuKTtcbiAgICByZXR1cm4gIWRvdHMgJiYgaSA/ICdbJyArIHRva2VuICsgJ10nIDogdG9rZW47XG4gIH0pLmpvaW4oZG90cyA/ICcuJyA6ICcnKTtcbn1cblxuLyoqXG4gKiBJZiB0aGUgYXJyYXkgaXMgYW4gYXJyYXkgYW5kIG5vbmUgb2YgaXRzIGVsZW1lbnRzIGFyZSB2aXNpdGFibGUsIHRoZW4gaXQncyBhIGZsYXQgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnIgLSBUaGUgYXJyYXkgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGbGF0QXJyYXkoYXJyKSB7XG4gIHJldHVybiB1dGlscy5pc0FycmF5KGFycikgJiYgIWFyci5zb21lKGlzVmlzaXRhYmxlKTtcbn1cblxuY29uc3QgcHJlZGljYXRlcyA9IHV0aWxzLnRvRmxhdE9iamVjdCh1dGlscywge30sIG51bGwsIGZ1bmN0aW9uIGZpbHRlcihwcm9wKSB7XG4gIHJldHVybiAvXmlzW0EtWl0vLnRlc3QocHJvcCk7XG59KTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgZGF0YSBvYmplY3QgdG8gRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0gez9PYmplY3R9IFtmb3JtRGF0YV1cbiAqIEBwYXJhbSB7P09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy52aXNpdG9yXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5tZXRhVG9rZW5zID0gdHJ1ZV1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZG90cyA9IGZhbHNlXVxuICogQHBhcmFtIHs/Qm9vbGVhbn0gW29wdGlvbnMuaW5kZXhlcyA9IGZhbHNlXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKiovXG5cbi8qKlxuICogSXQgY29udmVydHMgYW4gb2JqZWN0IGludG8gYSBGb3JtRGF0YSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gY29udmVydCB0byBmb3JtIGRhdGEuXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybURhdGEgLSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGFwcGVuZCB0by5cbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIHRvRm9ybURhdGEob2JqLCBmb3JtRGF0YSwgb3B0aW9ucykge1xuICBpZiAoIXV0aWxzLmlzT2JqZWN0KG9iaikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0YXJnZXQgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBmb3JtRGF0YSA9IGZvcm1EYXRhIHx8IG5ldyAoUGxhdGZvcm1Gb3JtRGF0YSB8fCBGb3JtRGF0YSkoKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgb3B0aW9ucyA9IHV0aWxzLnRvRmxhdE9iamVjdChvcHRpb25zLCB7XG4gICAgbWV0YVRva2VuczogdHJ1ZSxcbiAgICBkb3RzOiBmYWxzZSxcbiAgICBpbmRleGVzOiBmYWxzZVxuICB9LCBmYWxzZSwgZnVuY3Rpb24gZGVmaW5lZChvcHRpb24sIHNvdXJjZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICAgIHJldHVybiAhdXRpbHMuaXNVbmRlZmluZWQoc291cmNlW29wdGlvbl0pO1xuICB9KTtcblxuICBjb25zdCBtZXRhVG9rZW5zID0gb3B0aW9ucy5tZXRhVG9rZW5zO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgY29uc3QgdmlzaXRvciA9IG9wdGlvbnMudmlzaXRvciB8fCBkZWZhdWx0VmlzaXRvcjtcbiAgY29uc3QgZG90cyA9IG9wdGlvbnMuZG90cztcbiAgY29uc3QgaW5kZXhlcyA9IG9wdGlvbnMuaW5kZXhlcztcbiAgY29uc3QgX0Jsb2IgPSBvcHRpb25zLkJsb2IgfHwgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIEJsb2I7XG4gIGNvbnN0IHVzZUJsb2IgPSBfQmxvYiAmJiB1dGlscy5pc1NwZWNDb21wbGlhbnRGb3JtKGZvcm1EYXRhKTtcblxuICBpZiAoIXV0aWxzLmlzRnVuY3Rpb24odmlzaXRvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2aXNpdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udmVydFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJyc7XG5cbiAgICBpZiAodXRpbHMuaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKCF1c2VCbG9iICYmIHV0aWxzLmlzQmxvYih2YWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdCbG9iIGlzIG5vdCBzdXBwb3J0ZWQuIFVzZSBhIEJ1ZmZlciBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKHZhbHVlKSB8fCB1dGlscy5pc1R5cGVkQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdXNlQmxvYiAmJiB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBCbG9iKFt2YWx1ZV0pIDogQnVmZmVyLmZyb20odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IHZpc2l0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBrZXlcbiAgICogQHBhcmFtIHtBcnJheTxTdHJpbmd8TnVtYmVyPn0gcGF0aFxuICAgKiBAdGhpcyB7Rm9ybURhdGF9XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSByZXR1cm4gdHJ1ZSB0byB2aXNpdCB0aGUgZWFjaCBwcm9wIG9mIHRoZSB2YWx1ZSByZWN1cnNpdmVseVxuICAgKi9cbiAgZnVuY3Rpb24gZGVmYXVsdFZpc2l0b3IodmFsdWUsIGtleSwgcGF0aCkge1xuICAgIGxldCBhcnIgPSB2YWx1ZTtcblxuICAgIGlmICh2YWx1ZSAmJiAhcGF0aCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAodXRpbHMuZW5kc1dpdGgoa2V5LCAne30nKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAga2V5ID0gbWV0YVRva2VucyA/IGtleSA6IGtleS5zbGljZSgwLCAtMik7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICh1dGlscy5pc0FycmF5KHZhbHVlKSAmJiBpc0ZsYXRBcnJheSh2YWx1ZSkpIHx8XG4gICAgICAgICgodXRpbHMuaXNGaWxlTGlzdCh2YWx1ZSkgfHwgdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSkgJiYgKGFyciA9IHV0aWxzLnRvQXJyYXkodmFsdWUpKVxuICAgICAgICApKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSByZW1vdmVCcmFja2V0cyhrZXkpO1xuXG4gICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIGVhY2goZWwsIGluZGV4KSB7XG4gICAgICAgICAgISh1dGlscy5pc1VuZGVmaW5lZChlbCkgfHwgZWwgPT09IG51bGwpICYmIGZvcm1EYXRhLmFwcGVuZChcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgICAgICAgICAgaW5kZXhlcyA9PT0gdHJ1ZSA/IHJlbmRlcktleShba2V5XSwgaW5kZXgsIGRvdHMpIDogKGluZGV4ZXMgPT09IG51bGwgPyBrZXkgOiBrZXkgKyAnW10nKSxcbiAgICAgICAgICAgIGNvbnZlcnRWYWx1ZShlbClcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1Zpc2l0YWJsZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZvcm1EYXRhLmFwcGVuZChyZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSwgY29udmVydFZhbHVlKHZhbHVlKSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBzdGFjayA9IFtdO1xuXG4gIGNvbnN0IGV4cG9zZWRIZWxwZXJzID0gT2JqZWN0LmFzc2lnbihwcmVkaWNhdGVzLCB7XG4gICAgZGVmYXVsdFZpc2l0b3IsXG4gICAgY29udmVydFZhbHVlLFxuICAgIGlzVmlzaXRhYmxlXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGJ1aWxkKHZhbHVlLCBwYXRoKSB7XG4gICAgaWYgKHV0aWxzLmlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgaWYgKHN0YWNrLmluZGV4T2YodmFsdWUpICE9PSAtMSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBkZXRlY3RlZCBpbiAnICsgcGF0aC5qb2luKCcuJykpO1xuICAgIH1cblxuICAgIHN0YWNrLnB1c2godmFsdWUpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24gZWFjaChlbCwga2V5KSB7XG4gICAgICBjb25zdCByZXN1bHQgPSAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgdmlzaXRvci5jYWxsKFxuICAgICAgICBmb3JtRGF0YSwgZWwsIHV0aWxzLmlzU3RyaW5nKGtleSkgPyBrZXkudHJpbSgpIDoga2V5LCBwYXRoLCBleHBvc2VkSGVscGVyc1xuICAgICAgKTtcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICBidWlsZChlbCwgcGF0aCA/IHBhdGguY29uY2F0KGtleSkgOiBba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzdGFjay5wb3AoKTtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RhdGEgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIGJ1aWxkKG9iaik7XG5cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b0Zvcm1EYXRhO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuXG4vKipcbiAqIEl0IGVuY29kZXMgYSBzdHJpbmcgYnkgcmVwbGFjaW5nIGFsbCBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCBpbiB0aGUgdW5yZXNlcnZlZCBzZXQgd2l0aFxuICogdGhlaXIgcGVyY2VudC1lbmNvZGVkIGVxdWl2YWxlbnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gZW5jb2RlLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHN0cikge1xuICBjb25zdCBjaGFyTWFwID0ge1xuICAgICchJzogJyUyMScsXG4gICAgXCInXCI6ICclMjcnLFxuICAgICcoJzogJyUyOCcsXG4gICAgJyknOiAnJTI5JyxcbiAgICAnfic6ICclN0UnLFxuICAgICclMjAnOiAnKycsXG4gICAgJyUwMCc6ICdcXHgwMCdcbiAgfTtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpfl18JTIwfCUwMC9nLCBmdW5jdGlvbiByZXBsYWNlcihtYXRjaCkge1xuICAgIHJldHVybiBjaGFyTWFwW21hdGNoXTtcbiAgfSk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXJhbXMgb2JqZWN0IGFuZCBjb252ZXJ0cyBpdCB0byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gcGFyYW1zIC0gVGhlIHBhcmFtZXRlcnMgdG8gYmUgY29udmVydGVkIHRvIGEgRm9ybURhdGEgb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB0byB0aGUgQXhpb3MgY29uc3RydWN0b3IuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykge1xuICB0aGlzLl9wYWlycyA9IFtdO1xuXG4gIHBhcmFtcyAmJiB0b0Zvcm1EYXRhKHBhcmFtcywgdGhpcywgb3B0aW9ucyk7XG59XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZTtcblxucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZChuYW1lLCB2YWx1ZSkge1xuICB0aGlzLl9wYWlycy5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xufTtcblxucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoZW5jb2Rlcikge1xuICBjb25zdCBfZW5jb2RlID0gZW5jb2RlciA/IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGVuY29kZXIuY2FsbCh0aGlzLCB2YWx1ZSwgZW5jb2RlKTtcbiAgfSA6IGVuY29kZTtcblxuICByZXR1cm4gdGhpcy5fcGFpcnMubWFwKGZ1bmN0aW9uIGVhY2gocGFpcikge1xuICAgIHJldHVybiBfZW5jb2RlKHBhaXJbMF0pICsgJz0nICsgX2VuY29kZShwYWlyWzFdKTtcbiAgfSwgJycpLmpvaW4oJyYnKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zVVJMU2VhcmNoUGFyYW1zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4uL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMnO1xuXG4vKipcbiAqIEl0IHJlcGxhY2VzIGFsbCBpbnN0YW5jZXMgb2YgdGhlIGNoYXJhY3RlcnMgYDpgLCBgJGAsIGAsYCwgYCtgLCBgW2AsIGFuZCBgXWAgd2l0aCB0aGVpclxuICogVVJJIGVuY29kZWQgY291bnRlcnBhcnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbCBUaGUgdmFsdWUgdG8gYmUgZW5jb2RlZC5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZW5jb2RlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEBwYXJhbSB7P29iamVjdH0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgXG4gIGNvbnN0IF9lbmNvZGUgPSBvcHRpb25zICYmIG9wdGlvbnMuZW5jb2RlIHx8IGVuY29kZTtcblxuICBjb25zdCBzZXJpYWxpemVGbiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zZXJpYWxpemU7XG5cbiAgbGV0IHNlcmlhbGl6ZWRQYXJhbXM7XG5cbiAgaWYgKHNlcmlhbGl6ZUZuKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHNlcmlhbGl6ZUZuKHBhcmFtcywgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykgP1xuICAgICAgcGFyYW1zLnRvU3RyaW5nKCkgOlxuICAgICAgbmV3IEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykudG9TdHJpbmcoX2VuY29kZSk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIGNvbnN0IGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG5cbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG5jbGFzcyBJbnRlcmNlcHRvck1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAgICovXG4gIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gICAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICAgIGZ1bGZpbGxlZCxcbiAgICAgIHJlamVjdGVkLFxuICAgICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAgICpcbiAgICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgaW50ZXJjZXB0b3Igd2FzIHJlbW92ZWQsIGBmYWxzZWAgb3RoZXJ3aXNlXG4gICAqL1xuICBlamVjdChpZCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgaW50ZXJjZXB0b3JzIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnMpIHtcbiAgICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAgICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZm9yRWFjaChmbikge1xuICAgIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgICAgZm4oaCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG4iLCJpbXBvcnQgVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4vY2xhc3Nlcy9VUkxTZWFyY2hQYXJhbXMuanMnXG5pbXBvcnQgRm9ybURhdGEgZnJvbSAnLi9jbGFzc2VzL0Zvcm1EYXRhLmpzJ1xuaW1wb3J0IEJsb2IgZnJvbSAnLi9jbGFzc2VzL0Jsb2IuanMnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNCcm93c2VyOiB0cnVlLFxuICBjbGFzc2VzOiB7XG4gICAgVVJMU2VhcmNoUGFyYW1zLFxuICAgIEZvcm1EYXRhLFxuICAgIEJsb2JcbiAgfSxcbiAgcHJvdG9jb2xzOiBbJ2h0dHAnLCAnaHR0cHMnLCAnZmlsZScsICdibG9iJywgJ3VybCcsICdkYXRhJ11cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzJztcbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnID8gVVJMU2VhcmNoUGFyYW1zIDogQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcgPyBGb3JtRGF0YSA6IG51bGw7XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnID8gQmxvYiA6IG51bGxcbiIsImNvbnN0IGhhc0Jyb3dzZXJFbnYgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgaGFzU3RhbmRhcmRCcm93c2VyRW52ID0gKFxuICAocHJvZHVjdCkgPT4ge1xuICAgIHJldHVybiBoYXNCcm93c2VyRW52ICYmIFsnUmVhY3ROYXRpdmUnLCAnTmF0aXZlU2NyaXB0JywgJ05TJ10uaW5kZXhPZihwcm9kdWN0KSA8IDBcbiAgfSkodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciB3ZWJXb3JrZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBBbHRob3VnaCB0aGUgYGlzU3RhbmRhcmRCcm93c2VyRW52YCBtZXRob2QgaW5kaWNhdGVzIHRoYXRcbiAqIGBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlcmAsIHRoZSBXZWJXb3JrZXIgd2lsbCBzdGlsbCBiZVxuICogZmlsdGVyZWQgb3V0IGR1ZSB0byBpdHMganVkZ21lbnQgc3RhbmRhcmRcbiAqIGB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnYC5cbiAqIFRoaXMgbGVhZHMgdG8gYSBwcm9ibGVtIHdoZW4gYXhpb3MgcG9zdCBgRm9ybURhdGFgIGluIHdlYldvcmtlclxuICovXG5jb25zdCBoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYgPSAoKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICBzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGUgJiZcbiAgICB0eXBlb2Ygc2VsZi5pbXBvcnRTY3JpcHRzID09PSAnZnVuY3Rpb24nXG4gICk7XG59KSgpO1xuXG5leHBvcnQge1xuICBoYXNCcm93c2VyRW52LFxuICBoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYsXG4gIGhhc1N0YW5kYXJkQnJvd3NlckVudlxufVxuIiwiaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4vbm9kZS9pbmRleC5qcyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL2NvbW1vbi91dGlscy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLi4udXRpbHMsXG4gIC4uLnBsYXRmb3JtXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcgbGlrZSBgZm9vW3hdW3ldW3pdYCBhbmQgcmV0dXJucyBhbiBhcnJheSBsaWtlIGBbJ2ZvbycsICd4JywgJ3knLCAneiddXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICpcbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHN0cmluZ3MuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlUHJvcFBhdGgobmFtZSkge1xuICAvLyBmb29beF1beV1bel1cbiAgLy8gZm9vLngueS56XG4gIC8vIGZvby14LXktelxuICAvLyBmb28geCB5IHpcbiAgcmV0dXJuIHV0aWxzLm1hdGNoQWxsKC9cXHcrfFxcWyhcXHcqKV0vZywgbmFtZSkubWFwKG1hdGNoID0+IHtcbiAgICByZXR1cm4gbWF0Y2hbMF0gPT09ICdbXScgPyAnJyA6IG1hdGNoWzFdIHx8IG1hdGNoWzBdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIGFycmF5IHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjb252ZXJ0IHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcmV0dXJucyBBbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFuZCB2YWx1ZXMgYXMgdGhlIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheVRvT2JqZWN0KGFycikge1xuICBjb25zdCBvYmogPSB7fTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGFycik7XG4gIGxldCBpO1xuICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgbGV0IGtleTtcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICBvYmpba2V5XSA9IGFycltrZXldO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBGb3JtRGF0YSBvYmplY3QgYW5kIHJldHVybnMgYSBKYXZhU2NyaXB0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGNvbnZlcnQgdG8gSlNPTi5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0PHN0cmluZywgYW55PiB8IG51bGx9IFRoZSBjb252ZXJ0ZWQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBmb3JtRGF0YVRvSlNPTihmb3JtRGF0YSkge1xuICBmdW5jdGlvbiBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldCwgaW5kZXgpIHtcbiAgICBsZXQgbmFtZSA9IHBhdGhbaW5kZXgrK107XG5cbiAgICBpZiAobmFtZSA9PT0gJ19fcHJvdG9fXycpIHJldHVybiB0cnVlO1xuXG4gICAgY29uc3QgaXNOdW1lcmljS2V5ID0gTnVtYmVyLmlzRmluaXRlKCtuYW1lKTtcbiAgICBjb25zdCBpc0xhc3QgPSBpbmRleCA+PSBwYXRoLmxlbmd0aDtcbiAgICBuYW1lID0gIW5hbWUgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXQpID8gdGFyZ2V0Lmxlbmd0aCA6IG5hbWU7XG5cbiAgICBpZiAoaXNMYXN0KSB7XG4gICAgICBpZiAodXRpbHMuaGFzT3duUHJvcCh0YXJnZXQsIG5hbWUpKSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IFt0YXJnZXRbbmFtZV0sIHZhbHVlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldFtuYW1lXSB8fCAhdXRpbHMuaXNPYmplY3QodGFyZ2V0W25hbWVdKSkge1xuICAgICAgdGFyZ2V0W25hbWVdID0gW107XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYnVpbGRQYXRoKHBhdGgsIHZhbHVlLCB0YXJnZXRbbmFtZV0sIGluZGV4KTtcblxuICAgIGlmIChyZXN1bHQgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBhcnJheVRvT2JqZWN0KHRhcmdldFtuYW1lXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICFpc051bWVyaWNLZXk7XG4gIH1cblxuICBpZiAodXRpbHMuaXNGb3JtRGF0YShmb3JtRGF0YSkgJiYgdXRpbHMuaXNGdW5jdGlvbihmb3JtRGF0YS5lbnRyaWVzKSkge1xuICAgIGNvbnN0IG9iaiA9IHt9O1xuXG4gICAgdXRpbHMuZm9yRWFjaEVudHJ5KGZvcm1EYXRhLCAobmFtZSwgdmFsdWUpID0+IHtcbiAgICAgIGJ1aWxkUGF0aChwYXJzZVByb3BQYXRoKG5hbWUpLCB2YWx1ZSwgb2JqLCAwKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZm9ybURhdGFUb0pTT047XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4vdHJhbnNpdGlvbmFsLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4uL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgdG9VUkxFbmNvZGVkRm9ybSBmcm9tICcuLi9oZWxwZXJzL3RvVVJMRW5jb2RlZEZvcm0uanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcbmltcG9ydCBmb3JtRGF0YVRvSlNPTiBmcm9tICcuLi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzJztcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZywgdHJpZXMgdG8gcGFyc2UgaXQsIGFuZCBpZiBpdCBmYWlscywgaXQgcmV0dXJucyB0aGUgc3RyaW5naWZpZWQgdmVyc2lvblxuICogb2YgdGhlIGlucHV0XG4gKlxuICogQHBhcmFtIHthbnl9IHJhd1ZhbHVlIC0gVGhlIHZhbHVlIHRvIGJlIHN0cmluZ2lmaWVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcGFyc2VyIC0gQSBmdW5jdGlvbiB0aGF0IHBhcnNlcyBhIHN0cmluZyBpbnRvIGEgSmF2YVNjcmlwdCBvYmplY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlbmNvZGVyIC0gQSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgdmFsdWUgYW5kIHJldHVybnMgYSBzdHJpbmcuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmdpZmllZCB2ZXJzaW9uIG9mIHRoZSByYXdWYWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RyaW5naWZ5U2FmZWx5KHJhd1ZhbHVlLCBwYXJzZXIsIGVuY29kZXIpIHtcbiAgaWYgKHV0aWxzLmlzU3RyaW5nKHJhd1ZhbHVlKSkge1xuICAgIHRyeSB7XG4gICAgICAocGFyc2VyIHx8IEpTT04ucGFyc2UpKHJhd1ZhbHVlKTtcbiAgICAgIHJldHVybiB1dGlscy50cmltKHJhd1ZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5uYW1lICE9PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChlbmNvZGVyIHx8IEpTT04uc3RyaW5naWZ5KShyYXdWYWx1ZSk7XG59XG5cbmNvbnN0IGRlZmF1bHRzID0ge1xuXG4gIHRyYW5zaXRpb25hbDogdHJhbnNpdGlvbmFsRGVmYXVsdHMsXG5cbiAgYWRhcHRlcjogWyd4aHInLCAnaHR0cCddLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBjb25zdCBjb250ZW50VHlwZSA9IGhlYWRlcnMuZ2V0Q29udGVudFR5cGUoKSB8fCAnJztcbiAgICBjb25zdCBoYXNKU09OQ29udGVudFR5cGUgPSBjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi9qc29uJykgPiAtMTtcbiAgICBjb25zdCBpc09iamVjdFBheWxvYWQgPSB1dGlscy5pc09iamVjdChkYXRhKTtcblxuICAgIGlmIChpc09iamVjdFBheWxvYWQgJiYgdXRpbHMuaXNIVE1MRm9ybShkYXRhKSkge1xuICAgICAgZGF0YSA9IG5ldyBGb3JtRGF0YShkYXRhKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0Zvcm1EYXRhID0gdXRpbHMuaXNGb3JtRGF0YShkYXRhKTtcblxuICAgIGlmIChpc0Zvcm1EYXRhKSB7XG4gICAgICBpZiAoIWhhc0pTT05Db250ZW50VHlwZSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNKU09OQ29udGVudFR5cGUgPyBKU09OLnN0cmluZ2lmeShmb3JtRGF0YVRvSlNPTihkYXRhKSkgOiBkYXRhO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnLCBmYWxzZSk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGxldCBpc0ZpbGVMaXN0O1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCkge1xuICAgICAgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgdGhpcy5mb3JtU2VyaWFsaXplcikudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKChpc0ZpbGVMaXN0ID0gdXRpbHMuaXNGaWxlTGlzdChkYXRhKSkgfHwgY29udGVudFR5cGUuaW5kZXhPZignbXVsdGlwYXJ0L2Zvcm0tZGF0YScpID4gLTEpIHtcbiAgICAgICAgY29uc3QgX0Zvcm1EYXRhID0gdGhpcy5lbnYgJiYgdGhpcy5lbnYuRm9ybURhdGE7XG5cbiAgICAgICAgcmV0dXJuIHRvRm9ybURhdGEoXG4gICAgICAgICAgaXNGaWxlTGlzdCA/IHsnZmlsZXNbXSc6IGRhdGF9IDogZGF0YSxcbiAgICAgICAgICBfRm9ybURhdGEgJiYgbmV3IF9Gb3JtRGF0YSgpLFxuICAgICAgICAgIHRoaXMuZm9ybVNlcmlhbGl6ZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkIHx8IGhhc0pTT05Db250ZW50VHlwZSApIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL2pzb24nLCBmYWxzZSk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSB0aGlzLnRyYW5zaXRpb25hbCB8fCBkZWZhdWx0cy50cmFuc2l0aW9uYWw7XG4gICAgY29uc3QgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIGNvbnN0IEpTT05SZXF1ZXN0ZWQgPSB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKGRhdGEgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgKChmb3JjZWRKU09OUGFyc2luZyAmJiAhdGhpcy5yZXNwb25zZVR5cGUpIHx8IEpTT05SZXF1ZXN0ZWQpKSB7XG4gICAgICBjb25zdCBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgICBjb25zdCBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiBKU09OUmVxdWVzdGVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGUsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgdGhpcywgbnVsbCwgdGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIGVudjoge1xuICAgIEZvcm1EYXRhOiBwbGF0Zm9ybS5jbGFzc2VzLkZvcm1EYXRhLFxuICAgIEJsb2I6IHBsYXRmb3JtLmNsYXNzZXMuQmxvYlxuICB9LFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonLFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZFxuICAgIH1cbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCddLCAobWV0aG9kKSA9PiB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgb3B0aW9ucykge1xuICByZXR1cm4gdG9Gb3JtRGF0YShkYXRhLCBuZXcgcGxhdGZvcm0uY2xhc3Nlcy5VUkxTZWFyY2hQYXJhbXMoKSwgT2JqZWN0LmFzc2lnbih7XG4gICAgdmlzaXRvcjogZnVuY3Rpb24odmFsdWUsIGtleSwgcGF0aCwgaGVscGVycykge1xuICAgICAgaWYgKHBsYXRmb3JtLmlzTm9kZSAmJiB1dGlscy5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQoa2V5LCB2YWx1ZS50b1N0cmluZygnYmFzZTY0JykpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoZWxwZXJzLmRlZmF1bHRWaXNpdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LCBvcHRpb25zKSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuLy8gUmF3QXhpb3NIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xuY29uc3QgaWdub3JlRHVwbGljYXRlT2YgPSB1dGlscy50b09iamVjdFNldChbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXSk7XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSByYXdIZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5leHBvcnQgZGVmYXVsdCByYXdIZWFkZXJzID0+IHtcbiAgY29uc3QgcGFyc2VkID0ge307XG4gIGxldCBrZXk7XG4gIGxldCB2YWw7XG4gIGxldCBpO1xuXG4gIHJhd0hlYWRlcnMgJiYgcmF3SGVhZGVycy5zcGxpdCgnXFxuJykuZm9yRWFjaChmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSBsaW5lLnN1YnN0cmluZygwLCBpKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSBsaW5lLnN1YnN0cmluZyhpICsgMSkudHJpbSgpO1xuXG4gICAgaWYgKCFrZXkgfHwgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mW2tleV0pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0pIHtcbiAgICAgICAgcGFyc2VkW2tleV0ucHVzaCh2YWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBbdmFsXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBhcnNlSGVhZGVycyBmcm9tICcuLi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyc7XG5cbmNvbnN0ICRpbnRlcm5hbHMgPSBTeW1ib2woJ2ludGVybmFscycpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIgJiYgU3RyaW5nKGhlYWRlcikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB1dGlscy5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcChub3JtYWxpemVWYWx1ZSkgOiBTdHJpbmcodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRva2VucyhzdHIpIHtcbiAgY29uc3QgdG9rZW5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgdG9rZW5zUkUgPSAvKFteXFxzLDs9XSspXFxzKig/Oj1cXHMqKFteLDtdKykpPy9nO1xuICBsZXQgbWF0Y2g7XG5cbiAgd2hpbGUgKChtYXRjaCA9IHRva2Vuc1JFLmV4ZWMoc3RyKSkpIHtcbiAgICB0b2tlbnNbbWF0Y2hbMV1dID0gbWF0Y2hbMl07XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG5jb25zdCBpc1ZhbGlkSGVhZGVyTmFtZSA9IChzdHIpID0+IC9eWy1fYS16QS1aMC05XmB8fiwhIyQlJicqKy5dKyQvLnRlc3Qoc3RyLnRyaW0oKSk7XG5cbmZ1bmN0aW9uIG1hdGNoSGVhZGVyVmFsdWUoY29udGV4dCwgdmFsdWUsIGhlYWRlciwgZmlsdGVyLCBpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgaWYgKHV0aWxzLmlzRnVuY3Rpb24oZmlsdGVyKSkge1xuICAgIHJldHVybiBmaWx0ZXIuY2FsbCh0aGlzLCB2YWx1ZSwgaGVhZGVyKTtcbiAgfVxuXG4gIGlmIChpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgICB2YWx1ZSA9IGhlYWRlcjtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNTdHJpbmcodmFsdWUpKSByZXR1cm47XG5cbiAgaWYgKHV0aWxzLmlzU3RyaW5nKGZpbHRlcikpIHtcbiAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihmaWx0ZXIpICE9PSAtMTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc1JlZ0V4cChmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci50ZXN0KHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JtYXRIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIudHJpbSgpXG4gICAgLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvKFthLXpcXGRdKShcXHcqKS9nLCAodywgY2hhciwgc3RyKSA9PiB7XG4gICAgICByZXR1cm4gY2hhci50b1VwcGVyQ2FzZSgpICsgc3RyO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBidWlsZEFjY2Vzc29ycyhvYmosIGhlYWRlcikge1xuICBjb25zdCBhY2Nlc3Nvck5hbWUgPSB1dGlscy50b0NhbWVsQ2FzZSgnICcgKyBoZWFkZXIpO1xuXG4gIFsnZ2V0JywgJ3NldCcsICdoYXMnXS5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG1ldGhvZE5hbWUgKyBhY2Nlc3Nvck5hbWUsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICAgIHJldHVybiB0aGlzW21ldGhvZE5hbWVdLmNhbGwodGhpcywgaGVhZGVyLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfSk7XG59XG5cbmNsYXNzIEF4aW9zSGVhZGVycyB7XG4gIGNvbnN0cnVjdG9yKGhlYWRlcnMpIHtcbiAgICBoZWFkZXJzICYmIHRoaXMuc2V0KGhlYWRlcnMpO1xuICB9XG5cbiAgc2V0KGhlYWRlciwgdmFsdWVPclJld3JpdGUsIHJld3JpdGUpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIGZ1bmN0aW9uIHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSB7XG4gICAgICBjb25zdCBsSGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoIWxIZWFkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZWFkZXIgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHNlbGYsIGxIZWFkZXIpO1xuXG4gICAgICBpZigha2V5IHx8IHNlbGZba2V5XSA9PT0gdW5kZWZpbmVkIHx8IF9yZXdyaXRlID09PSB0cnVlIHx8IChfcmV3cml0ZSA9PT0gdW5kZWZpbmVkICYmIHNlbGZba2V5XSAhPT0gZmFsc2UpKSB7XG4gICAgICAgIHNlbGZba2V5IHx8IF9oZWFkZXJdID0gbm9ybWFsaXplVmFsdWUoX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZXRIZWFkZXJzID0gKGhlYWRlcnMsIF9yZXdyaXRlKSA9PlxuICAgICAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCAoX3ZhbHVlLCBfaGVhZGVyKSA9PiBzZXRIZWFkZXIoX3ZhbHVlLCBfaGVhZGVyLCBfcmV3cml0ZSkpO1xuXG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QoaGVhZGVyKSB8fCBoZWFkZXIgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yKSB7XG4gICAgICBzZXRIZWFkZXJzKGhlYWRlciwgdmFsdWVPclJld3JpdGUpXG4gICAgfSBlbHNlIGlmKHV0aWxzLmlzU3RyaW5nKGhlYWRlcikgJiYgKGhlYWRlciA9IGhlYWRlci50cmltKCkpICYmICFpc1ZhbGlkSGVhZGVyTmFtZShoZWFkZXIpKSB7XG4gICAgICBzZXRIZWFkZXJzKHBhcnNlSGVhZGVycyhoZWFkZXIpLCB2YWx1ZU9yUmV3cml0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWRlciAhPSBudWxsICYmIHNldEhlYWRlcih2YWx1ZU9yUmV3cml0ZSwgaGVhZGVyLCByZXdyaXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldChoZWFkZXIsIHBhcnNlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1trZXldO1xuXG4gICAgICAgIGlmICghcGFyc2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnNlciA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZVRva2Vucyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5jYWxsKHRoaXMsIHZhbHVlLCBrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzUmVnRXhwKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmV4ZWModmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyc2VyIG11c3QgYmUgYm9vbGVhbnxyZWdleHB8ZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYXMoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIHJldHVybiAhIShrZXkgJiYgdGhpc1trZXldICE9PSB1bmRlZmluZWQgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZGVsZXRlKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBkZWxldGVIZWFkZXIoX2hlYWRlcikge1xuICAgICAgX2hlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKF9oZWFkZXIpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShzZWxmLCBfaGVhZGVyKTtcblxuICAgICAgICBpZiAoa2V5ICYmICghbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHNlbGYsIHNlbGZba2V5XSwga2V5LCBtYXRjaGVyKSkpIHtcbiAgICAgICAgICBkZWxldGUgc2VsZltrZXldO1xuXG4gICAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheShoZWFkZXIpKSB7XG4gICAgICBoZWFkZXIuZm9yRWFjaChkZWxldGVIZWFkZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGVIZWFkZXIoaGVhZGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIGNsZWFyKG1hdGNoZXIpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gICAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIsIHRydWUpKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzW2tleV07XG4gICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9XG5cbiAgbm9ybWFsaXplKGZvcm1hdCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcblxuICAgIHV0aWxzLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoaGVhZGVycywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBzZWxmW2tleV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IGZvcm1hdCA/IGZvcm1hdEhlYWRlcihoZWFkZXIpIDogU3RyaW5nKGhlYWRlcikudHJpbSgpO1xuXG4gICAgICBpZiAobm9ybWFsaXplZCAhPT0gaGVhZGVyKSB7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICB9XG5cbiAgICAgIHNlbGZbbm9ybWFsaXplZF0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZF0gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb25jYXQoLi4udGFyZ2V0cykge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmNvbmNhdCh0aGlzLCAuLi50YXJnZXRzKTtcbiAgfVxuXG4gIHRvSlNPTihhc1N0cmluZ3MpIHtcbiAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPT0gZmFsc2UgJiYgKG9ialtoZWFkZXJdID0gYXNTdHJpbmdzICYmIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCAnKSA6IHZhbHVlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSlbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpLm1hcCgoW2hlYWRlciwgdmFsdWVdKSA9PiBoZWFkZXIgKyAnOiAnICsgdmFsdWUpLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnQXhpb3NIZWFkZXJzJztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tKHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgdGhpcyA/IHRoaW5nIDogbmV3IHRoaXModGhpbmcpO1xuICB9XG5cbiAgc3RhdGljIGNvbmNhdChmaXJzdCwgLi4udGFyZ2V0cykge1xuICAgIGNvbnN0IGNvbXB1dGVkID0gbmV3IHRoaXMoZmlyc3QpO1xuXG4gICAgdGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXQpID0+IGNvbXB1dGVkLnNldCh0YXJnZXQpKTtcblxuICAgIHJldHVybiBjb21wdXRlZDtcbiAgfVxuXG4gIHN0YXRpYyBhY2Nlc3NvcihoZWFkZXIpIHtcbiAgICBjb25zdCBpbnRlcm5hbHMgPSB0aGlzWyRpbnRlcm5hbHNdID0gKHRoaXNbJGludGVybmFsc10gPSB7XG4gICAgICBhY2Nlc3NvcnM6IHt9XG4gICAgfSk7XG5cbiAgICBjb25zdCBhY2Nlc3NvcnMgPSBpbnRlcm5hbHMuYWNjZXNzb3JzO1xuICAgIGNvbnN0IHByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xuXG4gICAgZnVuY3Rpb24gZGVmaW5lQWNjZXNzb3IoX2hlYWRlcikge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFhY2Nlc3NvcnNbbEhlYWRlcl0pIHtcbiAgICAgICAgYnVpbGRBY2Nlc3NvcnMocHJvdG90eXBlLCBfaGVhZGVyKTtcbiAgICAgICAgYWNjZXNzb3JzW2xIZWFkZXJdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1dGlscy5pc0FycmF5KGhlYWRlcikgPyBoZWFkZXIuZm9yRWFjaChkZWZpbmVBY2Nlc3NvcikgOiBkZWZpbmVBY2Nlc3NvcihoZWFkZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuQXhpb3NIZWFkZXJzLmFjY2Vzc29yKFsnQ29udGVudC1UeXBlJywgJ0NvbnRlbnQtTGVuZ3RoJywgJ0FjY2VwdCcsICdBY2NlcHQtRW5jb2RpbmcnLCAnVXNlci1BZ2VudCcsICdBdXRob3JpemF0aW9uJ10pO1xuXG4vLyByZXNlcnZlZCBuYW1lcyBob3RmaXhcbnV0aWxzLnJlZHVjZURlc2NyaXB0b3JzKEF4aW9zSGVhZGVycy5wcm90b3R5cGUsICh7dmFsdWV9LCBrZXkpID0+IHtcbiAgbGV0IG1hcHBlZCA9IGtleVswXS50b1VwcGVyQ2FzZSgpICsga2V5LnNsaWNlKDEpOyAvLyBtYXAgYHNldGAgPT4gYFNldGBcbiAgcmV0dXJuIHtcbiAgICBnZXQ6ICgpID0+IHZhbHVlLFxuICAgIHNldChoZWFkZXJWYWx1ZSkge1xuICAgICAgdGhpc1ttYXBwZWRdID0gaGVhZGVyVmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudXRpbHMuZnJlZXplTWV0aG9kcyhBeGlvc0hlYWRlcnMpO1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc0hlYWRlcnM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHBhcmFtIHs/T2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2Ugb2JqZWN0XG4gKlxuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGZucywgcmVzcG9uc2UpIHtcbiAgY29uc3QgY29uZmlnID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgY29uc3QgY29udGV4dCA9IHJlc3BvbnNlIHx8IGNvbmZpZztcbiAgY29uc3QgaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbnRleHQuaGVhZGVycyk7XG4gIGxldCBkYXRhID0gY29udGV4dC5kYXRhO1xuXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb25maWcsIGRhdGEsIGhlYWRlcnMubm9ybWFsaXplKCksIHJlc3BvbnNlID8gcmVzcG9uc2Uuc3RhdHVzIDogdW5kZWZpbmVkKTtcbiAgfSk7XG5cbiAgaGVhZGVycy5ub3JtYWxpemUoKTtcblxuICByZXR1cm4gZGF0YTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBBIGBDYW5jZWxlZEVycm9yYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gcmVxdWVzdCBUaGUgcmVxdWVzdC5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsZWRFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBBeGlvc0Vycm9yLmNhbGwodGhpcywgbWVzc2FnZSA9PSBudWxsID8gJ2NhbmNlbGVkJyA6IG1lc3NhZ2UsIEF4aW9zRXJyb3IuRVJSX0NBTkNFTEVELCBjb25maWcsIHJlcXVlc3QpO1xuICB0aGlzLm5hbWUgPSAnQ2FuY2VsZWRFcnJvcic7XG59XG5cbnV0aWxzLmluaGVyaXRzKENhbmNlbGVkRXJyb3IsIEF4aW9zRXJyb3IsIHtcbiAgX19DQU5DRUxfXzogdHJ1ZVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENhbmNlbGVkRXJyb3I7XG4iLCJpbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICB7XG4gICAgd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICBjb25zdCBjb29raWUgPSBbbmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSldO1xuXG4gICAgICB1dGlscy5pc051bWJlcihleHBpcmVzKSAmJiBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG5cbiAgICAgIHV0aWxzLmlzU3RyaW5nKHBhdGgpICYmIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcblxuICAgICAgdXRpbHMuaXNTdHJpbmcoZG9tYWluKSAmJiBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuXG4gICAgICBzZWN1cmUgPT09IHRydWUgJiYgY29va2llLnB1c2goJ3NlY3VyZScpO1xuXG4gICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICB9LFxuXG4gICAgcmVhZChuYW1lKSB7XG4gICAgICBjb25zdCBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgIH0sXG5cbiAgICByZW1vdmUobmFtZSkge1xuICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICB9XG4gIH1cblxuICA6XG5cbiAgLy8gTm9uLXN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICB7XG4gICAgd3JpdGUoKSB7fSxcbiAgICByZWFkKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICByZW1vdmUoKSB7fVxuICB9O1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBpc0Fic29sdXRlVVJMIGZyb20gJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyc7XG5pbXBvcnQgY29tYmluZVVSTHMgZnJvbSAnLi4vaGVscGVycy9jb21iaW5lVVJMcy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGQrXFwtLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvP1xcLyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52ID9cblxuLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4vLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICBjb25zdCBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICBjb25zdCB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBsZXQgb3JpZ2luVVJMO1xuXG4gICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdHMgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgbGV0IGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgIGNvbnN0IHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gIH0pKCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBzZXR0bGUgZnJvbSAnLi8uLi9jb3JlL3NldHRsZS5qcyc7XG5pbXBvcnQgY29va2llcyBmcm9tICcuLy4uL2hlbHBlcnMvY29va2llcy5qcyc7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSAnLi8uLi9oZWxwZXJzL2J1aWxkVVJMLmpzJztcbmltcG9ydCBidWlsZEZ1bGxQYXRoIGZyb20gJy4uL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyc7XG5pbXBvcnQgaXNVUkxTYW1lT3JpZ2luIGZyb20gJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IHBhcnNlUHJvdG9jb2wgZnJvbSAnLi4vaGVscGVycy9wYXJzZVByb3RvY29sLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcbmltcG9ydCBzcGVlZG9tZXRlciBmcm9tICcuLi9oZWxwZXJzL3NwZWVkb21ldGVyLmpzJztcblxuZnVuY3Rpb24gcHJvZ3Jlc3NFdmVudFJlZHVjZXIobGlzdGVuZXIsIGlzRG93bmxvYWRTdHJlYW0pIHtcbiAgbGV0IGJ5dGVzTm90aWZpZWQgPSAwO1xuICBjb25zdCBfc3BlZWRvbWV0ZXIgPSBzcGVlZG9tZXRlcig1MCwgMjUwKTtcblxuICByZXR1cm4gZSA9PiB7XG4gICAgY29uc3QgbG9hZGVkID0gZS5sb2FkZWQ7XG4gICAgY29uc3QgdG90YWwgPSBlLmxlbmd0aENvbXB1dGFibGUgPyBlLnRvdGFsIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHByb2dyZXNzQnl0ZXMgPSBsb2FkZWQgLSBieXRlc05vdGlmaWVkO1xuICAgIGNvbnN0IHJhdGUgPSBfc3BlZWRvbWV0ZXIocHJvZ3Jlc3NCeXRlcyk7XG4gICAgY29uc3QgaW5SYW5nZSA9IGxvYWRlZCA8PSB0b3RhbDtcblxuICAgIGJ5dGVzTm90aWZpZWQgPSBsb2FkZWQ7XG5cbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbG9hZGVkLFxuICAgICAgdG90YWwsXG4gICAgICBwcm9ncmVzczogdG90YWwgPyAobG9hZGVkIC8gdG90YWwpIDogdW5kZWZpbmVkLFxuICAgICAgYnl0ZXM6IHByb2dyZXNzQnl0ZXMsXG4gICAgICByYXRlOiByYXRlID8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGVzdGltYXRlZDogcmF0ZSAmJiB0b3RhbCAmJiBpblJhbmdlID8gKHRvdGFsIC0gbG9hZGVkKSAvIHJhdGUgOiB1bmRlZmluZWQsXG4gICAgICBldmVudDogZVxuICAgIH07XG5cbiAgICBkYXRhW2lzRG93bmxvYWRTdHJlYW0gPyAnZG93bmxvYWQnIDogJ3VwbG9hZCddID0gdHJ1ZTtcblxuICAgIGxpc3RlbmVyKGRhdGEpO1xuICB9O1xufVxuXG5jb25zdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnO1xuXG5leHBvcnQgZGVmYXVsdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgJiYgZnVuY3Rpb24gKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIGxldCByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIGNvbnN0IHJlcXVlc3RIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oY29uZmlnLmhlYWRlcnMpLm5vcm1hbGl6ZSgpO1xuICAgIGxldCB7cmVzcG9uc2VUeXBlLCB3aXRoWFNSRlRva2VufSA9IGNvbmZpZztcbiAgICBsZXQgb25DYW5jZWxlZDtcbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgICBjb25maWcuY2FuY2VsVG9rZW4udW5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgY29udGVudFR5cGU7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGlmIChwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgfHwgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52KSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKGZhbHNlKTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgICAgfSBlbHNlIGlmICgoY29udGVudFR5cGUgPSByZXF1ZXN0SGVhZGVycy5nZXRDb250ZW50VHlwZSgpKSAhPT0gZmFsc2UpIHtcbiAgICAgICAgLy8gZml4IHNlbWljb2xvbiBkdXBsaWNhdGlvbiBpc3N1ZSBmb3IgUmVhY3ROYXRpdmUgRm9ybURhdGEgaW1wbGVtZW50YXRpb25cbiAgICAgICAgY29uc3QgW3R5cGUsIC4uLnRva2Vuc10gPSBjb250ZW50VHlwZSA/IGNvbnRlbnRUeXBlLnNwbGl0KCc7JykubWFwKHRva2VuID0+IHRva2VuLnRyaW0oKSkuZmlsdGVyKEJvb2xlYW4pIDogW107XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKFt0eXBlIHx8ICdtdWx0aXBhcnQvZm9ybS1kYXRhJywgLi4udG9rZW5zXS5qb2luKCc7ICcpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgY29uc3QgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIGNvbnN0IHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29uZmlnLmF1dGgucGFzc3dvcmQpKSA6ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuc2V0KCdBdXRob3JpemF0aW9uJywgJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpKTtcbiAgICB9XG5cbiAgICBjb25zdCBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuXG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgZnVuY3Rpb24gb25sb2FkZW5kKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICBjb25zdCByZXNwb25zZUhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShcbiAgICAgICAgJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCAmJiByZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG4gICAgICApO1xuICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gIXJlc3BvbnNlVHlwZSB8fCByZXNwb25zZVR5cGUgPT09ICd0ZXh0JyB8fCByZXNwb25zZVR5cGUgPT09ICdqc29uJyA/XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShmdW5jdGlvbiBfcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgZnVuY3Rpb24gX3JlamVjdChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdvbmxvYWRlbmQnIGluIHJlcXVlc3QpIHtcbiAgICAgIC8vIFVzZSBvbmxvYWRlbmQgaWYgYXZhaWxhYmxlXG4gICAgICByZXF1ZXN0Lm9ubG9hZGVuZCA9IG9ubG9hZGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZSB0byBlbXVsYXRlIG9ubG9hZGVuZFxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYWR5c3RhdGUgaGFuZGxlciBpcyBjYWxsaW5nIGJlZm9yZSBvbmVycm9yIG9yIG9udGltZW91dCBoYW5kbGVycyxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGNhbGwgb25sb2FkZW5kIG9uIHRoZSBuZXh0ICd0aWNrJ1xuICAgICAgICBzZXRUaW1lb3V0KG9ubG9hZGVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsIGNvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignTmV0d29yayBFcnJvcicsIEF4aW9zRXJyb3IuRVJSX05FVFdPUkssIGNvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICBsZXQgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJyA6ICd0aW1lb3V0IGV4Y2VlZGVkJztcbiAgICAgIGNvbnN0IHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWwgfHwgdHJhbnNpdGlvbmFsRGVmYXVsdHM7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlLFxuICAgICAgICB0cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/IEF4aW9zRXJyb3IuRVRJTUVET1VUIDogQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZihwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYpIHtcbiAgICAgIHdpdGhYU1JGVG9rZW4gJiYgdXRpbHMuaXNGdW5jdGlvbih3aXRoWFNSRlRva2VuKSAmJiAod2l0aFhTUkZUb2tlbiA9IHdpdGhYU1JGVG9rZW4oY29uZmlnKSk7XG5cbiAgICAgIGlmICh3aXRoWFNSRlRva2VuIHx8ICh3aXRoWFNSRlRva2VuICE9PSBmYWxzZSAmJiBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSkge1xuICAgICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgICAgY29uc3QgeHNyZlZhbHVlID0gY29uZmlnLnhzcmZIZWFkZXJOYW1lICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSAmJiBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKTtcblxuICAgICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgICAgcmVxdWVzdEhlYWRlcnMuc2V0KGNvbmZpZy54c3JmSGVhZGVyTmFtZSwgeHNyZlZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICByZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkICYmIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKG51bGwpO1xuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMudG9KU09OKCksIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKHJlc3BvbnNlVHlwZSAmJiByZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBwcm9ncmVzc0V2ZW50UmVkdWNlcihjb25maWcub25Eb3dubG9hZFByb2dyZXNzLCB0cnVlKSk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHByb2dyZXNzRXZlbnRSZWR1Y2VyKGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbiB8fCBjb25maWcuc2lnbmFsKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgb25DYW5jZWxlZCA9IGNhbmNlbCA9PiB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZWplY3QoIWNhbmNlbCB8fCBjYW5jZWwudHlwZSA/IG5ldyBDYW5jZWxlZEVycm9yKG51bGwsIGNvbmZpZywgcmVxdWVzdCkgOiBjYW5jZWwpO1xuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfTtcblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuICYmIGNvbmZpZy5jYW5jZWxUb2tlbi5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLmFib3J0ZWQgPyBvbkNhbmNlbGVkKCkgOiBjb25maWcuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcHJvdG9jb2wgPSBwYXJzZVByb3RvY29sKGZ1bGxQYXRoKTtcblxuICAgIGlmIChwcm90b2NvbCAmJiBwbGF0Zm9ybS5wcm90b2NvbHMuaW5kZXhPZihwcm90b2NvbCkgPT09IC0xKSB7XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1Vuc3VwcG9ydGVkIHByb3RvY29sICcgKyBwcm90b2NvbCArICc6JywgQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIGNvbmZpZykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSB8fCBudWxsKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2FsY3VsYXRlIGRhdGEgbWF4UmF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtzYW1wbGVzQ291bnQ9IDEwXVxuICogQHBhcmFtIHtOdW1iZXJ9IFttaW49IDEwMDBdXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHNwZWVkb21ldGVyKHNhbXBsZXNDb3VudCwgbWluKSB7XG4gIHNhbXBsZXNDb3VudCA9IHNhbXBsZXNDb3VudCB8fCAxMDtcbiAgY29uc3QgYnl0ZXMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgY29uc3QgdGltZXN0YW1wcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBsZXQgaGVhZCA9IDA7XG4gIGxldCB0YWlsID0gMDtcbiAgbGV0IGZpcnN0U2FtcGxlVFM7XG5cbiAgbWluID0gbWluICE9PSB1bmRlZmluZWQgPyBtaW4gOiAxMDAwO1xuXG4gIHJldHVybiBmdW5jdGlvbiBwdXNoKGNodW5rTGVuZ3RoKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgIGNvbnN0IHN0YXJ0ZWRBdCA9IHRpbWVzdGFtcHNbdGFpbF07XG5cbiAgICBpZiAoIWZpcnN0U2FtcGxlVFMpIHtcbiAgICAgIGZpcnN0U2FtcGxlVFMgPSBub3c7XG4gICAgfVxuXG4gICAgYnl0ZXNbaGVhZF0gPSBjaHVua0xlbmd0aDtcbiAgICB0aW1lc3RhbXBzW2hlYWRdID0gbm93O1xuXG4gICAgbGV0IGkgPSB0YWlsO1xuICAgIGxldCBieXRlc0NvdW50ID0gMDtcblxuICAgIHdoaWxlIChpICE9PSBoZWFkKSB7XG4gICAgICBieXRlc0NvdW50ICs9IGJ5dGVzW2krK107XG4gICAgICBpID0gaSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBoZWFkID0gKGhlYWQgKyAxKSAlIHNhbXBsZXNDb3VudDtcblxuICAgIGlmIChoZWFkID09PSB0YWlsKSB7XG4gICAgICB0YWlsID0gKHRhaWwgKyAxKSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBpZiAobm93IC0gZmlyc3RTYW1wbGVUUyA8IG1pbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBhc3NlZCA9IHN0YXJ0ZWRBdCAmJiBub3cgLSBzdGFydGVkQXQ7XG5cbiAgICByZXR1cm4gcGFzc2VkID8gTWF0aC5yb3VuZChieXRlc0NvdW50ICogMTAwMCAvIHBhc3NlZCkgOiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNwZWVkb21ldGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuL0F4aW9zRXJyb3IuanMnO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSByZXNwb25zZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgY29uc3QgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIFtBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFXVtNYXRoLmZsb29yKHJlc3BvbnNlLnN0YXR1cyAvIDEwMCkgLSA0XSxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlUHJvdG9jb2wodXJsKSB7XG4gIGNvbnN0IG1hdGNoID0gL14oWy0rXFx3XXsxLDI1fSkoOj9cXC9cXC98OikvLmV4ZWModXJsKTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdIHx8ICcnO1xufVxuIiwiaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBodHRwQWRhcHRlciBmcm9tICcuL2h0dHAuanMnO1xuaW1wb3J0IHhockFkYXB0ZXIgZnJvbSAnLi94aHIuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuXG5jb25zdCBrbm93bkFkYXB0ZXJzID0ge1xuICBodHRwOiBodHRwQWRhcHRlcixcbiAgeGhyOiB4aHJBZGFwdGVyXG59XG5cbnV0aWxzLmZvckVhY2goa25vd25BZGFwdGVycywgKGZuLCB2YWx1ZSkgPT4ge1xuICBpZiAoZm4pIHtcbiAgICB0cnkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCAnbmFtZScsIHt2YWx1ZX0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICdhZGFwdGVyTmFtZScsIHt2YWx1ZX0pO1xuICB9XG59KTtcblxuY29uc3QgcmVuZGVyUmVhc29uID0gKHJlYXNvbikgPT4gYC0gJHtyZWFzb259YDtcblxuY29uc3QgaXNSZXNvbHZlZEhhbmRsZSA9IChhZGFwdGVyKSA9PiB1dGlscy5pc0Z1bmN0aW9uKGFkYXB0ZXIpIHx8IGFkYXB0ZXIgPT09IG51bGwgfHwgYWRhcHRlciA9PT0gZmFsc2U7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0QWRhcHRlcjogKGFkYXB0ZXJzKSA9PiB7XG4gICAgYWRhcHRlcnMgPSB1dGlscy5pc0FycmF5KGFkYXB0ZXJzKSA/IGFkYXB0ZXJzIDogW2FkYXB0ZXJzXTtcblxuICAgIGNvbnN0IHtsZW5ndGh9ID0gYWRhcHRlcnM7XG4gICAgbGV0IG5hbWVPckFkYXB0ZXI7XG4gICAgbGV0IGFkYXB0ZXI7XG5cbiAgICBjb25zdCByZWplY3RlZFJlYXNvbnMgPSB7fTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIG5hbWVPckFkYXB0ZXIgPSBhZGFwdGVyc1tpXTtcbiAgICAgIGxldCBpZDtcblxuICAgICAgYWRhcHRlciA9IG5hbWVPckFkYXB0ZXI7XG5cbiAgICAgIGlmICghaXNSZXNvbHZlZEhhbmRsZShuYW1lT3JBZGFwdGVyKSkge1xuICAgICAgICBhZGFwdGVyID0ga25vd25BZGFwdGVyc1soaWQgPSBTdHJpbmcobmFtZU9yQWRhcHRlcikpLnRvTG93ZXJDYXNlKCldO1xuXG4gICAgICAgIGlmIChhZGFwdGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihgVW5rbm93biBhZGFwdGVyICcke2lkfSdgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYWRhcHRlcikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmVqZWN0ZWRSZWFzb25zW2lkIHx8ICcjJyArIGldID0gYWRhcHRlcjtcbiAgICB9XG5cbiAgICBpZiAoIWFkYXB0ZXIpIHtcblxuICAgICAgY29uc3QgcmVhc29ucyA9IE9iamVjdC5lbnRyaWVzKHJlamVjdGVkUmVhc29ucylcbiAgICAgICAgLm1hcCgoW2lkLCBzdGF0ZV0pID0+IGBhZGFwdGVyICR7aWR9IGAgK1xuICAgICAgICAgIChzdGF0ZSA9PT0gZmFsc2UgPyAnaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgZW52aXJvbm1lbnQnIDogJ2lzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGJ1aWxkJylcbiAgICAgICAgKTtcblxuICAgICAgbGV0IHMgPSBsZW5ndGggP1xuICAgICAgICAocmVhc29ucy5sZW5ndGggPiAxID8gJ3NpbmNlIDpcXG4nICsgcmVhc29ucy5tYXAocmVuZGVyUmVhc29uKS5qb2luKCdcXG4nKSA6ICcgJyArIHJlbmRlclJlYXNvbihyZWFzb25zWzBdKSkgOlxuICAgICAgICAnYXMgbm8gYWRhcHRlciBzcGVjaWZpZWQnO1xuXG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgYFRoZXJlIGlzIG5vIHN1aXRhYmxlIGFkYXB0ZXIgdG8gZGlzcGF0Y2ggdGhlIHJlcXVlc3QgYCArIHMsXG4gICAgICAgICdFUlJfTk9UX1NVUFBPUlQnXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBhZGFwdGVyO1xuICB9LFxuICBhZGFwdGVyczoga25vd25BZGFwdGVyc1xufVxuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHN0cmljdFxuZXhwb3J0IGRlZmF1bHQgbnVsbDtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHRyYW5zZm9ybURhdGEgZnJvbSAnLi90cmFuc2Zvcm1EYXRhLmpzJztcbmltcG9ydCBpc0NhbmNlbCBmcm9tICcuLi9jYW5jZWwvaXNDYW5jZWwuanMnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi4vY29yZS9BeGlvc0hlYWRlcnMuanMnO1xuaW1wb3J0IGFkYXB0ZXJzIGZyb20gXCIuLi9hZGFwdGVycy9hZGFwdGVycy5qc1wiO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIGNvbmZpZy5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oY29uZmlnLmhlYWRlcnMpO1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgaWYgKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXS5pbmRleE9mKGNvbmZpZy5tZXRob2QpICE9PSAtMSkge1xuICAgIGNvbmZpZy5oZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLCBmYWxzZSk7XG4gIH1cblxuICBjb25zdCBhZGFwdGVyID0gYWRhcHRlcnMuZ2V0QWRhcHRlcihjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyKTtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgIGNvbmZpZyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgIHJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJlc3BvbnNlLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShyZXNwb25zZS5oZWFkZXJzKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShyZWFzb24ucmVzcG9uc2UuaGVhZGVycyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi9BeGlvc0hlYWRlcnMuanNcIjtcblxuY29uc3QgaGVhZGVyc1RvT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyBpbnN0YW5jZW9mIEF4aW9zSGVhZGVycyA/IHRoaW5nLnRvSlNPTigpIDogdGhpbmc7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIGNvbnN0IGNvbmZpZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlLCBjYXNlbGVzcykge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UuY2FsbCh7Y2FzZWxlc3N9LCB0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMoYSwgYiwgY2FzZWxlc3MpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYiwgY2FzZWxlc3MpO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGEpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhLCBjYXNlbGVzcyk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIoYSwgYikge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKGEsIGIpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChhKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGlyZWN0S2V5cyhhLCBiLCBwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGEsIGIpO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBtZXJnZU1hcCA9IHtcbiAgICB1cmw6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgbWV0aG9kOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIGRhdGE6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgYmFzZVVSTDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHBhcmFtc1NlcmlhbGl6ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdGltZW91dDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0TWVzc2FnZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB3aXRoQ3JlZGVudGlhbHM6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgd2l0aFhTUkZUb2tlbjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBhZGFwdGVyOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlVHlwZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmQ29va2llTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmSGVhZGVyTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBvblVwbG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uRG93bmxvYWRQcm9ncmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBkZWNvbXByZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG1heENvbnRlbnRMZW5ndGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Qm9keUxlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBiZWZvcmVSZWRpcmVjdDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc3BvcnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cEFnZW50OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGh0dHBzQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgY2FuY2VsVG9rZW46IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgc29ja2V0UGF0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICByZXNwb25zZUVuY29kaW5nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHZhbGlkYXRlU3RhdHVzOiBtZXJnZURpcmVjdEtleXMsXG4gICAgaGVhZGVyczogKGEsIGIpID0+IG1lcmdlRGVlcFByb3BlcnRpZXMoaGVhZGVyc1RvT2JqZWN0KGEpLCBoZWFkZXJzVG9PYmplY3QoYiksIHRydWUpXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBjb25maWcxLCBjb25maWcyKSksIGZ1bmN0aW9uIGNvbXB1dGVDb25maWdWYWx1ZShwcm9wKSB7XG4gICAgY29uc3QgbWVyZ2UgPSBtZXJnZU1hcFtwcm9wXSB8fCBtZXJnZURlZXBQcm9wZXJ0aWVzO1xuICAgIGNvbnN0IGNvbmZpZ1ZhbHVlID0gbWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSwgcHJvcCk7XG4gICAgKHV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufVxuIiwiZXhwb3J0IGNvbnN0IFZFUlNJT04gPSBcIjEuNi41XCI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge1ZFUlNJT059IGZyb20gJy4uL2Vudi9kYXRhLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKCh0eXBlLCBpKSA9PiB7XG4gIHZhbGlkYXRvcnNbdHlwZV0gPSBmdW5jdGlvbiB2YWxpZGF0b3IodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSB0eXBlIHx8ICdhJyArIChpIDwgMSA/ICduICcgOiAnICcpICsgdHlwZTtcbiAgfTtcbn0pO1xuXG5jb25zdCBkZXByZWNhdGVkV2FybmluZ3MgPSB7fTtcblxuLyoqXG4gKiBUcmFuc2l0aW9uYWwgb3B0aW9uIHZhbGlkYXRvclxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvciAtIHNldCB0byBmYWxzZSBpZiB0aGUgdHJhbnNpdGlvbmFsIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkXG4gKiBAcGFyYW0ge3N0cmluZz99IHZlcnNpb24gLSBkZXByZWNhdGVkIHZlcnNpb24gLyByZW1vdmVkIHNpbmNlIHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gbWVzc2FnZSAtIHNvbWUgbWVzc2FnZSB3aXRoIGFkZGl0aW9uYWwgaW5mb1xuICpcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiAodmFsdWUsIG9wdCwgb3B0cykgPT4ge1xuICAgIGlmICh2YWxpZGF0b3IgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShvcHQsICcgaGFzIGJlZW4gcmVtb3ZlZCcgKyAodmVyc2lvbiA/ICcgaW4gJyArIHZlcnNpb24gOiAnJykpLFxuICAgICAgICBBeGlvc0Vycm9yLkVSUl9ERVBSRUNBVEVEXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEFzc2VydCBvYmplY3QncyBwcm9wZXJ0aWVzIHR5cGVcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKlxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgYWxsb3dVbmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICB9XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBjb25zdCBvcHQgPSBrZXlzW2ldO1xuICAgIGNvbnN0IHZhbGlkYXRvciA9IHNjaGVtYVtvcHRdO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYXNzZXJ0T3B0aW9ucyxcbiAgdmFsaWRhdG9yc1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IGJ1aWxkVVJMIGZyb20gJy4uL2hlbHBlcnMvYnVpbGRVUkwuanMnO1xuaW1wb3J0IEludGVyY2VwdG9yTWFuYWdlciBmcm9tICcuL0ludGVyY2VwdG9yTWFuYWdlci5qcyc7XG5pbXBvcnQgZGlzcGF0Y2hSZXF1ZXN0IGZyb20gJy4vZGlzcGF0Y2hSZXF1ZXN0LmpzJztcbmltcG9ydCBtZXJnZUNvbmZpZyBmcm9tICcuL21lcmdlQ29uZmlnLmpzJztcbmltcG9ydCBidWlsZEZ1bGxQYXRoIGZyb20gJy4vYnVpbGRGdWxsUGF0aC5qcyc7XG5pbXBvcnQgdmFsaWRhdG9yIGZyb20gJy4uL2hlbHBlcnMvdmFsaWRhdG9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi9BeGlvc0hlYWRlcnMuanMnO1xuXG5jb25zdCB2YWxpZGF0b3JzID0gdmFsaWRhdG9yLnZhbGlkYXRvcnM7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKlxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmNsYXNzIEF4aW9zIHtcbiAgY29uc3RydWN0b3IoaW5zdGFuY2VDb25maWcpIHtcbiAgICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBjb25maWdPclVybCBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gICAqIEBwYXJhbSB7P09iamVjdH0gY29uZmlnXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAgICovXG4gIHJlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgICBpZiAodHlwZW9mIGNvbmZpZ09yVXJsID09PSAnc3RyaW5nJykge1xuICAgICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgICAgY29uZmlnLnVybCA9IGNvbmZpZ09yVXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25maWcgPSBjb25maWdPclVybCB8fCB7fTtcbiAgICB9XG5cbiAgICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gICAgY29uc3Qge3RyYW5zaXRpb25hbCwgcGFyYW1zU2VyaWFsaXplciwgaGVhZGVyc30gPSBjb25maWc7XG5cbiAgICBpZiAodHJhbnNpdGlvbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHRyYW5zaXRpb25hbCwge1xuICAgICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgICAgZm9yY2VkSlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbilcbiAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zU2VyaWFsaXplciAhPSBudWxsKSB7XG4gICAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihwYXJhbXNTZXJpYWxpemVyKSkge1xuICAgICAgICBjb25maWcucGFyYW1zU2VyaWFsaXplciA9IHtcbiAgICAgICAgICBzZXJpYWxpemU6IHBhcmFtc1NlcmlhbGl6ZXJcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnMocGFyYW1zU2VyaWFsaXplciwge1xuICAgICAgICAgIGVuY29kZTogdmFsaWRhdG9ycy5mdW5jdGlvbixcbiAgICAgICAgICBzZXJpYWxpemU6IHZhbGlkYXRvcnMuZnVuY3Rpb25cbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgICBjb25maWcubWV0aG9kID0gKGNvbmZpZy5tZXRob2QgfHwgdGhpcy5kZWZhdWx0cy5tZXRob2QgfHwgJ2dldCcpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgICBsZXQgY29udGV4dEhlYWRlcnMgPSBoZWFkZXJzICYmIHV0aWxzLm1lcmdlKFxuICAgICAgaGVhZGVycy5jb21tb24sXG4gICAgICBoZWFkZXJzW2NvbmZpZy5tZXRob2RdXG4gICAgKTtcblxuICAgIGhlYWRlcnMgJiYgdXRpbHMuZm9yRWFjaChcbiAgICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgICAgKG1ldGhvZCkgPT4ge1xuICAgICAgICBkZWxldGUgaGVhZGVyc1ttZXRob2RdO1xuICAgICAgfVxuICAgICk7XG5cbiAgICBjb25maWcuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5jb25jYXQoY29udGV4dEhlYWRlcnMsIGhlYWRlcnMpO1xuXG4gICAgLy8gZmlsdGVyIG91dCBza2lwcGVkIGludGVyY2VwdG9yc1xuICAgIGNvbnN0IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gICAgbGV0IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHRydWU7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgICAgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIGxldCBwcm9taXNlO1xuICAgIGxldCBpID0gMDtcbiAgICBsZXQgbGVuO1xuXG4gICAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICAgIGNvbnN0IGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdC5iaW5kKHRoaXMpLCB1bmRlZmluZWRdO1xuICAgICAgY2hhaW4udW5zaGlmdC5hcHBseShjaGFpbiwgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4pO1xuICAgICAgY2hhaW4ucHVzaC5hcHBseShjaGFpbiwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGxlbiA9IGNoYWluLmxlbmd0aDtcblxuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluW2krK10sIGNoYWluW2krK10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICBsZW4gPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGg7XG5cbiAgICBsZXQgbmV3Q29uZmlnID0gY29uZmlnO1xuXG4gICAgaSA9IDA7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgY29uc3Qgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgY29uc3Qgb25SZWplY3RlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluW2krK107XG4gICAgICB0cnkge1xuICAgICAgICBuZXdDb25maWcgPSBvbkZ1bGZpbGxlZChuZXdDb25maWcpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgb25SZWplY3RlZC5jYWxsKHRoaXMsIGVycm9yKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QuY2FsbCh0aGlzLCBuZXdDb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cblxuICAgIGkgPSAwO1xuICAgIGxlbiA9IHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihyZXNwb25zZUludGVyY2VwdG9yQ2hhaW5baSsrXSwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10pO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgZ2V0VXJpKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gICAgY29uc3QgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXR1cm4gYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKTtcbiAgfVxufVxuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZCxcbiAgICAgIHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cblxuICBmdW5jdGlvbiBnZW5lcmF0ZUhUVFBNZXRob2QoaXNGb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGh0dHBNZXRob2QodXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgaGVhZGVyczogaXNGb3JtID8ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSdcbiAgICAgICAgfSA6IHt9LFxuICAgICAgICB1cmwsXG4gICAgICAgIGRhdGFcbiAgICAgIH0pKTtcbiAgICB9O1xuICB9XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBnZW5lcmF0ZUhUVFBNZXRob2QoKTtcblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kICsgJ0Zvcm0nXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCh0cnVlKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi9DYW5jZWxlZEVycm9yLmpzJztcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsVG9rZW59XG4gKi9cbmNsYXNzIENhbmNlbFRva2VuIHtcbiAgY29uc3RydWN0b3IoZXhlY3V0b3IpIHtcbiAgICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgbGV0IHJlc29sdmVQcm9taXNlO1xuXG4gICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHRva2VuID0gdGhpcztcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdGhpcy5wcm9taXNlLnRoZW4oY2FuY2VsID0+IHtcbiAgICAgIGlmICghdG9rZW4uX2xpc3RlbmVycykgcmV0dXJuO1xuXG4gICAgICBsZXQgaSA9IHRva2VuLl9saXN0ZW5lcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICB0b2tlbi5fbGlzdGVuZXJzW2ldKGNhbmNlbCk7XG4gICAgICB9XG4gICAgICB0b2tlbi5fbGlzdGVuZXJzID0gbnVsbDtcbiAgICB9KTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdGhpcy5wcm9taXNlLnRoZW4gPSBvbmZ1bGZpbGxlZCA9PiB7XG4gICAgICBsZXQgX3Jlc29sdmU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICB0b2tlbi5zdWJzY3JpYmUocmVzb2x2ZSk7XG4gICAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIH0pLnRoZW4ob25mdWxmaWxsZWQpO1xuXG4gICAgICBwcm9taXNlLmNhbmNlbCA9IGZ1bmN0aW9uIHJlamVjdCgpIHtcbiAgICAgICAgdG9rZW4udW5zdWJzY3JpYmUoX3Jlc29sdmUpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfTtcblxuICAgIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpIHtcbiAgICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KTtcbiAgICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gICAqL1xuICB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICAgIGlmICh0aGlzLnJlYXNvbikge1xuICAgICAgdGhyb3cgdGhpcy5yZWFzb247XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICAgKi9cblxuICBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIGxpc3RlbmVyKHRoaXMucmVhc29uKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycyA9IFtsaXN0ZW5lcl07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVuc3Vic2NyaWJlIGZyb20gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAoIXRoaXMuX2xpc3RlbmVycykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICAgKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICAgKi9cbiAgc3RhdGljIHNvdXJjZSgpIHtcbiAgICBsZXQgY2FuY2VsO1xuICAgIGNvbnN0IHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICAgIGNhbmNlbCA9IGM7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRva2VuLFxuICAgICAgY2FuY2VsXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDYW5jZWxUb2tlbjtcbiIsImNvbnN0IEh0dHBTdGF0dXNDb2RlID0ge1xuICBDb250aW51ZTogMTAwLFxuICBTd2l0Y2hpbmdQcm90b2NvbHM6IDEwMSxcbiAgUHJvY2Vzc2luZzogMTAyLFxuICBFYXJseUhpbnRzOiAxMDMsXG4gIE9rOiAyMDAsXG4gIENyZWF0ZWQ6IDIwMSxcbiAgQWNjZXB0ZWQ6IDIwMixcbiAgTm9uQXV0aG9yaXRhdGl2ZUluZm9ybWF0aW9uOiAyMDMsXG4gIE5vQ29udGVudDogMjA0LFxuICBSZXNldENvbnRlbnQ6IDIwNSxcbiAgUGFydGlhbENvbnRlbnQ6IDIwNixcbiAgTXVsdGlTdGF0dXM6IDIwNyxcbiAgQWxyZWFkeVJlcG9ydGVkOiAyMDgsXG4gIEltVXNlZDogMjI2LFxuICBNdWx0aXBsZUNob2ljZXM6IDMwMCxcbiAgTW92ZWRQZXJtYW5lbnRseTogMzAxLFxuICBGb3VuZDogMzAyLFxuICBTZWVPdGhlcjogMzAzLFxuICBOb3RNb2RpZmllZDogMzA0LFxuICBVc2VQcm94eTogMzA1LFxuICBVbnVzZWQ6IDMwNixcbiAgVGVtcG9yYXJ5UmVkaXJlY3Q6IDMwNyxcbiAgUGVybWFuZW50UmVkaXJlY3Q6IDMwOCxcbiAgQmFkUmVxdWVzdDogNDAwLFxuICBVbmF1dGhvcml6ZWQ6IDQwMSxcbiAgUGF5bWVudFJlcXVpcmVkOiA0MDIsXG4gIEZvcmJpZGRlbjogNDAzLFxuICBOb3RGb3VuZDogNDA0LFxuICBNZXRob2ROb3RBbGxvd2VkOiA0MDUsXG4gIE5vdEFjY2VwdGFibGU6IDQwNixcbiAgUHJveHlBdXRoZW50aWNhdGlvblJlcXVpcmVkOiA0MDcsXG4gIFJlcXVlc3RUaW1lb3V0OiA0MDgsXG4gIENvbmZsaWN0OiA0MDksXG4gIEdvbmU6IDQxMCxcbiAgTGVuZ3RoUmVxdWlyZWQ6IDQxMSxcbiAgUHJlY29uZGl0aW9uRmFpbGVkOiA0MTIsXG4gIFBheWxvYWRUb29MYXJnZTogNDEzLFxuICBVcmlUb29Mb25nOiA0MTQsXG4gIFVuc3VwcG9ydGVkTWVkaWFUeXBlOiA0MTUsXG4gIFJhbmdlTm90U2F0aXNmaWFibGU6IDQxNixcbiAgRXhwZWN0YXRpb25GYWlsZWQ6IDQxNyxcbiAgSW1BVGVhcG90OiA0MTgsXG4gIE1pc2RpcmVjdGVkUmVxdWVzdDogNDIxLFxuICBVbnByb2Nlc3NhYmxlRW50aXR5OiA0MjIsXG4gIExvY2tlZDogNDIzLFxuICBGYWlsZWREZXBlbmRlbmN5OiA0MjQsXG4gIFRvb0Vhcmx5OiA0MjUsXG4gIFVwZ3JhZGVSZXF1aXJlZDogNDI2LFxuICBQcmVjb25kaXRpb25SZXF1aXJlZDogNDI4LFxuICBUb29NYW55UmVxdWVzdHM6IDQyOSxcbiAgUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlOiA0MzEsXG4gIFVuYXZhaWxhYmxlRm9yTGVnYWxSZWFzb25zOiA0NTEsXG4gIEludGVybmFsU2VydmVyRXJyb3I6IDUwMCxcbiAgTm90SW1wbGVtZW50ZWQ6IDUwMSxcbiAgQmFkR2F0ZXdheTogNTAyLFxuICBTZXJ2aWNlVW5hdmFpbGFibGU6IDUwMyxcbiAgR2F0ZXdheVRpbWVvdXQ6IDUwNCxcbiAgSHR0cFZlcnNpb25Ob3RTdXBwb3J0ZWQ6IDUwNSxcbiAgVmFyaWFudEFsc29OZWdvdGlhdGVzOiA1MDYsXG4gIEluc3VmZmljaWVudFN0b3JhZ2U6IDUwNyxcbiAgTG9vcERldGVjdGVkOiA1MDgsXG4gIE5vdEV4dGVuZGVkOiA1MTAsXG4gIE5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkOiA1MTEsXG59O1xuXG5PYmplY3QuZW50cmllcyhIdHRwU3RhdHVzQ29kZSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gIEh0dHBTdGF0dXNDb2RlW3ZhbHVlXSA9IGtleTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBIdHRwU3RhdHVzQ29kZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IGJpbmQgZnJvbSAnLi9oZWxwZXJzL2JpbmQuanMnO1xuaW1wb3J0IEF4aW9zIGZyb20gJy4vY29yZS9BeGlvcy5qcyc7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSAnLi9jb3JlL21lcmdlQ29uZmlnLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBmb3JtRGF0YVRvSlNPTiBmcm9tICcuL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgQ2FuY2VsVG9rZW4gZnJvbSAnLi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4vY2FuY2VsL2lzQ2FuY2VsLmpzJztcbmltcG9ydCB7VkVSU0lPTn0gZnJvbSAnLi9lbnYvZGF0YS5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgc3ByZWFkIGZyb20gJy4vaGVscGVycy9zcHJlYWQuanMnO1xuaW1wb3J0IGlzQXhpb3NFcnJvciBmcm9tICcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4vY29yZS9BeGlvc0hlYWRlcnMuanNcIjtcbmltcG9ydCBhZGFwdGVycyBmcm9tICcuL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzJztcbmltcG9ydCBIdHRwU3RhdHVzQ29kZSBmcm9tICcuL2hlbHBlcnMvSHR0cFN0YXR1c0NvZGUuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKlxuICogQHJldHVybnMge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIGNvbnN0IGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIGNvbnN0IGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCwgbnVsbCwge2FsbE93bktleXM6IHRydWV9KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG5jb25zdCBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbGVkRXJyb3IgPSBDYW5jZWxlZEVycm9yO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSBDYW5jZWxUb2tlbjtcbmF4aW9zLmlzQ2FuY2VsID0gaXNDYW5jZWw7XG5heGlvcy5WRVJTSU9OID0gVkVSU0lPTjtcbmF4aW9zLnRvRm9ybURhdGEgPSB0b0Zvcm1EYXRhO1xuXG4vLyBFeHBvc2UgQXhpb3NFcnJvciBjbGFzc1xuYXhpb3MuQXhpb3NFcnJvciA9IEF4aW9zRXJyb3I7XG5cbi8vIGFsaWFzIGZvciBDYW5jZWxlZEVycm9yIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5heGlvcy5DYW5jZWwgPSBheGlvcy5DYW5jZWxlZEVycm9yO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuXG5heGlvcy5zcHJlYWQgPSBzcHJlYWQ7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IGlzQXhpb3NFcnJvcjtcblxuLy8gRXhwb3NlIG1lcmdlQ29uZmlnXG5heGlvcy5tZXJnZUNvbmZpZyA9IG1lcmdlQ29uZmlnO1xuXG5heGlvcy5BeGlvc0hlYWRlcnMgPSBBeGlvc0hlYWRlcnM7XG5cbmF4aW9zLmZvcm1Ub0pTT04gPSB0aGluZyA9PiBmb3JtRGF0YVRvSlNPTih1dGlscy5pc0hUTUxGb3JtKHRoaW5nKSA/IG5ldyBGb3JtRGF0YSh0aGluZykgOiB0aGluZyk7XG5cbmF4aW9zLmdldEFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyO1xuXG5heGlvcy5IdHRwU3RhdHVzQ29kZSA9IEh0dHBTdGF0dXNDb2RlO1xuXG5heGlvcy5kZWZhdWx0ID0gYXhpb3M7XG5cbi8vIHRoaXMgbW9kdWxlIHNob3VsZCBvbmx5IGhhdmUgYSBkZWZhdWx0IGV4cG9ydFxuZXhwb3J0IGRlZmF1bHQgYXhpb3NcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuIHV0aWxzLmlzT2JqZWN0KHBheWxvYWQpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5jb25zdCBHbG9iYWxDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7XHJcbiAgICBzZWFyY2hTdHJpbmdWYWx1ZTogJycsXHJcbiAgICBzZXRTZWFyY2hTdHJpbmdGbjogKCkgPT4ge30sXHJcbn0pXHJcbmV4cG9ydCBkZWZhdWx0IEdsb2JhbENvbnRleHQ7IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuY29uc3QgTnV0cml0aW9uID0gKHByb3BzKSA9PiB7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuXHJcblxyXG4gICAgICAgICBcclxuXHJcbiAgICAgICAgICAgIDx0ciA+XHJcbiAgICAgICAgICAgICAgIDx0ZD5OYW1lPC90ZD5cclxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+e3Byb3BzLmRhdGFOdXQubmFtZX08L3RkPlxyXG4gICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICA8dGQ+U2VydmluZyBzaXplPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPntwcm9wcy5kYXRhTnV0LnNlcnZpbmdfc2l6ZV9nfSBnPC90ZD5cclxuICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRkPkZhdDwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPntwcm9wcy5kYXRhTnV0LmZhdF90b3RhbF9nfSBnPC90ZD5cclxuICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICA8dGQ+UHJvdGVpbjwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPntwcm9wcy5kYXRhTnV0LnByb3RlaW5fZ30gZzwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ZD5DYXJib2h5ZHJhdGVzPC90ZD5cclxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+e3Byb3BzLmRhdGFOdXQuY2FyYm9oeWRyYXRlc190b3RhbF9nfSBnPC90ZD5cclxuICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRkPlNvZGl1bTwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8dGQ+e3Byb3BzLmRhdGFOdXQuc29kaXVtX21nfSBtZzwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ZD5Qb3R0YXNpdW08L3RkPlxyXG4gICAgICAgICAgICAgICAgPHRkPntwcm9wcy5kYXRhTnV0LnBvdGFzc2l1bV9tZ30gbWc8L3RkPlxyXG4gICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICA8dGQ+U3VnYXI8L3RkPlxyXG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj57cHJvcHMuZGF0YU51dC5zdWdhcl9nfSBnPC90ZD5cclxuICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRkPkZpYmVyPC90ZD5cclxuICAgICAgICAgICAgICAgIDx0ZD57cHJvcHMuZGF0YU51dC5maWJlcl9nfSBnPC90ZD5cclxuICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRkPkNob2xlc3Rlcm9sPC90ZD4gIFxyXG4gICAgICAgICAgICAgICAgPHRkPntwcm9wcy5kYXRhTnV0LmNob2xlc3Rlcm9sX21nfSBtZzwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ZD5DYWxvcmllczwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPntwcm9wcy5kYXRhTnV0LmNhbG9yaWVzfTwvdGQ+XHJcbiAgICAgICAgICAgIDwvdHI+XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICA8Lz5cclxuICAgICk7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IE51dHJpdGlvbjsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImZ1bmN0aW9uIHIoZSl7dmFyIHQsZixuPVwiXCI7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGV8fFwibnVtYmVyXCI9PXR5cGVvZiBlKW4rPWU7ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgZSlpZihBcnJheS5pc0FycmF5KGUpKXt2YXIgbz1lLmxlbmd0aDtmb3IodD0wO3Q8bzt0KyspZVt0XSYmKGY9cihlW3RdKSkmJihuJiYobis9XCIgXCIpLG4rPWYpfWVsc2UgZm9yKGYgaW4gZSllW2ZdJiYobiYmKG4rPVwiIFwiKSxuKz1mKTtyZXR1cm4gbn1leHBvcnQgZnVuY3Rpb24gY2xzeCgpe2Zvcih2YXIgZSx0LGY9MCxuPVwiXCIsbz1hcmd1bWVudHMubGVuZ3RoO2Y8bztmKyspKGU9YXJndW1lbnRzW2ZdKSYmKHQ9cihlKSkmJihuJiYobis9XCIgXCIpLG4rPXQpO3JldHVybiBufWV4cG9ydCBkZWZhdWx0IGNsc3g7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFV0aWxpdHlDbGFzcywgY2xhc3NlcyA9IHVuZGVmaW5lZCkge1xuICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgT2JqZWN0LmtleXMoc2xvdHMpLmZvckVhY2goXG4gIC8vIGBPYmplY3Qua2V5cyhzbG90cylgIGNhbid0IGJlIHdpZGVyIHRoYW4gYFRgIGJlY2F1c2Ugd2UgaW5mZXIgYFRgIGZyb20gYHNsb3RzYC5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvcHVsbC8xMjI1MyNpc3N1ZWNvbW1lbnQtMjYzMTMyMjA4XG4gIHNsb3QgPT4ge1xuICAgIG91dHB1dFtzbG90XSA9IHNsb3RzW3Nsb3RdLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgY29uc3QgdXRpbGl0eUNsYXNzID0gZ2V0VXRpbGl0eUNsYXNzKGtleSk7XG4gICAgICAgIGlmICh1dGlsaXR5Q2xhc3MgIT09ICcnKSB7XG4gICAgICAgICAgYWNjLnB1c2godXRpbGl0eUNsYXNzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2xhc3NlcyAmJiBjbGFzc2VzW2tleV0pIHtcbiAgICAgICAgICBhY2MucHVzaChjbGFzc2VzW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIFtdKS5qb2luKCcgJyk7XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufSIsIi8qKlxuICogV0FSTklORzogRG9uJ3QgaW1wb3J0IHRoaXMgZGlyZWN0bHkuXG4gKiBVc2UgYE11aUVycm9yYCBmcm9tIGBAbXVpLWludGVybmFsL2JhYmVsLW1hY3Jvcy9NdWlFcnJvci5tYWNyb2AgaW5zdGVhZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2RlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdE11aUVycm9yTWVzc2FnZShjb2RlKSB7XG4gIC8vIEFwcGx5IGJhYmVsLXBsdWdpbi10cmFuc2Zvcm0tdGVtcGxhdGUtbGl0ZXJhbHMgaW4gbG9vc2UgbW9kZVxuICAvLyBsb29zZSBtb2RlIGlzIHNhZmUgaWYgd2UncmUgY29uY2F0ZW5hdGluZyBwcmltaXRpdmVzXG4gIC8vIHNlZSBodHRwczovL2JhYmVsanMuaW8vZG9jcy9lbi9iYWJlbC1wbHVnaW4tdHJhbnNmb3JtLXRlbXBsYXRlLWxpdGVyYWxzI2xvb3NlXG4gIC8qIGVzbGludC1kaXNhYmxlIHByZWZlci10ZW1wbGF0ZSAqL1xuICBsZXQgdXJsID0gJ2h0dHBzOi8vbXVpLmNvbS9wcm9kdWN0aW9uLWVycm9yLz9jb2RlPScgKyBjb2RlO1xuICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIC8vIHJlc3QgcGFyYW1zIG92ZXItdHJhbnNwaWxlIGZvciB0aGlzIGNhc2VcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgdXJsICs9ICcmYXJnc1tdPScgKyBlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2ldKTtcbiAgfVxuICByZXR1cm4gJ01pbmlmaWVkIE1VSSBlcnJvciAjJyArIGNvZGUgKyAnOyB2aXNpdCAnICsgdXJsICsgJyBmb3IgdGhlIGZ1bGwgbWVzc2FnZS4nO1xuICAvKiBlc2xpbnQtZW5hYmxlIHByZWZlci10ZW1wbGF0ZSAqL1xufSIsImZ1bmN0aW9uIGNsYW1wKHZhbCwgbWluID0gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIsIG1heCA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSB7XG4gIHJldHVybiBNYXRoLm1heChtaW4sIE1hdGgubWluKHZhbCwgbWF4KSk7XG59XG5leHBvcnQgZGVmYXVsdCBjbGFtcDsiLCJpbXBvcnQgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSBmcm9tIFwiQG11aS91dGlscy9mb3JtYXRNdWlFcnJvck1lc3NhZ2VcIjtcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuaW1wb3J0IHsgY2xhbXAgfSBmcm9tICdAbXVpL3V0aWxzJztcbi8qKlxuICogUmV0dXJucyBhIG51bWJlciB3aG9zZSB2YWx1ZSBpcyBsaW1pdGVkIHRvIHRoZSBnaXZlbiByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYmUgY2xhbXBlZFxuICogQHBhcmFtIHtudW1iZXJ9IG1pbiBUaGUgbG93ZXIgYm91bmRhcnkgb2YgdGhlIG91dHB1dCByYW5nZVxuICogQHBhcmFtIHtudW1iZXJ9IG1heCBUaGUgdXBwZXIgYm91bmRhcnkgb2YgdGhlIG91dHB1dCByYW5nZVxuICogQHJldHVybnMge251bWJlcn0gQSBudW1iZXIgaW4gdGhlIHJhbmdlIFttaW4sIG1heF1cbiAqL1xuZnVuY3Rpb24gY2xhbXBXcmFwcGVyKHZhbHVlLCBtaW4gPSAwLCBtYXggPSAxKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHZhbHVlIDwgbWluIHx8IHZhbHVlID4gbWF4KSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBNVUk6IFRoZSB2YWx1ZSBwcm92aWRlZCAke3ZhbHVlfSBpcyBvdXQgb2YgcmFuZ2UgWyR7bWlufSwgJHttYXh9XS5gKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNsYW1wKHZhbHVlLCBtaW4sIG1heCk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIENTUyBoZXggZm9ybWF0IHRvIENTUyByZ2IgZm9ybWF0LlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSGV4IGNvbG9yLCBpLmUuICNubm4gb3IgI25ubm5ublxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gaGV4VG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBjb2xvci5zbGljZSgxKTtcbiAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKGAuezEsJHtjb2xvci5sZW5ndGggPj0gNiA/IDIgOiAxfX1gLCAnZycpO1xuICBsZXQgY29sb3JzID0gY29sb3IubWF0Y2gocmUpO1xuICBpZiAoY29sb3JzICYmIGNvbG9yc1swXS5sZW5ndGggPT09IDEpIHtcbiAgICBjb2xvcnMgPSBjb2xvcnMubWFwKG4gPT4gbiArIG4pO1xuICB9XG4gIHJldHVybiBjb2xvcnMgPyBgcmdiJHtjb2xvcnMubGVuZ3RoID09PSA0ID8gJ2EnIDogJyd9KCR7Y29sb3JzLm1hcCgobiwgaW5kZXgpID0+IHtcbiAgICByZXR1cm4gaW5kZXggPCAzID8gcGFyc2VJbnQobiwgMTYpIDogTWF0aC5yb3VuZChwYXJzZUludChuLCAxNikgLyAyNTUgKiAxMDAwKSAvIDEwMDA7XG4gIH0pLmpvaW4oJywgJyl9KWAgOiAnJztcbn1cbmZ1bmN0aW9uIGludFRvSGV4KGludCkge1xuICBjb25zdCBoZXggPSBpbnQudG9TdHJpbmcoMTYpO1xuICByZXR1cm4gaGV4Lmxlbmd0aCA9PT0gMSA/IGAwJHtoZXh9YCA6IGhleDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSB0eXBlIGFuZCB2YWx1ZXMgb2YgYSBjb2xvci5cbiAqXG4gKiBOb3RlOiBEb2VzIG5vdCBzdXBwb3J0IHJnYiAlIHZhbHVlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEByZXR1cm5zIHtvYmplY3R9IC0gQSBNVUkgY29sb3Igb2JqZWN0OiB7dHlwZTogc3RyaW5nLCB2YWx1ZXM6IG51bWJlcltdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IudHlwZSkge1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuICBpZiAoY29sb3IuY2hhckF0KDApID09PSAnIycpIHtcbiAgICByZXR1cm4gZGVjb21wb3NlQ29sb3IoaGV4VG9SZ2IoY29sb3IpKTtcbiAgfVxuICBjb25zdCBtYXJrZXIgPSBjb2xvci5pbmRleE9mKCcoJyk7XG4gIGNvbnN0IHR5cGUgPSBjb2xvci5zdWJzdHJpbmcoMCwgbWFya2VyKTtcbiAgaWYgKFsncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnLCAnY29sb3InXS5pbmRleE9mKHR5cGUpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBVbnN1cHBvcnRlZCBcXGAke2NvbG9yfVxcYCBjb2xvci5cblRoZSBmb2xsb3dpbmcgZm9ybWF0cyBhcmUgc3VwcG9ydGVkOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDksIGNvbG9yKSk7XG4gIH1cbiAgbGV0IHZhbHVlcyA9IGNvbG9yLnN1YnN0cmluZyhtYXJrZXIgKyAxLCBjb2xvci5sZW5ndGggLSAxKTtcbiAgbGV0IGNvbG9yU3BhY2U7XG4gIGlmICh0eXBlID09PSAnY29sb3InKSB7XG4gICAgdmFsdWVzID0gdmFsdWVzLnNwbGl0KCcgJyk7XG4gICAgY29sb3JTcGFjZSA9IHZhbHVlcy5zaGlmdCgpO1xuICAgIGlmICh2YWx1ZXMubGVuZ3RoID09PSA0ICYmIHZhbHVlc1szXS5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgICAgdmFsdWVzWzNdID0gdmFsdWVzWzNdLnNsaWNlKDEpO1xuICAgIH1cbiAgICBpZiAoWydzcmdiJywgJ2Rpc3BsYXktcDMnLCAnYTk4LXJnYicsICdwcm9waG90by1yZ2InLCAncmVjLTIwMjAnXS5pbmRleE9mKGNvbG9yU3BhY2UpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IHVuc3VwcG9ydGVkIFxcYCR7Y29sb3JTcGFjZX1cXGAgY29sb3Igc3BhY2UuXG5UaGUgZm9sbG93aW5nIGNvbG9yIHNwYWNlcyBhcmUgc3VwcG9ydGVkOiBzcmdiLCBkaXNwbGF5LXAzLCBhOTgtcmdiLCBwcm9waG90by1yZ2IsIHJlYy0yMDIwLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDEwLCBjb2xvclNwYWNlKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhbHVlcyA9IHZhbHVlcy5zcGxpdCgnLCcpO1xuICB9XG4gIHZhbHVlcyA9IHZhbHVlcy5tYXAodmFsdWUgPT4gcGFyc2VGbG9hdCh2YWx1ZSkpO1xuICByZXR1cm4ge1xuICAgIHR5cGUsXG4gICAgdmFsdWVzLFxuICAgIGNvbG9yU3BhY2VcbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgY2hhbm5lbCBjcmVhdGVkIGZyb20gdGhlIGlucHV0IGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gVGhlIGNoYW5uZWwgZm9yIHRoZSBjb2xvciwgdGhhdCBjYW4gYmUgdXNlZCBpbiByZ2JhIG9yIGhzbGEgY29sb3JzXG4gKi9cbmV4cG9ydCBjb25zdCBjb2xvckNoYW5uZWwgPSBjb2xvciA9PiB7XG4gIGNvbnN0IGRlY29tcG9zZWRDb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgcmV0dXJuIGRlY29tcG9zZWRDb2xvci52YWx1ZXMuc2xpY2UoMCwgMykubWFwKCh2YWwsIGlkeCkgPT4gZGVjb21wb3NlZENvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xICYmIGlkeCAhPT0gMCA/IGAke3ZhbH0lYCA6IHZhbCkuam9pbignICcpO1xufTtcbmV4cG9ydCBjb25zdCBwcml2YXRlX3NhZmVDb2xvckNoYW5uZWwgPSAoY29sb3IsIHdhcm5pbmcpID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gY29sb3JDaGFubmVsKGNvbG9yKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAod2FybmluZyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIG9iamVjdCB3aXRoIHR5cGUgYW5kIHZhbHVlcyB0byBhIHN0cmluZy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBjb2xvciAtIERlY29tcG9zZWQgY29sb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvci50eXBlIC0gT25lIG9mOiAncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnLCAnY29sb3InXG4gKiBAcGFyYW0ge2FycmF5fSBjb2xvci52YWx1ZXMgLSBbbixuLG5dIG9yIFtuLG4sbixuXVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICBjb25zdCB7XG4gICAgdHlwZSxcbiAgICBjb2xvclNwYWNlXG4gIH0gPSBjb2xvcjtcbiAgbGV0IHtcbiAgICB2YWx1ZXNcbiAgfSA9IGNvbG9yO1xuICBpZiAodHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICAvLyBPbmx5IGNvbnZlcnQgdGhlIGZpcnN0IDMgdmFsdWVzIHRvIGludCAoaS5lLiBub3QgYWxwaGEpXG4gICAgdmFsdWVzID0gdmFsdWVzLm1hcCgobiwgaSkgPT4gaSA8IDMgPyBwYXJzZUludChuLCAxMCkgOiBuKTtcbiAgfSBlbHNlIGlmICh0eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIHZhbHVlc1sxXSA9IGAke3ZhbHVlc1sxXX0lYDtcbiAgICB2YWx1ZXNbMl0gPSBgJHt2YWx1ZXNbMl19JWA7XG4gIH1cbiAgaWYgKHR5cGUuaW5kZXhPZignY29sb3InKSAhPT0gLTEpIHtcbiAgICB2YWx1ZXMgPSBgJHtjb2xvclNwYWNlfSAke3ZhbHVlcy5qb2luKCcgJyl9YDtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZXMgPSBgJHt2YWx1ZXMuam9pbignLCAnKX1gO1xuICB9XG4gIHJldHVybiBgJHt0eXBlfSgke3ZhbHVlc30pYDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIHJnYiBmb3JtYXQgdG8gQ1NTIGhleCBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBSR0IgY29sb3IsIGkuZS4gcmdiKG4sIG4sIG4pXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nLCBpLmUuICNubm5ubm5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJnYlRvSGV4KGNvbG9yKSB7XG4gIC8vIElkZW1wb3RlbnRcbiAgaWYgKGNvbG9yLmluZGV4T2YoJyMnKSA9PT0gMCkge1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuICBjb25zdCB7XG4gICAgdmFsdWVzXG4gIH0gPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHJldHVybiBgIyR7dmFsdWVzLm1hcCgobiwgaSkgPT4gaW50VG9IZXgoaSA9PT0gMyA/IE1hdGgucm91bmQoMjU1ICogbikgOiBuKSkuam9pbignJyl9YDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gaHNsIGZvcm1hdCB0byByZ2IgZm9ybWF0LlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSFNMIGNvbG9yIHZhbHVlc1xuICogQHJldHVybnMge3N0cmluZ30gcmdiIGNvbG9yIHZhbHVlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gaHNsVG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvbnN0IHtcbiAgICB2YWx1ZXNcbiAgfSA9IGNvbG9yO1xuICBjb25zdCBoID0gdmFsdWVzWzBdO1xuICBjb25zdCBzID0gdmFsdWVzWzFdIC8gMTAwO1xuICBjb25zdCBsID0gdmFsdWVzWzJdIC8gMTAwO1xuICBjb25zdCBhID0gcyAqIE1hdGgubWluKGwsIDEgLSBsKTtcbiAgY29uc3QgZiA9IChuLCBrID0gKG4gKyBoIC8gMzApICUgMTIpID0+IGwgLSBhICogTWF0aC5tYXgoTWF0aC5taW4oayAtIDMsIDkgLSBrLCAxKSwgLTEpO1xuICBsZXQgdHlwZSA9ICdyZ2InO1xuICBjb25zdCByZ2IgPSBbTWF0aC5yb3VuZChmKDApICogMjU1KSwgTWF0aC5yb3VuZChmKDgpICogMjU1KSwgTWF0aC5yb3VuZChmKDQpICogMjU1KV07XG4gIGlmIChjb2xvci50eXBlID09PSAnaHNsYScpIHtcbiAgICB0eXBlICs9ICdhJztcbiAgICByZ2IucHVzaCh2YWx1ZXNbM10pO1xuICB9XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcih7XG4gICAgdHlwZSxcbiAgICB2YWx1ZXM6IHJnYlxuICB9KTtcbn1cbi8qKlxuICogVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgYW55IHBvaW50IGluIGEgY29sb3Igc3BhY2UsXG4gKiBub3JtYWxpemVkIHRvIDAgZm9yIGRhcmtlc3QgYmxhY2sgYW5kIDEgZm9yIGxpZ2h0ZXN0IHdoaXRlLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiB0aGUgY29sb3IgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMdW1pbmFuY2UoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGxldCByZ2IgPSBjb2xvci50eXBlID09PSAnaHNsJyB8fCBjb2xvci50eXBlID09PSAnaHNsYScgPyBkZWNvbXBvc2VDb2xvcihoc2xUb1JnYihjb2xvcikpLnZhbHVlcyA6IGNvbG9yLnZhbHVlcztcbiAgcmdiID0gcmdiLm1hcCh2YWwgPT4ge1xuICAgIGlmIChjb2xvci50eXBlICE9PSAnY29sb3InKSB7XG4gICAgICB2YWwgLz0gMjU1OyAvLyBub3JtYWxpemVkXG4gICAgfVxuICAgIHJldHVybiB2YWwgPD0gMC4wMzkyOCA/IHZhbCAvIDEyLjkyIDogKCh2YWwgKyAwLjA1NSkgLyAxLjA1NSkgKiogMi40O1xuICB9KTtcblxuICAvLyBUcnVuY2F0ZSBhdCAzIGRpZ2l0c1xuICByZXR1cm4gTnVtYmVyKCgwLjIxMjYgKiByZ2JbMF0gKyAwLjcxNTIgKiByZ2JbMV0gKyAwLjA3MjIgKiByZ2JbMl0pLnRvRml4ZWQoMykpO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbnRyYXN0IHJhdGlvIGJldHdlZW4gdHdvIGNvbG9ycy5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLVRFQ0hTL0cxNy5odG1sI0cxNy10ZXN0c1xuICogQHBhcmFtIHtzdHJpbmd9IGZvcmVncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFja2dyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgY29udHJhc3QgcmF0aW8gdmFsdWUgaW4gdGhlIHJhbmdlIDAgLSAyMS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRyYXN0UmF0aW8oZm9yZWdyb3VuZCwgYmFja2dyb3VuZCkge1xuICBjb25zdCBsdW1BID0gZ2V0THVtaW5hbmNlKGZvcmVncm91bmQpO1xuICBjb25zdCBsdW1CID0gZ2V0THVtaW5hbmNlKGJhY2tncm91bmQpO1xuICByZXR1cm4gKE1hdGgubWF4KGx1bUEsIGx1bUIpICsgMC4wNSkgLyAoTWF0aC5taW4obHVtQSwgbHVtQikgKyAwLjA1KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBhYnNvbHV0ZSB0cmFuc3BhcmVuY3kgb2YgYSBjb2xvci5cbiAqIEFueSBleGlzdGluZyBhbHBoYSB2YWx1ZXMgYXJlIG92ZXJ3cml0dGVuLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gdmFsdWUgdG8gc2V0IHRoZSBhbHBoYSBjaGFubmVsIHRvIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFscGhhKGNvbG9yLCB2YWx1ZSkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgdmFsdWUgPSBjbGFtcFdyYXBwZXIodmFsdWUpO1xuICBpZiAoY29sb3IudHlwZSA9PT0gJ3JnYicgfHwgY29sb3IudHlwZSA9PT0gJ2hzbCcpIHtcbiAgICBjb2xvci50eXBlICs9ICdhJztcbiAgfVxuICBpZiAoY29sb3IudHlwZSA9PT0gJ2NvbG9yJykge1xuICAgIGNvbG9yLnZhbHVlc1szXSA9IGAvJHt2YWx1ZX1gO1xuICB9IGVsc2Uge1xuICAgIGNvbG9yLnZhbHVlc1szXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJpdmF0ZV9zYWZlQWxwaGEoY29sb3IsIHZhbHVlLCB3YXJuaW5nKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGFscGhhKGNvbG9yLCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKHdhcm5pbmcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbn1cblxuLyoqXG4gKiBEYXJrZW5zIGEgY29sb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXBXcmFwcGVyKGNvZWZmaWNpZW50KTtcbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgY29sb3IudmFsdWVzWzJdICo9IDEgLSBjb2VmZmljaWVudDtcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSB8fCBjb2xvci50eXBlLmluZGV4T2YoJ2NvbG9yJykgIT09IC0xKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJpdmF0ZV9zYWZlRGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCwgd2FybmluZykge1xuICB0cnkge1xuICAgIHJldHVybiBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAod2FybmluZyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxufVxuXG4vKipcbiAqIExpZ2h0ZW5zIGEgY29sb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb2VmZmljaWVudCA9IGNsYW1wV3JhcHBlcihjb2VmZmljaWVudCk7XG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSArPSAoMTAwIC0gY29sb3IudmFsdWVzWzJdKSAqIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMjU1IC0gY29sb3IudmFsdWVzW2ldKSAqIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2NvbG9yJykgIT09IC0xKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMSAtIGNvbG9yLnZhbHVlc1tpXSkgKiBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcml2YXRlX3NhZmVMaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCwgd2FybmluZykge1xuICB0cnkge1xuICAgIHJldHVybiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKHdhcm5pbmcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbn1cblxuLyoqXG4gKiBEYXJrZW4gb3IgbGlnaHRlbiBhIGNvbG9yLCBkZXBlbmRpbmcgb24gaXRzIGx1bWluYW5jZS5cbiAqIExpZ2h0IGNvbG9ycyBhcmUgZGFya2VuZWQsIGRhcmsgY29sb3JzIGFyZSBsaWdodGVuZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQ9MC4xNSAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5leHBvcnQgZnVuY3Rpb24gZW1waGFzaXplKGNvbG9yLCBjb2VmZmljaWVudCA9IDAuMTUpIHtcbiAgcmV0dXJuIGdldEx1bWluYW5jZShjb2xvcikgPiAwLjUgPyBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSA6IGxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcml2YXRlX3NhZmVFbXBoYXNpemUoY29sb3IsIGNvZWZmaWNpZW50LCB3YXJuaW5nKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHByaXZhdGVfc2FmZUVtcGhhc2l6ZShjb2xvciwgY29lZmZpY2llbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICh3YXJuaW5nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59IiwiZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufVxuXG5leHBvcnQgeyBtZW1vaXplIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgcmVhY3RQcm9wc1JlZ2V4ID0gL14oKGNoaWxkcmVufGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfGtleXxyZWZ8YXV0b0ZvY3VzfGRlZmF1bHRWYWx1ZXxkZWZhdWx0Q2hlY2tlZHxpbm5lckhUTUx8c3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nfHN1cHByZXNzSHlkcmF0aW9uV2FybmluZ3x2YWx1ZUxpbmt8YWJicnxhY2NlcHR8YWNjZXB0Q2hhcnNldHxhY2Nlc3NLZXl8YWN0aW9ufGFsbG93fGFsbG93VXNlck1lZGlhfGFsbG93UGF5bWVudFJlcXVlc3R8YWxsb3dGdWxsU2NyZWVufGFsbG93VHJhbnNwYXJlbmN5fGFsdHxhc3luY3xhdXRvQ29tcGxldGV8YXV0b1BsYXl8Y2FwdHVyZXxjZWxsUGFkZGluZ3xjZWxsU3BhY2luZ3xjaGFsbGVuZ2V8Y2hhclNldHxjaGVja2VkfGNpdGV8Y2xhc3NJRHxjbGFzc05hbWV8Y29sc3xjb2xTcGFufGNvbnRlbnR8Y29udGVudEVkaXRhYmxlfGNvbnRleHRNZW51fGNvbnRyb2xzfGNvbnRyb2xzTGlzdHxjb29yZHN8Y3Jvc3NPcmlnaW58ZGF0YXxkYXRlVGltZXxkZWNvZGluZ3xkZWZhdWx0fGRlZmVyfGRpcnxkaXNhYmxlZHxkaXNhYmxlUGljdHVyZUluUGljdHVyZXxkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxlbnRlcktleUhpbnR8Zm9ybXxmb3JtQWN0aW9ufGZvcm1FbmNUeXBlfGZvcm1NZXRob2R8Zm9ybU5vVmFsaWRhdGV8Zm9ybVRhcmdldHxmcmFtZUJvcmRlcnxoZWFkZXJzfGhlaWdodHxoaWRkZW58aGlnaHxocmVmfGhyZWZMYW5nfGh0bWxGb3J8aHR0cEVxdWl2fGlkfGlucHV0TW9kZXxpbnRlZ3JpdHl8aXN8a2V5UGFyYW1zfGtleVR5cGV8a2luZHxsYWJlbHxsYW5nfGxpc3R8bG9hZGluZ3xsb29wfGxvd3xtYXJnaW5IZWlnaHR8bWFyZ2luV2lkdGh8bWF4fG1heExlbmd0aHxtZWRpYXxtZWRpYUdyb3VwfG1ldGhvZHxtaW58bWluTGVuZ3RofG11bHRpcGxlfG11dGVkfG5hbWV8bm9uY2V8bm9WYWxpZGF0ZXxvcGVufG9wdGltdW18cGF0dGVybnxwbGFjZWhvbGRlcnxwbGF5c0lubGluZXxwb3N0ZXJ8cHJlbG9hZHxwcm9maWxlfHJhZGlvR3JvdXB8cmVhZE9ubHl8cmVmZXJyZXJQb2xpY3l8cmVsfHJlcXVpcmVkfHJldmVyc2VkfHJvbGV8cm93c3xyb3dTcGFufHNhbmRib3h8c2NvcGV8c2NvcGVkfHNjcm9sbGluZ3xzZWFtbGVzc3xzZWxlY3RlZHxzaGFwZXxzaXplfHNpemVzfHNsb3R8c3BhbnxzcGVsbENoZWNrfHNyY3xzcmNEb2N8c3JjTGFuZ3xzcmNTZXR8c3RhcnR8c3RlcHxzdHlsZXxzdW1tYXJ5fHRhYkluZGV4fHRhcmdldHx0aXRsZXx0cmFuc2xhdGV8dHlwZXx1c2VNYXB8dmFsdWV8d2lkdGh8d21vZGV8d3JhcHxhYm91dHxkYXRhdHlwZXxpbmxpc3R8cHJlZml4fHByb3BlcnR5fHJlc291cmNlfHR5cGVvZnx2b2NhYnxhdXRvQ2FwaXRhbGl6ZXxhdXRvQ29ycmVjdHxhdXRvU2F2ZXxjb2xvcnxpbmNyZW1lbnRhbHxmYWxsYmFja3xpbmVydHxpdGVtUHJvcHxpdGVtU2NvcGV8aXRlbVR5cGV8aXRlbUlEfGl0ZW1SZWZ8b258b3B0aW9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGlzUHJvcFZhbGlkID0gLyogI19fUFVSRV9fICovbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgeyBpc1Byb3BWYWxpZCBhcyBkZWZhdWx0IH07XG4iLCIvKlxuXG5CYXNlZCBvZmYgZ2xhbW9yJ3MgU3R5bGVTaGVldCwgdGhhbmtzIFN1bmlsIOKdpO+4j1xuXG5oaWdoIHBlcmZvcm1hbmNlIFN0eWxlU2hlZXQgZm9yIGNzcy1pbi1qcyBzeXN0ZW1zXG5cbi0gdXNlcyBtdWx0aXBsZSBzdHlsZSB0YWdzIGJlaGluZCB0aGUgc2NlbmVzIGZvciBtaWxsaW9ucyBvZiBydWxlc1xuLSB1c2VzIGBpbnNlcnRSdWxlYCBmb3IgYXBwZW5kaW5nIGluIHByb2R1Y3Rpb24gZm9yICptdWNoKiBmYXN0ZXIgcGVyZm9ybWFuY2VcblxuLy8gdXNhZ2VcblxuaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ0BlbW90aW9uL3NoZWV0J1xuXG5sZXQgc3R5bGVTaGVldCA9IG5ldyBTdHlsZVNoZWV0KHsga2V5OiAnJywgY29udGFpbmVyOiBkb2N1bWVudC5oZWFkIH0pXG5cbnN0eWxlU2hlZXQuaW5zZXJ0KCcjYm94IHsgYm9yZGVyOiAxcHggc29saWQgcmVkOyB9Jylcbi0gYXBwZW5kcyBhIGNzcyBydWxlIGludG8gdGhlIHN0eWxlc2hlZXRcblxuc3R5bGVTaGVldC5mbHVzaCgpXG4tIGVtcHRpZXMgdGhlIHN0eWxlc2hlZXQgb2YgYWxsIGl0cyBjb250ZW50c1xuXG4qL1xuLy8gJEZsb3dGaXhNZVxuZnVuY3Rpb24gc2hlZXRGb3JUYWcodGFnKSB7XG4gIGlmICh0YWcuc2hlZXQpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgcmV0dXJuIHRhZy5zaGVldDtcbiAgfSAvLyB0aGlzIHdlaXJkbmVzcyBicm91Z2h0IHRvIHlvdSBieSBmaXJlZm94XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZG9jdW1lbnQuc3R5bGVTaGVldHNbaV0ub3duZXJOb2RlID09PSB0YWcpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHJldHVybiBkb2N1bWVudC5zdHlsZVNoZWV0c1tpXTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHRhZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicsIG9wdGlvbnMua2V5KTtcblxuICBpZiAob3B0aW9ucy5ub25jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGFnLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBvcHRpb25zLm5vbmNlKTtcbiAgfVxuXG4gIHRhZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJykpO1xuICB0YWcuc2V0QXR0cmlidXRlKCdkYXRhLXMnLCAnJyk7XG4gIHJldHVybiB0YWc7XG59XG5cbnZhciBTdHlsZVNoZWV0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLy8gVXNpbmcgTm9kZSBpbnN0ZWFkIG9mIEhUTUxFbGVtZW50IHNpbmNlIGNvbnRhaW5lciBtYXkgYmUgYSBTaGFkb3dSb290XG4gIGZ1bmN0aW9uIFN0eWxlU2hlZXQob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLl9pbnNlcnRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gICAgICB2YXIgYmVmb3JlO1xuXG4gICAgICBpZiAoX3RoaXMudGFncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKF90aGlzLmluc2VydGlvblBvaW50KSB7XG4gICAgICAgICAgYmVmb3JlID0gX3RoaXMuaW5zZXJ0aW9uUG9pbnQubmV4dFNpYmxpbmc7XG4gICAgICAgIH0gZWxzZSBpZiAoX3RoaXMucHJlcGVuZCkge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmNvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmJlZm9yZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmVmb3JlID0gX3RoaXMudGFnc1tfdGhpcy50YWdzLmxlbmd0aCAtIDFdLm5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5jb250YWluZXIuaW5zZXJ0QmVmb3JlKHRhZywgYmVmb3JlKTtcblxuICAgICAgX3RoaXMudGFncy5wdXNoKHRhZyk7XG4gICAgfTtcblxuICAgIHRoaXMuaXNTcGVlZHkgPSBvcHRpb25zLnNwZWVkeSA9PT0gdW5kZWZpbmVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA6IG9wdGlvbnMuc3BlZWR5O1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY3RyID0gMDtcbiAgICB0aGlzLm5vbmNlID0gb3B0aW9ucy5ub25jZTsgLy8ga2V5IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZSwgaXQncyB1c2VkIHRvIGlkZW50aWZ5IGRpZmZlcmVudCBzaGVldHNcblxuICAgIHRoaXMua2V5ID0gb3B0aW9ucy5rZXk7XG4gICAgdGhpcy5jb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjtcbiAgICB0aGlzLnByZXBlbmQgPSBvcHRpb25zLnByZXBlbmQ7XG4gICAgdGhpcy5pbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG4gICAgdGhpcy5iZWZvcmUgPSBudWxsO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5oeWRyYXRlID0gZnVuY3Rpb24gaHlkcmF0ZShub2Rlcykge1xuICAgIG5vZGVzLmZvckVhY2godGhpcy5faW5zZXJ0VGFnKTtcbiAgfTtcblxuICBfcHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcbiAgICAvLyB0aGUgbWF4IGxlbmd0aCBpcyBob3cgbWFueSBydWxlcyB3ZSBoYXZlIHBlciBzdHlsZSB0YWcsIGl0J3MgNjUwMDAgaW4gc3BlZWR5IG1vZGVcbiAgICAvLyBpdCdzIDEgaW4gZGV2IGJlY2F1c2Ugd2UgaW5zZXJ0IHNvdXJjZSBtYXBzIHRoYXQgbWFwIGEgc2luZ2xlIHJ1bGUgdG8gYSBsb2NhdGlvblxuICAgIC8vIGFuZCB5b3UgY2FuIG9ubHkgaGF2ZSBvbmUgc291cmNlIG1hcCBwZXIgc3R5bGUgdGFnXG4gICAgaWYgKHRoaXMuY3RyICUgKHRoaXMuaXNTcGVlZHkgPyA2NTAwMCA6IDEpID09PSAwKSB7XG4gICAgICB0aGlzLl9pbnNlcnRUYWcoY3JlYXRlU3R5bGVFbGVtZW50KHRoaXMpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFnID0gdGhpcy50YWdzW3RoaXMudGFncy5sZW5ndGggLSAxXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaXNJbXBvcnRSdWxlID0gcnVsZS5jaGFyQ29kZUF0KDApID09PSA2NCAmJiBydWxlLmNoYXJDb2RlQXQoMSkgPT09IDEwNTtcblxuICAgICAgaWYgKGlzSW1wb3J0UnVsZSAmJiB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSkge1xuICAgICAgICAvLyB0aGlzIHdvdWxkIG9ubHkgY2F1c2UgcHJvYmxlbSBpbiBzcGVlZHkgbW9kZVxuICAgICAgICAvLyBidXQgd2UgZG9uJ3Qgd2FudCBlbmFibGluZyBzcGVlZHkgdG8gYWZmZWN0IHRoZSBvYnNlcnZhYmxlIGJlaGF2aW9yXG4gICAgICAgIC8vIHNvIHdlIHJlcG9ydCB0aGlzIGVycm9yIGF0IGFsbCB0aW1lc1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiWW91J3JlIGF0dGVtcHRpbmcgdG8gaW5zZXJ0IHRoZSBmb2xsb3dpbmcgcnVsZTpcXG5cIiArIHJ1bGUgKyAnXFxuXFxuYEBpbXBvcnRgIHJ1bGVzIG11c3QgYmUgYmVmb3JlIGFsbCBvdGhlciB0eXBlcyBvZiBydWxlcyBpbiBhIHN0eWxlc2hlZXQgYnV0IG90aGVyIHJ1bGVzIGhhdmUgYWxyZWFkeSBiZWVuIGluc2VydGVkLiBQbGVhc2UgZW5zdXJlIHRoYXQgYEBpbXBvcnRgIHJ1bGVzIGFyZSBiZWZvcmUgYWxsIG90aGVyIHJ1bGVzLicpO1xuICAgICAgfVxuICAgICAgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgPSB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSB8fCAhaXNJbXBvcnRSdWxlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzU3BlZWR5KSB7XG4gICAgICB2YXIgc2hlZXQgPSBzaGVldEZvclRhZyh0YWcpO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSB1bHRyYWZhc3QgdmVyc2lvbiwgd29ya3MgYWNyb3NzIGJyb3dzZXJzXG4gICAgICAgIC8vIHRoZSBiaWcgZHJhd2JhY2sgaXMgdGhhdCB0aGUgY3NzIHdvbid0IGJlIGVkaXRhYmxlIGluIGRldnRvb2xzXG4gICAgICAgIHNoZWV0Lmluc2VydFJ1bGUocnVsZSwgc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIS86KC1tb3otcGxhY2Vob2xkZXJ8LW1vei1mb2N1cy1pbm5lcnwtbW96LWZvY3VzcmluZ3wtbXMtaW5wdXQtcGxhY2Vob2xkZXJ8LW1vei1yZWFkLXdyaXRlfC1tb3otcmVhZC1vbmx5fC1tcy1jbGVhcnwtbXMtZXhwYW5kfC1tcy1yZXZlYWwpey8udGVzdChydWxlKSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGVyZSB3YXMgYSBwcm9ibGVtIGluc2VydGluZyB0aGUgZm9sbG93aW5nIHJ1bGU6IFxcXCJcIiArIHJ1bGUgKyBcIlxcXCJcIiwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGUpKTtcbiAgICB9XG5cbiAgICB0aGlzLmN0cisrO1xuICB9O1xuXG4gIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICB0aGlzLnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICByZXR1cm4gdGFnLnBhcmVudE5vZGUgJiYgdGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFnKTtcbiAgICB9KTtcbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLmN0ciA9IDA7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbmV4cG9ydCB7IFN0eWxlU2hlZXQgfTtcbiIsIi8qKlxuICogQHBhcmFtIHtudW1iZXJ9XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCB2YXIgYWJzID0gTWF0aC5hYnNcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn1cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IHZhciBmcm9tID0gU3RyaW5nLmZyb21DaGFyQ29kZVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgdmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ25cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc2ggKHZhbHVlLCBsZW5ndGgpIHtcblx0cmV0dXJuIGNoYXJhdCh2YWx1ZSwgMCkgXiA0NSA/ICgoKCgoKChsZW5ndGggPDwgMikgXiBjaGFyYXQodmFsdWUsIDApKSA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMSkpIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAyKSkgPDwgMikgXiBjaGFyYXQodmFsdWUsIDMpIDogMFxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJpbSAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLnRyaW0oKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtSZWdFeHB9IHBhdHRlcm5cbiAqIEByZXR1cm4ge3N0cmluZz99XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaCAodmFsdWUsIHBhdHRlcm4pIHtcblx0cmV0dXJuICh2YWx1ZSA9IHBhdHRlcm4uZXhlYyh2YWx1ZSkpID8gdmFsdWVbMF0gOiB2YWx1ZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHsoc3RyaW5nfFJlZ0V4cCl9IHBhdHRlcm5cbiAqIEBwYXJhbSB7c3RyaW5nfSByZXBsYWNlbWVudFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZSAodmFsdWUsIHBhdHRlcm4sIHJlcGxhY2VtZW50KSB7XG5cdHJldHVybiB2YWx1ZS5yZXBsYWNlKHBhdHRlcm4sIHJlcGxhY2VtZW50KVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IHNlYXJjaFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhvZiAodmFsdWUsIHNlYXJjaCkge1xuXHRyZXR1cm4gdmFsdWUuaW5kZXhPZihzZWFyY2gpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYXJhdCAodmFsdWUsIGluZGV4KSB7XG5cdHJldHVybiB2YWx1ZS5jaGFyQ29kZUF0KGluZGV4KSB8IDBcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWdpblxuICogQHBhcmFtIHtudW1iZXJ9IGVuZFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3Vic3RyICh2YWx1ZSwgYmVnaW4sIGVuZCkge1xuXHRyZXR1cm4gdmFsdWUuc2xpY2UoYmVnaW4sIGVuZClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmxlbiAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLmxlbmd0aFxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55W119IHZhbHVlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaXplb2YgKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS5sZW5ndGhcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEBwYXJhbSB7YW55W119IGFycmF5XG4gKiBAcmV0dXJuIHthbnl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmQgKHZhbHVlLCBhcnJheSkge1xuXHRyZXR1cm4gYXJyYXkucHVzaCh2YWx1ZSksIHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gYXJyYXlcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lIChhcnJheSwgY2FsbGJhY2spIHtcblx0cmV0dXJuIGFycmF5Lm1hcChjYWxsYmFjaykuam9pbignJylcbn1cbiIsImltcG9ydCB7ZnJvbSwgdHJpbSwgY2hhcmF0LCBzdHJsZW4sIHN1YnN0ciwgYXBwZW5kLCBhc3NpZ259IGZyb20gJy4vVXRpbGl0eS5qcydcblxuZXhwb3J0IHZhciBsaW5lID0gMVxuZXhwb3J0IHZhciBjb2x1bW4gPSAxXG5leHBvcnQgdmFyIGxlbmd0aCA9IDBcbmV4cG9ydCB2YXIgcG9zaXRpb24gPSAwXG5leHBvcnQgdmFyIGNoYXJhY3RlciA9IDBcbmV4cG9ydCB2YXIgY2hhcmFjdGVycyA9ICcnXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdCB8IG51bGx9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0IHwgbnVsbH0gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmdbXSB8IHN0cmluZ30gcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0W10gfCBzdHJpbmd9IGNoaWxkcmVuXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub2RlICh2YWx1ZSwgcm9vdCwgcGFyZW50LCB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aCkge1xuXHRyZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgcm9vdDogcm9vdCwgcGFyZW50OiBwYXJlbnQsIHR5cGU6IHR5cGUsIHByb3BzOiBwcm9wcywgY2hpbGRyZW46IGNoaWxkcmVuLCBsaW5lOiBsaW5lLCBjb2x1bW46IGNvbHVtbiwgbGVuZ3RoOiBsZW5ndGgsIHJldHVybjogJyd9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29weSAocm9vdCwgcHJvcHMpIHtcblx0cmV0dXJuIGFzc2lnbihub2RlKCcnLCBudWxsLCBudWxsLCAnJywgbnVsbCwgbnVsbCwgMCksIHJvb3QsIHtsZW5ndGg6IC1yb290Lmxlbmd0aH0sIHByb3BzKVxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYXIgKCkge1xuXHRyZXR1cm4gY2hhcmFjdGVyXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJldiAoKSB7XG5cdGNoYXJhY3RlciA9IHBvc2l0aW9uID4gMCA/IGNoYXJhdChjaGFyYWN0ZXJzLCAtLXBvc2l0aW9uKSA6IDBcblxuXHRpZiAoY29sdW1uLS0sIGNoYXJhY3RlciA9PT0gMTApXG5cdFx0Y29sdW1uID0gMSwgbGluZS0tXG5cblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5leHQgKCkge1xuXHRjaGFyYWN0ZXIgPSBwb3NpdGlvbiA8IGxlbmd0aCA/IGNoYXJhdChjaGFyYWN0ZXJzLCBwb3NpdGlvbisrKSA6IDBcblxuXHRpZiAoY29sdW1uKyssIGNoYXJhY3RlciA9PT0gMTApXG5cdFx0Y29sdW1uID0gMSwgbGluZSsrXG5cblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBlZWsgKCkge1xuXHRyZXR1cm4gY2hhcmF0KGNoYXJhY3RlcnMsIHBvc2l0aW9uKVxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhcmV0ICgpIHtcblx0cmV0dXJuIHBvc2l0aW9uXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbGljZSAoYmVnaW4sIGVuZCkge1xuXHRyZXR1cm4gc3Vic3RyKGNoYXJhY3RlcnMsIGJlZ2luLCBlbmQpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuICh0eXBlKSB7XG5cdHN3aXRjaCAodHlwZSkge1xuXHRcdC8vIFxcMCBcXHQgXFxuIFxcciBcXHMgd2hpdGVzcGFjZSB0b2tlblxuXHRcdGNhc2UgMDogY2FzZSA5OiBjYXNlIDEwOiBjYXNlIDEzOiBjYXNlIDMyOlxuXHRcdFx0cmV0dXJuIDVcblx0XHQvLyAhICsgLCAvID4gQCB+IGlzb2xhdGUgdG9rZW5cblx0XHRjYXNlIDMzOiBjYXNlIDQzOiBjYXNlIDQ0OiBjYXNlIDQ3OiBjYXNlIDYyOiBjYXNlIDY0OiBjYXNlIDEyNjpcblx0XHQvLyA7IHsgfSBicmVha3BvaW50IHRva2VuXG5cdFx0Y2FzZSA1OTogY2FzZSAxMjM6IGNhc2UgMTI1OlxuXHRcdFx0cmV0dXJuIDRcblx0XHQvLyA6IGFjY29tcGFuaWVkIHRva2VuXG5cdFx0Y2FzZSA1ODpcblx0XHRcdHJldHVybiAzXG5cdFx0Ly8gXCIgJyAoIFsgb3BlbmluZyBkZWxpbWl0IHRva2VuXG5cdFx0Y2FzZSAzNDogY2FzZSAzOTogY2FzZSA0MDogY2FzZSA5MTpcblx0XHRcdHJldHVybiAyXG5cdFx0Ly8gKSBdIGNsb3NpbmcgZGVsaW1pdCB0b2tlblxuXHRcdGNhc2UgNDE6IGNhc2UgOTM6XG5cdFx0XHRyZXR1cm4gMVxuXHR9XG5cblx0cmV0dXJuIDBcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge2FueVtdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYWxsb2MgKHZhbHVlKSB7XG5cdHJldHVybiBsaW5lID0gY29sdW1uID0gMSwgbGVuZ3RoID0gc3RybGVuKGNoYXJhY3RlcnMgPSB2YWx1ZSksIHBvc2l0aW9uID0gMCwgW11cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEByZXR1cm4ge2FueX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlYWxsb2MgKHZhbHVlKSB7XG5cdHJldHVybiBjaGFyYWN0ZXJzID0gJycsIHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGltaXQgKHR5cGUpIHtcblx0cmV0dXJuIHRyaW0oc2xpY2UocG9zaXRpb24gLSAxLCBkZWxpbWl0ZXIodHlwZSA9PT0gOTEgPyB0eXBlICsgMiA6IHR5cGUgPT09IDQwID8gdHlwZSArIDEgOiB0eXBlKSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmdbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuaXplICh2YWx1ZSkge1xuXHRyZXR1cm4gZGVhbGxvYyh0b2tlbml6ZXIoYWxsb2ModmFsdWUpKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gd2hpdGVzcGFjZSAodHlwZSkge1xuXHR3aGlsZSAoY2hhcmFjdGVyID0gcGVlaygpKVxuXHRcdGlmIChjaGFyYWN0ZXIgPCAzMylcblx0XHRcdG5leHQoKVxuXHRcdGVsc2Vcblx0XHRcdGJyZWFrXG5cblx0cmV0dXJuIHRva2VuKHR5cGUpID4gMiB8fCB0b2tlbihjaGFyYWN0ZXIpID4gMyA/ICcnIDogJyAnXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gY2hpbGRyZW5cbiAqIEByZXR1cm4ge3N0cmluZ1tdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW5pemVyIChjaGlsZHJlbikge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdHN3aXRjaCAodG9rZW4oY2hhcmFjdGVyKSkge1xuXHRcdFx0Y2FzZSAwOiBhcHBlbmQoaWRlbnRpZmllcihwb3NpdGlvbiAtIDEpLCBjaGlsZHJlbilcblx0XHRcdFx0YnJlYWtcblx0XHRcdGNhc2UgMjogYXBwZW5kKGRlbGltaXQoY2hhcmFjdGVyKSwgY2hpbGRyZW4pXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRkZWZhdWx0OiBhcHBlbmQoZnJvbShjaGFyYWN0ZXIpLCBjaGlsZHJlbilcblx0XHR9XG5cblx0cmV0dXJuIGNoaWxkcmVuXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gY291bnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwaW5nIChpbmRleCwgY291bnQpIHtcblx0d2hpbGUgKC0tY291bnQgJiYgbmV4dCgpKVxuXHRcdC8vIG5vdCAwLTkgQS1GIGEtZlxuXHRcdGlmIChjaGFyYWN0ZXIgPCA0OCB8fCBjaGFyYWN0ZXIgPiAxMDIgfHwgKGNoYXJhY3RlciA+IDU3ICYmIGNoYXJhY3RlciA8IDY1KSB8fCAoY2hhcmFjdGVyID4gNzAgJiYgY2hhcmFjdGVyIDwgOTcpKVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gc2xpY2UoaW5kZXgsIGNhcmV0KCkgKyAoY291bnQgPCA2ICYmIHBlZWsoKSA9PSAzMiAmJiBuZXh0KCkgPT0gMzIpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWxpbWl0ZXIgKHR5cGUpIHtcblx0d2hpbGUgKG5leHQoKSlcblx0XHRzd2l0Y2ggKGNoYXJhY3Rlcikge1xuXHRcdFx0Ly8gXSApIFwiICdcblx0XHRcdGNhc2UgdHlwZTpcblx0XHRcdFx0cmV0dXJuIHBvc2l0aW9uXG5cdFx0XHQvLyBcIiAnXG5cdFx0XHRjYXNlIDM0OiBjYXNlIDM5OlxuXHRcdFx0XHRpZiAodHlwZSAhPT0gMzQgJiYgdHlwZSAhPT0gMzkpXG5cdFx0XHRcdFx0ZGVsaW1pdGVyKGNoYXJhY3Rlcilcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIChcblx0XHRcdGNhc2UgNDA6XG5cdFx0XHRcdGlmICh0eXBlID09PSA0MSlcblx0XHRcdFx0XHRkZWxpbWl0ZXIodHlwZSlcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIFxcXG5cdFx0XHRjYXNlIDkyOlxuXHRcdFx0XHRuZXh0KClcblx0XHRcdFx0YnJlYWtcblx0XHR9XG5cblx0cmV0dXJuIHBvc2l0aW9uXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWVudGVyICh0eXBlLCBpbmRleCkge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdC8vIC8vXG5cdFx0aWYgKHR5cGUgKyBjaGFyYWN0ZXIgPT09IDQ3ICsgMTApXG5cdFx0XHRicmVha1xuXHRcdC8vIC8qXG5cdFx0ZWxzZSBpZiAodHlwZSArIGNoYXJhY3RlciA9PT0gNDIgKyA0MiAmJiBwZWVrKCkgPT09IDQ3KVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gJy8qJyArIHNsaWNlKGluZGV4LCBwb3NpdGlvbiAtIDEpICsgJyonICsgZnJvbSh0eXBlID09PSA0NyA/IHR5cGUgOiBuZXh0KCkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGlmaWVyIChpbmRleCkge1xuXHR3aGlsZSAoIXRva2VuKHBlZWsoKSkpXG5cdFx0bmV4dCgpXG5cblx0cmV0dXJuIHNsaWNlKGluZGV4LCBwb3NpdGlvbilcbn1cbiIsImV4cG9ydCB2YXIgTVMgPSAnLW1zLSdcbmV4cG9ydCB2YXIgTU9aID0gJy1tb3otJ1xuZXhwb3J0IHZhciBXRUJLSVQgPSAnLXdlYmtpdC0nXG5cbmV4cG9ydCB2YXIgQ09NTUVOVCA9ICdjb21tJ1xuZXhwb3J0IHZhciBSVUxFU0VUID0gJ3J1bGUnXG5leHBvcnQgdmFyIERFQ0xBUkFUSU9OID0gJ2RlY2wnXG5cbmV4cG9ydCB2YXIgUEFHRSA9ICdAcGFnZSdcbmV4cG9ydCB2YXIgTUVESUEgPSAnQG1lZGlhJ1xuZXhwb3J0IHZhciBJTVBPUlQgPSAnQGltcG9ydCdcbmV4cG9ydCB2YXIgQ0hBUlNFVCA9ICdAY2hhcnNldCdcbmV4cG9ydCB2YXIgVklFV1BPUlQgPSAnQHZpZXdwb3J0J1xuZXhwb3J0IHZhciBTVVBQT1JUUyA9ICdAc3VwcG9ydHMnXG5leHBvcnQgdmFyIERPQ1VNRU5UID0gJ0Bkb2N1bWVudCdcbmV4cG9ydCB2YXIgTkFNRVNQQUNFID0gJ0BuYW1lc3BhY2UnXG5leHBvcnQgdmFyIEtFWUZSQU1FUyA9ICdAa2V5ZnJhbWVzJ1xuZXhwb3J0IHZhciBGT05UX0ZBQ0UgPSAnQGZvbnQtZmFjZSdcbmV4cG9ydCB2YXIgQ09VTlRFUl9TVFlMRSA9ICdAY291bnRlci1zdHlsZSdcbmV4cG9ydCB2YXIgRk9OVF9GRUFUVVJFX1ZBTFVFUyA9ICdAZm9udC1mZWF0dXJlLXZhbHVlcydcbmV4cG9ydCB2YXIgTEFZRVIgPSAnQGxheWVyJ1xuIiwiaW1wb3J0IHtJTVBPUlQsIExBWUVSLCBDT01NRU5ULCBSVUxFU0VULCBERUNMQVJBVElPTiwgS0VZRlJBTUVTfSBmcm9tICcuL0VudW0uanMnXG5pbXBvcnQge3N0cmxlbiwgc2l6ZW9mfSBmcm9tICcuL1V0aWxpdHkuanMnXG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemUgKGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHR2YXIgb3V0cHV0ID0gJydcblx0dmFyIGxlbmd0aCA9IHNpemVvZihjaGlsZHJlbilcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuXHRcdG91dHB1dCArPSBjYWxsYmFjayhjaGlsZHJlbltpXSwgaSwgY2hpbGRyZW4sIGNhbGxiYWNrKSB8fCAnJ1xuXG5cdHJldHVybiBvdXRwdXRcbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeSAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdGNhc2UgTEFZRVI6IGlmIChlbGVtZW50LmNoaWxkcmVuLmxlbmd0aCkgYnJlYWtcblx0XHRjYXNlIElNUE9SVDogY2FzZSBERUNMQVJBVElPTjogcmV0dXJuIGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC5yZXR1cm4gfHwgZWxlbWVudC52YWx1ZVxuXHRcdGNhc2UgQ09NTUVOVDogcmV0dXJuICcnXG5cdFx0Y2FzZSBLRVlGUkFNRVM6IHJldHVybiBlbGVtZW50LnJldHVybiA9IGVsZW1lbnQudmFsdWUgKyAneycgKyBzZXJpYWxpemUoZWxlbWVudC5jaGlsZHJlbiwgY2FsbGJhY2spICsgJ30nXG5cdFx0Y2FzZSBSVUxFU0VUOiBlbGVtZW50LnZhbHVlID0gZWxlbWVudC5wcm9wcy5qb2luKCcsJylcblx0fVxuXG5cdHJldHVybiBzdHJsZW4oY2hpbGRyZW4gPSBzZXJpYWxpemUoZWxlbWVudC5jaGlsZHJlbiwgY2FsbGJhY2spKSA/IGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC52YWx1ZSArICd7JyArIGNoaWxkcmVuICsgJ30nIDogJydcbn1cbiIsImltcG9ydCB7Q09NTUVOVCwgUlVMRVNFVCwgREVDTEFSQVRJT059IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7YWJzLCBjaGFyYXQsIHRyaW0sIGZyb20sIHNpemVvZiwgc3RybGVuLCBzdWJzdHIsIGFwcGVuZCwgcmVwbGFjZSwgaW5kZXhvZn0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuaW1wb3J0IHtub2RlLCBjaGFyLCBwcmV2LCBuZXh0LCBwZWVrLCBjYXJldCwgYWxsb2MsIGRlYWxsb2MsIGRlbGltaXQsIHdoaXRlc3BhY2UsIGVzY2FwaW5nLCBpZGVudGlmaWVyLCBjb21tZW50ZXJ9IGZyb20gJy4vVG9rZW5pemVyLmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7b2JqZWN0W119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlICh2YWx1ZSkge1xuXHRyZXR1cm4gZGVhbGxvYyhwYXJzZSgnJywgbnVsbCwgbnVsbCwgbnVsbCwgWycnXSwgdmFsdWUgPSBhbGxvYyh2YWx1ZSksIDAsIFswXSwgdmFsdWUpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc1xuICogQHBhcmFtIHtzdHJpbmdbXX0gcnVsZXNldHNcbiAqIEBwYXJhbSB7bnVtYmVyW119IHBzZXVkb1xuICogQHBhcmFtIHtudW1iZXJbXX0gcG9pbnRzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBkZWNsYXJhdGlvbnNcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlICh2YWx1ZSwgcm9vdCwgcGFyZW50LCBydWxlLCBydWxlcywgcnVsZXNldHMsIHBzZXVkbywgcG9pbnRzLCBkZWNsYXJhdGlvbnMpIHtcblx0dmFyIGluZGV4ID0gMFxuXHR2YXIgb2Zmc2V0ID0gMFxuXHR2YXIgbGVuZ3RoID0gcHNldWRvXG5cdHZhciBhdHJ1bGUgPSAwXG5cdHZhciBwcm9wZXJ0eSA9IDBcblx0dmFyIHByZXZpb3VzID0gMFxuXHR2YXIgdmFyaWFibGUgPSAxXG5cdHZhciBzY2FubmluZyA9IDFcblx0dmFyIGFtcGVyc2FuZCA9IDFcblx0dmFyIGNoYXJhY3RlciA9IDBcblx0dmFyIHR5cGUgPSAnJ1xuXHR2YXIgcHJvcHMgPSBydWxlc1xuXHR2YXIgY2hpbGRyZW4gPSBydWxlc2V0c1xuXHR2YXIgcmVmZXJlbmNlID0gcnVsZVxuXHR2YXIgY2hhcmFjdGVycyA9IHR5cGVcblxuXHR3aGlsZSAoc2Nhbm5pbmcpXG5cdFx0c3dpdGNoIChwcmV2aW91cyA9IGNoYXJhY3RlciwgY2hhcmFjdGVyID0gbmV4dCgpKSB7XG5cdFx0XHQvLyAoXG5cdFx0XHRjYXNlIDQwOlxuXHRcdFx0XHRpZiAocHJldmlvdXMgIT0gMTA4ICYmIGNoYXJhdChjaGFyYWN0ZXJzLCBsZW5ndGggLSAxKSA9PSA1OCkge1xuXHRcdFx0XHRcdGlmIChpbmRleG9mKGNoYXJhY3RlcnMgKz0gcmVwbGFjZShkZWxpbWl0KGNoYXJhY3RlciksICcmJywgJyZcXGYnKSwgJyZcXGYnKSAhPSAtMSlcblx0XHRcdFx0XHRcdGFtcGVyc2FuZCA9IC0xXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0fVxuXHRcdFx0Ly8gXCIgJyBbXG5cdFx0XHRjYXNlIDM0OiBjYXNlIDM5OiBjYXNlIDkxOlxuXHRcdFx0XHRjaGFyYWN0ZXJzICs9IGRlbGltaXQoY2hhcmFjdGVyKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFx0IFxcbiBcXHIgXFxzXG5cdFx0XHRjYXNlIDk6IGNhc2UgMTA6IGNhc2UgMTM6IGNhc2UgMzI6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gd2hpdGVzcGFjZShwcmV2aW91cylcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIFxcXG5cdFx0XHRjYXNlIDkyOlxuXHRcdFx0XHRjaGFyYWN0ZXJzICs9IGVzY2FwaW5nKGNhcmV0KCkgLSAxLCA3KVxuXHRcdFx0XHRjb250aW51ZVxuXHRcdFx0Ly8gL1xuXHRcdFx0Y2FzZSA0Nzpcblx0XHRcdFx0c3dpdGNoIChwZWVrKCkpIHtcblx0XHRcdFx0XHRjYXNlIDQyOiBjYXNlIDQ3OlxuXHRcdFx0XHRcdFx0YXBwZW5kKGNvbW1lbnQoY29tbWVudGVyKG5leHQoKSwgY2FyZXQoKSksIHJvb3QsIHBhcmVudCksIGRlY2xhcmF0aW9ucylcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGNoYXJhY3RlcnMgKz0gJy8nXG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIHtcblx0XHRcdGNhc2UgMTIzICogdmFyaWFibGU6XG5cdFx0XHRcdHBvaW50c1tpbmRleCsrXSA9IHN0cmxlbihjaGFyYWN0ZXJzKSAqIGFtcGVyc2FuZFxuXHRcdFx0Ly8gfSA7IFxcMFxuXHRcdFx0Y2FzZSAxMjUgKiB2YXJpYWJsZTogY2FzZSA1OTogY2FzZSAwOlxuXHRcdFx0XHRzd2l0Y2ggKGNoYXJhY3Rlcikge1xuXHRcdFx0XHRcdC8vIFxcMCB9XG5cdFx0XHRcdFx0Y2FzZSAwOiBjYXNlIDEyNTogc2Nhbm5pbmcgPSAwXG5cdFx0XHRcdFx0Ly8gO1xuXHRcdFx0XHRcdGNhc2UgNTkgKyBvZmZzZXQ6IGlmIChhbXBlcnNhbmQgPT0gLTEpIGNoYXJhY3RlcnMgPSByZXBsYWNlKGNoYXJhY3RlcnMsIC9cXGYvZywgJycpXG5cdFx0XHRcdFx0XHRpZiAocHJvcGVydHkgPiAwICYmIChzdHJsZW4oY2hhcmFjdGVycykgLSBsZW5ndGgpKVxuXHRcdFx0XHRcdFx0XHRhcHBlbmQocHJvcGVydHkgPiAzMiA/IGRlY2xhcmF0aW9uKGNoYXJhY3RlcnMgKyAnOycsIHJ1bGUsIHBhcmVudCwgbGVuZ3RoIC0gMSkgOiBkZWNsYXJhdGlvbihyZXBsYWNlKGNoYXJhY3RlcnMsICcgJywgJycpICsgJzsnLCBydWxlLCBwYXJlbnQsIGxlbmd0aCAtIDIpLCBkZWNsYXJhdGlvbnMpXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vIEAgO1xuXHRcdFx0XHRcdGNhc2UgNTk6IGNoYXJhY3RlcnMgKz0gJzsnXG5cdFx0XHRcdFx0Ly8geyBydWxlL2F0LXJ1bGVcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0YXBwZW5kKHJlZmVyZW5jZSA9IHJ1bGVzZXQoY2hhcmFjdGVycywgcm9vdCwgcGFyZW50LCBpbmRleCwgb2Zmc2V0LCBydWxlcywgcG9pbnRzLCB0eXBlLCBwcm9wcyA9IFtdLCBjaGlsZHJlbiA9IFtdLCBsZW5ndGgpLCBydWxlc2V0cylcblxuXHRcdFx0XHRcdFx0aWYgKGNoYXJhY3RlciA9PT0gMTIzKVxuXHRcdFx0XHRcdFx0XHRpZiAob2Zmc2V0ID09PSAwKVxuXHRcdFx0XHRcdFx0XHRcdHBhcnNlKGNoYXJhY3RlcnMsIHJvb3QsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBwcm9wcywgcnVsZXNldHMsIGxlbmd0aCwgcG9pbnRzLCBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0XHRcdHN3aXRjaCAoYXRydWxlID09PSA5OSAmJiBjaGFyYXQoY2hhcmFjdGVycywgMykgPT09IDExMCA/IDEwMCA6IGF0cnVsZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gZCBsIG0gc1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSAxMDA6IGNhc2UgMTA4OiBjYXNlIDEwOTogY2FzZSAxMTU6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBhcnNlKHZhbHVlLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgcnVsZSAmJiBhcHBlbmQocnVsZXNldCh2YWx1ZSwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIDAsIDAsIHJ1bGVzLCBwb2ludHMsIHR5cGUsIHJ1bGVzLCBwcm9wcyA9IFtdLCBsZW5ndGgpLCBjaGlsZHJlbiksIHJ1bGVzLCBjaGlsZHJlbiwgbGVuZ3RoLCBwb2ludHMsIHJ1bGUgPyBwcm9wcyA6IGNoaWxkcmVuKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0cGFyc2UoY2hhcmFjdGVycywgcmVmZXJlbmNlLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgWycnXSwgY2hpbGRyZW4sIDAsIHBvaW50cywgY2hpbGRyZW4pXG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aW5kZXggPSBvZmZzZXQgPSBwcm9wZXJ0eSA9IDAsIHZhcmlhYmxlID0gYW1wZXJzYW5kID0gMSwgdHlwZSA9IGNoYXJhY3RlcnMgPSAnJywgbGVuZ3RoID0gcHNldWRvXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyA6XG5cdFx0XHRjYXNlIDU4OlxuXHRcdFx0XHRsZW5ndGggPSAxICsgc3RybGVuKGNoYXJhY3RlcnMpLCBwcm9wZXJ0eSA9IHByZXZpb3VzXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRpZiAodmFyaWFibGUgPCAxKVxuXHRcdFx0XHRcdGlmIChjaGFyYWN0ZXIgPT0gMTIzKVxuXHRcdFx0XHRcdFx0LS12YXJpYWJsZVxuXHRcdFx0XHRcdGVsc2UgaWYgKGNoYXJhY3RlciA9PSAxMjUgJiYgdmFyaWFibGUrKyA9PSAwICYmIHByZXYoKSA9PSAxMjUpXG5cdFx0XHRcdFx0XHRjb250aW51ZVxuXG5cdFx0XHRcdHN3aXRjaCAoY2hhcmFjdGVycyArPSBmcm9tKGNoYXJhY3RlciksIGNoYXJhY3RlciAqIHZhcmlhYmxlKSB7XG5cdFx0XHRcdFx0Ly8gJlxuXHRcdFx0XHRcdGNhc2UgMzg6XG5cdFx0XHRcdFx0XHRhbXBlcnNhbmQgPSBvZmZzZXQgPiAwID8gMSA6IChjaGFyYWN0ZXJzICs9ICdcXGYnLCAtMSlcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gLFxuXHRcdFx0XHRcdGNhc2UgNDQ6XG5cdFx0XHRcdFx0XHRwb2ludHNbaW5kZXgrK10gPSAoc3RybGVuKGNoYXJhY3RlcnMpIC0gMSkgKiBhbXBlcnNhbmQsIGFtcGVyc2FuZCA9IDFcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gQFxuXHRcdFx0XHRcdGNhc2UgNjQ6XG5cdFx0XHRcdFx0XHQvLyAtXG5cdFx0XHRcdFx0XHRpZiAocGVlaygpID09PSA0NSlcblx0XHRcdFx0XHRcdFx0Y2hhcmFjdGVycyArPSBkZWxpbWl0KG5leHQoKSlcblxuXHRcdFx0XHRcdFx0YXRydWxlID0gcGVlaygpLCBvZmZzZXQgPSBsZW5ndGggPSBzdHJsZW4odHlwZSA9IGNoYXJhY3RlcnMgKz0gaWRlbnRpZmllcihjYXJldCgpKSksIGNoYXJhY3RlcisrXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vIC1cblx0XHRcdFx0XHRjYXNlIDQ1OlxuXHRcdFx0XHRcdFx0aWYgKHByZXZpb3VzID09PSA0NSAmJiBzdHJsZW4oY2hhcmFjdGVycykgPT0gMilcblx0XHRcdFx0XHRcdFx0dmFyaWFibGUgPSAwXG5cdFx0XHRcdH1cblx0XHR9XG5cblx0cmV0dXJuIHJ1bGVzZXRzXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICogQHBhcmFtIHtzdHJpbmdbXX0gcnVsZXNcbiAqIEBwYXJhbSB7bnVtYmVyW119IHBvaW50c1xuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nW119IHByb3BzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBjaGlsZHJlblxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVsZXNldCAodmFsdWUsIHJvb3QsIHBhcmVudCwgaW5kZXgsIG9mZnNldCwgcnVsZXMsIHBvaW50cywgdHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBsZW5ndGgpIHtcblx0dmFyIHBvc3QgPSBvZmZzZXQgLSAxXG5cdHZhciBydWxlID0gb2Zmc2V0ID09PSAwID8gcnVsZXMgOiBbJyddXG5cdHZhciBzaXplID0gc2l6ZW9mKHJ1bGUpXG5cblx0Zm9yICh2YXIgaSA9IDAsIGogPSAwLCBrID0gMDsgaSA8IGluZGV4OyArK2kpXG5cdFx0Zm9yICh2YXIgeCA9IDAsIHkgPSBzdWJzdHIodmFsdWUsIHBvc3QgKyAxLCBwb3N0ID0gYWJzKGogPSBwb2ludHNbaV0pKSwgeiA9IHZhbHVlOyB4IDwgc2l6ZTsgKyt4KVxuXHRcdFx0aWYgKHogPSB0cmltKGogPiAwID8gcnVsZVt4XSArICcgJyArIHkgOiByZXBsYWNlKHksIC8mXFxmL2csIHJ1bGVbeF0pKSlcblx0XHRcdFx0cHJvcHNbaysrXSA9IHpcblxuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBvZmZzZXQgPT09IDAgPyBSVUxFU0VUIDogdHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBsZW5ndGgpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbW1lbnQgKHZhbHVlLCByb290LCBwYXJlbnQpIHtcblx0cmV0dXJuIG5vZGUodmFsdWUsIHJvb3QsIHBhcmVudCwgQ09NTUVOVCwgZnJvbShjaGFyKCkpLCBzdWJzdHIodmFsdWUsIDIsIC0yKSwgMClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjbGFyYXRpb24gKHZhbHVlLCByb290LCBwYXJlbnQsIGxlbmd0aCkge1xuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBERUNMQVJBVElPTiwgc3Vic3RyKHZhbHVlLCAwLCBsZW5ndGgpLCBzdWJzdHIodmFsdWUsIGxlbmd0aCArIDEsIC0xKSwgbGVuZ3RoKVxufVxuIiwiaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ0BlbW90aW9uL3NoZWV0JztcbmltcG9ydCB7IGRlYWxsb2MsIGFsbG9jLCBuZXh0LCB0b2tlbiwgZnJvbSwgcGVlaywgZGVsaW1pdCwgc2xpY2UsIHBvc2l0aW9uLCBSVUxFU0VULCBjb21iaW5lLCBtYXRjaCwgc2VyaWFsaXplLCBjb3B5LCByZXBsYWNlLCBXRUJLSVQsIE1PWiwgTVMsIEtFWUZSQU1FUywgREVDTEFSQVRJT04sIGhhc2gsIGNoYXJhdCwgc3RybGVuLCBpbmRleG9mLCBzdHJpbmdpZnksIENPTU1FTlQsIHJ1bGVzaGVldCwgbWlkZGxld2FyZSwgY29tcGlsZSB9IGZyb20gJ3N0eWxpcyc7XG5pbXBvcnQgJ0BlbW90aW9uL3dlYWstbWVtb2l6ZSc7XG5pbXBvcnQgJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nID0gZnVuY3Rpb24gaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nKGJlZ2luLCBwb2ludHMsIGluZGV4KSB7XG4gIHZhciBwcmV2aW91cyA9IDA7XG4gIHZhciBjaGFyYWN0ZXIgPSAwO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgcHJldmlvdXMgPSBjaGFyYWN0ZXI7XG4gICAgY2hhcmFjdGVyID0gcGVlaygpOyAvLyAmXFxmXG5cbiAgICBpZiAocHJldmlvdXMgPT09IDM4ICYmIGNoYXJhY3RlciA9PT0gMTIpIHtcbiAgICAgIHBvaW50c1tpbmRleF0gPSAxO1xuICAgIH1cblxuICAgIGlmICh0b2tlbihjaGFyYWN0ZXIpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBuZXh0KCk7XG4gIH1cblxuICByZXR1cm4gc2xpY2UoYmVnaW4sIHBvc2l0aW9uKTtcbn07XG5cbnZhciB0b1J1bGVzID0gZnVuY3Rpb24gdG9SdWxlcyhwYXJzZWQsIHBvaW50cykge1xuICAvLyBwcmV0ZW5kIHdlJ3ZlIHN0YXJ0ZWQgd2l0aCBhIGNvbW1hXG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgY2hhcmFjdGVyID0gNDQ7XG5cbiAgZG8ge1xuICAgIHN3aXRjaCAodG9rZW4oY2hhcmFjdGVyKSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICAvLyAmXFxmXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IDM4ICYmIHBlZWsoKSA9PT0gMTIpIHtcbiAgICAgICAgICAvLyB0aGlzIGlzIG5vdCAxMDAlIGNvcnJlY3QsIHdlIGRvbid0IGFjY291bnQgZm9yIGxpdGVyYWwgc2VxdWVuY2VzIGhlcmUgLSBsaWtlIGZvciBleGFtcGxlIHF1b3RlZCBzdHJpbmdzXG4gICAgICAgICAgLy8gc3R5bGlzIGluc2VydHMgXFxmIGFmdGVyICYgdG8ga25vdyB3aGVuICYgd2hlcmUgaXQgc2hvdWxkIHJlcGxhY2UgdGhpcyBzZXF1ZW5jZSB3aXRoIHRoZSBjb250ZXh0IHNlbGVjdG9yXG4gICAgICAgICAgLy8gYW5kIHdoZW4gaXQgc2hvdWxkIGp1c3QgY29uY2F0ZW5hdGUgdGhlIG91dGVyIGFuZCBpbm5lciBzZWxlY3RvcnNcbiAgICAgICAgICAvLyBpdCdzIHZlcnkgdW5saWtlbHkgZm9yIHRoaXMgc2VxdWVuY2UgdG8gYWN0dWFsbHkgYXBwZWFyIGluIGEgZGlmZmVyZW50IGNvbnRleHQsIHNvIHdlIGp1c3QgbGV2ZXJhZ2UgdGhpcyBmYWN0IGhlcmVcbiAgICAgICAgICBwb2ludHNbaW5kZXhdID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZFtpbmRleF0gKz0gaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nKHBvc2l0aW9uIC0gMSwgcG9pbnRzLCBpbmRleCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIHBhcnNlZFtpbmRleF0gKz0gZGVsaW1pdChjaGFyYWN0ZXIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA0OlxuICAgICAgICAvLyBjb21tYVxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSA0NCkge1xuICAgICAgICAgIC8vIGNvbG9uXG4gICAgICAgICAgcGFyc2VkWysraW5kZXhdID0gcGVlaygpID09PSA1OCA/ICcmXFxmJyA6ICcnO1xuICAgICAgICAgIHBvaW50c1tpbmRleF0gPSBwYXJzZWRbaW5kZXhdLmxlbmd0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAvLyBmYWxsdGhyb3VnaFxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBwYXJzZWRbaW5kZXhdICs9IGZyb20oY2hhcmFjdGVyKTtcbiAgICB9XG4gIH0gd2hpbGUgKGNoYXJhY3RlciA9IG5leHQoKSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG5cbnZhciBnZXRSdWxlcyA9IGZ1bmN0aW9uIGdldFJ1bGVzKHZhbHVlLCBwb2ludHMpIHtcbiAgcmV0dXJuIGRlYWxsb2ModG9SdWxlcyhhbGxvYyh2YWx1ZSksIHBvaW50cykpO1xufTsgLy8gV2Vha1NldCB3b3VsZCBiZSBtb3JlIGFwcHJvcHJpYXRlLCBidXQgb25seSBXZWFrTWFwIGlzIHN1cHBvcnRlZCBpbiBJRTExXG5cblxudmFyIGZpeGVkRWxlbWVudHMgPSAvKiAjX19QVVJFX18gKi9uZXcgV2Vha01hcCgpO1xudmFyIGNvbXBhdCA9IGZ1bmN0aW9uIGNvbXBhdChlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LnR5cGUgIT09ICdydWxlJyB8fCAhZWxlbWVudC5wYXJlbnQgfHwgLy8gcG9zaXRpdmUgLmxlbmd0aCBpbmRpY2F0ZXMgdGhhdCB0aGlzIHJ1bGUgY29udGFpbnMgcHNldWRvXG4gIC8vIG5lZ2F0aXZlIC5sZW5ndGggaW5kaWNhdGVzIHRoYXQgdGhpcyBydWxlIGhhcyBiZWVuIGFscmVhZHkgcHJlZml4ZWRcbiAgZWxlbWVudC5sZW5ndGggPCAxKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHZhbHVlID0gZWxlbWVudC52YWx1ZSxcbiAgICAgIHBhcmVudCA9IGVsZW1lbnQucGFyZW50O1xuICB2YXIgaXNJbXBsaWNpdFJ1bGUgPSBlbGVtZW50LmNvbHVtbiA9PT0gcGFyZW50LmNvbHVtbiAmJiBlbGVtZW50LmxpbmUgPT09IHBhcmVudC5saW5lO1xuXG4gIHdoaWxlIChwYXJlbnQudHlwZSAhPT0gJ3J1bGUnKSB7XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICBpZiAoIXBhcmVudCkgcmV0dXJuO1xuICB9IC8vIHNob3J0LWNpcmN1aXQgZm9yIHRoZSBzaW1wbGVzdCBjYXNlXG5cblxuICBpZiAoZWxlbWVudC5wcm9wcy5sZW5ndGggPT09IDEgJiYgdmFsdWUuY2hhckNvZGVBdCgwKSAhPT0gNThcbiAgLyogY29sb24gKi9cbiAgJiYgIWZpeGVkRWxlbWVudHMuZ2V0KHBhcmVudCkpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gaWYgdGhpcyBpcyBhbiBpbXBsaWNpdGx5IGluc2VydGVkIHJ1bGUgKHRoZSBvbmUgZWFnZXJseSBpbnNlcnRlZCBhdCB0aGUgZWFjaCBuZXcgbmVzdGVkIGxldmVsKVxuICAvLyB0aGVuIHRoZSBwcm9wcyBoYXMgYWxyZWFkeSBiZWVuIG1hbmlwdWxhdGVkIGJlZm9yZWhhbmQgYXMgdGhleSB0aGF0IGFycmF5IGlzIHNoYXJlZCBiZXR3ZWVuIGl0IGFuZCBpdHMgXCJydWxlIHBhcmVudFwiXG5cblxuICBpZiAoaXNJbXBsaWNpdFJ1bGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmaXhlZEVsZW1lbnRzLnNldChlbGVtZW50LCB0cnVlKTtcbiAgdmFyIHBvaW50cyA9IFtdO1xuICB2YXIgcnVsZXMgPSBnZXRSdWxlcyh2YWx1ZSwgcG9pbnRzKTtcbiAgdmFyIHBhcmVudFJ1bGVzID0gcGFyZW50LnByb3BzO1xuXG4gIGZvciAodmFyIGkgPSAwLCBrID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBwYXJlbnRSdWxlcy5sZW5ndGg7IGorKywgaysrKSB7XG4gICAgICBlbGVtZW50LnByb3BzW2tdID0gcG9pbnRzW2ldID8gcnVsZXNbaV0ucmVwbGFjZSgvJlxcZi9nLCBwYXJlbnRSdWxlc1tqXSkgOiBwYXJlbnRSdWxlc1tqXSArIFwiIFwiICsgcnVsZXNbaV07XG4gICAgfVxuICB9XG59O1xudmFyIHJlbW92ZUxhYmVsID0gZnVuY3Rpb24gcmVtb3ZlTGFiZWwoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC50eXBlID09PSAnZGVjbCcpIHtcbiAgICB2YXIgdmFsdWUgPSBlbGVtZW50LnZhbHVlO1xuXG4gICAgaWYgKCAvLyBjaGFyY29kZSBmb3IgbFxuICAgIHZhbHVlLmNoYXJDb2RlQXQoMCkgPT09IDEwOCAmJiAvLyBjaGFyY29kZSBmb3IgYlxuICAgIHZhbHVlLmNoYXJDb2RlQXQoMikgPT09IDk4KSB7XG4gICAgICAvLyB0aGlzIGlnbm9yZXMgbGFiZWxcbiAgICAgIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSAnJztcbiAgICAgIGVsZW1lbnQudmFsdWUgPSAnJztcbiAgICB9XG4gIH1cbn07XG52YXIgaWdub3JlRmxhZyA9ICdlbW90aW9uLWRpc2FibGUtc2VydmVyLXJlbmRlcmluZy11bnNhZmUtc2VsZWN0b3Itd2FybmluZy1wbGVhc2UtZG8tbm90LXVzZS10aGlzLXRoZS13YXJuaW5nLWV4aXN0cy1mb3ItYS1yZWFzb24nO1xuXG52YXIgaXNJZ25vcmluZ0NvbW1lbnQgPSBmdW5jdGlvbiBpc0lnbm9yaW5nQ29tbWVudChlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LnR5cGUgPT09ICdjb21tJyAmJiBlbGVtZW50LmNoaWxkcmVuLmluZGV4T2YoaWdub3JlRmxhZykgPiAtMTtcbn07XG5cbnZhciBjcmVhdGVVbnNhZmVTZWxlY3RvcnNBbGFybSA9IGZ1bmN0aW9uIGNyZWF0ZVVuc2FmZVNlbGVjdG9yc0FsYXJtKGNhY2hlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuKSB7XG4gICAgaWYgKGVsZW1lbnQudHlwZSAhPT0gJ3J1bGUnIHx8IGNhY2hlLmNvbXBhdCkgcmV0dXJuO1xuICAgIHZhciB1bnNhZmVQc2V1ZG9DbGFzc2VzID0gZWxlbWVudC52YWx1ZS5tYXRjaCgvKDpmaXJzdHw6bnRofDpudGgtbGFzdCktY2hpbGQvZyk7XG5cbiAgICBpZiAodW5zYWZlUHNldWRvQ2xhc3Nlcykge1xuICAgICAgdmFyIGlzTmVzdGVkID0gISFlbGVtZW50LnBhcmVudDsgLy8gaW4gbmVzdGVkIHJ1bGVzIGNvbW1lbnRzIGJlY29tZSBjaGlsZHJlbiBvZiB0aGUgXCJhdXRvLWluc2VydGVkXCIgcnVsZSBhbmQgdGhhdCdzIGFsd2F5cyB0aGUgYGVsZW1lbnQucGFyZW50YFxuICAgICAgLy9cbiAgICAgIC8vIGNvbnNpZGVyaW5nIHRoaXMgaW5wdXQ6XG4gICAgICAvLyAuYSB7XG4gICAgICAvLyAgIC5iIC8qIGNvbW0gKi8ge31cbiAgICAgIC8vICAgY29sb3I6IGhvdHBpbms7XG4gICAgICAvLyB9XG4gICAgICAvLyB3ZSBnZXQgb3V0cHV0IGNvcnJlc3BvbmRpbmcgdG8gdGhpczpcbiAgICAgIC8vIC5hIHtcbiAgICAgIC8vICAgJiB7XG4gICAgICAvLyAgICAgLyogY29tbSAqL1xuICAgICAgLy8gICAgIGNvbG9yOiBob3RwaW5rO1xuICAgICAgLy8gICB9XG4gICAgICAvLyAgIC5iIHt9XG4gICAgICAvLyB9XG5cbiAgICAgIHZhciBjb21tZW50Q29udGFpbmVyID0gaXNOZXN0ZWQgPyBlbGVtZW50LnBhcmVudC5jaGlsZHJlbiA6IC8vIGdsb2JhbCBydWxlIGF0IHRoZSByb290IGxldmVsXG4gICAgICBjaGlsZHJlbjtcblxuICAgICAgZm9yICh2YXIgaSA9IGNvbW1lbnRDb250YWluZXIubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdmFyIG5vZGUgPSBjb21tZW50Q29udGFpbmVyW2ldO1xuXG4gICAgICAgIGlmIChub2RlLmxpbmUgPCBlbGVtZW50LmxpbmUpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSAvLyBpdCBpcyBxdWl0ZSB3ZWlyZCBidXQgY29tbWVudHMgYXJlICp1c3VhbGx5KiBwdXQgYXQgYGNvbHVtbjogZWxlbWVudC5jb2x1bW4gLSAxYFxuICAgICAgICAvLyBzbyB3ZSBzZWVrICpmcm9tIHRoZSBlbmQqIGZvciB0aGUgbm9kZSB0aGF0IGlzIGVhcmxpZXIgdGhhbiB0aGUgcnVsZSdzIGBlbGVtZW50YCBhbmQgY2hlY2sgdGhhdFxuICAgICAgICAvLyB0aGlzIHdpbGwgYWxzbyBtYXRjaCBpbnB1dHMgbGlrZSB0aGlzOlxuICAgICAgICAvLyAuYSB7XG4gICAgICAgIC8vICAgLyogY29tbSAqL1xuICAgICAgICAvLyAgIC5iIHt9XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy9cbiAgICAgICAgLy8gYnV0IHRoYXQgaXMgZmluZVxuICAgICAgICAvL1xuICAgICAgICAvLyBpdCB3b3VsZCBiZSB0aGUgZWFzaWVzdCB0byBjaGFuZ2UgdGhlIHBsYWNlbWVudCBvZiB0aGUgY29tbWVudCB0byBiZSB0aGUgZmlyc3QgY2hpbGQgb2YgdGhlIHJ1bGU6XG4gICAgICAgIC8vIC5hIHtcbiAgICAgICAgLy8gICAuYiB7IC8qIGNvbW0gKi8gfVxuICAgICAgICAvLyB9XG4gICAgICAgIC8vIHdpdGggc3VjaCBpbnB1dHMgd2Ugd291bGRuJ3QgaGF2ZSB0byBzZWFyY2ggZm9yIHRoZSBjb21tZW50IGF0IGFsbFxuICAgICAgICAvLyBUT0RPOiBjb25zaWRlciBjaGFuZ2luZyB0aGlzIGNvbW1lbnQgcGxhY2VtZW50IGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb25cblxuXG4gICAgICAgIGlmIChub2RlLmNvbHVtbiA8IGVsZW1lbnQuY29sdW1uKSB7XG4gICAgICAgICAgaWYgKGlzSWdub3JpbmdDb21tZW50KG5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdW5zYWZlUHNldWRvQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uICh1bnNhZmVQc2V1ZG9DbGFzcykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVGhlIHBzZXVkbyBjbGFzcyBcXFwiXCIgKyB1bnNhZmVQc2V1ZG9DbGFzcyArIFwiXFxcIiBpcyBwb3RlbnRpYWxseSB1bnNhZmUgd2hlbiBkb2luZyBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuIFRyeSBjaGFuZ2luZyBpdCB0byBcXFwiXCIgKyB1bnNhZmVQc2V1ZG9DbGFzcy5zcGxpdCgnLWNoaWxkJylbMF0gKyBcIi1vZi10eXBlXFxcIi5cIik7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgaXNJbXBvcnRSdWxlID0gZnVuY3Rpb24gaXNJbXBvcnRSdWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQudHlwZS5jaGFyQ29kZUF0KDEpID09PSAxMDUgJiYgZWxlbWVudC50eXBlLmNoYXJDb2RlQXQoMCkgPT09IDY0O1xufTtcblxudmFyIGlzUHJlcGVuZGVkV2l0aFJlZ3VsYXJSdWxlcyA9IGZ1bmN0aW9uIGlzUHJlcGVuZGVkV2l0aFJlZ3VsYXJSdWxlcyhpbmRleCwgY2hpbGRyZW4pIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4IC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoIWlzSW1wb3J0UnVsZShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07IC8vIHVzZSB0aGlzIHRvIHJlbW92ZSBpbmNvcnJlY3QgZWxlbWVudHMgZnJvbSBmdXJ0aGVyIHByb2Nlc3Npbmdcbi8vIHNvIHRoZXkgZG9uJ3QgZ2V0IGhhbmRlZCB0byB0aGUgYHNoZWV0YCAob3IgYW55dGhpbmcgZWxzZSlcbi8vIGFzIHRoYXQgY291bGQgcG90ZW50aWFsbHkgbGVhZCB0byBhZGRpdGlvbmFsIGxvZ3Mgd2hpY2ggaW4gdHVybiBjb3VsZCBiZSBvdmVyaGVsbWluZyB0byB0aGUgdXNlclxuXG5cbnZhciBudWxsaWZ5RWxlbWVudCA9IGZ1bmN0aW9uIG51bGxpZnlFbGVtZW50KGVsZW1lbnQpIHtcbiAgZWxlbWVudC50eXBlID0gJyc7XG4gIGVsZW1lbnQudmFsdWUgPSAnJztcbiAgZWxlbWVudFtcInJldHVyblwiXSA9ICcnO1xuICBlbGVtZW50LmNoaWxkcmVuID0gJyc7XG4gIGVsZW1lbnQucHJvcHMgPSAnJztcbn07XG5cbnZhciBpbmNvcnJlY3RJbXBvcnRBbGFybSA9IGZ1bmN0aW9uIGluY29ycmVjdEltcG9ydEFsYXJtKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbikge1xuICBpZiAoIWlzSW1wb3J0UnVsZShlbGVtZW50KSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChlbGVtZW50LnBhcmVudCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJgQGltcG9ydGAgcnVsZXMgY2FuJ3QgYmUgbmVzdGVkIGluc2lkZSBvdGhlciBydWxlcy4gUGxlYXNlIG1vdmUgaXQgdG8gdGhlIHRvcCBsZXZlbCBhbmQgcHV0IGl0IGJlZm9yZSByZWd1bGFyIHJ1bGVzLiBLZWVwIGluIG1pbmQgdGhhdCB0aGV5IGNhbiBvbmx5IGJlIHVzZWQgd2l0aGluIGdsb2JhbCBzdHlsZXMuXCIpO1xuICAgIG51bGxpZnlFbGVtZW50KGVsZW1lbnQpO1xuICB9IGVsc2UgaWYgKGlzUHJlcGVuZGVkV2l0aFJlZ3VsYXJSdWxlcyhpbmRleCwgY2hpbGRyZW4pKSB7XG4gICAgY29uc29sZS5lcnJvcihcImBAaW1wb3J0YCBydWxlcyBjYW4ndCBiZSBhZnRlciBvdGhlciBydWxlcy4gUGxlYXNlIHB1dCB5b3VyIGBAaW1wb3J0YCBydWxlcyBiZWZvcmUgeW91ciBvdGhlciBydWxlcy5cIik7XG4gICAgbnVsbGlmeUVsZW1lbnQoZWxlbWVudCk7XG4gIH1cbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWZhbGx0aHJvdWdoICovXG5cbmZ1bmN0aW9uIHByZWZpeCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHN3aXRjaCAoaGFzaCh2YWx1ZSwgbGVuZ3RoKSkge1xuICAgIC8vIGNvbG9yLWFkanVzdFxuICAgIGNhc2UgNTEwMzpcbiAgICAgIHJldHVybiBXRUJLSVQgKyAncHJpbnQtJyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gYW5pbWF0aW9uLCBhbmltYXRpb24tKGRlbGF5fGRpcmVjdGlvbnxkdXJhdGlvbnxmaWxsLW1vZGV8aXRlcmF0aW9uLWNvdW50fG5hbWV8cGxheS1zdGF0ZXx0aW1pbmctZnVuY3Rpb24pXG5cbiAgICBjYXNlIDU3Mzc6XG4gICAgY2FzZSA0MjAxOlxuICAgIGNhc2UgMzE3NzpcbiAgICBjYXNlIDM0MzM6XG4gICAgY2FzZSAxNjQxOlxuICAgIGNhc2UgNDQ1NzpcbiAgICBjYXNlIDI5MjE6IC8vIHRleHQtZGVjb3JhdGlvbiwgZmlsdGVyLCBjbGlwLXBhdGgsIGJhY2tmYWNlLXZpc2liaWxpdHksIGNvbHVtbiwgYm94LWRlY29yYXRpb24tYnJlYWtcblxuICAgIGNhc2UgNTU3MjpcbiAgICBjYXNlIDYzNTY6XG4gICAgY2FzZSA1ODQ0OlxuICAgIGNhc2UgMzE5MTpcbiAgICBjYXNlIDY2NDU6XG4gICAgY2FzZSAzMDA1OiAvLyBtYXNrLCBtYXNrLWltYWdlLCBtYXNrLShtb2RlfGNsaXB8c2l6ZSksIG1hc2stKHJlcGVhdHxvcmlnaW4pLCBtYXNrLXBvc2l0aW9uLCBtYXNrLWNvbXBvc2l0ZSxcblxuICAgIGNhc2UgNjM5MTpcbiAgICBjYXNlIDU4Nzk6XG4gICAgY2FzZSA1NjIzOlxuICAgIGNhc2UgNjEzNTpcbiAgICBjYXNlIDQ1OTk6XG4gICAgY2FzZSA0ODU1OiAvLyBiYWNrZ3JvdW5kLWNsaXAsIGNvbHVtbnMsIGNvbHVtbi0oY291bnR8ZmlsbHxnYXB8cnVsZXxydWxlLWNvbG9yfHJ1bGUtc3R5bGV8cnVsZS13aWR0aHxzcGFufHdpZHRoKVxuXG4gICAgY2FzZSA0MjE1OlxuICAgIGNhc2UgNjM4OTpcbiAgICBjYXNlIDUxMDk6XG4gICAgY2FzZSA1MzY1OlxuICAgIGNhc2UgNTYyMTpcbiAgICBjYXNlIDM4Mjk6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyB2YWx1ZTtcbiAgICAvLyBhcHBlYXJhbmNlLCB1c2VyLXNlbGVjdCwgdHJhbnNmb3JtLCBoeXBoZW5zLCB0ZXh0LXNpemUtYWRqdXN0XG5cbiAgICBjYXNlIDUzNDk6XG4gICAgY2FzZSA0MjQ2OlxuICAgIGNhc2UgNDgxMDpcbiAgICBjYXNlIDY5Njg6XG4gICAgY2FzZSAyNzU2OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTU9aICsgdmFsdWUgKyBNUyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gZmxleCwgZmxleC1kaXJlY3Rpb25cblxuICAgIGNhc2UgNjgyODpcbiAgICBjYXNlIDQyNjg6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gb3JkZXJcblxuICAgIGNhc2UgNjE2NTpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgJ2ZsZXgtJyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gYWxpZ24taXRlbXNcblxuICAgIGNhc2UgNTE4NzpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIHJlcGxhY2UodmFsdWUsIC8oXFx3KykuKyg6W15dKykvLCBXRUJLSVQgKyAnYm94LSQxJDInICsgTVMgKyAnZmxleC0kMSQyJykgKyB2YWx1ZTtcbiAgICAvLyBhbGlnbi1zZWxmXG5cbiAgICBjYXNlIDU0NDM6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LWl0ZW0tJyArIHJlcGxhY2UodmFsdWUsIC9mbGV4LXwtc2VsZi8sICcnKSArIHZhbHVlO1xuICAgIC8vIGFsaWduLWNvbnRlbnRcblxuICAgIGNhc2UgNDY3NTpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgJ2ZsZXgtbGluZS1wYWNrJyArIHJlcGxhY2UodmFsdWUsIC9hbGlnbi1jb250ZW50fGZsZXgtfC1zZWxmLywgJycpICsgdmFsdWU7XG4gICAgLy8gZmxleC1zaHJpbmtcblxuICAgIGNhc2UgNTU0ODpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ3NocmluaycsICduZWdhdGl2ZScpICsgdmFsdWU7XG4gICAgLy8gZmxleC1iYXNpc1xuXG4gICAgY2FzZSA1MjkyOlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAnYmFzaXMnLCAncHJlZmVycmVkLXNpemUnKSArIHZhbHVlO1xuICAgIC8vIGZsZXgtZ3Jvd1xuXG4gICAgY2FzZSA2MDYwOlxuICAgICAgcmV0dXJuIFdFQktJVCArICdib3gtJyArIHJlcGxhY2UodmFsdWUsICctZ3JvdycsICcnKSArIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAnZ3JvdycsICdwb3NpdGl2ZScpICsgdmFsdWU7XG4gICAgLy8gdHJhbnNpdGlvblxuXG4gICAgY2FzZSA0NTU0OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHJlcGxhY2UodmFsdWUsIC8oW14tXSkodHJhbnNmb3JtKS9nLCAnJDEnICsgV0VCS0lUICsgJyQyJykgKyB2YWx1ZTtcbiAgICAvLyBjdXJzb3JcblxuICAgIGNhc2UgNjE4NzpcbiAgICAgIHJldHVybiByZXBsYWNlKHJlcGxhY2UocmVwbGFjZSh2YWx1ZSwgLyh6b29tLXxncmFiKS8sIFdFQktJVCArICckMScpLCAvKGltYWdlLXNldCkvLCBXRUJLSVQgKyAnJDEnKSwgdmFsdWUsICcnKSArIHZhbHVlO1xuICAgIC8vIGJhY2tncm91bmQsIGJhY2tncm91bmQtaW1hZ2VcblxuICAgIGNhc2UgNTQ5NTpcbiAgICBjYXNlIDM5NTk6XG4gICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyhpbWFnZS1zZXRcXChbXl0qKS8sIFdFQktJVCArICckMScgKyAnJGAkMScpO1xuICAgIC8vIGp1c3RpZnktY29udGVudFxuXG4gICAgY2FzZSA0OTY4OlxuICAgICAgcmV0dXJuIHJlcGxhY2UocmVwbGFjZSh2YWx1ZSwgLyguKzopKGZsZXgtKT8oLiopLywgV0VCS0lUICsgJ2JveC1wYWNrOiQzJyArIE1TICsgJ2ZsZXgtcGFjazokMycpLCAvcy4rLWJbXjtdKy8sICdqdXN0aWZ5JykgKyBXRUJLSVQgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIChtYXJnaW58cGFkZGluZyktaW5saW5lLShzdGFydHxlbmQpXG5cbiAgICBjYXNlIDQwOTU6XG4gICAgY2FzZSAzNTgzOlxuICAgIGNhc2UgNDA2ODpcbiAgICBjYXNlIDI1MzI6XG4gICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKyktaW5saW5lKC4rKS8sIFdFQktJVCArICckMSQyJykgKyB2YWx1ZTtcbiAgICAvLyAobWlufG1heCk/KHdpZHRofGhlaWdodHxpbmxpbmUtc2l6ZXxibG9jay1zaXplKVxuXG4gICAgY2FzZSA4MTE2OlxuICAgIGNhc2UgNzA1OTpcbiAgICBjYXNlIDU3NTM6XG4gICAgY2FzZSA1NTM1OlxuICAgIGNhc2UgNTQ0NTpcbiAgICBjYXNlIDU3MDE6XG4gICAgY2FzZSA0OTMzOlxuICAgIGNhc2UgNDY3NzpcbiAgICBjYXNlIDU1MzM6XG4gICAgY2FzZSA1Nzg5OlxuICAgIGNhc2UgNTAyMTpcbiAgICBjYXNlIDQ3NjU6XG4gICAgICAvLyBzdHJldGNoLCBtYXgtY29udGVudCwgbWluLWNvbnRlbnQsIGZpbGwtYXZhaWxhYmxlXG4gICAgICBpZiAoc3RybGVuKHZhbHVlKSAtIDEgLSBsZW5ndGggPiA2KSBzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMSkpIHtcbiAgICAgICAgLy8gKG0pYXgtY29udGVudCwgKG0paW4tY29udGVudFxuICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAvLyAtXG4gICAgICAgICAgaWYgKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgNCkgIT09IDQ1KSBicmVhaztcbiAgICAgICAgLy8gKGYpaWxsLWF2YWlsYWJsZSwgKGYpaXQtY29udGVudFxuXG4gICAgICAgIGNhc2UgMTAyOlxuICAgICAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAvKC4rOikoLispLShbXl0rKS8sICckMScgKyBXRUJLSVQgKyAnJDItJDMnICsgJyQxJyArIE1PWiArIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDMpID09IDEwOCA/ICckMycgOiAnJDItJDMnKSkgKyB2YWx1ZTtcbiAgICAgICAgLy8gKHMpdHJldGNoXG5cbiAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgcmV0dXJuIH5pbmRleG9mKHZhbHVlLCAnc3RyZXRjaCcpID8gcHJlZml4KHJlcGxhY2UodmFsdWUsICdzdHJldGNoJywgJ2ZpbGwtYXZhaWxhYmxlJyksIGxlbmd0aCkgKyB2YWx1ZSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgLy8gcG9zaXRpb246IHN0aWNreVxuXG4gICAgY2FzZSA0OTQ5OlxuICAgICAgLy8gKHMpdGlja3k/XG4gICAgICBpZiAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAxKSAhPT0gMTE1KSBicmVhaztcbiAgICAvLyBkaXNwbGF5OiAoZmxleHxpbmxpbmUtZmxleClcblxuICAgIGNhc2UgNjQ0NDpcbiAgICAgIHN3aXRjaCAoY2hhcmF0KHZhbHVlLCBzdHJsZW4odmFsdWUpIC0gMyAtICh+aW5kZXhvZih2YWx1ZSwgJyFpbXBvcnRhbnQnKSAmJiAxMCkpKSB7XG4gICAgICAgIC8vIHN0aWMoayl5XG4gICAgICAgIGNhc2UgMTA3OlxuICAgICAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAnOicsICc6JyArIFdFQktJVCkgKyB2YWx1ZTtcbiAgICAgICAgLy8gKGlubGluZS0pP2ZsKGUpeFxuXG4gICAgICAgIGNhc2UgMTAxOlxuICAgICAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAvKC4rOikoW147IV0rKSg7fCEuKyk/LywgJyQxJyArIFdFQktJVCArIChjaGFyYXQodmFsdWUsIDE0KSA9PT0gNDUgPyAnaW5saW5lLScgOiAnJykgKyAnYm94JDMnICsgJyQxJyArIFdFQktJVCArICckMiQzJyArICckMScgKyBNUyArICckMmJveCQzJykgKyB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gICAgLy8gd3JpdGluZy1tb2RlXG5cbiAgICBjYXNlIDU5MzY6XG4gICAgICBzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMTEpKSB7XG4gICAgICAgIC8vIHZlcnRpY2FsLWwocilcbiAgICAgICAgY2FzZSAxMTQ6XG4gICAgICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICd0YicpICsgdmFsdWU7XG4gICAgICAgIC8vIHZlcnRpY2FsLXIobClcblxuICAgICAgICBjYXNlIDEwODpcbiAgICAgICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ3RiLXJsJykgKyB2YWx1ZTtcbiAgICAgICAgLy8gaG9yaXpvbnRhbCgtKXRiXG5cbiAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ2xyJykgKyB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG52YXIgcHJlZml4ZXIgPSBmdW5jdGlvbiBwcmVmaXhlcihlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG4gIGlmIChlbGVtZW50Lmxlbmd0aCA+IC0xKSBpZiAoIWVsZW1lbnRbXCJyZXR1cm5cIl0pIHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG4gICAgY2FzZSBERUNMQVJBVElPTjpcbiAgICAgIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSBwcmVmaXgoZWxlbWVudC52YWx1ZSwgZWxlbWVudC5sZW5ndGgpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIEtFWUZSQU1FUzpcbiAgICAgIHJldHVybiBzZXJpYWxpemUoW2NvcHkoZWxlbWVudCwge1xuICAgICAgICB2YWx1ZTogcmVwbGFjZShlbGVtZW50LnZhbHVlLCAnQCcsICdAJyArIFdFQktJVClcbiAgICAgIH0pXSwgY2FsbGJhY2spO1xuXG4gICAgY2FzZSBSVUxFU0VUOlxuICAgICAgaWYgKGVsZW1lbnQubGVuZ3RoKSByZXR1cm4gY29tYmluZShlbGVtZW50LnByb3BzLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgc3dpdGNoIChtYXRjaCh2YWx1ZSwgLyg6OnBsYWNcXHcrfDpyZWFkLVxcdyspLykpIHtcbiAgICAgICAgICAvLyA6cmVhZC0ob25seXx3cml0ZSlcbiAgICAgICAgICBjYXNlICc6cmVhZC1vbmx5JzpcbiAgICAgICAgICBjYXNlICc6cmVhZC13cml0ZSc6XG4gICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgcHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihyZWFkLVxcdyspLywgJzonICsgTU9aICsgJyQxJyldXG4gICAgICAgICAgICB9KV0sIGNhbGxiYWNrKTtcbiAgICAgICAgICAvLyA6cGxhY2Vob2xkZXJcblxuICAgICAgICAgIGNhc2UgJzo6cGxhY2Vob2xkZXInOlxuICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgV0VCS0lUICsgJ2lucHV0LSQxJyldXG4gICAgICAgICAgICB9KSwgY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgTU9aICsgJyQxJyldXG4gICAgICAgICAgICB9KSwgY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgTVMgKyAnaW5wdXQtJDEnKV1cbiAgICAgICAgICAgIH0pXSwgY2FsbGJhY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSk7XG4gIH1cbn07XG5cbnZhciBkZWZhdWx0U3R5bGlzUGx1Z2lucyA9IFtwcmVmaXhlcl07XG5cbnZhciBjcmVhdGVDYWNoZSA9IGZ1bmN0aW9uIGNyZWF0ZUNhY2hlKG9wdGlvbnMpIHtcbiAgdmFyIGtleSA9IG9wdGlvbnMua2V5O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFrZXkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgaGF2ZSB0byBjb25maWd1cmUgYGtleWAgZm9yIHlvdXIgY2FjaGUuIFBsZWFzZSBtYWtlIHN1cmUgaXQncyB1bmlxdWUgKGFuZCBub3QgZXF1YWwgdG8gJ2NzcycpIGFzIGl0J3MgdXNlZCBmb3IgbGlua2luZyBzdHlsZXMgdG8geW91ciBjYWNoZS5cXG5cIiArIFwiSWYgbXVsdGlwbGUgY2FjaGVzIHNoYXJlIHRoZSBzYW1lIGtleSB0aGV5IG1pZ2h0IFxcXCJmaWdodFxcXCIgZm9yIGVhY2ggb3RoZXIncyBzdHlsZSBlbGVtZW50cy5cIik7XG4gIH1cblxuICBpZiAoa2V5ID09PSAnY3NzJykge1xuICAgIHZhciBzc3JTdHlsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwic3R5bGVbZGF0YS1lbW90aW9uXTpub3QoW2RhdGEtc10pXCIpOyAvLyBnZXQgU1NSZWQgc3R5bGVzIG91dCBvZiB0aGUgd2F5IG9mIFJlYWN0J3MgaHlkcmF0aW9uXG4gICAgLy8gZG9jdW1lbnQuaGVhZCBpcyBhIHNhZmUgcGxhY2UgdG8gbW92ZSB0aGVtIHRvKHRob3VnaCBub3RlIGRvY3VtZW50LmhlYWQgaXMgbm90IG5lY2Vzc2FyaWx5IHRoZSBsYXN0IHBsYWNlIHRoZXkgd2lsbCBiZSlcbiAgICAvLyBub3RlIHRoaXMgdmVyeSB2ZXJ5IGludGVudGlvbmFsbHkgdGFyZ2V0cyBhbGwgc3R5bGUgZWxlbWVudHMgcmVnYXJkbGVzcyBvZiB0aGUga2V5IHRvIGVuc3VyZVxuICAgIC8vIHRoYXQgY3JlYXRpbmcgYSBjYWNoZSB3b3JrcyBpbnNpZGUgb2YgcmVuZGVyIG9mIGEgUmVhY3QgY29tcG9uZW50XG5cbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKHNzclN0eWxlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIC8vIHdlIHdhbnQgdG8gb25seSBtb3ZlIGVsZW1lbnRzIHdoaWNoIGhhdmUgYSBzcGFjZSBpbiB0aGUgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAgLy8gYmVjYXVzZSB0aGF0IGluZGljYXRlcyB0aGF0IGl0IGlzIGFuIEVtb3Rpb24gMTEgc2VydmVyLXNpZGUgcmVuZGVyZWQgc3R5bGUgZWxlbWVudHNcbiAgICAgIC8vIHdoaWxlIHdlIHdpbGwgYWxyZWFkeSBpZ25vcmUgRW1vdGlvbiAxMSBjbGllbnQtc2lkZSBpbnNlcnRlZCBzdHlsZXMgYmVjYXVzZSBvZiB0aGUgOm5vdChbZGF0YS1zXSkgcGFydCBpbiB0aGUgc2VsZWN0b3JcbiAgICAgIC8vIEVtb3Rpb24gMTAgY2xpZW50LXNpZGUgaW5zZXJ0ZWQgc3R5bGVzIGRpZCBub3QgaGF2ZSBkYXRhLXMgKGJ1dCBpbXBvcnRhbnRseSBkaWQgbm90IGhhdmUgYSBzcGFjZSBpbiB0aGVpciBkYXRhLWVtb3Rpb24gYXR0cmlidXRlcylcbiAgICAgIC8vIHNvIGNoZWNraW5nIGZvciB0aGUgc3BhY2UgZW5zdXJlcyB0aGF0IGxvYWRpbmcgRW1vdGlvbiAxMSBhZnRlciBFbW90aW9uIDEwIGhhcyBpbnNlcnRlZCBzb21lIHN0eWxlc1xuICAgICAgLy8gd2lsbCBub3QgcmVzdWx0IGluIHRoZSBFbW90aW9uIDEwIHN0eWxlcyBiZWluZyBkZXN0cm95ZWRcbiAgICAgIHZhciBkYXRhRW1vdGlvbkF0dHJpYnV0ZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWVtb3Rpb24nKTtcblxuICAgICAgaWYgKGRhdGFFbW90aW9uQXR0cmlidXRlLmluZGV4T2YoJyAnKSA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLXMnLCAnJyk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgc3R5bGlzUGx1Z2lucyA9IG9wdGlvbnMuc3R5bGlzUGx1Z2lucyB8fCBkZWZhdWx0U3R5bGlzUGx1Z2lucztcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBpZiAoL1teYS16LV0vLnRlc3Qoa2V5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW1vdGlvbiBrZXkgbXVzdCBvbmx5IGNvbnRhaW4gbG93ZXIgY2FzZSBhbHBoYWJldGljYWwgY2hhcmFjdGVycyBhbmQgLSBidXQgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBwYXNzZWRcIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluc2VydGVkID0ge307XG4gIHZhciBjb250YWluZXI7XG4gIHZhciBub2Rlc1RvSHlkcmF0ZSA9IFtdO1xuXG4gIHtcbiAgICBjb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lciB8fCBkb2N1bWVudC5oZWFkO1xuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoIC8vIHRoaXMgbWVhbnMgd2Ugd2lsbCBpZ25vcmUgZWxlbWVudHMgd2hpY2ggZG9uJ3QgaGF2ZSBhIHNwYWNlIGluIHRoZW0gd2hpY2hcbiAgICAvLyBtZWFucyB0aGF0IHRoZSBzdHlsZSBlbGVtZW50cyB3ZSdyZSBsb29raW5nIGF0IGFyZSBvbmx5IEVtb3Rpb24gMTEgc2VydmVyLXJlbmRlcmVkIHN0eWxlIGVsZW1lbnRzXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInN0eWxlW2RhdGEtZW1vdGlvbl49XFxcIlwiICsga2V5ICsgXCIgXFxcIl1cIiksIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICB2YXIgYXR0cmliID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWVtb3Rpb25cIikuc3BsaXQoJyAnKTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGF0dHJpYi5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbnNlcnRlZFthdHRyaWJbaV1dID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgbm9kZXNUb0h5ZHJhdGUucHVzaChub2RlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBfaW5zZXJ0O1xuXG4gIHZhciBvbW5pcHJlc2VudFBsdWdpbnMgPSBbY29tcGF0LCByZW1vdmVMYWJlbF07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBvbW5pcHJlc2VudFBsdWdpbnMucHVzaChjcmVhdGVVbnNhZmVTZWxlY3RvcnNBbGFybSh7XG4gICAgICBnZXQgY29tcGF0KCkge1xuICAgICAgICByZXR1cm4gY2FjaGUuY29tcGF0O1xuICAgICAgfVxuXG4gICAgfSksIGluY29ycmVjdEltcG9ydEFsYXJtKTtcbiAgfVxuXG4gIHtcbiAgICB2YXIgY3VycmVudFNoZWV0O1xuICAgIHZhciBmaW5hbGl6aW5nUGx1Z2lucyA9IFtzdHJpbmdpZnksIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKCFlbGVtZW50LnJvb3QpIHtcbiAgICAgICAgaWYgKGVsZW1lbnRbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICBjdXJyZW50U2hlZXQuaW5zZXJ0KGVsZW1lbnRbXCJyZXR1cm5cIl0pO1xuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQudmFsdWUgJiYgZWxlbWVudC50eXBlICE9PSBDT01NRU5UKSB7XG4gICAgICAgICAgLy8gaW5zZXJ0IGVtcHR5IHJ1bGUgaW4gbm9uLXByb2R1Y3Rpb24gZW52aXJvbm1lbnRzXG4gICAgICAgICAgLy8gc28gQGVtb3Rpb24vamVzdCBjYW4gZ3JhYiBga2V5YCBmcm9tIHRoZSAoSlMpRE9NIGZvciBjYWNoZXMgd2l0aG91dCBhbnkgcnVsZXMgaW5zZXJ0ZWQgeWV0XG4gICAgICAgICAgY3VycmVudFNoZWV0Lmluc2VydChlbGVtZW50LnZhbHVlICsgXCJ7fVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gOiBydWxlc2hlZXQoZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgIGN1cnJlbnRTaGVldC5pbnNlcnQocnVsZSk7XG4gICAgfSldO1xuICAgIHZhciBzZXJpYWxpemVyID0gbWlkZGxld2FyZShvbW5pcHJlc2VudFBsdWdpbnMuY29uY2F0KHN0eWxpc1BsdWdpbnMsIGZpbmFsaXppbmdQbHVnaW5zKSk7XG5cbiAgICB2YXIgc3R5bGlzID0gZnVuY3Rpb24gc3R5bGlzKHN0eWxlcykge1xuICAgICAgcmV0dXJuIHNlcmlhbGl6ZShjb21waWxlKHN0eWxlcyksIHNlcmlhbGl6ZXIpO1xuICAgIH07XG5cbiAgICBfaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHNlbGVjdG9yLCBzZXJpYWxpemVkLCBzaGVldCwgc2hvdWxkQ2FjaGUpIHtcbiAgICAgIGN1cnJlbnRTaGVldCA9IHNoZWV0O1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzZXJpYWxpemVkLm1hcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGN1cnJlbnRTaGVldCA9IHtcbiAgICAgICAgICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydChydWxlKSB7XG4gICAgICAgICAgICBzaGVldC5pbnNlcnQocnVsZSArIHNlcmlhbGl6ZWQubWFwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHN0eWxpcyhzZWxlY3RvciA/IHNlbGVjdG9yICsgXCJ7XCIgKyBzZXJpYWxpemVkLnN0eWxlcyArIFwifVwiIDogc2VyaWFsaXplZC5zdHlsZXMpO1xuXG4gICAgICBpZiAoc2hvdWxkQ2FjaGUpIHtcbiAgICAgICAgY2FjaGUuaW5zZXJ0ZWRbc2VyaWFsaXplZC5uYW1lXSA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHZhciBjYWNoZSA9IHtcbiAgICBrZXk6IGtleSxcbiAgICBzaGVldDogbmV3IFN0eWxlU2hlZXQoe1xuICAgICAga2V5OiBrZXksXG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgIG5vbmNlOiBvcHRpb25zLm5vbmNlLFxuICAgICAgc3BlZWR5OiBvcHRpb25zLnNwZWVkeSxcbiAgICAgIHByZXBlbmQ6IG9wdGlvbnMucHJlcGVuZCxcbiAgICAgIGluc2VydGlvblBvaW50OiBvcHRpb25zLmluc2VydGlvblBvaW50XG4gICAgfSksXG4gICAgbm9uY2U6IG9wdGlvbnMubm9uY2UsXG4gICAgaW5zZXJ0ZWQ6IGluc2VydGVkLFxuICAgIHJlZ2lzdGVyZWQ6IHt9LFxuICAgIGluc2VydDogX2luc2VydFxuICB9O1xuICBjYWNoZS5zaGVldC5oeWRyYXRlKG5vZGVzVG9IeWRyYXRlKTtcbiAgcmV0dXJuIGNhY2hlO1xufTtcblxuZXhwb3J0IHsgY3JlYXRlQ2FjaGUgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHtNUywgTU9aLCBXRUJLSVQsIFJVTEVTRVQsIEtFWUZSQU1FUywgREVDTEFSQVRJT059IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7bWF0Y2gsIGNoYXJhdCwgc3Vic3RyLCBzdHJsZW4sIHNpemVvZiwgcmVwbGFjZSwgY29tYmluZX0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuaW1wb3J0IHtjb3B5LCB0b2tlbml6ZX0gZnJvbSAnLi9Ub2tlbml6ZXIuanMnXG5pbXBvcnQge3NlcmlhbGl6ZX0gZnJvbSAnLi9TZXJpYWxpemVyLmpzJ1xuaW1wb3J0IHtwcmVmaXh9IGZyb20gJy4vUHJlZml4ZXIuanMnXG5cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbltdfSBjb2xsZWN0aW9uXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1pZGRsZXdhcmUgKGNvbGxlY3Rpb24pIHtcblx0dmFyIGxlbmd0aCA9IHNpemVvZihjb2xsZWN0aW9uKVxuXG5cdHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRcdHZhciBvdXRwdXQgPSAnJ1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcblx0XHRcdG91dHB1dCArPSBjb2xsZWN0aW9uW2ldKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHx8ICcnXG5cblx0XHRyZXR1cm4gb3V0cHV0XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydWxlc2hlZXQgKGNhbGxiYWNrKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCkge1xuXHRcdGlmICghZWxlbWVudC5yb290KVxuXHRcdFx0aWYgKGVsZW1lbnQgPSBlbGVtZW50LnJldHVybilcblx0XHRcdFx0Y2FsbGJhY2soZWxlbWVudClcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlZml4ZXIgKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0aWYgKGVsZW1lbnQubGVuZ3RoID4gLTEpXG5cdFx0aWYgKCFlbGVtZW50LnJldHVybilcblx0XHRcdHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG5cdFx0XHRcdGNhc2UgREVDTEFSQVRJT046IGVsZW1lbnQucmV0dXJuID0gcHJlZml4KGVsZW1lbnQudmFsdWUsIGVsZW1lbnQubGVuZ3RoLCBjaGlsZHJlbilcblx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0Y2FzZSBLRVlGUkFNRVM6XG5cdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7dmFsdWU6IHJlcGxhY2UoZWxlbWVudC52YWx1ZSwgJ0AnLCAnQCcgKyBXRUJLSVQpfSldLCBjYWxsYmFjaylcblx0XHRcdFx0Y2FzZSBSVUxFU0VUOlxuXHRcdFx0XHRcdGlmIChlbGVtZW50Lmxlbmd0aClcblx0XHRcdFx0XHRcdHJldHVybiBjb21iaW5lKGVsZW1lbnQucHJvcHMsIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRcdFx0XHRzd2l0Y2ggKG1hdGNoKHZhbHVlLCAvKDo6cGxhY1xcdyt8OnJlYWQtXFx3KykvKSkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIDpyZWFkLShvbmx5fHdyaXRlKVxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJzpyZWFkLW9ubHknOiBjYXNlICc6cmVhZC13cml0ZSc6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHJlYWQtXFx3KykvLCAnOicgKyBNT1ogKyAnJDEnKV19KV0sIGNhbGxiYWNrKVxuXHRcdFx0XHRcdFx0XHRcdC8vIDpwbGFjZWhvbGRlclxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJzo6cGxhY2Vob2xkZXInOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgV0VCS0lUICsgJ2lucHV0LSQxJyldfSksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgTU9aICsgJyQxJyldfSksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgTVMgKyAnaW5wdXQtJDEnKV19KVxuXHRcdFx0XHRcdFx0XHRcdFx0XSwgY2FsbGJhY2spXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gJydcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5hbWVzcGFjZSAoZWxlbWVudCkge1xuXHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdGNhc2UgUlVMRVNFVDpcblx0XHRcdGVsZW1lbnQucHJvcHMgPSBlbGVtZW50LnByb3BzLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0cmV0dXJuIGNvbWJpbmUodG9rZW5pemUodmFsdWUpLCBmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBjaGlsZHJlbikge1xuXHRcdFx0XHRcdHN3aXRjaCAoY2hhcmF0KHZhbHVlLCAwKSkge1xuXHRcdFx0XHRcdFx0Ly8gXFxmXG5cdFx0XHRcdFx0XHRjYXNlIDEyOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gc3Vic3RyKHZhbHVlLCAxLCBzdHJsZW4odmFsdWUpKVxuXHRcdFx0XHRcdFx0Ly8gXFwwICggKyA+IH5cblx0XHRcdFx0XHRcdGNhc2UgMDogY2FzZSA0MDogY2FzZSA0MzogY2FzZSA2MjogY2FzZSAxMjY6XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZVxuXHRcdFx0XHRcdFx0Ly8gOlxuXHRcdFx0XHRcdFx0Y2FzZSA1ODpcblx0XHRcdFx0XHRcdFx0aWYgKGNoaWxkcmVuWysraW5kZXhdID09PSAnZ2xvYmFsJylcblx0XHRcdFx0XHRcdFx0XHRjaGlsZHJlbltpbmRleF0gPSAnJywgY2hpbGRyZW5bKytpbmRleF0gPSAnXFxmJyArIHN1YnN0cihjaGlsZHJlbltpbmRleF0sIGluZGV4ID0gMSwgLTEpXG5cdFx0XHRcdFx0XHQvLyBcXHNcblx0XHRcdFx0XHRcdGNhc2UgMzI6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpbmRleCA9PT0gMSA/ICcnIDogdmFsdWVcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHN3aXRjaCAoaW5kZXgpIHtcblx0XHRcdFx0XHRcdFx0XHRjYXNlIDA6IGVsZW1lbnQgPSB2YWx1ZVxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNpemVvZihjaGlsZHJlbikgPiAxID8gJycgOiB2YWx1ZVxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgaW5kZXggPSBzaXplb2YoY2hpbGRyZW4pIC0gMTogY2FzZSAyOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGluZGV4ID09PSAyID8gdmFsdWUgKyBlbGVtZW50ICsgZWxlbWVudCA6IHZhbHVlICsgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWVcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdH0pXG5cdH1cbn1cbiIsInZhciB1bml0bGVzc0tleXMgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAxLFxuICBhc3BlY3RSYXRpbzogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IHsgdW5pdGxlc3NLZXlzIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCBoYXNoU3RyaW5nIGZyb20gJ0BlbW90aW9uL2hhc2gnO1xuaW1wb3J0IHVuaXRsZXNzIGZyb20gJ0BlbW90aW9uL3VuaXRsZXNzJztcbmltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IgPSBcIllvdSBoYXZlIGlsbGVnYWwgZXNjYXBlIHNlcXVlbmNlIGluIHlvdXIgdGVtcGxhdGUgbGl0ZXJhbCwgbW9zdCBsaWtlbHkgaW5zaWRlIGNvbnRlbnQncyBwcm9wZXJ0eSB2YWx1ZS5cXG5CZWNhdXNlIHlvdSB3cml0ZSB5b3VyIENTUyBpbnNpZGUgYSBKYXZhU2NyaXB0IHN0cmluZyB5b3UgYWN0dWFsbHkgaGF2ZSB0byBkbyBkb3VibGUgZXNjYXBpbmcsIHNvIGZvciBleGFtcGxlIFxcXCJjb250ZW50OiAnXFxcXDAwZDcnO1xcXCIgc2hvdWxkIGJlY29tZSBcXFwiY29udGVudDogJ1xcXFxcXFxcMDBkNyc7XFxcIi5cXG5Zb3UgY2FuIHJlYWQgbW9yZSBhYm91dCB0aGlzIGhlcmU6XFxuaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHMjRVMyMDE4X3JldmlzaW9uX29mX2lsbGVnYWxfZXNjYXBlX3NlcXVlbmNlc1wiO1xudmFyIFVOREVGSU5FRF9BU19PQkpFQ1RfS0VZX0VSUk9SID0gXCJZb3UgaGF2ZSBwYXNzZWQgaW4gZmFsc3kgdmFsdWUgYXMgc3R5bGUgb2JqZWN0J3Mga2V5IChjYW4gaGFwcGVuIHdoZW4gaW4gZXhhbXBsZSB5b3UgcGFzcyB1bmV4cG9ydGVkIGNvbXBvbmVudCBhcyBjb21wdXRlZCBrZXkpLlwiO1xudmFyIGh5cGhlbmF0ZVJlZ2V4ID0gL1tBLVpdfF5tcy9nO1xudmFyIGFuaW1hdGlvblJlZ2V4ID0gL19FTU9fKFteX10rPylfKFteXSo/KV9FTU9fL2c7XG5cbnZhciBpc0N1c3RvbVByb3BlcnR5ID0gZnVuY3Rpb24gaXNDdXN0b21Qcm9wZXJ0eShwcm9wZXJ0eSkge1xuICByZXR1cm4gcHJvcGVydHkuY2hhckNvZGVBdCgxKSA9PT0gNDU7XG59O1xuXG52YXIgaXNQcm9jZXNzYWJsZVZhbHVlID0gZnVuY3Rpb24gaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ2Jvb2xlYW4nO1xufTtcblxudmFyIHByb2Nlc3NTdHlsZU5hbWUgPSAvKiAjX19QVVJFX18gKi9tZW1vaXplKGZ1bmN0aW9uIChzdHlsZU5hbWUpIHtcbiAgcmV0dXJuIGlzQ3VzdG9tUHJvcGVydHkoc3R5bGVOYW1lKSA/IHN0eWxlTmFtZSA6IHN0eWxlTmFtZS5yZXBsYWNlKGh5cGhlbmF0ZVJlZ2V4LCAnLSQmJykudG9Mb3dlckNhc2UoKTtcbn0pO1xuXG52YXIgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gIHN3aXRjaCAoa2V5KSB7XG4gICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICBjYXNlICdhbmltYXRpb25OYW1lJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZShhbmltYXRpb25SZWdleCwgZnVuY3Rpb24gKG1hdGNoLCBwMSwgcDIpIHtcbiAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgbmFtZTogcDEsXG4gICAgICAgICAgICAgIHN0eWxlczogcDIsXG4gICAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBwMTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICB9XG5cbiAgaWYgKHVuaXRsZXNzW2tleV0gIT09IDEgJiYgIWlzQ3VzdG9tUHJvcGVydHkoa2V5KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHZhbHVlICE9PSAwKSB7XG4gICAgcmV0dXJuIHZhbHVlICsgJ3B4JztcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBjb250ZW50VmFsdWVQYXR0ZXJuID0gLyh2YXJ8YXR0cnxjb3VudGVycz98dXJsfGVsZW1lbnR8KCgocmVwZWF0aW5nLSk/KGxpbmVhcnxyYWRpYWwpKXxjb25pYyktZ3JhZGllbnQpXFwofChuby0pPyhvcGVufGNsb3NlKS1xdW90ZS87XG4gIHZhciBjb250ZW50VmFsdWVzID0gWydub3JtYWwnLCAnbm9uZScsICdpbml0aWFsJywgJ2luaGVyaXQnLCAndW5zZXQnXTtcbiAgdmFyIG9sZFByb2Nlc3NTdHlsZVZhbHVlID0gcHJvY2Vzc1N0eWxlVmFsdWU7XG4gIHZhciBtc1BhdHRlcm4gPSAvXi1tcy0vO1xuICB2YXIgaHlwaGVuUGF0dGVybiA9IC8tKC4pL2c7XG4gIHZhciBoeXBoZW5hdGVkQ2FjaGUgPSB7fTtcblxuICBwcm9jZXNzU3R5bGVWYWx1ZSA9IGZ1bmN0aW9uIHByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5ID09PSAnY29udGVudCcpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnIHx8IGNvbnRlbnRWYWx1ZXMuaW5kZXhPZih2YWx1ZSkgPT09IC0xICYmICFjb250ZW50VmFsdWVQYXR0ZXJuLnRlc3QodmFsdWUpICYmICh2YWx1ZS5jaGFyQXQoMCkgIT09IHZhbHVlLmNoYXJBdCh2YWx1ZS5sZW5ndGggLSAxKSB8fCB2YWx1ZS5jaGFyQXQoMCkgIT09ICdcIicgJiYgdmFsdWUuY2hhckF0KDApICE9PSBcIidcIikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IHNlZW0gdG8gYmUgdXNpbmcgYSB2YWx1ZSBmb3IgJ2NvbnRlbnQnIHdpdGhvdXQgcXVvdGVzLCB0cnkgcmVwbGFjaW5nIGl0IHdpdGggYGNvbnRlbnQ6ICdcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIidgXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcm9jZXNzZWQgPSBvbGRQcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKTtcblxuICAgIGlmIChwcm9jZXNzZWQgIT09ICcnICYmICFpc0N1c3RvbVByb3BlcnR5KGtleSkgJiYga2V5LmluZGV4T2YoJy0nKSAhPT0gLTEgJiYgaHlwaGVuYXRlZENhY2hlW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgaHlwaGVuYXRlZENhY2hlW2tleV0gPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcihcIlVzaW5nIGtlYmFiLWNhc2UgZm9yIGNzcyBwcm9wZXJ0aWVzIGluIG9iamVjdHMgaXMgbm90IHN1cHBvcnRlZC4gRGlkIHlvdSBtZWFuIFwiICsga2V5LnJlcGxhY2UobXNQYXR0ZXJuLCAnbXMtJykucmVwbGFjZShoeXBoZW5QYXR0ZXJuLCBmdW5jdGlvbiAoc3RyLCBfY2hhcikge1xuICAgICAgICByZXR1cm4gX2NoYXIudG9VcHBlckNhc2UoKTtcbiAgICAgIH0pICsgXCI/XCIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzZWQ7XG4gIH07XG59XG5cbnZhciBub0NvbXBvbmVudFNlbGVjdG9yTWVzc2FnZSA9ICdDb21wb25lbnQgc2VsZWN0b3JzIGNhbiBvbmx5IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCAnICsgJ0BlbW90aW9uL2JhYmVsLXBsdWdpbiwgdGhlIHN3YyBFbW90aW9uIHBsdWdpbiwgb3IgYW5vdGhlciBFbW90aW9uLWF3YXJlICcgKyAnY29tcGlsZXIgdHJhbnNmb3JtLic7XG5cbmZ1bmN0aW9uIGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGludGVycG9sYXRpb24pIHtcbiAgaWYgKGludGVycG9sYXRpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGlmIChpbnRlcnBvbGF0aW9uLl9fZW1vdGlvbl9zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGludGVycG9sYXRpb24udG9TdHJpbmcoKSA9PT0gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihub0NvbXBvbmVudFNlbGVjdG9yTWVzc2FnZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGludGVycG9sYXRpb247XG4gIH1cblxuICBzd2l0Y2ggKHR5cGVvZiBpbnRlcnBvbGF0aW9uKSB7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICB7XG4gICAgICAgIGlmIChpbnRlcnBvbGF0aW9uLmFuaW0gPT09IDEpIHtcbiAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICBuYW1lOiBpbnRlcnBvbGF0aW9uLm5hbWUsXG4gICAgICAgICAgICBzdHlsZXM6IGludGVycG9sYXRpb24uc3R5bGVzLFxuICAgICAgICAgICAgbmV4dDogY3Vyc29yXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gaW50ZXJwb2xhdGlvbi5uYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGludGVycG9sYXRpb24uc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGludGVycG9sYXRpb24ubmV4dDtcblxuICAgICAgICAgIGlmIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIG5vdCB0aGUgbW9zdCBlZmZpY2llbnQgdGhpbmcgZXZlciBidXQgdGhpcyBpcyBhIHByZXR0eSByYXJlIGNhc2VcbiAgICAgICAgICAgIC8vIGFuZCB0aGVyZSB3aWxsIGJlIHZlcnkgZmV3IGl0ZXJhdGlvbnMgb2YgdGhpcyBnZW5lcmFsbHlcbiAgICAgICAgICAgIHdoaWxlIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IG5leHQubmFtZSxcbiAgICAgICAgICAgICAgICBzdHlsZXM6IG5leHQuc3R5bGVzLFxuICAgICAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBuZXh0ID0gbmV4dC5uZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzdHlsZXMgPSBpbnRlcnBvbGF0aW9uLnN0eWxlcyArIFwiO1wiO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaW50ZXJwb2xhdGlvbi5tYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3R5bGVzICs9IGludGVycG9sYXRpb24ubWFwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3JlYXRlU3RyaW5nRnJvbU9iamVjdChtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgaW50ZXJwb2xhdGlvbik7XG4gICAgICB9XG5cbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICB7XG4gICAgICAgIGlmIChtZXJnZWRQcm9wcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzQ3Vyc29yID0gY3Vyc29yO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBpbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzKTtcbiAgICAgICAgICBjdXJzb3IgPSBwcmV2aW91c0N1cnNvcjtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgcmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignRnVuY3Rpb25zIHRoYXQgYXJlIGludGVycG9sYXRlZCBpbiBjc3MgY2FsbHMgd2lsbCBiZSBzdHJpbmdpZmllZC5cXG4nICsgJ0lmIHlvdSB3YW50IHRvIGhhdmUgYSBjc3MgY2FsbCBiYXNlZCBvbiBwcm9wcywgY3JlYXRlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgY3NzIGNhbGwgbGlrZSB0aGlzXFxuJyArICdsZXQgZHluYW1pY1N0eWxlID0gKHByb3BzKSA9PiBjc3NgY29sb3I6ICR7cHJvcHMuY29sb3J9YFxcbicgKyAnSXQgY2FuIGJlIGNhbGxlZCBkaXJlY3RseSB3aXRoIHByb3BzIG9yIGludGVycG9sYXRlZCBpbiBhIHN0eWxlZCBjYWxsIGxpa2UgdGhpc1xcbicgKyBcImxldCBTb21lQ29tcG9uZW50ID0gc3R5bGVkKCdkaXYnKWAke2R5bmFtaWNTdHlsZX1gXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBbXTtcbiAgICAgICAgdmFyIHJlcGxhY2VkID0gaW50ZXJwb2xhdGlvbi5yZXBsYWNlKGFuaW1hdGlvblJlZ2V4LCBmdW5jdGlvbiAobWF0Y2gsIHAxLCBwMikge1xuICAgICAgICAgIHZhciBmYWtlVmFyTmFtZSA9IFwiYW5pbWF0aW9uXCIgKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgICBtYXRjaGVkLnB1c2goXCJjb25zdCBcIiArIGZha2VWYXJOYW1lICsgXCIgPSBrZXlmcmFtZXNgXCIgKyBwMi5yZXBsYWNlKC9eQGtleWZyYW1lcyBhbmltYXRpb24tXFx3Ky8sICcnKSArIFwiYFwiKTtcbiAgICAgICAgICByZXR1cm4gXCIke1wiICsgZmFrZVZhck5hbWUgKyBcIn1cIjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG1hdGNoZWQubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignYGtleWZyYW1lc2Agb3V0cHV0IGdvdCBpbnRlcnBvbGF0ZWQgaW50byBwbGFpbiBzdHJpbmcsIHBsZWFzZSB3cmFwIGl0IHdpdGggYGNzc2AuXFxuXFxuJyArICdJbnN0ZWFkIG9mIGRvaW5nIHRoaXM6XFxuXFxuJyArIFtdLmNvbmNhdChtYXRjaGVkLCBbXCJgXCIgKyByZXBsYWNlZCArIFwiYFwiXSkuam9pbignXFxuJykgKyAnXFxuXFxuWW91IHNob3VsZCB3cmFwIGl0IHdpdGggYGNzc2AgbGlrZSB0aGlzOlxcblxcbicgKyAoXCJjc3NgXCIgKyByZXBsYWNlZCArIFwiYFwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gIH0gLy8gZmluYWxpemUgc3RyaW5nIHZhbHVlcyAocmVndWxhciBzdHJpbmdzIGFuZCBmdW5jdGlvbnMgaW50ZXJwb2xhdGVkIGludG8gY3NzIGNhbGxzKVxuXG5cbiAgaWYgKHJlZ2lzdGVyZWQgPT0gbnVsbCkge1xuICAgIHJldHVybiBpbnRlcnBvbGF0aW9uO1xuICB9XG5cbiAgdmFyIGNhY2hlZCA9IHJlZ2lzdGVyZWRbaW50ZXJwb2xhdGlvbl07XG4gIHJldHVybiBjYWNoZWQgIT09IHVuZGVmaW5lZCA/IGNhY2hlZCA6IGludGVycG9sYXRpb247XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0cmluZ0Zyb21PYmplY3QobWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIG9iaikge1xuICB2YXIgc3RyaW5nID0gJyc7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzdHJpbmcgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgb2JqW2ldKSArIFwiO1wiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBfa2V5IGluIG9iaikge1xuICAgICAgdmFyIHZhbHVlID0gb2JqW19rZXldO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAocmVnaXN0ZXJlZCAhPSBudWxsICYmIHJlZ2lzdGVyZWRbdmFsdWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzdHJpbmcgKz0gX2tleSArIFwie1wiICsgcmVnaXN0ZXJlZFt2YWx1ZV0gKyBcIn1cIjtcbiAgICAgICAgfSBlbHNlIGlmIChpc1Byb2Nlc3NhYmxlVmFsdWUodmFsdWUpKSB7XG4gICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoX2tleSkgKyBcIjpcIiArIHByb2Nlc3NTdHlsZVZhbHVlKF9rZXksIHZhbHVlKSArIFwiO1wiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoX2tleSA9PT0gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUicgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihub0NvbXBvbmVudFNlbGVjdG9yTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlWzBdID09PSAnc3RyaW5nJyAmJiAocmVnaXN0ZXJlZCA9PSBudWxsIHx8IHJlZ2lzdGVyZWRbdmFsdWVbMF1dID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHZhbHVlLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgaWYgKGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZVtfaV0pKSB7XG4gICAgICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShfa2V5LCB2YWx1ZVtfaV0pICsgXCI7XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBpbnRlcnBvbGF0ZWQgPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCB2YWx1ZSk7XG5cbiAgICAgICAgICBzd2l0Y2ggKF9rZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgICAgICAgICBjYXNlICdhbmltYXRpb25OYW1lJzpcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBpbnRlcnBvbGF0ZWQgKyBcIjtcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgX2tleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoVU5ERUZJTkVEX0FTX09CSkVDVF9LRVlfRVJST1IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0cmluZyArPSBfa2V5ICsgXCJ7XCIgKyBpbnRlcnBvbGF0ZWQgKyBcIn1cIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHJpbmc7XG59XG5cbnZhciBsYWJlbFBhdHRlcm4gPSAvbGFiZWw6XFxzKihbXlxccztcXG57XSspXFxzKig7fCQpL2c7XG52YXIgc291cmNlTWFwUGF0dGVybjtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc291cmNlTWFwUGF0dGVybiA9IC9cXC9cXCojXFxzc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uXFwvanNvbjtcXFMrXFxzK1xcKlxcLy9nO1xufSAvLyB0aGlzIGlzIHRoZSBjdXJzb3IgZm9yIGtleWZyYW1lc1xuLy8ga2V5ZnJhbWVzIGFyZSBzdG9yZWQgb24gdGhlIFNlcmlhbGl6ZWRTdHlsZXMgb2JqZWN0IGFzIGEgbGlua2VkIGxpc3RcblxuXG52YXIgY3Vyc29yO1xudmFyIHNlcmlhbGl6ZVN0eWxlcyA9IGZ1bmN0aW9uIHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCByZWdpc3RlcmVkLCBtZXJnZWRQcm9wcykge1xuICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGFyZ3NbMF0gPT09ICdvYmplY3QnICYmIGFyZ3NbMF0gIT09IG51bGwgJiYgYXJnc1swXS5zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBhcmdzWzBdO1xuICB9XG5cbiAgdmFyIHN0cmluZ01vZGUgPSB0cnVlO1xuICB2YXIgc3R5bGVzID0gJyc7XG4gIGN1cnNvciA9IHVuZGVmaW5lZDtcbiAgdmFyIHN0cmluZ3MgPSBhcmdzWzBdO1xuXG4gIGlmIChzdHJpbmdzID09IG51bGwgfHwgc3RyaW5ncy5yYXcgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0cmluZ01vZGUgPSBmYWxzZTtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgc3RyaW5ncyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc3RyaW5nc1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICB9XG5cbiAgICBzdHlsZXMgKz0gc3RyaW5nc1swXTtcbiAgfSAvLyB3ZSBzdGFydCBhdCAxIHNpbmNlIHdlJ3ZlIGFscmVhZHkgaGFuZGxlZCB0aGUgZmlyc3QgYXJnXG5cblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgYXJnc1tpXSk7XG5cbiAgICBpZiAoc3RyaW5nTW9kZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc3RyaW5nc1tpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgICAgfVxuXG4gICAgICBzdHlsZXMgKz0gc3RyaW5nc1tpXTtcbiAgICB9XG4gIH1cblxuICB2YXIgc291cmNlTWFwO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgc3R5bGVzID0gc3R5bGVzLnJlcGxhY2Uoc291cmNlTWFwUGF0dGVybiwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICBzb3VyY2VNYXAgPSBtYXRjaDtcbiAgICAgIHJldHVybiAnJztcbiAgICB9KTtcbiAgfSAvLyB1c2luZyBhIGdsb2JhbCByZWdleCB3aXRoIC5leGVjIGlzIHN0YXRlZnVsIHNvIGxhc3RJbmRleCBoYXMgdG8gYmUgcmVzZXQgZWFjaCB0aW1lXG5cblxuICBsYWJlbFBhdHRlcm4ubGFzdEluZGV4ID0gMDtcbiAgdmFyIGlkZW50aWZpZXJOYW1lID0gJyc7XG4gIHZhciBtYXRjaDsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YjgwOWMyY2YyOTQ5ODAwYTBmNjFmYjVcblxuICB3aGlsZSAoKG1hdGNoID0gbGFiZWxQYXR0ZXJuLmV4ZWMoc3R5bGVzKSkgIT09IG51bGwpIHtcbiAgICBpZGVudGlmaWVyTmFtZSArPSAnLScgKyAvLyAkRmxvd0ZpeE1lIHdlIGtub3cgaXQncyBub3QgbnVsbFxuICAgIG1hdGNoWzFdO1xuICB9XG5cbiAgdmFyIG5hbWUgPSBoYXNoU3RyaW5nKHN0eWxlcykgKyBpZGVudGlmaWVyTmFtZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWUgU2VyaWFsaXplZFN0eWxlcyB0eXBlIGRvZXNuJ3QgaGF2ZSB0b1N0cmluZyBwcm9wZXJ0eSAoYW5kIHdlIGRvbid0IHdhbnQgdG8gYWRkIGl0KVxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgICBtYXA6IHNvdXJjZU1hcCxcbiAgICAgIG5leHQ6IGN1cnNvcixcbiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFwiWW91IGhhdmUgdHJpZWQgdG8gc3RyaW5naWZ5IG9iamVjdCByZXR1cm5lZCBmcm9tIGBjc3NgIGZ1bmN0aW9uLiBJdCBpc24ndCBzdXBwb3NlZCB0byBiZSB1c2VkIGRpcmVjdGx5IChlLmcuIGFzIHZhbHVlIG9mIHRoZSBgY2xhc3NOYW1lYCBwcm9wKSwgYnV0IHJhdGhlciBoYW5kZWQgdG8gZW1vdGlvbiBzbyBpdCBjYW4gaGFuZGxlIGl0IChlLmcuIGFzIHZhbHVlIG9mIGBjc3NgIHByb3ApLlwiO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgbmV4dDogY3Vyc29yXG4gIH07XG59O1xuXG5leHBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfTtcbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZ2FyeWNvdXJ0L211cm11cmhhc2gtanNcbi8vIFBvcnRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hYXBwbGVieS9zbWhhc2hlci9ibG9iLzYxYTA1MzBmMjgyNzdmMmU4NTBiZmMzOTYwMGNlNjFkMDJiNTE4ZGUvc3JjL011cm11ckhhc2gyLmNwcCNMMzctTDg2XG5mdW5jdGlvbiBtdXJtdXIyKHN0cikge1xuICAvLyAnbScgYW5kICdyJyBhcmUgbWl4aW5nIGNvbnN0YW50cyBnZW5lcmF0ZWQgb2ZmbGluZS5cbiAgLy8gVGhleSdyZSBub3QgcmVhbGx5ICdtYWdpYycsIHRoZXkganVzdCBoYXBwZW4gdG8gd29yayB3ZWxsLlxuICAvLyBjb25zdCBtID0gMHg1YmQxZTk5NTtcbiAgLy8gY29uc3QgciA9IDI0O1xuICAvLyBJbml0aWFsaXplIHRoZSBoYXNoXG4gIHZhciBoID0gMDsgLy8gTWl4IDQgYnl0ZXMgYXQgYSB0aW1lIGludG8gdGhlIGhhc2hcblxuICB2YXIgayxcbiAgICAgIGkgPSAwLFxuICAgICAgbGVuID0gc3RyLmxlbmd0aDtcblxuICBmb3IgKDsgbGVuID49IDQ7ICsraSwgbGVuIC09IDQpIHtcbiAgICBrID0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmIHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCA4IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAxNiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMjQ7XG4gICAgayA9XG4gICAgLyogTWF0aC5pbXVsKGssIG0pOiAqL1xuICAgIChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGsgPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gICAgayBePVxuICAgIC8qIGsgPj4+IHI6ICovXG4gICAgayA+Pj4gMjQ7XG4gICAgaCA9XG4gICAgLyogTWF0aC5pbXVsKGssIG0pOiAqL1xuICAgIChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGsgPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNikgXlxuICAgIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICB9IC8vIEhhbmRsZSB0aGUgbGFzdCBmZXcgYnl0ZXMgb2YgdGhlIGlucHV0IGFycmF5XG5cblxuICBzd2l0Y2ggKGxlbikge1xuICAgIGNhc2UgMzpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAyKSAmIDB4ZmYpIDw8IDE2O1xuXG4gICAgY2FzZSAyOlxuICAgICAgaCBePSAoc3RyLmNoYXJDb2RlQXQoaSArIDEpICYgMHhmZikgPDwgODtcblxuICAgIGNhc2UgMTpcbiAgICAgIGggXj0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmO1xuICAgICAgaCA9XG4gICAgICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gICAgICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICB9IC8vIERvIGEgZmV3IGZpbmFsIG1peGVzIG9mIHRoZSBoYXNoIHRvIGVuc3VyZSB0aGUgbGFzdCBmZXdcbiAgLy8gYnl0ZXMgYXJlIHdlbGwtaW5jb3Jwb3JhdGVkLlxuXG5cbiAgaCBePSBoID4+PiAxMztcbiAgaCA9XG4gIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgcmV0dXJuICgoaCBeIGggPj4+IDE1KSA+Pj4gMCkudG9TdHJpbmcoMzYpO1xufVxuXG5leHBvcnQgeyBtdXJtdXIyIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxudmFyIHN5bmNGYWxsYmFjayA9IGZ1bmN0aW9uIHN5bmNGYWxsYmFjayhjcmVhdGUpIHtcbiAgcmV0dXJuIGNyZWF0ZSgpO1xufTtcblxudmFyIHVzZUluc2VydGlvbkVmZmVjdCA9IFJlYWN0Wyd1c2VJbnNlcnRpb24nICsgJ0VmZmVjdCddID8gUmVhY3RbJ3VzZUluc2VydGlvbicgKyAnRWZmZWN0J10gOiBmYWxzZTtcbnZhciB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrID0gdXNlSW5zZXJ0aW9uRWZmZWN0IHx8IHN5bmNGYWxsYmFjaztcbnZhciB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2sgPSB1c2VJbnNlcnRpb25FZmZlY3QgfHwgUmVhY3QudXNlTGF5b3V0RWZmZWN0O1xuXG5leHBvcnQgeyB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrLCB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2sgfTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUNvbnRleHQsIGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlQ2FjaGUgZnJvbSAnQGVtb3Rpb24vY2FjaGUnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHdlYWtNZW1vaXplIGZyb20gJ0BlbW90aW9uL3dlYWstbWVtb2l6ZSc7XG5pbXBvcnQgaG9pc3ROb25SZWFjdFN0YXRpY3MgZnJvbSAnLi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIHJlZ2lzdGVyU3R5bGVzLCBpbnNlcnRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuaW1wb3J0IHsgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayB9IGZyb20gJ0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzJztcblxudmFyIGlzQnJvd3NlciA9IFwib2JqZWN0XCIgIT09ICd1bmRlZmluZWQnO1xudmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cbnZhciBFbW90aW9uQ2FjaGVDb250ZXh0ID0gLyogI19fUFVSRV9fICovUmVhY3QuY3JlYXRlQ29udGV4dCggLy8gd2UncmUgZG9pbmcgdGhpcyB0byBhdm9pZCBwcmVjb25zdHJ1Y3QncyBkZWFkIGNvZGUgZWxpbWluYXRpb24gaW4gdGhpcyBvbmUgY2FzZVxuLy8gYmVjYXVzZSB0aGlzIG1vZHVsZSBpcyBwcmltYXJpbHkgaW50ZW5kZWQgZm9yIHRoZSBicm93c2VyIGFuZCBub2RlXG4vLyBidXQgaXQncyBhbHNvIHJlcXVpcmVkIGluIHJlYWN0IG5hdGl2ZSBhbmQgc2ltaWxhciBlbnZpcm9ubWVudHMgc29tZXRpbWVzXG4vLyBhbmQgd2UgY291bGQgaGF2ZSBhIHNwZWNpYWwgYnVpbGQganVzdCBmb3IgdGhhdFxuLy8gYnV0IHRoaXMgaXMgbXVjaCBlYXNpZXIgYW5kIHRoZSBuYXRpdmUgcGFja2FnZXNcbi8vIG1pZ2h0IHVzZSBhIGRpZmZlcmVudCB0aGVtZSBjb250ZXh0IGluIHRoZSBmdXR1cmUgYW55d2F5XG50eXBlb2YgSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnID8gLyogI19fUFVSRV9fICovY3JlYXRlQ2FjaGUoe1xuICBrZXk6ICdjc3MnXG59KSA6IG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBFbW90aW9uQ2FjaGVDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25DYWNoZUNvbnRleHQnO1xufVxuXG52YXIgQ2FjaGVQcm92aWRlciA9IEVtb3Rpb25DYWNoZUNvbnRleHQuUHJvdmlkZXI7XG52YXIgX191bnNhZmVfdXNlRW1vdGlvbkNhY2hlID0gZnVuY3Rpb24gdXNlRW1vdGlvbkNhY2hlKCkge1xuICByZXR1cm4gdXNlQ29udGV4dChFbW90aW9uQ2FjaGVDb250ZXh0KTtcbn07XG5cbnZhciB3aXRoRW1vdGlvbkNhY2hlID0gZnVuY3Rpb24gd2l0aEVtb3Rpb25DYWNoZShmdW5jKSB7XG4gIC8vICRGbG93Rml4TWVcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gICAgLy8gdGhlIGNhY2hlIHdpbGwgbmV2ZXIgYmUgbnVsbCBpbiB0aGUgYnJvd3NlclxuICAgIHZhciBjYWNoZSA9IHVzZUNvbnRleHQoRW1vdGlvbkNhY2hlQ29udGV4dCk7XG4gICAgcmV0dXJuIGZ1bmMocHJvcHMsIGNhY2hlLCByZWYpO1xuICB9KTtcbn07XG5cbmlmICghaXNCcm93c2VyKSB7XG4gIHdpdGhFbW90aW9uQ2FjaGUgPSBmdW5jdGlvbiB3aXRoRW1vdGlvbkNhY2hlKGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICB2YXIgY2FjaGUgPSB1c2VDb250ZXh0KEVtb3Rpb25DYWNoZUNvbnRleHQpO1xuXG4gICAgICBpZiAoY2FjaGUgPT09IG51bGwpIHtcbiAgICAgICAgLy8geWVzLCB3ZSdyZSBwb3RlbnRpYWxseSBjcmVhdGluZyB0aGlzIG9uIGV2ZXJ5IHJlbmRlclxuICAgICAgICAvLyBpdCBkb2Vzbid0IGFjdHVhbGx5IG1hdHRlciB0aG91Z2ggc2luY2UgaXQncyBvbmx5IG9uIHRoZSBzZXJ2ZXJcbiAgICAgICAgLy8gc28gdGhlcmUgd2lsbCBvbmx5IGV2ZXJ5IGJlIGEgc2luZ2xlIHJlbmRlclxuICAgICAgICAvLyB0aGF0IGNvdWxkIGNoYW5nZSBpbiB0aGUgZnV0dXJlIGJlY2F1c2Ugb2Ygc3VzcGVuc2UgYW5kIGV0Yy4gYnV0IGZvciBub3csXG4gICAgICAgIC8vIHRoaXMgd29ya3MgYW5kIGkgZG9uJ3Qgd2FudCB0byBvcHRpbWlzZSBmb3IgYSBmdXR1cmUgdGhpbmcgdGhhdCB3ZSBhcmVuJ3Qgc3VyZSBhYm91dFxuICAgICAgICBjYWNoZSA9IGNyZWF0ZUNhY2hlKHtcbiAgICAgICAgICBrZXk6ICdjc3MnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRW1vdGlvbkNhY2hlQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICAgIHZhbHVlOiBjYWNoZVxuICAgICAgICB9LCBmdW5jKHByb3BzLCBjYWNoZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMocHJvcHMsIGNhY2hlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufVxuXG52YXIgVGhlbWVDb250ZXh0ID0gLyogI19fUFVSRV9fICovUmVhY3QuY3JlYXRlQ29udGV4dCh7fSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFRoZW1lQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdFbW90aW9uVGhlbWVDb250ZXh0Jztcbn1cblxudmFyIHVzZVRoZW1lID0gZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG59O1xuXG52YXIgZ2V0VGhlbWUgPSBmdW5jdGlvbiBnZXRUaGVtZShvdXRlclRoZW1lLCB0aGVtZSkge1xuICBpZiAodHlwZW9mIHRoZW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIG1lcmdlZFRoZW1lID0gdGhlbWUob3V0ZXJUaGVtZSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAobWVyZ2VkVGhlbWUgPT0gbnVsbCB8fCB0eXBlb2YgbWVyZ2VkVGhlbWUgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkobWVyZ2VkVGhlbWUpKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbVGhlbWVQcm92aWRlcl0gUGxlYXNlIHJldHVybiBhbiBvYmplY3QgZnJvbSB5b3VyIHRoZW1lIGZ1bmN0aW9uLCBpLmUuIHRoZW1lPXsoKSA9PiAoe30pfSEnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVyZ2VkVGhlbWU7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAodGhlbWUgPT0gbnVsbCB8fCB0eXBlb2YgdGhlbWUgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkodGhlbWUpKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignW1RoZW1lUHJvdmlkZXJdIFBsZWFzZSBtYWtlIHlvdXIgdGhlbWUgcHJvcCBhIHBsYWluIG9iamVjdCcpO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdXRlclRoZW1lLCB0aGVtZSk7XG59O1xuXG52YXIgY3JlYXRlQ2FjaGVXaXRoVGhlbWUgPSAvKiAjX19QVVJFX18gKi93ZWFrTWVtb2l6ZShmdW5jdGlvbiAob3V0ZXJUaGVtZSkge1xuICByZXR1cm4gd2Vha01lbW9pemUoZnVuY3Rpb24gKHRoZW1lKSB7XG4gICAgcmV0dXJuIGdldFRoZW1lKG91dGVyVGhlbWUsIHRoZW1lKTtcbiAgfSk7XG59KTtcbnZhciBUaGVtZVByb3ZpZGVyID0gZnVuY3Rpb24gVGhlbWVQcm92aWRlcihwcm9wcykge1xuICB2YXIgdGhlbWUgPSBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG5cbiAgaWYgKHByb3BzLnRoZW1lICE9PSB0aGVtZSkge1xuICAgIHRoZW1lID0gY3JlYXRlQ2FjaGVXaXRoVGhlbWUodGhlbWUpKHByb3BzLnRoZW1lKTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUaGVtZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogdGhlbWVcbiAgfSwgcHJvcHMuY2hpbGRyZW4pO1xufTtcbmZ1bmN0aW9uIHdpdGhUaGVtZShDb21wb25lbnQpIHtcbiAgdmFyIGNvbXBvbmVudE5hbWUgPSBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG5cbiAgdmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihwcm9wcywgcmVmKSB7XG4gICAgdmFyIHRoZW1lID0gUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgcHJvcHMpKTtcbiAgfTsgLy8gJEZsb3dGaXhNZVxuXG5cbiAgdmFyIFdpdGhUaGVtZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKHJlbmRlcik7XG4gIFdpdGhUaGVtZS5kaXNwbGF5TmFtZSA9IFwiV2l0aFRoZW1lKFwiICsgY29tcG9uZW50TmFtZSArIFwiKVwiO1xuICByZXR1cm4gaG9pc3ROb25SZWFjdFN0YXRpY3MoV2l0aFRoZW1lLCBDb21wb25lbnQpO1xufVxuXG52YXIgZ2V0TGFzdFBhcnQgPSBmdW5jdGlvbiBnZXRMYXN0UGFydChmdW5jdGlvbk5hbWUpIHtcbiAgLy8gVGhlIG1hdGNoIG1heSBiZSBzb21ldGhpbmcgbGlrZSAnT2JqZWN0LmNyZWF0ZUVtb3Rpb25Qcm9wcycgb3JcbiAgLy8gJ0xvYWRlci5wcm90b3R5cGUucmVuZGVyJ1xuICB2YXIgcGFydHMgPSBmdW5jdGlvbk5hbWUuc3BsaXQoJy4nKTtcbiAgcmV0dXJuIHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdO1xufTtcblxudmFyIGdldEZ1bmN0aW9uTmFtZUZyb21TdGFja1RyYWNlTGluZSA9IGZ1bmN0aW9uIGdldEZ1bmN0aW9uTmFtZUZyb21TdGFja1RyYWNlTGluZShsaW5lKSB7XG4gIC8vIFY4XG4gIHZhciBtYXRjaCA9IC9eXFxzK2F0XFxzKyhbQS1aYS16MC05JC5dKylcXHMvLmV4ZWMobGluZSk7XG4gIGlmIChtYXRjaCkgcmV0dXJuIGdldExhc3RQYXJ0KG1hdGNoWzFdKTsgLy8gU2FmYXJpIC8gRmlyZWZveFxuXG4gIG1hdGNoID0gL14oW0EtWmEtejAtOSQuXSspQC8uZXhlYyhsaW5lKTtcbiAgaWYgKG1hdGNoKSByZXR1cm4gZ2V0TGFzdFBhcnQobWF0Y2hbMV0pO1xuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxudmFyIGludGVybmFsUmVhY3RGdW5jdGlvbk5hbWVzID0gLyogI19fUFVSRV9fICovbmV3IFNldChbJ3JlbmRlcldpdGhIb29rcycsICdwcm9jZXNzQ2hpbGQnLCAnZmluaXNoQ2xhc3NDb21wb25lbnQnLCAncmVuZGVyVG9TdHJpbmcnXSk7IC8vIFRoZXNlIGlkZW50aWZpZXJzIGNvbWUgZnJvbSBlcnJvciBzdGFja3MsIHNvIHRoZXkgaGF2ZSB0byBiZSB2YWxpZCBKU1xuLy8gaWRlbnRpZmllcnMsIHRodXMgd2Ugb25seSBuZWVkIHRvIHJlcGxhY2Ugd2hhdCBpcyBhIHZhbGlkIGNoYXJhY3RlciBmb3IgSlMsXG4vLyBidXQgbm90IGZvciBDU1MuXG5cbnZhciBzYW5pdGl6ZUlkZW50aWZpZXIgPSBmdW5jdGlvbiBzYW5pdGl6ZUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICByZXR1cm4gaWRlbnRpZmllci5yZXBsYWNlKC9cXCQvZywgJy0nKTtcbn07XG5cbnZhciBnZXRMYWJlbEZyb21TdGFja1RyYWNlID0gZnVuY3Rpb24gZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZShzdGFja1RyYWNlKSB7XG4gIGlmICghc3RhY2tUcmFjZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgdmFyIGxpbmVzID0gc3RhY2tUcmFjZS5zcGxpdCgnXFxuJyk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBmdW5jdGlvbk5hbWUgPSBnZXRGdW5jdGlvbk5hbWVGcm9tU3RhY2tUcmFjZUxpbmUobGluZXNbaV0pOyAvLyBUaGUgZmlyc3QgbGluZSBvZiBWOCBzdGFjayB0cmFjZXMgaXMganVzdCBcIkVycm9yXCJcblxuICAgIGlmICghZnVuY3Rpb25OYW1lKSBjb250aW51ZTsgLy8gSWYgd2UgcmVhY2ggb25lIG9mIHRoZXNlLCB3ZSBoYXZlIGdvbmUgdG9vIGZhciBhbmQgc2hvdWxkIHF1aXRcblxuICAgIGlmIChpbnRlcm5hbFJlYWN0RnVuY3Rpb25OYW1lcy5oYXMoZnVuY3Rpb25OYW1lKSkgYnJlYWs7IC8vIFRoZSBjb21wb25lbnQgbmFtZSBpcyB0aGUgZmlyc3QgZnVuY3Rpb24gaW4gdGhlIHN0YWNrIHRoYXQgc3RhcnRzIHdpdGggYW5cbiAgICAvLyB1cHBlcmNhc2UgbGV0dGVyXG5cbiAgICBpZiAoL15bQS1aXS8udGVzdChmdW5jdGlvbk5hbWUpKSByZXR1cm4gc2FuaXRpemVJZGVudGlmaWVyKGZ1bmN0aW9uTmFtZSk7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxudmFyIHR5cGVQcm9wTmFtZSA9ICdfX0VNT1RJT05fVFlQRV9QTEVBU0VfRE9fTk9UX1VTRV9fJztcbnZhciBsYWJlbFByb3BOYW1lID0gJ19fRU1PVElPTl9MQUJFTF9QTEVBU0VfRE9fTk9UX1VTRV9fJztcbnZhciBjcmVhdGVFbW90aW9uUHJvcHMgPSBmdW5jdGlvbiBjcmVhdGVFbW90aW9uUHJvcHModHlwZSwgcHJvcHMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIHByb3BzLmNzcyA9PT0gJ3N0cmluZycgJiYgLy8gY2hlY2sgaWYgdGhlcmUgaXMgYSBjc3MgZGVjbGFyYXRpb25cbiAgcHJvcHMuY3NzLmluZGV4T2YoJzonKSAhPT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdHJpbmdzIGFyZSBub3QgYWxsb3dlZCBhcyBjc3MgcHJvcCB2YWx1ZXMsIHBsZWFzZSB3cmFwIGl0IGluIGEgY3NzIHRlbXBsYXRlIGxpdGVyYWwgZnJvbSAnQGVtb3Rpb24vcmVhY3QnIGxpa2UgdGhpczogY3NzYFwiICsgcHJvcHMuY3NzICsgXCJgXCIpO1xuICB9XG5cbiAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIGtleSkpIHtcbiAgICAgIG5ld1Byb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIG5ld1Byb3BzW3R5cGVQcm9wTmFtZV0gPSB0eXBlOyAvLyBGb3IgcGVyZm9ybWFuY2UsIG9ubHkgY2FsbCBnZXRMYWJlbEZyb21TdGFja1RyYWNlIGluIGRldmVsb3BtZW50IGFuZCB3aGVuXG4gIC8vIHRoZSBsYWJlbCBoYXNuJ3QgYWxyZWFkeSBiZWVuIGNvbXB1dGVkXG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgISFwcm9wcy5jc3MgJiYgKHR5cGVvZiBwcm9wcy5jc3MgIT09ICdvYmplY3QnIHx8IHR5cGVvZiBwcm9wcy5jc3MubmFtZSAhPT0gJ3N0cmluZycgfHwgcHJvcHMuY3NzLm5hbWUuaW5kZXhPZignLScpID09PSAtMSkpIHtcbiAgICB2YXIgbGFiZWwgPSBnZXRMYWJlbEZyb21TdGFja1RyYWNlKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICBpZiAobGFiZWwpIG5ld1Byb3BzW2xhYmVsUHJvcE5hbWVdID0gbGFiZWw7XG4gIH1cblxuICByZXR1cm4gbmV3UHJvcHM7XG59O1xuXG52YXIgSW5zZXJ0aW9uID0gZnVuY3Rpb24gSW5zZXJ0aW9uKF9yZWYpIHtcbiAgdmFyIGNhY2hlID0gX3JlZi5jYWNoZSxcbiAgICAgIHNlcmlhbGl6ZWQgPSBfcmVmLnNlcmlhbGl6ZWQsXG4gICAgICBpc1N0cmluZ1RhZyA9IF9yZWYuaXNTdHJpbmdUYWc7XG4gIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKTtcbiAgfSk7XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG52YXIgRW1vdGlvbiA9IC8qICNfX1BVUkVfXyAqL3dpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjYWNoZSwgcmVmKSB7XG4gIHZhciBjc3NQcm9wID0gcHJvcHMuY3NzOyAvLyBzbyB0aGF0IHVzaW5nIGBjc3NgIGZyb20gYGVtb3Rpb25gIGFuZCBwYXNzaW5nIHRoZSByZXN1bHQgdG8gdGhlIGNzcyBwcm9wIHdvcmtzXG4gIC8vIG5vdCBwYXNzaW5nIHRoZSByZWdpc3RlcmVkIGNhY2hlIHRvIHNlcmlhbGl6ZVN0eWxlcyBiZWNhdXNlIGl0IHdvdWxkXG4gIC8vIG1ha2UgY2VydGFpbiBiYWJlbCBvcHRpbWlzYXRpb25zIG5vdCBwb3NzaWJsZVxuXG4gIGlmICh0eXBlb2YgY3NzUHJvcCA9PT0gJ3N0cmluZycgJiYgY2FjaGUucmVnaXN0ZXJlZFtjc3NQcm9wXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY3NzUHJvcCA9IGNhY2hlLnJlZ2lzdGVyZWRbY3NzUHJvcF07XG4gIH1cblxuICB2YXIgV3JhcHBlZENvbXBvbmVudCA9IHByb3BzW3R5cGVQcm9wTmFtZV07XG4gIHZhciByZWdpc3RlcmVkU3R5bGVzID0gW2Nzc1Byb3BdO1xuICB2YXIgY2xhc3NOYW1lID0gJyc7XG5cbiAgaWYgKHR5cGVvZiBwcm9wcy5jbGFzc05hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgY2xhc3NOYW1lID0gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhjYWNoZS5yZWdpc3RlcmVkLCByZWdpc3RlcmVkU3R5bGVzLCBwcm9wcy5jbGFzc05hbWUpO1xuICB9IGVsc2UgaWYgKHByb3BzLmNsYXNzTmFtZSAhPSBudWxsKSB7XG4gICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lICsgXCIgXCI7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhyZWdpc3RlcmVkU3R5bGVzLCB1bmRlZmluZWQsIFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc2VyaWFsaXplZC5uYW1lLmluZGV4T2YoJy0nKSA9PT0gLTEpIHtcbiAgICB2YXIgbGFiZWxGcm9tU3RhY2sgPSBwcm9wc1tsYWJlbFByb3BOYW1lXTtcblxuICAgIGlmIChsYWJlbEZyb21TdGFjaykge1xuICAgICAgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhbc2VyaWFsaXplZCwgJ2xhYmVsOicgKyBsYWJlbEZyb21TdGFjayArICc7J10pO1xuICAgIH1cbiAgfVxuXG4gIGNsYXNzTmFtZSArPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcbiAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIGtleSkgJiYga2V5ICE9PSAnY3NzJyAmJiBrZXkgIT09IHR5cGVQcm9wTmFtZSAmJiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyB8fCBrZXkgIT09IGxhYmVsUHJvcE5hbWUpKSB7XG4gICAgICBuZXdQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICB9XG4gIH1cblxuICBuZXdQcm9wcy5yZWYgPSByZWY7XG4gIG5ld1Byb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbnNlcnRpb24sIHtcbiAgICBjYWNoZTogY2FjaGUsXG4gICAgc2VyaWFsaXplZDogc2VyaWFsaXplZCxcbiAgICBpc1N0cmluZ1RhZzogdHlwZW9mIFdyYXBwZWRDb21wb25lbnQgPT09ICdzdHJpbmcnXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBuZXdQcm9wcykpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEVtb3Rpb24uZGlzcGxheU5hbWUgPSAnRW1vdGlvbkNzc1Byb3BJbnRlcm5hbCc7XG59XG5cbnZhciBFbW90aW9uJDEgPSBFbW90aW9uO1xuXG5leHBvcnQgeyBDYWNoZVByb3ZpZGVyIGFzIEMsIEVtb3Rpb24kMSBhcyBFLCBUaGVtZUNvbnRleHQgYXMgVCwgX191bnNhZmVfdXNlRW1vdGlvbkNhY2hlIGFzIF8sIFRoZW1lUHJvdmlkZXIgYXMgYSwgd2l0aFRoZW1lIGFzIGIsIGNyZWF0ZUVtb3Rpb25Qcm9wcyBhcyBjLCBoYXNPd25Qcm9wZXJ0eSBhcyBoLCBpc0Jyb3dzZXIgYXMgaSwgdXNlVGhlbWUgYXMgdSwgd2l0aEVtb3Rpb25DYWNoZSBhcyB3IH07XG4iLCJ2YXIgaXNCcm93c2VyID0gXCJvYmplY3RcIiAhPT0gJ3VuZGVmaW5lZCc7XG5mdW5jdGlvbiBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZXMpIHtcbiAgdmFyIHJhd0NsYXNzTmFtZSA9ICcnO1xuICBjbGFzc05hbWVzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgaWYgKHJlZ2lzdGVyZWRbY2xhc3NOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZWdpc3RlcmVkU3R5bGVzLnB1c2gocmVnaXN0ZXJlZFtjbGFzc05hbWVdICsgXCI7XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByYXdDbGFzc05hbWUgKz0gY2xhc3NOYW1lICsgXCIgXCI7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJhd0NsYXNzTmFtZTtcbn1cbnZhciByZWdpc3RlclN0eWxlcyA9IGZ1bmN0aW9uIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZykge1xuICB2YXIgY2xhc3NOYW1lID0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG5cbiAgaWYgKCAvLyB3ZSBvbmx5IG5lZWQgdG8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIHJlZ2lzdGVyZWQgY2FjaGUgaWYgdGhlXG4gIC8vIGNsYXNzIG5hbWUgY291bGQgYmUgdXNlZCBmdXJ0aGVyIGRvd25cbiAgLy8gdGhlIHRyZWUgYnV0IGlmIGl0J3MgYSBzdHJpbmcgdGFnLCB3ZSBrbm93IGl0IHdvbid0XG4gIC8vIHNvIHdlIGRvbid0IGhhdmUgdG8gYWRkIGl0IHRvIHJlZ2lzdGVyZWQgY2FjaGUuXG4gIC8vIHRoaXMgaW1wcm92ZXMgbWVtb3J5IHVzYWdlIHNpbmNlIHdlIGNhbiBhdm9pZCBzdG9yaW5nIHRoZSB3aG9sZSBzdHlsZSBzdHJpbmdcbiAgKGlzU3RyaW5nVGFnID09PSBmYWxzZSB8fCAvLyB3ZSBuZWVkIHRvIGFsd2F5cyBzdG9yZSBpdCBpZiB3ZSdyZSBpbiBjb21wYXQgbW9kZSBhbmRcbiAgLy8gaW4gbm9kZSBzaW5jZSBlbW90aW9uLXNlcnZlciByZWxpZXMgb24gd2hldGhlciBhIHN0eWxlIGlzIGluXG4gIC8vIHRoZSByZWdpc3RlcmVkIGNhY2hlIHRvIGtub3cgd2hldGhlciBhIHN0eWxlIGlzIGdsb2JhbCBvciBub3RcbiAgLy8gYWxzbywgbm90ZSB0aGF0IHRoaXMgY2hlY2sgd2lsbCBiZSBkZWFkIGNvZGUgZWxpbWluYXRlZCBpbiB0aGUgYnJvd3NlclxuICBpc0Jyb3dzZXIgPT09IGZhbHNlICkgJiYgY2FjaGUucmVnaXN0ZXJlZFtjbGFzc05hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWNoZS5yZWdpc3RlcmVkW2NsYXNzTmFtZV0gPSBzZXJpYWxpemVkLnN0eWxlcztcbiAgfVxufTtcbnZhciBpbnNlcnRTdHlsZXMgPSBmdW5jdGlvbiBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKSB7XG4gIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIHZhciBjbGFzc05hbWUgPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcblxuICBpZiAoY2FjaGUuaW5zZXJ0ZWRbc2VyaWFsaXplZC5uYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBzZXJpYWxpemVkO1xuXG4gICAgZG8ge1xuICAgICAgY2FjaGUuaW5zZXJ0KHNlcmlhbGl6ZWQgPT09IGN1cnJlbnQgPyBcIi5cIiArIGNsYXNzTmFtZSA6ICcnLCBjdXJyZW50LCBjYWNoZS5zaGVldCwgdHJ1ZSk7XG5cbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gICAgfSB3aGlsZSAoY3VycmVudCAhPT0gdW5kZWZpbmVkKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgaW5zZXJ0U3R5bGVzLCByZWdpc3RlclN0eWxlcyB9O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGlzUHJvcFZhbGlkIGZyb20gJ0BlbW90aW9uL2lzLXByb3AtdmFsaWQnO1xuaW1wb3J0IHsgd2l0aEVtb3Rpb25DYWNoZSwgVGhlbWVDb250ZXh0IH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgcmVnaXN0ZXJTdHlsZXMsIGluc2VydFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3V0aWxzJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgeyB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrIH0gZnJvbSAnQGVtb3Rpb24vdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MnO1xuXG52YXIgdGVzdE9taXRQcm9wc09uU3RyaW5nVGFnID0gaXNQcm9wVmFsaWQ7XG5cbnZhciB0ZXN0T21pdFByb3BzT25Db21wb25lbnQgPSBmdW5jdGlvbiB0ZXN0T21pdFByb3BzT25Db21wb25lbnQoa2V5KSB7XG4gIHJldHVybiBrZXkgIT09ICd0aGVtZSc7XG59O1xuXG52YXIgZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wID0gZnVuY3Rpb24gZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKHRhZykge1xuICByZXR1cm4gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgJiYgLy8gOTYgaXMgb25lIGxlc3MgdGhhbiB0aGUgY2hhciBjb2RlXG4gIC8vIGZvciBcImFcIiBzbyB0aGlzIGlzIGNoZWNraW5nIHRoYXRcbiAgLy8gaXQncyBhIGxvd2VyY2FzZSBjaGFyYWN0ZXJcbiAgdGFnLmNoYXJDb2RlQXQoMCkgPiA5NiA/IHRlc3RPbWl0UHJvcHNPblN0cmluZ1RhZyA6IHRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudDtcbn07XG52YXIgY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHModGFnLCBvcHRpb25zLCBpc1JlYWwpIHtcbiAgdmFyIHNob3VsZEZvcndhcmRQcm9wO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgdmFyIG9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcCA9IG9wdGlvbnMuc2hvdWxkRm9yd2FyZFByb3A7XG4gICAgc2hvdWxkRm9yd2FyZFByb3AgPSB0YWcuX19lbW90aW9uX2ZvcndhcmRQcm9wICYmIG9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcCA/IGZ1bmN0aW9uIChwcm9wTmFtZSkge1xuICAgICAgcmV0dXJuIHRhZy5fX2Vtb3Rpb25fZm9yd2FyZFByb3AocHJvcE5hbWUpICYmIG9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcChwcm9wTmFtZSk7XG4gICAgfSA6IG9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2hvdWxkRm9yd2FyZFByb3AgIT09ICdmdW5jdGlvbicgJiYgaXNSZWFsKSB7XG4gICAgc2hvdWxkRm9yd2FyZFByb3AgPSB0YWcuX19lbW90aW9uX2ZvcndhcmRQcm9wO1xuICB9XG5cbiAgcmV0dXJuIHNob3VsZEZvcndhcmRQcm9wO1xufTtcblxudmFyIElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SID0gXCJZb3UgaGF2ZSBpbGxlZ2FsIGVzY2FwZSBzZXF1ZW5jZSBpbiB5b3VyIHRlbXBsYXRlIGxpdGVyYWwsIG1vc3QgbGlrZWx5IGluc2lkZSBjb250ZW50J3MgcHJvcGVydHkgdmFsdWUuXFxuQmVjYXVzZSB5b3Ugd3JpdGUgeW91ciBDU1MgaW5zaWRlIGEgSmF2YVNjcmlwdCBzdHJpbmcgeW91IGFjdHVhbGx5IGhhdmUgdG8gZG8gZG91YmxlIGVzY2FwaW5nLCBzbyBmb3IgZXhhbXBsZSBcXFwiY29udGVudDogJ1xcXFwwMGQ3JztcXFwiIHNob3VsZCBiZWNvbWUgXFxcImNvbnRlbnQ6ICdcXFxcXFxcXDAwZDcnO1xcXCIuXFxuWW91IGNhbiByZWFkIG1vcmUgYWJvdXQgdGhpcyBoZXJlOlxcbmh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL1RlbXBsYXRlX2xpdGVyYWxzI0VTMjAxOF9yZXZpc2lvbl9vZl9pbGxlZ2FsX2VzY2FwZV9zZXF1ZW5jZXNcIjtcblxudmFyIEluc2VydGlvbiA9IGZ1bmN0aW9uIEluc2VydGlvbihfcmVmKSB7XG4gIHZhciBjYWNoZSA9IF9yZWYuY2FjaGUsXG4gICAgICBzZXJpYWxpemVkID0gX3JlZi5zZXJpYWxpemVkLFxuICAgICAgaXNTdHJpbmdUYWcgPSBfcmVmLmlzU3RyaW5nVGFnO1xuICByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpO1xuICB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIH0pO1xuXG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIGNyZWF0ZVN0eWxlZCA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlZCh0YWcsIG9wdGlvbnMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodGFnID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IGFyZSB0cnlpbmcgdG8gY3JlYXRlIGEgc3R5bGVkIGVsZW1lbnQgd2l0aCBhbiB1bmRlZmluZWQgY29tcG9uZW50LlxcbllvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gaW1wb3J0IGl0LicpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc1JlYWwgPSB0YWcuX19lbW90aW9uX3JlYWwgPT09IHRhZztcbiAgdmFyIGJhc2VUYWcgPSBpc1JlYWwgJiYgdGFnLl9fZW1vdGlvbl9iYXNlIHx8IHRhZztcbiAgdmFyIGlkZW50aWZpZXJOYW1lO1xuICB2YXIgdGFyZ2V0Q2xhc3NOYW1lO1xuXG4gIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZGVudGlmaWVyTmFtZSA9IG9wdGlvbnMubGFiZWw7XG4gICAgdGFyZ2V0Q2xhc3NOYW1lID0gb3B0aW9ucy50YXJnZXQ7XG4gIH1cblxuICB2YXIgc2hvdWxkRm9yd2FyZFByb3AgPSBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzKHRhZywgb3B0aW9ucywgaXNSZWFsKTtcbiAgdmFyIGRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wIHx8IGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcChiYXNlVGFnKTtcbiAgdmFyIHNob3VsZFVzZUFzID0gIWRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCgnYXMnKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICB2YXIgc3R5bGVzID0gaXNSZWFsICYmIHRhZy5fX2Vtb3Rpb25fc3R5bGVzICE9PSB1bmRlZmluZWQgPyB0YWcuX19lbW90aW9uX3N0eWxlcy5zbGljZSgwKSA6IFtdO1xuXG4gICAgaWYgKGlkZW50aWZpZXJOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0eWxlcy5wdXNoKFwibGFiZWw6XCIgKyBpZGVudGlmaWVyTmFtZSArIFwiO1wiKTtcbiAgICB9XG5cbiAgICBpZiAoYXJnc1swXSA9PSBudWxsIHx8IGFyZ3NbMF0ucmF3ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0eWxlcy5wdXNoLmFwcGx5KHN0eWxlcywgYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFyZ3NbMF1bMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVzLnB1c2goYXJnc1swXVswXSk7XG4gICAgICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gICAgICB2YXIgaSA9IDE7XG5cbiAgICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXJnc1swXVtpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZXMucHVzaChhcmdzW2ldLCBhcmdzWzBdW2ldKTtcbiAgICAgIH1cbiAgICB9IC8vICRGbG93Rml4TWU6IHdlIG5lZWQgdG8gY2FzdCBTdGF0ZWxlc3NGdW5jdGlvbmFsQ29tcG9uZW50IHRvIG91ciBQcml2YXRlU3R5bGVkQ29tcG9uZW50IGNsYXNzXG5cblxuICAgIHZhciBTdHlsZWQgPSB3aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUsIHJlZikge1xuICAgICAgdmFyIEZpbmFsVGFnID0gc2hvdWxkVXNlQXMgJiYgcHJvcHMuYXMgfHwgYmFzZVRhZztcbiAgICAgIHZhciBjbGFzc05hbWUgPSAnJztcbiAgICAgIHZhciBjbGFzc0ludGVycG9sYXRpb25zID0gW107XG4gICAgICB2YXIgbWVyZ2VkUHJvcHMgPSBwcm9wcztcblxuICAgICAgaWYgKHByb3BzLnRoZW1lID09IG51bGwpIHtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSB7fTtcblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgICBtZXJnZWRQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lcmdlZFByb3BzLnRoZW1lID0gUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHByb3BzLmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY2xhc3NOYW1lID0gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhjYWNoZS5yZWdpc3RlcmVkLCBjbGFzc0ludGVycG9sYXRpb25zLCBwcm9wcy5jbGFzc05hbWUpO1xuICAgICAgfSBlbHNlIGlmIChwcm9wcy5jbGFzc05hbWUgIT0gbnVsbCkge1xuICAgICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUgKyBcIiBcIjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoc3R5bGVzLmNvbmNhdChjbGFzc0ludGVycG9sYXRpb25zKSwgY2FjaGUucmVnaXN0ZXJlZCwgbWVyZ2VkUHJvcHMpO1xuICAgICAgY2xhc3NOYW1lICs9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuXG4gICAgICBpZiAodGFyZ2V0Q2xhc3NOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2xhc3NOYW1lICs9IFwiIFwiICsgdGFyZ2V0Q2xhc3NOYW1lO1xuICAgICAgfVxuXG4gICAgICB2YXIgZmluYWxTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZFVzZUFzICYmIHNob3VsZEZvcndhcmRQcm9wID09PSB1bmRlZmluZWQgPyBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AoRmluYWxUYWcpIDogZGVmYXVsdFNob3VsZEZvcndhcmRQcm9wO1xuICAgICAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgICAgIGZvciAodmFyIF9rZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgaWYgKHNob3VsZFVzZUFzICYmIF9rZXkgPT09ICdhcycpIGNvbnRpbnVlO1xuXG4gICAgICAgIGlmICggLy8gJEZsb3dGaXhNZVxuICAgICAgICBmaW5hbFNob3VsZEZvcndhcmRQcm9wKF9rZXkpKSB7XG4gICAgICAgICAgbmV3UHJvcHNbX2tleV0gPSBwcm9wc1tfa2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBuZXdQcm9wcy5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gICAgICBuZXdQcm9wcy5yZWYgPSByZWY7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEluc2VydGlvbiwge1xuICAgICAgICBjYWNoZTogY2FjaGUsXG4gICAgICAgIHNlcmlhbGl6ZWQ6IHNlcmlhbGl6ZWQsXG4gICAgICAgIGlzU3RyaW5nVGFnOiB0eXBlb2YgRmluYWxUYWcgPT09ICdzdHJpbmcnXG4gICAgICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRmluYWxUYWcsIG5ld1Byb3BzKSk7XG4gICAgfSk7XG4gICAgU3R5bGVkLmRpc3BsYXlOYW1lID0gaWRlbnRpZmllck5hbWUgIT09IHVuZGVmaW5lZCA/IGlkZW50aWZpZXJOYW1lIDogXCJTdHlsZWQoXCIgKyAodHlwZW9mIGJhc2VUYWcgPT09ICdzdHJpbmcnID8gYmFzZVRhZyA6IGJhc2VUYWcuZGlzcGxheU5hbWUgfHwgYmFzZVRhZy5uYW1lIHx8ICdDb21wb25lbnQnKSArIFwiKVwiO1xuICAgIFN0eWxlZC5kZWZhdWx0UHJvcHMgPSB0YWcuZGVmYXVsdFByb3BzO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fcmVhbCA9IFN0eWxlZDtcbiAgICBTdHlsZWQuX19lbW90aW9uX2Jhc2UgPSBiYXNlVGFnO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fc3R5bGVzID0gc3R5bGVzO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fZm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcDtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3R5bGVkLCAndG9TdHJpbmcnLCB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7XG4gICAgICAgIGlmICh0YXJnZXRDbGFzc05hbWUgPT09IHVuZGVmaW5lZCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuICdOT19DT01QT05FTlRfU0VMRUNUT1InO1xuICAgICAgICB9IC8vICRGbG93Rml4TWU6IGNvZXJjZSB1bmRlZmluZWQgdG8gc3RyaW5nXG5cblxuICAgICAgICByZXR1cm4gXCIuXCIgKyB0YXJnZXRDbGFzc05hbWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBTdHlsZWQud2l0aENvbXBvbmVudCA9IGZ1bmN0aW9uIChuZXh0VGFnLCBuZXh0T3B0aW9ucykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVN0eWxlZChuZXh0VGFnLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywgbmV4dE9wdGlvbnMsIHtcbiAgICAgICAgc2hvdWxkRm9yd2FyZFByb3A6IGNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHMoU3R5bGVkLCBuZXh0T3B0aW9ucywgdHJ1ZSlcbiAgICAgIH0pKS5hcHBseSh2b2lkIDAsIHN0eWxlcyk7XG4gICAgfTtcblxuICAgIHJldHVybiBTdHlsZWQ7XG4gIH07XG59O1xuXG5leHBvcnQgeyBjcmVhdGVTdHlsZWQgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IGNyZWF0ZVN0eWxlZCBmcm9tICcuLi9iYXNlL2Rpc3QvZW1vdGlvbi1zdHlsZWQtYmFzZS5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgJ3JlYWN0JztcbmltcG9ydCAnQGVtb3Rpb24vaXMtcHJvcC12YWxpZCc7XG5pbXBvcnQgJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0ICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuaW1wb3J0ICdAZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcyc7XG5cbnZhciB0YWdzID0gWydhJywgJ2FiYnInLCAnYWRkcmVzcycsICdhcmVhJywgJ2FydGljbGUnLCAnYXNpZGUnLCAnYXVkaW8nLCAnYicsICdiYXNlJywgJ2JkaScsICdiZG8nLCAnYmlnJywgJ2Jsb2NrcXVvdGUnLCAnYm9keScsICdicicsICdidXR0b24nLCAnY2FudmFzJywgJ2NhcHRpb24nLCAnY2l0ZScsICdjb2RlJywgJ2NvbCcsICdjb2xncm91cCcsICdkYXRhJywgJ2RhdGFsaXN0JywgJ2RkJywgJ2RlbCcsICdkZXRhaWxzJywgJ2RmbicsICdkaWFsb2cnLCAnZGl2JywgJ2RsJywgJ2R0JywgJ2VtJywgJ2VtYmVkJywgJ2ZpZWxkc2V0JywgJ2ZpZ2NhcHRpb24nLCAnZmlndXJlJywgJ2Zvb3RlcicsICdmb3JtJywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ2hlYWQnLCAnaGVhZGVyJywgJ2hncm91cCcsICdocicsICdodG1sJywgJ2knLCAnaWZyYW1lJywgJ2ltZycsICdpbnB1dCcsICdpbnMnLCAna2JkJywgJ2tleWdlbicsICdsYWJlbCcsICdsZWdlbmQnLCAnbGknLCAnbGluaycsICdtYWluJywgJ21hcCcsICdtYXJrJywgJ21hcnF1ZWUnLCAnbWVudScsICdtZW51aXRlbScsICdtZXRhJywgJ21ldGVyJywgJ25hdicsICdub3NjcmlwdCcsICdvYmplY3QnLCAnb2wnLCAnb3B0Z3JvdXAnLCAnb3B0aW9uJywgJ291dHB1dCcsICdwJywgJ3BhcmFtJywgJ3BpY3R1cmUnLCAncHJlJywgJ3Byb2dyZXNzJywgJ3EnLCAncnAnLCAncnQnLCAncnVieScsICdzJywgJ3NhbXAnLCAnc2NyaXB0JywgJ3NlY3Rpb24nLCAnc2VsZWN0JywgJ3NtYWxsJywgJ3NvdXJjZScsICdzcGFuJywgJ3N0cm9uZycsICdzdHlsZScsICdzdWInLCAnc3VtbWFyeScsICdzdXAnLCAndGFibGUnLCAndGJvZHknLCAndGQnLCAndGV4dGFyZWEnLCAndGZvb3QnLCAndGgnLCAndGhlYWQnLCAndGltZScsICd0aXRsZScsICd0cicsICd0cmFjaycsICd1JywgJ3VsJywgJ3ZhcicsICd2aWRlbycsICd3YnInLCAvLyBTVkdcbidjaXJjbGUnLCAnY2xpcFBhdGgnLCAnZGVmcycsICdlbGxpcHNlJywgJ2ZvcmVpZ25PYmplY3QnLCAnZycsICdpbWFnZScsICdsaW5lJywgJ2xpbmVhckdyYWRpZW50JywgJ21hc2snLCAncGF0aCcsICdwYXR0ZXJuJywgJ3BvbHlnb24nLCAncG9seWxpbmUnLCAncmFkaWFsR3JhZGllbnQnLCAncmVjdCcsICdzdG9wJywgJ3N2ZycsICd0ZXh0JywgJ3RzcGFuJ107XG5cbnZhciBuZXdTdHlsZWQgPSBjcmVhdGVTdHlsZWQuYmluZCgpO1xudGFncy5mb3JFYWNoKGZ1bmN0aW9uICh0YWdOYW1lKSB7XG4gIC8vICRGbG93Rml4TWU6IHdlIGNhbiBpZ25vcmUgdGhpcyBiZWNhdXNlIGl0cyBleHBvc2VkIHR5cGUgaXMgZGVmaW5lZCBieSB0aGUgQ3JlYXRlU3R5bGVkIHR5cGVcbiAgbmV3U3R5bGVkW3RhZ05hbWVdID0gbmV3U3R5bGVkKHRhZ05hbWUpO1xufSk7XG5cbmV4cG9ydCB7IG5ld1N0eWxlZCBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvaXMtcGxhaW4tb2JqL2Jsb2IvbWFpbi9pbmRleC5qc1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QoaXRlbSkge1xuICBpZiAodHlwZW9mIGl0ZW0gIT09ICdvYmplY3QnIHx8IGl0ZW0gPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGl0ZW0pO1xuICByZXR1cm4gKHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvdHlwZSkgPT09IG51bGwpICYmICEoU3ltYm9sLnRvU3RyaW5nVGFnIGluIGl0ZW0pICYmICEoU3ltYm9sLml0ZXJhdG9yIGluIGl0ZW0pO1xufVxuZnVuY3Rpb24gZGVlcENsb25lKHNvdXJjZSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cbiAgY29uc3Qgb3V0cHV0ID0ge307XG4gIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgIG91dHB1dFtrZXldID0gZGVlcENsb25lKHNvdXJjZVtrZXldKTtcbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMgPSB7XG4gIGNsb25lOiB0cnVlXG59KSB7XG4gIGNvbnN0IG91dHB1dCA9IG9wdGlvbnMuY2xvbmUgPyBfZXh0ZW5kcyh7fSwgdGFyZ2V0KSA6IHRhcmdldDtcbiAgaWYgKGlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiBpc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIC8vIEF2b2lkIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgICAgIGlmIChrZXkgPT09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChpc1BsYWluT2JqZWN0KHNvdXJjZVtrZXldKSAmJiBrZXkgaW4gdGFyZ2V0ICYmIGlzUGxhaW5PYmplY3QodGFyZ2V0W2tleV0pKSB7XG4gICAgICAgIC8vIFNpbmNlIGBvdXRwdXRgIGlzIGEgY2xvbmUgb2YgYHRhcmdldGAgYW5kIHdlIGhhdmUgbmFycm93ZWQgYHRhcmdldGAgaW4gdGhpcyBibG9jayB3ZSBjYW4gY2FzdCB0byB0aGUgc2FtZSB0eXBlLlxuICAgICAgICBvdXRwdXRba2V5XSA9IGRlZXBtZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmNsb25lKSB7XG4gICAgICAgIG91dHB1dFtrZXldID0gaXNQbGFpbk9iamVjdChzb3VyY2Vba2V5XSkgPyBkZWVwQ2xvbmUoc291cmNlW2tleV0pIDogc291cmNlW2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcInZhbHVlc1wiLCBcInVuaXRcIiwgXCJzdGVwXCJdO1xuLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuLy8gSXQgY2FuJ3QgYmUgY29uZmlndXJlZCBhcyBpdCdzIHVzZWQgc3RhdGljYWxseSBmb3IgcHJvcFR5cGVzLlxuZXhwb3J0IGNvbnN0IGJyZWFrcG9pbnRLZXlzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddO1xuY29uc3Qgc29ydEJyZWFrcG9pbnRzVmFsdWVzID0gdmFsdWVzID0+IHtcbiAgY29uc3QgYnJlYWtwb2ludHNBc0FycmF5ID0gT2JqZWN0LmtleXModmFsdWVzKS5tYXAoa2V5ID0+ICh7XG4gICAga2V5LFxuICAgIHZhbDogdmFsdWVzW2tleV1cbiAgfSkpIHx8IFtdO1xuICAvLyBTb3J0IGluIGFzY2VuZGluZyBvcmRlclxuICBicmVha3BvaW50c0FzQXJyYXkuc29ydCgoYnJlYWtwb2ludDEsIGJyZWFrcG9pbnQyKSA9PiBicmVha3BvaW50MS52YWwgLSBicmVha3BvaW50Mi52YWwpO1xuICByZXR1cm4gYnJlYWtwb2ludHNBc0FycmF5LnJlZHVjZSgoYWNjLCBvYmopID0+IHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGFjYywge1xuICAgICAgW29iai5rZXldOiBvYmoudmFsXG4gICAgfSk7XG4gIH0sIHt9KTtcbn07XG5cbi8vIEtlZXAgaW4gbWluZCB0aGF0IEBtZWRpYSBpcyBpbmNsdXNpdmUgYnkgdGhlIENTUyBzcGVjaWZpY2F0aW9uLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQnJlYWtwb2ludHMoYnJlYWtwb2ludHMpIHtcbiAgY29uc3Qge1xuICAgICAgLy8gVGhlIGJyZWFrcG9pbnQgKipzdGFydCoqIGF0IHRoaXMgdmFsdWUuXG4gICAgICAvLyBGb3IgaW5zdGFuY2Ugd2l0aCB0aGUgZmlyc3QgYnJlYWtwb2ludCB4czogW3hzLCBzbSkuXG4gICAgICB2YWx1ZXMgPSB7XG4gICAgICAgIHhzOiAwLFxuICAgICAgICAvLyBwaG9uZVxuICAgICAgICBzbTogNjAwLFxuICAgICAgICAvLyB0YWJsZXRcbiAgICAgICAgbWQ6IDkwMCxcbiAgICAgICAgLy8gc21hbGwgbGFwdG9wXG4gICAgICAgIGxnOiAxMjAwLFxuICAgICAgICAvLyBkZXNrdG9wXG4gICAgICAgIHhsOiAxNTM2IC8vIGxhcmdlIHNjcmVlblxuICAgICAgfSxcbiAgICAgIHVuaXQgPSAncHgnLFxuICAgICAgc3RlcCA9IDVcbiAgICB9ID0gYnJlYWtwb2ludHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShicmVha3BvaW50cywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgc29ydGVkVmFsdWVzID0gc29ydEJyZWFrcG9pbnRzVmFsdWVzKHZhbHVlcyk7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzb3J0ZWRWYWx1ZXMpO1xuICBmdW5jdGlvbiB1cChrZXkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHR5cGVvZiB2YWx1ZXNba2V5XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5XSA6IGtleTtcbiAgICByZXR1cm4gYEBtZWRpYSAobWluLXdpZHRoOiR7dmFsdWV9JHt1bml0fSlgO1xuICB9XG4gIGZ1bmN0aW9uIGRvd24oa2V5KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgdmFsdWVzW2tleV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleV0gOiBrZXk7XG4gICAgcmV0dXJuIGBAbWVkaWEgKG1heC13aWR0aDoke3ZhbHVlIC0gc3RlcCAvIDEwMH0ke3VuaXR9KWA7XG4gIH1cbiAgZnVuY3Rpb24gYmV0d2VlbihzdGFydCwgZW5kKSB7XG4gICAgY29uc3QgZW5kSW5kZXggPSBrZXlzLmluZGV4T2YoZW5kKTtcbiAgICByZXR1cm4gYEBtZWRpYSAobWluLXdpZHRoOiR7dHlwZW9mIHZhbHVlc1tzdGFydF0gPT09ICdudW1iZXInID8gdmFsdWVzW3N0YXJ0XSA6IHN0YXJ0fSR7dW5pdH0pIGFuZCBgICsgYChtYXgtd2lkdGg6JHsoZW5kSW5kZXggIT09IC0xICYmIHR5cGVvZiB2YWx1ZXNba2V5c1tlbmRJbmRleF1dID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXlzW2VuZEluZGV4XV0gOiBlbmQpIC0gc3RlcCAvIDEwMH0ke3VuaXR9KWA7XG4gIH1cbiAgZnVuY3Rpb24gb25seShrZXkpIHtcbiAgICBpZiAoa2V5cy5pbmRleE9mKGtleSkgKyAxIDwga2V5cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBiZXR3ZWVuKGtleSwga2V5c1trZXlzLmluZGV4T2Yoa2V5KSArIDFdKTtcbiAgICB9XG4gICAgcmV0dXJuIHVwKGtleSk7XG4gIH1cbiAgZnVuY3Rpb24gbm90KGtleSkge1xuICAgIC8vIGhhbmRsZSBmaXJzdCBhbmQgbGFzdCBrZXkgc2VwYXJhdGVseSwgZm9yIGJldHRlciByZWFkYWJpbGl0eVxuICAgIGNvbnN0IGtleUluZGV4ID0ga2V5cy5pbmRleE9mKGtleSk7XG4gICAgaWYgKGtleUluZGV4ID09PSAwKSB7XG4gICAgICByZXR1cm4gdXAoa2V5c1sxXSk7XG4gICAgfVxuICAgIGlmIChrZXlJbmRleCA9PT0ga2V5cy5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gZG93bihrZXlzW2tleUluZGV4XSk7XG4gICAgfVxuICAgIHJldHVybiBiZXR3ZWVuKGtleSwga2V5c1trZXlzLmluZGV4T2Yoa2V5KSArIDFdKS5yZXBsYWNlKCdAbWVkaWEnLCAnQG1lZGlhIG5vdCBhbGwgYW5kJyk7XG4gIH1cbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBrZXlzLFxuICAgIHZhbHVlczogc29ydGVkVmFsdWVzLFxuICAgIHVwLFxuICAgIGRvd24sXG4gICAgYmV0d2VlbixcbiAgICBvbmx5LFxuICAgIG5vdCxcbiAgICB1bml0XG4gIH0sIG90aGVyKTtcbn0iLCJjb25zdCBzaGFwZSA9IHtcbiAgYm9yZGVyUmFkaXVzOiA0XG59O1xuZXhwb3J0IGRlZmF1bHQgc2hhcGU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5cbi8vIFRoZSBicmVha3BvaW50ICoqc3RhcnQqKiBhdCB0aGlzIHZhbHVlLlxuLy8gRm9yIGluc3RhbmNlIHdpdGggdGhlIGZpcnN0IGJyZWFrcG9pbnQgeHM6IFt4cywgc21bLlxuZXhwb3J0IGNvbnN0IHZhbHVlcyA9IHtcbiAgeHM6IDAsXG4gIC8vIHBob25lXG4gIHNtOiA2MDAsXG4gIC8vIHRhYmxldFxuICBtZDogOTAwLFxuICAvLyBzbWFsbCBsYXB0b3BcbiAgbGc6IDEyMDAsXG4gIC8vIGRlc2t0b3BcbiAgeGw6IDE1MzYgLy8gbGFyZ2Ugc2NyZWVuXG59O1xuY29uc3QgZGVmYXVsdEJyZWFrcG9pbnRzID0ge1xuICAvLyBTb3J0ZWQgQVNDIGJ5IHNpemUuIFRoYXQncyBpbXBvcnRhbnQuXG4gIC8vIEl0IGNhbid0IGJlIGNvbmZpZ3VyZWQgYXMgaXQncyB1c2VkIHN0YXRpY2FsbHkgZm9yIHByb3BUeXBlcy5cbiAga2V5czogWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddLFxuICB1cDoga2V5ID0+IGBAbWVkaWEgKG1pbi13aWR0aDoke3ZhbHVlc1trZXldfXB4KWBcbn07XG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKSB7XG4gIGNvbnN0IHRoZW1lID0gcHJvcHMudGhlbWUgfHwge307XG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICBjb25zdCB0aGVtZUJyZWFrcG9pbnRzID0gdGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIHJldHVybiBwcm9wVmFsdWUucmVkdWNlKChhY2MsIGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cCh0aGVtZUJyZWFrcG9pbnRzLmtleXNbaW5kZXhdKV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2luZGV4XSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuICBpZiAodHlwZW9mIHByb3BWYWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICBjb25zdCB0aGVtZUJyZWFrcG9pbnRzID0gdGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wVmFsdWUpLnJlZHVjZSgoYWNjLCBicmVha3BvaW50KSA9PiB7XG4gICAgICAvLyBrZXkgaXMgYnJlYWtwb2ludFxuICAgICAgaWYgKE9iamVjdC5rZXlzKHRoZW1lQnJlYWtwb2ludHMudmFsdWVzIHx8IHZhbHVlcykuaW5kZXhPZihicmVha3BvaW50KSAhPT0gLTEpIHtcbiAgICAgICAgY29uc3QgbWVkaWFLZXkgPSB0aGVtZUJyZWFrcG9pbnRzLnVwKGJyZWFrcG9pbnQpO1xuICAgICAgICBhY2NbbWVkaWFLZXldID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZVticmVha3BvaW50XSwgYnJlYWtwb2ludCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBjc3NLZXkgPSBicmVha3BvaW50O1xuICAgICAgICBhY2NbY3NzS2V5XSA9IHByb3BWYWx1ZVtjc3NLZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH1cbiAgY29uc3Qgb3V0cHV0ID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5mdW5jdGlvbiBicmVha3BvaW50cyhzdHlsZUZ1bmN0aW9uKSB7XG4gIC8vIGZhbHNlIHBvc2l0aXZlXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuICBjb25zdCBuZXdTdHlsZUZ1bmN0aW9uID0gcHJvcHMgPT4ge1xuICAgIGNvbnN0IHRoZW1lID0gcHJvcHMudGhlbWUgfHwge307XG4gICAgY29uc3QgYmFzZSA9IHN0eWxlRnVuY3Rpb24ocHJvcHMpO1xuICAgIGNvbnN0IHRoZW1lQnJlYWtwb2ludHMgPSB0aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgY29uc3QgZXh0ZW5kZWQgPSB0aGVtZUJyZWFrcG9pbnRzLmtleXMucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgICAgaWYgKHByb3BzW2tleV0pIHtcbiAgICAgICAgYWNjID0gYWNjIHx8IHt9O1xuICAgICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cChrZXkpXSA9IHN0eWxlRnVuY3Rpb24oX2V4dGVuZHMoe1xuICAgICAgICAgIHRoZW1lXG4gICAgICAgIH0sIHByb3BzW2tleV0pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgbnVsbCk7XG4gICAgcmV0dXJuIG1lcmdlKGJhc2UsIGV4dGVuZGVkKTtcbiAgfTtcbiAgbmV3U3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX2V4dGVuZHMoe30sIHN0eWxlRnVuY3Rpb24ucHJvcFR5cGVzLCB7XG4gICAgeHM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc206IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbWQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbGc6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgeGw6IFByb3BUeXBlcy5vYmplY3RcbiAgfSkgOiB7fTtcbiAgbmV3U3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wcyA9IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnLCAuLi5zdHlsZUZ1bmN0aW9uLmZpbHRlclByb3BzXTtcbiAgcmV0dXJuIG5ld1N0eWxlRnVuY3Rpb247XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRW1wdHlCcmVha3BvaW50T2JqZWN0KGJyZWFrcG9pbnRzSW5wdXQgPSB7fSkge1xuICB2YXIgX2JyZWFrcG9pbnRzSW5wdXQka2V5O1xuICBjb25zdCBicmVha3BvaW50c0luT3JkZXIgPSAoX2JyZWFrcG9pbnRzSW5wdXQka2V5ID0gYnJlYWtwb2ludHNJbnB1dC5rZXlzKSA9PSBudWxsID8gdm9pZCAwIDogX2JyZWFrcG9pbnRzSW5wdXQka2V5LnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICBjb25zdCBicmVha3BvaW50U3R5bGVLZXkgPSBicmVha3BvaW50c0lucHV0LnVwKGtleSk7XG4gICAgYWNjW2JyZWFrcG9pbnRTdHlsZUtleV0gPSB7fTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHJldHVybiBicmVha3BvaW50c0luT3JkZXIgfHwge307XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlVW51c2VkQnJlYWtwb2ludHMoYnJlYWtwb2ludEtleXMsIHN0eWxlKSB7XG4gIHJldHVybiBicmVha3BvaW50S2V5cy5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgY29uc3QgYnJlYWtwb2ludE91dHB1dCA9IGFjY1trZXldO1xuICAgIGNvbnN0IGlzQnJlYWtwb2ludFVudXNlZCA9ICFicmVha3BvaW50T3V0cHV0IHx8IE9iamVjdC5rZXlzKGJyZWFrcG9pbnRPdXRwdXQpLmxlbmd0aCA9PT0gMDtcbiAgICBpZiAoaXNCcmVha3BvaW50VW51c2VkKSB7XG4gICAgICBkZWxldGUgYWNjW2tleV07XG4gICAgfVxuICAgIHJldHVybiBhY2M7XG4gIH0sIHN0eWxlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUJyZWFrcG9pbnRzSW5PcmRlcihicmVha3BvaW50c0lucHV0LCAuLi5zdHlsZXMpIHtcbiAgY29uc3QgZW1wdHlCcmVha3BvaW50cyA9IGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdChicmVha3BvaW50c0lucHV0KTtcbiAgY29uc3QgbWVyZ2VkT3V0cHV0ID0gW2VtcHR5QnJlYWtwb2ludHMsIC4uLnN0eWxlc10ucmVkdWNlKChwcmV2LCBuZXh0KSA9PiBkZWVwbWVyZ2UocHJldiwgbmV4dCksIHt9KTtcbiAgcmV0dXJuIHJlbW92ZVVudXNlZEJyZWFrcG9pbnRzKE9iamVjdC5rZXlzKGVtcHR5QnJlYWtwb2ludHMpLCBtZXJnZWRPdXRwdXQpO1xufVxuXG4vLyBjb21wdXRlIGJhc2UgZm9yIHJlc3BvbnNpdmUgdmFsdWVzOyBlLmcuLFxuLy8gWzEsMiwzXSA9PiB7eHM6IHRydWUsIHNtOiB0cnVlLCBtZDogdHJ1ZX1cbi8vIHt4czogMSwgc206IDIsIG1kOiAzfSA9PiB7eHM6IHRydWUsIHNtOiB0cnVlLCBtZDogdHJ1ZX1cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlQnJlYWtwb2ludHNCYXNlKGJyZWFrcG9pbnRWYWx1ZXMsIHRoZW1lQnJlYWtwb2ludHMpIHtcbiAgLy8gZml4ZWQgdmFsdWVcbiAgaWYgKHR5cGVvZiBicmVha3BvaW50VmFsdWVzICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBjb25zdCBiYXNlID0ge307XG4gIGNvbnN0IGJyZWFrcG9pbnRzS2V5cyA9IE9iamVjdC5rZXlzKHRoZW1lQnJlYWtwb2ludHMpO1xuICBpZiAoQXJyYXkuaXNBcnJheShicmVha3BvaW50VmFsdWVzKSkge1xuICAgIGJyZWFrcG9pbnRzS2V5cy5mb3JFYWNoKChicmVha3BvaW50LCBpKSA9PiB7XG4gICAgICBpZiAoaSA8IGJyZWFrcG9pbnRWYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgIGJhc2VbYnJlYWtwb2ludF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGJyZWFrcG9pbnRzS2V5cy5mb3JFYWNoKGJyZWFrcG9pbnQgPT4ge1xuICAgICAgaWYgKGJyZWFrcG9pbnRWYWx1ZXNbYnJlYWtwb2ludF0gIT0gbnVsbCkge1xuICAgICAgICBiYXNlW2JyZWFrcG9pbnRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gYmFzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQnJlYWtwb2ludFZhbHVlcyh7XG4gIHZhbHVlczogYnJlYWtwb2ludFZhbHVlcyxcbiAgYnJlYWtwb2ludHM6IHRoZW1lQnJlYWtwb2ludHMsXG4gIGJhc2U6IGN1c3RvbUJhc2Vcbn0pIHtcbiAgY29uc3QgYmFzZSA9IGN1c3RvbUJhc2UgfHwgY29tcHV0ZUJyZWFrcG9pbnRzQmFzZShicmVha3BvaW50VmFsdWVzLCB0aGVtZUJyZWFrcG9pbnRzKTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGJhc2UpO1xuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gYnJlYWtwb2ludFZhbHVlcztcbiAgfVxuICBsZXQgcHJldmlvdXM7XG4gIHJldHVybiBrZXlzLnJlZHVjZSgoYWNjLCBicmVha3BvaW50LCBpKSA9PiB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYnJlYWtwb2ludFZhbHVlcykpIHtcbiAgICAgIGFjY1ticmVha3BvaW50XSA9IGJyZWFrcG9pbnRWYWx1ZXNbaV0gIT0gbnVsbCA/IGJyZWFrcG9pbnRWYWx1ZXNbaV0gOiBicmVha3BvaW50VmFsdWVzW3ByZXZpb3VzXTtcbiAgICAgIHByZXZpb3VzID0gaTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBicmVha3BvaW50VmFsdWVzID09PSAnb2JqZWN0Jykge1xuICAgICAgYWNjW2JyZWFrcG9pbnRdID0gYnJlYWtwb2ludFZhbHVlc1ticmVha3BvaW50XSAhPSBudWxsID8gYnJlYWtwb2ludFZhbHVlc1ticmVha3BvaW50XSA6IGJyZWFrcG9pbnRWYWx1ZXNbcHJldmlvdXNdO1xuICAgICAgcHJldmlvdXMgPSBicmVha3BvaW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBhY2NbYnJlYWtwb2ludF0gPSBicmVha3BvaW50VmFsdWVzO1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG5leHBvcnQgZGVmYXVsdCBicmVha3BvaW50czsiLCJpbXBvcnQgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSBmcm9tIFwiQG11aS91dGlscy9mb3JtYXRNdWlFcnJvck1lc3NhZ2VcIjtcbi8vIEl0IHNob3VsZCB0byBiZSBub3RlZCB0aGF0IHRoaXMgZnVuY3Rpb24gaXNuJ3QgZXF1aXZhbGVudCB0byBgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemVgLlxuLy9cbi8vIEEgc3RyaWN0IGNhcGl0YWxpemF0aW9uIHNob3VsZCB1cHBlcmNhc2UgdGhlIGZpcnN0IGxldHRlciBvZiBlYWNoIHdvcmQgaW4gdGhlIHNlbnRlbmNlLlxuLy8gV2Ugb25seSBoYW5kbGUgdGhlIGZpcnN0IHdvcmQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogXFxgY2FwaXRhbGl6ZShzdHJpbmcpXFxgIGV4cGVjdHMgYSBzdHJpbmcgYXJndW1lbnQuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoNykpO1xuICB9XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UGF0aChvYmosIHBhdGgsIGNoZWNrVmFycyA9IHRydWUpIHtcbiAgaWYgKCFwYXRoIHx8IHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgQ1NTIHZhcmlhYmxlcyBhcmUgdXNlZFxuICBpZiAob2JqICYmIG9iai52YXJzICYmIGNoZWNrVmFycykge1xuICAgIGNvbnN0IHZhbCA9IGB2YXJzLiR7cGF0aH1gLnNwbGl0KCcuJykucmVkdWNlKChhY2MsIGl0ZW0pID0+IGFjYyAmJiBhY2NbaXRlbV0gPyBhY2NbaXRlbV0gOiBudWxsLCBvYmopO1xuICAgIGlmICh2YWwgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhdGguc3BsaXQoJy4nKS5yZWR1Y2UoKGFjYywgaXRlbSkgPT4ge1xuICAgIGlmIChhY2MgJiYgYWNjW2l0ZW1dICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBhY2NbaXRlbV07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LCBvYmopO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0eWxlVmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIHByb3BWYWx1ZUZpbmFsLCB1c2VyVmFsdWUgPSBwcm9wVmFsdWVGaW5hbCkge1xuICBsZXQgdmFsdWU7XG4gIGlmICh0eXBlb2YgdGhlbWVNYXBwaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFsdWUgPSB0aGVtZU1hcHBpbmcocHJvcFZhbHVlRmluYWwpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodGhlbWVNYXBwaW5nKSkge1xuICAgIHZhbHVlID0gdGhlbWVNYXBwaW5nW3Byb3BWYWx1ZUZpbmFsXSB8fCB1c2VyVmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSBnZXRQYXRoKHRoZW1lTWFwcGluZywgcHJvcFZhbHVlRmluYWwpIHx8IHVzZXJWYWx1ZTtcbiAgfVxuICBpZiAodHJhbnNmb3JtKSB7XG4gICAgdmFsdWUgPSB0cmFuc2Zvcm0odmFsdWUsIHVzZXJWYWx1ZSwgdGhlbWVNYXBwaW5nKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBzdHlsZShvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICBwcm9wLFxuICAgIGNzc1Byb3BlcnR5ID0gb3B0aW9ucy5wcm9wLFxuICAgIHRoZW1lS2V5LFxuICAgIHRyYW5zZm9ybVxuICB9ID0gb3B0aW9ucztcblxuICAvLyBmYWxzZSBwb3NpdGl2ZVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbiAgY29uc3QgZm4gPSBwcm9wcyA9PiB7XG4gICAgaWYgKHByb3BzW3Byb3BdID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBwcm9wVmFsdWUgPSBwcm9wc1twcm9wXTtcbiAgICBjb25zdCB0aGVtZSA9IHByb3BzLnRoZW1lO1xuICAgIGNvbnN0IHRoZW1lTWFwcGluZyA9IGdldFBhdGgodGhlbWUsIHRoZW1lS2V5KSB8fCB7fTtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWVGaW5hbCA9PiB7XG4gICAgICBsZXQgdmFsdWUgPSBnZXRTdHlsZVZhbHVlKHRoZW1lTWFwcGluZywgdHJhbnNmb3JtLCBwcm9wVmFsdWVGaW5hbCk7XG4gICAgICBpZiAocHJvcFZhbHVlRmluYWwgPT09IHZhbHVlICYmIHR5cGVvZiBwcm9wVmFsdWVGaW5hbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gSGF2ZW4ndCBmb3VuZCB2YWx1ZVxuICAgICAgICB2YWx1ZSA9IGdldFN0eWxlVmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIGAke3Byb3B9JHtwcm9wVmFsdWVGaW5hbCA9PT0gJ2RlZmF1bHQnID8gJycgOiBjYXBpdGFsaXplKHByb3BWYWx1ZUZpbmFsKX1gLCBwcm9wVmFsdWVGaW5hbCk7XG4gICAgICB9XG4gICAgICBpZiAoY3NzUHJvcGVydHkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtjc3NQcm9wZXJ0eV06IHZhbHVlXG4gICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH07XG4gIGZuLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gICAgW3Byb3BdOiByZXNwb25zaXZlUHJvcFR5cGVcbiAgfSA6IHt9O1xuICBmbi5maWx0ZXJQcm9wcyA9IFtwcm9wXTtcbiAgcmV0dXJuIGZuO1xufVxuZXhwb3J0IGRlZmF1bHQgc3R5bGU7IiwiaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5mdW5jdGlvbiBtZXJnZShhY2MsIGl0ZW0pIHtcbiAgaWYgKCFpdGVtKSB7XG4gICAgcmV0dXJuIGFjYztcbiAgfVxuICByZXR1cm4gZGVlcG1lcmdlKGFjYywgaXRlbSwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXAsIGl0J3Mgd2F5IGZhc3Rlci5cbiAgfSk7XG59XG5leHBvcnQgZGVmYXVsdCBtZXJnZTsiLCJpbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5pbXBvcnQgeyBnZXRQYXRoIH0gZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICcuL21lbW9pemUnO1xuY29uc3QgcHJvcGVydGllcyA9IHtcbiAgbTogJ21hcmdpbicsXG4gIHA6ICdwYWRkaW5nJ1xufTtcbmNvbnN0IGRpcmVjdGlvbnMgPSB7XG4gIHQ6ICdUb3AnLFxuICByOiAnUmlnaHQnLFxuICBiOiAnQm90dG9tJyxcbiAgbDogJ0xlZnQnLFxuICB4OiBbJ0xlZnQnLCAnUmlnaHQnXSxcbiAgeTogWydUb3AnLCAnQm90dG9tJ11cbn07XG5jb25zdCBhbGlhc2VzID0ge1xuICBtYXJnaW5YOiAnbXgnLFxuICBtYXJnaW5ZOiAnbXknLFxuICBwYWRkaW5nWDogJ3B4JyxcbiAgcGFkZGluZ1k6ICdweSdcbn07XG5cbi8vIG1lbW9pemUoKSBpbXBhY3Q6XG4vLyBGcm9tIDMwMCwwMDAgb3BzL3NlY1xuLy8gVG8gMzUwLDAwMCBvcHMvc2VjXG5jb25zdCBnZXRDc3NQcm9wZXJ0aWVzID0gbWVtb2l6ZShwcm9wID0+IHtcbiAgLy8gSXQncyBub3QgYSBzaG9ydGhhbmQgbm90YXRpb24uXG4gIGlmIChwcm9wLmxlbmd0aCA+IDIpIHtcbiAgICBpZiAoYWxpYXNlc1twcm9wXSkge1xuICAgICAgcHJvcCA9IGFsaWFzZXNbcHJvcF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbcHJvcF07XG4gICAgfVxuICB9XG4gIGNvbnN0IFthLCBiXSA9IHByb3Auc3BsaXQoJycpO1xuICBjb25zdCBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbYV07XG4gIGNvbnN0IGRpcmVjdGlvbiA9IGRpcmVjdGlvbnNbYl0gfHwgJyc7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGRpcmVjdGlvbikgPyBkaXJlY3Rpb24ubWFwKGRpciA9PiBwcm9wZXJ0eSArIGRpcikgOiBbcHJvcGVydHkgKyBkaXJlY3Rpb25dO1xufSk7XG5leHBvcnQgY29uc3QgbWFyZ2luS2V5cyA9IFsnbScsICdtdCcsICdtcicsICdtYicsICdtbCcsICdteCcsICdteScsICdtYXJnaW4nLCAnbWFyZ2luVG9wJywgJ21hcmdpblJpZ2h0JywgJ21hcmdpbkJvdHRvbScsICdtYXJnaW5MZWZ0JywgJ21hcmdpblgnLCAnbWFyZ2luWScsICdtYXJnaW5JbmxpbmUnLCAnbWFyZ2luSW5saW5lU3RhcnQnLCAnbWFyZ2luSW5saW5lRW5kJywgJ21hcmdpbkJsb2NrJywgJ21hcmdpbkJsb2NrU3RhcnQnLCAnbWFyZ2luQmxvY2tFbmQnXTtcbmV4cG9ydCBjb25zdCBwYWRkaW5nS2V5cyA9IFsncCcsICdwdCcsICdwcicsICdwYicsICdwbCcsICdweCcsICdweScsICdwYWRkaW5nJywgJ3BhZGRpbmdUb3AnLCAncGFkZGluZ1JpZ2h0JywgJ3BhZGRpbmdCb3R0b20nLCAncGFkZGluZ0xlZnQnLCAncGFkZGluZ1gnLCAncGFkZGluZ1knLCAncGFkZGluZ0lubGluZScsICdwYWRkaW5nSW5saW5lU3RhcnQnLCAncGFkZGluZ0lubGluZUVuZCcsICdwYWRkaW5nQmxvY2snLCAncGFkZGluZ0Jsb2NrU3RhcnQnLCAncGFkZGluZ0Jsb2NrRW5kJ107XG5jb25zdCBzcGFjaW5nS2V5cyA9IFsuLi5tYXJnaW5LZXlzLCAuLi5wYWRkaW5nS2V5c107XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVW5hcnlVbml0KHRoZW1lLCB0aGVtZUtleSwgZGVmYXVsdFZhbHVlLCBwcm9wTmFtZSkge1xuICB2YXIgX2dldFBhdGg7XG4gIGNvbnN0IHRoZW1lU3BhY2luZyA9IChfZ2V0UGF0aCA9IGdldFBhdGgodGhlbWUsIHRoZW1lS2V5LCBmYWxzZSkpICE9IG51bGwgPyBfZ2V0UGF0aCA6IGRlZmF1bHRWYWx1ZTtcbiAgaWYgKHR5cGVvZiB0aGVtZVNwYWNpbmcgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGFicyA9PiB7XG4gICAgICBpZiAodHlwZW9mIGFicyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGFicztcbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWJzICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogRXhwZWN0ZWQgJHtwcm9wTmFtZX0gYXJndW1lbnQgdG8gYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcsIGdvdCAke2Fic30uYCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGVtZVNwYWNpbmcgKiBhYnM7XG4gICAgfTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0aGVtZVNwYWNpbmcpKSB7XG4gICAgcmV0dXJuIGFicyA9PiB7XG4gICAgICBpZiAodHlwZW9mIGFicyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGFicztcbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihhYnMpKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIFxcYHRoZW1lLiR7dGhlbWVLZXl9XFxgIGFycmF5IHR5cGUgY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggbm9uIGludGVnZXIgdmFsdWVzLmAgKyBgWW91IHNob3VsZCBlaXRoZXIgdXNlIGFuIGludGVnZXIgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCBhcyBpbmRleCwgb3IgZGVmaW5lIHRoZSBcXGB0aGVtZS4ke3RoZW1lS2V5fVxcYCBhcyBhIG51bWJlci5gXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoYWJzID4gdGhlbWVTcGFjaW5nLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgdmFsdWUgcHJvdmlkZWQgKCR7YWJzfSkgb3ZlcmZsb3dzLmAsIGBUaGUgc3VwcG9ydGVkIHZhbHVlcyBhcmU6ICR7SlNPTi5zdHJpbmdpZnkodGhlbWVTcGFjaW5nKX0uYCwgYCR7YWJzfSA+ICR7dGhlbWVTcGFjaW5nLmxlbmd0aCAtIDF9LCB5b3UgbmVlZCB0byBhZGQgdGhlIG1pc3NpbmcgdmFsdWVzLmBdLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoZW1lU3BhY2luZ1thYnNdO1xuICAgIH07XG4gIH1cbiAgaWYgKHR5cGVvZiB0aGVtZVNwYWNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdGhlbWVTcGFjaW5nO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIFxcYHRoZW1lLiR7dGhlbWVLZXl9XFxgIHZhbHVlICgke3RoZW1lU3BhY2luZ30pIGlzIGludmFsaWQuYCwgJ0l0IHNob3VsZCBiZSBhIG51bWJlciwgYW4gYXJyYXkgb3IgYSBmdW5jdGlvbi4nXS5qb2luKCdcXG4nKSk7XG4gIH1cbiAgcmV0dXJuICgpID0+IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVbmFyeVNwYWNpbmcodGhlbWUpIHtcbiAgcmV0dXJuIGNyZWF0ZVVuYXJ5VW5pdCh0aGVtZSwgJ3NwYWNpbmcnLCA4LCAnc3BhY2luZycpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICdzdHJpbmcnIHx8IHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHByb3BWYWx1ZTtcbiAgfVxuICBjb25zdCBhYnMgPSBNYXRoLmFicyhwcm9wVmFsdWUpO1xuICBjb25zdCB0cmFuc2Zvcm1lZCA9IHRyYW5zZm9ybWVyKGFicyk7XG4gIGlmIChwcm9wVmFsdWUgPj0gMCkge1xuICAgIHJldHVybiB0cmFuc2Zvcm1lZDtcbiAgfVxuICBpZiAodHlwZW9mIHRyYW5zZm9ybWVkID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiAtdHJhbnNmb3JtZWQ7XG4gIH1cbiAgcmV0dXJuIGAtJHt0cmFuc2Zvcm1lZH1gO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0eWxlRnJvbVByb3BWYWx1ZShjc3NQcm9wZXJ0aWVzLCB0cmFuc2Zvcm1lcikge1xuICByZXR1cm4gcHJvcFZhbHVlID0+IGNzc1Byb3BlcnRpZXMucmVkdWNlKChhY2MsIGNzc1Byb3BlcnR5KSA9PiB7XG4gICAgYWNjW2Nzc1Byb3BlcnR5XSA9IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVDc3NQcm9wZXJ0eShwcm9wcywga2V5cywgcHJvcCwgdHJhbnNmb3JtZXIpIHtcbiAgLy8gVXNpbmcgYSBoYXNoIGNvbXB1dGF0aW9uIG92ZXIgYW4gYXJyYXkgaXRlcmF0aW9uIGNvdWxkIGJlIGZhc3RlciwgYnV0IHdpdGggb25seSAyOCBpdGVtcyxcbiAgLy8gaXQncyBkb2Vzbid0IHdvcnRoIHRoZSBidW5kbGUgc2l6ZS5cbiAgaWYgKGtleXMuaW5kZXhPZihwcm9wKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBjc3NQcm9wZXJ0aWVzID0gZ2V0Q3NzUHJvcGVydGllcyhwcm9wKTtcbiAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gZ2V0U3R5bGVGcm9tUHJvcFZhbHVlKGNzc1Byb3BlcnRpZXMsIHRyYW5zZm9ybWVyKTtcbiAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbcHJvcF07XG4gIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xufVxuZnVuY3Rpb24gc3R5bGUocHJvcHMsIGtleXMpIHtcbiAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVNwYWNpbmcocHJvcHMudGhlbWUpO1xuICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLm1hcChwcm9wID0+IHJlc29sdmVDc3NQcm9wZXJ0eShwcm9wcywga2V5cywgcHJvcCwgdHJhbnNmb3JtZXIpKS5yZWR1Y2UobWVyZ2UsIHt9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYXJnaW4ocHJvcHMpIHtcbiAgcmV0dXJuIHN0eWxlKHByb3BzLCBtYXJnaW5LZXlzKTtcbn1cbm1hcmdpbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gbWFyZ2luS2V5cy5yZWR1Y2UoKG9iaiwga2V5KSA9PiB7XG4gIG9ialtrZXldID0gcmVzcG9uc2l2ZVByb3BUeXBlO1xuICByZXR1cm4gb2JqO1xufSwge30pIDoge307XG5tYXJnaW4uZmlsdGVyUHJvcHMgPSBtYXJnaW5LZXlzO1xuZXhwb3J0IGZ1bmN0aW9uIHBhZGRpbmcocHJvcHMpIHtcbiAgcmV0dXJuIHN0eWxlKHByb3BzLCBwYWRkaW5nS2V5cyk7XG59XG5wYWRkaW5nLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBwYWRkaW5nS2V5cy5yZWR1Y2UoKG9iaiwga2V5KSA9PiB7XG4gIG9ialtrZXldID0gcmVzcG9uc2l2ZVByb3BUeXBlO1xuICByZXR1cm4gb2JqO1xufSwge30pIDoge307XG5wYWRkaW5nLmZpbHRlclByb3BzID0gcGFkZGluZ0tleXM7XG5mdW5jdGlvbiBzcGFjaW5nKHByb3BzKSB7XG4gIHJldHVybiBzdHlsZShwcm9wcywgc3BhY2luZ0tleXMpO1xufVxuc3BhY2luZy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gc3BhY2luZ0tleXMucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICBvYmpba2V5XSA9IHJlc3BvbnNpdmVQcm9wVHlwZTtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KSA6IHt9O1xuc3BhY2luZy5maWx0ZXJQcm9wcyA9IHNwYWNpbmdLZXlzO1xuZXhwb3J0IGRlZmF1bHQgc3BhY2luZzsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIGNvbnN0IGNhY2hlID0ge307XG4gIHJldHVybiBhcmcgPT4ge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn0iLCJpbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5mdW5jdGlvbiBjb21wb3NlKC4uLnN0eWxlcykge1xuICBjb25zdCBoYW5kbGVycyA9IHN0eWxlcy5yZWR1Y2UoKGFjYywgc3R5bGUpID0+IHtcbiAgICBzdHlsZS5maWx0ZXJQcm9wcy5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgYWNjW3Byb3BdID0gc3R5bGU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuXG4gIC8vIGZhbHNlIHBvc2l0aXZlXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuICBjb25zdCBmbiA9IHByb3BzID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLnJlZHVjZSgoYWNjLCBwcm9wKSA9PiB7XG4gICAgICBpZiAoaGFuZGxlcnNbcHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlKGFjYywgaGFuZGxlcnNbcHJvcF0ocHJvcHMpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9O1xuICBmbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gc3R5bGVzLnJlZHVjZSgoYWNjLCBzdHlsZSkgPT4gT2JqZWN0LmFzc2lnbihhY2MsIHN0eWxlLnByb3BUeXBlcyksIHt9KSA6IHt9O1xuICBmbi5maWx0ZXJQcm9wcyA9IHN0eWxlcy5yZWR1Y2UoKGFjYywgc3R5bGUpID0+IGFjYy5jb25jYXQoc3R5bGUuZmlsdGVyUHJvcHMpLCBbXSk7XG4gIHJldHVybiBmbjtcbn1cbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2U7IiwiaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5pbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuaW1wb3J0IHsgY3JlYXRlVW5hcnlVbml0LCBnZXRWYWx1ZSB9IGZyb20gJy4vc3BhY2luZyc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuZXhwb3J0IGZ1bmN0aW9uIGJvcmRlclRyYW5zZm9ybSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gYCR7dmFsdWV9cHggc29saWRgO1xufVxuZnVuY3Rpb24gY3JlYXRlQm9yZGVyU3R5bGUocHJvcCwgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBzdHlsZSh7XG4gICAgcHJvcCxcbiAgICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICAgIHRyYW5zZm9ybVxuICB9KTtcbn1cbmV4cG9ydCBjb25zdCBib3JkZXIgPSBjcmVhdGVCb3JkZXJTdHlsZSgnYm9yZGVyJywgYm9yZGVyVHJhbnNmb3JtKTtcbmV4cG9ydCBjb25zdCBib3JkZXJUb3AgPSBjcmVhdGVCb3JkZXJTdHlsZSgnYm9yZGVyVG9wJywgYm9yZGVyVHJhbnNmb3JtKTtcbmV4cG9ydCBjb25zdCBib3JkZXJSaWdodCA9IGNyZWF0ZUJvcmRlclN0eWxlKCdib3JkZXJSaWdodCcsIGJvcmRlclRyYW5zZm9ybSk7XG5leHBvcnQgY29uc3QgYm9yZGVyQm90dG9tID0gY3JlYXRlQm9yZGVyU3R5bGUoJ2JvcmRlckJvdHRvbScsIGJvcmRlclRyYW5zZm9ybSk7XG5leHBvcnQgY29uc3QgYm9yZGVyTGVmdCA9IGNyZWF0ZUJvcmRlclN0eWxlKCdib3JkZXJMZWZ0JywgYm9yZGVyVHJhbnNmb3JtKTtcbmV4cG9ydCBjb25zdCBib3JkZXJDb2xvciA9IGNyZWF0ZUJvcmRlclN0eWxlKCdib3JkZXJDb2xvcicpO1xuZXhwb3J0IGNvbnN0IGJvcmRlclRvcENvbG9yID0gY3JlYXRlQm9yZGVyU3R5bGUoJ2JvcmRlclRvcENvbG9yJyk7XG5leHBvcnQgY29uc3QgYm9yZGVyUmlnaHRDb2xvciA9IGNyZWF0ZUJvcmRlclN0eWxlKCdib3JkZXJSaWdodENvbG9yJyk7XG5leHBvcnQgY29uc3QgYm9yZGVyQm90dG9tQ29sb3IgPSBjcmVhdGVCb3JkZXJTdHlsZSgnYm9yZGVyQm90dG9tQ29sb3InKTtcbmV4cG9ydCBjb25zdCBib3JkZXJMZWZ0Q29sb3IgPSBjcmVhdGVCb3JkZXJTdHlsZSgnYm9yZGVyTGVmdENvbG9yJyk7XG5leHBvcnQgY29uc3Qgb3V0bGluZSA9IGNyZWF0ZUJvcmRlclN0eWxlKCdvdXRsaW5lJywgYm9yZGVyVHJhbnNmb3JtKTtcbmV4cG9ydCBjb25zdCBvdXRsaW5lQ29sb3IgPSBjcmVhdGVCb3JkZXJTdHlsZSgnb3V0bGluZUNvbG9yJyk7XG5cbi8vIGZhbHNlIHBvc2l0aXZlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbmV4cG9ydCBjb25zdCBib3JkZXJSYWRpdXMgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5ib3JkZXJSYWRpdXMgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5ib3JkZXJSYWRpdXMgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NoYXBlLmJvcmRlclJhZGl1cycsIDQsICdib3JkZXJSYWRpdXMnKTtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4gKHtcbiAgICAgIGJvcmRlclJhZGl1czogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICB9KTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLmJvcmRlclJhZGl1cywgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5ib3JkZXJSYWRpdXMucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgYm9yZGVyUmFkaXVzOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbmJvcmRlclJhZGl1cy5maWx0ZXJQcm9wcyA9IFsnYm9yZGVyUmFkaXVzJ107XG5jb25zdCBib3JkZXJzID0gY29tcG9zZShib3JkZXIsIGJvcmRlclRvcCwgYm9yZGVyUmlnaHQsIGJvcmRlckJvdHRvbSwgYm9yZGVyTGVmdCwgYm9yZGVyQ29sb3IsIGJvcmRlclRvcENvbG9yLCBib3JkZXJSaWdodENvbG9yLCBib3JkZXJCb3R0b21Db2xvciwgYm9yZGVyTGVmdENvbG9yLCBib3JkZXJSYWRpdXMsIG91dGxpbmUsIG91dGxpbmVDb2xvcik7XG5leHBvcnQgZGVmYXVsdCBib3JkZXJzOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5pbXBvcnQgeyBjcmVhdGVVbmFyeVVuaXQsIGdldFZhbHVlIH0gZnJvbSAnLi9zcGFjaW5nJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5pbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcblxuLy8gZmFsc2UgcG9zaXRpdmVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuZXhwb3J0IGNvbnN0IGdhcCA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLmdhcCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmdhcCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlVbml0KHByb3BzLnRoZW1lLCAnc3BhY2luZycsIDgsICdnYXAnKTtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4gKHtcbiAgICAgIGdhcDogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICB9KTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLmdhcCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5nYXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgZ2FwOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbmdhcC5maWx0ZXJQcm9wcyA9IFsnZ2FwJ107XG5cbi8vIGZhbHNlIHBvc2l0aXZlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbmV4cG9ydCBjb25zdCBjb2x1bW5HYXAgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5jb2x1bW5HYXAgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5jb2x1bW5HYXAgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NwYWNpbmcnLCA4LCAnY29sdW1uR2FwJyk7XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+ICh7XG4gICAgICBjb2x1bW5HYXA6IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpXG4gICAgfSk7XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5jb2x1bW5HYXAsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuY29sdW1uR2FwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gIGNvbHVtbkdhcDogcmVzcG9uc2l2ZVByb3BUeXBlXG59IDoge307XG5jb2x1bW5HYXAuZmlsdGVyUHJvcHMgPSBbJ2NvbHVtbkdhcCddO1xuXG4vLyBmYWxzZSBwb3NpdGl2ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Z1bmN0aW9uLWNvbXBvbmVudC1kZWZpbml0aW9uXG5leHBvcnQgY29uc3Qgcm93R2FwID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMucm93R2FwICE9PSB1bmRlZmluZWQgJiYgcHJvcHMucm93R2FwICE9PSBudWxsKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVVuaXQocHJvcHMudGhlbWUsICdzcGFjaW5nJywgOCwgJ3Jvd0dhcCcpO1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiAoe1xuICAgICAgcm93R2FwOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgIH0pO1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMucm93R2FwLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbnJvd0dhcC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICByb3dHYXA6IHJlc3BvbnNpdmVQcm9wVHlwZVxufSA6IHt9O1xucm93R2FwLmZpbHRlclByb3BzID0gWydyb3dHYXAnXTtcbmV4cG9ydCBjb25zdCBncmlkQ29sdW1uID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZENvbHVtbidcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRSb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkUm93J1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZEF1dG9GbG93ID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEF1dG9GbG93J1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZEF1dG9Db2x1bW5zID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEF1dG9Db2x1bW5zJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZEF1dG9Sb3dzID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEF1dG9Sb3dzJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZFRlbXBsYXRlQ29sdW1ucyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRUZW1wbGF0ZUNvbHVtbnMnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkVGVtcGxhdGVSb3dzID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFRlbXBsYXRlUm93cydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRUZW1wbGF0ZUFyZWFzID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFRlbXBsYXRlQXJlYXMnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXJlYSA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBcmVhJ1xufSk7XG5jb25zdCBncmlkID0gY29tcG9zZShnYXAsIGNvbHVtbkdhcCwgcm93R2FwLCBncmlkQ29sdW1uLCBncmlkUm93LCBncmlkQXV0b0Zsb3csIGdyaWRBdXRvQ29sdW1ucywgZ3JpZEF1dG9Sb3dzLCBncmlkVGVtcGxhdGVDb2x1bW5zLCBncmlkVGVtcGxhdGVSb3dzLCBncmlkVGVtcGxhdGVBcmVhcywgZ3JpZEFyZWEpO1xuZXhwb3J0IGRlZmF1bHQgZ3JpZDsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIHBhbGV0dGVUcmFuc2Zvcm0odmFsdWUsIHVzZXJWYWx1ZSkge1xuICBpZiAodXNlclZhbHVlID09PSAnZ3JleScpIHtcbiAgICByZXR1cm4gdXNlclZhbHVlO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmV4cG9ydCBjb25zdCBjb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2NvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJyxcbiAgdHJhbnNmb3JtOiBwYWxldHRlVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBiZ2NvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYmdjb2xvcicsXG4gIGNzc1Byb3BlcnR5OiAnYmFja2dyb3VuZENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJyxcbiAgdHJhbnNmb3JtOiBwYWxldHRlVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbn0pO1xuY29uc3QgcGFsZXR0ZSA9IGNvbXBvc2UoY29sb3IsIGJnY29sb3IsIGJhY2tncm91bmRDb2xvcik7XG5leHBvcnQgZGVmYXVsdCBwYWxldHRlOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cywgdmFsdWVzIGFzIGJyZWFrcG9pbnRzVmFsdWVzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5leHBvcnQgZnVuY3Rpb24gc2l6aW5nVHJhbnNmb3JtKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA8PSAxICYmIHZhbHVlICE9PSAwID8gYCR7dmFsdWUgKiAxMDB9JWAgOiB2YWx1ZTtcbn1cbmV4cG9ydCBjb25zdCB3aWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ3dpZHRoJyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IG1heFdpZHRoID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMubWF4V2lkdGggIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5tYXhXaWR0aCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiB7XG4gICAgICB2YXIgX3Byb3BzJHRoZW1lLCBfcHJvcHMkdGhlbWUyO1xuICAgICAgY29uc3QgYnJlYWtwb2ludCA9ICgoX3Byb3BzJHRoZW1lID0gcHJvcHMudGhlbWUpID09IG51bGwgfHwgKF9wcm9wcyR0aGVtZSA9IF9wcm9wcyR0aGVtZS5icmVha3BvaW50cykgPT0gbnVsbCB8fCAoX3Byb3BzJHRoZW1lID0gX3Byb3BzJHRoZW1lLnZhbHVlcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9wcm9wcyR0aGVtZVtwcm9wVmFsdWVdKSB8fCBicmVha3BvaW50c1ZhbHVlc1twcm9wVmFsdWVdO1xuICAgICAgaWYgKCFicmVha3BvaW50KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWF4V2lkdGg6IHNpemluZ1RyYW5zZm9ybShwcm9wVmFsdWUpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAoKChfcHJvcHMkdGhlbWUyID0gcHJvcHMudGhlbWUpID09IG51bGwgfHwgKF9wcm9wcyR0aGVtZTIgPSBfcHJvcHMkdGhlbWUyLmJyZWFrcG9pbnRzKSA9PSBudWxsID8gdm9pZCAwIDogX3Byb3BzJHRoZW1lMi51bml0KSAhPT0gJ3B4Jykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1heFdpZHRoOiBgJHticmVha3BvaW50fSR7cHJvcHMudGhlbWUuYnJlYWtwb2ludHMudW5pdH1gXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXhXaWR0aDogYnJlYWtwb2ludFxuICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMubWF4V2lkdGgsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xubWF4V2lkdGguZmlsdGVyUHJvcHMgPSBbJ21heFdpZHRoJ107XG5leHBvcnQgY29uc3QgbWluV2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICdtaW5XaWR0aCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBoZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdoZWlnaHQnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgbWF4SGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnbWF4SGVpZ2h0JyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IG1pbkhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ21pbkhlaWdodCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBzaXplV2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICdzaXplJyxcbiAgY3NzUHJvcGVydHk6ICd3aWR0aCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBzaXplSGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnc2l6ZScsXG4gIGNzc1Byb3BlcnR5OiAnaGVpZ2h0JyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJveFNpemluZyA9IHN0eWxlKHtcbiAgcHJvcDogJ2JveFNpemluZydcbn0pO1xuY29uc3Qgc2l6aW5nID0gY29tcG9zZSh3aWR0aCwgbWF4V2lkdGgsIG1pbldpZHRoLCBoZWlnaHQsIG1heEhlaWdodCwgbWluSGVpZ2h0LCBib3hTaXppbmcpO1xuZXhwb3J0IGRlZmF1bHQgc2l6aW5nOyIsImltcG9ydCB7IHBhZGRpbmcsIG1hcmdpbiB9IGZyb20gJy4uL3NwYWNpbmcnO1xuaW1wb3J0IHsgYm9yZGVyUmFkaXVzLCBib3JkZXJUcmFuc2Zvcm0gfSBmcm9tICcuLi9ib3JkZXJzJztcbmltcG9ydCB7IGdhcCwgcm93R2FwLCBjb2x1bW5HYXAgfSBmcm9tICcuLi9jc3NHcmlkJztcbmltcG9ydCB7IHBhbGV0dGVUcmFuc2Zvcm0gfSBmcm9tICcuLi9wYWxldHRlJztcbmltcG9ydCB7IG1heFdpZHRoLCBzaXppbmdUcmFuc2Zvcm0gfSBmcm9tICcuLi9zaXppbmcnO1xuY29uc3QgZGVmYXVsdFN4Q29uZmlnID0ge1xuICAvLyBib3JkZXJzXG4gIGJvcmRlcjoge1xuICAgIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gICAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbiAgfSxcbiAgYm9yZGVyVG9wOiB7XG4gICAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxuICB9LFxuICBib3JkZXJSaWdodDoge1xuICAgIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gICAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbiAgfSxcbiAgYm9yZGVyQm90dG9tOiB7XG4gICAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxuICB9LFxuICBib3JkZXJMZWZ0OiB7XG4gICAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxuICB9LFxuICBib3JkZXJDb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZSdcbiAgfSxcbiAgYm9yZGVyVG9wQ29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnXG4gIH0sXG4gIGJvcmRlclJpZ2h0Q29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnXG4gIH0sXG4gIGJvcmRlckJvdHRvbUNvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJ1xuICB9LFxuICBib3JkZXJMZWZ0Q29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnXG4gIH0sXG4gIG91dGxpbmU6IHtcbiAgICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICAgIHRyYW5zZm9ybTogYm9yZGVyVHJhbnNmb3JtXG4gIH0sXG4gIG91dGxpbmVDb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZSdcbiAgfSxcbiAgYm9yZGVyUmFkaXVzOiB7XG4gICAgdGhlbWVLZXk6ICdzaGFwZS5ib3JkZXJSYWRpdXMnLFxuICAgIHN0eWxlOiBib3JkZXJSYWRpdXNcbiAgfSxcbiAgLy8gcGFsZXR0ZVxuICBjb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZScsXG4gICAgdHJhbnNmb3JtOiBwYWxldHRlVHJhbnNmb3JtXG4gIH0sXG4gIGJnY29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICAgIGNzc1Byb3BlcnR5OiAnYmFja2dyb3VuZENvbG9yJyxcbiAgICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbiAgfSxcbiAgYmFja2dyb3VuZENvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJyxcbiAgICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbiAgfSxcbiAgLy8gc3BhY2luZ1xuICBwOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcHQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwcjoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBiOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGw6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBweDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHB5OiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZzoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdUb3A6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nUmlnaHQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nQm90dG9tOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0xlZnQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nWDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdZOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0lubGluZToge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdJbmxpbmVTdGFydDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdJbmxpbmVFbmQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nQmxvY2s6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nQmxvY2tTdGFydDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdCbG9ja0VuZDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIG06IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG10OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtcjoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWI6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1sOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBteDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbXk6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbjoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luVG9wOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5SaWdodDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luQm90dG9tOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5MZWZ0OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5YOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5ZOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5JbmxpbmU6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbklubGluZVN0YXJ0OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5JbmxpbmVFbmQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbkJsb2NrOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5CbG9ja1N0YXJ0OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5CbG9ja0VuZDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgLy8gZGlzcGxheVxuICBkaXNwbGF5UHJpbnQ6IHtcbiAgICBjc3NQcm9wZXJ0eTogZmFsc2UsXG4gICAgdHJhbnNmb3JtOiB2YWx1ZSA9PiAoe1xuICAgICAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICAgICAgZGlzcGxheTogdmFsdWVcbiAgICAgIH1cbiAgICB9KVxuICB9LFxuICBkaXNwbGF5OiB7fSxcbiAgb3ZlcmZsb3c6IHt9LFxuICB0ZXh0T3ZlcmZsb3c6IHt9LFxuICB2aXNpYmlsaXR5OiB7fSxcbiAgd2hpdGVTcGFjZToge30sXG4gIC8vIGZsZXhib3hcbiAgZmxleEJhc2lzOiB7fSxcbiAgZmxleERpcmVjdGlvbjoge30sXG4gIGZsZXhXcmFwOiB7fSxcbiAganVzdGlmeUNvbnRlbnQ6IHt9LFxuICBhbGlnbkl0ZW1zOiB7fSxcbiAgYWxpZ25Db250ZW50OiB7fSxcbiAgb3JkZXI6IHt9LFxuICBmbGV4OiB7fSxcbiAgZmxleEdyb3c6IHt9LFxuICBmbGV4U2hyaW5rOiB7fSxcbiAgYWxpZ25TZWxmOiB7fSxcbiAganVzdGlmeUl0ZW1zOiB7fSxcbiAganVzdGlmeVNlbGY6IHt9LFxuICAvLyBncmlkXG4gIGdhcDoge1xuICAgIHN0eWxlOiBnYXBcbiAgfSxcbiAgcm93R2FwOiB7XG4gICAgc3R5bGU6IHJvd0dhcFxuICB9LFxuICBjb2x1bW5HYXA6IHtcbiAgICBzdHlsZTogY29sdW1uR2FwXG4gIH0sXG4gIGdyaWRDb2x1bW46IHt9LFxuICBncmlkUm93OiB7fSxcbiAgZ3JpZEF1dG9GbG93OiB7fSxcbiAgZ3JpZEF1dG9Db2x1bW5zOiB7fSxcbiAgZ3JpZEF1dG9Sb3dzOiB7fSxcbiAgZ3JpZFRlbXBsYXRlQ29sdW1uczoge30sXG4gIGdyaWRUZW1wbGF0ZVJvd3M6IHt9LFxuICBncmlkVGVtcGxhdGVBcmVhczoge30sXG4gIGdyaWRBcmVhOiB7fSxcbiAgLy8gcG9zaXRpb25zXG4gIHBvc2l0aW9uOiB7fSxcbiAgekluZGV4OiB7XG4gICAgdGhlbWVLZXk6ICd6SW5kZXgnXG4gIH0sXG4gIHRvcDoge30sXG4gIHJpZ2h0OiB7fSxcbiAgYm90dG9tOiB7fSxcbiAgbGVmdDoge30sXG4gIC8vIHNoYWRvd3NcbiAgYm94U2hhZG93OiB7XG4gICAgdGhlbWVLZXk6ICdzaGFkb3dzJ1xuICB9LFxuICAvLyBzaXppbmdcbiAgd2lkdGg6IHtcbiAgICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxuICB9LFxuICBtYXhXaWR0aDoge1xuICAgIHN0eWxlOiBtYXhXaWR0aFxuICB9LFxuICBtaW5XaWR0aDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIGhlaWdodDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIG1heEhlaWdodDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIG1pbkhlaWdodDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIGJveFNpemluZzoge30sXG4gIC8vIHR5cG9ncmFwaHlcbiAgZm9udEZhbWlseToge1xuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfSxcbiAgZm9udFNpemU6IHtcbiAgICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG4gIH0sXG4gIGZvbnRTdHlsZToge1xuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfSxcbiAgZm9udFdlaWdodDoge1xuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfSxcbiAgbGV0dGVyU3BhY2luZzoge30sXG4gIHRleHRUcmFuc2Zvcm06IHt9LFxuICBsaW5lSGVpZ2h0OiB7fSxcbiAgdGV4dEFsaWduOiB7fSxcbiAgdHlwb2dyYXBoeToge1xuICAgIGNzc1Byb3BlcnR5OiBmYWxzZSxcbiAgICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0U3hDb25maWc7IiwiaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vbWVyZ2UnO1xuaW1wb3J0IHsgZ2V0UGF0aCwgZ2V0U3R5bGVWYWx1ZSBhcyBnZXRWYWx1ZSB9IGZyb20gJy4uL3N0eWxlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzLCBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QsIHJlbW92ZVVudXNlZEJyZWFrcG9pbnRzIH0gZnJvbSAnLi4vYnJlYWtwb2ludHMnO1xuaW1wb3J0IGRlZmF1bHRTeENvbmZpZyBmcm9tICcuL2RlZmF1bHRTeENvbmZpZyc7XG5mdW5jdGlvbiBvYmplY3RzSGF2ZVNhbWVLZXlzKC4uLm9iamVjdHMpIHtcbiAgY29uc3QgYWxsS2V5cyA9IG9iamVjdHMucmVkdWNlKChrZXlzLCBvYmplY3QpID0+IGtleXMuY29uY2F0KE9iamVjdC5rZXlzKG9iamVjdCkpLCBbXSk7XG4gIGNvbnN0IHVuaW9uID0gbmV3IFNldChhbGxLZXlzKTtcbiAgcmV0dXJuIG9iamVjdHMuZXZlcnkob2JqZWN0ID0+IHVuaW9uLnNpemUgPT09IE9iamVjdC5rZXlzKG9iamVjdCkubGVuZ3RoKTtcbn1cbmZ1bmN0aW9uIGNhbGxJZkZuKG1heWJlRm4sIGFyZykge1xuICByZXR1cm4gdHlwZW9mIG1heWJlRm4gPT09ICdmdW5jdGlvbicgPyBtYXliZUZuKGFyZykgOiBtYXliZUZuO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gdW5zdGFibGVfY3JlYXRlU3R5bGVGdW5jdGlvblN4KCkge1xuICBmdW5jdGlvbiBnZXRUaGVtZVZhbHVlKHByb3AsIHZhbCwgdGhlbWUsIGNvbmZpZykge1xuICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgW3Byb3BdOiB2YWwsXG4gICAgICB0aGVtZVxuICAgIH07XG4gICAgY29uc3Qgb3B0aW9ucyA9IGNvbmZpZ1twcm9wXTtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtwcm9wXTogdmFsXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBjc3NQcm9wZXJ0eSA9IHByb3AsXG4gICAgICB0aGVtZUtleSxcbiAgICAgIHRyYW5zZm9ybSxcbiAgICAgIHN0eWxlXG4gICAgfSA9IG9wdGlvbnM7XG4gICAgaWYgKHZhbCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBUT0RPIHY2OiByZW1vdmUsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL3B1bGwvMzgxMjNcbiAgICBpZiAodGhlbWVLZXkgPT09ICd0eXBvZ3JhcGh5JyAmJiB2YWwgPT09ICdpbmhlcml0Jykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW3Byb3BdOiB2YWxcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHRoZW1lTWFwcGluZyA9IGdldFBhdGgodGhlbWUsIHRoZW1lS2V5KSB8fCB7fTtcbiAgICBpZiAoc3R5bGUpIHtcbiAgICAgIHJldHVybiBzdHlsZShwcm9wcyk7XG4gICAgfVxuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZUZpbmFsID0+IHtcbiAgICAgIGxldCB2YWx1ZSA9IGdldFZhbHVlKHRoZW1lTWFwcGluZywgdHJhbnNmb3JtLCBwcm9wVmFsdWVGaW5hbCk7XG4gICAgICBpZiAocHJvcFZhbHVlRmluYWwgPT09IHZhbHVlICYmIHR5cGVvZiBwcm9wVmFsdWVGaW5hbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gSGF2ZW4ndCBmb3VuZCB2YWx1ZVxuICAgICAgICB2YWx1ZSA9IGdldFZhbHVlKHRoZW1lTWFwcGluZywgdHJhbnNmb3JtLCBgJHtwcm9wfSR7cHJvcFZhbHVlRmluYWwgPT09ICdkZWZhdWx0JyA/ICcnIDogY2FwaXRhbGl6ZShwcm9wVmFsdWVGaW5hbCl9YCwgcHJvcFZhbHVlRmluYWwpO1xuICAgICAgfVxuICAgICAgaWYgKGNzc1Byb3BlcnR5ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbY3NzUHJvcGVydHldOiB2YWx1ZVxuICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgdmFsLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG4gIGZ1bmN0aW9uIHN0eWxlRnVuY3Rpb25TeChwcm9wcykge1xuICAgIHZhciBfdGhlbWUkdW5zdGFibGVfc3hDb247XG4gICAgY29uc3Qge1xuICAgICAgc3gsXG4gICAgICB0aGVtZSA9IHt9XG4gICAgfSA9IHByb3BzIHx8IHt9O1xuICAgIGlmICghc3gpIHtcbiAgICAgIHJldHVybiBudWxsOyAvLyBFbW90aW9uICYgc3R5bGVkLWNvbXBvbmVudHMgd2lsbCBuZWdsZWN0IG51bGxcbiAgICB9XG4gICAgY29uc3QgY29uZmlnID0gKF90aGVtZSR1bnN0YWJsZV9zeENvbiA9IHRoZW1lLnVuc3RhYmxlX3N4Q29uZmlnKSAhPSBudWxsID8gX3RoZW1lJHVuc3RhYmxlX3N4Q29uIDogZGVmYXVsdFN4Q29uZmlnO1xuXG4gICAgLypcbiAgICAgKiBSZWNlaXZlIGBzeElucHV0YCBhcyBvYmplY3Qgb3IgY2FsbGJhY2tcbiAgICAgKiBhbmQgdGhlbiByZWN1cnNpdmVseSBjaGVjayBrZXlzICYgdmFsdWVzIHRvIGNyZWF0ZSBtZWRpYSBxdWVyeSBvYmplY3Qgc3R5bGVzLlxuICAgICAqICh0aGUgcmVzdWx0IHdpbGwgYmUgdXNlZCBpbiBgc3R5bGVkYClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmF2ZXJzZShzeElucHV0KSB7XG4gICAgICBsZXQgc3hPYmplY3QgPSBzeElucHV0O1xuICAgICAgaWYgKHR5cGVvZiBzeElucHV0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHN4T2JqZWN0ID0gc3hJbnB1dCh0aGVtZSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzeElucHV0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyB2YWx1ZVxuICAgICAgICByZXR1cm4gc3hJbnB1dDtcbiAgICAgIH1cbiAgICAgIGlmICghc3hPYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBjb25zdCBlbXB0eUJyZWFrcG9pbnRzID0gY3JlYXRlRW1wdHlCcmVha3BvaW50T2JqZWN0KHRoZW1lLmJyZWFrcG9pbnRzKTtcbiAgICAgIGNvbnN0IGJyZWFrcG9pbnRzS2V5cyA9IE9iamVjdC5rZXlzKGVtcHR5QnJlYWtwb2ludHMpO1xuICAgICAgbGV0IGNzcyA9IGVtcHR5QnJlYWtwb2ludHM7XG4gICAgICBPYmplY3Qua2V5cyhzeE9iamVjdCkuZm9yRWFjaChzdHlsZUtleSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gY2FsbElmRm4oc3hPYmplY3Rbc3R5bGVLZXldLCB0aGVtZSk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGlmIChjb25maWdbc3R5bGVLZXldKSB7XG4gICAgICAgICAgICAgIGNzcyA9IG1lcmdlKGNzcywgZ2V0VGhlbWVWYWx1ZShzdHlsZUtleSwgdmFsdWUsIHRoZW1lLCBjb25maWcpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnN0IGJyZWFrcG9pbnRzVmFsdWVzID0gaGFuZGxlQnJlYWtwb2ludHMoe1xuICAgICAgICAgICAgICAgIHRoZW1lXG4gICAgICAgICAgICAgIH0sIHZhbHVlLCB4ID0+ICh7XG4gICAgICAgICAgICAgICAgW3N0eWxlS2V5XTogeFxuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgIGlmIChvYmplY3RzSGF2ZVNhbWVLZXlzKGJyZWFrcG9pbnRzVmFsdWVzLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBjc3Nbc3R5bGVLZXldID0gc3R5bGVGdW5jdGlvblN4KHtcbiAgICAgICAgICAgICAgICAgIHN4OiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgIHRoZW1lXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3NzID0gbWVyZ2UoY3NzLCBicmVha3BvaW50c1ZhbHVlcyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3NzID0gbWVyZ2UoY3NzLCBnZXRUaGVtZVZhbHVlKHN0eWxlS2V5LCB2YWx1ZSwgdGhlbWUsIGNvbmZpZykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVtb3ZlVW51c2VkQnJlYWtwb2ludHMoYnJlYWtwb2ludHNLZXlzLCBjc3MpO1xuICAgIH1cbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShzeCkgPyBzeC5tYXAodHJhdmVyc2UpIDogdHJhdmVyc2Uoc3gpO1xuICB9XG4gIHJldHVybiBzdHlsZUZ1bmN0aW9uU3g7XG59XG5jb25zdCBzdHlsZUZ1bmN0aW9uU3ggPSB1bnN0YWJsZV9jcmVhdGVTdHlsZUZ1bmN0aW9uU3goKTtcbnN0eWxlRnVuY3Rpb25TeC5maWx0ZXJQcm9wcyA9IFsnc3gnXTtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlRnVuY3Rpb25TeDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYnJlYWtwb2ludHNcIiwgXCJwYWxldHRlXCIsIFwic3BhY2luZ1wiLCBcInNoYXBlXCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgY3JlYXRlQnJlYWtwb2ludHMgZnJvbSAnLi9jcmVhdGVCcmVha3BvaW50cyc7XG5pbXBvcnQgc2hhcGUgZnJvbSAnLi9zaGFwZSc7XG5pbXBvcnQgY3JlYXRlU3BhY2luZyBmcm9tICcuL2NyZWF0ZVNwYWNpbmcnO1xuaW1wb3J0IHN0eWxlRnVuY3Rpb25TeCBmcm9tICcuLi9zdHlsZUZ1bmN0aW9uU3gvc3R5bGVGdW5jdGlvblN4JztcbmltcG9ydCBkZWZhdWx0U3hDb25maWcgZnJvbSAnLi4vc3R5bGVGdW5jdGlvblN4L2RlZmF1bHRTeENvbmZpZyc7XG5mdW5jdGlvbiBjcmVhdGVUaGVtZShvcHRpb25zID0ge30sIC4uLmFyZ3MpIHtcbiAgY29uc3Qge1xuICAgICAgYnJlYWtwb2ludHM6IGJyZWFrcG9pbnRzSW5wdXQgPSB7fSxcbiAgICAgIHBhbGV0dGU6IHBhbGV0dGVJbnB1dCA9IHt9LFxuICAgICAgc3BhY2luZzogc3BhY2luZ0lucHV0LFxuICAgICAgc2hhcGU6IHNoYXBlSW5wdXQgPSB7fVxuICAgIH0gPSBvcHRpb25zLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uob3B0aW9ucywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgYnJlYWtwb2ludHMgPSBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50c0lucHV0KTtcbiAgY29uc3Qgc3BhY2luZyA9IGNyZWF0ZVNwYWNpbmcoc3BhY2luZ0lucHV0KTtcbiAgbGV0IG11aVRoZW1lID0gZGVlcG1lcmdlKHtcbiAgICBicmVha3BvaW50cyxcbiAgICBkaXJlY3Rpb246ICdsdHInLFxuICAgIGNvbXBvbmVudHM6IHt9LFxuICAgIC8vIEluamVjdCBjb21wb25lbnQgZGVmaW5pdGlvbnMuXG4gICAgcGFsZXR0ZTogX2V4dGVuZHMoe1xuICAgICAgbW9kZTogJ2xpZ2h0J1xuICAgIH0sIHBhbGV0dGVJbnB1dCksXG4gICAgc3BhY2luZyxcbiAgICBzaGFwZTogX2V4dGVuZHMoe30sIHNoYXBlLCBzaGFwZUlucHV0KVxuICB9LCBvdGhlcik7XG4gIG11aVRoZW1lID0gYXJncy5yZWR1Y2UoKGFjYywgYXJndW1lbnQpID0+IGRlZXBtZXJnZShhY2MsIGFyZ3VtZW50KSwgbXVpVGhlbWUpO1xuICBtdWlUaGVtZS51bnN0YWJsZV9zeENvbmZpZyA9IF9leHRlbmRzKHt9LCBkZWZhdWx0U3hDb25maWcsIG90aGVyID09IG51bGwgPyB2b2lkIDAgOiBvdGhlci51bnN0YWJsZV9zeENvbmZpZyk7XG4gIG11aVRoZW1lLnVuc3RhYmxlX3N4ID0gZnVuY3Rpb24gc3gocHJvcHMpIHtcbiAgICByZXR1cm4gc3R5bGVGdW5jdGlvblN4KHtcbiAgICAgIHN4OiBwcm9wcyxcbiAgICAgIHRoZW1lOiB0aGlzXG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBtdWlUaGVtZTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRoZW1lOyIsImltcG9ydCB7IGNyZWF0ZVVuYXJ5U3BhY2luZyB9IGZyb20gJy4uL3NwYWNpbmcnO1xuXG4vLyBUaGUgZGlmZmVyZW50IHNpZ25hdHVyZXMgaW1wbHkgZGlmZmVyZW50IG1lYW5pbmcgZm9yIHRoZWlyIGFyZ3VtZW50cyB0aGF0IGNhbid0IGJlIGV4cHJlc3NlZCBzdHJ1Y3R1cmFsbHkuXG4vLyBXZSBleHByZXNzIHRoZSBkaWZmZXJlbmNlIHdpdGggdmFyaWFibGUgbmFtZXMuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVNwYWNpbmcoc3BhY2luZ0lucHV0ID0gOCkge1xuICAvLyBBbHJlYWR5IHRyYW5zZm9ybWVkLlxuICBpZiAoc3BhY2luZ0lucHV0Lm11aSkge1xuICAgIHJldHVybiBzcGFjaW5nSW5wdXQ7XG4gIH1cblxuICAvLyBNYXRlcmlhbCBEZXNpZ24gbGF5b3V0cyBhcmUgdmlzdWFsbHkgYmFsYW5jZWQuIE1vc3QgbWVhc3VyZW1lbnRzIGFsaWduIHRvIGFuIDhkcCBncmlkLCB3aGljaCBhbGlnbnMgYm90aCBzcGFjaW5nIGFuZCB0aGUgb3ZlcmFsbCBsYXlvdXQuXG4gIC8vIFNtYWxsZXIgY29tcG9uZW50cywgc3VjaCBhcyBpY29ucywgY2FuIGFsaWduIHRvIGEgNGRwIGdyaWQuXG4gIC8vIGh0dHBzOi8vbTIubWF0ZXJpYWwuaW8vZGVzaWduL2xheW91dC91bmRlcnN0YW5kaW5nLWxheW91dC5odG1sXG4gIGNvbnN0IHRyYW5zZm9ybSA9IGNyZWF0ZVVuYXJ5U3BhY2luZyh7XG4gICAgc3BhY2luZzogc3BhY2luZ0lucHV0XG4gIH0pO1xuICBjb25zdCBzcGFjaW5nID0gKC4uLmFyZ3NJbnB1dCkgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIShhcmdzSW5wdXQubGVuZ3RoIDw9IDQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVG9vIG1hbnkgYXJndW1lbnRzIHByb3ZpZGVkLCBleHBlY3RlZCBiZXR3ZWVuIDAgYW5kIDQsIGdvdCAke2FyZ3NJbnB1dC5sZW5ndGh9YCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGFyZ3MgPSBhcmdzSW5wdXQubGVuZ3RoID09PSAwID8gWzFdIDogYXJnc0lucHV0O1xuICAgIHJldHVybiBhcmdzLm1hcChhcmd1bWVudCA9PiB7XG4gICAgICBjb25zdCBvdXRwdXQgPSB0cmFuc2Zvcm0oYXJndW1lbnQpO1xuICAgICAgcmV0dXJuIHR5cGVvZiBvdXRwdXQgPT09ICdudW1iZXInID8gYCR7b3V0cHV0fXB4YCA6IG91dHB1dDtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH07XG4gIHNwYWNpbmcubXVpID0gdHJ1ZTtcbiAgcmV0dXJuIHNwYWNpbmc7XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJ2YXJpYW50XCJdO1xuaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5mdW5jdGlvbiBpc0VtcHR5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLmxlbmd0aCA9PT0gMDtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgc3RyaW5nIGNsYXNzS2V5IGJhc2VkIG9uIHRoZSBwcm9wZXJ0aWVzIHByb3ZpZGVkLiBJdCBzdGFydHMgd2l0aCB0aGVcbiAqIHZhcmlhbnQgaWYgZGVmaW5lZCwgYW5kIHRoZW4gaXQgYXBwZW5kcyBhbGwgb3RoZXIgcHJvcGVydGllcyBpbiBhbHBoYWJldGljYWwgb3JkZXIuXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgLSB0aGUgcHJvcGVydGllcyBmb3Igd2hpY2ggdGhlIGNsYXNzS2V5IHNob3VsZCBiZSBjcmVhdGVkLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9wc1RvQ2xhc3NLZXkocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgICAgdmFyaWFudFxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBsZXQgY2xhc3NLZXkgPSB2YXJpYW50IHx8ICcnO1xuICBPYmplY3Qua2V5cyhvdGhlcikuc29ydCgpLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAoa2V5ID09PSAnY29sb3InKSB7XG4gICAgICBjbGFzc0tleSArPSBpc0VtcHR5KGNsYXNzS2V5KSA/IHByb3BzW2tleV0gOiBjYXBpdGFsaXplKHByb3BzW2tleV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjbGFzc0tleSArPSBgJHtpc0VtcHR5KGNsYXNzS2V5KSA/IGtleSA6IGNhcGl0YWxpemUoa2V5KX0ke2NhcGl0YWxpemUocHJvcHNba2V5XS50b1N0cmluZygpKX1gO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjbGFzc0tleTtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wibmFtZVwiLCBcInNsb3RcIiwgXCJza2lwVmFyaWFudHNSZXNvbHZlclwiLCBcInNraXBTeFwiLCBcIm92ZXJyaWRlc1Jlc29sdmVyXCJdO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbmltcG9ydCBzdHlsZWRFbmdpbmVTdHlsZWQsIHsgaW50ZXJuYWxfcHJvY2Vzc1N0eWxlcyBhcyBwcm9jZXNzU3R5bGVzIH0gZnJvbSAnQG11aS9zdHlsZWQtZW5naW5lJztcbmltcG9ydCB7IGdldERpc3BsYXlOYW1lLCB1bnN0YWJsZV9jYXBpdGFsaXplIGFzIGNhcGl0YWxpemUsIGlzUGxhaW5PYmplY3QsIGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRoZW1lIGZyb20gJy4vY3JlYXRlVGhlbWUnO1xuaW1wb3J0IHByb3BzVG9DbGFzc0tleSBmcm9tICcuL3Byb3BzVG9DbGFzc0tleSc7XG5pbXBvcnQgc3R5bGVGdW5jdGlvblN4IGZyb20gJy4vc3R5bGVGdW5jdGlvblN4JztcbmZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Vtb3Rpb24tanMvZW1vdGlvbi9ibG9iLzI2ZGVkNjEwOWZjZDhjYTk4NzVjYzJjZTQ1NjRmZWU2NzhhM2YzYzUvcGFja2FnZXMvc3R5bGVkL3NyYy91dGlscy5qcyNMNDBcbmZ1bmN0aW9uIGlzU3RyaW5nVGFnKHRhZykge1xuICByZXR1cm4gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgJiZcbiAgLy8gOTYgaXMgb25lIGxlc3MgdGhhbiB0aGUgY2hhciBjb2RlXG4gIC8vIGZvciBcImFcIiBzbyB0aGlzIGlzIGNoZWNraW5nIHRoYXRcbiAgLy8gaXQncyBhIGxvd2VyY2FzZSBjaGFyYWN0ZXJcbiAgdGFnLmNoYXJDb2RlQXQoMCkgPiA5Njtcbn1cbmNvbnN0IGdldFN0eWxlT3ZlcnJpZGVzID0gKG5hbWUsIHRoZW1lKSA9PiB7XG4gIGlmICh0aGVtZS5jb21wb25lbnRzICYmIHRoZW1lLmNvbXBvbmVudHNbbmFtZV0gJiYgdGhlbWUuY29tcG9uZW50c1tuYW1lXS5zdHlsZU92ZXJyaWRlcykge1xuICAgIHJldHVybiB0aGVtZS5jb21wb25lbnRzW25hbWVdLnN0eWxlT3ZlcnJpZGVzO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbmNvbnN0IHRyYW5zZm9ybVZhcmlhbnRzID0gdmFyaWFudHMgPT4ge1xuICBsZXQgbnVtT2ZDYWxsYmFja3MgPSAwO1xuICBjb25zdCB2YXJpYW50c1N0eWxlcyA9IHt9O1xuICBpZiAodmFyaWFudHMpIHtcbiAgICB2YXJpYW50cy5mb3JFYWNoKGRlZmluaXRpb24gPT4ge1xuICAgICAgbGV0IGtleSA9ICcnO1xuICAgICAgaWYgKHR5cGVvZiBkZWZpbml0aW9uLnByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGtleSA9IGBjYWxsYmFjayR7bnVtT2ZDYWxsYmFja3N9YDtcbiAgICAgICAgbnVtT2ZDYWxsYmFja3MgKz0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtleSA9IHByb3BzVG9DbGFzc0tleShkZWZpbml0aW9uLnByb3BzKTtcbiAgICAgIH1cbiAgICAgIHZhcmlhbnRzU3R5bGVzW2tleV0gPSBkZWZpbml0aW9uLnN0eWxlO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB2YXJpYW50c1N0eWxlcztcbn07XG5jb25zdCBnZXRWYXJpYW50U3R5bGVzID0gKG5hbWUsIHRoZW1lKSA9PiB7XG4gIGxldCB2YXJpYW50cyA9IFtdO1xuICBpZiAodGhlbWUgJiYgdGhlbWUuY29tcG9uZW50cyAmJiB0aGVtZS5jb21wb25lbnRzW25hbWVdICYmIHRoZW1lLmNvbXBvbmVudHNbbmFtZV0udmFyaWFudHMpIHtcbiAgICB2YXJpYW50cyA9IHRoZW1lLmNvbXBvbmVudHNbbmFtZV0udmFyaWFudHM7XG4gIH1cbiAgcmV0dXJuIHRyYW5zZm9ybVZhcmlhbnRzKHZhcmlhbnRzKTtcbn07XG5jb25zdCB2YXJpYW50c1Jlc29sdmVyID0gKHByb3BzLCBzdHlsZXMsIHZhcmlhbnRzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvd25lclN0YXRlID0ge31cbiAgfSA9IHByb3BzO1xuICBjb25zdCB2YXJpYW50c1N0eWxlcyA9IFtdO1xuICBsZXQgbnVtT2ZDYWxsYmFja3MgPSAwO1xuICBpZiAodmFyaWFudHMpIHtcbiAgICB2YXJpYW50cy5mb3JFYWNoKHZhcmlhbnQgPT4ge1xuICAgICAgbGV0IGlzTWF0Y2ggPSB0cnVlO1xuICAgICAgaWYgKHR5cGVvZiB2YXJpYW50LnByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IHByb3BzVG9DaGVjayA9IF9leHRlbmRzKHt9LCBwcm9wcywgb3duZXJTdGF0ZSk7XG4gICAgICAgIGlzTWF0Y2ggPSB2YXJpYW50LnByb3BzKHByb3BzVG9DaGVjayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBPYmplY3Qua2V5cyh2YXJpYW50LnByb3BzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgaWYgKG93bmVyU3RhdGVba2V5XSAhPT0gdmFyaWFudC5wcm9wc1trZXldICYmIHByb3BzW2tleV0gIT09IHZhcmlhbnQucHJvcHNba2V5XSkge1xuICAgICAgICAgICAgaXNNYXRjaCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNNYXRjaCkge1xuICAgICAgICBpZiAodHlwZW9mIHZhcmlhbnQucHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXJpYW50c1N0eWxlcy5wdXNoKHN0eWxlc1tgY2FsbGJhY2ske251bU9mQ2FsbGJhY2tzfWBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXJpYW50c1N0eWxlcy5wdXNoKHN0eWxlc1twcm9wc1RvQ2xhc3NLZXkodmFyaWFudC5wcm9wcyldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YXJpYW50LnByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG51bU9mQ2FsbGJhY2tzICs9IDE7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHZhcmlhbnRzU3R5bGVzO1xufTtcbmNvbnN0IHRoZW1lVmFyaWFudHNSZXNvbHZlciA9IChwcm9wcywgc3R5bGVzLCB0aGVtZSwgbmFtZSkgPT4ge1xuICB2YXIgX3RoZW1lJGNvbXBvbmVudHM7XG4gIGNvbnN0IHRoZW1lVmFyaWFudHMgPSB0aGVtZSA9PSBudWxsIHx8IChfdGhlbWUkY29tcG9uZW50cyA9IHRoZW1lLmNvbXBvbmVudHMpID09IG51bGwgfHwgKF90aGVtZSRjb21wb25lbnRzID0gX3RoZW1lJGNvbXBvbmVudHNbbmFtZV0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkY29tcG9uZW50cy52YXJpYW50cztcbiAgcmV0dXJuIHZhcmlhbnRzUmVzb2x2ZXIocHJvcHMsIHN0eWxlcywgdGhlbWVWYXJpYW50cyk7XG59O1xuXG4vLyBVcGRhdGUgL3N5c3RlbS9zdHlsZWQvI2FwaSBpbiBjYXNlIGlmIHRoaXMgY2hhbmdlc1xuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZEZvcndhcmRQcm9wKHByb3ApIHtcbiAgcmV0dXJuIHByb3AgIT09ICdvd25lclN0YXRlJyAmJiBwcm9wICE9PSAndGhlbWUnICYmIHByb3AgIT09ICdzeCcgJiYgcHJvcCAhPT0gJ2FzJztcbn1cbmV4cG9ydCBjb25zdCBzeXN0ZW1EZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuY29uc3QgbG93ZXJjYXNlRmlyc3RMZXR0ZXIgPSBzdHJpbmcgPT4ge1xuICBpZiAoIXN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn07XG5mdW5jdGlvbiByZXNvbHZlVGhlbWUoe1xuICBkZWZhdWx0VGhlbWUsXG4gIHRoZW1lLFxuICB0aGVtZUlkXG59KSB7XG4gIHJldHVybiBpc0VtcHR5KHRoZW1lKSA/IGRlZmF1bHRUaGVtZSA6IHRoZW1lW3RoZW1lSWRdIHx8IHRoZW1lO1xufVxuZnVuY3Rpb24gZGVmYXVsdE92ZXJyaWRlc1Jlc29sdmVyKHNsb3QpIHtcbiAgaWYgKCFzbG90KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXNbc2xvdF07XG59XG5jb25zdCBtdWlTdHlsZWRGdW5jdGlvblJlc29sdmVyID0gKHtcbiAgc3R5bGVkQXJnLFxuICBwcm9wcyxcbiAgZGVmYXVsdFRoZW1lLFxuICB0aGVtZUlkXG59KSA9PiB7XG4gIGNvbnN0IHJlc29sdmVkU3R5bGVzID0gc3R5bGVkQXJnKF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIHRoZW1lOiByZXNvbHZlVGhlbWUoX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBkZWZhdWx0VGhlbWUsXG4gICAgICB0aGVtZUlkXG4gICAgfSkpXG4gIH0pKTtcbiAgbGV0IG9wdGlvbmFsVmFyaWFudHM7XG4gIGlmIChyZXNvbHZlZFN0eWxlcyAmJiByZXNvbHZlZFN0eWxlcy52YXJpYW50cykge1xuICAgIG9wdGlvbmFsVmFyaWFudHMgPSByZXNvbHZlZFN0eWxlcy52YXJpYW50cztcbiAgICBkZWxldGUgcmVzb2x2ZWRTdHlsZXMudmFyaWFudHM7XG4gIH1cbiAgaWYgKG9wdGlvbmFsVmFyaWFudHMpIHtcbiAgICBjb25zdCB2YXJpYW50c1N0eWxlcyA9IHZhcmlhbnRzUmVzb2x2ZXIocHJvcHMsIHRyYW5zZm9ybVZhcmlhbnRzKG9wdGlvbmFsVmFyaWFudHMpLCBvcHRpb25hbFZhcmlhbnRzKTtcbiAgICByZXR1cm4gW3Jlc29sdmVkU3R5bGVzLCAuLi52YXJpYW50c1N0eWxlc107XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVkU3R5bGVzO1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlZChpbnB1dCA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICB0aGVtZUlkLFxuICAgIGRlZmF1bHRUaGVtZSA9IHN5c3RlbURlZmF1bHRUaGVtZSxcbiAgICByb290U2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcCxcbiAgICBzbG90U2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcFxuICB9ID0gaW5wdXQ7XG4gIGNvbnN0IHN5c3RlbVN4ID0gcHJvcHMgPT4ge1xuICAgIHJldHVybiBzdHlsZUZ1bmN0aW9uU3goX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICB0aGVtZTogcmVzb2x2ZVRoZW1lKF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICBkZWZhdWx0VGhlbWUsXG4gICAgICAgIHRoZW1lSWRcbiAgICAgIH0pKVxuICAgIH0pKTtcbiAgfTtcbiAgc3lzdGVtU3guX19tdWlfc3lzdGVtU3ggPSB0cnVlO1xuICByZXR1cm4gKHRhZywgaW5wdXRPcHRpb25zID0ge30pID0+IHtcbiAgICAvLyBGaWx0ZXIgb3V0IHRoZSBgc3hgIHN0eWxlIGZ1bmN0aW9uIGZyb20gdGhlIHByZXZpb3VzIHN0eWxlZCBjb21wb25lbnQgdG8gcHJldmVudCB1bm5lY2Vzc2FyeSBzdHlsZXMgZ2VuZXJhdGVkIGJ5IHRoZSBjb21wb3NpdGUgY29tcG9uZW50cy5cbiAgICBwcm9jZXNzU3R5bGVzKHRhZywgc3R5bGVzID0+IHN0eWxlcy5maWx0ZXIoc3R5bGUgPT4gIShzdHlsZSAhPSBudWxsICYmIHN0eWxlLl9fbXVpX3N5c3RlbVN4KSkpO1xuICAgIGNvbnN0IHtcbiAgICAgICAgbmFtZTogY29tcG9uZW50TmFtZSxcbiAgICAgICAgc2xvdDogY29tcG9uZW50U2xvdCxcbiAgICAgICAgc2tpcFZhcmlhbnRzUmVzb2x2ZXI6IGlucHV0U2tpcFZhcmlhbnRzUmVzb2x2ZXIsXG4gICAgICAgIHNraXBTeDogaW5wdXRTa2lwU3gsXG4gICAgICAgIC8vIFRPRE8gdjY6IHJlbW92ZSBgbG93ZXJjYXNlRmlyc3RMZXR0ZXIoKWAgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZVxuICAgICAgICAvLyBGb3IgbW9yZSBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL3B1bGwvMzc5MDhcbiAgICAgICAgb3ZlcnJpZGVzUmVzb2x2ZXIgPSBkZWZhdWx0T3ZlcnJpZGVzUmVzb2x2ZXIobG93ZXJjYXNlRmlyc3RMZXR0ZXIoY29tcG9uZW50U2xvdCkpXG4gICAgICB9ID0gaW5wdXRPcHRpb25zLFxuICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKGlucHV0T3B0aW9ucywgX2V4Y2x1ZGVkKTtcblxuICAgIC8vIGlmIHNraXBWYXJpYW50c1Jlc29sdmVyIG9wdGlvbiBpcyBkZWZpbmVkLCB0YWtlIHRoZSB2YWx1ZSwgb3RoZXJ3aXNlLCB0cnVlIGZvciByb290IGFuZCBmYWxzZSBmb3Igb3RoZXIgc2xvdHMuXG4gICAgY29uc3Qgc2tpcFZhcmlhbnRzUmVzb2x2ZXIgPSBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyICE9PSB1bmRlZmluZWQgPyBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyIDpcbiAgICAvLyBUT0RPIHY2OiByZW1vdmUgYFJvb3RgIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2VcbiAgICAvLyBGb3IgbW9yZSBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL3B1bGwvMzc5MDhcbiAgICBjb21wb25lbnRTbG90ICYmIGNvbXBvbmVudFNsb3QgIT09ICdSb290JyAmJiBjb21wb25lbnRTbG90ICE9PSAncm9vdCcgfHwgZmFsc2U7XG4gICAgY29uc3Qgc2tpcFN4ID0gaW5wdXRTa2lwU3ggfHwgZmFsc2U7XG4gICAgbGV0IGxhYmVsO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoY29tcG9uZW50TmFtZSkge1xuICAgICAgICAvLyBUT0RPIHY2OiByZW1vdmUgYGxvd2VyY2FzZUZpcnN0TGV0dGVyKClgIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2VcbiAgICAgICAgLy8gRm9yIG1vcmUgZGV0YWlsczogaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9wdWxsLzM3OTA4XG4gICAgICAgIGxhYmVsID0gYCR7Y29tcG9uZW50TmFtZX0tJHtsb3dlcmNhc2VGaXJzdExldHRlcihjb21wb25lbnRTbG90IHx8ICdSb290Jyl9YDtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gc2hvdWxkRm9yd2FyZFByb3A7XG5cbiAgICAvLyBUT0RPIHY2OiByZW1vdmUgYFJvb3RgIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2VcbiAgICAvLyBGb3IgbW9yZSBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL3B1bGwvMzc5MDhcbiAgICBpZiAoY29tcG9uZW50U2xvdCA9PT0gJ1Jvb3QnIHx8IGNvbXBvbmVudFNsb3QgPT09ICdyb290Jykge1xuICAgICAgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSByb290U2hvdWxkRm9yd2FyZFByb3A7XG4gICAgfSBlbHNlIGlmIChjb21wb25lbnRTbG90KSB7XG4gICAgICAvLyBhbnkgb3RoZXIgc2xvdCBzcGVjaWZpZWRcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gc2xvdFNob3VsZEZvcndhcmRQcm9wO1xuICAgIH0gZWxzZSBpZiAoaXNTdHJpbmdUYWcodGFnKSkge1xuICAgICAgLy8gZm9yIHN0cmluZyAoaHRtbCkgdGFnLCBwcmVzZXJ2ZSB0aGUgYmVoYXZpb3IgaW4gZW1vdGlvbiAmIHN0eWxlZC1jb21wb25lbnRzLlxuICAgICAgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGRlZmF1bHRTdHlsZWRSZXNvbHZlciA9IHN0eWxlZEVuZ2luZVN0eWxlZCh0YWcsIF9leHRlbmRzKHtcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wOiBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbixcbiAgICAgIGxhYmVsXG4gICAgfSwgb3B0aW9ucykpO1xuICAgIGNvbnN0IG11aVN0eWxlZFJlc29sdmVyID0gKHN0eWxlQXJnLCAuLi5leHByZXNzaW9ucykgPT4ge1xuICAgICAgY29uc3QgZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lID0gZXhwcmVzc2lvbnMgPyBleHByZXNzaW9ucy5tYXAoc3R5bGVzQXJnID0+IHtcbiAgICAgICAgLy8gT24gdGhlIHNlcnZlciBFbW90aW9uIGRvZXNuJ3QgdXNlIFJlYWN0LmZvcndhcmRSZWYgZm9yIGNyZWF0aW5nIGNvbXBvbmVudHMsIHNvIHRoZSBjcmVhdGVkXG4gICAgICAgIC8vIGNvbXBvbmVudCBzdGF5cyBhcyBhIGZ1bmN0aW9uLiBUaGlzIGNvbmRpdGlvbiBtYWtlcyBzdXJlIHRoYXQgd2UgZG8gbm90IGludGVycG9sYXRlIGZ1bmN0aW9uc1xuICAgICAgICAvLyB3aGljaCBhcmUgYmFzaWNhbGx5IGNvbXBvbmVudHMgdXNlZCBhcyBhIHNlbGVjdG9ycy5cbiAgICAgICAgaWYgKHR5cGVvZiBzdHlsZXNBcmcgPT09ICdmdW5jdGlvbicgJiYgc3R5bGVzQXJnLl9fZW1vdGlvbl9yZWFsICE9PSBzdHlsZXNBcmcpIHtcbiAgICAgICAgICByZXR1cm4gcHJvcHMgPT4gbXVpU3R5bGVkRnVuY3Rpb25SZXNvbHZlcih7XG4gICAgICAgICAgICBzdHlsZWRBcmc6IHN0eWxlc0FyZyxcbiAgICAgICAgICAgIHByb3BzLFxuICAgICAgICAgICAgZGVmYXVsdFRoZW1lLFxuICAgICAgICAgICAgdGhlbWVJZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1BsYWluT2JqZWN0KHN0eWxlc0FyZykpIHtcbiAgICAgICAgICBsZXQgdHJhbnNmb3JtZWRTdHlsZXNBcmcgPSBzdHlsZXNBcmc7XG4gICAgICAgICAgbGV0IHN0eWxlZEFyZ1ZhcmlhbnRzO1xuICAgICAgICAgIGlmIChzdHlsZXNBcmcgJiYgc3R5bGVzQXJnLnZhcmlhbnRzKSB7XG4gICAgICAgICAgICBzdHlsZWRBcmdWYXJpYW50cyA9IHN0eWxlc0FyZy52YXJpYW50cztcbiAgICAgICAgICAgIGRlbGV0ZSB0cmFuc2Zvcm1lZFN0eWxlc0FyZy52YXJpYW50cztcbiAgICAgICAgICAgIHRyYW5zZm9ybWVkU3R5bGVzQXJnID0gcHJvcHMgPT4ge1xuICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gc3R5bGVzQXJnO1xuICAgICAgICAgICAgICBjb25zdCB2YXJpYW50U3R5bGVzID0gdmFyaWFudHNSZXNvbHZlcihwcm9wcywgdHJhbnNmb3JtVmFyaWFudHMoc3R5bGVkQXJnVmFyaWFudHMpLCBzdHlsZWRBcmdWYXJpYW50cyk7XG4gICAgICAgICAgICAgIHZhcmlhbnRTdHlsZXMuZm9yRWFjaCh2YXJpYW50U3R5bGUgPT4ge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGRlZXBtZXJnZShyZXN1bHQsIHZhcmlhbnRTdHlsZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWVkU3R5bGVzQXJnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHlsZXNBcmc7XG4gICAgICB9KSA6IFtdO1xuICAgICAgbGV0IHRyYW5zZm9ybWVkU3R5bGVBcmcgPSBzdHlsZUFyZztcbiAgICAgIGlmIChpc1BsYWluT2JqZWN0KHN0eWxlQXJnKSkge1xuICAgICAgICBsZXQgc3R5bGVkQXJnVmFyaWFudHM7XG4gICAgICAgIGlmIChzdHlsZUFyZyAmJiBzdHlsZUFyZy52YXJpYW50cykge1xuICAgICAgICAgIHN0eWxlZEFyZ1ZhcmlhbnRzID0gc3R5bGVBcmcudmFyaWFudHM7XG4gICAgICAgICAgZGVsZXRlIHRyYW5zZm9ybWVkU3R5bGVBcmcudmFyaWFudHM7XG4gICAgICAgICAgdHJhbnNmb3JtZWRTdHlsZUFyZyA9IHByb3BzID0+IHtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBzdHlsZUFyZztcbiAgICAgICAgICAgIGNvbnN0IHZhcmlhbnRTdHlsZXMgPSB2YXJpYW50c1Jlc29sdmVyKHByb3BzLCB0cmFuc2Zvcm1WYXJpYW50cyhzdHlsZWRBcmdWYXJpYW50cyksIHN0eWxlZEFyZ1ZhcmlhbnRzKTtcbiAgICAgICAgICAgIHZhcmlhbnRTdHlsZXMuZm9yRWFjaCh2YXJpYW50U3R5bGUgPT4ge1xuICAgICAgICAgICAgICByZXN1bHQgPSBkZWVwbWVyZ2UocmVzdWx0LCB2YXJpYW50U3R5bGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN0eWxlQXJnID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAvLyBPbiB0aGUgc2VydmVyIEVtb3Rpb24gZG9lc24ndCB1c2UgUmVhY3QuZm9yd2FyZFJlZiBmb3IgY3JlYXRpbmcgY29tcG9uZW50cywgc28gdGhlIGNyZWF0ZWRcbiAgICAgIC8vIGNvbXBvbmVudCBzdGF5cyBhcyBhIGZ1bmN0aW9uLiBUaGlzIGNvbmRpdGlvbiBtYWtlcyBzdXJlIHRoYXQgd2UgZG8gbm90IGludGVycG9sYXRlIGZ1bmN0aW9uc1xuICAgICAgLy8gd2hpY2ggYXJlIGJhc2ljYWxseSBjb21wb25lbnRzIHVzZWQgYXMgYSBzZWxlY3RvcnMuXG4gICAgICBzdHlsZUFyZy5fX2Vtb3Rpb25fcmVhbCAhPT0gc3R5bGVBcmcpIHtcbiAgICAgICAgLy8gSWYgdGhlIHR5cGUgaXMgZnVuY3Rpb24sIHdlIG5lZWQgdG8gZGVmaW5lIHRoZSBkZWZhdWx0IHRoZW1lLlxuICAgICAgICB0cmFuc2Zvcm1lZFN0eWxlQXJnID0gcHJvcHMgPT4gbXVpU3R5bGVkRnVuY3Rpb25SZXNvbHZlcih7XG4gICAgICAgICAgc3R5bGVkQXJnOiBzdHlsZUFyZyxcbiAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICBkZWZhdWx0VGhlbWUsXG4gICAgICAgICAgdGhlbWVJZFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wb25lbnROYW1lICYmIG92ZXJyaWRlc1Jlc29sdmVyKSB7XG4gICAgICAgIGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5wdXNoKHByb3BzID0+IHtcbiAgICAgICAgICBjb25zdCB0aGVtZSA9IHJlc29sdmVUaGVtZShfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICAgIGRlZmF1bHRUaGVtZSxcbiAgICAgICAgICAgIHRoZW1lSWRcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgY29uc3Qgc3R5bGVPdmVycmlkZXMgPSBnZXRTdHlsZU92ZXJyaWRlcyhjb21wb25lbnROYW1lLCB0aGVtZSk7XG4gICAgICAgICAgaWYgKHN0eWxlT3ZlcnJpZGVzKSB7XG4gICAgICAgICAgICBjb25zdCByZXNvbHZlZFN0eWxlT3ZlcnJpZGVzID0ge307XG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhzdHlsZU92ZXJyaWRlcykuZm9yRWFjaCgoW3Nsb3RLZXksIHNsb3RTdHlsZV0pID0+IHtcbiAgICAgICAgICAgICAgcmVzb2x2ZWRTdHlsZU92ZXJyaWRlc1tzbG90S2V5XSA9IHR5cGVvZiBzbG90U3R5bGUgPT09ICdmdW5jdGlvbicgPyBzbG90U3R5bGUoX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgICAgICAgdGhlbWVcbiAgICAgICAgICAgICAgfSkpIDogc2xvdFN0eWxlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gb3ZlcnJpZGVzUmVzb2x2ZXIocHJvcHMsIHJlc29sdmVkU3R5bGVPdmVycmlkZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoY29tcG9uZW50TmFtZSAmJiAhc2tpcFZhcmlhbnRzUmVzb2x2ZXIpIHtcbiAgICAgICAgZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lLnB1c2gocHJvcHMgPT4ge1xuICAgICAgICAgIGNvbnN0IHRoZW1lID0gcmVzb2x2ZVRoZW1lKF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgICAgZGVmYXVsdFRoZW1lLFxuICAgICAgICAgICAgdGhlbWVJZFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICByZXR1cm4gdGhlbWVWYXJpYW50c1Jlc29sdmVyKHByb3BzLCBnZXRWYXJpYW50U3R5bGVzKGNvbXBvbmVudE5hbWUsIHRoZW1lKSwgdGhlbWUsIGNvbXBvbmVudE5hbWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICghc2tpcFN4KSB7XG4gICAgICAgIGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5wdXNoKHN5c3RlbVN4KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG51bU9mQ3VzdG9tRm5zQXBwbGllZCA9IGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5sZW5ndGggLSBleHByZXNzaW9ucy5sZW5ndGg7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZUFyZykgJiYgbnVtT2ZDdXN0b21GbnNBcHBsaWVkID4gMCkge1xuICAgICAgICBjb25zdCBwbGFjZWhvbGRlcnMgPSBuZXcgQXJyYXkobnVtT2ZDdXN0b21GbnNBcHBsaWVkKS5maWxsKCcnKTtcbiAgICAgICAgLy8gSWYgdGhlIHR5cGUgaXMgYXJyYXksIHRoYW4gd2UgbmVlZCB0byBhZGQgcGxhY2Vob2xkZXJzIGluIHRoZSB0ZW1wbGF0ZSBmb3IgdGhlIG92ZXJyaWRlcywgdmFyaWFudHMgYW5kIHRoZSBzeCBzdHlsZXMuXG4gICAgICAgIHRyYW5zZm9ybWVkU3R5bGVBcmcgPSBbLi4uc3R5bGVBcmcsIC4uLnBsYWNlaG9sZGVyc107XG4gICAgICAgIHRyYW5zZm9ybWVkU3R5bGVBcmcucmF3ID0gWy4uLnN0eWxlQXJnLnJhdywgLi4ucGxhY2Vob2xkZXJzXTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IENvbXBvbmVudCA9IGRlZmF1bHRTdHlsZWRSZXNvbHZlcih0cmFuc2Zvcm1lZFN0eWxlQXJnLCAuLi5leHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgbGV0IGRpc3BsYXlOYW1lO1xuICAgICAgICBpZiAoY29tcG9uZW50TmFtZSkge1xuICAgICAgICAgIGRpc3BsYXlOYW1lID0gYCR7Y29tcG9uZW50TmFtZX0ke2NhcGl0YWxpemUoY29tcG9uZW50U2xvdCB8fCAnJyl9YDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlzcGxheU5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGRpc3BsYXlOYW1lID0gYFN0eWxlZCgke2dldERpc3BsYXlOYW1lKHRhZyl9KWA7XG4gICAgICAgIH1cbiAgICAgICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICB9XG4gICAgICBpZiAodGFnLm11aU5hbWUpIHtcbiAgICAgICAgQ29tcG9uZW50Lm11aU5hbWUgPSB0YWcubXVpTmFtZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBDb21wb25lbnQ7XG4gICAgfTtcbiAgICBpZiAoZGVmYXVsdFN0eWxlZFJlc29sdmVyLndpdGhDb25maWcpIHtcbiAgICAgIG11aVN0eWxlZFJlc29sdmVyLndpdGhDb25maWcgPSBkZWZhdWx0U3R5bGVkUmVzb2x2ZXIud2l0aENvbmZpZztcbiAgICB9XG4gICAgcmV0dXJuIG11aVN0eWxlZFJlc29sdmVyO1xuICB9O1xufSIsImNvbnN0IGNvbW1vbiA9IHtcbiAgYmxhY2s6ICcjMDAwJyxcbiAgd2hpdGU6ICcjZmZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1vbjsiLCJjb25zdCBncmV5ID0ge1xuICA1MDogJyNmYWZhZmEnLFxuICAxMDA6ICcjZjVmNWY1JyxcbiAgMjAwOiAnI2VlZWVlZScsXG4gIDMwMDogJyNlMGUwZTAnLFxuICA0MDA6ICcjYmRiZGJkJyxcbiAgNTAwOiAnIzllOWU5ZScsXG4gIDYwMDogJyM3NTc1NzUnLFxuICA3MDA6ICcjNjE2MTYxJyxcbiAgODAwOiAnIzQyNDI0MicsXG4gIDkwMDogJyMyMTIxMjEnLFxuICBBMTAwOiAnI2Y1ZjVmNScsXG4gIEEyMDA6ICcjZWVlZWVlJyxcbiAgQTQwMDogJyNiZGJkYmQnLFxuICBBNzAwOiAnIzYxNjE2MSdcbn07XG5leHBvcnQgZGVmYXVsdCBncmV5OyIsImNvbnN0IHB1cnBsZSA9IHtcbiAgNTA6ICcjZjNlNWY1JyxcbiAgMTAwOiAnI2UxYmVlNycsXG4gIDIwMDogJyNjZTkzZDgnLFxuICAzMDA6ICcjYmE2OGM4JyxcbiAgNDAwOiAnI2FiNDdiYycsXG4gIDUwMDogJyM5YzI3YjAnLFxuICA2MDA6ICcjOGUyNGFhJyxcbiAgNzAwOiAnIzdiMWZhMicsXG4gIDgwMDogJyM2YTFiOWEnLFxuICA5MDA6ICcjNGExNDhjJyxcbiAgQTEwMDogJyNlYTgwZmMnLFxuICBBMjAwOiAnI2UwNDBmYicsXG4gIEE0MDA6ICcjZDUwMGY5JyxcbiAgQTcwMDogJyNhYTAwZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgcHVycGxlOyIsImNvbnN0IHJlZCA9IHtcbiAgNTA6ICcjZmZlYmVlJyxcbiAgMTAwOiAnI2ZmY2RkMicsXG4gIDIwMDogJyNlZjlhOWEnLFxuICAzMDA6ICcjZTU3MzczJyxcbiAgNDAwOiAnI2VmNTM1MCcsXG4gIDUwMDogJyNmNDQzMzYnLFxuICA2MDA6ICcjZTUzOTM1JyxcbiAgNzAwOiAnI2QzMmYyZicsXG4gIDgwMDogJyNjNjI4MjgnLFxuICA5MDA6ICcjYjcxYzFjJyxcbiAgQTEwMDogJyNmZjhhODAnLFxuICBBMjAwOiAnI2ZmNTI1MicsXG4gIEE0MDA6ICcjZmYxNzQ0JyxcbiAgQTcwMDogJyNkNTAwMDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgcmVkOyIsImNvbnN0IG9yYW5nZSA9IHtcbiAgNTA6ICcjZmZmM2UwJyxcbiAgMTAwOiAnI2ZmZTBiMicsXG4gIDIwMDogJyNmZmNjODAnLFxuICAzMDA6ICcjZmZiNzRkJyxcbiAgNDAwOiAnI2ZmYTcyNicsXG4gIDUwMDogJyNmZjk4MDAnLFxuICA2MDA6ICcjZmI4YzAwJyxcbiAgNzAwOiAnI2Y1N2MwMCcsXG4gIDgwMDogJyNlZjZjMDAnLFxuICA5MDA6ICcjZTY1MTAwJyxcbiAgQTEwMDogJyNmZmQxODAnLFxuICBBMjAwOiAnI2ZmYWI0MCcsXG4gIEE0MDA6ICcjZmY5MTAwJyxcbiAgQTcwMDogJyNmZjZkMDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgb3JhbmdlOyIsImNvbnN0IGJsdWUgPSB7XG4gIDUwOiAnI2UzZjJmZCcsXG4gIDEwMDogJyNiYmRlZmInLFxuICAyMDA6ICcjOTBjYWY5JyxcbiAgMzAwOiAnIzY0YjVmNicsXG4gIDQwMDogJyM0MmE1ZjUnLFxuICA1MDA6ICcjMjE5NmYzJyxcbiAgNjAwOiAnIzFlODhlNScsXG4gIDcwMDogJyMxOTc2ZDInLFxuICA4MDA6ICcjMTU2NWMwJyxcbiAgOTAwOiAnIzBkNDdhMScsXG4gIEExMDA6ICcjODJiMWZmJyxcbiAgQTIwMDogJyM0NDhhZmYnLFxuICBBNDAwOiAnIzI5NzlmZicsXG4gIEE3MDA6ICcjMjk2MmZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGJsdWU7IiwiY29uc3QgbGlnaHRCbHVlID0ge1xuICA1MDogJyNlMWY1ZmUnLFxuICAxMDA6ICcjYjNlNWZjJyxcbiAgMjAwOiAnIzgxZDRmYScsXG4gIDMwMDogJyM0ZmMzZjcnLFxuICA0MDA6ICcjMjliNmY2JyxcbiAgNTAwOiAnIzAzYTlmNCcsXG4gIDYwMDogJyMwMzliZTUnLFxuICA3MDA6ICcjMDI4OGQxJyxcbiAgODAwOiAnIzAyNzdiZCcsXG4gIDkwMDogJyMwMTU3OWInLFxuICBBMTAwOiAnIzgwZDhmZicsXG4gIEEyMDA6ICcjNDBjNGZmJyxcbiAgQTQwMDogJyMwMGIwZmYnLFxuICBBNzAwOiAnIzAwOTFlYSdcbn07XG5leHBvcnQgZGVmYXVsdCBsaWdodEJsdWU7IiwiY29uc3QgZ3JlZW4gPSB7XG4gIDUwOiAnI2U4ZjVlOScsXG4gIDEwMDogJyNjOGU2YzknLFxuICAyMDA6ICcjYTVkNmE3JyxcbiAgMzAwOiAnIzgxYzc4NCcsXG4gIDQwMDogJyM2NmJiNmEnLFxuICA1MDA6ICcjNGNhZjUwJyxcbiAgNjAwOiAnIzQzYTA0NycsXG4gIDcwMDogJyMzODhlM2MnLFxuICA4MDA6ICcjMmU3ZDMyJyxcbiAgOTAwOiAnIzFiNWUyMCcsXG4gIEExMDA6ICcjYjlmNmNhJyxcbiAgQTIwMDogJyM2OWYwYWUnLFxuICBBNDAwOiAnIzAwZTY3NicsXG4gIEE3MDA6ICcjMDBjODUzJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZWVuOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSBmcm9tIFwiQG11aS91dGlscy9mb3JtYXRNdWlFcnJvck1lc3NhZ2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIm1vZGVcIiwgXCJjb250cmFzdFRocmVzaG9sZFwiLCBcInRvbmFsT2Zmc2V0XCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBkYXJrZW4sIGdldENvbnRyYXN0UmF0aW8sIGxpZ2h0ZW4gfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgY29tbW9uIGZyb20gJy4uL2NvbG9ycy9jb21tb24nO1xuaW1wb3J0IGdyZXkgZnJvbSAnLi4vY29sb3JzL2dyZXknO1xuaW1wb3J0IHB1cnBsZSBmcm9tICcuLi9jb2xvcnMvcHVycGxlJztcbmltcG9ydCByZWQgZnJvbSAnLi4vY29sb3JzL3JlZCc7XG5pbXBvcnQgb3JhbmdlIGZyb20gJy4uL2NvbG9ycy9vcmFuZ2UnO1xuaW1wb3J0IGJsdWUgZnJvbSAnLi4vY29sb3JzL2JsdWUnO1xuaW1wb3J0IGxpZ2h0Qmx1ZSBmcm9tICcuLi9jb2xvcnMvbGlnaHRCbHVlJztcbmltcG9ydCBncmVlbiBmcm9tICcuLi9jb2xvcnMvZ3JlZW4nO1xuZXhwb3J0IGNvbnN0IGxpZ2h0ID0ge1xuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHRleHQuXG4gIHRleHQ6IHtcbiAgICAvLyBUaGUgbW9zdCBpbXBvcnRhbnQgdGV4dC5cbiAgICBwcmltYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjg3KScsXG4gICAgLy8gU2Vjb25kYXJ5IHRleHQuXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjYpJyxcbiAgICAvLyBEaXNhYmxlZCB0ZXh0IGhhdmUgZXZlbiBsb3dlciB2aXN1YWwgcHJvbWluZW5jZS5cbiAgICBkaXNhYmxlZDogJ3JnYmEoMCwgMCwgMCwgMC4zOCknXG4gIH0sXG4gIC8vIFRoZSBjb2xvciB1c2VkIHRvIGRpdmlkZSBkaWZmZXJlbnQgZWxlbWVudHMuXG4gIGRpdmlkZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgLy8gVGhlIGJhY2tncm91bmQgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHN1cmZhY2VzLlxuICAvLyBDb25zaXN0ZW5jeSBiZXR3ZWVuIHRoZXNlIHZhbHVlcyBpcyBpbXBvcnRhbnQuXG4gIGJhY2tncm91bmQ6IHtcbiAgICBwYXBlcjogY29tbW9uLndoaXRlLFxuICAgIGRlZmF1bHQ6IGNvbW1vbi53aGl0ZVxuICB9LFxuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIGFjdGlvbiBlbGVtZW50cy5cbiAgYWN0aW9uOiB7XG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGFjdGl2ZSBhY3Rpb24gbGlrZSBhbiBpY29uIGJ1dHRvbi5cbiAgICBhY3RpdmU6ICdyZ2JhKDAsIDAsIDAsIDAuNTQpJyxcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gaG92ZXJlZCBhY3Rpb24uXG4gICAgaG92ZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMDQpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMDQsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgc2VsZWN0ZWQgYWN0aW9uLlxuICAgIHNlbGVjdGVkOiAncmdiYSgwLCAwLCAwLCAwLjA4KScsXG4gICAgc2VsZWN0ZWRPcGFjaXR5OiAwLjA4LFxuICAgIC8vIFRoZSBjb2xvciBvZiBhIGRpc2FibGVkIGFjdGlvbi5cbiAgICBkaXNhYmxlZDogJ3JnYmEoMCwgMCwgMCwgMC4yNiknLFxuICAgIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAgIGRpc2FibGVkT3BhY2l0eTogMC4zOCxcbiAgICBmb2N1czogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAgIGZvY3VzT3BhY2l0eTogMC4xMixcbiAgICBhY3RpdmF0ZWRPcGFjaXR5OiAwLjEyXG4gIH1cbn07XG5leHBvcnQgY29uc3QgZGFyayA9IHtcbiAgdGV4dDoge1xuICAgIHByaW1hcnk6IGNvbW1vbi53aGl0ZSxcbiAgICBzZWNvbmRhcnk6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyknLFxuICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyxcbiAgICBpY29uOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJ1xuICB9LFxuICBkaXZpZGVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gIGJhY2tncm91bmQ6IHtcbiAgICBwYXBlcjogJyMxMjEyMTInLFxuICAgIGRlZmF1bHQ6ICcjMTIxMjEyJ1xuICB9LFxuICBhY3Rpb246IHtcbiAgICBhY3RpdmU6IGNvbW1vbi53aGl0ZSxcbiAgICBob3ZlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOCknLFxuICAgIGhvdmVyT3BhY2l0eTogMC4wOCxcbiAgICBzZWxlY3RlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xNiknLFxuICAgIHNlbGVjdGVkT3BhY2l0eTogMC4xNixcbiAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKScsXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gICAgZGlzYWJsZWRPcGFjaXR5OiAwLjM4LFxuICAgIGZvY3VzOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gICAgZm9jdXNPcGFjaXR5OiAwLjEyLFxuICAgIGFjdGl2YXRlZE9wYWNpdHk6IDAuMjRcbiAgfVxufTtcbmZ1bmN0aW9uIGFkZExpZ2h0T3JEYXJrKGludGVudCwgZGlyZWN0aW9uLCBzaGFkZSwgdG9uYWxPZmZzZXQpIHtcbiAgY29uc3QgdG9uYWxPZmZzZXRMaWdodCA9IHRvbmFsT2Zmc2V0LmxpZ2h0IHx8IHRvbmFsT2Zmc2V0O1xuICBjb25zdCB0b25hbE9mZnNldERhcmsgPSB0b25hbE9mZnNldC5kYXJrIHx8IHRvbmFsT2Zmc2V0ICogMS41O1xuICBpZiAoIWludGVudFtkaXJlY3Rpb25dKSB7XG4gICAgaWYgKGludGVudC5oYXNPd25Qcm9wZXJ0eShzaGFkZSkpIHtcbiAgICAgIGludGVudFtkaXJlY3Rpb25dID0gaW50ZW50W3NoYWRlXTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2xpZ2h0Jykge1xuICAgICAgaW50ZW50LmxpZ2h0ID0gbGlnaHRlbihpbnRlbnQubWFpbiwgdG9uYWxPZmZzZXRMaWdodCk7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdkYXJrJykge1xuICAgICAgaW50ZW50LmRhcmsgPSBkYXJrZW4oaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0RGFyayk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0UHJpbWFyeShtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IGJsdWVbMjAwXSxcbiAgICAgIGxpZ2h0OiBibHVlWzUwXSxcbiAgICAgIGRhcms6IGJsdWVbNDAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBibHVlWzcwMF0sXG4gICAgbGlnaHQ6IGJsdWVbNDAwXSxcbiAgICBkYXJrOiBibHVlWzgwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRTZWNvbmRhcnkobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBwdXJwbGVbMjAwXSxcbiAgICAgIGxpZ2h0OiBwdXJwbGVbNTBdLFxuICAgICAgZGFyazogcHVycGxlWzQwMF1cbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbWFpbjogcHVycGxlWzUwMF0sXG4gICAgbGlnaHQ6IHB1cnBsZVszMDBdLFxuICAgIGRhcms6IHB1cnBsZVs3MDBdXG4gIH07XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0RXJyb3IobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiByZWRbNTAwXSxcbiAgICAgIGxpZ2h0OiByZWRbMzAwXSxcbiAgICAgIGRhcms6IHJlZFs3MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46IHJlZFs3MDBdLFxuICAgIGxpZ2h0OiByZWRbNDAwXSxcbiAgICBkYXJrOiByZWRbODAwXVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdEluZm8obW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBsaWdodEJsdWVbNDAwXSxcbiAgICAgIGxpZ2h0OiBsaWdodEJsdWVbMzAwXSxcbiAgICAgIGRhcms6IGxpZ2h0Qmx1ZVs3MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46IGxpZ2h0Qmx1ZVs3MDBdLFxuICAgIGxpZ2h0OiBsaWdodEJsdWVbNTAwXSxcbiAgICBkYXJrOiBsaWdodEJsdWVbOTAwXVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFN1Y2Nlc3MobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBncmVlbls0MDBdLFxuICAgICAgbGlnaHQ6IGdyZWVuWzMwMF0sXG4gICAgICBkYXJrOiBncmVlbls3MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46IGdyZWVuWzgwMF0sXG4gICAgbGlnaHQ6IGdyZWVuWzUwMF0sXG4gICAgZGFyazogZ3JlZW5bOTAwXVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFdhcm5pbmcobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBvcmFuZ2VbNDAwXSxcbiAgICAgIGxpZ2h0OiBvcmFuZ2VbMzAwXSxcbiAgICAgIGRhcms6IG9yYW5nZVs3MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46ICcjZWQ2YzAyJyxcbiAgICAvLyBjbG9zZXN0IHRvIG9yYW5nZVs4MDBdIHRoYXQgcGFzcyAzOjEuXG4gICAgbGlnaHQ6IG9yYW5nZVs1MDBdLFxuICAgIGRhcms6IG9yYW5nZVs5MDBdXG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVQYWxldHRlKHBhbGV0dGUpIHtcbiAgY29uc3Qge1xuICAgICAgbW9kZSA9ICdsaWdodCcsXG4gICAgICBjb250cmFzdFRocmVzaG9sZCA9IDMsXG4gICAgICB0b25hbE9mZnNldCA9IDAuMlxuICAgIH0gPSBwYWxldHRlLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocGFsZXR0ZSwgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgcHJpbWFyeSA9IHBhbGV0dGUucHJpbWFyeSB8fCBnZXREZWZhdWx0UHJpbWFyeShtb2RlKTtcbiAgY29uc3Qgc2Vjb25kYXJ5ID0gcGFsZXR0ZS5zZWNvbmRhcnkgfHwgZ2V0RGVmYXVsdFNlY29uZGFyeShtb2RlKTtcbiAgY29uc3QgZXJyb3IgPSBwYWxldHRlLmVycm9yIHx8IGdldERlZmF1bHRFcnJvcihtb2RlKTtcbiAgY29uc3QgaW5mbyA9IHBhbGV0dGUuaW5mbyB8fCBnZXREZWZhdWx0SW5mbyhtb2RlKTtcbiAgY29uc3Qgc3VjY2VzcyA9IHBhbGV0dGUuc3VjY2VzcyB8fCBnZXREZWZhdWx0U3VjY2Vzcyhtb2RlKTtcbiAgY29uc3Qgd2FybmluZyA9IHBhbGV0dGUud2FybmluZyB8fCBnZXREZWZhdWx0V2FybmluZyhtb2RlKTtcblxuICAvLyBVc2UgdGhlIHNhbWUgbG9naWMgYXNcbiAgLy8gQm9vdHN0cmFwOiBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi8xZDZlMzcxMGRkNDQ3ZGUxYTIwMGYyOWU4ZmE1MjFmOGEwOTA4ZjcwL3Njc3MvX2Z1bmN0aW9ucy5zY3NzI0w1OVxuICAvLyBhbmQgbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIgaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9hYzQ2Yjg4NjNjNGRhYjlmYzIyYzRjNjYyZGM2YmQxYjY1ZGQ2NTJmL3BhY2thZ2VzL21kYy10aGVtZS9fZnVuY3Rpb25zLnNjc3MjTDU0XG4gIGZ1bmN0aW9uIGdldENvbnRyYXN0VGV4dChiYWNrZ3JvdW5kKSB7XG4gICAgY29uc3QgY29udHJhc3RUZXh0ID0gZ2V0Q29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBkYXJrLnRleHQucHJpbWFyeSkgPj0gY29udHJhc3RUaHJlc2hvbGQgPyBkYXJrLnRleHQucHJpbWFyeSA6IGxpZ2h0LnRleHQucHJpbWFyeTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc3QgY29udHJhc3QgPSBnZXRDb250cmFzdFJhdGlvKGJhY2tncm91bmQsIGNvbnRyYXN0VGV4dCk7XG4gICAgICBpZiAoY29udHJhc3QgPCAzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBjb250cmFzdCByYXRpbyBvZiAke2NvbnRyYXN0fToxIGZvciAke2NvbnRyYXN0VGV4dH0gb24gJHtiYWNrZ3JvdW5kfWAsICdmYWxscyBiZWxvdyB0aGUgV0NBRyByZWNvbW1lbmRlZCBhYnNvbHV0ZSBtaW5pbXVtIGNvbnRyYXN0IHJhdGlvIG9mIDM6MS4nLCAnaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDgvUkVDLVdDQUcyMC0yMDA4MTIxMS8jdmlzdWFsLWF1ZGlvLWNvbnRyYXN0LWNvbnRyYXN0J10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29udHJhc3RUZXh0O1xuICB9XG4gIGNvbnN0IGF1Z21lbnRDb2xvciA9ICh7XG4gICAgY29sb3IsXG4gICAgbmFtZSxcbiAgICBtYWluU2hhZGUgPSA1MDAsXG4gICAgbGlnaHRTaGFkZSA9IDMwMCxcbiAgICBkYXJrU2hhZGUgPSA3MDBcbiAgfSkgPT4ge1xuICAgIGNvbG9yID0gX2V4dGVuZHMoe30sIGNvbG9yKTtcbiAgICBpZiAoIWNvbG9yLm1haW4gJiYgY29sb3JbbWFpblNoYWRlXSkge1xuICAgICAgY29sb3IubWFpbiA9IGNvbG9yW21haW5TaGFkZV07XG4gICAgfVxuICAgIGlmICghY29sb3IuaGFzT3duUHJvcGVydHkoJ21haW4nKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFRoZSBjb2xvciR7bmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnfSBwcm92aWRlZCB0byBhdWdtZW50Q29sb3IoY29sb3IpIGlzIGludmFsaWQuXG5UaGUgY29sb3Igb2JqZWN0IG5lZWRzIHRvIGhhdmUgYSBcXGBtYWluXFxgIHByb3BlcnR5IG9yIGEgXFxgJHttYWluU2hhZGV9XFxgIHByb3BlcnR5LmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDExLCBuYW1lID8gYCAoJHtuYW1lfSlgIDogJycsIG1haW5TaGFkZSkpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbG9yLm1haW4gIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogVGhlIGNvbG9yJHtuYW1lID8gYCAoJHtuYW1lfSlgIDogJyd9IHByb3ZpZGVkIHRvIGF1Z21lbnRDb2xvcihjb2xvcikgaXMgaW52YWxpZC5cblxcYGNvbG9yLm1haW5cXGAgc2hvdWxkIGJlIGEgc3RyaW5nLCBidXQgXFxgJHtKU09OLnN0cmluZ2lmeShjb2xvci5tYWluKX1cXGAgd2FzIHByb3ZpZGVkIGluc3RlYWQuXG5cbkRpZCB5b3UgaW50ZW5kIHRvIHVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBhcHByb2FjaGVzP1xuXG5pbXBvcnQgeyBncmVlbiB9IGZyb20gXCJAbXVpL21hdGVyaWFsL2NvbG9yc1wiO1xuXG5jb25zdCB0aGVtZTEgPSBjcmVhdGVUaGVtZSh7IHBhbGV0dGU6IHtcbiAgcHJpbWFyeTogZ3JlZW4sXG59IH0pO1xuXG5jb25zdCB0aGVtZTIgPSBjcmVhdGVUaGVtZSh7IHBhbGV0dGU6IHtcbiAgcHJpbWFyeTogeyBtYWluOiBncmVlbls1MDBdIH0sXG59IH0pO2AgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDEyLCBuYW1lID8gYCAoJHtuYW1lfSlgIDogJycsIEpTT04uc3RyaW5naWZ5KGNvbG9yLm1haW4pKSk7XG4gICAgfVxuICAgIGFkZExpZ2h0T3JEYXJrKGNvbG9yLCAnbGlnaHQnLCBsaWdodFNoYWRlLCB0b25hbE9mZnNldCk7XG4gICAgYWRkTGlnaHRPckRhcmsoY29sb3IsICdkYXJrJywgZGFya1NoYWRlLCB0b25hbE9mZnNldCk7XG4gICAgaWYgKCFjb2xvci5jb250cmFzdFRleHQpIHtcbiAgICAgIGNvbG9yLmNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0VGV4dChjb2xvci5tYWluKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9O1xuICBjb25zdCBtb2RlcyA9IHtcbiAgICBkYXJrLFxuICAgIGxpZ2h0XG4gIH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKCFtb2Rlc1ttb2RlXSkge1xuICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBUaGUgcGFsZXR0ZSBtb2RlIFxcYCR7bW9kZX1cXGAgaXMgbm90IHN1cHBvcnRlZC5gKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgcGFsZXR0ZU91dHB1dCA9IGRlZXBtZXJnZShfZXh0ZW5kcyh7XG4gICAgLy8gQSBjb2xsZWN0aW9uIG9mIGNvbW1vbiBjb2xvcnMuXG4gICAgY29tbW9uOiBfZXh0ZW5kcyh7fSwgY29tbW9uKSxcbiAgICAvLyBwcmV2ZW50IG11dGFibGUgb2JqZWN0LlxuICAgIC8vIFRoZSBwYWxldHRlIG1vZGUsIGNhbiBiZSBsaWdodCBvciBkYXJrLlxuICAgIG1vZGUsXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBwcmltYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHByaW1hcnk6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogcHJpbWFyeSxcbiAgICAgIG5hbWU6ICdwcmltYXJ5J1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgc2Vjb25kYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHNlY29uZGFyeTogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBzZWNvbmRhcnksXG4gICAgICBuYW1lOiAnc2Vjb25kYXJ5JyxcbiAgICAgIG1haW5TaGFkZTogJ0E0MDAnLFxuICAgICAgbGlnaHRTaGFkZTogJ0EyMDAnLFxuICAgICAgZGFya1NoYWRlOiAnQTcwMCdcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IGludGVyZmFjZSBlbGVtZW50cyB0aGF0IHRoZSB1c2VyIHNob3VsZCBiZSBtYWRlIGF3YXJlIG9mLlxuICAgIGVycm9yOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IGVycm9yLFxuICAgICAgbmFtZTogJ2Vycm9yJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgcG90ZW50aWFsbHkgZGFuZ2Vyb3VzIGFjdGlvbnMgb3IgaW1wb3J0YW50IG1lc3NhZ2VzLlxuICAgIHdhcm5pbmc6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogd2FybmluZyxcbiAgICAgIG5hbWU6ICd3YXJuaW5nJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBwcmVzZW50IGluZm9ybWF0aW9uIHRvIHRoZSB1c2VyIHRoYXQgaXMgbmV1dHJhbCBhbmQgbm90IG5lY2Vzc2FyaWx5IGltcG9ydGFudC5cbiAgICBpbmZvOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IGluZm8sXG4gICAgICBuYW1lOiAnaW5mbydcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gaW5kaWNhdGUgdGhlIHN1Y2Nlc3NmdWwgY29tcGxldGlvbiBvZiBhbiBhY3Rpb24gdGhhdCB1c2VyIHRyaWdnZXJlZC5cbiAgICBzdWNjZXNzOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IHN1Y2Nlc3MsXG4gICAgICBuYW1lOiAnc3VjY2VzcydcbiAgICB9KSxcbiAgICAvLyBUaGUgZ3JleSBjb2xvcnMuXG4gICAgZ3JleSxcbiAgICAvLyBVc2VkIGJ5IGBnZXRDb250cmFzdFRleHQoKWAgdG8gbWF4aW1pemUgdGhlIGNvbnRyYXN0IGJldHdlZW5cbiAgICAvLyB0aGUgYmFja2dyb3VuZCBhbmQgdGhlIHRleHQuXG4gICAgY29udHJhc3RUaHJlc2hvbGQsXG4gICAgLy8gVGFrZXMgYSBiYWNrZ3JvdW5kIGNvbG9yIGFuZCByZXR1cm5zIHRoZSB0ZXh0IGNvbG9yIHRoYXQgbWF4aW1pemVzIHRoZSBjb250cmFzdC5cbiAgICBnZXRDb250cmFzdFRleHQsXG4gICAgLy8gR2VuZXJhdGUgYSByaWNoIGNvbG9yIG9iamVjdC5cbiAgICBhdWdtZW50Q29sb3IsXG4gICAgLy8gVXNlZCBieSB0aGUgZnVuY3Rpb25zIGJlbG93IHRvIHNoaWZ0IGEgY29sb3IncyBsdW1pbmFuY2UgYnkgYXBwcm94aW1hdGVseVxuICAgIC8vIHR3byBpbmRleGVzIHdpdGhpbiBpdHMgdG9uYWwgcGFsZXR0ZS5cbiAgICAvLyBFLmcuLCBzaGlmdCBmcm9tIFJlZCA1MDAgdG8gUmVkIDMwMCBvciBSZWQgNzAwLlxuICAgIHRvbmFsT2Zmc2V0XG4gIH0sIG1vZGVzW21vZGVdKSwgb3RoZXIpO1xuICByZXR1cm4gcGFsZXR0ZU91dHB1dDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiZm9udEZhbWlseVwiLCBcImZvbnRTaXplXCIsIFwiZm9udFdlaWdodExpZ2h0XCIsIFwiZm9udFdlaWdodFJlZ3VsYXJcIiwgXCJmb250V2VpZ2h0TWVkaXVtXCIsIFwiZm9udFdlaWdodEJvbGRcIiwgXCJodG1sRm9udFNpemVcIiwgXCJhbGxWYXJpYW50c1wiLCBcInB4VG9SZW1cIl07XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmZ1bmN0aW9uIHJvdW5kKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMWU1KSAvIDFlNTtcbn1cbmNvbnN0IGNhc2VBbGxDYXBzID0ge1xuICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJ1xufTtcbmNvbnN0IGRlZmF1bHRGb250RmFtaWx5ID0gJ1wiUm9ib3RvXCIsIFwiSGVsdmV0aWNhXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZic7XG5cbi8qKlxuICogQHNlZSBAbGlua3todHRwczovL20yLm1hdGVyaWFsLmlvL2Rlc2lnbi90eXBvZ3JhcGh5L3RoZS10eXBlLXN5c3RlbS5odG1sfVxuICogQHNlZSBAbGlua3todHRwczovL20yLm1hdGVyaWFsLmlvL2Rlc2lnbi90eXBvZ3JhcGh5L3VuZGVyc3RhbmRpbmctdHlwb2dyYXBoeS5odG1sfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHkpIHtcbiAgY29uc3QgX3JlZiA9IHR5cGVvZiB0eXBvZ3JhcGh5ID09PSAnZnVuY3Rpb24nID8gdHlwb2dyYXBoeShwYWxldHRlKSA6IHR5cG9ncmFwaHksXG4gICAge1xuICAgICAgZm9udEZhbWlseSA9IGRlZmF1bHRGb250RmFtaWx5LFxuICAgICAgLy8gVGhlIGRlZmF1bHQgZm9udCBzaXplIG9mIHRoZSBNYXRlcmlhbCBTcGVjaWZpY2F0aW9uLlxuICAgICAgZm9udFNpemUgPSAxNCxcbiAgICAgIC8vIHB4XG4gICAgICBmb250V2VpZ2h0TGlnaHQgPSAzMDAsXG4gICAgICBmb250V2VpZ2h0UmVndWxhciA9IDQwMCxcbiAgICAgIGZvbnRXZWlnaHRNZWRpdW0gPSA1MDAsXG4gICAgICBmb250V2VpZ2h0Qm9sZCA9IDcwMCxcbiAgICAgIC8vIFRlbGwgTVVJIHdoYXQncyB0aGUgZm9udC1zaXplIG9uIHRoZSBodG1sIGVsZW1lbnQuXG4gICAgICAvLyAxNnB4IGlzIHRoZSBkZWZhdWx0IGZvbnQtc2l6ZSB1c2VkIGJ5IGJyb3dzZXJzLlxuICAgICAgaHRtbEZvbnRTaXplID0gMTYsXG4gICAgICAvLyBBcHBseSB0aGUgQ1NTIHByb3BlcnRpZXMgdG8gYWxsIHRoZSB2YXJpYW50cy5cbiAgICAgIGFsbFZhcmlhbnRzLFxuICAgICAgcHhUb1JlbTogcHhUb1JlbTJcbiAgICB9ID0gX3JlZixcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIF9leGNsdWRlZCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBmb250U2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogYGZvbnRTaXplYCBpcyByZXF1aXJlZCB0byBiZSBhIG51bWJlci4nKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBodG1sRm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IGBodG1sRm9udFNpemVgIGlzIHJlcXVpcmVkIHRvIGJlIGEgbnVtYmVyLicpO1xuICAgIH1cbiAgfVxuICBjb25zdCBjb2VmID0gZm9udFNpemUgLyAxNDtcbiAgY29uc3QgcHhUb1JlbSA9IHB4VG9SZW0yIHx8IChzaXplID0+IGAke3NpemUgLyBodG1sRm9udFNpemUgKiBjb2VmfXJlbWApO1xuICBjb25zdCBidWlsZFZhcmlhbnQgPSAoZm9udFdlaWdodCwgc2l6ZSwgbGluZUhlaWdodCwgbGV0dGVyU3BhY2luZywgY2FzaW5nKSA9PiBfZXh0ZW5kcyh7XG4gICAgZm9udEZhbWlseSxcbiAgICBmb250V2VpZ2h0LFxuICAgIGZvbnRTaXplOiBweFRvUmVtKHNpemUpLFxuICAgIC8vIFVuaXRsZXNzIGZvbGxvd2luZyBodHRwczovL21leWVyd2ViLmNvbS9lcmljL3Rob3VnaHRzLzIwMDYvMDIvMDgvdW5pdGxlc3MtbGluZS1oZWlnaHRzL1xuICAgIGxpbmVIZWlnaHRcbiAgfSwgZm9udEZhbWlseSA9PT0gZGVmYXVsdEZvbnRGYW1pbHkgPyB7XG4gICAgbGV0dGVyU3BhY2luZzogYCR7cm91bmQobGV0dGVyU3BhY2luZyAvIHNpemUpfWVtYFxuICB9IDoge30sIGNhc2luZywgYWxsVmFyaWFudHMpO1xuICBjb25zdCB2YXJpYW50cyA9IHtcbiAgICBoMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRMaWdodCwgOTYsIDEuMTY3LCAtMS41KSxcbiAgICBoMjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRMaWdodCwgNjAsIDEuMiwgLTAuNSksXG4gICAgaDM6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgNDgsIDEuMTY3LCAwKSxcbiAgICBoNDogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAzNCwgMS4yMzUsIDAuMjUpLFxuICAgIGg1OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDI0LCAxLjMzNCwgMCksXG4gICAgaDY6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAyMCwgMS42LCAwLjE1KSxcbiAgICBzdWJ0aXRsZTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNzUsIDAuMTUpLFxuICAgIHN1YnRpdGxlMjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjU3LCAwLjEpLFxuICAgIGJvZHkxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE2LCAxLjUsIDAuMTUpLFxuICAgIGJvZHkyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE0LCAxLjQzLCAwLjE1KSxcbiAgICBidXR0b246IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAxNCwgMS43NSwgMC40LCBjYXNlQWxsQ2FwcyksXG4gICAgY2FwdGlvbjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxMiwgMS42NiwgMC40KSxcbiAgICBvdmVybGluZTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxMiwgMi42NiwgMSwgY2FzZUFsbENhcHMpLFxuICAgIC8vIFRPRE8gdjY6IFJlbW92ZSBoYW5kbGluZyBvZiAnaW5oZXJpdCcgdmFyaWFudCBmcm9tIHRoZSB0aGVtZSBhcyBpdCBpcyBhbHJlYWR5IGhhbmRsZWQgaW4gTWF0ZXJpYWwgVUkncyBUeXBvZ3JhcGh5IGNvbXBvbmVudC4gQWxzbywgcmVtZW1iZXIgdG8gcmVtb3ZlIHRoZSBhc3NvY2lhdGVkIHR5cGVzLlxuICAgIGluaGVyaXQ6IHtcbiAgICAgIGZvbnRGYW1pbHk6ICdpbmhlcml0JyxcbiAgICAgIGZvbnRXZWlnaHQ6ICdpbmhlcml0JyxcbiAgICAgIGZvbnRTaXplOiAnaW5oZXJpdCcsXG4gICAgICBsaW5lSGVpZ2h0OiAnaW5oZXJpdCcsXG4gICAgICBsZXR0ZXJTcGFjaW5nOiAnaW5oZXJpdCdcbiAgICB9XG4gIH07XG4gIHJldHVybiBkZWVwbWVyZ2UoX2V4dGVuZHMoe1xuICAgIGh0bWxGb250U2l6ZSxcbiAgICBweFRvUmVtLFxuICAgIGZvbnRGYW1pbHksXG4gICAgZm9udFNpemUsXG4gICAgZm9udFdlaWdodExpZ2h0LFxuICAgIGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgIGZvbnRXZWlnaHRNZWRpdW0sXG4gICAgZm9udFdlaWdodEJvbGRcbiAgfSwgdmFyaWFudHMpLCBvdGhlciwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXBcbiAgfSk7XG59IiwiY29uc3Qgc2hhZG93S2V5VW1icmFPcGFjaXR5ID0gMC4yO1xuY29uc3Qgc2hhZG93S2V5UGVudW1icmFPcGFjaXR5ID0gMC4xNDtcbmNvbnN0IHNoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5ID0gMC4xMjtcbmZ1bmN0aW9uIGNyZWF0ZVNoYWRvdyguLi5weCkge1xuICByZXR1cm4gW2Ake3B4WzBdfXB4ICR7cHhbMV19cHggJHtweFsyXX1weCAke3B4WzNdfXB4IHJnYmEoMCwwLDAsJHtzaGFkb3dLZXlVbWJyYU9wYWNpdHl9KWAsIGAke3B4WzRdfXB4ICR7cHhbNV19cHggJHtweFs2XX1weCAke3B4WzddfXB4IHJnYmEoMCwwLDAsJHtzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHl9KWAsIGAke3B4WzhdfXB4ICR7cHhbOV19cHggJHtweFsxMF19cHggJHtweFsxMV19cHggcmdiYSgwLDAsMCwke3NoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5fSlgXS5qb2luKCcsJyk7XG59XG5cbi8vIFZhbHVlcyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYmU4NzQ3Zjk0NTc0NjY5Y2I1ZTdhZGQxYTdjNTRmYTQxYTg5Y2VjNy9wYWNrYWdlcy9tZGMtZWxldmF0aW9uL192YXJpYWJsZXMuc2Nzc1xuY29uc3Qgc2hhZG93cyA9IFsnbm9uZScsIGNyZWF0ZVNoYWRvdygwLCAyLCAxLCAtMSwgMCwgMSwgMSwgMCwgMCwgMSwgMywgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCAxLCAtMiwgMCwgMiwgMiwgMCwgMCwgMSwgNSwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCAzLCAtMiwgMCwgMywgNCwgMCwgMCwgMSwgOCwgMCksIGNyZWF0ZVNoYWRvdygwLCAyLCA0LCAtMSwgMCwgNCwgNSwgMCwgMCwgMSwgMTAsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgNSwgLTEsIDAsIDUsIDgsIDAsIDAsIDEsIDE0LCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA2LCAxMCwgMCwgMCwgMSwgMTgsIDApLCBjcmVhdGVTaGFkb3coMCwgNCwgNSwgLTIsIDAsIDcsIDEwLCAxLCAwLCAyLCAxNiwgMSksIGNyZWF0ZVNoYWRvdygwLCA1LCA1LCAtMywgMCwgOCwgMTAsIDEsIDAsIDMsIDE0LCAyKSwgY3JlYXRlU2hhZG93KDAsIDUsIDYsIC0zLCAwLCA5LCAxMiwgMSwgMCwgMywgMTYsIDIpLCBjcmVhdGVTaGFkb3coMCwgNiwgNiwgLTMsIDAsIDEwLCAxNCwgMSwgMCwgNCwgMTgsIDMpLCBjcmVhdGVTaGFkb3coMCwgNiwgNywgLTQsIDAsIDExLCAxNSwgMSwgMCwgNCwgMjAsIDMpLCBjcmVhdGVTaGFkb3coMCwgNywgOCwgLTQsIDAsIDEyLCAxNywgMiwgMCwgNSwgMjIsIDQpLCBjcmVhdGVTaGFkb3coMCwgNywgOCwgLTQsIDAsIDEzLCAxOSwgMiwgMCwgNSwgMjQsIDQpLCBjcmVhdGVTaGFkb3coMCwgNywgOSwgLTQsIDAsIDE0LCAyMSwgMiwgMCwgNSwgMjYsIDQpLCBjcmVhdGVTaGFkb3coMCwgOCwgOSwgLTUsIDAsIDE1LCAyMiwgMiwgMCwgNiwgMjgsIDUpLCBjcmVhdGVTaGFkb3coMCwgOCwgMTAsIC01LCAwLCAxNiwgMjQsIDIsIDAsIDYsIDMwLCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDExLCAtNSwgMCwgMTcsIDI2LCAyLCAwLCA2LCAzMiwgNSksIGNyZWF0ZVNoYWRvdygwLCA5LCAxMSwgLTUsIDAsIDE4LCAyOCwgMiwgMCwgNywgMzQsIDYpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTIsIC02LCAwLCAxOSwgMjksIDIsIDAsIDcsIDM2LCA2KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIwLCAzMSwgMywgMCwgOCwgMzgsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDEzLCAtNiwgMCwgMjEsIDMzLCAzLCAwLCA4LCA0MCwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTQsIC02LCAwLCAyMiwgMzUsIDMsIDAsIDgsIDQyLCA3KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNCwgLTcsIDAsIDIzLCAzNiwgMywgMCwgOSwgNDQsIDgpLCBjcmVhdGVTaGFkb3coMCwgMTEsIDE1LCAtNywgMCwgMjQsIDM4LCAzLCAwLCA5LCA0NiwgOCldO1xuZXhwb3J0IGRlZmF1bHQgc2hhZG93czsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiZHVyYXRpb25cIiwgXCJlYXNpbmdcIiwgXCJkZWxheVwiXTtcbi8vIEZvbGxvdyBodHRwczovL21hdGVyaWFsLmdvb2dsZS5jb20vbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1uYXR1cmFsLWVhc2luZy1jdXJ2ZXNcbi8vIHRvIGxlYXJuIHRoZSBjb250ZXh0IGluIHdoaWNoIGVhY2ggZWFzaW5nIHNob3VsZCBiZSB1c2VkLlxuZXhwb3J0IGNvbnN0IGVhc2luZyA9IHtcbiAgLy8gVGhpcyBpcyB0aGUgbW9zdCBjb21tb24gZWFzaW5nIGN1cnZlLlxuICBlYXNlSW5PdXQ6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBlbnRlciB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkgZnJvbSBvZmYtc2NyZWVuIGFuZFxuICAvLyBzbG93bHkgZGVjZWxlcmF0ZSB0byBhIHJlc3RpbmcgcG9pbnQuXG4gIGVhc2VPdXQ6ICdjdWJpYy1iZXppZXIoMC4wLCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBsZWF2ZSB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkuIFRoZXkgZG8gbm90IGRlY2VsZXJhdGUgd2hlbiBvZmYtc2NyZWVuLlxuICBlYXNlSW46ICdjdWJpYy1iZXppZXIoMC40LCAwLCAxLCAxKScsXG4gIC8vIFRoZSBzaGFycCBjdXJ2ZSBpcyB1c2VkIGJ5IG9iamVjdHMgdGhhdCBtYXkgcmV0dXJuIHRvIHRoZSBzY3JlZW4gYXQgYW55IHRpbWUuXG4gIHNoYXJwOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC42LCAxKSdcbn07XG5cbi8vIEZvbGxvdyBodHRwczovL20yLm1hdGVyaWFsLmlvL2d1aWRlbGluZXMvbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1jb21tb24tZHVyYXRpb25zXG4vLyB0byBsZWFybiB3aGVuIHVzZSB3aGF0IHRpbWluZ1xuZXhwb3J0IGNvbnN0IGR1cmF0aW9uID0ge1xuICBzaG9ydGVzdDogMTUwLFxuICBzaG9ydGVyOiAyMDAsXG4gIHNob3J0OiAyNTAsXG4gIC8vIG1vc3QgYmFzaWMgcmVjb21tZW5kZWQgdGltaW5nXG4gIHN0YW5kYXJkOiAzMDAsXG4gIC8vIHRoaXMgaXMgdG8gYmUgdXNlZCBpbiBjb21wbGV4IGFuaW1hdGlvbnNcbiAgY29tcGxleDogMzc1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBlbnRlcmluZyBzY3JlZW5cbiAgZW50ZXJpbmdTY3JlZW46IDIyNSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgbGVhdmluZyBzY3JlZW5cbiAgbGVhdmluZ1NjcmVlbjogMTk1XG59O1xuZnVuY3Rpb24gZm9ybWF0TXMobWlsbGlzZWNvbmRzKSB7XG4gIHJldHVybiBgJHtNYXRoLnJvdW5kKG1pbGxpc2Vjb25kcyl9bXNgO1xufVxuZnVuY3Rpb24gZ2V0QXV0b0hlaWdodER1cmF0aW9uKGhlaWdodCkge1xuICBpZiAoIWhlaWdodCkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGNvbnN0IGNvbnN0YW50ID0gaGVpZ2h0IC8gMzY7XG5cbiAgLy8gaHR0cHM6Ly93d3cud29sZnJhbWFscGhhLmNvbS9pbnB1dC8/aT0oNCslMkIrMTUrKisoeCslMkYrMzYrKSsqKiswLjI1KyUyQisoeCslMkYrMzYpKyUyRis1KSsqKzEwXG4gIHJldHVybiBNYXRoLnJvdW5kKCg0ICsgMTUgKiBjb25zdGFudCAqKiAwLjI1ICsgY29uc3RhbnQgLyA1KSAqIDEwKTtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25zKGlucHV0VHJhbnNpdGlvbnMpIHtcbiAgY29uc3QgbWVyZ2VkRWFzaW5nID0gX2V4dGVuZHMoe30sIGVhc2luZywgaW5wdXRUcmFuc2l0aW9ucy5lYXNpbmcpO1xuICBjb25zdCBtZXJnZWREdXJhdGlvbiA9IF9leHRlbmRzKHt9LCBkdXJhdGlvbiwgaW5wdXRUcmFuc2l0aW9ucy5kdXJhdGlvbik7XG4gIGNvbnN0IGNyZWF0ZSA9IChwcm9wcyA9IFsnYWxsJ10sIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uT3B0aW9uID0gbWVyZ2VkRHVyYXRpb24uc3RhbmRhcmQsXG4gICAgICAgIGVhc2luZzogZWFzaW5nT3B0aW9uID0gbWVyZ2VkRWFzaW5nLmVhc2VJbk91dCxcbiAgICAgICAgZGVsYXkgPSAwXG4gICAgICB9ID0gb3B0aW9ucyxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uob3B0aW9ucywgX2V4Y2x1ZGVkKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc3QgaXNTdHJpbmcgPSB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xuICAgICAgLy8gSUUxMSBzdXBwb3J0LCByZXBsYWNlIHdpdGggTnVtYmVyLmlzTmFOXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gICAgICBjb25zdCBpc051bWJlciA9IHZhbHVlID0+ICFpc05hTihwYXJzZUZsb2F0KHZhbHVlKSk7XG4gICAgICBpZiAoIWlzU3RyaW5nKHByb3BzKSAmJiAhQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTVVJOiBBcmd1bWVudCBcInByb3BzXCIgbXVzdCBiZSBhIHN0cmluZyBvciBBcnJheS4nKTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNOdW1iZXIoZHVyYXRpb25PcHRpb24pICYmICFpc1N0cmluZyhkdXJhdGlvbk9wdGlvbikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBBcmd1bWVudCBcImR1cmF0aW9uXCIgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZyBidXQgZm91bmQgJHtkdXJhdGlvbk9wdGlvbn0uYCk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzU3RyaW5nKGVhc2luZ09wdGlvbikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTVVJOiBBcmd1bWVudCBcImVhc2luZ1wiIG11c3QgYmUgYSBzdHJpbmcuJyk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzTnVtYmVyKGRlbGF5KSAmJiAhaXNTdHJpbmcoZGVsYXkpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogQXJndW1lbnQgXCJkZWxheVwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcuJyk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFNlY29uZyBhcmd1bWVudCBvZiB0cmFuc2l0aW9uLmNyZWF0ZSBtdXN0IGJlIGFuIG9iamVjdC4nLCBcIkFyZ3VtZW50cyBzaG91bGQgYmUgZWl0aGVyIGBjcmVhdGUoJ3Byb3AxJywgb3B0aW9ucylgIG9yIGBjcmVhdGUoWydwcm9wMScsICdwcm9wMiddLCBvcHRpb25zKWBcIl0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgICAgaWYgKE9iamVjdC5rZXlzKG90aGVyKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBVbnJlY29nbml6ZWQgYXJndW1lbnQocykgWyR7T2JqZWN0LmtleXMob3RoZXIpLmpvaW4oJywnKX1dLmApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKEFycmF5LmlzQXJyYXkocHJvcHMpID8gcHJvcHMgOiBbcHJvcHNdKS5tYXAoYW5pbWF0ZWRQcm9wID0+IGAke2FuaW1hdGVkUHJvcH0gJHt0eXBlb2YgZHVyYXRpb25PcHRpb24gPT09ICdzdHJpbmcnID8gZHVyYXRpb25PcHRpb24gOiBmb3JtYXRNcyhkdXJhdGlvbk9wdGlvbil9ICR7ZWFzaW5nT3B0aW9ufSAke3R5cGVvZiBkZWxheSA9PT0gJ3N0cmluZycgPyBkZWxheSA6IGZvcm1hdE1zKGRlbGF5KX1gKS5qb2luKCcsJyk7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgZ2V0QXV0b0hlaWdodER1cmF0aW9uLFxuICAgIGNyZWF0ZVxuICB9LCBpbnB1dFRyYW5zaXRpb25zLCB7XG4gICAgZWFzaW5nOiBtZXJnZWRFYXNpbmcsXG4gICAgZHVyYXRpb246IG1lcmdlZER1cmF0aW9uXG4gIH0pO1xufSIsIi8vIFdlIG5lZWQgdG8gY2VudHJhbGl6ZSB0aGUgekluZGV4IGRlZmluaXRpb25zIGFzIHRoZXkgd29ya1xuLy8gbGlrZSBnbG9iYWwgdmFsdWVzIGluIHRoZSBicm93c2VyLlxuY29uc3QgekluZGV4ID0ge1xuICBtb2JpbGVTdGVwcGVyOiAxMDAwLFxuICBmYWI6IDEwNTAsXG4gIHNwZWVkRGlhbDogMTA1MCxcbiAgYXBwQmFyOiAxMTAwLFxuICBkcmF3ZXI6IDEyMDAsXG4gIG1vZGFsOiAxMzAwLFxuICBzbmFja2JhcjogMTQwMCxcbiAgdG9vbHRpcDogMTUwMFxufTtcbmV4cG9ydCBkZWZhdWx0IHpJbmRleDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgZnJvbSBcIkBtdWkvdXRpbHMvZm9ybWF0TXVpRXJyb3JNZXNzYWdlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJicmVha3BvaW50c1wiLCBcIm1peGluc1wiLCBcInNwYWNpbmdcIiwgXCJwYWxldHRlXCIsIFwidHJhbnNpdGlvbnNcIiwgXCJ0eXBvZ3JhcGh5XCIsIFwic2hhcGVcIl07XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IGNyZWF0ZVRoZW1lIGFzIHN5c3RlbUNyZWF0ZVRoZW1lLCB1bnN0YWJsZV9kZWZhdWx0U3hDb25maWcgYXMgZGVmYXVsdFN4Q29uZmlnLCB1bnN0YWJsZV9zdHlsZUZ1bmN0aW9uU3ggYXMgc3R5bGVGdW5jdGlvblN4IH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuaW1wb3J0IGNyZWF0ZU1peGlucyBmcm9tICcuL2NyZWF0ZU1peGlucyc7XG5pbXBvcnQgY3JlYXRlUGFsZXR0ZSBmcm9tICcuL2NyZWF0ZVBhbGV0dGUnO1xuaW1wb3J0IGNyZWF0ZVR5cG9ncmFwaHkgZnJvbSAnLi9jcmVhdGVUeXBvZ3JhcGh5JztcbmltcG9ydCBzaGFkb3dzIGZyb20gJy4vc2hhZG93cyc7XG5pbXBvcnQgY3JlYXRlVHJhbnNpdGlvbnMgZnJvbSAnLi9jcmVhdGVUcmFuc2l0aW9ucyc7XG5pbXBvcnQgekluZGV4IGZyb20gJy4vekluZGV4JztcbmZ1bmN0aW9uIGNyZWF0ZVRoZW1lKG9wdGlvbnMgPSB7fSwgLi4uYXJncykge1xuICBjb25zdCB7XG4gICAgICBtaXhpbnM6IG1peGluc0lucHV0ID0ge30sXG4gICAgICBwYWxldHRlOiBwYWxldHRlSW5wdXQgPSB7fSxcbiAgICAgIHRyYW5zaXRpb25zOiB0cmFuc2l0aW9uc0lucHV0ID0ge30sXG4gICAgICB0eXBvZ3JhcGh5OiB0eXBvZ3JhcGh5SW5wdXQgPSB7fVxuICAgIH0gPSBvcHRpb25zLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uob3B0aW9ucywgX2V4Y2x1ZGVkKTtcbiAgaWYgKG9wdGlvbnMudmFycykge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBcXGB2YXJzXFxgIGlzIGEgcHJpdmF0ZSBmaWVsZCB1c2VkIGZvciBDU1MgdmFyaWFibGVzIHN1cHBvcnQuXG5QbGVhc2UgdXNlIGFub3RoZXIgbmFtZS5gIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgxOCkpO1xuICB9XG4gIGNvbnN0IHBhbGV0dGUgPSBjcmVhdGVQYWxldHRlKHBhbGV0dGVJbnB1dCk7XG4gIGNvbnN0IHN5c3RlbVRoZW1lID0gc3lzdGVtQ3JlYXRlVGhlbWUob3B0aW9ucyk7XG4gIGxldCBtdWlUaGVtZSA9IGRlZXBtZXJnZShzeXN0ZW1UaGVtZSwge1xuICAgIG1peGluczogY3JlYXRlTWl4aW5zKHN5c3RlbVRoZW1lLmJyZWFrcG9pbnRzLCBtaXhpbnNJbnB1dCksXG4gICAgcGFsZXR0ZSxcbiAgICAvLyBEb24ndCB1c2UgWy4uLnNoYWRvd3NdIHVudGlsIHlvdSd2ZSB2ZXJpZmllZCBpdHMgdHJhbnNwaWxlZCBjb2RlIGlzIG5vdCBpbnZva2luZyB0aGUgaXRlcmF0b3IgcHJvdG9jb2wuXG4gICAgc2hhZG93czogc2hhZG93cy5zbGljZSgpLFxuICAgIHR5cG9ncmFwaHk6IGNyZWF0ZVR5cG9ncmFwaHkocGFsZXR0ZSwgdHlwb2dyYXBoeUlucHV0KSxcbiAgICB0cmFuc2l0aW9uczogY3JlYXRlVHJhbnNpdGlvbnModHJhbnNpdGlvbnNJbnB1dCksXG4gICAgekluZGV4OiBfZXh0ZW5kcyh7fSwgekluZGV4KSxcbiAgICBhcHBseURhcmtTdHlsZXMoY3NzKSB7XG4gICAgICBpZiAodGhpcy52YXJzKSB7XG4gICAgICAgIC8vIElmIENzc1ZhcnNQcm92aWRlciBpcyB1c2VkIGFzIGEgcHJvdmlkZXIsXG4gICAgICAgIC8vIHJldHVybnMgJzp3aGVyZShbZGF0YS1tdWktY29sb3Itc2NoZW1lPVwibGlnaHR8ZGFya1wiXSkgJidcbiAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSB0aGlzLmdldENvbG9yU2NoZW1lU2VsZWN0b3IoJ2RhcmsnKS5yZXBsYWNlKC8oXFxbW15cXF1dK1xcXSkvLCAnOndoZXJlKCQxKScpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIFtzZWxlY3Rvcl06IGNzc1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucGFsZXR0ZS5tb2RlID09PSAnZGFyaycpIHtcbiAgICAgICAgcmV0dXJuIGNzcztcbiAgICAgIH1cbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gIH0pO1xuICBtdWlUaGVtZSA9IGRlZXBtZXJnZShtdWlUaGVtZSwgb3RoZXIpO1xuICBtdWlUaGVtZSA9IGFyZ3MucmVkdWNlKChhY2MsIGFyZ3VtZW50KSA9PiBkZWVwbWVyZ2UoYWNjLCBhcmd1bWVudCksIG11aVRoZW1lKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUT0RPIHY2OiBSZWZhY3RvciB0byB1c2UgZ2xvYmFsU3RhdGVDbGFzc2VzTWFwcGluZyBmcm9tIEBtdWkvdXRpbHMgb25jZSBgcmVhZE9ubHlgIHN0YXRlIGNsYXNzIGlzIHVzZWQgaW4gUmF0aW5nIGNvbXBvbmVudC5cbiAgICBjb25zdCBzdGF0ZUNsYXNzZXMgPSBbJ2FjdGl2ZScsICdjaGVja2VkJywgJ2NvbXBsZXRlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdleHBhbmRlZCcsICdmb2N1c2VkJywgJ2ZvY3VzVmlzaWJsZScsICdyZXF1aXJlZCcsICdzZWxlY3RlZCddO1xuICAgIGNvbnN0IHRyYXZlcnNlID0gKG5vZGUsIGNvbXBvbmVudCkgPT4ge1xuICAgICAgbGV0IGtleTtcblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pbiwgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgIGZvciAoa2V5IGluIG5vZGUpIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBub2RlW2tleV07XG4gICAgICAgIGlmIChzdGF0ZUNsYXNzZXMuaW5kZXhPZihrZXkpICE9PSAtMSAmJiBPYmplY3Qua2V5cyhjaGlsZCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZUNsYXNzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJycsIGtleSk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgXFxgJHtjb21wb25lbnR9XFxgIGNvbXBvbmVudCBpbmNyZWFzZXMgYCArIGB0aGUgQ1NTIHNwZWNpZmljaXR5IG9mIHRoZSBcXGAke2tleX1cXGAgaW50ZXJuYWwgc3RhdGUuYCwgJ1lvdSBjYW4gbm90IG92ZXJyaWRlIGl0IGxpa2UgdGhpczogJywgSlNPTi5zdHJpbmdpZnkobm9kZSwgbnVsbCwgMiksICcnLCBgSW5zdGVhZCwgeW91IG5lZWQgdG8gdXNlIHRoZSAnJi4ke3N0YXRlQ2xhc3N9JyBzeW50YXg6YCwgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICByb290OiB7XG4gICAgICAgICAgICAgICAgW2AmLiR7c3RhdGVDbGFzc31gXTogY2hpbGRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgbnVsbCwgMiksICcnLCAnaHR0cHM6Ly9tdWkuY29tL3Ivc3RhdGUtY2xhc3Nlcy1ndWlkZSddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gUmVtb3ZlIHRoZSBzdHlsZSB0byBwcmV2ZW50IGdsb2JhbCBjb25mbGljdHMuXG4gICAgICAgICAgbm9kZVtrZXldID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5rZXlzKG11aVRoZW1lLmNvbXBvbmVudHMpLmZvckVhY2goY29tcG9uZW50ID0+IHtcbiAgICAgIGNvbnN0IHN0eWxlT3ZlcnJpZGVzID0gbXVpVGhlbWUuY29tcG9uZW50c1tjb21wb25lbnRdLnN0eWxlT3ZlcnJpZGVzO1xuICAgICAgaWYgKHN0eWxlT3ZlcnJpZGVzICYmIGNvbXBvbmVudC5pbmRleE9mKCdNdWknKSA9PT0gMCkge1xuICAgICAgICB0cmF2ZXJzZShzdHlsZU92ZXJyaWRlcywgY29tcG9uZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBtdWlUaGVtZS51bnN0YWJsZV9zeENvbmZpZyA9IF9leHRlbmRzKHt9LCBkZWZhdWx0U3hDb25maWcsIG90aGVyID09IG51bGwgPyB2b2lkIDAgOiBvdGhlci51bnN0YWJsZV9zeENvbmZpZyk7XG4gIG11aVRoZW1lLnVuc3RhYmxlX3N4ID0gZnVuY3Rpb24gc3gocHJvcHMpIHtcbiAgICByZXR1cm4gc3R5bGVGdW5jdGlvblN4KHtcbiAgICAgIHN4OiBwcm9wcyxcbiAgICAgIHRoZW1lOiB0aGlzXG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBtdWlUaGVtZTtcbn1cbmxldCB3YXJuZWRPbmNlID0gZmFsc2U7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTXVpVGhlbWUoLi4uYXJncykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghd2FybmVkT25jZSkge1xuICAgICAgd2FybmVkT25jZSA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiB0aGUgY3JlYXRlTXVpVGhlbWUgZnVuY3Rpb24gd2FzIHJlbmFtZWQgdG8gY3JlYXRlVGhlbWUuJywgJycsIFwiWW91IHNob3VsZCB1c2UgYGltcG9ydCB7IGNyZWF0ZVRoZW1lIH0gZnJvbSAnQG11aS9tYXRlcmlhbC9zdHlsZXMnYFwiXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjcmVhdGVUaGVtZSguLi5hcmdzKTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRoZW1lOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IGNyZWF0ZVRoZW1lIGZyb20gJy4vY3JlYXRlVGhlbWUnO1xuY29uc3QgZGVmYXVsdFRoZW1lID0gY3JlYXRlVGhlbWUoKTtcbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRUaGVtZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1peGlucyhicmVha3BvaW50cywgbWl4aW5zKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgdG9vbGJhcjoge1xuICAgICAgbWluSGVpZ2h0OiA1NixcbiAgICAgIFticmVha3BvaW50cy51cCgneHMnKV06IHtcbiAgICAgICAgJ0BtZWRpYSAob3JpZW50YXRpb246IGxhbmRzY2FwZSknOiB7XG4gICAgICAgICAgbWluSGVpZ2h0OiA0OFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgW2JyZWFrcG9pbnRzLnVwKCdzbScpXToge1xuICAgICAgICBtaW5IZWlnaHQ6IDY0XG4gICAgICB9XG4gICAgfVxuICB9LCBtaXhpbnMpO1xufSIsImV4cG9ydCBkZWZhdWx0ICckJG1hdGVyaWFsJzsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCB7IGNyZWF0ZVN0eWxlZCwgc2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcbmltcG9ydCBUSEVNRV9JRCBmcm9tICcuL2lkZW50aWZpZXInO1xuZXhwb3J0IGNvbnN0IHJvb3RTaG91bGRGb3J3YXJkUHJvcCA9IHByb3AgPT4gc2hvdWxkRm9yd2FyZFByb3AocHJvcCkgJiYgcHJvcCAhPT0gJ2NsYXNzZXMnO1xuZXhwb3J0IGNvbnN0IHNsb3RTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wO1xuY29uc3Qgc3R5bGVkID0gY3JlYXRlU3R5bGVkKHtcbiAgdGhlbWVJZDogVEhFTUVfSUQsXG4gIGRlZmF1bHRUaGVtZSxcbiAgcm9vdFNob3VsZEZvcndhcmRQcm9wXG59KTtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlZDsiLCIvKipcbiAqIEBtdWkvc3R5bGVkLWVuZ2luZSB2NS4xNS42XG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBjbGllbnQnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuaW1wb3J0IGVtU3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdHlsZWQodGFnLCBvcHRpb25zKSB7XG4gIGNvbnN0IHN0eWxlc0ZhY3RvcnkgPSBlbVN0eWxlZCh0YWcsIG9wdGlvbnMpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiAoLi4uc3R5bGVzKSA9PiB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSB0eXBlb2YgdGFnID09PSAnc3RyaW5nJyA/IGBcIiR7dGFnfVwiYCA6ICdjb21wb25lbnQnO1xuICAgICAgaWYgKHN0eWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogU2VlbXMgbGlrZSB5b3UgY2FsbGVkIFxcYHN0eWxlZCgke2NvbXBvbmVudH0pKClcXGAgd2l0aG91dCBhIFxcYHN0eWxlXFxgIGFyZ3VtZW50LmAsICdZb3UgbXVzdCBwcm92aWRlIGEgYHN0eWxlc2AgYXJndW1lbnQ6IGBzdHlsZWQoXCJkaXZcIikoc3R5bGVZb3VGb3Jnb3RUb1Bhc3MpYC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9IGVsc2UgaWYgKHN0eWxlcy5zb21lKHN0eWxlID0+IHN0eWxlID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogdGhlIHN0eWxlZCgke2NvbXBvbmVudH0pKC4uLmFyZ3MpIEFQSSByZXF1aXJlcyBhbGwgaXRzIGFyZ3MgdG8gYmUgZGVmaW5lZC5gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHlsZXNGYWN0b3J5KC4uLnN0eWxlcyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gc3R5bGVzRmFjdG9yeTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGNvbnN0IGludGVybmFsX3Byb2Nlc3NTdHlsZXMgPSAodGFnLCBwcm9jZXNzb3IpID0+IHtcbiAgLy8gRW1vdGlvbiBhdHRhY2hlcyBhbGwgdGhlIHN0eWxlcyBhcyBgX19lbW90aW9uX3N0eWxlc2AuXG4gIC8vIFJlZjogaHR0cHM6Ly9naXRodWIuY29tL2Vtb3Rpb24tanMvZW1vdGlvbi9ibG9iLzE2ZDk3MWQwZGEyMjk1OTZkNmJjYzM5ZDI4MmJhOTc1M2M5ZWU3Y2YvcGFja2FnZXMvc3R5bGVkL3NyYy9iYXNlLmpzI0wxODZcbiAgaWYgKEFycmF5LmlzQXJyYXkodGFnLl9fZW1vdGlvbl9zdHlsZXMpKSB7XG4gICAgdGFnLl9fZW1vdGlvbl9zdHlsZXMgPSBwcm9jZXNzb3IodGFnLl9fZW1vdGlvbl9zdHlsZXMpO1xuICB9XG59O1xuZXhwb3J0IHsgVGhlbWVDb250ZXh0LCBrZXlmcmFtZXMsIGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgU3R5bGVkRW5naW5lUHJvdmlkZXIgfSBmcm9tICcuL1N0eWxlZEVuZ2luZVByb3ZpZGVyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgR2xvYmFsU3R5bGVzIH0gZnJvbSAnLi9HbG9iYWxTdHlsZXMnOyIsIi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtaW9zL2Jsb2IvYmNhMzYxMDc0MDU1OTRkNWI3YjE2MjY1YTViMGVkNjk4Zjg1YTVlZS9jb21wb25lbnRzL0VsZXZhdGlvbi9zcmMvVUlDb2xvciUyQk1hdGVyaWFsRWxldmF0aW9uLm0jTDYxXG5jb25zdCBnZXRPdmVybGF5QWxwaGEgPSBlbGV2YXRpb24gPT4ge1xuICBsZXQgYWxwaGFWYWx1ZTtcbiAgaWYgKGVsZXZhdGlvbiA8IDEpIHtcbiAgICBhbHBoYVZhbHVlID0gNS4xMTkxNiAqIGVsZXZhdGlvbiAqKiAyO1xuICB9IGVsc2Uge1xuICAgIGFscGhhVmFsdWUgPSA0LjUgKiBNYXRoLmxvZyhlbGV2YXRpb24gKyAxKSArIDI7XG4gIH1cbiAgcmV0dXJuIChhbHBoYVZhbHVlIC8gMTAwKS50b0ZpeGVkKDIpO1xufTtcbmV4cG9ydCBkZWZhdWx0IGdldE92ZXJsYXlBbHBoYTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbi8qKlxuICogQWRkIGtleXMsIHZhbHVlcyBvZiBgZGVmYXVsdFByb3BzYCB0aGF0IGRvZXMgbm90IGV4aXN0IGluIGBwcm9wc2BcbiAqIEBwYXJhbSB7b2JqZWN0fSBkZWZhdWx0UHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICogQHJldHVybnMge29iamVjdH0gcmVzb2x2ZWQgcHJvcHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVzb2x2ZVByb3BzKGRlZmF1bHRQcm9wcywgcHJvcHMpIHtcbiAgY29uc3Qgb3V0cHV0ID0gX2V4dGVuZHMoe30sIHByb3BzKTtcbiAgT2JqZWN0LmtleXMoZGVmYXVsdFByb3BzKS5mb3JFYWNoKHByb3BOYW1lID0+IHtcbiAgICBpZiAocHJvcE5hbWUudG9TdHJpbmcoKS5tYXRjaCgvXihjb21wb25lbnRzfHNsb3RzKSQvKSkge1xuICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9IF9leHRlbmRzKHt9LCBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdLCBvdXRwdXRbcHJvcE5hbWVdKTtcbiAgICB9IGVsc2UgaWYgKHByb3BOYW1lLnRvU3RyaW5nKCkubWF0Y2goL14oY29tcG9uZW50c1Byb3BzfHNsb3RQcm9wcykkLykpIHtcbiAgICAgIGNvbnN0IGRlZmF1bHRTbG90UHJvcHMgPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdIHx8IHt9O1xuICAgICAgY29uc3Qgc2xvdFByb3BzID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9IHt9O1xuICAgICAgaWYgKCFzbG90UHJvcHMgfHwgIU9iamVjdC5rZXlzKHNsb3RQcm9wcykpIHtcbiAgICAgICAgLy8gUmVkdWNlIHRoZSBpdGVyYXRpb24gaWYgdGhlIHNsb3QgcHJvcHMgaXMgZW1wdHlcbiAgICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9IGRlZmF1bHRTbG90UHJvcHM7XG4gICAgICB9IGVsc2UgaWYgKCFkZWZhdWx0U2xvdFByb3BzIHx8ICFPYmplY3Qua2V5cyhkZWZhdWx0U2xvdFByb3BzKSkge1xuICAgICAgICAvLyBSZWR1Y2UgdGhlIGl0ZXJhdGlvbiBpZiB0aGUgZGVmYXVsdCBzbG90IHByb3BzIGlzIGVtcHR5XG4gICAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSBzbG90UHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXRbcHJvcE5hbWVdID0gX2V4dGVuZHMoe30sIHNsb3RQcm9wcyk7XG4gICAgICAgIE9iamVjdC5rZXlzKGRlZmF1bHRTbG90UHJvcHMpLmZvckVhY2goc2xvdFByb3BOYW1lID0+IHtcbiAgICAgICAgICBvdXRwdXRbcHJvcE5hbWVdW3Nsb3RQcm9wTmFtZV0gPSByZXNvbHZlUHJvcHMoZGVmYXVsdFNsb3RQcm9wc1tzbG90UHJvcE5hbWVdLCBzbG90UHJvcHNbc2xvdFByb3BOYW1lXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3V0cHV0W3Byb3BOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBvdXRwdXRbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufSIsImltcG9ydCB7IGludGVybmFsX3Jlc29sdmVQcm9wcyBhcyByZXNvbHZlUHJvcHMgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRoZW1lUHJvcHMocGFyYW1zKSB7XG4gIGNvbnN0IHtcbiAgICB0aGVtZSxcbiAgICBuYW1lLFxuICAgIHByb3BzXG4gIH0gPSBwYXJhbXM7XG4gIGlmICghdGhlbWUgfHwgIXRoZW1lLmNvbXBvbmVudHMgfHwgIXRoZW1lLmNvbXBvbmVudHNbbmFtZV0gfHwgIXRoZW1lLmNvbXBvbmVudHNbbmFtZV0uZGVmYXVsdFByb3BzKSB7XG4gICAgcmV0dXJuIHByb3BzO1xuICB9XG4gIHJldHVybiByZXNvbHZlUHJvcHModGhlbWUuY29tcG9uZW50c1tuYW1lXS5kZWZhdWx0UHJvcHMsIHByb3BzKTtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFRoZW1lQ29udGV4dCB9IGZyb20gJ0BtdWkvc3R5bGVkLWVuZ2luZSc7XG5mdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5mdW5jdGlvbiB1c2VUaGVtZShkZWZhdWx0VGhlbWUgPSBudWxsKSB7XG4gIGNvbnN0IGNvbnRleHRUaGVtZSA9IFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgcmV0dXJuICFjb250ZXh0VGhlbWUgfHwgaXNPYmplY3RFbXB0eShjb250ZXh0VGhlbWUpID8gZGVmYXVsdFRoZW1lIDogY29udGV4dFRoZW1lO1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlVGhlbWU7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSAnLi9jcmVhdGVUaGVtZSc7XG5pbXBvcnQgdXNlVGhlbWVXaXRob3V0RGVmYXVsdCBmcm9tICcuL3VzZVRoZW1lV2l0aG91dERlZmF1bHQnO1xuZXhwb3J0IGNvbnN0IHN5c3RlbURlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5mdW5jdGlvbiB1c2VUaGVtZShkZWZhdWx0VGhlbWUgPSBzeXN0ZW1EZWZhdWx0VGhlbWUpIHtcbiAgcmV0dXJuIHVzZVRoZW1lV2l0aG91dERlZmF1bHQoZGVmYXVsdFRoZW1lKTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZVRoZW1lOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IHsgdXNlVGhlbWVQcm9wcyBhcyBzeXN0ZW1Vc2VUaGVtZVByb3BzIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5pbXBvcnQgVEhFTUVfSUQgZnJvbSAnLi9pZGVudGlmaWVyJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lUHJvcHMoe1xuICBwcm9wcyxcbiAgbmFtZVxufSkge1xuICByZXR1cm4gc3lzdGVtVXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHMsXG4gICAgbmFtZSxcbiAgICBkZWZhdWx0VGhlbWUsXG4gICAgdGhlbWVJZDogVEhFTUVfSURcbiAgfSk7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgZ2V0VGhlbWVQcm9wcyBmcm9tICcuL2dldFRoZW1lUHJvcHMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lUHJvcHMoe1xuICBwcm9wcyxcbiAgbmFtZSxcbiAgZGVmYXVsdFRoZW1lLFxuICB0aGVtZUlkXG59KSB7XG4gIGxldCB0aGVtZSA9IHVzZVRoZW1lKGRlZmF1bHRUaGVtZSk7XG4gIGlmICh0aGVtZUlkKSB7XG4gICAgdGhlbWUgPSB0aGVtZVt0aGVtZUlkXSB8fCB0aGVtZTtcbiAgfVxuICBjb25zdCBtZXJnZWRQcm9wcyA9IGdldFRoZW1lUHJvcHMoe1xuICAgIHRoZW1lLFxuICAgIG5hbWUsXG4gICAgcHJvcHNcbiAgfSk7XG4gIHJldHVybiBtZXJnZWRQcm9wcztcbn0iLCJjb25zdCBkZWZhdWx0R2VuZXJhdG9yID0gY29tcG9uZW50TmFtZSA9PiBjb21wb25lbnROYW1lO1xuY29uc3QgY3JlYXRlQ2xhc3NOYW1lR2VuZXJhdG9yID0gKCkgPT4ge1xuICBsZXQgZ2VuZXJhdGUgPSBkZWZhdWx0R2VuZXJhdG9yO1xuICByZXR1cm4ge1xuICAgIGNvbmZpZ3VyZShnZW5lcmF0b3IpIHtcbiAgICAgIGdlbmVyYXRlID0gZ2VuZXJhdG9yO1xuICAgIH0sXG4gICAgZ2VuZXJhdGUoY29tcG9uZW50TmFtZSkge1xuICAgICAgcmV0dXJuIGdlbmVyYXRlKGNvbXBvbmVudE5hbWUpO1xuICAgIH0sXG4gICAgcmVzZXQoKSB7XG4gICAgICBnZW5lcmF0ZSA9IGRlZmF1bHRHZW5lcmF0b3I7XG4gICAgfVxuICB9O1xufTtcbmNvbnN0IENsYXNzTmFtZUdlbmVyYXRvciA9IGNyZWF0ZUNsYXNzTmFtZUdlbmVyYXRvcigpO1xuZXhwb3J0IGRlZmF1bHQgQ2xhc3NOYW1lR2VuZXJhdG9yOyIsImltcG9ydCBDbGFzc05hbWVHZW5lcmF0b3IgZnJvbSAnLi4vQ2xhc3NOYW1lR2VuZXJhdG9yJztcbmV4cG9ydCBjb25zdCBnbG9iYWxTdGF0ZUNsYXNzZXMgPSB7XG4gIGFjdGl2ZTogJ2FjdGl2ZScsXG4gIGNoZWNrZWQ6ICdjaGVja2VkJyxcbiAgY29tcGxldGVkOiAnY29tcGxldGVkJyxcbiAgZGlzYWJsZWQ6ICdkaXNhYmxlZCcsXG4gIGVycm9yOiAnZXJyb3InLFxuICBleHBhbmRlZDogJ2V4cGFuZGVkJyxcbiAgZm9jdXNlZDogJ2ZvY3VzZWQnLFxuICBmb2N1c1Zpc2libGU6ICdmb2N1c1Zpc2libGUnLFxuICBvcGVuOiAnb3BlbicsXG4gIHJlYWRPbmx5OiAncmVhZE9ubHknLFxuICByZXF1aXJlZDogJ3JlcXVpcmVkJyxcbiAgc2VsZWN0ZWQ6ICdzZWxlY3RlZCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5lcmF0ZVV0aWxpdHlDbGFzcyhjb21wb25lbnROYW1lLCBzbG90LCBnbG9iYWxTdGF0ZVByZWZpeCA9ICdNdWknKSB7XG4gIGNvbnN0IGdsb2JhbFN0YXRlQ2xhc3MgPSBnbG9iYWxTdGF0ZUNsYXNzZXNbc2xvdF07XG4gIHJldHVybiBnbG9iYWxTdGF0ZUNsYXNzID8gYCR7Z2xvYmFsU3RhdGVQcmVmaXh9LSR7Z2xvYmFsU3RhdGVDbGFzc31gIDogYCR7Q2xhc3NOYW1lR2VuZXJhdG9yLmdlbmVyYXRlKGNvbXBvbmVudE5hbWUpfS0ke3Nsb3R9YDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0dsb2JhbFN0YXRlKHNsb3QpIHtcbiAgcmV0dXJuIGdsb2JhbFN0YXRlQ2xhc3Nlc1tzbG90XSAhPT0gdW5kZWZpbmVkO1xufSIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKGNvbXBvbmVudE5hbWUsIHNsb3RzLCBnbG9iYWxTdGF0ZVByZWZpeCA9ICdNdWknKSB7XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBzbG90cy5mb3JFYWNoKHNsb3QgPT4ge1xuICAgIHJlc3VsdFtzbG90XSA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzKGNvbXBvbmVudE5hbWUsIHNsb3QsIGdsb2JhbFN0YXRlUHJlZml4KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXBlclV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpUGFwZXInLCBzbG90KTtcbn1cbmNvbnN0IHBhcGVyQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVBhcGVyJywgWydyb290JywgJ3JvdW5kZWQnLCAnb3V0bGluZWQnLCAnZWxldmF0aW9uJywgJ2VsZXZhdGlvbjAnLCAnZWxldmF0aW9uMScsICdlbGV2YXRpb24yJywgJ2VsZXZhdGlvbjMnLCAnZWxldmF0aW9uNCcsICdlbGV2YXRpb241JywgJ2VsZXZhdGlvbjYnLCAnZWxldmF0aW9uNycsICdlbGV2YXRpb244JywgJ2VsZXZhdGlvbjknLCAnZWxldmF0aW9uMTAnLCAnZWxldmF0aW9uMTEnLCAnZWxldmF0aW9uMTInLCAnZWxldmF0aW9uMTMnLCAnZWxldmF0aW9uMTQnLCAnZWxldmF0aW9uMTUnLCAnZWxldmF0aW9uMTYnLCAnZWxldmF0aW9uMTcnLCAnZWxldmF0aW9uMTgnLCAnZWxldmF0aW9uMTknLCAnZWxldmF0aW9uMjAnLCAnZWxldmF0aW9uMjEnLCAnZWxldmF0aW9uMjInLCAnZWxldmF0aW9uMjMnLCAnZWxldmF0aW9uMjQnXSk7XG5leHBvcnQgZGVmYXVsdCBwYXBlckNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZWxldmF0aW9uXCIsIFwic3F1YXJlXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzLCBpbnRlZ2VyUHJvcFR5cGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCBnZXRPdmVybGF5QWxwaGEgZnJvbSAnLi4vc3R5bGVzL2dldE92ZXJsYXlBbHBoYSc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCB7IGdldFBhcGVyVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9wYXBlckNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBzcXVhcmUsXG4gICAgZWxldmF0aW9uLFxuICAgIHZhcmlhbnQsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgdmFyaWFudCwgIXNxdWFyZSAmJiAncm91bmRlZCcsIHZhcmlhbnQgPT09ICdlbGV2YXRpb24nICYmIGBlbGV2YXRpb24ke2VsZXZhdGlvbn1gXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFBhcGVyVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBQYXBlclJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aVBhcGVyJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdLCAhb3duZXJTdGF0ZS5zcXVhcmUgJiYgc3R5bGVzLnJvdW5kZWQsIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2VsZXZhdGlvbicgJiYgc3R5bGVzW2BlbGV2YXRpb24ke293bmVyU3RhdGUuZWxldmF0aW9ufWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSR2YXJzJG92ZXJsYXlzO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlcixcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5wcmltYXJ5LFxuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYm94LXNoYWRvdycpXG4gIH0sICFvd25lclN0YXRlLnNxdWFyZSAmJiB7XG4gICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXNcbiAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIHtcbiAgICBib3JkZXI6IGAxcHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5kaXZpZGVyfWBcbiAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZWxldmF0aW9uJyAmJiBfZXh0ZW5kcyh7XG4gICAgYm94U2hhZG93OiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhZG93c1tvd25lclN0YXRlLmVsZXZhdGlvbl1cbiAgfSwgIXRoZW1lLnZhcnMgJiYgdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnZGFyaycgJiYge1xuICAgIGJhY2tncm91bmRJbWFnZTogYGxpbmVhci1ncmFkaWVudCgke2FscGhhKCcjZmZmJywgZ2V0T3ZlcmxheUFscGhhKG93bmVyU3RhdGUuZWxldmF0aW9uKSl9LCAke2FscGhhKCcjZmZmJywgZ2V0T3ZlcmxheUFscGhhKG93bmVyU3RhdGUuZWxldmF0aW9uKSl9KWBcbiAgfSwgdGhlbWUudmFycyAmJiB7XG4gICAgYmFja2dyb3VuZEltYWdlOiAoX3RoZW1lJHZhcnMkb3ZlcmxheXMgPSB0aGVtZS52YXJzLm92ZXJsYXlzKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHZhcnMkb3ZlcmxheXNbb3duZXJTdGF0ZS5lbGV2YXRpb25dXG4gIH0pKTtcbn0pO1xuY29uc3QgUGFwZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQYXBlcihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpUGFwZXInXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQgPSAnZGl2JyxcbiAgICAgIGVsZXZhdGlvbiA9IDEsXG4gICAgICBzcXVhcmUgPSBmYWxzZSxcbiAgICAgIHZhcmlhbnQgPSAnZWxldmF0aW9uJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50LFxuICAgIGVsZXZhdGlvbixcbiAgICBzcXVhcmUsXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgICBpZiAodGhlbWUuc2hhZG93c1tlbGV2YXRpb25dID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBlbGV2YXRpb24gcHJvdmlkZWQgPFBhcGVyIGVsZXZhdGlvbj17JHtlbGV2YXRpb259fT4gaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgdGhlbWUuYCwgYFBsZWFzZSBtYWtlIHN1cmUgdGhhdCBcXGB0aGVtZS5zaGFkb3dzWyR7ZWxldmF0aW9ufV1cXGAgaXMgZGVmaW5lZC5gXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChQYXBlclJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQYXBlci5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogU2hhZG93IGRlcHRoLCBjb3JyZXNwb25kcyB0byBgZHBgIGluIHRoZSBzcGVjLlxuICAgKiBJdCBhY2NlcHRzIHZhbHVlcyBiZXR3ZWVuIDAgYW5kIDI0IGluY2x1c2l2ZS5cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgZWxldmF0aW9uOiBjaGFpblByb3BUeXBlcyhpbnRlZ2VyUHJvcFR5cGUsIHByb3BzID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBlbGV2YXRpb24sXG4gICAgICB2YXJpYW50XG4gICAgfSA9IHByb3BzO1xuICAgIGlmIChlbGV2YXRpb24gPiAwICYmIHZhcmlhbnQgPT09ICdvdXRsaW5lZCcpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoYE1VSTogQ29tYmluaW5nIFxcYGVsZXZhdGlvbj17JHtlbGV2YXRpb259fVxcYCB3aXRoIFxcYHZhcmlhbnQ9XCIke3ZhcmlhbnR9XCJcXGAgaGFzIG5vIGVmZmVjdC4gRWl0aGVyIHVzZSBcXGBlbGV2YXRpb249ezB9XFxgIG9yIHVzZSBhIGRpZmZlcmVudCBcXGB2YXJpYW50XFxgLmApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHJvdW5kZWQgY29ybmVycyBhcmUgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBzcXVhcmU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBAZGVmYXVsdCAnZWxldmF0aW9uJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydlbGV2YXRpb24nLCAnb3V0bGluZWQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFBhcGVyOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHNldFJlZiBmcm9tICcuLi9zZXRSZWYnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRm9ya1JlZiguLi5yZWZzKSB7XG4gIC8qKlxuICAgKiBUaGlzIHdpbGwgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIGlmIHRoZSByZWZzIHBhc3NlZCB0byB0aGlzIGhvb2sgY2hhbmdlIGFuZCBhcmUgYWxsIGRlZmluZWQuXG4gICAqIFRoaXMgbWVhbnMgcmVhY3Qgd2lsbCBjYWxsIHRoZSBvbGQgZm9ya1JlZiB3aXRoIGBudWxsYCBhbmQgdGhlIG5ldyBmb3JrUmVmXG4gICAqIHdpdGggdGhlIHJlZi4gQ2xlYW51cCBuYXR1cmFsbHkgZW1lcmdlcyBmcm9tIHRoaXMgYmVoYXZpb3IuXG4gICAqL1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKHJlZnMuZXZlcnkocmVmID0+IHJlZiA9PSBudWxsKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBpbnN0YW5jZSA9PiB7XG4gICAgICByZWZzLmZvckVhY2gocmVmID0+IHtcbiAgICAgICAgc2V0UmVmKHJlZiwgaW5zdGFuY2UpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIHJlZnMpO1xufSIsIi8qKlxuICogVE9ETyB2NTogY29uc2lkZXIgbWFraW5nIGl0IHByaXZhdGVcbiAqXG4gKiBwYXNzZXMge3ZhbHVlfSB0byB7cmVmfVxuICpcbiAqIFdBUk5JTkc6IEJlIHN1cmUgdG8gb25seSBjYWxsIHRoaXMgaW5zaWRlIGEgY2FsbGJhY2sgdGhhdCBpcyBwYXNzZWQgYXMgYSByZWYuXG4gKiBPdGhlcndpc2UsIG1ha2Ugc3VyZSB0byBjbGVhbnVwIHRoZSBwcmV2aW91cyB7cmVmfSBpZiBpdCBjaGFuZ2VzLiBTZWVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbWF0ZXJpYWwtdWkvaXNzdWVzLzEzNTM5XG4gKlxuICogVXNlZnVsIGlmIHlvdSB3YW50IHRvIGV4cG9zZSB0aGUgcmVmIG9mIGFuIGlubmVyIGNvbXBvbmVudCB0byB0aGUgcHVibGljIEFQSVxuICogd2hpbGUgc3RpbGwgdXNpbmcgaXQgaW5zaWRlIHRoZSBjb21wb25lbnQuXG4gKiBAcGFyYW0gcmVmIEEgcmVmIGNhbGxiYWNrIG9yIHJlZiBvYmplY3QuIElmIGFueXRoaW5nIGZhbHN5LCB0aGlzIGlzIGEgbm8tb3AuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFJlZihyZWYsIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVmKHZhbHVlKTtcbiAgfSBlbHNlIGlmIChyZWYpIHtcbiAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICB9XG59IiwiaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vb3duZXJEb2N1bWVudCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvd25lcldpbmRvdyhub2RlKSB7XG4gIGNvbnN0IGRvYyA9IG93bmVyRG9jdW1lbnQobm9kZSk7XG4gIHJldHVybiBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG93bmVyRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogQSB2ZXJzaW9uIG9mIGBSZWFjdC51c2VMYXlvdXRFZmZlY3RgIHRoYXQgZG9lcyBub3Qgc2hvdyBhIHdhcm5pbmcgd2hlbiBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gKiBUaGlzIGlzIHVzZWZ1bCBmb3IgZWZmZWN0cyB0aGF0IGFyZSBvbmx5IG5lZWRlZCBmb3IgY2xpZW50LXNpZGUgcmVuZGVyaW5nIGJ1dCBub3QgZm9yIFNTUi5cbiAqXG4gKiBCZWZvcmUgeW91IHVzZSB0aGlzIGhvb2ssIG1ha2Ugc3VyZSB0byByZWFkIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2dhZWFyb24vZTdkOTdjZGYzOGEyOTA3OTI0ZWExMmU0ZWJkZjNjODVcbiAqIGFuZCBjb25maXJtIGl0IGRvZXNuJ3QgYXBwbHkgdG8geW91ciB1c2UtY2FzZS5cbiAqL1xuY29uc3QgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbmV4cG9ydCBkZWZhdWx0IHVzZUVuaGFuY2VkRWZmZWN0OyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIm9uQ2hhbmdlXCIsIFwibWF4Um93c1wiLCBcIm1pblJvd3NcIiwgXCJzdHlsZVwiLCBcInZhbHVlXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyB1bnN0YWJsZV9kZWJvdW5jZSBhcyBkZWJvdW5jZSwgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmLCB1bnN0YWJsZV91c2VFbmhhbmNlZEVmZmVjdCBhcyB1c2VFbmhhbmNlZEVmZmVjdCwgdW5zdGFibGVfb3duZXJXaW5kb3cgYXMgb3duZXJXaW5kb3cgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5mdW5jdGlvbiBnZXRTdHlsZVZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApIHx8IDA7XG59XG5jb25zdCBzdHlsZXMgPSB7XG4gIHNoYWRvdzoge1xuICAgIC8vIFZpc2liaWxpdHkgbmVlZGVkIHRvIGhpZGUgdGhlIGV4dHJhIHRleHQgYXJlYSBvbiBpUGFkc1xuICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICAgIC8vIFJlbW92ZSBmcm9tIHRoZSBjb250ZW50IGZsb3dcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAvLyBJZ25vcmUgdGhlIHNjcm9sbGJhciB3aWR0aFxuICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICBoZWlnaHQ6IDAsXG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgLy8gQ3JlYXRlIGEgbmV3IGxheWVyLCBpbmNyZWFzZSB0aGUgaXNvbGF0aW9uIG9mIHRoZSBjb21wdXRlZCB2YWx1ZXNcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVaKDApJ1xuICB9XG59O1xuZnVuY3Rpb24gaXNFbXB0eShvYmopIHtcbiAgcmV0dXJuIG9iaiA9PT0gdW5kZWZpbmVkIHx8IG9iaiA9PT0gbnVsbCB8fCBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMCB8fCBvYmoub3V0ZXJIZWlnaHRTdHlsZSA9PT0gMCAmJiAhb2JqLm92ZXJmbG93O1xufVxuXG4vKipcbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtUZXh0YXJlYSBBdXRvc2l6ZV0oaHR0cHM6Ly9tdWkuY29tL2Jhc2UtdWkvcmVhY3QtdGV4dGFyZWEtYXV0b3NpemUvKVxuICogLSBbVGV4dGFyZWEgQXV0b3NpemVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9yZWFjdC10ZXh0YXJlYS1hdXRvc2l6ZS8pXG4gKlxuICogQVBJOlxuICpcbiAqIC0gW1RleHRhcmVhQXV0b3NpemUgQVBJXShodHRwczovL211aS5jb20vYmFzZS11aS9yZWFjdC10ZXh0YXJlYS1hdXRvc2l6ZS9jb21wb25lbnRzLWFwaS8jdGV4dGFyZWEtYXV0b3NpemUpXG4gKi9cbmNvbnN0IFRleHRhcmVhQXV0b3NpemUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUZXh0YXJlYUF1dG9zaXplKHByb3BzLCBmb3J3YXJkZWRSZWYpIHtcbiAgY29uc3Qge1xuICAgICAgb25DaGFuZ2UsXG4gICAgICBtYXhSb3dzLFxuICAgICAgbWluUm93cyA9IDEsXG4gICAgICBzdHlsZSxcbiAgICAgIHZhbHVlXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHtcbiAgICBjdXJyZW50OiBpc0NvbnRyb2xsZWRcbiAgfSA9IFJlYWN0LnVzZVJlZih2YWx1ZSAhPSBudWxsKTtcbiAgY29uc3QgaW5wdXRSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoZm9yd2FyZGVkUmVmLCBpbnB1dFJlZik7XG4gIGNvbnN0IHNoYWRvd1JlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgcmVuZGVycyA9IFJlYWN0LnVzZVJlZigwKTtcbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgb3V0ZXJIZWlnaHRTdHlsZTogMFxuICB9KTtcbiAgY29uc3QgZ2V0VXBkYXRlZFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnN0IGlucHV0ID0gaW5wdXRSZWYuY3VycmVudDtcbiAgICBjb25zdCBjb250YWluZXJXaW5kb3cgPSBvd25lcldpbmRvdyhpbnB1dCk7XG4gICAgY29uc3QgY29tcHV0ZWRTdHlsZSA9IGNvbnRhaW5lcldpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGlucHV0KTtcblxuICAgIC8vIElmIGlucHV0J3Mgd2lkdGggaXMgc2hydW5rIGFuZCBpdCdzIG5vdCB2aXNpYmxlLCBkb24ndCBzeW5jIGhlaWdodC5cbiAgICBpZiAoY29tcHV0ZWRTdHlsZS53aWR0aCA9PT0gJzBweCcpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG91dGVySGVpZ2h0U3R5bGU6IDBcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGlucHV0U2hhbGxvdyA9IHNoYWRvd1JlZi5jdXJyZW50O1xuICAgIGlucHV0U2hhbGxvdy5zdHlsZS53aWR0aCA9IGNvbXB1dGVkU3R5bGUud2lkdGg7XG4gICAgaW5wdXRTaGFsbG93LnZhbHVlID0gaW5wdXQudmFsdWUgfHwgcHJvcHMucGxhY2Vob2xkZXIgfHwgJ3gnO1xuICAgIGlmIChpbnB1dFNoYWxsb3cudmFsdWUuc2xpY2UoLTEpID09PSAnXFxuJykge1xuICAgICAgLy8gQ2VydGFpbiBmb250cyB3aGljaCBvdmVyZmxvdyB0aGUgbGluZSBoZWlnaHQgd2lsbCBjYXVzZSB0aGUgdGV4dGFyZWFcbiAgICAgIC8vIHRvIHJlcG9ydCBhIGRpZmZlcmVudCBzY3JvbGxIZWlnaHQgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIGxhc3QgbGluZVxuICAgICAgLy8gaXMgZW1wdHkuIE1ha2UgaXQgbm9uLWVtcHR5IHRvIGF2b2lkIHRoaXMgaXNzdWUuXG4gICAgICBpbnB1dFNoYWxsb3cudmFsdWUgKz0gJyAnO1xuICAgIH1cbiAgICBjb25zdCBib3hTaXppbmcgPSBjb21wdXRlZFN0eWxlLmJveFNpemluZztcbiAgICBjb25zdCBwYWRkaW5nID0gZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLnBhZGRpbmdCb3R0b20pICsgZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLnBhZGRpbmdUb3ApO1xuICAgIGNvbnN0IGJvcmRlciA9IGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZS5ib3JkZXJCb3R0b21XaWR0aCkgKyBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUuYm9yZGVyVG9wV2lkdGgpO1xuXG4gICAgLy8gVGhlIGhlaWdodCBvZiB0aGUgaW5uZXIgY29udGVudFxuICAgIGNvbnN0IGlubmVySGVpZ2h0ID0gaW5wdXRTaGFsbG93LnNjcm9sbEhlaWdodDtcblxuICAgIC8vIE1lYXN1cmUgaGVpZ2h0IG9mIGEgdGV4dGFyZWEgd2l0aCBhIHNpbmdsZSByb3dcbiAgICBpbnB1dFNoYWxsb3cudmFsdWUgPSAneCc7XG4gICAgY29uc3Qgc2luZ2xlUm93SGVpZ2h0ID0gaW5wdXRTaGFsbG93LnNjcm9sbEhlaWdodDtcblxuICAgIC8vIFRoZSBoZWlnaHQgb2YgdGhlIG91dGVyIGNvbnRlbnRcbiAgICBsZXQgb3V0ZXJIZWlnaHQgPSBpbm5lckhlaWdodDtcbiAgICBpZiAobWluUm93cykge1xuICAgICAgb3V0ZXJIZWlnaHQgPSBNYXRoLm1heChOdW1iZXIobWluUm93cykgKiBzaW5nbGVSb3dIZWlnaHQsIG91dGVySGVpZ2h0KTtcbiAgICB9XG4gICAgaWYgKG1heFJvd3MpIHtcbiAgICAgIG91dGVySGVpZ2h0ID0gTWF0aC5taW4oTnVtYmVyKG1heFJvd3MpICogc2luZ2xlUm93SGVpZ2h0LCBvdXRlckhlaWdodCk7XG4gICAgfVxuICAgIG91dGVySGVpZ2h0ID0gTWF0aC5tYXgob3V0ZXJIZWlnaHQsIHNpbmdsZVJvd0hlaWdodCk7XG5cbiAgICAvLyBUYWtlIHRoZSBib3ggc2l6aW5nIGludG8gYWNjb3VudCBmb3IgYXBwbHlpbmcgdGhpcyB2YWx1ZSBhcyBhIHN0eWxlLlxuICAgIGNvbnN0IG91dGVySGVpZ2h0U3R5bGUgPSBvdXRlckhlaWdodCArIChib3hTaXppbmcgPT09ICdib3JkZXItYm94JyA/IHBhZGRpbmcgKyBib3JkZXIgOiAwKTtcbiAgICBjb25zdCBvdmVyZmxvdyA9IE1hdGguYWJzKG91dGVySGVpZ2h0IC0gaW5uZXJIZWlnaHQpIDw9IDE7XG4gICAgcmV0dXJuIHtcbiAgICAgIG91dGVySGVpZ2h0U3R5bGUsXG4gICAgICBvdmVyZmxvd1xuICAgIH07XG4gIH0sIFttYXhSb3dzLCBtaW5Sb3dzLCBwcm9wcy5wbGFjZWhvbGRlcl0pO1xuICBjb25zdCB1cGRhdGVTdGF0ZSA9IChwcmV2U3RhdGUsIG5ld1N0YXRlKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3V0ZXJIZWlnaHRTdHlsZSxcbiAgICAgIG92ZXJmbG93XG4gICAgfSA9IG5ld1N0YXRlO1xuICAgIC8vIE5lZWQgYSBsYXJnZSBlbm91Z2ggZGlmZmVyZW5jZSB0byB1cGRhdGUgdGhlIGhlaWdodC5cbiAgICAvLyBUaGlzIHByZXZlbnRzIGluZmluaXRlIHJlbmRlcmluZyBsb29wLlxuICAgIGlmIChyZW5kZXJzLmN1cnJlbnQgPCAyMCAmJiAob3V0ZXJIZWlnaHRTdHlsZSA+IDAgJiYgTWF0aC5hYnMoKHByZXZTdGF0ZS5vdXRlckhlaWdodFN0eWxlIHx8IDApIC0gb3V0ZXJIZWlnaHRTdHlsZSkgPiAxIHx8IHByZXZTdGF0ZS5vdmVyZmxvdyAhPT0gb3ZlcmZsb3cpKSB7XG4gICAgICByZW5kZXJzLmN1cnJlbnQgKz0gMTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG92ZXJmbG93LFxuICAgICAgICBvdXRlckhlaWdodFN0eWxlXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHJlbmRlcnMuY3VycmVudCA9PT0gMjApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogVG9vIG1hbnkgcmUtcmVuZGVycy4gVGhlIGxheW91dCBpcyB1bnN0YWJsZS4nLCAnVGV4dGFyZWFBdXRvc2l6ZSBsaW1pdHMgdGhlIG51bWJlciBvZiByZW5kZXJzIHRvIHByZXZlbnQgYW4gaW5maW5pdGUgbG9vcC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcmV2U3RhdGU7XG4gIH07XG4gIGNvbnN0IHN5bmNIZWlnaHQgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgbmV3U3RhdGUgPSBnZXRVcGRhdGVkU3RhdGUoKTtcbiAgICBpZiAoaXNFbXB0eShuZXdTdGF0ZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2V0U3RhdGUocHJldlN0YXRlID0+IHVwZGF0ZVN0YXRlKHByZXZTdGF0ZSwgbmV3U3RhdGUpKTtcbiAgfSwgW2dldFVwZGF0ZWRTdGF0ZV0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qgc3luY0hlaWdodFdpdGhGbHVzaFN5bmMgPSAoKSA9PiB7XG4gICAgICBjb25zdCBuZXdTdGF0ZSA9IGdldFVwZGF0ZWRTdGF0ZSgpO1xuICAgICAgaWYgKGlzRW1wdHkobmV3U3RhdGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gSW4gUmVhY3QgMTgsIHN0YXRlIHVwZGF0ZXMgaW4gYSBSZXNpemVPYnNlcnZlcidzIGNhbGxiYWNrIGFyZSBoYXBwZW5pbmcgYWZ0ZXJcbiAgICAgIC8vIHRoZSBwYWludCwgdGhpcyBsZWFkcyB0byBhbiBpbmZpbml0ZSByZW5kZXJpbmcuXG4gICAgICAvL1xuICAgICAgLy8gVXNpbmcgZmx1c2hTeW5jIGVuc3VyZXMgdGhhdCB0aGUgc3RhdGVzIGlzIHVwZGF0ZWQgYmVmb3JlIHRoZSBuZXh0IHBhaW4uXG4gICAgICAvLyBSZWxhdGVkIGlzc3VlIC0gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8yNDMzMVxuICAgICAgUmVhY3RET00uZmx1c2hTeW5jKCgpID0+IHtcbiAgICAgICAgc2V0U3RhdGUocHJldlN0YXRlID0+IHVwZGF0ZVN0YXRlKHByZXZTdGF0ZSwgbmV3U3RhdGUpKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlUmVzaXplID0gKCkgPT4ge1xuICAgICAgcmVuZGVycy5jdXJyZW50ID0gMDtcbiAgICAgIHN5bmNIZWlnaHRXaXRoRmx1c2hTeW5jKCk7XG4gICAgfTtcbiAgICAvLyBXb3JrYXJvdW5kIGEgXCJSZXNpemVPYnNlcnZlciBsb29wIGNvbXBsZXRlZCB3aXRoIHVuZGVsaXZlcmVkIG5vdGlmaWNhdGlvbnNcIiBlcnJvclxuICAgIC8vIGluIHRlc3QuXG4gICAgLy8gTm90ZSB0aGF0IHdlIG1pZ2h0IG5lZWQgdG8gdXNlIHRoaXMgbG9naWMgaW4gcHJvZHVjdGlvbiBwZXIgaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvcmVzaXplLW9ic2VydmVyL2lzc3Vlcy8zOFxuICAgIC8vIEFsc28gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbXVpLXgvaXNzdWVzLzg3MzNcbiAgICBsZXQgckFGO1xuICAgIGNvbnN0IHJBRkhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHJBRik7XG4gICAgICByQUYgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBoYW5kbGVSZXNpemUoKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgZGVib3VuY2VIYW5kbGVSZXNpemUgPSBkZWJvdW5jZShoYW5kbGVSZXNpemUpO1xuICAgIGNvbnN0IGlucHV0ID0gaW5wdXRSZWYuY3VycmVudDtcbiAgICBjb25zdCBjb250YWluZXJXaW5kb3cgPSBvd25lcldpbmRvdyhpbnB1dCk7XG4gICAgY29udGFpbmVyV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGRlYm91bmNlSGFuZGxlUmVzaXplKTtcbiAgICBsZXQgcmVzaXplT2JzZXJ2ZXI7XG4gICAgaWYgKHR5cGVvZiBSZXNpemVPYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCcgPyByQUZIYW5kbGVSZXNpemUgOiBoYW5kbGVSZXNpemUpO1xuICAgICAgcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShpbnB1dCk7XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkZWJvdW5jZUhhbmRsZVJlc2l6ZS5jbGVhcigpO1xuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUockFGKTtcbiAgICAgIGNvbnRhaW5lcldpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBkZWJvdW5jZUhhbmRsZVJlc2l6ZSk7XG4gICAgICBpZiAocmVzaXplT2JzZXJ2ZXIpIHtcbiAgICAgICAgcmVzaXplT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtnZXRVcGRhdGVkU3RhdGVdKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIHN5bmNIZWlnaHQoKTtcbiAgfSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmVuZGVycy5jdXJyZW50ID0gMDtcbiAgfSwgW3ZhbHVlXSk7XG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IGV2ZW50ID0+IHtcbiAgICByZW5kZXJzLmN1cnJlbnQgPSAwO1xuICAgIGlmICghaXNDb250cm9sbGVkKSB7XG4gICAgICBzeW5jSGVpZ2h0KCk7XG4gICAgfVxuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgb25DaGFuZ2UoZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhSZWFjdC5GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3goXCJ0ZXh0YXJlYVwiLCBfZXh0ZW5kcyh7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICAgIC8vIEFwcGx5IHRoZSByb3dzIHByb3AgdG8gZ2V0IGEgXCJjb3JyZWN0XCIgZmlyc3QgU1NSIHBhaW50XG4gICAgICAsXG4gICAgICByb3dzOiBtaW5Sb3dzLFxuICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgaGVpZ2h0OiBzdGF0ZS5vdXRlckhlaWdodFN0eWxlLFxuICAgICAgICAvLyBOZWVkIGEgbGFyZ2UgZW5vdWdoIGRpZmZlcmVuY2UgdG8gYWxsb3cgc2Nyb2xsaW5nLlxuICAgICAgICAvLyBUaGlzIHByZXZlbnRzIGluZmluaXRlIHJlbmRlcmluZyBsb29wLlxuICAgICAgICBvdmVyZmxvdzogc3RhdGUub3ZlcmZsb3cgPyAnaGlkZGVuJyA6IHVuZGVmaW5lZFxuICAgICAgfSwgc3R5bGUpXG4gICAgfSwgb3RoZXIpKSwgLyojX19QVVJFX18qL19qc3goXCJ0ZXh0YXJlYVwiLCB7XG4gICAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgICBjbGFzc05hbWU6IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgcmVmOiBzaGFkb3dSZWYsXG4gICAgICB0YWJJbmRleDogLTEsXG4gICAgICBzdHlsZTogX2V4dGVuZHMoe30sIHN0eWxlcy5zaGFkb3csIHN0eWxlLCB7XG4gICAgICAgIHBhZGRpbmdUb3A6IDAsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDBcbiAgICAgIH0pXG4gICAgfSldXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUZXh0YXJlYUF1dG9zaXplLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheS5cbiAgICovXG4gIG1heFJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheS5cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgbWluUm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IHsgVGV4dGFyZWFBdXRvc2l6ZSB9OyIsIi8vIENvcnJlc3BvbmRzIHRvIDEwIGZyYW1lcyBhdCA2MCBIei5cbi8vIEEgZmV3IGJ5dGVzIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvZGVib3VuY2UgaXMgfjMga0IgYW5kIGRlYm91bmNlIH4zMDAgQi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQgPSAxNjYpIHtcbiAgbGV0IHRpbWVvdXQ7XG4gIGZ1bmN0aW9uIGRlYm91bmNlZCguLi5hcmdzKSB7XG4gICAgY29uc3QgbGF0ZXIgPSAoKSA9PiB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgfVxuICBkZWJvdW5jZWQuY2xlYXIgPSAoKSA9PiB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICB9O1xuICByZXR1cm4gZGVib3VuY2VkO1xufSIsIi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhIGdpdmVuIGVsZW1lbnQgaXMgYSBET00gZWxlbWVudCBuYW1lIChpLmUuIG5vdCBhIFJlYWN0IGNvbXBvbmVudCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0hvc3RDb21wb25lbnQoZWxlbWVudCkge1xuICByZXR1cm4gdHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnO1xufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuY29uc3QgRm9ybUNvbnRyb2xDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQodW5kZWZpbmVkKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEZvcm1Db250cm9sQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdGb3JtQ29udHJvbENvbnRleHQnO1xufVxuZXhwb3J0IGRlZmF1bHQgRm9ybUNvbnRyb2xDb250ZXh0OyIsImltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgY2FwaXRhbGl6ZTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCB7IHVuc3RhYmxlX3VzZUZvcmtSZWYgYXMgdXNlRm9ya1JlZiB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdXNlRm9ya1JlZjsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCB7IHVuc3RhYmxlX3VzZUVuaGFuY2VkRWZmZWN0IGFzIHVzZUVuaGFuY2VkRWZmZWN0IH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCB1c2VFbmhhbmNlZEVmZmVjdDsiLCJpbXBvcnQgeyBoIGFzIGhhc093blByb3BlcnR5LCBFIGFzIEVtb3Rpb24sIGMgYXMgY3JlYXRlRW1vdGlvblByb3BzLCB3IGFzIHdpdGhFbW90aW9uQ2FjaGUsIFQgYXMgVGhlbWVDb250ZXh0LCBpIGFzIGlzQnJvd3NlciQxIH0gZnJvbSAnLi9lbW90aW9uLWVsZW1lbnQtYzM5NjE3ZDguYnJvd3Nlci5lc20uanMnO1xuZXhwb3J0IHsgQyBhcyBDYWNoZVByb3ZpZGVyLCBUIGFzIFRoZW1lQ29udGV4dCwgYSBhcyBUaGVtZVByb3ZpZGVyLCBfIGFzIF9fdW5zYWZlX3VzZUVtb3Rpb25DYWNoZSwgdSBhcyB1c2VUaGVtZSwgdyBhcyB3aXRoRW1vdGlvbkNhY2hlLCBiIGFzIHdpdGhUaGVtZSB9IGZyb20gJy4vZW1vdGlvbi1lbGVtZW50LWMzOTYxN2Q4LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGluc2VydFN0eWxlcywgcmVnaXN0ZXJTdHlsZXMsIGdldFJlZ2lzdGVyZWRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgeyB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2ssIHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2sgfSBmcm9tICdAZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcyc7XG5pbXBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuaW1wb3J0ICdAZW1vdGlvbi9jYWNoZSc7XG5pbXBvcnQgJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgJ0BlbW90aW9uL3dlYWstbWVtb2l6ZSc7XG5pbXBvcnQgJy4uL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcblxudmFyIHBrZyA9IHtcblx0bmFtZTogXCJAZW1vdGlvbi9yZWFjdFwiLFxuXHR2ZXJzaW9uOiBcIjExLjExLjFcIixcblx0bWFpbjogXCJkaXN0L2Vtb3Rpb24tcmVhY3QuY2pzLmpzXCIsXG5cdG1vZHVsZTogXCJkaXN0L2Vtb3Rpb24tcmVhY3QuZXNtLmpzXCIsXG5cdGJyb3dzZXI6IHtcblx0XHRcIi4vZGlzdC9lbW90aW9uLXJlYWN0LmVzbS5qc1wiOiBcIi4vZGlzdC9lbW90aW9uLXJlYWN0LmJyb3dzZXIuZXNtLmpzXCJcblx0fSxcblx0ZXhwb3J0czoge1xuXHRcdFwiLlwiOiB7XG5cdFx0XHRtb2R1bGU6IHtcblx0XHRcdFx0d29ya2VyOiBcIi4vZGlzdC9lbW90aW9uLXJlYWN0Lndvcmtlci5lc20uanNcIixcblx0XHRcdFx0YnJvd3NlcjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5icm93c2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRcImRlZmF1bHRcIjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5lc20uanNcIlxuXHRcdFx0fSxcblx0XHRcdFwiaW1wb3J0XCI6IFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuY2pzLm1qc1wiLFxuXHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuY2pzLmpzXCJcblx0XHR9LFxuXHRcdFwiLi9qc3gtcnVudGltZVwiOiB7XG5cdFx0XHRtb2R1bGU6IHtcblx0XHRcdFx0d29ya2VyOiBcIi4vanN4LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1ydW50aW1lLndvcmtlci5lc20uanNcIixcblx0XHRcdFx0YnJvd3NlcjogXCIuL2pzeC1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtcnVudGltZS5icm93c2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRcImRlZmF1bHRcIjogXCIuL2pzeC1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtcnVudGltZS5lc20uanNcIlxuXHRcdFx0fSxcblx0XHRcdFwiaW1wb3J0XCI6IFwiLi9qc3gtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LXJ1bnRpbWUuY2pzLm1qc1wiLFxuXHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9qc3gtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LXJ1bnRpbWUuY2pzLmpzXCJcblx0XHR9LFxuXHRcdFwiLi9faXNvbGF0ZWQtaG5yc1wiOiB7XG5cdFx0XHRtb2R1bGU6IHtcblx0XHRcdFx0d29ya2VyOiBcIi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLndvcmtlci5lc20uanNcIixcblx0XHRcdFx0YnJvd3NlcjogXCIuL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5icm93c2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRcImRlZmF1bHRcIjogXCIuL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5lc20uanNcIlxuXHRcdFx0fSxcblx0XHRcdFwiaW1wb3J0XCI6IFwiLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMuY2pzLm1qc1wiLFxuXHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMuY2pzLmpzXCJcblx0XHR9LFxuXHRcdFwiLi9qc3gtZGV2LXJ1bnRpbWVcIjoge1xuXHRcdFx0bW9kdWxlOiB7XG5cdFx0XHRcdHdvcmtlcjogXCIuL2pzeC1kZXYtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LWRldi1ydW50aW1lLndvcmtlci5lc20uanNcIixcblx0XHRcdFx0YnJvd3NlcjogXCIuL2pzeC1kZXYtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LWRldi1ydW50aW1lLmJyb3dzZXIuZXNtLmpzXCIsXG5cdFx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vanN4LWRldi1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtZGV2LXJ1bnRpbWUuZXNtLmpzXCJcblx0XHRcdH0sXG5cdFx0XHRcImltcG9ydFwiOiBcIi4vanN4LWRldi1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtZGV2LXJ1bnRpbWUuY2pzLm1qc1wiLFxuXHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9qc3gtZGV2LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1kZXYtcnVudGltZS5janMuanNcIlxuXHRcdH0sXG5cdFx0XCIuL3BhY2thZ2UuanNvblwiOiBcIi4vcGFja2FnZS5qc29uXCIsXG5cdFx0XCIuL3R5cGVzL2Nzcy1wcm9wXCI6IFwiLi90eXBlcy9jc3MtcHJvcC5kLnRzXCIsXG5cdFx0XCIuL21hY3JvXCI6IHtcblx0XHRcdHR5cGVzOiB7XG5cdFx0XHRcdFwiaW1wb3J0XCI6IFwiLi9tYWNyby5kLm10c1wiLFxuXHRcdFx0XHRcImRlZmF1bHRcIjogXCIuL21hY3JvLmQudHNcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vbWFjcm8uanNcIlxuXHRcdH1cblx0fSxcblx0dHlwZXM6IFwidHlwZXMvaW5kZXguZC50c1wiLFxuXHRmaWxlczogW1xuXHRcdFwic3JjXCIsXG5cdFx0XCJkaXN0XCIsXG5cdFx0XCJqc3gtcnVudGltZVwiLFxuXHRcdFwianN4LWRldi1ydW50aW1lXCIsXG5cdFx0XCJfaXNvbGF0ZWQtaG5yc1wiLFxuXHRcdFwidHlwZXMvKi5kLnRzXCIsXG5cdFx0XCJtYWNyby4qXCJcblx0XSxcblx0c2lkZUVmZmVjdHM6IGZhbHNlLFxuXHRhdXRob3I6IFwiRW1vdGlvbiBDb250cmlidXRvcnNcIixcblx0bGljZW5zZTogXCJNSVRcIixcblx0c2NyaXB0czoge1xuXHRcdFwidGVzdDp0eXBlc2NyaXB0XCI6IFwiZHRzbGludCB0eXBlc1wiXG5cdH0sXG5cdGRlcGVuZGVuY2llczoge1xuXHRcdFwiQGJhYmVsL3J1bnRpbWVcIjogXCJeNy4xOC4zXCIsXG5cdFx0XCJAZW1vdGlvbi9iYWJlbC1wbHVnaW5cIjogXCJeMTEuMTEuMFwiLFxuXHRcdFwiQGVtb3Rpb24vY2FjaGVcIjogXCJeMTEuMTEuMFwiLFxuXHRcdFwiQGVtb3Rpb24vc2VyaWFsaXplXCI6IFwiXjEuMS4yXCIsXG5cdFx0XCJAZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrc1wiOiBcIl4xLjAuMVwiLFxuXHRcdFwiQGVtb3Rpb24vdXRpbHNcIjogXCJeMS4yLjFcIixcblx0XHRcIkBlbW90aW9uL3dlYWstbWVtb2l6ZVwiOiBcIl4wLjMuMVwiLFxuXHRcdFwiaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3NcIjogXCJeMy4zLjFcIlxuXHR9LFxuXHRwZWVyRGVwZW5kZW5jaWVzOiB7XG5cdFx0cmVhY3Q6IFwiPj0xNi44LjBcIlxuXHR9LFxuXHRwZWVyRGVwZW5kZW5jaWVzTWV0YToge1xuXHRcdFwiQHR5cGVzL3JlYWN0XCI6IHtcblx0XHRcdG9wdGlvbmFsOiB0cnVlXG5cdFx0fVxuXHR9LFxuXHRkZXZEZXBlbmRlbmNpZXM6IHtcblx0XHRcIkBkZWZpbml0ZWx5dHlwZWQvZHRzbGludFwiOiBcIjAuMC4xMTJcIixcblx0XHRcIkBlbW90aW9uL2Nzc1wiOiBcIjExLjExLjBcIixcblx0XHRcIkBlbW90aW9uL2Nzcy1wcmV0dGlmaWVyXCI6IFwiMS4xLjNcIixcblx0XHRcIkBlbW90aW9uL3NlcnZlclwiOiBcIjExLjExLjBcIixcblx0XHRcIkBlbW90aW9uL3N0eWxlZFwiOiBcIjExLjExLjBcIixcblx0XHRcImh0bWwtdGFnLW5hbWVzXCI6IFwiXjEuMS4yXCIsXG5cdFx0cmVhY3Q6IFwiMTYuMTQuMFwiLFxuXHRcdFwic3ZnLXRhZy1uYW1lc1wiOiBcIl4xLjEuMVwiLFxuXHRcdHR5cGVzY3JpcHQ6IFwiXjQuNS41XCJcblx0fSxcblx0cmVwb3NpdG9yeTogXCJodHRwczovL2dpdGh1Yi5jb20vZW1vdGlvbi1qcy9lbW90aW9uL3RyZWUvbWFpbi9wYWNrYWdlcy9yZWFjdFwiLFxuXHRwdWJsaXNoQ29uZmlnOiB7XG5cdFx0YWNjZXNzOiBcInB1YmxpY1wiXG5cdH0sXG5cdFwidW1kOm1haW5cIjogXCJkaXN0L2Vtb3Rpb24tcmVhY3QudW1kLm1pbi5qc1wiLFxuXHRwcmVjb25zdHJ1Y3Q6IHtcblx0XHRlbnRyeXBvaW50czogW1xuXHRcdFx0XCIuL2luZGV4LmpzXCIsXG5cdFx0XHRcIi4vanN4LXJ1bnRpbWUuanNcIixcblx0XHRcdFwiLi9qc3gtZGV2LXJ1bnRpbWUuanNcIixcblx0XHRcdFwiLi9faXNvbGF0ZWQtaG5ycy5qc1wiXG5cdFx0XSxcblx0XHR1bWROYW1lOiBcImVtb3Rpb25SZWFjdFwiLFxuXHRcdGV4cG9ydHM6IHtcblx0XHRcdGVudkNvbmRpdGlvbnM6IFtcblx0XHRcdFx0XCJicm93c2VyXCIsXG5cdFx0XHRcdFwid29ya2VyXCJcblx0XHRcdF0sXG5cdFx0XHRleHRyYToge1xuXHRcdFx0XHRcIi4vdHlwZXMvY3NzLXByb3BcIjogXCIuL3R5cGVzL2Nzcy1wcm9wLmQudHNcIixcblx0XHRcdFx0XCIuL21hY3JvXCI6IHtcblx0XHRcdFx0XHR0eXBlczoge1xuXHRcdFx0XHRcdFx0XCJpbXBvcnRcIjogXCIuL21hY3JvLmQubXRzXCIsXG5cdFx0XHRcdFx0XHRcImRlZmF1bHRcIjogXCIuL21hY3JvLmQudHNcIlxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9tYWNyby5qc1wiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbnZhciBqc3ggPSBmdW5jdGlvbiBqc3godHlwZSwgcHJvcHMpIHtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgaWYgKHByb3BzID09IG51bGwgfHwgIWhhc093blByb3BlcnR5LmNhbGwocHJvcHMsICdjc3MnKSkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudC5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICB9XG5cbiAgdmFyIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgdmFyIGNyZWF0ZUVsZW1lbnRBcmdBcnJheSA9IG5ldyBBcnJheShhcmdzTGVuZ3RoKTtcbiAgY3JlYXRlRWxlbWVudEFyZ0FycmF5WzBdID0gRW1vdGlvbjtcbiAgY3JlYXRlRWxlbWVudEFyZ0FycmF5WzFdID0gY3JlYXRlRW1vdGlvblByb3BzKHR5cGUsIHByb3BzKTtcblxuICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3NMZW5ndGg7IGkrKykge1xuICAgIGNyZWF0ZUVsZW1lbnRBcmdBcnJheVtpXSA9IGFyZ3NbaV07XG4gIH0gLy8gJEZsb3dGaXhNZVxuXG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQuYXBwbHkobnVsbCwgY3JlYXRlRWxlbWVudEFyZ0FycmF5KTtcbn07XG5cbnZhciB3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgPSBmYWxzZTsgLy8gbWFpbnRhaW4gcGxhY2Ugb3ZlciByZXJlbmRlcnMuXG4vLyBpbml0aWFsIHJlbmRlciBmcm9tIGJyb3dzZXIsIGluc2VydEJlZm9yZSBjb250ZXh0LnNoZWV0LnRhZ3NbMF0gb3IgaWYgYSBzdHlsZSBoYXNuJ3QgYmVlbiBpbnNlcnRlZCB0aGVyZSB5ZXQsIGFwcGVuZENoaWxkXG4vLyBpbml0aWFsIGNsaWVudC1zaWRlIHJlbmRlciBmcm9tIFNTUiwgdXNlIHBsYWNlIG9mIGh5ZHJhdGluZyB0YWdcblxudmFyIEdsb2JhbCA9IC8qICNfX1BVUkVfXyAqL3dpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjYWNoZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhd2FybmVkQWJvdXRDc3NQcm9wRm9yR2xvYmFsICYmICggLy8gY2hlY2sgZm9yIGNsYXNzTmFtZSBhcyB3ZWxsIHNpbmNlIHRoZSB1c2VyIGlzXG4gIC8vIHByb2JhYmx5IHVzaW5nIHRoZSBjdXN0b20gY3JlYXRlRWxlbWVudCB3aGljaFxuICAvLyBtZWFucyBpdCB3aWxsIGJlIHR1cm5lZCBpbnRvIGEgY2xhc3NOYW1lIHByb3BcbiAgLy8gJEZsb3dGaXhNZSBJIGRvbid0IHJlYWxseSB3YW50IHRvIGFkZCBpdCB0byB0aGUgdHlwZSBzaW5jZSBpdCBzaG91bGRuJ3QgYmUgdXNlZFxuICBwcm9wcy5jbGFzc05hbWUgfHwgcHJvcHMuY3NzKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJJdCBsb29rcyBsaWtlIHlvdSdyZSB1c2luZyB0aGUgY3NzIHByb3Agb24gR2xvYmFsLCBkaWQgeW91IG1lYW4gdG8gdXNlIHRoZSBzdHlsZXMgcHJvcCBpbnN0ZWFkP1wiKTtcbiAgICB3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN0eWxlcyA9IHByb3BzLnN0eWxlcztcbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoW3N0eWxlc10sIHVuZGVmaW5lZCwgUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpKTtcblxuICBpZiAoIWlzQnJvd3NlciQxKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgc2VyaWFsaXplZE5hbWVzID0gc2VyaWFsaXplZC5uYW1lO1xuICAgIHZhciBzZXJpYWxpemVkU3R5bGVzID0gc2VyaWFsaXplZC5zdHlsZXM7XG4gICAgdmFyIG5leHQgPSBzZXJpYWxpemVkLm5leHQ7XG5cbiAgICB3aGlsZSAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZXJpYWxpemVkTmFtZXMgKz0gJyAnICsgbmV4dC5uYW1lO1xuICAgICAgc2VyaWFsaXplZFN0eWxlcyArPSBuZXh0LnN0eWxlcztcbiAgICAgIG5leHQgPSBuZXh0Lm5leHQ7XG4gICAgfVxuXG4gICAgdmFyIHNob3VsZENhY2hlID0gY2FjaGUuY29tcGF0ID09PSB0cnVlO1xuICAgIHZhciBydWxlcyA9IGNhY2hlLmluc2VydChcIlwiLCB7XG4gICAgICBuYW1lOiBzZXJpYWxpemVkTmFtZXMsXG4gICAgICBzdHlsZXM6IHNlcmlhbGl6ZWRTdHlsZXNcbiAgICB9LCBjYWNoZS5zaGVldCwgc2hvdWxkQ2FjaGUpO1xuXG4gICAgaWYgKHNob3VsZENhY2hlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiLCAoX3JlZiA9IHt9LCBfcmVmW1wiZGF0YS1lbW90aW9uXCJdID0gY2FjaGUua2V5ICsgXCItZ2xvYmFsIFwiICsgc2VyaWFsaXplZE5hbWVzLCBfcmVmLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID0ge1xuICAgICAgX19odG1sOiBydWxlc1xuICAgIH0sIF9yZWYubm9uY2UgPSBjYWNoZS5zaGVldC5ub25jZSwgX3JlZikpO1xuICB9IC8vIHllcywgaSBrbm93IHRoZXNlIGhvb2tzIGFyZSB1c2VkIGNvbmRpdGlvbmFsbHlcbiAgLy8gYnV0IGl0IGlzIGJhc2VkIG9uIGEgY29uc3RhbnQgdGhhdCB3aWxsIG5ldmVyIGNoYW5nZSBhdCBydW50aW1lXG4gIC8vIGl0J3MgZWZmZWN0aXZlbHkgbGlrZSBoYXZpbmcgdHdvIGltcGxlbWVudGF0aW9ucyBhbmQgc3dpdGNoaW5nIHRoZW0gb3V0XG4gIC8vIHNvIGl0J3Mgbm90IGFjdHVhbGx5IGJyZWFraW5nIGFueXRoaW5nXG5cblxuICB2YXIgc2hlZXRSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgdXNlSW5zZXJ0aW9uRWZmZWN0V2l0aExheW91dEZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIga2V5ID0gY2FjaGUua2V5ICsgXCItZ2xvYmFsXCI7IC8vIHVzZSBjYXNlIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9lbW90aW9uLWpzL2Vtb3Rpb24vaXNzdWVzLzI2NzVcblxuICAgIHZhciBzaGVldCA9IG5ldyBjYWNoZS5zaGVldC5jb25zdHJ1Y3Rvcih7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIG5vbmNlOiBjYWNoZS5zaGVldC5ub25jZSxcbiAgICAgIGNvbnRhaW5lcjogY2FjaGUuc2hlZXQuY29udGFpbmVyLFxuICAgICAgc3BlZWR5OiBjYWNoZS5zaGVldC5pc1NwZWVkeVxuICAgIH0pO1xuICAgIHZhciByZWh5ZHJhdGluZyA9IGZhbHNlOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzdHlsZVtkYXRhLWVtb3Rpb249XFxcIlwiICsga2V5ICsgXCIgXCIgKyBzZXJpYWxpemVkLm5hbWUgKyBcIlxcXCJdXCIpO1xuXG4gICAgaWYgKGNhY2hlLnNoZWV0LnRhZ3MubGVuZ3RoKSB7XG4gICAgICBzaGVldC5iZWZvcmUgPSBjYWNoZS5zaGVldC50YWdzWzBdO1xuICAgIH1cblxuICAgIGlmIChub2RlICE9PSBudWxsKSB7XG4gICAgICByZWh5ZHJhdGluZyA9IHRydWU7IC8vIGNsZWFyIHRoZSBoYXNoIHNvIHRoaXMgbm9kZSB3b24ndCBiZSByZWNvZ25pemFibGUgYXMgcmVoeWRyYXRhYmxlIGJ5IG90aGVyIDxHbG9iYWwvPnNcblxuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicsIGtleSk7XG4gICAgICBzaGVldC5oeWRyYXRlKFtub2RlXSk7XG4gICAgfVxuXG4gICAgc2hlZXRSZWYuY3VycmVudCA9IFtzaGVldCwgcmVoeWRyYXRpbmddO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzaGVldC5mbHVzaCgpO1xuICAgIH07XG4gIH0sIFtjYWNoZV0pO1xuICB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBzaGVldFJlZkN1cnJlbnQgPSBzaGVldFJlZi5jdXJyZW50O1xuICAgIHZhciBzaGVldCA9IHNoZWV0UmVmQ3VycmVudFswXSxcbiAgICAgICAgcmVoeWRyYXRpbmcgPSBzaGVldFJlZkN1cnJlbnRbMV07XG5cbiAgICBpZiAocmVoeWRyYXRpbmcpIHtcbiAgICAgIHNoZWV0UmVmQ3VycmVudFsxXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzZXJpYWxpemVkLm5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gaW5zZXJ0IGtleWZyYW1lc1xuICAgICAgaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLm5leHQsIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChzaGVldC50YWdzLmxlbmd0aCkge1xuICAgICAgLy8gaWYgdGhpcyBkb2Vzbid0IGV4aXN0IHRoZW4gaXQgd2lsbCBiZSBudWxsIHNvIHRoZSBzdHlsZSBlbGVtZW50IHdpbGwgYmUgYXBwZW5kZWRcbiAgICAgIHZhciBlbGVtZW50ID0gc2hlZXQudGFnc1tzaGVldC50YWdzLmxlbmd0aCAtIDFdLm5leHRFbGVtZW50U2libGluZztcbiAgICAgIHNoZWV0LmJlZm9yZSA9IGVsZW1lbnQ7XG4gICAgICBzaGVldC5mbHVzaCgpO1xuICAgIH1cblxuICAgIGNhY2hlLmluc2VydChcIlwiLCBzZXJpYWxpemVkLCBzaGVldCwgZmFsc2UpO1xuICB9LCBbY2FjaGUsIHNlcmlhbGl6ZWQubmFtZV0pO1xuICByZXR1cm4gbnVsbDtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBHbG9iYWwuZGlzcGxheU5hbWUgPSAnRW1vdGlvbkdsb2JhbCc7XG59XG5cbmZ1bmN0aW9uIGNzcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBzZXJpYWxpemVTdHlsZXMoYXJncyk7XG59XG5cbnZhciBrZXlmcmFtZXMgPSBmdW5jdGlvbiBrZXlmcmFtZXMoKSB7XG4gIHZhciBpbnNlcnRhYmxlID0gY3NzLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgdmFyIG5hbWUgPSBcImFuaW1hdGlvbi1cIiArIGluc2VydGFibGUubmFtZTsgLy8gJEZsb3dGaXhNZVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBzdHlsZXM6IFwiQGtleWZyYW1lcyBcIiArIG5hbWUgKyBcIntcIiArIGluc2VydGFibGUuc3R5bGVzICsgXCJ9XCIsXG4gICAgYW5pbTogMSxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gXCJfRU1PX1wiICsgdGhpcy5uYW1lICsgXCJfXCIgKyB0aGlzLnN0eWxlcyArIFwiX0VNT19cIjtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgY2xhc3NuYW1lcyA9IGZ1bmN0aW9uIGNsYXNzbmFtZXMoYXJncykge1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIGNscyA9ICcnO1xuXG4gIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgYXJnID0gYXJnc1tpXTtcbiAgICBpZiAoYXJnID09IG51bGwpIGNvbnRpbnVlO1xuICAgIHZhciB0b0FkZCA9IHZvaWQgMDtcblxuICAgIHN3aXRjaCAodHlwZW9mIGFyZykge1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgdG9BZGQgPSBjbGFzc25hbWVzKGFyZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFyZy5zdHlsZXMgIT09IHVuZGVmaW5lZCAmJiBhcmcubmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1lvdSBoYXZlIHBhc3NlZCBzdHlsZXMgY3JlYXRlZCB3aXRoIGBjc3NgIGZyb20gYEBlbW90aW9uL3JlYWN0YCBwYWNrYWdlIHRvIHRoZSBgY3hgLlxcbicgKyAnYGN4YCBpcyBtZWFudCB0byBjb21wb3NlIGNsYXNzIG5hbWVzIChzdHJpbmdzKSBzbyB5b3Ugc2hvdWxkIGNvbnZlcnQgdGhvc2Ugc3R5bGVzIHRvIGEgY2xhc3MgbmFtZSBieSBwYXNzaW5nIHRoZW0gdG8gdGhlIGBjc3NgIHJlY2VpdmVkIGZyb20gPENsYXNzTmFtZXMvPiBjb21wb25lbnQuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRvQWRkID0gJyc7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gYXJnKSB7XG4gICAgICAgICAgICAgIGlmIChhcmdba10gJiYgaykge1xuICAgICAgICAgICAgICAgIHRvQWRkICYmICh0b0FkZCArPSAnICcpO1xuICAgICAgICAgICAgICAgIHRvQWRkICs9IGs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB7XG4gICAgICAgICAgdG9BZGQgPSBhcmc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodG9BZGQpIHtcbiAgICAgIGNscyAmJiAoY2xzICs9ICcgJyk7XG4gICAgICBjbHMgKz0gdG9BZGQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNscztcbn07XG5cbmZ1bmN0aW9uIG1lcmdlKHJlZ2lzdGVyZWQsIGNzcywgY2xhc3NOYW1lKSB7XG4gIHZhciByZWdpc3RlcmVkU3R5bGVzID0gW107XG4gIHZhciByYXdDbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZSk7XG5cbiAgaWYgKHJlZ2lzdGVyZWRTdHlsZXMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICByZXR1cm4gcmF3Q2xhc3NOYW1lICsgY3NzKHJlZ2lzdGVyZWRTdHlsZXMpO1xufVxuXG52YXIgSW5zZXJ0aW9uID0gZnVuY3Rpb24gSW5zZXJ0aW9uKF9yZWYpIHtcbiAgdmFyIGNhY2hlID0gX3JlZi5jYWNoZSxcbiAgICAgIHNlcmlhbGl6ZWRBcnIgPSBfcmVmLnNlcmlhbGl6ZWRBcnI7XG4gIHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2soZnVuY3Rpb24gKCkge1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXJpYWxpemVkQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWRBcnJbaV0sIGZhbHNlKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIENsYXNzTmFtZXMgPSAvKiAjX19QVVJFX18gKi93aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUpIHtcbiAgdmFyIGhhc1JlbmRlcmVkID0gZmFsc2U7XG4gIHZhciBzZXJpYWxpemVkQXJyID0gW107XG5cbiAgdmFyIGNzcyA9IGZ1bmN0aW9uIGNzcygpIHtcbiAgICBpZiAoaGFzUmVuZGVyZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjc3MgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgcmVuZGVyJyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKGFyZ3MsIGNhY2hlLnJlZ2lzdGVyZWQpO1xuICAgIHNlcmlhbGl6ZWRBcnIucHVzaChzZXJpYWxpemVkKTsgLy8gcmVnaXN0cmF0aW9uIGhhcyB0byBoYXBwZW4gaGVyZSBhcyB0aGUgcmVzdWx0IG9mIHRoaXMgbWlnaHQgZ2V0IGNvbnN1bWVkIGJ5IGBjeGBcblxuICAgIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBmYWxzZSk7XG4gICAgcmV0dXJuIGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuICB9O1xuXG4gIHZhciBjeCA9IGZ1bmN0aW9uIGN4KCkge1xuICAgIGlmIChoYXNSZW5kZXJlZCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2N4IGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIHJlbmRlcicpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIHJldHVybiBtZXJnZShjYWNoZS5yZWdpc3RlcmVkLCBjc3MsIGNsYXNzbmFtZXMoYXJncykpO1xuICB9O1xuXG4gIHZhciBjb250ZW50ID0ge1xuICAgIGNzczogY3NzLFxuICAgIGN4OiBjeCxcbiAgICB0aGVtZTogUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpXG4gIH07XG4gIHZhciBlbGUgPSBwcm9wcy5jaGlsZHJlbihjb250ZW50KTtcbiAgaGFzUmVuZGVyZWQgPSB0cnVlO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEluc2VydGlvbiwge1xuICAgIGNhY2hlOiBjYWNoZSxcbiAgICBzZXJpYWxpemVkQXJyOiBzZXJpYWxpemVkQXJyXG4gIH0pLCBlbGUpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIENsYXNzTmFtZXMuZGlzcGxheU5hbWUgPSAnRW1vdGlvbkNsYXNzTmFtZXMnO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaXNCcm93c2VyID0gXCJvYmplY3RcIiAhPT0gJ3VuZGVmaW5lZCc7IC8vICMxNzI3LCAjMjkwNSBmb3Igc29tZSByZWFzb24gSmVzdCBhbmQgVml0ZXN0IGV2YWx1YXRlIG1vZHVsZXMgdHdpY2UgaWYgc29tZSBjb25zdW1pbmcgbW9kdWxlIGdldHMgbW9ja2VkXG5cbiAgdmFyIGlzVGVzdEVudiA9IHR5cGVvZiBqZXN0ICE9PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgdmkgIT09ICd1bmRlZmluZWQnO1xuXG4gIGlmIChpc0Jyb3dzZXIgJiYgIWlzVGVzdEVudikge1xuICAgIC8vIGdsb2JhbFRoaXMgaGFzIHdpZGUgYnJvd3NlciBzdXBwb3J0IC0gaHR0cHM6Ly9jYW5pdXNlLmNvbS8/c2VhcmNoPWdsb2JhbFRoaXMsIE5vZGUuanMgMTIgYW5kIGxhdGVyXG4gICAgdmFyIGdsb2JhbENvbnRleHQgPSAvLyAkRmxvd0lnbm9yZVxuICAgIHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuICAgIDogaXNCcm93c2VyID8gd2luZG93IDogZ2xvYmFsO1xuICAgIHZhciBnbG9iYWxLZXkgPSBcIl9fRU1PVElPTl9SRUFDVF9cIiArIHBrZy52ZXJzaW9uLnNwbGl0KCcuJylbMF0gKyBcIl9fXCI7XG5cbiAgICBpZiAoZ2xvYmFsQ29udGV4dFtnbG9iYWxLZXldKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1lvdSBhcmUgbG9hZGluZyBAZW1vdGlvbi9yZWFjdCB3aGVuIGl0IGlzIGFscmVhZHkgbG9hZGVkLiBSdW5uaW5nICcgKyAnbXVsdGlwbGUgaW5zdGFuY2VzIG1heSBjYXVzZSBwcm9ibGVtcy4gVGhpcyBjYW4gaGFwcGVuIGlmIG11bHRpcGxlICcgKyAndmVyc2lvbnMgYXJlIHVzZWQsIG9yIGlmIG11bHRpcGxlIGJ1aWxkcyBvZiB0aGUgc2FtZSB2ZXJzaW9uIGFyZSAnICsgJ3VzZWQuJyk7XG4gICAgfVxuXG4gICAgZ2xvYmFsQ29udGV4dFtnbG9iYWxLZXldID0gdHJ1ZTtcbiAgfVxufVxuXG5leHBvcnQgeyBDbGFzc05hbWVzLCBHbG9iYWwsIGpzeCBhcyBjcmVhdGVFbGVtZW50LCBjc3MsIGpzeCwga2V5ZnJhbWVzIH07XG4iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZnVuY3Rpb24gaXNFbXB0eShvYmopIHtcbiAgcmV0dXJuIG9iaiA9PT0gdW5kZWZpbmVkIHx8IG9iaiA9PT0gbnVsbCB8fCBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEdsb2JhbFN0eWxlcyhwcm9wcykge1xuICBjb25zdCB7XG4gICAgc3R5bGVzLFxuICAgIGRlZmF1bHRUaGVtZSA9IHt9XG4gIH0gPSBwcm9wcztcbiAgY29uc3QgZ2xvYmFsU3R5bGVzID0gdHlwZW9mIHN0eWxlcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoZW1lSW5wdXQgPT4gc3R5bGVzKGlzRW1wdHkodGhlbWVJbnB1dCkgPyBkZWZhdWx0VGhlbWUgOiB0aGVtZUlucHV0KSA6IHN0eWxlcztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KEdsb2JhbCwge1xuICAgIHN0eWxlczogZ2xvYmFsU3R5bGVzXG4gIH0pO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR2xvYmFsU3R5bGVzLnByb3BUeXBlcyA9IHtcbiAgZGVmYXVsdFRoZW1lOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzdHlsZXM6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheSwgUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKVxufSA6IHZvaWQgMDsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBHbG9iYWxTdHlsZXMgYXMgTXVpR2xvYmFsU3R5bGVzIH0gZnJvbSAnQG11aS9zdHlsZWQtZW5naW5lJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91c2VUaGVtZSc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZnVuY3Rpb24gR2xvYmFsU3R5bGVzKHtcbiAgc3R5bGVzLFxuICB0aGVtZUlkLFxuICBkZWZhdWx0VGhlbWUgPSB7fVxufSkge1xuICBjb25zdCB1cHBlclRoZW1lID0gdXNlVGhlbWUoZGVmYXVsdFRoZW1lKTtcbiAgY29uc3QgZ2xvYmFsU3R5bGVzID0gdHlwZW9mIHN0eWxlcyA9PT0gJ2Z1bmN0aW9uJyA/IHN0eWxlcyh0aGVtZUlkID8gdXBwZXJUaGVtZVt0aGVtZUlkXSB8fCB1cHBlclRoZW1lIDogdXBwZXJUaGVtZSkgOiBzdHlsZXM7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChNdWlHbG9iYWxTdHlsZXMsIHtcbiAgICBzdHlsZXM6IGdsb2JhbFN0eWxlc1xuICB9KTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEdsb2JhbFN0eWxlcy5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIFR5cGVTY3JpcHQgdHlwZXMgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBkZWZhdWx0VGhlbWU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZXM6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5LCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmJvb2xdKSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRoZW1lSWQ6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBHbG9iYWxTdHlsZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBHbG9iYWxTdHlsZXMgYXMgU3lzdGVtR2xvYmFsU3R5bGVzIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuLi9zdHlsZXMvZGVmYXVsdFRoZW1lJztcbmltcG9ydCBUSEVNRV9JRCBmcm9tICcuLi9zdHlsZXMvaWRlbnRpZmllcic7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZnVuY3Rpb24gR2xvYmFsU3R5bGVzKHByb3BzKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChTeXN0ZW1HbG9iYWxTdHlsZXMsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGRlZmF1bHRUaGVtZTogZGVmYXVsdFRoZW1lLFxuICAgIHRoZW1lSWQ6IFRIRU1FX0lEXG4gIH0pKTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEdsb2JhbFN0eWxlcy5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgc3R5bGVzIHlvdSB3YW50IHRvIGFwcGx5IGdsb2JhbGx5LlxuICAgKi9cbiAgc3R5bGVzOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5ib29sXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBHbG9iYWxTdHlsZXM7IiwiLy8gU3VwcG9ydHMgZGV0ZXJtaW5hdGlvbiBvZiBpc0NvbnRyb2xsZWQoKS5cbi8vIENvbnRyb2xsZWQgaW5wdXQgYWNjZXB0cyBpdHMgY3VycmVudCB2YWx1ZSBhcyBhIHByb3AuXG4vL1xuLy8gQHNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL2Zvcm1zLmh0bWwjY29udHJvbGxlZC1jb21wb25lbnRzXG4vLyBAcGFyYW0gdmFsdWVcbi8vIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHN0cmluZyAoaW5jbHVkaW5nICcnKSBvciBudW1iZXIgKGluY2x1ZGluZyB6ZXJvKVxuZXhwb3J0IGZ1bmN0aW9uIGhhc1ZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICEoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAwKTtcbn1cblxuLy8gRGV0ZXJtaW5lIGlmIGZpZWxkIGlzIGVtcHR5IG9yIGZpbGxlZC5cbi8vIFJlc3BvbnNlIGRldGVybWluZXMgaWYgbGFiZWwgaXMgcHJlc2VudGVkIGFib3ZlIGZpZWxkIG9yIGFzIHBsYWNlaG9sZGVyLlxuLy9cbi8vIEBwYXJhbSBvYmpcbi8vIEBwYXJhbSBTU1Jcbi8vIEByZXR1cm5zIHtib29sZWFufSBGYWxzZSB3aGVuIG5vdCBwcmVzZW50IG9yIGVtcHR5IHN0cmluZy5cbi8vICAgICAgICAgICAgICAgICAgICBUcnVlIHdoZW4gYW55IG51bWJlciBvciBzdHJpbmcgd2l0aCBsZW5ndGguXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxsZWQob2JqLCBTU1IgPSBmYWxzZSkge1xuICByZXR1cm4gb2JqICYmIChoYXNWYWx1ZShvYmoudmFsdWUpICYmIG9iai52YWx1ZSAhPT0gJycgfHwgU1NSICYmIGhhc1ZhbHVlKG9iai5kZWZhdWx0VmFsdWUpICYmIG9iai5kZWZhdWx0VmFsdWUgIT09ICcnKTtcbn1cblxuLy8gRGV0ZXJtaW5lIGlmIGFuIElucHV0IGlzIGFkb3JuZWQgb24gc3RhcnQuXG4vLyBJdCdzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGxlZnQgd2l0aCBMVFIuXG4vL1xuLy8gQHBhcmFtIG9ialxuLy8gQHJldHVybnMge2Jvb2xlYW59IEZhbHNlIHdoZW4gbm8gYWRvcm5tZW50cy5cbi8vICAgICAgICAgICAgICAgICAgICBUcnVlIHdoZW4gYWRvcm5lZCBhdCB0aGUgc3RhcnQuXG5leHBvcnQgZnVuY3Rpb24gaXNBZG9ybmVkU3RhcnQob2JqKSB7XG4gIHJldHVybiBvYmouc3RhcnRBZG9ybm1lbnQ7XG59IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnB1dEJhc2VVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUlucHV0QmFzZScsIHNsb3QpO1xufVxuY29uc3QgaW5wdXRCYXNlQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUlucHV0QmFzZScsIFsncm9vdCcsICdmb3JtQ29udHJvbCcsICdmb2N1c2VkJywgJ2Rpc2FibGVkJywgJ2Fkb3JuZWRTdGFydCcsICdhZG9ybmVkRW5kJywgJ2Vycm9yJywgJ3NpemVTbWFsbCcsICdtdWx0aWxpbmUnLCAnY29sb3JTZWNvbmRhcnknLCAnZnVsbFdpZHRoJywgJ2hpZGRlbkxhYmVsJywgJ3JlYWRPbmx5JywgJ2lucHV0JywgJ2lucHV0U2l6ZVNtYWxsJywgJ2lucHV0TXVsdGlsaW5lJywgJ2lucHV0VHlwZVNlYXJjaCcsICdpbnB1dEFkb3JuZWRTdGFydCcsICdpbnB1dEFkb3JuZWRFbmQnLCAnaW5wdXRIaWRkZW5MYWJlbCddKTtcbmV4cG9ydCBkZWZhdWx0IGlucHV0QmFzZUNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgZnJvbSBcIkBtdWkvdXRpbHMvZm9ybWF0TXVpRXJyb3JNZXNzYWdlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIFwiYXV0b0NvbXBsZXRlXCIsIFwiYXV0b0ZvY3VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRzXCIsIFwiY29tcG9uZW50c1Byb3BzXCIsIFwiZGVmYXVsdFZhbHVlXCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlSW5qZWN0aW5nR2xvYmFsU3R5bGVzXCIsIFwiZW5kQWRvcm5tZW50XCIsIFwiZXJyb3JcIiwgXCJmdWxsV2lkdGhcIiwgXCJpZFwiLCBcImlucHV0Q29tcG9uZW50XCIsIFwiaW5wdXRQcm9wc1wiLCBcImlucHV0UmVmXCIsIFwibWFyZ2luXCIsIFwibWF4Um93c1wiLCBcIm1pblJvd3NcIiwgXCJtdWx0aWxpbmVcIiwgXCJuYW1lXCIsIFwib25CbHVyXCIsIFwib25DaGFuZ2VcIiwgXCJvbkNsaWNrXCIsIFwib25Gb2N1c1wiLCBcIm9uS2V5RG93blwiLCBcIm9uS2V5VXBcIiwgXCJwbGFjZWhvbGRlclwiLCBcInJlYWRPbmx5XCIsIFwicmVuZGVyU3VmZml4XCIsIFwicm93c1wiLCBcInNpemVcIiwgXCJzbG90UHJvcHNcIiwgXCJzbG90c1wiLCBcInN0YXJ0QWRvcm5tZW50XCIsIFwidHlwZVwiLCBcInZhbHVlXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgcmVmVHlwZSwgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzLCBpc0hvc3RDb21wb25lbnQsIFRleHRhcmVhQXV0b3NpemUgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgRm9ybUNvbnRyb2xDb250ZXh0IGZyb20gJy4uL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sQ29udGV4dCc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlRW5oYW5jZWRFZmZlY3QgZnJvbSAnLi4vdXRpbHMvdXNlRW5oYW5jZWRFZmZlY3QnO1xuaW1wb3J0IEdsb2JhbFN0eWxlcyBmcm9tICcuLi9HbG9iYWxTdHlsZXMnO1xuaW1wb3J0IHsgaXNGaWxsZWQgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBpbnB1dEJhc2VDbGFzc2VzLCB7IGdldElucHV0QmFzZVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vaW5wdXRCYXNlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGNvbnN0IHJvb3RPdmVycmlkZXNSZXNvbHZlciA9IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvd25lclN0YXRlXG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5mb3JtQ29udHJvbCAmJiBzdHlsZXMuZm9ybUNvbnRyb2wsIG93bmVyU3RhdGUuc3RhcnRBZG9ybm1lbnQgJiYgc3R5bGVzLmFkb3JuZWRTdGFydCwgb3duZXJTdGF0ZS5lbmRBZG9ybm1lbnQgJiYgc3R5bGVzLmFkb3JuZWRFbmQsIG93bmVyU3RhdGUuZXJyb3IgJiYgc3R5bGVzLmVycm9yLCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYgc3R5bGVzLnNpemVTbWFsbCwgb3duZXJTdGF0ZS5tdWx0aWxpbmUgJiYgc3R5bGVzLm11bHRpbGluZSwgb3duZXJTdGF0ZS5jb2xvciAmJiBzdHlsZXNbYGNvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdLCBvd25lclN0YXRlLmZ1bGxXaWR0aCAmJiBzdHlsZXMuZnVsbFdpZHRoLCBvd25lclN0YXRlLmhpZGRlbkxhYmVsICYmIHN0eWxlcy5oaWRkZW5MYWJlbF07XG59O1xuZXhwb3J0IGNvbnN0IGlucHV0T3ZlcnJpZGVzUmVzb2x2ZXIgPSAocHJvcHMsIHN0eWxlcykgPT4ge1xuICBjb25zdCB7XG4gICAgb3duZXJTdGF0ZVxuICB9ID0gcHJvcHM7XG4gIHJldHVybiBbc3R5bGVzLmlucHV0LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYgc3R5bGVzLmlucHV0U2l6ZVNtYWxsLCBvd25lclN0YXRlLm11bHRpbGluZSAmJiBzdHlsZXMuaW5wdXRNdWx0aWxpbmUsIG93bmVyU3RhdGUudHlwZSA9PT0gJ3NlYXJjaCcgJiYgc3R5bGVzLmlucHV0VHlwZVNlYXJjaCwgb3duZXJTdGF0ZS5zdGFydEFkb3JubWVudCAmJiBzdHlsZXMuaW5wdXRBZG9ybmVkU3RhcnQsIG93bmVyU3RhdGUuZW5kQWRvcm5tZW50ICYmIHN0eWxlcy5pbnB1dEFkb3JuZWRFbmQsIG93bmVyU3RhdGUuaGlkZGVuTGFiZWwgJiYgc3R5bGVzLmlucHV0SGlkZGVuTGFiZWxdO1xufTtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGNvbG9yLFxuICAgIGRpc2FibGVkLFxuICAgIGVycm9yLFxuICAgIGVuZEFkb3JubWVudCxcbiAgICBmb2N1c2VkLFxuICAgIGZvcm1Db250cm9sLFxuICAgIGZ1bGxXaWR0aCxcbiAgICBoaWRkZW5MYWJlbCxcbiAgICBtdWx0aWxpbmUsXG4gICAgcmVhZE9ubHksXG4gICAgc2l6ZSxcbiAgICBzdGFydEFkb3JubWVudCxcbiAgICB0eXBlXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGVycm9yICYmICdlcnJvcicsIGZ1bGxXaWR0aCAmJiAnZnVsbFdpZHRoJywgZm9jdXNlZCAmJiAnZm9jdXNlZCcsIGZvcm1Db250cm9sICYmICdmb3JtQ29udHJvbCcsIHNpemUgJiYgc2l6ZSAhPT0gJ21lZGl1bScgJiYgYHNpemUke2NhcGl0YWxpemUoc2l6ZSl9YCwgbXVsdGlsaW5lICYmICdtdWx0aWxpbmUnLCBzdGFydEFkb3JubWVudCAmJiAnYWRvcm5lZFN0YXJ0JywgZW5kQWRvcm5tZW50ICYmICdhZG9ybmVkRW5kJywgaGlkZGVuTGFiZWwgJiYgJ2hpZGRlbkxhYmVsJywgcmVhZE9ubHkgJiYgJ3JlYWRPbmx5J10sXG4gICAgaW5wdXQ6IFsnaW5wdXQnLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCB0eXBlID09PSAnc2VhcmNoJyAmJiAnaW5wdXRUeXBlU2VhcmNoJywgbXVsdGlsaW5lICYmICdpbnB1dE11bHRpbGluZScsIHNpemUgPT09ICdzbWFsbCcgJiYgJ2lucHV0U2l6ZVNtYWxsJywgaGlkZGVuTGFiZWwgJiYgJ2lucHV0SGlkZGVuTGFiZWwnLCBzdGFydEFkb3JubWVudCAmJiAnaW5wdXRBZG9ybmVkU3RhcnQnLCBlbmRBZG9ybm1lbnQgJiYgJ2lucHV0QWRvcm5lZEVuZCcsIHJlYWRPbmx5ICYmICdyZWFkT25seSddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0SW5wdXRCYXNlVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5leHBvcnQgY29uc3QgSW5wdXRCYXNlUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpSW5wdXRCYXNlJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogcm9vdE92ZXJyaWRlc1Jlc29sdmVyXG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTEsIHtcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgbGluZUhlaWdodDogJzEuNDM3NWVtJyxcbiAgLy8gMjNweFxuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgLy8gUHJldmVudCBwYWRkaW5nIGlzc3VlIHdpdGggZnVsbFdpZHRoLlxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgY3Vyc29yOiAndGV4dCcsXG4gIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBbYCYuJHtpbnB1dEJhc2VDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuZGlzYWJsZWQsXG4gICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgfVxufSwgb3duZXJTdGF0ZS5tdWx0aWxpbmUgJiYgX2V4dGVuZHMoe1xuICBwYWRkaW5nOiAnNHB4IDAgNXB4J1xufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgcGFkZGluZ1RvcDogMVxufSksIG93bmVyU3RhdGUuZnVsbFdpZHRoICYmIHtcbiAgd2lkdGg6ICcxMDAlJ1xufSkpO1xuZXhwb3J0IGNvbnN0IElucHV0QmFzZUNvbXBvbmVudCA9IHN0eWxlZCgnaW5wdXQnLCB7XG4gIG5hbWU6ICdNdWlJbnB1dEJhc2UnLFxuICBzbG90OiAnSW5wdXQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogaW5wdXRPdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgbGlnaHQgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCc7XG4gIGNvbnN0IHBsYWNlaG9sZGVyID0gX2V4dGVuZHMoe1xuICAgIGNvbG9yOiAnY3VycmVudENvbG9yJ1xuICB9LCB0aGVtZS52YXJzID8ge1xuICAgIG9wYWNpdHk6IHRoZW1lLnZhcnMub3BhY2l0eS5pbnB1dFBsYWNlaG9sZGVyXG4gIH0gOiB7XG4gICAgb3BhY2l0eTogbGlnaHQgPyAwLjQyIDogMC41XG4gIH0sIHtcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB7XG4gICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgIH0pXG4gIH0pO1xuICBjb25zdCBwbGFjZWhvbGRlckhpZGRlbiA9IHtcbiAgICBvcGFjaXR5OiAnMCAhaW1wb3J0YW50J1xuICB9O1xuICBjb25zdCBwbGFjZWhvbGRlclZpc2libGUgPSB0aGVtZS52YXJzID8ge1xuICAgIG9wYWNpdHk6IHRoZW1lLnZhcnMub3BhY2l0eS5pbnB1dFBsYWNlaG9sZGVyXG4gIH0gOiB7XG4gICAgb3BhY2l0eTogbGlnaHQgPyAwLjQyIDogMC41XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgZm9udDogJ2luaGVyaXQnLFxuICAgIGxldHRlclNwYWNpbmc6ICdpbmhlcml0JyxcbiAgICBjb2xvcjogJ2N1cnJlbnRDb2xvcicsXG4gICAgcGFkZGluZzogJzRweCAwIDVweCcsXG4gICAgYm9yZGVyOiAwLFxuICAgIGJveFNpemluZzogJ2NvbnRlbnQtYm94JyxcbiAgICBiYWNrZ3JvdW5kOiAnbm9uZScsXG4gICAgaGVpZ2h0OiAnMS40Mzc1ZW0nLFxuICAgIC8vIFJlc2V0IDIzcHh0aGUgbmF0aXZlIGlucHV0IGxpbmUtaGVpZ2h0XG4gICAgbWFyZ2luOiAwLFxuICAgIC8vIFJlc2V0IGZvciBTYWZhcmlcbiAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgIC8vIE1ha2UgdGhlIGZsZXggaXRlbSBzaHJpbmsgd2l0aCBGaXJlZm94XG4gICAgbWluV2lkdGg6IDAsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICAvLyBGaXggSUUxMSB3aWR0aCBpc3N1ZVxuICAgIGFuaW1hdGlvbk5hbWU6ICdtdWktYXV0by1maWxsLWNhbmNlbCcsXG4gICAgYW5pbWF0aW9uRHVyYXRpb246ICcxMG1zJyxcbiAgICAnJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICcmOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgLy8gRmlyZWZveCAxOStcbiAgICAnJjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAvLyBJRTExXG4gICAgJyY6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgIC8vIEVkZ2VcbiAgICAnJjpmb2N1cyc6IHtcbiAgICAgIG91dGxpbmU6IDBcbiAgICB9LFxuICAgIC8vIFJlc2V0IEZpcmVmb3ggaW52YWxpZCByZXF1aXJlZCBpbnB1dCBzdHlsZVxuICAgICcmOmludmFsaWQnOiB7XG4gICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgIH0sXG4gICAgJyY6Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24nOiB7XG4gICAgICAvLyBSZW1vdmUgdGhlIHBhZGRpbmcgd2hlbiB0eXBlPXNlYXJjaC5cbiAgICAgIFdlYmtpdEFwcGVhcmFuY2U6ICdub25lJ1xuICAgIH0sXG4gICAgLy8gU2hvdyBhbmQgaGlkZSB0aGUgcGxhY2Vob2xkZXIgbG9naWNcbiAgICBbYGxhYmVsW2RhdGEtc2hyaW5rPWZhbHNlXSArIC4ke2lucHV0QmFzZUNsYXNzZXMuZm9ybUNvbnRyb2x9ICZgXToge1xuICAgICAgJyY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlckhpZGRlbixcbiAgICAgICcmOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAvLyBGaXJlZm94IDE5K1xuICAgICAgJyY6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAvLyBJRTExXG4gICAgICAnJjo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAvLyBFZGdlXG4gICAgICAnJjpmb2N1czo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyVmlzaWJsZSxcbiAgICAgICcmOmZvY3VzOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgLy8gRmlyZWZveCAxOStcbiAgICAgICcmOmZvY3VzOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyVmlzaWJsZSxcbiAgICAgIC8vIElFMTFcbiAgICAgICcmOmZvY3VzOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUgLy8gRWRnZVxuICAgIH0sXG4gICAgW2AmLiR7aW5wdXRCYXNlQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIC8vIFJlc2V0IGlPUyBvcGFjaXR5XG4gICAgICBXZWJraXRUZXh0RmlsbENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LmRpc2FibGVkIC8vIEZpeCBvcGFjaXR5IFNhZmFyaSBidWdcbiAgICB9LFxuICAgICcmOi13ZWJraXQtYXV0b2ZpbGwnOiB7XG4gICAgICBhbmltYXRpb25EdXJhdGlvbjogJzUwMDBzJyxcbiAgICAgIGFuaW1hdGlvbk5hbWU6ICdtdWktYXV0by1maWxsJ1xuICAgIH1cbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgICBwYWRkaW5nVG9wOiAxXG4gIH0sIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIHtcbiAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICByZXNpemU6ICdub25lJyxcbiAgICBwYWRkaW5nOiAwLFxuICAgIHBhZGRpbmdUb3A6IDBcbiAgfSwgb3duZXJTdGF0ZS50eXBlID09PSAnc2VhcmNoJyAmJiB7XG4gICAgLy8gSW1wcm92ZSB0eXBlIHNlYXJjaCBzdHlsZS5cbiAgICBNb3pBcHBlYXJhbmNlOiAndGV4dGZpZWxkJ1xuICB9KTtcbn0pO1xuY29uc3QgaW5wdXRHbG9iYWxTdHlsZXMgPSAvKiNfX1BVUkVfXyovX2pzeChHbG9iYWxTdHlsZXMsIHtcbiAgc3R5bGVzOiB7XG4gICAgJ0BrZXlmcmFtZXMgbXVpLWF1dG8tZmlsbCc6IHtcbiAgICAgIGZyb206IHtcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgbXVpLWF1dG8tZmlsbC1jYW5jZWwnOiB7XG4gICAgICBmcm9tOiB7XG4gICAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG4vKipcbiAqIGBJbnB1dEJhc2VgIGNvbnRhaW5zIGFzIGZldyBzdHlsZXMgYXMgcG9zc2libGUuXG4gKiBJdCBhaW1zIHRvIGJlIGEgc2ltcGxlIGJ1aWxkaW5nIGJsb2NrIGZvciBjcmVhdGluZyBhbiBpbnB1dC5cbiAqIEl0IGNvbnRhaW5zIGEgbG9hZCBvZiBzdHlsZSByZXNldCBhbmQgc29tZSBzdGF0ZSBsb2dpYy5cbiAqL1xuY29uc3QgSW5wdXRCYXNlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSW5wdXRCYXNlKGluUHJvcHMsIHJlZikge1xuICB2YXIgX3Nsb3RQcm9wcyRpbnB1dDtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpSW5wdXRCYXNlJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBhcmlhRGVzY3JpYmVkYnksXG4gICAgICBhdXRvQ29tcGxldGUsXG4gICAgICBhdXRvRm9jdXMsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnRzID0ge30sXG4gICAgICBjb21wb25lbnRzUHJvcHMgPSB7fSxcbiAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgZGlzYWJsZUluamVjdGluZ0dsb2JhbFN0eWxlcyxcbiAgICAgIGVuZEFkb3JubWVudCxcbiAgICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgICAgaWQsXG4gICAgICBpbnB1dENvbXBvbmVudCA9ICdpbnB1dCcsXG4gICAgICBpbnB1dFByb3BzOiBpbnB1dFByb3BzUHJvcCA9IHt9LFxuICAgICAgaW5wdXRSZWY6IGlucHV0UmVmUHJvcCxcbiAgICAgIG1heFJvd3MsXG4gICAgICBtaW5Sb3dzLFxuICAgICAgbXVsdGlsaW5lID0gZmFsc2UsXG4gICAgICBuYW1lLFxuICAgICAgb25CbHVyLFxuICAgICAgb25DaGFuZ2UsXG4gICAgICBvbkNsaWNrLFxuICAgICAgb25Gb2N1cyxcbiAgICAgIG9uS2V5RG93bixcbiAgICAgIG9uS2V5VXAsXG4gICAgICBwbGFjZWhvbGRlcixcbiAgICAgIHJlYWRPbmx5LFxuICAgICAgcmVuZGVyU3VmZml4LFxuICAgICAgcm93cyxcbiAgICAgIHNsb3RQcm9wcyA9IHt9LFxuICAgICAgc2xvdHMgPSB7fSxcbiAgICAgIHN0YXJ0QWRvcm5tZW50LFxuICAgICAgdHlwZSA9ICd0ZXh0JyxcbiAgICAgIHZhbHVlOiB2YWx1ZVByb3BcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgdmFsdWUgPSBpbnB1dFByb3BzUHJvcC52YWx1ZSAhPSBudWxsID8gaW5wdXRQcm9wc1Byb3AudmFsdWUgOiB2YWx1ZVByb3A7XG4gIGNvbnN0IHtcbiAgICBjdXJyZW50OiBpc0NvbnRyb2xsZWRcbiAgfSA9IFJlYWN0LnVzZVJlZih2YWx1ZSAhPSBudWxsKTtcbiAgY29uc3QgaW5wdXRSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgY29uc3QgaGFuZGxlSW5wdXRSZWZXYXJuaW5nID0gUmVhY3QudXNlQ2FsbGJhY2soaW5zdGFuY2UgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2Uubm9kZU5hbWUgIT09ICdJTlBVVCcgJiYgIWluc3RhbmNlLmZvY3VzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFlvdSBoYXZlIHByb3ZpZGVkIGEgYGlucHV0Q29tcG9uZW50YCB0byB0aGUgaW5wdXQgY29tcG9uZW50JywgJ3RoYXQgZG9lcyBub3QgY29ycmVjdGx5IGhhbmRsZSB0aGUgYHJlZmAgcHJvcC4nLCAnTWFrZSBzdXJlIHRoZSBgcmVmYCBwcm9wIGlzIGNhbGxlZCB3aXRoIGEgSFRNTElucHV0RWxlbWVudC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbXSk7XG4gIGNvbnN0IGhhbmRsZUlucHV0UmVmID0gdXNlRm9ya1JlZihpbnB1dFJlZiwgaW5wdXRSZWZQcm9wLCBpbnB1dFByb3BzUHJvcC5yZWYsIGhhbmRsZUlucHV0UmVmV2FybmluZyk7XG4gIGNvbnN0IFtmb2N1c2VkLCBzZXRGb2N1c2VkXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICAgICAgcmV0dXJuIG11aUZvcm1Db250cm9sLnJlZ2lzdGVyRWZmZWN0KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sIFttdWlGb3JtQ29udHJvbF0pO1xuICB9XG4gIGNvbnN0IGZjcyA9IGZvcm1Db250cm9sU3RhdGUoe1xuICAgIHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sLFxuICAgIHN0YXRlczogWydjb2xvcicsICdkaXNhYmxlZCcsICdlcnJvcicsICdoaWRkZW5MYWJlbCcsICdzaXplJywgJ3JlcXVpcmVkJywgJ2ZpbGxlZCddXG4gIH0pO1xuICBmY3MuZm9jdXNlZCA9IG11aUZvcm1Db250cm9sID8gbXVpRm9ybUNvbnRyb2wuZm9jdXNlZCA6IGZvY3VzZWQ7XG5cbiAgLy8gVGhlIGJsdXIgd29uJ3QgZmlyZSB3aGVuIHRoZSBkaXNhYmxlZCBzdGF0ZSBpcyBzZXQgb24gYSBmb2N1c2VkIGlucHV0LlxuICAvLyBXZSBuZWVkIHRvIGJvb2sga2VlcCB0aGUgZm9jdXNlZCBzdGF0ZSBtYW51YWxseS5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIW11aUZvcm1Db250cm9sICYmIGRpc2FibGVkICYmIGZvY3VzZWQpIHtcbiAgICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuICAgICAgaWYgKG9uQmx1cikge1xuICAgICAgICBvbkJsdXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFttdWlGb3JtQ29udHJvbCwgZGlzYWJsZWQsIGZvY3VzZWQsIG9uQmx1cl0pO1xuICBjb25zdCBvbkZpbGxlZCA9IG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRmlsbGVkO1xuICBjb25zdCBvbkVtcHR5ID0gbXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25FbXB0eTtcbiAgY29uc3QgY2hlY2tEaXJ0eSA9IFJlYWN0LnVzZUNhbGxiYWNrKG9iaiA9PiB7XG4gICAgaWYgKGlzRmlsbGVkKG9iaikpIHtcbiAgICAgIGlmIChvbkZpbGxlZCkge1xuICAgICAgICBvbkZpbGxlZCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob25FbXB0eSkge1xuICAgICAgb25FbXB0eSgpO1xuICAgIH1cbiAgfSwgW29uRmlsbGVkLCBvbkVtcHR5XSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaXNDb250cm9sbGVkKSB7XG4gICAgICBjaGVja0RpcnR5KHtcbiAgICAgICAgdmFsdWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3ZhbHVlLCBjaGVja0RpcnR5LCBpc0NvbnRyb2xsZWRdKTtcbiAgY29uc3QgaGFuZGxlRm9jdXMgPSBldmVudCA9PiB7XG4gICAgLy8gRml4IGEgYnVnIHdpdGggSUUxMSB3aGVyZSB0aGUgZm9jdXMvYmx1ciBldmVudHMgYXJlIHRyaWdnZXJlZFxuICAgIC8vIHdoaWxlIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAgaWYgKGZjcy5kaXNhYmxlZCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvbkZvY3VzKSB7XG4gICAgICBvbkZvY3VzKGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKGlucHV0UHJvcHNQcm9wLm9uRm9jdXMpIHtcbiAgICAgIGlucHV0UHJvcHNQcm9wLm9uRm9jdXMoZXZlbnQpO1xuICAgIH1cbiAgICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25Gb2N1cykge1xuICAgICAgbXVpRm9ybUNvbnRyb2wub25Gb2N1cyhldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldEZvY3VzZWQodHJ1ZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVCbHVyID0gZXZlbnQgPT4ge1xuICAgIGlmIChvbkJsdXIpIHtcbiAgICAgIG9uQmx1cihldmVudCk7XG4gICAgfVxuICAgIGlmIChpbnB1dFByb3BzUHJvcC5vbkJsdXIpIHtcbiAgICAgIGlucHV0UHJvcHNQcm9wLm9uQmx1cihldmVudCk7XG4gICAgfVxuICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkJsdXIpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLm9uQmx1cihldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGV2ZW50LCAuLi5hcmdzKSA9PiB7XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBldmVudC50YXJnZXQgfHwgaW5wdXRSZWYuY3VycmVudDtcbiAgICAgIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IEV4cGVjdGVkIHZhbGlkIGlucHV0IHRhcmdldC4gRGlkIHlvdSB1c2UgYSBjdXN0b20gXFxgaW5wdXRDb21wb25lbnRcXGAgYW5kIGZvcmdldCB0byBmb3J3YXJkIHJlZnM/IFNlZSBodHRwczovL211aS5jb20vci9pbnB1dC1jb21wb25lbnQtcmVmLWludGVyZmFjZSBmb3IgbW9yZSBpbmZvLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDEpKTtcbiAgICAgIH1cbiAgICAgIGNoZWNrRGlydHkoe1xuICAgICAgICB2YWx1ZTogZWxlbWVudC52YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFByb3BzUHJvcC5vbkNoYW5nZSkge1xuICAgICAgaW5wdXRQcm9wc1Byb3Aub25DaGFuZ2UoZXZlbnQsIC4uLmFyZ3MpO1xuICAgIH1cblxuICAgIC8vIFBlcmZvcm0gaW4gdGhlIHdpbGxVcGRhdGVcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50LCAuLi5hcmdzKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gQ2hlY2sgdGhlIGlucHV0IHN0YXRlIG9uIG1vdW50LCBpbiBjYXNlIGl0IHdhcyBmaWxsZWQgYnkgdGhlIHVzZXJcbiAgLy8gb3IgYXV0byBmaWxsZWQgYnkgdGhlIGJyb3dzZXIgYmVmb3JlIHRoZSBoeWRyYXRpb24gKGZvciBTU1IpLlxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNoZWNrRGlydHkoaW5wdXRSZWYuY3VycmVudCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbXSk7XG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gZXZlbnQgPT4ge1xuICAgIGlmIChpbnB1dFJlZi5jdXJyZW50ICYmIGV2ZW50LmN1cnJlbnRUYXJnZXQgPT09IGV2ZW50LnRhcmdldCkge1xuICAgICAgaW5wdXRSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH1cbiAgICBpZiAob25DbGljaykge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9O1xuICBsZXQgSW5wdXRDb21wb25lbnQgPSBpbnB1dENvbXBvbmVudDtcbiAgbGV0IGlucHV0UHJvcHMgPSBpbnB1dFByb3BzUHJvcDtcbiAgaWYgKG11bHRpbGluZSAmJiBJbnB1dENvbXBvbmVudCA9PT0gJ2lucHV0Jykge1xuICAgIGlmIChyb3dzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAobWluUm93cyB8fCBtYXhSb3dzKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdNVUk6IFlvdSBjYW4gbm90IHVzZSB0aGUgYG1pblJvd3NgIG9yIGBtYXhSb3dzYCBwcm9wcyB3aGVuIHRoZSBpbnB1dCBgcm93c2AgcHJvcCBpcyBzZXQuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlucHV0UHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICAgIHR5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgbWluUm93czogcm93cyxcbiAgICAgICAgbWF4Um93czogcm93c1xuICAgICAgfSwgaW5wdXRQcm9wcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0UHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICAgIHR5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgbWF4Um93cyxcbiAgICAgICAgbWluUm93c1xuICAgICAgfSwgaW5wdXRQcm9wcyk7XG4gICAgfVxuICAgIElucHV0Q29tcG9uZW50ID0gVGV4dGFyZWFBdXRvc2l6ZTtcbiAgfVxuICBjb25zdCBoYW5kbGVBdXRvRmlsbCA9IGV2ZW50ID0+IHtcbiAgICAvLyBQcm92aWRlIGEgZmFrZSB2YWx1ZSBhcyBDaHJvbWUgbWlnaHQgbm90IGxldCB5b3UgYWNjZXNzIGl0IGZvciBzZWN1cml0eSByZWFzb25zLlxuICAgIGNoZWNrRGlydHkoZXZlbnQuYW5pbWF0aW9uTmFtZSA9PT0gJ211aS1hdXRvLWZpbGwtY2FuY2VsJyA/IGlucHV0UmVmLmN1cnJlbnQgOiB7XG4gICAgICB2YWx1ZTogJ3gnXG4gICAgfSk7XG4gIH07XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG11aUZvcm1Db250cm9sKSB7XG4gICAgICBtdWlGb3JtQ29udHJvbC5zZXRBZG9ybmVkU3RhcnQoQm9vbGVhbihzdGFydEFkb3JubWVudCkpO1xuICAgIH1cbiAgfSwgW211aUZvcm1Db250cm9sLCBzdGFydEFkb3JubWVudF0pO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3I6IGZjcy5jb2xvciB8fCAncHJpbWFyeScsXG4gICAgZGlzYWJsZWQ6IGZjcy5kaXNhYmxlZCxcbiAgICBlbmRBZG9ybm1lbnQsXG4gICAgZXJyb3I6IGZjcy5lcnJvcixcbiAgICBmb2N1c2VkOiBmY3MuZm9jdXNlZCxcbiAgICBmb3JtQ29udHJvbDogbXVpRm9ybUNvbnRyb2wsXG4gICAgZnVsbFdpZHRoLFxuICAgIGhpZGRlbkxhYmVsOiBmY3MuaGlkZGVuTGFiZWwsXG4gICAgbXVsdGlsaW5lLFxuICAgIHNpemU6IGZjcy5zaXplLFxuICAgIHN0YXJ0QWRvcm5tZW50LFxuICAgIHR5cGVcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgUm9vdCA9IHNsb3RzLnJvb3QgfHwgY29tcG9uZW50cy5Sb290IHx8IElucHV0QmFzZVJvb3Q7XG4gIGNvbnN0IHJvb3RQcm9wcyA9IHNsb3RQcm9wcy5yb290IHx8IGNvbXBvbmVudHNQcm9wcy5yb290IHx8IHt9O1xuICBjb25zdCBJbnB1dCA9IHNsb3RzLmlucHV0IHx8IGNvbXBvbmVudHMuSW5wdXQgfHwgSW5wdXRCYXNlQ29tcG9uZW50O1xuICBpbnB1dFByb3BzID0gX2V4dGVuZHMoe30sIGlucHV0UHJvcHMsIChfc2xvdFByb3BzJGlucHV0ID0gc2xvdFByb3BzLmlucHV0KSAhPSBudWxsID8gX3Nsb3RQcm9wcyRpbnB1dCA6IGNvbXBvbmVudHNQcm9wcy5pbnB1dCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogWyFkaXNhYmxlSW5qZWN0aW5nR2xvYmFsU3R5bGVzICYmIGlucHV0R2xvYmFsU3R5bGVzLCAvKiNfX1BVUkVfXyovX2pzeHMoUm9vdCwgX2V4dGVuZHMoe30sIHJvb3RQcm9wcywgIWlzSG9zdENvbXBvbmVudChSb290KSAmJiB7XG4gICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwgcm9vdFByb3BzLm93bmVyU3RhdGUpXG4gICAgfSwge1xuICAgICAgcmVmOiByZWYsXG4gICAgICBvbkNsaWNrOiBoYW5kbGVDbGlja1xuICAgIH0sIG90aGVyLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCByb290UHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUsIHJlYWRPbmx5ICYmICdNdWlJbnB1dEJhc2UtcmVhZE9ubHknKSxcbiAgICAgIGNoaWxkcmVuOiBbc3RhcnRBZG9ybm1lbnQsIC8qI19fUFVSRV9fKi9fanN4KEZvcm1Db250cm9sQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KElucHV0LCBfZXh0ZW5kcyh7XG4gICAgICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgICAgICBcImFyaWEtaW52YWxpZFwiOiBmY3MuZXJyb3IsXG4gICAgICAgICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IGFyaWFEZXNjcmliZWRieSxcbiAgICAgICAgICBhdXRvQ29tcGxldGU6IGF1dG9Db21wbGV0ZSxcbiAgICAgICAgICBhdXRvRm9jdXM6IGF1dG9Gb2N1cyxcbiAgICAgICAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICBkaXNhYmxlZDogZmNzLmRpc2FibGVkLFxuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICBvbkFuaW1hdGlvblN0YXJ0OiBoYW5kbGVBdXRvRmlsbCxcbiAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICAgICAgICByZWFkT25seTogcmVhZE9ubHksXG4gICAgICAgICAgcmVxdWlyZWQ6IGZjcy5yZXF1aXJlZCxcbiAgICAgICAgICByb3dzOiByb3dzLFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBvbktleURvd246IG9uS2V5RG93bixcbiAgICAgICAgICBvbktleVVwOiBvbktleVVwLFxuICAgICAgICAgIHR5cGU6IHR5cGVcbiAgICAgICAgfSwgaW5wdXRQcm9wcywgIWlzSG9zdENvbXBvbmVudChJbnB1dCkgJiYge1xuICAgICAgICAgIGFzOiBJbnB1dENvbXBvbmVudCxcbiAgICAgICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwgaW5wdXRQcm9wcy5vd25lclN0YXRlKVxuICAgICAgICB9LCB7XG4gICAgICAgICAgcmVmOiBoYW5kbGVJbnB1dFJlZixcbiAgICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5pbnB1dCwgaW5wdXRQcm9wcy5jbGFzc05hbWUsIHJlYWRPbmx5ICYmICdNdWlJbnB1dEJhc2UtcmVhZE9ubHknKSxcbiAgICAgICAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICAgICAgICBvbkZvY3VzOiBoYW5kbGVGb2N1c1xuICAgICAgICB9KSlcbiAgICAgIH0pLCBlbmRBZG9ybm1lbnQsIHJlbmRlclN1ZmZpeCA/IHJlbmRlclN1ZmZpeChfZXh0ZW5kcyh7fSwgZmNzLCB7XG4gICAgICAgIHN0YXJ0QWRvcm5tZW50XG4gICAgICB9KSkgOiBudWxsXVxuICAgIH0pKV1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IElucHV0QmFzZS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICAnYXJpYS1kZXNjcmliZWRieSc6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgW2ZvbGxvd2luZyB0aGUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGwpLlxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IGlzIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgJ3ByaW1hcnknYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYHNsb3RzYCBwcm9wLlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgYHNsb3RzYCBwcm9wIGluc3RlYWQuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIElucHV0OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90UHJvcHNgIHByb3AuXG4gICAqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgc2xvdFByb3BzYCBwcm9wIGluc3RlYWQsIGFzIGBjb21wb25lbnRzUHJvcHNgIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50c1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgR2xvYmFsU3R5bGVzIGZvciB0aGUgYXV0by1maWxsIGtleWZyYW1lcyB3aWxsIG5vdCBiZSBpbmplY3RlZC9yZW1vdmVkIG9uIG1vdW50L3VubW91bnQuIE1ha2Ugc3VyZSB0byBpbmplY3QgdGhlbSBhdCB0aGUgdG9wIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqIFRoaXMgb3B0aW9uIGlzIGludGVuZGVkIHRvIGhlbHAgd2l0aCBib29zdGluZyB0aGUgaW5pdGlhbCByZW5kZXJpbmcgcGVyZm9ybWFuY2UgaWYgeW91IGFyZSBsb2FkaW5nIGEgYmlnIGFtb3VudCBvZiBJbnB1dCBjb21wb25lbnRzIGF0IG9uY2UuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlSW5qZWN0aW5nR2xvYmFsU3R5bGVzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdpbnB1dCdcbiAgICovXG4gIGlucHV0Q29tcG9uZW50OiBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZixcbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGAnbm9uZSdgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZSddKSxcbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtYXhSb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBNaW5pbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgbWluUm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIFtUZXh0YXJlYUF1dG9zaXplXSgvbWF0ZXJpYWwtdWkvcmVhY3QtdGV4dGFyZWEtYXV0b3NpemUvKSBlbGVtZW50IGlzIHJlbmRlcmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbXVsdGlsaW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYGlucHV0YCBpcyBibHVycmVkLlxuICAgKlxuICAgKiBOb3RpY2UgdGhhdCB0aGUgZmlyc3QgYXJndW1lbnQgKGV2ZW50KSBtaWdodCBiZSB1bmRlZmluZWQuXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5DaGFuZ2VFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50IHwgSFRNTElucHV0RWxlbWVudD59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGBpbnB1dGAgZG9lc24ndCBzYXRpc2Z5IGl0cyBjb25zdHJhaW50cy5cbiAgICovXG4gIG9uSW52YWxpZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlVcDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGBpbnB1dGAgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJlbmRlclN1ZmZpeDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgaXMgcmVxdWlyZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ21lZGl1bScsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBjb21wb25lbnRzUHJvcHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgY29tcG9uZW50c2AgcHJvcCwgd2hpY2ggd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKiBAZGVmYXVsdCAndGV4dCdcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IElucHV0QmFzZTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi9Gb3JtQ29udHJvbENvbnRleHQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRm9ybUNvbnRyb2woKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KEZvcm1Db250cm9sQ29udGV4dCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gIHByb3BzLFxuICBzdGF0ZXMsXG4gIG11aUZvcm1Db250cm9sXG59KSB7XG4gIHJldHVybiBzdGF0ZXMucmVkdWNlKChhY2MsIHN0YXRlKSA9PiB7XG4gICAgYWNjW3N0YXRlXSA9IHByb3BzW3N0YXRlXTtcbiAgICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcHNbc3RhdGVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBhY2Nbc3RhdGVdID0gbXVpRm9ybUNvbnRyb2xbc3RhdGVdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyB1bnN0YWJsZV91c2VFdmVudENhbGxiYWNrIGFzIHVzZUV2ZW50Q2FsbGJhY2sgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHVzZUV2ZW50Q2FsbGJhY2s7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlRW5oYW5jZWRFZmZlY3QgZnJvbSAnLi4vdXNlRW5oYW5jZWRFZmZlY3QnO1xuXG4vKipcbiAqIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTQwOTkjaXNzdWVjb21tZW50LTQ0MDAxMzg5MlxuICogU2VlIFJGQyBpbiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZmNzL3B1bGwvMjIwXG4gKi9cblxuZnVuY3Rpb24gdXNlRXZlbnRDYWxsYmFjayhmbikge1xuICBjb25zdCByZWYgPSBSZWFjdC51c2VSZWYoZm4pO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgcmVmLmN1cnJlbnQgPSBmbjtcbiAgfSk7XG4gIHJldHVybiBSZWFjdC51c2VSZWYoKC4uLmFyZ3MpID0+XG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgaGlkZSBgdGhpc2BcbiAgKDAsIHJlZi5jdXJyZW50KSguLi5hcmdzKSkuY3VycmVudDtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZUV2ZW50Q2FsbGJhY2s7IiwiJ3VzZSBjbGllbnQnO1xuXG4vLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvdjQuMS41L3NyYy9mb2N1cy12aXNpYmxlLmpzXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5sZXQgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG5sZXQgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSBmYWxzZTtcbmxldCBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQ7XG5jb25zdCBpbnB1dFR5cGVzV2hpdGVsaXN0ID0ge1xuICB0ZXh0OiB0cnVlLFxuICBzZWFyY2g6IHRydWUsXG4gIHVybDogdHJ1ZSxcbiAgdGVsOiB0cnVlLFxuICBlbWFpbDogdHJ1ZSxcbiAgcGFzc3dvcmQ6IHRydWUsXG4gIG51bWJlcjogdHJ1ZSxcbiAgZGF0ZTogdHJ1ZSxcbiAgbW9udGg6IHRydWUsXG4gIHdlZWs6IHRydWUsXG4gIHRpbWU6IHRydWUsXG4gIGRhdGV0aW1lOiB0cnVlLFxuICAnZGF0ZXRpbWUtbG9jYWwnOiB0cnVlXG59O1xuXG4vKipcbiAqIENvbXB1dGVzIHdoZXRoZXIgdGhlIGdpdmVuIGVsZW1lbnQgc2hvdWxkIGF1dG9tYXRpY2FsbHkgdHJpZ2dlciB0aGVcbiAqIGBmb2N1cy12aXNpYmxlYCBjbGFzcyBiZWluZyBhZGRlZCwgaS5lLiB3aGV0aGVyIGl0IHNob3VsZCBhbHdheXMgbWF0Y2hcbiAqIGA6Zm9jdXMtdmlzaWJsZWAgd2hlbiBmb2N1c2VkLlxuICogQHBhcmFtIHtFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkobm9kZSkge1xuICBjb25zdCB7XG4gICAgdHlwZSxcbiAgICB0YWdOYW1lXG4gIH0gPSBub2RlO1xuICBpZiAodGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBpbnB1dFR5cGVzV2hpdGVsaXN0W3R5cGVdICYmICFub2RlLnJlYWRPbmx5KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHRhZ05hbWUgPT09ICdURVhUQVJFQScgJiYgIW5vZGUucmVhZE9ubHkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAobm9kZS5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBLZWVwIHRyYWNrIG9mIG91ciBrZXlib2FyZCBtb2RhbGl0eSBzdGF0ZSB3aXRoIGBoYWRLZXlib2FyZEV2ZW50YC5cbiAqIElmIHRoZSBtb3N0IHJlY2VudCB1c2VyIGludGVyYWN0aW9uIHdhcyB2aWEgdGhlIGtleWJvYXJkO1xuICogYW5kIHRoZSBrZXkgcHJlc3MgZGlkIG5vdCBpbmNsdWRlIGEgbWV0YSwgYWx0L29wdGlvbiwgb3IgY29udHJvbCBrZXk7XG4gKiB0aGVuIHRoZSBtb2RhbGl0eSBpcyBrZXlib2FyZC4gT3RoZXJ3aXNlLCB0aGUgbW9kYWxpdHkgaXMgbm90IGtleWJvYXJkLlxuICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudFxuICovXG5mdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gIGlmIChldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xufVxuXG4vKipcbiAqIElmIGF0IGFueSBwb2ludCBhIHVzZXIgY2xpY2tzIHdpdGggYSBwb2ludGluZyBkZXZpY2UsIGVuc3VyZSB0aGF0IHdlIGNoYW5nZVxuICogdGhlIG1vZGFsaXR5IGF3YXkgZnJvbSBrZXlib2FyZC5cbiAqIFRoaXMgYXZvaWRzIHRoZSBzaXR1YXRpb24gd2hlcmUgYSB1c2VyIHByZXNzZXMgYSBrZXkgb24gYW4gYWxyZWFkeSBmb2N1c2VkXG4gKiBlbGVtZW50LCBhbmQgdGhlbiBjbGlja3Mgb24gYSBkaWZmZXJlbnQgZWxlbWVudCwgZm9jdXNpbmcgaXQgd2l0aCBhXG4gKiBwb2ludGluZyBkZXZpY2UsIHdoaWxlIHdlIHN0aWxsIHRoaW5rIHdlJ3JlIGluIGtleWJvYXJkIG1vZGFsaXR5LlxuICovXG5mdW5jdGlvbiBoYW5kbGVQb2ludGVyRG93bigpIHtcbiAgaGFkS2V5Ym9hcmRFdmVudCA9IGZhbHNlO1xufVxuZnVuY3Rpb24gaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSgpIHtcbiAgaWYgKHRoaXMudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJykge1xuICAgIC8vIElmIHRoZSB0YWIgYmVjb21lcyBhY3RpdmUgYWdhaW4sIHRoZSBicm93c2VyIHdpbGwgaGFuZGxlIGNhbGxpbmcgZm9jdXNcbiAgICAvLyBvbiB0aGUgZWxlbWVudCAoU2FmYXJpIGFjdHVhbGx5IGNhbGxzIGl0IHR3aWNlKS5cbiAgICAvLyBJZiB0aGlzIHRhYiBjaGFuZ2UgY2F1c2VkIGEgYmx1ciBvbiBhbiBlbGVtZW50IHdpdGggZm9jdXMtdmlzaWJsZSxcbiAgICAvLyByZS1hcHBseSB0aGUgY2xhc3Mgd2hlbiB0aGUgdXNlciBzd2l0Y2hlcyBiYWNrIHRvIHRoZSB0YWIuXG4gICAgaWYgKGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5KSB7XG4gICAgICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHByZXBhcmUoZG9jKSB7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgdHJ1ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdGVhcmRvd24oZG9jKSB7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgdHJ1ZSk7XG59XG5mdW5jdGlvbiBpc0ZvY3VzVmlzaWJsZShldmVudCkge1xuICBjb25zdCB7XG4gICAgdGFyZ2V0XG4gIH0gPSBldmVudDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gdGFyZ2V0Lm1hdGNoZXMoJzpmb2N1cy12aXNpYmxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgLy8gQnJvd3NlcnMgbm90IGltcGxlbWVudGluZyA6Zm9jdXMtdmlzaWJsZSB3aWxsIHRocm93IGEgU3ludGF4RXJyb3IuXG4gICAgLy8gV2UgdXNlIG91ciBvd24gaGV1cmlzdGljIGZvciB0aG9zZSBicm93c2Vycy5cbiAgICAvLyBSZXRocm93IG1pZ2h0IGJlIGJldHRlciBpZiBpdCdzIG5vdCB0aGUgZXhwZWN0ZWQgZXJyb3IgYnV0IGRvIHdlIHJlYWxseVxuICAgIC8vIHdhbnQgdG8gY3Jhc2ggaWYgZm9jdXMtdmlzaWJsZSBtYWxmdW5jdGlvbmVkP1xuICB9XG5cbiAgLy8gTm8gbmVlZCBmb3IgdmFsaWRGb2N1c1RhcmdldCBjaGVjay4gVGhlIHVzZXIgZG9lcyB0aGF0IGJ5IGF0dGFjaGluZyBpdCB0b1xuICAvLyBmb2N1c2FibGUgZXZlbnRzIG9ubHkuXG4gIHJldHVybiBoYWRLZXlib2FyZEV2ZW50IHx8IGZvY3VzVHJpZ2dlcnNLZXlib2FyZE1vZGFsaXR5KHRhcmdldCk7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VJc0ZvY3VzVmlzaWJsZSgpIHtcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlQ2FsbGJhY2sobm9kZSA9PiB7XG4gICAgaWYgKG5vZGUgIT0gbnVsbCkge1xuICAgICAgcHJlcGFyZShub2RlLm93bmVyRG9jdW1lbnQpO1xuICAgIH1cbiAgfSwgW10pO1xuICBjb25zdCBpc0ZvY3VzVmlzaWJsZVJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG5cbiAgLyoqXG4gICAqIFNob3VsZCBiZSBjYWxsZWQgaWYgYSBibHVyIGV2ZW50IGlzIGZpcmVkXG4gICAqL1xuICBmdW5jdGlvbiBoYW5kbGVCbHVyVmlzaWJsZSgpIHtcbiAgICAvLyBjaGVja2luZyBhZ2FpbnN0IHBvdGVudGlhbCBzdGF0ZSB2YXJpYWJsZSBkb2VzIG5vdCBzdWZmaWNlIGlmIHdlIGZvY3VzIGFuZCBibHVyIHN5bmNocm9ub3VzbHkuXG4gICAgLy8gUmVhY3Qgd291bGRuJ3QgaGF2ZSB0aW1lIHRvIHRyaWdnZXIgYSByZS1yZW5kZXIgc28gYGZvY3VzVmlzaWJsZWAgd291bGQgYmUgc3RhbGUuXG4gICAgLy8gSWRlYWxseSB3ZSB3b3VsZCBhZGp1c3QgYGlzRm9jdXNWaXNpYmxlKGV2ZW50KWAgdG8gbG9vayBhdCBgcmVsYXRlZFRhcmdldGAgZm9yIGJsdXIgZXZlbnRzLlxuICAgIC8vIFRoaXMgZG9lc24ndCB3b3JrIGluIElFMTEgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMzc1MVxuICAgIC8vIFRPRE86IGNoZWNrIGFnYWluIGlmIFJlYWN0IHJlbGVhc2VzIHRoZWlyIGludGVybmFsIGNoYW5nZXMgdG8gZm9jdXMgZXZlbnQgaGFuZGxpbmcgKGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzE5MTg2KS5cbiAgICBpZiAoaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCkge1xuICAgICAgLy8gVG8gZGV0ZWN0IGEgdGFiL3dpbmRvdyBzd2l0Y2gsIHdlIGxvb2sgZm9yIGEgYmx1ciBldmVudCBmb2xsb3dlZFxuICAgICAgLy8gcmFwaWRseSBieSBhIHZpc2liaWxpdHkgY2hhbmdlLlxuICAgICAgLy8gSWYgd2UgZG9uJ3Qgc2VlIGEgdmlzaWJpbGl0eSBjaGFuZ2Ugd2l0aGluIDEwMG1zLCBpdCdzIHByb2JhYmx5IGFcbiAgICAgIC8vIHJlZ3VsYXIgZm9jdXMgY2hhbmdlLlxuICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSB0cnVlO1xuICAgICAgd2luZG93LmNsZWFyVGltZW91dChoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQpO1xuICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xuICAgICAgfSwgMTAwKTtcbiAgICAgIGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogU2hvdWxkIGJlIGNhbGxlZCBpZiBhIGJsdXIgZXZlbnQgaXMgZmlyZWRcbiAgICovXG4gIGZ1bmN0aW9uIGhhbmRsZUZvY3VzVmlzaWJsZShldmVudCkge1xuICAgIGlmIChpc0ZvY3VzVmlzaWJsZShldmVudCkpIHtcbiAgICAgIGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGlzRm9jdXNWaXNpYmxlUmVmLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzVmlzaWJsZSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXJWaXNpYmxlLFxuICAgIHJlZlxuICB9O1xufSIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IHsgdW5zdGFibGVfdXNlSXNGb2N1c1Zpc2libGUgYXMgdXNlSXNGb2N1c1Zpc2libGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHVzZUlzRm9jdXNWaXNpYmxlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTsiLCJpbXBvcnQgeyBDaGlsZHJlbiwgY2xvbmVFbGVtZW50LCBpc1ZhbGlkRWxlbWVudCB9IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogR2l2ZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gLCByZXR1cm4gYW4gb2JqZWN0IG1hcHBpbmcga2V5IHRvIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Kn0gY2hpbGRyZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gXG4gKiBAcmV0dXJuIHtvYmplY3R9IE1hcHBpbmcgb2Yga2V5IHRvIGNoaWxkXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENoaWxkTWFwcGluZyhjaGlsZHJlbiwgbWFwRm4pIHtcbiAgdmFyIG1hcHBlciA9IGZ1bmN0aW9uIG1hcHBlcihjaGlsZCkge1xuICAgIHJldHVybiBtYXBGbiAmJiBpc1ZhbGlkRWxlbWVudChjaGlsZCkgPyBtYXBGbihjaGlsZCkgOiBjaGlsZDtcbiAgfTtcblxuICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKGNoaWxkcmVuKSBDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGM7XG4gIH0pLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgLy8gcnVuIHRoZSBtYXAgZnVuY3Rpb24gaGVyZSBpbnN0ZWFkIHNvIHRoYXQgdGhlIGtleSBpcyB0aGUgY29tcHV0ZWQgb25lXG4gICAgcmVzdWx0W2NoaWxkLmtleV0gPSBtYXBwZXIoY2hpbGQpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogV2hlbiB5b3UncmUgYWRkaW5nIG9yIHJlbW92aW5nIGNoaWxkcmVuIHNvbWUgbWF5IGJlIGFkZGVkIG9yIHJlbW92ZWQgaW4gdGhlXG4gKiBzYW1lIHJlbmRlciBwYXNzLiBXZSB3YW50IHRvIHNob3cgKmJvdGgqIHNpbmNlIHdlIHdhbnQgdG8gc2ltdWx0YW5lb3VzbHlcbiAqIGFuaW1hdGUgZWxlbWVudHMgaW4gYW5kIG91dC4gVGhpcyBmdW5jdGlvbiB0YWtlcyBhIHByZXZpb3VzIHNldCBvZiBrZXlzXG4gKiBhbmQgYSBuZXcgc2V0IG9mIGtleXMgYW5kIG1lcmdlcyB0aGVtIHdpdGggaXRzIGJlc3QgZ3Vlc3Mgb2YgdGhlIGNvcnJlY3RcbiAqIG9yZGVyaW5nLiBJbiB0aGUgZnV0dXJlIHdlIG1heSBleHBvc2Ugc29tZSBvZiB0aGUgdXRpbGl0aWVzIGluXG4gKiBSZWFjdE11bHRpQ2hpbGQgdG8gbWFrZSB0aGlzIGVhc3ksIGJ1dCBmb3Igbm93IFJlYWN0IGl0c2VsZiBkb2VzIG5vdFxuICogZGlyZWN0bHkgaGF2ZSB0aGlzIGNvbmNlcHQgb2YgdGhlIHVuaW9uIG9mIHByZXZDaGlsZHJlbiBhbmQgbmV4dENoaWxkcmVuXG4gKiBzbyB3ZSBpbXBsZW1lbnQgaXQgaGVyZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcHJldiBwcmV2IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHBhcmFtIHtvYmplY3R9IG5leHQgbmV4dCBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEByZXR1cm4ge29iamVjdH0gYSBrZXkgc2V0IHRoYXQgY29udGFpbnMgYWxsIGtleXMgaW4gYHByZXZgIGFuZCBhbGwga2V5c1xuICogaW4gYG5leHRgIGluIGEgcmVhc29uYWJsZSBvcmRlci5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXYsIG5leHQpIHtcbiAgcHJldiA9IHByZXYgfHwge307XG4gIG5leHQgPSBuZXh0IHx8IHt9O1xuXG4gIGZ1bmN0aW9uIGdldFZhbHVlRm9yS2V5KGtleSkge1xuICAgIHJldHVybiBrZXkgaW4gbmV4dCA/IG5leHRba2V5XSA6IHByZXZba2V5XTtcbiAgfSAvLyBGb3IgZWFjaCBrZXkgb2YgYG5leHRgLCB0aGUgbGlzdCBvZiBrZXlzIHRvIGluc2VydCBiZWZvcmUgdGhhdCBrZXkgaW5cbiAgLy8gdGhlIGNvbWJpbmVkIGxpc3RcblxuXG4gIHZhciBuZXh0S2V5c1BlbmRpbmcgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgcGVuZGluZ0tleXMgPSBbXTtcblxuICBmb3IgKHZhciBwcmV2S2V5IGluIHByZXYpIHtcbiAgICBpZiAocHJldktleSBpbiBuZXh0KSB7XG4gICAgICBpZiAocGVuZGluZ0tleXMubGVuZ3RoKSB7XG4gICAgICAgIG5leHRLZXlzUGVuZGluZ1twcmV2S2V5XSA9IHBlbmRpbmdLZXlzO1xuICAgICAgICBwZW5kaW5nS2V5cyA9IFtdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZW5kaW5nS2V5cy5wdXNoKHByZXZLZXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpO1xuICB2YXIgY2hpbGRNYXBwaW5nID0ge307XG5cbiAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0KSB7XG4gICAgaWYgKG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGVuZGluZ05leHRLZXkgPSBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV07XG4gICAgICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ05leHRLZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5XSA9IGdldFZhbHVlRm9yS2V5KG5leHRLZXkpO1xuICB9IC8vIEZpbmFsbHksIGFkZCB0aGUga2V5cyB3aGljaCBkaWRuJ3QgYXBwZWFyIGJlZm9yZSBhbnkga2V5IGluIGBuZXh0YFxuXG5cbiAgZm9yIChpID0gMDsgaSA8IHBlbmRpbmdLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hpbGRNYXBwaW5nW3BlbmRpbmdLZXlzW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdLZXlzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZE1hcHBpbmc7XG59XG5cbmZ1bmN0aW9uIGdldFByb3AoY2hpbGQsIHByb3AsIHByb3BzKSB7XG4gIHJldHVybiBwcm9wc1twcm9wXSAhPSBudWxsID8gcHJvcHNbcHJvcF0gOiBjaGlsZC5wcm9wc1twcm9wXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEluaXRpYWxDaGlsZE1hcHBpbmcocHJvcHMsIG9uRXhpdGVkKSB7XG4gIHJldHVybiBnZXRDaGlsZE1hcHBpbmcocHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgIGluOiB0cnVlLFxuICAgICAgYXBwZWFyOiBnZXRQcm9wKGNoaWxkLCAnYXBwZWFyJywgcHJvcHMpLFxuICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIHByb3BzKSxcbiAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgcHJvcHMpXG4gICAgfSk7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBvbkV4aXRlZCkge1xuICB2YXIgbmV4dENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZyhuZXh0UHJvcHMuY2hpbGRyZW4pO1xuICB2YXIgY2hpbGRyZW4gPSBtZXJnZUNoaWxkTWFwcGluZ3MocHJldkNoaWxkTWFwcGluZywgbmV4dENoaWxkTWFwcGluZyk7XG4gIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltrZXldO1xuICAgIGlmICghaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSByZXR1cm47XG4gICAgdmFyIGhhc1ByZXYgPSAoa2V5IGluIHByZXZDaGlsZE1hcHBpbmcpO1xuICAgIHZhciBoYXNOZXh0ID0gKGtleSBpbiBuZXh0Q2hpbGRNYXBwaW5nKTtcbiAgICB2YXIgcHJldkNoaWxkID0gcHJldkNoaWxkTWFwcGluZ1trZXldO1xuICAgIHZhciBpc0xlYXZpbmcgPSBpc1ZhbGlkRWxlbWVudChwcmV2Q2hpbGQpICYmICFwcmV2Q2hpbGQucHJvcHMuaW47IC8vIGl0ZW0gaXMgbmV3IChlbnRlcmluZylcblxuICAgIGlmIChoYXNOZXh0ICYmICghaGFzUHJldiB8fCBpc0xlYXZpbmcpKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygnZW50ZXJpbmcnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgICAgaW46IHRydWUsXG4gICAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgbmV4dFByb3BzKSxcbiAgICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIG5leHRQcm9wcylcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIWhhc05leHQgJiYgaGFzUHJldiAmJiAhaXNMZWF2aW5nKSB7XG4gICAgICAvLyBpdGVtIGlzIG9sZCAoZXhpdGluZylcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdsZWF2aW5nJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBpbjogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaGFzTmV4dCAmJiBoYXNQcmV2ICYmIGlzVmFsaWRFbGVtZW50KHByZXZDaGlsZCkpIHtcbiAgICAgIC8vIGl0ZW0gaGFzbid0IGNoYW5nZWQgdHJhbnNpdGlvbiBzdGF0ZXNcbiAgICAgIC8vIGNvcHkgb3ZlciB0aGUgbGFzdCB0cmFuc2l0aW9uIHByb3BzO1xuICAgICAgLy8gY29uc29sZS5sb2coJ3VuY2hhbmdlZCcsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgICBpbjogcHJldkNoaWxkLnByb3BzLmluLFxuICAgICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIG5leHRQcm9wcyksXG4gICAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBuZXh0UHJvcHMpXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2hpbGRyZW47XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVHJhbnNpdGlvbkdyb3VwQ29udGV4dCBmcm9tICcuL1RyYW5zaXRpb25Hcm91cENvbnRleHQnO1xuaW1wb3J0IHsgZ2V0Q2hpbGRNYXBwaW5nLCBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nLCBnZXROZXh0Q2hpbGRNYXBwaW5nIH0gZnJvbSAnLi91dGlscy9DaGlsZE1hcHBpbmcnO1xuXG52YXIgdmFsdWVzID0gT2JqZWN0LnZhbHVlcyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbiAoaykge1xuICAgIHJldHVybiBvYmpba107XG4gIH0pO1xufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAnZGl2JyxcbiAgY2hpbGRGYWN0b3J5OiBmdW5jdGlvbiBjaGlsZEZhY3RvcnkoY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH1cbn07XG4vKipcbiAqIFRoZSBgPFRyYW5zaXRpb25Hcm91cD5gIGNvbXBvbmVudCBtYW5hZ2VzIGEgc2V0IG9mIHRyYW5zaXRpb24gY29tcG9uZW50c1xuICogKGA8VHJhbnNpdGlvbj5gIGFuZCBgPENTU1RyYW5zaXRpb24+YCkgaW4gYSBsaXN0LiBMaWtlIHdpdGggdGhlIHRyYW5zaXRpb25cbiAqIGNvbXBvbmVudHMsIGA8VHJhbnNpdGlvbkdyb3VwPmAgaXMgYSBzdGF0ZSBtYWNoaW5lIGZvciBtYW5hZ2luZyB0aGUgbW91bnRpbmdcbiAqIGFuZCB1bm1vdW50aW5nIG9mIGNvbXBvbmVudHMgb3ZlciB0aW1lLlxuICpcbiAqIENvbnNpZGVyIHRoZSBleGFtcGxlIGJlbG93LiBBcyBpdGVtcyBhcmUgcmVtb3ZlZCBvciBhZGRlZCB0byB0aGUgVG9kb0xpc3QgdGhlXG4gKiBgaW5gIHByb3AgaXMgdG9nZ2xlZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBgPFRyYW5zaXRpb25Hcm91cD5gLlxuICpcbiAqIE5vdGUgdGhhdCBgPFRyYW5zaXRpb25Hcm91cD5gICBkb2VzIG5vdCBkZWZpbmUgYW55IGFuaW1hdGlvbiBiZWhhdmlvciFcbiAqIEV4YWN0bHkgX2hvd18gYSBsaXN0IGl0ZW0gYW5pbWF0ZXMgaXMgdXAgdG8gdGhlIGluZGl2aWR1YWwgdHJhbnNpdGlvblxuICogY29tcG9uZW50LiBUaGlzIG1lYW5zIHlvdSBjYW4gbWl4IGFuZCBtYXRjaCBhbmltYXRpb25zIGFjcm9zcyBkaWZmZXJlbnQgbGlzdFxuICogaXRlbXMuXG4gKi9cblxudmFyIFRyYW5zaXRpb25Hcm91cCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUcmFuc2l0aW9uR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb25Hcm91cChwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuXG4gICAgdmFyIGhhbmRsZUV4aXRlZCA9IF90aGlzLmhhbmRsZUV4aXRlZC5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTsgLy8gSW5pdGlhbCBjaGlsZHJlbiBzaG91bGQgYWxsIGJlIGVudGVyaW5nLCBkZXBlbmRlbnQgb24gYXBwZWFyXG5cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgY29udGV4dFZhbHVlOiB7XG4gICAgICAgIGlzTW91bnRpbmc6IHRydWVcbiAgICAgIH0sXG4gICAgICBoYW5kbGVFeGl0ZWQ6IGhhbmRsZUV4aXRlZCxcbiAgICAgIGZpcnN0UmVuZGVyOiB0cnVlXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLm1vdW50ZWQgPSB0cnVlO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY29udGV4dFZhbHVlOiB7XG4gICAgICAgIGlzTW91bnRpbmc6IGZhbHNlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gZmFsc2U7XG4gIH07XG5cbiAgVHJhbnNpdGlvbkdyb3VwLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIF9yZWYpIHtcbiAgICB2YXIgcHJldkNoaWxkTWFwcGluZyA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICAgIGhhbmRsZUV4aXRlZCA9IF9yZWYuaGFuZGxlRXhpdGVkLFxuICAgICAgICBmaXJzdFJlbmRlciA9IF9yZWYuZmlyc3RSZW5kZXI7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNoaWxkcmVuOiBmaXJzdFJlbmRlciA/IGdldEluaXRpYWxDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBoYW5kbGVFeGl0ZWQpIDogZ2V0TmV4dENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIHByZXZDaGlsZE1hcHBpbmcsIGhhbmRsZUV4aXRlZCksXG4gICAgICBmaXJzdFJlbmRlcjogZmFsc2VcbiAgICB9O1xuICB9IC8vIG5vZGUgaXMgYHVuZGVmaW5lZGAgd2hlbiB1c2VyIHByb3ZpZGVkIGBub2RlUmVmYCBwcm9wXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlRXhpdGVkID0gZnVuY3Rpb24gaGFuZGxlRXhpdGVkKGNoaWxkLCBub2RlKSB7XG4gICAgdmFyIGN1cnJlbnRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmcodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgaWYgKGNoaWxkLmtleSBpbiBjdXJyZW50Q2hpbGRNYXBwaW5nKSByZXR1cm47XG5cbiAgICBpZiAoY2hpbGQucHJvcHMub25FeGl0ZWQpIHtcbiAgICAgIGNoaWxkLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1vdW50ZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IF9leHRlbmRzKHt9LCBzdGF0ZS5jaGlsZHJlbik7XG5cbiAgICAgICAgZGVsZXRlIGNoaWxkcmVuW2NoaWxkLmtleV07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgIGNoaWxkRmFjdG9yeSA9IF90aGlzJHByb3BzLmNoaWxkRmFjdG9yeSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY29tcG9uZW50XCIsIFwiY2hpbGRGYWN0b3J5XCJdKTtcblxuICAgIHZhciBjb250ZXh0VmFsdWUgPSB0aGlzLnN0YXRlLmNvbnRleHRWYWx1ZTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2YWx1ZXModGhpcy5zdGF0ZS5jaGlsZHJlbikubWFwKGNoaWxkRmFjdG9yeSk7XG4gICAgZGVsZXRlIHByb3BzLmFwcGVhcjtcbiAgICBkZWxldGUgcHJvcHMuZW50ZXI7XG4gICAgZGVsZXRlIHByb3BzLmV4aXQ7XG5cbiAgICBpZiAoQ29tcG9uZW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gICAgICB9LCBjaGlsZHJlbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHByb3BzLCBjaGlsZHJlbikpO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uR3JvdXA7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRyYW5zaXRpb25Hcm91cC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBgPFRyYW5zaXRpb25Hcm91cD5gIHJlbmRlcnMgYSBgPGRpdj5gIGJ5IGRlZmF1bHQuIFlvdSBjYW4gY2hhbmdlIHRoaXNcbiAgICogYmVoYXZpb3IgYnkgcHJvdmlkaW5nIGEgYGNvbXBvbmVudGAgcHJvcC5cbiAgICogSWYgeW91IHVzZSBSZWFjdCB2MTYrIGFuZCB3b3VsZCBsaWtlIHRvIGF2b2lkIGEgd3JhcHBpbmcgYDxkaXY+YCBlbGVtZW50XG4gICAqIHlvdSBjYW4gcGFzcyBpbiBgY29tcG9uZW50PXtudWxsfWAuIFRoaXMgaXMgdXNlZnVsIGlmIHRoZSB3cmFwcGluZyBkaXZcbiAgICogYm9ya3MgeW91ciBjc3Mgc3R5bGVzLlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBBIHNldCBvZiBgPFRyYW5zaXRpb24+YCBjb21wb25lbnRzLCB0aGF0IGFyZSB0b2dnbGVkIGBpbmAgYW5kIG91dCBhcyB0aGV5XG4gICAqIGxlYXZlLiB0aGUgYDxUcmFuc2l0aW9uR3JvdXA+YCB3aWxsIGluamVjdCBzcGVjaWZpYyB0cmFuc2l0aW9uIHByb3BzLCBzb1xuICAgKiByZW1lbWJlciB0byBzcHJlYWQgdGhlbSB0aHJvdWdoIGlmIHlvdSBhcmUgd3JhcHBpbmcgdGhlIGA8VHJhbnNpdGlvbj5gIGFzXG4gICAqIHdpdGggb3VyIGA8RmFkZT5gIGV4YW1wbGUuXG4gICAqXG4gICAqIFdoaWxlIHRoaXMgY29tcG9uZW50IGlzIG1lYW50IGZvciBtdWx0aXBsZSBgVHJhbnNpdGlvbmAgb3IgYENTU1RyYW5zaXRpb25gXG4gICAqIGNoaWxkcmVuLCBzb21ldGltZXMgeW91IG1heSB3YW50IHRvIGhhdmUgYSBzaW5nbGUgdHJhbnNpdGlvbiBjaGlsZCB3aXRoXG4gICAqIGNvbnRlbnQgdGhhdCB5b3Ugd2FudCB0byBiZSB0cmFuc2l0aW9uZWQgb3V0IGFuZCBpbiB3aGVuIHlvdSBjaGFuZ2UgaXRcbiAgICogKGUuZy4gcm91dGVzLCBpbWFnZXMgZXRjLikgSW4gdGhhdCBjYXNlIHlvdSBjYW4gY2hhbmdlIHRoZSBga2V5YCBwcm9wIG9mXG4gICAqIHRoZSB0cmFuc2l0aW9uIGNoaWxkIGFzIHlvdSBjaGFuZ2UgaXRzIGNvbnRlbnQsIHRoaXMgd2lsbCBjYXVzZVxuICAgKiBgVHJhbnNpdGlvbkdyb3VwYCB0byB0cmFuc2l0aW9uIHRoZSBjaGlsZCBvdXQgYW5kIGJhY2sgaW4uXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgYXBwZWFyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgZW50ZXIgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGV4aXQgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgZXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFlvdSBtYXkgbmVlZCB0byBhcHBseSByZWFjdGl2ZSB1cGRhdGVzIHRvIGEgY2hpbGQgYXMgaXQgaXMgZXhpdGluZy5cbiAgICogVGhpcyBpcyBnZW5lcmFsbHkgZG9uZSBieSB1c2luZyBgY2xvbmVFbGVtZW50YCBob3dldmVyIGluIHRoZSBjYXNlIG9mIGFuIGV4aXRpbmdcbiAgICogY2hpbGQgdGhlIGVsZW1lbnQgaGFzIGFscmVhZHkgYmVlbiByZW1vdmVkIGFuZCBub3QgYWNjZXNzaWJsZSB0byB0aGUgY29uc3VtZXIuXG4gICAqXG4gICAqIElmIHlvdSBkbyBuZWVkIHRvIHVwZGF0ZSBhIGNoaWxkIGFzIGl0IGxlYXZlcyB5b3UgY2FuIHByb3ZpZGUgYSBgY2hpbGRGYWN0b3J5YFxuICAgKiB0byB3cmFwIGV2ZXJ5IGNoaWxkLCBldmVuIHRoZSBvbmVzIHRoYXQgYXJlIGxlYXZpbmcuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKGNoaWxkOiBSZWFjdEVsZW1lbnQpIC0+IFJlYWN0RWxlbWVudFxuICAgKi9cbiAgY2hpbGRGYWN0b3J5OiBQcm9wVHlwZXMuZnVuY1xufSA6IHt9O1xuVHJhbnNpdGlvbkdyb3VwLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IFRyYW5zaXRpb25Hcm91cDsiLCJpbXBvcnQgc2V0UHJvdG90eXBlT2YgZnJvbSBcIi4vc2V0UHJvdG90eXBlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG4gIHJldHVybiBzZWxmO1xufSIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VG91Y2hSaXBwbGVVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVRvdWNoUmlwcGxlJywgc2xvdCk7XG59XG5jb25zdCB0b3VjaFJpcHBsZUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlUb3VjaFJpcHBsZScsIFsncm9vdCcsICdyaXBwbGUnLCAncmlwcGxlVmlzaWJsZScsICdyaXBwbGVQdWxzYXRlJywgJ2NoaWxkJywgJ2NoaWxkTGVhdmluZycsICdjaGlsZFB1bHNhdGUnXSk7XG5leHBvcnQgZGVmYXVsdCB0b3VjaFJpcHBsZUNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2VudGVyXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiXTtcbmxldCBfID0gdCA9PiB0LFxuICBfdCxcbiAgX3QyLFxuICBfdDMsXG4gIF90NDtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsga2V5ZnJhbWVzIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBSaXBwbGUgZnJvbSAnLi9SaXBwbGUnO1xuaW1wb3J0IHRvdWNoUmlwcGxlQ2xhc3NlcyBmcm9tICcuL3RvdWNoUmlwcGxlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgRFVSQVRJT04gPSA1NTA7XG5leHBvcnQgY29uc3QgREVMQVlfUklQUExFID0gODA7XG5jb25zdCBlbnRlcktleWZyYW1lID0ga2V5ZnJhbWVzKF90IHx8IChfdCA9IF9gXG4gIDAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDApO1xuICAgIG9wYWNpdHk6IDAuMTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XG4gICAgb3BhY2l0eTogMC4zO1xuICB9XG5gKSk7XG5jb25zdCBleGl0S2V5ZnJhbWUgPSBrZXlmcmFtZXMoX3QyIHx8IChfdDIgPSBfYFxuICAwJSB7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cbmApKTtcbmNvbnN0IHB1bHNhdGVLZXlmcmFtZSA9IGtleWZyYW1lcyhfdDMgfHwgKF90MyA9IF9gXG4gIDAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xuICB9XG5cbiAgNTAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDAuOTIpO1xuICB9XG5cbiAgMTAwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgfVxuYCkpO1xuZXhwb3J0IGNvbnN0IFRvdWNoUmlwcGxlUm9vdCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aVRvdWNoUmlwcGxlJyxcbiAgc2xvdDogJ1Jvb3QnXG59KSh7XG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgekluZGV4OiAwLFxuICB0b3A6IDAsXG4gIHJpZ2h0OiAwLFxuICBib3R0b206IDAsXG4gIGxlZnQ6IDAsXG4gIGJvcmRlclJhZGl1czogJ2luaGVyaXQnXG59KTtcblxuLy8gVGhpcyBgc3R5bGVkKClgIGZ1bmN0aW9uIGludm9rZXMga2V5ZnJhbWVzLiBgc3R5bGVkLWNvbXBvbmVudHNgIG9ubHkgc3VwcG9ydHMga2V5ZnJhbWVzXG4vLyBpbiBzdHJpbmcgdGVtcGxhdGVzLiBEbyBub3QgY29udmVydCB0aGVzZSBzdHlsZXMgaW4gSlMgb2JqZWN0IGFzIGl0IHdpbGwgYnJlYWsuXG5leHBvcnQgY29uc3QgVG91Y2hSaXBwbGVSaXBwbGUgPSBzdHlsZWQoUmlwcGxlLCB7XG4gIG5hbWU6ICdNdWlUb3VjaFJpcHBsZScsXG4gIHNsb3Q6ICdSaXBwbGUnXG59KShfdDQgfHwgKF90NCA9IF9gXG4gIG9wYWNpdHk6IDA7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcblxuICAmLiR7MH0ge1xuICAgIG9wYWNpdHk6IDAuMztcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xuICAgIGFuaW1hdGlvbi1uYW1lOiAkezB9O1xuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogJHswfW1zO1xuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ICR7MH07XG4gIH1cblxuICAmLiR7MH0ge1xuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogJHswfW1zO1xuICB9XG5cbiAgJiAuJHswfSB7XG4gICAgb3BhY2l0eTogMTtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIGJhY2tncm91bmQtY29sb3I6IGN1cnJlbnRDb2xvcjtcbiAgfVxuXG4gICYgLiR7MH0ge1xuICAgIG9wYWNpdHk6IDA7XG4gICAgYW5pbWF0aW9uLW5hbWU6ICR7MH07XG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAkezB9bXM7XG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogJHswfTtcbiAgfVxuXG4gICYgLiR7MH0ge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAvKiBAbm9mbGlwICovXG4gICAgbGVmdDogMHB4O1xuICAgIHRvcDogMDtcbiAgICBhbmltYXRpb24tbmFtZTogJHswfTtcbiAgICBhbmltYXRpb24tZHVyYXRpb246IDI1MDBtcztcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiAkezB9O1xuICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IGluZmluaXRlO1xuICAgIGFuaW1hdGlvbi1kZWxheTogMjAwbXM7XG4gIH1cbmApLCB0b3VjaFJpcHBsZUNsYXNzZXMucmlwcGxlVmlzaWJsZSwgZW50ZXJLZXlmcmFtZSwgRFVSQVRJT04sICh7XG4gIHRoZW1lXG59KSA9PiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0LCB0b3VjaFJpcHBsZUNsYXNzZXMucmlwcGxlUHVsc2F0ZSwgKHtcbiAgdGhlbWVcbn0pID0+IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5jaGlsZCwgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkTGVhdmluZywgZXhpdEtleWZyYW1lLCBEVVJBVElPTiwgKHtcbiAgdGhlbWVcbn0pID0+IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5jaGlsZFB1bHNhdGUsIHB1bHNhdGVLZXlmcmFtZSwgKHtcbiAgdGhlbWVcbn0pID0+IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQpO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKlxuICogVE9ETyB2NTogTWFrZSBwcml2YXRlXG4gKi9cbmNvbnN0IFRvdWNoUmlwcGxlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVG91Y2hSaXBwbGUoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVRvdWNoUmlwcGxlJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2VudGVyOiBjZW50ZXJQcm9wID0gZmFsc2UsXG4gICAgICBjbGFzc2VzID0ge30sXG4gICAgICBjbGFzc05hbWVcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgW3JpcHBsZXMsIHNldFJpcHBsZXNdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuICBjb25zdCBuZXh0S2V5ID0gUmVhY3QudXNlUmVmKDApO1xuICBjb25zdCByaXBwbGVDYWxsYmFjayA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocmlwcGxlQ2FsbGJhY2suY3VycmVudCkge1xuICAgICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCgpO1xuICAgICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCA9IG51bGw7XG4gICAgfVxuICB9LCBbcmlwcGxlc10pO1xuXG4gIC8vIFVzZWQgdG8gZmlsdGVyIG91dCBtb3VzZSBlbXVsYXRlZCBldmVudHMgb24gbW9iaWxlLlxuICBjb25zdCBpZ25vcmluZ01vdXNlRG93biA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIC8vIFdlIHVzZSBhIHRpbWVyIGluIG9yZGVyIHRvIG9ubHkgc2hvdyB0aGUgcmlwcGxlcyBmb3IgdG91Y2ggXCJjbGlja1wiIGxpa2UgZXZlbnRzLlxuICAvLyBXZSBkb24ndCB3YW50IHRvIGRpc3BsYXkgdGhlIHJpcHBsZSBmb3IgdG91Y2ggc2Nyb2xsIGV2ZW50cy5cbiAgY29uc3Qgc3RhcnRUaW1lciA9IFJlYWN0LnVzZVJlZigwKTtcblxuICAvLyBUaGlzIGlzIHRoZSBob29rIGNhbGxlZCBvbmNlIHRoZSBwcmV2aW91cyB0aW1lb3V0IGlzIHJlYWR5LlxuICBjb25zdCBzdGFydFRpbWVyQ29tbWl0ID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBjb250YWluZXIgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChzdGFydFRpbWVyLmN1cnJlbnQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHN0YXJ0VGltZXIuY3VycmVudCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW10pO1xuICBjb25zdCBzdGFydENvbW1pdCA9IFJlYWN0LnVzZUNhbGxiYWNrKHBhcmFtcyA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgcHVsc2F0ZSxcbiAgICAgIHJpcHBsZVgsXG4gICAgICByaXBwbGVZLFxuICAgICAgcmlwcGxlU2l6ZSxcbiAgICAgIGNiXG4gICAgfSA9IHBhcmFtcztcbiAgICBzZXRSaXBwbGVzKG9sZFJpcHBsZXMgPT4gWy4uLm9sZFJpcHBsZXMsIC8qI19fUFVSRV9fKi9fanN4KFRvdWNoUmlwcGxlUmlwcGxlLCB7XG4gICAgICBjbGFzc2VzOiB7XG4gICAgICAgIHJpcHBsZTogY2xzeChjbGFzc2VzLnJpcHBsZSwgdG91Y2hSaXBwbGVDbGFzc2VzLnJpcHBsZSksXG4gICAgICAgIHJpcHBsZVZpc2libGU6IGNsc3goY2xhc3Nlcy5yaXBwbGVWaXNpYmxlLCB0b3VjaFJpcHBsZUNsYXNzZXMucmlwcGxlVmlzaWJsZSksXG4gICAgICAgIHJpcHBsZVB1bHNhdGU6IGNsc3goY2xhc3Nlcy5yaXBwbGVQdWxzYXRlLCB0b3VjaFJpcHBsZUNsYXNzZXMucmlwcGxlUHVsc2F0ZSksXG4gICAgICAgIGNoaWxkOiBjbHN4KGNsYXNzZXMuY2hpbGQsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5jaGlsZCksXG4gICAgICAgIGNoaWxkTGVhdmluZzogY2xzeChjbGFzc2VzLmNoaWxkTGVhdmluZywgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkTGVhdmluZyksXG4gICAgICAgIGNoaWxkUHVsc2F0ZTogY2xzeChjbGFzc2VzLmNoaWxkUHVsc2F0ZSwgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkUHVsc2F0ZSlcbiAgICAgIH0sXG4gICAgICB0aW1lb3V0OiBEVVJBVElPTixcbiAgICAgIHB1bHNhdGU6IHB1bHNhdGUsXG4gICAgICByaXBwbGVYOiByaXBwbGVYLFxuICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgIHJpcHBsZVNpemU6IHJpcHBsZVNpemVcbiAgICB9LCBuZXh0S2V5LmN1cnJlbnQpXSk7XG4gICAgbmV4dEtleS5jdXJyZW50ICs9IDE7XG4gICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCA9IGNiO1xuICB9LCBbY2xhc3Nlc10pO1xuICBjb25zdCBzdGFydCA9IFJlYWN0LnVzZUNhbGxiYWNrKChldmVudCA9IHt9LCBvcHRpb25zID0ge30sIGNiID0gKCkgPT4ge30pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBwdWxzYXRlID0gZmFsc2UsXG4gICAgICBjZW50ZXIgPSBjZW50ZXJQcm9wIHx8IG9wdGlvbnMucHVsc2F0ZSxcbiAgICAgIGZha2VFbGVtZW50ID0gZmFsc2UgLy8gRm9yIHRlc3QgcHVycG9zZXNcbiAgICB9ID0gb3B0aW9ucztcbiAgICBpZiAoKGV2ZW50ID09IG51bGwgPyB2b2lkIDAgOiBldmVudC50eXBlKSA9PT0gJ21vdXNlZG93bicgJiYgaWdub3JpbmdNb3VzZURvd24uY3VycmVudCkge1xuICAgICAgaWdub3JpbmdNb3VzZURvd24uY3VycmVudCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoKGV2ZW50ID09IG51bGwgPyB2b2lkIDAgOiBldmVudC50eXBlKSA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgZWxlbWVudCA9IGZha2VFbGVtZW50ID8gbnVsbCA6IGNvbnRhaW5lci5jdXJyZW50O1xuICAgIGNvbnN0IHJlY3QgPSBlbGVtZW50ID8gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMFxuICAgIH07XG5cbiAgICAvLyBHZXQgdGhlIHNpemUgb2YgdGhlIHJpcHBsZVxuICAgIGxldCByaXBwbGVYO1xuICAgIGxldCByaXBwbGVZO1xuICAgIGxldCByaXBwbGVTaXplO1xuICAgIGlmIChjZW50ZXIgfHwgZXZlbnQgPT09IHVuZGVmaW5lZCB8fCBldmVudC5jbGllbnRYID09PSAwICYmIGV2ZW50LmNsaWVudFkgPT09IDAgfHwgIWV2ZW50LmNsaWVudFggJiYgIWV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKHJlY3Qud2lkdGggLyAyKTtcbiAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKHJlY3QuaGVpZ2h0IC8gMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2xpZW50WCxcbiAgICAgICAgY2xpZW50WVxuICAgICAgfSA9IGV2ZW50LnRvdWNoZXMgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGggPiAwID8gZXZlbnQudG91Y2hlc1swXSA6IGV2ZW50O1xuICAgICAgcmlwcGxlWCA9IE1hdGgucm91bmQoY2xpZW50WCAtIHJlY3QubGVmdCk7XG4gICAgICByaXBwbGVZID0gTWF0aC5yb3VuZChjbGllbnRZIC0gcmVjdC50b3ApO1xuICAgIH1cbiAgICBpZiAoY2VudGVyKSB7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KCgyICogcmVjdC53aWR0aCAqKiAyICsgcmVjdC5oZWlnaHQgKiogMikgLyAzKTtcblxuICAgICAgLy8gRm9yIHNvbWUgcmVhc29uIHRoZSBhbmltYXRpb24gaXMgYnJva2VuIG9uIE1vYmlsZSBDaHJvbWUgaWYgdGhlIHNpemUgaXMgZXZlbi5cbiAgICAgIGlmIChyaXBwbGVTaXplICUgMiA9PT0gMCkge1xuICAgICAgICByaXBwbGVTaXplICs9IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNpemVYID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudFdpZHRoIDogMCkgLSByaXBwbGVYKSwgcmlwcGxlWCkgKiAyICsgMjtcbiAgICAgIGNvbnN0IHNpemVZID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudEhlaWdodCA6IDApIC0gcmlwcGxlWSksIHJpcHBsZVkpICogMiArIDI7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KHNpemVYICoqIDIgKyBzaXplWSAqKiAyKTtcbiAgICB9XG5cbiAgICAvLyBUb3VjaGUgZGV2aWNlc1xuICAgIGlmIChldmVudCAhPSBudWxsICYmIGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIC8vIGNoZWNrIHRoYXQgdGhpcyBpc24ndCBhbm90aGVyIHRvdWNoc3RhcnQgZHVlIHRvIG11bHRpdG91Y2hcbiAgICAgIC8vIG90aGVyd2lzZSB3ZSB3aWxsIG9ubHkgY2xlYXIgYSBzaW5nbGUgdGltZXIgd2hlbiB1bm1vdW50aW5nIHdoaWxlIHR3b1xuICAgICAgLy8gYXJlIHJ1bm5pbmdcbiAgICAgIGlmIChzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgLy8gUHJlcGFyZSB0aGUgcmlwcGxlIGVmZmVjdC5cbiAgICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gKCkgPT4ge1xuICAgICAgICAgIHN0YXJ0Q29tbWl0KHtcbiAgICAgICAgICAgIHB1bHNhdGUsXG4gICAgICAgICAgICByaXBwbGVYLFxuICAgICAgICAgICAgcmlwcGxlWSxcbiAgICAgICAgICAgIHJpcHBsZVNpemUsXG4gICAgICAgICAgICBjYlxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvLyBEZWxheSB0aGUgZXhlY3V0aW9uIG9mIHRoZSByaXBwbGUgZWZmZWN0LlxuICAgICAgICBzdGFydFRpbWVyLmN1cnJlbnQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBpZiAoc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KSB7XG4gICAgICAgICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQoKTtcbiAgICAgICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBERUxBWV9SSVBQTEUpOyAvLyBXZSBoYXZlIHRvIG1ha2UgYSB0cmFkZW9mZiB3aXRoIHRoaXMgdmFsdWUuXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0Q29tbWl0KHtcbiAgICAgICAgcHVsc2F0ZSxcbiAgICAgICAgcmlwcGxlWCxcbiAgICAgICAgcmlwcGxlWSxcbiAgICAgICAgcmlwcGxlU2l6ZSxcbiAgICAgICAgY2JcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2NlbnRlclByb3AsIHN0YXJ0Q29tbWl0XSk7XG4gIGNvbnN0IHB1bHNhdGUgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc3RhcnQoe30sIHtcbiAgICAgIHB1bHNhdGU6IHRydWVcbiAgICB9KTtcbiAgfSwgW3N0YXJ0XSk7XG4gIGNvbnN0IHN0b3AgPSBSZWFjdC51c2VDYWxsYmFjaygoZXZlbnQsIGNiKSA9PiB7XG4gICAgY2xlYXJUaW1lb3V0KHN0YXJ0VGltZXIuY3VycmVudCk7XG5cbiAgICAvLyBUaGUgdG91Y2ggaW50ZXJhY3Rpb24gb2NjdXJzIHRvbyBxdWlja2x5LlxuICAgIC8vIFdlIHN0aWxsIHdhbnQgdG8gc2hvdyByaXBwbGUgZWZmZWN0LlxuICAgIGlmICgoZXZlbnQgPT0gbnVsbCA/IHZvaWQgMCA6IGV2ZW50LnR5cGUpID09PSAndG91Y2hlbmQnICYmIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCkge1xuICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KCk7XG4gICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBudWxsO1xuICAgICAgc3RhcnRUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHN0b3AoZXZlbnQsIGNiKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBudWxsO1xuICAgIHNldFJpcHBsZXMob2xkUmlwcGxlcyA9PiB7XG4gICAgICBpZiAob2xkUmlwcGxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBvbGRSaXBwbGVzLnNsaWNlKDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9sZFJpcHBsZXM7XG4gICAgfSk7XG4gICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCA9IGNiO1xuICB9LCBbXSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCAoKSA9PiAoe1xuICAgIHB1bHNhdGUsXG4gICAgc3RhcnQsXG4gICAgc3RvcFxuICB9KSwgW3B1bHNhdGUsIHN0YXJ0LCBzdG9wXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUb3VjaFJpcHBsZVJvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3godG91Y2hSaXBwbGVDbGFzc2VzLnJvb3QsIGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IGNvbnRhaW5lclxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChUcmFuc2l0aW9uR3JvdXAsIHtcbiAgICAgIGNvbXBvbmVudDogbnVsbCxcbiAgICAgIGV4aXQ6IHRydWUsXG4gICAgICBjaGlsZHJlbjogcmlwcGxlc1xuICAgIH0pXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVG91Y2hSaXBwbGUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIHN0YXJ0cyBhdCB0aGUgY2VudGVyIG9mIHRoZSBjb21wb25lbnRcbiAgICogcmF0aGVyIHRoYW4gYXQgdGhlIHBvaW50IG9mIGludGVyYWN0aW9uLlxuICAgKi9cbiAgY2VudGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZ1xufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFRvdWNoUmlwcGxlOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5mdW5jdGlvbiBSaXBwbGUocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZSxcbiAgICBjbGFzc2VzLFxuICAgIHB1bHNhdGUgPSBmYWxzZSxcbiAgICByaXBwbGVYLFxuICAgIHJpcHBsZVksXG4gICAgcmlwcGxlU2l6ZSxcbiAgICBpbjogaW5Qcm9wLFxuICAgIG9uRXhpdGVkLFxuICAgIHRpbWVvdXRcbiAgfSA9IHByb3BzO1xuICBjb25zdCBbbGVhdmluZywgc2V0TGVhdmluZ10gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IHJpcHBsZUNsYXNzTmFtZSA9IGNsc3goY2xhc3NOYW1lLCBjbGFzc2VzLnJpcHBsZSwgY2xhc3Nlcy5yaXBwbGVWaXNpYmxlLCBwdWxzYXRlICYmIGNsYXNzZXMucmlwcGxlUHVsc2F0ZSk7XG4gIGNvbnN0IHJpcHBsZVN0eWxlcyA9IHtcbiAgICB3aWR0aDogcmlwcGxlU2l6ZSxcbiAgICBoZWlnaHQ6IHJpcHBsZVNpemUsXG4gICAgdG9wOiAtKHJpcHBsZVNpemUgLyAyKSArIHJpcHBsZVksXG4gICAgbGVmdDogLShyaXBwbGVTaXplIC8gMikgKyByaXBwbGVYXG4gIH07XG4gIGNvbnN0IGNoaWxkQ2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLmNoaWxkLCBsZWF2aW5nICYmIGNsYXNzZXMuY2hpbGRMZWF2aW5nLCBwdWxzYXRlICYmIGNsYXNzZXMuY2hpbGRQdWxzYXRlKTtcbiAgaWYgKCFpblByb3AgJiYgIWxlYXZpbmcpIHtcbiAgICBzZXRMZWF2aW5nKHRydWUpO1xuICB9XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFpblByb3AgJiYgb25FeGl0ZWQgIT0gbnVsbCkge1xuICAgICAgLy8gcmVhY3QtdHJhbnNpdGlvbi1ncm91cCNvbkV4aXRlZFxuICAgICAgY29uc3QgdGltZW91dElkID0gc2V0VGltZW91dChvbkV4aXRlZCwgdGltZW91dCk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sIFtvbkV4aXRlZCwgaW5Qcm9wLCB0aW1lb3V0XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogcmlwcGxlQ2xhc3NOYW1lLFxuICAgIHN0eWxlOiByaXBwbGVTdHlsZXMsXG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IGNoaWxkQ2xhc3NOYW1lXG4gICAgfSlcbiAgfSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBSaXBwbGUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmUgLSBpbmplY3RlZCBmcm9tIFRyYW5zaXRpb25Hcm91cFxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQGlnbm9yZSAtIGluamVjdGVkIGZyb20gVHJhbnNpdGlvbkdyb3VwXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgcHVsc2F0ZXMsIHR5cGljYWxseSBpbmRpY2F0aW5nIHRoZSBrZXlib2FyZCBmb2N1cyBzdGF0ZSBvZiBhbiBlbGVtZW50LlxuICAgKi9cbiAgcHVsc2F0ZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBEaWFtZXRlciBvZiB0aGUgcmlwcGxlLlxuICAgKi9cbiAgcmlwcGxlU2l6ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIEhvcml6b250YWwgcG9zaXRpb24gb2YgdGhlIHJpcHBsZSBjZW50ZXIuXG4gICAqL1xuICByaXBwbGVYOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogVmVydGljYWwgcG9zaXRpb24gb2YgdGhlIHJpcHBsZSBjZW50ZXIuXG4gICAqL1xuICByaXBwbGVZOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogZXhpdCBkZWxheVxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUmlwcGxlOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QnV0dG9uQmFzZVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQnV0dG9uQmFzZScsIHNsb3QpO1xufVxuY29uc3QgYnV0dG9uQmFzZUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlCdXR0b25CYXNlJywgWydyb290JywgJ2Rpc2FibGVkJywgJ2ZvY3VzVmlzaWJsZSddKTtcbmV4cG9ydCBkZWZhdWx0IGJ1dHRvbkJhc2VDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFjdGlvblwiLCBcImNlbnRlclJpcHBsZVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlUmlwcGxlXCIsIFwiZGlzYWJsZVRvdWNoUmlwcGxlXCIsIFwiZm9jdXNSaXBwbGVcIiwgXCJmb2N1c1Zpc2libGVDbGFzc05hbWVcIiwgXCJMaW5rQ29tcG9uZW50XCIsIFwib25CbHVyXCIsIFwib25DbGlja1wiLCBcIm9uQ29udGV4dE1lbnVcIiwgXCJvbkRyYWdMZWF2ZVwiLCBcIm9uRm9jdXNcIiwgXCJvbkZvY3VzVmlzaWJsZVwiLCBcIm9uS2V5RG93blwiLCBcIm9uS2V5VXBcIiwgXCJvbk1vdXNlRG93blwiLCBcIm9uTW91c2VMZWF2ZVwiLCBcIm9uTW91c2VVcFwiLCBcIm9uVG91Y2hFbmRcIiwgXCJvblRvdWNoTW92ZVwiLCBcIm9uVG91Y2hTdGFydFwiLCBcInRhYkluZGV4XCIsIFwiVG91Y2hSaXBwbGVQcm9wc1wiLCBcInRvdWNoUmlwcGxlUmVmXCIsIFwidHlwZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLCByZWZUeXBlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlRXZlbnRDYWxsYmFjayBmcm9tICcuLi91dGlscy91c2VFdmVudENhbGxiYWNrJztcbmltcG9ydCB1c2VJc0ZvY3VzVmlzaWJsZSBmcm9tICcuLi91dGlscy91c2VJc0ZvY3VzVmlzaWJsZSc7XG5pbXBvcnQgVG91Y2hSaXBwbGUgZnJvbSAnLi9Ub3VjaFJpcHBsZSc7XG5pbXBvcnQgYnV0dG9uQmFzZUNsYXNzZXMsIHsgZ2V0QnV0dG9uQmFzZVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vYnV0dG9uQmFzZUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBkaXNhYmxlZCxcbiAgICBmb2N1c1Zpc2libGUsXG4gICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGZvY3VzVmlzaWJsZSAmJiAnZm9jdXNWaXNpYmxlJ11cbiAgfTtcbiAgY29uc3QgY29tcG9zZWRDbGFzc2VzID0gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEJ1dHRvbkJhc2VVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xuICBpZiAoZm9jdXNWaXNpYmxlICYmIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSkge1xuICAgIGNvbXBvc2VkQ2xhc3Nlcy5yb290ICs9IGAgJHtmb2N1c1Zpc2libGVDbGFzc05hbWV9YDtcbiAgfVxuICByZXR1cm4gY29tcG9zZWRDbGFzc2VzO1xufTtcbmV4cG9ydCBjb25zdCBCdXR0b25CYXNlUm9vdCA9IHN0eWxlZCgnYnV0dG9uJywge1xuICBuYW1lOiAnTXVpQnV0dG9uQmFzZScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoe1xuICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIC8vIFJlc2V0IGRlZmF1bHQgdmFsdWVcbiAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgb3V0bGluZTogMCxcbiAgYm9yZGVyOiAwLFxuICBtYXJnaW46IDAsXG4gIC8vIFJlbW92ZSB0aGUgbWFyZ2luIGluIFNhZmFyaVxuICBib3JkZXJSYWRpdXM6IDAsXG4gIHBhZGRpbmc6IDAsXG4gIC8vIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBGaXJlZm94XG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICBNb3pBcHBlYXJhbmNlOiAnbm9uZScsXG4gIC8vIFJlc2V0XG4gIFdlYmtpdEFwcGVhcmFuY2U6ICdub25lJyxcbiAgLy8gUmVzZXRcbiAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgLy8gU28gd2UgdGFrZSBwcmVjZWRlbnQgb3ZlciB0aGUgc3R5bGUgb2YgYSBuYXRpdmUgPGEgLz4gZWxlbWVudC5cbiAgY29sb3I6ICdpbmhlcml0JyxcbiAgJyY6Oi1tb3otZm9jdXMtaW5uZXInOiB7XG4gICAgYm9yZGVyU3R5bGU6ICdub25lJyAvLyBSZW1vdmUgRmlyZWZveCBkb3R0ZWQgb3V0bGluZS5cbiAgfSxcbiAgW2AmLiR7YnV0dG9uQmFzZUNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgLy8gRGlzYWJsZSBsaW5rIGludGVyYWN0aW9uc1xuICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gIH0sXG4gICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgY29sb3JBZGp1c3Q6ICdleGFjdCdcbiAgfVxufSk7XG5cbi8qKlxuICogYEJ1dHRvbkJhc2VgIGNvbnRhaW5zIGFzIGZldyBzdHlsZXMgYXMgcG9zc2libGUuXG4gKiBJdCBhaW1zIHRvIGJlIGEgc2ltcGxlIGJ1aWxkaW5nIGJsb2NrIGZvciBjcmVhdGluZyBhIGJ1dHRvbi5cbiAqIEl0IGNvbnRhaW5zIGEgbG9hZCBvZiBzdHlsZSByZXNldCBhbmQgc29tZSBmb2N1cy9yaXBwbGUgbG9naWMuXG4gKi9cbmNvbnN0IEJ1dHRvbkJhc2UgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBCdXR0b25CYXNlKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlCdXR0b25CYXNlJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgYWN0aW9uLFxuICAgICAgY2VudGVyUmlwcGxlID0gZmFsc2UsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdidXR0b24nLFxuICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVSaXBwbGUgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVUb3VjaFJpcHBsZSA9IGZhbHNlLFxuICAgICAgZm9jdXNSaXBwbGUgPSBmYWxzZSxcbiAgICAgIExpbmtDb21wb25lbnQgPSAnYScsXG4gICAgICBvbkJsdXIsXG4gICAgICBvbkNsaWNrLFxuICAgICAgb25Db250ZXh0TWVudSxcbiAgICAgIG9uRHJhZ0xlYXZlLFxuICAgICAgb25Gb2N1cyxcbiAgICAgIG9uRm9jdXNWaXNpYmxlLFxuICAgICAgb25LZXlEb3duLFxuICAgICAgb25LZXlVcCxcbiAgICAgIG9uTW91c2VEb3duLFxuICAgICAgb25Nb3VzZUxlYXZlLFxuICAgICAgb25Nb3VzZVVwLFxuICAgICAgb25Ub3VjaEVuZCxcbiAgICAgIG9uVG91Y2hNb3ZlLFxuICAgICAgb25Ub3VjaFN0YXJ0LFxuICAgICAgdGFiSW5kZXggPSAwLFxuICAgICAgVG91Y2hSaXBwbGVQcm9wcyxcbiAgICAgIHRvdWNoUmlwcGxlUmVmLFxuICAgICAgdHlwZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBidXR0b25SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IHJpcHBsZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmlwcGxlUmVmID0gdXNlRm9ya1JlZihyaXBwbGVSZWYsIHRvdWNoUmlwcGxlUmVmKTtcbiAgY29uc3Qge1xuICAgIGlzRm9jdXNWaXNpYmxlUmVmLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzVmlzaWJsZSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXJWaXNpYmxlLFxuICAgIHJlZjogZm9jdXNWaXNpYmxlUmVmXG4gIH0gPSB1c2VJc0ZvY3VzVmlzaWJsZSgpO1xuICBjb25zdCBbZm9jdXNWaXNpYmxlLCBzZXRGb2N1c1Zpc2libGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBpZiAoZGlzYWJsZWQgJiYgZm9jdXNWaXNpYmxlKSB7XG4gICAgc2V0Rm9jdXNWaXNpYmxlKGZhbHNlKTtcbiAgfVxuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGFjdGlvbiwgKCkgPT4gKHtcbiAgICBmb2N1c1Zpc2libGU6ICgpID0+IHtcbiAgICAgIHNldEZvY3VzVmlzaWJsZSh0cnVlKTtcbiAgICAgIGJ1dHRvblJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuICB9KSwgW10pO1xuICBjb25zdCBbbW91bnRlZFN0YXRlLCBzZXRNb3VudGVkU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldE1vdW50ZWRTdGF0ZSh0cnVlKTtcbiAgfSwgW10pO1xuICBjb25zdCBlbmFibGVUb3VjaFJpcHBsZSA9IG1vdW50ZWRTdGF0ZSAmJiAhZGlzYWJsZVJpcHBsZSAmJiAhZGlzYWJsZWQ7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGZvY3VzVmlzaWJsZSAmJiBmb2N1c1JpcHBsZSAmJiAhZGlzYWJsZVJpcHBsZSAmJiBtb3VudGVkU3RhdGUpIHtcbiAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnB1bHNhdGUoKTtcbiAgICB9XG4gIH0sIFtkaXNhYmxlUmlwcGxlLCBmb2N1c1JpcHBsZSwgZm9jdXNWaXNpYmxlLCBtb3VudGVkU3RhdGVdKTtcbiAgZnVuY3Rpb24gdXNlUmlwcGxlSGFuZGxlcihyaXBwbGVBY3Rpb24sIGV2ZW50Q2FsbGJhY2ssIHNraXBSaXBwbGVBY3Rpb24gPSBkaXNhYmxlVG91Y2hSaXBwbGUpIHtcbiAgICByZXR1cm4gdXNlRXZlbnRDYWxsYmFjayhldmVudCA9PiB7XG4gICAgICBpZiAoZXZlbnRDYWxsYmFjaykge1xuICAgICAgICBldmVudENhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGlnbm9yZSA9IHNraXBSaXBwbGVBY3Rpb247XG4gICAgICBpZiAoIWlnbm9yZSAmJiByaXBwbGVSZWYuY3VycmVudCkge1xuICAgICAgICByaXBwbGVSZWYuY3VycmVudFtyaXBwbGVBY3Rpb25dKGV2ZW50KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICB9XG4gIGNvbnN0IGhhbmRsZU1vdXNlRG93biA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0YXJ0Jywgb25Nb3VzZURvd24pO1xuICBjb25zdCBoYW5kbGVDb250ZXh0TWVudSA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvbkNvbnRleHRNZW51KTtcbiAgY29uc3QgaGFuZGxlRHJhZ0xlYXZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uRHJhZ0xlYXZlKTtcbiAgY29uc3QgaGFuZGxlTW91c2VVcCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvbk1vdXNlVXApO1xuICBjb25zdCBoYW5kbGVNb3VzZUxlYXZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIGV2ZW50ID0+IHtcbiAgICBpZiAoZm9jdXNWaXNpYmxlKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBpZiAob25Nb3VzZUxlYXZlKSB7XG4gICAgICBvbk1vdXNlTGVhdmUoZXZlbnQpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZVRvdWNoU3RhcnQgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdGFydCcsIG9uVG91Y2hTdGFydCk7XG4gIGNvbnN0IGhhbmRsZVRvdWNoRW5kID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uVG91Y2hFbmQpO1xuICBjb25zdCBoYW5kbGVUb3VjaE1vdmUgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25Ub3VjaE1vdmUpO1xuICBjb25zdCBoYW5kbGVCbHVyID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIGV2ZW50ID0+IHtcbiAgICBoYW5kbGVCbHVyVmlzaWJsZShldmVudCk7XG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPT09IGZhbHNlKSB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUoZmFsc2UpO1xuICAgIH1cbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgfSwgZmFsc2UpO1xuICBjb25zdCBoYW5kbGVGb2N1cyA9IHVzZUV2ZW50Q2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIC8vIEZpeCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83NzY5XG4gICAgaWYgKCFidXR0b25SZWYuY3VycmVudCkge1xuICAgICAgYnV0dG9uUmVmLmN1cnJlbnQgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICAgIH1cbiAgICBoYW5kbGVGb2N1c1Zpc2libGUoZXZlbnQpO1xuICAgIGlmIChpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50ID09PSB0cnVlKSB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUodHJ1ZSk7XG4gICAgICBpZiAob25Gb2N1c1Zpc2libGUpIHtcbiAgICAgICAgb25Gb2N1c1Zpc2libGUoZXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob25Gb2N1cykge1xuICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaXNOb25OYXRpdmVCdXR0b24gPSAoKSA9PiB7XG4gICAgY29uc3QgYnV0dG9uID0gYnV0dG9uUmVmLmN1cnJlbnQ7XG4gICAgcmV0dXJuIGNvbXBvbmVudCAmJiBjb21wb25lbnQgIT09ICdidXR0b24nICYmICEoYnV0dG9uLnRhZ05hbWUgPT09ICdBJyAmJiBidXR0b24uaHJlZik7XG4gIH07XG5cbiAgLyoqXG4gICAqIElFMTEgc2hpbSBmb3IgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQvcmVwZWF0XG4gICAqL1xuICBjb25zdCBrZXlkb3duUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IHVzZUV2ZW50Q2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIC8vIENoZWNrIGlmIGtleSBpcyBhbHJlYWR5IGRvd24gdG8gYXZvaWQgcmVwZWF0cyBiZWluZyBjb3VudGVkIGFzIG11bHRpcGxlIGFjdGl2YXRpb25zXG4gICAgaWYgKGZvY3VzUmlwcGxlICYmICFrZXlkb3duUmVmLmN1cnJlbnQgJiYgZm9jdXNWaXNpYmxlICYmIHJpcHBsZVJlZi5jdXJyZW50ICYmIGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICBrZXlkb3duUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQuc3RvcChldmVudCwgKCkgPT4ge1xuICAgICAgICByaXBwbGVSZWYuY3VycmVudC5zdGFydChldmVudCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gZXZlbnQuY3VycmVudFRhcmdldCAmJiBpc05vbk5hdGl2ZUJ1dHRvbigpICYmIGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBpZiAob25LZXlEb3duKSB7XG4gICAgICBvbktleURvd24oZXZlbnQpO1xuICAgIH1cblxuICAgIC8vIEtleWJvYXJkIGFjY2Vzc2liaWxpdHkgZm9yIG5vbiBpbnRlcmFjdGl2ZSBlbGVtZW50c1xuICAgIGlmIChldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICdFbnRlcicgJiYgIWRpc2FibGVkKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgICAgb25DbGljayhldmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlS2V5VXAgPSB1c2VFdmVudENhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICAvLyBjYWxsaW5nIHByZXZlbnREZWZhdWx0IGluIGtleVVwIG9uIGEgPGJ1dHRvbj4gd2lsbCBub3QgZGlzcGF0Y2ggYSBjbGljayBldmVudCBpZiBTcGFjZSBpcyBwcmVzc2VkXG4gICAgLy8gaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9wL3NhbmRib3gvYnV0dG9uLWtleXVwLXByZXZlbnRkZWZhdWx0LWRuN2YwXG4gICAgaWYgKGZvY3VzUmlwcGxlICYmIGV2ZW50LmtleSA9PT0gJyAnICYmIHJpcHBsZVJlZi5jdXJyZW50ICYmIGZvY3VzVmlzaWJsZSAmJiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAga2V5ZG93blJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5zdG9wKGV2ZW50LCAoKSA9PiB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnB1bHNhdGUoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChvbktleVVwKSB7XG4gICAgICBvbktleVVwKGV2ZW50KTtcbiAgICB9XG5cbiAgICAvLyBLZXlib2FyZCBhY2Nlc3NpYmlsaXR5IGZvciBub24gaW50ZXJhY3RpdmUgZWxlbWVudHNcbiAgICBpZiAob25DbGljayAmJiBldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICcgJyAmJiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9KTtcbiAgbGV0IENvbXBvbmVudFByb3AgPSBjb21wb25lbnQ7XG4gIGlmIChDb21wb25lbnRQcm9wID09PSAnYnV0dG9uJyAmJiAob3RoZXIuaHJlZiB8fCBvdGhlci50bykpIHtcbiAgICBDb21wb25lbnRQcm9wID0gTGlua0NvbXBvbmVudDtcbiAgfVxuICBjb25zdCBidXR0b25Qcm9wcyA9IHt9O1xuICBpZiAoQ29tcG9uZW50UHJvcCA9PT0gJ2J1dHRvbicpIHtcbiAgICBidXR0b25Qcm9wcy50eXBlID0gdHlwZSA9PT0gdW5kZWZpbmVkID8gJ2J1dHRvbicgOiB0eXBlO1xuICAgIGJ1dHRvblByb3BzLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFvdGhlci5ocmVmICYmICFvdGhlci50bykge1xuICAgICAgYnV0dG9uUHJvcHMucm9sZSA9ICdidXR0b24nO1xuICAgIH1cbiAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgIGJ1dHRvblByb3BzWydhcmlhLWRpc2FibGVkJ10gPSBkaXNhYmxlZDtcbiAgICB9XG4gIH1cbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihyZWYsIGZvY3VzVmlzaWJsZVJlZiwgYnV0dG9uUmVmKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKGVuYWJsZVRvdWNoUmlwcGxlICYmICFyaXBwbGVSZWYuY3VycmVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBUaGUgYGNvbXBvbmVudGAgcHJvcCBwcm92aWRlZCB0byBCdXR0b25CYXNlIGlzIGludmFsaWQuJywgJ1BsZWFzZSBtYWtlIHN1cmUgdGhlIGNoaWxkcmVuIHByb3AgaXMgcmVuZGVyZWQgaW4gdGhpcyBjdXN0b20gY29tcG9uZW50LiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbZW5hYmxlVG91Y2hSaXBwbGVdKTtcbiAgfVxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY2VudGVyUmlwcGxlLFxuICAgIGNvbXBvbmVudCxcbiAgICBkaXNhYmxlZCxcbiAgICBkaXNhYmxlUmlwcGxlLFxuICAgIGRpc2FibGVUb3VjaFJpcHBsZSxcbiAgICBmb2N1c1JpcHBsZSxcbiAgICB0YWJJbmRleCxcbiAgICBmb2N1c1Zpc2libGVcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhCdXR0b25CYXNlUm9vdCwgX2V4dGVuZHMoe1xuICAgIGFzOiBDb21wb25lbnRQcm9wLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBvbkNvbnRleHRNZW51OiBoYW5kbGVDb250ZXh0TWVudSxcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1cyxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgb25LZXlVcDogaGFuZGxlS2V5VXAsXG4gICAgb25Nb3VzZURvd246IGhhbmRsZU1vdXNlRG93bixcbiAgICBvbk1vdXNlTGVhdmU6IGhhbmRsZU1vdXNlTGVhdmUsXG4gICAgb25Nb3VzZVVwOiBoYW5kbGVNb3VzZVVwLFxuICAgIG9uRHJhZ0xlYXZlOiBoYW5kbGVEcmFnTGVhdmUsXG4gICAgb25Ub3VjaEVuZDogaGFuZGxlVG91Y2hFbmQsXG4gICAgb25Ub3VjaE1vdmU6IGhhbmRsZVRvdWNoTW92ZSxcbiAgICBvblRvdWNoU3RhcnQ6IGhhbmRsZVRvdWNoU3RhcnQsXG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgdGFiSW5kZXg6IGRpc2FibGVkID8gLTEgOiB0YWJJbmRleCxcbiAgICB0eXBlOiB0eXBlXG4gIH0sIGJ1dHRvblByb3BzLCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbY2hpbGRyZW4sIGVuYWJsZVRvdWNoUmlwcGxlID9cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgLyogVG91Y2hSaXBwbGUgaXMgb25seSBuZWVkZWQgY2xpZW50LXNpZGUsIHgyIGJvb3N0IG9uIHRoZSBzZXJ2ZXIuICovXG4gICAgX2pzeChUb3VjaFJpcHBsZSwgX2V4dGVuZHMoe1xuICAgICAgcmVmOiBoYW5kbGVSaXBwbGVSZWYsXG4gICAgICBjZW50ZXI6IGNlbnRlclJpcHBsZVxuICAgIH0sIFRvdWNoUmlwcGxlUHJvcHMpKSA6IG51bGxdXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQnV0dG9uQmFzZS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBBIHJlZiBmb3IgaW1wZXJhdGl2ZSBhY3Rpb25zLlxuICAgKiBJdCBjdXJyZW50bHkgb25seSBzdXBwb3J0cyBgZm9jdXNWaXNpYmxlKClgIGFjdGlvbi5cbiAgICovXG4gIGFjdGlvbjogcmVmVHlwZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZXMgYXJlIGNlbnRlcmVkLlxuICAgKiBUaGV5IHdvbid0IHN0YXJ0IGF0IHRoZSBjdXJzb3IgaW50ZXJhY3Rpb24gcG9zaXRpb24uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBjZW50ZXJSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCBpcyBkaXNhYmxlZC5cbiAgICpcbiAgICog4pqg77iPIFdpdGhvdXQgYSByaXBwbGUgdGhlcmUgaXMgbm8gc3R5bGluZyBmb3IgOmZvY3VzLXZpc2libGUgYnkgZGVmYXVsdC4gQmUgc3VyZVxuICAgKiB0byBoaWdobGlnaHQgdGhlIGVsZW1lbnQgYnkgYXBwbHlpbmcgc2VwYXJhdGUgc3R5bGVzIHdpdGggdGhlIGAuTXVpLWZvY3VzVmlzaWJsZWAgY2xhc3MuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRvdWNoIHJpcHBsZSBlZmZlY3QgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlVG91Y2hSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFzZSBidXR0b24gd2lsbCBoYXZlIGEga2V5Ym9hcmQgZm9jdXMgcmlwcGxlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhpcyBwcm9wIGNhbiBoZWxwIGlkZW50aWZ5IHdoaWNoIGVsZW1lbnQgaGFzIGtleWJvYXJkIGZvY3VzLlxuICAgKiBUaGUgY2xhc3MgbmFtZSB3aWxsIGJlIGFwcGxpZWQgd2hlbiB0aGUgZWxlbWVudCBnYWlucyB0aGUgZm9jdXMgdGhyb3VnaCBrZXlib2FyZCBpbnRlcmFjdGlvbi5cbiAgICogSXQncyBhIHBvbHlmaWxsIGZvciB0aGUgW0NTUyA6Zm9jdXMtdmlzaWJsZSBzZWxlY3Rvcl0oaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL3NlbGVjdG9ycy00LyN0aGUtZm9jdXMtdmlzaWJsZS1wc2V1ZG8pLlxuICAgKiBUaGUgcmF0aW9uYWxlIGZvciB1c2luZyB0aGlzIGZlYXR1cmUgW2lzIGV4cGxhaW5lZCBoZXJlXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvSEVBRC9leHBsYWluZXIubWQpLlxuICAgKiBBIFtwb2x5ZmlsbCBjYW4gYmUgdXNlZF0oaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZSkgdG8gYXBwbHkgYSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgdG8gb3RoZXIgY29tcG9uZW50c1xuICAgKiBpZiBuZWVkZWQuXG4gICAqL1xuICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBocmVmOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5hbnksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgdG8gcmVuZGVyIGEgbGluayB3aGVuIHRoZSBgaHJlZmAgcHJvcCBpcyBwcm92aWRlZC5cbiAgICogQGRlZmF1bHQgJ2EnXG4gICAqL1xuICBMaW5rQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNvbnRleHRNZW51OiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRHJhZ0xlYXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGZvY3VzZWQgd2l0aCBhIGtleWJvYXJkLlxuICAgKiBXZSB0cmlnZ2VyIGEgYG9uRm9jdXNgIGNhbGxiYWNrIHRvby5cbiAgICovXG4gIG9uRm9jdXNWaXNpYmxlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleVVwOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VEb3duOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlVXA6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Ub3VjaEVuZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoTW92ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoU3RhcnQ6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBgVG91Y2hSaXBwbGVgIGVsZW1lbnQuXG4gICAqL1xuICBUb3VjaFJpcHBsZVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQSByZWYgdGhhdCBwb2ludHMgdG8gdGhlIGBUb3VjaFJpcHBsZWAgZWxlbWVudC5cbiAgICovXG4gIHRvdWNoUmlwcGxlUmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjdXJyZW50OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgcHVsc2F0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIHN0YXJ0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgc3RvcDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pXG4gIH0pXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydidXR0b24nLCAncmVzZXQnLCAnc3VibWl0J10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBCdXR0b25CYXNlOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0SWNvbkJ1dHRvblV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpSWNvbkJ1dHRvbicsIHNsb3QpO1xufVxuY29uc3QgaWNvbkJ1dHRvbkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlJY29uQnV0dG9uJywgWydyb290JywgJ2Rpc2FibGVkJywgJ2NvbG9ySW5oZXJpdCcsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnY29sb3JFcnJvcicsICdjb2xvckluZm8nLCAnY29sb3JTdWNjZXNzJywgJ2NvbG9yV2FybmluZycsICdlZGdlU3RhcnQnLCAnZWRnZUVuZCcsICdzaXplU21hbGwnLCAnc2l6ZU1lZGl1bScsICdzaXplTGFyZ2UnXSk7XG5leHBvcnQgZGVmYXVsdCBpY29uQnV0dG9uQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJlZGdlXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZUZvY3VzUmlwcGxlXCIsIFwic2l6ZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBhbHBoYSB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IGljb25CdXR0b25DbGFzc2VzLCB7IGdldEljb25CdXR0b25VdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2ljb25CdXR0b25DbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBkaXNhYmxlZCxcbiAgICBjb2xvcixcbiAgICBlZGdlLFxuICAgIHNpemVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGNvbG9yICE9PSAnZGVmYXVsdCcgJiYgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCBlZGdlICYmIGBlZGdlJHtjYXBpdGFsaXplKGVkZ2UpfWAsIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWBdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0SWNvbkJ1dHRvblV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgSWNvbkJ1dHRvblJvb3QgPSBzdHlsZWQoQnV0dG9uQmFzZSwge1xuICBuYW1lOiAnTXVpSWNvbkJ1dHRvbicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBvd25lclN0YXRlLmNvbG9yICE9PSAnZGVmYXVsdCcgJiYgc3R5bGVzW2Bjb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXSwgb3duZXJTdGF0ZS5lZGdlICYmIHN0eWxlc1tgZWRnZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmVkZ2UpfWBdLCBzdHlsZXNbYHNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5zaXplKX1gXV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gIGZsZXg6ICcwIDAgYXV0bycsXG4gIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjQpLFxuICBwYWRkaW5nOiA4LFxuICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICBvdmVyZmxvdzogJ3Zpc2libGUnLFxuICAvLyBFeHBsaWNpdGx5IHNldCB0aGUgZGVmYXVsdCB2YWx1ZSB0byBzb2x2ZSBhIGJ1ZyBvbiBJRTExLlxuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZSxcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdiYWNrZ3JvdW5kLWNvbG9yJywge1xuICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICB9KVxufSwgIW93bmVyU3RhdGUuZGlzYWJsZVJpcHBsZSAmJiB7XG4gICcmOmhvdmVyJzoge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5hY3RpdmVDaGFubmVsfSAvICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHl9KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmUsIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICB9XG4gIH1cbn0sIG93bmVyU3RhdGUuZWRnZSA9PT0gJ3N0YXJ0JyAmJiB7XG4gIG1hcmdpbkxlZnQ6IG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyA/IC0zIDogLTEyXG59LCBvd25lclN0YXRlLmVkZ2UgPT09ICdlbmQnICYmIHtcbiAgbWFyZ2luUmlnaHQ6IG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyA/IC0zIDogLTEyXG59KSwgKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgdmFyIF9wYWxldHRlO1xuICBjb25zdCBwYWxldHRlID0gKF9wYWxldHRlID0gKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUpID09IG51bGwgPyB2b2lkIDAgOiBfcGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXTtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvd25lclN0YXRlLmNvbG9yID09PSAnaW5oZXJpdCcgJiYge1xuICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgfSwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiBfZXh0ZW5kcyh7XG4gICAgY29sb3I6IHBhbGV0dGUgPT0gbnVsbCA/IHZvaWQgMCA6IHBhbGV0dGUubWFpblxuICB9LCAhb3duZXJTdGF0ZS5kaXNhYmxlUmlwcGxlICYmIHtcbiAgICAnJjpob3Zlcic6IF9leHRlbmRzKHt9LCBwYWxldHRlICYmIHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7cGFsZXR0ZS5tYWluQ2hhbm5lbH0gLyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5fSlgIDogYWxwaGEocGFsZXR0ZS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpXG4gICAgfSwge1xuICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICB9XG4gICAgfSlcbiAgfSksIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gICAgcGFkZGluZzogNSxcbiAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE4KVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdsYXJnZScgJiYge1xuICAgIHBhZGRpbmc6IDEyLFxuICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjgpXG4gIH0sIHtcbiAgICBbYCYuJHtpY29uQnV0dG9uQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgIH1cbiAgfSk7XG59KTtcblxuLyoqXG4gKiBSZWZlciB0byB0aGUgW0ljb25zXSgvbWF0ZXJpYWwtdWkvaWNvbnMvKSBzZWN0aW9uIG9mIHRoZSBkb2N1bWVudGF0aW9uXG4gKiByZWdhcmRpbmcgdGhlIGF2YWlsYWJsZSBpY29uIG9wdGlvbnMuXG4gKi9cbmNvbnN0IEljb25CdXR0b24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBJY29uQnV0dG9uKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlJY29uQnV0dG9uJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgZWRnZSA9IGZhbHNlLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2xvciA9ICdkZWZhdWx0JyxcbiAgICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgICBkaXNhYmxlRm9jdXNSaXBwbGUgPSBmYWxzZSxcbiAgICAgIHNpemUgPSAnbWVkaXVtJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgZWRnZSxcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlZCxcbiAgICBkaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgc2l6ZVxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goSWNvbkJ1dHRvblJvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIGNlbnRlclJpcHBsZTogdHJ1ZSxcbiAgICBmb2N1c1JpcHBsZTogIWRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgcmVmOiByZWYsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEljb25CdXR0b24ucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGljb24gdG8gZGlzcGxheS5cbiAgICovXG4gIGNoaWxkcmVuOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMubm9kZSwgcHJvcHMgPT4ge1xuICAgIGNvbnN0IGZvdW5kID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShwcm9wcy5jaGlsZHJlbikuc29tZShjaGlsZCA9PiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpICYmIGNoaWxkLnByb3BzLm9uQ2xpY2spO1xuICAgIGlmIChmb3VuZCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihbJ01VSTogWW91IGFyZSBwcm92aWRpbmcgYW4gb25DbGljayBldmVudCBsaXN0ZW5lciB0byBhIGNoaWxkIG9mIGEgYnV0dG9uIGVsZW1lbnQuJywgJ1ByZWZlciBhcHBseWluZyBpdCB0byB0aGUgSWNvbkJ1dHRvbiBkaXJlY3RseS4nLCAnVGhpcyBndWFyYW50ZWVzIHRoYXQgdGhlIHdob2xlIDxidXR0b24+IHdpbGwgYmUgcmVzcG9uc2l2ZSB0byBjbGljayBldmVudHMuJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogQGRlZmF1bHQgJ2RlZmF1bHQnXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ2RlZmF1bHQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZXJyb3InLCAnaW5mbycsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlICBrZXlib2FyZCBmb2N1cyByaXBwbGUgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlRm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCBpcyBkaXNhYmxlZC5cbiAgICpcbiAgICog4pqg77iPIFdpdGhvdXQgYSByaXBwbGUgdGhlcmUgaXMgbm8gc3R5bGluZyBmb3IgOmZvY3VzLXZpc2libGUgYnkgZGVmYXVsdC4gQmUgc3VyZVxuICAgKiB0byBoaWdobGlnaHQgdGhlIGVsZW1lbnQgYnkgYXBwbHlpbmcgc2VwYXJhdGUgc3R5bGVzIHdpdGggdGhlIGAuTXVpLWZvY3VzVmlzaWJsZWAgY2xhc3MuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGdpdmVuLCB1c2VzIGEgbmVnYXRpdmUgbWFyZ2luIHRvIGNvdW50ZXJhY3QgdGhlIHBhZGRpbmcgb24gb25lXG4gICAqIHNpZGUgKHRoaXMgaXMgb2Z0ZW4gaGVscGZ1bCBmb3IgYWxpZ25pbmcgdGhlIGxlZnQgb3IgcmlnaHRcbiAgICogc2lkZSBvZiB0aGUgaWNvbiB3aXRoIGNvbnRlbnQgYWJvdmUgb3IgYmVsb3csIHdpdGhvdXQgcnVpbmluZyB0aGUgYm9yZGVyXG4gICAqIHNpemUgYW5kIHNoYXBlKS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGVkZ2U6IFByb3BUeXBlcy5vbmVPZihbJ2VuZCcsICdzdGFydCcsIGZhbHNlXSksXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBgc21hbGxgIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRlbnNlIGJ1dHRvbiBzdHlsaW5nLlxuICAgKiBAZGVmYXVsdCAnbWVkaXVtJ1xuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydzbWFsbCcsICdtZWRpdW0nLCAnbGFyZ2UnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEljb25CdXR0b247IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBQYXBlciwgSW5wdXRCYXNlLCBJY29uQnV0dG9uIH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWxcIjtcclxuXHJcbmltcG9ydCB7IHVzZU5hdmlnYXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IEdsb2JhbENvbnRleHQgZnJvbSBcIi4vR2xvYmFsQ29udGV4dFwiO1xyXG5cclxuXHJcblxyXG5jb25zdCBTZWFyY2hSZWNlcHQgPSAoKSA9PiB7XHJcblxyXG4gICAgY29uc3QgZ2xvYmFsQ3R4ID0gdXNlQ29udGV4dChHbG9iYWxDb250ZXh0KTtcclxuICAgIGNvbnN0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcclxuICAgIGNvbnN0IHNlYXJjaFN0cmluZyA9IHVzZVJlZigpO1xyXG5cclxuICAgIGNvbnN0IGhhbmRsZUNsaWNrU2VhcmNoID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChzZWFyY2hTdHJpbmcuY3VycmVudC52YWx1ZS50cmltKCkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdsb2JhbEN0eC5zZXRTZWFyY2hTdHJpbmdGbihzZWFyY2hTdHJpbmcuY3VycmVudC52YWx1ZS50cmltKCkpO1xyXG4gICAgICAgIG5hdmlnYXRlKFwiL3JlY2VwdFwiKTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJyZWNlcHRpIHByZXRyYWdhXCIsIHNlYXJjaFN0cmluZylcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgaGFuZGxlS2V5RG93biA9IChlKSA9PiB7XHJcbiAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgaGFuZGxlQ2xpY2tTZWFyY2goKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPFBhcGVyXHJcbiAgICAgICAgY29tcG9uZW50PSdmb3JtJ1xyXG4gICAgICAgIHNlPXt7XHJcbiAgICAgICAgICAgIHA6ICcycHggNHB4JyxcclxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcclxuICAgICAgICAgICAgd2lkdGg6ICc4MHJlbScsXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiAnMjhweCcsXHJcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JlZCcsXHJcbiAgICAgICAgfX1cclxuICAgICAgICA+XHJcbiAgICAgICAgPElucHV0QmFzZSBjbGFzc05hbWU9XCJiYXNlXCJcclxuICAgICAgICAgICAgc3g9e3tcclxuICAgICAgICAgICAgICAgIHA6ICc1cHggMTBweCcsXHJcbiAgICAgICAgICAgICAgICBtbDogNSxcclxuICAgICAgICAgICAgICAgIC8vIHdpZHRoOiAnNzByZW0nLFxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBmbGV4OiAxXHJcbiAgICAgICAgICAgIH19XHJcblxyXG4gICAgICAgICAgICBhdXRvRm9jdXNcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJyZWNpcGVcIlxyXG4gICAgICAgICAgICAvLyBpbnB1dFByb3BzPXt7ICdhcmllbC1sYWJlbCc6ICdzZWFyY2gnIH19XHJcbiAgICAgICAgICAgIGlucHV0UmVmPXtzZWFyY2hTdHJpbmd9XHJcbiAgICAgICAgICAgIG9uS2V5RG93bj17aGFuZGxlS2V5RG93bn1cclxuICAgICAgICAvPlxyXG4gICAgICAgIDxJY29uQnV0dG9uXHJcbiAgICAgICAgICAgIHR5cGU9J2J1dHRvbidcclxuICAgICAgICAgICAgb25DbGljaz17aGFuZGxlQ2xpY2tTZWFyY2h9XHJcbiAgICAgICAgICAgIHN4PXt7IHA6ICcxMHB4JyB9fVxyXG4gICAgICAgICAgICBhcmlhLWxhYmVsPSdzZWFyY2gnXHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgICDwn6WnXHJcbiAgICAgICAgPC9JY29uQnV0dG9uPlxyXG4gICAgPC9QYXBlcj5cclxuICAgIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hSZWNlcHQ7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBQYXBlciwgSW5wdXRCYXNlLCBJY29uQnV0dG9uIH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWxcIjtcclxuXHJcblxyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBHbG9iYWxDb250ZXh0IGZyb20gXCIuL0dsb2JhbENvbnRleHRcIjtcclxuXHJcbmNvbnN0IFNlYXJjaE51dHJpdGlvbiA9IChwcm9wcykgPT4ge1xyXG5cclxuICAgIGNvbnN0IGdsb2JhbEN0eCA9IHVzZUNvbnRleHQoR2xvYmFsQ29udGV4dCk7XHJcblxyXG4gICAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xyXG4gICAgY29uc3Qgc2VhcmNoU3RyaW5nID0gdXNlUmVmKCk7XHJcblxyXG4gICAgY29uc3QgaGFuZGxlQ2xpY2tTZWFyY2ggPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHNlYXJjaFN0cmluZy5jdXJyZW50LnZhbHVlLnRyaW0oKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2xvYmFsQ3R4LnNldFNlYXJjaFN0cmluZ0ZuKHNlYXJjaFN0cmluZy5jdXJyZW50LnZhbHVlLnRyaW0oKSk7XHJcbiAgICAgICAgbmF2aWdhdGUoXCIva2Fsb3JpamUvbnV0cml0aW9uXCIpO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhcIlNlYXJjaCBudXRyaXRpb24gcHJldHJhZ2FcIiwgc2VhcmNoU3RyaW5nKVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBoYW5kbGVLZXlEb3duID0gKGUpID0+IHtcclxuICAgICAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBoYW5kbGVDbGlja1NlYXJjaCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8UGFwZXJcclxuICAgICAgICAgICAgY29tcG9uZW50PSdmb3JtJ1xyXG4gICAgICAgICAgICBzeD17e1xyXG4gICAgICAgICAgICAgICAgcDogJzJweCA0cHgnLFxyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogJzE2cmVtJyxcclxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMjhweCcsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdsaWdodGdyYXknLFxyXG4gICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxJbnB1dEJhc2UgXHJcbiAgICAgICAgICAgICAgICBzeD17e1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHA6ICc1cHggMTBweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgbWw6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICcyMHJlbScsXHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgZmxleDogMVxyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gZnVsbFdpZHRoPSd0cnVlJ1xyXG4gICAgICAgICAgICAgICAgYXV0b0ZvY3VzXHJcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cInNlYXJjaCBmb29kXCJcclxuICAgICAgICAgICAgICAgIGlucHV0UHJvcHM9e3sgJ2FyaWVsLWxhYmVsJzogJ3NlYXJjaCcgfX1cclxuICAgICAgICAgICAgICAgIGlucHV0UmVmPXtzZWFyY2hTdHJpbmd9XHJcbiAgICAgICAgICAgICAgICBvbktleURvd249e2hhbmRsZUtleURvd259XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDxJY29uQnV0dG9uXHJcbiAgICAgICAgICAgICAgICB0eXBlPSdidXR0b24nXHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVDbGlja1NlYXJjaH1cclxuICAgICAgICAgICAgICAgIHN4PXt7IHA6ICcxMHB4JyB9fVxyXG4gICAgICAgICAgICAgICAgYXJpYS1sYWJlbD0nc2VhcmNoJ1xyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICDwn42OXHJcbiAgICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cclxuICAgICAgICA8L1BhcGVyPlxyXG4gICAgKTtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoTnV0cml0aW9uO1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5cclxuaW1wb3J0IEdsb2JhbENvbnRleHQgZnJvbSBcIi4vR2xvYmFsQ29udGV4dFwiO1xyXG5pbXBvcnQgTnV0cml0aW9uIGZyb20gXCIuL051dHJpdGlvblwiO1xyXG5pbXBvcnQgU2VhcmNoUmVjZXB0IGZyb20gXCIuL1NlYXJjaFJlY2VwdFwiO1xyXG5pbXBvcnQgU2VhcmNoTnV0cml0aW9uIGZyb20gXCIuL1NlYXJjaE51dHJpdGlvblwiO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbmNvbnN0IFJlc3VsdHNOdXRyaXRpb24gPSAoKSA9PiB7XHJcbiAgICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgY29uc3QgW251dHJpdGlvbiwgc2V0TnV0cml0aW9uXSA9IHVzZVN0YXRlKFtdKTtcclxuICAgIGNvbnN0IFtyZXN1bHRzLCBzZXRSZXN1bHRzXSA9IHVzZVN0YXRlKFtdKTtcclxuXHJcblxyXG4gICAgY29uc3QgZ2xvYmFsQ3R4ID0gdXNlQ29udGV4dChHbG9iYWxDb250ZXh0KTtcclxuICAgIGNvbnN0IHNlYXJjaFN0cmluZ1ZhbHVlID0gZ2xvYmFsQ3R4LnNlYXJjaFN0cmluZ1ZhbHVlO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgZ2V0TnV0cml0aW9uKHNlYXJjaFN0cmluZ1ZhbHVlKTtcclxuICAgIH0sIFtzZWFyY2hTdHJpbmdWYWx1ZV0pO1xyXG4gICAgY29uc29sZS5sb2coXCJpeiByZXN1bHROdXRyaXRpb24gc2VhcmNoU3RyaW5nVmFsdWU6XCIsIHNlYXJjaFN0cmluZ1ZhbHVlKVxyXG5cclxuICAgIGNvbnN0IGdldE51dHJpdGlvbiA9IGFzeW5jIChzZWFyY2hTdHJpbmdWYWx1ZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHVybCA9IGBodHRwczovL2FwaS5hcGktbmluamFzLmNvbS92MS9udXRyaXRpb24/cXVlcnk9JHtzZWFyY2hTdHJpbmdWYWx1ZX1gO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCh1cmwsXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnWC1BcGktS2V5JzogJ0QrZFlqQ3hEU201ZkVrSXF5b0NJZUE9PWMyR3Z1alhUaUFiTUlIMDUnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YTtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZXp1bHRhdCBudXRyaXRpaW9uXCIsIGRhdGEpXHJcbiAgICAgICAgICAgIHNldE51dHJpdGlvbihkYXRhKTtcclxuICAgICAgICAgICAgc2V0UmVzdWx0cyhkYXRhLmxlbmd0aCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHNldEVycm9yKGVycik7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuXHJcblxyXG4gICAgLy8gaWYgKHJlc3VsdHMgPT0gMCkge1xyXG4gICAgLy8gICAgIHJldHVybiAoXHJcbiAgICAvLyAgICAgICAgIDw+XHJcbiAgICAvLyAgICAgICAgICAgICA8dGFibGUgY2xhc3NOYW1lPVwidGFiZWxhWmVtbGplXCI+XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgPHRoZWFkPlxyXG5cclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgPHRoPk5vdGhpbmcgZm91bmQ8L3RoPlxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwicmF6bWFrXCI+PC90cj5cclxuICAgIC8vICAgICAgICAgICAgICAgICA8L3RoZWFkPlxyXG4gICAgLy8gICAgICAgICAgICAgPC90YWJsZT48Lz5cclxuICAgIC8vICAgICApXHJcbiAgICAvLyB9XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgPGRpdiBjbGFzc05hbWU9XCJvZG5vc2lcIj5cclxuICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlYXJjaE51dHJpdGlvbiAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWFyY2hSZWNlcHQgLz5cclxuICAgICBcclxuPC9kaXY+XHJcbjwvZGl2PlxyXG4gICAgICAgICAgICA8dGFibGUgY2xhc3NOYW1lPVwiaHJhbmFcIj5cclxuICAgICAgICAgICAgICAgICAgXHJcbjx0aGVhZD5cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJvaWxcIj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9XCJudXRyaU5hbWVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xTcGFuPXsyfT5IcmFuYTwvdGg+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbjwvdGhlYWQ+XHJcblxyXG4gICAgICAgICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICAgICAgICAgIHtudXRyaXRpb24ubWFwKChkYXRhTnV0KSA9PiAoXHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxOdXRyaXRpb24ga2V5PXtkYXRhTnV0Lm5hbWV9IGRhdGFOdXQ9e2RhdGFOdXR9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG5cclxuXHJcbiAgICAgICAgICAgIDwvdGFibGU+XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICAgICAgPC8+XHJcbiAgICApO1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBSZXN1bHRzTnV0cml0aW9uOyIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbi8vIGltcG9ydCBTZWFyY2hQbGFjZSBmcm9tIFwiLi9TZWFyY2hQbGFjZVwiO1xyXG4vLyBpbXBvcnQgQm94IGZyb20gJ0BtdWkvbWF0ZXJpYWwvQm94JztcclxuXHJcbi8vIGltcG9ydCBJY29uQnV0dG9uIGZyb20gJ0BtdWkvbWF0ZXJpYWwvSWNvbkJ1dHRvbic7XHJcbi8vIGltcG9ydCBDb2xsYXBzZSBmcm9tICdAbXVpL21hdGVyaWFsL0NvbGxhcHNlJztcclxuLy8gaW1wb3J0IEtleWJvYXJkQXJyb3dEb3duSWNvbiBmcm9tICdAbXVpL2ljb25zLW1hdGVyaWFsL0tleWJvYXJkQXJyb3dEb3duJztcclxuLy8gaW1wb3J0IEtleWJvYXJkQXJyb3dVcEljb24gZnJvbSAnQG11aS9pY29ucy1tYXRlcmlhbC9LZXlib2FyZEFycm93VXAnO1xyXG5cclxuXHJcbmltcG9ydCBHbG9iYWxDb250ZXh0IGZyb20gXCIuL0dsb2JhbENvbnRleHRcIjtcclxuaW1wb3J0IFNlYXJjaFJlY2VwdCBmcm9tIFwiLi9TZWFyY2hSZWNlcHRcIjtcclxuaW1wb3J0IFNlYXJjaE51dHJpdGlvbiBmcm9tIFwiLi9TZWFyY2hOdXRyaXRpb25cIjtcclxuaW1wb3J0IFJlc3VsdHNOdXRyaXRpb24gZnJvbSBcIi4vUmVzdWx0c051dHJpdGlvblwiO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5jb25zdCBSZXN1bHRzUmVjaXBlID0gKCkgPT4ge1xyXG4gICAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgIGNvbnN0IFtyZWNpcGUsIHNldFJlY2lwZV0gPSB1c2VTdGF0ZShbXSk7XHJcbiAgICBjb25zdCBbcmVzdWx0cywgc2V0UmVzdWx0c10gPSB1c2VTdGF0ZShbXSk7XHJcbiAgICBjb25zdCBbb3Blbiwgc2V0T3Blbl0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcblxyXG5cclxuXHJcblxyXG4gICAgY29uc3QgZ2xvYmFsQ3R4ID0gdXNlQ29udGV4dChHbG9iYWxDb250ZXh0KTtcclxuICAgIGNvbnN0IHNlYXJjaFN0cmluZ1ZhbHVlID0gZ2xvYmFsQ3R4LnNlYXJjaFN0cmluZ1ZhbHVlO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgZ2V0UmVjaXBlKHNlYXJjaFN0cmluZ1ZhbHVlKTtcclxuICAgIH0sIFtzZWFyY2hTdHJpbmdWYWx1ZV0pO1xyXG4gICAgY29uc29sZS5sb2coXCJpeiByZXN1bHRSZWNpcGUgc2VhcmNoU3RyaW5nVmFsdWU6XCIsIHNlYXJjaFN0cmluZ1ZhbHVlKVxyXG5cclxuICAgIGNvbnN0IGdldFJlY2lwZSA9IGFzeW5jIChzZWFyY2hTdHJpbmdWYWx1ZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHVybCA9IGBodHRwczovL2FwaS5hcGktbmluamFzLmNvbS92MS9yZWNpcGU/cXVlcnk9JHtzZWFyY2hTdHJpbmdWYWx1ZX1gO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCh1cmwsXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnWC1BcGktS2V5JzogJ0QrZFlqQ3hEU201ZkVrSXF5b0NJZUE9PWMyR3Z1alhUaUFiTUlIMDUnLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZS5kYXRhO1xyXG5cclxuXHJcblxyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZXp1bHRhdCByZWNpcGUgcHJldHJhZ2VcIiwgZGF0YSlcclxuXHJcbiAgICAgICAgICAgIHNldFJlY2lwZShkYXRhKTtcclxuICAgICAgICAgICAgc2V0UmVzdWx0cyhkYXRhLmxlbmd0aCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHNldEVycm9yKGVycik7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuXHJcblxyXG4gICAgaWYgKHJlc3VsdHMgPT0gMCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDw+XHJcblxyXG4gICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cIm9kbm9zaVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0aGVhZD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Ob3RoaW5nIGZvdW5kPC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC90aGVhZD5cclxuICAgICAgICAgICAgICAgIDwvdGFibGU+PC8+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9kbm9zaVwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICA8U2VhcmNoTnV0cml0aW9uIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlYXJjaFJlY2VwdCAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICB7LyogPFJlc3VsdHNOdXRyaXRpb24gLz4gKi99XHJcblxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cIm9kbm9zaVwiPlxyXG4gICAgICAgICAgICAgICAgPHRoZWFkID5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNvbFNwYW49ezJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJoaXN0b3J5XCI+UmVjaXBlPC90aD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0clxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJyZXN1bHRzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjb2xTcGFuPXsyfT5OdW1iZXIgb2YgUmVjaXBlOiB7cmVzdWx0c308L3RoPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICA8L3RoZWFkPlxyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAge3JlY2lwZS5tYXAoKGRhdGFPYmopID0+IChcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8dGJvZHkgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwidGl0bGVcIiBjb2xTcGFuPXsyfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZGF0YU9iai50aXRsZX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJyZWNpcGVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb3I6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hbWVDb21tXCI+e2RhdGFPYmouc2VydmluZ3N9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInJlY2lwZVwiIGNvbFNwYW49ezJ9PkluZ3JlZGllbnRzOjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiIGNvbFNwYW49ezJ9PntkYXRhT2JqLmluZ3JlZGllbnRzLnJlcGxhY2UoXCJ8XCIsIFwiIFwiKS5yZXBsYWNlKFwifFwiLCBcIiBcIikucmVwbGFjZShcInxcIiwgXCIgXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZShcInxcIiwgXCIgXCIpLnJlcGxhY2UoXCJ8XCIsIFwiIFwiKS5yZXBsYWNlKFwifFwiLCBcIiBcIikucmVwbGFjZShcInxcIiwgXCIgXCIpLnJlcGxhY2UoXCJ8XCIsIFwiIFwiKS5yZXBsYWNlKFwifFwiLCBcIiBcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKFwifFwiLCBcIiBcIikucmVwbGFjZShcInxcIiwgXCIgXCIpLnJlcGxhY2UoXCJ8XCIsIFwiIFwiKS5yZXBsYWNlKFwifFwiLCBcIiBcIikucmVwbGFjZShcInxcIiwgXCIgXCIpLnJlcGxhY2UoXCJ8XCIsIFwiIFwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoXCJ8XCIsIFwiIFwiKS5yZXBsYWNlKFwifFwiLCBcIiBcIikucmVwbGFjZShcInxcIiwgXCIgXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInJlY2lwZVwiIGNvbFNwYW49ezJ9Pkluc3RydWN0aW9uczo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hbWVDb21tXCIgY29sU3Bhbj17Mn0+e2RhdGFPYmouaW5zdHJ1Y3Rpb25zfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xTcGFuPXsyfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+PC9ocj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XHJcblxyXG4gICAgICAgICAgICAgICAgKSl9XHJcblxyXG4gICAgICAgICAgICA8L3RhYmxlID5cclxuXHJcbiAgICAgICAgPC8+XHJcbiAgICApO1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBSZXN1bHRzUmVjaXBlOyIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFNlYXJjaE51dHJpdGlvbiBmcm9tIFwiLi9TZWFyY2hOdXRyaXRpb25cIjtcclxuaW1wb3J0IFNlYXJjaFJlY2VwdCBmcm9tIFwiLi9TZWFyY2hSZWNlcHRcIjtcclxuaW1wb3J0IFJlc3VsdHNOdXRyaXRpb24gZnJvbSBcIi4vUmVzdWx0c051dHJpdGlvblwiO1xyXG5pbXBvcnQgUmVzdWx0c1JlY2lwZSBmcm9tIFwiLi9SZXN1bHRzUmVjaXBlXCI7XHJcblxyXG5jb25zdCBSZWNlcHRpID0gKCkgPT4ge1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvZG5vc2lcIj5cclxuICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlYXJjaE51dHJpdGlvbiAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWFyY2hSZWNlcHQgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgey8qIDxkaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxSZXN1bHRzTnV0cml0aW9uIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJlc3VsdHNSZWNpcGUgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PiAqL31cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG5cclxufVxyXG5leHBvcnQgZGVmYXVsdCBSZWNlcHRpOyIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IG1vdGlvbiB9IGZyb20gXCJmcmFtZXItbW90aW9uXCJcclxuXHJcblxyXG5jb25zdCBWcmVtZVNhdGkgPSAoKSA9PiB7XHJcblxyXG5cclxuICAgIGNvbnN0IFtzYXRpLCBzZXRTYXRpXSA9IHVzZVN0YXRlKCk7XHJcbiAgICBjb25zdCBbbWludXRpLCBzZXRNaW51dGldID0gdXNlU3RhdGUoKTtcclxuICAgIGNvbnN0IFtzZWt1bmRpLCBzZXRTZWt1bmRpXSA9IHVzZVN0YXRlKCk7XHJcblxyXG4gICAgY29uc3QgW2lzT3BlblNlYywgc2V0T3BlblNlY10gPSB1c2VTdGF0ZShmYWxzZSlcclxuXHJcblxyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgZ2V0VnJlbWUoKTtcclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICBjb25zdCBnZXRWcmVtZSA9ICgpID0+IHtcclxuICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcblxyXG4gICAgICAgICAgICB2YXIgZGFuYXMgPSBuZXcgRGF0ZTtcclxuICAgICAgICAgICAgdmFyIGhvdXJzID0gZGFuYXMuZ2V0SG91cnMoKTtcclxuICAgICAgICAgICAgdmFyIG1pbnV0cyA9IGRhbmFzLmdldE1pbnV0ZXMoKTtcclxuICAgICAgICAgICAgdmFyIHNlY29uZHMgPSBkYW5hcy5nZXRTZWNvbmRzKCk7XHJcblxyXG4gICAgICAgICAgICBzZXRTYXRpKGhvdXJzKTtcclxuICAgICAgICAgICAgc2V0TWludXRpKG1pbnV0cyk7XHJcbiAgICAgICAgICAgIHNldFNla3VuZGkoc2Vjb25kcyk7XHJcbiAgICAgICAgfSwgMTAwMClcclxuXHJcbiAgICB9XHJcblxyXG5cclxuXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8ZGl2PlxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNhdGlcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bW90aW9uLmRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZWt1bmRlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5b3V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IGhlaWdodDogaXNPcGVuU2VjID8gXCIxMTdweFwiIDogXCIwcHhcIiB9fSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbj17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFzZTogXCJlYXNlSW5PdXRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic3ByaW5nXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhdDogSW5maW5pdHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfX0vPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGFuXCIgc3R5bGU9e3sgaGVpZ2h0OiBgJHtzZWt1bmRpICogMn1weGAsIGJhY2tncm91bmRDb2xvcjogXCIjNGRiNmFjXCIgfX0+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPntzZWt1bmRpfXM8L3NwYW4+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkYW5cIiBzdHlsZT17eyBoZWlnaHQ6IGAke21pbnV0aSAqIDJ9cHhgLCBiYWNrZ3JvdW5kQ29sb3I6IFwiIzI2YTY5YVwiIH19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnttaW51dGl9bTwvc3Bhbj48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2ID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkYW5cIiBzdHlsZT17eyBoZWlnaHQ6IGAke3NhdGkgKiA1fXB4YCwgYmFja2dyb3VuZENvbG9yOiBcIiMwMDk2ODhcIiB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA+LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPntzYXRpfWg8L3NwYW4+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBcIjIwNnB4XCIsIGhlaWdodDogXCIxMHB4XCIsIGNvbG9yOiBcInRyYW5zcGFyZW50XCIsIGJhY2tncm91bmRDb2xvcjogXCIjODBjYmM0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBcImF1dG9cIiwgY3Vyc29yOiBcInBvaW50ZXJcIlxyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICBvbk1vdXNlT3Zlcj17KCkgPT4gc2V0T3BlblNlYyghaXNPcGVuU2VjKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgLlxyXG5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVnJlbWVTYXRpOyIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgUm91dGVzLCBSb3V0ZSwgTmF2TGluaywgSGFzaFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5cclxuXHJcbmltcG9ydCBLYWxvcmlqZSBmcm9tIFwiLi9LYWxvcmlqZVwiO1xyXG5pbXBvcnQgT2Rub3NpIGZyb20gXCIuL09kbm9zaVwiO1xyXG5pbXBvcnQgVGFqbWVyIGZyb20gXCIuL1Rham1lclwiO1xyXG5pbXBvcnQgUmVzdWx0c051dHJpdGlvbiBmcm9tIFwiLi9SZXN1bHRzTnV0cml0aW9uXCI7XHJcbmltcG9ydCBSZWNlcHRpIGZyb20gXCIuL1JlY2VwdGlcIjtcclxuaW1wb3J0IFJlc3VsdHNSZWNpcGUgZnJvbSBcIi4vUmVzdWx0c1JlY2lwZVwiO1xyXG5pbXBvcnQgVnJlbWVTYXRpIGZyb20gXCIuL1ZyZW1lU2F0aVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTmF2aWdhdGlvbigpIHtcclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuXHJcbiAgICA8SGFzaFJvdXRlciBiYXNlbmFtZT1cIi9cIj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJuYXZDb250YWluZXJcIj5cclxuXHJcblxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICA8TmF2TGluayB0bz0nLycgY2xhc3NOYW1lPVwibGlua2VyXCJcclxuICAgICAgICAgICAgc3R5bGU9eyh7IGlzQWN0aXZlIH0pID0+IHtcclxuICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgY29sb3I6IGlzQWN0aXZlID8gXCJ3aGl0ZVwiIDogXCJyZ2IoODMsIDg1LCA4MylcIixcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9fVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICBPRE5PU0lcclxuICAgICAgICAgIDwvTmF2TGluaz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgPE5hdkxpbmsgdG89XCJrYWxvcmlqZVwiIGNsYXNzTmFtZT1cImxpbmtlclwiXHJcbiAgICAgICAgICAgIHN0eWxlPXsoeyBpc0FjdGl2ZSB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGNvbG9yOiBpc0FjdGl2ZSA/IFwid2hpdGVcIiA6IFwicmdiKDgzLCA4NSwgODMpXCIsXHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfX1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgS0FMT1JJSkU8L05hdkxpbms+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgIDxOYXZMaW5rIHRvPVwicmVjZXB0aVwiIGNsYXNzTmFtZT1cImxpbmtlclwiXHJcbiAgICAgICAgICAgIHN0eWxlPXsoeyBpc0FjdGl2ZSB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGNvbG9yOiBpc0FjdGl2ZSA/IFwid2hpdGVcIiA6IFwicmdiKDgzLCA4NSwgODMpXCIsXHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfX1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgUkVDRVBUSTwvTmF2TGluaz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgPE5hdkxpbmsgdG89XCJ0YWptZXJcIiBjbGFzc05hbWU9XCJsaW5rZXJcIlxyXG4gICAgICAgICAgICBzdHlsZT17KHsgaXNBY3RpdmUgfSkgPT4ge1xyXG4gICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBjb2xvcjogaXNBY3RpdmUgPyBcIndoaXRlXCIgOiBcInJnYig4MywgODUsIDgzKVwiLFxyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH19XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIFRBSk1FUlxyXG4gICAgICAgICAgPC9OYXZMaW5rPlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgICAgPFZyZW1lU2F0aSAvPlxyXG4gICAgICA8Um91dGVzPlxyXG4gICAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiIGVsZW1lbnQ9ezxPZG5vc2kgLz59IC8+XHJcbiAgICAgICAgPFJvdXRlIHBhdGg9XCIva2Fsb3JpamVcIiBlbGVtZW50PXs8S2Fsb3JpamUgLz59IC8+XHJcbiAgICAgICAgPFJvdXRlIHBhdGg9XCIvcmVjZXB0aVwiIGVsZW1lbnQ9ezxSZWNlcHRpIC8+fSAvPlxyXG4gICAgICAgIDxSb3V0ZSBwYXRoPVwiL3Rham1lclwiIGVsZW1lbnQ9ezxUYWptZXIgLz59IC8+XHJcbiAgICAgICAgPFJvdXRlIHBhdGg9XCIva2Fsb3JpamUvbnV0cml0aW9uXCIgZWxlbWVudD17PFJlc3VsdHNOdXRyaXRpb24gLz59IC8+XHJcbiAgICAgICAgPFJvdXRlIHBhdGg9XCIvcmVjZXB0XCIgZWxlbWVudD17PFJlc3VsdHNSZWNpcGUgLz59IC8+XHJcbiAgICAgIDwvUm91dGVzPlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvbWVcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImltZ1wiPjwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuXHJcbiAgICA8L0hhc2hSb3V0ZXI+XHJcbiAgICA8Lz5cclxuICApXHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0LCB7dXNlU3RhdGV9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgTmF2aWdhdGlvbiBmcm9tIFwiLi9jb21wb25lbnRzL05hdmlnYXRpb25cIjtcclxuaW1wb3J0IEdsb2JhbENvbnRleHQgZnJvbSBcIi4vY29tcG9uZW50cy9HbG9iYWxDb250ZXh0XCI7XHJcblxyXG5cclxuXHJcblxyXG5cclxuY29uc3QgQXBwID0gKCkgPT4ge1xyXG4gICAgY29uc3QgW3NlYXJjaFN0cmluZywgc2V0U2VhcmNoU3RyaW5nXSA9IHVzZVN0YXRlKCdFbnRlciBzZWFyY2ggY3JpdGVyaXVtIScpO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8R2xvYmFsQ29udGV4dC5Qcm92aWRlclxyXG4gICAgICAgIHZhbHVlPXt7XHJcbiAgICAgICAgICAgIHNldFNlYXJjaFN0cmluZ0ZuOiBzZXRTZWFyY2hTdHJpbmcsXHJcbiAgICAgICAgICAgIHNlYXJjaFN0cmluZ1ZhbHVlOiBzZWFyY2hTdHJpbmcsXHJcbiAgICAgICAgfX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICAgIDxOYXZpZ2F0aW9uIC8+XHJcbiAgICAgICAgPC9HbG9iYWxDb250ZXh0LlByb3ZpZGVyPlxyXG4gICAgICAgICAgICApO1xyXG5cclxufVxyXG5leHBvcnQgZGVmYXVsdCBBcHA7XHJcblxyXG5cclxuICAgIFxyXG4gICAgIFxyXG5cclxuXHJcbiIsIlxyXG5cclxuXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbi8vIGltcG9ydCB7IGNyZWF0ZVJvb3QgfSBmcm9tICdyZWFjdC1kb20vY2xpZW50JztcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb20vY2xpZW50XCI7XHJcbmltcG9ydCBcIi4vc2Nzcy9tYWluLnNjc3NcIjtcclxuXHJcblxyXG5pbXBvcnQgQXBwIGZyb20gXCIuL0FwcFwiO1xyXG5cclxudmFyIHJvb3QgPSBSZWFjdERPTS5jcmVhdGVSb290KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKSk7XHJcbnJvb3QucmVuZGVyKDxBcHBcclxuICAgICBudW1iZXI9ezEwfVxyXG4gICAgIHRpdGxlPVwiU3RyaW5nIGZyb20gaW5kZXggZmlsZVwiIFxyXG4gICAgIHRleHQ9XCJUZXh0IGZyb20gaW5kZXggZmlsZVwiIC8+KTtcclxuXHJcbi8vIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKTtcclxuLy8gY29uc3Qgcm9vdCA9IGNyZWF0ZVJvb3QoY29udGFpbmVyKTsgLy8gY3JlYXRlUm9vdChjb250YWluZXIhKSBpZiB5b3UgdXNlIFR5cGVTY3JpcHRcclxuLy8gcm9vdC5yZW5kZXIoPEFwcCB0YWI9XCJob21lXCIgLz4pO1xyXG5cclxuXHJcblxyXG5cclxuIl0sIm5hbWVzIjpbIkRpZ2l0cm9uIiwiX0NvbXBvbmVudCIsIl9pbmhlcml0cyIsIl9zdXBlciIsIl9jcmVhdGVTdXBlciIsIl90aGlzIiwiX2NsYXNzQ2FsbENoZWNrIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJjYWxsIiwiYXBwbHkiLCJjb25jYXQiLCJfZGVmaW5lUHJvcGVydHkiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwicmVzdWx0IiwiYnV0dG9uIiwiY2FsY3VsYXRlIiwicmVzZXQiLCJiYWNrc3BhY2UiLCJzZXRTdGF0ZSIsInN0YXRlIiwiY2hlY2tSZXN1bHQiLCJpbmNsdWRlcyIsInJlcGxhY2UiLCJldmFsIiwiZSIsInNsaWNlIiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwidmFsdWUiLCJSZWFjdCIsImNsYXNzTmFtZSIsIkRpc3BsYXkiLCJ0aGlzIiwiS2V5UGFkQ29tcG9uZW50Iiwib25DbGljayIsIkNvbXBvbmVudCIsInByb3BzIiwibmFtZSIsInRhcmdldCIsImxhYmVsIiwic2l6ZSIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJ0eXBlIiwiS05PV05fU1RBVElDUyIsInByb3RvdHlwZSIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiTWVtbyIsImRlZmluZVByb3BlcnR5IiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJrZXlzIiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJkZXNjcmlwdG9yIiwiYWEiLCJjYSIsInAiLCJhIiwiYiIsImMiLCJkYSIsIlNldCIsImVhIiwiZmEiLCJoYSIsImFkZCIsImlhIiwid2luZG93IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiamEiLCJoYXNPd25Qcm9wZXJ0eSIsImthIiwibGEiLCJtYSIsInYiLCJkIiwiZiIsImciLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsInoiLCJzcGxpdCIsImZvckVhY2giLCJ0b0xvd2VyQ2FzZSIsInJhIiwic2EiLCJ0b1VwcGVyQ2FzZSIsInRhIiwicGEiLCJpc05hTiIsInFhIiwidGVzdCIsIm9hIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ4bGlua0hyZWYiLCJ1YSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwidmEiLCJTeW1ib2wiLCJmb3IiLCJ3YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIml0ZXJhdG9yIiwiS2EiLCJMYSIsIkEiLCJhc3NpZ24iLCJNYSIsIkVycm9yIiwic3RhY2siLCJ0cmltIiwibWF0Y2giLCJOYSIsIk9hIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJzZXQiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwibCIsImgiLCJQYSIsInRhZyIsIlFhIiwiJCR0eXBlb2YiLCJfY29udGV4dCIsIl9wYXlsb2FkIiwiX2luaXQiLCJSYSIsIlNhIiwiVGEiLCJub2RlTmFtZSIsIlZhIiwiX3ZhbHVlVHJhY2tlciIsImNvbnN0cnVjdG9yIiwiZ2V0IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJVYSIsIldhIiwiY2hlY2tlZCIsIlhhIiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJZYSIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiWmEiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJvd25lckRvY3VtZW50IiwiZWIiLCJpc0FycmF5IiwiZmIiLCJvcHRpb25zIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsImdiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJjaGlsZHJlbiIsImhiIiwiaWIiLCJqYiIsInRleHRDb250ZW50Iiwia2IiLCJsYiIsIm1iIiwibmIiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwib2IiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsInBiIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJhc3BlY3RSYXRpbyIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInFiIiwicmIiLCJzYiIsInN0eWxlIiwiaW5kZXhPZiIsInNldFByb3BlcnR5IiwiY2hhckF0Iiwic3Vic3RyaW5nIiwidGIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwic291cmNlIiwidHJhY2siLCJ3YnIiLCJ1YiIsInZiIiwiaXMiLCJ3YiIsInhiIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiTmIiLCJtIiwib25FcnJvciIsIk9iIiwiUGIiLCJRYiIsIlJiIiwiU2IiLCJUYiIsIlZiIiwiYWx0ZXJuYXRlIiwicmV0dXJuIiwiZmxhZ3MiLCJXYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiWGIiLCJaYiIsImNoaWxkIiwic2libGluZyIsImN1cnJlbnQiLCJZYiIsIiRiIiwiYWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiYmMiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsImNjIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJkYyIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIkIiLCJ1bnN0YWJsZV9ub3ciLCJlYyIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiZmMiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsImdjIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJoYyIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiaWMiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsImpjIiwidW5zdGFibGVfSWRsZVByaW9yaXR5Iiwia2MiLCJsYyIsIm9jIiwiTWF0aCIsImNsejMyIiwicGMiLCJxYyIsImxvZyIsIkxOMiIsInJjIiwic2MiLCJ0YyIsInVjIiwicGVuZGluZ0xhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsInZjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJldmVudFRpbWVzIiwiQ2MiLCJDIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiTWFwIiwiUGMiLCJRYyIsIlJjIiwiU2MiLCJkZWxldGUiLCJwb2ludGVySWQiLCJUYyIsIm5hdGl2ZUV2ZW50IiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsInRhcmdldENvbnRhaW5lcnMiLCJWYyIsIldjIiwicHJpb3JpdHkiLCJpc0RlaHlkcmF0ZWQiLCJjb250YWluZXJJbmZvIiwiWGMiLCJZYyIsImRpc3BhdGNoRXZlbnQiLCJzaGlmdCIsIlpjIiwiJGMiLCJhZCIsImJkIiwiY2QiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImRkIiwiZWQiLCJ0cmFuc2l0aW9uIiwiZmQiLCJnZCIsImhkIiwiVWMiLCJzdG9wUHJvcGFnYXRpb24iLCJqZCIsImtkIiwibGQiLCJtZCIsIm5kIiwib2QiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJwZCIsInFkIiwicmQiLCJfcmVhY3ROYW1lIiwiX3RhcmdldEluc3QiLCJjdXJyZW50VGFyZ2V0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJ3ZCIsInhkIiwieWQiLCJzZCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSWQiLCJjbGlwYm9hcmREYXRhIiwiSmQiLCJMZCIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJRZCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNvZGUiLCJsb2NhdGlvbiIsInJlcGVhdCIsImxvY2FsZSIsIndoaWNoIiwiUmQiLCJUZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlZkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlhkIiwiWWQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIlpkIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsInVybCIsIndlZWsiLCJtZSIsIm5lIiwib2UiLCJldmVudCIsImxpc3RlbmVycyIsInBlIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwibm9kZSIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiTGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTWUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiTmUiLCJjb250ZW50RWRpdGFibGUiLCJPZSIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJkb2N1bWVudEVsZW1lbnQiLCJzdGFydCIsImVuZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwibWluIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJleHRlbmQiLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwiZWxlbWVudCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsIldlIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiWGUiLCJZZSIsIlplIiwiYW5pbWF0aW9uIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImVmIiwiZmYiLCJnZiIsImhmIiwibGYiLCJtZiIsIm5mIiwiVWIiLCJpbnN0YW5jZSIsImxpc3RlbmVyIiwiRCIsIm9mIiwiaGFzIiwicGYiLCJxZiIsInJmIiwicmFuZG9tIiwic2YiLCJiaW5kIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJuIiwidCIsIkoiLCJ4IiwidSIsInciLCJGIiwidGYiLCJ1ZiIsInBhcmVudFdpbmRvdyIsInZmIiwid2YiLCJuYSIsInhhIiwiJGEiLCJiYSIsImplIiwiY2hhciIsImtlIiwidW5zaGlmdCIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJfX2h0bWwiLCJGZiIsInNldFRpbWVvdXQiLCJHZiIsImNsZWFyVGltZW91dCIsIkhmIiwiUHJvbWlzZSIsIkpmIiwicXVldWVNaWNyb3Rhc2siLCJyZXNvbHZlIiwidGhlbiIsImNhdGNoIiwiSWYiLCJLZiIsIkxmIiwiTWYiLCJwcmV2aW91c1NpYmxpbmciLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiRSIsIkciLCJWZiIsIkgiLCJXZiIsIlhmIiwiWWYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJaZiIsIiRmIiwiYWciLCJiZyIsImdldENoaWxkQ29udGV4dCIsImNnIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInhnIiwieWciLCJJIiwiemciLCJBZyIsIkJnIiwiZWxlbWVudFR5cGUiLCJkZWxldGlvbnMiLCJDZyIsInBlbmRpbmdQcm9wcyIsIm92ZXJmbG93IiwidHJlZUNvbnRleHQiLCJyZXRyeUxhbmUiLCJEZyIsIm1vZGUiLCJFZyIsIkZnIiwiR2ciLCJtZW1vaXplZFByb3BzIiwiSGciLCJJZyIsIkpnIiwiS2ciLCJMZyIsIk1nIiwiTmciLCJPZyIsIlBnIiwiUWciLCJSZyIsIl9jdXJyZW50VmFsdWUiLCJTZyIsImNoaWxkTGFuZXMiLCJUZyIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwiVWciLCJWZyIsImNvbnRleHQiLCJtZW1vaXplZFZhbHVlIiwibmV4dCIsIldnIiwiWGciLCJZZyIsImludGVybGVhdmVkIiwiWmciLCIkZyIsImFoIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwiYmgiLCJjaCIsImV2ZW50VGltZSIsImxhbmUiLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJkaCIsIksiLCJlaCIsImZoIiwiZ2giLCJxIiwiciIsInkiLCJoaCIsImloIiwiamgiLCJyZWZzIiwia2giLCJuaCIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsIkwiLCJsaCIsIm1oIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIm9oIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJwaCIsInVwZGF0ZXIiLCJxaCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsInJoIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJzaCIsInJlZiIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJ0aCIsInVoIiwidmgiLCJpbmRleCIsIndoIiwieGgiLCJ5aCIsImltcGxlbWVudGF0aW9uIiwiemgiLCJBaCIsImRvbmUiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsIkloIiwidGFnTmFtZSIsIkpoIiwiS2giLCJMaCIsIk0iLCJNaCIsInJldmVhbE9yZGVyIiwiTmgiLCJPaCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwiUGgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUWgiLCJSaCIsIk4iLCJPIiwiUCIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiUSIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJiYXNlUXVldWUiLCJxdWV1ZSIsImRpIiwiZWkiLCJmaSIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJoYXNFYWdlclN0YXRlIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZGlzcGF0Y2giLCJnaSIsImhpIiwiaWkiLCJqaSIsImtpIiwiZ2V0U25hcHNob3QiLCJsaSIsIm1pIiwiUiIsIm5pIiwibGFzdEVmZmVjdCIsInN0b3JlcyIsIm9pIiwicGkiLCJxaSIsInJpIiwiY3JlYXRlIiwiZGVzdHJveSIsImRlcHMiLCJzaSIsInRpIiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiQWkiLCJCaSIsIkNpIiwiRGkiLCJFaSIsIkZpIiwiR2kiLCJIaSIsIklpIiwiSmkiLCJyZWFkQ29udGV4dCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VJbnNlcnRpb25FZmZlY3QiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwidXNlSWQiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJpZGVudGlmaWVyUHJlZml4IiwiS2kiLCJtZXNzYWdlIiwiZGlnZXN0IiwiTGkiLCJNaSIsImNvbnNvbGUiLCJlcnJvciIsIk5pIiwiV2Vha01hcCIsIk9pIiwiUGkiLCJRaSIsIlJpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJTaSIsImNvbXBvbmVudFN0YWNrIiwiVGkiLCJwaW5nQ2FjaGUiLCJVaSIsIlZpIiwiV2kiLCJYaSIsIlJlYWN0Q3VycmVudE93bmVyIiwiWWkiLCJaaSIsIiRpIiwiYWoiLCJiaiIsImNqIiwiZGoiLCJlaiIsImJhc2VMYW5lcyIsImNhY2hlUG9vbCIsInRyYW5zaXRpb25zIiwiZmoiLCJnaiIsImhqIiwiaWoiLCJqaiIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImtqIiwibGoiLCJwZW5kaW5nQ29udGV4dCIsIm1qIiwiQWoiLCJCaiIsIkNqIiwiRGoiLCJuaiIsIm9qIiwicGoiLCJmYWxsYmFjayIsInFqIiwicmoiLCJ0aiIsImRhdGFzZXQiLCJkZ3N0IiwidWoiLCJ2aiIsIl9yZWFjdFJldHJ5Iiwic2oiLCJzdWJ0cmVlRmxhZ3MiLCJ3aiIsInhqIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxNb2RlIiwieWoiLCJFaiIsIlMiLCJGaiIsIkdqIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsInN1cHByZXNzSHlkcmF0aW9uV2FybmluZyIsIm9uY2xpY2siLCJjcmVhdGVFbGVtZW50TlMiLCJhdXRvRm9jdXMiLCJjcmVhdGVUZXh0Tm9kZSIsIlQiLCJIaiIsIklqIiwiSmoiLCJLaiIsIlUiLCJMaiIsIldlYWtTZXQiLCJWIiwiTWoiLCJXIiwiTmoiLCJPaiIsIlFqIiwiUmoiLCJTaiIsIlRqIiwiVWoiLCJWaiIsIldqIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIlhqIiwiWCIsIllqIiwiWmoiLCJhayIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJiayIsImNrIiwiZGsiLCJlayIsImZrIiwiaXNIaWRkZW4iLCJnayIsImhrIiwiZGlzcGxheSIsImlrIiwiamsiLCJrayIsImxrIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJzcmMiLCJXayIsIm1rIiwiY2VpbCIsIm5rIiwib2siLCJwayIsIlkiLCJaIiwicWsiLCJyayIsInNrIiwidGsiLCJ1ayIsIkluZmluaXR5IiwidmsiLCJ3ayIsInhrIiwieWsiLCJ6ayIsIkFrIiwiQmsiLCJDayIsIkRrIiwiRWsiLCJjYWxsYmFja05vZGUiLCJleHBpcmF0aW9uVGltZXMiLCJleHBpcmVkTGFuZXMiLCJ3YyIsImNhbGxiYWNrUHJpb3JpdHkiLCJpZyIsIkZrIiwiR2siLCJIayIsIklrIiwiSmsiLCJLayIsIkxrIiwiTWsiLCJOayIsIk9rIiwiUGsiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiUWsiLCJ0aW1lb3V0SGFuZGxlIiwiUmsiLCJTayIsIlRrIiwiVWsiLCJWayIsIm11dGFibGVSZWFkTGFuZXMiLCJCYyIsIlBqIiwib25Db21taXRGaWJlclJvb3QiLCJtYyIsIm9uUmVjb3ZlcmFibGVFcnJvciIsIlhrIiwib25Qb3N0Q29tbWl0RmliZXJSb290IiwiWWsiLCJaayIsImFsIiwiaXNSZWFjdENvbXBvbmVudCIsInBlbmRpbmdDaGlsZHJlbiIsImJsIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsImNsIiwiY2FjaGUiLCJwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzIiwiZWwiLCJmbCIsImdsIiwiaGwiLCJpbCIsImpsIiwiemoiLCIkayIsImxsIiwicmVwb3J0RXJyb3IiLCJtbCIsIl9pbnRlcm5hbFJvb3QiLCJubCIsIm9sIiwicGwiLCJxbCIsInNsIiwicmwiLCJ1bm1vdW50IiwidW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb24iLCJzcGxpY2UiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsInRsIiwidXNpbmdDbGllbnRFbnRyeVBvaW50IiwiRXZlbnRzIiwidWwiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJ2ZXJzaW9uIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInZsIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0RXJyb3JIYW5kbGVyIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJyZWNvbmNpbGVyVmVyc2lvbiIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIndsIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJjcmVhdGVQb3J0YWwiLCJkbCIsImNyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9zdHJpY3RNb2RlIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJoeWRyYXRlIiwiaHlkcmF0ZVJvb3QiLCJoeWRyYXRlZFNvdXJjZXMiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNoZWNrRENFIiwiZXJyIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiRnJhZ21lbnQiLCJMYXp5IiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImpzeCIsImpzeHMiLCJmb3JjZVVwZGF0ZSIsImVzY2FwZSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiZGVmYXVsdCIsIkNoaWxkcmVuIiwiY291bnQiLCJ0b0FycmF5Iiwib25seSIsIlB1cmVDb21wb25lbnQiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiX2RlZmF1bHRWYWx1ZSIsIl9nbG9iYWxOYW1lIiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJtZW1vIiwic3RhcnRUcmFuc2l0aW9uIiwidW5zdGFibGVfYWN0IiwicG9wIiwic29ydEluZGV4IiwicGVyZm9ybWFuY2UiLCJzZXRJbW1lZGlhdGUiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJuYXZpZ2F0b3IiLCJzY2hlZHVsaW5nIiwiaXNJbnB1dFBlbmRpbmciLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJmbG9vciIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJpbnNlcnQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZ2V0VGFyZ2V0Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJsZWFmUHJvdG90eXBlcyIsImdldFByb3RvIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJucyIsImRlZiIsImRlZmluaXRpb24iLCJvIiwicHJvcCIsInRvU3RyaW5nVGFnIiwibmMiLCJBY3Rpb24iLCJsb2NhbHMiLCJQb3BTdGF0ZUV2ZW50VHlwZSIsImludmFyaWFudCIsIndhcm5pbmciLCJjb25kIiwid2FybiIsImdldEhpc3RvcnlTdGF0ZSIsInVzciIsImlkeCIsImNyZWF0ZUxvY2F0aW9uIiwidG8iLCJwYXRobmFtZSIsImhhc2giLCJwYXJzZVBhdGgiLCJzdWJzdHIiLCJfcmVmIiwicGF0aCIsInBhcnNlZFBhdGgiLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsIlJlc3VsdFR5cGUiLCJtYXRjaFJvdXRlcyIsInJvdXRlcyIsImxvY2F0aW9uQXJnIiwiYmFzZW5hbWUiLCJicmFuY2hlcyIsImZsYXR0ZW5Sb3V0ZXMiLCJzb3J0Iiwic2NvcmUiLCJldmVyeSIsImNvbXBhcmVJbmRleGVzIiwicm91dGVzTWV0YSIsImNoaWxkcmVuSW5kZXgiLCJyYW5rUm91dGVCcmFuY2hlcyIsIm1hdGNoZXMiLCJtYXRjaFJvdXRlQnJhbmNoIiwic2FmZWx5RGVjb2RlVVJJIiwicGFyZW50c01ldGEiLCJwYXJlbnRQYXRoIiwiZmxhdHRlblJvdXRlIiwicm91dGUiLCJyZWxhdGl2ZVBhdGgiLCJjYXNlU2Vuc2l0aXZlIiwic3RhcnRzV2l0aCIsImNvbXB1dGVTY29yZSIsIl9yb3V0ZSRwYXRoIiwiZXhwbG9kZWQiLCJleHBsb2RlT3B0aW9uYWxTZWdtZW50cyIsInNlZ21lbnRzIiwiZmlyc3QiLCJyZXN0IiwiaXNPcHRpb25hbCIsImVuZHNXaXRoIiwicmVxdWlyZWQiLCJyZXN0RXhwbG9kZWQiLCJzdWJwYXRoIiwicGFyYW1SZSIsImR5bmFtaWNTZWdtZW50VmFsdWUiLCJpbmRleFJvdXRlVmFsdWUiLCJlbXB0eVNlZ21lbnRWYWx1ZSIsInN0YXRpY1NlZ21lbnRWYWx1ZSIsInNwbGF0UGVuYWx0eSIsImlzU3BsYXQiLCJzIiwiaW5pdGlhbFNjb3JlIiwic29tZSIsImZpbHRlciIsInJlZHVjZSIsInNlZ21lbnQiLCJicmFuY2giLCJtYXRjaGVkUGFyYW1zIiwibWF0Y2hlZFBhdGhuYW1lIiwicmVtYWluaW5nUGF0aG5hbWUiLCJwYXJhbXMiLCJwYXRobmFtZUJhc2UiLCJub3JtYWxpemVQYXRobmFtZSIsInBhdHRlcm4iLCJtYXRjaGVyIiwicGFyYW1OYW1lcyIsInJlZ2V4cFNvdXJjZSIsIl8iLCJwYXJhbU5hbWUiLCJSZWdFeHAiLCJjb21waWxlUGF0aCIsImNhcHR1cmVHcm91cHMiLCJzcGxhdFZhbHVlIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic2FmZWx5RGVjb2RlVVJJQ29tcG9uZW50IiwiZGVjb2RlVVJJIiwic3RhcnRJbmRleCIsIm5leHRDaGFyIiwiZ2V0SW52YWxpZFBhdGhFcnJvciIsImZpZWxkIiwiZGVzdCIsImdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzIiwidG9BcmciLCJyb3V0ZVBhdGhuYW1lcyIsImxvY2F0aW9uUGF0aG5hbWUiLCJpc1BhdGhSZWxhdGl2ZSIsImZyb20iLCJpc0VtcHR5UGF0aCIsInRvUGF0aG5hbWUiLCJyb3V0ZVBhdGhuYW1lSW5kZXgiLCJ0b1NlZ21lbnRzIiwiZnJvbVBhdGhuYW1lIiwicmVzb2x2ZVBhdGhuYW1lIiwibm9ybWFsaXplU2VhcmNoIiwibm9ybWFsaXplSGFzaCIsInJlc29sdmVQYXRoIiwiaGFzRXhwbGljaXRUcmFpbGluZ1NsYXNoIiwiaGFzQ3VycmVudFRyYWlsaW5nU2xhc2giLCJwYXRocyIsInZhbGlkTXV0YXRpb25NZXRob2RzQXJyIiwidmFsaWRSZXF1ZXN0TWV0aG9kc0FyciIsIkRhdGFSb3V0ZXJDb250ZXh0IiwiRGF0YVJvdXRlclN0YXRlQ29udGV4dCIsIk5hdmlnYXRpb25Db250ZXh0IiwiTG9jYXRpb25Db250ZXh0IiwiUm91dGVDb250ZXh0Iiwib3V0bGV0IiwiaXNEYXRhUm91dGUiLCJSb3V0ZUVycm9yQ29udGV4dCIsInVzZUluUm91dGVyQ29udGV4dCIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJzdGF0aWMiLCJyb3V0ZXIiLCJob29rTmFtZSIsImN0eCIsInVzZURhdGFSb3V0ZXJDb250ZXh0IiwiRGF0YVJvdXRlckhvb2siLCJVc2VOYXZpZ2F0ZVN0YWJsZSIsInVzZUN1cnJlbnRSb3V0ZUlkIiwiRGF0YVJvdXRlclN0YXRlSG9vayIsImFjdGl2ZVJlZiIsIm5hdmlnYXRlIiwiZnJvbVJvdXRlSWQiLCJ1c2VOYXZpZ2F0ZVN0YWJsZSIsImRhdGFSb3V0ZXJDb250ZXh0Iiwicm91dGVQYXRobmFtZXNKc29uIiwiZ28iLCJwYXJzZSIsInJlbGF0aXZlIiwidXNlTmF2aWdhdGVVbnN0YWJsZSIsIl90ZW1wMiIsInVzZVJvdXRlc0ltcGwiLCJkYXRhUm91dGVyU3RhdGUiLCJwYXJlbnRNYXRjaGVzIiwicm91dGVNYXRjaCIsInBhcmVudFBhcmFtcyIsInBhcmVudFBhdGhuYW1lQmFzZSIsImxvY2F0aW9uRnJvbUNvbnRleHQiLCJfcGFyc2VkTG9jYXRpb25BcmckcGEiLCJwYXJzZWRMb2NhdGlvbkFyZyIsInJlbmRlcmVkTWF0Y2hlcyIsIl9kYXRhUm91dGVyU3RhdGUyIiwiX2RhdGFSb3V0ZXJTdGF0ZSIsImVycm9ycyIsImVycm9ySW5kZXgiLCJmaW5kSW5kZXgiLCJyZWR1Y2VSaWdodCIsImVycm9yRWxlbWVudCIsImRlZmF1bHRFcnJvckVsZW1lbnQiLCJnZXRDaGlsZHJlbiIsIlJlbmRlcmVkUm91dGUiLCJyb3V0ZUNvbnRleHQiLCJFcnJvckJvdW5kYXJ5IiwiUmVuZGVyRXJyb3JCb3VuZGFyeSIsInJldmFsaWRhdGlvbiIsIl9yZW5kZXJNYXRjaGVzIiwiZW5jb2RlTG9jYXRpb24iLCJuYXZpZ2F0aW9uVHlwZSIsIlBvcCIsIkRlZmF1bHRFcnJvckNvbXBvbmVudCIsIl9zdGF0ZSRlcnJvcnMiLCJ1c2VEYXRhUm91dGVyU3RhdGUiLCJVc2VSb3V0ZUVycm9yIiwicm91dGVJZCIsInVzZVJvdXRlRXJyb3IiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiaW50ZXJuYWwiLCJpc1JvdXRlRXJyb3JSZXNwb25zZSIsInByZVN0eWxlcyIsInBhZGRpbmciLCJiYWNrZ3JvdW5kQ29sb3IiLCJmb250U3R5bGUiLCJzdXBlciIsImVycm9ySW5mbyIsInN0YXRpY0NvbnRleHQiLCJfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCIsInVzZVJvdXRlQ29udGV4dCIsInRoaXNSb3V0ZSIsIlJvdXRlIiwiX3Byb3BzIiwiX3JlZjUiLCJiYXNlbmFtZVByb3AiLCJsb2NhdGlvblByb3AiLCJzdGF0aWNQcm9wIiwibmF2aWdhdGlvbkNvbnRleHQiLCJsb2NhdGlvbkNvbnRleHQiLCJ0cmFpbGluZ1BhdGhuYW1lIiwiUm91dGVzIiwiX3JlZjYiLCJjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4iLCJ0cmVlUGF0aCIsImxvYWRlciIsImhhc0Vycm9yQm91bmRhcnkiLCJzaG91bGRSZXZhbGlkYXRlIiwiaGFuZGxlIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJfZXhjbHVkZWQiLCJfZXhjbHVkZWQyIiwiSGFzaFJvdXRlciIsIl9yZWYyIiwiZnV0dXJlIiwiaGlzdG9yeVJlZiIsImdldExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsInZhbGlkYXRlTG9jYXRpb24iLCJ2NUNvbXBhdCIsImdsb2JhbEhpc3RvcnkiLCJoaXN0b3J5IiwiZ2V0SW5kZXgiLCJoYW5kbGVQb3AiLCJuZXh0SW5kZXgiLCJkZWx0YSIsImNyZWF0ZVVSTCIsIm9yaWdpbiIsIlVSTCIsInJlcGxhY2VTdGF0ZSIsImxpc3RlbiIsImZuIiwiUHVzaCIsImhpc3RvcnlTdGF0ZSIsInB1c2hTdGF0ZSIsIkRPTUV4Y2VwdGlvbiIsIlJlcGxhY2UiLCJnZXRVcmxCYXNlZEhpc3RvcnkiLCJnZXRBdHRyaWJ1dGUiLCJzZXRTdGF0ZUltcGwiLCJ2N19zdGFydFRyYW5zaXRpb24iLCJuZXdTdGF0ZSIsImlzQnJvd3NlciIsIkxpbmsiLCJfcmVmNCIsImFic29sdXRlSHJlZiIsInJlbG9hZERvY3VtZW50IiwicHJldmVudFNjcm9sbFJlc2V0IiwiaXNFeHRlcm5hbCIsImN1cnJlbnRVcmwiLCJ0YXJnZXRVcmwiLCJwcm90b2NvbCIsIl90ZW1wIiwiam9pbmVkUGF0aG5hbWUiLCJ1c2VIcmVmIiwiaW50ZXJuYWxPbkNsaWNrIiwicmVwbGFjZVByb3AiLCJpc01vZGlmaWVkRXZlbnQiLCJzaG91bGRQcm9jZXNzTGlua0NsaWNrIiwidXNlTGlua0NsaWNrSGFuZGxlciIsIk5hdkxpbmsiLCJhcmlhQ3VycmVudFByb3AiLCJjbGFzc05hbWVQcm9wIiwic3R5bGVQcm9wIiwicm91dGVyU3RhdGUiLCJuZXh0TG9jYXRpb25QYXRobmFtZSIsIm5hdmlnYXRpb24iLCJpc0FjdGl2ZSIsImlzUGVuZGluZyIsImFyaWFDdXJyZW50IiwiQm9vbGVhbiIsIkJhY2tUb1RvcCIsIl91c2VTdGF0ZTIiLCJ2aXNpYmxlIiwic2V0VmlzaWJsZSIsImhhbmRsZVNjcm9sbFZpc2liaWxpdHkiLCJwYWdlWU9mZnNldCIsInNjcm9sbFRvIiwiYmVoYXZpb3IiLCJfc2xpY2VkVG9BcnJheSIsImlucHV0VmFsdWUxIiwic2V0SW5wdXRWYWx1ZTEiLCJfdXNlU3RhdGU0IiwiaW5wdXRWYWx1ZTIiLCJzZXRJbnB1dFZhbHVlMiIsIl91c2VTdGF0ZTYiLCJpbnB1dFZhbHVlMyIsInNldElucHV0VmFsdWUzIiwiX3VzZVN0YXRlOCIsImlucHV0VmFsdWU0Iiwic2V0SW5wdXRWYWx1ZTQiLCJfdXNlU3RhdGUxMCIsImlucHV0VmFsdWU1Iiwic2V0SW5wdXRWYWx1ZTUiLCJfdXNlU3RhdGUxMiIsImlucHV0VmFsdWU2Iiwic2V0SW5wdXRWYWx1ZTYiLCJfdXNlU3RhdGUxNCIsImlucHV0VmFsdWU3Iiwic2V0SW5wdXRWYWx1ZTciLCJfdXNlU3RhdGUxNiIsImlucHV0VmFsdWU4Iiwic2V0SW5wdXRWYWx1ZTgiLCJfdXNlU3RhdGUxOCIsImlucHV0VmFsdWU5Iiwic2V0SW5wdXRWYWx1ZTkiLCJfdXNlU3RhdGUyMCIsImlucHV0VmFsdWUxMCIsInNldElucHV0VmFsdWUxMCIsIl91c2VTdGF0ZTIyIiwiaW5wdXRWYWx1ZTExIiwic2V0SW5wdXRWYWx1ZTExIiwiX3VzZVN0YXRlMjQiLCJpbnB1dFZhbHVlMTIiLCJzZXRJbnB1dFZhbHVlMTIiLCJfdXNlU3RhdGUyNiIsImlucHV0VmFsdWUxMyIsInNldElucHV0VmFsdWUxMyIsIl91c2VTdGF0ZTI4IiwiaW5wdXRWYWx1ZTE0Iiwic2V0SW5wdXRWYWx1ZTE0IiwiX3VzZVN0YXRlMzAiLCJpbnB1dFZhbHVlMTUiLCJzZXRJbnB1dFZhbHVlMTUiLCJfdXNlU3RhdGUzMiIsImlucHV0VmFsdWUxNiIsInNldElucHV0VmFsdWUxNiIsIl91c2VTdGF0ZTM0IiwiaW5wdXRWYWx1ZTE3Iiwic2V0SW5wdXRWYWx1ZTE3IiwiX3VzZVN0YXRlMzYiLCJpbnB1dFZhbHVlMTgiLCJzZXRJbnB1dFZhbHVlMTgiLCJfdXNlU3RhdGUzOCIsImlucHV0VmFsdWUxOSIsInNldElucHV0VmFsdWUxOSIsIl91c2VTdGF0ZTQwIiwiaW5wdXRWYWx1ZTIwIiwic2V0SW5wdXRWYWx1ZTIwIiwiX3VzZVN0YXRlNDIiLCJpbnB1dFZhbHVlMjEiLCJzZXRJbnB1dFZhbHVlMjEiLCJfdXNlU3RhdGU0NCIsImlucHV0VmFsdWUyMiIsInNldElucHV0VmFsdWUyMiIsIl91c2VTdGF0ZTQ2IiwiaW5wdXRWYWx1ZTIzIiwic2V0SW5wdXRWYWx1ZTIzIiwiX3VzZVN0YXRlNDgiLCJpbnB1dFZhbHVlMjQiLCJzZXRJbnB1dFZhbHVlMjQiLCJfdXNlU3RhdGU1MCIsImlucHV0VmFsdWUyNSIsInNldElucHV0VmFsdWUyNSIsIl91c2VTdGF0ZTUyIiwiaW5wdXRWYWx1ZTI2Iiwic2V0SW5wdXRWYWx1ZTI2IiwiX3VzZVN0YXRlNTQiLCJpbnB1dFZhbHVlMjciLCJzZXRJbnB1dFZhbHVlMjciLCJfdXNlU3RhdGU1NiIsImlucHV0VmFsdWUyOCIsInNldElucHV0VmFsdWUyOCIsIl91c2VTdGF0ZTU4IiwiaW5wdXRWYWx1ZTI5Iiwic2V0SW5wdXRWYWx1ZTI5IiwiX3VzZVN0YXRlNjAiLCJpbnB1dFZhbHVlMzAiLCJzZXRJbnB1dFZhbHVlMzAiLCJfdXNlU3RhdGU2MiIsImlucHV0VmFsdWUzMSIsInNldElucHV0VmFsdWUzMSIsIl91c2VTdGF0ZTY0IiwiaW5wdXRWYWx1ZTMyIiwic2V0SW5wdXRWYWx1ZTMyIiwiX3VzZVN0YXRlNjYiLCJpbnB1dFZhbHVlMzMiLCJzZXRJbnB1dFZhbHVlMzMiLCJfdXNlU3RhdGU2OCIsImlucHV0VmFsdWUzNCIsInNldElucHV0VmFsdWUzNCIsIl91c2VTdGF0ZTcwIiwiaW5wdXRWYWx1ZTM1Iiwic2V0SW5wdXRWYWx1ZTM1IiwiX3VzZVN0YXRlNzIiLCJpbnB1dFZhbHVlMzYiLCJzZXRJbnB1dFZhbHVlMzYiLCJfdXNlU3RhdGU3NCIsImlucHV0VmFsdWUzNyIsInNldElucHV0VmFsdWUzNyIsIl91c2VTdGF0ZTc2IiwiaW5wdXRWYWx1ZTM4Iiwic2V0SW5wdXRWYWx1ZTM4IiwiX3VzZVN0YXRlNzgiLCJpbnB1dFZhbHVlMzkiLCJzZXRJbnB1dFZhbHVlMzkiLCJfdXNlU3RhdGU4MCIsImlucHV0VmFsdWU0MCIsInNldElucHV0VmFsdWU0MCIsIl91c2VTdGF0ZTgyIiwiaW5wdXRWYWx1ZTQxIiwic2V0SW5wdXRWYWx1ZTQxIiwiX3VzZVN0YXRlODQiLCJpbnB1dFZhbHVlNDIiLCJzZXRJbnB1dFZhbHVlNDIiLCJfdXNlU3RhdGU4NiIsImlucHV0VmFsdWU0MyIsInNldElucHV0VmFsdWU0MyIsIl91c2VTdGF0ZTg4IiwiaW5wdXRWYWx1ZTQ0Iiwic2V0SW5wdXRWYWx1ZTQ0IiwiX3VzZVN0YXRlOTAiLCJpbnB1dFZhbHVlNDUiLCJzZXRJbnB1dFZhbHVlNDUiLCJfdXNlU3RhdGU5MiIsImlucHV0VmFsdWU0NiIsInNldElucHV0VmFsdWU0NiIsIl91c2VTdGF0ZTk0IiwiaW5wdXRWYWx1ZTQ3Iiwic2V0SW5wdXRWYWx1ZTQ3IiwiX3VzZVN0YXRlOTYiLCJpbnB1dFZhbHVlNDgiLCJzZXRJbnB1dFZhbHVlNDgiLCJfdXNlU3RhdGU5OCIsImlucHV0VmFsdWU0OSIsInNldElucHV0VmFsdWU0OSIsIl91c2VTdGF0ZTEwMCIsImlucHV0VmFsdWU1MCIsInNldElucHV0VmFsdWU1MCIsInVzZU5hdmlnYXRlIiwib25DaGFuZ2UiLCJ0b0ZpeGVkIiwiTnVtYmVyIiwibW9kZWxSZWYiLCJhbm5vdHMiLCJzZXRBbm5vdHMiLCJnZXREYXRhUG9zaXRpb24iLCJhbm5vdCIsInBvc2l0aW9uIiwiZ2V0RGF0YU5vcm1hbCIsIm5vcm1hbCIsImNvbFNwYW4iLCJhciIsImhpdCIsInBvc2l0aW9uQW5kTm9ybWFsRnJvbVBvaW50Iiwic2xvdCIsIk1vdGlvbkNvbmZpZ0NvbnRleHQiLCJ0cmFuc2Zvcm1QYWdlUG9pbnQiLCJpc1N0YXRpYyIsInJlZHVjZWRNb3Rpb24iLCJNb3Rpb25Db250ZXh0IiwiTGF6eUNvbnRleHQiLCJzdHJpY3QiLCJpc1JlZk9iamVjdCIsImlzVmFyaWFudExhYmVsIiwiaXNBbmltYXRpb25Db250cm9scyIsInZhcmlhbnRQcmlvcml0eU9yZGVyIiwidmFyaWFudFByb3BzIiwiaXNDb250cm9sbGluZ1ZhcmlhbnRzIiwiYW5pbWF0ZSIsImlzVmFyaWFudE5vZGUiLCJ2YXJpYW50cyIsInZhcmlhbnRMYWJlbHNBc0RlcGVuZGVuY3kiLCJmZWF0dXJlUHJvcHMiLCJleGl0IiwiZHJhZyIsImhvdmVyIiwidGFwIiwicGFuIiwiaW5WaWV3IiwibGF5b3V0IiwiZmVhdHVyZURlZmluaXRpb25zIiwiaXNFbmFibGVkIiwiTGF5b3V0R3JvdXBDb250ZXh0IiwiU3dpdGNoTGF5b3V0R3JvdXBDb250ZXh0IiwibW90aW9uQ29tcG9uZW50U3ltYm9sIiwicHJlbG9hZGVkRmVhdHVyZXMiLCJjcmVhdGVWaXN1YWxFbGVtZW50IiwidXNlUmVuZGVyIiwidXNlVmlzdWFsU3RhdGUiLCJmZWF0dXJlcyIsImxvYWRGZWF0dXJlcyIsIkZvcndhcmRSZWZDb21wb25lbnQiLCJleHRlcm5hbFJlZiIsIk1lYXN1cmVMYXlvdXQiLCJjb25maWdBbmRQcm9wcyIsImxheW91dElkIiwidXNlTGF5b3V0SWQiLCJpbml0aWFsIiwiaW5oZXJpdCIsImdldEN1cnJlbnRUcmVlVmFyaWFudHMiLCJ1c2VDcmVhdGVNb3Rpb25Db250ZXh0IiwidmlzdWFsU3RhdGUiLCJ2aXN1YWxFbGVtZW50IiwicGFyZW50IiwibGF6eUNvbnRleHQiLCJwcmVzZW5jZUNvbnRleHQiLCJyZWR1Y2VkTW90aW9uQ29uZmlnIiwidmlzdWFsRWxlbWVudFJlZiIsInJlbmRlcmVyIiwiYmxvY2tJbml0aWFsQW5pbWF0aW9uIiwiY2FuSGFuZG9mZiIsIkhhbmRvZmZBcHBlYXJBbmltYXRpb25zIiwiYW5pbWF0aW9uU3RhdGUiLCJhbmltYXRlQ2hhbmdlcyIsInVwZGF0ZUZlYXR1cmVzIiwidXNlVmlzdWFsRWxlbWVudCIsImluaXRpYWxMYXlvdXRHcm91cENvbmZpZyIsImlzU3RyaWN0IiwibW91bnQiLCJ1c2VNb3Rpb25SZWYiLCJsYXlvdXRHcm91cElkIiwiY3JlYXRlTW90aW9uUHJveHkiLCJjcmVhdGVDb25maWciLCJjdXN0b20iLCJjdXN0b21Nb3Rpb25Db21wb25lbnRDb25maWciLCJQcm94eSIsImNvbXBvbmVudENhY2hlIiwiX3RhcmdldCIsImxvd2VyY2FzZVNWR0VsZW1lbnRzIiwiaXNTVkdDb21wb25lbnQiLCJzY2FsZUNvcnJlY3RvcnMiLCJ0cmFuc2Zvcm1Qcm9wT3JkZXIiLCJ0cmFuc2Zvcm1Qcm9wcyIsImlzRm9yY2VkTW90aW9uVmFsdWUiLCJpc01vdGlvblZhbHVlIiwiZ2V0VmVsb2NpdHkiLCJ0cmFuc2xhdGVBbGlhcyIsInRyYW5zZm9ybVBlcnNwZWN0aXZlIiwibnVtVHJhbnNmb3JtcyIsImNoZWNrU3RyaW5nU3RhcnRzV2l0aCIsInRva2VuIiwiaXNDU1NWYXJpYWJsZU5hbWUiLCJpc0NTU1ZhcmlhYmxlVG9rZW4iLCJnZXRWYWx1ZUFzVHlwZSIsInRyYW5zZm9ybSIsImNsYW1wIiwibWF4IiwicGFyc2VGbG9hdCIsImFscGhhIiwic2NhbGUiLCJzYW5pdGl6ZSIsInJvdW5kIiwiZmxvYXRSZWdleCIsImNvbG9yUmVnZXgiLCJzaW5nbGVDb2xvclJlZ2V4IiwiaXNTdHJpbmciLCJjcmVhdGVVbml0VHlwZSIsInVuaXQiLCJkZWdyZWVzIiwicGVyY2VudCIsInB4IiwidnciLCJwcm9ncmVzc1BlcmNlbnRhZ2UiLCJudW1iZXJWYWx1ZVR5cGVzIiwiYm9yZGVyV2lkdGgiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsImJvcmRlclJhZGl1cyIsInJhZGl1cyIsImJvcmRlclRvcExlZnRSYWRpdXMiLCJib3JkZXJUb3BSaWdodFJhZGl1cyIsImJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzIiwiYm9yZGVyQm90dG9tTGVmdFJhZGl1cyIsIm1heFdpZHRoIiwibWF4SGVpZ2h0IiwicmlnaHQiLCJib3R0b20iLCJwYWRkaW5nVG9wIiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ0JvdHRvbSIsInBhZGRpbmdMZWZ0IiwibWFyZ2luIiwibWFyZ2luVG9wIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5MZWZ0Iiwicm90YXRlIiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwic2NhbGVYIiwic2NhbGVZIiwic2NhbGVaIiwic2tldyIsInNrZXdYIiwic2tld1kiLCJkaXN0YW5jZSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwidHJhbnNsYXRlWiIsInBlcnNwZWN0aXZlIiwib3JpZ2luWCIsIm9yaWdpblkiLCJvcmlnaW5aIiwibnVtT2N0YXZlcyIsImJ1aWxkSFRNTFN0eWxlcyIsImxhdGVzdFZhbHVlcyIsInRyYW5zZm9ybVRlbXBsYXRlIiwidmFycyIsInRyYW5zZm9ybU9yaWdpbiIsImhhc1RyYW5zZm9ybSIsImhhc1RyYW5zZm9ybU9yaWdpbiIsInRyYW5zZm9ybUlzTm9uZSIsInZhbHVlVHlwZSIsInZhbHVlQXNUeXBlIiwiZW5hYmxlSGFyZHdhcmVBY2NlbGVyYXRpb24iLCJhbGxvd1RyYW5zZm9ybU5vbmUiLCJ0cmFuc2Zvcm1Jc0RlZmF1bHQiLCJ0cmFuc2Zvcm1TdHJpbmciLCJidWlsZFRyYW5zZm9ybSIsImNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSIsImNvcHlSYXdWYWx1ZXNPbmx5IiwidXNlSFRNTFByb3BzIiwiaHRtbFByb3BzIiwidXNlSW5pdGlhbE1vdGlvblZhbHVlcyIsInRyYW5zZm9ybVZhbHVlcyIsInVzZVN0eWxlIiwiZHJhZ0xpc3RlbmVyIiwiZHJhZ2dhYmxlIiwidXNlclNlbGVjdCIsIldlYmtpdFVzZXJTZWxlY3QiLCJXZWJraXRUb3VjaENhbGxvdXQiLCJ0b3VjaEFjdGlvbiIsInRhYkluZGV4Iiwib25UYXAiLCJvblRhcFN0YXJ0Iiwid2hpbGVUYXAiLCJ2YWxpZE1vdGlvblByb3BzIiwiaXNWYWxpZE1vdGlvblByb3AiLCJzaG91bGRGb3J3YXJkIiwiaXNWYWxpZFByb3AiLCJyZXF1aXJlIiwiX2EiLCJjYWxjT3JpZ2luIiwiZGFzaEtleXMiLCJhcnJheSIsImNhbWVsS2V5cyIsImJ1aWxkU1ZHQXR0cnMiLCJhdHRyWCIsImF0dHJZIiwiYXR0clNjYWxlIiwicGF0aExlbmd0aCIsInBhdGhTcGFjaW5nIiwicGF0aE9mZnNldCIsImxhdGVzdCIsImlzU1ZHVGFnIiwidmlld0JveCIsImF0dHJzIiwiZGltZW5zaW9ucyIsImNhbGNTVkdUcmFuc2Zvcm1PcmlnaW4iLCJzcGFjaW5nIiwidXNlRGFzaENhc2UiLCJidWlsZFNWR1BhdGgiLCJjcmVhdGVTdmdSZW5kZXJTdGF0ZSIsInVzZVNWR1Byb3BzIiwiX2lzU3RhdGljIiwidmlzdWFsUHJvcHMiLCJyYXdTdHlsZXMiLCJjcmVhdGVVc2VSZW5kZXIiLCJmb3J3YXJkTW90aW9uUHJvcHMiLCJmaWx0ZXJlZFByb3BzIiwiaXNEb20iLCJ2YWx1ZXMiLCJmaWx0ZXJQcm9wcyIsImVsZW1lbnRQcm9wcyIsInJlbmRlcmVkQ2hpbGRyZW4iLCJjYW1lbFRvRGFzaCIsInN0ciIsInJlbmRlckhUTUwiLCJwcm9qZWN0aW9uIiwiZ2V0UHJvamVjdGlvblN0eWxlcyIsImNhbWVsQ2FzZUF0dHJpYnV0ZXMiLCJyZW5kZXJTVkciLCJyZW5kZXJTdGF0ZSIsIl9zdHlsZVByb3AiLCJzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMiLCJwcmV2UHJvcHMiLCJuZXdWYWx1ZXMiLCJyZXNvbHZlVmFyaWFudEZyb21Qcm9wcyIsImN1cnJlbnRWYWx1ZXMiLCJjdXJyZW50VmVsb2NpdHkiLCJpc0tleWZyYW1lc1RhcmdldCIsImlzQ3VzdG9tVmFsdWUiLCJtaXgiLCJ0b1ZhbHVlIiwicmVzb2x2ZUZpbmFsVmFsdWVJbktleWZyYW1lcyIsInJlc29sdmVNb3Rpb25WYWx1ZSIsInVud3JhcHBlZFZhbHVlIiwibWFrZVVzZVZpc3VhbFN0YXRlIiwiY29uZmlnIiwibWFrZSIsImNyZWF0ZVJlbmRlclN0YXRlIiwib25Nb3VudCIsIm1ha2VMYXRlc3RWYWx1ZXMiLCJtYWtlU3RhdGUiLCJpbml0IiwidXNlQ29uc3RhbnQiLCJzY3JhcGVNb3Rpb25WYWx1ZXMiLCJtb3Rpb25WYWx1ZXMiLCJpc0NvbnRyb2xsaW5nVmFyaWFudHMkMSIsImlzVmFyaWFudE5vZGUkMSIsImlzSW5pdGlhbEFuaW1hdGlvbkJsb2NrZWQiLCJ2YXJpYW50VG9TZXQiLCJyZXNvbHZlZCIsInRyYW5zaXRpb25FbmQiLCJ2YWx1ZVRhcmdldCIsIm5vb3AiLCJhbnkiLCJRdWV1ZSIsInNjaGVkdWxlZCIsInByb2Nlc3MiLCJjbGVhciIsInN0ZXBzT3JkZXIiLCJzY2hlZHVsZSIsImNhbmNlbCIsImNhbmNlbEZyYW1lIiwiZnJhbWVEYXRhIiwic3RlcHMiLCJzY2hlZHVsZU5leHRCYXRjaCIsImFsbG93S2VlcEFsaXZlIiwicnVuTmV4dEZyYW1lIiwidXNlRGVmYXVsdEVsYXBzZWQiLCJ0aW1lc3RhbXAiLCJpc1Byb2Nlc3NpbmciLCJhY2MiLCJ0aGlzRnJhbWUiLCJuZXh0RnJhbWUiLCJudW1Ub1J1biIsImZsdXNoTmV4dEZyYW1lIiwidG9LZWVwQWxpdmUiLCJzdGVwIiwia2VlcEFsaXZlIiwiaW1tZWRpYXRlIiwiYWRkVG9DdXJyZW50RnJhbWUiLCJjcmVhdGVSZW5kZXJTdGVwIiwicHJvY2Vzc1N0ZXAiLCJzdGVwSWQiLCJwcm9jZXNzQmF0Y2giLCJjcmVhdGVSZW5kZXJCYXRjaGVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic3ZnTW90aW9uQ29uZmlnIiwicmVhZCIsImdldEJCb3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJodG1sTW90aW9uQ29uZmlnIiwiYWRkRG9tRXZlbnQiLCJldmVudE5hbWUiLCJoYW5kbGVyIiwiaXNQcmltYXJ5UG9pbnRlciIsImV4dHJhY3RFdmVudEluZm8iLCJwb2ludFR5cGUiLCJwb2ludCIsImFkZFBvaW50ZXJJbmZvIiwiYWRkUG9pbnRlckV2ZW50IiwiY29tYmluZUZ1bmN0aW9ucyIsInBpcGUiLCJ0cmFuc2Zvcm1lcnMiLCJjcmVhdGVMb2NrIiwibG9jayIsImdsb2JhbEhvcml6b250YWxMb2NrIiwiZ2xvYmFsVmVydGljYWxMb2NrIiwiZ2V0R2xvYmFsTG9jayIsIm9wZW5Ib3Jpem9udGFsIiwib3BlblZlcnRpY2FsIiwiaXNEcmFnQWN0aXZlIiwib3Blbkdlc3R1cmVMb2NrIiwiRmVhdHVyZSIsImFkZEhvdmVyRXZlbnQiLCJjYWxsYmFja05hbWUiLCJpbmZvIiwiZ2V0UHJvcHMiLCJ3aGlsZUhvdmVyIiwic2V0QWN0aXZlIiwiaXNOb2RlT3JDaGlsZCIsInBhcmVudEVsZW1lbnQiLCJmaXJlU3ludGhldGljUG9pbnRlckV2ZW50Iiwic3ludGhldGljUG9pbnRlckV2ZW50IiwiUG9pbnRlckV2ZW50Iiwib2JzZXJ2ZXJDYWxsYmFja3MiLCJvYnNlcnZlcnMiLCJmaXJlT2JzZXJ2ZXJDYWxsYmFjayIsImVudHJ5IiwiZmlyZUFsbE9ic2VydmVyQ2FsbGJhY2tzIiwiZW50cmllcyIsInRocmVzaG9sZE5hbWVzIiwiYWxsIiwiZ2VzdHVyZUFuaW1hdGlvbnMiLCJoYXNFbnRlcmVkVmlldyIsImlzSW5WaWV3Iiwic3RhcnRPYnNlcnZlciIsInZpZXdwb3J0Iiwicm9vdCIsInJvb3RNYXJnaW4iLCJhbW91bnQiLCJvbmNlIiwidGhyZXNob2xkIiwicm9vdEludGVyZXNlY3Rpb25PYnNlcnZlciIsImxvb2t1cFJvb3QiLCJyb290T2JzZXJ2ZXJzIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJpbml0SW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJvYnNlcnZlIiwidW5vYnNlcnZlIiwib2JzZXJ2ZUludGVyc2VjdGlvbiIsImlzSW50ZXJzZWN0aW5nIiwib25WaWV3cG9ydEVudGVyIiwib25WaWV3cG9ydExlYXZlIiwicHJldlZpZXdwb3J0IiwiaGFzVmlld3BvcnRPcHRpb25DaGFuZ2VkIiwicmVtb3ZlU3RhcnRMaXN0ZW5lcnMiLCJyZW1vdmVFbmRMaXN0ZW5lcnMiLCJyZW1vdmVBY2Nlc3NpYmxlTGlzdGVuZXJzIiwic3RhcnRQb2ludGVyUHJlc3MiLCJzdGFydEV2ZW50Iiwic3RhcnRJbmZvIiwiaXNQcmVzc2luZyIsInJlbW92ZVBvaW50ZXJVcExpc3RlbmVyIiwiZW5kRXZlbnQiLCJlbmRJbmZvIiwiY2hlY2tQcmVzc0VuZCIsIm9uVGFwQ2FuY2VsIiwicmVtb3ZlUG9pbnRlckNhbmNlbExpc3RlbmVyIiwiY2FuY2VsRXZlbnQiLCJjYW5jZWxJbmZvIiwiY2FuY2VsUHJlc3MiLCJzdGFydFByZXNzIiwic3RhcnRBY2Nlc3NpYmxlUHJlc3MiLCJyZW1vdmVLZXlkb3duTGlzdGVuZXIiLCJrZXlkb3duRXZlbnQiLCJrZXl1cEV2ZW50IiwicmVtb3ZlQmx1ckxpc3RlbmVyIiwicmVtb3ZlUG9pbnRlckxpc3RlbmVyIiwicmVtb3ZlRm9jdXNMaXN0ZW5lciIsIm9uRm9jdXMiLCJpc0ZvY3VzVmlzaWJsZSIsIm9uQmx1ciIsInNoYWxsb3dDb21wYXJlIiwicHJldiIsInByZXZMZW5ndGgiLCJyZXNvbHZlVmFyaWFudCIsImdldEN1cnJlbnQiLCJ2ZWxvY2l0eSIsIm9wdGltaXplZEFwcGVhckRhdGFBdHRyaWJ1dGUiLCJzZWNvbmRzVG9NaWxsaXNlY29uZHMiLCJzZWNvbmRzIiwibWlsbGlzZWNvbmRzVG9TZWNvbmRzIiwibWlsbGlzZWNvbmRzIiwiaXNCZXppZXJEZWZpbml0aW9uIiwiZWFzaW5nIiwiaXNXYWFwaVN1cHBvcnRlZEVhc2luZyIsInN1cHBvcnRlZFdhYXBpRWFzaW5nIiwiY3ViaWNCZXppZXJBc1N0cmluZyIsImxpbmVhciIsImVhc2UiLCJlYXNlSW4iLCJlYXNlT3V0IiwiZWFzZUluT3V0IiwiY2lyY0luIiwiY2lyY091dCIsImJhY2tJbiIsImJhY2tPdXQiLCJtYXBFYXNpbmdUb05hdGl2ZUVhc2luZyIsImNhbGNCZXppZXIiLCJhMSIsImEyIiwiY3ViaWNCZXppZXIiLCJtWDEiLCJtWTEiLCJtWDIiLCJtWTIiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsImN1cnJlbnRYIiwiY3VycmVudFQiLCJhYnMiLCJiaW5hcnlTdWJkaXZpZGUiLCJpc0Vhc2luZ0FycmF5IiwibWlycm9yRWFzaW5nIiwicmV2ZXJzZUVhc2luZyIsInNpbiIsImFjb3MiLCJjaXJjSW5PdXQiLCJiYWNrSW5PdXQiLCJlYXNpbmdMb29rdXAiLCJhbnRpY2lwYXRlIiwicG93IiwiZWFzaW5nRGVmaW5pdGlvblRvRnVuY3Rpb24iLCJ4MSIsInkxIiwieDIiLCJ5MiIsImlzQ29sb3JTdHJpbmciLCJ0ZXN0UHJvcCIsInNwbGl0Q29sb3IiLCJhTmFtZSIsImJOYW1lIiwiY05hbWUiLCJyZ2JVbml0IiwiY2xhbXBSZ2JVbml0IiwicmdiYSIsInJlZCIsImdyZWVuIiwiYmx1ZSIsImFscGhhJDEiLCJoZXgiLCJwYXJzZUludCIsImhzbGEiLCJodWUiLCJzYXR1cmF0aW9uIiwibGlnaHRuZXNzIiwicHJvZ3Jlc3MiLCJodWVUb1JnYiIsIm1peExpbmVhckNvbG9yIiwiZnJvbUV4cG8iLCJzcXJ0IiwiY29sb3JUeXBlcyIsImFzUkdCQSIsImZpbmQiLCJtb2RlbCIsImhzbGFUb1JnYmEiLCJtaXhDb2xvciIsImZyb21SR0JBIiwidG9SR0JBIiwiYmxlbmRlZCIsImNzc1ZhclRva2VuaXNlciIsInJlZ2V4IiwiY291bnRLZXkiLCJjb2xvclRva2VuaXNlciIsIm51bWJlclRva2VuaXNlciIsInRva2VuaXNlIiwidG9rZW5pc2VkIiwiYW5hbHlzZUNvbXBsZXhWYWx1ZSIsIm9yaWdpbmFsVmFsdWUiLCJudW1WYXJzIiwibnVtQ29sb3JzIiwibnVtTnVtYmVycyIsInBhcnNlQ29tcGxleFZhbHVlIiwiY3JlYXRlVHJhbnNmb3JtZXIiLCJudW1WYWx1ZXMiLCJvdXRwdXQiLCJjb252ZXJ0TnVtYmVyc1RvWmVybyIsImNvbXBsZXgiLCJfYiIsImdldEFuaW1hdGFibGVOb25lIiwicGFyc2VkIiwidHJhbnNmb3JtZXIiLCJtaXhJbW1lZGlhdGUiLCJnZXRNaXhlciIsIm1peENvbXBsZXgiLCJtaXhBcnJheSIsImJsZW5kVmFsdWUiLCJmcm9tVGhpcyIsIm1peE9iamVjdCIsInRlbXBsYXRlIiwib3JpZ2luU3RhdHMiLCJ0YXJnZXRTdGF0cyIsInRvRnJvbURpZmZlcmVuY2UiLCJtaXhOdW1iZXIiLCJpbnRlcnBvbGF0ZSIsImlzQ2xhbXAiLCJtaXhlciIsImlucHV0TGVuZ3RoIiwicmV2ZXJzZSIsIm1peGVycyIsImN1c3RvbU1peGVyIiwibWl4ZXJGYWN0b3J5IiwibnVtTWl4ZXJzIiwiZWFzaW5nRnVuY3Rpb24iLCJjcmVhdGVNaXhlcnMiLCJpbnRlcnBvbGF0b3IiLCJwcm9ncmVzc0luUmFuZ2UiLCJkZWZhdWx0RWFzaW5nIiwia2V5ZnJhbWVzIiwiZHVyYXRpb24iLCJrZXlmcmFtZVZhbHVlcyIsInRpbWVzIiwiZWFzaW5nRnVuY3Rpb25zIiwiYWJzb2x1dGVUaW1lcyIsImNvbnZlcnRPZmZzZXRUb1RpbWVzIiwiYXJyIiwicmVtYWluaW5nIiwib2Zmc2V0UHJvZ3Jlc3MiLCJmaWxsT2Zmc2V0IiwiZGVmYXVsdE9mZnNldCIsIm1hcFRpbWVUb0tleWZyYW1lIiwiY2FsY3VsYXRlZER1cmF0aW9uIiwidmVsb2NpdHlQZXJTZWNvbmQiLCJmcmFtZUR1cmF0aW9uIiwidmVsb2NpdHlTYW1wbGVEdXJhdGlvbiIsImNhbGNHZW5lcmF0b3JWZWxvY2l0eSIsInJlc29sdmVWYWx1ZSIsInByZXZUIiwic2FmZU1pbiIsIm1pbkR1cmF0aW9uIiwibWF4RHVyYXRpb24iLCJtaW5EYW1waW5nIiwibWF4RGFtcGluZyIsInJvb3RJdGVyYXRpb25zIiwiY2FsY0FuZ3VsYXJGcmVxIiwidW5kYW1wZWRGcmVxIiwiZGFtcGluZ1JhdGlvIiwiZHVyYXRpb25LZXlzIiwicGh5c2ljc0tleXMiLCJpc1NwcmluZ1R5cGUiLCJzcHJpbmciLCJyZXN0RGVsdGEiLCJyZXN0U3BlZWQiLCJzdGlmZm5lc3MiLCJkYW1waW5nIiwibWFzcyIsImlzUmVzb2x2ZWRGcm9tRHVyYXRpb24iLCJzcHJpbmdPcHRpb25zIiwiZGVyaXZlZCIsImJvdW5jZSIsImVudmVsb3BlIiwiZGVyaXZhdGl2ZSIsImV4cG9uZW50aWFsRGVjYXkiLCJleHAiLCJpbml0aWFsR3Vlc3MiLCJhcHByb3hpbWF0ZVJvb3QiLCJmaW5kU3ByaW5nIiwiZ2V0U3ByaW5nT3B0aW9ucyIsImluaXRpYWxWZWxvY2l0eSIsImluaXRpYWxEZWx0YSIsInVuZGFtcGVkQW5ndWxhckZyZXEiLCJpc0dyYW51bGFyU2NhbGUiLCJyZXNvbHZlU3ByaW5nIiwiYW5ndWxhckZyZXEiLCJjb3MiLCJkYW1wZWRBbmd1bGFyRnJlcSIsImZyZXFGb3JUIiwic2luaCIsImNvc2giLCJpc0JlbG93VmVsb2NpdHlUaHJlc2hvbGQiLCJpc0JlbG93RGlzcGxhY2VtZW50VGhyZXNob2xkIiwiaW5lcnRpYSIsInBvd2VyIiwidGltZUNvbnN0YW50IiwiYm91bmNlRGFtcGluZyIsImJvdW5jZVN0aWZmbmVzcyIsIm1vZGlmeVRhcmdldCIsIm5lYXJlc3RCb3VuZGFyeSIsImFtcGxpdHVkZSIsImlkZWFsIiwiY2FsY0RlbHRhIiwiY2FsY0xhdGVzdCIsImFwcGx5RnJpY3Rpb24iLCJ0aW1lUmVhY2hlZEJvdW5kYXJ5Iiwic3ByaW5nJDEiLCJjaGVja0NhdGNoQm91bmRhcnkiLCJoYXNVcGRhdGVkRnJhbWUiLCJmcmFtZWxvb3BEcml2ZXIiLCJwYXNzVGltZXN0YW1wIiwic3RvcCIsIm1heEdlbmVyYXRvckR1cmF0aW9uIiwiY2FsY0dlbmVyYXRvckR1cmF0aW9uIiwiZ2VuZXJhdG9yIiwidHlwZXMiLCJkZWNheSIsInR3ZWVuIiwiYW5pbWF0ZVZhbHVlIiwiYXV0b3BsYXkiLCJkcml2ZXIiLCJrZXlmcmFtZXMkMSIsInJlcGVhdERlbGF5IiwicmVwZWF0VHlwZSIsIm9uUGxheSIsIm9uU3RvcCIsIm9uQ29tcGxldGUiLCJvblVwZGF0ZSIsInJlc29sdmVGaW5pc2hlZFByb21pc2UiLCJjdXJyZW50RmluaXNoZWRQcm9taXNlIiwic3BlZWQiLCJoYXNTdG9wcGVkIiwidXBkYXRlRmluaXNoZWRQcm9taXNlIiwiYW5pbWF0aW9uRHJpdmVyIiwiZ2VuZXJhdG9yRmFjdG9yeSIsIm1hcE51bWJlcnNUb0tleWZyYW1lcyIsIm1pcnJvcmVkR2VuZXJhdG9yIiwicGxheVN0YXRlIiwiaG9sZFRpbWUiLCJjYW5jZWxUaW1lIiwicmVzb2x2ZWREdXJhdGlvbiIsInRvdGFsRHVyYXRpb24iLCJjdXJyZW50VGltZSIsInRpY2siLCJ0aW1lV2l0aG91dERlbGF5IiwiaXNJbkRlbGF5UGhhc2UiLCJlbGFwc2VkIiwiZnJhbWVHZW5lcmF0b3IiLCJjdXJyZW50SXRlcmF0aW9uIiwiaXRlcmF0aW9uUHJvZ3Jlc3MiLCJpdGVyYXRpb25Jc09kZCIsImlzQW5pbWF0aW9uRmluaXNoZWQiLCJmaW5pc2giLCJzdG9wQW5pbWF0aW9uRHJpdmVyIiwicGxheSIsImNvbnRyb2xzIiwicmVqZWN0IiwibmV3VGltZSIsIm5ld1NwZWVkIiwicGF1c2UiLCJjb21wbGV0ZSIsInNhbXBsZSIsInN1cHBvcnRzV2FhcGkiLCJhY2NlbGVyYXRlZFZhbHVlcyIsInVuZGVyRGFtcGVkU3ByaW5nIiwia2V5ZnJhbWVzVHJhbnNpdGlvbiIsImdldERlZmF1bHRUcmFuc2l0aW9uIiwidmFsdWVLZXkiLCJpc0FuaW1hdGFibGUiLCJtYXhEZWZhdWx0cyIsImFwcGx5RGVmYXVsdEZpbHRlciIsImZ1bmN0aW9uUmVnZXgiLCJmdW5jdGlvbnMiLCJkZWZhdWx0VmFsdWVUeXBlcyIsIm91dGxpbmVDb2xvciIsImZpbGwiLCJzdHJva2UiLCJib3JkZXJDb2xvciIsImJvcmRlclRvcENvbG9yIiwiYm9yZGVyUmlnaHRDb2xvciIsImJvcmRlckJvdHRvbUNvbG9yIiwiYm9yZGVyTGVmdENvbG9yIiwiV2Via2l0RmlsdGVyIiwiZ2V0RGVmYXVsdFZhbHVlVHlwZSIsImRlZmF1bHRWYWx1ZVR5cGUiLCJpc1plcm9WYWx1ZVN0cmluZyIsImlzTm9uZSIsImdldFZhbHVlVHJhbnNpdGlvbiIsImFuaW1hdGVNb3Rpb25WYWx1ZSIsInZhbHVlTmFtZSIsInZhbHVlVHJhbnNpdGlvbiIsImlzVGFyZ2V0QW5pbWF0YWJsZSIsImRlZmF1bHRPcmlnaW4iLCJhbmltYXRhYmxlVGVtcGxhdGVWYWx1ZSIsIm5vbmVLZXlmcmFtZUluZGV4ZXMiLCJnZXRLZXlmcmFtZXMiLCJvcmlnaW5LZXlmcmFtZSIsInRhcmdldEtleWZyYW1lIiwiaXNPcmlnaW5BbmltYXRhYmxlIiwid2hlbiIsIl9kZWxheSIsImRlbGF5Q2hpbGRyZW4iLCJzdGFnZ2VyQ2hpbGRyZW4iLCJzdGFnZ2VyRGlyZWN0aW9uIiwiaXNUcmFuc2l0aW9uRGVmaW5lZCIsImNyZWF0ZUluc3RhbnRBbmltYXRpb24iLCJvd25lciIsIkhUTUxFbGVtZW50IiwiYWNjZWxlcmF0ZWRBbmltYXRpb24iLCJyZXF1aXJlc1ByZWdlbmVyYXRlZEtleWZyYW1lcyIsInNhbXBsZUFuaW1hdGlvbiIsInByZWdlbmVyYXRlZEtleWZyYW1lcyIsImtleWZyYW1lT3B0aW9ucyIsIml0ZXJhdGlvbnMiLCJkaXJlY3Rpb24iLCJhbmltYXRlU3R5bGUiLCJzeW5jU3RhcnQiLCJ0aW1lbGluZSIsImNhbmNlbEFuaW1hdGlvbiIsInNhZmVDYW5jZWwiLCJvbmZpbmlzaCIsImdldEZpbmFsS2V5ZnJhbWUiLCJhdHRhY2hUaW1lbGluZSIsInBsYXliYWNrUmF0ZSIsInNldFdpdGhWZWxvY2l0eSIsImNyZWF0ZUFjY2VsZXJhdGVkQW5pbWF0aW9uIiwiaXNXaWxsQ2hhbmdlTW90aW9uVmFsdWUiLCJpc051bWVyaWNhbFN0cmluZyIsImFkZFVuaXF1ZUl0ZW0iLCJyZW1vdmVJdGVtIiwiU3Vic2NyaXB0aW9uTWFuYWdlciIsInN1YnNjcmlwdGlvbnMiLCJub3RpZnkiLCJudW1TdWJzY3JpcHRpb25zIiwiZ2V0U2l6ZSIsImNvbGxlY3RNb3Rpb25WYWx1ZXMiLCJNb3Rpb25WYWx1ZSIsInRpbWVEZWx0YSIsImxhc3RVcGRhdGVkIiwiY2FuVHJhY2tWZWxvY2l0eSIsImV2ZW50cyIsInVwZGF0ZUFuZE5vdGlmeSIsInBvc3RSZW5kZXIiLCJzY2hlZHVsZVZlbG9jaXR5Q2hlY2siLCJjaGFuZ2UiLCJ2ZWxvY2l0eUNoYW5nZSIsInJlbmRlclJlcXVlc3QiLCJ2ZWxvY2l0eUNoZWNrIiwiaGFzQW5pbWF0ZWQiLCJzdWJzY3JpcHRpb24iLCJvbiIsInVuc3Vic2NyaWJlIiwiY2xlYXJMaXN0ZW5lcnMiLCJldmVudE1hbmFnZXJzIiwiYXR0YWNoIiwicGFzc2l2ZUVmZmVjdCIsInN0b3BQYXNzaXZlRWZmZWN0IiwianVtcCIsImdldFByZXZpb3VzIiwic3RhcnRBbmltYXRpb24iLCJhbmltYXRpb25TdGFydCIsImFuaW1hdGlvbkNvbXBsZXRlIiwiY2xlYXJBbmltYXRpb24iLCJhbmltYXRpb25DYW5jZWwiLCJpc0FuaW1hdGluZyIsIm1vdGlvblZhbHVlIiwidGVzdFZhbHVlVHlwZSIsImRpbWVuc2lvblZhbHVlVHlwZXMiLCJmaW5kRGltZW5zaW9uVmFsdWVUeXBlIiwidmFsdWVUeXBlcyIsInNldE1vdGlvblZhbHVlIiwiaGFzVmFsdWUiLCJhZGRWYWx1ZSIsImdldE9yaWdpbkZyb21UcmFuc2l0aW9uIiwic2hvdWxkQmxvY2tBbmltYXRpb24iLCJwcm90ZWN0ZWRLZXlzIiwibmVlZHNBbmltYXRpbmciLCJzaG91bGRCbG9jayIsImFuaW1hdGVUYXJnZXQiLCJ0cmFuc2l0aW9uT3ZlcnJpZGUiLCJtYWtlVGFyZ2V0QW5pbWF0YWJsZSIsIndpbGxDaGFuZ2UiLCJhbmltYXRpb25zIiwiYW5pbWF0aW9uVHlwZVN0YXRlIiwiZ2V0U3RhdGUiLCJhcHBlYXJJZCIsInNob3VsZFJlZHVjZU1vdGlvbiIsInNldFRhcmdldCIsImFuaW1hdGVWYXJpYW50IiwidmFyaWFudCIsImdldEFuaW1hdGlvbiIsImdldENoaWxkQW5pbWF0aW9ucyIsInZhcmlhbnRDaGlsZHJlbiIsImZvcndhcmREZWxheSIsIm1heFN0YWdnZXJEdXJhdGlvbiIsImdlbmVyYXRlU3RhZ2dlckR1cmF0aW9uIiwic29ydEJ5VHJlZU9yZGVyIiwiYW5pbWF0ZUNoaWxkcmVuIiwic29ydE5vZGVQb3NpdGlvbiIsInJldmVyc2VQcmlvcml0eU9yZGVyIiwibnVtQW5pbWF0aW9uVHlwZXMiLCJjcmVhdGVBbmltYXRpb25TdGF0ZSIsInJlc29sdmVkRGVmaW5pdGlvbiIsImFuaW1hdGVWaXN1YWxFbGVtZW50IiwiYW5pbWF0ZUxpc3QiLCJjcmVhdGVUeXBlU3RhdGUiLCJ3aGlsZUluVmlldyIsIndoaWxlRHJhZyIsIndoaWxlRm9jdXMiLCJpc0luaXRpYWxSZW5kZXIiLCJidWlsZFJlc29sdmVkVHlwZVZhbHVlcyIsImNoYW5nZWRBY3RpdmVUeXBlIiwiZ2V0VmFyaWFudENvbnRleHQiLCJyZW1vdmVkS2V5cyIsImVuY291bnRlcmVkS2V5cyIsInJlbW92ZWRWYXJpYW50SW5kZXgiLCJ0eXBlU3RhdGUiLCJwcm9wSXNWYXJpYW50IiwiYWN0aXZlRGVsdGEiLCJpc0luaGVyaXRlZCIsIm1hbnVhbGx5QW5pbWF0ZU9uTW91bnQiLCJwcmV2UHJvcCIsInZhcmlhbnREaWRDaGFuZ2UiLCJjaGVja1ZhcmlhbnRzRGlkQ2hhbmdlIiwic2hvdWxkQW5pbWF0ZVR5cGUiLCJkZWZpbml0aW9uTGlzdCIsInJlc29sdmVkVmFsdWVzIiwicHJldlJlc29sdmVkVmFsdWVzIiwiYWxsS2V5cyIsIm1hcmtUb0FuaW1hdGUiLCJmYWxsYmFja0FuaW1hdGlvbiIsImZhbGxiYWNrVGFyZ2V0IiwiZ2V0QmFzZVRhcmdldCIsInNob3VsZEFuaW1hdGUiLCJzZXRBbmltYXRlRnVuY3Rpb24iLCJtYWtlQW5pbWF0b3IiLCJ1cGRhdGVBbmltYXRpb25Db250cm9sc1N1YnNjcmlwdGlvbiIsInN1YnNjcmliZSIsInByZXZBbmltYXRlIiwiaXNQcmVzZW50Iiwib25FeGl0Q29tcGxldGUiLCJwcmV2SXNQcmVzZW50IiwicHJldlByZXNlbmNlQ29udGV4dCIsImV4aXRBbmltYXRpb24iLCJyZWdpc3RlciIsIlBhblNlc3Npb24iLCJoYW5kbGVycyIsImxhc3RNb3ZlRXZlbnQiLCJsYXN0TW92ZUV2ZW50SW5mbyIsInVwZGF0ZVBvaW50IiwiZ2V0UGFuSW5mbyIsImlzUGFuU3RhcnRlZCIsImlzRGlzdGFuY2VQYXN0VGhyZXNob2xkIiwieERlbHRhIiwieURlbHRhIiwiZGlzdGFuY2UyRCIsIm9uU3RhcnQiLCJvbk1vdmUiLCJoYW5kbGVQb2ludGVyTW92ZSIsInRyYW5zZm9ybVBvaW50IiwiaGFuZGxlUG9pbnRlclVwIiwib25FbmQiLCJvblNlc3Npb25FbmQiLCJwYW5JbmZvIiwiaW5pdGlhbEluZm8iLCJvblNlc3Npb25TdGFydCIsInJlbW92ZUxpc3RlbmVycyIsInVwZGF0ZUhhbmRsZXJzIiwic3VidHJhY3RQb2ludCIsImxhc3REZXZpY2VQb2ludCIsInN0YXJ0RGV2aWNlUG9pbnQiLCJ0aW1lc3RhbXBlZFBvaW50IiwibGFzdFBvaW50IiwiY2FsY0xlbmd0aCIsImF4aXMiLCJpc05lYXIiLCJtYXhEaXN0YW5jZSIsImNhbGNBeGlzRGVsdGEiLCJvcmlnaW5Qb2ludCIsInRyYW5zbGF0ZSIsImNhbGNCb3hEZWx0YSIsImNhbGNSZWxhdGl2ZUF4aXMiLCJjYWxjUmVsYXRpdmVBeGlzUG9zaXRpb24iLCJjYWxjUmVsYXRpdmVQb3NpdGlvbiIsImNhbGNSZWxhdGl2ZUF4aXNDb25zdHJhaW50cyIsImNhbGNWaWV3cG9ydEF4aXNDb25zdHJhaW50cyIsImxheW91dEF4aXMiLCJjb25zdHJhaW50c0F4aXMiLCJkZWZhdWx0RWxhc3RpYyIsInJlc29sdmVBeGlzRWxhc3RpYyIsImRyYWdFbGFzdGljIiwibWluTGFiZWwiLCJtYXhMYWJlbCIsInJlc29sdmVQb2ludEVsYXN0aWMiLCJjcmVhdGVEZWx0YSIsImNyZWF0ZUJveCIsImVhY2hBeGlzIiwiY29udmVydEJvdW5kaW5nQm94VG9Cb3giLCJpc0lkZW50aXR5U2NhbGUiLCJoYXNTY2FsZSIsImhhczJEVHJhbnNsYXRlIiwiaXMyRFRyYW5zbGF0ZSIsInNjYWxlUG9pbnQiLCJhcHBseVBvaW50RGVsdGEiLCJib3hTY2FsZSIsImFwcGx5QXhpc0RlbHRhIiwiYXBwbHlCb3hEZWx0YSIsImJveCIsInNuYXBUb0RlZmF1bHQiLCJpc0ludGVnZXIiLCJ0cmFuc2xhdGVBeGlzIiwidHJhbnNmb3JtQXhpcyIsInRyYW5zZm9ybXMiLCJzY2FsZUtleSIsIm9yaWdpbktleSIsImF4aXNPcmlnaW4iLCJ4S2V5cyIsInlLZXlzIiwidHJhbnNmb3JtQm94IiwibWVhc3VyZVZpZXdwb3J0Qm94IiwidG9wTGVmdCIsImJvdHRvbVJpZ2h0IiwidHJhbnNmb3JtQm94UG9pbnRzIiwiZWxlbWVudERyYWdDb250cm9scyIsIlZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMiLCJvcGVuR2xvYmFsTG9jayIsImlzRHJhZ2dpbmciLCJjdXJyZW50RGlyZWN0aW9uIiwiY29uc3RyYWludHMiLCJoYXNNdXRhdGVkQ29uc3RyYWludHMiLCJlbGFzdGljIiwib3JpZ2luRXZlbnQiLCJzbmFwVG9DdXJzb3IiLCJwYW5TZXNzaW9uIiwic3RvcEFuaW1hdGlvbiIsImRyYWdQcm9wYWdhdGlvbiIsIm9uRHJhZ1N0YXJ0IiwicmVzb2x2ZUNvbnN0cmFpbnRzIiwiaXNBbmltYXRpb25CbG9ja2VkIiwiZ2V0QXhpc01vdGlvblZhbHVlIiwibWVhc3VyZWRBeGlzIiwibGF5b3V0Qm94IiwiZHJhZ0RpcmVjdGlvbkxvY2siLCJvbkRpcmVjdGlvbkxvY2siLCJvbkRyYWciLCJsb2NrVGhyZXNob2xkIiwiZ2V0Q3VycmVudERpcmVjdGlvbiIsInVwZGF0ZUF4aXMiLCJnZXRUcmFuc2Zvcm1QYWdlUG9pbnQiLCJvbkRyYWdFbmQiLCJfcG9pbnQiLCJzaG91bGREcmFnIiwiYXhpc1ZhbHVlIiwiYXBwbHlDb25zdHJhaW50cyIsImRyYWdDb25zdHJhaW50cyIsInByZXZDb25zdHJhaW50cyIsInJlc29sdmVSZWZDb25zdHJhaW50cyIsImNhbGNSZWxhdGl2ZUNvbnN0cmFpbnRzIiwicmVzb2x2ZURyYWdFbGFzdGljIiwicmVsYXRpdmVDb25zdHJhaW50cyIsInJlYmFzZUF4aXNDb25zdHJhaW50cyIsIm9uTWVhc3VyZURyYWdDb25zdHJhaW50cyIsImNvbnN0cmFpbnRzRWxlbWVudCIsImNvbnN0cmFpbnRzQm94Iiwicm9vdFByb2plY3Rpb25Ob2RlIiwidmlld3BvcnRCb3giLCJzY3JvbGwiLCJtZWFzdXJlUGFnZUJveCIsIm1lYXN1cmVkQ29uc3RyYWludHMiLCJjYWxjVmlld3BvcnRDb25zdHJhaW50cyIsInVzZXJDb25zdHJhaW50cyIsImNvbnZlcnRCb3hUb0JvdW5kaW5nQm94IiwiZHJhZ01vbWVudHVtIiwiZHJhZ1RyYW5zaXRpb24iLCJkcmFnU25hcFRvT3JpZ2luIiwib25EcmFnVHJhbnNpdGlvbkVuZCIsIm1vbWVudHVtQW5pbWF0aW9ucyIsInN0YXJ0QXhpc1ZhbHVlQW5pbWF0aW9uIiwiZHJhZ0tleSIsInNjYWxlUG9zaXRpb25XaXRoaW5Db25zdHJhaW50cyIsImJveFByb2dyZXNzIiwic291cmNlTGVuZ3RoIiwidGFyZ2V0TGVuZ3RoIiwidXBkYXRlU2Nyb2xsIiwidXBkYXRlTGF5b3V0IiwiYWRkTGlzdGVuZXJzIiwic3RvcFBvaW50ZXJMaXN0ZW5lciIsIm1lYXN1cmVEcmFnQ29uc3RyYWludHMiLCJzdG9wTWVhc3VyZUxheW91dExpc3RlbmVyIiwic3RvcFJlc2l6ZUxpc3RlbmVyIiwic3RvcExheW91dFVwZGF0ZUxpc3RlbmVyIiwiaGFzTGF5b3V0Q2hhbmdlZCIsImFzeW5jSGFuZGxlciIsImdsb2JhbFByb2plY3Rpb25TdGF0ZSIsImhhc0FuaW1hdGVkU2luY2VSZXNpemUiLCJoYXNFdmVyVXBkYXRlZCIsInBpeGVsc1RvUGVyY2VudCIsInBpeGVscyIsImNvcnJlY3RCb3JkZXJSYWRpdXMiLCJjb3JyZWN0IiwiY29ycmVjdEJveFNoYWRvdyIsInRyZWVTY2FsZSIsInByb2plY3Rpb25EZWx0YSIsIm9yaWdpbmFsIiwic2hhZG93IiwieFNjYWxlIiwieVNjYWxlIiwiYXZlcmFnZVNjYWxlIiwiTWVhc3VyZUxheW91dFdpdGhDb250ZXh0IiwibGF5b3V0R3JvdXAiLCJzd2l0Y2hMYXlvdXRHcm91cCIsImNvcnJlY3RvcnMiLCJkZWZhdWx0U2NhbGVDb3JyZWN0b3JzIiwiZ3JvdXAiLCJkaWRVcGRhdGUiLCJzYWZlVG9SZW1vdmUiLCJzZXRPcHRpb25zIiwibGF5b3V0RGVwZW5kZW5jeSIsIndpbGxVcGRhdGUiLCJwcm9tb3RlIiwicmVsZWdhdGUiLCJnZXRTdGFjayIsIm1lbWJlcnMiLCJjdXJyZW50QW5pbWF0aW9uIiwiaXNMZWFkIiwicHJvbW90ZUNvbnRleHQiLCJzY2hlZHVsZUNoZWNrQWZ0ZXJVbm1vdW50IiwiZGVyZWdpc3RlciIsInVzZVByZXNlbmNlIiwiYXBwbHlUbyIsImJveFNoYWRvdyIsImJvcmRlcnMiLCJudW1Cb3JkZXJzIiwiYXNOdW1iZXIiLCJpc1B4IiwiZ2V0UmFkaXVzIiwicmFkaXVzTmFtZSIsImVhc2VDcm9zc2ZhZGVJbiIsImNvbXByZXNzIiwiZWFzZUNyb3NzZmFkZU91dCIsImNvcHlBeGlzSW50byIsIm9yaWdpbkF4aXMiLCJjb3B5Qm94SW50byIsIm9yaWdpbkJveCIsInJlbW92ZVBvaW50RGVsdGEiLCJyZW1vdmVBeGlzVHJhbnNmb3JtcyIsInNvdXJjZUF4aXMiLCJyZW1vdmVBeGlzRGVsdGEiLCJyZW1vdmVCb3hUcmFuc2Zvcm1zIiwic291cmNlQm94IiwiaXNBeGlzRGVsdGFaZXJvIiwiaXNEZWx0YVplcm8iLCJib3hFcXVhbHNSb3VuZGVkIiwiTm9kZVN0YWNrIiwic2NoZWR1bGVSZW5kZXIiLCJwcmV2TGVhZCIsImxlYWQiLCJpbmRleE9mTm9kZSIsIm1lbWJlciIsInByZXNlcnZlRm9sbG93T3BhY2l0eSIsInNob3ciLCJyZXN1bWVGcm9tIiwicHJlc2VydmVPcGFjaXR5Iiwic25hcHNob3QiLCJhbmltYXRpb25WYWx1ZXMiLCJpc1VwZGF0aW5nIiwiaXNMYXlvdXREaXJ0eSIsImNyb3NzZmFkZSIsImhpZGUiLCJleGl0QW5pbWF0aW9uQ29tcGxldGUiLCJyZXN1bWluZ0Zyb20iLCJyZW1vdmVMZWFkU25hcHNob3QiLCJidWlsZFByb2plY3Rpb25UcmFuc2Zvcm0iLCJsYXRlc3RUcmFuc2Zvcm0iLCJ4VHJhbnNsYXRlIiwieVRyYW5zbGF0ZSIsImVsZW1lbnRTY2FsZVgiLCJlbGVtZW50U2NhbGVZIiwiY29tcGFyZUJ5RGVwdGgiLCJkZXB0aCIsIkZsYXRUcmVlIiwiaXNEaXJ0eSIsInRyYW5zZm9ybUF4ZXMiLCJwcm9qZWN0aW9uRnJhbWVEYXRhIiwidG90YWxOb2RlcyIsInJlc29sdmVkVGFyZ2V0RGVsdGFzIiwicmVjYWxjdWxhdGVkUHJvamVjdGlvbiIsImNyZWF0ZVByb2plY3Rpb25Ob2RlIiwiYXR0YWNoUmVzaXplTGlzdGVuZXIiLCJkZWZhdWx0UGFyZW50IiwibWVhc3VyZVNjcm9sbCIsImNoZWNrSXNTY3JvbGxSb290IiwicmVzZXRUcmFuc2Zvcm0iLCJhbmltYXRpb25JZCIsImlzVHJlZUFuaW1hdGluZyIsImlzUHJvamVjdGlvbkRpcnR5IiwiaXNTaGFyZWRQcm9qZWN0aW9uRGlydHkiLCJpc1RyYW5zZm9ybURpcnR5IiwidXBkYXRlTWFudWFsbHlCbG9ja2VkIiwidXBkYXRlQmxvY2tlZEJ5UmVzaXplIiwiaXNTVkciLCJuZWVkc1Jlc2V0Iiwic2hvdWxkUmVzZXRUcmFuc2Zvcm0iLCJldmVudEhhbmRsZXJzIiwiaGFzVHJlZUFuaW1hdGVkIiwidXBkYXRlU2NoZWR1bGVkIiwiY2hlY2tVcGRhdGVGYWlsZWQiLCJjbGVhckFsbFNuYXBzaG90cyIsInVwZGF0ZVByb2plY3Rpb24iLCJub2RlcyIsInByb3BhZ2F0ZURpcnR5Tm9kZXMiLCJyZXNvbHZlVGFyZ2V0RGVsdGEiLCJjYWxjUHJvamVjdGlvbiIsImNsZWFuRGlydHlOb2RlcyIsIk1vdGlvbkRlYnVnIiwicmVjb3JkIiwiaGFzUHJvamVjdGVkIiwiaXNWaXNpYmxlIiwiYW5pbWF0aW9uUHJvZ3Jlc3MiLCJzaGFyZWROb2RlcyIsIm5vdGlmeUxpc3RlbmVycyIsInN1YnNjcmlwdGlvbk1hbmFnZXIiLCJoYXNMaXN0ZW5lcnMiLCJTVkdFbGVtZW50IiwiY2FuY2VsRGVsYXkiLCJyZXNpemVVbmJsb2NrVXBkYXRlIiwidGltZW91dCIsImNoZWNrRWxhcHNlZCIsImZpbmlzaEFuaW1hdGlvbiIsInJlZ2lzdGVyU2hhcmVkTm9kZSIsImhhc1JlbGF0aXZlVGFyZ2V0Q2hhbmdlZCIsIm5ld0xheW91dCIsImlzVHJlZUFuaW1hdGlvbkJsb2NrZWQiLCJyZWxhdGl2ZVRhcmdldCIsImxheW91dFRyYW5zaXRpb24iLCJkZWZhdWx0TGF5b3V0VHJhbnNpdGlvbiIsIm9uTGF5b3V0QW5pbWF0aW9uU3RhcnQiLCJvbkxheW91dEFuaW1hdGlvbkNvbXBsZXRlIiwidGFyZ2V0Q2hhbmdlZCIsInRhcmdldExheW91dCIsImhhc09ubHlSZWxhdGl2ZVRhcmdldENoYW5nZWQiLCJsYXlvdXRSb290Iiwic2V0QW5pbWF0aW9uT3JpZ2luIiwiYW5pbWF0aW9uT3B0aW9ucyIsImJsb2NrVXBkYXRlIiwidW5ibG9ja1VwZGF0ZSIsImlzVXBkYXRlQmxvY2tlZCIsInN0YXJ0VXBkYXRlIiwicmVzZXRSb3RhdGlvbiIsImdldFRyYW5zZm9ybVRlbXBsYXRlIiwic2hvdWxkTm90aWZ5TGlzdGVuZXJzIiwicHJldlRyYW5zZm9ybVRlbXBsYXRlVmFsdWUiLCJ1cGRhdGVTbmFwc2hvdCIsImNsZWFyTWVhc3VyZW1lbnRzIiwiY2xlYXJJc0xheW91dERpcnR5IiwicmVzZXRUcmFuc2Zvcm1TdHlsZSIsIm5vdGlmeUxheW91dFVwZGF0ZSIsInByZVJlbmRlciIsImNsZWFyU25hcHNob3QiLCJyZW1vdmVMZWFkU25hcHNob3RzIiwic2NoZWR1bGVVcGRhdGVQcm9qZWN0aW9uIiwibWVhc3VyZSIsImFsd2F5c01lYXN1cmVMYXlvdXQiLCJwcmV2TGF5b3V0IiwibGF5b3V0Q29ycmVjdGVkIiwicGhhc2UiLCJuZWVkc01lYXN1cmVtZW50IiwibGF5b3V0U2Nyb2xsIiwiaXNSb290IiwiaXNSZXNldFJlcXVlc3RlZCIsImhhc1Byb2plY3Rpb24iLCJ0cmFuc2Zvcm1UZW1wbGF0ZVZhbHVlIiwidHJhbnNmb3JtVGVtcGxhdGVIYXNDaGFuZ2VkIiwicmVtb3ZlVHJhbnNmb3JtIiwicGFnZUJveCIsInJlbW92ZUVsZW1lbnRTY3JvbGwiLCJyb3VuZEF4aXMiLCJtZWFzdXJlZEJveCIsImJveFdpdGhvdXRTY3JvbGwiLCJyb290U2Nyb2xsIiwiYXBwbHlUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1Pbmx5Iiwid2l0aFRyYW5zZm9ybXMiLCJib3hXaXRob3V0VHJhbnNmb3JtIiwic2V0VGFyZ2V0RGVsdGEiLCJ0YXJnZXREZWx0YSIsImZvcmNlUmVsYXRpdmVQYXJlbnRUb1Jlc29sdmVUYXJnZXQiLCJyZWxhdGl2ZVBhcmVudCIsInJlc29sdmVkUmVsYXRpdmVUYXJnZXRBdCIsImZvcmNlUmVjYWxjdWxhdGlvbiIsImdldExlYWQiLCJpc1NoYXJlZCIsImF0dGVtcHRUb1Jlc29sdmVSZWxhdGl2ZVRhcmdldCIsImdldENsb3Nlc3RQcm9qZWN0aW5nUGFyZW50IiwicmVsYXRpdmVUYXJnZXRPcmlnaW4iLCJ0YXJnZXRXaXRoVHJhbnNmb3JtcyIsImlzUHJvamVjdGluZyIsImNhblNraXAiLCJwZW5kaW5nQW5pbWF0aW9uIiwicHJldlRyZWVTY2FsZVgiLCJwcmV2VHJlZVNjYWxlWSIsImlzU2hhcmVkVHJhbnNpdGlvbiIsInRyZWVMZW5ndGgiLCJhcHBseVRyZWVEZWx0YXMiLCJwcm9qZWN0aW9uVHJhbnNmb3JtIiwicHJvamVjdGlvbkRlbHRhV2l0aFRyYW5zZm9ybSIsInByZXZQcm9qZWN0aW9uVHJhbnNmb3JtIiwibm90aWZ5QWxsIiwic25hcHNob3RMYXRlc3RWYWx1ZXMiLCJtaXhlZFZhbHVlcyIsInJlbGF0aXZlTGF5b3V0IiwiaXNTaGFyZWRMYXlvdXRBbmltYXRpb24iLCJpc09ubHlNZW1iZXIiLCJzaG91bGRDcm9zc2ZhZGVPcGFjaXR5IiwiaGFzT3BhY2l0eUNyb3NzZmFkZSIsInByZXZSZWxhdGl2ZVRhcmdldCIsIm1peFRhcmdldERlbHRhIiwibWl4QXhpc0RlbHRhIiwibWl4QXhpcyIsImZvbGxvdyIsIm9wYWNpdHlFeGl0IiwiYm9yZGVyTGFiZWwiLCJmb2xsb3dSYWRpdXMiLCJsZWFkUmFkaXVzIiwibWl4VmFsdWVzIiwibW90aW9uVmFsdWUkMSIsImFuaW1hdGVTaW5nbGVWYWx1ZSIsImNvbXBsZXRlQW5pbWF0aW9uIiwiYXBwbHlUcmFuc2Zvcm1zVG9UYXJnZXQiLCJzaG91bGRBbmltYXRlUG9zaXRpb25Pbmx5IiwiYW5pbWF0aW9uVHlwZSIsInhMZW5ndGgiLCJ5TGVuZ3RoIiwiaW5pdGlhbFByb21vdGlvbkNvbmZpZyIsInNob3VsZFByZXNlcnZlRm9sbG93T3BhY2l0eSIsImdldFByZXZMZWFkIiwiaGFzUm90YXRlIiwicmVzZXRWYWx1ZXMiLCJzZXRTdGF0aWNWYWx1ZSIsInN0eWxlcyIsInZpc2liaWxpdHkiLCJwb2ludGVyRXZlbnRzIiwiZW1wdHlTdHlsZXMiLCJ2YWx1ZXNUb1JlbmRlciIsImNvcnJlY3RlZCIsIm51bSIsInJlc2V0VHJlZSIsIm1lYXN1cmVkTGF5b3V0IiwiYXhpc1NuYXBzaG90IiwibGF5b3V0RGVsdGEiLCJ2aXN1YWxEZWx0YSIsInBhcmVudFNuYXBzaG90IiwicGFyZW50TGF5b3V0IiwicmVsYXRpdmVTbmFwc2hvdCIsIm9uQmVmb3JlTGF5b3V0TWVhc3VyZSIsInVzZXJBZ2VudENvbnRhaW5zIiwic3RyaW5nIiwidXNlckFnZW50Iiwicm91bmRQb2ludCIsIkRvY3VtZW50UHJvamVjdGlvbk5vZGUiLCJIVE1MUHJvamVjdGlvbk5vZGUiLCJkb2N1bWVudE5vZGUiLCJnZXRDb21wdXRlZFN0eWxlIiwicmVtb3ZlUG9pbnRlckRvd25MaXN0ZW5lciIsIm9uUG9pbnRlckRvd24iLCJwb2ludGVyRG93bkV2ZW50Iiwic2Vzc2lvbiIsImNyZWF0ZVBhbkhhbmRsZXJzIiwib25QYW5TZXNzaW9uU3RhcnQiLCJvblBhblN0YXJ0Iiwib25QYW4iLCJvblBhbkVuZCIsInJlbW92ZUdyb3VwQ29udHJvbHMiLCJkcmFnQ29udHJvbHMiLCJQcm9qZWN0aW9uTm9kZSIsInNwbGl0Q1NTVmFyaWFibGVSZWdleCIsImdldFZhcmlhYmxlVmFsdWUiLCJleGVjIiwicGFyc2VDU1NWYXJpYWJsZSIsImdldFByb3BlcnR5VmFsdWUiLCJ0cmltbWVkIiwicG9zaXRpb25hbEtleXMiLCJpc1Bvc2l0aW9uYWxLZXkiLCJpc051bU9yUHhUeXBlIiwiZ2V0UG9zRnJvbU1hdHJpeCIsIm1hdHJpeCIsInBvcyIsImdldFRyYW5zbGF0ZUZyb21NYXRyaXgiLCJwb3MyIiwicG9zMyIsIl9iYm94IiwibWF0cml4M2QiLCJ0cmFuc2Zvcm1LZXlzIiwibm9uVHJhbnNsYXRpb25hbFRyYW5zZm9ybUtleXMiLCJwb3NpdGlvbmFsVmFsdWVzIiwidW5pdENvbnZlcnNpb24iLCJoYXNQb3NpdGlvbmFsS2V5IiwidGFyZ2V0UG9zaXRpb25hbEtleXMiLCJyZW1vdmVkVHJhbnNmb3JtVmFsdWVzIiwiaGFzQXR0ZW1wdGVkVG9SZW1vdmVUcmFuc2Zvcm1WYWx1ZXMiLCJjaGFuZ2VkVmFsdWVUeXBlS2V5cyIsImZyb21UeXBlIiwidG9UeXBlIiwibnVtS2V5ZnJhbWVzIiwiZnJvbUluZGV4IiwicmVtb3ZlZFRyYW5zZm9ybXMiLCJyZW1vdmVOb25UcmFuc2xhdGlvbmFsVHJhbnNmb3JtIiwic2Nyb2xsWSIsImNvbnZlcnRlZFRhcmdldCIsImNoYW5nZWRLZXlzIiwib3JpZ2luQmJveCIsImVsZW1lbnRDb21wdXRlZFN0eWxlIiwidGFyZ2V0QmJveCIsImNvbnZlcnRDaGFuZ2VkVmFsdWVUeXBlcyIsImNoZWNrQW5kQ29udmVydENoYW5nZWRWYWx1ZVR5cGVzIiwicHJlZmVyc1JlZHVjZWRNb3Rpb24iLCJoYXNSZWR1Y2VkTW90aW9uTGlzdGVuZXIiLCJ2aXN1YWxFbGVtZW50U3RvcmUiLCJmZWF0dXJlTmFtZXMiLCJudW1GZWF0dXJlcyIsInByb3BFdmVudEhhbmRsZXJzIiwibnVtVmFyaWFudFByb3BzIiwiVmlzdWFsRWxlbWVudCIsInZhbHVlU3Vic2NyaXB0aW9ucyIsInByZXZNb3Rpb25WYWx1ZXMiLCJwcm9wRXZlbnRTdWJzY3JpcHRpb25zIiwibm90aWZ5VXBkYXRlIiwidHJpZ2dlckJ1aWxkIiwicmVuZGVySW5zdGFuY2UiLCJiYXNlVGFyZ2V0IiwiaW5pdGlhbFZhbHVlcyIsImluaXRpYWxNb3Rpb25WYWx1ZXMiLCJfcHJldlByb3BzIiwicmVtb3ZlRnJvbVZhcmlhbnRUcmVlIiwiYWRkVmFyaWFudENoaWxkIiwiYmluZFRvTW90aW9uVmFsdWUiLCJtYXRjaE1lZGlhIiwibW90aW9uTWVkaWFRdWVyeSIsInNldFJlZHVjZWRNb3Rpb25QcmVmZXJlbmNlcyIsImFkZExpc3RlbmVyIiwiaW5pdFByZWZlcnNSZWR1Y2VkTW90aW9uIiwidmFsdWVJc1RyYW5zZm9ybSIsInJlbW92ZU9uQ2hhbmdlIiwibGF0ZXN0VmFsdWUiLCJyZW1vdmVPblJlbmRlclJlcXVlc3QiLCJvdGhlciIsInNvcnRJbnN0YW5jZU5vZGVQb3NpdGlvbiIsInJlbmRlcmVkUHJvcHMiLCJQcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yIiwiRmVhdHVyZUNvbnN0cnVjdG9yIiwiTWVhc3VyZUxheW91dENvbXBvbmVudCIsImZlYXR1cmUiLCJidWlsZCIsIm1lYXN1cmVJbnN0YW5jZVZpZXdwb3J0Qm94IiwiZ2V0U3RhdGljVmFsdWUiLCJjYW5NdXRhdGUiLCJtYWtlVGFyZ2V0QW5pbWF0YWJsZUZyb21JbnN0YW5jZSIsIm5leHRWYWx1ZSIsInByZXZWYWx1ZSIsImV4aXN0aW5nVmFsdWUiLCJyZW1vdmVWYWx1ZSIsInVwZGF0ZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyIsImhhbmRsZUNoaWxkTW90aW9uVmFsdWUiLCJnZXRWYXJpYW50IiwiZ2V0Q2xvc2VzdFZhcmlhbnROb2RlIiwic3RhcnRBdFBhcmVudCIsImNsb3Nlc3RWYXJpYW50Tm9kZSIsInJlbW92ZVZhbHVlRnJvbVJlbmRlclN0YXRlIiwicmVhZFZhbHVlIiwiZ2V0QmFzZVRhcmdldEZyb21Qcm9wcyIsInJlYWRWYWx1ZUZyb21JbnN0YW5jZSIsInNldEJhc2VUYXJnZXQiLCJ2YWx1ZUZyb21Jbml0aWFsIiwiRE9NVmlzdWFsRWxlbWVudCIsInRyYW5zaXRpb25PcmlnaW4iLCJnZXRPcmlnaW4iLCJuZXdWYWx1ZUtleXMiLCJudW1OZXdWYWx1ZXMiLCJ0YXJnZXRWYWx1ZSIsImNoZWNrVGFyZ2V0Rm9yTmV3VmFsdWVzIiwicmVzb2x2ZUNTU1ZhcmlhYmxlcyIsInBhcnNlRG9tVmFyaWFudCIsIkhUTUxWaXN1YWxFbGVtZW50IiwiZGVmYXVsdFR5cGUiLCJjb21wdXRlZFN0eWxlIiwiY2hpbGRTdWJzY3JpcHRpb24iLCJTVkdWaXN1YWxFbGVtZW50IiwibW90aW9uIiwiaXNPcGVuIiwic2V0T3BlbiIsImlzT3BlbjEiLCJzZXRPcGVuMSIsImlzT3BlbjIiLCJzZXRPcGVuMiIsImlzT3BlbjMiLCJzZXRPcGVuMyIsImlzT3BlbjQiLCJzZXRPcGVuNCIsImlzT3BlbjUiLCJzZXRPcGVuNSIsImlzT3BlbjYiLCJzZXRPcGVuNiIsImlzT3BlbjciLCJzZXRPcGVuNyIsImlzT3BlbjgiLCJzZXRPcGVuOCIsImlzT3BlbjkiLCJzZXRPcGVuOSIsImRpdiIsInRoaXNBcmciLCJraW5kT2YiLCJ0aGluZyIsImtpbmRPZlRlc3QiLCJ0eXBlT2ZUZXN0IiwiaXNVbmRlZmluZWQiLCJpc0FycmF5QnVmZmVyIiwiaXNGdW5jdGlvbiIsImlzTnVtYmVyIiwiaXNPYmplY3QiLCJpc1BsYWluT2JqZWN0IiwidmFsIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNGaWxlTGlzdCIsImlzVVJMU2VhcmNoUGFyYW1zIiwiYWxsT3duS2V5cyIsImxlbiIsImZpbmRLZXkiLCJfZ2xvYmFsIiwiZ2xvYmFsVGhpcyIsInNlbGYiLCJnbG9iYWwiLCJpc0NvbnRleHREZWZpbmVkIiwiaXNUeXBlZEFycmF5IiwiVHlwZWRBcnJheSIsIlVpbnQ4QXJyYXkiLCJpc0hUTUxGb3JtIiwiaXNSZWdFeHAiLCJyZWR1Y2VEZXNjcmlwdG9ycyIsInJlZHVjZXIiLCJkZXNjcmlwdG9ycyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJyZWR1Y2VkRGVzY3JpcHRvcnMiLCJyZXQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiQUxQSEEiLCJESUdJVCIsIkFMUEhBQkVUIiwiQUxQSEFfRElHSVQiLCJpc0FzeW5jRm4iLCJpc0J1ZmZlciIsImlzRm9ybURhdGEiLCJraW5kIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJpc0FycmF5QnVmZmVyVmlldyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYnVmZmVyIiwiaXNCb29sZWFuIiwiaXNTdHJlYW0iLCJtZXJnZSIsImNhc2VsZXNzIiwiYXNzaWduVmFsdWUiLCJ0YXJnZXRLZXkiLCJzdHJpcEJPTSIsImNoYXJDb2RlQXQiLCJpbmhlcml0cyIsInN1cGVyQ29uc3RydWN0b3IiLCJ0b0ZsYXRPYmplY3QiLCJzb3VyY2VPYmoiLCJkZXN0T2JqIiwicHJvcEZpbHRlciIsIm1lcmdlZCIsInNlYXJjaFN0cmluZyIsImxhc3RJbmRleCIsImZvckVhY2hFbnRyeSIsInBhaXIiLCJtYXRjaEFsbCIsInJlZ0V4cCIsImhhc093blByb3AiLCJmcmVlemVNZXRob2RzIiwid3JpdGFibGUiLCJ0b09iamVjdFNldCIsImFycmF5T3JTdHJpbmciLCJkZWxpbWl0ZXIiLCJkZWZpbmUiLCJ0b0NhbWVsQ2FzZSIsInAxIiwicDIiLCJ0b0Zpbml0ZU51bWJlciIsImlzRmluaXRlIiwiZ2VuZXJhdGVTdHJpbmciLCJhbHBoYWJldCIsImlzU3BlY0NvbXBsaWFudEZvcm0iLCJ0b0pTT05PYmplY3QiLCJ2aXNpdCIsInJlZHVjZWRWYWx1ZSIsImlzVGhlbmFibGUiLCJBeGlvc0Vycm9yIiwicmVxdWVzdCIsInJlc3BvbnNlIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJ1dGlscyIsInRvSlNPTiIsImRlc2NyaXB0aW9uIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwiY3VzdG9tUHJvcHMiLCJheGlvc0Vycm9yIiwiY2F1c2UiLCJpc1Zpc2l0YWJsZSIsInJlbW92ZUJyYWNrZXRzIiwicmVuZGVyS2V5IiwiZG90cyIsInByZWRpY2F0ZXMiLCJmb3JtRGF0YSIsIlR5cGVFcnJvciIsIm1ldGFUb2tlbnMiLCJpbmRleGVzIiwib3B0aW9uIiwidmlzaXRvciIsImRlZmF1bHRWaXNpdG9yIiwidXNlQmxvYiIsIkJsb2IiLCJjb252ZXJ0VmFsdWUiLCJ0b0lTT1N0cmluZyIsIkJ1ZmZlciIsImlzRmxhdEFycmF5IiwiZXhwb3NlZEhlbHBlcnMiLCJlbmNvZGUiLCJjaGFyTWFwIiwiQXhpb3NVUkxTZWFyY2hQYXJhbXMiLCJfcGFpcnMiLCJlbmNvZGVyIiwiX2VuY29kZSIsImJ1aWxkVVJMIiwic2VyaWFsaXplRm4iLCJzZXJpYWxpemUiLCJzZXJpYWxpemVkUGFyYW1zIiwiaGFzaG1hcmtJbmRleCIsInVzZSIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwic3luY2hyb25vdXMiLCJydW5XaGVuIiwiZWplY3QiLCJzaWxlbnRKU09OUGFyc2luZyIsImZvcmNlZEpTT05QYXJzaW5nIiwiY2xhcmlmeVRpbWVvdXRFcnJvciIsImNsYXNzZXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJwcm90b2NvbHMiLCJoYXNCcm93c2VyRW52IiwiaGFzU3RhbmRhcmRCcm93c2VyRW52IiwicHJvZHVjdCIsImhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudiIsIldvcmtlckdsb2JhbFNjb3BlIiwiaW1wb3J0U2NyaXB0cyIsImJ1aWxkUGF0aCIsImlzTnVtZXJpY0tleSIsImlzTGFzdCIsImFycmF5VG9PYmplY3QiLCJwYXJzZVByb3BQYXRoIiwiZGVmYXVsdHMiLCJ0cmFuc2l0aW9uYWwiLCJhZGFwdGVyIiwidHJhbnNmb3JtUmVxdWVzdCIsImhlYWRlcnMiLCJjb250ZW50VHlwZSIsImdldENvbnRlbnRUeXBlIiwiaGFzSlNPTkNvbnRlbnRUeXBlIiwiaXNPYmplY3RQYXlsb2FkIiwic2V0Q29udGVudFR5cGUiLCJwbGF0Zm9ybSIsImhlbHBlcnMiLCJpc05vZGUiLCJ0b1VSTEVuY29kZWRGb3JtIiwiZm9ybVNlcmlhbGl6ZXIiLCJfRm9ybURhdGEiLCJlbnYiLCJyYXdWYWx1ZSIsInBhcnNlciIsInN0cmluZ2lmeVNhZmVseSIsInRyYW5zZm9ybVJlc3BvbnNlIiwiSlNPTlJlcXVlc3RlZCIsInJlc3BvbnNlVHlwZSIsInN0cmljdEpTT05QYXJzaW5nIiwiRVJSX0JBRF9SRVNQT05TRSIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwibWF4Qm9keUxlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwiY29tbW9uIiwibWV0aG9kIiwiaWdub3JlRHVwbGljYXRlT2YiLCIkaW50ZXJuYWxzIiwibm9ybWFsaXplSGVhZGVyIiwiaGVhZGVyIiwibm9ybWFsaXplVmFsdWUiLCJtYXRjaEhlYWRlclZhbHVlIiwiaXNIZWFkZXJOYW1lRmlsdGVyIiwiQXhpb3NIZWFkZXJzIiwidmFsdWVPclJld3JpdGUiLCJyZXdyaXRlIiwic2V0SGVhZGVyIiwiX3ZhbHVlIiwiX2hlYWRlciIsIl9yZXdyaXRlIiwibEhlYWRlciIsInNldEhlYWRlcnMiLCJyYXdIZWFkZXJzIiwibGluZSIsInBhcnNlSGVhZGVycyIsInRva2VucyIsInRva2Vuc1JFIiwicGFyc2VUb2tlbnMiLCJkZWxldGVkIiwiZGVsZXRlSGVhZGVyIiwibm9ybWFsaXplIiwiZm9ybWF0Iiwibm9ybWFsaXplZCIsImZvcm1hdEhlYWRlciIsInRhcmdldHMiLCJhc1N0cmluZ3MiLCJjb21wdXRlZCIsImFjY2Vzc29yIiwiYWNjZXNzb3JzIiwiZGVmaW5lQWNjZXNzb3IiLCJhY2Nlc3Nvck5hbWUiLCJtZXRob2ROYW1lIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiYnVpbGRBY2Nlc3NvcnMiLCJtYXBwZWQiLCJoZWFkZXJWYWx1ZSIsInRyYW5zZm9ybURhdGEiLCJmbnMiLCJpc0NhbmNlbCIsIl9fQ0FOQ0VMX18iLCJDYW5jZWxlZEVycm9yIiwiRVJSX0NBTkNFTEVEIiwid3JpdGUiLCJleHBpcmVzIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJidWlsZEZ1bGxQYXRoIiwiYmFzZVVSTCIsInJlcXVlc3RlZFVSTCIsInJlbGF0aXZlVVJMIiwiY29tYmluZVVSTHMiLCJtc2llIiwidXJsUGFyc2luZ05vZGUiLCJvcmlnaW5VUkwiLCJyZXNvbHZlVVJMIiwiaG9zdCIsImhvc3RuYW1lIiwicG9ydCIsInJlcXVlc3RVUkwiLCJwcm9ncmVzc0V2ZW50UmVkdWNlciIsImlzRG93bmxvYWRTdHJlYW0iLCJieXRlc05vdGlmaWVkIiwiX3NwZWVkb21ldGVyIiwic2FtcGxlc0NvdW50IiwiYnl0ZXMiLCJ0aW1lc3RhbXBzIiwiZmlyc3RTYW1wbGVUUyIsImNodW5rTGVuZ3RoIiwic3RhcnRlZEF0IiwiYnl0ZXNDb3VudCIsInBhc3NlZCIsImxvYWRlZCIsInRvdGFsIiwibGVuZ3RoQ29tcHV0YWJsZSIsInByb2dyZXNzQnl0ZXMiLCJyYXRlIiwiZXN0aW1hdGVkIiwiWE1MSHR0cFJlcXVlc3QiLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RIZWFkZXJzIiwib25DYW5jZWxlZCIsIndpdGhYU1JGVG9rZW4iLCJjYW5jZWxUb2tlbiIsInNpZ25hbCIsImF1dGgiLCJ1c2VybmFtZSIsImZ1bGxQYXRoIiwib25sb2FkZW5kIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwiRVJSX0JBRF9SRVFVRVNUIiwic2V0dGxlIiwicmVzcG9uc2VUZXh0Iiwib3BlbiIsInBhcmFtc1NlcmlhbGl6ZXIiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJvbmFib3J0IiwiRUNPTk5BQk9SVEVEIiwib25lcnJvciIsIkVSUl9ORVRXT1JLIiwib250aW1lb3V0IiwidGltZW91dEVycm9yTWVzc2FnZSIsIkVUSU1FRE9VVCIsImlzVVJMU2FtZU9yaWdpbiIsInhzcmZWYWx1ZSIsImNvb2tpZXMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwid2l0aENyZWRlbnRpYWxzIiwib25Eb3dubG9hZFByb2dyZXNzIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImFib3J0IiwiYWJvcnRlZCIsInBhcnNlUHJvdG9jb2wiLCJzZW5kIiwia25vd25BZGFwdGVycyIsImh0dHAiLCJ4aHIiLCJyZW5kZXJSZWFzb24iLCJyZWFzb24iLCJpc1Jlc29sdmVkSGFuZGxlIiwiYWRhcHRlcnMiLCJuYW1lT3JBZGFwdGVyIiwicmVqZWN0ZWRSZWFzb25zIiwicmVhc29ucyIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiaGVhZGVyc1RvT2JqZWN0IiwibWVyZ2VDb25maWciLCJjb25maWcxIiwiY29uZmlnMiIsImdldE1lcmdlZFZhbHVlIiwibWVyZ2VEZWVwUHJvcGVydGllcyIsInZhbHVlRnJvbUNvbmZpZzIiLCJkZWZhdWx0VG9Db25maWcyIiwibWVyZ2VEaXJlY3RLZXlzIiwibWVyZ2VNYXAiLCJ0aW1lb3V0TWVzc2FnZSIsImRlY29tcHJlc3MiLCJiZWZvcmVSZWRpcmVjdCIsInRyYW5zcG9ydCIsImh0dHBBZ2VudCIsImh0dHBzQWdlbnQiLCJzb2NrZXRQYXRoIiwicmVzcG9uc2VFbmNvZGluZyIsImNvbmZpZ1ZhbHVlIiwidmFsaWRhdG9ycyIsImRlcHJlY2F0ZWRXYXJuaW5ncyIsInZhbGlkYXRvciIsImZvcm1hdE1lc3NhZ2UiLCJvcHQiLCJkZXNjIiwib3B0cyIsIkVSUl9ERVBSRUNBVEVEIiwiYXNzZXJ0T3B0aW9ucyIsInNjaGVtYSIsImFsbG93VW5rbm93biIsIkVSUl9CQURfT1BUSU9OX1ZBTFVFIiwiRVJSX0JBRF9PUFRJT04iLCJBeGlvcyIsImluc3RhbmNlQ29uZmlnIiwiaW50ZXJjZXB0b3JzIiwiY29uZmlnT3JVcmwiLCJib29sZWFuIiwiZnVuY3Rpb24iLCJjb250ZXh0SGVhZGVycyIsInJlcXVlc3RJbnRlcmNlcHRvckNoYWluIiwic3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4iLCJwcm9taXNlIiwiY2hhaW4iLCJuZXdDb25maWciLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJnZXRVcmkiLCJnZW5lcmF0ZUhUVFBNZXRob2QiLCJpc0Zvcm0iLCJDYW5jZWxUb2tlbiIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJfbGlzdGVuZXJzIiwib25mdWxmaWxsZWQiLCJfcmVzb2x2ZSIsIkh0dHBTdGF0dXNDb2RlIiwiQ29udGludWUiLCJTd2l0Y2hpbmdQcm90b2NvbHMiLCJQcm9jZXNzaW5nIiwiRWFybHlIaW50cyIsIkNyZWF0ZWQiLCJBY2NlcHRlZCIsIk5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbiIsIk5vQ29udGVudCIsIlJlc2V0Q29udGVudCIsIlBhcnRpYWxDb250ZW50IiwiTXVsdGlTdGF0dXMiLCJBbHJlYWR5UmVwb3J0ZWQiLCJJbVVzZWQiLCJNdWx0aXBsZUNob2ljZXMiLCJNb3ZlZFBlcm1hbmVudGx5IiwiRm91bmQiLCJTZWVPdGhlciIsIk5vdE1vZGlmaWVkIiwiVXNlUHJveHkiLCJVbnVzZWQiLCJUZW1wb3JhcnlSZWRpcmVjdCIsIlBlcm1hbmVudFJlZGlyZWN0IiwiQmFkUmVxdWVzdCIsIlVuYXV0aG9yaXplZCIsIlBheW1lbnRSZXF1aXJlZCIsIkZvcmJpZGRlbiIsIk5vdEZvdW5kIiwiTWV0aG9kTm90QWxsb3dlZCIsIk5vdEFjY2VwdGFibGUiLCJQcm94eUF1dGhlbnRpY2F0aW9uUmVxdWlyZWQiLCJSZXF1ZXN0VGltZW91dCIsIkNvbmZsaWN0IiwiR29uZSIsIkxlbmd0aFJlcXVpcmVkIiwiUHJlY29uZGl0aW9uRmFpbGVkIiwiUGF5bG9hZFRvb0xhcmdlIiwiVXJpVG9vTG9uZyIsIlVuc3VwcG9ydGVkTWVkaWFUeXBlIiwiUmFuZ2VOb3RTYXRpc2ZpYWJsZSIsIkV4cGVjdGF0aW9uRmFpbGVkIiwiSW1BVGVhcG90IiwiTWlzZGlyZWN0ZWRSZXF1ZXN0IiwiVW5wcm9jZXNzYWJsZUVudGl0eSIsIkxvY2tlZCIsIkZhaWxlZERlcGVuZGVuY3kiLCJUb29FYXJseSIsIlVwZ3JhZGVSZXF1aXJlZCIsIlByZWNvbmRpdGlvblJlcXVpcmVkIiwiVG9vTWFueVJlcXVlc3RzIiwiUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlIiwiVW5hdmFpbGFibGVGb3JMZWdhbFJlYXNvbnMiLCJJbnRlcm5hbFNlcnZlckVycm9yIiwiTm90SW1wbGVtZW50ZWQiLCJCYWRHYXRld2F5IiwiU2VydmljZVVuYXZhaWxhYmxlIiwiR2F0ZXdheVRpbWVvdXQiLCJIdHRwVmVyc2lvbk5vdFN1cHBvcnRlZCIsIlZhcmlhbnRBbHNvTmVnb3RpYXRlcyIsIkluc3VmZmljaWVudFN0b3JhZ2UiLCJMb29wRGV0ZWN0ZWQiLCJOb3RFeHRlbmRlZCIsIk5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkIiwiYXhpb3MiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJWRVJTSU9OIiwidG9Gb3JtRGF0YSIsIkNhbmNlbCIsInByb21pc2VzIiwic3ByZWFkIiwiaXNBeGlvc0Vycm9yIiwiZm9ybVRvSlNPTiIsImdldEFkYXB0ZXIiLCJzZWFyY2hTdHJpbmdWYWx1ZSIsInNldFNlYXJjaFN0cmluZ0ZuIiwiZGF0YU51dCIsInNlcnZpbmdfc2l6ZV9nIiwiZmF0X3RvdGFsX2ciLCJwcm90ZWluX2ciLCJjYXJib2h5ZHJhdGVzX3RvdGFsX2ciLCJzb2RpdW1fbWciLCJwb3Rhc3NpdW1fbWciLCJzdWdhcl9nIiwiZmliZXJfZyIsImNob2xlc3Rlcm9sX21nIiwiY2Fsb3JpZXMiLCJjb21wb3NlQ2xhc3NlcyIsInNsb3RzIiwiZ2V0VXRpbGl0eUNsYXNzIiwidXRpbGl0eUNsYXNzIiwiZm9ybWF0TXVpRXJyb3JNZXNzYWdlIiwiTUlOX1NBRkVfSU5URUdFUiIsIk1BWF9TQUZFX0lOVEVHRVIiLCJjbGFtcFdyYXBwZXIiLCJkZWNvbXBvc2VDb2xvciIsImNvbG9ycyIsImhleFRvUmdiIiwibWFya2VyIiwiY29sb3JTcGFjZSIsInJlY29tcG9zZUNvbG9yIiwiZ2V0THVtaW5hbmNlIiwicmdiIiwiaHNsVG9SZ2IiLCJtZW1vaXplIiwiYXJnIiwicmVhY3RQcm9wc1JlZ2V4IiwiaXNQcm9wVmFsaWQiLCJTdHlsZVNoZWV0IiwiX2luc2VydFRhZyIsImJlZm9yZSIsInRhZ3MiLCJpbnNlcnRpb25Qb2ludCIsInByZXBlbmQiLCJjb250YWluZXIiLCJpc1NwZWVkeSIsInNwZWVkeSIsImN0ciIsIl9wcm90byIsInJ1bGUiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJzaGVldCIsInN0eWxlU2hlZXRzIiwib3duZXJOb2RlIiwic2hlZXRGb3JUYWciLCJpbnNlcnRSdWxlIiwiY3NzUnVsZXMiLCJmbHVzaCIsInJlcGxhY2VtZW50IiwiaW5kZXhvZiIsImJlZ2luIiwiY29sdW1uIiwiY2hhcmFjdGVyIiwiY2hhcmFjdGVycyIsInBlZWsiLCJjYXJldCIsImFsbG9jIiwiZGVhbGxvYyIsImRlbGltaXQiLCJ3aGl0ZXNwYWNlIiwiZXNjYXBpbmciLCJjb21tZW50ZXIiLCJDT01NRU5UIiwiY29tcGlsZSIsInJ1bGVzIiwicnVsZXNldHMiLCJwc2V1ZG8iLCJwb2ludHMiLCJkZWNsYXJhdGlvbnMiLCJhdHJ1bGUiLCJwcm9wZXJ0eSIsInByZXZpb3VzIiwidmFyaWFibGUiLCJzY2FubmluZyIsImFtcGVyc2FuZCIsInJlZmVyZW5jZSIsImNvbW1lbnQiLCJkZWNsYXJhdGlvbiIsInJ1bGVzZXQiLCJwb3N0IiwiaiIsImlkZW50aWZpZXJXaXRoUG9pbnRUcmFja2luZyIsImZpeGVkRWxlbWVudHMiLCJjb21wYXQiLCJpc0ltcGxpY2l0UnVsZSIsInRvUnVsZXMiLCJnZXRSdWxlcyIsInBhcmVudFJ1bGVzIiwicmVtb3ZlTGFiZWwiLCJkZWZhdWx0U3R5bGlzUGx1Z2lucyIsImNyZWF0ZUNhY2hlIiwic3NyU3R5bGVzIiwiX2luc2VydCIsInN0eWxpc1BsdWdpbnMiLCJpbnNlcnRlZCIsIm5vZGVzVG9IeWRyYXRlIiwiYXR0cmliIiwiY3VycmVudFNoZWV0IiwiY29sbGVjdGlvbiIsImZpbmFsaXppbmdQbHVnaW5zIiwic2VyaWFsaXplciIsInNlbGVjdG9yIiwic2VyaWFsaXplZCIsInNob3VsZENhY2hlIiwicmVnaXN0ZXJlZCIsInVuaXRsZXNzS2V5cyIsIm1zR3JpZFJvdyIsIm1zR3JpZFJvd1NwYW4iLCJtc0dyaWRDb2x1bW4iLCJtc0dyaWRDb2x1bW5TcGFuIiwiV2Via2l0TGluZUNsYW1wIiwiaHlwaGVuYXRlUmVnZXgiLCJhbmltYXRpb25SZWdleCIsImlzQ3VzdG9tUHJvcGVydHkiLCJpc1Byb2Nlc3NhYmxlVmFsdWUiLCJwcm9jZXNzU3R5bGVOYW1lIiwic3R5bGVOYW1lIiwicHJvY2Vzc1N0eWxlVmFsdWUiLCJjdXJzb3IiLCJoYW5kbGVJbnRlcnBvbGF0aW9uIiwibWVyZ2VkUHJvcHMiLCJpbnRlcnBvbGF0aW9uIiwiX19lbW90aW9uX3N0eWxlcyIsImFuaW0iLCJpbnRlcnBvbGF0ZWQiLCJjcmVhdGVTdHJpbmdGcm9tT2JqZWN0IiwicHJldmlvdXNDdXJzb3IiLCJjYWNoZWQiLCJsYWJlbFBhdHRlcm4iLCJzdHJpbmdNb2RlIiwic3RyaW5ncyIsInJhdyIsImlkZW50aWZpZXJOYW1lIiwidXNlSW5zZXJ0aW9uRWZmZWN0V2l0aExheW91dEZhbGxiYWNrIiwiRW1vdGlvbkNhY2hlQ29udGV4dCIsImZ1bmMiLCJpc1N0cmluZ1RhZyIsInRlc3RPbWl0UHJvcHNPblN0cmluZ1RhZyIsInRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudCIsImdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCIsImNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHMiLCJpc1JlYWwiLCJzaG91bGRGb3J3YXJkUHJvcCIsIm9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcCIsIl9fZW1vdGlvbl9mb3J3YXJkUHJvcCIsInByb3BOYW1lIiwibmV3U3R5bGVkIiwiY3JlYXRlU3R5bGVkIiwidGFyZ2V0Q2xhc3NOYW1lIiwiX19lbW90aW9uX3JlYWwiLCJiYXNlVGFnIiwiX19lbW90aW9uX2Jhc2UiLCJkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AiLCJzaG91bGRVc2VBcyIsIlN0eWxlZCIsInJlZ2lzdGVyZWRTdHlsZXMiLCJjbGFzc05hbWVzIiwicmF3Q2xhc3NOYW1lIiwiRmluYWxUYWciLCJhcyIsImNsYXNzSW50ZXJwb2xhdGlvbnMiLCJ0aGVtZSIsImZpbmFsU2hvdWxkRm9yd2FyZFByb3AiLCJuZXdQcm9wcyIsIndpdGhDb21wb25lbnQiLCJuZXh0VGFnIiwibmV4dE9wdGlvbnMiLCJkZWVwQ2xvbmUiLCJjbG9uZSIsInhzIiwic20iLCJ4bCIsImRlZmF1bHRCcmVha3BvaW50cyIsInVwIiwiaGFuZGxlQnJlYWtwb2ludHMiLCJwcm9wVmFsdWUiLCJzdHlsZUZyb21Qcm9wVmFsdWUiLCJ0aGVtZUJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludHMiLCJicmVha3BvaW50IiwiY3NzS2V5IiwiY2FwaXRhbGl6ZSIsImdldFBhdGgiLCJjaGVja1ZhcnMiLCJnZXRTdHlsZVZhbHVlIiwidGhlbWVNYXBwaW5nIiwicHJvcFZhbHVlRmluYWwiLCJ1c2VyVmFsdWUiLCJjc3NQcm9wZXJ0eSIsInRoZW1lS2V5IiwicHJvcGVydGllcyIsImRpcmVjdGlvbnMiLCJhbGlhc2VzIiwibWFyZ2luWCIsIm1hcmdpblkiLCJwYWRkaW5nWCIsInBhZGRpbmdZIiwiZ2V0Q3NzUHJvcGVydGllcyIsImRpciIsIm1hcmdpbktleXMiLCJwYWRkaW5nS2V5cyIsInNwYWNpbmdLZXlzIiwiY3JlYXRlVW5hcnlVbml0IiwiX2dldFBhdGgiLCJ0aGVtZVNwYWNpbmciLCJjcmVhdGVVbmFyeVNwYWNpbmciLCJ0cmFuc2Zvcm1lZCIsImNzc1Byb3BlcnRpZXMiLCJnZXRTdHlsZUZyb21Qcm9wVmFsdWUiLCJyZXNvbHZlQ3NzUHJvcGVydHkiLCJib3JkZXJUcmFuc2Zvcm0iLCJjcmVhdGVCb3JkZXJTdHlsZSIsImJvcmRlciIsImJvcmRlclRvcCIsImJvcmRlclJpZ2h0IiwiYm9yZGVyQm90dG9tIiwiYm9yZGVyTGVmdCIsIm91dGxpbmUiLCJnYXAiLCJjb2x1bW5HYXAiLCJyb3dHYXAiLCJwYWxldHRlVHJhbnNmb3JtIiwic2l6aW5nVHJhbnNmb3JtIiwiX3Byb3BzJHRoZW1lIiwiX3Byb3BzJHRoZW1lMiIsIm1pbldpZHRoIiwibWluSGVpZ2h0IiwiYmdjb2xvciIsInB0IiwicHIiLCJweSIsInBhZGRpbmdJbmxpbmUiLCJwYWRkaW5nSW5saW5lU3RhcnQiLCJwYWRkaW5nSW5saW5lRW5kIiwicGFkZGluZ0Jsb2NrIiwicGFkZGluZ0Jsb2NrU3RhcnQiLCJwYWRkaW5nQmxvY2tFbmQiLCJtdCIsIm1yIiwibXgiLCJteSIsIm1hcmdpbklubGluZSIsIm1hcmdpbklubGluZVN0YXJ0IiwibWFyZ2luSW5saW5lRW5kIiwibWFyZ2luQmxvY2siLCJtYXJnaW5CbG9ja1N0YXJ0IiwibWFyZ2luQmxvY2tFbmQiLCJkaXNwbGF5UHJpbnQiLCJ0ZXh0T3ZlcmZsb3ciLCJ3aGl0ZVNwYWNlIiwiZmxleEJhc2lzIiwiZmxleERpcmVjdGlvbiIsImZsZXhXcmFwIiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwiYWxpZ25Db250ZW50IiwiYWxpZ25TZWxmIiwianVzdGlmeUl0ZW1zIiwianVzdGlmeVNlbGYiLCJncmlkQXV0b0Zsb3ciLCJncmlkQXV0b0NvbHVtbnMiLCJncmlkQXV0b1Jvd3MiLCJncmlkVGVtcGxhdGVDb2x1bW5zIiwiZ3JpZFRlbXBsYXRlUm93cyIsImdyaWRUZW1wbGF0ZUFyZWFzIiwiYm94U2l6aW5nIiwiZm9udEZhbWlseSIsImZvbnRTaXplIiwibGV0dGVyU3BhY2luZyIsInRleHRUcmFuc2Zvcm0iLCJ0ZXh0QWxpZ24iLCJ0eXBvZ3JhcGh5Iiwic3R5bGVGdW5jdGlvblN4IiwiZ2V0VGhlbWVWYWx1ZSIsIl90aGVtZSR1bnN0YWJsZV9zeENvbiIsInN4IiwidW5zdGFibGVfc3hDb25maWciLCJ0cmF2ZXJzZSIsInN4SW5wdXQiLCJzeE9iamVjdCIsImVtcHR5QnJlYWtwb2ludHMiLCJicmVha3BvaW50c0lucHV0IiwiX2JyZWFrcG9pbnRzSW5wdXQka2V5IiwiY3JlYXRlRW1wdHlCcmVha3BvaW50T2JqZWN0IiwiYnJlYWtwb2ludHNLZXlzIiwic3R5bGVLZXkiLCJtYXliZUZuIiwiYnJlYWtwb2ludHNWYWx1ZXMiLCJvYmplY3RzIiwib2JqZWN0IiwidW5pb24iLCJvYmplY3RzSGF2ZVNhbWVLZXlzIiwiYnJlYWtwb2ludE91dHB1dCIsInVuc3RhYmxlX2NyZWF0ZVN0eWxlRnVuY3Rpb25TeCIsInBhbGV0dGUiLCJwYWxldHRlSW5wdXQiLCJzcGFjaW5nSW5wdXQiLCJzaGFwZSIsInNoYXBlSW5wdXQiLCJzb3J0ZWRWYWx1ZXMiLCJicmVha3BvaW50c0FzQXJyYXkiLCJicmVha3BvaW50MSIsImJyZWFrcG9pbnQyIiwic29ydEJyZWFrcG9pbnRzVmFsdWVzIiwiZG93biIsImJldHdlZW4iLCJlbmRJbmRleCIsIm5vdCIsImtleUluZGV4IiwiY3JlYXRlQnJlYWtwb2ludHMiLCJtdWkiLCJhcmdzSW5wdXQiLCJhcmd1bWVudCIsImNyZWF0ZVNwYWNpbmciLCJtdWlUaGVtZSIsImNvbXBvbmVudHMiLCJ1bnN0YWJsZV9zeCIsImlzRW1wdHkiLCJwcm9wc1RvQ2xhc3NLZXkiLCJjbGFzc0tleSIsInRyYW5zZm9ybVZhcmlhbnRzIiwibnVtT2ZDYWxsYmFja3MiLCJ2YXJpYW50c1N0eWxlcyIsInZhcmlhbnRzUmVzb2x2ZXIiLCJvd25lclN0YXRlIiwiaXNNYXRjaCIsInByb3BzVG9DaGVjayIsInN5c3RlbURlZmF1bHRUaGVtZSIsImxvd2VyY2FzZUZpcnN0TGV0dGVyIiwicmVzb2x2ZVRoZW1lIiwiZGVmYXVsdFRoZW1lIiwidGhlbWVJZCIsImRlZmF1bHRPdmVycmlkZXNSZXNvbHZlciIsIm11aVN0eWxlZEZ1bmN0aW9uUmVzb2x2ZXIiLCJzdHlsZWRBcmciLCJyZXNvbHZlZFN0eWxlcyIsIm9wdGlvbmFsVmFyaWFudHMiLCJibGFjayIsIndoaXRlIiwiQTEwMCIsIkEyMDAiLCJBNDAwIiwiQTcwMCIsImxpZ2h0IiwicHJpbWFyeSIsInNlY29uZGFyeSIsImRpdmlkZXIiLCJiYWNrZ3JvdW5kIiwicGFwZXIiLCJhY3RpdmUiLCJob3Zlck9wYWNpdHkiLCJzZWxlY3RlZE9wYWNpdHkiLCJkaXNhYmxlZEJhY2tncm91bmQiLCJkaXNhYmxlZE9wYWNpdHkiLCJmb2N1c09wYWNpdHkiLCJhY3RpdmF0ZWRPcGFjaXR5IiwiZGFyayIsImljb24iLCJhZGRMaWdodE9yRGFyayIsImludGVudCIsInNoYWRlIiwidG9uYWxPZmZzZXQiLCJ0b25hbE9mZnNldExpZ2h0IiwidG9uYWxPZmZzZXREYXJrIiwiY29lZmZpY2llbnQiLCJsaWdodGVuIiwibWFpbiIsImRhcmtlbiIsImNhc2VBbGxDYXBzIiwiZGVmYXVsdEZvbnRGYW1pbHkiLCJjcmVhdGVUeXBvZ3JhcGh5IiwiZm9udFdlaWdodExpZ2h0IiwiZm9udFdlaWdodFJlZ3VsYXIiLCJmb250V2VpZ2h0TWVkaXVtIiwiZm9udFdlaWdodEJvbGQiLCJodG1sRm9udFNpemUiLCJhbGxWYXJpYW50cyIsInB4VG9SZW0iLCJweFRvUmVtMiIsImNvZWYiLCJidWlsZFZhcmlhbnQiLCJjYXNpbmciLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJzdWJ0aXRsZTEiLCJzdWJ0aXRsZTIiLCJib2R5MSIsImJvZHkyIiwiY2FwdGlvbiIsIm92ZXJsaW5lIiwiY3JlYXRlU2hhZG93Iiwic2hhcnAiLCJzaG9ydGVzdCIsInNob3J0ZXIiLCJzaG9ydCIsInN0YW5kYXJkIiwiZW50ZXJpbmdTY3JlZW4iLCJsZWF2aW5nU2NyZWVuIiwiZm9ybWF0TXMiLCJnZXRBdXRvSGVpZ2h0RHVyYXRpb24iLCJjb25zdGFudCIsImNyZWF0ZVRyYW5zaXRpb25zIiwiaW5wdXRUcmFuc2l0aW9ucyIsIm1lcmdlZEVhc2luZyIsIm1lcmdlZER1cmF0aW9uIiwiZHVyYXRpb25PcHRpb24iLCJlYXNpbmdPcHRpb24iLCJhbmltYXRlZFByb3AiLCJtb2JpbGVTdGVwcGVyIiwiZmFiIiwic3BlZWREaWFsIiwiYXBwQmFyIiwiZHJhd2VyIiwibW9kYWwiLCJzbmFja2JhciIsInRvb2x0aXAiLCJtaXhpbnNJbnB1dCIsInRyYW5zaXRpb25zSW5wdXQiLCJ0eXBvZ3JhcGh5SW5wdXQiLCJjb250cmFzdFRocmVzaG9sZCIsImdldERlZmF1bHRQcmltYXJ5IiwiZ2V0RGVmYXVsdFNlY29uZGFyeSIsImdldERlZmF1bHRFcnJvciIsImdldERlZmF1bHRJbmZvIiwic3VjY2VzcyIsImdldERlZmF1bHRTdWNjZXNzIiwiZ2V0RGVmYXVsdFdhcm5pbmciLCJnZXRDb250cmFzdFRleHQiLCJjb250cmFzdFRleHQiLCJmb3JlZ3JvdW5kIiwibHVtQSIsImx1bUIiLCJnZXRDb250cmFzdFJhdGlvIiwiYXVnbWVudENvbG9yIiwibWFpblNoYWRlIiwibGlnaHRTaGFkZSIsImRhcmtTaGFkZSIsIm1vZGVzIiwiZ3JleSIsImNyZWF0ZVBhbGV0dGUiLCJzeXN0ZW1UaGVtZSIsInRvb2xiYXIiLCJzaGFkb3dzIiwiYXBwbHlEYXJrU3R5bGVzIiwiZ2V0Q29sb3JTY2hlbWVTZWxlY3RvciIsInJvb3RTaG91bGRGb3J3YXJkUHJvcCIsInNsb3RTaG91bGRGb3J3YXJkUHJvcCIsInN5c3RlbVN4IiwiX19tdWlfc3lzdGVtU3giLCJpbnB1dE9wdGlvbnMiLCJwcm9jZXNzb3IiLCJjb21wb25lbnROYW1lIiwiY29tcG9uZW50U2xvdCIsInNraXBWYXJpYW50c1Jlc29sdmVyIiwiaW5wdXRTa2lwVmFyaWFudHNSZXNvbHZlciIsInNraXBTeCIsImlucHV0U2tpcFN4Iiwib3ZlcnJpZGVzUmVzb2x2ZXIiLCJzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiIsImRlZmF1bHRTdHlsZWRSZXNvbHZlciIsInN0eWxlZCIsIm11aVN0eWxlZFJlc29sdmVyIiwic3R5bGVBcmciLCJleHByZXNzaW9ucyIsImV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZSIsInN0eWxlc0FyZyIsInN0eWxlZEFyZ1ZhcmlhbnRzIiwidHJhbnNmb3JtZWRTdHlsZXNBcmciLCJ2YXJpYW50U3R5bGUiLCJ0cmFuc2Zvcm1lZFN0eWxlQXJnIiwic3R5bGVPdmVycmlkZXMiLCJnZXRTdHlsZU92ZXJyaWRlcyIsInJlc29sdmVkU3R5bGVPdmVycmlkZXMiLCJzbG90S2V5Iiwic2xvdFN0eWxlIiwiX3RoZW1lJGNvbXBvbmVudHMiLCJ0aGVtZVZhcmlhbnRzIiwidGhlbWVWYXJpYW50c1Jlc29sdmVyIiwiZ2V0VmFyaWFudFN0eWxlcyIsIm51bU9mQ3VzdG9tRm5zQXBwbGllZCIsInBsYWNlaG9sZGVycyIsIm11aU5hbWUiLCJ3aXRoQ29uZmlnIiwiZWxldmF0aW9uIiwiYWxwaGFWYWx1ZSIsInJlc29sdmVQcm9wcyIsImRlZmF1bHRTbG90UHJvcHMiLCJzbG90UHJvcHMiLCJzbG90UHJvcE5hbWUiLCJnZXRUaGVtZVByb3BzIiwiY29udGV4dFRoZW1lIiwidXNlVGhlbWVXaXRob3V0RGVmYXVsdCIsImRlZmF1bHRHZW5lcmF0b3IiLCJnZW5lcmF0ZSIsImNvbmZpZ3VyZSIsImNyZWF0ZUNsYXNzTmFtZUdlbmVyYXRvciIsImdsb2JhbFN0YXRlQ2xhc3NlcyIsImNvbXBsZXRlZCIsImV4cGFuZGVkIiwiZm9jdXNlZCIsImZvY3VzVmlzaWJsZSIsInJlYWRPbmx5IiwiZ2xvYmFsU3RhdGVQcmVmaXgiLCJnbG9iYWxTdGF0ZUNsYXNzIiwiZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyIsImdldFBhcGVyVXRpbGl0eUNsYXNzIiwiUGFwZXJSb290Iiwic3F1YXJlIiwicm91bmRlZCIsIl90aGVtZSR2YXJzJG92ZXJsYXlzIiwiYmFja2dyb3VuZEltYWdlIiwib3ZlcmxheXMiLCJpblByb3BzIiwidXNlVXRpbGl0eUNsYXNzZXMiLCJ1c2VGb3JrUmVmIiwic2V0UmVmIiwib3duZXJXaW5kb3ciLCJkb2MiLCJvdXRlckhlaWdodFN0eWxlIiwiVGV4dGFyZWFBdXRvc2l6ZSIsImZvcndhcmRlZFJlZiIsIm1heFJvd3MiLCJtaW5Sb3dzIiwiaXNDb250cm9sbGVkIiwiaW5wdXRSZWYiLCJoYW5kbGVSZWYiLCJzaGFkb3dSZWYiLCJyZW5kZXJzIiwiZ2V0VXBkYXRlZFN0YXRlIiwiaW5wdXRTaGFsbG93IiwicGxhY2Vob2xkZXIiLCJpbm5lckhlaWdodCIsInNjcm9sbEhlaWdodCIsInNpbmdsZVJvd0hlaWdodCIsIm91dGVySGVpZ2h0IiwidXBkYXRlU3RhdGUiLCJwcmV2U3RhdGUiLCJzeW5jSGVpZ2h0IiwiaGFuZGxlUmVzaXplIiwic3luY0hlaWdodFdpdGhGbHVzaFN5bmMiLCJkZWJvdW5jZUhhbmRsZVJlc2l6ZSIsIndhaXQiLCJkZWJvdW5jZWQiLCJkZWJvdW5jZSIsImNvbnRhaW5lcldpbmRvdyIsInJlc2l6ZU9ic2VydmVyIiwiUmVzaXplT2JzZXJ2ZXIiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJBRiIsImRpc2Nvbm5lY3QiLCJyb3dzIiwiaXNIb3N0Q29tcG9uZW50IiwiR2xvYmFsIiwic2hlZXRSZWYiLCJyZWh5ZHJhdGluZyIsInNoZWV0UmVmQ3VycmVudCIsIm5leHRFbGVtZW50U2libGluZyIsImluc2VydGFibGUiLCJHbG9iYWxTdHlsZXMiLCJnbG9iYWxTdHlsZXMiLCJ0aGVtZUlucHV0IiwidXBwZXJUaGVtZSIsImdldElucHV0QmFzZVV0aWxpdHlDbGFzcyIsIklucHV0QmFzZVJvb3QiLCJmb3JtQ29udHJvbCIsInN0YXJ0QWRvcm5tZW50IiwiYWRvcm5lZFN0YXJ0IiwiZW5kQWRvcm5tZW50IiwiYWRvcm5lZEVuZCIsInNpemVTbWFsbCIsIm11bHRpbGluZSIsImZ1bGxXaWR0aCIsImhpZGRlbkxhYmVsIiwiSW5wdXRCYXNlQ29tcG9uZW50IiwiaW5wdXRTaXplU21hbGwiLCJpbnB1dE11bHRpbGluZSIsImlucHV0VHlwZVNlYXJjaCIsImlucHV0QWRvcm5lZFN0YXJ0IiwiaW5wdXRBZG9ybmVkRW5kIiwiaW5wdXRIaWRkZW5MYWJlbCIsImlucHV0UGxhY2Vob2xkZXIiLCJwbGFjZWhvbGRlckhpZGRlbiIsInBsYWNlaG9sZGVyVmlzaWJsZSIsImZvbnQiLCJXZWJraXRUYXBIaWdobGlnaHRDb2xvciIsImFuaW1hdGlvbkR1cmF0aW9uIiwiV2Via2l0QXBwZWFyYW5jZSIsIldlYmtpdFRleHRGaWxsQ29sb3IiLCJyZXNpemUiLCJNb3pBcHBlYXJhbmNlIiwiaW5wdXRHbG9iYWxTdHlsZXMiLCJJbnB1dEJhc2UiLCJfc2xvdFByb3BzJGlucHV0IiwiYXJpYURlc2NyaWJlZGJ5IiwiYXV0b0NvbXBsZXRlIiwiY29tcG9uZW50c1Byb3BzIiwiZGlzYWJsZUluamVjdGluZ0dsb2JhbFN0eWxlcyIsImlucHV0Q29tcG9uZW50IiwiaW5wdXRQcm9wcyIsImlucHV0UHJvcHNQcm9wIiwiaW5wdXRSZWZQcm9wIiwib25LZXlEb3duIiwib25LZXlVcCIsInJlbmRlclN1ZmZpeCIsInZhbHVlUHJvcCIsImhhbmRsZUlucHV0UmVmV2FybmluZyIsImhhbmRsZUlucHV0UmVmIiwic2V0Rm9jdXNlZCIsIm11aUZvcm1Db250cm9sIiwiZmNzIiwic3RhdGVzIiwiZm9ybUNvbnRyb2xTdGF0ZSIsIm9uRmlsbGVkIiwib25FbXB0eSIsImNoZWNrRGlydHkiLCJTU1IiLCJpc0ZpbGxlZCIsIklucHV0Q29tcG9uZW50Iiwic2V0QWRvcm5lZFN0YXJ0IiwiUm9vdCIsInJvb3RQcm9wcyIsIklucHV0Iiwib25BbmltYXRpb25TdGFydCIsImhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCIsImhhZEtleWJvYXJkRXZlbnQiLCJoYWRGb2N1c1Zpc2libGVSZWNlbnRseSIsImlucHV0VHlwZXNXaGl0ZWxpc3QiLCJoYW5kbGVLZXlEb3duIiwiaGFuZGxlUG9pbnRlckRvd24iLCJoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlIiwidmlzaWJpbGl0eVN0YXRlIiwiaXNGb2N1c1Zpc2libGVSZWYiLCJpc0NvbnRlbnRFZGl0YWJsZSIsImZvY3VzVHJpZ2dlcnNLZXlib2FyZE1vZGFsaXR5IiwiX3NldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJnZXRDaGlsZE1hcHBpbmciLCJtYXBGbiIsIm1hcHBlciIsImdldFByb3AiLCJnZXROZXh0Q2hpbGRNYXBwaW5nIiwibmV4dFByb3BzIiwicHJldkNoaWxkTWFwcGluZyIsIm9uRXhpdGVkIiwibmV4dENoaWxkTWFwcGluZyIsImdldFZhbHVlRm9yS2V5IiwibmV4dEtleXNQZW5kaW5nIiwicGVuZGluZ0tleXMiLCJwcmV2S2V5IiwiY2hpbGRNYXBwaW5nIiwibmV4dEtleSIsInBlbmRpbmdOZXh0S2V5IiwibWVyZ2VDaGlsZE1hcHBpbmdzIiwiaGFzUHJldiIsImhhc05leHQiLCJwcmV2Q2hpbGQiLCJpc0xlYXZpbmciLCJpbiIsImVudGVyIiwiVHJhbnNpdGlvbkdyb3VwIiwiX1JlYWN0JENvbXBvbmVudCIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImhhbmRsZUV4aXRlZCIsIlJlZmVyZW5jZUVycm9yIiwiY29udGV4dFZhbHVlIiwiaXNNb3VudGluZyIsImZpcnN0UmVuZGVyIiwibW91bnRlZCIsImFwcGVhciIsImN1cnJlbnRDaGlsZE1hcHBpbmciLCJfdGhpcyRwcm9wcyIsImNoaWxkRmFjdG9yeSIsIlRyYW5zaXRpb25Hcm91cENvbnRleHQiLCJfdCIsIl90MiIsIl90MyIsIl90NCIsImVudGVyS2V5ZnJhbWUiLCJleGl0S2V5ZnJhbWUiLCJwdWxzYXRlS2V5ZnJhbWUiLCJUb3VjaFJpcHBsZVJvb3QiLCJUb3VjaFJpcHBsZVJpcHBsZSIsInB1bHNhdGUiLCJyaXBwbGVYIiwicmlwcGxlWSIsInJpcHBsZVNpemUiLCJpblByb3AiLCJsZWF2aW5nIiwic2V0TGVhdmluZyIsInJpcHBsZUNsYXNzTmFtZSIsInJpcHBsZSIsInJpcHBsZVZpc2libGUiLCJyaXBwbGVQdWxzYXRlIiwicmlwcGxlU3R5bGVzIiwiY2hpbGRDbGFzc05hbWUiLCJjaGlsZExlYXZpbmciLCJjaGlsZFB1bHNhdGUiLCJ0aW1lb3V0SWQiLCJUb3VjaFJpcHBsZSIsImNlbnRlciIsImNlbnRlclByb3AiLCJyaXBwbGVzIiwic2V0UmlwcGxlcyIsInJpcHBsZUNhbGxiYWNrIiwiaWdub3JpbmdNb3VzZURvd24iLCJzdGFydFRpbWVyIiwic3RhcnRUaW1lckNvbW1pdCIsInN0YXJ0Q29tbWl0Iiwib2xkUmlwcGxlcyIsImZha2VFbGVtZW50IiwicmVjdCIsInNpemVYIiwiY2xpZW50V2lkdGgiLCJzaXplWSIsImNsaWVudEhlaWdodCIsImdldEJ1dHRvbkJhc2VVdGlsaXR5Q2xhc3MiLCJCdXR0b25CYXNlUm9vdCIsInZlcnRpY2FsQWxpZ24iLCJ0ZXh0RGVjb3JhdGlvbiIsImJvcmRlclN0eWxlIiwiY29sb3JBZGp1c3QiLCJCdXR0b25CYXNlIiwiY2VudGVyUmlwcGxlIiwiZGlzYWJsZVJpcHBsZSIsImRpc2FibGVUb3VjaFJpcHBsZSIsImZvY3VzUmlwcGxlIiwiTGlua0NvbXBvbmVudCIsIm9uQ29udGV4dE1lbnUiLCJvbkRyYWdMZWF2ZSIsIm9uRm9jdXNWaXNpYmxlIiwib25Nb3VzZURvd24iLCJvbk1vdXNlTGVhdmUiLCJvbk1vdXNlVXAiLCJvblRvdWNoRW5kIiwib25Ub3VjaE1vdmUiLCJvblRvdWNoU3RhcnQiLCJUb3VjaFJpcHBsZVByb3BzIiwidG91Y2hSaXBwbGVSZWYiLCJidXR0b25SZWYiLCJyaXBwbGVSZWYiLCJoYW5kbGVSaXBwbGVSZWYiLCJoYW5kbGVGb2N1c1Zpc2libGUiLCJoYW5kbGVCbHVyVmlzaWJsZSIsImZvY3VzVmlzaWJsZVJlZiIsInNldEZvY3VzVmlzaWJsZSIsIm1vdW50ZWRTdGF0ZSIsInNldE1vdW50ZWRTdGF0ZSIsImVuYWJsZVRvdWNoUmlwcGxlIiwidXNlUmlwcGxlSGFuZGxlciIsInJpcHBsZUFjdGlvbiIsImV2ZW50Q2FsbGJhY2siLCJza2lwUmlwcGxlQWN0aW9uIiwiaGFuZGxlTW91c2VEb3duIiwiaGFuZGxlQ29udGV4dE1lbnUiLCJoYW5kbGVEcmFnTGVhdmUiLCJoYW5kbGVNb3VzZVVwIiwiaGFuZGxlTW91c2VMZWF2ZSIsImhhbmRsZVRvdWNoU3RhcnQiLCJoYW5kbGVUb3VjaEVuZCIsImhhbmRsZVRvdWNoTW92ZSIsImhhbmRsZUJsdXIiLCJoYW5kbGVGb2N1cyIsImlzTm9uTmF0aXZlQnV0dG9uIiwia2V5ZG93blJlZiIsImhhbmRsZUtleVVwIiwiQ29tcG9uZW50UHJvcCIsImJ1dHRvblByb3BzIiwicm9sZSIsImZvY3VzVmlzaWJsZUNsYXNzTmFtZSIsImNvbXBvc2VkQ2xhc3NlcyIsImdldEljb25CdXR0b25VdGlsaXR5Q2xhc3MiLCJJY29uQnV0dG9uUm9vdCIsImVkZ2UiLCJhY3RpdmVDaGFubmVsIiwiX3BhbGV0dGUiLCJtYWluQ2hhbm5lbCIsIkljb25CdXR0b24iLCJkaXNhYmxlRm9jdXNSaXBwbGUiLCJnbG9iYWxDdHgiLCJHbG9iYWxDb250ZXh0IiwiaGFuZGxlQ2xpY2tTZWFyY2giLCJQYXBlciIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJPcCIsImhhc093biIsIiRTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiQ29udGV4dCIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsIkNvbnRpbnVlU2VudGluZWwiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiX2ludm9rZSIsIkFzeW5jSXRlcmF0b3IiLCJQcm9taXNlSW1wbCIsImludm9rZSIsIl90eXBlb2YiLCJfX2F3YWl0IiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwiYXdyYXAiLCJhc3luYyIsIml0ZXIiLCJza2lwVGVtcFJlc2V0Iiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwiX25leHQiLCJfdGhyb3ciLCJfYXJyYXlXaXRoSG9sZXMiLCJfcyIsIl9lIiwiX3giLCJfciIsIl9hcnIiLCJfbiIsIl9kIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibWluTGVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVSZXN0IiwiYXJyMiIsInNldEVycm9yIiwibnV0cml0aW9uIiwic2V0TnV0cml0aW9uIiwic2V0UmVzdWx0cyIsImdldE51dHJpdGlvbiIsIl9jYWxsZWUiLCJ0MCIsIl94MiIsIlNlYXJjaE51dHJpdGlvbiIsIlNlYXJjaFJlY2VwdCIsIk51dHJpdGlvbiIsInJlY2lwZSIsInNldFJlY2lwZSIsInJlc3VsdHMiLCJnZXRSZWNpcGUiLCJkYXRhT2JqIiwidGl0bGUiLCJzZXJ2aW5ncyIsImluZ3JlZGllbnRzIiwiaW5zdHJ1Y3Rpb25zIiwic2F0aSIsInNldFNhdGkiLCJtaW51dGkiLCJzZXRNaW51dGkiLCJzZWt1bmRpIiwic2V0U2VrdW5kaSIsImlzT3BlblNlYyIsInNldE9wZW5TZWMiLCJnZXRWcmVtZSIsInNldEludGVydmFsIiwiZGFuYXMiLCJob3VycyIsImdldEhvdXJzIiwibWludXRzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJvbk1vdXNlT3ZlciIsIk5hdmlnYXRpb24iLCJfcmVmMyIsIlZyZW1lU2F0aSIsIk9kbm9zaSIsIkthbG9yaWplIiwiUmVjZXB0aSIsIlRham1lciIsIlJlc3VsdHNOdXRyaXRpb24iLCJSZXN1bHRzUmVjaXBlIiwic2V0U2VhcmNoU3RyaW5nIiwiUmVhY3RET00iLCJnZXRFbGVtZW50QnlJZCIsIkFwcCJdLCJzb3VyY2VSb290IjoiIn0=