/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var __webpack_modules__={154:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(294),_Display__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(417),_KeyPadComponent__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(942);function _typeof(e){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,_toPropertyKey(r.key),r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},_setPrototypeOf(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var a=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){if(t&&("object"===_typeof(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(e)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},_getPrototypeOf(e)}function _defineProperty(e,t,n){return(t=_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _toPropertyKey(e){var t=_toPrimitive(e,"string");return"symbol"===_typeof(t)?t:String(t)}function _toPrimitive(e,t){if("object"!==_typeof(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!==_typeof(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}var Digitron=function(_Component){_inherits(Digitron,_Component);var _super=_createSuper(Digitron);function Digitron(){var _this;_classCallCheck(this,Digitron);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _this=_super.call.apply(_super,[this].concat(args)),_defineProperty(_assertThisInitialized(_this),"state",{result:""}),_defineProperty(_assertThisInitialized(_this),"onClick",(function(e){"="===e?_this.calculate():"C"===e?_this.reset():"CE"===e?_this.backspace():_this.setState({result:_this.state.result+e})})),_defineProperty(_assertThisInitialized(_this),"calculate",(function(){var checkResult="";checkResult=_this.state.result.includes("--")?_this.state.result.replace("--","+"):_this.state.result;try{_this.setState({result:(eval(checkResult)||"")+""})}catch(e){_this.setState({result:"error"})}})),_defineProperty(_assertThisInitialized(_this),"reset",(function(){_this.setState({result:""})})),_defineProperty(_assertThisInitialized(_this),"backspace",(function(){_this.setState({result:_this.state.result.slice(0,-1)})})),_this}return _createClass(Digitron,[{key:"render",value:function(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"calculator-body"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Display__WEBPACK_IMPORTED_MODULE_1__.Z,{result:this.state.result}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_KeyPadComponent__WEBPACK_IMPORTED_MODULE_2__.Z,{onClick:this.onClick})))}}]),Digitron}(react__WEBPACK_IMPORTED_MODULE_0__.Component);const __WEBPACK_DEFAULT_EXPORT__=Digitron},417:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(294);function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==a(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==a(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===a(o)?o:String(o)),r)}var o}function i(e,t){return i=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},i(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}const s=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&i(e,t)}(d,e);var t,n,s,u,c=(s=d,u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=l(s);if(u){var n=l(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===a(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function d(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,d),c.apply(this,arguments)}return t=d,(n=[{key:"render",value:function(){var e=this.props.result;return r.createElement("div",{className:"result"}," ",e," ")}}])&&o(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),d}(r.Component)},942:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(294);function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==a(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==a(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===a(o)?o:String(o)),r)}var o}function i(e,t){return i=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},i(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}const s=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&i(e,t)}(d,e);var t,n,s,u,c=(s=d,u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=l(s);if(u){var n=l(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===a(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function d(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,d),c.apply(this,arguments)}return t=d,(n=[{key:"render",value:function(){var e=this;return r.createElement("div",{className:"button"},r.createElement("button",{name:"C",onClick:function(t){return e.props.onClick(t.target.name)},label:"C",value:"clear"},"C"),r.createElement("button",{name:"CE",onClick:function(t){return e.props.onClick(t.target.name)}},"CE"),r.createElement("button",{name:"(",onClick:function(t){return e.props.onClick(t.target.name)}},"("),r.createElement("button",{name:")",onClick:function(t){return e.props.onClick(t.target.name)}},")"),r.createElement("button",{name:"7",onClick:function(t){return e.props.onClick(t.target.name)},label:"7",value:"7"},"7"),r.createElement("button",{name:"8",onClick:function(t){return e.props.onClick(t.target.name)},label:"8",value:"8"},"8"),r.createElement("button",{name:"9",onClick:function(t){return e.props.onClick(t.target.name)},label:"9",value:"9"},"9"),r.createElement("button",{name:"+",onClick:function(t){return e.props.onClick(t.target.name)},label:"+",size:"2",value:"+"},"+"),r.createElement("button",{name:"4",onClick:function(t){return e.props.onClick(t.target.name)},label:"4",value:"4"},"4"),r.createElement("button",{name:"5",onClick:function(t){return e.props.onClick(t.target.name)},label:"5",value:"5"},"5"),r.createElement("button",{name:"6",onClick:function(t){return e.props.onClick(t.target.name)},label:"6",value:"6"},"6"),r.createElement("button",{name:"-",onClick:function(t){return e.props.onClick(t.target.name)},label:"-",value:"-"},"-"),r.createElement("button",{name:"1",onClick:function(t){return e.props.onClick(t.target.name)},label:"1",value:"1"},"1"),r.createElement("button",{name:"2",onClick:function(t){return e.props.onClick(t.target.name)},label:"2",value:"2"},"2"),r.createElement("button",{name:"3",onClick:function(t){return e.props.onClick(t.target.name)},label:"3",value:"3"},"3"),r.createElement("button",{name:"*",onClick:function(t){return e.props.onClick(t.target.name)},label:"x",value:"*"},"*"),r.createElement("button",{name:".",onClick:function(t){return e.props.onClick(t.target.name)},label:".",value:"."},"."),r.createElement("button",{name:"0",onClick:function(t){return e.props.onClick(t.target.name)},label:"0",value:"0"},"0"),r.createElement("button",{name:"=",onClick:function(t){return e.props.onClick(t.target.name)},label:"=",size:"2",value:"equal"},"="),r.createElement("button",{name:"/",onClick:function(t){return e.props.onClick(t.target.name)},label:"/",value:"/"},"/"))}}])&&o(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),d}(r.Component)},528:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,".container{display:flex;flex-direction:column;margin:auto;max-width:650px;min-width:650px;height:1200px;background-color:#e0b8a0;text-align:center;align-items:center;justify-content:center}.container hr{width:645px}.container .colorBox{display:flex;justify-content:baseline;align-items:end;width:500px;height:345px;background-color:bisque;border:8px solid #9e9e9e;border-radius:12px}.container .colorBox .box{width:100px;background-color:#2920d4}.container .colorBox .box1{width:100px;background-color:#382fd9}.container .colorBox .box2{width:100px;background-color:#5751d2}.container .colorBox .box3{width:100px;background-color:#746fd2}.container .colorBox .box4{width:100px;background-color:#9794d3}.container .colorBox .boxBat{height:20px;padding:4px;border:solid 1px green;border-radius:5px;background-color:#ffd27d;cursor:pointer}.container .colorBox .boxBat:hover{background-color:#ebab6c}.container .colorBox .title{height:22px;padding:4px;background-color:#d0f0e6;color:#191949}.container .boxBatAll{height:24px;padding:4px 30px;border:solid 2px green;border-radius:7px;background-color:#ffd27d;margin:10px;cursor:pointer}.container .boxBatAll:hover{background-color:#ebab6c}.container .inputText{color:#40433f;font-size:20px;margin:10px}.container .inputText .inputPlace{max-width:100px;height:20px;background-color:aliceblue}@media screen and (max-width: 500px){.container{max-width:358px;min-width:358px}.container hr{width:355px}.container .colorBox{max-width:325px;min-width:325px;border:solid 3px grey;border-radius:8px}.container .colorBox .box,.container .colorBox .box1,.container .colorBox .box2,.container .colorBox .box3,.container .colorBox .box4{width:65px}.container .colorBox .boxBat{border-radius:5px}}body{background-color:seashell}.result{display:flex;justify-content:left;align-items:center;height:60px;background-color:#e7f6fd;border:1px solid black;width:97%;font-size:40px;font-family:'Comfortaa', cursive;padding-left:7px;overflow:hidden}.calculator-body{max-width:400px;margin:auto}.button{background-color:#bbb}button{width:25%;height:60px;font-size:30px;font-family:'Comfortaa', cursive;background-color:#f1f1f1;cursor:pointer}button:hover{background-color:#fbd590}@media screen and (max-width: 500px){.result{height:40px;width:93%;font-size:24px;font-family:'Comfortaa', cursive;padding-right:8px}.calculator-body{max-width:250px}button{height:40px;font-size:18px;font-family:'Comfortaa', cursive}}body{font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;font-size:18px;background-color:#d7ccc8}.navContainer{background-color:#bcaaa4;display:flex;flex-direction:row;margin:auto;height:60px;max-width:650px;min-width:650px;justify-content:space-around;align-items:center}.navContainer .linker{color:#cdcdcd;text-decoration:none;font-weight:bold}.navContainer .linker:hover{color:#a8dbd7}.home{margin-top:0;margin:auto;width:650px;height:880px;background-color:#d7ccc8;padding-top:100px}.home .img{margin:auto;background-size:cover;background-image:url(\"https://freepngimg.com/thumb/shape/81500-golden-ratio-spiral-number-fibonacci-white-circle.png\");width:640px;height:395px}.odnosi{border-collapse:collapse;max-width:650px;min-width:650px;margin:auto;background-color:#d7ccc8;margin-bottom:12px}.odnosi .proc{padding-left:20px}.odnosi th{background-color:#8f7a6f;color:#f5f5f5;font-size:18px;padding:12px}.odnosi .relacija{min-width:50px;max-width:50px;overflow:hidden;text-overflow:ellipsis}.odnosi td{font-family:Verdana, Geneva, Tahoma, sans-serif;font-size:16px;text-align:center;min-width:50px;max-width:50px;padding:10px 0px}.odnosi input{text-align:center;height:20px;min-width:50px;max-width:50px;background-color:#e7f6fd;border-radius:4px;border-color:burlywood}model-viewer{margin:auto;cursor:grab;display:flex;height:500px;width:650px;overflow:hidden;position:relative;user-select:none}.view-button{background-color:transparent;border-color:transparent}.calc{margin:auto;margin-top:30px;width:300px}.hrana{border-collapse:collapse;max-width:650px;min-width:650px;background-color:#cdcdcd;margin:auto}.hrana .naslov{font-size:20px;min-width:150px;max-width:150px}.hrana input{text-align:left;height:20px;min-width:60px;max-width:60px;background-color:#e7f6fd;border-radius:4px;border-color:burlywood}.hrana .hidrati{background-color:#b8c6b8}.hrana .hidrati .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana .hidrati .ugHid,.hrana .hidrati .mast{min-width:60px}.hrana .prot{background-color:#eed0aa}.hrana .prot .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana .mleko{background-color:#e8e8e8}.hrana .mleko .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana .oil{background-color:#e0db97}.hrana .oil .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana .orah{background-color:#a1c4b2}.hrana .orah .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana .voce{background-color:#a590b6}.hrana .voce .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana .kupus{background-color:#b9f3b2}.hrana .kupus .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana .alcohol{background-color:#cefff7}.hrana .alcohol .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana thead{font-size:20px}.hrana thead th{text-align:center;background-color:#4c6a4b;color:#cdcdcd;padding:10px 3px;min-width:26px}.hrana tr{background-color:#d7ccc8}.hrana tfoot{color:#a8dbd7}.hrana tfoot tr{background-color:#92a192}.hrana tfoot tr .protein{height:25px;min-width:27px;max-width:27px;overflow:hidden;text-overflow:ellipsis}.hrana td{padding:8px;font-size:24}.back-to-top{position:fixed;bottom:20px;right:20px;color:#84867b;cursor:pointer;border-radius:400px}.back-to-top .arrowup{width:24px;height:24px;color:#7a9c99ac;background-color:rgba(165,206,195,0.43);font-size:38px;padding-left:5px;border-radius:12px;border:solid 3px #95beba7c}@media screen and (max-width: 500px){body{font-size:16px;margin:0;padding:0}.navContainer{max-width:358px;min-width:358px;margin:auto}.home{margin-top:0;margin:auto;width:358px;height:880px;padding-top:80px}.home .img{height:221px;width:358px}.odnosi{max-width:358px;min-width:358px}.odnosi tr{padding:12px 8px}.odnosi th{font-size:14px;padding:7px}.odnosi .relacija{min-width:30px;max-width:30px}.odnosi td{font-size:14px;min-width:30px;max-width:30px}.odnosi input{height:18px;min-width:30px;max-width:30px}model-viewer{width:360px;height:400px}.hrana{max-width:358px;min-width:358px;margin:auto;font-size:14px}.hrana thead{font-size:14px;padding:6px 2px}.hrana .hidrati .ugHid{min-width:37px}.hrana .hidrati .mast{min-width:37px}.hrana .naslov{font-size:14px;min-width:50px;max-width:50px}.hrana input{font-size:14px;min-width:47px;max-width:47px;border-radius:3px}.hrana td{padding:3px 5px}}\n","",{version:3,sources:["webpack://./src/scss/_tajmer.scss","webpack://./src/scss/_digitron.scss","webpack://./src/scss/main.scss"],names:[],mappings:"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",sourcesContent:["$color01: rgb(41, 32, 212);\r\n$color02: rgb(56, 47, 217);\r\n$color03: rgb(87, 81, 210);\r\n$color04: rgb(116, 111, 210);\r\n$color05: rgb(151, 148, 211);\r\n.container {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    margin: auto;\r\n    max-width: 650px;\r\n    min-width: 650px;\r\n    height: 1200px;\r\n    background-color: rgb(224, 184, 160);\r\n    text-align: center;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    hr {\r\n       \r\n       width: 645px;\r\n    }\r\n\r\n\r\n    .colorBox {\r\n        display: flex;\r\n        justify-content: baseline;\r\n        align-items: end;\r\n        width: 500px;\r\n        height: 345px;\r\n        background-color: bisque;\r\n        border: 8px solid #9e9e9e;\r\n        border-radius: 12px;\r\n\r\n        .box {\r\n            width: 100px;\r\n            background-color: $color01;\r\n        }\r\n        .box1 {\r\n            width: 100px;\r\n            background-color: $color02;\r\n        }\r\n        .box2 {\r\n            width: 100px;\r\n            background-color: $color03;\r\n        }\r\n        .box3  {\r\n            width: 100px;\r\n            background-color: $color04;\r\n        }\r\n        .box4 {\r\n            width: 100px;\r\n            background-color: $color05;\r\n        }\r\n\r\n        .boxBat {\r\n            height: 20px;\r\n            padding: 4px;\r\n            border: solid 1px green;\r\n            border-radius: 5px;\r\n            background-color: rgb(255, 210, 125);\r\n            cursor: pointer;\r\n\r\n            &:hover {\r\n                background-color: rgb(235, 171, 108);\r\n            }\r\n\r\n        }\r\n        .title {\r\n            height: 22px;\r\n            padding: 4px;\r\n            background-color: rgb(208, 240, 230);\r\n            color: rgb(25, 25, 73);\r\n        }\r\n    }\r\n\r\n    .boxBatAll {\r\n        height: 24px;\r\n        padding: 4px 30px;\r\n        border: solid 2px green;\r\n        border-radius: 7px;\r\n        background-color: rgb(255, 210, 125);\r\n        margin: 10px;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            background-color: rgb(235, 171, 108);\r\n        }\r\n\r\n    }\r\n\r\n    .inputText {\r\n        color: #40433f;\r\n        font-size: 20px;\r\n        margin: 10px;\r\n\r\n        .inputPlace {\r\n            max-width: 100px;\r\n            height: 20px;\r\n            background-color: aliceblue;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n@media screen and (max-width: 500px) {\r\n    .container {\r\n        max-width: 358px;\r\n        min-width: 358px;\r\n\r\n        hr {\r\n            width: 355px;\r\n        }\r\n\r\n        .colorBox {\r\n            max-width: 325px;\r\n            min-width: 325px;\r\n            border: solid 3px grey;\r\n            border-radius: 8px;\r\n\r\n\r\n            .box,\r\n            .box1,\r\n            .box2,\r\n            .box3,\r\n            .box4 {\r\n                width: 65px;\r\n            }\r\n            .boxBat {\r\n                border-radius: 5px;\r\n            }\r\n        }\r\n    }\r\n}","body {\r\n    background-color: seashell;\r\n}\r\n\r\n\r\n.result {\r\n    display: flex;\r\n    justify-content: left;\r\n    align-items: center;\r\n    height: 60px;\r\n    background-color: rgb(231, 246, 253);\r\n    border: 1px solid black;\r\n    width: 97%;\r\n    font-size: 40px;\r\n    font-family: 'Comfortaa', cursive;\r\n    padding-left: 7px;\r\n    overflow: hidden;\r\n\r\n}\r\n\r\n\r\n\r\n.calculator-body {\r\n    max-width: 400px;\r\n    margin: auto;\r\n}\r\n\r\n.button {\r\n    // display: block;\r\n    background-color: #bbb;\r\n}\r\n\r\nbutton {\r\n    width: 25%;\r\n    height: 60px;\r\n    font-size: 30px;\r\n    font-family: 'Comfortaa', cursive;\r\n    background-color: rgb(241, 241, 241);\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        background-color: rgb(251, 213, 144);\r\n\r\n    }\r\n}\r\n\r\n@media screen and (max-width: 500px) {\r\n\r\n    .result {\r\n\r\n        height: 40px;\r\n     \r\n        width: 93%;\r\n        font-size: 24px;\r\n        font-family: 'Comfortaa', cursive;\r\n        padding-right: 8px;\r\n\r\n    }\r\n\r\n    .calculator-body {\r\n        max-width: 250px;\r\n\r\n    }\r\n\r\n    button {\r\n\r\n        height: 40px;\r\n        font-size: 18px;\r\n        font-family: 'Comfortaa', cursive;\r\n\r\n\r\n    }\r\n\r\n\r\n}","@import '../scss/_tajmer.scss';\r\n@import '../scss/_digitron.scss';\r\n\r\n\r\n$color-one: #cdcdcd;\r\n$color-two: #a7abb0;\r\n$color-three: rgb(164, 168, 206);\r\n$color4: rgb(231, 246, 253);\r\n// $color5: rgb(241, 241, 241);\r\n$color5: #d7ccc8;\r\n$color6: rgb(143, 122, 111);\r\n$colorHid: rgb(184, 198, 184);\r\n$colorProt: rgb(238, 208, 170);\r\n$colorMl: rgb(232, 232, 232);\r\n$colorOil:rgb(224, 219, 151);\r\n$colorNut:rgb(161, 196, 178);\r\n$colorVoce: rgb(165, 144, 182);\r\n$colorKup: rgb(185, 243, 178);\r\n$colorAlc:rgb(206, 255, 247);\r\n;\r\n\r\nbody {\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n    font-size: 18px;\r\n    // background-color: rgb(251, 213, 144);\r\n    background-color: $color5;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n.navContainer {\r\n    background-color: #bcaaa4;\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin: auto;\r\n    height: 60px;\r\n    max-width: 650px;\r\n    min-width: 650px;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n\r\n    .linker {\r\n        color: $color-one;\r\n        text-decoration: none;\r\n        font-weight: bold;\r\n    }\r\n\r\n    .linker:hover {\r\n        color: #a8dbd7;\r\n    }\r\n\r\n\r\n}\r\n\r\n.home {\r\n    margin-top: 0;\r\n    margin: auto;\r\n    width: 650px;\r\n    height: 880px;\r\n    background-color: $color5;\r\n    padding-top: 100px;\r\n\r\n    .img {\r\n        margin: auto;\r\n        background-size: cover;\r\n        background-image: url(\"https://freepngimg.com/thumb/shape/81500-golden-ratio-spiral-number-fibonacci-white-circle.png\");\r\n        width: 640px;\r\n        height: 395px;\r\n    }\r\n}\r\n\r\n.odnosi {\r\n    border-collapse: collapse;\r\n\r\n    max-width: 650px;\r\n    min-width: 650px;\r\n    margin: auto;\r\n    background-color: $color5;\r\n    margin-bottom: 12px;\r\n  \r\n\r\n    .proc {\r\n     padding-left: 20px;\r\n    }\r\n\r\n    th {\r\n        background-color: $color6;\r\n        color: #f5f5f5;\r\n        font-size: 18px;\r\n        padding: 12px;\r\n    }\r\n\r\n    .relacija {\r\n        min-width: 50px;\r\n        max-width: 50px;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n    }\r\n\r\n    td {\r\n        font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n        font-size: 16px;\r\n        text-align: center;\r\n        min-width: 50px;\r\n        max-width: 50px;\r\n       padding: 10px 0px;\r\n       \r\n\r\n    }\r\n\r\n    input {\r\n        text-align: center;\r\n        height: 20px;\r\n        min-width: 50px;\r\n        max-width: 50px;\r\n        background-color: $color4;\r\n        border-radius: 4px;\r\n        border-color: burlywood;\r\n \r\n    }\r\n}\r\nmodel-viewer {\r\n    margin: auto;\r\n    cursor: grab;\r\n    display: flex;\r\n    height: 500px;\r\n    width: 650px;\r\n    overflow: hidden;\r\n    position: relative;\r\n    user-select: none;\r\n}\r\n.view-button {\r\n    background-color: transparent;\r\n    border-color: transparent;\r\n\r\n}\r\n.calc {\r\n    margin: auto;\r\nmargin-top: 30px;\r\n    width: 300px;\r\n}\r\n\r\n.hrana {\r\n\r\n    border-collapse: collapse;\r\n    max-width: 650px;\r\n    min-width: 650px;\r\n    background-color: $color-one;\r\n    margin: auto;\r\n\r\n    .naslov {\r\n        font-size: 20px;\r\n        min-width: 150px;\r\n        max-width: 150px;\r\n    }\r\n\r\n    input {\r\n        text-align: left;\r\n        height: 20px;\r\n        min-width: 60px;\r\n        max-width: 60px;\r\n        background-color: $color4;\r\n        border-radius: 4px;\r\n        border-color: burlywood;\r\n    }\r\n\r\n    .hidrati {\r\n        background-color: $colorHid;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n\r\n        .ugHid, \r\n        .mast {\r\n            min-width: 60px;\r\n        }\r\n     \r\n    }\r\n\r\n    .prot {\r\n        background-color: $colorProt;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n    }\r\n\r\n    .mleko {\r\n        background-color: $colorMl;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n    }\r\n    .oil {\r\n        background-color: $colorOil;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n    }\r\n    .orah {\r\n        background-color: $colorNut;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n    }\r\n    .voce {\r\n        background-color: $colorVoce;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n    }\r\n    .kupus {\r\n        background-color: $colorKup;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n    }\r\n    .alcohol {\r\n        background-color: $colorAlc;\r\n\r\n        .protein {\r\n            height: 25px;\r\n            min-width: 27px;\r\n            max-width: 27px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n\r\n        }\r\n    }\r\n\r\n    thead {\r\n        font-size: 20px;\r\n\r\n        th {\r\n            text-align: center;\r\n            background-color: #4c6a4b;\r\n            color: $color-one;\r\n            padding: 10px 3px;\r\n            min-width: 26px;\r\n        }\r\n\r\n    }\r\n\r\n    tr {\r\n        background-color: $color5;\r\n\r\n   \r\n    }\r\n\r\n    tfoot {\r\n        color: #a8dbd7;\r\n\r\n        tr {\r\n\r\n            background-color: #92a192;\r\n\r\n            .protein {\r\n                height: 25px;\r\n                min-width: 27px;\r\n                max-width: 27px;\r\n                overflow: hidden;\r\n                text-overflow: ellipsis;\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    td {\r\n        padding: 8px;\r\n        font-size: 24;\r\n    }\r\n}\r\n\r\n.back-to-top {\r\n    position: fixed;\r\n    bottom: 20px;\r\n    right: 20px;\r\n\r\n    color: #84867b;\r\n    cursor: pointer;\r\n    border-radius: 400px;\r\n\r\n    .arrowup {\r\n        width: 24px;\r\n        height: 24px;\r\n        color: #7a9c99ac;\r\n        background-color: rgba(165, 206, 195, 0.43);\r\n        font-size: 38px;\r\n        padding-left: 5px;\r\n\r\n        border-radius: 12px;\r\n        border: solid 3px #95beba7c;\r\n    }\r\n}\r\n\r\n\r\n@media screen and (max-width: 500px) {\r\n    body {\r\n        font-size: 16px;\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n\r\n    .navContainer {\r\n        max-width: 358px;\r\n        min-width: 358px;\r\n        margin: auto;\r\n    }\r\n\r\n    .home {\r\n        margin-top: 0;\r\n        margin: auto;\r\n        width: 358px;\r\n        height: 880px;\r\n\r\n        padding-top: 80px;\r\n\r\n        .img {\r\n            height: 221px;\r\n            width: 358px;\r\n\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    .odnosi {\r\n        max-width: 358px;\r\n        min-width: 358px;\r\n      \r\n    \r\n        tr {\r\n            padding: 12px 8px;\r\n        }\r\n    \r\n        th {\r\n       \r\n            font-size: 14px;\r\n            padding: 7px;\r\n        }\r\n    \r\n        .relacija {\r\n            min-width: 30px;\r\n            max-width: 30px;\r\n     \r\n        }\r\n    \r\n        td {\r\n         \r\n            font-size: 14px;\r\n       \r\n            min-width: 30px;\r\n            max-width :30px;\r\n    \r\n        }\r\n    \r\n        input {\r\n        \r\n            height: 18px;\r\n            min-width: 30px;\r\n            max-width: 30px;\r\n          \r\n \r\n        }\r\n    }\r\n\r\n    model-viewer {\r\n        width: 360px;\r\n        height: 400px;\r\n    }\r\n\r\n    .hrana {\r\n        max-width: 358px;\r\n        min-width: 358px;\r\n        margin: auto;\r\n        font-size: 14px;\r\n\r\n        thead {\r\n            font-size: 14px;\r\n            padding: 6px 2px;\r\n        }\r\n\r\n        .hidrati {\r\n            .ugHid {\r\n                min-width: 37px;\r\n            }\r\n            .mast {\r\n                min-width: 37px;\r\n            }\r\n        }\r\n\r\n        .naslov {\r\n            font-size: 14px;\r\n            min-width: 50px;\r\n            max-width: 50px;\r\n        }\r\n\r\n        input {\r\n            font-size: 14px;\r\n            min-width: 47px;\r\n            max-width: 47px;\r\n            border-radius: 3px;\r\n        }\r\n\r\n        td {\r\n            padding: 3px 5px;\r\n          \r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n}"],sourceRoot:""}]);const l=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},448:(e,t,n)=>{var r=n(294),a=n(840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function s(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f={},m={};function h(e,t,n,r,a,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new h(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new h(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new h(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new h(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new h(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new h(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new h(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new h(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new h(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var a=g.hasOwnProperty(t)?g[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!d.call(m,e)||!d.call(f,e)&&(p.test(e)?m[e]=!0:(f[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new h(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new h(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,y);g[t]=new h(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new h(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new h("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new h(e,1,!1,e.toLowerCase(),null,!0,!0)}));var x=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,A=Symbol.for("react.element"),C=Symbol.for("react.portal"),E=Symbol.for("react.fragment"),w=Symbol.for("react.strict_mode"),k=Symbol.for("react.profiler"),S=Symbol.for("react.provider"),N=Symbol.for("react.context"),_=Symbol.for("react.forward_ref"),P=Symbol.for("react.suspense"),B=Symbol.for("react.suspense_list"),T=Symbol.for("react.memo"),F=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var R=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var L=Symbol.iterator;function M(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=L&&e[L]||e["@@iterator"])?e:null}var D,O=Object.assign;function j(e){if(void 0===D)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);D=t&&t[1]||""}return"\n"+D+e}var z=!1;function V(e,t){if(!e||z)return"";z=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,l=o.length-1;1<=i&&0<=l&&a[i]!==o[l];)l--;for(;1<=i&&0<=l;i--,l--)if(a[i]!==o[l]){if(1!==i||1!==l)do{if(i--,0>--l||a[i]!==o[l]){var s="\n"+a[i].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}}while(1<=i&&0<=l);break}}}finally{z=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?j(e):""}function I(e){switch(e.tag){case 5:return j(e.type);case 16:return j("Lazy");case 13:return j("Suspense");case 19:return j("SuspenseList");case 0:case 2:case 15:return V(e.type,!1);case 11:return V(e.type.render,!1);case 1:return V(e.type,!0);default:return""}}function U(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case C:return"Portal";case k:return"Profiler";case w:return"StrictMode";case P:return"Suspense";case B:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case N:return(e.displayName||"Context")+".Consumer";case S:return(e._context.displayName||"Context")+".Provider";case _:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case T:return null!==(t=e.displayName||null)?t:U(e.type)||"Memo";case F:t=e._payload,e=e._init;try{return U(e(t))}catch(e){}}return null}function W(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return U(t);case 8:return t===w?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function $(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function H(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Y(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function K(e,t){var n=t.checked;return O({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Z(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=$(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function G(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function X(e,t){G(e,t);var n=$(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,$(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+$(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return O({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:$(n)}}function oe(e,t){var n=$(t.value),r=$(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function se(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,de=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function pe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var fe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},me=["Webkit","ms","Moz","O"];function he(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||fe.hasOwnProperty(e)&&fe[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=he(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(fe).forEach((function(e){me.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),fe[t]=fe[e]}))}));var ve=O({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var xe=null;function Ae(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,Ee=null,we=null;function ke(e){if(e=ba(e)){if("function"!=typeof Ce)throw Error(o(280));var t=e.stateNode;t&&(t=Aa(t),Ce(e.stateNode,e.type,t))}}function Se(e){Ee?we?we.push(e):we=[e]:Ee=e}function Ne(){if(Ee){var e=Ee,t=we;if(we=Ee=null,ke(e),t)for(e=0;e<t.length;e++)ke(t[e])}}function _e(e,t){return e(t)}function Pe(){}var Be=!1;function Te(e,t,n){if(Be)return e(t,n);Be=!0;try{return _e(e,t,n)}finally{Be=!1,(null!==Ee||null!==we)&&(Pe(),Ne())}}function Fe(e,t){var n=e.stateNode;if(null===n)return null;var r=Aa(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Re=!1;if(c)try{var Le={};Object.defineProperty(Le,"passive",{get:function(){Re=!0}}),window.addEventListener("test",Le,Le),window.removeEventListener("test",Le,Le)}catch(ce){Re=!1}function Me(e,t,n,r,a,o,i,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var De=!1,Oe=null,je=!1,ze=null,Ve={onError:function(e){De=!0,Oe=e}};function Ie(e,t,n,r,a,o,i,l,s){De=!1,Oe=null,Me.apply(Ve,arguments)}function Ue(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function We(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function $e(e){if(Ue(e)!==e)throw Error(o(188))}function Ye(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ue(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return $e(a),e;if(i===r)return $e(a),t;i=i.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=i;else{for(var l=!1,s=a.child;s;){if(s===n){l=!0,n=a,r=i;break}if(s===r){l=!0,r=a,n=i;break}s=s.sibling}if(!l){for(s=i.child;s;){if(s===n){l=!0,n=i,r=a;break}if(s===r){l=!0,r=i,n=a;break}s=s.sibling}if(!l)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?He(e):null}function He(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=He(e);if(null!==t)return t;e=e.sibling}return null}var qe=a.unstable_scheduleCallback,Qe=a.unstable_cancelCallback,Ke=a.unstable_shouldYield,Ze=a.unstable_requestPaint,Ge=a.unstable_now,Xe=a.unstable_getCurrentPriorityLevel,Je=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,ot=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/st|0)|0},lt=Math.log,st=Math.LN2,ut=64,ct=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function pt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~a;0!==l?r=dt(l):0!=(o&=i)&&(r=dt(o))}else 0!=(i=n&~a)?r=dt(i):0!==o&&(r=dt(o));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&a)&&((a=r&-r)>=(o=t&-t)||16===a&&0!=(4194240&o)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-it(t)),r|=e[n],t&=~a;return r}function ft(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function mt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function ht(){var e=ut;return 0==(4194240&(ut<<=1))&&(ut=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function vt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var bt=0;function xt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var At,Ct,Et,wt,kt,St=!1,Nt=[],_t=null,Pt=null,Bt=null,Tt=new Map,Ft=new Map,Rt=[],Lt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Mt(e,t){switch(e){case"focusin":case"focusout":_t=null;break;case"dragenter":case"dragleave":Pt=null;break;case"mouseover":case"mouseout":Bt=null;break;case"pointerover":case"pointerout":Tt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Ft.delete(t.pointerId)}}function Dt(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=ba(t))&&Ct(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function Ot(e){var t=ya(e.target);if(null!==t){var n=Ue(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=We(n)))return e.blockedOn=t,void kt(e.priority,(function(){Et(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function jt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ba(n))&&Ct(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);xe=r,n.target.dispatchEvent(r),xe=null,t.shift()}return!0}function zt(e,t,n){jt(e)&&n.delete(t)}function Vt(){St=!1,null!==_t&&jt(_t)&&(_t=null),null!==Pt&&jt(Pt)&&(Pt=null),null!==Bt&&jt(Bt)&&(Bt=null),Tt.forEach(zt),Ft.forEach(zt)}function It(e,t){e.blockedOn===t&&(e.blockedOn=null,St||(St=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Vt)))}function Ut(e){function t(t){return It(t,e)}if(0<Nt.length){It(Nt[0],e);for(var n=1;n<Nt.length;n++){var r=Nt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==_t&&It(_t,e),null!==Pt&&It(Pt,e),null!==Bt&&It(Bt,e),Tt.forEach(t),Ft.forEach(t),n=0;n<Rt.length;n++)(r=Rt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Rt.length&&null===(n=Rt[0]).blockedOn;)Ot(n),null===n.blockedOn&&Rt.shift()}var Wt=x.ReactCurrentBatchConfig,$t=!0;function Yt(e,t,n,r){var a=bt,o=Wt.transition;Wt.transition=null;try{bt=1,qt(e,t,n,r)}finally{bt=a,Wt.transition=o}}function Ht(e,t,n,r){var a=bt,o=Wt.transition;Wt.transition=null;try{bt=4,qt(e,t,n,r)}finally{bt=a,Wt.transition=o}}function qt(e,t,n,r){if($t){var a=Kt(e,t,n,r);if(null===a)$r(e,t,r,Qt,n),Mt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return _t=Dt(_t,e,t,n,r,a),!0;case"dragenter":return Pt=Dt(Pt,e,t,n,r,a),!0;case"mouseover":return Bt=Dt(Bt,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return Tt.set(o,Dt(Tt.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,Ft.set(o,Dt(Ft.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Mt(e,r),4&t&&-1<Lt.indexOf(e)){for(;null!==a;){var o=ba(a);if(null!==o&&At(o),null===(o=Kt(e,t,n,r))&&$r(e,t,r,Qt,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else $r(e,t,r,null,n)}}var Qt=null;function Kt(e,t,n,r){if(Qt=null,null!==(e=ya(e=Ae(r))))if(null===(t=Ue(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=We(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Qt=e,null}function Zt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Xe()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Gt=null,Xt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Xt,r=n.length,a="value"in Gt?Gt.value:Gt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return Jt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return O(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,ln,sn,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(un),dn=O({},un,{view:0,detail:0}),pn=an(dn),fn=O({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sn&&(sn&&"mousemove"===e.type?(on=e.screenX-sn.screenX,ln=e.screenY-sn.screenY):ln=on=0,sn=e),on)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),mn=an(fn),hn=an(O({},fn,{dataTransfer:0})),gn=an(O({},dn,{relatedTarget:0})),vn=an(O({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=O({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=an(yn),xn=an(O({},un,{data:0})),An={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function wn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function kn(){return wn}var Sn=O({},dn,{key:function(e){if(e.key){var t=An[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Cn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Nn=an(Sn),_n=an(O({},fn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pn=an(O({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kn})),Bn=an(O({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=O({},fn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Fn=an(Tn),Rn=[9,13,27,32],Ln=c&&"CompositionEvent"in window,Mn=null;c&&"documentMode"in document&&(Mn=document.documentMode);var Dn=c&&"TextEvent"in window&&!Mn,On=c&&(!Ln||Mn&&8<Mn&&11>=Mn),jn=String.fromCharCode(32),zn=!1;function Vn(e,t){switch(e){case"keyup":return-1!==Rn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function In(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Un=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function Yn(e,t,n,r){Se(r),0<(t=Hr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Hn=null,qn=null;function Qn(e){jr(e,0)}function Kn(e){if(q(xa(e)))return e}function Zn(e,t){if("change"===e)return t}var Gn=!1;if(c){var Xn;if(c){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Xn=Jn}else Xn=!1;Gn=Xn&&(!document.documentMode||9<document.documentMode)}function tr(){Hn&&(Hn.detachEvent("onpropertychange",nr),qn=Hn=null)}function nr(e){if("value"===e.propertyName&&Kn(qn)){var t=[];Yn(t,qn,e,Ae(e)),Te(Qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),qn=n,(Hn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(qn)}function or(e,t){if("click"===e)return Kn(t)}function ir(e,t){if("input"===e||"change"===e)return Kn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function sr(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!d.call(t,a)||!lr(e[a],t[a]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pr(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Q((e=t.contentWindow).document)}return t}function fr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function mr(e){var t=pr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&fr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=cr(n,o);var i=cr(n,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var hr=c&&"documentMode"in document&&11>=document.documentMode,gr=null,vr=null,yr=null,br=!1;function xr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==gr||gr!==Q(r)||(r="selectionStart"in(r=gr)&&fr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&sr(yr,r)||(yr=r,0<(r=Hr(vr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function Ar(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Cr={animationend:Ar("Animation","AnimationEnd"),animationiteration:Ar("Animation","AnimationIteration"),animationstart:Ar("Animation","AnimationStart"),transitionend:Ar("Transition","TransitionEnd")},Er={},wr={};function kr(e){if(Er[e])return Er[e];if(!Cr[e])return e;var t,n=Cr[e];for(t in n)if(n.hasOwnProperty(t)&&t in wr)return Er[e]=n[t];return e}c&&(wr=document.createElement("div").style,"AnimationEvent"in window||(delete Cr.animationend.animation,delete Cr.animationiteration.animation,delete Cr.animationstart.animation),"TransitionEvent"in window||delete Cr.transitionend.transition);var Sr=kr("animationend"),Nr=kr("animationiteration"),_r=kr("animationstart"),Pr=kr("transitionend"),Br=new Map,Tr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Fr(e,t){Br.set(e,t),s(t,[e])}for(var Rr=0;Rr<Tr.length;Rr++){var Lr=Tr[Rr];Fr(Lr.toLowerCase(),"on"+(Lr[0].toUpperCase()+Lr.slice(1)))}Fr(Sr,"onAnimationEnd"),Fr(Nr,"onAnimationIteration"),Fr(_r,"onAnimationStart"),Fr("dblclick","onDoubleClick"),Fr("focusin","onFocus"),Fr("focusout","onBlur"),Fr(Pr,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Mr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Dr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Mr));function Or(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,i,l,s,u){if(Ie.apply(this,arguments),De){if(!De)throw Error(o(198));var c=Oe;De=!1,Oe=null,je||(je=!0,ze=c)}}(r,t,void 0,e),e.currentTarget=null}function jr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==o&&a.isPropagationStopped())break e;Or(a,l,u),o=s}else for(i=0;i<r.length;i++){if(s=(l=r[i]).instance,u=l.currentTarget,l=l.listener,s!==o&&a.isPropagationStopped())break e;Or(a,l,u),o=s}}}if(je)throw e=ze,je=!1,ze=null,e}function zr(e,t){var n=t[ha];void 0===n&&(n=t[ha]=new Set);var r=e+"__bubble";n.has(r)||(Wr(t,e,2,!1),n.add(r))}function Vr(e,t,n){var r=0;t&&(r|=4),Wr(n,e,r,t)}var Ir="_reactListening"+Math.random().toString(36).slice(2);function Ur(e){if(!e[Ir]){e[Ir]=!0,i.forEach((function(t){"selectionchange"!==t&&(Dr.has(t)||Vr(t,!1,e),Vr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ir]||(t[Ir]=!0,Vr("selectionchange",!1,t))}}function Wr(e,t,n,r){switch(Zt(t)){case 1:var a=Yt;break;case 4:a=Ht;break;default:a=qt}n=a.bind(null,t,n,e),a=void 0,!Re||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function $r(e,t,n,r,a){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===a||8===s.nodeType&&s.parentNode===a))return;i=i.return}for(;null!==l;){if(null===(i=ya(l)))return;if(5===(s=i.tag)||6===s){r=o=i;continue e}l=l.parentNode}}r=r.return}Te((function(){var r=o,a=Ae(n),i=[];e:{var l=Br.get(e);if(void 0!==l){var s=cn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":s=Nn;break;case"focusin":u="focus",s=gn;break;case"focusout":u="blur",s=gn;break;case"beforeblur":case"afterblur":s=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=hn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Pn;break;case Sr:case Nr:case _r:s=vn;break;case Pr:s=Bn;break;case"scroll":s=pn;break;case"wheel":s=Fn;break;case"copy":case"cut":case"paste":s=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=_n}var c=0!=(4&t),d=!c&&"scroll"===e,p=c?null!==l?l+"Capture":null:l;c=[];for(var f,m=r;null!==m;){var h=(f=m).stateNode;if(5===f.tag&&null!==h&&(f=h,null!==p&&null!=(h=Fe(m,p))&&c.push(Yr(m,h,f))),d)break;m=m.return}0<c.length&&(l=new s(l,u,null,n,a),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===xe||!(u=n.relatedTarget||n.fromElement)||!ya(u)&&!u[ma])&&(s||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?ya(u):null)&&(u!==(d=Ue(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(s=null,u=r),s!==u)){if(c=mn,h="onMouseLeave",p="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(c=_n,h="onPointerLeave",p="onPointerEnter",m="pointer"),d=null==s?l:xa(s),f=null==u?l:xa(u),(l=new c(h,m+"leave",s,n,a)).target=d,l.relatedTarget=f,h=null,ya(a)===r&&((c=new c(p,m+"enter",u,n,a)).target=f,c.relatedTarget=d,h=c),d=h,s&&u)e:{for(p=u,m=0,f=c=s;f;f=qr(f))m++;for(f=0,h=p;h;h=qr(h))f++;for(;0<m-f;)c=qr(c),m--;for(;0<f-m;)p=qr(p),f--;for(;m--;){if(c===p||null!==p&&c===p.alternate)break e;c=qr(c),p=qr(p)}c=null}else c=null;null!==s&&Qr(i,l,s,c,!1),null!==u&&null!==d&&Qr(i,d,u,c,!0)}if("select"===(s=(l=r?xa(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var g=Zn;else if($n(l))if(Gn)g=ir;else{g=ar;var v=rr}else(s=l.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=or);switch(g&&(g=g(e,r))?Yn(i,g,n,a):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&ee(l,"number",l.value)),v=r?xa(r):window,e){case"focusin":($n(v)||"true"===v.contentEditable)&&(gr=v,vr=r,yr=null);break;case"focusout":yr=vr=gr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,xr(i,n,a);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":xr(i,n,a)}var y;if(Ln)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Un?Vn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(On&&"ko"!==n.locale&&(Un||"onCompositionStart"!==b?"onCompositionEnd"===b&&Un&&(y=en()):(Xt="value"in(Gt=a)?Gt.value:Gt.textContent,Un=!0)),0<(v=Hr(r,b)).length&&(b=new xn(b,e,null,n,a),i.push({event:b,listeners:v}),(y||null!==(y=In(n)))&&(b.data=y))),(y=Dn?function(e,t){switch(e){case"compositionend":return In(t);case"keypress":return 32!==t.which?null:(zn=!0,jn);case"textInput":return(e=t.data)===jn&&zn?null:e;default:return null}}(e,n):function(e,t){if(Un)return"compositionend"===e||!Ln&&Vn(e,t)?(e=en(),Jt=Xt=Gt=null,Un=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return On&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Hr(r,"onBeforeInput")).length&&(a=new xn("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=y)}jr(i,t)}))}function Yr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Hr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Fe(e,n))&&r.unshift(Yr(e,o,a)),null!=(o=Fe(e,t))&&r.push(Yr(e,o,a))),e=e.return}return r}function qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Qr(e,t,n,r,a){for(var o=t._reactName,i=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(null!==s&&s===r)break;5===l.tag&&null!==u&&(l=u,a?null!=(s=Fe(n,o))&&i.unshift(Yr(n,s,l)):a||null!=(s=Fe(n,o))&&i.push(Yr(n,s,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Kr=/\r\n?/g,Zr=/\u0000|\uFFFD/g;function Gr(e){return("string"==typeof e?e:""+e).replace(Kr,"\n").replace(Zr,"")}function Xr(e,t,n){if(t=Gr(t),Gr(e)!==t&&n)throw Error(o(425))}function Jr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,ia="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(la)}:ra;function la(e){setTimeout((function(){throw e}))}function sa(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Ut(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Ut(t)}function ua(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var da=Math.random().toString(36).slice(2),pa="__reactFiber$"+da,fa="__reactProps$"+da,ma="__reactContainer$"+da,ha="__reactEvents$"+da,ga="__reactListeners$"+da,va="__reactHandles$"+da;function ya(e){var t=e[pa];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ma]||n[pa]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ca(e);null!==e;){if(n=e[pa])return n;e=ca(e)}return t}n=(e=n).parentNode}return null}function ba(e){return!(e=e[pa]||e[ma])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function xa(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function Aa(e){return e[fa]||null}var Ca=[],Ea=-1;function wa(e){return{current:e}}function ka(e){0>Ea||(e.current=Ca[Ea],Ca[Ea]=null,Ea--)}function Sa(e,t){Ea++,Ca[Ea]=e.current,e.current=t}var Na={},_a=wa(Na),Pa=wa(!1),Ba=Na;function Ta(e,t){var n=e.type.contextTypes;if(!n)return Na;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Fa(e){return null!=e.childContextTypes}function Ra(){ka(Pa),ka(_a)}function La(e,t,n){if(_a.current!==Na)throw Error(o(168));Sa(_a,t),Sa(Pa,n)}function Ma(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(o(108,W(e)||"Unknown",a));return O({},n,r)}function Da(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Na,Ba=_a.current,Sa(_a,e),Sa(Pa,Pa.current),!0}function Oa(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=Ma(e,t,Ba),r.__reactInternalMemoizedMergedChildContext=e,ka(Pa),ka(_a),Sa(_a,e)):ka(Pa),Sa(Pa,n)}var ja=null,za=!1,Va=!1;function Ia(e){null===ja?ja=[e]:ja.push(e)}function Ua(){if(!Va&&null!==ja){Va=!0;var e=0,t=bt;try{var n=ja;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}ja=null,za=!1}catch(t){throw null!==ja&&(ja=ja.slice(e+1)),qe(Je,Ua),t}finally{bt=t,Va=!1}}return null}var Wa=[],$a=0,Ya=null,Ha=0,qa=[],Qa=0,Ka=null,Za=1,Ga="";function Xa(e,t){Wa[$a++]=Ha,Wa[$a++]=Ya,Ya=e,Ha=t}function Ja(e,t,n){qa[Qa++]=Za,qa[Qa++]=Ga,qa[Qa++]=Ka,Ka=e;var r=Za;e=Ga;var a=32-it(r)-1;r&=~(1<<a),n+=1;var o=32-it(t)+a;if(30<o){var i=a-a%5;o=(r&(1<<i)-1).toString(32),r>>=i,a-=i,Za=1<<32-it(t)+a|n<<a|r,Ga=o+e}else Za=1<<o|n<<a|r,Ga=e}function eo(e){null!==e.return&&(Xa(e,1),Ja(e,1,0))}function to(e){for(;e===Ya;)Ya=Wa[--$a],Wa[$a]=null,Ha=Wa[--$a],Wa[$a]=null;for(;e===Ka;)Ka=qa[--Qa],qa[Qa]=null,Ga=qa[--Qa],qa[Qa]=null,Za=qa[--Qa],qa[Qa]=null}var no=null,ro=null,ao=!1,oo=null;function io(e,t){var n=Fu(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function lo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ro=ua(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ka?{id:Za,overflow:Ga}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Fu(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ro=null,!0);default:return!1}}function so(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function uo(e){if(ao){var t=ro;if(t){var n=t;if(!lo(e,t)){if(so(e))throw Error(o(418));t=ua(n.nextSibling);var r=no;t&&lo(e,t)?io(r,n):(e.flags=-4097&e.flags|2,ao=!1,no=e)}}else{if(so(e))throw Error(o(418));e.flags=-4097&e.flags|2,ao=!1,no=e}}}function co(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function po(e){if(e!==no)return!1;if(!ao)return co(e),ao=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=ro)){if(so(e))throw fo(),Error(o(418));for(;t;)io(e,t),t=ua(t.nextSibling)}if(co(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ro=ua(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ro=null}}else ro=no?ua(e.stateNode.nextSibling):null;return!0}function fo(){for(var e=ro;e;)e=ua(e.nextSibling)}function mo(){ro=no=null,ao=!1}function ho(e){null===oo?oo=[e]:oo.push(e)}var go=x.ReactCurrentBatchConfig;function vo(e,t){if(e&&e.defaultProps){for(var n in t=O({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var yo=wa(null),bo=null,xo=null,Ao=null;function Co(){Ao=xo=bo=null}function Eo(e){var t=yo.current;ka(yo),e._currentValue=t}function wo(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function ko(e,t){bo=e,Ao=xo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(xl=!0),e.firstContext=null)}function So(e){var t=e._currentValue;if(Ao!==e)if(e={context:e,memoizedValue:t,next:null},null===xo){if(null===bo)throw Error(o(308));xo=e,bo.dependencies={lanes:0,firstContext:e}}else xo=xo.next=e;return t}var No=null;function _o(e){null===No?No=[e]:No.push(e)}function Po(e,t,n,r){var a=t.interleaved;return null===a?(n.next=n,_o(t)):(n.next=a.next,a.next=n),t.interleaved=n,Bo(e,r)}function Bo(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var To=!1;function Fo(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ro(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Lo(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Mo(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Ps)){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,Bo(e,n)}return null===(a=r.interleaved)?(t.next=t,_o(r)):(t.next=a.next,a.next=t),r.interleaved=t,Bo(e,n)}function Do(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function Oo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=i:o=o.next=i,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function jo(e,t,n,r){var a=e.updateQueue;To=!1;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var s=l,u=s.next;s.next=null,null===i?o=u:i.next=u,i=s;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=s)}if(null!==o){var d=a.baseState;for(i=0,c=u=s=null,l=o;;){var p=l.lane,f=l.eventTime;if((r&p)===p){null!==c&&(c=c.next={eventTime:f,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var m=e,h=l;switch(p=t,f=n,h.tag){case 1:if("function"==typeof(m=h.payload)){d=m.call(f,d,p);break e}d=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(p="function"==typeof(m=h.payload)?m.call(f,d,p):m))break e;d=O({},d,p);break e;case 2:To=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(p=a.effects)?a.effects=[l]:p.push(l))}else f={eventTime:f,lane:p,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(u=c=f,s=d):c=c.next=f,i|=p;if(null===(l=l.next)){if(null===(l=a.shared.pending))break;l=(p=l).next,p.next=null,a.lastBaseUpdate=p,a.shared.pending=null}}if(null===c&&(s=d),a.baseState=s,a.firstBaseUpdate=u,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{i|=a.lane,a=a.next}while(a!==t)}else null===o&&(a.shared.lanes=0);Os|=i,e.lanes=i,e.memoizedState=d}}function zo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var Vo=(new r.Component).refs;function Io(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:O({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Uo={isMounted:function(e){return!!(e=e._reactInternals)&&Ue(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=tu(),a=nu(e),o=Lo(r,a);o.payload=t,null!=n&&(o.callback=n),null!==(t=Mo(e,o,a))&&(ru(t,e,a,r),Do(t,e,a))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=tu(),a=nu(e),o=Lo(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=Mo(e,o,a))&&(ru(t,e,a,r),Do(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tu(),r=nu(e),a=Lo(n,r);a.tag=2,null!=t&&(a.callback=t),null!==(t=Mo(e,a,r))&&(ru(t,e,r,n),Do(t,e,r))}};function Wo(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&sr(n,r)&&sr(a,o))}function $o(e,t,n){var r=!1,a=Na,o=t.contextType;return"object"==typeof o&&null!==o?o=So(o):(a=Fa(t)?Ba:_a.current,o=(r=null!=(r=t.contextTypes))?Ta(e,a):Na),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Uo,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function Yo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Uo.enqueueReplaceState(t,t.state,null)}function Ho(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=Vo,Fo(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=So(o):(o=Fa(t)?Ba:_a.current,a.context=Ta(e,o)),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(Io(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&Uo.enqueueReplaceState(a,a.state,null),jo(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function qo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=a.refs;t===Vo&&(t=a.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Qo(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ko(e){return(0,e._init)(e._payload)}function Zo(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Lu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=ju(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function u(e,t,n,r){var o=n.type;return o===E?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===F&&Ko(o)===t.type)?((r=a(t,n.props)).ref=qo(e,t,n),r.return=e,r):((r=Mu(n.type,n.key,n.props,null,e.mode,r)).ref=qo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=zu(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=Du(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=ju(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case A:return(n=Mu(t.type,t.key,t.props,null,e.mode,n)).ref=qo(e,null,t),n.return=e,n;case C:return(t=zu(t,e.mode,n)).return=e,t;case F:return p(e,(0,t._init)(t._payload),n)}if(te(t)||M(t))return(t=Du(t,e.mode,n,null)).return=e,t;Qo(e,t)}return null}function f(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case A:return n.key===a?u(e,t,n,r):null;case C:return n.key===a?c(e,t,n,r):null;case F:return f(e,t,(a=n._init)(n._payload),r)}if(te(n)||M(n))return null!==a?null:d(e,t,n,r,null);Qo(e,n)}return null}function m(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case A:return u(t,e=e.get(null===r.key?n:r.key)||null,r,a);case C:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case F:return m(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||M(r))return d(t,e=e.get(n)||null,r,a,null);Qo(t,r)}return null}function h(a,o,l,s){for(var u=null,c=null,d=o,h=o=0,g=null;null!==d&&h<l.length;h++){d.index>h?(g=d,d=null):g=d.sibling;var v=f(a,d,l[h],s);if(null===v){null===d&&(d=g);break}e&&d&&null===v.alternate&&t(a,d),o=i(v,o,h),null===c?u=v:c.sibling=v,c=v,d=g}if(h===l.length)return n(a,d),ao&&Xa(a,h),u;if(null===d){for(;h<l.length;h++)null!==(d=p(a,l[h],s))&&(o=i(d,o,h),null===c?u=d:c.sibling=d,c=d);return ao&&Xa(a,h),u}for(d=r(a,d);h<l.length;h++)null!==(g=m(d,a,h,l[h],s))&&(e&&null!==g.alternate&&d.delete(null===g.key?h:g.key),o=i(g,o,h),null===c?u=g:c.sibling=g,c=g);return e&&d.forEach((function(e){return t(a,e)})),ao&&Xa(a,h),u}function g(a,l,s,u){var c=M(s);if("function"!=typeof c)throw Error(o(150));if(null==(s=c.call(s)))throw Error(o(151));for(var d=c=null,h=l,g=l=0,v=null,y=s.next();null!==h&&!y.done;g++,y=s.next()){h.index>g?(v=h,h=null):v=h.sibling;var b=f(a,h,y.value,u);if(null===b){null===h&&(h=v);break}e&&h&&null===b.alternate&&t(a,h),l=i(b,l,g),null===d?c=b:d.sibling=b,d=b,h=v}if(y.done)return n(a,h),ao&&Xa(a,g),c;if(null===h){for(;!y.done;g++,y=s.next())null!==(y=p(a,y.value,u))&&(l=i(y,l,g),null===d?c=y:d.sibling=y,d=y);return ao&&Xa(a,g),c}for(h=r(a,h);!y.done;g++,y=s.next())null!==(y=m(h,a,g,y.value,u))&&(e&&null!==y.alternate&&h.delete(null===y.key?g:y.key),l=i(y,l,g),null===d?c=y:d.sibling=y,d=y);return e&&h.forEach((function(e){return t(a,e)})),ao&&Xa(a,g),c}return function e(r,o,i,s){if("object"==typeof i&&null!==i&&i.type===E&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case A:e:{for(var u=i.key,c=o;null!==c;){if(c.key===u){if((u=i.type)===E){if(7===c.tag){n(r,c.sibling),(o=a(c,i.props.children)).return=r,r=o;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===F&&Ko(u)===c.type){n(r,c.sibling),(o=a(c,i.props)).ref=qo(r,c,i),o.return=r,r=o;break e}n(r,c);break}t(r,c),c=c.sibling}i.type===E?((o=Du(i.props.children,r.mode,s,i.key)).return=r,r=o):((s=Mu(i.type,i.key,i.props,null,r.mode,s)).ref=qo(r,o,i),s.return=r,r=s)}return l(r);case C:e:{for(c=i.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){n(r,o.sibling),(o=a(o,i.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=zu(i,r.mode,s)).return=r,r=o}return l(r);case F:return e(r,o,(c=i._init)(i._payload),s)}if(te(i))return h(r,o,i,s);if(M(i))return g(r,o,i,s);Qo(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==o&&6===o.tag?(n(r,o.sibling),(o=a(o,i)).return=r,r=o):(n(r,o),(o=ju(i,r.mode,s)).return=r,r=o),l(r)):n(r,o)}}var Go=Zo(!0),Xo=Zo(!1),Jo={},ei=wa(Jo),ti=wa(Jo),ni=wa(Jo);function ri(e){if(e===Jo)throw Error(o(174));return e}function ai(e,t){switch(Sa(ni,t),Sa(ti,e),Sa(ei,Jo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:se(null,"");break;default:t=se(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ka(ei),Sa(ei,t)}function oi(){ka(ei),ka(ti),ka(ni)}function ii(e){ri(ni.current);var t=ri(ei.current),n=se(t,e.type);t!==n&&(Sa(ti,e),Sa(ei,n))}function li(e){ti.current===e&&(ka(ei),ka(ti))}var si=wa(0);function ui(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ci=[];function di(){for(var e=0;e<ci.length;e++)ci[e]._workInProgressVersionPrimary=null;ci.length=0}var pi=x.ReactCurrentDispatcher,fi=x.ReactCurrentBatchConfig,mi=0,hi=null,gi=null,vi=null,yi=!1,bi=!1,xi=0,Ai=0;function Ci(){throw Error(o(321))}function Ei(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function wi(e,t,n,r,a,i){if(mi=i,hi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,pi.current=null===e||null===e.memoizedState?ll:sl,e=n(r,a),bi){i=0;do{if(bi=!1,xi=0,25<=i)throw Error(o(301));i+=1,vi=gi=null,t.updateQueue=null,pi.current=ul,e=n(r,a)}while(bi)}if(pi.current=il,t=null!==gi&&null!==gi.next,mi=0,vi=gi=hi=null,yi=!1,t)throw Error(o(300));return e}function ki(){var e=0!==xi;return xi=0,e}function Si(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===vi?hi.memoizedState=vi=e:vi=vi.next=e,vi}function Ni(){if(null===gi){var e=hi.alternate;e=null!==e?e.memoizedState:null}else e=gi.next;var t=null===vi?hi.memoizedState:vi.next;if(null!==t)vi=t,gi=e;else{if(null===e)throw Error(o(310));e={memoizedState:(gi=e).memoizedState,baseState:gi.baseState,baseQueue:gi.baseQueue,queue:gi.queue,next:null},null===vi?hi.memoizedState=vi=e:vi=vi.next=e}return vi}function _i(e,t){return"function"==typeof t?t(e):t}function Pi(e){var t=Ni(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=gi,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var l=a.next;a.next=i.next,i.next=l}r.baseQueue=a=i,n.pending=null}if(null!==a){i=a.next,r=r.baseState;var s=l=null,u=null,c=i;do{var d=c.lane;if((mi&d)===d)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var p={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(s=u=p,l=r):u=u.next=p,hi.lanes|=d,Os|=d}c=c.next}while(null!==c&&c!==i);null===u?l=r:u.next=s,lr(r,t.memoizedState)||(xl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=u,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{i=a.lane,hi.lanes|=i,Os|=i,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Bi(e){var t=Ni(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{i=e(i,l.action),l=l.next}while(l!==a);lr(i,t.memoizedState)||(xl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Ti(){}function Fi(e,t){var n=hi,r=Ni(),a=t(),i=!lr(r.memoizedState,a);if(i&&(r.memoizedState=a,xl=!0),r=r.queue,$i(Mi.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==vi&&1&vi.memoizedState.tag){if(n.flags|=2048,zi(9,Li.bind(null,n,r,a,t),void 0,null),null===Bs)throw Error(o(349));0!=(30&mi)||Ri(n,t,a)}return a}function Ri(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=hi.updateQueue)?(t={lastEffect:null,stores:null},hi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Li(e,t,n,r){t.value=n,t.getSnapshot=r,Di(t)&&Oi(e)}function Mi(e,t,n){return n((function(){Di(t)&&Oi(e)}))}function Di(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Oi(e){var t=Bo(e,1);null!==t&&ru(t,e,1,-1)}function ji(e){var t=Si();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:_i,lastRenderedState:e},t.queue=e,e=e.dispatch=nl.bind(null,hi,e),[t.memoizedState,e]}function zi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=hi.updateQueue)?(t={lastEffect:null,stores:null},hi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Vi(){return Ni().memoizedState}function Ii(e,t,n,r){var a=Si();hi.flags|=e,a.memoizedState=zi(1|t,n,void 0,void 0===r?null:r)}function Ui(e,t,n,r){var a=Ni();r=void 0===r?null:r;var o=void 0;if(null!==gi){var i=gi.memoizedState;if(o=i.destroy,null!==r&&Ei(r,i.deps))return void(a.memoizedState=zi(t,n,o,r))}hi.flags|=e,a.memoizedState=zi(1|t,n,o,r)}function Wi(e,t){return Ii(8390656,8,e,t)}function $i(e,t){return Ui(2048,8,e,t)}function Yi(e,t){return Ui(4,2,e,t)}function Hi(e,t){return Ui(4,4,e,t)}function qi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Qi(e,t,n){return n=null!=n?n.concat([e]):null,Ui(4,4,qi.bind(null,t,e),n)}function Ki(){}function Zi(e,t){var n=Ni();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ei(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Gi(e,t){var n=Ni();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ei(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Xi(e,t,n){return 0==(21&mi)?(e.baseState&&(e.baseState=!1,xl=!0),e.memoizedState=n):(lr(n,t)||(n=ht(),hi.lanes|=n,Os|=n,e.baseState=!0),t)}function Ji(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=fi.transition;fi.transition={};try{e(!1),t()}finally{bt=n,fi.transition=r}}function el(){return Ni().memoizedState}function tl(e,t,n){var r=nu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rl(e)?al(t,n):null!==(n=Po(e,t,n,r))&&(ru(n,e,r,tu()),ol(n,t,r))}function nl(e,t,n){var r=nu(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rl(e))al(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=o(i,n);if(a.hasEagerState=!0,a.eagerState=l,lr(l,i)){var s=t.interleaved;return null===s?(a.next=a,_o(t)):(a.next=s.next,s.next=a),void(t.interleaved=a)}}catch(e){}null!==(n=Po(e,t,a,r))&&(ru(n,e,r,a=tu()),ol(n,t,r))}}function rl(e){var t=e.alternate;return e===hi||null!==t&&t===hi}function al(e,t){bi=yi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function ol(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var il={readContext:So,useCallback:Ci,useContext:Ci,useEffect:Ci,useImperativeHandle:Ci,useInsertionEffect:Ci,useLayoutEffect:Ci,useMemo:Ci,useReducer:Ci,useRef:Ci,useState:Ci,useDebugValue:Ci,useDeferredValue:Ci,useTransition:Ci,useMutableSource:Ci,useSyncExternalStore:Ci,useId:Ci,unstable_isNewReconciler:!1},ll={readContext:So,useCallback:function(e,t){return Si().memoizedState=[e,void 0===t?null:t],e},useContext:So,useEffect:Wi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ii(4194308,4,qi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ii(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ii(4,2,e,t)},useMemo:function(e,t){var n=Si();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Si();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tl.bind(null,hi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Si().memoizedState=e},useState:ji,useDebugValue:Ki,useDeferredValue:function(e){return Si().memoizedState=e},useTransition:function(){var e=ji(!1),t=e[0];return e=Ji.bind(null,e[1]),Si().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=hi,a=Si();if(ao){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Bs)throw Error(o(349));0!=(30&mi)||Ri(r,t,n)}a.memoizedState=n;var i={value:n,getSnapshot:t};return a.queue=i,Wi(Mi.bind(null,r,i,e),[e]),r.flags|=2048,zi(9,Li.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=Si(),t=Bs.identifierPrefix;if(ao){var n=Ga;t=":"+t+"R"+(n=(Za&~(1<<32-it(Za)-1)).toString(32)+n),0<(n=xi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=Ai++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},sl={readContext:So,useCallback:Zi,useContext:So,useEffect:$i,useImperativeHandle:Qi,useInsertionEffect:Yi,useLayoutEffect:Hi,useMemo:Gi,useReducer:Pi,useRef:Vi,useState:function(){return Pi(_i)},useDebugValue:Ki,useDeferredValue:function(e){return Xi(Ni(),gi.memoizedState,e)},useTransition:function(){return[Pi(_i)[0],Ni().memoizedState]},useMutableSource:Ti,useSyncExternalStore:Fi,useId:el,unstable_isNewReconciler:!1},ul={readContext:So,useCallback:Zi,useContext:So,useEffect:$i,useImperativeHandle:Qi,useInsertionEffect:Yi,useLayoutEffect:Hi,useMemo:Gi,useReducer:Bi,useRef:Vi,useState:function(){return Bi(_i)},useDebugValue:Ki,useDeferredValue:function(e){var t=Ni();return null===gi?t.memoizedState=e:Xi(t,gi.memoizedState,e)},useTransition:function(){return[Bi(_i)[0],Ni().memoizedState]},useMutableSource:Ti,useSyncExternalStore:Fi,useId:el,unstable_isNewReconciler:!1};function cl(e,t){try{var n="",r=t;do{n+=I(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function dl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function pl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var fl="function"==typeof WeakMap?WeakMap:Map;function ml(e,t,n){(n=Lo(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ys||(Ys=!0,Hs=r),pl(0,t)},n}function hl(e,t,n){(n=Lo(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){pl(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){pl(0,t),"function"!=typeof r&&(null===qs?qs=new Set([this]):qs.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function gl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new fl;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=Su.bind(null,e,t,n),t.then(e,e))}function vl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function yl(e,t,n,r,a){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Lo(-1,1)).tag=2,Mo(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}var bl=x.ReactCurrentOwner,xl=!1;function Al(e,t,n,r){t.child=null===e?Xo(t,null,n,r):Go(t,e.child,n,r)}function Cl(e,t,n,r,a){n=n.render;var o=t.ref;return ko(t,a),r=wi(e,t,n,r,o,a),n=ki(),null===e||xl?(ao&&n&&eo(t),t.flags|=1,Al(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Yl(e,t,a))}function El(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||Ru(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Mu(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,wl(e,t,o,r,a))}if(o=e.child,0==(e.lanes&a)){var i=o.memoizedProps;if((n=null!==(n=n.compare)?n:sr)(i,r)&&e.ref===t.ref)return Yl(e,t,a)}return t.flags|=1,(e=Lu(o,r)).ref=t.ref,e.return=t,t.child=e}function wl(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(sr(o,r)&&e.ref===t.ref){if(xl=!1,t.pendingProps=r=o,0==(e.lanes&a))return t.lanes=e.lanes,Yl(e,t,a);0!=(131072&e.flags)&&(xl=!0)}}return Nl(e,t,n,r,a)}function kl(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Sa(Ls,Rs),Rs|=n;else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Sa(Ls,Rs),Rs|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,Sa(Ls,Rs),Rs|=r}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,Sa(Ls,Rs),Rs|=r;return Al(e,t,a,n),t.child}function Sl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Nl(e,t,n,r,a){var o=Fa(n)?Ba:_a.current;return o=Ta(t,o),ko(t,a),n=wi(e,t,n,r,o,a),r=ki(),null===e||xl?(ao&&r&&eo(t),t.flags|=1,Al(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Yl(e,t,a))}function _l(e,t,n,r,a){if(Fa(n)){var o=!0;Da(t)}else o=!1;if(ko(t,a),null===t.stateNode)$l(e,t),$o(t,n,r),Ho(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var s=i.context,u=n.contextType;u="object"==typeof u&&null!==u?So(u):Ta(t,u=Fa(n)?Ba:_a.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||s!==u)&&Yo(t,i,r,u),To=!1;var p=t.memoizedState;i.state=p,jo(t,r,i,a),s=t.memoizedState,l!==r||p!==s||Pa.current||To?("function"==typeof c&&(Io(t,n,c,r),s=t.memoizedState),(l=To||Wo(t,n,l,r,p,s,u))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),i.props=r,i.state=s,i.context=u,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Ro(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:vo(t.type,l),i.props=u,d=t.pendingProps,p=i.context,s="object"==typeof(s=n.contextType)&&null!==s?So(s):Ta(t,s=Fa(n)?Ba:_a.current);var f=n.getDerivedStateFromProps;(c="function"==typeof f||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==d||p!==s)&&Yo(t,i,r,s),To=!1,p=t.memoizedState,i.state=p,jo(t,r,i,a);var m=t.memoizedState;l!==d||p!==m||Pa.current||To?("function"==typeof f&&(Io(t,n,f,r),m=t.memoizedState),(u=To||Wo(t,n,u,r,p,m,s)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,m,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,m,s)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=m),i.props=r,i.state=m,i.context=s,r=u):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),r=!1)}return Pl(e,t,n,r,o,a)}function Pl(e,t,n,r,a,o){Sl(e,t);var i=0!=(128&t.flags);if(!r&&!i)return a&&Oa(t,n,!1),Yl(e,t,o);r=t.stateNode,bl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Go(t,e.child,null,o),t.child=Go(t,null,l,o)):Al(e,t,l,o),t.memoizedState=r.state,a&&Oa(t,n,!0),t.child}function Bl(e){var t=e.stateNode;t.pendingContext?La(0,t.pendingContext,t.pendingContext!==t.context):t.context&&La(0,t.context,!1),ai(e,t.containerInfo)}function Tl(e,t,n,r,a){return mo(),ho(a),t.flags|=256,Al(e,t,n,r),t.child}var Fl,Rl,Ll,Ml,Dl={dehydrated:null,treeContext:null,retryLane:0};function Ol(e){return{baseLanes:e,cachePool:null,transitions:null}}function jl(e,t,n){var r,a=t.pendingProps,i=si.current,l=!1,s=0!=(128&t.flags);if((r=s)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Sa(si,1&i),null===e)return uo(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(s=a.children,e=a.fallback,l?(a=t.mode,l=t.child,s={mode:"hidden",children:s},0==(1&a)&&null!==l?(l.childLanes=0,l.pendingProps=s):l=Ou(s,a,0,null),e=Du(e,a,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Ol(n),t.memoizedState=Dl,e):zl(t,s));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,a,i,l){if(n)return 256&t.flags?(t.flags&=-257,Vl(e,t,l,r=dl(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,a=t.mode,r=Ou({mode:"visible",children:r.children},a,0,null),(i=Du(i,a,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,0!=(1&t.mode)&&Go(t,e.child,null,l),t.child.memoizedState=Ol(l),t.memoizedState=Dl,i);if(0==(1&t.mode))return Vl(e,t,l,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var s=r.dgst;return r=s,Vl(e,t,l,r=dl(i=Error(o(419)),r,void 0))}if(s=0!=(l&e.childLanes),xl||s){if(null!==(r=Bs)){switch(l&-l){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=0!=(a&(r.suspendedLanes|l))?0:a)&&a!==i.retryLane&&(i.retryLane=a,Bo(e,a),ru(r,e,a,-1))}return gu(),Vl(e,t,l,r=dl(Error(o(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=_u.bind(null,e),a._reactRetry=t,null):(e=i.treeContext,ro=ua(a.nextSibling),no=t,ao=!0,oo=null,null!==e&&(qa[Qa++]=Za,qa[Qa++]=Ga,qa[Qa++]=Ka,Za=e.id,Ga=e.overflow,Ka=t),(t=zl(t,r.children)).flags|=4096,t)}(e,t,s,a,r,i,n);if(l){l=a.fallback,s=t.mode,r=(i=e.child).sibling;var u={mode:"hidden",children:a.children};return 0==(1&s)&&t.child!==i?((a=t.child).childLanes=0,a.pendingProps=u,t.deletions=null):(a=Lu(i,u)).subtreeFlags=14680064&i.subtreeFlags,null!==r?l=Lu(r,l):(l=Du(l,s,n,null)).flags|=2,l.return=t,a.return=t,a.sibling=l,t.child=a,a=l,l=t.child,s=null===(s=e.child.memoizedState)?Ol(n):{baseLanes:s.baseLanes|n,cachePool:null,transitions:s.transitions},l.memoizedState=s,l.childLanes=e.childLanes&~n,t.memoizedState=Dl,a}return e=(l=e.child).sibling,a=Lu(l,{mode:"visible",children:a.children}),0==(1&t.mode)&&(a.lanes=n),a.return=t,a.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=a,t.memoizedState=null,a}function zl(e,t){return(t=Ou({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Vl(e,t,n,r){return null!==r&&ho(r),Go(t,e.child,null,n),(e=zl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Il(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),wo(e.return,t,n)}function Ul(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function Wl(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Al(e,t,r.children,n),0!=(2&(r=si.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Il(e,n,t);else if(19===e.tag)Il(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Sa(si,r),0==(1&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===ui(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Ul(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===ui(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Ul(t,!0,n,null,o);break;case"together":Ul(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function $l(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Yl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Os|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Lu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Lu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Hl(e,t){if(!ao)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ql(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Ql(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return ql(t),null;case 1:case 17:return Fa(t.type)&&Ra(),ql(t),null;case 3:return r=t.stateNode,oi(),ka(Pa),ka(_a),di(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(po(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==oo&&(lu(oo),oo=null))),Rl(e,t),ql(t),null;case 5:li(t);var a=ri(ni.current);if(n=t.type,null!==e&&null!=t.stateNode)Ll(e,t,n,r,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return ql(t),null}if(e=ri(ei.current),po(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[pa]=t,r[fa]=i,e=0!=(1&t.mode),n){case"dialog":zr("cancel",r),zr("close",r);break;case"iframe":case"object":case"embed":zr("load",r);break;case"video":case"audio":for(a=0;a<Mr.length;a++)zr(Mr[a],r);break;case"source":zr("error",r);break;case"img":case"image":case"link":zr("error",r),zr("load",r);break;case"details":zr("toggle",r);break;case"input":Z(r,i),zr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},zr("invalid",r);break;case"textarea":ae(r,i),zr("invalid",r)}for(var s in ye(n,i),a=null,i)if(i.hasOwnProperty(s)){var u=i[s];"children"===s?"string"==typeof u?r.textContent!==u&&(!0!==i.suppressHydrationWarning&&Xr(r.textContent,u,e),a=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==i.suppressHydrationWarning&&Xr(r.textContent,u,e),a=["children",""+u]):l.hasOwnProperty(s)&&null!=u&&"onScroll"===s&&zr("scroll",r)}switch(n){case"input":H(r),J(r,i,!0);break;case"textarea":H(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Jr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{s=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[pa]=t,e[fa]=r,Fl(e,t,!1,!1),t.stateNode=e;e:{switch(s=be(n,r),n){case"dialog":zr("cancel",e),zr("close",e),a=r;break;case"iframe":case"object":case"embed":zr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Mr.length;a++)zr(Mr[a],e);a=r;break;case"source":zr("error",e),a=r;break;case"img":case"image":case"link":zr("error",e),zr("load",e),a=r;break;case"details":zr("toggle",e),a=r;break;case"input":Z(e,r),a=K(e,r),zr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=O({},r,{value:void 0}),zr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),zr("invalid",e)}for(i in ye(n,a),u=a)if(u.hasOwnProperty(i)){var c=u[i];"style"===i?ge(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===i?"string"==typeof c?("textarea"!==n||""!==c)&&pe(e,c):"number"==typeof c&&pe(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=c&&"onScroll"===i&&zr("scroll",e):null!=c&&b(e,i,c,s))}switch(n){case"input":H(e),J(e,r,!1);break;case"textarea":H(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+$(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return ql(t),null;case 6:if(e&&null!=t.stateNode)Ml(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=ri(ni.current),ri(ei.current),po(t)){if(r=t.stateNode,n=t.memoizedProps,r[pa]=t,(i=r.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Xr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Xr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[pa]=t,t.stateNode=r}return ql(t),null;case 13:if(ka(si),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ao&&null!==ro&&0!=(1&t.mode)&&0==(128&t.flags))fo(),mo(),t.flags|=98560,i=!1;else if(i=po(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(o(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(o(317));i[pa]=t}else mo(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;ql(t),i=!1}else null!==oo&&(lu(oo),oo=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&si.current)?0===Ms&&(Ms=3):gu())),null!==t.updateQueue&&(t.flags|=4),ql(t),null);case 4:return oi(),Rl(e,t),null===e&&Ur(t.stateNode.containerInfo),ql(t),null;case 10:return Eo(t.type._context),ql(t),null;case 19:if(ka(si),null===(i=t.memoizedState))return ql(t),null;if(r=0!=(128&t.flags),null===(s=i.rendering))if(r)Hl(i,!1);else{if(0!==Ms||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(s=ui(e))){for(t.flags|=128,Hl(i,!1),null!==(r=s.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(s=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=s.childLanes,i.lanes=s.lanes,i.child=s.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=s.memoizedProps,i.memoizedState=s.memoizedState,i.updateQueue=s.updateQueue,i.type=s.type,e=s.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Sa(si,1&si.current|2),t.child}e=e.sibling}null!==i.tail&&Ge()>Ws&&(t.flags|=128,r=!0,Hl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ui(s))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Hl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!s.alternate&&!ao)return ql(t),null}else 2*Ge()-i.renderingStartTime>Ws&&1073741824!==n&&(t.flags|=128,r=!0,Hl(i,!1),t.lanes=4194304);i.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=i.last)?n.sibling=s:t.child=s,i.last=s)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Ge(),t.sibling=null,n=si.current,Sa(si,r?1&n|2:1&n),t):(ql(t),null);case 22:case 23:return pu(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Rs)&&(ql(t),6&t.subtreeFlags&&(t.flags|=8192)):ql(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Kl(e,t){switch(to(t),t.tag){case 1:return Fa(t.type)&&Ra(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return oi(),ka(Pa),ka(_a),di(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return li(t),null;case 13:if(ka(si),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));mo()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return ka(si),null;case 4:return oi(),null;case 10:return Eo(t.type._context),null;case 22:case 23:return pu(),null;default:return null}}Fl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Rl=function(){},Ll=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,ri(ei.current);var o,i=null;switch(n){case"input":a=K(e,a),r=K(e,r),i=[];break;case"select":a=O({},a,{value:void 0}),r=O({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ye(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var s=a[c];for(o in s)s.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var u=r[c];if(s=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&u!==s&&(null!=u||null!=s))if("style"===c)if(s){for(o in s)!s.hasOwnProperty(o)||u&&u.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in u)u.hasOwnProperty(o)&&s[o]!==u[o]&&(n||(n={}),n[o]=u[o])}else n||(i||(i=[]),i.push(c,n)),n=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,s=s?s.__html:void 0,null!=u&&s!==u&&(i=i||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(i=i||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&zr("scroll",e),i||s===u||(i=[])):(i=i||[]).push(c,u))}n&&(i=i||[]).push("style",n);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},Ml=function(e,t,n,r){n!==r&&(t.flags|=4)};var Zl=!1,Gl=!1,Xl="function"==typeof WeakSet?WeakSet:Set,Jl=null;function es(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){ku(e,t,n)}else n.current=null}function ts(e,t,n){try{n()}catch(n){ku(e,t,n)}}var ns=!1;function rs(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&ts(t,n,o)}a=a.next}while(a!==r)}}function as(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function os(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function is(e){var t=e.alternate;null!==t&&(e.alternate=null,is(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[pa],delete t[fa],delete t[ha],delete t[ga],delete t[va]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ls(e){return 5===e.tag||3===e.tag||4===e.tag}function ss(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ls(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function us(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(us(e,t,n),e=e.sibling;null!==e;)us(e,t,n),e=e.sibling}function cs(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cs(e,t,n),e=e.sibling;null!==e;)cs(e,t,n),e=e.sibling}var ds=null,ps=!1;function fs(e,t,n){for(n=n.child;null!==n;)ms(e,t,n),n=n.sibling}function ms(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Gl||es(n,t);case 6:var r=ds,a=ps;ds=null,fs(e,t,n),ps=a,null!==(ds=r)&&(ps?(e=ds,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):ds.removeChild(n.stateNode));break;case 18:null!==ds&&(ps?(e=ds,n=n.stateNode,8===e.nodeType?sa(e.parentNode,n):1===e.nodeType&&sa(e,n),Ut(e)):sa(ds,n.stateNode));break;case 4:r=ds,a=ps,ds=n.stateNode.containerInfo,ps=!0,fs(e,t,n),ds=r,ps=a;break;case 0:case 11:case 14:case 15:if(!Gl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,i=o.destroy;o=o.tag,void 0!==i&&(0!=(2&o)||0!=(4&o))&&ts(n,t,i),a=a.next}while(a!==r)}fs(e,t,n);break;case 1:if(!Gl&&(es(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){ku(n,t,e)}fs(e,t,n);break;case 21:fs(e,t,n);break;case 22:1&n.mode?(Gl=(r=Gl)||null!==n.memoizedState,fs(e,t,n),Gl=r):fs(e,t,n);break;default:fs(e,t,n)}}function hs(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xl),t.forEach((function(t){var r=Pu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function gs(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var i=e,l=t,s=l;e:for(;null!==s;){switch(s.tag){case 5:ds=s.stateNode,ps=!1;break e;case 3:case 4:ds=s.stateNode.containerInfo,ps=!0;break e}s=s.return}if(null===ds)throw Error(o(160));ms(i,l,a),ds=null,ps=!1;var u=a.alternate;null!==u&&(u.return=null),a.return=null}catch(e){ku(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)vs(t,e),t=t.sibling}function vs(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gs(t,e),ys(e),4&r){try{rs(3,e,e.return),as(3,e)}catch(t){ku(e,e.return,t)}try{rs(5,e,e.return)}catch(t){ku(e,e.return,t)}}break;case 1:gs(t,e),ys(e),512&r&&null!==n&&es(n,n.return);break;case 5:if(gs(t,e),ys(e),512&r&&null!==n&&es(n,n.return),32&e.flags){var a=e.stateNode;try{pe(a,"")}catch(t){ku(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,s=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===s&&"radio"===i.type&&null!=i.name&&G(a,i),be(s,l);var c=be(s,i);for(l=0;l<u.length;l+=2){var d=u[l],p=u[l+1];"style"===d?ge(a,p):"dangerouslySetInnerHTML"===d?de(a,p):"children"===d?pe(a,p):b(a,d,p,c)}switch(s){case"input":X(a,i);break;case"textarea":oe(a,i);break;case"select":var f=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!i.multiple;var m=i.value;null!=m?ne(a,!!i.multiple,m,!1):f!==!!i.multiple&&(null!=i.defaultValue?ne(a,!!i.multiple,i.defaultValue,!0):ne(a,!!i.multiple,i.multiple?[]:"",!1))}a[fa]=i}catch(t){ku(e,e.return,t)}}break;case 6:if(gs(t,e),ys(e),4&r){if(null===e.stateNode)throw Error(o(162));a=e.stateNode,i=e.memoizedProps;try{a.nodeValue=i}catch(t){ku(e,e.return,t)}}break;case 3:if(gs(t,e),ys(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Ut(t.containerInfo)}catch(t){ku(e,e.return,t)}break;case 4:default:gs(t,e),ys(e);break;case 13:gs(t,e),ys(e),8192&(a=e.child).flags&&(i=null!==a.memoizedState,a.stateNode.isHidden=i,!i||null!==a.alternate&&null!==a.alternate.memoizedState||(Us=Ge())),4&r&&hs(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Gl=(c=Gl)||d,gs(t,e),Gl=c):gs(t,e),ys(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&0!=(1&e.mode))for(Jl=e,d=e.child;null!==d;){for(p=Jl=d;null!==Jl;){switch(m=(f=Jl).child,f.tag){case 0:case 11:case 14:case 15:rs(4,f,f.return);break;case 1:es(f,f.return);var h=f.stateNode;if("function"==typeof h.componentWillUnmount){r=f,n=f.return;try{t=r,h.props=t.memoizedProps,h.state=t.memoizedState,h.componentWillUnmount()}catch(e){ku(r,n,e)}}break;case 5:es(f,f.return);break;case 22:if(null!==f.memoizedState){Cs(p);continue}}null!==m?(m.return=f,Jl=m):Cs(p)}d=d.sibling}e:for(d=null,p=e;;){if(5===p.tag){if(null===d){d=p;try{a=p.stateNode,c?"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none":(s=p.stateNode,l=null!=(u=p.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,s.style.display=he("display",l))}catch(t){ku(e,e.return,t)}}}else if(6===p.tag){if(null===d)try{p.stateNode.nodeValue=c?"":p.memoizedProps}catch(t){ku(e,e.return,t)}}else if((22!==p.tag&&23!==p.tag||null===p.memoizedState||p===e)&&null!==p.child){p.child.return=p,p=p.child;continue}if(p===e)break e;for(;null===p.sibling;){if(null===p.return||p.return===e)break e;d===p&&(d=null),p=p.return}d===p&&(d=null),p.sibling.return=p.return,p=p.sibling}}break;case 19:gs(t,e),ys(e),4&r&&hs(e);case 21:}}function ys(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ls(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(pe(a,""),r.flags&=-33),cs(e,ss(e),a);break;case 3:case 4:var i=r.stateNode.containerInfo;us(e,ss(e),i);break;default:throw Error(o(161))}}catch(t){ku(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bs(e,t,n){Jl=e,xs(e,t,n)}function xs(e,t,n){for(var r=0!=(1&e.mode);null!==Jl;){var a=Jl,o=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||Zl;if(!i){var l=a.alternate,s=null!==l&&null!==l.memoizedState||Gl;l=Zl;var u=Gl;if(Zl=i,(Gl=s)&&!u)for(Jl=a;null!==Jl;)s=(i=Jl).child,22===i.tag&&null!==i.memoizedState?Es(a):null!==s?(s.return=i,Jl=s):Es(a);for(;null!==o;)Jl=o,xs(o,t,n),o=o.sibling;Jl=a,Zl=l,Gl=u}As(e)}else 0!=(8772&a.subtreeFlags)&&null!==o?(o.return=a,Jl=o):As(e)}}function As(e){for(;null!==Jl;){var t=Jl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Gl||as(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Gl)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:vo(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&zo(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}zo(t,l,n)}break;case 5:var s=t.stateNode;if(null===n&&4&t.flags){n=s;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var p=d.dehydrated;null!==p&&Ut(p)}}}break;default:throw Error(o(163))}Gl||512&t.flags&&os(t)}catch(e){ku(t,t.return,e)}}if(t===e){Jl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Jl=n;break}Jl=t.return}}function Cs(e){for(;null!==Jl;){var t=Jl;if(t===e){Jl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Jl=n;break}Jl=t.return}}function Es(e){for(;null!==Jl;){var t=Jl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{as(4,t)}catch(e){ku(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){ku(t,a,e)}}var o=t.return;try{os(t)}catch(e){ku(t,o,e)}break;case 5:var i=t.return;try{os(t)}catch(e){ku(t,i,e)}}}catch(e){ku(t,t.return,e)}if(t===e){Jl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Jl=l;break}Jl=t.return}}var ws,ks=Math.ceil,Ss=x.ReactCurrentDispatcher,Ns=x.ReactCurrentOwner,_s=x.ReactCurrentBatchConfig,Ps=0,Bs=null,Ts=null,Fs=0,Rs=0,Ls=wa(0),Ms=0,Ds=null,Os=0,js=0,zs=0,Vs=null,Is=null,Us=0,Ws=1/0,$s=null,Ys=!1,Hs=null,qs=null,Qs=!1,Ks=null,Zs=0,Gs=0,Xs=null,Js=-1,eu=0;function tu(){return 0!=(6&Ps)?Ge():-1!==Js?Js:Js=Ge()}function nu(e){return 0==(1&e.mode)?1:0!=(2&Ps)&&0!==Fs?Fs&-Fs:null!==go.transition?(0===eu&&(eu=ht()),eu):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Zt(e.type)}function ru(e,t,n,r){if(50<Gs)throw Gs=0,Xs=null,Error(o(185));vt(e,n,r),0!=(2&Ps)&&e===Bs||(e===Bs&&(0==(2&Ps)&&(js|=n),4===Ms&&su(e,Fs)),au(e,r),1===n&&0===Ps&&0==(1&t.mode)&&(Ws=Ge()+500,za&&Ua()))}function au(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var i=31-it(o),l=1<<i,s=a[i];-1===s?0!=(l&n)&&0==(l&r)||(a[i]=ft(l,t)):s<=t&&(e.expiredLanes|=l),o&=~l}}(e,t);var r=pt(e,e===Bs?Fs:0);if(0===r)null!==n&&Qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Qe(n),1===t)0===e.tag?function(e){za=!0,Ia(e)}(uu.bind(null,e)):Ia(uu.bind(null,e)),ia((function(){0==(6&Ps)&&Ua()})),n=null;else{switch(xt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Bu(n,ou.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ou(e,t){if(Js=-1,eu=0,0!=(6&Ps))throw Error(o(327));var n=e.callbackNode;if(Eu()&&e.callbackNode!==n)return null;var r=pt(e,e===Bs?Fs:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=vu(e,r);else{t=r;var a=Ps;Ps|=2;var i=hu();for(Bs===e&&Fs===t||($s=null,Ws=Ge()+500,fu(e,t));;)try{bu();break}catch(t){mu(e,t)}Co(),Ss.current=i,Ps=a,null!==Ts?t=0:(Bs=null,Fs=0,t=Ms)}if(0!==t){if(2===t&&0!==(a=mt(e))&&(r=a,t=iu(e,a)),1===t)throw n=Ds,fu(e,0),su(e,r),au(e,Ge()),n;if(6===t)su(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!lr(o(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)&&(2===(t=vu(e,r))&&0!==(i=mt(e))&&(r=i,t=iu(e,i)),1===t))throw n=Ds,fu(e,0),su(e,r),au(e,Ge()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:Cu(e,Is,$s);break;case 3:if(su(e,r),(130023424&r)===r&&10<(t=Us+500-Ge())){if(0!==pt(e,0))break;if(((a=e.suspendedLanes)&r)!==r){tu(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(Cu.bind(null,e,Is,$s),t);break}Cu(e,Is,$s);break;case 4:if(su(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>a&&(a=l),r&=~i}if(r=a,10<(r=(120>(r=Ge()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*ks(r/1960))-r)){e.timeoutHandle=ra(Cu.bind(null,e,Is,$s),r);break}Cu(e,Is,$s);break;default:throw Error(o(329))}}}return au(e,Ge()),e.callbackNode===n?ou.bind(null,e):null}function iu(e,t){var n=Vs;return e.current.memoizedState.isDehydrated&&(fu(e,t).flags|=256),2!==(e=vu(e,t))&&(t=Is,Is=n,null!==t&&lu(t)),e}function lu(e){null===Is?Is=e:Is.push.apply(Is,e)}function su(e,t){for(t&=~zs,t&=~js,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function uu(e){if(0!=(6&Ps))throw Error(o(327));Eu();var t=pt(e,0);if(0==(1&t))return au(e,Ge()),null;var n=vu(e,t);if(0!==e.tag&&2===n){var r=mt(e);0!==r&&(t=r,n=iu(e,r))}if(1===n)throw n=Ds,fu(e,0),su(e,t),au(e,Ge()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Cu(e,Is,$s),au(e,Ge()),null}function cu(e,t){var n=Ps;Ps|=1;try{return e(t)}finally{0===(Ps=n)&&(Ws=Ge()+500,za&&Ua())}}function du(e){null!==Ks&&0===Ks.tag&&0==(6&Ps)&&Eu();var t=Ps;Ps|=1;var n=_s.transition,r=bt;try{if(_s.transition=null,bt=1,e)return e()}finally{bt=r,_s.transition=n,0==(6&(Ps=t))&&Ua()}}function pu(){Rs=Ls.current,ka(Ls)}function fu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==Ts)for(n=Ts.return;null!==n;){var r=n;switch(to(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ra();break;case 3:oi(),ka(Pa),ka(_a),di();break;case 5:li(r);break;case 4:oi();break;case 13:case 19:ka(si);break;case 10:Eo(r.type._context);break;case 22:case 23:pu()}n=n.return}if(Bs=e,Ts=e=Lu(e.current,null),Fs=Rs=t,Ms=0,Ds=null,zs=js=Os=0,Is=Vs=null,null!==No){for(t=0;t<No.length;t++)if(null!==(r=(n=No[t]).interleaved)){n.interleaved=null;var a=r.next,o=n.pending;if(null!==o){var i=o.next;o.next=a,r.next=i}n.pending=r}No=null}return e}function mu(e,t){for(;;){var n=Ts;try{if(Co(),pi.current=il,yi){for(var r=hi.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}yi=!1}if(mi=0,vi=gi=hi=null,bi=!1,xi=0,Ns.current=null,null===n||null===n.return){Ms=1,Ds=t,Ts=null;break}e:{var i=e,l=n.return,s=n,u=t;if(t=Fs,s.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,d=s,p=d.tag;if(0==(1&d.mode)&&(0===p||11===p||15===p)){var f=d.alternate;f?(d.updateQueue=f.updateQueue,d.memoizedState=f.memoizedState,d.lanes=f.lanes):(d.updateQueue=null,d.memoizedState=null)}var m=vl(l);if(null!==m){m.flags&=-257,yl(m,l,s,0,t),1&m.mode&&gl(i,c,t),u=c;var h=(t=m).updateQueue;if(null===h){var g=new Set;g.add(u),t.updateQueue=g}else h.add(u);break e}if(0==(1&t)){gl(i,c,t),gu();break e}u=Error(o(426))}else if(ao&&1&s.mode){var v=vl(l);if(null!==v){0==(65536&v.flags)&&(v.flags|=256),yl(v,l,s,0,t),ho(cl(u,s));break e}}i=u=cl(u,s),4!==Ms&&(Ms=2),null===Vs?Vs=[i]:Vs.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Oo(i,ml(0,u,t));break e;case 1:s=u;var y=i.type,b=i.stateNode;if(0==(128&i.flags)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===qs||!qs.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,Oo(i,hl(i,s,t));break e}}i=i.return}while(null!==i)}Au(n)}catch(e){t=e,Ts===n&&null!==n&&(Ts=n=n.return);continue}break}}function hu(){var e=Ss.current;return Ss.current=il,null===e?il:e}function gu(){0!==Ms&&3!==Ms&&2!==Ms||(Ms=4),null===Bs||0==(268435455&Os)&&0==(268435455&js)||su(Bs,Fs)}function vu(e,t){var n=Ps;Ps|=2;var r=hu();for(Bs===e&&Fs===t||($s=null,fu(e,t));;)try{yu();break}catch(t){mu(e,t)}if(Co(),Ps=n,Ss.current=r,null!==Ts)throw Error(o(261));return Bs=null,Fs=0,Ms}function yu(){for(;null!==Ts;)xu(Ts)}function bu(){for(;null!==Ts&&!Ke();)xu(Ts)}function xu(e){var t=ws(e.alternate,e,Rs);e.memoizedProps=e.pendingProps,null===t?Au(e):Ts=t,Ns.current=null}function Au(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Ql(n,t,Rs)))return void(Ts=n)}else{if(null!==(n=Kl(n,t)))return n.flags&=32767,void(Ts=n);if(null===e)return Ms=6,void(Ts=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Ts=t);Ts=t=e}while(null!==t);0===Ms&&(Ms=5)}function Cu(e,t,n){var r=bt,a=_s.transition;try{_s.transition=null,bt=1,function(e,t,n,r){do{Eu()}while(null!==Ks);if(0!=(6&Ps))throw Error(o(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-it(n),o=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~o}}(e,i),e===Bs&&(Ts=Bs=null,Fs=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Qs||(Qs=!0,Bu(tt,(function(){return Eu(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=_s.transition,_s.transition=null;var l=bt;bt=1;var s=Ps;Ps|=4,Ns.current=null,function(e,t){if(ea=$t,fr(e=pr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,s=-1,u=-1,c=0,d=0,p=e,f=null;t:for(;;){for(var m;p!==n||0!==a&&3!==p.nodeType||(s=l+a),p!==i||0!==r&&3!==p.nodeType||(u=l+r),3===p.nodeType&&(l+=p.nodeValue.length),null!==(m=p.firstChild);)f=p,p=m;for(;;){if(p===e)break t;if(f===n&&++c===a&&(s=l),f===i&&++d===r&&(u=l),null!==(m=p.nextSibling))break;f=(p=f).parentNode}p=m}n=-1===s||-1===u?null:{start:s,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},$t=!1,Jl=t;null!==Jl;)if(e=(t=Jl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Jl=e;else for(;null!==Jl;){t=Jl;try{var h=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==h){var g=h.memoizedProps,v=h.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?g:vo(t.type,g),v);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var x=t.stateNode.containerInfo;1===x.nodeType?x.textContent="":9===x.nodeType&&x.documentElement&&x.removeChild(x.documentElement);break;default:throw Error(o(163))}}catch(e){ku(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Jl=e;break}Jl=t.return}h=ns,ns=!1}(e,n),vs(n,e),mr(ta),$t=!!ea,ta=ea=null,e.current=n,bs(n,e,a),Ze(),Ps=s,bt=l,_s.transition=i}else e.current=n;if(Qs&&(Qs=!1,Ks=e,Zs=a),0===(i=e.pendingLanes)&&(qs=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(at,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),au(e,Ge()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((a=t[n]).value,{componentStack:a.stack,digest:a.digest});if(Ys)throw Ys=!1,e=Hs,Hs=null,e;0!=(1&Zs)&&0!==e.tag&&Eu(),0!=(1&(i=e.pendingLanes))?e===Xs?Gs++:(Gs=0,Xs=e):Gs=0,Ua()}(e,t,n,r)}finally{_s.transition=a,bt=r}return null}function Eu(){if(null!==Ks){var e=xt(Zs),t=_s.transition,n=bt;try{if(_s.transition=null,bt=16>e?16:e,null===Ks)var r=!1;else{if(e=Ks,Ks=null,Zs=0,0!=(6&Ps))throw Error(o(331));var a=Ps;for(Ps|=4,Jl=e.current;null!==Jl;){var i=Jl,l=i.child;if(0!=(16&Jl.flags)){var s=i.deletions;if(null!==s){for(var u=0;u<s.length;u++){var c=s[u];for(Jl=c;null!==Jl;){var d=Jl;switch(d.tag){case 0:case 11:case 15:rs(8,d,i)}var p=d.child;if(null!==p)p.return=d,Jl=p;else for(;null!==Jl;){var f=(d=Jl).sibling,m=d.return;if(is(d),d===c){Jl=null;break}if(null!==f){f.return=m,Jl=f;break}Jl=m}}}var h=i.alternate;if(null!==h){var g=h.child;if(null!==g){h.child=null;do{var v=g.sibling;g.sibling=null,g=v}while(null!==g)}}Jl=i}}if(0!=(2064&i.subtreeFlags)&&null!==l)l.return=i,Jl=l;else e:for(;null!==Jl;){if(0!=(2048&(i=Jl).flags))switch(i.tag){case 0:case 11:case 15:rs(9,i,i.return)}var y=i.sibling;if(null!==y){y.return=i.return,Jl=y;break e}Jl=i.return}}var b=e.current;for(Jl=b;null!==Jl;){var x=(l=Jl).child;if(0!=(2064&l.subtreeFlags)&&null!==x)x.return=l,Jl=x;else e:for(l=b;null!==Jl;){if(0!=(2048&(s=Jl).flags))try{switch(s.tag){case 0:case 11:case 15:as(9,s)}}catch(e){ku(s,s.return,e)}if(s===l){Jl=null;break e}var A=s.sibling;if(null!==A){A.return=s.return,Jl=A;break e}Jl=s.return}}if(Ps=a,Ua(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{bt=n,_s.transition=t}}return!1}function wu(e,t,n){e=Mo(e,t=ml(0,t=cl(n,t),1),1),t=tu(),null!==e&&(vt(e,1,t),au(e,t))}function ku(e,t,n){if(3===e.tag)wu(e,e,n);else for(;null!==t;){if(3===t.tag){wu(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===qs||!qs.has(r))){t=Mo(t,e=hl(t,e=cl(n,e),1),1),e=tu(),null!==t&&(vt(t,1,e),au(t,e));break}}t=t.return}}function Su(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=tu(),e.pingedLanes|=e.suspendedLanes&n,Bs===e&&(Fs&n)===n&&(4===Ms||3===Ms&&(130023424&Fs)===Fs&&500>Ge()-Us?fu(e,0):zs|=n),au(e,t)}function Nu(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=tu();null!==(e=Bo(e,t))&&(vt(e,t,n),au(e,n))}function _u(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Nu(e,n)}function Pu(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),Nu(e,n)}function Bu(e,t){return qe(e,t)}function Tu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Fu(e,t,n,r){return new Tu(e,t,n,r)}function Ru(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Lu(e,t){var n=e.alternate;return null===n?((n=Fu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Mu(e,t,n,r,a,i){var l=2;if(r=e,"function"==typeof e)Ru(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case E:return Du(n.children,a,i,t);case w:l=8,a|=8;break;case k:return(e=Fu(12,n,t,2|a)).elementType=k,e.lanes=i,e;case P:return(e=Fu(13,n,t,a)).elementType=P,e.lanes=i,e;case B:return(e=Fu(19,n,t,a)).elementType=B,e.lanes=i,e;case R:return Ou(n,a,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case S:l=10;break e;case N:l=9;break e;case _:l=11;break e;case T:l=14;break e;case F:l=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Fu(l,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function Du(e,t,n,r){return(e=Fu(7,e,r,t)).lanes=n,e}function Ou(e,t,n,r){return(e=Fu(22,e,r,t)).elementType=R,e.lanes=n,e.stateNode={isHidden:!1},e}function ju(e,t,n){return(e=Fu(6,e,null,t)).lanes=n,e}function zu(e,t,n){return(t=Fu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Vu(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Iu(e,t,n,r,a,o,i,l,s){return e=new Vu(e,t,n,l,s),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Fu(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Fo(o),e}function Uu(e){if(!e)return Na;e:{if(Ue(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Fa(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Fa(n))return Ma(e,n,t)}return t}function Wu(e,t,n,r,a,o,i,l,s){return(e=Iu(n,r,!0,e,0,o,0,l,s)).context=Uu(null),n=e.current,(o=Lo(r=tu(),a=nu(n))).callback=null!=t?t:null,Mo(n,o,a),e.current.lanes=a,vt(e,a,r),au(e,r),e}function $u(e,t,n,r){var a=t.current,o=tu(),i=nu(a);return n=Uu(n),null===t.context?t.context=n:t.pendingContext=n,(t=Lo(o,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Mo(a,t,i))&&(ru(e,a,i,o),Do(e,a,i)),i}function Yu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Hu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function qu(e,t){Hu(e,t),(e=e.alternate)&&Hu(e,t)}ws=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Pa.current)xl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return xl=!1,function(e,t,n){switch(t.tag){case 3:Bl(t),mo();break;case 5:ii(t);break;case 1:Fa(t.type)&&Da(t);break;case 4:ai(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;Sa(yo,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Sa(si,1&si.current),t.flags|=128,null):0!=(n&t.child.childLanes)?jl(e,t,n):(Sa(si,1&si.current),null!==(e=Yl(e,t,n))?e.sibling:null);Sa(si,1&si.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Wl(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Sa(si,si.current),r)break;return null;case 22:case 23:return t.lanes=0,kl(e,t,n)}return Yl(e,t,n)}(e,t,n);xl=0!=(131072&e.flags)}else xl=!1,ao&&0!=(1048576&t.flags)&&Ja(t,Ha,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;$l(e,t),e=t.pendingProps;var a=Ta(t,_a.current);ko(t,n),a=wi(null,t,r,e,a,n);var i=ki();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Fa(r)?(i=!0,Da(t)):i=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Fo(t),a.updater=Uo,t.stateNode=a,a._reactInternals=t,Ho(t,r,e,n),t=Pl(null,t,r,!0,i,n)):(t.tag=0,ao&&i&&eo(t),Al(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch($l(e,t),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return Ru(e)?1:0;if(null!=e){if((e=e.$$typeof)===_)return 11;if(e===T)return 14}return 2}(r),e=vo(r,e),a){case 0:t=Nl(null,t,r,e,n);break e;case 1:t=_l(null,t,r,e,n);break e;case 11:t=Cl(null,t,r,e,n);break e;case 14:t=El(null,t,r,vo(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,Nl(e,t,r,a=t.elementType===r?a:vo(r,a),n);case 1:return r=t.type,a=t.pendingProps,_l(e,t,r,a=t.elementType===r?a:vo(r,a),n);case 3:e:{if(Bl(t),null===e)throw Error(o(387));r=t.pendingProps,a=(i=t.memoizedState).element,Ro(e,t),jo(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Tl(e,t,r,n,a=cl(Error(o(423)),t));break e}if(r!==a){t=Tl(e,t,r,n,a=cl(Error(o(424)),t));break e}for(ro=ua(t.stateNode.containerInfo.firstChild),no=t,ao=!0,oo=null,n=Xo(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(mo(),r===a){t=Yl(e,t,n);break e}Al(e,t,r,n)}t=t.child}return t;case 5:return ii(t),null===e&&uo(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,l=a.children,na(r,a)?l=null:null!==i&&na(r,i)&&(t.flags|=32),Sl(e,t),Al(e,t,l,n),t.child;case 6:return null===e&&uo(t),null;case 13:return jl(e,t,n);case 4:return ai(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Go(t,null,r,n):Al(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Cl(e,t,r,a=t.elementType===r?a:vo(r,a),n);case 7:return Al(e,t,t.pendingProps,n),t.child;case 8:case 12:return Al(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,i=t.memoizedProps,l=a.value,Sa(yo,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===a.children&&!Pa.current){t=Yl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var s=i.dependencies;if(null!==s){l=i.child;for(var u=s.firstContext;null!==u;){if(u.context===r){if(1===i.tag){(u=Lo(-1,n&-n)).tag=2;var c=i.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?u.next=u:(u.next=d.next,d.next=u),c.pending=u}}i.lanes|=n,null!==(u=i.alternate)&&(u.lanes|=n),wo(i.return,n,t),s.lanes|=n;break}u=u.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(o(341));l.lanes|=n,null!==(s=l.alternate)&&(s.lanes|=n),wo(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}Al(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,ko(t,n),r=r(a=So(a)),t.flags|=1,Al(e,t,r,n),t.child;case 14:return a=vo(r=t.type,t.pendingProps),El(e,t,r,a=vo(r.type,a),n);case 15:return wl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:vo(r,a),$l(e,t),t.tag=1,Fa(r)?(e=!0,Da(t)):e=!1,ko(t,n),$o(t,r,a),Ho(t,r,a,n),Pl(null,t,r,!0,e,n);case 19:return Wl(e,t,n);case 22:return kl(e,t,n)}throw Error(o(156,t.tag))};var Qu="function"==typeof reportError?reportError:function(e){console.error(e)};function Ku(e){this._internalRoot=e}function Zu(e){this._internalRoot=e}function Gu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Xu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ju(){}function ec(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o;if("function"==typeof a){var l=a;a=function(){var e=Yu(i);l.call(e)}}$u(t,i,e,a)}else i=function(e,t,n,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=Yu(i);o.call(e)}}var i=Wu(t,r,e,0,null,!1,0,"",Ju);return e._reactRootContainer=i,e[ma]=i.current,Ur(8===e.nodeType?e.parentNode:e),du(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var l=r;r=function(){var e=Yu(s);l.call(e)}}var s=Iu(e,0,!1,null,0,!1,0,"",Ju);return e._reactRootContainer=s,e[ma]=s.current,Ur(8===e.nodeType?e.parentNode:e),du((function(){$u(t,s,n,r)})),s}(n,t,e,a,r);return Yu(i)}Zu.prototype.render=Ku.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));$u(e,t,null,null)},Zu.prototype.unmount=Ku.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;du((function(){$u(null,e,null,null)})),t[ma]=null}},Zu.prototype.unstable_scheduleHydration=function(e){if(e){var t=wt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Rt.length&&0!==t&&t<Rt[n].priority;n++);Rt.splice(n,0,e),0===n&&Ot(e)}},At=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(yt(t,1|n),au(t,Ge()),0==(6&Ps)&&(Ws=Ge()+500,Ua()))}break;case 13:du((function(){var t=Bo(e,1);if(null!==t){var n=tu();ru(t,e,1,n)}})),qu(e,1)}},Ct=function(e){if(13===e.tag){var t=Bo(e,134217728);null!==t&&ru(t,e,134217728,tu()),qu(e,134217728)}},Et=function(e){if(13===e.tag){var t=nu(e),n=Bo(e,t);null!==n&&ru(n,e,t,tu()),qu(e,t)}},wt=function(){return bt},kt=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Ce=function(e,t,n){switch(t){case"input":if(X(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=Aa(r);if(!a)throw Error(o(90));q(r),X(r,a)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},_e=cu,Pe=du;var tc={usingClientEntryPoint:!1,Events:[ba,xa,Aa,Se,Ne,cu]},nc={findFiberByHostInstance:ya,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:x.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ye(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ac=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ac.isDisabled&&ac.supportsFiber)try{at=ac.inject(rc),ot=ac}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Gu(t))throw Error(o(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:C,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Gu(e))throw Error(o(299));var n=!1,r="",a=Qu;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Iu(e,1,!1,null,0,n,0,r,a),e[ma]=t.current,Ur(8===e.nodeType?e.parentNode:e),new Ku(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=Ye(t))?null:e.stateNode},t.flushSync=function(e){return du(e)},t.hydrate=function(e,t,n){if(!Xu(t))throw Error(o(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Gu(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,a=!1,i="",l=Qu;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Wu(t,null,e,1,null!=n?n:null,a,0,i,l),e[ma]=t.current,Ur(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Zu(t)},t.render=function(e,t,n){if(!Xu(t))throw Error(o(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Xu(e))throw Error(o(40));return!!e._reactRootContainer&&(du((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[ma]=null}))})),!0)},t.unstable_batchedUpdates=cu,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Xu(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{var r=n(935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},935:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},408:(e,t)=>{var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),s=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),f=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,g={};function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var x=b.prototype=new y;x.constructor=b,h(x,v.prototype),x.isPureReactComponent=!0;var A=Array.isArray,C=Object.prototype.hasOwnProperty,E={current:null},w={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,r){var a,o={},i=null,l=null;if(null!=t)for(a in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)C.call(t,a)&&!w.hasOwnProperty(a)&&(o[a]=t[a]);var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];o.children=u}if(e&&e.defaultProps)for(a in s=e.defaultProps)void 0===o[a]&&(o[a]=s[a]);return{$$typeof:n,type:e,key:i,ref:l,props:o,_owner:E.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var N=/\/+/g;function _(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,a,o,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case n:case r:s=!0}}if(s)return i=i(s=e),e=""===o?"."+_(s,0):o,A(i)?(a="",null!=e&&(a=e.replace(N,"$&/")+"/"),P(i,t,a,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||s&&s.key===i.key?"":(""+i.key).replace(N,"$&/")+"/")+e)),t.push(i)),1;if(s=0,o=""===o?".":o+":",A(e))for(var u=0;u<e.length;u++){var c=o+_(l=e[u],u);s+=P(l,t,a,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(l=e.next()).done;)s+=P(l=l.value,t,a,c=o+_(l,u++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function B(e,t,n){if(null==e)return e;var r=[],a=0;return P(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function T(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var F={current:null},R={transition:null},L={ReactCurrentDispatcher:F,ReactCurrentBatchConfig:R,ReactCurrentOwner:E};t.Children={map:B,forEach:function(e,t,n){B(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return B(e,(function(){t++})),t},toArray:function(e){return B(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=a,t.Profiler=i,t.PureComponent=b,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=h({},e.props),o=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=E.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(u in t)C.call(t,u)&&!w.hasOwnProperty(u)&&(a[u]=void 0===t[u]&&void 0!==s?s[u]:t[u])}var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){s=Array(u);for(var c=0;c<u;c++)s[c]=arguments[c+2];a.children=s}return{$$typeof:n,type:e.type,key:o,ref:i,props:a,_owner:l}},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:p,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=R.transition;R.transition={};try{e()}finally{R.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return F.current.useCallback(e,t)},t.useContext=function(e){return F.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return F.current.useDeferredValue(e)},t.useEffect=function(e,t){return F.current.useEffect(e,t)},t.useId=function(){return F.current.useId()},t.useImperativeHandle=function(e,t,n){return F.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return F.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return F.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return F.current.useMemo(e,t)},t.useReducer=function(e,t,n){return F.current.useReducer(e,t,n)},t.useRef=function(e){return F.current.useRef(e)},t.useState=function(e){return F.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return F.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return F.current.useTransition()},t.version="18.2.0"},294:(e,t,n)=>{e.exports=n(408)},53:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var l=2*(r+1)-1,s=e[l],u=l+1,c=e[u];if(0>o(s,n))u<a&&0>o(c,s)?(e[r]=c,e[u]=n,r=u):(e[r]=s,e[l]=n,r=l);else{if(!(u<a&&0>o(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}var u=[],c=[],d=1,p=null,f=3,m=!1,h=!1,g=!1,v="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function x(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function A(e){if(g=!1,x(e),!h)if(null!==r(u))h=!0,R(C);else{var t=r(c);null!==t&&L(A,t.startTime-e)}}function C(e,n){h=!1,g&&(g=!1,y(S),S=-1),m=!0;var o=f;try{for(x(n),p=r(u);null!==p&&(!(p.expirationTime>n)||e&&!P());){var i=p.callback;if("function"==typeof i){p.callback=null,f=p.priorityLevel;var l=i(p.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?p.callback=l:p===r(u)&&a(u),x(n)}else a(u);p=r(u)}if(null!==p)var s=!0;else{var d=r(c);null!==d&&L(A,d.startTime-n),s=!1}return s}finally{p=null,f=o,m=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var E,w=!1,k=null,S=-1,N=5,_=-1;function P(){return!(t.unstable_now()-_<N)}function B(){if(null!==k){var e=t.unstable_now();_=e;var n=!0;try{n=k(!0,e)}finally{n?E():(w=!1,k=null)}}else w=!1}if("function"==typeof b)E=function(){b(B)};else if("undefined"!=typeof MessageChannel){var T=new MessageChannel,F=T.port2;T.port1.onmessage=B,E=function(){F.postMessage(null)}}else E=function(){v(B,0)};function R(e){k=e,w||(w=!0,E())}function L(e,n){S=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){h||m||(h=!0,R(C))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):N=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return f},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(f){case 1:case 2:case 3:var t=3;break;default:t=f}var n=f;f=t;try{return e()}finally{f=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=f;f=e;try{return t()}finally{f=n}},t.unstable_scheduleCallback=function(e,a,o){var i=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:o,expirationTime:l=o+l,sortIndex:-1},o>i?(e.sortIndex=o,n(c,e),null===r(u)&&e===r(c)&&(g?(y(S),S=-1):g=!0,L(A,o-i))):(e.sortIndex=l,n(u,e),h||m||(h=!0,R(C))),e},t.unstable_shouldYield=P,t.unstable_wrapCallback=function(e){var t=f;return function(){var n=f;f=t;try{return e.apply(this,arguments)}finally{f=n}}}},840:(e,t,n)=>{e.exports=n(53)},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],l=0;l<e.length;l++){var s=e[l],u=r.base?s[0]+r.base:s[0],c=o[u]||0,d="".concat(u," ").concat(c);o[u]=c+1;var p=n(d),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(f);else{var m=a(f,r);r.byIndex=l,t.splice(l,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var l=n(o[i]);t[l].references--}for(var s=r(e,a),u=0;u<o.length;u++){var c=n(o[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=s}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},__webpack_module_cache__={},leafPrototypes,getProto;function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={id:e,exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(t,{a:t}),t},getProto=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,__webpack_require__.t=function(e,t){if(1&t&&(e=this(e)),8&t)return e;if("object"==typeof e&&e){if(4&t&&e.__esModule)return e;if(16&t&&"function"==typeof e.then)return e}var n=Object.create(null);__webpack_require__.r(n);var r={};leafPrototypes=leafPrototypes||[null,getProto({}),getProto([]),getProto(getProto)];for(var a=2&t&&e;"object"==typeof a&&!~leafPrototypes.indexOf(a);a=getProto(a))Object.getOwnPropertyNames(a).forEach((t=>r[t]=()=>e[t]));return r.default=()=>e,__webpack_require__.d(n,r),n},__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},__webpack_require__.nc=void 0;var __webpack_exports__={};(()=>{var e,t=__webpack_require__(294),n=__webpack_require__.t(t,2),r=__webpack_require__(745),a=__webpack_require__(379),o=__webpack_require__.n(a),i=__webpack_require__(795),l=__webpack_require__.n(i),s=__webpack_require__(569),u=__webpack_require__.n(s),c=__webpack_require__(565),d=__webpack_require__.n(c),p=__webpack_require__(216),f=__webpack_require__.n(p),m=__webpack_require__(589),h=__webpack_require__.n(m),g=__webpack_require__(528),v={};function y(){return y=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},y.apply(this,arguments)}v.styleTagTransform=h(),v.setAttributes=d(),v.insert=u().bind(null,"head"),v.domAPI=l(),v.insertStyleElement=f(),o()(g.Z,v),g.Z&&g.Z.locals&&g.Z.locals,function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));const b="popstate";function x(e,t){if(!1===e||null==e)throw new Error(t)}function A(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function C(e,t){return{usr:e.state,key:e.key,idx:t}}function E(e,t,n,r){return void 0===n&&(n=null),y({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?k(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function w(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function k(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var S;function N(e,t,n){void 0===n&&(n="/");let r=I(("string"==typeof t?k(t):t).pathname||"/",n);if(null==r)return null;let a=_(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(a);let o=null;for(let e=0;null==o&&e<a.length;++e)o=j(a[e],V(r));return o}function _(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let a=(e,a,o)=>{let i={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};i.relativePath.startsWith("/")&&(x(i.relativePath.startsWith(r),'Absolute route path "'+i.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(r.length));let l=Y([r,i.relativePath]),s=n.concat(i);e.children&&e.children.length>0&&(x(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),_(e.children,t,s,l)),(null!=e.path||e.index)&&t.push({path:l,score:O(l,e.index),routesMeta:s})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of P(e.path))a(e,t,n);else a(e,t)})),t}function P(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,a=n.endsWith("?"),o=n.replace(/\?$/,"");if(0===r.length)return a?[o,""]:[o];let i=P(r.join("/")),l=[];return l.push(...i.map((e=>""===e?o:[o,e].join("/")))),a&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(S||(S={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const B=/^:\w+$/,T=3,F=2,R=1,L=10,M=-2,D=e=>"*"===e;function O(e,t){let n=e.split("/"),r=n.length;return n.some(D)&&(r+=M),t&&(r+=F),n.filter((e=>!D(e))).reduce(((e,t)=>e+(B.test(t)?T:""===t?R:L)),r)}function j(e,t){let{routesMeta:n}=e,r={},a="/",o=[];for(let e=0;e<n.length;++e){let i=n[e],l=e===n.length-1,s="/"===a?t:t.slice(a.length)||"/",u=z({path:i.relativePath,caseSensitive:i.caseSensitive,end:l},s);if(!u)return null;Object.assign(r,u.params);let c=i.route;o.push({params:r,pathname:Y([a,u.pathname]),pathnameBase:H(Y([a,u.pathnameBase])),route:c}),"/"!==u.pathnameBase&&(a=Y([a,u.pathnameBase]))}return o}function z(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),A("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,((e,t)=>(r.push(t),"/([^\\/]+)")));return e.endsWith("*")?(r.push("*"),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let o=a[0],i=o.replace(/(.)\/+$/,"$1"),l=a.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=l[n]||"";i=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return A(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(l[n]||"",t),e}),{}),pathname:o,pathnameBase:i,pattern:e}}function V(e){try{return decodeURI(e)}catch(t){return A(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function I(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function U(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function W(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function $(e,t,n,r){let a;void 0===r&&(r=!1),"string"==typeof e?a=k(e):(a=y({},e),x(!a.pathname||!a.pathname.includes("?"),U("?","pathname","search",a)),x(!a.pathname||!a.pathname.includes("#"),U("#","pathname","hash",a)),x(!a.search||!a.search.includes("#"),U("#","search","hash",a)));let o,i=""===e||""===a.pathname,l=i?"/":a.pathname;if(r||null==l)o=n;else{let e=t.length-1;if(l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}o=e>=0?t[e]:"/"}let s=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?k(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:q(r),hash:Q(a)}}(a,o),u=l&&"/"!==l&&l.endsWith("/"),c=(i||"."===l)&&n.endsWith("/");return s.pathname.endsWith("/")||!u&&!c||(s.pathname+="/"),s}const Y=e=>e.join("/").replace(/\/\/+/g,"/"),H=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),q=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",Q=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const K=["post","put","patch","delete"],Z=(new Set(K),["get",...K]);function G(){return G=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},G.apply(this,arguments)}new Set(Z),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const X=t.createContext(null),J=t.createContext(null),ee=t.createContext(null),te=t.createContext(null),ne=t.createContext({outlet:null,matches:[],isDataRoute:!1}),re=t.createContext(null);function ae(){return null!=t.useContext(te)}function oe(){return ae()||x(!1),t.useContext(te).location}function ie(e){t.useContext(ee).static||t.useLayoutEffect(e)}function le(){let{isDataRoute:e}=t.useContext(ne);return e?function(){let{router:e}=function(e){let n=t.useContext(X);return n||x(!1),n}(me.UseNavigateStable),n=ge(he.UseNavigateStable),r=t.useRef(!1);ie((()=>{r.current=!0}));let a=t.useCallback((function(t,a){void 0===a&&(a={}),r.current&&("number"==typeof t?e.navigate(t):e.navigate(t,G({fromRouteId:n},a)))}),[e,n]);return a}():function(){ae()||x(!1);let e=t.useContext(X),{basename:n,navigator:r}=t.useContext(ee),{matches:a}=t.useContext(ne),{pathname:o}=oe(),i=JSON.stringify(W(a).map((e=>e.pathnameBase))),l=t.useRef(!1);ie((()=>{l.current=!0}));let s=t.useCallback((function(t,a){if(void 0===a&&(a={}),!l.current)return;if("number"==typeof t)return void r.go(t);let s=$(t,JSON.parse(i),o,"path"===a.relative);null==e&&"/"!==n&&(s.pathname="/"===s.pathname?n:Y([n,s.pathname])),(a.replace?r.replace:r.push)(s,a.state,a)}),[n,r,i,o,e]);return s}()}function se(e,n){let{relative:r}=void 0===n?{}:n,{matches:a}=t.useContext(ne),{pathname:o}=oe(),i=JSON.stringify(W(a).map((e=>e.pathnameBase)));return t.useMemo((()=>$(e,JSON.parse(i),o,"path"===r)),[e,i,o,r])}function ue(n,r,a){ae()||x(!1);let{navigator:o}=t.useContext(ee),{matches:i}=t.useContext(ne),l=i[i.length-1],s=l?l.params:{},u=(l&&l.pathname,l?l.pathnameBase:"/");l&&l.route;let c,d=oe();if(r){var p;let e="string"==typeof r?k(r):r;"/"===u||(null==(p=e.pathname)?void 0:p.startsWith(u))||x(!1),c=e}else c=d;let f=c.pathname||"/",m=N(n,{pathname:"/"===u?f:f.slice(u.length)||"/"}),h=function(e,n,r){var a;if(void 0===n&&(n=[]),void 0===r&&(r=null),null==e){var o;if(null==(o=r)||!o.errors)return null;e=r.matches}let i=e,l=null==(a=r)?void 0:a.errors;if(null!=l){let e=i.findIndex((e=>e.route.id&&(null==l?void 0:l[e.route.id])));e>=0||x(!1),i=i.slice(0,Math.min(i.length,e+1))}return i.reduceRight(((e,a,o)=>{let s=a.route.id?null==l?void 0:l[a.route.id]:null,u=null;r&&(u=a.route.errorElement||de);let c=n.concat(i.slice(0,o+1)),d=()=>{let n;return n=s?u:a.route.Component?t.createElement(a.route.Component,null):a.route.element?a.route.element:e,t.createElement(fe,{match:a,routeContext:{outlet:e,matches:c,isDataRoute:null!=r},children:n})};return r&&(a.route.ErrorBoundary||a.route.errorElement||0===o)?t.createElement(pe,{location:r.location,revalidation:r.revalidation,component:u,error:s,children:d(),routeContext:{outlet:null,matches:c,isDataRoute:!0}}):d()}),null)}(m&&m.map((e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:Y([u,o.encodeLocation?o.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?u:Y([u,o.encodeLocation?o.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),i,a);return r&&h?t.createElement(te.Provider,{value:{location:G({pathname:"/",search:"",hash:"",state:null,key:"default"},c),navigationType:e.Pop}},h):h}function ce(){let e=function(){var e;let n=t.useContext(re),r=function(e){let n=t.useContext(J);return n||x(!1),n}(he.UseRouteError),a=ge(he.UseRouteError);return n||(null==(e=r.errors)?void 0:e[a])}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,a={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:a},r):null,null)}const de=t.createElement(ce,null);class pe extends t.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:e.error||t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?t.createElement(ne.Provider,{value:this.props.routeContext},t.createElement(re.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function fe(e){let{routeContext:n,match:r,children:a}=e,o=t.useContext(X);return o&&o.static&&o.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(o.staticContext._deepestRenderedBoundaryId=r.route.id),t.createElement(ne.Provider,{value:n},a)}var me=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(me||{}),he=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(he||{});function ge(e){let n=function(e){let n=t.useContext(ne);return n||x(!1),n}(),r=n.matches[n.matches.length-1];return r.route.id||x(!1),r.route.id}function ve(e){x(!1)}function ye(n){let{basename:r="/",children:a=null,location:o,navigationType:i=e.Pop,navigator:l,static:s=!1}=n;ae()&&x(!1);let u=r.replace(/^\/*/,"/"),c=t.useMemo((()=>({basename:u,navigator:l,static:s})),[u,l,s]);"string"==typeof o&&(o=k(o));let{pathname:d="/",search:p="",hash:f="",state:m=null,key:h="default"}=o,g=t.useMemo((()=>{let e=I(d,u);return null==e?null:{location:{pathname:e,search:p,hash:f,state:m,key:h},navigationType:i}}),[u,d,p,f,m,h,i]);return null==g?null:t.createElement(ee.Provider,{value:c},t.createElement(te.Provider,{children:a,value:g}))}function be(e){let{children:t,location:n}=e;return ue(xe(t),n)}function xe(e,n){void 0===n&&(n=[]);let r=[];return t.Children.forEach(e,((e,a)=>{if(!t.isValidElement(e))return;let o=[...n,a];if(e.type===t.Fragment)return void r.push.apply(r,xe(e.props.children,o));e.type!==ve&&x(!1),e.props.index&&e.props.children&&x(!1);let i={id:e.props.id||o.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(i.children=xe(e.props.children,o)),r.push(i)})),r}function Ae(){return Ae=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ae.apply(this,arguments)}function Ce(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}n.startTransition,new Promise((()=>{})),t.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const Ee=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset"],we=["aria-current","caseSensitive","className","end","style","to","children"],ke=n.startTransition;function Se(n){let{basename:r,children:a,future:o,window:i}=n,l=t.useRef();null==l.current&&(l.current=function(t){return void 0===t&&(t={}),function(t,n,r,a){void 0===a&&(a={});let{window:o=document.defaultView,v5Compat:i=!1}=a,l=o.history,s=e.Pop,u=null,c=d();function d(){return(l.state||{idx:null}).idx}function p(){s=e.Pop;let t=d(),n=null==t?null:t-c;c=t,u&&u({action:s,location:m.location,delta:n})}function f(e){let t="null"!==o.location.origin?o.location.origin:o.location.href,n="string"==typeof e?e:w(e);return x(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==c&&(c=0,l.replaceState(y({},l.state,{idx:c}),""));let m={get action(){return s},get location(){return t(o,l)},listen(e){if(u)throw new Error("A history only accepts one active listener");return o.addEventListener(b,p),u=e,()=>{o.removeEventListener(b,p),u=null}},createHref:e=>n(o,e),createURL:f,encodeLocation(e){let t=f(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(t,n){s=e.Push;let a=E(m.location,t,n);r&&r(a,t),c=d()+1;let p=C(a,c),f=m.createHref(a);try{l.pushState(p,"",f)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;o.location.assign(f)}i&&u&&u({action:s,location:m.location,delta:1})},replace:function(t,n){s=e.Replace;let a=E(m.location,t,n);r&&r(a,t),c=d();let o=C(a,c),p=m.createHref(a);l.replaceState(o,"",p),i&&u&&u({action:s,location:m.location,delta:0})},go:e=>l.go(e)};return m}((function(e,t){let{pathname:n="/",search:r="",hash:a=""}=k(e.location.hash.substr(1));return n.startsWith("/")||n.startsWith(".")||(n="/"+n),E("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),r="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");r=-1===n?t:t.slice(0,n)}return r+"#"+("string"==typeof t?t:w(t))}),(function(e,t){A("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),t)}({window:i,v5Compat:!0}));let s=l.current,[u,c]=t.useState({action:s.action,location:s.location}),{v7_startTransition:d}=o||{},p=t.useCallback((e=>{d&&ke?ke((()=>c(e))):c(e)}),[c,d]);return t.useLayoutEffect((()=>s.listen(p)),[s,p]),t.createElement(ye,{basename:r,children:a,location:u.location,navigationType:u.action,navigator:s})}const Ne="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,_e=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Pe=t.forwardRef((function(e,n){let r,{onClick:a,relative:o,reloadDocument:i,replace:l,state:s,target:u,to:c,preventScrollReset:d}=e,p=Ce(e,Ee),{basename:f}=t.useContext(ee),m=!1;if("string"==typeof c&&_e.test(c)&&(r=c,Ne))try{let e=new URL(window.location.href),t=c.startsWith("//")?new URL(e.protocol+c):new URL(c),n=I(t.pathname,f);t.origin===e.origin&&null!=n?c=n+t.search+t.hash:m=!0}catch(e){}let h=function(e,n){let{relative:r}=void 0===n?{}:n;ae()||x(!1);let{basename:a,navigator:o}=t.useContext(ee),{hash:i,pathname:l,search:s}=se(e,{relative:r}),u=l;return"/"!==a&&(u="/"===l?a:Y([a,l])),o.createHref({pathname:u,search:s,hash:i})}(c,{relative:o}),g=function(e,n){let{target:r,replace:a,state:o,preventScrollReset:i,relative:l}=void 0===n?{}:n,s=le(),u=oe(),c=se(e,{relative:l});return t.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==a?a:w(u)===w(c);s(e,{replace:n,state:o,preventScrollReset:i,relative:l})}}),[u,s,c,a,o,r,e,i,l])}(c,{replace:l,state:s,target:u,preventScrollReset:d,relative:o});return t.createElement("a",Ae({},p,{href:r||h,onClick:m||i?a:function(e){a&&a(e),e.defaultPrevented||g(e)},ref:n,target:u}))})),Be=t.forwardRef((function(e,n){let{"aria-current":r="page",caseSensitive:a=!1,className:o="",end:i=!1,style:l,to:s,children:u}=e,c=Ce(e,we),d=se(s,{relative:c.relative}),p=oe(),f=t.useContext(J),{navigator:m}=t.useContext(ee),h=m.encodeLocation?m.encodeLocation(d).pathname:d.pathname,g=p.pathname,v=f&&f.navigation&&f.navigation.location?f.navigation.location.pathname:null;a||(g=g.toLowerCase(),v=v?v.toLowerCase():null,h=h.toLowerCase());let y,b=g===h||!i&&g.startsWith(h)&&"/"===g.charAt(h.length),x=null!=v&&(v===h||!i&&v.startsWith(h)&&"/"===v.charAt(h.length)),A=b?r:void 0;y="function"==typeof o?o({isActive:b,isPending:x}):[o,b?"active":null,x?"pending":null].filter(Boolean).join(" ");let C="function"==typeof l?l({isActive:b,isPending:x}):l;return t.createElement(Pe,Ae({},c,{"aria-current":A,className:y,ref:n,style:C,to:s}),"function"==typeof u?u({isActive:b,isPending:x}):u)}));var Te,Fe;function Re(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Le(){var e,n,r=(e=(0,t.useState)(!1),n=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],s=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,a=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw a}}return l}}(e,n)||function(e,t){if(e){if("string"==typeof e)return Re(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Re(e,t):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=r[0],o=r[1];return(0,t.useEffect)((function(){var e=function(){window.pageYOffset>300?o(!0):o(!1)};return window.addEventListener("scroll",e),function(){window.removeEventListener("scroll",e)}}),[]),t.createElement("div",null,a&&t.createElement("span",null,t.createElement("div",{onClick:function(){window.scrollTo({top:0,behavior:"smooth"})},className:"back-to-top"},t.createElement("div",{className:"arrowup"},"^"))))}function Me(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],s=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,a=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return De(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?De(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function De(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher"})(Te||(Te={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(Fe||(Fe={}));const Oe=function(){var e=Me((0,t.useState)(""),2),n=e[0],r=e[1],a=Me((0,t.useState)(""),2),o=a[0],i=a[1],l=Me((0,t.useState)(""),2),s=l[0],u=l[1],c=Me((0,t.useState)(""),2),d=c[0],p=c[1],f=Me((0,t.useState)(""),2),m=f[0],h=f[1],g=Me((0,t.useState)(""),2),v=g[0],y=g[1],b=Me((0,t.useState)(""),2),x=b[0],A=b[1],C=Me((0,t.useState)(""),2),E=C[0],w=C[1],k=Me((0,t.useState)(""),2),S=k[0],N=k[1],_=Me((0,t.useState)(""),2),P=_[0],B=_[1],T=Me((0,t.useState)(""),2),F=T[0],R=T[1],L=Me((0,t.useState)(""),2),M=L[0],D=L[1],O=Me((0,t.useState)(""),2),j=O[0],z=O[1],V=Me((0,t.useState)(""),2),I=V[0],U=V[1],W=Me((0,t.useState)(""),2),$=W[0],Y=W[1],H=Me((0,t.useState)(""),2),q=H[0],Q=H[1],K=Me((0,t.useState)(""),2),Z=K[0],G=K[1],X=Me((0,t.useState)(""),2),J=X[0],ee=X[1],te=Me((0,t.useState)(""),2),ne=te[0],re=te[1],ae=Me((0,t.useState)(""),2),oe=ae[0],ie=ae[1],se=Me((0,t.useState)(""),2),ue=se[0],ce=se[1],de=Me((0,t.useState)(""),2),pe=de[0],fe=de[1],me=Me((0,t.useState)(""),2),he=me[0],ge=me[1],ve=Me((0,t.useState)(""),2),ye=ve[0],be=ve[1],xe=Me((0,t.useState)(""),2),Ae=xe[0],Ce=xe[1],Ee=Me((0,t.useState)(""),2),we=Ee[0],ke=Ee[1],Se=Me((0,t.useState)(""),2),Ne=Se[0],_e=Se[1],Pe=Me((0,t.useState)(""),2),Be=Pe[0],Te=Pe[1],Fe=Me((0,t.useState)(""),2),Re=Fe[0],De=Fe[1],Oe=Me((0,t.useState)(""),2),je=Oe[0],ze=Oe[1],Ve=Me((0,t.useState)(""),2),Ie=Ve[0],Ue=Ve[1],We=Me((0,t.useState)(""),2),$e=We[0],Ye=We[1],He=Me((0,t.useState)(""),2),qe=He[0],Qe=He[1],Ke=Me((0,t.useState)(""),2),Ze=Ke[0],Ge=Ke[1],Xe=Me((0,t.useState)(""),2),Je=Xe[0],et=Xe[1],tt=Me((0,t.useState)(""),2),nt=tt[0],rt=tt[1],at=Me((0,t.useState)(""),2),ot=at[0],it=at[1],lt=Me((0,t.useState)(""),2),st=lt[0],ut=lt[1],ct=Me((0,t.useState)(""),2),dt=ct[0],pt=ct[1],ft=Me((0,t.useState)(""),2),mt=ft[0],ht=ft[1],gt=Me((0,t.useState)(""),2),vt=gt[0],yt=gt[1],bt=Me((0,t.useState)(""),2),xt=bt[0],At=bt[1],Ct=Me((0,t.useState)(""),2),Et=Ct[0],wt=Ct[1],kt=Me((0,t.useState)(""),2),St=kt[0],Nt=kt[1],_t=Me((0,t.useState)(""),2),Pt=_t[0],Bt=_t[1],Tt=Me((0,t.useState)(""),2),Ft=Tt[0],Rt=Tt[1],Lt=Me((0,t.useState)(""),2),Mt=Lt[0],Dt=Lt[1],Ot=Me((0,t.useState)(""),2),jt=Ot[0],zt=Ot[1],Vt=Me((0,t.useState)(""),2),It=Vt[0],Ut=Vt[1],Wt=Me((0,t.useState)(""),2),$t=Wt[0],Yt=Wt[1];return le(),t.createElement(t.Fragment,null,t.createElement("table",{className:"hrana"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,"Hrana"),t.createElement("th",null,"g ml"),t.createElement("th",null,"Protein"),t.createElement("th",null,"UH"),t.createElement("th",null,"Mast"),t.createElement("th",null,"Kalorije"))),t.createElement("tbody",null,t.createElement("tr",{className:"hidrati"},t.createElement("td",{className:"naslov"},"Pirinač"),t.createElement("td",null,t.createElement("input",{name:"value1",type:"number",value:n,onChange:function(e){r(e.target.value)}})),t.createElement("td",{className:"protein"},(.076*n).toFixed(1)),t.createElement("td",{className:"ugHid"},(.78*n).toFixed(1)),t.createElement("td",{className:"mast"}),t.createElement("td",{className:"protein"},(3.51*n).toFixed(1))),t.createElement("tr",{className:"hidrati"},t.createElement("td",{className:"naslov"},"Ovsene pahuljice"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value2",value:o,onChange:function(e){i(e.target.value)}})),t.createElement("td",{className:"protein"},(.139*o).toFixed(1)),t.createElement("td",{className:"protein"},(.644*o).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(3.74*o).toFixed(1))),t.createElement("tr",{className:"hidrati"},t.createElement("td",{className:"naslov"},"Krompir"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value3",value:s,onChange:function(e){u(e.target.value)}})),t.createElement("td",{className:"protein"},(.09*s).toFixed(1)),t.createElement("td",{className:"protein"},(.2*s).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.85*s).toFixed(1))),t.createElement("tr",{className:"hidrati"},t.createElement("td",{className:"naslov"},"Kukuruzni griz"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value4",value:d,onChange:function(e){p(e.target.value)}})),t.createElement("td",{className:"protein"},(.07*d).toFixed(1)),t.createElement("td",{className:"protein"},(.77*d).toFixed(1)),t.createElement("td",{className:"protein"},(.015*d).toFixed(1)),t.createElement("td",{className:"protein"},(3.5*d).toFixed(1))),t.createElement("tr",{className:"hidrati"},t.createElement("td",{className:"naslov"},"Špagete durum"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value5",value:m,onChange:function(e){h(e.target.value)}})),t.createElement("td",{className:"protein"},(.12*m).toFixed(1)),t.createElement("td",{className:"protein"},(.63*m).toFixed(1)),t.createElement("td",{className:"protein"},(.018*m).toFixed(1)),t.createElement("td",{className:"protein"},(3.37*m).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement("td",{className:"naslov"},"Sočivo"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value6",value:v,onChange:function(e){y(e.target.value)}})),t.createElement("td",{className:"protein"},(.25*v).toFixed(1)),t.createElement("td",{className:"protein"},(.6*v).toFixed(1)),t.createElement("td",{className:"protein"},(.01*v).toFixed(1)),t.createElement("td",{className:"protein"},(3.4*v).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement("td",{className:"naslov"},"Žuti grašak"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value7",value:x,onChange:function(e){A(e.target.value)}})),t.createElement("td",{className:"protein"},(.22*x).toFixed(1)),t.createElement("td",{className:"protein"},(.56*x).toFixed(1)),t.createElement("td",{className:"protein"},(.01*x).toFixed(1)),t.createElement("td",{className:"protein"},(3.1*x).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement("td",{className:"naslov"},"Pasulj"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value8",value:E,onChange:function(e){w(e.target.value)}})),t.createElement("td",{className:"protein"},(.21*E).toFixed(1)),t.createElement("td",{className:"protein"},(.45*E).toFixed(1)),t.createElement("td",{className:"protein"},(.016*E).toFixed(1)),t.createElement("td",{className:"protein"},(2.7*E).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement("td",{className:"naslov"},"Tuna konzerva"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value9",value:S,onChange:function(e){N(e.target.value)}})),t.createElement("td",{className:"protein"},(.23*S).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.209*S).toFixed(1)),t.createElement("td",{className:"protein"},(2.84*S).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement("td",{className:"naslov"},"Piletina"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value10",value:P,onChange:function(e){B(e.target.value)}})),t.createElement("td",{className:"protein"},(.208*P).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.068*P).toFixed(1)),t.createElement("td",{className:"protein"},(1.45*P).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement("td",{className:"naslov"},"Ćureća prsa"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value11",value:F,onChange:function(e){R(e.target.value)}})),t.createElement("td",{className:"protein"},(.19*F).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.01*F).toFixed(1)),t.createElement("td",{className:"protein"},(.95*F).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement("td",{className:"naslov"},"Govedina nemasna"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value12",value:M,onChange:function(e){D(e.target.value)}})),t.createElement("td",{className:"protein"},(.195*M).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.125*M).toFixed(1)),t.createElement("td",{className:"protein"},(1.19*M).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement("td",{className:"naslov"},"Junetina (but)"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value13",value:j,onChange:function(e){z(e.target.value)}})),t.createElement("td",{className:"protein"},(.195*j).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.125*j).toFixed(1)),t.createElement("td",{className:"protein"},(1.91*j).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement("td",{className:"naslov"},"Svinjetina nemasna"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value14",value:I,onChange:function(e){U(e.target.value)}})),t.createElement("td",{className:"protein"},(.2*I).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.09*I).toFixed(1)),t.createElement("td",{className:"protein"},(1.61*I).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement("td",{className:"naslov"},"Jaje celo"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value15",value:$,onChange:function(e){Y(e.target.value)}})),t.createElement("td",{className:"protein"},(6*$).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(5*$).toFixed(1)),t.createElement("td",{className:"protein"},(55*$*1.62).toFixed(1))),t.createElement("tr",{className:"mleko"},t.createElement("td",{className:"naslov"},"Maslac"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value16",value:q,onChange:function(e){Q(e.target.value)}})),t.createElement("td",{className:"protein"},(.01*q).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.83*q).toFixed(1)),t.createElement("td",{className:"protein"},(7.5*q).toFixed(1))),t.createElement("tr",{className:"mleko"},t.createElement("td",{className:"naslov"},"Mleko 2.8%"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value17",value:Z,onChange:function(e){G(e.target.value)}})),t.createElement("td",{className:"protein"},(.03*Z).toFixed(1)),t.createElement("td",{className:"protein"},(.045*Z).toFixed(1)),t.createElement("td",{className:"protein"},(.28*Z).toFixed(1)),t.createElement("td",{className:"protein"},(.56*Z).toFixed(1))),t.createElement("tr",{className:"mleko"},t.createElement("td",{className:"naslov"},"Mladi sir"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value18",value:J,onChange:function(e){ee(e.target.value)}})),t.createElement("td",{className:"protein"},(.125*J).toFixed(1)),t.createElement("td",{className:"protein"},(.04*J).toFixed(1)),t.createElement("td",{className:"protein"},(.055*J).toFixed(1)),t.createElement("td",{className:"protein"},(1.15*J).toFixed(1))),t.createElement("tr",{className:"mleko"},t.createElement("td",{className:"naslov"},"Jogurt 2.8%"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value19",value:ne,onChange:function(e){re(e.target.value)}})),t.createElement("td",{className:"protein"},(.032*ne).toFixed(1)),t.createElement("td",{className:"protein"},(.035*ne).toFixed(1)),t.createElement("td",{className:"protein"},(.028*ne).toFixed(1)),t.createElement("td",{className:"protein"},(.52*ne).toFixed(1))),t.createElement("tr",{className:"mleko"},t.createElement("td",{className:"naslov"},"Parmezan"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value20",value:oe,onChange:function(e){ie(e.target.value)}})),t.createElement("td",{className:"protein"},(.43*oe).toFixed(1)),t.createElement("td",{className:"protein"},(.03*oe).toFixed(1)),t.createElement("td",{className:"protein"},(.35*oe).toFixed(1)),t.createElement("td",{className:"protein"},(5*oe).toFixed(1))),t.createElement("tr",{className:"oil"},t.createElement("td",{className:"naslov"},"Maslinovo ulje"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value21",value:ue,onChange:function(e){ce(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(1*ue).toFixed(1)),t.createElement("td",{className:"protein"},(8.84*ue).toFixed(1))),t.createElement("tr",{className:"oil"},t.createElement("td",{className:"naslov"},"Masline zelene"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value22",value:pe,onChange:function(e){fe(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.14*pe).toFixed(1)),t.createElement("td",{className:"protein"},(1.46*pe).toFixed(1))),t.createElement("tr",{className:"oil"},t.createElement("td",{className:"naslov"},"Kokosovo ulje"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value23",value:he,onChange:function(e){ge(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(1*he).toFixed(1)),t.createElement("td",{className:"protein"},(8.9*he).toFixed(1))),t.createElement("tr",{className:"orah"},t.createElement("td",{className:"naslov"},"Kokos"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value24",value:ye,onChange:function(e){be(e.target.value)}})),t.createElement("td",{className:"protein"},(.03*ye).toFixed(1)),t.createElement("td",{className:"protein"},(.15*ye).toFixed(1)),t.createElement("td",{className:"protein"},(.335*ye).toFixed(1)),t.createElement("td",{className:"protein"},(3.54*ye).toFixed(1))),t.createElement("tr",{className:"orah"},t.createElement("td",{className:"naslov"},"Badem"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value25",value:Ae,onChange:function(e){Ce(e.target.value)}})),t.createElement("td",{className:"protein"},(.22*Ae).toFixed(1)),t.createElement("td",{className:"protein"},(.2*Ae).toFixed(1)),t.createElement("td",{className:"protein"},(.54*Ae).toFixed(1)),t.createElement("td",{className:"protein"},(6.34*Ae).toFixed(1))),t.createElement("tr",{className:"orah"},t.createElement("td",{className:"naslov"},"Orah"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value26",value:we,onChange:function(e){ke(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.622*we).toFixed(1)),t.createElement("td",{className:"protein"},(6.77*we).toFixed(1))),t.createElement("tr",{className:"orah"},t.createElement("td",{className:"naslov"},"Lešnik"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value27",value:Ne,onChange:function(e){_e(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.605*Ne).toFixed(1)),t.createElement("td",{className:"protein"},(6.57*Ne).toFixed(1))),t.createElement("tr",{className:"orah"},t.createElement("td",{className:"naslov"},"Suncokret seme"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value28",value:Be,onChange:function(e){Te(e.target.value)}})),t.createElement("td",{className:"protein"},(.2*Be).toFixed(1)),t.createElement("td",{className:"protein"},(.2*Be).toFixed(1)),t.createElement("td",{className:"protein"},(.515*Be).toFixed(1)),t.createElement("td",{className:"protein"},(5.84*Be).toFixed(1))),t.createElement("tr",{className:"orah"},t.createElement("td",{className:"naslov"},"Lan seme"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value29",value:Re,onChange:function(e){De(e.target.value)}})),t.createElement("td",{className:"protein"},(.18*Re).toFixed(1)),t.createElement("td",{className:"protein"},(.28*Re).toFixed(1)),t.createElement("td",{className:"protein"},(.42*Re).toFixed(1)),t.createElement("td",{className:"protein"},(5.34*Re).toFixed(1))),t.createElement("tr",{className:"voce"},t.createElement("td",{className:"naslov"},"Banana"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value30",value:je,onChange:function(e){ze(e.target.value)}})),t.createElement("td",{className:"protein"},(.01*je).toFixed(1)),t.createElement("td",{className:"protein"},(.23*je).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.89*je).toFixed(1))),t.createElement("tr",{className:"voce"},t.createElement("td",{className:"naslov"},"Jabuka"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value31",value:Ie,onChange:function(e){Ue(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.13*Ie).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.5*Ie).toFixed(1))),t.createElement("tr",{className:"voce"},t.createElement("td",{className:"naslov"},"Narandža"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value32",value:$e,onChange:function(e){Ye(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.117*$e).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.47*$e).toFixed(1))),t.createElement("tr",{className:"voce"},t.createElement("td",{className:"naslov"},"Dinja"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value33",value:qe,onChange:function(e){Qe(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.816*qe).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.34*qe).toFixed(1))),t.createElement("tr",{className:"voce"},t.createElement("td",{className:"naslov"},"Grejpfrut"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value34",value:Ze,onChange:function(e){Ge(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.07*Ze).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.28*Ze).toFixed(1))),t.createElement("tr",{className:"voce"},t.createElement("td",{className:"naslov"},"Ananas"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value35",value:Je,onChange:function(e){et(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.126*Je).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.48*Je).toFixed(1))),t.createElement("tr",{className:"voce"},t.createElement("td",{className:"naslov"},"Suvo groždje"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value36",value:nt,onChange:function(e){rt(e.target.value)}})),t.createElement("td",{className:"protein"},(.016*nt).toFixed(1)),t.createElement("td",{className:"protein"},(.66*nt).toFixed(1)),t.createElement("td",{className:"protein"},(.01*nt).toFixed(1)),t.createElement("td",{className:"protein"},(2.7*nt).toFixed(1))),t.createElement("tr",{className:"kupus"},t.createElement("td",{className:"naslov"},"Kupus"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value37",value:ot,onChange:function(e){it(e.target.value)}})),t.createElement("td",{className:"protein"},(.02*ot).toFixed(1)),t.createElement("td",{className:"protein"},(.03*ot).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.22*ot).toFixed(1))),t.createElement("tr",{className:"kupus"},t.createElement("td",{className:"naslov"},"Šargarepa"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value38",value:st,onChange:function(e){ut(e.target.value)}})),t.createElement("td",{className:"protein"},(.01*st).toFixed(1)),t.createElement("td",{className:"protein"},(.09*st).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.4*st).toFixed(1))),t.createElement("tr",{className:"kupus"},t.createElement("td",{className:"naslov"},"Cvekla"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value39",value:dt,onChange:function(e){pt(e.target.value)}})),t.createElement("td",{className:"protein"},(.016*dt).toFixed(1)),t.createElement("td",{className:"protein"},(.1*dt).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.43*dt).toFixed(1))),t.createElement("tr",{className:"kupus"},t.createElement("td",{className:"naslov"},"Brokoli"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value40",value:mt,onChange:function(e){ht(e.target.value)}})),t.createElement("td",{className:"protein"},(.03*mt).toFixed(1)),t.createElement("td",{className:"protein"},(.07*mt).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.34*mt).toFixed(1))),t.createElement("tr",{className:"kupus"},t.createElement("td",{className:"naslov"},"Kelj"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value41",value:vt,onChange:function(e){yt(e.target.value)}})),t.createElement("td",{className:"protein"},(.02*vt).toFixed(1)),t.createElement("td",{className:"protein"},(.1*vt).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.5*vt).toFixed(1))),t.createElement("tr",{className:"kupus"},t.createElement("td",{className:"naslov"},"Španat"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value42",value:xt,onChange:function(e){At(e.target.value)}})),t.createElement("td",{className:"protein"},(.029*xt).toFixed(1)),t.createElement("td",{className:"protein"},(.036*xt).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.23*xt).toFixed(1))),t.createElement("tr",{className:"kupus"},t.createElement("td",{className:"naslov"},"Tikvica"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value43",value:Et,onChange:function(e){wt(e.target.value)}})),t.createElement("td",{className:"protein"},(.01*Et).toFixed(1)),t.createElement("td",{className:"protein"},(.03*Et).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.16*Et).toFixed(1))),t.createElement("tr",{className:"kupus"},t.createElement("td",{className:"naslov"},"Praziluk"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value44",value:St,onChange:function(e){Nt(e.target.value)}})),t.createElement("td",{className:"protein"},(.01*St).toFixed(1)),t.createElement("td",{className:"protein"},(.14*St).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.61*St).toFixed(1))),t.createElement("tr",{className:"kupus"},t.createElement("td",{className:"naslov"},"Patlidžan"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value45",value:Pt,onChange:function(e){Bt(e.target.value)}})),t.createElement("td",{className:"protein"},(.011*Pt).toFixed(1)),t.createElement("td",{className:"protein"},(.029*Pt).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.16*Pt).toFixed(1))),t.createElement("tr",{className:"kupus"},t.createElement("td",{className:"naslov"},"Paradajz"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value46",value:Ft,onChange:function(e){Rt(e.target.value)}})),t.createElement("td",{className:"protein"},(.0088*Ft).toFixed(1)),t.createElement("td",{className:"protein"},(.039*Ft).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.18*Ft).toFixed(1))),t.createElement("tr",{className:"kupus"},t.createElement("td",{className:"naslov"},"Paradajz sok"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value47",value:Mt,onChange:function(e){Dt(e.target.value)}})),t.createElement("td",{className:"protein"},(.008*Mt).toFixed(1)),t.createElement("td",{className:"protein"},(.059*Mt).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.27*Mt).toFixed(1))),t.createElement("tr",{className:"alcohol"},t.createElement("td",{className:"naslov"},"Vino crno"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value48",value:jt,onChange:function(e){zt(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.026*jt).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.85*jt).toFixed(1))),t.createElement("tr",{className:"alcohol"},t.createElement("td",{className:"naslov"},"Pivo svetlo"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value49",value:It,onChange:function(e){Ut(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.035*It).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.43*It).toFixed(1))),t.createElement("tr",{className:"alcohol"},t.createElement("td",{className:"naslov"},"Rakija"),t.createElement("td",{className:"protein"},t.createElement("input",{type:"number",name:"value50",value:$t,onChange:function(e){Yt(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(3.5*$t).toFixed(1)))),t.createElement("tfoot",null,t.createElement("tr",null,t.createElement("td",{className:"naslov"},"Ukupno"),t.createElement("td",null),t.createElement("td",{className:"protein"},(Number(.076*n)+Number(.139*o)+Number(.09*s)+Number(.07*d)+Number(.012*m)+Number(.25*v)+Number(.22*x)+Number(.21*E)+Number(.023*S)+Number(.208*P)+Number(.19*F)+Number(.195*M)+Number(.195*j)+Number(.2*I)+Number(6*$)+Number(.01*q)+Number(.03*Z)+Number(.125*J)+Number(.032*ne)+Number(.43*oe)+Number(.03*ye)+Number(.22*Ae)+Number(.2*Be)+Number(.18*Re)+Number(.01*je)+Number(.016*nt)+Number(.02*ot)+Number(.01*st)+Number(.016*dt)+Number(.03*mt)+Number(.02*vt)+Number(.029*xt)+Number(.01*Et)+Number(.01*St)+Number(.011*Pt)+Number(.0088*Ft)+Number(.008*Mt)).toFixed(1)),t.createElement("td",{className:"protein"},(Number(.78*n)+Number(.644*o)+Number(.2*s)+Number(.77*d)+Number(.063*m)+Number(.6*v)+Number(.56*x)+Number(.45*E)+Number(.045*Z)+Number(.04*J)+.035*ne+Number(.03*oe)+Number(.15*ye)+Number(.2*Ae)+Number(.2*Be)+Number(.28*Re)+Number(.23*je)+Number(.13*Ie)+Number(.117*$e)+Number(.816*qe)+Number(.07*Ze)+Number(.126*Je)+Number(.66*nt)+Number(.03*ot)+Number(.09*st)+Number(.1*dt)+Number(.07*mt)+Number(.1*vt)+Number(.036*xt)+Number(.03*Et)+Number(.14*St)+Number(.029*Pt)+Number(.039*Ft)+Number(.059*Mt)+Number(.026*jt)+Number(.035*It)).toFixed(1)),t.createElement("td",{className:"protein"},(Number(.015*d)+Number(.018*m)+Number(.01*v)+Number(.01*x)+Number(.016*E)+Number(.209*S)+Number(.068*P)+Number(.01*F)+Number(.125*M)+Number(.125*j)+Number(.09*I)+Number(5*$)+Number(.83*q)+Number(.28*Z)+Number(.055*J)+Number(.028*ne)+Number(.35*oe)+Number(1*ue)+Number(.14*pe)+Number(1*he)+Number(.335*ye)+Number(.54*Ae)+Number(.622*we)+Number(.605*Ne)+Number(.515*Be)+Number(.42*Re)+Number(.01*nt)).toFixed(1)),t.createElement("td",{className:"protein"},(Number(3.51*n)+Number(3.74*o)+Number(.85*s)+Number(3.5*d)+Number(3.37*m)+Number(3.4*v)+Number(3.1*x)+Number(2.7*E)+Number(2.84*S)+Number(1.45*P)+Number(.95*F)+Number(1.19*M)+Number(1.91*j)+Number(1.61*I)+Number(55*$*1.62)+Number(7.5*q)+Number(.56*Z)+Number(1.15*J)+Number(.52*ne)+Number(5*oe)+Number(8.84*ue)+Number(1.46*pe)+Number(8.9*he)+Number(3.54*ye)+Number(6.34*Ae)+Number(6.77*we)+Number(6.57*Ne)+Number(5.84*Be)+Number(5.34*Re)+Number(.89*je)+Number(.5*Ie)+Number(.47*$e)+Number(.34*qe)+Number(.28*Ze)+Number(.48*Je)+Number(2.7*nt)+Number(.22*ot)+Number(.4*st)+Number(.43*dt)+Number(.34*mt)+Number(.5*vt)+Number(.23*xt)+Number(.16*Et)+Number(.61*St)+Number(.16*Pt)+Number(.18*Ft)+Number(.27*Mt)+Number(.85*jt)+Number(.43*It)+Number(3.5*$t)).toFixed(1))))),t.createElement("div",null,t.createElement(Le,null)))};var je=__webpack_require__(154);function ze(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],s=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,a=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw a}}return l}}(e,t)||Ve(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ve(e,t){if(e){if("string"==typeof e)return Ie(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ie(e,t):void 0}}function Ie(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Ue=function(){var e=ze((0,t.useState)(),2),n=e[0],r=e[1],a=ze((0,t.useState)(),2),o=a[0],i=a[1],l=ze((0,t.useState)(),2),s=l[0],u=l[1],c=ze((0,t.useState)(),2),d=c[0],p=c[1],f=ze((0,t.useState)(),2),m=f[0],h=f[1],g=ze((0,t.useState)(),2),v=g[0],y=g[1],b=ze((0,t.useState)(),2),x=b[0],A=b[1],C=ze((0,t.useState)(),2),E=C[0],w=C[1],k=ze((0,t.useState)(),2),S=k[0],N=k[1],_=ze((0,t.useState)(),2),P=_[0],B=_[1],T=t.useRef(),F=ze((0,t.useState)([]),2),R=F[0],L=F[1],M=function(e){return"".concat(e.position.x," ").concat(e.position.y," ").concat(e.position.z)},D=function(e){return"".concat(e.normal.x," ").concat(e.normal.y," ").concat(e.normal.z)};return t.createElement(t.Fragment,null,t.createElement("table",{className:"odnosi"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:7},"Odnosi"))),t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",null,t.createElement("input",{type:"number",name:"value1",value:n,onChange:function(e){r(e.target.value)}})),t.createElement("td",null,"prema"),t.createElement("td",null,t.createElement("input",{type:"number",name:"value2",value:o,onChange:function(e){i(e.target.value)}})),t.createElement("td",null,"isto je kao"),t.createElement("td",null,t.createElement("input",{type:"number",name:"value3",value:s,onChange:function(e){u(e.target.value)}})),t.createElement("td",null,"prema"),t.createElement("td",{className:"relacija"},(s*o/n).toFixed(1))),t.createElement("tr",null,t.createElement("td",null,t.createElement("input",{type:"number",name:"value4",value:d,onChange:function(e){p(e.target.value)}})),t.createElement("td",null,"prema"),t.createElement("td",null,t.createElement("input",{type:"number",name:"value5",value:m,onChange:function(e){h(e.target.value)}})),t.createElement("td",null,"isto je kao"),t.createElement("td",{className:"relacija"},(d*v/m).toFixed(1)),t.createElement("td",null,"prema"),t.createElement("td",null,t.createElement("input",{type:"number",name:"value6",value:v,onChange:function(e){y(e.target.value)}}))))),t.createElement("table",{className:"odnosi"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:5},"Procenti"))),t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",null,t.createElement("input",{type:"number",name:"value7",value:x,onChange:function(e){A(e.target.value)}})),t.createElement("td",null,"Od"),t.createElement("td",null,t.createElement("input",{type:"number",name:"value8",value:E,onChange:function(e){w(e.target.value)}})),t.createElement("td",null,"Iznosi"),t.createElement("td",{className:"relacija"},(x/E*100).toFixed(1)," %")),t.createElement("tr",null,t.createElement("td",{className:"proc"},t.createElement("input",{type:"number",name:"value9",value:S,onChange:function(e){N(e.target.value)}}),"%"),t.createElement("td",null,"Od"),t.createElement("td",null,t.createElement("input",{type:"number",name:"value10",value:P,onChange:function(e){B(e.target.value)}})),t.createElement("td",null,"Iznosi"),t.createElement("td",{className:"relacija"},(S*P/100).toFixed(1))))),t.createElement("div",{className:"calc"},t.createElement(je.Z,null)),t.createElement("br",null),t.createElement("model-viewer",{src:"https://storage.googleapis.com/search-ar-edu/periodic-table/element_006_carbon/element_006_carbon.glb","shadow-intensity":"1","camera-controls":!0,ar:!0,"ar-modes":"webxr",onClick:function(e){var t=e.clientX,n=e.clientY;if(T.current){var r=T.current.positionAndNormalFromPoint(t,n);r&&L((function(e){return[].concat(function(e){if(Array.isArray(e))return Ie(e)}(t=e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||Ve(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[r]);var t}))}},ref:function(e){T.current=e},className:"moduleView"},R.map((function(e,n){return t.createElement("button",{key:"hotspot-".concat(n),className:"view-button",slot:"hotspot-".concat(n),"data-position":M(e),"data-normal":D(e)})}))))},We=(0,t.createContext)({transformPagePoint:e=>e,isStatic:!1,reducedMotion:"never"}),$e=(0,t.createContext)({}),Ye=(0,t.createContext)(null),He="undefined"!=typeof document,qe=He?t.useLayoutEffect:t.useEffect,Qe=(0,t.createContext)({strict:!1});function Ke(e){return"object"==typeof e&&Object.prototype.hasOwnProperty.call(e,"current")}function Ze(e){return"string"==typeof e||Array.isArray(e)}function Ge(e){return"object"==typeof e&&"function"==typeof e.start}const Xe=["animate","whileInView","whileFocus","whileHover","whileTap","whileDrag","exit"],Je=["initial",...Xe];function et(e){return Ge(e.animate)||Je.some((t=>Ze(e[t])))}function tt(e){return Boolean(et(e)||e.variants)}function nt(e){return Array.isArray(e)?e.join(" "):e}const rt={animation:["animate","variants","whileHover","whileTap","exit","whileInView","whileFocus","whileDrag"],exit:["exit"],drag:["drag","dragControls"],focus:["whileFocus"],hover:["whileHover","onHoverStart","onHoverEnd"],tap:["whileTap","onTap","onTapStart","onTapCancel"],pan:["onPan","onPanStart","onPanSessionStart","onPanEnd"],inView:["whileInView","onViewportEnter","onViewportLeave"],layout:["layout","layoutId"]},at={};for(const e in rt)at[e]={isEnabled:t=>rt[e].some((e=>!!t[e]))};const ot=(0,t.createContext)({}),it=(0,t.createContext)({}),lt=Symbol.for("motionComponentSymbol");function st({preloadedFeatures:e,createVisualElement:n,useRender:r,useVisualState:a,Component:o}){e&&function(e){for(const t in e)at[t]={...at[t],...e[t]}}(e);const i=(0,t.forwardRef)((function(i,l){let s;const u={...(0,t.useContext)(We),...i,layoutId:ut(i)},{isStatic:c}=u,d=function(e){const{initial:n,animate:r}=function(e,t){if(et(e)){const{initial:t,animate:n}=e;return{initial:!1===t||Ze(t)?t:void 0,animate:Ze(n)?n:void 0}}return!1!==e.inherit?t:{}}(e,(0,t.useContext)($e));return(0,t.useMemo)((()=>({initial:n,animate:r})),[nt(n),nt(r)])}(i),p=a(i,c);if(!c&&He){d.visualElement=function(e,n,r,a){const{visualElement:o}=(0,t.useContext)($e),i=(0,t.useContext)(Qe),l=(0,t.useContext)(Ye),s=(0,t.useContext)(We).reducedMotion,u=(0,t.useRef)();a=a||i.renderer,!u.current&&a&&(u.current=a(e,{visualState:n,parent:o,props:r,presenceContext:l,blockInitialAnimation:!!l&&!1===l.initial,reducedMotionConfig:s}));const c=u.current;(0,t.useInsertionEffect)((()=>{c&&c.update(r,l)}));const d=(0,t.useRef)(Boolean(window.HandoffAppearAnimations));return qe((()=>{c&&(c.render(),d.current&&c.animationState&&c.animationState.animateChanges())})),(0,t.useEffect)((()=>{c&&(c.updateFeatures(),!d.current&&c.animationState&&c.animationState.animateChanges(),window.HandoffAppearAnimations=void 0,d.current=!1)})),c}(o,p,u,n);const r=(0,t.useContext)(it),a=(0,t.useContext)(Qe).strict;d.visualElement&&(s=d.visualElement.loadFeatures(u,a,e,r))}return t.createElement($e.Provider,{value:d},s&&d.visualElement?t.createElement(s,{visualElement:d.visualElement,...u}):null,r(o,i,function(e,n,r){return(0,t.useCallback)((t=>{t&&e.mount&&e.mount(t),n&&(t?n.mount(t):n.unmount()),r&&("function"==typeof r?r(t):Ke(r)&&(r.current=t))}),[n])}(p,d.visualElement,l),p,c,d.visualElement))}));return i[lt]=o,i}function ut({layoutId:e}){const n=(0,t.useContext)(ot).id;return n&&void 0!==e?n+"-"+e:e}function ct(e){function t(t,n={}){return st(e(t,n))}if("undefined"==typeof Proxy)return t;const n=new Map;return new Proxy(t,{get:(e,r)=>(n.has(r)||n.set(r,t(r)),n.get(r))})}const dt=["animate","circle","defs","desc","ellipse","g","image","line","filter","marker","mask","metadata","path","pattern","polygon","polyline","rect","stop","switch","symbol","svg","text","tspan","use","view"];function pt(e){return"string"==typeof e&&!e.includes("-")&&!!(dt.indexOf(e)>-1||/[A-Z]/.test(e))}const ft={},mt=["transformPerspective","x","y","z","translateX","translateY","translateZ","scale","scaleX","scaleY","rotate","rotateX","rotateY","rotateZ","skew","skewX","skewY"],ht=new Set(mt);function gt(e,{layout:t,layoutId:n}){return ht.has(e)||e.startsWith("origin")||(t||void 0!==n)&&(!!ft[e]||"opacity"===e)}const vt=e=>Boolean(e&&e.getVelocity),yt={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"},bt=mt.length,xt=e=>t=>"string"==typeof t&&t.startsWith(e),At=xt("--"),Ct=xt("var(--"),Et=(e,t)=>t&&"number"==typeof e?t.transform(e):e,wt=(e,t,n)=>Math.min(Math.max(n,e),t),kt={test:e=>"number"==typeof e,parse:parseFloat,transform:e=>e},St={...kt,transform:e=>wt(0,1,e)},Nt={...kt,default:1},_t=e=>Math.round(1e5*e)/1e5,Pt=/(-)?([\d]*\.?[\d])+/g,Bt=/(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi,Tt=/^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;function Ft(e){return"string"==typeof e}const Rt=e=>({test:t=>Ft(t)&&t.endsWith(e)&&1===t.split(" ").length,parse:parseFloat,transform:t=>`${t}${e}`}),Lt=Rt("deg"),Mt=Rt("%"),Dt=Rt("px"),Ot=Rt("vh"),jt=Rt("vw"),zt={...Mt,parse:e=>Mt.parse(e)/100,transform:e=>Mt.transform(100*e)},Vt={...kt,transform:Math.round},It={borderWidth:Dt,borderTopWidth:Dt,borderRightWidth:Dt,borderBottomWidth:Dt,borderLeftWidth:Dt,borderRadius:Dt,radius:Dt,borderTopLeftRadius:Dt,borderTopRightRadius:Dt,borderBottomRightRadius:Dt,borderBottomLeftRadius:Dt,width:Dt,maxWidth:Dt,height:Dt,maxHeight:Dt,size:Dt,top:Dt,right:Dt,bottom:Dt,left:Dt,padding:Dt,paddingTop:Dt,paddingRight:Dt,paddingBottom:Dt,paddingLeft:Dt,margin:Dt,marginTop:Dt,marginRight:Dt,marginBottom:Dt,marginLeft:Dt,rotate:Lt,rotateX:Lt,rotateY:Lt,rotateZ:Lt,scale:Nt,scaleX:Nt,scaleY:Nt,scaleZ:Nt,skew:Lt,skewX:Lt,skewY:Lt,distance:Dt,translateX:Dt,translateY:Dt,translateZ:Dt,x:Dt,y:Dt,z:Dt,perspective:Dt,transformPerspective:Dt,opacity:St,originX:zt,originY:zt,originZ:Dt,zIndex:Vt,fillOpacity:St,strokeOpacity:St,numOctaves:Vt};function Ut(e,t,n,r){const{style:a,vars:o,transform:i,transformOrigin:l}=e;let s=!1,u=!1,c=!0;for(const e in t){const n=t[e];if(At(e)){o[e]=n;continue}const r=It[e],d=Et(n,r);if(ht.has(e)){if(s=!0,i[e]=d,!c)continue;n!==(r.default||0)&&(c=!1)}else e.startsWith("origin")?(u=!0,l[e]=d):a[e]=d}if(t.transform||(s||r?a.transform=function(e,{enableHardwareAcceleration:t=!0,allowTransformNone:n=!0},r,a){let o="";for(let t=0;t<bt;t++){const n=mt[t];void 0!==e[n]&&(o+=`${yt[n]||n}(${e[n]}) `)}return t&&!e.z&&(o+="translateZ(0)"),o=o.trim(),a?o=a(e,r?"":o):n&&r&&(o="none"),o}(e.transform,n,c,r):a.transform&&(a.transform="none")),u){const{originX:e="50%",originY:t="50%",originZ:n=0}=l;a.transformOrigin=`${e} ${t} ${n}`}}const Wt=()=>({style:{},transform:{},transformOrigin:{},vars:{}});function $t(e,t,n){for(const r in t)vt(t[r])||gt(r,n)||(e[r]=t[r])}function Yt(e,n,r){const a={},o=function(e,n,r){const a={};return $t(a,e.style||{},e),Object.assign(a,function({transformTemplate:e},n,r){return(0,t.useMemo)((()=>{const t=Wt();return Ut(t,n,{enableHardwareAcceleration:!r},e),Object.assign({},t.vars,t.style)}),[n])}(e,n,r)),e.transformValues?e.transformValues(a):a}(e,n,r);return e.drag&&!1!==e.dragListener&&(a.draggable=!1,o.userSelect=o.WebkitUserSelect=o.WebkitTouchCallout="none",o.touchAction=!0===e.drag?"none":"pan-"+("x"===e.drag?"y":"x")),void 0===e.tabIndex&&(e.onTap||e.onTapStart||e.whileTap)&&(a.tabIndex=0),a.style=o,a}const Ht=new Set(["animate","exit","variants","initial","style","values","variants","transition","transformTemplate","transformValues","custom","inherit","onLayoutAnimationStart","onLayoutAnimationComplete","onLayoutMeasure","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","_dragX","_dragY","onHoverStart","onHoverEnd","onViewportEnter","onViewportLeave","ignoreStrict","viewport"]);function qt(e){return e.startsWith("while")||e.startsWith("drag")&&"draggable"!==e||e.startsWith("layout")||e.startsWith("onTap")||e.startsWith("onPan")||Ht.has(e)}let Qt=e=>!qt(e);try{(Kt=require("@emotion/is-prop-valid").default)&&(Qt=e=>e.startsWith("on")?!qt(e):Kt(e))}catch(e){}var Kt;function Zt(e,t,n){return"string"==typeof e?e:Dt.transform(t+n*e)}const Gt={offset:"stroke-dashoffset",array:"stroke-dasharray"},Xt={offset:"strokeDashoffset",array:"strokeDasharray"};function Jt(e,{attrX:t,attrY:n,attrScale:r,originX:a,originY:o,pathLength:i,pathSpacing:l=1,pathOffset:s=0,...u},c,d,p){if(Ut(e,u,c,p),d)return void(e.style.viewBox&&(e.attrs.viewBox=e.style.viewBox));e.attrs=e.style,e.style={};const{attrs:f,style:m,dimensions:h}=e;f.transform&&(h&&(m.transform=f.transform),delete f.transform),h&&(void 0!==a||void 0!==o||m.transform)&&(m.transformOrigin=function(e,t,n){return`${Zt(t,e.x,e.width)} ${Zt(n,e.y,e.height)}`}(h,void 0!==a?a:.5,void 0!==o?o:.5)),void 0!==t&&(f.x=t),void 0!==n&&(f.y=n),void 0!==r&&(f.scale=r),void 0!==i&&function(e,t,n=1,r=0,a=!0){e.pathLength=1;const o=a?Gt:Xt;e[o.offset]=Dt.transform(-r);const i=Dt.transform(t),l=Dt.transform(n);e[o.array]=`${i} ${l}`}(f,i,l,s,!1)}const en=()=>({...Wt(),attrs:{}}),tn=e=>"string"==typeof e&&"svg"===e.toLowerCase();function nn(e,n,r,a){const o=(0,t.useMemo)((()=>{const t=en();return Jt(t,n,{enableHardwareAcceleration:!1},tn(a),e.transformTemplate),{...t.attrs,style:{...t.style}}}),[n]);if(e.style){const t={};$t(t,e.style,e),o.style={...t,...o.style}}return o}function rn(e=!1){return(n,r,a,{latestValues:o},i)=>{const l=(pt(n)?nn:Yt)(r,o,i,n),s=function(e,t,n){const r={};for(const a in e)"values"===a&&"object"==typeof e.values||(Qt(a)||!0===n&&qt(a)||!t&&!qt(a)||e.draggable&&a.startsWith("onDrag"))&&(r[a]=e[a]);return r}(r,"string"==typeof n,e),u={...s,...l,ref:a},{children:c}=r,d=(0,t.useMemo)((()=>vt(c)?c.get():c),[c]);return(0,t.createElement)(n,{...u,children:d})}}const an=e=>e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase();function on(e,{style:t,vars:n},r,a){Object.assign(e.style,t,a&&a.getProjectionStyles(r));for(const t in n)e.style.setProperty(t,n[t])}const ln=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox","gradientTransform","pathLength","startOffset","textLength","lengthAdjust"]);function sn(e,t,n,r){on(e,t,void 0,r);for(const n in t.attrs)e.setAttribute(ln.has(n)?n:an(n),t.attrs[n])}function un(e,t){const{style:n}=e,r={};for(const a in n)(vt(n[a])||t.style&&vt(t.style[a])||gt(a,e))&&(r[a]=n[a]);return r}function cn(e,t){const n=un(e,t);for(const r in e)(vt(e[r])||vt(t[r]))&&(n[-1!==mt.indexOf(r)?"attr"+r.charAt(0).toUpperCase()+r.substring(1):r]=e[r]);return n}function dn(e,t,n,r={},a={}){return"function"==typeof t&&(t=t(void 0!==n?n:e.custom,r,a)),"string"==typeof t&&(t=e.variants&&e.variants[t]),"function"==typeof t&&(t=t(void 0!==n?n:e.custom,r,a)),t}const pn=e=>Array.isArray(e),fn=e=>Boolean(e&&"object"==typeof e&&e.mix&&e.toValue),mn=e=>pn(e)?e[e.length-1]||0:e;function hn(e){const t=vt(e)?e.get():e;return fn(t)?t.toValue():t}const gn=e=>(n,r)=>{const a=(0,t.useContext)($e),o=(0,t.useContext)(Ye),i=()=>function({scrapeMotionValuesFromProps:e,createRenderState:t,onMount:n},r,a,o){const i={latestValues:vn(r,a,o,e),renderState:t()};return n&&(i.mount=e=>n(r,e,i)),i}(e,n,a,o);return r?i():function(e){const n=(0,t.useRef)(null);return null===n.current&&(n.current=e()),n.current}(i)};function vn(e,t,n,r){const a={},o=r(e,{});for(const e in o)a[e]=hn(o[e]);let{initial:i,animate:l}=e;const s=et(e),u=tt(e);t&&u&&!s&&!1!==e.inherit&&(void 0===i&&(i=t.initial),void 0===l&&(l=t.animate));let c=!!n&&!1===n.initial;c=c||!1===i;const d=c?l:i;return d&&"boolean"!=typeof d&&!Ge(d)&&(Array.isArray(d)?d:[d]).forEach((t=>{const n=dn(e,t);if(!n)return;const{transitionEnd:r,transition:o,...i}=n;for(const e in i){let t=i[e];Array.isArray(t)&&(t=t[c?t.length-1:0]),null!==t&&(a[e]=t)}for(const e in r)a[e]=r[e]})),a}const yn=e=>e;class bn{constructor(){this.order=[],this.scheduled=new Set}add(e){if(!this.scheduled.has(e))return this.scheduled.add(e),this.order.push(e),!0}remove(e){const t=this.order.indexOf(e);-1!==t&&(this.order.splice(t,1),this.scheduled.delete(e))}clear(){this.order.length=0,this.scheduled.clear()}}const xn=["prepare","read","update","preRender","render","postRender"],{schedule:An,cancel:Cn,state:En,steps:wn}=function(e,t){let n=!1,r=!0;const a={delta:0,timestamp:0,isProcessing:!1},o=xn.reduce(((e,t)=>(e[t]=function(e){let t=new bn,n=new bn,r=0,a=!1,o=!1;const i=new WeakSet,l={schedule:(e,o=!1,l=!1)=>{const s=l&&a,u=s?t:n;return o&&i.add(e),u.add(e)&&s&&a&&(r=t.order.length),e},cancel:e=>{n.remove(e),i.delete(e)},process:s=>{if(a)o=!0;else{if(a=!0,[t,n]=[n,t],n.clear(),r=t.order.length,r)for(let n=0;n<r;n++){const r=t.order[n];r(s),i.has(r)&&(l.schedule(r),e())}a=!1,o&&(o=!1,l.process(s))}}};return l}((()=>n=!0)),e)),{}),i=e=>o[e].process(a),l=()=>{const t=performance.now();n=!1,a.delta=r?1e3/60:Math.max(Math.min(t-a.timestamp,40),1),a.timestamp=t,a.isProcessing=!0,xn.forEach(i),a.isProcessing=!1,n&&(r=!1,e(l))};return{schedule:xn.reduce(((t,i)=>{const s=o[i];return t[i]=(t,o=!1,i=!1)=>(n||(n=!0,r=!0,a.isProcessing||e(l)),s.schedule(t,o,i)),t}),{}),cancel:e=>xn.forEach((t=>o[t].cancel(e))),state:a,steps:o}}("undefined"!=typeof requestAnimationFrame?requestAnimationFrame:yn),kn={useVisualState:gn({scrapeMotionValuesFromProps:cn,createRenderState:en,onMount:(e,t,{renderState:n,latestValues:r})=>{An.read((()=>{try{n.dimensions="function"==typeof t.getBBox?t.getBBox():t.getBoundingClientRect()}catch(e){n.dimensions={x:0,y:0,width:0,height:0}}})),An.render((()=>{Jt(n,r,{enableHardwareAcceleration:!1},tn(t.tagName),e.transformTemplate),sn(t,n)}))}})},Sn={useVisualState:gn({scrapeMotionValuesFromProps:un,createRenderState:Wt})};function Nn(e,t,n,r={passive:!0}){return e.addEventListener(t,n,r),()=>e.removeEventListener(t,n)}const _n=e=>"mouse"===e.pointerType?"number"!=typeof e.button||e.button<=0:!1!==e.isPrimary;function Pn(e,t="page"){return{point:{x:e[t+"X"],y:e[t+"Y"]}}}const Bn=e=>t=>_n(t)&&e(t,Pn(t));function Tn(e,t,n,r){return Nn(e,t,Bn(n),r)}const Fn=(e,t)=>n=>t(e(n)),Rn=(...e)=>e.reduce(Fn);function Ln(e){let t=null;return()=>null===t&&(t=e,()=>{t=null})}const Mn=Ln("dragHorizontal"),Dn=Ln("dragVertical");function On(e){let t=!1;if("y"===e)t=Dn();else if("x"===e)t=Mn();else{const e=Mn(),n=Dn();e&&n?t=()=>{e(),n()}:(e&&e(),n&&n())}return t}function jn(){const e=On(!0);return!e||(e(),!1)}class zn{constructor(e){this.isMounted=!1,this.node=e}update(){}}function Vn(e,t){const n="pointer"+(t?"enter":"leave"),r="onHover"+(t?"Start":"End");return Tn(e.current,n,((n,a)=>{if("touch"===n.type||jn())return;const o=e.getProps();e.animationState&&o.whileHover&&e.animationState.setActive("whileHover",t),o[r]&&An.update((()=>o[r](n,a)))}),{passive:!e.getProps()[r]})}const In=(e,t)=>!!t&&(e===t||In(e,t.parentElement));function Un(e,t){if(!t)return;const n=new PointerEvent("pointer"+e);t(n,Pn(n))}const Wn=new WeakMap,$n=new WeakMap,Yn=e=>{const t=Wn.get(e.target);t&&t(e)},Hn=e=>{e.forEach(Yn)};const qn={some:0,all:1},Qn={inView:{Feature:class extends zn{constructor(){super(...arguments),this.hasEnteredView=!1,this.isInView=!1}startObserver(){this.unmount();const{viewport:e={}}=this.node.getProps(),{root:t,margin:n,amount:r="some",once:a}=e,o={root:t?t.current:void 0,rootMargin:n,threshold:"number"==typeof r?r:qn[r]};return function(e,t,n){const r=function({root:e,...t}){const n=e||document;$n.has(n)||$n.set(n,{});const r=$n.get(n),a=JSON.stringify(t);return r[a]||(r[a]=new IntersectionObserver(Hn,{root:e,...t})),r[a]}(t);return Wn.set(e,n),r.observe(e),()=>{Wn.delete(e),r.unobserve(e)}}(this.node.current,o,(e=>{const{isIntersecting:t}=e;if(this.isInView===t)return;if(this.isInView=t,a&&!t&&this.hasEnteredView)return;t&&(this.hasEnteredView=!0),this.node.animationState&&this.node.animationState.setActive("whileInView",t);const{onViewportEnter:n,onViewportLeave:r}=this.node.getProps(),o=t?n:r;o&&o(e)}))}mount(){this.startObserver()}update(){if("undefined"==typeof IntersectionObserver)return;const{props:e,prevProps:t}=this.node;["amount","margin","root"].some(function({viewport:e={}},{viewport:t={}}={}){return n=>e[n]!==t[n]}(e,t))&&this.startObserver()}unmount(){}}},tap:{Feature:class extends zn{constructor(){super(...arguments),this.removeStartListeners=yn,this.removeEndListeners=yn,this.removeAccessibleListeners=yn,this.startPointerPress=(e,t)=>{if(this.removeEndListeners(),this.isPressing)return;const n=this.node.getProps(),r=Tn(window,"pointerup",((e,t)=>{if(!this.checkPressEnd())return;const{onTap:n,onTapCancel:r}=this.node.getProps();An.update((()=>{In(this.node.current,e.target)?n&&n(e,t):r&&r(e,t)}))}),{passive:!(n.onTap||n.onPointerUp)}),a=Tn(window,"pointercancel",((e,t)=>this.cancelPress(e,t)),{passive:!(n.onTapCancel||n.onPointerCancel)});this.removeEndListeners=Rn(r,a),this.startPress(e,t)},this.startAccessiblePress=()=>{const e=Nn(this.node.current,"keydown",(e=>{"Enter"!==e.key||this.isPressing||(this.removeEndListeners(),this.removeEndListeners=Nn(this.node.current,"keyup",(e=>{"Enter"===e.key&&this.checkPressEnd()&&Un("up",((e,t)=>{const{onTap:n}=this.node.getProps();n&&An.update((()=>n(e,t)))}))})),Un("down",((e,t)=>{this.startPress(e,t)})))})),t=Nn(this.node.current,"blur",(()=>{this.isPressing&&Un("cancel",((e,t)=>this.cancelPress(e,t)))}));this.removeAccessibleListeners=Rn(e,t)}}startPress(e,t){this.isPressing=!0;const{onTapStart:n,whileTap:r}=this.node.getProps();r&&this.node.animationState&&this.node.animationState.setActive("whileTap",!0),n&&An.update((()=>n(e,t)))}checkPressEnd(){return this.removeEndListeners(),this.isPressing=!1,this.node.getProps().whileTap&&this.node.animationState&&this.node.animationState.setActive("whileTap",!1),!jn()}cancelPress(e,t){if(!this.checkPressEnd())return;const{onTapCancel:n}=this.node.getProps();n&&An.update((()=>n(e,t)))}mount(){const e=this.node.getProps(),t=Tn(this.node.current,"pointerdown",this.startPointerPress,{passive:!(e.onTapStart||e.onPointerStart)}),n=Nn(this.node.current,"focus",this.startAccessiblePress);this.removeStartListeners=Rn(t,n)}unmount(){this.removeStartListeners(),this.removeEndListeners(),this.removeAccessibleListeners()}}},focus:{Feature:class extends zn{constructor(){super(...arguments),this.isActive=!1}onFocus(){let e=!1;try{e=this.node.current.matches(":focus-visible")}catch(t){e=!0}e&&this.node.animationState&&(this.node.animationState.setActive("whileFocus",!0),this.isActive=!0)}onBlur(){this.isActive&&this.node.animationState&&(this.node.animationState.setActive("whileFocus",!1),this.isActive=!1)}mount(){this.unmount=Rn(Nn(this.node.current,"focus",(()=>this.onFocus())),Nn(this.node.current,"blur",(()=>this.onBlur())))}unmount(){}}},hover:{Feature:class extends zn{mount(){this.unmount=Rn(Vn(this.node,!0),Vn(this.node,!1))}unmount(){}}}};function Kn(e,t){if(!Array.isArray(t))return!1;const n=t.length;if(n!==e.length)return!1;for(let r=0;r<n;r++)if(t[r]!==e[r])return!1;return!0}function Zn(e,t,n){const r=e.getProps();return dn(r,t,void 0!==n?n:r.custom,function(e){const t={};return e.values.forEach(((e,n)=>t[n]=e.get())),t}(e),function(e){const t={};return e.values.forEach(((e,n)=>t[n]=e.getVelocity())),t}(e))}const Gn="data-"+an("framerAppearId");let Xn=yn,Jn=yn;const er=e=>1e3*e,tr=e=>e/1e3,nr=e=>Array.isArray(e)&&"number"==typeof e[0];function rr(e){return Boolean(!e||"string"==typeof e&&or[e]||nr(e)||Array.isArray(e)&&e.every(rr))}const ar=([e,t,n,r])=>`cubic-bezier(${e}, ${t}, ${n}, ${r})`,or={linear:"linear",ease:"ease",easeIn:"ease-in",easeOut:"ease-out",easeInOut:"ease-in-out",circIn:ar([0,.65,.55,1]),circOut:ar([.55,0,1,.45]),backIn:ar([.31,.01,.66,-.59]),backOut:ar([.33,1.53,.69,.99])};function ir(e){if(e)return nr(e)?ar(e):Array.isArray(e)?e.map(ir):or[e]}const lr=(e,t,n)=>(((1-3*n+3*t)*e+(3*n-6*t))*e+3*t)*e;function sr(e,t,n,r){if(e===t&&n===r)return yn;return a=>0===a||1===a?a:lr(function(e,t,n,r,a){let o,i,l=0;do{i=t+(n-t)/2,o=lr(i,r,a)-e,o>0?n=i:t=i}while(Math.abs(o)>1e-7&&++l<12);return i}(a,0,1,e,n),t,r)}const ur=sr(.42,0,1,1),cr=sr(0,0,.58,1),dr=sr(.42,0,.58,1),pr=e=>Array.isArray(e)&&"number"!=typeof e[0],fr=e=>t=>t<=.5?e(2*t)/2:(2-e(2*(1-t)))/2,mr=e=>t=>1-e(1-t),hr=e=>1-Math.sin(Math.acos(e)),gr=mr(hr),vr=fr(gr),yr=sr(.33,1.53,.69,.99),br=mr(yr),xr=fr(br),Ar={linear:yn,easeIn:ur,easeInOut:dr,easeOut:cr,circIn:hr,circInOut:vr,circOut:gr,backIn:br,backInOut:xr,backOut:yr,anticipate:e=>(e*=2)<1?.5*br(e):.5*(2-Math.pow(2,-10*(e-1)))},Cr=e=>{if(Array.isArray(e)){Jn(4===e.length,"Cubic bezier arrays must contain four numerical values.");const[t,n,r,a]=e;return sr(t,n,r,a)}return"string"==typeof e?(Jn(void 0!==Ar[e],`Invalid easing type '${e}'`),Ar[e]):e},Er=(e,t)=>n=>Boolean(Ft(n)&&Tt.test(n)&&n.startsWith(e)||t&&Object.prototype.hasOwnProperty.call(n,t)),wr=(e,t,n)=>r=>{if(!Ft(r))return r;const[a,o,i,l]=r.match(Pt);return{[e]:parseFloat(a),[t]:parseFloat(o),[n]:parseFloat(i),alpha:void 0!==l?parseFloat(l):1}},kr={...kt,transform:e=>Math.round((e=>wt(0,255,e))(e))},Sr={test:Er("rgb","red"),parse:wr("red","green","blue"),transform:({red:e,green:t,blue:n,alpha:r=1})=>"rgba("+kr.transform(e)+", "+kr.transform(t)+", "+kr.transform(n)+", "+_t(St.transform(r))+")"},Nr={test:Er("#"),parse:function(e){let t="",n="",r="",a="";return e.length>5?(t=e.substring(1,3),n=e.substring(3,5),r=e.substring(5,7),a=e.substring(7,9)):(t=e.substring(1,2),n=e.substring(2,3),r=e.substring(3,4),a=e.substring(4,5),t+=t,n+=n,r+=r,a+=a),{red:parseInt(t,16),green:parseInt(n,16),blue:parseInt(r,16),alpha:a?parseInt(a,16)/255:1}},transform:Sr.transform},_r={test:Er("hsl","hue"),parse:wr("hue","saturation","lightness"),transform:({hue:e,saturation:t,lightness:n,alpha:r=1})=>"hsla("+Math.round(e)+", "+Mt.transform(_t(t))+", "+Mt.transform(_t(n))+", "+_t(St.transform(r))+")"},Pr={test:e=>Sr.test(e)||Nr.test(e)||_r.test(e),parse:e=>Sr.test(e)?Sr.parse(e):_r.test(e)?_r.parse(e):Nr.parse(e),transform:e=>Ft(e)?e:e.hasOwnProperty("red")?Sr.transform(e):_r.transform(e)},Br=(e,t,n)=>-n*e+n*t+e;function Tr(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}const Fr=(e,t,n)=>{const r=e*e;return Math.sqrt(Math.max(0,n*(t*t-r)+r))},Rr=[Nr,Sr,_r];function Lr(e){const t=(n=e,Rr.find((e=>e.test(n))));var n;Jn(Boolean(t),`'${e}' is not an animatable color. Use the equivalent color code instead.`);let r=t.parse(e);return t===_r&&(r=function({hue:e,saturation:t,lightness:n,alpha:r}){e/=360,n/=100;let a=0,o=0,i=0;if(t/=100){const r=n<.5?n*(1+t):n+t-n*t,l=2*n-r;a=Tr(l,r,e+1/3),o=Tr(l,r,e),i=Tr(l,r,e-1/3)}else a=o=i=n;return{red:Math.round(255*a),green:Math.round(255*o),blue:Math.round(255*i),alpha:r}}(r)),r}const Mr=(e,t)=>{const n=Lr(e),r=Lr(t),a={...n};return e=>(a.red=Fr(n.red,r.red,e),a.green=Fr(n.green,r.green,e),a.blue=Fr(n.blue,r.blue,e),a.alpha=Br(n.alpha,r.alpha,e),Sr.transform(a))},Dr={regex:/var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\)/g,countKey:"Vars",token:"${v}",parse:yn},Or={regex:Bt,countKey:"Colors",token:"${c}",parse:Pr.parse},jr={regex:Pt,countKey:"Numbers",token:"${n}",parse:kt.parse};function zr(e,{regex:t,countKey:n,token:r,parse:a}){const o=e.tokenised.match(t);o&&(e["num"+n]=o.length,e.tokenised=e.tokenised.replace(t,r),e.values.push(...o.map(a)))}function Vr(e){const t=e.toString(),n={value:t,tokenised:t,values:[],numVars:0,numColors:0,numNumbers:0};return n.value.includes("var(--")&&zr(n,Dr),zr(n,Or),zr(n,jr),n}function Ir(e){return Vr(e).values}function Ur(e){const{values:t,numColors:n,numVars:r,tokenised:a}=Vr(e),o=t.length;return e=>{let t=a;for(let a=0;a<o;a++)t=a<r?t.replace(Dr.token,e[a]):a<r+n?t.replace(Or.token,Pr.transform(e[a])):t.replace(jr.token,_t(e[a]));return t}}const Wr=e=>"number"==typeof e?0:e,$r={test:function(e){var t,n;return isNaN(e)&&Ft(e)&&((null===(t=e.match(Pt))||void 0===t?void 0:t.length)||0)+((null===(n=e.match(Bt))||void 0===n?void 0:n.length)||0)>0},parse:Ir,createTransformer:Ur,getAnimatableNone:function(e){const t=Ir(e);return Ur(e)(t.map(Wr))}},Yr=(e,t)=>n=>`${n>0?t:e}`;function Hr(e,t){return"number"==typeof e?n=>Br(e,t,n):Pr.test(e)?Mr(e,t):e.startsWith("var(")?Yr(e,t):Kr(e,t)}const qr=(e,t)=>{const n=[...e],r=n.length,a=e.map(((e,n)=>Hr(e,t[n])));return e=>{for(let t=0;t<r;t++)n[t]=a[t](e);return n}},Qr=(e,t)=>{const n={...e,...t},r={};for(const a in n)void 0!==e[a]&&void 0!==t[a]&&(r[a]=Hr(e[a],t[a]));return e=>{for(const t in r)n[t]=r[t](e);return n}},Kr=(e,t)=>{const n=$r.createTransformer(t),r=Vr(e),a=Vr(t);return r.numVars===a.numVars&&r.numColors===a.numColors&&r.numNumbers>=a.numNumbers?Rn(qr(r.values,a.values),n):(Xn(!0,`Complex values '${e}' and '${t}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`),Yr(e,t))},Zr=(e,t,n)=>{const r=t-e;return 0===r?1:(n-e)/r},Gr=(e,t)=>n=>Br(e,t,n);function Xr(e,t,{clamp:n=!0,ease:r,mixer:a}={}){const o=e.length;if(Jn(o===t.length,"Both input and output ranges must be the same length"),1===o)return()=>t[0];e[0]>e[o-1]&&(e=[...e].reverse(),t=[...t].reverse());const i=function(e,t,n){const r=[],a=n||("number"==typeof(o=e[0])?Gr:"string"==typeof o?Pr.test(o)?Mr:Kr:Array.isArray(o)?qr:"object"==typeof o?Qr:Gr);var o;const i=e.length-1;for(let n=0;n<i;n++){let o=a(e[n],e[n+1]);if(t){const e=Array.isArray(t)?t[n]||yn:t;o=Rn(e,o)}r.push(o)}return r}(t,r,a),l=i.length,s=t=>{let n=0;if(l>1)for(;n<e.length-2&&!(t<e[n+1]);n++);const r=Zr(e[n],e[n+1],t);return i[n](r)};return n?t=>s(wt(e[0],e[o-1],t)):s}function Jr({duration:e=300,keyframes:t,times:n,ease:r="easeInOut"}){const a=pr(r)?r.map(Cr):Cr(r),o={done:!1,value:t[0]},i=function(e,t){return e.map((e=>e*t))}(n&&n.length===t.length?n:function(e){const t=[0];return function(e,t){const n=e[e.length-1];for(let r=1;r<=t;r++){const a=Zr(0,t,r);e.push(Br(n,1,a))}}(t,e.length-1),t}(t),e),l=Xr(i,t,{ease:Array.isArray(a)?a:(s=t,u=a,s.map((()=>u||dr)).splice(0,s.length-1))});var s,u;return{calculatedDuration:e,next:t=>(o.value=l(t),o.done=t>=e,o)}}function ea(e,t){return t?e*(1e3/t):0}const ta=5;function na(e,t,n){const r=Math.max(t-ta,0);return ea(n-e(r),t-r)}const ra=.001,aa=.01,oa=10,ia=.05,la=1;const sa=12;function ua(e,t){return e*Math.sqrt(1-t*t)}const ca=["duration","bounce"],da=["stiffness","damping","mass"];function pa(e,t){return t.some((t=>void 0!==e[t]))}function fa({keyframes:e,restDelta:t,restSpeed:n,...r}){const a=e[0],o=e[e.length-1],i={done:!1,value:a},{stiffness:l,damping:s,mass:u,velocity:c,duration:d,isResolvedFromDuration:p}=function(e){let t={velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1,...e};if(!pa(e,da)&&pa(e,ca)){const n=function({duration:e=800,bounce:t=.25,velocity:n=0,mass:r=1}){let a,o;Xn(e<=er(oa),"Spring duration must be 10 seconds or less");let i=1-t;i=wt(ia,la,i),e=wt(aa,oa,tr(e)),i<1?(a=t=>{const r=t*i,a=r*e,o=r-n,l=ua(t,i),s=Math.exp(-a);return ra-o/l*s},o=t=>{const r=t*i*e,o=r*n+n,l=Math.pow(i,2)*Math.pow(t,2)*e,s=Math.exp(-r),u=ua(Math.pow(t,2),i);return(-a(t)+ra>0?-1:1)*((o-l)*s)/u}):(a=t=>Math.exp(-t*e)*((t-n)*e+1)-ra,o=t=>Math.exp(-t*e)*(e*e*(n-t)));const l=function(e,t,n){let r=n;for(let n=1;n<sa;n++)r-=e(r)/t(r);return r}(a,o,5/e);if(e=er(e),isNaN(l))return{stiffness:100,damping:10,duration:e};{const t=Math.pow(l,2)*r;return{stiffness:t,damping:2*i*Math.sqrt(r*t),duration:e}}}(e);t={...t,...n,velocity:0,mass:1},t.isResolvedFromDuration=!0}return t}(r),f=c?-tr(c):0,m=s/(2*Math.sqrt(l*u)),h=o-a,g=tr(Math.sqrt(l/u)),v=Math.abs(h)<5;let y;if(n||(n=v?.01:2),t||(t=v?.005:.5),m<1){const e=ua(g,m);y=t=>{const n=Math.exp(-m*g*t);return o-n*((f+m*g*h)/e*Math.sin(e*t)+h*Math.cos(e*t))}}else if(1===m)y=e=>o-Math.exp(-g*e)*(h+(f+g*h)*e);else{const e=g*Math.sqrt(m*m-1);y=t=>{const n=Math.exp(-m*g*t),r=Math.min(e*t,300);return o-n*((f+m*g*h)*Math.sinh(r)+e*h*Math.cosh(r))/e}}return{calculatedDuration:p&&d||null,next:e=>{const r=y(e);if(p)i.done=e>=d;else{let a=f;0!==e&&(a=m<1?na(y,e,r):0);const l=Math.abs(a)<=n,s=Math.abs(o-r)<=t;i.done=l&&s}return i.value=i.done?o:r,i}}}function ma({keyframes:e,velocity:t=0,power:n=.8,timeConstant:r=325,bounceDamping:a=10,bounceStiffness:o=500,modifyTarget:i,min:l,max:s,restDelta:u=.5,restSpeed:c}){const d=e[0],p={done:!1,value:d},f=e=>void 0===l?s:void 0===s||Math.abs(l-e)<Math.abs(s-e)?l:s;let m=n*t;const h=d+m,g=void 0===i?h:i(h);g!==h&&(m=g-d);const v=e=>-m*Math.exp(-e/r),y=e=>g+v(e),b=e=>{const t=v(e),n=y(e);p.done=Math.abs(t)<=u,p.value=p.done?g:n};let x,A;const C=e=>{var t;t=p.value,(void 0!==l&&t<l||void 0!==s&&t>s)&&(x=e,A=fa({keyframes:[p.value,f(p.value)],velocity:na(y,e,p.value),damping:a,stiffness:o,restDelta:u,restSpeed:c}))};return C(0),{calculatedDuration:null,next:e=>{let t=!1;return A||void 0!==x||(t=!0,b(e),C(e)),void 0!==x&&e>x?A.next(e-x):(!t&&b(e),p)}}}const ha=e=>{const t=({timestamp:t})=>e(t);return{start:()=>An.update(t,!0),stop:()=>Cn(t),now:()=>En.isProcessing?En.timestamp:performance.now()}},ga=2e4;function va(e){let t=0,n=e.next(t);for(;!n.done&&t<ga;)t+=50,n=e.next(t);return t>=ga?1/0:t}const ya={decay:ma,inertia:ma,tween:Jr,keyframes:Jr,spring:fa};function ba({autoplay:e=!0,delay:t=0,driver:n=ha,keyframes:r,type:a="keyframes",repeat:o=0,repeatDelay:i=0,repeatType:l="loop",onPlay:s,onStop:u,onComplete:c,onUpdate:d,...p}){let f,m,h=1,g=!1;const v=()=>{m=new Promise((e=>{f=e}))};let y;v();const b=ya[a]||Jr;let x;b!==Jr&&"number"!=typeof r[0]&&(x=Xr([0,100],r,{clamp:!1}),r=[0,100]);const A=b({...p,keyframes:r});let C;"mirror"===l&&(C=b({...p,keyframes:[...r].reverse(),velocity:-(p.velocity||0)}));let E="idle",w=null,k=null,S=null;null===A.calculatedDuration&&o&&(A.calculatedDuration=va(A));const{calculatedDuration:N}=A;let _=1/0,P=1/0;null!==N&&(_=N+i,P=_*(o+1)-i);let B=0;const T=e=>{if(null===k)return;h>0&&(k=Math.min(k,e)),h<0&&(k=Math.min(e-P/h,k)),B=null!==w?w:Math.round(e-k)*h;const n=B-t*(h>=0?1:-1),a=h>=0?n<0:n>P;B=Math.max(n,0),"finished"===E&&null===w&&(B=P);let s=B,u=A;if(o){const e=B/_;let t=Math.floor(e),n=e%1;!n&&e>=1&&(n=1),1===n&&t--,t=Math.min(t,o+1);const r=Boolean(t%2);r&&("reverse"===l?(n=1-n,i&&(n-=i/_)):"mirror"===l&&(u=C));let a=wt(0,1,n);B>P&&(a="reverse"===l&&r?1:0),s=a*_}const c=a?{done:!1,value:r[0]}:u.next(s);x&&(c.value=x(c.value));let{done:p}=c;a||null===N||(p=h>=0?B>=P:B<=0);const f=null===w&&("finished"===E||"running"===E&&p);return d&&d(c.value),f&&L(),c},F=()=>{y&&y.stop(),y=void 0},R=()=>{E="idle",F(),f(),v(),k=S=null},L=()=>{E="finished",c&&c(),F(),f()},M=()=>{if(g)return;y||(y=n(T));const e=y.now();s&&s(),null!==w?k=e-w:k&&"finished"!==E||(k=e),"finished"===E&&v(),S=k,w=null,E="running",y.start()};e&&M();const D={then:(e,t)=>m.then(e,t),get time(){return tr(B)},set time(e){e=er(e),B=e,null===w&&y&&0!==h?k=y.now()-e/h:w=e},get duration(){const e=null===A.calculatedDuration?va(A):A.calculatedDuration;return tr(e)},get speed(){return h},set speed(e){e!==h&&y&&(h=e,D.time=tr(B))},get state(){return E},play:M,pause:()=>{E="paused",w=B},stop:()=>{g=!0,"idle"!==E&&(E="idle",u&&u(),R())},cancel:()=>{null!==S&&T(S),R()},complete:()=>{E="finished"},sample:e=>(k=0,T(e))};return D}const xa=function(e){let t;return()=>(void 0===t&&(t=Object.hasOwnProperty.call(Element.prototype,"animate")),t)}(),Aa=new Set(["opacity","clipPath","filter","transform","backgroundColor"]);const Ca={type:"spring",stiffness:500,damping:25,restSpeed:10},Ea={type:"keyframes",duration:.8},wa={type:"keyframes",ease:[.25,.1,.35,1],duration:.3},ka=(e,{keyframes:t})=>t.length>2?Ea:ht.has(e)?e.startsWith("scale")?{type:"spring",stiffness:550,damping:0===t[1]?2*Math.sqrt(550):30,restSpeed:10}:Ca:wa,Sa=(e,t)=>!("zIndex"===e||"number"!=typeof t&&!Array.isArray(t)&&("string"!=typeof t||!$r.test(t)&&"0"!==t||t.startsWith("url("))),Na=new Set(["brightness","contrast","saturate","opacity"]);function _a(e){const[t,n]=e.slice(0,-1).split("(");if("drop-shadow"===t)return e;const[r]=n.match(Pt)||[];if(!r)return e;const a=n.replace(r,"");let o=Na.has(t)?1:0;return r!==n&&(o*=100),t+"("+o+a+")"}const Pa=/([a-z-]*)\(.*?\)/g,Ba={...$r,getAnimatableNone:e=>{const t=e.match(Pa);return t?t.map(_a).join(" "):e}},Ta={...It,color:Pr,backgroundColor:Pr,outlineColor:Pr,fill:Pr,stroke:Pr,borderColor:Pr,borderTopColor:Pr,borderRightColor:Pr,borderBottomColor:Pr,borderLeftColor:Pr,filter:Ba,WebkitFilter:Ba},Fa=e=>Ta[e];function Ra(e,t){let n=Fa(e);return n!==Ba&&(n=$r),n.getAnimatableNone?n.getAnimatableNone(t):void 0}const La=e=>/^0[^.\s]+$/.test(e);function Ma(e){return"number"==typeof e?0===e:null!==e?"none"===e||"0"===e||La(e):void 0}function Da(e,t){return e[t]||e.default||e}const Oa=(e,t,n,r={})=>a=>{const o=Da(r,e)||{},i=o.delay||r.delay||0;let{elapsed:l=0}=r;l-=er(i);const s=function(e,t,n,r){const a=Sa(t,n);let o;o=Array.isArray(n)?[...n]:[null,n];const i=void 0!==r.from?r.from:e.get();let l;const s=[];for(let e=0;e<o.length;e++)null===o[e]&&(o[e]=0===e?i:o[e-1]),Ma(o[e])&&s.push(e),"string"==typeof o[e]&&"none"!==o[e]&&"0"!==o[e]&&(l=o[e]);if(a&&s.length&&l)for(let e=0;e<s.length;e++)o[s[e]]=Ra(t,l);return o}(t,e,n,o),u=s[0],c=s[s.length-1],d=Sa(e,u),p=Sa(e,c);Xn(d===p,`You are trying to animate ${e} from "${u}" to "${c}". ${u} is not an animatable value - to enable this animation set ${u} to a value animatable to ${c} via the \`style\` property.`);let f={keyframes:s,velocity:t.getVelocity(),ease:"easeOut",...o,delay:-l,onUpdate:e=>{t.set(e),o.onUpdate&&o.onUpdate(e)},onComplete:()=>{a(),o.onComplete&&o.onComplete()}};if(function({when:e,delay:t,delayChildren:n,staggerChildren:r,staggerDirection:a,repeat:o,repeatType:i,repeatDelay:l,from:s,elapsed:u,...c}){return!!Object.keys(c).length}(o)||(f={...f,...ka(e,f)}),f.duration&&(f.duration=er(f.duration)),f.repeatDelay&&(f.repeatDelay=er(f.repeatDelay)),!d||!p||!1===o.type)return function({keyframes:e,delay:t,onUpdate:n,onComplete:r}){const a=()=>(n&&n(e[e.length-1]),r&&r(),{time:0,speed:1,duration:0,play:yn,pause:yn,stop:yn,then:e=>(e(),Promise.resolve()),cancel:yn,complete:yn});return t?ba({keyframes:[0,1],duration:0,delay:t,onComplete:a}):a()}(f);if(t.owner&&t.owner.current instanceof HTMLElement&&!t.owner.getProps().onUpdate){const n=function(e,t,{onUpdate:n,onComplete:r,...a}){if(!xa()||!Aa.has(t)||a.repeatDelay||"mirror"===a.repeatType||0===a.damping||"inertia"===a.type)return!1;let o,i,l=!1;const s=()=>{i=new Promise((e=>{o=e}))};s();let{keyframes:u,duration:c=300,ease:d,times:p}=a;if(((e,t)=>"spring"===t.type||"backgroundColor"===e||!rr(t.ease))(t,a)){const e=ba({...a,repeat:0,delay:0});let t={done:!1,value:u[0]};const n=[];let r=0;for(;!t.done&&r<2e4;)t=e.sample(r),n.push(t.value),r+=10;p=void 0,u=n,c=r-10,d="linear"}const f=function(e,t,n,{delay:r=0,duration:a,repeat:o=0,repeatType:i="loop",ease:l,times:s}={}){const u={[t]:n};s&&(u.offset=s);const c=ir(l);return Array.isArray(c)&&(u.easing=c),e.animate(u,{delay:r,duration:a,easing:Array.isArray(c)?"linear":c,fill:"both",iterations:o+1,direction:"reverse"===i?"alternate":"normal"})}(e.owner.current,t,u,{...a,duration:c,ease:d,times:p});a.syncStart&&(f.startTime=En.isProcessing?En.timestamp:document.timeline?document.timeline.currentTime:performance.now());const m=()=>f.cancel(),h=()=>{An.update(m),o(),s()};return f.onfinish=()=>{e.set(function(e,{repeat:t,repeatType:n="loop"}){return e[t&&"loop"!==n&&t%2==1?0:e.length-1]}(u,a)),r&&r(),h()},{then:(e,t)=>i.then(e,t),attachTimeline:e=>(f.timeline=e,f.onfinish=null,yn),get time(){return tr(f.currentTime||0)},set time(e){f.currentTime=er(e)},get speed(){return f.playbackRate},set speed(e){f.playbackRate=e},get duration(){return tr(c)},play:()=>{l||(f.play(),Cn(m))},pause:()=>f.pause(),stop:()=>{if(l=!0,"idle"===f.playState)return;const{currentTime:t}=f;if(t){const n=ba({...a,autoplay:!1});e.setWithVelocity(n.sample(t-10).value,n.sample(t).value,10)}h()},complete:()=>f.finish(),cancel:h}}(t,e,f);if(n)return n}return ba(f)};function ja(e){return Boolean(vt(e)&&e.add)}const za=e=>/^\-?\d*\.?\d+$/.test(e);function Va(e,t){-1===e.indexOf(t)&&e.push(t)}function Ia(e,t){const n=e.indexOf(t);n>-1&&e.splice(n,1)}class Ua{constructor(){this.subscriptions=[]}add(e){return Va(this.subscriptions,e),()=>Ia(this.subscriptions,e)}notify(e,t,n){const r=this.subscriptions.length;if(r)if(1===r)this.subscriptions[0](e,t,n);else for(let a=0;a<r;a++){const r=this.subscriptions[a];r&&r(e,t,n)}}getSize(){return this.subscriptions.length}clear(){this.subscriptions.length=0}}const Wa={current:void 0};class $a{constructor(e,t={}){var n;this.version="10.16.4",this.timeDelta=0,this.lastUpdated=0,this.canTrackVelocity=!1,this.events={},this.updateAndNotify=(e,t=!0)=>{this.prev=this.current,this.current=e;const{delta:n,timestamp:r}=En;this.lastUpdated!==r&&(this.timeDelta=n,this.lastUpdated=r,An.postRender(this.scheduleVelocityCheck)),this.prev!==this.current&&this.events.change&&this.events.change.notify(this.current),this.events.velocityChange&&this.events.velocityChange.notify(this.getVelocity()),t&&this.events.renderRequest&&this.events.renderRequest.notify(this.current)},this.scheduleVelocityCheck=()=>An.postRender(this.velocityCheck),this.velocityCheck=({timestamp:e})=>{e!==this.lastUpdated&&(this.prev=this.current,this.events.velocityChange&&this.events.velocityChange.notify(this.getVelocity()))},this.hasAnimated=!1,this.prev=this.current=e,this.canTrackVelocity=(n=this.current,!isNaN(parseFloat(n))),this.owner=t.owner}onChange(e){return this.on("change",e)}on(e,t){this.events[e]||(this.events[e]=new Ua);const n=this.events[e].add(t);return"change"===e?()=>{n(),An.read((()=>{this.events.change.getSize()||this.stop()}))}:n}clearListeners(){for(const e in this.events)this.events[e].clear()}attach(e,t){this.passiveEffect=e,this.stopPassiveEffect=t}set(e,t=!0){t&&this.passiveEffect?this.passiveEffect(e,this.updateAndNotify):this.updateAndNotify(e,t)}setWithVelocity(e,t,n){this.set(t),this.prev=e,this.timeDelta=n}jump(e){this.updateAndNotify(e),this.prev=e,this.stop(),this.stopPassiveEffect&&this.stopPassiveEffect()}get(){return Wa.current&&Wa.current.push(this),this.current}getPrevious(){return this.prev}getVelocity(){return this.canTrackVelocity?ea(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0}start(e){return this.stop(),new Promise((t=>{this.hasAnimated=!0,this.animation=e(t),this.events.animationStart&&this.events.animationStart.notify()})).then((()=>{this.events.animationComplete&&this.events.animationComplete.notify(),this.clearAnimation()}))}stop(){this.animation&&(this.animation.stop(),this.events.animationCancel&&this.events.animationCancel.notify()),this.clearAnimation()}isAnimating(){return!!this.animation}clearAnimation(){delete this.animation}destroy(){this.clearListeners(),this.stop(),this.stopPassiveEffect&&this.stopPassiveEffect()}}function Ya(e,t){return new $a(e,t)}const Ha=e=>t=>t.test(e),qa=[kt,Dt,Mt,Lt,jt,Ot,{test:e=>"auto"===e,parse:e=>e}],Qa=e=>qa.find(Ha(e)),Ka=[...qa,Pr,$r];function Za(e,t,n){e.hasValue(t)?e.getValue(t).set(n):e.addValue(t,Ya(n))}function Ga(e,t){if(t)return(t[e]||t.default||t).from}function Xa({protectedKeys:e,needsAnimating:t},n){const r=e.hasOwnProperty(n)&&!0!==t[n];return t[n]=!1,r}function Ja(e,t,{delay:n=0,transitionOverride:r,type:a}={}){let{transition:o=e.getDefaultTransition(),transitionEnd:i,...l}=e.makeTargetAnimatable(t);const s=e.getValue("willChange");r&&(o=r);const u=[],c=a&&e.animationState&&e.animationState.getState()[a];for(const t in l){const r=e.getValue(t),a=l[t];if(!r||void 0===a||c&&Xa(c,t))continue;const i={delay:n,elapsed:0,...o};if(window.HandoffAppearAnimations&&!r.hasAnimated){const n=e.getProps()[Gn];n&&(i.elapsed=window.HandoffAppearAnimations(n,t,r,An),i.syncStart=!0)}r.start(Oa(t,r,a,e.shouldReduceMotion&&ht.has(t)?{type:!1}:i));const d=r.animation;ja(s)&&(s.add(t),d.then((()=>s.remove(t)))),u.push(d)}return i&&Promise.all(u).then((()=>{i&&function(e,t){const n=Zn(e,t);let{transitionEnd:r={},transition:a={},...o}=n?e.makeTargetAnimatable(n,!1):{};o={...o,...r};for(const t in o)Za(e,t,mn(o[t]))}(e,i)})),u}function eo(e,t,n={}){const r=Zn(e,t,n.custom);let{transition:a=e.getDefaultTransition()||{}}=r||{};n.transitionOverride&&(a=n.transitionOverride);const o=r?()=>Promise.all(Ja(e,r,n)):()=>Promise.resolve(),i=e.variantChildren&&e.variantChildren.size?(r=0)=>{const{delayChildren:o=0,staggerChildren:i,staggerDirection:l}=a;return function(e,t,n=0,r=0,a=1,o){const i=[],l=(e.variantChildren.size-1)*r,s=1===a?(e=0)=>e*r:(e=0)=>l-e*r;return Array.from(e.variantChildren).sort(to).forEach(((e,r)=>{e.notify("AnimationStart",t),i.push(eo(e,t,{...o,delay:n+s(r)}).then((()=>e.notify("AnimationComplete",t))))})),Promise.all(i)}(e,t,o+r,i,l,n)}:()=>Promise.resolve(),{when:l}=a;if(l){const[e,t]="beforeChildren"===l?[o,i]:[i,o];return e().then((()=>t()))}return Promise.all([o(),i(n.delay)])}function to(e,t){return e.sortNodePosition(t)}const no=[...Xe].reverse(),ro=Xe.length;function ao(e){let t=function(e){return t=>Promise.all(t.map((({animation:t,options:n})=>function(e,t,n={}){let r;if(e.notify("AnimationStart",t),Array.isArray(t)){const a=t.map((t=>eo(e,t,n)));r=Promise.all(a)}else if("string"==typeof t)r=eo(e,t,n);else{const a="function"==typeof t?Zn(e,t,n.custom):t;r=Promise.all(Ja(e,a,n))}return r.then((()=>e.notify("AnimationComplete",t)))}(e,t,n))))}(e);const n={animate:oo(!0),whileInView:oo(),whileHover:oo(),whileTap:oo(),whileDrag:oo(),whileFocus:oo(),exit:oo()};let r=!0;const a=(t,n)=>{const r=Zn(e,n);if(r){const{transition:e,transitionEnd:n,...a}=r;t={...t,...a,...n}}return t};function o(o,i){const l=e.getProps(),s=e.getVariantContext(!0)||{},u=[],c=new Set;let d={},p=1/0;for(let t=0;t<ro;t++){const h=no[t],g=n[h],v=void 0!==l[h]?l[h]:s[h],y=Ze(v),b=h===i?g.isActive:null;!1===b&&(p=t);let x=v===s[h]&&v!==l[h]&&y;if(x&&r&&e.manuallyAnimateOnMount&&(x=!1),g.protectedKeys={...d},!g.isActive&&null===b||!v&&!g.prevProp||Ge(v)||"boolean"==typeof v)continue;const A=(f=g.prevProp,"string"==typeof(m=v)?m!==f:!!Array.isArray(m)&&!Kn(m,f));let C=A||h===i&&g.isActive&&!x&&y||t>p&&y;const E=Array.isArray(v)?v:[v];let w=E.reduce(a,{});!1===b&&(w={});const{prevResolvedValues:k={}}=g,S={...k,...w},N=e=>{C=!0,c.delete(e),g.needsAnimating[e]=!0};for(const e in S){const t=w[e],n=k[e];d.hasOwnProperty(e)||(t!==n?pn(t)&&pn(n)?!Kn(t,n)||A?N(e):g.protectedKeys[e]=!0:void 0!==t?N(e):c.add(e):void 0!==t&&c.has(e)?N(e):g.protectedKeys[e]=!0)}g.prevProp=v,g.prevResolvedValues=w,g.isActive&&(d={...d,...w}),r&&e.blockInitialAnimation&&(C=!1),C&&!x&&u.push(...E.map((e=>({animation:e,options:{type:h,...o}}))))}var f,m;if(c.size){const t={};c.forEach((n=>{const r=e.getBaseTarget(n);void 0!==r&&(t[n]=r)})),u.push({animation:t})}let h=Boolean(u.length);return r&&!1===l.initial&&!e.manuallyAnimateOnMount&&(h=!1),r=!1,h?t(u):Promise.resolve()}return{animateChanges:o,setActive:function(t,r,a){var i;if(n[t].isActive===r)return Promise.resolve();null===(i=e.variantChildren)||void 0===i||i.forEach((e=>{var n;return null===(n=e.animationState)||void 0===n?void 0:n.setActive(t,r)})),n[t].isActive=r;const l=o(a,t);for(const e in n)n[e].protectedKeys={};return l},setAnimateFunction:function(n){t=n(e)},getState:()=>n}}function oo(e=!1){return{isActive:e,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}let io=0;const lo={animation:{Feature:class extends zn{constructor(e){super(e),e.animationState||(e.animationState=ao(e))}updateAnimationControlsSubscription(){const{animate:e}=this.node.getProps();this.unmount(),Ge(e)&&(this.unmount=e.subscribe(this.node))}mount(){this.updateAnimationControlsSubscription()}update(){const{animate:e}=this.node.getProps(),{animate:t}=this.node.prevProps||{};e!==t&&this.updateAnimationControlsSubscription()}unmount(){}}},exit:{Feature:class extends zn{constructor(){super(...arguments),this.id=io++}update(){if(!this.node.presenceContext)return;const{isPresent:e,onExitComplete:t,custom:n}=this.node.presenceContext,{isPresent:r}=this.node.prevPresenceContext||{};if(!this.node.animationState||e===r)return;const a=this.node.animationState.setActive("exit",!e,{custom:null!=n?n:this.node.getProps().custom});t&&!e&&a.then((()=>t(this.id)))}mount(){const{register:e}=this.node.presenceContext||{};e&&(this.unmount=e(this.id))}unmount(){}}}},so=(e,t)=>Math.abs(e-t);class uo{constructor(e,t,{transformPagePoint:n}={}){if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.updatePoint=()=>{if(!this.lastMoveEvent||!this.lastMoveEventInfo)return;const e=fo(this.lastMoveEventInfo,this.history),t=null!==this.startEvent,n=function(e,t){const n=so(e.x,t.x),r=so(e.y,t.y);return Math.sqrt(n**2+r**2)}(e.offset,{x:0,y:0})>=3;if(!t&&!n)return;const{point:r}=e,{timestamp:a}=En;this.history.push({...r,timestamp:a});const{onStart:o,onMove:i}=this.handlers;t||(o&&o(this.lastMoveEvent,e),this.startEvent=this.lastMoveEvent),i&&i(this.lastMoveEvent,e)},this.handlePointerMove=(e,t)=>{this.lastMoveEvent=e,this.lastMoveEventInfo=co(t,this.transformPagePoint),An.update(this.updatePoint,!0)},this.handlePointerUp=(e,t)=>{if(this.end(),!this.lastMoveEvent||!this.lastMoveEventInfo)return;const{onEnd:n,onSessionEnd:r}=this.handlers,a=fo("pointercancel"===e.type?this.lastMoveEventInfo:co(t,this.transformPagePoint),this.history);this.startEvent&&n&&n(e,a),r&&r(e,a)},!_n(e))return;this.handlers=t,this.transformPagePoint=n;const r=co(Pn(e),this.transformPagePoint),{point:a}=r,{timestamp:o}=En;this.history=[{...a,timestamp:o}];const{onSessionStart:i}=t;i&&i(e,fo(r,this.history)),this.removeListeners=Rn(Tn(window,"pointermove",this.handlePointerMove),Tn(window,"pointerup",this.handlePointerUp),Tn(window,"pointercancel",this.handlePointerUp))}updateHandlers(e){this.handlers=e}end(){this.removeListeners&&this.removeListeners(),Cn(this.updatePoint)}}function co(e,t){return t?{point:t(e.point)}:e}function po(e,t){return{x:e.x-t.x,y:e.y-t.y}}function fo({point:e},t){return{point:e,delta:po(e,ho(t)),offset:po(e,mo(t)),velocity:go(t,.1)}}function mo(e){return e[0]}function ho(e){return e[e.length-1]}function go(e,t){if(e.length<2)return{x:0,y:0};let n=e.length-1,r=null;const a=ho(e);for(;n>=0&&(r=e[n],!(a.timestamp-r.timestamp>er(t)));)n--;if(!r)return{x:0,y:0};const o=tr(a.timestamp-r.timestamp);if(0===o)return{x:0,y:0};const i={x:(a.x-r.x)/o,y:(a.y-r.y)/o};return i.x===1/0&&(i.x=0),i.y===1/0&&(i.y=0),i}function vo(e){return e.max-e.min}function yo(e,t=0,n=.01){return Math.abs(e-t)<=n}function bo(e,t,n,r=.5){e.origin=r,e.originPoint=Br(t.min,t.max,e.origin),e.scale=vo(n)/vo(t),(yo(e.scale,1,1e-4)||isNaN(e.scale))&&(e.scale=1),e.translate=Br(n.min,n.max,e.origin)-e.originPoint,(yo(e.translate)||isNaN(e.translate))&&(e.translate=0)}function xo(e,t,n,r){bo(e.x,t.x,n.x,r?r.originX:void 0),bo(e.y,t.y,n.y,r?r.originY:void 0)}function Ao(e,t,n){e.min=n.min+t.min,e.max=e.min+vo(t)}function Co(e,t,n){e.min=t.min-n.min,e.max=e.min+vo(t)}function Eo(e,t,n){Co(e.x,t.x,n.x),Co(e.y,t.y,n.y)}function wo(e,t,n){return{min:void 0!==t?e.min+t:void 0,max:void 0!==n?e.max+n-(e.max-e.min):void 0}}function ko(e,t){let n=t.min-e.min,r=t.max-e.max;return t.max-t.min<e.max-e.min&&([n,r]=[r,n]),{min:n,max:r}}const So=.35;function No(e,t,n){return{min:_o(e,t),max:_o(e,n)}}function _o(e,t){return"number"==typeof e?e:e[t]||0}const Po=()=>({x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}}),Bo=()=>({x:{min:0,max:0},y:{min:0,max:0}});function To(e){return[e("x"),e("y")]}function Fo({top:e,left:t,right:n,bottom:r}){return{x:{min:t,max:n},y:{min:e,max:r}}}function Ro(e){return void 0===e||1===e}function Lo({scale:e,scaleX:t,scaleY:n}){return!Ro(e)||!Ro(t)||!Ro(n)}function Mo(e){return Lo(e)||Do(e)||e.z||e.rotate||e.rotateX||e.rotateY}function Do(e){return Oo(e.x)||Oo(e.y)}function Oo(e){return e&&"0%"!==e}function jo(e,t,n){return n+t*(e-n)}function zo(e,t,n,r,a){return void 0!==a&&(e=jo(e,a,r)),jo(e,n,r)+t}function Vo(e,t=0,n=1,r,a){e.min=zo(e.min,t,n,r,a),e.max=zo(e.max,t,n,r,a)}function Io(e,{x:t,y:n}){Vo(e.x,t.translate,t.scale,t.originPoint),Vo(e.y,n.translate,n.scale,n.originPoint)}function Uo(e){return Number.isInteger(e)||e>1.0000000000001||e<.999999999999?e:1}function Wo(e,t){e.min=e.min+t,e.max=e.max+t}function $o(e,t,[n,r,a]){const o=void 0!==t[a]?t[a]:.5,i=Br(e.min,e.max,o);Vo(e,t[n],t[r],i,t.scale)}const Yo=["x","scaleX","originX"],Ho=["y","scaleY","originY"];function qo(e,t){$o(e.x,t,Yo),$o(e.y,t,Ho)}function Qo(e,t){return Fo(function(e,t){if(!t)return e;const n=t({x:e.left,y:e.top}),r=t({x:e.right,y:e.bottom});return{top:n.y,left:n.x,bottom:r.y,right:r.x}}(e.getBoundingClientRect(),t))}const Ko=new WeakMap;class Zo{constructor(e){this.openGlobalLock=null,this.isDragging=!1,this.currentDirection=null,this.originPoint={x:0,y:0},this.constraints=!1,this.hasMutatedConstraints=!1,this.elastic=Bo(),this.visualElement=e}start(e,{snapToCursor:t=!1}={}){const{presenceContext:n}=this.visualElement;n&&!1===n.isPresent||(this.panSession=new uo(e,{onSessionStart:e=>{this.stopAnimation(),t&&this.snapToCursor(Pn(e,"page").point)},onStart:(e,t)=>{const{drag:n,dragPropagation:r,onDragStart:a}=this.getProps();if(n&&!r&&(this.openGlobalLock&&this.openGlobalLock(),this.openGlobalLock=On(n),!this.openGlobalLock))return;this.isDragging=!0,this.currentDirection=null,this.resolveConstraints(),this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!0,this.visualElement.projection.target=void 0),To((e=>{let t=this.getAxisMotionValue(e).get()||0;if(Mt.test(t)){const{projection:n}=this.visualElement;if(n&&n.layout){const r=n.layout.layoutBox[e];r&&(t=vo(r)*(parseFloat(t)/100))}}this.originPoint[e]=t})),a&&An.update((()=>a(e,t)),!1,!0);const{animationState:o}=this.visualElement;o&&o.setActive("whileDrag",!0)},onMove:(e,t)=>{const{dragPropagation:n,dragDirectionLock:r,onDirectionLock:a,onDrag:o}=this.getProps();if(!n&&!this.openGlobalLock)return;const{offset:i}=t;if(r&&null===this.currentDirection)return this.currentDirection=function(e,t=10){let n=null;return Math.abs(e.y)>t?n="y":Math.abs(e.x)>t&&(n="x"),n}(i),void(null!==this.currentDirection&&a&&a(this.currentDirection));this.updateAxis("x",t.point,i),this.updateAxis("y",t.point,i),this.visualElement.render(),o&&o(e,t)},onSessionEnd:(e,t)=>this.stop(e,t)},{transformPagePoint:this.visualElement.getTransformPagePoint()}))}stop(e,t){const n=this.isDragging;if(this.cancel(),!n)return;const{velocity:r}=t;this.startAnimation(r);const{onDragEnd:a}=this.getProps();a&&An.update((()=>a(e,t)))}cancel(){this.isDragging=!1;const{projection:e,animationState:t}=this.visualElement;e&&(e.isAnimationBlocked=!1),this.panSession&&this.panSession.end(),this.panSession=void 0;const{dragPropagation:n}=this.getProps();!n&&this.openGlobalLock&&(this.openGlobalLock(),this.openGlobalLock=null),t&&t.setActive("whileDrag",!1)}updateAxis(e,t,n){const{drag:r}=this.getProps();if(!n||!Go(e,r,this.currentDirection))return;const a=this.getAxisMotionValue(e);let o=this.originPoint[e]+n[e];this.constraints&&this.constraints[e]&&(o=function(e,{min:t,max:n},r){return void 0!==t&&e<t?e=r?Br(t,e,r.min):Math.max(e,t):void 0!==n&&e>n&&(e=r?Br(n,e,r.max):Math.min(e,n)),e}(o,this.constraints[e],this.elastic[e])),a.set(o)}resolveConstraints(){const{dragConstraints:e,dragElastic:t}=this.getProps(),{layout:n}=this.visualElement.projection||{},r=this.constraints;e&&Ke(e)?this.constraints||(this.constraints=this.resolveRefConstraints()):this.constraints=!(!e||!n)&&function(e,{top:t,left:n,bottom:r,right:a}){return{x:wo(e.x,n,a),y:wo(e.y,t,r)}}(n.layoutBox,e),this.elastic=function(e=So){return!1===e?e=0:!0===e&&(e=So),{x:No(e,"left","right"),y:No(e,"top","bottom")}}(t),r!==this.constraints&&n&&this.constraints&&!this.hasMutatedConstraints&&To((e=>{this.getAxisMotionValue(e)&&(this.constraints[e]=function(e,t){const n={};return void 0!==t.min&&(n.min=t.min-e.min),void 0!==t.max&&(n.max=t.max-e.min),n}(n.layoutBox[e],this.constraints[e]))}))}resolveRefConstraints(){const{dragConstraints:e,onMeasureDragConstraints:t}=this.getProps();if(!e||!Ke(e))return!1;const n=e.current;Jn(null!==n,"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");const{projection:r}=this.visualElement;if(!r||!r.layout)return!1;const a=function(e,t,n){const r=Qo(e,n),{scroll:a}=t;return a&&(Wo(r.x,a.offset.x),Wo(r.y,a.offset.y)),r}(n,r.root,this.visualElement.getTransformPagePoint());let o=function(e,t){return{x:ko(e.x,t.x),y:ko(e.y,t.y)}}(r.layout.layoutBox,a);if(t){const e=t(function({x:e,y:t}){return{top:t.min,right:e.max,bottom:t.max,left:e.min}}(o));this.hasMutatedConstraints=!!e,e&&(o=Fo(e))}return o}startAnimation(e){const{drag:t,dragMomentum:n,dragElastic:r,dragTransition:a,dragSnapToOrigin:o,onDragTransitionEnd:i}=this.getProps(),l=this.constraints||{},s=To((i=>{if(!Go(i,t,this.currentDirection))return;let s=l&&l[i]||{};o&&(s={min:0,max:0});const u=r?200:1e6,c=r?40:1e7,d={type:"inertia",velocity:n?e[i]:0,bounceStiffness:u,bounceDamping:c,timeConstant:750,restDelta:1,restSpeed:10,...a,...s};return this.startAxisValueAnimation(i,d)}));return Promise.all(s).then(i)}startAxisValueAnimation(e,t){const n=this.getAxisMotionValue(e);return n.start(Oa(e,n,0,t))}stopAnimation(){To((e=>this.getAxisMotionValue(e).stop()))}getAxisMotionValue(e){const t="_drag"+e.toUpperCase(),n=this.visualElement.getProps();return n[t]||this.visualElement.getValue(e,(n.initial?n.initial[e]:void 0)||0)}snapToCursor(e){To((t=>{const{drag:n}=this.getProps();if(!Go(t,n,this.currentDirection))return;const{projection:r}=this.visualElement,a=this.getAxisMotionValue(t);if(r&&r.layout){const{min:n,max:o}=r.layout.layoutBox[t];a.set(e[t]-Br(n,o,.5))}}))}scalePositionWithinConstraints(){if(!this.visualElement.current)return;const{drag:e,dragConstraints:t}=this.getProps(),{projection:n}=this.visualElement;if(!Ke(t)||!n||!this.constraints)return;this.stopAnimation();const r={x:0,y:0};To((e=>{const t=this.getAxisMotionValue(e);if(t){const n=t.get();r[e]=function(e,t){let n=.5;const r=vo(e),a=vo(t);return a>r?n=Zr(t.min,t.max-r,e.min):r>a&&(n=Zr(e.min,e.max-a,t.min)),wt(0,1,n)}({min:n,max:n},this.constraints[e])}}));const{transformTemplate:a}=this.visualElement.getProps();this.visualElement.current.style.transform=a?a({},""):"none",n.root&&n.root.updateScroll(),n.updateLayout(),this.resolveConstraints(),To((t=>{if(!Go(t,e,null))return;const n=this.getAxisMotionValue(t),{min:a,max:o}=this.constraints[t];n.set(Br(a,o,r[t]))}))}addListeners(){if(!this.visualElement.current)return;Ko.set(this.visualElement,this);const e=Tn(this.visualElement.current,"pointerdown",(e=>{const{drag:t,dragListener:n=!0}=this.getProps();t&&n&&this.start(e)})),t=()=>{const{dragConstraints:e}=this.getProps();Ke(e)&&(this.constraints=this.resolveRefConstraints())},{projection:n}=this.visualElement,r=n.addEventListener("measure",t);n&&!n.layout&&(n.root&&n.root.updateScroll(),n.updateLayout()),t();const a=Nn(window,"resize",(()=>this.scalePositionWithinConstraints())),o=n.addEventListener("didUpdate",(({delta:e,hasLayoutChanged:t})=>{this.isDragging&&t&&(To((t=>{const n=this.getAxisMotionValue(t);n&&(this.originPoint[t]+=e[t].translate,n.set(n.get()+e[t].translate))})),this.visualElement.render())}));return()=>{a(),e(),r(),o&&o()}}getProps(){const e=this.visualElement.getProps(),{drag:t=!1,dragDirectionLock:n=!1,dragPropagation:r=!1,dragConstraints:a=!1,dragElastic:o=So,dragMomentum:i=!0}=e;return{...e,drag:t,dragDirectionLock:n,dragPropagation:r,dragConstraints:a,dragElastic:o,dragMomentum:i}}}function Go(e,t,n){return!(!0!==t&&t!==e||null!==n&&n!==e)}const Xo=e=>(t,n)=>{e&&An.update((()=>e(t,n)))},Jo={hasAnimatedSinceResize:!0,hasEverUpdated:!1};function ei(e,t){return t.max===t.min?0:e/(t.max-t.min)*100}const ti={correct:(e,t)=>{if(!t.target)return e;if("string"==typeof e){if(!Dt.test(e))return e;e=parseFloat(e)}return`${ei(e,t.target.x)}% ${ei(e,t.target.y)}%`}},ni={correct:(e,{treeScale:t,projectionDelta:n})=>{const r=e,a=$r.parse(e);if(a.length>5)return r;const o=$r.createTransformer(e),i="number"!=typeof a[0]?1:0,l=n.x.scale*t.x,s=n.y.scale*t.y;a[0+i]/=l,a[1+i]/=s;const u=Br(l,s,.5);return"number"==typeof a[2+i]&&(a[2+i]/=u),"number"==typeof a[3+i]&&(a[3+i]/=u),o(a)}};class ri extends t.Component{componentDidMount(){const{visualElement:e,layoutGroup:t,switchLayoutGroup:n,layoutId:r}=this.props,{projection:a}=e;var o;o=oi,Object.assign(ft,o),a&&(t.group&&t.group.add(a),n&&n.register&&r&&n.register(a),a.root.didUpdate(),a.addEventListener("animationComplete",(()=>{this.safeToRemove()})),a.setOptions({...a.options,onExitComplete:()=>this.safeToRemove()})),Jo.hasEverUpdated=!0}getSnapshotBeforeUpdate(e){const{layoutDependency:t,visualElement:n,drag:r,isPresent:a}=this.props,o=n.projection;return o?(o.isPresent=a,r||e.layoutDependency!==t||void 0===t?o.willUpdate():this.safeToRemove(),e.isPresent!==a&&(a?o.promote():o.relegate()||An.postRender((()=>{const e=o.getStack();e&&e.members.length||this.safeToRemove()}))),null):null}componentDidUpdate(){const{projection:e}=this.props.visualElement;e&&(e.root.didUpdate(),queueMicrotask((()=>{!e.currentAnimation&&e.isLead()&&this.safeToRemove()})))}componentWillUnmount(){const{visualElement:e,layoutGroup:t,switchLayoutGroup:n}=this.props,{projection:r}=e;r&&(r.scheduleCheckAfterUnmount(),t&&t.group&&t.group.remove(r),n&&n.deregister&&n.deregister(r))}safeToRemove(){const{safeToRemove:e}=this.props;e&&e()}render(){return null}}function ai(e){const[n,r]=function(){const e=(0,t.useContext)(Ye);if(null===e)return[!0,null];const{isPresent:n,onExitComplete:r,register:a}=e,o=(0,t.useId)();return(0,t.useEffect)((()=>a(o)),[]),!n&&r?[!1,()=>r&&r(o)]:[!0]}(),a=(0,t.useContext)(ot);return t.createElement(ri,{...e,layoutGroup:a,switchLayoutGroup:(0,t.useContext)(it),isPresent:n,safeToRemove:r})}const oi={borderRadius:{...ti,applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]},borderTopLeftRadius:ti,borderTopRightRadius:ti,borderBottomLeftRadius:ti,borderBottomRightRadius:ti,boxShadow:ni},ii=["TopLeft","TopRight","BottomLeft","BottomRight"],li=ii.length,si=e=>"string"==typeof e?parseFloat(e):e,ui=e=>"number"==typeof e||Dt.test(e);function ci(e,t){return void 0!==e[t]?e[t]:e.borderRadius}const di=fi(0,.5,gr),pi=fi(.5,.95,yn);function fi(e,t,n){return r=>r<e?0:r>t?1:n(Zr(e,t,r))}function mi(e,t){e.min=t.min,e.max=t.max}function hi(e,t){mi(e.x,t.x),mi(e.y,t.y)}function gi(e,t,n,r,a){return e=jo(e-=t,1/n,r),void 0!==a&&(e=jo(e,1/a,r)),e}function vi(e,t,[n,r,a],o,i){!function(e,t=0,n=1,r=.5,a,o=e,i=e){if(Mt.test(t)&&(t=parseFloat(t),t=Br(i.min,i.max,t/100)-i.min),"number"!=typeof t)return;let l=Br(o.min,o.max,r);e===o&&(l-=t),e.min=gi(e.min,t,n,l,a),e.max=gi(e.max,t,n,l,a)}(e,t[n],t[r],t[a],t.scale,o,i)}const yi=["x","scaleX","originX"],bi=["y","scaleY","originY"];function xi(e,t,n,r){vi(e.x,t,yi,n?n.x:void 0,r?r.x:void 0),vi(e.y,t,bi,n?n.y:void 0,r?r.y:void 0)}function Ai(e){return 0===e.translate&&1===e.scale}function Ci(e){return Ai(e.x)&&Ai(e.y)}function Ei(e,t){return Math.round(e.x.min)===Math.round(t.x.min)&&Math.round(e.x.max)===Math.round(t.x.max)&&Math.round(e.y.min)===Math.round(t.y.min)&&Math.round(e.y.max)===Math.round(t.y.max)}function wi(e){return vo(e.x)/vo(e.y)}class ki{constructor(){this.members=[]}add(e){Va(this.members,e),e.scheduleRender()}remove(e){if(Ia(this.members,e),e===this.prevLead&&(this.prevLead=void 0),e===this.lead){const e=this.members[this.members.length-1];e&&this.promote(e)}}relegate(e){const t=this.members.findIndex((t=>e===t));if(0===t)return!1;let n;for(let e=t;e>=0;e--){const t=this.members[e];if(!1!==t.isPresent){n=t;break}}return!!n&&(this.promote(n),!0)}promote(e,t){const n=this.lead;if(e!==n&&(this.prevLead=n,this.lead=e,e.show(),n)){n.instance&&n.scheduleRender(),e.scheduleRender(),e.resumeFrom=n,t&&(e.resumeFrom.preserveOpacity=!0),n.snapshot&&(e.snapshot=n.snapshot,e.snapshot.latestValues=n.animationValues||n.latestValues),e.root&&e.root.isUpdating&&(e.isLayoutDirty=!0);const{crossfade:r}=e.options;!1===r&&n.hide()}}exitAnimationComplete(){this.members.forEach((e=>{const{options:t,resumingFrom:n}=e;t.onExitComplete&&t.onExitComplete(),n&&n.options.onExitComplete&&n.options.onExitComplete()}))}scheduleRender(){this.members.forEach((e=>{e.instance&&e.scheduleRender(!1)}))}removeLeadSnapshot(){this.lead&&this.lead.snapshot&&(this.lead.snapshot=void 0)}}function Si(e,t,n){let r="";const a=e.x.translate/t.x,o=e.y.translate/t.y;if((a||o)&&(r=`translate3d(${a}px, ${o}px, 0) `),1===t.x&&1===t.y||(r+=`scale(${1/t.x}, ${1/t.y}) `),n){const{rotate:e,rotateX:t,rotateY:a}=n;e&&(r+=`rotate(${e}deg) `),t&&(r+=`rotateX(${t}deg) `),a&&(r+=`rotateY(${a}deg) `)}const i=e.x.scale*t.x,l=e.y.scale*t.y;return 1===i&&1===l||(r+=`scale(${i}, ${l})`),r||"none"}const Ni=(e,t)=>e.depth-t.depth;class _i{constructor(){this.children=[],this.isDirty=!1}add(e){Va(this.children,e),this.isDirty=!0}remove(e){Ia(this.children,e),this.isDirty=!0}forEach(e){this.isDirty&&this.children.sort(Ni),this.isDirty=!1,this.children.forEach(e)}}const Pi=["","X","Y","Z"];let Bi=0;const Ti={type:"projectionFrame",totalNodes:0,resolvedTargetDeltas:0,recalculatedProjection:0};function Fi({attachResizeListener:e,defaultParent:t,measureScroll:n,checkIsScrollRoot:r,resetTransform:a}){return class{constructor(e={},n=(null==t?void 0:t())){this.id=Bi++,this.animationId=0,this.children=new Set,this.options={},this.isTreeAnimating=!1,this.isAnimationBlocked=!1,this.isLayoutDirty=!1,this.isProjectionDirty=!1,this.isSharedProjectionDirty=!1,this.isTransformDirty=!1,this.updateManuallyBlocked=!1,this.updateBlockedByResize=!1,this.isUpdating=!1,this.isSVG=!1,this.needsReset=!1,this.shouldResetTransform=!1,this.treeScale={x:1,y:1},this.eventHandlers=new Map,this.hasTreeAnimated=!1,this.updateScheduled=!1,this.checkUpdateFailed=()=>{this.isUpdating&&(this.isUpdating=!1,this.clearAllSnapshots())},this.updateProjection=()=>{var e;Ti.totalNodes=Ti.resolvedTargetDeltas=Ti.recalculatedProjection=0,this.nodes.forEach(Mi),this.nodes.forEach(Ui),this.nodes.forEach(Wi),this.nodes.forEach(Di),e=Ti,window.MotionDebug&&window.MotionDebug.record(e)},this.hasProjected=!1,this.isVisible=!0,this.animationProgress=0,this.sharedNodes=new Map,this.latestValues=e,this.root=n?n.root||n:this,this.path=n?[...n.path,n]:[],this.parent=n,this.depth=n?n.depth+1:0;for(let e=0;e<this.path.length;e++)this.path[e].shouldResetTransform=!0;this.root===this&&(this.nodes=new _i)}addEventListener(e,t){return this.eventHandlers.has(e)||this.eventHandlers.set(e,new Ua),this.eventHandlers.get(e).add(t)}notifyListeners(e,...t){const n=this.eventHandlers.get(e);n&&n.notify(...t)}hasListeners(e){return this.eventHandlers.has(e)}mount(t,n=this.root.hasTreeAnimated){if(this.instance)return;var r;this.isSVG=(r=t)instanceof SVGElement&&"svg"!==r.tagName,this.instance=t;const{layoutId:a,layout:o,visualElement:i}=this.options;if(i&&!i.current&&i.mount(t),this.root.nodes.add(this),this.parent&&this.parent.children.add(this),n&&(o||a)&&(this.isLayoutDirty=!0),e){let n;const r=()=>this.root.updateBlockedByResize=!1;e(t,(()=>{this.root.updateBlockedByResize=!0,n&&n(),n=function(e,t){const n=performance.now(),r=({timestamp:t})=>{const a=t-n;a>=250&&(Cn(r),e(a-250))};return An.read(r,!0),()=>Cn(r)}(r),Jo.hasAnimatedSinceResize&&(Jo.hasAnimatedSinceResize=!1,this.nodes.forEach(Ii))}))}a&&this.root.registerSharedNode(a,this),!1!==this.options.animate&&i&&(a||o)&&this.addEventListener("didUpdate",(({delta:e,hasLayoutChanged:t,hasRelativeTargetChanged:n,layout:r})=>{if(this.isTreeAnimationBlocked())return this.target=void 0,void(this.relativeTarget=void 0);const a=this.options.transition||i.getDefaultTransition()||Ki,{onLayoutAnimationStart:o,onLayoutAnimationComplete:l}=i.getProps(),s=!this.targetLayout||!Ei(this.targetLayout,r)||n,u=!t&&n;if(this.options.layoutRoot||this.resumeFrom&&this.resumeFrom.instance||u||t&&(s||!this.currentAnimation)){this.resumeFrom&&(this.resumingFrom=this.resumeFrom,this.resumingFrom.resumingFrom=void 0),this.setAnimationOrigin(e,u);const t={...Da(a,"layout"),onPlay:o,onComplete:l};(i.shouldReduceMotion||this.options.layoutRoot)&&(t.delay=0,t.type=!1),this.startAnimation(t)}else t||Ii(this),this.isLead()&&this.options.onExitComplete&&this.options.onExitComplete();this.targetLayout=r}))}unmount(){this.options.layoutId&&this.willUpdate(),this.root.nodes.remove(this);const e=this.getStack();e&&e.remove(this),this.parent&&this.parent.children.delete(this),this.instance=void 0,Cn(this.updateProjection)}blockUpdate(){this.updateManuallyBlocked=!0}unblockUpdate(){this.updateManuallyBlocked=!1}isUpdateBlocked(){return this.updateManuallyBlocked||this.updateBlockedByResize}isTreeAnimationBlocked(){return this.isAnimationBlocked||this.parent&&this.parent.isTreeAnimationBlocked()||!1}startUpdate(){this.isUpdateBlocked()||(this.isUpdating=!0,this.nodes&&this.nodes.forEach($i),this.animationId++)}getTransformTemplate(){const{visualElement:e}=this.options;return e&&e.getProps().transformTemplate}willUpdate(e=!0){if(this.root.hasTreeAnimated=!0,this.root.isUpdateBlocked())return void(this.options.onExitComplete&&this.options.onExitComplete());if(!this.root.isUpdating&&this.root.startUpdate(),this.isLayoutDirty)return;this.isLayoutDirty=!0;for(let e=0;e<this.path.length;e++){const t=this.path[e];t.shouldResetTransform=!0,t.updateScroll("snapshot"),t.options.layoutRoot&&t.willUpdate(!1)}const{layoutId:t,layout:n}=this.options;if(void 0===t&&!n)return;const r=this.getTransformTemplate();this.prevTransformTemplateValue=r?r(this.latestValues,""):void 0,this.updateSnapshot(),e&&this.notifyListeners("willUpdate")}update(){if(this.updateScheduled=!1,this.isUpdateBlocked())return this.unblockUpdate(),this.clearAllSnapshots(),void this.nodes.forEach(ji);this.isUpdating||this.nodes.forEach(zi),this.isUpdating=!1,this.nodes.forEach(Vi),this.nodes.forEach(Ri),this.nodes.forEach(Li),this.clearAllSnapshots();const e=performance.now();En.delta=wt(0,1e3/60,e-En.timestamp),En.timestamp=e,En.isProcessing=!0,wn.update.process(En),wn.preRender.process(En),wn.render.process(En),En.isProcessing=!1}didUpdate(){this.updateScheduled||(this.updateScheduled=!0,queueMicrotask((()=>this.update())))}clearAllSnapshots(){this.nodes.forEach(Oi),this.sharedNodes.forEach(Yi)}scheduleUpdateProjection(){An.preRender(this.updateProjection,!1,!0)}scheduleCheckAfterUnmount(){An.postRender((()=>{this.isLayoutDirty?this.root.didUpdate():this.root.checkUpdateFailed()}))}updateSnapshot(){!this.snapshot&&this.instance&&(this.snapshot=this.measure())}updateLayout(){if(!this.instance)return;if(this.updateScroll(),!(this.options.alwaysMeasureLayout&&this.isLead()||this.isLayoutDirty))return;if(this.resumeFrom&&!this.resumeFrom.instance)for(let e=0;e<this.path.length;e++)this.path[e].updateScroll();const e=this.layout;this.layout=this.measure(!1),this.layoutCorrected=Bo(),this.isLayoutDirty=!1,this.projectionDelta=void 0,this.notifyListeners("measure",this.layout.layoutBox);const{visualElement:t}=this.options;t&&t.notify("LayoutMeasure",this.layout.layoutBox,e?e.layoutBox:void 0)}updateScroll(e="measure"){let t=Boolean(this.options.layoutScroll&&this.instance);this.scroll&&this.scroll.animationId===this.root.animationId&&this.scroll.phase===e&&(t=!1),t&&(this.scroll={animationId:this.root.animationId,phase:e,isRoot:r(this.instance),offset:n(this.instance)})}resetTransform(){if(!a)return;const e=this.isLayoutDirty||this.shouldResetTransform,t=this.projectionDelta&&!Ci(this.projectionDelta),n=this.getTransformTemplate(),r=n?n(this.latestValues,""):void 0,o=r!==this.prevTransformTemplateValue;e&&(t||Mo(this.latestValues)||o)&&(a(this.instance,r),this.shouldResetTransform=!1,this.scheduleRender())}measure(e=!0){const t=this.measurePageBox();let n=this.removeElementScroll(t);var r;return e&&(n=this.removeTransform(n)),Xi((r=n).x),Xi(r.y),{animationId:this.root.animationId,measuredBox:t,layoutBox:n,latestValues:{},source:this.id}}measurePageBox(){const{visualElement:e}=this.options;if(!e)return Bo();const t=e.measureViewportBox(),{scroll:n}=this.root;return n&&(Wo(t.x,n.offset.x),Wo(t.y,n.offset.y)),t}removeElementScroll(e){const t=Bo();hi(t,e);for(let n=0;n<this.path.length;n++){const r=this.path[n],{scroll:a,options:o}=r;if(r!==this.root&&a&&o.layoutScroll){if(a.isRoot){hi(t,e);const{scroll:n}=this.root;n&&(Wo(t.x,-n.offset.x),Wo(t.y,-n.offset.y))}Wo(t.x,a.offset.x),Wo(t.y,a.offset.y)}}return t}applyTransform(e,t=!1){const n=Bo();hi(n,e);for(let e=0;e<this.path.length;e++){const r=this.path[e];!t&&r.options.layoutScroll&&r.scroll&&r!==r.root&&qo(n,{x:-r.scroll.offset.x,y:-r.scroll.offset.y}),Mo(r.latestValues)&&qo(n,r.latestValues)}return Mo(this.latestValues)&&qo(n,this.latestValues),n}removeTransform(e){const t=Bo();hi(t,e);for(let e=0;e<this.path.length;e++){const n=this.path[e];if(!n.instance)continue;if(!Mo(n.latestValues))continue;Lo(n.latestValues)&&n.updateSnapshot();const r=Bo();hi(r,n.measurePageBox()),xi(t,n.latestValues,n.snapshot?n.snapshot.layoutBox:void 0,r)}return Mo(this.latestValues)&&xi(t,this.latestValues),t}setTargetDelta(e){this.targetDelta=e,this.root.scheduleUpdateProjection(),this.isProjectionDirty=!0}setOptions(e){this.options={...this.options,...e,crossfade:void 0===e.crossfade||e.crossfade}}clearMeasurements(){this.scroll=void 0,this.layout=void 0,this.snapshot=void 0,this.prevTransformTemplateValue=void 0,this.targetDelta=void 0,this.target=void 0,this.isLayoutDirty=!1}forceRelativeParentToResolveTarget(){this.relativeParent&&this.relativeParent.resolvedRelativeTargetAt!==En.timestamp&&this.relativeParent.resolveTargetDelta(!0)}resolveTargetDelta(e=!1){var t;const n=this.getLead();this.isProjectionDirty||(this.isProjectionDirty=n.isProjectionDirty),this.isTransformDirty||(this.isTransformDirty=n.isTransformDirty),this.isSharedProjectionDirty||(this.isSharedProjectionDirty=n.isSharedProjectionDirty);const r=Boolean(this.resumingFrom)||this!==n;if(!(e||r&&this.isSharedProjectionDirty||this.isProjectionDirty||(null===(t=this.parent)||void 0===t?void 0:t.isProjectionDirty)||this.attemptToResolveRelativeTarget))return;const{layout:a,layoutId:o}=this.options;if(this.layout&&(a||o)){if(this.resolvedRelativeTargetAt=En.timestamp,!this.targetDelta&&!this.relativeTarget){const e=this.getClosestProjectingParent();e&&e.layout&&1!==this.animationProgress?(this.relativeParent=e,this.forceRelativeParentToResolveTarget(),this.relativeTarget=Bo(),this.relativeTargetOrigin=Bo(),Eo(this.relativeTargetOrigin,this.layout.layoutBox,e.layout.layoutBox),hi(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}if(this.relativeTarget||this.targetDelta){var i,l,s;if(this.target||(this.target=Bo(),this.targetWithTransforms=Bo()),this.relativeTarget&&this.relativeTargetOrigin&&this.relativeParent&&this.relativeParent.target?(this.forceRelativeParentToResolveTarget(),i=this.target,l=this.relativeTarget,s=this.relativeParent.target,Ao(i.x,l.x,s.x),Ao(i.y,l.y,s.y)):this.targetDelta?(Boolean(this.resumingFrom)?this.target=this.applyTransform(this.layout.layoutBox):hi(this.target,this.layout.layoutBox),Io(this.target,this.targetDelta)):hi(this.target,this.layout.layoutBox),this.attemptToResolveRelativeTarget){this.attemptToResolveRelativeTarget=!1;const e=this.getClosestProjectingParent();e&&Boolean(e.resumingFrom)===Boolean(this.resumingFrom)&&!e.options.layoutScroll&&e.target&&1!==this.animationProgress?(this.relativeParent=e,this.forceRelativeParentToResolveTarget(),this.relativeTarget=Bo(),this.relativeTargetOrigin=Bo(),Eo(this.relativeTargetOrigin,this.target,e.target),hi(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}Ti.resolvedTargetDeltas++}}}getClosestProjectingParent(){if(this.parent&&!Lo(this.parent.latestValues)&&!Do(this.parent.latestValues))return this.parent.isProjecting()?this.parent:this.parent.getClosestProjectingParent()}isProjecting(){return Boolean((this.relativeTarget||this.targetDelta||this.options.layoutRoot)&&this.layout)}calcProjection(){var e;const t=this.getLead(),n=Boolean(this.resumingFrom)||this!==t;let r=!0;if((this.isProjectionDirty||(null===(e=this.parent)||void 0===e?void 0:e.isProjectionDirty))&&(r=!1),n&&(this.isSharedProjectionDirty||this.isTransformDirty)&&(r=!1),this.resolvedRelativeTargetAt===En.timestamp&&(r=!1),r)return;const{layout:a,layoutId:o}=this.options;if(this.isTreeAnimating=Boolean(this.parent&&this.parent.isTreeAnimating||this.currentAnimation||this.pendingAnimation),this.isTreeAnimating||(this.targetDelta=this.relativeTarget=void 0),!this.layout||!a&&!o)return;hi(this.layoutCorrected,this.layout.layoutBox);const i=this.treeScale.x,l=this.treeScale.y;!function(e,t,n,r=!1){const a=n.length;if(!a)return;let o,i;t.x=t.y=1;for(let l=0;l<a;l++){o=n[l],i=o.projectionDelta;const a=o.instance;a&&a.style&&"contents"===a.style.display||(r&&o.options.layoutScroll&&o.scroll&&o!==o.root&&qo(e,{x:-o.scroll.offset.x,y:-o.scroll.offset.y}),i&&(t.x*=i.x.scale,t.y*=i.y.scale,Io(e,i)),r&&Mo(o.latestValues)&&qo(e,o.latestValues))}t.x=Uo(t.x),t.y=Uo(t.y)}(this.layoutCorrected,this.treeScale,this.path,n),!t.layout||t.target||1===this.treeScale.x&&1===this.treeScale.y||(t.target=t.layout.layoutBox);const{target:s}=t;if(!s)return void(this.projectionTransform&&(this.projectionDelta=Po(),this.projectionTransform="none",this.scheduleRender()));this.projectionDelta||(this.projectionDelta=Po(),this.projectionDeltaWithTransform=Po());const u=this.projectionTransform;xo(this.projectionDelta,this.layoutCorrected,s,this.latestValues),this.projectionTransform=Si(this.projectionDelta,this.treeScale),this.projectionTransform===u&&this.treeScale.x===i&&this.treeScale.y===l||(this.hasProjected=!0,this.scheduleRender(),this.notifyListeners("projectionUpdate",s)),Ti.recalculatedProjection++}hide(){this.isVisible=!1}show(){this.isVisible=!0}scheduleRender(e=!0){if(this.options.scheduleRender&&this.options.scheduleRender(),e){const e=this.getStack();e&&e.scheduleRender()}this.resumingFrom&&!this.resumingFrom.instance&&(this.resumingFrom=void 0)}setAnimationOrigin(e,t=!1){const n=this.snapshot,r=n?n.latestValues:{},a={...this.latestValues},o=Po();this.relativeParent&&this.relativeParent.options.layoutRoot||(this.relativeTarget=this.relativeTargetOrigin=void 0),this.attemptToResolveRelativeTarget=!t;const i=Bo(),l=(n?n.source:void 0)!==(this.layout?this.layout.source:void 0),s=this.getStack(),u=!s||s.members.length<=1,c=Boolean(l&&!u&&!0===this.options.crossfade&&!this.path.some(Qi));let d;this.animationProgress=0,this.mixTargetDelta=t=>{const n=t/1e3;var s,p,f,m,h,g;Hi(o.x,e.x,n),Hi(o.y,e.y,n),this.setTargetDelta(o),this.relativeTarget&&this.relativeTargetOrigin&&this.layout&&this.relativeParent&&this.relativeParent.layout&&(Eo(i,this.layout.layoutBox,this.relativeParent.layout.layoutBox),f=this.relativeTarget,m=this.relativeTargetOrigin,h=i,g=n,qi(f.x,m.x,h.x,g),qi(f.y,m.y,h.y,g),d&&(s=this.relativeTarget,p=d,s.x.min===p.x.min&&s.x.max===p.x.max&&s.y.min===p.y.min&&s.y.max===p.y.max)&&(this.isProjectionDirty=!1),d||(d=Bo()),hi(d,this.relativeTarget)),l&&(this.animationValues=a,function(e,t,n,r,a,o){a?(e.opacity=Br(0,void 0!==n.opacity?n.opacity:1,di(r)),e.opacityExit=Br(void 0!==t.opacity?t.opacity:1,0,pi(r))):o&&(e.opacity=Br(void 0!==t.opacity?t.opacity:1,void 0!==n.opacity?n.opacity:1,r));for(let a=0;a<li;a++){const o=`border${ii[a]}Radius`;let i=ci(t,o),l=ci(n,o);void 0===i&&void 0===l||(i||(i=0),l||(l=0),0===i||0===l||ui(i)===ui(l)?(e[o]=Math.max(Br(si(i),si(l),r),0),(Mt.test(l)||Mt.test(i))&&(e[o]+="%")):e[o]=l)}(t.rotate||n.rotate)&&(e.rotate=Br(t.rotate||0,n.rotate||0,r))}(a,r,this.latestValues,n,c,u)),this.root.scheduleUpdateProjection(),this.scheduleRender(),this.animationProgress=n},this.mixTargetDelta(this.options.layoutRoot?1e3:0)}startAnimation(e){this.notifyListeners("animationStart"),this.currentAnimation&&this.currentAnimation.stop(),this.resumingFrom&&this.resumingFrom.currentAnimation&&this.resumingFrom.currentAnimation.stop(),this.pendingAnimation&&(Cn(this.pendingAnimation),this.pendingAnimation=void 0),this.pendingAnimation=An.update((()=>{Jo.hasAnimatedSinceResize=!0,this.currentAnimation=function(e,t,n){const r=vt(0)?0:Ya(0);return r.start(Oa("",r,1e3,n)),r.animation}(0,0,{...e,onUpdate:t=>{this.mixTargetDelta(t),e.onUpdate&&e.onUpdate(t)},onComplete:()=>{e.onComplete&&e.onComplete(),this.completeAnimation()}}),this.resumingFrom&&(this.resumingFrom.currentAnimation=this.currentAnimation),this.pendingAnimation=void 0}))}completeAnimation(){this.resumingFrom&&(this.resumingFrom.currentAnimation=void 0,this.resumingFrom.preserveOpacity=void 0);const e=this.getStack();e&&e.exitAnimationComplete(),this.resumingFrom=this.currentAnimation=this.animationValues=void 0,this.notifyListeners("animationComplete")}finishAnimation(){this.currentAnimation&&(this.mixTargetDelta&&this.mixTargetDelta(1e3),this.currentAnimation.stop()),this.completeAnimation()}applyTransformsToTarget(){const e=this.getLead();let{targetWithTransforms:t,target:n,layout:r,latestValues:a}=e;if(t&&n&&r){if(this!==e&&this.layout&&r&&Ji(this.options.animationType,this.layout.layoutBox,r.layoutBox)){n=this.target||Bo();const t=vo(this.layout.layoutBox.x);n.x.min=e.target.x.min,n.x.max=n.x.min+t;const r=vo(this.layout.layoutBox.y);n.y.min=e.target.y.min,n.y.max=n.y.min+r}hi(t,n),qo(t,a),xo(this.projectionDeltaWithTransform,this.layoutCorrected,t,a)}}registerSharedNode(e,t){this.sharedNodes.has(e)||this.sharedNodes.set(e,new ki),this.sharedNodes.get(e).add(t);const n=t.options.initialPromotionConfig;t.promote({transition:n?n.transition:void 0,preserveFollowOpacity:n&&n.shouldPreserveFollowOpacity?n.shouldPreserveFollowOpacity(t):void 0})}isLead(){const e=this.getStack();return!e||e.lead===this}getLead(){var e;const{layoutId:t}=this.options;return t&&(null===(e=this.getStack())||void 0===e?void 0:e.lead)||this}getPrevLead(){var e;const{layoutId:t}=this.options;return t?null===(e=this.getStack())||void 0===e?void 0:e.prevLead:void 0}getStack(){const{layoutId:e}=this.options;if(e)return this.root.sharedNodes.get(e)}promote({needsReset:e,transition:t,preserveFollowOpacity:n}={}){const r=this.getStack();r&&r.promote(this,n),e&&(this.projectionDelta=void 0,this.needsReset=!0),t&&this.setOptions({transition:t})}relegate(){const e=this.getStack();return!!e&&e.relegate(this)}resetRotation(){const{visualElement:e}=this.options;if(!e)return;let t=!1;const{latestValues:n}=e;if((n.rotate||n.rotateX||n.rotateY||n.rotateZ)&&(t=!0),!t)return;const r={};for(let t=0;t<Pi.length;t++){const a="rotate"+Pi[t];n[a]&&(r[a]=n[a],e.setStaticValue(a,0))}e.render();for(const t in r)e.setStaticValue(t,r[t]);e.scheduleRender()}getProjectionStyles(e={}){var t,n;const r={};if(!this.instance||this.isSVG)return r;if(!this.isVisible)return{visibility:"hidden"};r.visibility="";const a=this.getTransformTemplate();if(this.needsReset)return this.needsReset=!1,r.opacity="",r.pointerEvents=hn(e.pointerEvents)||"",r.transform=a?a(this.latestValues,""):"none",r;const o=this.getLead();if(!this.projectionDelta||!this.layout||!o.target){const t={};return this.options.layoutId&&(t.opacity=void 0!==this.latestValues.opacity?this.latestValues.opacity:1,t.pointerEvents=hn(e.pointerEvents)||""),this.hasProjected&&!Mo(this.latestValues)&&(t.transform=a?a({},""):"none",this.hasProjected=!1),t}const i=o.animationValues||o.latestValues;this.applyTransformsToTarget(),r.transform=Si(this.projectionDeltaWithTransform,this.treeScale,i),a&&(r.transform=a(i,r.transform));const{x:l,y:s}=this.projectionDelta;r.transformOrigin=`${100*l.origin}% ${100*s.origin}% 0`,o.animationValues?r.opacity=o===this?null!==(n=null!==(t=i.opacity)&&void 0!==t?t:this.latestValues.opacity)&&void 0!==n?n:1:this.preserveOpacity?this.latestValues.opacity:i.opacityExit:r.opacity=o===this?void 0!==i.opacity?i.opacity:"":void 0!==i.opacityExit?i.opacityExit:0;for(const e in ft){if(void 0===i[e])continue;const{correct:t,applyTo:n}=ft[e],a="none"===r.transform?i[e]:t(i[e],o);if(n){const e=n.length;for(let t=0;t<e;t++)r[n[t]]=a}else r[e]=a}return this.options.layoutId&&(r.pointerEvents=o===this?hn(e.pointerEvents)||"":"none"),r}clearSnapshot(){this.resumeFrom=this.snapshot=void 0}resetTree(){this.root.nodes.forEach((e=>{var t;return null===(t=e.currentAnimation)||void 0===t?void 0:t.stop()})),this.root.nodes.forEach(ji),this.root.sharedNodes.clear()}}}function Ri(e){e.updateLayout()}function Li(e){var t;const n=(null===(t=e.resumeFrom)||void 0===t?void 0:t.snapshot)||e.snapshot;if(e.isLead()&&e.layout&&n&&e.hasListeners("didUpdate")){const{layoutBox:t,measuredBox:r}=e.layout,{animationType:a}=e.options,o=n.source!==e.layout.source;"size"===a?To((e=>{const r=o?n.measuredBox[e]:n.layoutBox[e],a=vo(r);r.min=t[e].min,r.max=r.min+a})):Ji(a,n.layoutBox,t)&&To((r=>{const a=o?n.measuredBox[r]:n.layoutBox[r],i=vo(t[r]);a.max=a.min+i,e.relativeTarget&&!e.currentAnimation&&(e.isProjectionDirty=!0,e.relativeTarget[r].max=e.relativeTarget[r].min+i)}));const i=Po();xo(i,t,n.layoutBox);const l=Po();o?xo(l,e.applyTransform(r,!0),n.measuredBox):xo(l,t,n.layoutBox);const s=!Ci(i);let u=!1;if(!e.resumeFrom){const r=e.getClosestProjectingParent();if(r&&!r.resumeFrom){const{snapshot:a,layout:o}=r;if(a&&o){const i=Bo();Eo(i,n.layoutBox,a.layoutBox);const l=Bo();Eo(l,t,o.layoutBox),Ei(i,l)||(u=!0),r.options.layoutRoot&&(e.relativeTarget=l,e.relativeTargetOrigin=i,e.relativeParent=r)}}}e.notifyListeners("didUpdate",{layout:t,snapshot:n,delta:l,layoutDelta:i,hasLayoutChanged:s,hasRelativeTargetChanged:u})}else if(e.isLead()){const{onExitComplete:t}=e.options;t&&t()}e.options.transition=void 0}function Mi(e){Ti.totalNodes++,e.parent&&(e.isProjecting()||(e.isProjectionDirty=e.parent.isProjectionDirty),e.isSharedProjectionDirty||(e.isSharedProjectionDirty=Boolean(e.isProjectionDirty||e.parent.isProjectionDirty||e.parent.isSharedProjectionDirty)),e.isTransformDirty||(e.isTransformDirty=e.parent.isTransformDirty))}function Di(e){e.isProjectionDirty=e.isSharedProjectionDirty=e.isTransformDirty=!1}function Oi(e){e.clearSnapshot()}function ji(e){e.clearMeasurements()}function zi(e){e.isLayoutDirty=!1}function Vi(e){const{visualElement:t}=e.options;t&&t.getProps().onBeforeLayoutMeasure&&t.notify("BeforeLayoutMeasure"),e.resetTransform()}function Ii(e){e.finishAnimation(),e.targetDelta=e.relativeTarget=e.target=void 0,e.isProjectionDirty=!0}function Ui(e){e.resolveTargetDelta()}function Wi(e){e.calcProjection()}function $i(e){e.resetRotation()}function Yi(e){e.removeLeadSnapshot()}function Hi(e,t,n){e.translate=Br(t.translate,0,n),e.scale=Br(t.scale,1,n),e.origin=t.origin,e.originPoint=t.originPoint}function qi(e,t,n,r){e.min=Br(t.min,n.min,r),e.max=Br(t.max,n.max,r)}function Qi(e){return e.animationValues&&void 0!==e.animationValues.opacityExit}const Ki={duration:.45,ease:[.4,0,.1,1]},Zi=e=>"undefined"!=typeof navigator&&navigator.userAgent.toLowerCase().includes(e),Gi=Zi("applewebkit/")&&!Zi("chrome/")?Math.round:yn;function Xi(e){e.min=Gi(e.min),e.max=Gi(e.max)}function Ji(e,t,n){return"position"===e||"preserve-aspect"===e&&!yo(wi(t),wi(n),.2)}const el=Fi({attachResizeListener:(e,t)=>Nn(e,"resize",t),measureScroll:()=>({x:document.documentElement.scrollLeft||document.body.scrollLeft,y:document.documentElement.scrollTop||document.body.scrollTop}),checkIsScrollRoot:()=>!0}),tl={current:void 0},nl=Fi({measureScroll:e=>({x:e.scrollLeft,y:e.scrollTop}),defaultParent:()=>{if(!tl.current){const e=new el({});e.mount(window),e.setOptions({layoutScroll:!0}),tl.current=e}return tl.current},resetTransform:(e,t)=>{e.style.transform=void 0!==t?t:"none"},checkIsScrollRoot:e=>Boolean("fixed"===window.getComputedStyle(e).position)}),rl={pan:{Feature:class extends zn{constructor(){super(...arguments),this.removePointerDownListener=yn}onPointerDown(e){this.session=new uo(e,this.createPanHandlers(),{transformPagePoint:this.node.getTransformPagePoint()})}createPanHandlers(){const{onPanSessionStart:e,onPanStart:t,onPan:n,onPanEnd:r}=this.node.getProps();return{onSessionStart:Xo(e),onStart:Xo(t),onMove:n,onEnd:(e,t)=>{delete this.session,r&&An.update((()=>r(e,t)))}}}mount(){this.removePointerDownListener=Tn(this.node.current,"pointerdown",(e=>this.onPointerDown(e)))}update(){this.session&&this.session.updateHandlers(this.createPanHandlers())}unmount(){this.removePointerDownListener(),this.session&&this.session.end()}}},drag:{Feature:class extends zn{constructor(e){super(e),this.removeGroupControls=yn,this.removeListeners=yn,this.controls=new Zo(e)}mount(){const{dragControls:e}=this.node.getProps();e&&(this.removeGroupControls=e.subscribe(this.controls)),this.removeListeners=this.controls.addListeners()||yn}unmount(){this.removeGroupControls(),this.removeListeners()}},ProjectionNode:nl,MeasureLayout:ai}},al=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function ol(e,t,n=1){Jn(n<=4,`Max CSS variable fallback depth detected in property "${e}". This may indicate a circular fallback dependency.`);const[r,a]=function(e){const t=al.exec(e);if(!t)return[,];const[,n,r]=t;return[n,r]}(e);if(!r)return;const o=window.getComputedStyle(t).getPropertyValue(r);if(o){const e=o.trim();return za(e)?parseFloat(e):e}return Ct(a)?ol(a,t,n+1):a}const il=new Set(["width","height","top","left","right","bottom","x","y","translateX","translateY"]),ll=e=>il.has(e),sl=e=>e===kt||e===Dt,ul=(e,t)=>parseFloat(e.split(", ")[t]),cl=(e,t)=>(n,{transform:r})=>{if("none"===r||!r)return 0;const a=r.match(/^matrix3d\((.+)\)$/);if(a)return ul(a[1],t);{const t=r.match(/^matrix\((.+)\)$/);return t?ul(t[1],e):0}},dl=new Set(["x","y","z"]),pl=mt.filter((e=>!dl.has(e))),fl={width:({x:e},{paddingLeft:t="0",paddingRight:n="0"})=>e.max-e.min-parseFloat(t)-parseFloat(n),height:({y:e},{paddingTop:t="0",paddingBottom:n="0"})=>e.max-e.min-parseFloat(t)-parseFloat(n),top:(e,{top:t})=>parseFloat(t),left:(e,{left:t})=>parseFloat(t),bottom:({y:e},{top:t})=>parseFloat(t)+(e.max-e.min),right:({x:e},{left:t})=>parseFloat(t)+(e.max-e.min),x:cl(4,13),y:cl(5,14)};fl.translateX=fl.x,fl.translateY=fl.y;function ml(e,t,n,r){return(e=>Object.keys(e).some(ll))(t)?((e,t,n={},r={})=>{t={...t},r={...r};const a=Object.keys(t).filter(ll);let o=[],i=!1;const l=[];if(a.forEach((a=>{const s=e.getValue(a);if(!e.hasValue(a))return;let u=n[a],c=Qa(u);const d=t[a];let p;if(pn(d)){const e=d.length,t=null===d[0]?1:0;u=d[t],c=Qa(u);for(let n=t;n<e&&null!==d[n];n++)p?Jn(Qa(d[n])===p,"All keyframes must be of the same type"):(p=Qa(d[n]),Jn(p===c||sl(c)&&sl(p),"Keyframes must be of the same dimension as the current value"))}else p=Qa(d);if(c!==p)if(sl(c)&&sl(p)){const e=s.get();"string"==typeof e&&s.set(parseFloat(e)),"string"==typeof d?t[a]=parseFloat(d):Array.isArray(d)&&p===Dt&&(t[a]=d.map(parseFloat))}else(null==c?void 0:c.transform)&&(null==p?void 0:p.transform)&&(0===u||0===d)?0===u?s.set(p.transform(u)):t[a]=c.transform(d):(i||(o=function(e){const t=[];return pl.forEach((n=>{const r=e.getValue(n);void 0!==r&&(t.push([n,r.get()]),r.set(n.startsWith("scale")?1:0))})),t.length&&e.render(),t}(e),i=!0),l.push(a),r[a]=void 0!==r[a]?r[a]:t[a],s.jump(d))})),l.length){const n=l.indexOf("height")>=0?window.pageYOffset:null,a=((e,t,n)=>{const r=t.measureViewportBox(),a=t.current,o=getComputedStyle(a),{display:i}=o,l={};"none"===i&&t.setStaticValue("display",e.display||"block"),n.forEach((e=>{l[e]=fl[e](r,o)})),t.render();const s=t.measureViewportBox();return n.forEach((n=>{const r=t.getValue(n);r&&r.jump(l[n]),e[n]=fl[n](s,o)})),e})(t,e,l);return o.length&&o.forEach((([t,n])=>{e.getValue(t).set(n)})),e.render(),He&&null!==n&&window.scrollTo({top:n}),{target:a,transitionEnd:r}}return{target:t,transitionEnd:r}})(e,t,n,r):{target:t,transitionEnd:r}}const hl={current:null},gl={current:!1},vl=new WeakMap,yl=Object.keys(at),bl=yl.length,xl=["AnimationStart","AnimationComplete","Update","BeforeLayoutMeasure","LayoutMeasure","LayoutAnimationStart","LayoutAnimationComplete"],Al=Je.length;class Cl{constructor({parent:e,props:t,presenceContext:n,reducedMotionConfig:r,visualState:a},o={}){this.current=null,this.children=new Set,this.isVariantNode=!1,this.isControllingVariants=!1,this.shouldReduceMotion=null,this.values=new Map,this.features={},this.valueSubscriptions=new Map,this.prevMotionValues={},this.events={},this.propEventSubscriptions={},this.notifyUpdate=()=>this.notify("Update",this.latestValues),this.render=()=>{this.current&&(this.triggerBuild(),this.renderInstance(this.current,this.renderState,this.props.style,this.projection))},this.scheduleRender=()=>An.render(this.render,!1,!0);const{latestValues:i,renderState:l}=a;this.latestValues=i,this.baseTarget={...i},this.initialValues=t.initial?{...i}:{},this.renderState=l,this.parent=e,this.props=t,this.presenceContext=n,this.depth=e?e.depth+1:0,this.reducedMotionConfig=r,this.options=o,this.isControllingVariants=et(t),this.isVariantNode=tt(t),this.isVariantNode&&(this.variantChildren=new Set),this.manuallyAnimateOnMount=Boolean(e&&e.current);const{willChange:s,...u}=this.scrapeMotionValuesFromProps(t,{});for(const e in u){const t=u[e];void 0!==i[e]&&vt(t)&&(t.set(i[e],!1),ja(s)&&s.add(e))}}scrapeMotionValuesFromProps(e,t){return{}}mount(e){this.current=e,vl.set(e,this),this.projection&&!this.projection.instance&&this.projection.mount(e),this.parent&&this.isVariantNode&&!this.isControllingVariants&&(this.removeFromVariantTree=this.parent.addVariantChild(this)),this.values.forEach(((e,t)=>this.bindToMotionValue(t,e))),gl.current||function(){if(gl.current=!0,He)if(window.matchMedia){const e=window.matchMedia("(prefers-reduced-motion)"),t=()=>hl.current=e.matches;e.addListener(t),t()}else hl.current=!1}(),this.shouldReduceMotion="never"!==this.reducedMotionConfig&&("always"===this.reducedMotionConfig||hl.current),this.parent&&this.parent.children.add(this),this.update(this.props,this.presenceContext)}unmount(){vl.delete(this.current),this.projection&&this.projection.unmount(),Cn(this.notifyUpdate),Cn(this.render),this.valueSubscriptions.forEach((e=>e())),this.removeFromVariantTree&&this.removeFromVariantTree(),this.parent&&this.parent.children.delete(this);for(const e in this.events)this.events[e].clear();for(const e in this.features)this.features[e].unmount();this.current=null}bindToMotionValue(e,t){const n=ht.has(e),r=t.on("change",(t=>{this.latestValues[e]=t,this.props.onUpdate&&An.update(this.notifyUpdate,!1,!0),n&&this.projection&&(this.projection.isTransformDirty=!0)})),a=t.on("renderRequest",this.scheduleRender);this.valueSubscriptions.set(e,(()=>{r(),a()}))}sortNodePosition(e){return this.current&&this.sortInstanceNodePosition&&this.type===e.type?this.sortInstanceNodePosition(this.current,e.current):0}loadFeatures({children:e,...t},n,r,a){let o,i;for(let e=0;e<bl;e++){const n=yl[e],{isEnabled:r,Feature:a,ProjectionNode:l,MeasureLayout:s}=at[n];l&&(o=l),r(t)&&(!this.features[n]&&a&&(this.features[n]=new a(this)),s&&(i=s))}if(!this.projection&&o){this.projection=new o(this.latestValues,this.parent&&this.parent.projection);const{layoutId:e,layout:n,drag:r,dragConstraints:i,layoutScroll:l,layoutRoot:s}=t;this.projection.setOptions({layoutId:e,layout:n,alwaysMeasureLayout:Boolean(r)||i&&Ke(i),visualElement:this,scheduleRender:()=>this.scheduleRender(),animationType:"string"==typeof n?n:"both",initialPromotionConfig:a,layoutScroll:l,layoutRoot:s})}return i}updateFeatures(){for(const e in this.features){const t=this.features[e];t.isMounted?t.update():(t.mount(),t.isMounted=!0)}}triggerBuild(){this.build(this.renderState,this.latestValues,this.options,this.props)}measureViewportBox(){return this.current?this.measureInstanceViewportBox(this.current,this.props):Bo()}getStaticValue(e){return this.latestValues[e]}setStaticValue(e,t){this.latestValues[e]=t}makeTargetAnimatable(e,t=!0){return this.makeTargetAnimatableFromInstance(e,this.props,t)}update(e,t){(e.transformTemplate||this.props.transformTemplate)&&this.scheduleRender(),this.prevProps=this.props,this.props=e,this.prevPresenceContext=this.presenceContext,this.presenceContext=t;for(let t=0;t<xl.length;t++){const n=xl[t];this.propEventSubscriptions[n]&&(this.propEventSubscriptions[n](),delete this.propEventSubscriptions[n]);const r=e["on"+n];r&&(this.propEventSubscriptions[n]=this.on(n,r))}this.prevMotionValues=function(e,t,n){const{willChange:r}=t;for(const a in t){const o=t[a],i=n[a];if(vt(o))e.addValue(a,o),ja(r)&&r.add(a);else if(vt(i))e.addValue(a,Ya(o,{owner:e})),ja(r)&&r.remove(a);else if(i!==o)if(e.hasValue(a)){const t=e.getValue(a);!t.hasAnimated&&t.set(o)}else{const t=e.getStaticValue(a);e.addValue(a,Ya(void 0!==t?t:o,{owner:e}))}}for(const r in n)void 0===t[r]&&e.removeValue(r);return t}(this,this.scrapeMotionValuesFromProps(e,this.prevProps),this.prevMotionValues),this.handleChildMotionValue&&this.handleChildMotionValue()}getProps(){return this.props}getVariant(e){return this.props.variants?this.props.variants[e]:void 0}getDefaultTransition(){return this.props.transition}getTransformPagePoint(){return this.props.transformPagePoint}getClosestVariantNode(){return this.isVariantNode?this:this.parent?this.parent.getClosestVariantNode():void 0}getVariantContext(e=!1){if(e)return this.parent?this.parent.getVariantContext():void 0;if(!this.isControllingVariants){const e=this.parent&&this.parent.getVariantContext()||{};return void 0!==this.props.initial&&(e.initial=this.props.initial),e}const t={};for(let e=0;e<Al;e++){const n=Je[e],r=this.props[n];(Ze(r)||!1===r)&&(t[n]=r)}return t}addVariantChild(e){const t=this.getClosestVariantNode();if(t)return t.variantChildren&&t.variantChildren.add(e),()=>t.variantChildren.delete(e)}addValue(e,t){t!==this.values.get(e)&&(this.removeValue(e),this.bindToMotionValue(e,t)),this.values.set(e,t),this.latestValues[e]=t.get()}removeValue(e){this.values.delete(e);const t=this.valueSubscriptions.get(e);t&&(t(),this.valueSubscriptions.delete(e)),delete this.latestValues[e],this.removeValueFromRenderState(e,this.renderState)}hasValue(e){return this.values.has(e)}getValue(e,t){if(this.props.values&&this.props.values[e])return this.props.values[e];let n=this.values.get(e);return void 0===n&&void 0!==t&&(n=Ya(t,{owner:this}),this.addValue(e,n)),n}readValue(e){var t;return void 0===this.latestValues[e]&&this.current?null!==(t=this.getBaseTargetFromProps(this.props,e))&&void 0!==t?t:this.readValueFromInstance(this.current,e,this.options):this.latestValues[e]}setBaseTarget(e,t){this.baseTarget[e]=t}getBaseTarget(e){var t;const{initial:n}=this.props,r="string"==typeof n||"object"==typeof n?null===(t=dn(this.props,n))||void 0===t?void 0:t[e]:void 0;if(n&&void 0!==r)return r;const a=this.getBaseTargetFromProps(this.props,e);return void 0===a||vt(a)?void 0!==this.initialValues[e]&&void 0===r?void 0:this.baseTarget[e]:a}on(e,t){return this.events[e]||(this.events[e]=new Ua),this.events[e].add(t)}notify(e,...t){this.events[e]&&this.events[e].notify(...t)}}class El extends Cl{sortInstanceNodePosition(e,t){return 2&e.compareDocumentPosition(t)?1:-1}getBaseTargetFromProps(e,t){return e.style?e.style[t]:void 0}removeValueFromRenderState(e,{vars:t,style:n}){delete t[e],delete n[e]}makeTargetAnimatableFromInstance({transition:e,transitionEnd:t,...n},{transformValues:r},a){let o=function(e,t,n){const r={};for(const a in e){const e=Ga(a,t);if(void 0!==e)r[a]=e;else{const e=n.getValue(a);e&&(r[a]=e.get())}}return r}(n,e||{},this);if(r&&(t&&(t=r(t)),n&&(n=r(n)),o&&(o=r(o))),a){!function(e,t,n){var r,a;const o=Object.keys(t).filter((t=>!e.hasValue(t))),i=o.length;var l;if(i)for(let s=0;s<i;s++){const i=o[s],u=t[i];let c=null;Array.isArray(u)&&(c=u[0]),null===c&&(c=null!==(a=null!==(r=n[i])&&void 0!==r?r:e.readValue(i))&&void 0!==a?a:t[i]),null!=c&&("string"==typeof c&&(za(c)||La(c))?c=parseFloat(c):(l=c,!Ka.find(Ha(l))&&$r.test(u)&&(c=Ra(i,u))),e.addValue(i,Ya(c,{owner:e})),void 0===n[i]&&(n[i]=c),null!==c&&e.setBaseTarget(i,c))}}(this,n,o);const e=((e,t,n,r)=>{const a=function(e,{...t},n){const r=e.current;if(!(r instanceof Element))return{target:t,transitionEnd:n};n&&(n={...n}),e.values.forEach((e=>{const t=e.get();if(!Ct(t))return;const n=ol(t,r);n&&e.set(n)}));for(const e in t){const a=t[e];if(!Ct(a))continue;const o=ol(a,r);o&&(t[e]=o,n||(n={}),void 0===n[e]&&(n[e]=a))}return{target:t,transitionEnd:n}}(e,t,r);return ml(e,t=a.target,n,r=a.transitionEnd)})(this,n,o,t);t=e.transitionEnd,n=e.target}return{transition:e,transitionEnd:t,...n}}}class wl extends El{readValueFromInstance(e,t){if(ht.has(t)){const e=Fa(t);return e&&e.default||0}{const r=(n=e,window.getComputedStyle(n)),a=(At(t)?r.getPropertyValue(t):r[t])||0;return"string"==typeof a?a.trim():a}var n}measureInstanceViewportBox(e,{transformPagePoint:t}){return Qo(e,t)}build(e,t,n,r){Ut(e,t,n,r.transformTemplate)}scrapeMotionValuesFromProps(e,t){return un(e,t)}handleChildMotionValue(){this.childSubscription&&(this.childSubscription(),delete this.childSubscription);const{children:e}=this.props;vt(e)&&(this.childSubscription=e.on("change",(e=>{this.current&&(this.current.textContent=`${e}`)})))}renderInstance(e,t,n,r){on(e,t,n,r)}}class kl extends El{constructor(){super(...arguments),this.isSVGTag=!1}getBaseTargetFromProps(e,t){return e[t]}readValueFromInstance(e,t){if(ht.has(t)){const e=Fa(t);return e&&e.default||0}return t=ln.has(t)?t:an(t),e.getAttribute(t)}measureInstanceViewportBox(){return Bo()}scrapeMotionValuesFromProps(e,t){return cn(e,t)}build(e,t,n,r){Jt(e,t,n,this.isSVGTag,r.transformTemplate)}renderInstance(e,t,n,r){sn(e,t,0,r)}mount(e){this.isSVGTag=tn(e.tagName),super.mount(e)}}const Sl=(e,t)=>pt(e)?new kl(t,{enableHardwareAcceleration:!1}):new wl(t,{enableHardwareAcceleration:!0}),Nl={...lo,...Qn,...rl,layout:{ProjectionNode:nl,MeasureLayout:ai}},_l=ct(((e,t)=>function(e,{forwardMotionProps:t=!1},n,r){return{...pt(e)?kn:Sn,preloadedFeatures:n,useRender:rn(t),createVisualElement:r,Component:e}}(e,t,Nl,Sl)));function Pl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],s=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,a=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Bl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Bl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Bl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Tl=function(){var e=Pl((0,t.useState)(!1),2),n=e[0],r=e[1],a=Pl((0,t.useState)(!1),2),o=a[0],i=a[1],l=Pl((0,t.useState)(!1),2),s=l[0],u=l[1],c=Pl((0,t.useState)(!1),2),d=c[0],p=c[1],f=Pl((0,t.useState)(!1),2),m=f[0],h=f[1],g=Pl((0,t.useState)(!1),2),v=g[0],y=g[1],b=Pl((0,t.useState)(!1),2),x=b[0],A=b[1],C=Pl((0,t.useState)(!1),2),E=C[0],w=C[1],k=Pl((0,t.useState)(!1),2),S=k[0],N=k[1],_=Pl((0,t.useState)(!1),2),P=_[0],B=_[1],T=Pl((0,t.useState)(0),2),F=T[0],R=T[1],L=Pl((0,t.useState)(0),2),M=L[0],D=L[1];return t.createElement(t.Fragment,null,t.createElement("div",{className:"container"},t.createElement("div",{className:"colorBox"},t.createElement("div",null,t.createElement(_l.div,{className:"box",layout:!0,style:{height:n?"315px":"0px"},transition:{ease:"linear",duration:5,repeat:1/0}}),t.createElement("div",{onClick:function(){return r(!n)},className:"boxBat"},"5 sek")),t.createElement("div",null,t.createElement(_l.div,{className:"box1",layout:!0,style:{height:o?"315px":"0px"},transition:{ease:"linear",duration:10,repeat:1/0}}),t.createElement("div",{onClick:function(){return i(!o)},className:"boxBat"},"10 sek")),t.createElement("div",null,t.createElement(_l.div,{className:"box2",layout:!0,style:{height:s?"315px":"0px"},transition:{ease:"linear",repeat:1/0,duration:20}}),t.createElement("div",{onClick:function(){return u(!s)},className:"boxBat"},"20 sek")),t.createElement("div",null,t.createElement(_l.div,{className:"box3",layout:!0,style:{height:d?"315px":"0px"},transition:{ease:"linear",duration:F,repeat:1/0}}),t.createElement("div",{onClick:function(){return p(!d)},className:"boxBat"},F)),t.createElement("div",null,t.createElement(_l.div,{className:"box4",layout:!0,style:{height:m?"315px":"0px"},transition:{ease:"linear",duration:M,repeat:1/0}}),t.createElement("div",{onClick:function(){return h(!m)},className:"boxBat"},M))),t.createElement("div",{className:"inputText"}," Upiši broj sekundi ",t.createElement("span",null),t.createElement("input",{type:"number",className:"inputPlace",name:"broj",value:F,onChange:function(e){R(e.target.value)}})),t.createElement("div",{className:"inputText"}," Upiši broj sekundi ",t.createElement("span",null),t.createElement("input",{type:"number",className:"inputPlace",name:"broj",value:M,onChange:function(e){D(e.target.value)}})),t.createElement("div",{onClick:function(){return[h(!m),p(!d),u(!s),i(!o),r(!n)]},className:"boxBatAll"},"sve"),t.createElement("hr",null),t.createElement("h1",null,"Ceo dan u prolazu "),t.createElement("div",{className:"colorBox"},t.createElement("div",null,t.createElement(_l.div,{className:"box4",layout:!0,style:{height:v?"308px":"0px"},transition:{ease:"easeInOut",type:"spring",duration:1,repeat:1/0}}),t.createElement("div",{className:"title"},"1 sek")),t.createElement("div",null,t.createElement(_l.div,{className:"box3",layout:!0,style:{height:x?"315px":"0px"},transition:{ease:"linear",duration:15,repeat:1/0}}),t.createElement("div",{className:"title"},"15 sek")),t.createElement("div",null,t.createElement(_l.div,{className:"box2",layout:!0,style:{height:E?"315px":"0px"},transition:{ease:"linear",duration:60,repeat:1/0}}),t.createElement("div",{className:"title"},"1 minut")),t.createElement("div",null,t.createElement(_l.div,{className:"box1",layout:!0,style:{height:S?"315px":"0px"},transition:{ease:"linear",duration:3600,repeat:1/0}}),t.createElement("div",{className:"title"},"1 sat")),t.createElement("div",null,t.createElement(_l.div,{className:"box",layout:!0,style:{height:P?"315px":"0px"},transition:{ease:"linear",duration:86400,repeat:1/0}}),t.createElement("div",{className:"title"},"1 dan"))),t.createElement("div",{onClick:function(){return[y(!v),A(!x),w(!E),N(!S),B(!P)]},className:"boxBatAll"},"POKRENI DAN")))};function Fl(){return t.createElement(Se,{basename:"/"},t.createElement("div",{className:"navContainer"},t.createElement("div",null,t.createElement(Be,{to:"/",className:"linker",style:function(e){return{color:e.isActive?"white":"rgb(83, 85, 83)"}}},"ODNOSI")),t.createElement("div",null,t.createElement(Be,{to:"kalorije",className:"linker",style:function(e){return{color:e.isActive?"white":"rgb(83, 85, 83)"}}},"KALORIJE")),t.createElement("div",null,t.createElement(Be,{to:"tajmer",className:"linker",style:function(e){return{color:e.isActive?"white":"rgb(83, 85, 83)"}}},"TAJMER"))),t.createElement(be,null,t.createElement(ve,{path:"/",element:t.createElement(Ue,null)}),t.createElement(ve,{path:"/kalorije",element:t.createElement(Oe,null)}),t.createElement(ve,{path:"/tajmer",element:t.createElement(Tl,null)})),t.createElement("div",{className:"home"},t.createElement("div",{className:"img"})))}function Rl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Ll=function(){var e,n,r=(e=(0,t.useState)("Enter search criterium!"),n=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],s=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,a=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw a}}return l}}(e,n)||function(e,t){if(e){if("string"==typeof e)return Rl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Rl(e,t):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());return r[0],r[1],t.createElement(Fl,null)};r.createRoot(document.getElementById("root")).render(t.createElement(Ll,{number:10,title:"String from index file",text:"Text from index file"}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bkQsRUFBQUEsY0FBQzZwRyxHQUFVLEtBSW5CLEVDRldLLEVBQUFBLFdBQW9CeG1HLFNBQVN5bUcsZUFBZSxTQUNsRDNoRyxPQUFPeEksRUFBQUEsY0FBQ29xRyxHQUFHLENBQ1hybkYsT0FBUSxHQUNSc25GLE1BQU0seUJBQ05qbkYsS0FBSyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy9EaWdpdHJvbi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2NvbXBvbmVudHMvRGlzcGxheS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2NvbXBvbmVudHMvS2V5UGFkQ29tcG9uZW50LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvc2Nzcy9tYWluLnNjc3MiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2xpZW50LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3JlYWN0anMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy93ZWJwYWNrL3J1bnRpbWUvY3JlYXRlIGZha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9yZWFjdGpzL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3JlYWN0anMvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3JlYWN0anMvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9yZWFjdGpzL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AcmVtaXgtcnVuL3JvdXRlci9kaXN0L3JvdXRlci5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL3Njc3MvbWFpbi5zY3NzPzZkMjUiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2NvbXBvbmVudHMvQmFja1RvVG9wLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy9LYWxvcmlqZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2NvbXBvbmVudHMvT2Rub3NpLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTW90aW9uQ29uZmlnQ29udGV4dC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvY29udGV4dC9Nb3Rpb25Db250ZXh0L2luZGV4Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb250ZXh0L1ByZXNlbmNlQ29udGV4dC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvaXMtYnJvd3Nlci5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvdXNlLWlzb21vcnBoaWMtZWZmZWN0Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb250ZXh0L0xhenlDb250ZXh0Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9pcy1yZWYtb2JqZWN0Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvdXRpbHMvaXMtdmFyaWFudC1sYWJlbC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL3V0aWxzL2lzLWFuaW1hdGlvbi1jb250cm9scy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL3ZhcmlhbnQtcHJvcHMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9pcy1jb250cm9sbGluZy12YXJpYW50cy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvY29udGV4dC9Nb3Rpb25Db250ZXh0L2NyZWF0ZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL2ZlYXR1cmVzL2RlZmluaXRpb25zLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb250ZXh0L0xheW91dEdyb3VwQ29udGV4dC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvY29udGV4dC9Td2l0Y2hMYXlvdXRHcm91cENvbnRleHQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy9zeW1ib2wubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL2ZlYXR1cmVzL2xvYWQtZmVhdHVyZXMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTW90aW9uQ29udGV4dC91dGlscy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL3V0aWxzL3VzZS12aXN1YWwtZWxlbWVudC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL3V0aWxzL3VzZS1tb3Rpb24tcmVmLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL21vdGlvbi1wcm94eS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy9sb3dlcmNhc2UtZWxlbWVudHMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvaXMtc3ZnLWNvbXBvbmVudC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9zdHlsZXMvc2NhbGUtY29ycmVjdGlvbi5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2h0bWwvdXRpbHMvdHJhbnNmb3JtLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vdXRpbHMvaXMtZm9yY2VkLW1vdGlvbi12YWx1ZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdmFsdWUvdXRpbHMvaXMtbW90aW9uLXZhbHVlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvaHRtbC91dGlscy9idWlsZC10cmFuc2Zvcm0ubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvaXMtY3NzLXZhcmlhYmxlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3ZhbHVlLXR5cGVzL2dldC1hcy10eXBlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9jbGFtcC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdmFsdWUvdHlwZXMvbnVtYmVycy9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdmFsdWUvdHlwZXMvdXRpbHMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3R5cGVzL251bWJlcnMvdW5pdHMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvdHlwZS1pbnQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvbnVtYmVyLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvaHRtbC91dGlscy9idWlsZC1zdHlsZXMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3V0aWxzL2NyZWF0ZS1yZW5kZXItc3RhdGUubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3VzZS1wcm9wcy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL3V0aWxzL3ZhbGlkLXByb3AubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvZmlsdGVyLXByb3BzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL3V0aWxzL3RyYW5zZm9ybS1vcmlnaW4ubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvcGF0aC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy91dGlscy9idWlsZC1hdHRycy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy91dGlscy9jcmVhdGUtcmVuZGVyLXN0YXRlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL3V0aWxzL2lzLXN2Zy10YWcubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXNlLXByb3BzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3VzZS1yZW5kZXIubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvY2FtZWwtdG8tZGFzaC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2h0bWwvdXRpbHMvcmVuZGVyLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL3V0aWxzL2NhbWVsLWNhc2UtYXR0cnMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvcmVuZGVyLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvaHRtbC91dGlscy9zY3JhcGUtbW90aW9uLXZhbHVlcy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy91dGlscy9zY3JhcGUtbW90aW9uLXZhbHVlcy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL3Jlc29sdmUtdmFyaWFudHMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9pcy1rZXlmcmFtZXMtdGFyZ2V0Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9yZXNvbHZlLXZhbHVlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS91dGlscy9yZXNvbHZlLW1vdGlvbi12YWx1ZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL3V0aWxzL3VzZS12aXN1YWwtc3RhdGUubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS1jb25zdGFudC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvbm9vcC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZnJhbWVsb29wL3JlbmRlci1zdGVwLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9mcmFtZWxvb3AvYmF0Y2hlci5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZnJhbWVsb29wL2ZyYW1lLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL2NvbmZpZy1tb3Rpb24ubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL2NvbmZpZy1tb3Rpb24ubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2V2ZW50cy9hZGQtZG9tLWV2ZW50Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9ldmVudHMvdXRpbHMvaXMtcHJpbWFyeS1wb2ludGVyLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9ldmVudHMvZXZlbnQtaW5mby5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZXZlbnRzL2FkZC1wb2ludGVyLWV2ZW50Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9waXBlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9nZXN0dXJlcy9kcmFnL3V0aWxzL2xvY2subWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9GZWF0dXJlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9nZXN0dXJlcy9ob3Zlci5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZ2VzdHVyZXMvdXRpbHMvaXMtbm9kZS1vci1jaGlsZC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZ2VzdHVyZXMvcHJlc3MubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy92aWV3cG9ydC9vYnNlcnZlcnMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy92aWV3cG9ydC9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL2ZlYXR1cmVzL2dlc3R1cmVzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9nZXN0dXJlcy9mb2N1cy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvc2hhbGxvdy1jb21wYXJlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvdXRpbHMvcmVzb2x2ZS1keW5hbWljLXZhcmlhbnRzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vb3B0aW1pemVkLWFwcGVhci9kYXRhLWlkLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9lcnJvcnMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3RpbWUtY29udmVyc2lvbi5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZWFzaW5nL3V0aWxzL2lzLWJlemllci1kZWZpbml0aW9uLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vYW5pbWF0b3JzL3dhYXBpL2Vhc2luZy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZWFzaW5nL2N1YmljLWJlemllci5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZWFzaW5nL2Vhc2UubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2Vhc2luZy91dGlscy9pcy1lYXNpbmctYXJyYXkubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2Vhc2luZy9tb2RpZmllcnMvbWlycm9yLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9lYXNpbmcvbW9kaWZpZXJzL3JldmVyc2UubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2Vhc2luZy9jaXJjLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9lYXNpbmcvYmFjay5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZWFzaW5nL3V0aWxzL21hcC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZWFzaW5nL2FudGljaXBhdGUubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3R5cGVzL2NvbG9yL3V0aWxzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS90eXBlcy9jb2xvci9yZ2JhLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS90eXBlcy9jb2xvci9oZXgubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3R5cGVzL2NvbG9yL2hzbGEubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3R5cGVzL2NvbG9yL2luZGV4Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9taXgubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2hzbGEtdG8tcmdiYS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvbWl4LWNvbG9yLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS90eXBlcy9jb21wbGV4L2luZGV4Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9taXgtY29tcGxleC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvcHJvZ3Jlc3MubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2ludGVycG9sYXRlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vZ2VuZXJhdG9ycy9rZXlmcmFtZXMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL29mZnNldHMvdGltZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvb2Zmc2V0cy9kZWZhdWx0Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9vZmZzZXRzL2ZpbGwubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3ZlbG9jaXR5LXBlci1zZWNvbmQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9nZW5lcmF0b3JzL3V0aWxzL3ZlbG9jaXR5Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vZ2VuZXJhdG9ycy9zcHJpbmcvZmluZC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL2dlbmVyYXRvcnMvc3ByaW5nL2luZGV4Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vZ2VuZXJhdG9ycy9pbmVydGlhLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vYW5pbWF0b3JzL2pzL2RyaXZlci1mcmFtZWxvb3AubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9nZW5lcmF0b3JzL3V0aWxzL2NhbGMtZHVyYXRpb24ubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9hbmltYXRvcnMvanMvaW5kZXgubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9hbmltYXRvcnMvd2FhcGkvY3JlYXRlLWFjY2VsZXJhdGVkLWFuaW1hdGlvbi5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvbWVtby5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL3V0aWxzL2RlZmF1bHQtdHJhbnNpdGlvbnMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9pcy1hbmltYXRhYmxlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS90eXBlcy9jb21wbGV4L2ZpbHRlci5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS92YWx1ZS10eXBlcy9kZWZhdWx0cy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS92YWx1ZS10eXBlcy9hbmltYXRhYmxlLW5vbmUubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2lzLXplcm8tdmFsdWUtc3RyaW5nLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vdXRpbHMvaXMtbm9uZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL3V0aWxzL3RyYW5zaXRpb25zLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vaW50ZXJmYWNlcy9tb3Rpb24tdmFsdWUubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9rZXlmcmFtZXMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9hbmltYXRvcnMvaW5zdGFudC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL2FuaW1hdG9ycy93YWFwaS9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL2FuaW1hdG9ycy93YWFwaS91dGlscy9nZXQtZmluYWwta2V5ZnJhbWUubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3VzZS13aWxsLWNoYW5nZS9pcy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvaXMtbnVtZXJpY2FsLXN0cmluZy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvYXJyYXkubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3N1YnNjcmlwdGlvbi1tYW5hZ2VyLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS92YWx1ZS10eXBlcy90ZXN0Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3ZhbHVlLXR5cGVzL2RpbWVuc2lvbnMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvdHlwZS1hdXRvLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3ZhbHVlLXR5cGVzL2ZpbmQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9zZXR0ZXJzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vaW50ZXJmYWNlcy92aXN1YWwtZWxlbWVudC10YXJnZXQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9pbnRlcmZhY2VzL3Zpc3VhbC1lbGVtZW50LXZhcmlhbnQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9hbmltYXRpb24tc3RhdGUubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9pbnRlcmZhY2VzL3Zpc3VhbC1lbGVtZW50Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vZmVhdHVyZXMvYW5pbWF0aW9uL2V4aXQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9hbmltYXRpb25zLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vZmVhdHVyZXMvYW5pbWF0aW9uL2luZGV4Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9kaXN0YW5jZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZ2VzdHVyZXMvcGFuL1BhblNlc3Npb24ubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvZGVsdGEtY2FsYy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZ2VzdHVyZXMvZHJhZy91dGlscy9jb25zdHJhaW50cy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9nZW9tZXRyeS9tb2RlbHMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vdXRpbHMvZWFjaC1heGlzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL2dlb21ldHJ5L2NvbnZlcnNpb24ubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vdXRpbHMvaGFzLXRyYW5zZm9ybS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9nZW9tZXRyeS9kZWx0YS1hcHBseS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi91dGlscy9tZWFzdXJlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9nZXN0dXJlcy9kcmFnL1Zpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL3Bhbi9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9ub2RlL3N0YXRlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL3N0eWxlcy9zY2FsZS1ib3JkZXItcmFkaXVzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL3N0eWxlcy9zY2FsZS1ib3gtc2hhZG93Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vZmVhdHVyZXMvbGF5b3V0L01lYXN1cmVMYXlvdXQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbXBvbmVudHMvQW5pbWF0ZVByZXNlbmNlL3VzZS1wcmVzZW5jZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9hbmltYXRpb24vbWl4LXZhbHVlcy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9nZW9tZXRyeS9jb3B5Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL2dlb21ldHJ5L2RlbHRhLXJlbW92ZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9nZW9tZXRyeS91dGlscy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9zaGFyZWQvc3RhY2subWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vc3R5bGVzL3RyYW5zZm9ybS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL2NvbXBhcmUtYnktZGVwdGgubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9mbGF0LXRyZWUubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vbm9kZS9jcmVhdGUtcHJvamVjdGlvbi1ub2RlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9kZWJ1Zy9yZWNvcmQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvaXMtc3ZnLWVsZW1lbnQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2RlbGF5Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vaW50ZXJmYWNlcy9zaW5nbGUtdmFsdWUubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vbm9kZS9Eb2N1bWVudFByb2plY3Rpb25Ob2RlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL25vZGUvSFRNTFByb2plY3Rpb25Ob2RlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vZmVhdHVyZXMvZHJhZy5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZ2VzdHVyZXMvZHJhZy9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS91dGlscy9jc3MtdmFyaWFibGVzLWNvbnZlcnNpb24ubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvdW5pdC1jb252ZXJzaW9uLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3V0aWxzL3BhcnNlLWRvbS12YXJpYW50Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9yZWR1Y2VkLW1vdGlvbi9zdGF0ZS5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N0b3JlLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvVmlzdWFsRWxlbWVudC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvcmVkdWNlZC1tb3Rpb24vaW5kZXgubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9tb3Rpb24tdmFsdWVzLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL0RPTVZpc3VhbEVsZW1lbnQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL0hUTUxWaXN1YWxFbGVtZW50Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL1NWR1Zpc3VhbEVsZW1lbnQubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vY3JlYXRlLXZpc3VhbC1lbGVtZW50Lm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL21vdGlvbi5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL2ZlYXR1cmVzL2xheW91dC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS91dGlscy9jcmVhdGUtY29uZmlnLm1qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2NvbXBvbmVudHMvVGFqbWVyLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy9OYXZpZ2F0aW9uLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvQXBwLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgRGlzcGxheSBmcm9tICcuL0Rpc3BsYXknXHJcbmltcG9ydCBLZXlQYWRDb21wb25lbnQgZnJvbSAnLi9LZXlQYWRDb21wb25lbnQnXHJcblxyXG5jbGFzcyBEaWdpdHJvbiBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgc3RhdGUgPSB7XHJcbiAgICByZXN1bHQ6IFwiXCJcclxuICB9XHJcblxyXG4gIG9uQ2xpY2sgPSBidXR0b24gPT4ge1xyXG4gICAgaWYgKGJ1dHRvbiA9PT0gXCI9XCIpIHtcclxuICAgICAgdGhpcy5jYWxjdWxhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBlbHNlIGlmIChidXR0b24gPT09IFwiQ1wiKSB7XHJcbiAgICAgIHRoaXMucmVzZXQoKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZWxzZSBpZiAoYnV0dG9uID09PSBcIkNFXCIpIHtcclxuICAgICAgdGhpcy5iYWNrc3BhY2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgcmVzdWx0OiB0aGlzLnN0YXRlLnJlc3VsdCArIGJ1dHRvblxyXG4gICAgICB9KVxyXG5cclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjYWxjdWxhdGUgPSAoKSA9PiB7XHJcbiAgICB2YXIgY2hlY2tSZXN1bHQgPSAnJ1xyXG4gICAgaWYgKHRoaXMuc3RhdGUucmVzdWx0LmluY2x1ZGVzKCctLScpKSB7XHJcbiAgICAgIGNoZWNrUmVzdWx0ID0gdGhpcy5zdGF0ZS5yZXN1bHQucmVwbGFjZSgnLS0nLCAnKycpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjaGVja1Jlc3VsdCA9IHRoaXMuc3RhdGUucmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHJlc3VsdDogKGV2YWwoY2hlY2tSZXN1bHQpIHx8IFwiXCIpICsgXCJcIlxyXG4gICAgICB9KVxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICByZXN1bHQ6IFwiZXJyb3JcIlxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHJlc2V0ID0gKCkgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIHJlc3VsdDogXCJcIlxyXG4gICAgfSlcclxuICB9O1xyXG5cclxuICBiYWNrc3BhY2UgPSAoKSA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgcmVzdWx0OiB0aGlzLnN0YXRlLnJlc3VsdC5zbGljZSgwLCAtMSlcclxuICAgIH0pXHJcbiAgfTtcclxuICByZW5kZXIoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FsY3VsYXRvci1ib2R5XCI+XHJcblxyXG4gICAgICAgICAgPERpc3BsYXkgcmVzdWx0PXt0aGlzLnN0YXRlLnJlc3VsdH0gLz5cclxuICAgICAgICAgIDxLZXlQYWRDb21wb25lbnQgb25DbGljaz17dGhpcy5vbkNsaWNrfSAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IERpZ2l0cm9uO1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXHJcblxyXG5jbGFzcyBEaXNwbGF5IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICByZW5kZXIoKSB7XHJcbiAgICBsZXQgeyByZXN1bHQgfSA9IHRoaXMucHJvcHM7XHJcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJyZXN1bHRcIj4ge3Jlc3VsdH0gPC9kaXY+XHJcbiAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IERpc3BsYXkiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5cclxuXHJcbmNsYXNzIEtleVBhZENvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7IFxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidXR0b25cIj5cclxuICBcclxuICAgXHJcbiAgICAgICAgICA8YnV0dG9uIG5hbWU9XCJDXCIgb25DbGljaz17ZSA9PiB0aGlzLnByb3BzLm9uQ2xpY2soZS50YXJnZXQubmFtZSl9IGxhYmVsPVwiQ1wiIHZhbHVlPVwiY2xlYXJcIiA+QzwvYnV0dG9uPiBcclxuICAgICAgICAgIDxidXR0b24gbmFtZT1cIkNFXCIgb25DbGljaz17ZSA9PiB0aGlzLnByb3BzLm9uQ2xpY2soZS50YXJnZXQubmFtZSl9PkNFPC9idXR0b24+XHJcbiAgICAgICAgICA8YnV0dG9uIG5hbWU9XCIoXCIgb25DbGljaz17ZSA9PiB0aGlzLnByb3BzLm9uQ2xpY2soZS50YXJnZXQubmFtZSl9Pig8L2J1dHRvbj5cclxuICAgICAgICAgIDxidXR0b24gbmFtZT1cIilcIiBvbkNsaWNrPXtlID0+IHRoaXMucHJvcHMub25DbGljayhlLnRhcmdldC5uYW1lKX0+KTwvYnV0dG9uPlxyXG5cclxuICAgICAgICAgIDxidXR0b24gbmFtZT1cIjdcIiBvbkNsaWNrPXtlID0+IHRoaXMucHJvcHMub25DbGljayhlLnRhcmdldC5uYW1lKX0gbGFiZWw9XCI3XCIgdmFsdWU9XCI3XCI+NzwvYnV0dG9uPiAgXHJcbiAgICAgICAgICA8YnV0dG9uIG5hbWU9XCI4XCIgb25DbGljaz17ZSA9PiB0aGlzLnByb3BzLm9uQ2xpY2soZS50YXJnZXQubmFtZSl9IGxhYmVsPVwiOFwiIHZhbHVlPVwiOFwiPjg8L2J1dHRvbj4gXHJcbiAgICAgICAgICA8YnV0dG9uIG5hbWU9XCI5XCIgb25DbGljaz17ZSA9PiB0aGlzLnByb3BzLm9uQ2xpY2soZS50YXJnZXQubmFtZSl9IGxhYmVsPVwiOVwiIHZhbHVlPVwiOVwiID45PC9idXR0b24+XHJcbiAgICAgICAgICA8YnV0dG9uIG5hbWU9XCIrXCIgb25DbGljaz17ZSA9PiB0aGlzLnByb3BzLm9uQ2xpY2soZS50YXJnZXQubmFtZSl9IGxhYmVsPVwiK1wiIHNpemU9XCIyXCIgdmFsdWU9XCIrXCIgPis8L2J1dHRvbj4gXHJcblxyXG4gICAgICAgICAgPGJ1dHRvbiBuYW1lPVwiNFwiIG9uQ2xpY2s9e2UgPT4gdGhpcy5wcm9wcy5vbkNsaWNrKGUudGFyZ2V0Lm5hbWUpfSBsYWJlbD1cIjRcIiB2YWx1ZT1cIjRcIj40PC9idXR0b24+ICBcclxuICAgICAgICAgIDxidXR0b24gbmFtZT1cIjVcIiBvbkNsaWNrPXtlID0+IHRoaXMucHJvcHMub25DbGljayhlLnRhcmdldC5uYW1lKX0gbGFiZWw9XCI1XCIgdmFsdWU9XCI1XCIgPjU8L2J1dHRvbj4gXHJcbiAgICAgICAgICA8YnV0dG9uIG5hbWU9XCI2XCIgb25DbGljaz17ZSA9PiB0aGlzLnByb3BzLm9uQ2xpY2soZS50YXJnZXQubmFtZSl9IGxhYmVsPVwiNlwiIHZhbHVlPVwiNlwiID42PC9idXR0b24+IFxyXG4gICAgICAgICAgPGJ1dHRvbiBuYW1lPVwiLVwiIG9uQ2xpY2s9e2UgPT4gdGhpcy5wcm9wcy5vbkNsaWNrKGUudGFyZ2V0Lm5hbWUpfSBsYWJlbD1cIi1cIiB2YWx1ZT1cIi1cIj4tPC9idXR0b24+ICBcclxuXHJcbiAgICAgICAgICA8YnV0dG9uIG5hbWU9XCIxXCIgb25DbGljaz17ZSA9PiB0aGlzLnByb3BzLm9uQ2xpY2soZS50YXJnZXQubmFtZSl9IGxhYmVsPVwiMVwiIHZhbHVlPVwiMVwiID4xPC9idXR0b24+IFxyXG4gICAgICAgICAgPGJ1dHRvbiBuYW1lPVwiMlwiIG9uQ2xpY2s9e2UgPT4gdGhpcy5wcm9wcy5vbkNsaWNrKGUudGFyZ2V0Lm5hbWUpfSBsYWJlbD1cIjJcIiB2YWx1ZT1cIjJcIiA+MjwvYnV0dG9uPiBcclxuICAgICAgICAgIDxidXR0b24gbmFtZT1cIjNcIiBvbkNsaWNrPXtlID0+IHRoaXMucHJvcHMub25DbGljayhlLnRhcmdldC5uYW1lKX0gbGFiZWw9XCIzXCIgdmFsdWU9XCIzXCIgPjM8L2J1dHRvbj5cclxuICAgICAgICAgIDxidXR0b24gbmFtZT1cIipcIiBvbkNsaWNrPXtlID0+IHRoaXMucHJvcHMub25DbGljayhlLnRhcmdldC5uYW1lKX0gbGFiZWw9XCJ4XCIgdmFsdWU9XCIqXCIgPio8L2J1dHRvbj4gXHJcblxyXG4gICAgICAgICAgPGJ1dHRvbiBuYW1lPVwiLlwiIG9uQ2xpY2s9e2UgPT4gdGhpcy5wcm9wcy5vbkNsaWNrKGUudGFyZ2V0Lm5hbWUpfSBsYWJlbD1cIi5cIiB2YWx1ZT1cIi5cIiA+LjwvYnV0dG9uPiBcclxuICAgICAgICAgIDxidXR0b24gbmFtZT1cIjBcIiBvbkNsaWNrPXtlID0+IHRoaXMucHJvcHMub25DbGljayhlLnRhcmdldC5uYW1lKX0gbGFiZWw9XCIwXCIgdmFsdWU9XCIwXCIgPjA8L2J1dHRvbj4gXHJcbiAgICAgICAgICA8YnV0dG9uIG5hbWU9XCI9XCIgb25DbGljaz17ZSA9PiB0aGlzLnByb3BzLm9uQ2xpY2soZS50YXJnZXQubmFtZSl9IGxhYmVsPVwiPVwiIHNpemU9XCIyXCIgdmFsdWU9XCJlcXVhbFwiID49PC9idXR0b24+IFxyXG4gICAgICAgICAgPGJ1dHRvbiBuYW1lPVwiL1wiIG9uQ2xpY2s9e2UgPT4gdGhpcy5wcm9wcy5vbkNsaWNrKGUudGFyZ2V0Lm5hbWUpfSBsYWJlbD1cIi9cIiB2YWx1ZT1cIi9cIiA+LzwvYnV0dG9uPiBcclxuXHJcbiAgICAgICBcclxuXHJcbiAgICAgIFxyXG4gICAgICA8L2Rpdj5cclxuICAgICl9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgS2V5UGFkQ29tcG9uZW50OyIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuY29udGFpbmVye2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47bWFyZ2luOmF1dG87bWF4LXdpZHRoOjY1MHB4O21pbi13aWR0aDo2NTBweDtoZWlnaHQ6MTIwMHB4O2JhY2tncm91bmQtY29sb3I6I2UwYjhhMDt0ZXh0LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn0uY29udGFpbmVyIGhye3dpZHRoOjY0NXB4fS5jb250YWluZXIgLmNvbG9yQm94e2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6YmFzZWxpbmU7YWxpZ24taXRlbXM6ZW5kO3dpZHRoOjUwMHB4O2hlaWdodDozNDVweDtiYWNrZ3JvdW5kLWNvbG9yOmJpc3F1ZTtib3JkZXI6OHB4IHNvbGlkICM5ZTllOWU7Ym9yZGVyLXJhZGl1czoxMnB4fS5jb250YWluZXIgLmNvbG9yQm94IC5ib3h7d2lkdGg6MTAwcHg7YmFja2dyb3VuZC1jb2xvcjojMjkyMGQ0fS5jb250YWluZXIgLmNvbG9yQm94IC5ib3gxe3dpZHRoOjEwMHB4O2JhY2tncm91bmQtY29sb3I6IzM4MmZkOX0uY29udGFpbmVyIC5jb2xvckJveCAuYm94Mnt3aWR0aDoxMDBweDtiYWNrZ3JvdW5kLWNvbG9yOiM1NzUxZDJ9LmNvbnRhaW5lciAuY29sb3JCb3ggLmJveDN7d2lkdGg6MTAwcHg7YmFja2dyb3VuZC1jb2xvcjojNzQ2ZmQyfS5jb250YWluZXIgLmNvbG9yQm94IC5ib3g0e3dpZHRoOjEwMHB4O2JhY2tncm91bmQtY29sb3I6Izk3OTRkM30uY29udGFpbmVyIC5jb2xvckJveCAuYm94QmF0e2hlaWdodDoyMHB4O3BhZGRpbmc6NHB4O2JvcmRlcjpzb2xpZCAxcHggZ3JlZW47Ym9yZGVyLXJhZGl1czo1cHg7YmFja2dyb3VuZC1jb2xvcjojZmZkMjdkO2N1cnNvcjpwb2ludGVyfS5jb250YWluZXIgLmNvbG9yQm94IC5ib3hCYXQ6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZWJhYjZjfS5jb250YWluZXIgLmNvbG9yQm94IC50aXRsZXtoZWlnaHQ6MjJweDtwYWRkaW5nOjRweDtiYWNrZ3JvdW5kLWNvbG9yOiNkMGYwZTY7Y29sb3I6IzE5MTk0OX0uY29udGFpbmVyIC5ib3hCYXRBbGx7aGVpZ2h0OjI0cHg7cGFkZGluZzo0cHggMzBweDtib3JkZXI6c29saWQgMnB4IGdyZWVuO2JvcmRlci1yYWRpdXM6N3B4O2JhY2tncm91bmQtY29sb3I6I2ZmZDI3ZDttYXJnaW46MTBweDtjdXJzb3I6cG9pbnRlcn0uY29udGFpbmVyIC5ib3hCYXRBbGw6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZWJhYjZjfS5jb250YWluZXIgLmlucHV0VGV4dHtjb2xvcjojNDA0MzNmO2ZvbnQtc2l6ZToyMHB4O21hcmdpbjoxMHB4fS5jb250YWluZXIgLmlucHV0VGV4dCAuaW5wdXRQbGFjZXttYXgtd2lkdGg6MTAwcHg7aGVpZ2h0OjIwcHg7YmFja2dyb3VuZC1jb2xvcjphbGljZWJsdWV9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTAwcHgpey5jb250YWluZXJ7bWF4LXdpZHRoOjM1OHB4O21pbi13aWR0aDozNThweH0uY29udGFpbmVyIGhye3dpZHRoOjM1NXB4fS5jb250YWluZXIgLmNvbG9yQm94e21heC13aWR0aDozMjVweDttaW4td2lkdGg6MzI1cHg7Ym9yZGVyOnNvbGlkIDNweCBncmV5O2JvcmRlci1yYWRpdXM6OHB4fS5jb250YWluZXIgLmNvbG9yQm94IC5ib3gsLmNvbnRhaW5lciAuY29sb3JCb3ggLmJveDEsLmNvbnRhaW5lciAuY29sb3JCb3ggLmJveDIsLmNvbnRhaW5lciAuY29sb3JCb3ggLmJveDMsLmNvbnRhaW5lciAuY29sb3JCb3ggLmJveDR7d2lkdGg6NjVweH0uY29udGFpbmVyIC5jb2xvckJveCAuYm94QmF0e2JvcmRlci1yYWRpdXM6NXB4fX1ib2R5e2JhY2tncm91bmQtY29sb3I6c2Vhc2hlbGx9LnJlc3VsdHtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmxlZnQ7YWxpZ24taXRlbXM6Y2VudGVyO2hlaWdodDo2MHB4O2JhY2tncm91bmQtY29sb3I6I2U3ZjZmZDtib3JkZXI6MXB4IHNvbGlkIGJsYWNrO3dpZHRoOjk3JTtmb250LXNpemU6NDBweDtmb250LWZhbWlseTonQ29tZm9ydGFhJywgY3Vyc2l2ZTtwYWRkaW5nLWxlZnQ6N3B4O292ZXJmbG93OmhpZGRlbn0uY2FsY3VsYXRvci1ib2R5e21heC13aWR0aDo0MDBweDttYXJnaW46YXV0b30uYnV0dG9ue2JhY2tncm91bmQtY29sb3I6I2JiYn1idXR0b257d2lkdGg6MjUlO2hlaWdodDo2MHB4O2ZvbnQtc2l6ZTozMHB4O2ZvbnQtZmFtaWx5OidDb21mb3J0YWEnLCBjdXJzaXZlO2JhY2tncm91bmQtY29sb3I6I2YxZjFmMTtjdXJzb3I6cG9pbnRlcn1idXR0b246aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZmJkNTkwfUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDUwMHB4KXsucmVzdWx0e2hlaWdodDo0MHB4O3dpZHRoOjkzJTtmb250LXNpemU6MjRweDtmb250LWZhbWlseTonQ29tZm9ydGFhJywgY3Vyc2l2ZTtwYWRkaW5nLXJpZ2h0OjhweH0uY2FsY3VsYXRvci1ib2R5e21heC13aWR0aDoyNTBweH1idXR0b257aGVpZ2h0OjQwcHg7Zm9udC1zaXplOjE4cHg7Zm9udC1mYW1pbHk6J0NvbWZvcnRhYScsIGN1cnNpdmV9fWJvZHl7Zm9udC1mYW1pbHk6J1RyZWJ1Y2hldCBNUycsICdMdWNpZGEgU2FucyBVbmljb2RlJywgJ0x1Y2lkYSBHcmFuZGUnLCAnTHVjaWRhIFNhbnMnLCBBcmlhbCwgc2Fucy1zZXJpZjtmb250LXNpemU6MThweDtiYWNrZ3JvdW5kLWNvbG9yOiNkN2NjYzh9Lm5hdkNvbnRhaW5lcntiYWNrZ3JvdW5kLWNvbG9yOiNiY2FhYTQ7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdzttYXJnaW46YXV0bztoZWlnaHQ6NjBweDttYXgtd2lkdGg6NjUwcHg7bWluLXdpZHRoOjY1MHB4O2p1c3RpZnktY29udGVudDpzcGFjZS1hcm91bmQ7YWxpZ24taXRlbXM6Y2VudGVyfS5uYXZDb250YWluZXIgLmxpbmtlcntjb2xvcjojY2RjZGNkO3RleHQtZGVjb3JhdGlvbjpub25lO2ZvbnQtd2VpZ2h0OmJvbGR9Lm5hdkNvbnRhaW5lciAubGlua2VyOmhvdmVye2NvbG9yOiNhOGRiZDd9LmhvbWV7bWFyZ2luLXRvcDowO21hcmdpbjphdXRvO3dpZHRoOjY1MHB4O2hlaWdodDo4ODBweDtiYWNrZ3JvdW5kLWNvbG9yOiNkN2NjYzg7cGFkZGluZy10b3A6MTAwcHh9LmhvbWUgLmltZ3ttYXJnaW46YXV0bztiYWNrZ3JvdW5kLXNpemU6Y292ZXI7YmFja2dyb3VuZC1pbWFnZTp1cmwoXCJodHRwczovL2ZyZWVwbmdpbWcuY29tL3RodW1iL3NoYXBlLzgxNTAwLWdvbGRlbi1yYXRpby1zcGlyYWwtbnVtYmVyLWZpYm9uYWNjaS13aGl0ZS1jaXJjbGUucG5nXCIpO3dpZHRoOjY0MHB4O2hlaWdodDozOTVweH0ub2Rub3Npe2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZTttYXgtd2lkdGg6NjUwcHg7bWluLXdpZHRoOjY1MHB4O21hcmdpbjphdXRvO2JhY2tncm91bmQtY29sb3I6I2Q3Y2NjODttYXJnaW4tYm90dG9tOjEycHh9Lm9kbm9zaSAucHJvY3twYWRkaW5nLWxlZnQ6MjBweH0ub2Rub3NpIHRoe2JhY2tncm91bmQtY29sb3I6IzhmN2E2Zjtjb2xvcjojZjVmNWY1O2ZvbnQtc2l6ZToxOHB4O3BhZGRpbmc6MTJweH0ub2Rub3NpIC5yZWxhY2lqYXttaW4td2lkdGg6NTBweDttYXgtd2lkdGg6NTBweDtvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpc30ub2Rub3NpIHRke2ZvbnQtZmFtaWx5OlZlcmRhbmEsIEdlbmV2YSwgVGFob21hLCBzYW5zLXNlcmlmO2ZvbnQtc2l6ZToxNnB4O3RleHQtYWxpZ246Y2VudGVyO21pbi13aWR0aDo1MHB4O21heC13aWR0aDo1MHB4O3BhZGRpbmc6MTBweCAwcHh9Lm9kbm9zaSBpbnB1dHt0ZXh0LWFsaWduOmNlbnRlcjtoZWlnaHQ6MjBweDttaW4td2lkdGg6NTBweDttYXgtd2lkdGg6NTBweDtiYWNrZ3JvdW5kLWNvbG9yOiNlN2Y2ZmQ7Ym9yZGVyLXJhZGl1czo0cHg7Ym9yZGVyLWNvbG9yOmJ1cmx5d29vZH1tb2RlbC12aWV3ZXJ7bWFyZ2luOmF1dG87Y3Vyc29yOmdyYWI7ZGlzcGxheTpmbGV4O2hlaWdodDo1MDBweDt3aWR0aDo2NTBweDtvdmVyZmxvdzpoaWRkZW47cG9zaXRpb246cmVsYXRpdmU7dXNlci1zZWxlY3Q6bm9uZX0udmlldy1idXR0b257YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtib3JkZXItY29sb3I6dHJhbnNwYXJlbnR9LmNhbGN7bWFyZ2luOmF1dG87bWFyZ2luLXRvcDozMHB4O3dpZHRoOjMwMHB4fS5ocmFuYXtib3JkZXItY29sbGFwc2U6Y29sbGFwc2U7bWF4LXdpZHRoOjY1MHB4O21pbi13aWR0aDo2NTBweDtiYWNrZ3JvdW5kLWNvbG9yOiNjZGNkY2Q7bWFyZ2luOmF1dG99LmhyYW5hIC5uYXNsb3Z7Zm9udC1zaXplOjIwcHg7bWluLXdpZHRoOjE1MHB4O21heC13aWR0aDoxNTBweH0uaHJhbmEgaW5wdXR7dGV4dC1hbGlnbjpsZWZ0O2hlaWdodDoyMHB4O21pbi13aWR0aDo2MHB4O21heC13aWR0aDo2MHB4O2JhY2tncm91bmQtY29sb3I6I2U3ZjZmZDtib3JkZXItcmFkaXVzOjRweDtib3JkZXItY29sb3I6YnVybHl3b29kfS5ocmFuYSAuaGlkcmF0aXtiYWNrZ3JvdW5kLWNvbG9yOiNiOGM2Yjh9LmhyYW5hIC5oaWRyYXRpIC5wcm90ZWlue2hlaWdodDoyNXB4O21pbi13aWR0aDoyN3B4O21heC13aWR0aDoyN3B4O292ZXJmbG93OmhpZGRlbjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzfS5ocmFuYSAuaGlkcmF0aSAudWdIaWQsLmhyYW5hIC5oaWRyYXRpIC5tYXN0e21pbi13aWR0aDo2MHB4fS5ocmFuYSAucHJvdHtiYWNrZ3JvdW5kLWNvbG9yOiNlZWQwYWF9LmhyYW5hIC5wcm90IC5wcm90ZWlue2hlaWdodDoyNXB4O21pbi13aWR0aDoyN3B4O21heC13aWR0aDoyN3B4O292ZXJmbG93OmhpZGRlbjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzfS5ocmFuYSAubWxla297YmFja2dyb3VuZC1jb2xvcjojZThlOGU4fS5ocmFuYSAubWxla28gLnByb3RlaW57aGVpZ2h0OjI1cHg7bWluLXdpZHRoOjI3cHg7bWF4LXdpZHRoOjI3cHg7b3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXN9LmhyYW5hIC5vaWx7YmFja2dyb3VuZC1jb2xvcjojZTBkYjk3fS5ocmFuYSAub2lsIC5wcm90ZWlue2hlaWdodDoyNXB4O21pbi13aWR0aDoyN3B4O21heC13aWR0aDoyN3B4O292ZXJmbG93OmhpZGRlbjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzfS5ocmFuYSAub3JhaHtiYWNrZ3JvdW5kLWNvbG9yOiNhMWM0YjJ9LmhyYW5hIC5vcmFoIC5wcm90ZWlue2hlaWdodDoyNXB4O21pbi13aWR0aDoyN3B4O21heC13aWR0aDoyN3B4O292ZXJmbG93OmhpZGRlbjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzfS5ocmFuYSAudm9jZXtiYWNrZ3JvdW5kLWNvbG9yOiNhNTkwYjZ9LmhyYW5hIC52b2NlIC5wcm90ZWlue2hlaWdodDoyNXB4O21pbi13aWR0aDoyN3B4O21heC13aWR0aDoyN3B4O292ZXJmbG93OmhpZGRlbjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzfS5ocmFuYSAua3VwdXN7YmFja2dyb3VuZC1jb2xvcjojYjlmM2IyfS5ocmFuYSAua3VwdXMgLnByb3RlaW57aGVpZ2h0OjI1cHg7bWluLXdpZHRoOjI3cHg7bWF4LXdpZHRoOjI3cHg7b3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXN9LmhyYW5hIC5hbGNvaG9se2JhY2tncm91bmQtY29sb3I6I2NlZmZmN30uaHJhbmEgLmFsY29ob2wgLnByb3RlaW57aGVpZ2h0OjI1cHg7bWluLXdpZHRoOjI3cHg7bWF4LXdpZHRoOjI3cHg7b3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXN9LmhyYW5hIHRoZWFke2ZvbnQtc2l6ZToyMHB4fS5ocmFuYSB0aGVhZCB0aHt0ZXh0LWFsaWduOmNlbnRlcjtiYWNrZ3JvdW5kLWNvbG9yOiM0YzZhNGI7Y29sb3I6I2NkY2RjZDtwYWRkaW5nOjEwcHggM3B4O21pbi13aWR0aDoyNnB4fS5ocmFuYSB0cntiYWNrZ3JvdW5kLWNvbG9yOiNkN2NjYzh9LmhyYW5hIHRmb290e2NvbG9yOiNhOGRiZDd9LmhyYW5hIHRmb290IHRye2JhY2tncm91bmQtY29sb3I6IzkyYTE5Mn0uaHJhbmEgdGZvb3QgdHIgLnByb3RlaW57aGVpZ2h0OjI1cHg7bWluLXdpZHRoOjI3cHg7bWF4LXdpZHRoOjI3cHg7b3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXN9LmhyYW5hIHRke3BhZGRpbmc6OHB4O2ZvbnQtc2l6ZToyNH0uYmFjay10by10b3B7cG9zaXRpb246Zml4ZWQ7Ym90dG9tOjIwcHg7cmlnaHQ6MjBweDtjb2xvcjojODQ4NjdiO2N1cnNvcjpwb2ludGVyO2JvcmRlci1yYWRpdXM6NDAwcHh9LmJhY2stdG8tdG9wIC5hcnJvd3Vwe3dpZHRoOjI0cHg7aGVpZ2h0OjI0cHg7Y29sb3I6IzdhOWM5OWFjO2JhY2tncm91bmQtY29sb3I6cmdiYSgxNjUsMjA2LDE5NSwwLjQzKTtmb250LXNpemU6MzhweDtwYWRkaW5nLWxlZnQ6NXB4O2JvcmRlci1yYWRpdXM6MTJweDtib3JkZXI6c29saWQgM3B4ICM5NWJlYmE3Y31AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1MDBweCl7Ym9keXtmb250LXNpemU6MTZweDttYXJnaW46MDtwYWRkaW5nOjB9Lm5hdkNvbnRhaW5lcnttYXgtd2lkdGg6MzU4cHg7bWluLXdpZHRoOjM1OHB4O21hcmdpbjphdXRvfS5ob21le21hcmdpbi10b3A6MDttYXJnaW46YXV0bzt3aWR0aDozNThweDtoZWlnaHQ6ODgwcHg7cGFkZGluZy10b3A6ODBweH0uaG9tZSAuaW1ne2hlaWdodDoyMjFweDt3aWR0aDozNThweH0ub2Rub3Npe21heC13aWR0aDozNThweDttaW4td2lkdGg6MzU4cHh9Lm9kbm9zaSB0cntwYWRkaW5nOjEycHggOHB4fS5vZG5vc2kgdGh7Zm9udC1zaXplOjE0cHg7cGFkZGluZzo3cHh9Lm9kbm9zaSAucmVsYWNpamF7bWluLXdpZHRoOjMwcHg7bWF4LXdpZHRoOjMwcHh9Lm9kbm9zaSB0ZHtmb250LXNpemU6MTRweDttaW4td2lkdGg6MzBweDttYXgtd2lkdGg6MzBweH0ub2Rub3NpIGlucHV0e2hlaWdodDoxOHB4O21pbi13aWR0aDozMHB4O21heC13aWR0aDozMHB4fW1vZGVsLXZpZXdlcnt3aWR0aDozNjBweDtoZWlnaHQ6NDAwcHh9LmhyYW5he21heC13aWR0aDozNThweDttaW4td2lkdGg6MzU4cHg7bWFyZ2luOmF1dG87Zm9udC1zaXplOjE0cHh9LmhyYW5hIHRoZWFke2ZvbnQtc2l6ZToxNHB4O3BhZGRpbmc6NnB4IDJweH0uaHJhbmEgLmhpZHJhdGkgLnVnSGlke21pbi13aWR0aDozN3B4fS5ocmFuYSAuaGlkcmF0aSAubWFzdHttaW4td2lkdGg6MzdweH0uaHJhbmEgLm5hc2xvdntmb250LXNpemU6MTRweDttaW4td2lkdGg6NTBweDttYXgtd2lkdGg6NTBweH0uaHJhbmEgaW5wdXR7Zm9udC1zaXplOjE0cHg7bWluLXdpZHRoOjQ3cHg7bWF4LXdpZHRoOjQ3cHg7Ym9yZGVyLXJhZGl1czozcHh9LmhyYW5hIHRke3BhZGRpbmc6M3B4IDVweH19XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zY3NzL190YWptZXIuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3Njc3MvX2RpZ2l0cm9uLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zY3NzL21haW4uc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFLQSxXQUNJLFlBQWEsQ0FDYixxQkFBc0IsQ0FFdEIsV0FBWSxDQUNaLGVBQWdCLENBQ2hCLGVBQWdCLENBQ2hCLGFBQWMsQ0FDZCx3QkFBb0MsQ0FDcEMsaUJBQWtCLENBQ2xCLGtCQUFtQixDQUNuQixzQkFBdUIsQ0FYM0IsY0FlTyxXQUFZLENBZm5CLHFCQW9CUSxZQUFhLENBQ2Isd0JBQXlCLENBQ3pCLGVBQWdCLENBQ2hCLFdBQVksQ0FDWixZQUFhLENBQ2IsdUJBQXdCLENBQ3hCLHdCQUF5QixDQUN6QixrQkFBbUIs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QUFhLENBQ2hCLE9BR0csZUFBZ0IsQ0FDaEIsZUFBZ0IsQ0FDaEIsV0FBWSxDQUNaLGNBQWUsQ0FKbkIsYUFPUSxjQUFlLENBQ2YsZUFBZ0IsQ0FSeEIsdUJBYVksY0FBZSxDQWIzQixzQkFnQlksY0FBZSxDQWhCM0IsZUFxQlEsY0FBZSxDQUNmLGNBQWUsQ0FDZixjQUFlLENBdkJ2QixhQTJCUSxjQUFlLENBQ2YsY0FBZSxDQUNmLGNBQWUsQ0FDZixpQkFBa0IsQ0E5QjFCLFVBa0NRLGVBQWdCLENBRW5CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIiRjb2xvcjAxOiByZ2IoNDEsIDMyLCAyMTIpO1xcclxcbiRjb2xvcjAyOiByZ2IoNTYsIDQ3LCAyMTcpO1xcclxcbiRjb2xvcjAzOiByZ2IoODcsIDgxLCAyMTApO1xcclxcbiRjb2xvcjA0OiByZ2IoMTE2LCAxMTEsIDIxMCk7XFxyXFxuJGNvbG9yMDU6IHJnYigxNTEsIDE0OCwgMjExKTtcXHJcXG4uY29udGFpbmVyIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG5cXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbiAgICBtYXgtd2lkdGg6IDY1MHB4O1xcclxcbiAgICBtaW4td2lkdGg6IDY1MHB4O1xcclxcbiAgICBoZWlnaHQ6IDEyMDBweDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIyNCwgMTg0LCAxNjApO1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcblxcclxcbiAgICBociB7XFxyXFxuICAgICAgIFxcclxcbiAgICAgICB3aWR0aDogNjQ1cHg7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG5cXHJcXG4gICAgLmNvbG9yQm94IHtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGJhc2VsaW5lO1xcclxcbiAgICAgICAgYWxpZ24taXRlbXM6IGVuZDtcXHJcXG4gICAgICAgIHdpZHRoOiA1MDBweDtcXHJcXG4gICAgICAgIGhlaWdodDogMzQ1cHg7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBiaXNxdWU7XFxyXFxuICAgICAgICBib3JkZXI6IDhweCBzb2xpZCAjOWU5ZTllO1xcclxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMTJweDtcXHJcXG5cXHJcXG4gICAgICAgIC5ib3gge1xcclxcbiAgICAgICAgICAgIHdpZHRoOiAxMDBweDtcXHJcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3IwMTtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIC5ib3gxIHtcXHJcXG4gICAgICAgICAgICB3aWR0aDogMTAwcHg7XFxyXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yMDI7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICAuYm94MiB7XFxyXFxuICAgICAgICAgICAgd2lkdGg6IDEwMHB4O1xcclxcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvcjAzO1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgLmJveDMgIHtcXHJcXG4gICAgICAgICAgICB3aWR0aDogMTAwcHg7XFxyXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yMDQ7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICAuYm94NCB7XFxyXFxuICAgICAgICAgICAgd2lkdGg6IDEwMHB4O1xcclxcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvcjA1O1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgLmJveEJhdCB7XFxyXFxuICAgICAgICAgICAgaGVpZ2h0OiAyMHB4O1xcclxcbiAgICAgICAgICAgIHBhZGRpbmc6IDRweDtcXHJcXG4gICAgICAgICAgICBib3JkZXI6IHNvbGlkIDFweCBncmVlbjtcXHJcXG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxyXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI1NSwgMjEwLCAxMjUpO1xcclxcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG5cXHJcXG4gICAgICAgICAgICAmOmhvdmVyIHtcXHJcXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIzNSwgMTcxLCAxMDgpO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIC50aXRsZSB7XFxyXFxuICAgICAgICAgICAgaGVpZ2h0OiAyMnB4O1xcclxcbiAgICAgICAgICAgIHBhZGRpbmc6IDRweDtcXHJcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjA4LCAyNDAsIDIzMCk7XFxyXFxuICAgICAgICAgICAgY29sb3I6IHJnYigyNSwgMjUsIDczKTtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuYm94QmF0QWxsIHtcXHJcXG4gICAgICAgIGhlaWdodDogMjRweDtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDRweCAzMHB4O1xcclxcbiAgICAgICAgYm9yZGVyOiBzb2xpZCAycHggZ3JlZW47XFxyXFxuICAgICAgICBib3JkZXItcmFkaXVzOiA3cHg7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1LCAyMTAsIDEyNSk7XFxyXFxuICAgICAgICBtYXJnaW46IDEwcHg7XFxyXFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuXFxyXFxuICAgICAgICAmOmhvdmVyIHtcXHJcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjM1LCAxNzEsIDEwOCk7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLmlucHV0VGV4dCB7XFxyXFxuICAgICAgICBjb2xvcjogIzQwNDMzZjtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMjBweDtcXHJcXG4gICAgICAgIG1hcmdpbjogMTBweDtcXHJcXG5cXHJcXG4gICAgICAgIC5pbnB1dFBsYWNlIHtcXHJcXG4gICAgICAgICAgICBtYXgtd2lkdGg6IDEwMHB4O1xcclxcbiAgICAgICAgICAgIGhlaWdodDogMjBweDtcXHJcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBhbGljZWJsdWU7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTAwcHgpIHtcXHJcXG4gICAgLmNvbnRhaW5lciB7XFxyXFxuICAgICAgICBtYXgtd2lkdGg6IDM1OHB4O1xcclxcbiAgICAgICAgbWluLXdpZHRoOiAzNThweDtcXHJcXG5cXHJcXG4gICAgICAgIGhyIHtcXHJcXG4gICAgICAgICAgICB3aWR0aDogMzU1cHg7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAuY29sb3JCb3gge1xcclxcbiAgICAgICAgICAgIG1heC13aWR0aDogMzI1cHg7XFxyXFxuICAgICAgICAgICAgbWluLXdpZHRoOiAzMjVweDtcXHJcXG4gICAgICAgICAgICBib3JkZXI6IHNvbGlkIDNweCBncmV5O1xcclxcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcXHJcXG5cXHJcXG5cXHJcXG4gICAgICAgICAgICAuYm94LFxcclxcbiAgICAgICAgICAgIC5ib3gxLFxcclxcbiAgICAgICAgICAgIC5ib3gyLFxcclxcbiAgICAgICAgICAgIC5ib3gzLFxcclxcbiAgICAgICAgICAgIC5ib3g0IHtcXHJcXG4gICAgICAgICAgICAgICAgd2lkdGg6IDY1cHg7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIC5ib3hCYXQge1xcclxcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVwiLFwiYm9keSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHNlYXNoZWxsO1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG4ucmVzdWx0IHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBsZWZ0O1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBoZWlnaHQ6IDYwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyMzEsIDI0NiwgMjUzKTtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxyXFxuICAgIHdpZHRoOiA5NyU7XFxyXFxuICAgIGZvbnQtc2l6ZTogNDBweDtcXHJcXG4gICAgZm9udC1mYW1pbHk6ICdDb21mb3J0YWEnLCBjdXJzaXZlO1xcclxcbiAgICBwYWRkaW5nLWxlZnQ6IDdweDtcXHJcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuLmNhbGN1bGF0b3ItYm9keSB7XFxyXFxuICAgIG1heC13aWR0aDogNDAwcHg7XFxyXFxuICAgIG1hcmdpbjogYXV0bztcXHJcXG59XFxyXFxuXFxyXFxuLmJ1dHRvbiB7XFxyXFxuICAgIC8vIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYmJiO1xcclxcbn1cXHJcXG5cXHJcXG5idXR0b24ge1xcclxcbiAgICB3aWR0aDogMjUlO1xcclxcbiAgICBoZWlnaHQ6IDYwcHg7XFxyXFxuICAgIGZvbnQtc2l6ZTogMzBweDtcXHJcXG4gICAgZm9udC1mYW1pbHk6ICdDb21mb3J0YWEnLCBjdXJzaXZlO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjQxLCAyNDEsIDI0MSk7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG5cXHJcXG4gICAgJjpob3ZlciB7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjUxLCAyMTMsIDE0NCk7XFxyXFxuXFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTAwcHgpIHtcXHJcXG5cXHJcXG4gICAgLnJlc3VsdCB7XFxyXFxuXFxyXFxuICAgICAgICBoZWlnaHQ6IDQwcHg7XFxyXFxuICAgICBcXHJcXG4gICAgICAgIHdpZHRoOiA5MyU7XFxyXFxuICAgICAgICBmb250LXNpemU6IDI0cHg7XFxyXFxuICAgICAgICBmb250LWZhbWlseTogJ0NvbWZvcnRhYScsIGN1cnNpdmU7XFxyXFxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiA4cHg7XFxyXFxuXFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLmNhbGN1bGF0b3ItYm9keSB7XFxyXFxuICAgICAgICBtYXgtd2lkdGg6IDI1MHB4O1xcclxcblxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIGJ1dHRvbiB7XFxyXFxuXFxyXFxuICAgICAgICBoZWlnaHQ6IDQwcHg7XFxyXFxuICAgICAgICBmb250LXNpemU6IDE4cHg7XFxyXFxuICAgICAgICBmb250LWZhbWlseTogJ0NvbWZvcnRhYScsIGN1cnNpdmU7XFxyXFxuXFxyXFxuXFxyXFxuICAgIH1cXHJcXG5cXHJcXG5cXHJcXG59XCIsXCJAaW1wb3J0ICcuLi9zY3NzL190YWptZXIuc2Nzcyc7XFxyXFxuQGltcG9ydCAnLi4vc2Nzcy9fZGlnaXRyb24uc2Nzcyc7XFxyXFxuXFxyXFxuXFxyXFxuJGNvbG9yLW9uZTogI2NkY2RjZDtcXHJcXG4kY29sb3ItdHdvOiAjYTdhYmIwO1xcclxcbiRjb2xvci10aHJlZTogcmdiKDE2NCwgMTY4LCAyMDYpO1xcclxcbiRjb2xvcjQ6IHJnYigyMzEsIDI0NiwgMjUzKTtcXHJcXG4vLyAkY29sb3I1OiByZ2IoMjQxLCAyNDEsIDI0MSk7XFxyXFxuJGNvbG9yNTogI2Q3Y2NjODtcXHJcXG4kY29sb3I2OiByZ2IoMTQzLCAxMjIsIDExMSk7XFxyXFxuJGNvbG9ySGlkOiByZ2IoMTg0LCAxOTgsIDE4NCk7XFxyXFxuJGNvbG9yUHJvdDogcmdiKDIzOCwgMjA4LCAxNzApO1xcclxcbiRjb2xvck1sOiByZ2IoMjMyLCAyMzIsIDIzMik7XFxyXFxuJGNvbG9yT2lsOnJnYigyMjQsIDIxOSwgMTUxKTtcXHJcXG4kY29sb3JOdXQ6cmdiKDE2MSwgMTk2LCAxNzgpO1xcclxcbiRjb2xvclZvY2U6IHJnYigxNjUsIDE0NCwgMTgyKTtcXHJcXG4kY29sb3JLdXA6IHJnYigxODUsIDI0MywgMTc4KTtcXHJcXG4kY29sb3JBbGM6cmdiKDIwNiwgMjU1LCAyNDcpO1xcclxcbjtcXHJcXG5cXHJcXG5ib2R5IHtcXHJcXG4gICAgZm9udC1mYW1pbHk6ICdUcmVidWNoZXQgTVMnLCAnTHVjaWRhIFNhbnMgVW5pY29kZScsICdMdWNpZGEgR3JhbmRlJywgJ0x1Y2lkYSBTYW5zJywgQXJpYWwsIHNhbnMtc2VyaWY7XFxyXFxuICAgIGZvbnQtc2l6ZTogMThweDtcXHJcXG4gICAgLy8gYmFja2dyb3VuZC1jb2xvcjogcmdiKDI1MSwgMjEzLCAxNDQpO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3I1O1xcclxcblxcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG4ubmF2Q29udGFpbmVyIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2JjYWFhNDtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbiAgICBoZWlnaHQ6IDYwcHg7XFxyXFxuICAgIG1heC13aWR0aDogNjUwcHg7XFxyXFxuICAgIG1pbi13aWR0aDogNjUwcHg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcblxcclxcbiAgICAubGlua2VyIHtcXHJcXG4gICAgICAgIGNvbG9yOiAkY29sb3Itb25lO1xcclxcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLmxpbmtlcjpob3ZlciB7XFxyXFxuICAgICAgICBjb2xvcjogI2E4ZGJkNztcXHJcXG4gICAgfVxcclxcblxcclxcblxcclxcbn1cXHJcXG5cXHJcXG4uaG9tZSB7XFxyXFxuICAgIG1hcmdpbi10b3A6IDA7XFxyXFxuICAgIG1hcmdpbjogYXV0bztcXHJcXG4gICAgd2lkdGg6IDY1MHB4O1xcclxcbiAgICBoZWlnaHQ6IDg4MHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3I1O1xcclxcbiAgICBwYWRkaW5nLXRvcDogMTAwcHg7XFxyXFxuXFxyXFxuICAgIC5pbWcge1xcclxcbiAgICAgICAgbWFyZ2luOiBhdXRvO1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcXFwiaHR0cHM6Ly9mcmVlcG5naW1nLmNvbS90aHVtYi9zaGFwZS84MTUwMC1nb2xkZW4tcmF0aW8tc3BpcmFsLW51bWJlci1maWJvbmFjY2ktd2hpdGUtY2lyY2xlLnBuZ1xcXCIpO1xcclxcbiAgICAgICAgd2lkdGg6IDY0MHB4O1xcclxcbiAgICAgICAgaGVpZ2h0OiAzOTVweDtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG4ub2Rub3NpIHtcXHJcXG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXHJcXG5cXHJcXG4gICAgbWF4LXdpZHRoOiA2NTBweDtcXHJcXG4gICAgbWluLXdpZHRoOiA2NTBweDtcXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3I1O1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAxMnB4O1xcclxcbiAgXFxyXFxuXFxyXFxuICAgIC5wcm9jIHtcXHJcXG4gICAgIHBhZGRpbmctbGVmdDogMjBweDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICB0aCB7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3I2O1xcclxcbiAgICAgICAgY29sb3I6ICNmNWY1ZjU7XFxyXFxuICAgICAgICBmb250LXNpemU6IDE4cHg7XFxyXFxuICAgICAgICBwYWRkaW5nOiAxMnB4O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5yZWxhY2lqYSB7XFxyXFxuICAgICAgICBtaW4td2lkdGg6IDUwcHg7XFxyXFxuICAgICAgICBtYXgtd2lkdGg6IDUwcHg7XFxyXFxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgdGQge1xcclxcbiAgICAgICAgZm9udC1mYW1pbHk6IFZlcmRhbmEsIEdlbmV2YSwgVGFob21hLCBzYW5zLXNlcmlmO1xcclxcbiAgICAgICAgZm9udC1zaXplOiAxNnB4O1xcclxcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICAgICAgbWluLXdpZHRoOiA1MHB4O1xcclxcbiAgICAgICAgbWF4LXdpZHRoOiA1MHB4O1xcclxcbiAgICAgICBwYWRkaW5nOiAxMHB4IDBweDtcXHJcXG4gICAgICAgXFxyXFxuXFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgaW5wdXQge1xcclxcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICAgICAgaGVpZ2h0OiAyMHB4O1xcclxcbiAgICAgICAgbWluLXdpZHRoOiA1MHB4O1xcclxcbiAgICAgICAgbWF4LXdpZHRoOiA1MHB4O1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yNDtcXHJcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXHJcXG4gICAgICAgIGJvcmRlci1jb2xvcjogYnVybHl3b29kO1xcclxcbiBcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5tb2RlbC12aWV3ZXIge1xcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxuICAgIGN1cnNvcjogZ3JhYjtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgaGVpZ2h0OiA1MDBweDtcXHJcXG4gICAgd2lkdGg6IDY1MHB4O1xcclxcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIHVzZXItc2VsZWN0OiBub25lO1xcclxcbn1cXHJcXG4udmlldy1idXR0b24ge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXHJcXG4gICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXHJcXG5cXHJcXG59XFxyXFxuLmNhbGMge1xcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxubWFyZ2luLXRvcDogMzBweDtcXHJcXG4gICAgd2lkdGg6IDMwMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uaHJhbmEge1xcclxcblxcclxcbiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcclxcbiAgICBtYXgtd2lkdGg6IDY1MHB4O1xcclxcbiAgICBtaW4td2lkdGg6IDY1MHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3Itb25lO1xcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxuXFxyXFxuICAgIC5uYXNsb3Yge1xcclxcbiAgICAgICAgZm9udC1zaXplOiAyMHB4O1xcclxcbiAgICAgICAgbWluLXdpZHRoOiAxNTBweDtcXHJcXG4gICAgICAgIG1heC13aWR0aDogMTUwcHg7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgaW5wdXQge1xcclxcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcXHJcXG4gICAgICAgIGhlaWdodDogMjBweDtcXHJcXG4gICAgICAgIG1pbi13aWR0aDogNjBweDtcXHJcXG4gICAgICAgIG1heC13aWR0aDogNjBweDtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvcjQ7XFxyXFxuICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XFxyXFxuICAgICAgICBib3JkZXItY29sb3I6IGJ1cmx5d29vZDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuaGlkcmF0aSB7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3JIaWQ7XFxyXFxuXFxyXFxuICAgICAgICAucHJvdGVpbiB7XFxyXFxuICAgICAgICAgICAgaGVpZ2h0OiAyNXB4O1xcclxcbiAgICAgICAgICAgIG1pbi13aWR0aDogMjdweDtcXHJcXG4gICAgICAgICAgICBtYXgtd2lkdGg6IDI3cHg7XFxyXFxuICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gICAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXHJcXG5cXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIC51Z0hpZCwgXFxyXFxuICAgICAgICAubWFzdCB7XFxyXFxuICAgICAgICAgICAgbWluLXdpZHRoOiA2MHB4O1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgXFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLnByb3Qge1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yUHJvdDtcXHJcXG5cXHJcXG4gICAgICAgIC5wcm90ZWluIHtcXHJcXG4gICAgICAgICAgICBoZWlnaHQ6IDI1cHg7XFxyXFxuICAgICAgICAgICAgbWluLXdpZHRoOiAyN3B4O1xcclxcbiAgICAgICAgICAgIG1heC13aWR0aDogMjdweDtcXHJcXG4gICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgICAgICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcclxcblxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5tbGVrbyB7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3JNbDtcXHJcXG5cXHJcXG4gICAgICAgIC5wcm90ZWluIHtcXHJcXG4gICAgICAgICAgICBoZWlnaHQ6IDI1cHg7XFxyXFxuICAgICAgICAgICAgbWluLXdpZHRoOiAyN3B4O1xcclxcbiAgICAgICAgICAgIG1heC13aWR0aDogMjdweDtcXHJcXG4gICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgICAgICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcclxcblxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuICAgIC5vaWwge1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yT2lsO1xcclxcblxcclxcbiAgICAgICAgLnByb3RlaW4ge1xcclxcbiAgICAgICAgICAgIGhlaWdodDogMjVweDtcXHJcXG4gICAgICAgICAgICBtaW4td2lkdGg6IDI3cHg7XFxyXFxuICAgICAgICAgICAgbWF4LXdpZHRoOiAyN3B4O1xcclxcbiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuICAgICAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxyXFxuXFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG4gICAgLm9yYWgge1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yTnV0O1xcclxcblxcclxcbiAgICAgICAgLnByb3RlaW4ge1xcclxcbiAgICAgICAgICAgIGhlaWdodDogMjVweDtcXHJcXG4gICAgICAgICAgICBtaW4td2lkdGg6IDI3cHg7XFxyXFxuICAgICAgICAgICAgbWF4LXdpZHRoOiAyN3B4O1xcclxcbiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuICAgICAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxyXFxuXFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG4gICAgLnZvY2Uge1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yVm9jZTtcXHJcXG5cXHJcXG4gICAgICAgIC5wcm90ZWluIHtcXHJcXG4gICAgICAgICAgICBoZWlnaHQ6IDI1cHg7XFxyXFxuICAgICAgICAgICAgbWluLXdpZHRoOiAyN3B4O1xcclxcbiAgICAgICAgICAgIG1heC13aWR0aDogMjdweDtcXHJcXG4gICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgICAgICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcclxcblxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuICAgIC5rdXB1cyB7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3JLdXA7XFxyXFxuXFxyXFxuICAgICAgICAucHJvdGVpbiB7XFxyXFxuICAgICAgICAgICAgaGVpZ2h0OiAyNXB4O1xcclxcbiAgICAgICAgICAgIG1pbi13aWR0aDogMjdweDtcXHJcXG4gICAgICAgICAgICBtYXgtd2lkdGg6IDI3cHg7XFxyXFxuICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gICAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXHJcXG5cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbiAgICAuYWxjb2hvbCB7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3JBbGM7XFxyXFxuXFxyXFxuICAgICAgICAucHJvdGVpbiB7XFxyXFxuICAgICAgICAgICAgaGVpZ2h0OiAyNXB4O1xcclxcbiAgICAgICAgICAgIG1pbi13aWR0aDogMjdweDtcXHJcXG4gICAgICAgICAgICBtYXgtd2lkdGg6IDI3cHg7XFxyXFxuICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gICAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXHJcXG5cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICB0aGVhZCB7XFxyXFxuICAgICAgICBmb250LXNpemU6IDIwcHg7XFxyXFxuXFxyXFxuICAgICAgICB0aCB7XFxyXFxuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM0YzZhNGI7XFxyXFxuICAgICAgICAgICAgY29sb3I6ICRjb2xvci1vbmU7XFxyXFxuICAgICAgICAgICAgcGFkZGluZzogMTBweCAzcHg7XFxyXFxuICAgICAgICAgICAgbWluLXdpZHRoOiAyNnB4O1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIHRyIHtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvcjU7XFxyXFxuXFxyXFxuICAgXFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgdGZvb3Qge1xcclxcbiAgICAgICAgY29sb3I6ICNhOGRiZDc7XFxyXFxuXFxyXFxuICAgICAgICB0ciB7XFxyXFxuXFxyXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzkyYTE5MjtcXHJcXG5cXHJcXG4gICAgICAgICAgICAucHJvdGVpbiB7XFxyXFxuICAgICAgICAgICAgICAgIGhlaWdodDogMjVweDtcXHJcXG4gICAgICAgICAgICAgICAgbWluLXdpZHRoOiAyN3B4O1xcclxcbiAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDI3cHg7XFxyXFxuICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuICAgICAgICAgICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcclxcblxcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICB0ZCB7XFxyXFxuICAgICAgICBwYWRkaW5nOiA4cHg7XFxyXFxuICAgICAgICBmb250LXNpemU6IDI0O1xcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbi5iYWNrLXRvLXRvcCB7XFxyXFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXHJcXG4gICAgYm90dG9tOiAyMHB4O1xcclxcbiAgICByaWdodDogMjBweDtcXHJcXG5cXHJcXG4gICAgY29sb3I6ICM4NDg2N2I7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNDAwcHg7XFxyXFxuXFxyXFxuICAgIC5hcnJvd3VwIHtcXHJcXG4gICAgICAgIHdpZHRoOiAyNHB4O1xcclxcbiAgICAgICAgaGVpZ2h0OiAyNHB4O1xcclxcbiAgICAgICAgY29sb3I6ICM3YTljOTlhYztcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTY1LCAyMDYsIDE5NSwgMC40Myk7XFxyXFxuICAgICAgICBmb250LXNpemU6IDM4cHg7XFxyXFxuICAgICAgICBwYWRkaW5nLWxlZnQ6IDVweDtcXHJcXG5cXHJcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDEycHg7XFxyXFxuICAgICAgICBib3JkZXI6IHNvbGlkIDNweCAjOTViZWJhN2M7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTAwcHgpIHtcXHJcXG4gICAgYm9keSB7XFxyXFxuICAgICAgICBmb250LXNpemU6IDE2cHg7XFxyXFxuICAgICAgICBtYXJnaW46IDA7XFxyXFxuICAgICAgICBwYWRkaW5nOiAwO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5uYXZDb250YWluZXIge1xcclxcbiAgICAgICAgbWF4LXdpZHRoOiAzNThweDtcXHJcXG4gICAgICAgIG1pbi13aWR0aDogMzU4cHg7XFxyXFxuICAgICAgICBtYXJnaW46IGF1dG87XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLmhvbWUge1xcclxcbiAgICAgICAgbWFyZ2luLXRvcDogMDtcXHJcXG4gICAgICAgIG1hcmdpbjogYXV0bztcXHJcXG4gICAgICAgIHdpZHRoOiAzNThweDtcXHJcXG4gICAgICAgIGhlaWdodDogODgwcHg7XFxyXFxuXFxyXFxuICAgICAgICBwYWRkaW5nLXRvcDogODBweDtcXHJcXG5cXHJcXG4gICAgICAgIC5pbWcge1xcclxcbiAgICAgICAgICAgIGhlaWdodDogMjIxcHg7XFxyXFxuICAgICAgICAgICAgd2lkdGg6IDM1OHB4O1xcclxcblxcclxcblxcclxcblxcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5vZG5vc2kge1xcclxcbiAgICAgICAgbWF4LXdpZHRoOiAzNThweDtcXHJcXG4gICAgICAgIG1pbi13aWR0aDogMzU4cHg7XFxyXFxuICAgICAgXFxyXFxuICAgIFxcclxcbiAgICAgICAgdHIge1xcclxcbiAgICAgICAgICAgIHBhZGRpbmc6IDEycHggOHB4O1xcclxcbiAgICAgICAgfVxcclxcbiAgICBcXHJcXG4gICAgICAgIHRoIHtcXHJcXG4gICAgICAgXFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xcclxcbiAgICAgICAgICAgIHBhZGRpbmc6IDdweDtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgXFxyXFxuICAgICAgICAucmVsYWNpamEge1xcclxcbiAgICAgICAgICAgIG1pbi13aWR0aDogMzBweDtcXHJcXG4gICAgICAgICAgICBtYXgtd2lkdGg6IDMwcHg7XFxyXFxuICAgICBcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgXFxyXFxuICAgICAgICB0ZCB7XFxyXFxuICAgICAgICAgXFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xcclxcbiAgICAgICBcXHJcXG4gICAgICAgICAgICBtaW4td2lkdGg6IDMwcHg7XFxyXFxuICAgICAgICAgICAgbWF4LXdpZHRoIDozMHB4O1xcclxcbiAgICBcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgXFxyXFxuICAgICAgICBpbnB1dCB7XFxyXFxuICAgICAgICBcXHJcXG4gICAgICAgICAgICBoZWlnaHQ6IDE4cHg7XFxyXFxuICAgICAgICAgICAgbWluLXdpZHRoOiAzMHB4O1xcclxcbiAgICAgICAgICAgIG1heC13aWR0aDogMzBweDtcXHJcXG4gICAgICAgICAgXFxyXFxuIFxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIG1vZGVsLXZpZXdlciB7XFxyXFxuICAgICAgICB3aWR0aDogMzYwcHg7XFxyXFxuICAgICAgICBoZWlnaHQ6IDQwMHB4O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5ocmFuYSB7XFxyXFxuICAgICAgICBtYXgtd2lkdGg6IDM1OHB4O1xcclxcbiAgICAgICAgbWluLXdpZHRoOiAzNThweDtcXHJcXG4gICAgICAgIG1hcmdpbjogYXV0bztcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMTRweDtcXHJcXG5cXHJcXG4gICAgICAgIHRoZWFkIHtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XFxyXFxuICAgICAgICAgICAgcGFkZGluZzogNnB4IDJweDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIC5oaWRyYXRpIHtcXHJcXG4gICAgICAgICAgICAudWdIaWQge1xcclxcbiAgICAgICAgICAgICAgICBtaW4td2lkdGg6IDM3cHg7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIC5tYXN0IHtcXHJcXG4gICAgICAgICAgICAgICAgbWluLXdpZHRoOiAzN3B4O1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIC5uYXNsb3Yge1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcXHJcXG4gICAgICAgICAgICBtaW4td2lkdGg6IDUwcHg7XFxyXFxuICAgICAgICAgICAgbWF4LXdpZHRoOiA1MHB4O1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgaW5wdXQge1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcXHJcXG4gICAgICAgICAgICBtaW4td2lkdGg6IDQ3cHg7XFxyXFxuICAgICAgICAgICAgbWF4LXdpZHRoOiA0N3B4O1xcclxcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDNweDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIHRkIHtcXHJcXG4gICAgICAgICAgICBwYWRkaW5nOiAzcHggNXB4O1xcclxcbiAgICAgICAgICBcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgfVxcclxcblxcclxcblxcclxcblxcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLGNhPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gcChhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn12YXIgZGE9bmV3IFNldCxlYT17fTtmdW5jdGlvbiBmYShhLGIpe2hhKGEsYik7aGEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGhhKGEsYil7ZWFbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWRhLmFkZChiW2FdKX1cbnZhciBpYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksamE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxrYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sbGE9XG57fSxtYT17fTtmdW5jdGlvbiBvYShhKXtpZihqYS5jYWxsKG1hLGEpKXJldHVybiEwO2lmKGphLmNhbGwobGEsYSkpcmV0dXJuITE7aWYoa2EudGVzdChhKSlyZXR1cm4gbWFbYV09ITA7bGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gcGEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBxYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxwYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciB6PXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO3pbYl09bmV3IHYoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgcmE9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBzYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxcbnNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbnoueGxpbmtIcmVmPW5ldyB2KFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHRhKGEsYixjLGQpe3ZhciBlPXouaGFzT3duUHJvcGVydHkoYik/eltiXTpudWxsO2lmKG51bGwhPT1lPzAhPT1lLnR5cGU6ZHx8ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdKXFhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9vYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSl9XG52YXIgdWE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsdmE9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksd2E9U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSx5YT1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksemE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLEFhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSxCYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksQ2E9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksRGE9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLEVhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxGYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxHYT1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxIYT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTtTeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik7U3ltYm9sLmZvcihcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7XG52YXIgSWE9U3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QuY2FjaGVcIik7U3ltYm9sLmZvcihcInJlYWN0LnRyYWNpbmdfbWFya2VyXCIpO3ZhciBKYT1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gS2EoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUphJiZhW0phXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBBPU9iamVjdC5hc3NpZ24sTGE7ZnVuY3Rpb24gTWEoYSl7aWYodm9pZCAwPT09TGEpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7TGE9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK0xhK2F9dmFyIE5hPSExO1xuZnVuY3Rpb24gT2EoYSxiKXtpZighYXx8TmEpcmV0dXJuXCJcIjtOYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2gobCl7dmFyIGQ9bH1SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGwpe2Q9bH1hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGwpe2Q9bH1hKCl9fWNhdGNoKGwpe2lmKGwmJmQmJlwic3RyaW5nXCI9PT10eXBlb2YgbC5zdGFjayl7Zm9yKHZhciBlPWwuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSl7dmFyIGs9XCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTthLmRpc3BsYXlOYW1lJiZrLmluY2x1ZGVzKFwiPGFub255bW91cz5cIikmJihrPWsucmVwbGFjZShcIjxhbm9ueW1vdXM+XCIsYS5kaXNwbGF5TmFtZSkpO3JldHVybiBrfXdoaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtOYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP01hKGEpOlwiXCJ9XG5mdW5jdGlvbiBQYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gTWEoYS50eXBlKTtjYXNlIDE2OnJldHVybiBNYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gTWEoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBNYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9T2EoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9T2EoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9T2EoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBRYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHlhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHdhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBBYTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB6YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEVhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIEZhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIENhOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIEJhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIERhOnZhciBiPWEucmVuZGVyO2E9YS5kaXNwbGF5TmFtZTthfHwoYT1iLmRpc3BsYXlOYW1lfHxcbmIubmFtZXx8XCJcIixhPVwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtyZXR1cm4gYTtjYXNlIEdhOnJldHVybiBiPWEuZGlzcGxheU5hbWV8fG51bGwsbnVsbCE9PWI/YjpRYShhLnR5cGUpfHxcIk1lbW9cIjtjYXNlIEhhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBRYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gUmEoYSl7dmFyIGI9YS50eXBlO3N3aXRjaChhLnRhZyl7Y2FzZSAyNDpyZXR1cm5cIkNhY2hlXCI7Y2FzZSA5OnJldHVybihiLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIDEwOnJldHVybihiLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIDE4OnJldHVyblwiRGVoeWRyYXRlZEZyYWdtZW50XCI7Y2FzZSAxMTpyZXR1cm4gYT1iLnJlbmRlcixhPWEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJcIixiLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgNzpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSA1OnJldHVybiBiO2Nhc2UgNDpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgMzpyZXR1cm5cIlJvb3RcIjtjYXNlIDY6cmV0dXJuXCJUZXh0XCI7Y2FzZSAxNjpyZXR1cm4gUWEoYik7Y2FzZSA4OnJldHVybiBiPT09emE/XCJTdHJpY3RNb2RlXCI6XCJNb2RlXCI7Y2FzZSAyMjpyZXR1cm5cIk9mZnNjcmVlblwiO1xuY2FzZSAxMjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSAyMTpyZXR1cm5cIlNjb3BlXCI7Y2FzZSAxMzpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSAxOTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwiO2Nhc2UgMjU6cmV0dXJuXCJUcmFjaW5nTWFya2VyXCI7Y2FzZSAxOmNhc2UgMDpjYXNlIDE3OmNhc2UgMjpjYXNlIDE0OmNhc2UgMTU6aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGIuZGlzcGxheU5hbWV8fGIubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGIpcmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2Nhc2UgXCJvYmplY3RcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gVGEoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFVhKGEpe3ZhciBiPVRhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWEoYSkpfWZ1bmN0aW9uIFdhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFhhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFlhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBBKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBaYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1TYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIGFiKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmdGEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIGJiKGEsYil7YWIoYSxiKTt2YXIgYz1TYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9jYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZjYihhLGIudHlwZSxTYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGRiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFhhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgZWI9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGZiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitTYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHAoOTEpKTtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBoYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcihwKDkyKSk7aWYoZWIoYykpe2lmKDE8Yy5sZW5ndGgpdGhyb3cgRXJyb3IocCg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlNhKGMpfX1cbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9U2EoYi52YWx1ZSksZD1TYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGpiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9ZnVuY3Rpb24ga2IoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1cbmZ1bmN0aW9uIGxiKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9rYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBtYixuYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIT09YS5uYW1lc3BhY2VVUkl8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXttYj1tYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTttYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1tYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBvYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHBiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxhc3BlY3RSYXRpbzohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsXG56b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHFiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhwYikuZm9yRWFjaChmdW5jdGlvbihhKXtxYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3BiW2JdPXBiW2FdfSl9KTtmdW5jdGlvbiByYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cGIuaGFzT3duUHJvcGVydHkoYSkmJnBiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHNiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXJiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHRiPUEoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB1YihhLGIpe2lmKGIpe2lmKHRiW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IocCg2MCkpO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTHx8IShcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IocCg2MikpO319XG5mdW5jdGlvbiB2YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHdiPW51bGw7ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcihwKDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYigpe312YXIgSWI9ITE7ZnVuY3Rpb24gSmIoYSxiLGMpe2lmKEliKXJldHVybiBhKGIsYyk7SWI9ITA7dHJ5e3JldHVybiBHYihhLGIsYyl9ZmluYWxseXtpZihJYj0hMSxudWxsIT09emJ8fG51bGwhPT1BYilIYigpLEZiKCl9fVxuZnVuY3Rpb24gS2IoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1EYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcihwKDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIExiPSExO2lmKGlhKXRyeXt2YXIgTWI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KE1iLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtMYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixNYixNYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpfWNhdGNoKGEpe0xiPSExfWZ1bmN0aW9uIE5iKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fXZhciBPYj0hMSxQYj1udWxsLFFiPSExLFJiPW51bGwsU2I9e29uRXJyb3I6ZnVuY3Rpb24oYSl7T2I9ITA7UGI9YX19O2Z1bmN0aW9uIFRiKGEsYixjLGQsZSxmLGcsaCxrKXtPYj0hMTtQYj1udWxsO05iLmFwcGx5KFNiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBVYihhLGIsYyxkLGUsZixnLGgsayl7VGIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKE9iKXtpZihPYil7dmFyIGw9UGI7T2I9ITE7UGI9bnVsbH1lbHNlIHRocm93IEVycm9yKHAoMTk4KSk7UWJ8fChRYj0hMCxSYj1sKX19ZnVuY3Rpb24gVmIoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjQwOTgpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBXYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIFhiKGEpe2lmKFZiKGEpIT09YSl0aHJvdyBFcnJvcihwKDE4OCkpO31cbmZ1bmN0aW9uIFliKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVZiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIFhiKGUpLGE7aWYoZj09PWQpcmV0dXJuIFhiKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IocCgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcihwKDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHAoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gWmIoYSl7YT1ZYihhKTtyZXR1cm4gbnVsbCE9PWE/JGIoYSk6bnVsbH1mdW5jdGlvbiAkYihhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYTtmb3IoYT1hLmNoaWxkO251bGwhPT1hOyl7dmFyIGI9JGIoYSk7aWYobnVsbCE9PWIpcmV0dXJuIGI7YT1hLnNpYmxpbmd9cmV0dXJuIG51bGx9XG52YXIgYWM9Y2EudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxiYz1jYS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxjYz1jYS51bnN0YWJsZV9zaG91bGRZaWVsZCxkYz1jYS51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsQj1jYS51bnN0YWJsZV9ub3csZWM9Y2EudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsZmM9Y2EudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksZ2M9Y2EudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksaGM9Y2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksaWM9Y2EudW5zdGFibGVfTG93UHJpb3JpdHksamM9Y2EudW5zdGFibGVfSWRsZVByaW9yaXR5LGtjPW51bGwsbGM9bnVsbDtmdW5jdGlvbiBtYyhhKXtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uQ29tbWl0RmliZXJSb290KXRyeXtsYy5vbkNvbW1pdEZpYmVyUm9vdChrYyxhLHZvaWQgMCwxMjg9PT0oYS5jdXJyZW50LmZsYWdzJjEyOCkpfWNhdGNoKGIpe319XG52YXIgb2M9TWF0aC5jbHozMj9NYXRoLmNsejMyOm5jLHBjPU1hdGgubG9nLHFjPU1hdGguTE4yO2Z1bmN0aW9uIG5jKGEpe2E+Pj49MDtyZXR1cm4gMD09PWE/MzI6MzEtKHBjKGEpL3FjfDApfDB9dmFyIHJjPTY0LHNjPTQxOTQzMDQ7XG5mdW5jdGlvbiB0YyhhKXtzd2l0Y2goYSYtYSl7Y2FzZSAxOnJldHVybiAxO2Nhc2UgMjpyZXR1cm4gMjtjYXNlIDQ6cmV0dXJuIDQ7Y2FzZSA4OnJldHVybiA4O2Nhc2UgMTY6cmV0dXJuIDE2O2Nhc2UgMzI6cmV0dXJuIDMyO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGEmNDE5NDI0MDtjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybiBhJjEzMDAyMzQyNDtjYXNlIDEzNDIxNzcyODpyZXR1cm4gMTM0MjE3NzI4O2Nhc2UgMjY4NDM1NDU2OnJldHVybiAyNjg0MzU0NTY7Y2FzZSA1MzY4NzA5MTI6cmV0dXJuIDUzNjg3MDkxMjtjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuIDEwNzM3NDE4MjQ7XG5kZWZhdWx0OnJldHVybiBhfX1mdW5jdGlvbiB1YyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiAwO3ZhciBkPTAsZT1hLnN1c3BlbmRlZExhbmVzLGY9YS5waW5nZWRMYW5lcyxnPWMmMjY4NDM1NDU1O2lmKDAhPT1nKXt2YXIgaD1nJn5lOzAhPT1oP2Q9dGMoaCk6KGYmPWcsMCE9PWYmJihkPXRjKGYpKSl9ZWxzZSBnPWMmfmUsMCE9PWc/ZD10YyhnKTowIT09ZiYmKGQ9dGMoZikpO2lmKDA9PT1kKXJldHVybiAwO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmUpJiYoZT1kJi1kLGY9YiYtYixlPj1mfHwxNj09PWUmJjAhPT0oZiY0MTk0MjQwKSkpcmV0dXJuIGI7MCE9PShkJjQpJiYoZHw9YyYxNik7Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1vYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIHZjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OnJldHVybiBiKzI1MDtjYXNlIDg6Y2FzZSAxNjpjYXNlIDMyOmNhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGIrNUUzO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuLTE7Y2FzZSAxMzQyMTc3Mjg6Y2FzZSAyNjg0MzU0NTY6Y2FzZSA1MzY4NzA5MTI6Y2FzZSAxMDczNzQxODI0OnJldHVybi0xO2RlZmF1bHQ6cmV0dXJuLTF9fVxuZnVuY3Rpb24gd2MoYSxiKXtmb3IodmFyIGM9YS5zdXNwZW5kZWRMYW5lcyxkPWEucGluZ2VkTGFuZXMsZT1hLmV4cGlyYXRpb25UaW1lcyxmPWEucGVuZGluZ0xhbmVzOzA8Zjspe3ZhciBnPTMxLW9jKGYpLGg9MTw8ZyxrPWVbZ107aWYoLTE9PT1rKXtpZigwPT09KGgmYyl8fDAhPT0oaCZkKSllW2ddPXZjKGgsYil9ZWxzZSBrPD1iJiYoYS5leHBpcmVkTGFuZXN8PWgpO2YmPX5ofX1mdW5jdGlvbiB4YyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24geWMoKXt2YXIgYT1yYztyYzw8PTE7MD09PShyYyY0MTk0MjQwKSYmKHJjPTY0KTtyZXR1cm4gYX1mdW5jdGlvbiB6YyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEFjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjs1MzY4NzA5MTIhPT1iJiYoYS5zdXNwZW5kZWRMYW5lcz0wLGEucGluZ2VkTGFuZXM9MCk7YT1hLmV2ZW50VGltZXM7Yj0zMS1vYyhiKTthW2JdPWN9ZnVuY3Rpb24gQmMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcyZ+YjthLnBlbmRpbmdMYW5lcz1iO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWI7YS5tdXRhYmxlUmVhZExhbmVzJj1iO2EuZW50YW5nbGVkTGFuZXMmPWI7Yj1hLmVudGFuZ2xlbWVudHM7dmFyIGQ9YS5ldmVudFRpbWVzO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yzspe3ZhciBlPTMxLW9jKGMpLGY9MTw8ZTtiW2VdPTA7ZFtlXT0tMTthW2VdPS0xO2MmPX5mfX1cbmZ1bmN0aW9uIENjKGEsYil7dmFyIGM9YS5lbnRhbmdsZWRMYW5lc3w9Yjtmb3IoYT1hLmVudGFuZ2xlbWVudHM7Yzspe3ZhciBkPTMxLW9jKGMpLGU9MTw8ZDtlJmJ8YVtkXSZiJiYoYVtkXXw9Yik7YyY9fmV9fXZhciBDPTA7ZnVuY3Rpb24gRGMoYSl7YSY9LWE7cmV0dXJuIDE8YT80PGE/MCE9PShhJjI2ODQzNTQ1NSk/MTY6NTM2ODcwOTEyOjQ6MX12YXIgRWMsRmMsR2MsSGMsSWMsSmM9ITEsS2M9W10sTGM9bnVsbCxNYz1udWxsLE5jPW51bGwsT2M9bmV3IE1hcCxQYz1uZXcgTWFwLFFjPVtdLFJjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIFNjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6TGM9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOk1jPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOk5jPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpPYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpQYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIFRjKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9e2Jsb2NrZWRPbjpiLGRvbUV2ZW50TmFtZTpjLGV2ZW50U3lzdGVtRmxhZ3M6ZCxuYXRpdmVFdmVudDpmLHRhcmdldENvbnRhaW5lcnM6W2VdfSxudWxsIT09YiYmKGI9Q2IoYiksbnVsbCE9PWImJkZjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtiPWEudGFyZ2V0Q29udGFpbmVycztudWxsIT09ZSYmLTE9PT1iLmluZGV4T2YoZSkmJmIucHVzaChlKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFVjKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c2luXCI6cmV0dXJuIExjPVRjKExjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBNYz1UYyhNYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gTmM9VGMoTmMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtPYy5zZXQoZixUYyhPYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsUGMuc2V0KGYsVGMoUGMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gVmMoYSl7dmFyIGI9V2MoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1WYihiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1XYihjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtJYyhhLnByaW9yaXR5LGZ1bmN0aW9uKCl7R2MoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24gWGMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPVljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGw9PT1jKXtjPWEubmF0aXZlRXZlbnQ7dmFyIGQ9bmV3IGMuY29uc3RydWN0b3IoYy50eXBlLGMpO3diPWQ7Yy50YXJnZXQuZGlzcGF0Y2hFdmVudChkKTt3Yj1udWxsfWVsc2UgcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJkZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIFpjKGEsYixjKXtYYyhhKSYmYy5kZWxldGUoYil9ZnVuY3Rpb24gJGMoKXtKYz0hMTtudWxsIT09TGMmJlhjKExjKSYmKExjPW51bGwpO251bGwhPT1NYyYmWGMoTWMpJiYoTWM9bnVsbCk7bnVsbCE9PU5jJiZYYyhOYykmJihOYz1udWxsKTtPYy5mb3JFYWNoKFpjKTtQYy5mb3JFYWNoKFpjKX1cbmZ1bmN0aW9uIGFkKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxKY3x8KEpjPSEwLGNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soY2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksJGMpKSl9XG5mdW5jdGlvbiBiZChhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBhZChiLGEpfWlmKDA8S2MubGVuZ3RoKXthZChLY1swXSxhKTtmb3IodmFyIGM9MTtjPEtjLmxlbmd0aDtjKyspe3ZhciBkPUtjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09TGMmJmFkKExjLGEpO251bGwhPT1NYyYmYWQoTWMsYSk7bnVsbCE9PU5jJiZhZChOYyxhKTtPYy5mb3JFYWNoKGIpO1BjLmZvckVhY2goYik7Zm9yKGM9MDtjPFFjLmxlbmd0aDtjKyspZD1RY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8UWMubGVuZ3RoJiYoYz1RY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylWYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJlFjLnNoaWZ0KCl9dmFyIGNkPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGRkPSEwO1xuZnVuY3Rpb24gZWQoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTEsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1mdW5jdGlvbiBnZChhLGIsYyxkKXt2YXIgZT1DLGY9Y2QudHJhbnNpdGlvbjtjZC50cmFuc2l0aW9uPW51bGw7dHJ5e0M9NCxmZChhLGIsYyxkKX1maW5hbGx5e0M9ZSxjZC50cmFuc2l0aW9uPWZ9fVxuZnVuY3Rpb24gZmQoYSxiLGMsZCl7aWYoZGQpe3ZhciBlPVljKGEsYixjLGQpO2lmKG51bGw9PT1lKWhkKGEsYixkLGlkLGMpLFNjKGEsZCk7ZWxzZSBpZihVYyhlLGEsYixjLGQpKWQuc3RvcFByb3BhZ2F0aW9uKCk7ZWxzZSBpZihTYyhhLGQpLGImNCYmLTE8UmMuaW5kZXhPZihhKSl7Zm9yKDtudWxsIT09ZTspe3ZhciBmPUNiKGUpO251bGwhPT1mJiZFYyhmKTtmPVljKGEsYixjLGQpO251bGw9PT1mJiZoZChhLGIsZCxpZCxjKTtpZihmPT09ZSlicmVhaztlPWZ9bnVsbCE9PWUmJmQuc3RvcFByb3BhZ2F0aW9uKCl9ZWxzZSBoZChhLGIsZCxudWxsLGMpfX12YXIgaWQ9bnVsbDtcbmZ1bmN0aW9uIFljKGEsYixjLGQpe2lkPW51bGw7YT14YihkKTthPVdjKGEpO2lmKG51bGwhPT1hKWlmKGI9VmIoYSksbnVsbD09PWIpYT1udWxsO2Vsc2UgaWYoYz1iLnRhZywxMz09PWMpe2E9V2IoYik7aWYobnVsbCE9PWEpcmV0dXJuIGE7YT1udWxsfWVsc2UgaWYoMz09PWMpe2lmKGIuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpcmV0dXJuIDM9PT1iLnRhZz9iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7YT1udWxsfWVsc2UgYiE9PWEmJihhPW51bGwpO2lkPWE7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBqZChhKXtzd2l0Y2goYSl7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbGlja1wiOmNhc2UgXCJjbG9zZVwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcImtleXVwXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcInBhc3RlXCI6Y2FzZSBcInBhdXNlXCI6Y2FzZSBcInBsYXlcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVydXBcIjpjYXNlIFwicmF0ZWNoYW5nZVwiOmNhc2UgXCJyZXNldFwiOmNhc2UgXCJyZXNpemVcIjpjYXNlIFwic2Vla2VkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6Y2FzZSBcInZvbHVtZWNoYW5nZVwiOmNhc2UgXCJjaGFuZ2VcIjpjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6Y2FzZSBcInRleHRJbnB1dFwiOmNhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6Y2FzZSBcImJlZm9yZWlucHV0XCI6Y2FzZSBcImJsdXJcIjpjYXNlIFwiZnVsbHNjcmVlbmNoYW5nZVwiOmNhc2UgXCJmb2N1c1wiOmNhc2UgXCJoYXNoY2hhbmdlXCI6Y2FzZSBcInBvcHN0YXRlXCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJzZWxlY3RzdGFydFwiOnJldHVybiAxO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInNjcm9sbFwiOmNhc2UgXCJ0b2dnbGVcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcIndoZWVsXCI6Y2FzZSBcIm1vdXNlZW50ZXJcIjpjYXNlIFwibW91c2VsZWF2ZVwiOmNhc2UgXCJwb2ludGVyZW50ZXJcIjpjYXNlIFwicG9pbnRlcmxlYXZlXCI6cmV0dXJuIDQ7XG5jYXNlIFwibWVzc2FnZVwiOnN3aXRjaChlYygpKXtjYXNlIGZjOnJldHVybiAxO2Nhc2UgZ2M6cmV0dXJuIDQ7Y2FzZSBoYzpjYXNlIGljOnJldHVybiAxNjtjYXNlIGpjOnJldHVybiA1MzY4NzA5MTI7ZGVmYXVsdDpyZXR1cm4gMTZ9ZGVmYXVsdDpyZXR1cm4gMTZ9fXZhciBrZD1udWxsLGxkPW51bGwsbWQ9bnVsbDtmdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9XG5mdW5jdGlvbiBvZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1mdW5jdGlvbiBwZCgpe3JldHVybiEwfWZ1bmN0aW9uIHFkKCl7cmV0dXJuITF9XG5mdW5jdGlvbiByZChhKXtmdW5jdGlvbiBiKGIsZCxlLGYsZyl7dGhpcy5fcmVhY3ROYW1lPWI7dGhpcy5fdGFyZ2V0SW5zdD1lO3RoaXMudHlwZT1kO3RoaXMubmF0aXZlRXZlbnQ9Zjt0aGlzLnRhcmdldD1nO3RoaXMuY3VycmVudFRhcmdldD1udWxsO2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJihiPWFbY10sdGhpc1tjXT1iP2IoZik6ZltjXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWYuZGVmYXVsdFByZXZlbnRlZD9mLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1mLnJldHVyblZhbHVlKT9wZDpxZDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXFkO3JldHVybiB0aGlzfUEoYi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJlxuKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXBkKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXBkKX0scGVyc2lzdDpmdW5jdGlvbigpe30saXNQZXJzaXN0ZW50OnBkfSk7cmV0dXJuIGJ9XG52YXIgc2Q9e2V2ZW50UGhhc2U6MCxidWJibGVzOjAsY2FuY2VsYWJsZTowLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6MCxpc1RydXN0ZWQ6MH0sdGQ9cmQoc2QpLHVkPUEoe30sc2Qse3ZpZXc6MCxkZXRhaWw6MH0pLHZkPXJkKHVkKSx3ZCx4ZCx5ZCxBZD1BKHt9LHVkLHtzY3JlZW5YOjAsc2NyZWVuWTowLGNsaWVudFg6MCxjbGllbnRZOjAscGFnZVg6MCxwYWdlWTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkLGJ1dHRvbjowLGJ1dHRvbnM6MCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hLnJlbGF0ZWRUYXJnZXQ/YS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50OmEucmVsYXRlZFRhcmdldH0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpblxuYSlyZXR1cm4gYS5tb3ZlbWVudFg7YSE9PXlkJiYoeWQmJlwibW91c2Vtb3ZlXCI9PT1hLnR5cGU/KHdkPWEuc2NyZWVuWC15ZC5zY3JlZW5YLHhkPWEuc2NyZWVuWS15ZC5zY3JlZW5ZKTp4ZD13ZD0wLHlkPWEpO3JldHVybiB3ZH0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe3JldHVyblwibW92ZW1lbnRZXCJpbiBhP2EubW92ZW1lbnRZOnhkfX0pLEJkPXJkKEFkKSxDZD1BKHt9LEFkLHtkYXRhVHJhbnNmZXI6MH0pLERkPXJkKENkKSxFZD1BKHt9LHVkLHtyZWxhdGVkVGFyZ2V0OjB9KSxGZD1yZChFZCksR2Q9QSh7fSxzZCx7YW5pbWF0aW9uTmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksSGQ9cmQoR2QpLElkPUEoe30sc2Qse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxKZD1yZChJZCksS2Q9QSh7fSxzZCx7ZGF0YTowfSksTGQ9cmQoS2QpLE1kPXtFc2M6XCJFc2NhcGVcIixcblNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LE5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLFxuMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxPZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHpkKCl7cmV0dXJuIFBkfVxudmFyIFFkPUEoe30sdWQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9TWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP05kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sY29kZTowLGxvY2F0aW9uOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLHJlcGVhdDowLGxvY2FsZTowLGdldE1vZGlmaWVyU3RhdGU6emQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29kKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxSZD1yZChRZCksU2Q9QSh7fSxBZCx7cG9pbnRlcklkOjAsd2lkdGg6MCxoZWlnaHQ6MCxwcmVzc3VyZTowLHRhbmdlbnRpYWxQcmVzc3VyZTowLHRpbHRYOjAsdGlsdFk6MCx0d2lzdDowLHBvaW50ZXJUeXBlOjAsaXNQcmltYXJ5OjB9KSxUZD1yZChTZCksVWQ9QSh7fSx1ZCx7dG91Y2hlczowLHRhcmdldFRvdWNoZXM6MCxjaGFuZ2VkVG91Y2hlczowLGFsdEtleTowLG1ldGFLZXk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkfSksVmQ9cmQoVWQpLFdkPUEoe30sc2Qse3Byb3BlcnR5TmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksWGQ9cmQoV2QpLFlkPUEoe30sQWQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LFxuZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOjAsZGVsdGFNb2RlOjB9KSxaZD1yZChZZCksJGQ9WzksMTMsMjcsMzJdLGFlPWlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxiZT1udWxsO2lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihiZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBjZT1pYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWJlLGRlPWlhJiYoIWFlfHxiZSYmODxiZSYmMTE+PWJlKSxlZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxmZT0hMTtcbmZ1bmN0aW9uIGdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09JGQuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImZvY3Vzb3V0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gaGUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgaWU9ITE7ZnVuY3Rpb24gamUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGhlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtmZT0hMDtyZXR1cm4gZWU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09ZWUmJmZlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGtlKGEsYil7aWYoaWUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWFlJiZnZShhLGIpPyhhPW5kKCksbWQ9bGQ9a2Q9bnVsbCxpZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gZGUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGxlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIG1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhbGVbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIG5lKGEsYixjLGQpe0ViKGQpO2I9b2UoYixcIm9uQ2hhbmdlXCIpOzA8Yi5sZW5ndGgmJihjPW5ldyB0ZChcIm9uQ2hhbmdlXCIsXCJjaGFuZ2VcIixudWxsLGMsZCksYS5wdXNoKHtldmVudDpjLGxpc3RlbmVyczpifSkpfXZhciBwZT1udWxsLHFlPW51bGw7ZnVuY3Rpb24gcmUoYSl7c2UoYSwwKX1mdW5jdGlvbiB0ZShhKXt2YXIgYj11ZShhKTtpZihXYShiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIHZlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIHdlPSExO2lmKGlhKXt2YXIgeGU7aWYoaWEpe3ZhciB5ZT1cIm9uaW5wdXRcImluIGRvY3VtZW50O2lmKCF5ZSl7dmFyIHplPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7emUuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLFwicmV0dXJuO1wiKTt5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgemUub25pbnB1dH14ZT15ZX1lbHNlIHhlPSExO3dlPXhlJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpfWZ1bmN0aW9uIEFlKCl7cGUmJihwZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkscWU9cGU9bnVsbCl9ZnVuY3Rpb24gQmUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJnRlKHFlKSl7dmFyIGI9W107bmUoYixxZSxhLHhiKGEpKTtKYihyZSxiKX19XG5mdW5jdGlvbiBDZShhLGIsYyl7XCJmb2N1c2luXCI9PT1hPyhBZSgpLHBlPWIscWU9YyxwZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkpOlwiZm9jdXNvdXRcIj09PWEmJkFlKCl9ZnVuY3Rpb24gRGUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gdGUocWUpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gRmUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gR2UoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBIZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpHZTtcbmZ1bmN0aW9uIEllKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO2lmKCFqYS5jYWxsKGIsZSl8fCFIZShhW2VdLGJbZV0pKXJldHVybiExfXJldHVybiEwfWZ1bmN0aW9uIEplKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEtlKGEsYil7dmFyIGM9SmUoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9SmUoYyl9fWZ1bmN0aW9uIExlKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TGUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTWUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gTmUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbmZ1bmN0aW9uIE9lKGEpe3ZhciBiPU1lKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmYyYmYy5vd25lckRvY3VtZW50JiZMZShjLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihudWxsIT09ZCYmTmUoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZihhPShiPWMub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZiLmRlZmF1bHRWaWV3fHx3aW5kb3csYS5nZXRTZWxlY3Rpb24pe2E9YS5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jLnRleHRDb250ZW50Lmxlbmd0aCxmPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9mOk1hdGgubWluKGQuZW5kLGUpOyFhLmV4dGVuZCYmZj5kJiYoZT1kLGQ9ZixmPWUpO2U9S2UoYyxmKTt2YXIgZz1LZShjLFxuZCk7ZSYmZyYmKDEhPT1hLnJhbmdlQ291bnR8fGEuYW5jaG9yTm9kZSE9PWUubm9kZXx8YS5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8YS5mb2N1c05vZGUhPT1nLm5vZGV8fGEuZm9jdXNPZmZzZXQhPT1nLm9mZnNldCkmJihiPWIuY3JlYXRlUmFuZ2UoKSxiLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCksYS5yZW1vdmVBbGxSYW5nZXMoKSxmPmQ/KGEuYWRkUmFuZ2UoYiksYS5leHRlbmQoZy5ub2RlLGcub2Zmc2V0KSk6KGIuc2V0RW5kKGcubm9kZSxnLm9mZnNldCksYS5hZGRSYW5nZShiKSkpfWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmZvY3VzJiZjLmZvY3VzKCk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LGEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9fVxudmFyIFBlPWlhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsUWU9bnVsbCxSZT1udWxsLFNlPW51bGwsVGU9ITE7XG5mdW5jdGlvbiBVZShhLGIsYyl7dmFyIGQ9Yy53aW5kb3c9PT1jP2MuZG9jdW1lbnQ6OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7VGV8fG51bGw9PVFlfHxRZSE9PVhhKGQpfHwoZD1RZSxcInNlbGVjdGlvblN0YXJ0XCJpbiBkJiZOZShkKT9kPXtzdGFydDpkLnNlbGVjdGlvblN0YXJ0LGVuZDpkLnNlbGVjdGlvbkVuZH06KGQ9KGQub3duZXJEb2N1bWVudCYmZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGQ9e2FuY2hvck5vZGU6ZC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpkLmFuY2hvck9mZnNldCxmb2N1c05vZGU6ZC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6ZC5mb2N1c09mZnNldH0pLFNlJiZJZShTZSxkKXx8KFNlPWQsZD1vZShSZSxcIm9uU2VsZWN0XCIpLDA8ZC5sZW5ndGgmJihiPW5ldyB0ZChcIm9uU2VsZWN0XCIsXCJzZWxlY3RcIixudWxsLGIsYyksYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpkfSksYi50YXJnZXQ9UWUpKSl9XG5mdW5jdGlvbiBWZShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBXZT17YW5pbWF0aW9uZW5kOlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6VmUoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxYZT17fSxZZT17fTtcbmlhJiYoWWU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgV2UuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgV2UuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgV2UuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgV2UudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBaZShhKXtpZihYZVthXSlyZXR1cm4gWGVbYV07aWYoIVdlW2FdKXJldHVybiBhO3ZhciBiPVdlW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFllKXJldHVybiBYZVthXT1iW2NdO3JldHVybiBhfXZhciAkZT1aZShcImFuaW1hdGlvbmVuZFwiKSxhZj1aZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxiZj1aZShcImFuaW1hdGlvbnN0YXJ0XCIpLGNmPVplKFwidHJhbnNpdGlvbmVuZFwiKSxkZj1uZXcgTWFwLGVmPVwiYWJvcnQgYXV4Q2xpY2sgY2FuY2VsIGNhblBsYXkgY2FuUGxheVRocm91Z2ggY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZHJhZyBkcmFnRW5kIGRyYWdFbnRlciBkcmFnRXhpdCBkcmFnTGVhdmUgZHJhZ092ZXIgZHJhZ1N0YXJ0IGRyb3AgZHVyYXRpb25DaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgZ290UG9pbnRlckNhcHR1cmUgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbG9zdFBvaW50ZXJDYXB0dXJlIG1vdXNlRG93biBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSBwbGF5aW5nIHBvaW50ZXJDYW5jZWwgcG9pbnRlckRvd24gcG9pbnRlck1vdmUgcG9pbnRlck91dCBwb2ludGVyT3ZlciBwb2ludGVyVXAgcHJvZ3Jlc3MgcmF0ZUNoYW5nZSByZXNldCByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdWJtaXQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvdWNoQ2FuY2VsIHRvdWNoRW5kIHRvdWNoU3RhcnQgdm9sdW1lQ2hhbmdlIHNjcm9sbCB0b2dnbGUgdG91Y2hNb3ZlIHdhaXRpbmcgd2hlZWxcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBmZihhLGIpe2RmLnNldChhLGIpO2ZhKGIsW2FdKX1mb3IodmFyIGdmPTA7Z2Y8ZWYubGVuZ3RoO2dmKyspe3ZhciBoZj1lZltnZl0samY9aGYudG9Mb3dlckNhc2UoKSxrZj1oZlswXS50b1VwcGVyQ2FzZSgpK2hmLnNsaWNlKDEpO2ZmKGpmLFwib25cIitrZil9ZmYoJGUsXCJvbkFuaW1hdGlvbkVuZFwiKTtmZihhZixcIm9uQW5pbWF0aW9uSXRlcmF0aW9uXCIpO2ZmKGJmLFwib25BbmltYXRpb25TdGFydFwiKTtmZihcImRibGNsaWNrXCIsXCJvbkRvdWJsZUNsaWNrXCIpO2ZmKFwiZm9jdXNpblwiLFwib25Gb2N1c1wiKTtmZihcImZvY3Vzb3V0XCIsXCJvbkJsdXJcIik7ZmYoY2YsXCJvblRyYW5zaXRpb25FbmRcIik7aGEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uTW91c2VMZWF2ZVwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2hhKFwib25Qb2ludGVyRW50ZXJcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7XG5oYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2ZhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2ZhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZmEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO1xuZmEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIGxmPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksbWY9bmV3IFNldChcImNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHRvZ2dsZVwiLnNwbGl0KFwiIFwiKS5jb25jYXQobGYpKTtcbmZ1bmN0aW9uIG5mKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1jO1ViKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBzZShhLGIpe2I9MCE9PShiJjQpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLGU9ZC5ldmVudDtkPWQubGlzdGVuZXJzO2E6e3ZhciBmPXZvaWQgMDtpZihiKWZvcih2YXIgZz1kLmxlbmd0aC0xOzA8PWc7Zy0tKXt2YXIgaD1kW2ddLGs9aC5pbnN0YW5jZSxsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9ZWxzZSBmb3IoZz0wO2c8ZC5sZW5ndGg7ZysrKXtoPWRbZ107az1oLmluc3RhbmNlO2w9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7bmYoZSxoLGwpO2Y9a319fWlmKFFiKXRocm93IGE9UmIsUWI9ITEsUmI9bnVsbCxhO31cbmZ1bmN0aW9uIEQoYSxiKXt2YXIgYz1iW29mXTt2b2lkIDA9PT1jJiYoYz1iW29mXT1uZXcgU2V0KTt2YXIgZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KHBmKGIsYSwyLCExKSxjLmFkZChkKSl9ZnVuY3Rpb24gcWYoYSxiLGMpe3ZhciBkPTA7YiYmKGR8PTQpO3BmKGMsYSxkLGIpfXZhciByZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIHNmKGEpe2lmKCFhW3JmXSl7YVtyZl09ITA7ZGEuZm9yRWFjaChmdW5jdGlvbihiKXtcInNlbGVjdGlvbmNoYW5nZVwiIT09YiYmKG1mLmhhcyhiKXx8cWYoYiwhMSxhKSxxZihiLCEwLGEpKX0pO3ZhciBiPTk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O251bGw9PT1ifHxiW3JmXXx8KGJbcmZdPSEwLHFmKFwic2VsZWN0aW9uY2hhbmdlXCIsITEsYikpfX1cbmZ1bmN0aW9uIHBmKGEsYixjLGQpe3N3aXRjaChqZChiKSl7Y2FzZSAxOnZhciBlPWVkO2JyZWFrO2Nhc2UgNDplPWdkO2JyZWFrO2RlZmF1bHQ6ZT1mZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshTGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gaGQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz1XYyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59SmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPWRmLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCxuPWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOm49XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6bj1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgJGU6Y2FzZSBhZjpjYXNlIGJmOms9SGQ7YnJlYWs7Y2FzZSBjZjprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB0PTAhPT0oYiY0KSxKPSF0JiZcInNjcm9sbFwiPT09YSx4PXQ/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dD1bXTtmb3IodmFyIHc9ZCx1O251bGwhPT1cbnc7KXt1PXc7dmFyIEY9dS5zdGF0ZU5vZGU7NT09PXUudGFnJiZudWxsIT09RiYmKHU9RixudWxsIT09eCYmKEY9S2Iodyx4KSxudWxsIT1GJiZ0LnB1c2godGYodyxGLHUpKSkpO2lmKEopYnJlYWs7dz13LnJldHVybn0wPHQubGVuZ3RoJiYoaD1uZXcgayhoLG4sbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6dH0pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJmMhPT13YiYmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KSYmKFdjKG4pfHxuW3VmXSkpYnJlYWsgYTtpZihrfHxoKXtoPWUud2luZG93PT09ZT9lOihoPWUub3duZXJEb2N1bWVudCk/aC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGspe2lmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCxrPWQsbj1uP1djKG4pOm51bGwsbnVsbCE9PVxubiYmKEo9VmIobiksbiE9PUp8fDUhPT1uLnRhZyYmNiE9PW4udGFnKSluPW51bGx9ZWxzZSBrPW51bGwsbj1kO2lmKGshPT1uKXt0PUJkO0Y9XCJvbk1vdXNlTGVhdmVcIjt4PVwib25Nb3VzZUVudGVyXCI7dz1cIm1vdXNlXCI7aWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKXQ9VGQsRj1cIm9uUG9pbnRlckxlYXZlXCIseD1cIm9uUG9pbnRlckVudGVyXCIsdz1cInBvaW50ZXJcIjtKPW51bGw9PWs/aDp1ZShrKTt1PW51bGw9PW4/aDp1ZShuKTtoPW5ldyB0KEYsdytcImxlYXZlXCIsayxjLGUpO2gudGFyZ2V0PUo7aC5yZWxhdGVkVGFyZ2V0PXU7Rj1udWxsO1djKGUpPT09ZCYmKHQ9bmV3IHQoeCx3K1wiZW50ZXJcIixuLGMsZSksdC50YXJnZXQ9dSx0LnJlbGF0ZWRUYXJnZXQ9SixGPXQpO0o9RjtpZihrJiZuKWI6e3Q9azt4PW47dz0wO2Zvcih1PXQ7dTt1PXZmKHUpKXcrKzt1PTA7Zm9yKEY9eDtGO0Y9dmYoRikpdSsrO2Zvcig7MDx3LXU7KXQ9dmYodCksdy0tO2Zvcig7MDx1LXc7KXg9XG52Zih4KSx1LS07Zm9yKDt3LS07KXtpZih0PT09eHx8bnVsbCE9PXgmJnQ9PT14LmFsdGVybmF0ZSlicmVhayBiO3Q9dmYodCk7eD12Zih4KX10PW51bGx9ZWxzZSB0PW51bGw7bnVsbCE9PWsmJndmKGcsaCxrLHQsITEpO251bGwhPT1uJiZudWxsIT09SiYmd2YoZyxKLG4sdCwhMCl9fX1hOntoPWQ/dWUoZCk6d2luZG93O2s9aC5ub2RlTmFtZSYmaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1rfHxcImlucHV0XCI9PT1rJiZcImZpbGVcIj09PWgudHlwZSl2YXIgbmE9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSluYT1GZTtlbHNle25hPURlO3ZhciB4YT1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKG5hPUVlKTtpZihuYSYmKG5hPW5hKGEsZCkpKXtuZShnLG5hLGMsZSk7YnJlYWsgYX14YSYmeGEoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJih4YT1oLl93cmFwcGVyU3RhdGUpJiZcbnhhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmNiKGgsXCJudW1iZXJcIixoLnZhbHVlKX14YT1kP3VlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihtZSh4YSl8fFwidHJ1ZVwiPT09eGEuY29udGVudEVkaXRhYmxlKVFlPXhhLFJlPWQsU2U9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpTZT1SZT1RZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpUZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6VGU9ITE7VWUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihQZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlVlKGcsYyxlKX12YXIgJGE7aWYoYWUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpiYT1cIm9uQ29tcG9zaXRpb25FbmRcIjtcbmJyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6YmE9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1iYT12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoYmE9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoYmE9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7YmEmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PWJhP1wib25Db21wb3NpdGlvbkVuZFwiPT09YmEmJmllJiYoJGE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSx4YT1vZShkLGJhKSwwPHhhLmxlbmd0aCYmKGJhPW5ldyBMZChiYSxhLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmJhLGxpc3RlbmVyczp4YX0pLCRhP2JhLmRhdGE9JGE6KCRhPWhlKGMpLG51bGwhPT0kYSYmKGJhLmRhdGE9JGEpKSkpO2lmKCRhPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLFxuMDxkLmxlbmd0aCYmKGU9bmV3IExkKFwib25CZWZvcmVJbnB1dFwiLFwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPSRhKX1zZShnLGIpfSl9ZnVuY3Rpb24gdGYoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBvZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPUtiKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KHRmKGEsZixlKSksZj1LYihhLGIpLG51bGwhPWYmJmQucHVzaCh0ZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIHZmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiB3ZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPUtiKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KHRmKGMsayxoKSkpOmV8fChrPUtiKGMsZiksbnVsbCE9ayYmZy5wdXNoKHRmKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9dmFyIHhmPS9cXHJcXG4/L2cseWY9L1xcdTAwMDB8XFx1RkZGRC9nO2Z1bmN0aW9uIHpmKGEpe3JldHVybihcInN0cmluZ1wiPT09dHlwZW9mIGE/YTpcIlwiK2EpLnJlcGxhY2UoeGYsXCJcXG5cIikucmVwbGFjZSh5ZixcIlwiKX1mdW5jdGlvbiBBZihhLGIsYyl7Yj16ZihiKTtpZih6ZihhKSE9PWImJmMpdGhyb3cgRXJyb3IocCg0MjUpKTt9ZnVuY3Rpb24gQmYoKXt9XG52YXIgQ2Y9bnVsbCxEZj1udWxsO2Z1bmN0aW9uIEVmKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfVxudmFyIEZmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLEdmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMCxIZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgUHJvbWlzZT9Qcm9taXNlOnZvaWQgMCxKZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcXVldWVNaWNyb3Rhc2s/cXVldWVNaWNyb3Rhc2s6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBIZj9mdW5jdGlvbihhKXtyZXR1cm4gSGYucmVzb2x2ZShudWxsKS50aGVuKGEpLmNhdGNoKElmKX06RmY7ZnVuY3Rpb24gSWYoYSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGE7fSl9XG5mdW5jdGlvbiBLZihhLGIpe3ZhciBjPWIsZD0wO2Rve3ZhciBlPWMubmV4dFNpYmxpbmc7YS5yZW1vdmVDaGlsZChjKTtpZihlJiY4PT09ZS5ub2RlVHlwZSlpZihjPWUuZGF0YSxcIi8kXCI9PT1jKXtpZigwPT09ZCl7YS5yZW1vdmVDaGlsZChlKTtiZChiKTtyZXR1cm59ZC0tfWVsc2VcIiRcIiE9PWMmJlwiJD9cIiE9PWMmJlwiJCFcIiE9PWN8fGQrKztjPWV9d2hpbGUoYyk7YmQoYil9ZnVuY3Rpb24gTGYoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWs7aWYoOD09PWIpe2I9YS5kYXRhO2lmKFwiJFwiPT09Ynx8XCIkIVwiPT09Ynx8XCIkP1wiPT09YilicmVhaztpZihcIi8kXCI9PT1iKXJldHVybiBudWxsfX1yZXR1cm4gYX1cbmZ1bmN0aW9uIE1mKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciBOZj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxPZj1cIl9fcmVhY3RGaWJlciRcIitOZixQZj1cIl9fcmVhY3RQcm9wcyRcIitOZix1Zj1cIl9fcmVhY3RDb250YWluZXIkXCIrTmYsb2Y9XCJfX3JlYWN0RXZlbnRzJFwiK05mLFFmPVwiX19yZWFjdExpc3RlbmVycyRcIitOZixSZj1cIl9fcmVhY3RIYW5kbGVzJFwiK05mO1xuZnVuY3Rpb24gV2MoYSl7dmFyIGI9YVtPZl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbdWZdfHxjW09mXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPU1mKGEpO251bGwhPT1hOyl7aWYoYz1hW09mXSlyZXR1cm4gYzthPU1mKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDYihhKXthPWFbT2ZdfHxhW3VmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gdWUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHAoMzMpKTt9ZnVuY3Rpb24gRGIoYSl7cmV0dXJuIGFbUGZdfHxudWxsfXZhciBTZj1bXSxUZj0tMTtmdW5jdGlvbiBVZihhKXtyZXR1cm57Y3VycmVudDphfX1cbmZ1bmN0aW9uIEUoYSl7MD5UZnx8KGEuY3VycmVudD1TZltUZl0sU2ZbVGZdPW51bGwsVGYtLSl9ZnVuY3Rpb24gRyhhLGIpe1RmKys7U2ZbVGZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgVmY9e30sSD1VZihWZiksV2Y9VWYoITEpLFhmPVZmO2Z1bmN0aW9uIFlmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gVmY7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBaZihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uICRmKCl7RShXZik7RShIKX1mdW5jdGlvbiBhZyhhLGIsYyl7aWYoSC5jdXJyZW50IT09VmYpdGhyb3cgRXJyb3IocCgxNjgpKTtHKEgsYik7RyhXZixjKX1mdW5jdGlvbiBiZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7Yj1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGIpKXRocm93IEVycm9yKHAoMTA4LFJhKGEpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIEEoe30sYyxkKX1cbmZ1bmN0aW9uIGNnKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxWZjtYZj1ILmN1cnJlbnQ7RyhILGEpO0coV2YsV2YuY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gZGcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHAoMTY5KSk7Yz8oYT1iZyhhLGIsWGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxFKFdmKSxFKEgpLEcoSCxhKSk6RShXZik7RyhXZixjKX12YXIgZWc9bnVsbCxmZz0hMSxnZz0hMTtmdW5jdGlvbiBoZyhhKXtudWxsPT09ZWc/ZWc9W2FdOmVnLnB1c2goYSl9ZnVuY3Rpb24gaWcoYSl7Zmc9ITA7aGcoYSl9XG5mdW5jdGlvbiBqZygpe2lmKCFnZyYmbnVsbCE9PWVnKXtnZz0hMDt2YXIgYT0wLGI9Qzt0cnl7dmFyIGM9ZWc7Zm9yKEM9MTthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXTtkbyBkPWQoITApO3doaWxlKG51bGwhPT1kKX1lZz1udWxsO2ZnPSExfWNhdGNoKGUpe3Rocm93IG51bGwhPT1lZyYmKGVnPWVnLnNsaWNlKGErMSkpLGFjKGZjLGpnKSxlO31maW5hbGx5e0M9YixnZz0hMX19cmV0dXJuIG51bGx9dmFyIGtnPVtdLGxnPTAsbWc9bnVsbCxuZz0wLG9nPVtdLHBnPTAscWc9bnVsbCxyZz0xLHNnPVwiXCI7ZnVuY3Rpb24gdGcoYSxiKXtrZ1tsZysrXT1uZztrZ1tsZysrXT1tZzttZz1hO25nPWJ9XG5mdW5jdGlvbiB1ZyhhLGIsYyl7b2dbcGcrK109cmc7b2dbcGcrK109c2c7b2dbcGcrK109cWc7cWc9YTt2YXIgZD1yZzthPXNnO3ZhciBlPTMyLW9jKGQpLTE7ZCY9figxPDxlKTtjKz0xO3ZhciBmPTMyLW9jKGIpK2U7aWYoMzA8Zil7dmFyIGc9ZS1lJTU7Zj0oZCYoMTw8ZyktMSkudG9TdHJpbmcoMzIpO2Q+Pj1nO2UtPWc7cmc9MTw8MzItb2MoYikrZXxjPDxlfGQ7c2c9ZithfWVsc2Ugcmc9MTw8ZnxjPDxlfGQsc2c9YX1mdW5jdGlvbiB2ZyhhKXtudWxsIT09YS5yZXR1cm4mJih0ZyhhLDEpLHVnKGEsMSwwKSl9ZnVuY3Rpb24gd2coYSl7Zm9yKDthPT09bWc7KW1nPWtnWy0tbGddLGtnW2xnXT1udWxsLG5nPWtnWy0tbGddLGtnW2xnXT1udWxsO2Zvcig7YT09PXFnOylxZz1vZ1stLXBnXSxvZ1twZ109bnVsbCxzZz1vZ1stLXBnXSxvZ1twZ109bnVsbCxyZz1vZ1stLXBnXSxvZ1twZ109bnVsbH12YXIgeGc9bnVsbCx5Zz1udWxsLEk9ITEsemc9bnVsbDtcbmZ1bmN0aW9uIEFnKGEsYil7dmFyIGM9QmcoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yj1hLmRlbGV0aW9ucztudWxsPT09Yj8oYS5kZWxldGlvbnM9W2NdLGEuZmxhZ3N8PTE2KTpiLnB1c2goYyl9XG5mdW5jdGlvbiBDZyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9Yix4Zz1hLHlnPUxmKGIuZmlyc3RDaGlsZCksITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9Yix4Zz1hLHlnPW51bGwsITApOiExO2Nhc2UgMTM6cmV0dXJuIGI9OCE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhjPW51bGwhPT1xZz97aWQ6cmcsb3ZlcmZsb3c6c2d9Om51bGwsYS5tZW1vaXplZFN0YXRlPXtkZWh5ZHJhdGVkOmIsdHJlZUNvbnRleHQ6YyxyZXRyeUxhbmU6MTA3Mzc0MTgyNH0sYz1CZygxOCxudWxsLG51bGwsMCksYy5zdGF0ZU5vZGU9YixjLnJldHVybj1hLGEuY2hpbGQ9Yyx4Zz1hLHlnPVxubnVsbCwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gRGcoYSl7cmV0dXJuIDAhPT0oYS5tb2RlJjEpJiYwPT09KGEuZmxhZ3MmMTI4KX1mdW5jdGlvbiBFZyhhKXtpZihJKXt2YXIgYj15ZztpZihiKXt2YXIgYz1iO2lmKCFDZyhhLGIpKXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2I9TGYoYy5uZXh0U2libGluZyk7dmFyIGQ9eGc7YiYmQ2coYSxiKT9BZyhkLGMpOihhLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MixJPSExLHhnPWEpfX1lbHNle2lmKERnKGEpKXRocm93IEVycm9yKHAoNDE4KSk7YS5mbGFncz1hLmZsYWdzJi00MDk3fDI7ST0hMTt4Zz1hfX19ZnVuY3Rpb24gRmcoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO3hnPWF9XG5mdW5jdGlvbiBHZyhhKXtpZihhIT09eGcpcmV0dXJuITE7aWYoIUkpcmV0dXJuIEZnKGEpLEk9ITAsITE7dmFyIGI7KGI9MyE9PWEudGFnKSYmIShiPTUhPT1hLnRhZykmJihiPWEudHlwZSxiPVwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhRWYoYS50eXBlLGEubWVtb2l6ZWRQcm9wcykpO2lmKGImJihiPXlnKSl7aWYoRGcoYSkpdGhyb3cgSGcoKSxFcnJvcihwKDQxOCkpO2Zvcig7YjspQWcoYSxiKSxiPUxmKGIubmV4dFNpYmxpbmcpfUZnKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IocCgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7eWc9TGYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ315Zz1cbm51bGx9fWVsc2UgeWc9eGc/TGYoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gSGcoKXtmb3IodmFyIGE9eWc7YTspYT1MZihhLm5leHRTaWJsaW5nKX1mdW5jdGlvbiBJZygpe3lnPXhnPW51bGw7ST0hMX1mdW5jdGlvbiBKZyhhKXtudWxsPT09emc/emc9W2FdOnpnLnB1c2goYSl9dmFyIEtnPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO2Z1bmN0aW9uIExnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9QSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifXZhciBNZz1VZihudWxsKSxOZz1udWxsLE9nPW51bGwsUGc9bnVsbDtmdW5jdGlvbiBRZygpe1BnPU9nPU5nPW51bGx9ZnVuY3Rpb24gUmcoYSl7dmFyIGI9TWcuY3VycmVudDtFKE1nKTthLl9jdXJyZW50VmFsdWU9Yn1cbmZ1bmN0aW9uIFNnKGEsYixjKXtmb3IoO251bGwhPT1hOyl7dmFyIGQ9YS5hbHRlcm5hdGU7KGEuY2hpbGRMYW5lcyZiKSE9PWI/KGEuY2hpbGRMYW5lc3w9YixudWxsIT09ZCYmKGQuY2hpbGRMYW5lc3w9YikpOm51bGwhPT1kJiYoZC5jaGlsZExhbmVzJmIpIT09YiYmKGQuY2hpbGRMYW5lc3w9Yik7aWYoYT09PWMpYnJlYWs7YT1hLnJldHVybn19ZnVuY3Rpb24gVGcoYSxiKXtOZz1hO1BnPU9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYoVWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gVmcoYSl7dmFyIGI9YS5fY3VycmVudFZhbHVlO2lmKFBnIT09YSlpZihhPXtjb250ZXh0OmEsbWVtb2l6ZWRWYWx1ZTpiLG5leHQ6bnVsbH0sbnVsbD09PU9nKXtpZihudWxsPT09TmcpdGhyb3cgRXJyb3IocCgzMDgpKTtPZz1hO05nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YX19ZWxzZSBPZz1PZy5uZXh0PWE7cmV0dXJuIGJ9dmFyIFdnPW51bGw7ZnVuY3Rpb24gWGcoYSl7bnVsbD09PVdnP1dnPVthXTpXZy5wdXNoKGEpfWZ1bmN0aW9uIFlnKGEsYixjLGQpe3ZhciBlPWIuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGMubmV4dD1jLFhnKGIpKTooYy5uZXh0PWUubmV4dCxlLm5leHQ9Yyk7Yi5pbnRlcmxlYXZlZD1jO3JldHVybiBaZyhhLGQpfVxuZnVuY3Rpb24gWmcoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfXZhciAkZz0hMTtmdW5jdGlvbiBhaChhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24gYmgoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gY2goYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19XG5mdW5jdGlvbiBkaChhLGIsYyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtkPWQuc2hhcmVkO2lmKDAhPT0oSyYyKSl7dmFyIGU9ZC5wZW5kaW5nO251bGw9PT1lP2IubmV4dD1iOihiLm5leHQ9ZS5uZXh0LGUubmV4dD1iKTtkLnBlbmRpbmc9YjtyZXR1cm4gWmcoYSxjKX1lPWQuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGIubmV4dD1iLFhnKGQpKTooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5pbnRlcmxlYXZlZD1iO3JldHVybiBaZyhhLGMpfWZ1bmN0aW9uIGVoKGEsYixjKXtiPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIuc2hhcmVkLDAhPT0oYyY0MTk0MjQwKSkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG5mdW5jdGlvbiBmaChhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gZ2goYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTskZz0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBtPWEuYWx0ZXJuYXRlO251bGwhPT1tJiYobT1tLnVwZGF0ZVF1ZXVlLGg9bS5sYXN0QmFzZVVwZGF0ZSxoIT09ZyYmKG51bGw9PT1oP20uZmlyc3RCYXNlVXBkYXRlPWw6aC5uZXh0PWwsbS5sYXN0QmFzZVVwZGF0ZT1rKSl9aWYobnVsbCE9PWYpe3ZhciBxPWUuYmFzZVN0YXRlO2c9MDttPWw9az1udWxsO2g9Zjtkb3t2YXIgcj1oLmxhbmUseT1oLmV2ZW50VGltZTtpZigoZCZyKT09PXIpe251bGwhPT1tJiYobT1tLm5leHQ9e2V2ZW50VGltZTp5LGxhbmU6MCx0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBuPWEsdD1oO3I9Yjt5PWM7c3dpdGNoKHQudGFnKXtjYXNlIDE6bj10LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4pe3E9bi5jYWxsKHkscSxyKTticmVhayBhfXE9bjticmVhayBhO2Nhc2UgMzpuLmZsYWdzPW4uZmxhZ3MmLTY1NTM3fDEyODtjYXNlIDA6bj10LnBheWxvYWQ7cj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbj9uLmNhbGwoeSxxLHIpOm47aWYobnVsbD09PXJ8fHZvaWQgMD09PXIpYnJlYWsgYTtxPUEoe30scSxyKTticmVhayBhO2Nhc2UgMjokZz0hMH19bnVsbCE9PWguY2FsbGJhY2smJjAhPT1oLmxhbmUmJihhLmZsYWdzfD02NCxyPWUuZWZmZWN0cyxudWxsPT09cj9lLmVmZmVjdHM9W2hdOnIucHVzaChoKSl9ZWxzZSB5PXtldmVudFRpbWU6eSxsYW5lOnIsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bT8obD1tPXksaz1xKTptPW0ubmV4dD15LGd8PXI7XG5oPWgubmV4dDtpZihudWxsPT09aClpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSByPWgsaD1yLm5leHQsci5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1yLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09bSYmKGs9cSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bTtiPWUuc2hhcmVkLmludGVybGVhdmVkO2lmKG51bGwhPT1iKXtlPWI7ZG8gZ3w9ZS5sYW5lLGU9ZS5uZXh0O3doaWxlKGUhPT1iKX1lbHNlIG51bGw9PT1mJiYoZS5zaGFyZWQubGFuZXM9MCk7aGh8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT1xfX1cbmZ1bmN0aW9uIGloKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcihwKDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIGpoPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIGtoKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpBKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBuaD17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9WYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1MKCksZT1saChhKSxmPWNoKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9ZGgoYSxmLGUpO251bGwhPT1iJiYobWgoYixhLGUsZCksZWgoYixhLGUpKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1MKCksZT1saChhKSxmPWNoKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7Yj1kaChhLGYsZSk7bnVsbCE9PWImJihtaChiLGEsZSxkKSxlaChiLGEsZSkpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPUwoKSxkPVxubGgoYSksZT1jaChjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO2I9ZGgoYSxlLGQpO251bGwhPT1iJiYobWgoYixhLGQsYyksZWgoYixhLGQpKX19O2Z1bmN0aW9uIG9oKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUllKGMsZCl8fCFJZShlLGYpOiEwfVxuZnVuY3Rpb24gcGgoYSxiLGMpe3ZhciBkPSExLGU9VmY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9VmcoZik6KGU9WmYoYik/WGY6SC5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/WWYoYSxlKTpWZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPW5oO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gcWgoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJm5oLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gcmgoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1qaDthaChhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PVZnKGYpOihmPVpmKGIpP1hmOkguY3VycmVudCxlLmNvbnRleHQ9WWYoYSxmKSk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKGtoKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJm5oLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGdoKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQxOTQzMDgpfVxuZnVuY3Rpb24gc2goYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHAoMTQ3LGEpKTt2YXIgZT1kLGY9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWYpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZS5yZWZzO2I9PT1qaCYmKGI9ZS5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltmXTpiW2ZdPWF9O2IuX3N0cmluZ1JlZj1mO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcihwKDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcihwKDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gdGgoYSxiKXthPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKTt0aHJvdyBFcnJvcihwKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1hP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmEpKTt9ZnVuY3Rpb24gdWgoYSl7dmFyIGI9YS5faW5pdDtyZXR1cm4gYihhLl9wYXlsb2FkKX1cbmZ1bmN0aW9uIHZoKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmRlbGV0aW9ucztudWxsPT09ZD8oYi5kZWxldGlvbnM9W2NdLGIuZmxhZ3N8PTE2KTpkLnB1c2goYyl9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPXdoKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYi5mbGFnc3w9MTA0ODU3NixjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3N8PTIsYyk6ZDtiLmZsYWdzfD0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmXG5udWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzfD0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9eGgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXt2YXIgZj1jLnR5cGU7aWYoZj09PXlhKXJldHVybiBtKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsYy5rZXkpO2lmKG51bGwhPT1iJiYoYi5lbGVtZW50VHlwZT09PWZ8fFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYuJCR0eXBlb2Y9PT1IYSYmdWgoZik9PT1iLnR5cGUpKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1zaChhLGIsYyksZC5yZXR1cm49YSxkO2Q9eWgoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9c2goYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxcbmIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj16aChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9QWgoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBxKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGImJlwiXCIhPT1ifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9eGgoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGM9eWgoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksXG5jLnJlZj1zaChhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2Ugd2E6cmV0dXJuIGI9emgoYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2Nhc2UgSGE6dmFyIGQ9Yi5faW5pdDtyZXR1cm4gcShhLGQoYi5fcGF5bG9hZCksYyl9aWYoZWIoYil8fEthKGIpKXJldHVybiBiPUFoKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO3RoKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcihhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYyYmXCJcIiE9PWN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGMua2V5PT09ZT9rKGEsYixjLGQpOm51bGw7Y2FzZSB3YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbDtjYXNlIEhhOnJldHVybiBlPWMuX2luaXQscihhLFxuYixlKGMuX3BheWxvYWQpLGQpfWlmKGViKGMpfHxLYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7dGgoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkJiZcIlwiIT09ZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsayhiLGEsZCxlKTtjYXNlIHdhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpO2Nhc2UgSGE6dmFyIGY9ZC5faW5pdDtyZXR1cm4geShhLGIsYyxmKGQuX3BheWxvYWQpLGUpfWlmKGViKGQpfHxLYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7dGgoYixkKX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIG4oZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsbT1udWxsLHU9Zyx3PWc9MCx4PW51bGw7bnVsbCE9PXUmJnc8aC5sZW5ndGg7dysrKXt1LmluZGV4Pnc/KHg9dSx1PW51bGwpOng9dS5zaWJsaW5nO3ZhciBuPXIoZSx1LGhbd10sayk7aWYobnVsbD09PW4pe251bGw9PT11JiYodT14KTticmVha31hJiZ1JiZudWxsPT09bi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHcpO251bGw9PT1tP2w9bjptLnNpYmxpbmc9bjttPW47dT14fWlmKHc9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLEkmJnRnKGUsdyksbDtpZihudWxsPT09dSl7Zm9yKDt3PGgubGVuZ3RoO3crKyl1PXEoZSxoW3ddLGspLG51bGwhPT11JiYoZz1mKHUsZyx3KSxudWxsPT09bT9sPXU6bS5zaWJsaW5nPXUsbT11KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcih1PWQoZSx1KTt3PGgubGVuZ3RoO3crKyl4PXkodSxlLHcsaFt3XSxrKSxudWxsIT09eCYmKGEmJm51bGwhPT14LmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PVxueC5rZXk/dzp4LmtleSksZz1mKHgsZyx3KSxudWxsPT09bT9sPXg6bS5zaWJsaW5nPXgsbT14KTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gdChlLGcsaCxrKXt2YXIgbD1LYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcihwKDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PWgpdGhyb3cgRXJyb3IocCgxNTEpKTtmb3IodmFyIHU9bD1udWxsLG09Zyx3PWc9MCx4PW51bGwsbj1oLm5leHQoKTtudWxsIT09bSYmIW4uZG9uZTt3Kyssbj1oLm5leHQoKSl7bS5pbmRleD53Pyh4PW0sbT1udWxsKTp4PW0uc2libGluZzt2YXIgdD1yKGUsbSxuLnZhbHVlLGspO2lmKG51bGw9PT10KXtudWxsPT09bSYmKG09eCk7YnJlYWt9YSYmbSYmbnVsbD09PXQuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHQsZyx3KTtudWxsPT09dT9sPXQ6dS5zaWJsaW5nPXQ7dT10O209eH1pZihuLmRvbmUpcmV0dXJuIGMoZSxcbm0pLEkmJnRnKGUsdyksbDtpZihudWxsPT09bSl7Zm9yKDshbi5kb25lO3crKyxuPWgubmV4dCgpKW49cShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO0kmJnRnKGUsdyk7cmV0dXJuIGx9Zm9yKG09ZChlLG0pOyFuLmRvbmU7dysrLG49aC5uZXh0KCkpbj15KG0sZSx3LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1uLmtleT93Om4ua2V5KSxnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mdW5jdGlvbiBKKGEsZCxmLGgpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXlhJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYpe3N3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHZhOmE6e2Zvcih2YXIgaz1cbmYua2V5LGw9ZDtudWxsIT09bDspe2lmKGwua2V5PT09ayl7az1mLnR5cGU7aWYoaz09PXlhKXtpZig3PT09bC50YWcpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWVsc2UgaWYobC5lbGVtZW50VHlwZT09PWt8fFwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1IYSYmdWgoayk9PT1sLnR5cGUpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMpO2QucmVmPXNoKGEsbCxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWMoYSxsKTticmVha31lbHNlIGIoYSxsKTtsPWwuc2libGluZ31mLnR5cGU9PT15YT8oZD1BaChmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9eWgoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9c2goYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHdhOmE6e2ZvcihsPWYua2V5O251bGwhPT1cbmQ7KXtpZihkLmtleT09PWwpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9emgoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSk7Y2FzZSBIYTpyZXR1cm4gbD1mLl9pbml0LEooYSxkLGwoZi5fcGF5bG9hZCksaCl9aWYoZWIoZikpcmV0dXJuIG4oYSxkLGYsaCk7aWYoS2EoZikpcmV0dXJuIHQoYSxkLGYsaCk7dGgoYSxmKX1yZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGYmJlwiXCIhPT1mfHxcIm51bWJlclwiPT09dHlwZW9mIGY/KGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTpcbihjKGEsZCksZD14aChmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKSk6YyhhLGQpfXJldHVybiBKfXZhciBCaD12aCghMCksQ2g9dmgoITEpLERoPXt9LEVoPVVmKERoKSxGaD1VZihEaCksR2g9VWYoRGgpO2Z1bmN0aW9uIEhoKGEpe2lmKGE9PT1EaCl0aHJvdyBFcnJvcihwKDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIEloKGEsYil7RyhHaCxiKTtHKEZoLGEpO0coRWgsRGgpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bGIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPWxiKGIsYSl9RShFaCk7RyhFaCxiKX1mdW5jdGlvbiBKaCgpe0UoRWgpO0UoRmgpO0UoR2gpfVxuZnVuY3Rpb24gS2goYSl7SGgoR2guY3VycmVudCk7dmFyIGI9SGgoRWguY3VycmVudCk7dmFyIGM9bGIoYixhLnR5cGUpO2IhPT1jJiYoRyhGaCxhKSxHKEVoLGMpKX1mdW5jdGlvbiBMaChhKXtGaC5jdXJyZW50PT09YSYmKEUoRWgpLEUoRmgpKX12YXIgTT1VZigwKTtcbmZ1bmN0aW9uIE1oKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBOaD1bXTtcbmZ1bmN0aW9uIE9oKCl7Zm9yKHZhciBhPTA7YTxOaC5sZW5ndGg7YSsrKU5oW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7TmgubGVuZ3RoPTB9dmFyIFBoPXVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsUWg9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsUmg9MCxOPW51bGwsTz1udWxsLFA9bnVsbCxTaD0hMSxUaD0hMSxVaD0wLFZoPTA7ZnVuY3Rpb24gUSgpe3Rocm93IEVycm9yKHAoMzIxKSk7fWZ1bmN0aW9uIFdoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUhlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBYaChhLGIsYyxkLGUsZil7Umg9ZjtOPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDtQaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP1loOlpoO2E9YyhkLGUpO2lmKFRoKXtmPTA7ZG97VGg9ITE7VWg9MDtpZigyNTw9Zil0aHJvdyBFcnJvcihwKDMwMSkpO2YrPTE7UD1PPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO1BoLmN1cnJlbnQ9JGg7YT1jKGQsZSl9d2hpbGUoVGgpfVBoLmN1cnJlbnQ9YWk7Yj1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDtSaD0wO1A9Tz1OPW51bGw7U2g9ITE7aWYoYil0aHJvdyBFcnJvcihwKDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIGJpKCl7dmFyIGE9MCE9PVVoO1VoPTA7cmV0dXJuIGF9XG5mdW5jdGlvbiBjaSgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiBkaSgpe2lmKG51bGw9PT1PKXt2YXIgYT1OLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1PLm5leHQ7dmFyIGI9bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlOlAubmV4dDtpZihudWxsIT09YilQPWIsTz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzMTApKTtPPWE7YT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLGJhc2VRdWV1ZTpPLmJhc2VRdWV1ZSxxdWV1ZTpPLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hfXJldHVybiBQfVxuZnVuY3Rpb24gZWkoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBmaShhKXt2YXIgYj1kaSgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU8sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7Zj1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPW51bGwsaz1udWxsLGw9Zjtkb3t2YXIgbT1sLmxhbmU7aWYoKFJoJm0pPT09bSludWxsIT09ayYmKGs9ay5uZXh0PXtsYW5lOjAsYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLGVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9bC5oYXNFYWdlclN0YXRlP2wuZWFnZXJTdGF0ZTphKGQsbC5hY3Rpb24pO2Vsc2V7dmFyIHE9e2xhbmU6bSxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsXG5lYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1rPyhoPWs9cSxnPWQpOms9ay5uZXh0PXE7Ti5sYW5lc3w9bTtoaHw9bX1sPWwubmV4dH13aGlsZShudWxsIT09bCYmbCE9PWYpO251bGw9PT1rP2c9ZDprLm5leHQ9aDtIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fChVZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZztiLmJhc2VRdWV1ZT1rO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1hPWMuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWEpe2U9YTtkbyBmPWUubGFuZSxOLmxhbmVzfD1mLGhofD1mLGU9ZS5uZXh0O3doaWxlKGUhPT1hKX1lbHNlIG51bGw9PT1lJiYoYy5sYW5lcz0wKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gZ2koYSl7dmFyIGI9ZGkoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KFVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19ZnVuY3Rpb24gaGkoKXt9XG5mdW5jdGlvbiBpaShhLGIpe3ZhciBjPU4sZD1kaSgpLGU9YigpLGY9IUhlKGQubWVtb2l6ZWRTdGF0ZSxlKTtmJiYoZC5tZW1vaXplZFN0YXRlPWUsVWc9ITApO2Q9ZC5xdWV1ZTtqaShraS5iaW5kKG51bGwsYyxkLGEpLFthXSk7aWYoZC5nZXRTbmFwc2hvdCE9PWJ8fGZ8fG51bGwhPT1QJiZQLm1lbW9pemVkU3RhdGUudGFnJjEpe2MuZmxhZ3N8PTIwNDg7bGkoOSxtaS5iaW5kKG51bGwsYyxkLGUsYiksdm9pZCAwLG51bGwpO2lmKG51bGw9PT1SKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShSaCYzMCl8fG5pKGMsYixlKX1yZXR1cm4gZX1mdW5jdGlvbiBuaShhLGIsYyl7YS5mbGFnc3w9MTYzODQ7YT17Z2V0U25hcHNob3Q6Yix2YWx1ZTpjfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIuc3RvcmVzPVthXSk6KGM9Yi5zdG9yZXMsbnVsbD09PWM/Yi5zdG9yZXM9W2FdOmMucHVzaChhKSl9XG5mdW5jdGlvbiBtaShhLGIsYyxkKXtiLnZhbHVlPWM7Yi5nZXRTbmFwc2hvdD1kO29pKGIpJiZwaShhKX1mdW5jdGlvbiBraShhLGIsYyl7cmV0dXJuIGMoZnVuY3Rpb24oKXtvaShiKSYmcGkoYSl9KX1mdW5jdGlvbiBvaShhKXt2YXIgYj1hLmdldFNuYXBzaG90O2E9YS52YWx1ZTt0cnl7dmFyIGM9YigpO3JldHVybiFIZShhLGMpfWNhdGNoKGQpe3JldHVybiEwfX1mdW5jdGlvbiBwaShhKXt2YXIgYj1aZyhhLDEpO251bGwhPT1iJiZtaChiLGEsMSwtMSl9XG5mdW5jdGlvbiBxaShhKXt2YXIgYj1jaSgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmVpLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2IucXVldWU9YTthPWEuZGlzcGF0Y2g9cmkuYmluZChudWxsLE4sYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIGxpKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBzaSgpe3JldHVybiBkaSgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gdGkoYSxiLGMsZCl7dmFyIGU9Y2koKTtOLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1saSgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gdWkoYSxiLGMsZCl7dmFyIGU9ZGkoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZXaChkLGcuZGVwcykpe2UubWVtb2l6ZWRTdGF0ZT1saShiLGMsZixkKTtyZXR1cm59fU4uZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWxpKDF8YixjLGYsZCl9ZnVuY3Rpb24gdmkoYSxiKXtyZXR1cm4gdGkoODM5MDY1Niw4LGEsYil9ZnVuY3Rpb24gamkoYSxiKXtyZXR1cm4gdWkoMjA0OCw4LGEsYil9ZnVuY3Rpb24gd2koYSxiKXtyZXR1cm4gdWkoNCwyLGEsYil9ZnVuY3Rpb24geGkoYSxiKXtyZXR1cm4gdWkoNCw0LGEsYil9XG5mdW5jdGlvbiB5aShhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIHppKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gdWkoNCw0LHlpLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIEFpKCl7fWZ1bmN0aW9uIEJpKGEsYil7dmFyIGM9ZGkoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJldoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gQ2koYSxiKXt2YXIgYz1kaSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmV2goYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gRGkoYSxiLGMpe2lmKDA9PT0oUmgmMjEpKXJldHVybiBhLmJhc2VTdGF0ZSYmKGEuYmFzZVN0YXRlPSExLFVnPSEwKSxhLm1lbW9pemVkU3RhdGU9YztIZShjLGIpfHwoYz15YygpLE4ubGFuZXN8PWMsaGh8PWMsYS5iYXNlU3RhdGU9ITApO3JldHVybiBifWZ1bmN0aW9uIEVpKGEsYil7dmFyIGM9QztDPTAhPT1jJiY0PmM/Yzo0O2EoITApO3ZhciBkPVFoLnRyYW5zaXRpb247UWgudHJhbnNpdGlvbj17fTt0cnl7YSghMSksYigpfWZpbmFsbHl7Qz1jLFFoLnRyYW5zaXRpb249ZH19ZnVuY3Rpb24gRmkoKXtyZXR1cm4gZGkoKS5tZW1vaXplZFN0YXRlfVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPWxoKGEpO2M9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKEhpKGEpKUlpKGIsYyk7ZWxzZSBpZihjPVlnKGEsYixjLGQpLG51bGwhPT1jKXt2YXIgZT1MKCk7bWgoYyxhLGQsZSk7SmkoYyxiLGQpfX1cbmZ1bmN0aW9uIHJpKGEsYixjKXt2YXIgZD1saChhKSxlPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZihIaShhKSlJaShiLGUpO2Vsc2V7dmFyIGY9YS5hbHRlcm5hdGU7aWYoMD09PWEubGFuZXMmJihudWxsPT09Znx8MD09PWYubGFuZXMpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuaGFzRWFnZXJTdGF0ZT0hMDtlLmVhZ2VyU3RhdGU9aDtpZihIZShoLGcpKXt2YXIgaz1iLmludGVybGVhdmVkO251bGw9PT1rPyhlLm5leHQ9ZSxYZyhiKSk6KGUubmV4dD1rLm5leHQsay5uZXh0PWUpO2IuaW50ZXJsZWF2ZWQ9ZTtyZXR1cm59fWNhdGNoKGwpe31maW5hbGx5e31jPVlnKGEsYixlLGQpO251bGwhPT1jJiYoZT1MKCksbWgoYyxhLGQsZSksSmkoYyxiLGQpKX19XG5mdW5jdGlvbiBIaShhKXt2YXIgYj1hLmFsdGVybmF0ZTtyZXR1cm4gYT09PU58fG51bGwhPT1iJiZiPT09Tn1mdW5jdGlvbiBJaShhLGIpe1RoPVNoPSEwO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9ZnVuY3Rpb24gSmkoYSxiLGMpe2lmKDAhPT0oYyY0MTk0MjQwKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9YztDYyhhLGMpfX1cbnZhciBhaT17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6USx1c2VDb250ZXh0OlEsdXNlRWZmZWN0OlEsdXNlSW1wZXJhdGl2ZUhhbmRsZTpRLHVzZUluc2VydGlvbkVmZmVjdDpRLHVzZUxheW91dEVmZmVjdDpRLHVzZU1lbW86USx1c2VSZWR1Y2VyOlEsdXNlUmVmOlEsdXNlU3RhdGU6USx1c2VEZWJ1Z1ZhbHVlOlEsdXNlRGVmZXJyZWRWYWx1ZTpRLHVzZVRyYW5zaXRpb246USx1c2VNdXRhYmxlU291cmNlOlEsdXNlU3luY0V4dGVybmFsU3RvcmU6USx1c2VJZDpRLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sWWg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7Y2koKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6dmksdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHRpKDQxOTQzMDgsXG40LHlpLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGkoNDE5NDMwOCw0LGEsYil9LHVzZUluc2VydGlvbkVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiB0aSg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPWNpKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWNpKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2QucXVldWU9YTthPWEuZGlzcGF0Y2g9R2kuYmluZChudWxsLE4sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPVxuY2koKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6cWksdXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3JldHVybiBjaSgpLm1lbW9pemVkU3RhdGU9YX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPXFpKCExKSxiPWFbMF07YT1FaS5iaW5kKG51bGwsYVsxXSk7Y2koKS5tZW1vaXplZFN0YXRlPWE7cmV0dXJuW2IsYV19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oKXt9LHVzZVN5bmNFeHRlcm5hbFN0b3JlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1OLGU9Y2koKTtpZihJKXtpZih2b2lkIDA9PT1jKXRocm93IEVycm9yKHAoNDA3KSk7Yz1jKCl9ZWxzZXtjPWIoKTtpZihudWxsPT09Uil0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oUmgmMzApfHxuaShkLGIsYyl9ZS5tZW1vaXplZFN0YXRlPWM7dmFyIGY9e3ZhbHVlOmMsZ2V0U25hcHNob3Q6Yn07ZS5xdWV1ZT1mO3ZpKGtpLmJpbmQobnVsbCxkLFxuZixhKSxbYV0pO2QuZmxhZ3N8PTIwNDg7bGkoOSxtaS5iaW5kKG51bGwsZCxmLGMsYiksdm9pZCAwLG51bGwpO3JldHVybiBjfSx1c2VJZDpmdW5jdGlvbigpe3ZhciBhPWNpKCksYj1SLmlkZW50aWZpZXJQcmVmaXg7aWYoSSl7dmFyIGM9c2c7dmFyIGQ9cmc7Yz0oZCZ+KDE8PDMyLW9jKGQpLTEpKS50b1N0cmluZygzMikrYztiPVwiOlwiK2IrXCJSXCIrYztjPVVoKys7MDxjJiYoYis9XCJIXCIrYy50b1N0cmluZygzMikpO2IrPVwiOlwifWVsc2UgYz1WaCsrLGI9XCI6XCIrYitcInJcIitjLnRvU3RyaW5nKDMyKStcIjpcIjtyZXR1cm4gYS5tZW1vaXplZFN0YXRlPWJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sWmg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOkJpLHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OmppLHVzZUltcGVyYXRpdmVIYW5kbGU6emksdXNlSW5zZXJ0aW9uRWZmZWN0OndpLHVzZUxheW91dEVmZmVjdDp4aSx1c2VNZW1vOkNpLHVzZVJlZHVjZXI6ZmksdXNlUmVmOnNpLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGZpKGVpKX0sXG51c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9ZGkoKTtyZXR1cm4gRGkoYixPLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1maShlaSlbMF0sYj1kaSgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6aGksdXNlU3luY0V4dGVybmFsU3RvcmU6aWksdXNlSWQ6RmksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSwkaD17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6QmksdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6amksdXNlSW1wZXJhdGl2ZUhhbmRsZTp6aSx1c2VJbnNlcnRpb25FZmZlY3Q6d2ksdXNlTGF5b3V0RWZmZWN0OnhpLHVzZU1lbW86Q2ksdXNlUmVkdWNlcjpnaSx1c2VSZWY6c2ksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gZ2koZWkpfSx1c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9ZGkoKTtyZXR1cm4gbnVsbD09PVxuTz9iLm1lbW9pemVkU3RhdGU9YTpEaShiLE8ubWVtb2l6ZWRTdGF0ZSxhKX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPWdpKGVpKVswXSxiPWRpKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpoaSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTppaSx1c2VJZDpGaSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9O2Z1bmN0aW9uIEtpKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVBhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplLGRpZ2VzdDpudWxsfX1mdW5jdGlvbiBMaShhLGIsYyl7cmV0dXJue3ZhbHVlOmEsc291cmNlOm51bGwsc3RhY2s6bnVsbCE9Yz9jOm51bGwsZGlnZXN0Om51bGwhPWI/YjpudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBOaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBPaShhLGIsYyl7Yz1jaCgtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtQaXx8KFBpPSEwLFFpPWQpO01pKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gUmkoYSxiLGMpe2M9Y2goLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TWkoYSxiKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe01pKGEsYik7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09U2k/U2k9bmV3IFNldChbdGhpc10pOlNpLmFkZCh0aGlzKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBUaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7aWYobnVsbD09PWQpe2Q9YS5waW5nQ2FjaGU9bmV3IE5pO3ZhciBlPW5ldyBTZXQ7ZC5zZXQoYixlKX1lbHNlIGU9ZC5nZXQoYiksdm9pZCAwPT09ZSYmKGU9bmV3IFNldCxkLnNldChiLGUpKTtlLmhhcyhjKXx8KGUuYWRkKGMpLGE9VWkuYmluZChudWxsLGEsYixjKSxiLnRoZW4oYSxhKSl9ZnVuY3Rpb24gVmkoYSl7ZG97dmFyIGI7aWYoYj0xMz09PWEudGFnKWI9YS5tZW1vaXplZFN0YXRlLGI9bnVsbCE9PWI/bnVsbCE9PWIuZGVoeWRyYXRlZD8hMDohMTohMDtpZihiKXJldHVybiBhO2E9YS5yZXR1cm59d2hpbGUobnVsbCE9PWEpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gV2koYSxiLGMsZCxlKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gYT09PWI/YS5mbGFnc3w9NjU1MzY6KGEuZmxhZ3N8PTEyOCxjLmZsYWdzfD0xMzEwNzIsYy5mbGFncyY9LTUyODA1LDE9PT1jLnRhZyYmKG51bGw9PT1jLmFsdGVybmF0ZT9jLnRhZz0xNzooYj1jaCgtMSwxKSxiLnRhZz0yLGRoKGMsYiwxKSkpLGMubGFuZXN8PTEpLGE7YS5mbGFnc3w9NjU1MzY7YS5sYW5lcz1lO3JldHVybiBhfXZhciBYaT11YS5SZWFjdEN1cnJlbnRPd25lcixVZz0hMTtmdW5jdGlvbiBZaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP0NoKGIsbnVsbCxjLGQpOkJoKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gWmkoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO1RnKGIsZSk7ZD1YaChhLGIsYyxkLGYsZSk7Yz1iaSgpO2lmKG51bGwhPT1hJiYhVWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSwkaShhLGIsZSk7SSYmYyYmdmcoYik7Yi5mbGFnc3w9MTtZaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGFqKGEsYixjLGQsZSl7aWYobnVsbD09PWEpe3ZhciBmPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmIWJqKGYpJiZ2b2lkIDA9PT1mLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1mLGNqKGEsYixmLGQsZSk7YT15aChjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGUpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1mPWEuY2hpbGQ7aWYoMD09PShhLmxhbmVzJmUpKXt2YXIgZz1mLm1lbW9pemVkUHJvcHM7Yz1jLmNvbXBhcmU7Yz1udWxsIT09Yz9jOkllO2lmKGMoZyxkKSYmYS5yZWY9PT1iLnJlZilyZXR1cm4gJGkoYSxiLGUpfWIuZmxhZ3N8PTE7YT13aChmLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGNqKGEsYixjLGQsZSl7aWYobnVsbCE9PWEpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihJZShmLGQpJiZhLnJlZj09PWIucmVmKWlmKFVnPSExLGIucGVuZGluZ1Byb3BzPWQ9ZiwwIT09KGEubGFuZXMmZSkpMCE9PShhLmZsYWdzJjEzMTA3MikmJihVZz0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLCRpKGEsYixlKX1yZXR1cm4gZGooYSxiLGMsZCxlKX1cbmZ1bmN0aW9uIGVqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sRyhmaixnaiksZ2p8PWM7ZWxzZXtpZigwPT09KGMmMTA3Mzc0MTgyNCkpcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxiLnVwZGF0ZVF1ZXVlPW51bGwsRyhmaixnaiksZ2p8PWEsbnVsbDtiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9O2Q9bnVsbCE9PWY/Zi5iYXNlTGFuZXM6YztHKGZqLGdqKTtnanw9ZH1lbHNlIG51bGwhPT1cbmY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLEcoZmosZ2opLGdqfD1kO1lpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGhqKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyfWZ1bmN0aW9uIGRqKGEsYixjLGQsZSl7dmFyIGY9WmYoYyk/WGY6SC5jdXJyZW50O2Y9WWYoYixmKTtUZyhiLGUpO2M9WGgoYSxiLGMsZCxmLGUpO2Q9YmkoKTtpZihudWxsIT09YSYmIVVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsJGkoYSxiLGUpO0kmJmQmJnZnKGIpO2IuZmxhZ3N8PTE7WWkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBpaihhLGIsYyxkLGUpe2lmKFpmKGMpKXt2YXIgZj0hMDtjZyhiKX1lbHNlIGY9ITE7VGcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpamooYSxiKSxwaChiLGMsZCkscmgoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9VmcobCk6KGw9WmYoYyk/WGY6SC5jdXJyZW50LGw9WWYoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGghPT1kfHxrIT09bCkmJnFoKGIsZyxkLGwpOyRnPSExO3ZhciByPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7Z2goYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHIhPT1rfHxXZi5jdXJyZW50fHwkZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihraChiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9JGd8fG9oKGIsYyxoLGQscixrLGwpKT8ocXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpKTpcbihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO2JoKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6TGcoYi50eXBlLGgpO2cucHJvcHM9bDtxPWIucGVuZGluZ1Byb3BzO3I9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9Vmcoayk6KGs9WmYoYyk/WGY6SC5jdXJyZW50LGs9WWYoYixrKSk7dmFyIHk9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG09XCJmdW5jdGlvblwiPT09dHlwZW9mIHl8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1xfHxyIT09aykmJnFoKGIsZyxkLGspOyRnPSExO3I9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cjtnaChiLGQsZyxlKTt2YXIgbj1iLm1lbW9pemVkU3RhdGU7aCE9PXF8fHIhPT1ufHxXZi5jdXJyZW50fHwkZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHkmJihraChiLGMseSxkKSxuPWIubWVtb2l6ZWRTdGF0ZSksKGw9JGd8fG9oKGIsYyxsLGQscixuLGspfHwhMSk/KG18fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXG5nLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0xMDI0KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPW4pLGcucHJvcHM9ZCxnLnN0YXRlPW4sZy5jb250ZXh0PWssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09XG5hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGQ9ITEpfXJldHVybiBraihhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBraihhLGIsYyxkLGUsZil7aGooYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmMTI4KTtpZighZCYmIWcpcmV0dXJuIGUmJmRnKGIsYywhMSksJGkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7WGkuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1CaChiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPUJoKGIsbnVsbCxoLGYpKTpZaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZkZyhiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGxqKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/YWcoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmYWcoYSxiLmNvbnRleHQsITEpO0loKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIG1qKGEsYixjLGQsZSl7SWcoKTtKZyhlKTtiLmZsYWdzfD0yNTY7WWkoYSxiLGMsZCk7cmV0dXJuIGIuY2hpbGR9dmFyIG5qPXtkZWh5ZHJhdGVkOm51bGwsdHJlZUNvbnRleHQ6bnVsbCxyZXRyeUxhbmU6MH07ZnVuY3Rpb24gb2ooYSl7cmV0dXJue2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9fVxuZnVuY3Rpb24gcGooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9TS5jdXJyZW50LGY9ITEsZz0wIT09KGIuZmxhZ3MmMTI4KSxoOyhoPWcpfHwoaD1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2lmKGgpZj0hMCxiLmZsYWdzJj0tMTI5O2Vsc2UgaWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpZXw9MTtHKE0sZSYxKTtpZihudWxsPT09YSl7RWcoYik7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJihhPWEuZGVoeWRyYXRlZCxudWxsIT09YSkpcmV0dXJuIDA9PT0oYi5tb2RlJjEpP2IubGFuZXM9MTpcIiQhXCI9PT1hLmRhdGE/Yi5sYW5lcz04OmIubGFuZXM9MTA3Mzc0MTgyNCxudWxsO2c9ZC5jaGlsZHJlbjthPWQuZmFsbGJhY2s7cmV0dXJuIGY/KGQ9Yi5tb2RlLGY9Yi5jaGlsZCxnPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Z30sMD09PShkJjEpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9XG5nKTpmPXFqKGcsZCwwLG51bGwpLGE9QWgoYSxkLGMsbnVsbCksZi5yZXR1cm49YixhLnJldHVybj1iLGYuc2libGluZz1hLGIuY2hpbGQ9ZixiLmNoaWxkLm1lbW9pemVkU3RhdGU9b2ooYyksYi5tZW1vaXplZFN0YXRlPW5qLGEpOnJqKGIsZyl9ZT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUmJihoPWUuZGVoeWRyYXRlZCxudWxsIT09aCkpcmV0dXJuIHNqKGEsYixnLGQsaCxlLGMpO2lmKGYpe2Y9ZC5mYWxsYmFjaztnPWIubW9kZTtlPWEuY2hpbGQ7aD1lLnNpYmxpbmc7dmFyIGs9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpkLmNoaWxkcmVufTswPT09KGcmMSkmJmIuY2hpbGQhPT1lPyhkPWIuY2hpbGQsZC5jaGlsZExhbmVzPTAsZC5wZW5kaW5nUHJvcHM9ayxiLmRlbGV0aW9ucz1udWxsKTooZD13aChlLGspLGQuc3VidHJlZUZsYWdzPWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0KTtudWxsIT09aD9mPXdoKGgsZik6KGY9QWgoZixnLGMsbnVsbCksZi5mbGFnc3w9Mik7Zi5yZXR1cm49XG5iO2QucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kO2Q9ZjtmPWIuY2hpbGQ7Zz1hLmNoaWxkLm1lbW9pemVkU3RhdGU7Zz1udWxsPT09Zz9vaihjKTp7YmFzZUxhbmVzOmcuYmFzZUxhbmVzfGMsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc307Zi5tZW1vaXplZFN0YXRlPWc7Zi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YztiLm1lbW9pemVkU3RhdGU9bmo7cmV0dXJuIGR9Zj1hLmNoaWxkO2E9Zi5zaWJsaW5nO2Q9d2goZix7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpkLmNoaWxkcmVufSk7MD09PShiLm1vZGUmMSkmJihkLmxhbmVzPWMpO2QucmV0dXJuPWI7ZC5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihjPWIuZGVsZXRpb25zLG51bGw9PT1jPyhiLmRlbGV0aW9ucz1bYV0sYi5mbGFnc3w9MTYpOmMucHVzaChhKSk7Yi5jaGlsZD1kO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBkfVxuZnVuY3Rpb24gcmooYSxiKXtiPXFqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmJ9LGEubW9kZSwwLG51bGwpO2IucmV0dXJuPWE7cmV0dXJuIGEuY2hpbGQ9Yn1mdW5jdGlvbiB0aihhLGIsYyxkKXtudWxsIT09ZCYmSmcoZCk7QmgoYixhLmNoaWxkLG51bGwsYyk7YT1yaihiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuKTthLmZsYWdzfD0yO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBhfVxuZnVuY3Rpb24gc2ooYSxiLGMsZCxlLGYsZyl7aWYoYyl7aWYoYi5mbGFncyYyNTYpcmV0dXJuIGIuZmxhZ3MmPS0yNTcsZD1MaShFcnJvcihwKDQyMikpKSx0aihhLGIsZyxkKTtpZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXJldHVybiBiLmNoaWxkPWEuY2hpbGQsYi5mbGFnc3w9MTI4LG51bGw7Zj1kLmZhbGxiYWNrO2U9Yi5tb2RlO2Q9cWooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0sZSwwLG51bGwpO2Y9QWgoZixlLGcsbnVsbCk7Zi5mbGFnc3w9MjtkLnJldHVybj1iO2YucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kOzAhPT0oYi5tb2RlJjEpJiZCaChiLGEuY2hpbGQsbnVsbCxnKTtiLmNoaWxkLm1lbW9pemVkU3RhdGU9b2ooZyk7Yi5tZW1vaXplZFN0YXRlPW5qO3JldHVybiBmfWlmKDA9PT0oYi5tb2RlJjEpKXJldHVybiB0aihhLGIsZyxudWxsKTtpZihcIiQhXCI9PT1lLmRhdGEpe2Q9ZS5uZXh0U2libGluZyYmZS5uZXh0U2libGluZy5kYXRhc2V0O1xuaWYoZCl2YXIgaD1kLmRnc3Q7ZD1oO2Y9RXJyb3IocCg0MTkpKTtkPUxpKGYsZCx2b2lkIDApO3JldHVybiB0aihhLGIsZyxkKX1oPTAhPT0oZyZhLmNoaWxkTGFuZXMpO2lmKFVnfHxoKXtkPVI7aWYobnVsbCE9PWQpe3N3aXRjaChnJi1nKXtjYXNlIDQ6ZT0yO2JyZWFrO2Nhc2UgMTY6ZT04O2JyZWFrO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDplPTMyO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmU9MjY4NDM1NDU2O2JyZWFrO2RlZmF1bHQ6ZT0wfWU9MCE9PShlJihkLnN1c3BlbmRlZExhbmVzfGcpKT8wOmU7XG4wIT09ZSYmZSE9PWYucmV0cnlMYW5lJiYoZi5yZXRyeUxhbmU9ZSxaZyhhLGUpLG1oKGQsYSxlLC0xKSl9dWooKTtkPUxpKEVycm9yKHAoNDIxKSkpO3JldHVybiB0aihhLGIsZyxkKX1pZihcIiQ/XCI9PT1lLmRhdGEpcmV0dXJuIGIuZmxhZ3N8PTEyOCxiLmNoaWxkPWEuY2hpbGQsYj12ai5iaW5kKG51bGwsYSksZS5fcmVhY3RSZXRyeT1iLG51bGw7YT1mLnRyZWVDb250ZXh0O3lnPUxmKGUubmV4dFNpYmxpbmcpO3hnPWI7ST0hMDt6Zz1udWxsO251bGwhPT1hJiYob2dbcGcrK109cmcsb2dbcGcrK109c2csb2dbcGcrK109cWcscmc9YS5pZCxzZz1hLm92ZXJmbG93LHFnPWIpO2I9cmooYixkLmNoaWxkcmVuKTtiLmZsYWdzfD00MDk2O3JldHVybiBifWZ1bmN0aW9uIHdqKGEsYixjKXthLmxhbmVzfD1iO3ZhciBkPWEuYWx0ZXJuYXRlO251bGwhPT1kJiYoZC5sYW5lc3w9Yik7U2coYS5yZXR1cm4sYixjKX1cbmZ1bmN0aW9uIHhqKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFN0YXRlO251bGw9PT1mP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmV9OihmLmlzQmFja3dhcmRzPWIsZi5yZW5kZXJpbmc9bnVsbCxmLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGYubGFzdD1kLGYudGFpbD1jLGYudGFpbE1vZGU9ZSl9XG5mdW5jdGlvbiB5aihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1lpKGEsYixkLmNoaWxkcmVuLGMpO2Q9TS5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTEyODtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJndqKGEsYyxiKTtlbHNlIGlmKDE5PT09YS50YWcpd2ooYSxjLGIpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1HKE0sZCk7aWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PU1oKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7eGooYiwhMSxlLGMsZik7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1NaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9eGooYiwhMCxjLG51bGwsZik7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6eGooYiwhMSxudWxsLG51bGwsdm9pZCAwKTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gamooYSxiKXswPT09KGIubW9kZSYxKSYmbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mil9ZnVuY3Rpb24gJGkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO2hofD1iLmxhbmVzO2lmKDA9PT0oYyZiLmNoaWxkTGFuZXMpKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcihwKDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz13aChhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9d2goYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHpqKGEsYixjKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzpsaihiKTtJZygpO2JyZWFrO2Nhc2UgNTpLaChiKTticmVhaztjYXNlIDE6WmYoYi50eXBlKSYmY2coYik7YnJlYWs7Y2FzZSA0OkloKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDp2YXIgZD1iLnR5cGUuX2NvbnRleHQsZT1iLm1lbW9pemVkUHJvcHMudmFsdWU7RyhNZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1lO2JyZWFrO2Nhc2UgMTM6ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQpe2lmKG51bGwhPT1kLmRlaHlkcmF0ZWQpcmV0dXJuIEcoTSxNLmN1cnJlbnQmMSksYi5mbGFnc3w9MTI4LG51bGw7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHBqKGEsYixjKTtHKE0sTS5jdXJyZW50JjEpO2E9JGkoYSxiLGMpO3JldHVybiBudWxsIT09YT9hLnNpYmxpbmc6bnVsbH1HKE0sTS5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmXG5iLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyYxMjgpKXtpZihkKXJldHVybiB5aihhLGIsYyk7Yi5mbGFnc3w9MTI4fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7RyhNLE0uY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gYi5sYW5lcz0wLGVqKGEsYixjKX1yZXR1cm4gJGkoYSxiLGMpfXZhciBBaixCaixDaixEajtcbkFqPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtCaj1mdW5jdGlvbigpe307XG5Daj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7SGgoRWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPUEoe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1CZil9dWIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmXG4oY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8KGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLFxuYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkQoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0RqPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O1xuZnVuY3Rpb24gRWooYSxiKXtpZighSSlzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gUyhhKXt2YXIgYj1udWxsIT09YS5hbHRlcm5hdGUmJmEuYWx0ZXJuYXRlLmNoaWxkPT09YS5jaGlsZCxjPTAsZD0wO2lmKGIpZm9yKHZhciBlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0LGR8PWUuZmxhZ3MmMTQ2ODAwNjQsZS5yZXR1cm49YSxlPWUuc2libGluZztlbHNlIGZvcihlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzLGR8PWUuZmxhZ3MsZS5yZXR1cm49YSxlPWUuc2libGluZzthLnN1YnRyZWVGbGFnc3w9ZDthLmNoaWxkTGFuZXM9YztyZXR1cm4gYn1cbmZ1bmN0aW9uIEZqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wczt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBTKGIpLG51bGw7Y2FzZSAxOnJldHVybiBaZihiLnR5cGUpJiYkZigpLFMoYiksbnVsbDtjYXNlIDM6ZD1iLnN0YXRlTm9kZTtKaCgpO0UoV2YpO0UoSCk7T2goKTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpR2coYik/Yi5mbGFnc3w9NDpudWxsPT09YXx8YS5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmMD09PShiLmZsYWdzJjI1Nil8fChiLmZsYWdzfD0xMDI0LG51bGwhPT16ZyYmKEdqKHpnKSx6Zz1udWxsKSk7QmooYSxiKTtTKGIpO3JldHVybiBudWxsO2Nhc2UgNTpMaChiKTt2YXIgZT1IaChHaC5jdXJyZW50KTtcbmM9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlDaihhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mik7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7UyhiKTtyZXR1cm4gbnVsbH1hPUhoKEVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW09mXT1iO2RbUGZdPWY7YT0wIT09KGIubW9kZSYxKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixkKTtEKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGxmLmxlbmd0aDtlKyspRChsZltlXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5kKTtEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxEKFwiaW52YWxpZFwiLGQpfXViKGMsZik7ZT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LGgsYSksZT1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmQudGV4dENvbnRlbnQhPT1cIlwiK2gmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LFxuaCxhKSxlPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6ZWEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWgmJlwib25TY3JvbGxcIj09PWcmJkQoXCJzY3JvbGxcIixkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7ZGIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1CZil9ZD1lO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWEmJihhPWtiKGMpKTtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlxuXCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2FbT2ZdPWI7YVtQZl09ZDtBaihhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7YTp7Zz12YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGEpO0QoXCJjbG9zZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5hKTtEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1kO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPWdiKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH11YihjLGUpO2g9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj9zYihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmbmIoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PVxuY3x8XCJcIiE9PWspJiZvYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmb2IoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihlYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZEKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmdGEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShhKTtkYihhLGQsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSxcbiEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXN3aXRjaChjKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmQ9ISFkLmF1dG9Gb2N1czticmVhayBhO2Nhc2UgXCJpbWdcIjpkPSEwO2JyZWFrIGE7ZGVmYXVsdDpkPSExfX1kJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpfVMoYik7cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKURqKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO2M9SGgoR2guY3VycmVudCk7SGgoRWguY3VycmVudCk7aWYoR2coYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtpZihmPWQubm9kZVZhbHVlIT09YylpZihhPVxueGcsbnVsbCE9PWEpc3dpdGNoKGEudGFnKXtjYXNlIDM6QWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSk7YnJlYWs7Y2FzZSA1OiEwIT09YS5tZW1vaXplZFByb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSl9ZiYmKGIuZmxhZ3N8PTQpfWVsc2UgZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbT2ZdPWIsYi5zdGF0ZU5vZGU9ZH1TKGIpO3JldHVybiBudWxsO2Nhc2UgMTM6RShNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtpZihJJiZudWxsIT09eWcmJjAhPT0oYi5tb2RlJjEpJiYwPT09KGIuZmxhZ3MmMTI4KSlIZygpLElnKCksYi5mbGFnc3w9OTg1NjAsZj0hMTtlbHNlIGlmKGY9R2coYiksbnVsbCE9PWQmJm51bGwhPT1kLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1cbmEpe2lmKCFmKXRocm93IEVycm9yKHAoMzE4KSk7Zj1iLm1lbW9pemVkU3RhdGU7Zj1udWxsIT09Zj9mLmRlaHlkcmF0ZWQ6bnVsbDtpZighZil0aHJvdyBFcnJvcihwKDMxNykpO2ZbT2ZdPWJ9ZWxzZSBJZygpLDA9PT0oYi5mbGFncyYxMjgpJiYoYi5tZW1vaXplZFN0YXRlPW51bGwpLGIuZmxhZ3N8PTQ7UyhiKTtmPSExfWVsc2UgbnVsbCE9PXpnJiYoR2ooemcpLHpnPW51bGwpLGY9ITA7aWYoIWYpcmV0dXJuIGIuZmxhZ3MmNjU1MzY/YjpudWxsfWlmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2QhPT0obnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUpJiZkJiYoYi5jaGlsZC5mbGFnc3w9ODE5MiwwIT09KGIubW9kZSYxKSYmKG51bGw9PT1hfHwwIT09KE0uY3VycmVudCYxKT8wPT09VCYmKFQ9Myk6dWooKSkpO251bGwhPT1iLnVwZGF0ZVF1ZXVlJiYoYi5mbGFnc3w9NCk7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIEpoKCksXG5CaihhLGIpLG51bGw9PT1hJiZzZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxTKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gUmcoYi50eXBlLl9jb250ZXh0KSxTKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAxOTpFKE0pO2Y9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1mKXJldHVybiBTKGIpLG51bGw7ZD0wIT09KGIuZmxhZ3MmMTI4KTtnPWYucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGQpRWooZiwhMSk7ZWxzZXtpZigwIT09VHx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPU1oKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD0xMjg7RWooZiwhMSk7ZD1nLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYoYi51cGRhdGVRdWV1ZT1kLGIuZmxhZ3N8PTQpO2Iuc3VidHJlZUZsYWdzPTA7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MTQ2ODAwNjYsXG5nPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYuc3VidHJlZUZsYWdzPTAsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLnN1YnRyZWVGbGFncz0wLGYuZGVsZXRpb25zPW51bGwsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztHKE0sTS5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1cbmEuc2libGluZ31udWxsIT09Zi50YWlsJiZCKCk+SGomJihiLmZsYWdzfD0xMjgsZD0hMCxFaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpfWVsc2V7aWYoIWQpaWYoYT1NaChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9MTI4LGQ9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLEVqKGYsITApLG51bGw9PT1mLnRhaWwmJlwiaGlkZGVuXCI9PT1mLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFJKXJldHVybiBTKGIpLG51bGx9ZWxzZSAyKkIoKS1mLnJlbmRlcmluZ1N0YXJ0VGltZT5IaiYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD0xMjgsZD0hMCxFaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpO2YuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9Zi5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxmLmxhc3Q9Zyl9aWYobnVsbCE9PWYudGFpbClyZXR1cm4gYj1mLnRhaWwsZi5yZW5kZXJpbmc9XG5iLGYudGFpbD1iLnNpYmxpbmcsZi5yZW5kZXJpbmdTdGFydFRpbWU9QigpLGIuc2libGluZz1udWxsLGM9TS5jdXJyZW50LEcoTSxkP2MmMXwyOmMmMSksYjtTKGIpO3JldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSWooKSxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT1kJiYoYi5mbGFnc3w9ODE5MiksZCYmMCE9PShiLm1vZGUmMSk/MCE9PShnaiYxMDczNzQxODI0KSYmKFMoYiksYi5zdWJ0cmVlRmxhZ3MmNiYmKGIuZmxhZ3N8PTgxOTIpKTpTKGIpLG51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtjYXNlIDI1OnJldHVybiBudWxsfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fVxuZnVuY3Rpb24gSmooYSxiKXt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxhPWIuZmxhZ3MsYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDM6cmV0dXJuIEpoKCksRShXZiksRShIKSxPaCgpLGE9Yi5mbGFncywwIT09KGEmNjU1MzYpJiYwPT09KGEmMTI4KT8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDU6cmV0dXJuIExoKGIpLG51bGw7Y2FzZSAxMzpFKE0pO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXtpZihudWxsPT09Yi5hbHRlcm5hdGUpdGhyb3cgRXJyb3IocCgzNDApKTtJZygpfWE9Yi5mbGFncztyZXR1cm4gYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDE5OnJldHVybiBFKE0pLG51bGw7Y2FzZSA0OnJldHVybiBKaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gUmcoYi50eXBlLl9jb250ZXh0KSxudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSWooKSxcbm51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX12YXIgS2o9ITEsVT0hMSxMaj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldCxWPW51bGw7ZnVuY3Rpb24gTWooYSxiKXt2YXIgYz1hLnJlZjtpZihudWxsIT09YylpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYyl0cnl7YyhudWxsKX1jYXRjaChkKXtXKGEsYixkKX1lbHNlIGMuY3VycmVudD1udWxsfWZ1bmN0aW9uIE5qKGEsYixjKXt0cnl7YygpfWNhdGNoKGQpe1coYSxiLGQpfX12YXIgT2o9ITE7XG5mdW5jdGlvbiBQaihhLGIpe0NmPWRkO2E9TWUoKTtpZihOZShhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYz17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7Yz0oYz1hLm93bmVyRG9jdW1lbnQpJiZjLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGQ9Yy5nZXRTZWxlY3Rpb24mJmMuZ2V0U2VsZWN0aW9uKCk7aWYoZCYmMCE9PWQucmFuZ2VDb3VudCl7Yz1kLmFuY2hvck5vZGU7dmFyIGU9ZC5hbmNob3JPZmZzZXQsZj1kLmZvY3VzTm9kZTtkPWQuZm9jdXNPZmZzZXQ7dHJ5e2Mubm9kZVR5cGUsZi5ub2RlVHlwZX1jYXRjaChGKXtjPW51bGw7YnJlYWsgYX12YXIgZz0wLGg9LTEsaz0tMSxsPTAsbT0wLHE9YSxyPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgeTs7KXtxIT09Y3x8MCE9PWUmJjMhPT1xLm5vZGVUeXBlfHwoaD1nK2UpO3EhPT1mfHwwIT09ZCYmMyE9PXEubm9kZVR5cGV8fChrPWcrZCk7Mz09PXEubm9kZVR5cGUmJihnKz1cbnEubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh5PXEuZmlyc3RDaGlsZCkpYnJlYWs7cj1xO3E9eX1mb3IoOzspe2lmKHE9PT1hKWJyZWFrIGI7cj09PWMmJisrbD09PWUmJihoPWcpO3I9PT1mJiYrK209PT1kJiYoaz1nKTtpZihudWxsIT09KHk9cS5uZXh0U2libGluZykpYnJlYWs7cT1yO3I9cS5wYXJlbnROb2RlfXE9eX1jPS0xPT09aHx8LTE9PT1rP251bGw6e3N0YXJ0OmgsZW5kOmt9fWVsc2UgYz1udWxsfWM9Y3x8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYz1udWxsO0RmPXtmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmN9O2RkPSExO2ZvcihWPWI7bnVsbCE9PVY7KWlmKGI9VixhPWIuY2hpbGQsMCE9PShiLnN1YnRyZWVGbGFncyYxMDI4KSYmbnVsbCE9PWEpYS5yZXR1cm49YixWPWE7ZWxzZSBmb3IoO251bGwhPT1WOyl7Yj1WO3RyeXt2YXIgbj1iLmFsdGVybmF0ZTtpZigwIT09KGIuZmxhZ3MmMTAyNCkpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmJyZWFrO1xuY2FzZSAxOmlmKG51bGwhPT1uKXt2YXIgdD1uLm1lbW9pemVkUHJvcHMsSj1uLm1lbW9pemVkU3RhdGUseD1iLnN0YXRlTm9kZSx3PXguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT90OkxnKGIudHlwZSx0KSxKKTt4Ll9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPXd9YnJlYWs7Y2FzZSAzOnZhciB1PWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87MT09PXUubm9kZVR5cGU/dS50ZXh0Q29udGVudD1cIlwiOjk9PT11Lm5vZGVUeXBlJiZ1LmRvY3VtZW50RWxlbWVudCYmdS5yZW1vdmVDaGlsZCh1LmRvY3VtZW50RWxlbWVudCk7YnJlYWs7Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fX1jYXRjaChGKXtXKGIsYi5yZXR1cm4sRil9YT1iLnNpYmxpbmc7aWYobnVsbCE9PWEpe2EucmV0dXJuPWIucmV0dXJuO1Y9YTticmVha31WPWIucmV0dXJufW49T2o7T2o9ITE7cmV0dXJuIG59XG5mdW5jdGlvbiBRaihhLGIsYyl7dmFyIGQ9Yi51cGRhdGVRdWV1ZTtkPW51bGwhPT1kP2QubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1kKXt2YXIgZT1kPWQubmV4dDtkb3tpZigoZS50YWcmYSk9PT1hKXt2YXIgZj1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1mJiZOaihiLGMsZil9ZT1lLm5leHR9d2hpbGUoZSE9PWQpfX1mdW5jdGlvbiBSaihhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmNyZWF0ZTtjLmRlc3Ryb3k9ZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19ZnVuY3Rpb24gU2ooYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmE9YzticmVhaztkZWZhdWx0OmE9Y31cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmIuY3VycmVudD1hfX1cbmZ1bmN0aW9uIFRqKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO251bGwhPT1iJiYoYS5hbHRlcm5hdGU9bnVsbCxUaihiKSk7YS5jaGlsZD1udWxsO2EuZGVsZXRpb25zPW51bGw7YS5zaWJsaW5nPW51bGw7NT09PWEudGFnJiYoYj1hLnN0YXRlTm9kZSxudWxsIT09YiYmKGRlbGV0ZSBiW09mXSxkZWxldGUgYltQZl0sZGVsZXRlIGJbb2ZdLGRlbGV0ZSBiW1FmXSxkZWxldGUgYltSZl0pKTthLnN0YXRlTm9kZT1udWxsO2EucmV0dXJuPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2Euc3RhdGVOb2RlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIFVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gVmooYSl7YTpmb3IoOzspe2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8VWooYS5yZXR1cm4pKXJldHVybiBudWxsO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjtmb3IoYT1hLnNpYmxpbmc7NSE9PWEudGFnJiY2IT09YS50YWcmJjE4IT09YS50YWc7KXtpZihhLmZsYWdzJjIpY29udGludWUgYTtpZihudWxsPT09YS5jaGlsZHx8ND09PWEudGFnKWNvbnRpbnVlIGE7ZWxzZSBhLmNoaWxkLnJldHVybj1hLGE9YS5jaGlsZH1pZighKGEuZmxhZ3MmMikpcmV0dXJuIGEuc3RhdGVOb2RlfX1cbmZ1bmN0aW9uIFdqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1CZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihXaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVdqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIFhqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoWGooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylYaihhLGIsYyksYT1hLnNpYmxpbmd9dmFyIFg9bnVsbCxZaj0hMTtmdW5jdGlvbiBaaihhLGIsYyl7Zm9yKGM9Yy5jaGlsZDtudWxsIT09YzspYWsoYSxiLGMpLGM9Yy5zaWJsaW5nfVxuZnVuY3Rpb24gYWsoYSxiLGMpe2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Db21taXRGaWJlclVubW91bnQpdHJ5e2xjLm9uQ29tbWl0RmliZXJVbm1vdW50KGtjLGMpfWNhdGNoKGgpe31zd2l0Y2goYy50YWcpe2Nhc2UgNTpVfHxNaihjLGIpO2Nhc2UgNjp2YXIgZD1YLGU9WWo7WD1udWxsO1pqKGEsYixjKTtYPWQ7WWo9ZTtudWxsIT09WCYmKFlqPyhhPVgsYz1jLnN0YXRlTm9kZSw4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYyk6YS5yZW1vdmVDaGlsZChjKSk6WC5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgMTg6bnVsbCE9PVgmJihZaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/S2YoYS5wYXJlbnROb2RlLGMpOjE9PT1hLm5vZGVUeXBlJiZLZihhLGMpLGJkKGEpKTpLZihYLGMuc3RhdGVOb2RlKSk7YnJlYWs7Y2FzZSA0OmQ9WDtlPVlqO1g9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaj0hMDtcblpqKGEsYixjKTtYPWQ7WWo9ZTticmVhaztjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6aWYoIVUmJihkPWMudXBkYXRlUXVldWUsbnVsbCE9PWQmJihkPWQubGFzdEVmZmVjdCxudWxsIT09ZCkpKXtlPWQ9ZC5uZXh0O2Rve3ZhciBmPWUsZz1mLmRlc3Ryb3k7Zj1mLnRhZzt2b2lkIDAhPT1nJiYoMCE9PShmJjIpP05qKGMsYixnKTowIT09KGYmNCkmJk5qKGMsYixnKSk7ZT1lLm5leHR9d2hpbGUoZSE9PWQpfVpqKGEsYixjKTticmVhaztjYXNlIDE6aWYoIVUmJihNaihjLGIpLGQ9Yy5zdGF0ZU5vZGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVubW91bnQpKXRyeXtkLnByb3BzPWMubWVtb2l6ZWRQcm9wcyxkLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZSxkLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goaCl7VyhjLGIsaCl9WmooYSxiLGMpO2JyZWFrO2Nhc2UgMjE6WmooYSxiLGMpO2JyZWFrO2Nhc2UgMjI6Yy5tb2RlJjE/KFU9KGQ9VSl8fG51bGwhPT1cbmMubWVtb2l6ZWRTdGF0ZSxaaihhLGIsYyksVT1kKTpaaihhLGIsYyk7YnJlYWs7ZGVmYXVsdDpaaihhLGIsYyl9fWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IExqKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9Y2suYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBkayhhLGIpe3ZhciBjPWIuZGVsZXRpb25zO2lmKG51bGwhPT1jKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO3RyeXt2YXIgZj1hLGc9YixoPWc7YTpmb3IoO251bGwhPT1oOyl7c3dpdGNoKGgudGFnKXtjYXNlIDU6WD1oLnN0YXRlTm9kZTtZaj0hMTticmVhayBhO2Nhc2UgMzpYPWguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWo9ITA7YnJlYWsgYTtjYXNlIDQ6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqPSEwO2JyZWFrIGF9aD1oLnJldHVybn1pZihudWxsPT09WCl0aHJvdyBFcnJvcihwKDE2MCkpO2FrKGYsZyxlKTtYPW51bGw7WWo9ITE7dmFyIGs9ZS5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLnJldHVybj1udWxsKTtlLnJldHVybj1udWxsfWNhdGNoKGwpe1coZSxiLGwpfX1pZihiLnN1YnRyZWVGbGFncyYxMjg1NClmb3IoYj1iLmNoaWxkO251bGwhPT1iOyllayhiLGEpLGI9Yi5zaWJsaW5nfVxuZnVuY3Rpb24gZWsoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZSxkPWEuZmxhZ3M7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6ZGsoYixhKTtmayhhKTtpZihkJjQpe3RyeXtRaigzLGEsYS5yZXR1cm4pLFJqKDMsYSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfXRyeXtRaig1LGEsYS5yZXR1cm4pfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAxOmRrKGIsYSk7ZmsoYSk7ZCY1MTImJm51bGwhPT1jJiZNaihjLGMucmV0dXJuKTticmVhaztjYXNlIDU6ZGsoYixhKTtmayhhKTtkJjUxMiYmbnVsbCE9PWMmJk1qKGMsYy5yZXR1cm4pO2lmKGEuZmxhZ3MmMzIpe3ZhciBlPWEuc3RhdGVOb2RlO3RyeXtvYihlLFwiXCIpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19aWYoZCY0JiYoZT1hLnN0YXRlTm9kZSxudWxsIT1lKSl7dmFyIGY9YS5tZW1vaXplZFByb3BzLGc9bnVsbCE9PWM/Yy5tZW1vaXplZFByb3BzOmYsaD1hLnR5cGUsaz1hLnVwZGF0ZVF1ZXVlO1xuYS51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1rKXRyeXtcImlucHV0XCI9PT1oJiZcInJhZGlvXCI9PT1mLnR5cGUmJm51bGwhPWYubmFtZSYmYWIoZSxmKTt2YihoLGcpO3ZhciBsPXZiKGgsZik7Zm9yKGc9MDtnPGsubGVuZ3RoO2crPTIpe3ZhciBtPWtbZ10scT1rW2crMV07XCJzdHlsZVwiPT09bT9zYihlLHEpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PW0/bmIoZSxxKTpcImNoaWxkcmVuXCI9PT1tP29iKGUscSk6dGEoZSxtLHEsbCl9c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOmJiKGUsZik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoZSxmKTticmVhaztjYXNlIFwic2VsZWN0XCI6dmFyIHI9ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlO2UuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWYubXVsdGlwbGU7dmFyIHk9Zi52YWx1ZTtudWxsIT15P2ZiKGUsISFmLm11bHRpcGxlLHksITEpOnIhPT0hIWYubXVsdGlwbGUmJihudWxsIT1mLmRlZmF1bHRWYWx1ZT9mYihlLCEhZi5tdWx0aXBsZSxcbmYuZGVmYXVsdFZhbHVlLCEwKTpmYihlLCEhZi5tdWx0aXBsZSxmLm11bHRpcGxlP1tdOlwiXCIsITEpKX1lW1BmXT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSA2OmRrKGIsYSk7ZmsoYSk7aWYoZCY0KXtpZihudWxsPT09YS5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjIpKTtlPWEuc3RhdGVOb2RlO2Y9YS5tZW1vaXplZFByb3BzO3RyeXtlLm5vZGVWYWx1ZT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAzOmRrKGIsYSk7ZmsoYSk7aWYoZCY0JiZudWxsIT09YyYmYy5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl0cnl7YmQoYi5jb250YWluZXJJbmZvKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9YnJlYWs7Y2FzZSA0OmRrKGIsYSk7ZmsoYSk7YnJlYWs7Y2FzZSAxMzpkayhiLGEpO2ZrKGEpO2U9YS5jaGlsZDtlLmZsYWdzJjgxOTImJihmPW51bGwhPT1lLm1lbW9pemVkU3RhdGUsZS5zdGF0ZU5vZGUuaXNIaWRkZW49ZiwhZnx8XG5udWxsIT09ZS5hbHRlcm5hdGUmJm51bGwhPT1lLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlfHwoZ2s9QigpKSk7ZCY0JiZiayhhKTticmVhaztjYXNlIDIyOm09bnVsbCE9PWMmJm51bGwhPT1jLm1lbW9pemVkU3RhdGU7YS5tb2RlJjE/KFU9KGw9VSl8fG0sZGsoYixhKSxVPWwpOmRrKGIsYSk7ZmsoYSk7aWYoZCY4MTkyKXtsPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7aWYoKGEuc3RhdGVOb2RlLmlzSGlkZGVuPWwpJiYhbSYmMCE9PShhLm1vZGUmMSkpZm9yKFY9YSxtPWEuY2hpbGQ7bnVsbCE9PW07KXtmb3IocT1WPW07bnVsbCE9PVY7KXtyPVY7eT1yLmNoaWxkO3N3aXRjaChyLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OlFqKDQscixyLnJldHVybik7YnJlYWs7Y2FzZSAxOk1qKHIsci5yZXR1cm4pO3ZhciBuPXIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxVbm1vdW50KXtkPXI7Yz1yLnJldHVybjt0cnl7Yj1kLG4ucHJvcHM9XG5iLm1lbW9pemVkUHJvcHMsbi5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsbi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKHQpe1coZCxjLHQpfX1icmVhaztjYXNlIDU6TWoocixyLnJldHVybik7YnJlYWs7Y2FzZSAyMjppZihudWxsIT09ci5tZW1vaXplZFN0YXRlKXtoayhxKTtjb250aW51ZX19bnVsbCE9PXk/KHkucmV0dXJuPXIsVj15KTpoayhxKX1tPW0uc2libGluZ31hOmZvcihtPW51bGwscT1hOzspe2lmKDU9PT1xLnRhZyl7aWYobnVsbD09PW0pe209cTt0cnl7ZT1xLnN0YXRlTm9kZSxsPyhmPWUuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihoPXEuc3RhdGVOb2RlLGs9cS5tZW1vaXplZFByb3BzLnN0eWxlLGc9dm9pZCAwIT09ayYmbnVsbCE9PWsmJmsuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2suZGlzcGxheTpudWxsLGguc3R5bGUuZGlzcGxheT1cbnJiKFwiZGlzcGxheVwiLGcpKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fX1lbHNlIGlmKDY9PT1xLnRhZyl7aWYobnVsbD09PW0pdHJ5e3Euc3RhdGVOb2RlLm5vZGVWYWx1ZT1sP1wiXCI6cS5tZW1vaXplZFByb3BzfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19ZWxzZSBpZigoMjIhPT1xLnRhZyYmMjMhPT1xLnRhZ3x8bnVsbD09PXEubWVtb2l6ZWRTdGF0ZXx8cT09PWEpJiZudWxsIT09cS5jaGlsZCl7cS5jaGlsZC5yZXR1cm49cTtxPXEuY2hpbGQ7Y29udGludWV9aWYocT09PWEpYnJlYWsgYTtmb3IoO251bGw9PT1xLnNpYmxpbmc7KXtpZihudWxsPT09cS5yZXR1cm58fHEucmV0dXJuPT09YSlicmVhayBhO209PT1xJiYobT1udWxsKTtxPXEucmV0dXJufW09PT1xJiYobT1udWxsKTtxLnNpYmxpbmcucmV0dXJuPXEucmV0dXJuO3E9cS5zaWJsaW5nfX1icmVhaztjYXNlIDE5OmRrKGIsYSk7ZmsoYSk7ZCY0JiZiayhhKTticmVhaztjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6ZGsoYixcbmEpLGZrKGEpfX1mdW5jdGlvbiBmayhhKXt2YXIgYj1hLmZsYWdzO2lmKGImMil7dHJ5e2E6e2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKFVqKGMpKXt2YXIgZD1jO2JyZWFrIGF9Yz1jLnJldHVybn10aHJvdyBFcnJvcihwKDE2MCkpO31zd2l0Y2goZC50YWcpe2Nhc2UgNTp2YXIgZT1kLnN0YXRlTm9kZTtkLmZsYWdzJjMyJiYob2IoZSxcIlwiKSxkLmZsYWdzJj0tMzMpO3ZhciBmPVZqKGEpO1hqKGEsZixlKTticmVhaztjYXNlIDM6Y2FzZSA0OnZhciBnPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saD1WaihhKTtXaihhLGgsZyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MSkpO319Y2F0Y2goayl7VyhhLGEucmV0dXJuLGspfWEuZmxhZ3MmPS0zfWImNDA5NiYmKGEuZmxhZ3MmPS00MDk3KX1mdW5jdGlvbiBpayhhLGIsYyl7Vj1hO2prKGEsYixjKX1cbmZ1bmN0aW9uIGprKGEsYixjKXtmb3IodmFyIGQ9MCE9PShhLm1vZGUmMSk7bnVsbCE9PVY7KXt2YXIgZT1WLGY9ZS5jaGlsZDtpZigyMj09PWUudGFnJiZkKXt2YXIgZz1udWxsIT09ZS5tZW1vaXplZFN0YXRlfHxLajtpZighZyl7dmFyIGg9ZS5hbHRlcm5hdGUsaz1udWxsIT09aCYmbnVsbCE9PWgubWVtb2l6ZWRTdGF0ZXx8VTtoPUtqO3ZhciBsPVU7S2o9ZztpZigoVT1rKSYmIWwpZm9yKFY9ZTtudWxsIT09VjspZz1WLGs9Zy5jaGlsZCwyMj09PWcudGFnJiZudWxsIT09Zy5tZW1vaXplZFN0YXRlP2trKGUpOm51bGwhPT1rPyhrLnJldHVybj1nLFY9ayk6a2soZSk7Zm9yKDtudWxsIT09ZjspVj1mLGprKGYsYixjKSxmPWYuc2libGluZztWPWU7S2o9aDtVPWx9bGsoYSxiLGMpfWVsc2UgMCE9PShlLnN1YnRyZWVGbGFncyY4NzcyKSYmbnVsbCE9PWY/KGYucmV0dXJuPWUsVj1mKTpsayhhLGIsYyl9fVxuZnVuY3Rpb24gbGsoYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXt2YXIgYz1iLmFsdGVybmF0ZTt0cnl7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpVfHxSaig1LGIpO2JyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihiLmZsYWdzJjQmJiFVKWlmKG51bGw9PT1jKWQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBlPWIuZWxlbWVudFR5cGU9PT1iLnR5cGU/Yy5tZW1vaXplZFByb3BzOkxnKGIudHlwZSxjLm1lbW9pemVkUHJvcHMpO2QuY29tcG9uZW50RGlkVXBkYXRlKGUsYy5tZW1vaXplZFN0YXRlLGQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBmPWIudXBkYXRlUXVldWU7bnVsbCE9PWYmJmloKGIsZixkKTticmVhaztjYXNlIDM6dmFyIGc9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09Zyl7Yz1udWxsO2lmKG51bGwhPT1iLmNoaWxkKXN3aXRjaChiLmNoaWxkLnRhZyl7Y2FzZSA1OmM9XG5iLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Yz1iLmNoaWxkLnN0YXRlTm9kZX1paChiLGcsYyl9YnJlYWs7Y2FzZSA1OnZhciBoPWIuc3RhdGVOb2RlO2lmKG51bGw9PT1jJiZiLmZsYWdzJjQpe2M9aDt2YXIgaz1iLm1lbW9pemVkUHJvcHM7c3dpdGNoKGIudHlwZSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjprLmF1dG9Gb2N1cyYmYy5mb2N1cygpO2JyZWFrO2Nhc2UgXCJpbWdcIjprLnNyYyYmKGMuc3JjPWsuc3JjKX19YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6aWYobnVsbD09PWIubWVtb2l6ZWRTdGF0ZSl7dmFyIGw9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWwpe3ZhciBtPWwubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09bSl7dmFyIHE9bS5kZWh5ZHJhdGVkO251bGwhPT1xJiZiZChxKX19fWJyZWFrO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIxOmNhc2UgMjI6Y2FzZSAyMzpjYXNlIDI1OmJyZWFrO1xuZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO31VfHxiLmZsYWdzJjUxMiYmU2ooYil9Y2F0Y2gocil7VyhiLGIucmV0dXJuLHIpfX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfWM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19ZnVuY3Rpb24gaGsoYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgYz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1Y9YzticmVha31WPWIucmV0dXJufX1cbmZ1bmN0aW9uIGtrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO3RyeXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dmFyIGM9Yi5yZXR1cm47dHJ5e1JqKDQsYil9Y2F0Y2goayl7VyhiLGMsayl9YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50KXt2YXIgZT1iLnJldHVybjt0cnl7ZC5jb21wb25lbnREaWRNb3VudCgpfWNhdGNoKGspe1coYixlLGspfX12YXIgZj1iLnJldHVybjt0cnl7U2ooYil9Y2F0Y2goayl7VyhiLGYsayl9YnJlYWs7Y2FzZSA1OnZhciBnPWIucmV0dXJuO3RyeXtTaihiKX1jYXRjaChrKXtXKGIsZyxrKX19fWNhdGNoKGspe1coYixiLnJldHVybixrKX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfXZhciBoPWIuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Yi5yZXR1cm47Vj1oO2JyZWFrfVY9Yi5yZXR1cm59fVxudmFyIG1rPU1hdGguY2VpbCxuaz11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLG9rPXVhLlJlYWN0Q3VycmVudE93bmVyLHBrPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEs9MCxSPW51bGwsWT1udWxsLFo9MCxnaj0wLGZqPVVmKDApLFQ9MCxxaz1udWxsLGhoPTAscms9MCxzaz0wLHRrPW51bGwsdWs9bnVsbCxnaz0wLEhqPUluZmluaXR5LHZrPW51bGwsUGk9ITEsUWk9bnVsbCxTaT1udWxsLHdrPSExLHhrPW51bGwseWs9MCx6az0wLEFrPW51bGwsQms9LTEsQ2s9MDtmdW5jdGlvbiBMKCl7cmV0dXJuIDAhPT0oSyY2KT9CKCk6LTEhPT1Caz9CazpCaz1CKCl9XG5mdW5jdGlvbiBsaChhKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gMTtpZigwIT09KEsmMikmJjAhPT1aKXJldHVybiBaJi1aO2lmKG51bGwhPT1LZy50cmFuc2l0aW9uKXJldHVybiAwPT09Q2smJihDaz15YygpKSxDazthPUM7aWYoMCE9PWEpcmV0dXJuIGE7YT13aW5kb3cuZXZlbnQ7YT12b2lkIDA9PT1hPzE2OmpkKGEudHlwZSk7cmV0dXJuIGF9ZnVuY3Rpb24gbWgoYSxiLGMsZCl7aWYoNTA8emspdGhyb3cgems9MCxBaz1udWxsLEVycm9yKHAoMTg1KSk7QWMoYSxjLGQpO2lmKDA9PT0oSyYyKXx8YSE9PVIpYT09PVImJigwPT09KEsmMikmJihya3w9YyksND09PVQmJkRrKGEsWikpLEVrKGEsZCksMT09PWMmJjA9PT1LJiYwPT09KGIubW9kZSYxKSYmKEhqPUIoKSs1MDAsZmcmJmpnKCkpfVxuZnVuY3Rpb24gRWsoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTm9kZTt3YyhhLGIpO3ZhciBkPXVjKGEsYT09PVI/WjowKTtpZigwPT09ZCludWxsIT09YyYmYmMoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MDtlbHNlIGlmKGI9ZCYtZCxhLmNhbGxiYWNrUHJpb3JpdHkhPT1iKXtudWxsIT1jJiZiYyhjKTtpZigxPT09YikwPT09YS50YWc/aWcoRmsuYmluZChudWxsLGEpKTpoZyhGay5iaW5kKG51bGwsYSkpLEpmKGZ1bmN0aW9uKCl7MD09PShLJjYpJiZqZygpfSksYz1udWxsO2Vsc2V7c3dpdGNoKERjKGQpKXtjYXNlIDE6Yz1mYzticmVhaztjYXNlIDQ6Yz1nYzticmVhaztjYXNlIDE2OmM9aGM7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6Yz1qYzticmVhaztkZWZhdWx0OmM9aGN9Yz1HayhjLEhrLmJpbmQobnVsbCxhKSl9YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBIayhhLGIpe0JrPS0xO0NrPTA7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7dmFyIGM9YS5jYWxsYmFja05vZGU7aWYoSWsoKSYmYS5jYWxsYmFja05vZGUhPT1jKXJldHVybiBudWxsO3ZhciBkPXVjKGEsYT09PVI/WjowKTtpZigwPT09ZClyZXR1cm4gbnVsbDtpZigwIT09KGQmMzApfHwwIT09KGQmYS5leHBpcmVkTGFuZXMpfHxiKWI9SmsoYSxkKTtlbHNle2I9ZDt2YXIgZT1LO0t8PTI7dmFyIGY9S2soKTtpZihSIT09YXx8WiE9PWIpdms9bnVsbCxIaj1CKCkrNTAwLExrKGEsYik7ZG8gdHJ5e01rKCk7YnJlYWt9Y2F0Y2goaCl7TmsoYSxoKX13aGlsZSgxKTtRZygpO25rLmN1cnJlbnQ9ZjtLPWU7bnVsbCE9PVk/Yj0wOihSPW51bGwsWj0wLGI9VCl9aWYoMCE9PWIpezI9PT1iJiYoZT14YyhhKSwwIT09ZSYmKGQ9ZSxiPU9rKGEsZSkpKTtpZigxPT09Yil0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxkKSxFayhhLEIoKSksYztpZig2PT09YilEayhhLGQpO1xuZWxzZXtlPWEuY3VycmVudC5hbHRlcm5hdGU7aWYoMD09PShkJjMwKSYmIVBrKGUpJiYoYj1KayhhLGQpLDI9PT1iJiYoZj14YyhhKSwwIT09ZiYmKGQ9ZixiPU9rKGEsZikpKSwxPT09YikpdGhyb3cgYz1xayxMayhhLDApLERrKGEsZCksRWsoYSxCKCkpLGM7YS5maW5pc2hlZFdvcms9ZTthLmZpbmlzaGVkTGFuZXM9ZDtzd2l0Y2goYil7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcihwKDM0NSkpO2Nhc2UgMjpRayhhLHVrLHZrKTticmVhaztjYXNlIDM6RGsoYSxkKTtpZigoZCYxMzAwMjM0MjQpPT09ZCYmKGI9Z2srNTAwLUIoKSwxMDxiKSl7aWYoMCE9PXVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmQpIT09ZCl7TCgpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9RmYoUWsuYmluZChudWxsLGEsdWssdmspLGIpO2JyZWFrfVFrKGEsdWssdmspO2JyZWFrO2Nhc2UgNDpEayhhLGQpO2lmKChkJjQxOTQyNDApPT09XG5kKWJyZWFrO2I9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8ZDspe3ZhciBnPTMxLW9jKGQpO2Y9MTw8ZztnPWJbZ107Zz5lJiYoZT1nKTtkJj1+Zn1kPWU7ZD1CKCktZDtkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKm1rKGQvMTk2MCkpLWQ7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPUZmKFFrLmJpbmQobnVsbCxhLHVrLHZrKSxkKTticmVha31RayhhLHVrLHZrKTticmVhaztjYXNlIDU6UWsoYSx1ayx2ayk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMyOSkpO319fUVrKGEsQigpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1jP0hrLmJpbmQobnVsbCxhKTpudWxsfVxuZnVuY3Rpb24gT2soYSxiKXt2YXIgYz10azthLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJihMayhhLGIpLmZsYWdzfD0yNTYpO2E9SmsoYSxiKTsyIT09YSYmKGI9dWssdWs9YyxudWxsIT09YiYmR2ooYikpO3JldHVybiBhfWZ1bmN0aW9uIEdqKGEpe251bGw9PT11az91az1hOnVrLnB1c2guYXBwbHkodWssYSl9XG5mdW5jdGlvbiBQayhhKXtmb3IodmFyIGI9YTs7KXtpZihiLmZsYWdzJjE2Mzg0KXt2YXIgYz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jJiYoYz1jLnN0b3JlcyxudWxsIT09YykpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF0sZj1lLmdldFNuYXBzaG90O2U9ZS52YWx1ZTt0cnl7aWYoIUhlKGYoKSxlKSlyZXR1cm4hMX1jYXRjaChnKXtyZXR1cm4hMX19fWM9Yi5jaGlsZDtpZihiLnN1YnRyZWVGbGFncyYxNjM4NCYmbnVsbCE9PWMpYy5yZXR1cm49YixiPWM7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4hMDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiEwfVxuZnVuY3Rpb24gRGsoYSxiKXtiJj1+c2s7YiY9fnJrO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtb2MoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fWZ1bmN0aW9uIEZrKGEpe2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO0lrKCk7dmFyIGI9dWMoYSwwKTtpZigwPT09KGImMSkpcmV0dXJuIEVrKGEsQigpKSxudWxsO3ZhciBjPUprKGEsYik7aWYoMCE9PWEudGFnJiYyPT09Yyl7dmFyIGQ9eGMoYSk7MCE9PWQmJihiPWQsYz1PayhhLGQpKX1pZigxPT09Yyl0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxiKSxFayhhLEIoKSksYztpZig2PT09Yyl0aHJvdyBFcnJvcihwKDM0NSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7UWsoYSx1ayx2ayk7RWsoYSxCKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gUmsoYSxiKXt2YXIgYz1LO0t8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Sz1jLDA9PT1LJiYoSGo9QigpKzUwMCxmZyYmamcoKSl9fWZ1bmN0aW9uIFNrKGEpe251bGwhPT14ayYmMD09PXhrLnRhZyYmMD09PShLJjYpJiZJaygpO3ZhciBiPUs7S3w9MTt2YXIgYz1way50cmFuc2l0aW9uLGQ9Qzt0cnl7aWYocGsudHJhbnNpdGlvbj1udWxsLEM9MSxhKXJldHVybiBhKCl9ZmluYWxseXtDPWQscGsudHJhbnNpdGlvbj1jLEs9YiwwPT09KEsmNikmJmpnKCl9fWZ1bmN0aW9uIElqKCl7Z2o9ZmouY3VycmVudDtFKGZqKX1cbmZ1bmN0aW9uIExrKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLEdmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7d2coZCk7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJiRmKCk7YnJlYWs7Y2FzZSAzOkpoKCk7RShXZik7RShIKTtPaCgpO2JyZWFrO2Nhc2UgNTpMaChkKTticmVhaztjYXNlIDQ6SmgoKTticmVhaztjYXNlIDEzOkUoTSk7YnJlYWs7Y2FzZSAxOTpFKE0pO2JyZWFrO2Nhc2UgMTA6UmcoZC50eXBlLl9jb250ZXh0KTticmVhaztjYXNlIDIyOmNhc2UgMjM6SWooKX1jPWMucmV0dXJufVI9YTtZPWE9d2goYS5jdXJyZW50LG51bGwpO1o9Z2o9YjtUPTA7cWs9bnVsbDtzaz1yaz1oaD0wO3VrPXRrPW51bGw7aWYobnVsbCE9PVdnKXtmb3IoYj1cbjA7YjxXZy5sZW5ndGg7YisrKWlmKGM9V2dbYl0sZD1jLmludGVybGVhdmVkLG51bGwhPT1kKXtjLmludGVybGVhdmVkPW51bGw7dmFyIGU9ZC5uZXh0LGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXt2YXIgZz1mLm5leHQ7Zi5uZXh0PWU7ZC5uZXh0PWd9Yy5wZW5kaW5nPWR9V2c9bnVsbH1yZXR1cm4gYX1cbmZ1bmN0aW9uIE5rKGEsYil7ZG97dmFyIGM9WTt0cnl7UWcoKTtQaC5jdXJyZW50PWFpO2lmKFNoKXtmb3IodmFyIGQ9Ti5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH1TaD0hMX1SaD0wO1A9Tz1OPW51bGw7VGg9ITE7VWg9MDtvay5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7VD0xO3FrPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9WjtoLmZsYWdzfD0zMjc2ODtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rLG09aCxxPW0udGFnO2lmKDA9PT0obS5tb2RlJjEpJiYoMD09PXF8fDExPT09cXx8MTU9PT1xKSl7dmFyIHI9bS5hbHRlcm5hdGU7cj8obS51cGRhdGVRdWV1ZT1yLnVwZGF0ZVF1ZXVlLG0ubWVtb2l6ZWRTdGF0ZT1yLm1lbW9pemVkU3RhdGUsXG5tLmxhbmVzPXIubGFuZXMpOihtLnVwZGF0ZVF1ZXVlPW51bGwsbS5tZW1vaXplZFN0YXRlPW51bGwpfXZhciB5PVZpKGcpO2lmKG51bGwhPT15KXt5LmZsYWdzJj0tMjU3O1dpKHksZyxoLGYsYik7eS5tb2RlJjEmJlRpKGYsbCxiKTtiPXk7az1sO3ZhciBuPWIudXBkYXRlUXVldWU7aWYobnVsbD09PW4pe3ZhciB0PW5ldyBTZXQ7dC5hZGQoayk7Yi51cGRhdGVRdWV1ZT10fWVsc2Ugbi5hZGQoayk7YnJlYWsgYX1lbHNle2lmKDA9PT0oYiYxKSl7VGkoZixsLGIpO3VqKCk7YnJlYWsgYX1rPUVycm9yKHAoNDI2KSl9fWVsc2UgaWYoSSYmaC5tb2RlJjEpe3ZhciBKPVZpKGcpO2lmKG51bGwhPT1KKXswPT09KEouZmxhZ3MmNjU1MzYpJiYoSi5mbGFnc3w9MjU2KTtXaShKLGcsaCxmLGIpO0pnKEtpKGssaCkpO2JyZWFrIGF9fWY9az1LaShrLGgpOzQhPT1UJiYoVD0yKTtudWxsPT09dGs/dGs9W2ZdOnRrLnB1c2goZik7Zj1nO2Rve3N3aXRjaChmLnRhZyl7Y2FzZSAzOmYuZmxhZ3N8PTY1NTM2O1xuYiY9LWI7Zi5sYW5lc3w9Yjt2YXIgeD1PaShmLGssYik7ZmgoZix4KTticmVhayBhO2Nhc2UgMTpoPWs7dmFyIHc9Zi50eXBlLHU9Zi5zdGF0ZU5vZGU7aWYoMD09PShmLmZsYWdzJjEyOCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT11JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1TaXx8IVNpLmhhcyh1KSkpKXtmLmZsYWdzfD02NTUzNjtiJj0tYjtmLmxhbmVzfD1iO3ZhciBGPVJpKGYsaCxiKTtmaChmLEYpO2JyZWFrIGF9fWY9Zi5yZXR1cm59d2hpbGUobnVsbCE9PWYpfVRrKGMpfWNhdGNoKG5hKXtiPW5hO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9ZnVuY3Rpb24gS2soKXt2YXIgYT1uay5jdXJyZW50O25rLmN1cnJlbnQ9YWk7cmV0dXJuIG51bGw9PT1hP2FpOmF9XG5mdW5jdGlvbiB1aigpe2lmKDA9PT1UfHwzPT09VHx8Mj09PVQpVD00O251bGw9PT1SfHwwPT09KGhoJjI2ODQzNTQ1NSkmJjA9PT0ocmsmMjY4NDM1NDU1KXx8RGsoUixaKX1mdW5jdGlvbiBKayhhLGIpe3ZhciBjPUs7S3w9Mjt2YXIgZD1LaygpO2lmKFIhPT1hfHxaIT09Yil2az1udWxsLExrKGEsYik7ZG8gdHJ5e1VrKCk7YnJlYWt9Y2F0Y2goZSl7TmsoYSxlKX13aGlsZSgxKTtRZygpO0s9Yztuay5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IocCgyNjEpKTtSPW51bGw7Wj0wO3JldHVybiBUfWZ1bmN0aW9uIFVrKCl7Zm9yKDtudWxsIT09WTspVmsoWSl9ZnVuY3Rpb24gTWsoKXtmb3IoO251bGwhPT1ZJiYhY2MoKTspVmsoWSl9ZnVuY3Rpb24gVmsoYSl7dmFyIGI9V2soYS5hbHRlcm5hdGUsYSxnaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1RrKGEpOlk9Yjtvay5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBUayhhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjMyNzY4KSl7aWYoYz1GaihjLGIsZ2opLG51bGwhPT1jKXtZPWM7cmV0dXJufX1lbHNle2M9SmooYyxiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MzI3Njc7WT1jO3JldHVybn1pZihudWxsIT09YSlhLmZsYWdzfD0zMjc2OCxhLnN1YnRyZWVGbGFncz0wLGEuZGVsZXRpb25zPW51bGw7ZWxzZXtUPTY7WT1udWxsO3JldHVybn19Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1UJiYoVD01KX1mdW5jdGlvbiBRayhhLGIsYyl7dmFyIGQ9QyxlPXBrLnRyYW5zaXRpb247dHJ5e3BrLnRyYW5zaXRpb249bnVsbCxDPTEsWGsoYSxiLGMsZCl9ZmluYWxseXtway50cmFuc2l0aW9uPWUsQz1kfXJldHVybiBudWxsfVxuZnVuY3Rpb24gWGsoYSxiLGMsZCl7ZG8gSWsoKTt3aGlsZShudWxsIT09eGspO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO2M9YS5maW5pc2hlZFdvcms7dmFyIGU9YS5maW5pc2hlZExhbmVzO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcihwKDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja1ByaW9yaXR5PTA7dmFyIGY9Yy5sYW5lc3xjLmNoaWxkTGFuZXM7QmMoYSxmKTthPT09UiYmKFk9Uj1udWxsLFo9MCk7MD09PShjLnN1YnRyZWVGbGFncyYyMDY0KSYmMD09PShjLmZsYWdzJjIwNjQpfHx3a3x8KHdrPSEwLEdrKGhjLGZ1bmN0aW9uKCl7SWsoKTtyZXR1cm4gbnVsbH0pKTtmPTAhPT0oYy5mbGFncyYxNTk5MCk7aWYoMCE9PShjLnN1YnRyZWVGbGFncyYxNTk5MCl8fGYpe2Y9cGsudHJhbnNpdGlvbjtway50cmFuc2l0aW9uPW51bGw7XG52YXIgZz1DO0M9MTt2YXIgaD1LO0t8PTQ7b2suY3VycmVudD1udWxsO1BqKGEsYyk7ZWsoYyxhKTtPZShEZik7ZGQ9ISFDZjtEZj1DZj1udWxsO2EuY3VycmVudD1jO2lrKGMsYSxlKTtkYygpO0s9aDtDPWc7cGsudHJhbnNpdGlvbj1mfWVsc2UgYS5jdXJyZW50PWM7d2smJih3az0hMSx4az1hLHlrPWUpO2Y9YS5wZW5kaW5nTGFuZXM7MD09PWYmJihTaT1udWxsKTttYyhjLnN0YXRlTm9kZSxkKTtFayhhLEIoKSk7aWYobnVsbCE9PWIpZm9yKGQ9YS5vblJlY292ZXJhYmxlRXJyb3IsYz0wO2M8Yi5sZW5ndGg7YysrKWU9YltjXSxkKGUudmFsdWUse2NvbXBvbmVudFN0YWNrOmUuc3RhY2ssZGlnZXN0OmUuZGlnZXN0fSk7aWYoUGkpdGhyb3cgUGk9ITEsYT1RaSxRaT1udWxsLGE7MCE9PSh5ayYxKSYmMCE9PWEudGFnJiZJaygpO2Y9YS5wZW5kaW5nTGFuZXM7MCE9PShmJjEpP2E9PT1Baz96aysrOih6az0wLEFrPWEpOnprPTA7amcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIElrKCl7aWYobnVsbCE9PXhrKXt2YXIgYT1EYyh5ayksYj1way50cmFuc2l0aW9uLGM9Qzt0cnl7cGsudHJhbnNpdGlvbj1udWxsO0M9MTY+YT8xNjphO2lmKG51bGw9PT14ayl2YXIgZD0hMTtlbHNle2E9eGs7eGs9bnVsbDt5az0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMzMSkpO3ZhciBlPUs7S3w9NDtmb3IoVj1hLmN1cnJlbnQ7bnVsbCE9PVY7KXt2YXIgZj1WLGc9Zi5jaGlsZDtpZigwIT09KFYuZmxhZ3MmMTYpKXt2YXIgaD1mLmRlbGV0aW9ucztpZihudWxsIT09aCl7Zm9yKHZhciBrPTA7azxoLmxlbmd0aDtrKyspe3ZhciBsPWhba107Zm9yKFY9bDtudWxsIT09Vjspe3ZhciBtPVY7c3dpdGNoKG0udGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlFqKDgsbSxmKX12YXIgcT1tLmNoaWxkO2lmKG51bGwhPT1xKXEucmV0dXJuPW0sVj1xO2Vsc2UgZm9yKDtudWxsIT09Vjspe209Vjt2YXIgcj1tLnNpYmxpbmcseT1tLnJldHVybjtUaihtKTtpZihtPT09XG5sKXtWPW51bGw7YnJlYWt9aWYobnVsbCE9PXIpe3IucmV0dXJuPXk7Vj1yO2JyZWFrfVY9eX19fXZhciBuPWYuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXt2YXIgdD1uLmNoaWxkO2lmKG51bGwhPT10KXtuLmNoaWxkPW51bGw7ZG97dmFyIEo9dC5zaWJsaW5nO3Quc2libGluZz1udWxsO3Q9Sn13aGlsZShudWxsIT09dCl9fVY9Zn19aWYoMCE9PShmLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PWcpZy5yZXR1cm49ZixWPWc7ZWxzZSBiOmZvcig7bnVsbCE9PVY7KXtmPVY7aWYoMCE9PShmLmZsYWdzJjIwNDgpKXN3aXRjaChmLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpRaig5LGYsZi5yZXR1cm4pfXZhciB4PWYuc2libGluZztpZihudWxsIT09eCl7eC5yZXR1cm49Zi5yZXR1cm47Vj14O2JyZWFrIGJ9Vj1mLnJldHVybn19dmFyIHc9YS5jdXJyZW50O2ZvcihWPXc7bnVsbCE9PVY7KXtnPVY7dmFyIHU9Zy5jaGlsZDtpZigwIT09KGcuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09XG51KXUucmV0dXJuPWcsVj11O2Vsc2UgYjpmb3IoZz13O251bGwhPT1WOyl7aD1WO2lmKDAhPT0oaC5mbGFncyYyMDQ4KSl0cnl7c3dpdGNoKGgudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlJqKDksaCl9fWNhdGNoKG5hKXtXKGgsaC5yZXR1cm4sbmEpfWlmKGg9PT1nKXtWPW51bGw7YnJlYWsgYn12YXIgRj1oLnNpYmxpbmc7aWYobnVsbCE9PUYpe0YucmV0dXJuPWgucmV0dXJuO1Y9RjticmVhayBifVY9aC5yZXR1cm59fUs9ZTtqZygpO2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Qb3N0Q29tbWl0RmliZXJSb290KXRyeXtsYy5vblBvc3RDb21taXRGaWJlclJvb3Qoa2MsYSl9Y2F0Y2gobmEpe31kPSEwfXJldHVybiBkfWZpbmFsbHl7Qz1jLHBrLnRyYW5zaXRpb249Yn19cmV0dXJuITF9ZnVuY3Rpb24gWWsoYSxiLGMpe2I9S2koYyxiKTtiPU9pKGEsYiwxKTthPWRoKGEsYiwxKTtiPUwoKTtudWxsIT09YSYmKEFjKGEsMSxiKSxFayhhLGIpKX1cbmZ1bmN0aW9uIFcoYSxiLGMpe2lmKDM9PT1hLnRhZylZayhhLGEsYyk7ZWxzZSBmb3IoO251bGwhPT1iOyl7aWYoMz09PWIudGFnKXtZayhiLGEsYyk7YnJlYWt9ZWxzZSBpZigxPT09Yi50YWcpe3ZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1TaXx8IVNpLmhhcyhkKSkpe2E9S2koYyxhKTthPVJpKGIsYSwxKTtiPWRoKGIsYSwxKTthPUwoKTtudWxsIT09YiYmKEFjKGIsMSxhKSxFayhiLGEpKTticmVha319Yj1iLnJldHVybn19XG5mdW5jdGlvbiBVaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9TCgpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztSPT09YSYmKFomYyk9PT1jJiYoND09PVR8fDM9PT1UJiYoWiYxMzAwMjM0MjQpPT09WiYmNTAwPkIoKS1naz9MayhhLDApOnNrfD1jKTtFayhhLGIpfWZ1bmN0aW9uIFprKGEsYil7MD09PWImJigwPT09KGEubW9kZSYxKT9iPTE6KGI9c2Msc2M8PD0xLDA9PT0oc2MmMTMwMDIzNDI0KSYmKHNjPTQxOTQzMDQpKSk7dmFyIGM9TCgpO2E9WmcoYSxiKTtudWxsIT09YSYmKEFjKGEsYixjKSxFayhhLGMpKX1mdW5jdGlvbiB2aihhKXt2YXIgYj1hLm1lbW9pemVkU3RhdGUsYz0wO251bGwhPT1iJiYoYz1iLnJldHJ5TGFuZSk7WmsoYSxjKX1cbmZ1bmN0aW9uIGNrKGEsYil7dmFyIGM9MDtzd2l0Y2goYS50YWcpe2Nhc2UgMTM6dmFyIGQ9YS5zdGF0ZU5vZGU7dmFyIGU9YS5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoYz1lLnJldHJ5TGFuZSk7YnJlYWs7Y2FzZSAxOTpkPWEuc3RhdGVOb2RlO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMTQpKTt9bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1prKGEsYyl9dmFyIFdrO1xuV2s9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxXZi5jdXJyZW50KVVnPSEwO2Vsc2V7aWYoMD09PShhLmxhbmVzJmMpJiYwPT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gVWc9ITEsemooYSxiLGMpO1VnPTAhPT0oYS5mbGFncyYxMzEwNzIpPyEwOiExfWVsc2UgVWc9ITEsSSYmMCE9PShiLmZsYWdzJjEwNDg1NzYpJiZ1ZyhiLG5nLGIuaW5kZXgpO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjp2YXIgZD1iLnR5cGU7amooYSxiKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPVlmKGIsSC5jdXJyZW50KTtUZyhiLGMpO2U9WGgobnVsbCxiLGQsYSxlLGMpO3ZhciBmPWJpKCk7Yi5mbGFnc3w9MTtcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Y/KGIudGFnPTEsYi5tZW1vaXplZFN0YXRlPW51bGwsYi51cGRhdGVRdWV1ZT1cbm51bGwsWmYoZCk/KGY9ITAsY2coYikpOmY9ITEsYi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbCxhaChiKSxlLnVwZGF0ZXI9bmgsYi5zdGF0ZU5vZGU9ZSxlLl9yZWFjdEludGVybmFscz1iLHJoKGIsZCxhLGMpLGI9a2oobnVsbCxiLGQsITAsZixjKSk6KGIudGFnPTAsSSYmZiYmdmcoYiksWWkobnVsbCxiLGUsYyksYj1iLmNoaWxkKTtyZXR1cm4gYjtjYXNlIDE2OmQ9Yi5lbGVtZW50VHlwZTthOntqaihhLGIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1kLl9pbml0O2Q9ZShkLl9wYXlsb2FkKTtiLnR5cGU9ZDtlPWIudGFnPSRrKGQpO2E9TGcoZCxhKTtzd2l0Y2goZSl7Y2FzZSAwOmI9ZGoobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTpiPWlqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WmkobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1haihudWxsLGIsZCxMZyhkLnR5cGUsYSksYyk7YnJlYWsgYX10aHJvdyBFcnJvcihwKDMwNixcbmQsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksZGooYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksaWooYSxiLGQsZSxjKTtjYXNlIDM6YTp7bGooYik7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzODcpKTtkPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFN0YXRlO2U9Zi5lbGVtZW50O2JoKGEsYik7Z2goYixkLG51bGwsYyk7dmFyIGc9Yi5tZW1vaXplZFN0YXRlO2Q9Zy5lbGVtZW50O2lmKGYuaXNEZWh5ZHJhdGVkKWlmKGY9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6ITEsY2FjaGU6Zy5jYWNoZSxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOmcucGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfSxiLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1cbmYsYi5tZW1vaXplZFN0YXRlPWYsYi5mbGFncyYyNTYpe2U9S2koRXJyb3IocCg0MjMpKSxiKTtiPW1qKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGlmKGQhPT1lKXtlPUtpKEVycm9yKHAoNDI0KSksYik7Yj1taihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBmb3IoeWc9TGYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSx4Zz1iLEk9ITAsemc9bnVsbCxjPUNoKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8NDA5NixjPWMuc2libGluZztlbHNle0lnKCk7aWYoZD09PWUpe2I9JGkoYSxiLGMpO2JyZWFrIGF9WWkoYSxiLGQsYyl9Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gS2goYiksbnVsbD09PWEmJkVnKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sRWYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJkVmKGQsZikmJihiLmZsYWdzfD0zMiksXG5oaihhLGIpLFlpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmRWcoYiksbnVsbDtjYXNlIDEzOnJldHVybiBwaihhLGIsYyk7Y2FzZSA0OnJldHVybiBJaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1CaChiLG51bGwsZCxjKTpZaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksWmkoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFByb3BzO1xuZz1lLnZhbHVlO0coTWcsZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZztpZihudWxsIT09ZilpZihIZShmLnZhbHVlLGcpKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIVdmLmN1cnJlbnQpe2I9JGkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGY9Yi5jaGlsZCxudWxsIT09ZiYmKGYucmV0dXJuPWIpO251bGwhPT1mOyl7dmFyIGg9Zi5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWgpe2c9Zi5jaGlsZDtmb3IodmFyIGs9aC5maXJzdENvbnRleHQ7bnVsbCE9PWs7KXtpZihrLmNvbnRleHQ9PT1kKXtpZigxPT09Zi50YWcpe2s9Y2goLTEsYyYtYyk7ay50YWc9Mjt2YXIgbD1mLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1sKXtsPWwuc2hhcmVkO3ZhciBtPWwucGVuZGluZztudWxsPT09bT9rLm5leHQ9azooay5uZXh0PW0ubmV4dCxtLm5leHQ9ayk7bC5wZW5kaW5nPWt9fWYubGFuZXN8PWM7az1mLmFsdGVybmF0ZTtudWxsIT09ayYmKGsubGFuZXN8PWMpO1NnKGYucmV0dXJuLFxuYyxiKTtoLmxhbmVzfD1jO2JyZWFrfWs9ay5uZXh0fX1lbHNlIGlmKDEwPT09Zi50YWcpZz1mLnR5cGU9PT1iLnR5cGU/bnVsbDpmLmNoaWxkO2Vsc2UgaWYoMTg9PT1mLnRhZyl7Zz1mLnJldHVybjtpZihudWxsPT09Zyl0aHJvdyBFcnJvcihwKDM0MSkpO2cubGFuZXN8PWM7aD1nLmFsdGVybmF0ZTtudWxsIT09aCYmKGgubGFuZXN8PWMpO1NnKGcsYyxiKTtnPWYuc2libGluZ31lbHNlIGc9Zi5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1mO2Vsc2UgZm9yKGc9ZjtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9Zj1nLnNpYmxpbmc7aWYobnVsbCE9PWYpe2YucmV0dXJuPWcucmV0dXJuO2c9ZjticmVha31nPWcucmV0dXJufWY9Z31ZaShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxkPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFRnKGIsYyksZT1WZyhlKSxkPWQoZSksYi5mbGFnc3w9MSxZaShhLGIsZCxjKSxcbmIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZD1iLnR5cGUsZT1MZyhkLGIucGVuZGluZ1Byb3BzKSxlPUxnKGQudHlwZSxlKSxhaihhLGIsZCxlLGMpO2Nhc2UgMTU6cmV0dXJuIGNqKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxqaihhLGIpLGIudGFnPTEsWmYoZCk/KGE9ITAsY2coYikpOmE9ITEsVGcoYixjKSxwaChiLGQsZSkscmgoYixkLGUsYyksa2oobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiB5aihhLGIsYyk7Y2FzZSAyMjpyZXR1cm4gZWooYSxiLGMpfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fTtmdW5jdGlvbiBHayhhLGIpe3JldHVybiBhYyhhLGIpfVxuZnVuY3Rpb24gYWwoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLnN1YnRyZWVGbGFncz10aGlzLmZsYWdzPTA7dGhpcy5kZWxldGlvbnM9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gQmcoYSxiLGMsZCl7cmV0dXJuIG5ldyBhbChhLGIsYyxkKX1mdW5jdGlvbiBiaihhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gJGsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGJqKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1EYSlyZXR1cm4gMTE7aWYoYT09PUdhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIHdoKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9QmcoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5zdWJ0cmVlRmxhZ3M9MCxjLmRlbGV0aW9ucz1udWxsKTtjLmZsYWdzPWEuZmxhZ3MmMTQ2ODAwNjQ7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIHloKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSliaihhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm4gQWgoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSB6YTpnPTg7ZXw9ODticmVhaztjYXNlIEFhOnJldHVybiBhPUJnKDEyLGMsYixlfDIpLGEuZWxlbWVudFR5cGU9QWEsYS5sYW5lcz1mLGE7Y2FzZSBFYTpyZXR1cm4gYT1CZygxMyxjLGIsZSksYS5lbGVtZW50VHlwZT1FYSxhLmxhbmVzPWYsYTtjYXNlIEZhOnJldHVybiBhPUJnKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUZhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHFqKGMsZSxmLGIpO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBCYTpnPTEwO2JyZWFrIGE7Y2FzZSBDYTpnPTk7YnJlYWsgYTtjYXNlIERhOmc9MTE7XG5icmVhayBhO2Nhc2UgR2E6Zz0xNDticmVhayBhO2Nhc2UgSGE6Zz0xNjtkPW51bGw7YnJlYWsgYX10aHJvdyBFcnJvcihwKDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPUJnKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gQWgoYSxiLGMsZCl7YT1CZyg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gcWooYSxiLGMsZCl7YT1CZygyMixhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7YS5zdGF0ZU5vZGU9e2lzSGlkZGVuOiExfTtyZXR1cm4gYX1mdW5jdGlvbiB4aChhLGIsYyl7YT1CZyg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiB6aChhLGIsYyl7Yj1CZyg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGJsKGEsYixjLGQsZSl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5jYWxsYmFja05vZGU9dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9emMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9emMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9emMoMCk7dGhpcy5pZGVudGlmaWVyUHJlZml4PWQ7dGhpcy5vblJlY292ZXJhYmxlRXJyb3I9ZTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9XG5udWxsfWZ1bmN0aW9uIGNsKGEsYixjLGQsZSxmLGcsaCxrKXthPW5ldyBibChhLGIsYyxoLGspOzE9PT1iPyhiPTEsITA9PT1mJiYoYnw9OCkpOmI9MDtmPUJnKDMsbnVsbCxudWxsLGIpO2EuY3VycmVudD1mO2Yuc3RhdGVOb2RlPWE7Zi5tZW1vaXplZFN0YXRlPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOmMsY2FjaGU6bnVsbCx0cmFuc2l0aW9uczpudWxsLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6bnVsbH07YWgoZik7cmV0dXJuIGF9ZnVuY3Rpb24gZGwoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp3YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGVsKGEpe2lmKCFhKXJldHVybiBWZjthPWEuX3JlYWN0SW50ZXJuYWxzO2E6e2lmKFZiKGEpIT09YXx8MSE9PWEudGFnKXRocm93IEVycm9yKHAoMTcwKSk7dmFyIGI9YTtkb3tzd2l0Y2goYi50YWcpe2Nhc2UgMzpiPWIuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYTtjYXNlIDE6aWYoWmYoYi50eXBlKSl7Yj1iLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBhfX1iPWIucmV0dXJufXdoaWxlKG51bGwhPT1iKTt0aHJvdyBFcnJvcihwKDE3MSkpO31pZigxPT09YS50YWcpe3ZhciBjPWEudHlwZTtpZihaZihjKSlyZXR1cm4gYmcoYSxjLGIpfXJldHVybiBifVxuZnVuY3Rpb24gZmwoYSxiLGMsZCxlLGYsZyxoLGspe2E9Y2woYyxkLCEwLGEsZSxmLGcsaCxrKTthLmNvbnRleHQ9ZWwobnVsbCk7Yz1hLmN1cnJlbnQ7ZD1MKCk7ZT1saChjKTtmPWNoKGQsZSk7Zi5jYWxsYmFjaz12b2lkIDAhPT1iJiZudWxsIT09Yj9iOm51bGw7ZGgoYyxmLGUpO2EuY3VycmVudC5sYW5lcz1lO0FjKGEsZSxkKTtFayhhLGQpO3JldHVybiBhfWZ1bmN0aW9uIGdsKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUwoKSxnPWxoKGUpO2M9ZWwoYyk7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1jaChmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTthPWRoKGUsYixnKTtudWxsIT09YSYmKG1oKGEsZSxnLGYpLGVoKGEsZSxnKSk7cmV0dXJuIGd9XG5mdW5jdGlvbiBobChhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGlsKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBqbChhLGIpe2lsKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZpbChhLGIpfWZ1bmN0aW9uIGtsKCl7cmV0dXJuIG51bGx9dmFyIGxsPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXBvcnRFcnJvcj9yZXBvcnRFcnJvcjpmdW5jdGlvbihhKXtjb25zb2xlLmVycm9yKGEpfTtmdW5jdGlvbiBtbChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm5sLnByb3RvdHlwZS5yZW5kZXI9bWwucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCg0MDkpKTtnbChhLGIsbnVsbCxudWxsKX07bmwucHJvdG90eXBlLnVubW91bnQ9bWwucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbCE9PWEpe3RoaXMuX2ludGVybmFsUm9vdD1udWxsO3ZhciBiPWEuY29udGFpbmVySW5mbztTayhmdW5jdGlvbigpe2dsKG51bGwsYSxudWxsLG51bGwpfSk7Ylt1Zl09bnVsbH19O2Z1bmN0aW9uIG5sKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubmwucHJvdG90eXBlLnVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uPWZ1bmN0aW9uKGEpe2lmKGEpe3ZhciBiPUhjKCk7YT17YmxvY2tlZE9uOm51bGwsdGFyZ2V0OmEscHJpb3JpdHk6Yn07Zm9yKHZhciBjPTA7YzxRYy5sZW5ndGgmJjAhPT1iJiZiPFFjW2NdLnByaW9yaXR5O2MrKyk7UWMuc3BsaWNlKGMsMCxhKTswPT09YyYmVmMoYSl9fTtmdW5jdGlvbiBvbChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSl9ZnVuY3Rpb24gcGwoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIHFsKCl7fVxuZnVuY3Rpb24gcmwoYSxiLGMsZCxlKXtpZihlKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGY9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9aGwoZyk7Zi5jYWxsKGEpfX12YXIgZz1mbChiLGQsYSwwLG51bGwsITEsITEsXCJcIixxbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWc7YVt1Zl09Zy5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtTaygpO3JldHVybiBnfWZvcig7ZT1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChlKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGg9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9aGwoayk7aC5jYWxsKGEpfX12YXIgaz1jbChhLDAsITEsbnVsbCxudWxsLCExLCExLFwiXCIscWwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1rO2FbdWZdPWsuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7U2soZnVuY3Rpb24oKXtnbChiLGssYyxkKX0pO3JldHVybiBrfVxuZnVuY3Rpb24gc2woYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9ZjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9aGwoZyk7aC5jYWxsKGEpfX1nbChiLGcsYSxlKX1lbHNlIGc9cmwoYyxiLGEsZSxkKTtyZXR1cm4gaGwoZyl9RWM9ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDM6dmFyIGI9YS5zdGF0ZU5vZGU7aWYoYi5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXt2YXIgYz10YyhiLnBlbmRpbmdMYW5lcyk7MCE9PWMmJihDYyhiLGN8MSksRWsoYixCKCkpLDA9PT0oSyY2KSYmKEhqPUIoKSs1MDAsamcoKSkpfWJyZWFrO2Nhc2UgMTM6U2soZnVuY3Rpb24oKXt2YXIgYj1aZyhhLDEpO2lmKG51bGwhPT1iKXt2YXIgYz1MKCk7bWgoYixhLDEsYyl9fSksamwoYSwxKX19O1xuRmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9WmcoYSwxMzQyMTc3MjgpO2lmKG51bGwhPT1iKXt2YXIgYz1MKCk7bWgoYixhLDEzNDIxNzcyOCxjKX1qbChhLDEzNDIxNzcyOCl9fTtHYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1saChhKSxjPVpnKGEsYik7aWYobnVsbCE9PWMpe3ZhciBkPUwoKTttaChjLGEsYixkKX1qbChhLGIpfX07SGM9ZnVuY3Rpb24oKXtyZXR1cm4gQ307SWM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1DO3RyeXtyZXR1cm4gQz1hLGIoKX1maW5hbGx5e0M9Y319O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpiYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IocCg5MCkpO1dhKGQpO2JiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1SaztIYj1TaztcbnZhciB0bD17dXNpbmdDbGllbnRFbnRyeVBvaW50OiExLEV2ZW50czpbQ2IsdWUsRGIsRWIsRmIsUmtdfSx1bD17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6V2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxOC4yLjBcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHZsPXtidW5kbGVUeXBlOnVsLmJ1bmRsZVR5cGUsdmVyc2lvbjp1bC52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6dWwucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp1bC5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0RXJyb3JIYW5kbGVyOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjp1YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9WmIoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnVsLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbmtsLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGwscmVjb25jaWxlclZlcnNpb246XCIxOC4yLjAtbmV4dC05ZTNiNzcyYjgtMjAyMjA2MDhcIn07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB3bD1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXdsLmlzRGlzYWJsZWQmJndsLnN1cHBvcnRzRmliZXIpdHJ5e2tjPXdsLmluamVjdCh2bCksbGM9d2x9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXRsO1xuZXhwb3J0cy5jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighb2woYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gZGwoYSxiLG51bGwsYyl9O2V4cG9ydHMuY3JlYXRlUm9vdD1mdW5jdGlvbihhLGIpe2lmKCFvbChhKSl0aHJvdyBFcnJvcihwKDI5OSkpO3ZhciBjPSExLGQ9XCJcIixlPWxsO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoITA9PT1iLnVuc3RhYmxlX3N0cmljdE1vZGUmJihjPSEwKSx2b2lkIDAhPT1iLmlkZW50aWZpZXJQcmVmaXgmJihkPWIuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yi5vblJlY292ZXJhYmxlRXJyb3ImJihlPWIub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1jbChhLDEsITEsbnVsbCxudWxsLGMsITEsZCxlKTthW3VmXT1iLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO3JldHVybiBuZXcgbWwoYil9O1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcihwKDE4OCkpO2E9T2JqZWN0LmtleXMoYSkuam9pbihcIixcIik7dGhyb3cgRXJyb3IocCgyNjgsYSkpO31hPVpiKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSl7cmV0dXJuIFNrKGEpfTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFwbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBzbChudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLmh5ZHJhdGVSb290PWZ1bmN0aW9uKGEsYixjKXtpZighb2woYSkpdGhyb3cgRXJyb3IocCg0MDUpKTt2YXIgZD1udWxsIT1jJiZjLmh5ZHJhdGVkU291cmNlc3x8bnVsbCxlPSExLGY9XCJcIixnPWxsO251bGwhPT1jJiZ2b2lkIDAhPT1jJiYoITA9PT1jLnVuc3RhYmxlX3N0cmljdE1vZGUmJihlPSEwKSx2b2lkIDAhPT1jLmlkZW50aWZpZXJQcmVmaXgmJihmPWMuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yy5vblJlY292ZXJhYmxlRXJyb3ImJihnPWMub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1mbChiLG51bGwsYSwxLG51bGwhPWM/YzpudWxsLGUsITEsZixnKTthW3VmXT1iLmN1cnJlbnQ7c2YoYSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWM9ZFthXSxlPWMuX2dldFZlcnNpb24sZT1lKGMuX3NvdXJjZSksbnVsbD09Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2IubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYyxlXTpiLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChjLFxuZSk7cmV0dXJuIG5ldyBubChiKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFwbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBzbChudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFwbChhKSl0aHJvdyBFcnJvcihwKDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oU2soZnVuY3Rpb24oKXtzbChudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbdWZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1SaztcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIXBsKGMpKXRocm93IEVycm9yKHAoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IocCgzOCkpO3JldHVybiBzbChhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMi4wLW5leHQtOWUzYjc3MmI4LTIwMjIwNjA4XCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBtID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBtLmNyZWF0ZVJvb3Q7XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBtLmh5ZHJhdGVSb290O1xufSBlbHNlIHtcbiAgdmFyIGkgPSBtLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBmdW5jdGlvbihjLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5jcmVhdGVSb290KGMsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIGgsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmh5ZHJhdGVSb290KGMsIGgsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxuPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikscD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIikscT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIikscj1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksdD1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksdT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSx2PVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSx3PVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSx4PVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHk9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksej1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eiYmYVt6XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxudmFyIEI9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEM9T2JqZWN0LmFzc2lnbixEPXt9O2Z1bmN0aW9uIEUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn1FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O1xuRS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKFwic2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuXCIpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7QyhILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPUFycmF5LmlzQXJyYXksSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2N1cnJlbnQ6bnVsbH0sTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZSl7dmFyIGQsYz17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGQgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilKLmNhbGwoYixkKSYmIUwuaGFzT3duUHJvcGVydHkoZCkmJihjW2RdPWJbZF0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZyljLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2MuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZCBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09Y1tkXSYmKGNbZF09Z1tkXSk7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmMsX293bmVyOksuY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1sfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nO2Z1bmN0aW9uIFEoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBSKGEsYixlLGQsYyl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGw6Y2FzZSBuOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxjPWMoaCksYT1cIlwiPT09ZD9cIi5cIitRKGgsMCk6ZCxJKGMpPyhlPVwiXCIsbnVsbCE9YSYmKGU9YS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpLFIoYyxiLGUsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1jJiYoTyhjKSYmKGM9TihjLGUrKCFjLmtleXx8aCYmaC5rZXk9PT1jLmtleT9cIlwiOihcIlwiK2Mua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goYykpLDE7aD0wO2Q9XCJcIj09PWQ/XCIuXCI6ZCtcIjpcIjtpZihJKGEpKWZvcih2YXIgZz0wO2c8YS5sZW5ndGg7ZysrKXtrPVxuYVtnXTt2YXIgZj1kK1EoayxnKTtoKz1SKGssYixlLGYsYyl9ZWxzZSBpZihmPUEoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWQrUShrLGcrKyksaCs9UihrLGIsZSxmLGMpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1TdHJpbmcoYSksRXJyb3IoXCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6IFwiKyhcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKStcIikuIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgaW5zdGVhZC5cIik7cmV0dXJuIGh9XG5mdW5jdGlvbiBTKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBkPVtdLGM9MDtSKGEsZCxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChlLGEsYysrKX0pO3JldHVybiBkfWZ1bmN0aW9uIFQoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWJ9LGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1ifSk7LTE9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MCxhLl9yZXN1bHQ9Yil9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0LmRlZmF1bHQ7dGhyb3cgYS5fcmVzdWx0O31cbnZhciBVPXtjdXJyZW50Om51bGx9LFY9e3RyYW5zaXRpb246bnVsbH0sVz17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpVLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOlYsUmVhY3RDdXJyZW50T3duZXI6S307ZXhwb3J0cy5DaGlsZHJlbj17bWFwOlMsZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7UyhhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGUpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1MoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBTKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoXCJSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC5cIik7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1FO2V4cG9ydHMuRnJhZ21lbnQ9cDtcbmV4cG9ydHMuUHJvZmlsZXI9cjtleHBvcnRzLlB1cmVDb21wb25lbnQ9RztleHBvcnRzLlN0cmljdE1vZGU9cTtleHBvcnRzLlN1c3BlbnNlPXc7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1XO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKFwiUmVhY3QuY2xvbmVFbGVtZW50KC4uLik6IFRoZSBhcmd1bWVudCBtdXN0IGJlIGEgUmVhY3QgZWxlbWVudCwgYnV0IHlvdSBwYXNzZWQgXCIrYStcIi5cIik7dmFyIGQ9Qyh7fSxhLnByb3BzKSxjPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1LLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoYz1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUouY2FsbChiLGYpJiYhTC5oYXNPd25Qcm9wZXJ0eShmKSYmKGRbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7XG5mb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpjLHJlZjprLHByb3BzOmQsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSl7YT17JCR0eXBlb2Y6dSxfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGwsX2RlZmF1bHRWYWx1ZTpudWxsLF9nbG9iYWxOYW1lOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnQsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtcbmV4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztleHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnksX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpUfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOngsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnN0YXJ0VHJhbnNpdGlvbj1mdW5jdGlvbihhKXt2YXIgYj1WLnRyYW5zaXRpb247Vi50cmFuc2l0aW9uPXt9O3RyeXthKCl9ZmluYWxseXtWLnRyYW5zaXRpb249Yn19O2V4cG9ydHMudW5zdGFibGVfYWN0PWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoXCJhY3QoLi4uKSBpcyBub3Qgc3VwcG9ydGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzIG9mIFJlYWN0LlwiKTt9O1xuZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlQ29udGV4dChhKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZURlZmVycmVkVmFsdWU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VEZWZlcnJlZFZhbHVlKGEpfTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZUlkKCl9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixlKX07XG5leHBvcnRzLnVzZUluc2VydGlvbkVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlSW5zZXJ0aW9uRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWR1Y2VyKGEsYixlKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VTdGF0ZShhKX07ZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VTeW5jRXh0ZXJuYWxTdG9yZShhLGIsZSl9O1xuZXhwb3J0cy51c2VUcmFuc2l0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VUcmFuc2l0aW9uKCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjIuMFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO2Z1bmN0aW9uIGYoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzA8Yzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKDA8ZyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gaChhKXtyZXR1cm4gMD09PWEubGVuZ3RoP251bGw6YVswXX1mdW5jdGlvbiBrKGEpe2lmKDA9PT1hLmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgYj1hWzBdLGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aCx3PWU+Pj4xO2Q8dzspe3ZhciBtPTIqKGQrMSktMSxDPWFbbV0sbj1tKzEseD1hW25dO2lmKDA+ZyhDLGMpKW48ZSYmMD5nKHgsQyk/KGFbZF09eCxhW25dPWMsZD1uKTooYVtkXT1DLGFbbV09YyxkPW0pO2Vsc2UgaWYobjxlJiYwPmcoeCxjKSlhW2RdPXgsYVtuXT1jLGQ9bjtlbHNlIGJyZWFrIGF9fXJldHVybiBifVxuZnVuY3Rpb24gZyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH1pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19dmFyIHI9W10sdD1bXSx1PTEsdj1udWxsLHk9Myx6PSExLEE9ITEsQj0hMSxEPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bnVsbCxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0Om51bGwsRj1cInVuZGVmaW5lZFwiIT09dHlwZW9mIHNldEltbWVkaWF0ZT9zZXRJbW1lZGlhdGU6bnVsbDtcblwidW5kZWZpbmVkXCIhPT10eXBlb2YgbmF2aWdhdG9yJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZyYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcmJm5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nLmJpbmQobmF2aWdhdG9yLnNjaGVkdWxpbmcpO2Z1bmN0aW9uIEcoYSl7Zm9yKHZhciBiPWgodCk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylrKHQpO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpayh0KSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLGYocixiKTtlbHNlIGJyZWFrO2I9aCh0KX19ZnVuY3Rpb24gSChhKXtCPSExO0coYSk7aWYoIUEpaWYobnVsbCE9PWgocikpQT0hMCxJKEopO2Vsc2V7dmFyIGI9aCh0KTtudWxsIT09YiYmSyhILGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIEooYSxiKXtBPSExO0ImJihCPSExLEUoTCksTD0tMSk7ej0hMDt2YXIgYz15O3RyeXtHKGIpO2Zvcih2PWgocik7bnVsbCE9PXYmJighKHYuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFNKCkpOyl7dmFyIGQ9di5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7di5jYWxsYmFjaz1udWxsO3k9di5wcmlvcml0eUxldmVsO3ZhciBlPWQodi5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP3YuY2FsbGJhY2s9ZTp2PT09aChyKSYmayhyKTtHKGIpfWVsc2UgayhyKTt2PWgocil9aWYobnVsbCE9PXYpdmFyIHc9ITA7ZWxzZXt2YXIgbT1oKHQpO251bGwhPT1tJiZLKEgsbS5zdGFydFRpbWUtYik7dz0hMX1yZXR1cm4gd31maW5hbGx5e3Y9bnVsbCx5PWMsej0hMX19dmFyIE49ITEsTz1udWxsLEw9LTEsUD01LFE9LTE7XG5mdW5jdGlvbiBNKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCktUTxQPyExOiEwfWZ1bmN0aW9uIFIoKXtpZihudWxsIT09Tyl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtRPWE7dmFyIGI9ITA7dHJ5e2I9TyghMCxhKX1maW5hbGx5e2I/UygpOihOPSExLE89bnVsbCl9fWVsc2UgTj0hMX12YXIgUztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgRilTPWZ1bmN0aW9uKCl7RihSKX07ZWxzZSBpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgVD1uZXcgTWVzc2FnZUNoYW5uZWwsVT1ULnBvcnQyO1QucG9ydDEub25tZXNzYWdlPVI7Uz1mdW5jdGlvbigpe1UucG9zdE1lc3NhZ2UobnVsbCl9fWVsc2UgUz1mdW5jdGlvbigpe0QoUiwwKX07ZnVuY3Rpb24gSShhKXtPPWE7Tnx8KE49ITAsUygpKX1mdW5jdGlvbiBLKGEsYil7TD1EKGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9XG5leHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7QXx8enx8KEE9ITAsSShKKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6UD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiB5fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGgocil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goeSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9eX12YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e3k9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O1xuZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9eTt5PWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXt5PWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6dSsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsZih0LGEpLG51bGw9PT1oKHIpJiZhPT09aCh0KSYmKEI/KEUoTCksTD0tMSk6Qj0hMCxLKEgsYy1kKSkpOihhLnNvcnRJbmRleD1lLGYocixhKSxBfHx6fHwoQT0hMCxJKEopKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1NO2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPXk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e3k9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJ2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgPyAob2JqKSA9PiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpIDogKG9iaikgPT4gKG9iai5fX3Byb3RvX18pO1xudmFyIGxlYWZQcm90b3R5cGVzO1xuLy8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4vLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbi8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuLy8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4vLyBtb2RlICYgMTY6IHJldHVybiB2YWx1ZSB3aGVuIGl0J3MgUHJvbWlzZS1saWtlXG4vLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuXHRpZihtb2RlICYgMSkgdmFsdWUgPSB0aGlzKHZhbHVlKTtcblx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcblx0aWYodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSkge1xuXHRcdGlmKChtb2RlICYgNCkgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuXHRcdGlmKChtb2RlICYgMTYpICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdmFsdWU7XG5cdH1cblx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcblx0dmFyIGRlZiA9IHt9O1xuXHRsZWFmUHJvdG90eXBlcyA9IGxlYWZQcm90b3R5cGVzIHx8IFtudWxsLCBnZXRQcm90byh7fSksIGdldFByb3RvKFtdKSwgZ2V0UHJvdG8oZ2V0UHJvdG8pXTtcblx0Zm9yKHZhciBjdXJyZW50ID0gbW9kZSAmIDIgJiYgdmFsdWU7IHR5cGVvZiBjdXJyZW50ID09ICdvYmplY3QnICYmICF+bGVhZlByb3RvdHlwZXMuaW5kZXhPZihjdXJyZW50KTsgY3VycmVudCA9IGdldFByb3RvKGN1cnJlbnQpKSB7XG5cdFx0T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY3VycmVudCkuZm9yRWFjaCgoa2V5KSA9PiAoZGVmW2tleV0gPSAoKSA9PiAodmFsdWVba2V5XSkpKTtcblx0fVxuXHRkZWZbJ2RlZmF1bHQnXSA9ICgpID0+ICh2YWx1ZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChucywgZGVmKTtcblx0cmV0dXJuIG5zO1xufTsiLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIi8qKlxuICogQHJlbWl4LXJ1bi9yb3V0ZXIgdjEuOC4wXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIFR5cGVzIGFuZCBDb25zdGFudHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAqIEFjdGlvbnMgcmVwcmVzZW50IHRoZSB0eXBlIG9mIGNoYW5nZSB0byBhIGxvY2F0aW9uIHZhbHVlLlxuICovXG52YXIgQWN0aW9uO1xuKGZ1bmN0aW9uIChBY3Rpb24pIHtcbiAgLyoqXG4gICAqIEEgUE9QIGluZGljYXRlcyBhIGNoYW5nZSB0byBhbiBhcmJpdHJhcnkgaW5kZXggaW4gdGhlIGhpc3Rvcnkgc3RhY2ssIHN1Y2hcbiAgICogYXMgYSBiYWNrIG9yIGZvcndhcmQgbmF2aWdhdGlvbi4gSXQgZG9lcyBub3QgZGVzY3JpYmUgdGhlIGRpcmVjdGlvbiBvZiB0aGVcbiAgICogbmF2aWdhdGlvbiwgb25seSB0aGF0IHRoZSBjdXJyZW50IGluZGV4IGNoYW5nZWQuXG4gICAqXG4gICAqIE5vdGU6IFRoaXMgaXMgdGhlIGRlZmF1bHQgYWN0aW9uIGZvciBuZXdseSBjcmVhdGVkIGhpc3Rvcnkgb2JqZWN0cy5cbiAgICovXG4gIEFjdGlvbltcIlBvcFwiXSA9IFwiUE9QXCI7XG4gIC8qKlxuICAgKiBBIFBVU0ggaW5kaWNhdGVzIGEgbmV3IGVudHJ5IGJlaW5nIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoIGFzIHdoZW5cbiAgICogYSBsaW5rIGlzIGNsaWNrZWQgYW5kIGEgbmV3IHBhZ2UgbG9hZHMuIFdoZW4gdGhpcyBoYXBwZW5zLCBhbGwgc3Vic2VxdWVudFxuICAgKiBlbnRyaWVzIGluIHRoZSBzdGFjayBhcmUgbG9zdC5cbiAgICovXG4gIEFjdGlvbltcIlB1c2hcIl0gPSBcIlBVU0hcIjtcbiAgLyoqXG4gICAqIEEgUkVQTEFDRSBpbmRpY2F0ZXMgdGhlIGVudHJ5IGF0IHRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrXG4gICAqIGJlaW5nIHJlcGxhY2VkIGJ5IGEgbmV3IG9uZS5cbiAgICovXG4gIEFjdGlvbltcIlJlcGxhY2VcIl0gPSBcIlJFUExBQ0VcIjtcbn0pKEFjdGlvbiB8fCAoQWN0aW9uID0ge30pKTtcbmNvbnN0IFBvcFN0YXRlRXZlbnRUeXBlID0gXCJwb3BzdGF0ZVwiO1xuLyoqXG4gKiBNZW1vcnkgaGlzdG9yeSBzdG9yZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24gaW4gbWVtb3J5LiBJdCBpcyBkZXNpZ25lZCBmb3IgdXNlXG4gKiBpbiBzdGF0ZWZ1bCBub24tYnJvd3NlciBlbnZpcm9ubWVudHMgbGlrZSB0ZXN0cyBhbmQgUmVhY3QgTmF0aXZlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBsZXQge1xuICAgIGluaXRpYWxFbnRyaWVzID0gW1wiL1wiXSxcbiAgICBpbml0aWFsSW5kZXgsXG4gICAgdjVDb21wYXQgPSBmYWxzZVxuICB9ID0gb3B0aW9ucztcbiAgbGV0IGVudHJpZXM7IC8vIERlY2xhcmUgc28gd2UgY2FuIGFjY2VzcyBmcm9tIGNyZWF0ZU1lbW9yeUxvY2F0aW9uXG4gIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoKGVudHJ5LCBpbmRleCkgPT4gY3JlYXRlTWVtb3J5TG9jYXRpb24oZW50cnksIHR5cGVvZiBlbnRyeSA9PT0gXCJzdHJpbmdcIiA/IG51bGwgOiBlbnRyeS5zdGF0ZSwgaW5kZXggPT09IDAgPyBcImRlZmF1bHRcIiA6IHVuZGVmaW5lZCkpO1xuICBsZXQgaW5kZXggPSBjbGFtcEluZGV4KGluaXRpYWxJbmRleCA9PSBudWxsID8gZW50cmllcy5sZW5ndGggLSAxIDogaW5pdGlhbEluZGV4KTtcbiAgbGV0IGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIGxldCBsaXN0ZW5lciA9IG51bGw7XG4gIGZ1bmN0aW9uIGNsYW1wSW5kZXgobikge1xuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCAwKSwgZW50cmllcy5sZW5ndGggLSAxKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24oKSB7XG4gICAgcmV0dXJuIGVudHJpZXNbaW5kZXhdO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUxvY2F0aW9uKHRvLCBzdGF0ZSwga2V5KSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0gbnVsbDtcbiAgICB9XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oZW50cmllcyA/IGdldEN1cnJlbnRMb2NhdGlvbigpLnBhdGhuYW1lIDogXCIvXCIsIHRvLCBzdGF0ZSwga2V5KTtcbiAgICB3YXJuaW5nKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gXCIvXCIsIFwicmVsYXRpdmUgcGF0aG5hbWVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIG1lbW9yeSBoaXN0b3J5OiBcIiArIEpTT04uc3RyaW5naWZ5KHRvKSk7XG4gICAgcmV0dXJuIGxvY2F0aW9uO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYodG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgfVxuICBsZXQgaGlzdG9yeSA9IHtcbiAgICBnZXQgaW5kZXgoKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfSxcbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBnZXRDdXJyZW50TG9jYXRpb24oKTtcbiAgICB9LFxuICAgIGNyZWF0ZUhyZWYsXG4gICAgY3JlYXRlVVJMKHRvKSB7XG4gICAgICByZXR1cm4gbmV3IFVSTChjcmVhdGVIcmVmKHRvKSwgXCJodHRwOi8vbG9jYWxob3N0XCIpO1xuICAgIH0sXG4gICAgZW5jb2RlTG9jYXRpb24odG8pIHtcbiAgICAgIGxldCBwYXRoID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aG5hbWU6IHBhdGgucGF0aG5hbWUgfHwgXCJcIixcbiAgICAgICAgc2VhcmNoOiBwYXRoLnNlYXJjaCB8fCBcIlwiLFxuICAgICAgICBoYXNoOiBwYXRoLmhhc2ggfHwgXCJcIlxuICAgICAgfTtcbiAgICB9LFxuICAgIHB1c2godG8sIHN0YXRlKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUpO1xuICAgICAgaW5kZXggKz0gMTtcbiAgICAgIGVudHJpZXMuc3BsaWNlKGluZGV4LCBlbnRyaWVzLmxlbmd0aCwgbmV4dExvY2F0aW9uKTtcbiAgICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sXG4gICAgICAgICAgZGVsdGE6IDFcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXBsYWNlKHRvLCBzdGF0ZSkge1xuICAgICAgYWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTWVtb3J5TG9jYXRpb24odG8sIHN0YXRlKTtcbiAgICAgIGVudHJpZXNbaW5kZXhdID0gbmV4dExvY2F0aW9uO1xuICAgICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICBkZWx0YTogMFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdvKGRlbHRhKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgICAgbGV0IG5leHRJbmRleCA9IGNsYW1wSW5kZXgoaW5kZXggKyBkZWx0YSk7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gZW50cmllc1tuZXh0SW5kZXhdO1xuICAgICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIoe1xuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgIGRlbHRhXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgbGlzdGVuKGZuKSB7XG4gICAgICBsaXN0ZW5lciA9IGZuO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgbGlzdGVuZXIgPSBudWxsO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuLyoqXG4gKiBCcm93c2VyIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiByZWd1bGFyIFVSTHMuIFRoaXMgaXMgdGhlIHN0YW5kYXJkIGZvclxuICogbW9zdCB3ZWIgYXBwcywgYnV0IGl0IHJlcXVpcmVzIHNvbWUgY29uZmlndXJhdGlvbiBvbiB0aGUgc2VydmVyIHRvIGVuc3VyZSB5b3VcbiAqIHNlcnZlIHRoZSBzYW1lIGFwcCBhdCBtdWx0aXBsZSBVUkxzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlYnJvd3Nlcmhpc3RvcnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3Rvcnkob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpIHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24oXCJcIiwge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSxcbiAgICAvLyBzdGF0ZSBkZWZhdWx0cyB0byBgbnVsbGAgYmVjYXVzZSBgd2luZG93Lmhpc3Rvcnkuc3RhdGVgIGRvZXNcbiAgICBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUudXNyIHx8IG51bGwsIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS5rZXkgfHwgXCJkZWZhdWx0XCIpO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIcmVmKHdpbmRvdywgdG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgfVxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KGNyZWF0ZUJyb3dzZXJMb2NhdGlvbiwgY3JlYXRlQnJvd3NlckhyZWYsIG51bGwsIG9wdGlvbnMpO1xufVxuLyoqXG4gKiBIYXNoIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB3aW5kb3cubG9jYXRpb24uaGFzaC4gVGhpcyBtYWtlcyBpdCBpZGVhbFxuICogZm9yIHNpdHVhdGlvbnMgd2hlcmUgeW91IGRvbid0IHdhbnQgdG8gc2VuZCB0aGUgbG9jYXRpb24gdG8gdGhlIHNlcnZlciBmb3JcbiAqIHNvbWUgcmVhc29uLCBlaXRoZXIgYmVjYXVzZSB5b3UgZG8gY2Fubm90IGNvbmZpZ3VyZSBpdCBvciB0aGUgVVJMIHNwYWNlIGlzXG4gKiByZXNlcnZlZCBmb3Igc29tZXRoaW5nIGVsc2UuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNjcmVhdGVoYXNoaGlzdG9yeVxuICovXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlSGFzaExvY2F0aW9uKHdpbmRvdywgZ2xvYmFsSGlzdG9yeSkge1xuICAgIGxldCB7XG4gICAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgICAgc2VhcmNoID0gXCJcIixcbiAgICAgIGhhc2ggPSBcIlwiXG4gICAgfSA9IHBhcnNlUGF0aCh3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSkpO1xuICAgIC8vIEhhc2ggVVJMIHNob3VsZCBhbHdheXMgaGF2ZSBhIGxlYWRpbmcgLyBqdXN0IGxpa2Ugd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lXG4gICAgLy8gZG9lcywgc28gaWYgYW4gYXBwIGVuZHMgdXAgYXQgYSByb3V0ZSBsaWtlIC8jc29tZXRoaW5nIHRoZW4gd2UgYWRkIGFcbiAgICAvLyBsZWFkaW5nIHNsYXNoIHNvIGFsbCBvZiBvdXIgcGF0aC1tYXRjaGluZyBiZWhhdmVzIHRoZSBzYW1lIGFzIGlmIGl0IHdvdWxkXG4gICAgLy8gaW4gYSBicm93c2VyIHJvdXRlci4gIFRoaXMgaXMgcGFydGljdWxhcmx5IGltcG9ydGFudCB3aGVuIHRoZXJlIGV4aXN0cyBhXG4gICAgLy8gcm9vdCBzcGxhdCByb3V0ZSAoPFJvdXRlIHBhdGg9XCIqXCI+KSBzaW5jZSB0aGF0IG1hdGNoZXMgaW50ZXJuYWxseSBhZ2FpbnN0XG4gICAgLy8gXCIvKlwiIGFuZCB3ZSdkIGV4cGVjdCAvI3NvbWV0aGluZyB0byA0MDQgaW4gYSBoYXNoIHJvdXRlciBhcHAuXG4gICAgaWYgKCFwYXRobmFtZS5zdGFydHNXaXRoKFwiL1wiKSAmJiAhcGF0aG5hbWUuc3RhcnRzV2l0aChcIi5cIikpIHtcbiAgICAgIHBhdGhuYW1lID0gXCIvXCIgKyBwYXRobmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKFwiXCIsIHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaFxuICAgIH0sXG4gICAgLy8gc3RhdGUgZGVmYXVsdHMgdG8gYG51bGxgIGJlY2F1c2UgYHdpbmRvdy5oaXN0b3J5LnN0YXRlYCBkb2VzXG4gICAgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLnVzciB8fCBudWxsLCBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUua2V5IHx8IFwiZGVmYXVsdFwiKTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVIYXNoSHJlZih3aW5kb3csIHRvKSB7XG4gICAgbGV0IGJhc2UgPSB3aW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJhc2VcIik7XG4gICAgbGV0IGhyZWYgPSBcIlwiO1xuICAgIGlmIChiYXNlICYmIGJhc2UuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSkge1xuICAgICAgbGV0IHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgbGV0IGhhc2hJbmRleCA9IHVybC5pbmRleE9mKFwiI1wiKTtcbiAgICAgIGhyZWYgPSBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuICAgIHJldHVybiBocmVmICsgXCIjXCIgKyAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKSk7XG4gIH1cbiAgZnVuY3Rpb24gdmFsaWRhdGVIYXNoTG9jYXRpb24obG9jYXRpb24sIHRvKSB7XG4gICAgd2FybmluZyhsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09IFwiL1wiLCBcInJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBoYXNoIGhpc3RvcnkucHVzaChcIiArIEpTT04uc3RyaW5naWZ5KHRvKSArIFwiKVwiKTtcbiAgfVxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KGNyZWF0ZUhhc2hMb2NhdGlvbiwgY3JlYXRlSGFzaEhyZWYsIHZhbGlkYXRlSGFzaExvY2F0aW9uLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIGludmFyaWFudCh2YWx1ZSwgbWVzc2FnZSkge1xuICBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfVxufVxuZnVuY3Rpb24gd2FybmluZyhjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFdlbGNvbWUgdG8gZGVidWdnaW5nIGhpc3RvcnkhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA4KTtcbn1cbi8qKlxuICogRm9yIGJyb3dzZXItYmFzZWQgaGlzdG9yaWVzLCB3ZSBjb21iaW5lIHRoZSBzdGF0ZSBhbmQga2V5IGludG8gYW4gb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbiwgaW5kZXgpIHtcbiAgcmV0dXJuIHtcbiAgICB1c3I6IGxvY2F0aW9uLnN0YXRlLFxuICAgIGtleTogbG9jYXRpb24ua2V5LFxuICAgIGlkeDogaW5kZXhcbiAgfTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIExvY2F0aW9uIG9iamVjdCB3aXRoIGEgdW5pcXVlIGtleSBmcm9tIHRoZSBnaXZlbiBQYXRoXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKGN1cnJlbnQsIHRvLCBzdGF0ZSwga2V5KSB7XG4gIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgc3RhdGUgPSBudWxsO1xuICB9XG4gIGxldCBsb2NhdGlvbiA9IF9leHRlbmRzKHtcbiAgICBwYXRobmFtZTogdHlwZW9mIGN1cnJlbnQgPT09IFwic3RyaW5nXCIgPyBjdXJyZW50IDogY3VycmVudC5wYXRobmFtZSxcbiAgICBzZWFyY2g6IFwiXCIsXG4gICAgaGFzaDogXCJcIlxuICB9LCB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG8sIHtcbiAgICBzdGF0ZSxcbiAgICAvLyBUT0RPOiBUaGlzIGNvdWxkIGJlIGNsZWFuZWQgdXAuICBwdXNoL3JlcGxhY2Ugc2hvdWxkIHByb2JhYmx5IGp1c3QgdGFrZVxuICAgIC8vIGZ1bGwgTG9jYXRpb25zIG5vdyBhbmQgYXZvaWQgdGhlIG5lZWQgdG8gcnVuIHRocm91Z2ggdGhpcyBmbG93IGF0IGFsbFxuICAgIC8vIEJ1dCB0aGF0J3MgYSBwcmV0dHkgYmlnIHJlZmFjdG9yIHRvIHRoZSBjdXJyZW50IHRlc3Qgc3VpdGUgc28gZ29pbmcgdG9cbiAgICAvLyBrZWVwIGFzIGlzIGZvciB0aGUgdGltZSBiZWluZyBhbmQganVzdCBsZXQgYW55IGluY29taW5nIGtleXMgdGFrZSBwcmVjZWRlbmNlXG4gICAga2V5OiB0byAmJiB0by5rZXkgfHwga2V5IHx8IGNyZWF0ZUtleSgpXG4gIH0pO1xuICByZXR1cm4gbG9jYXRpb247XG59XG4vKipcbiAqIENyZWF0ZXMgYSBzdHJpbmcgVVJMIHBhdGggZnJvbSB0aGUgZ2l2ZW4gcGF0aG5hbWUsIHNlYXJjaCwgYW5kIGhhc2ggY29tcG9uZW50cy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUGF0aChfcmVmKSB7XG4gIGxldCB7XG4gICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiXG4gIH0gPSBfcmVmO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gXCI/XCIpIHBhdGhuYW1lICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09IFwiP1wiID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09IFwiI1wiKSBwYXRobmFtZSArPSBoYXNoLmNoYXJBdCgwKSA9PT0gXCIjXCIgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuICByZXR1cm4gcGF0aG5hbWU7XG59XG4vKipcbiAqIFBhcnNlcyBhIHN0cmluZyBVUkwgcGF0aCBpbnRvIGl0cyBzZXBhcmF0ZSBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCBjb21wb25lbnRzLlxuICovXG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICBsZXQgcGFyc2VkUGF0aCA9IHt9O1xuICBpZiAocGF0aCkge1xuICAgIGxldCBoYXNoSW5kZXggPSBwYXRoLmluZGV4T2YoXCIjXCIpO1xuICAgIGlmIChoYXNoSW5kZXggPj0gMCkge1xuICAgICAgcGFyc2VkUGF0aC5oYXNoID0gcGF0aC5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICAgIHBhdGggPSBwYXRoLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICAgIH1cbiAgICBsZXQgc2VhcmNoSW5kZXggPSBwYXRoLmluZGV4T2YoXCI/XCIpO1xuICAgIGlmIChzZWFyY2hJbmRleCA+PSAwKSB7XG4gICAgICBwYXJzZWRQYXRoLnNlYXJjaCA9IHBhdGguc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICAgIHBhdGggPSBwYXRoLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gICAgfVxuICAgIGlmIChwYXRoKSB7XG4gICAgICBwYXJzZWRQYXRoLnBhdGhuYW1lID0gcGF0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhcnNlZFBhdGg7XG59XG5mdW5jdGlvbiBnZXRVcmxCYXNlZEhpc3RvcnkoZ2V0TG9jYXRpb24sIGNyZWF0ZUhyZWYsIHZhbGlkYXRlTG9jYXRpb24sIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBsZXQge1xuICAgIHdpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3LFxuICAgIHY1Q29tcGF0ID0gZmFsc2VcbiAgfSA9IG9wdGlvbnM7XG4gIGxldCBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIGxldCBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICBsZXQgbGlzdGVuZXIgPSBudWxsO1xuICBsZXQgaW5kZXggPSBnZXRJbmRleCgpO1xuICAvLyBJbmRleCBzaG91bGQgb25seSBiZSBudWxsIHdoZW4gd2UgaW5pdGlhbGl6ZS4gSWYgbm90LCBpdCdzIGJlY2F1c2UgdGhlXG4gIC8vIHVzZXIgY2FsbGVkIGhpc3RvcnkucHVzaFN0YXRlIG9yIGhpc3RvcnkucmVwbGFjZVN0YXRlIGRpcmVjdGx5LCBpbiB3aGljaFxuICAvLyBjYXNlIHdlIHNob3VsZCBsb2cgYSB3YXJuaW5nIGFzIGl0IHdpbGwgcmVzdWx0IGluIGJ1Z3MuXG4gIGlmIChpbmRleCA9PSBudWxsKSB7XG4gICAgaW5kZXggPSAwO1xuICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKF9leHRlbmRzKHt9LCBnbG9iYWxIaXN0b3J5LnN0YXRlLCB7XG4gICAgICBpZHg6IGluZGV4XG4gICAgfSksIFwiXCIpO1xuICB9XG4gIGZ1bmN0aW9uIGdldEluZGV4KCkge1xuICAgIGxldCBzdGF0ZSA9IGdsb2JhbEhpc3Rvcnkuc3RhdGUgfHwge1xuICAgICAgaWR4OiBudWxsXG4gICAgfTtcbiAgICByZXR1cm4gc3RhdGUuaWR4O1xuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZVBvcCgpIHtcbiAgICBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgIGxldCBuZXh0SW5kZXggPSBnZXRJbmRleCgpO1xuICAgIGxldCBkZWx0YSA9IG5leHRJbmRleCA9PSBudWxsID8gbnVsbCA6IG5leHRJbmRleCAtIGluZGV4O1xuICAgIGluZGV4ID0gbmV4dEluZGV4O1xuICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoe1xuICAgICAgICBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICBkZWx0YVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHB1c2godG8sIHN0YXRlKSB7XG4gICAgYWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oaGlzdG9yeS5sb2NhdGlvbiwgdG8sIHN0YXRlKTtcbiAgICBpZiAodmFsaWRhdGVMb2NhdGlvbikgdmFsaWRhdGVMb2NhdGlvbihsb2NhdGlvbiwgdG8pO1xuICAgIGluZGV4ID0gZ2V0SW5kZXgoKSArIDE7XG4gICAgbGV0IGhpc3RvcnlTdGF0ZSA9IGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbiwgaW5kZXgpO1xuICAgIGxldCB1cmwgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgIC8vIHRyeS4uLmNhdGNoIGJlY2F1c2UgaU9TIGxpbWl0cyB1cyB0byAxMDAgcHVzaFN0YXRlIGNhbGxzIDovXG4gICAgdHJ5IHtcbiAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKGhpc3RvcnlTdGF0ZSwgXCJcIiwgdXJsKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gSWYgdGhlIGV4Y2VwdGlvbiBpcyBiZWNhdXNlIGBzdGF0ZWAgY2FuJ3QgYmUgc2VyaWFsaXplZCwgbGV0IHRoYXQgdGhyb3dcbiAgICAgIC8vIG91dHdhcmRzIGp1c3QgbGlrZSBhIHJlcGxhY2UgY2FsbCB3b3VsZCBzbyB0aGUgZGV2IGtub3dzIHRoZSBjYXVzZVxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvbmF2LWhpc3RvcnktYXBpcy5odG1sI3NoYXJlZC1oaXN0b3J5LXB1c2gvcmVwbGFjZS1zdGF0ZS1zdGVwc1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3RydWN0dXJlZC1kYXRhLmh0bWwjc3RydWN0dXJlZHNlcmlhbGl6ZWludGVybmFsXG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBET01FeGNlcHRpb24gJiYgZXJyb3IubmFtZSA9PT0gXCJEYXRhQ2xvbmVFcnJvclwiKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgICAgLy8gVGhleSBhcmUgZ29pbmcgdG8gbG9zZSBzdGF0ZSBoZXJlLCBidXQgdGhlcmUgaXMgbm8gcmVhbFxuICAgICAgLy8gd2F5IHRvIHdhcm4gdGhlbSBhYm91dCBpdCBzaW5jZSB0aGUgcGFnZSB3aWxsIHJlZnJlc2guLi5cbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24odXJsKTtcbiAgICB9XG4gICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcih7XG4gICAgICAgIGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgIGRlbHRhOiAxXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcmVwbGFjZSh0bywgc3RhdGUpIHtcbiAgICBhY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihoaXN0b3J5LmxvY2F0aW9uLCB0bywgc3RhdGUpO1xuICAgIGlmICh2YWxpZGF0ZUxvY2F0aW9uKSB2YWxpZGF0ZUxvY2F0aW9uKGxvY2F0aW9uLCB0byk7XG4gICAgaW5kZXggPSBnZXRJbmRleCgpO1xuICAgIGxldCBoaXN0b3J5U3RhdGUgPSBnZXRIaXN0b3J5U3RhdGUobG9jYXRpb24sIGluZGV4KTtcbiAgICBsZXQgdXJsID0gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShoaXN0b3J5U3RhdGUsIFwiXCIsIHVybCk7XG4gICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcih7XG4gICAgICAgIGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgIGRlbHRhOiAwXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlVVJMKHRvKSB7XG4gICAgLy8gd2luZG93LmxvY2F0aW9uLm9yaWdpbiBpcyBcIm51bGxcIiAodGhlIGxpdGVyYWwgc3RyaW5nIHZhbHVlKSBpbiBGaXJlZm94XG4gICAgLy8gdW5kZXIgY2VydGFpbiBjb25kaXRpb25zLCBub3RhYmx5IHdoZW4gc2VydmluZyBmcm9tIGEgbG9jYWwgSFRNTCBmaWxlXG4gICAgLy8gU2VlIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTg3ODI5N1xuICAgIGxldCBiYXNlID0gd2luZG93LmxvY2F0aW9uLm9yaWdpbiAhPT0gXCJudWxsXCIgPyB3aW5kb3cubG9jYXRpb24ub3JpZ2luIDogd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgbGV0IGhyZWYgPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICAgIGludmFyaWFudChiYXNlLCBcIk5vIHdpbmRvdy5sb2NhdGlvbi4ob3JpZ2lufGhyZWYpIGF2YWlsYWJsZSB0byBjcmVhdGUgVVJMIGZvciBocmVmOiBcIiArIGhyZWYpO1xuICAgIHJldHVybiBuZXcgVVJMKGhyZWYsIGJhc2UpO1xuICB9XG4gIGxldCBoaXN0b3J5ID0ge1xuICAgIGdldCBhY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG4gICAgZ2V0IGxvY2F0aW9uKCkge1xuICAgICAgcmV0dXJuIGdldExvY2F0aW9uKHdpbmRvdywgZ2xvYmFsSGlzdG9yeSk7XG4gICAgfSxcbiAgICBsaXN0ZW4oZm4pIHtcbiAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGhpc3Rvcnkgb25seSBhY2NlcHRzIG9uZSBhY3RpdmUgbGlzdGVuZXJcIik7XG4gICAgICB9XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTtcbiAgICAgIGxpc3RlbmVyID0gZm47XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTtcbiAgICAgICAgbGlzdGVuZXIgPSBudWxsO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZUhyZWYodG8pIHtcbiAgICAgIHJldHVybiBjcmVhdGVIcmVmKHdpbmRvdywgdG8pO1xuICAgIH0sXG4gICAgY3JlYXRlVVJMLFxuICAgIGVuY29kZUxvY2F0aW9uKHRvKSB7XG4gICAgICAvLyBFbmNvZGUgYSBMb2NhdGlvbiB0aGUgc2FtZSB3YXkgd2luZG93LmxvY2F0aW9uIHdvdWxkXG4gICAgICBsZXQgdXJsID0gY3JlYXRlVVJMKHRvKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGhuYW1lOiB1cmwucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaDogdXJsLnNlYXJjaCxcbiAgICAgICAgaGFzaDogdXJsLmhhc2hcbiAgICAgIH07XG4gICAgfSxcbiAgICBwdXNoLFxuICAgIHJlcGxhY2UsXG4gICAgZ28obikge1xuICAgICAgcmV0dXJuIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gICAgfVxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cbi8vI2VuZHJlZ2lvblxuXG52YXIgUmVzdWx0VHlwZTtcbihmdW5jdGlvbiAoUmVzdWx0VHlwZSkge1xuICBSZXN1bHRUeXBlW1wiZGF0YVwiXSA9IFwiZGF0YVwiO1xuICBSZXN1bHRUeXBlW1wiZGVmZXJyZWRcIl0gPSBcImRlZmVycmVkXCI7XG4gIFJlc3VsdFR5cGVbXCJyZWRpcmVjdFwiXSA9IFwicmVkaXJlY3RcIjtcbiAgUmVzdWx0VHlwZVtcImVycm9yXCJdID0gXCJlcnJvclwiO1xufSkoUmVzdWx0VHlwZSB8fCAoUmVzdWx0VHlwZSA9IHt9KSk7XG5jb25zdCBpbW11dGFibGVSb3V0ZUtleXMgPSBuZXcgU2V0KFtcImxhenlcIiwgXCJjYXNlU2Vuc2l0aXZlXCIsIFwicGF0aFwiLCBcImlkXCIsIFwiaW5kZXhcIiwgXCJjaGlsZHJlblwiXSk7XG5mdW5jdGlvbiBpc0luZGV4Um91dGUocm91dGUpIHtcbiAgcmV0dXJuIHJvdXRlLmluZGV4ID09PSB0cnVlO1xufVxuLy8gV2FsayB0aGUgcm91dGUgdHJlZSBnZW5lcmF0aW5nIHVuaXF1ZSBJRHMgd2hlcmUgbmVjZXNzYXJ5IHNvIHdlIGFyZSB3b3JraW5nXG4vLyBzb2xlbHkgd2l0aCBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdCdzIHdpdGhpbiB0aGUgUm91dGVyXG5mdW5jdGlvbiBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKHJvdXRlcywgbWFwUm91dGVQcm9wZXJ0aWVzLCBwYXJlbnRQYXRoLCBtYW5pZmVzdCkge1xuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFtdO1xuICB9XG4gIGlmIChtYW5pZmVzdCA9PT0gdm9pZCAwKSB7XG4gICAgbWFuaWZlc3QgPSB7fTtcbiAgfVxuICByZXR1cm4gcm91dGVzLm1hcCgocm91dGUsIGluZGV4KSA9PiB7XG4gICAgbGV0IHRyZWVQYXRoID0gWy4uLnBhcmVudFBhdGgsIGluZGV4XTtcbiAgICBsZXQgaWQgPSB0eXBlb2Ygcm91dGUuaWQgPT09IFwic3RyaW5nXCIgPyByb3V0ZS5pZCA6IHRyZWVQYXRoLmpvaW4oXCItXCIpO1xuICAgIGludmFyaWFudChyb3V0ZS5pbmRleCAhPT0gdHJ1ZSB8fCAhcm91dGUuY2hpbGRyZW4sIFwiQ2Fubm90IHNwZWNpZnkgY2hpbGRyZW4gb24gYW4gaW5kZXggcm91dGVcIik7XG4gICAgaW52YXJpYW50KCFtYW5pZmVzdFtpZF0sIFwiRm91bmQgYSByb3V0ZSBpZCBjb2xsaXNpb24gb24gaWQgXFxcIlwiICsgaWQgKyBcIlxcXCIuICBSb3V0ZSBcIiArIFwiaWQncyBtdXN0IGJlIGdsb2JhbGx5IHVuaXF1ZSB3aXRoaW4gRGF0YSBSb3V0ZXIgdXNhZ2VzXCIpO1xuICAgIGlmIChpc0luZGV4Um91dGUocm91dGUpKSB7XG4gICAgICBsZXQgaW5kZXhSb3V0ZSA9IF9leHRlbmRzKHt9LCByb3V0ZSwgbWFwUm91dGVQcm9wZXJ0aWVzKHJvdXRlKSwge1xuICAgICAgICBpZFxuICAgICAgfSk7XG4gICAgICBtYW5pZmVzdFtpZF0gPSBpbmRleFJvdXRlO1xuICAgICAgcmV0dXJuIGluZGV4Um91dGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYXRoT3JMYXlvdXRSb3V0ZSA9IF9leHRlbmRzKHt9LCByb3V0ZSwgbWFwUm91dGVQcm9wZXJ0aWVzKHJvdXRlKSwge1xuICAgICAgICBpZCxcbiAgICAgICAgY2hpbGRyZW46IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICBtYW5pZmVzdFtpZF0gPSBwYXRoT3JMYXlvdXRSb3V0ZTtcbiAgICAgIGlmIChyb3V0ZS5jaGlsZHJlbikge1xuICAgICAgICBwYXRoT3JMYXlvdXRSb3V0ZS5jaGlsZHJlbiA9IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMocm91dGUuY2hpbGRyZW4sIG1hcFJvdXRlUHJvcGVydGllcywgdHJlZVBhdGgsIG1hbmlmZXN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXRoT3JMYXlvdXRSb3V0ZTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBNYXRjaGVzIHRoZSBnaXZlbiByb3V0ZXMgdG8gYSBsb2NhdGlvbiBhbmQgcmV0dXJucyB0aGUgbWF0Y2ggZGF0YS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL21hdGNoLXJvdXRlc1xuICovXG5mdW5jdGlvbiBtYXRjaFJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uQXJnLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IHZvaWQgMCkge1xuICAgIGJhc2VuYW1lID0gXCIvXCI7XG4gIH1cbiAgbGV0IGxvY2F0aW9uID0gdHlwZW9mIGxvY2F0aW9uQXJnID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKGxvY2F0aW9uQXJnKSA6IGxvY2F0aW9uQXJnO1xuICBsZXQgcGF0aG5hbWUgPSBzdHJpcEJhc2VuYW1lKGxvY2F0aW9uLnBhdGhuYW1lIHx8IFwiL1wiLCBiYXNlbmFtZSk7XG4gIGlmIChwYXRobmFtZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgbGV0IGJyYW5jaGVzID0gZmxhdHRlblJvdXRlcyhyb3V0ZXMpO1xuICByYW5rUm91dGVCcmFuY2hlcyhicmFuY2hlcyk7XG4gIGxldCBtYXRjaGVzID0gbnVsbDtcbiAgZm9yIChsZXQgaSA9IDA7IG1hdGNoZXMgPT0gbnVsbCAmJiBpIDwgYnJhbmNoZXMubGVuZ3RoOyArK2kpIHtcbiAgICBtYXRjaGVzID0gbWF0Y2hSb3V0ZUJyYW5jaChicmFuY2hlc1tpXSxcbiAgICAvLyBJbmNvbWluZyBwYXRobmFtZXMgYXJlIGdlbmVyYWxseSBlbmNvZGVkIGZyb20gZWl0aGVyIHdpbmRvdy5sb2NhdGlvblxuICAgIC8vIG9yIGZyb20gcm91dGVyLm5hdmlnYXRlLCBidXQgd2Ugd2FudCB0byBtYXRjaCBhZ2FpbnN0IHRoZSB1bmVuY29kZWRcbiAgICAvLyBwYXRocyBpbiB0aGUgcm91dGUgZGVmaW5pdGlvbnMuICBNZW1vcnkgcm91dGVyIGxvY2F0aW9ucyB3b24ndCBiZVxuICAgIC8vIGVuY29kZWQgaGVyZSBidXQgdGhlcmUgYWxzbyBzaG91bGRuJ3QgYmUgYW55dGhpbmcgdG8gZGVjb2RlIHNvIHRoaXNcbiAgICAvLyBzaG91bGQgYmUgYSBzYWZlIG9wZXJhdGlvbi4gIFRoaXMgYXZvaWRzIG5lZWRpbmcgbWF0Y2hSb3V0ZXMgdG8gYmVcbiAgICAvLyBoaXN0b3J5LWF3YXJlLlxuICAgIHNhZmVseURlY29kZVVSSShwYXRobmFtZSkpO1xuICB9XG4gIHJldHVybiBtYXRjaGVzO1xufVxuZnVuY3Rpb24gZmxhdHRlblJvdXRlcyhyb3V0ZXMsIGJyYW5jaGVzLCBwYXJlbnRzTWV0YSwgcGFyZW50UGF0aCkge1xuICBpZiAoYnJhbmNoZXMgPT09IHZvaWQgMCkge1xuICAgIGJyYW5jaGVzID0gW107XG4gIH1cbiAgaWYgKHBhcmVudHNNZXRhID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRzTWV0YSA9IFtdO1xuICB9XG4gIGlmIChwYXJlbnRQYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRQYXRoID0gXCJcIjtcbiAgfVxuICBsZXQgZmxhdHRlblJvdXRlID0gKHJvdXRlLCBpbmRleCwgcmVsYXRpdmVQYXRoKSA9PiB7XG4gICAgbGV0IG1ldGEgPSB7XG4gICAgICByZWxhdGl2ZVBhdGg6IHJlbGF0aXZlUGF0aCA9PT0gdW5kZWZpbmVkID8gcm91dGUucGF0aCB8fCBcIlwiIDogcmVsYXRpdmVQYXRoLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogcm91dGUuY2FzZVNlbnNpdGl2ZSA9PT0gdHJ1ZSxcbiAgICAgIGNoaWxkcmVuSW5kZXg6IGluZGV4LFxuICAgICAgcm91dGVcbiAgICB9O1xuICAgIGlmIChtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKFwiL1wiKSkge1xuICAgICAgaW52YXJpYW50KG1ldGEucmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgocGFyZW50UGF0aCksIFwiQWJzb2x1dGUgcm91dGUgcGF0aCBcXFwiXCIgKyBtZXRhLnJlbGF0aXZlUGF0aCArIFwiXFxcIiBuZXN0ZWQgdW5kZXIgcGF0aCBcIiArIChcIlxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCIgaXMgbm90IHZhbGlkLiBBbiBhYnNvbHV0ZSBjaGlsZCByb3V0ZSBwYXRoIFwiKSArIFwibXVzdCBzdGFydCB3aXRoIHRoZSBjb21iaW5lZCBwYXRoIG9mIGFsbCBpdHMgcGFyZW50IHJvdXRlcy5cIik7XG4gICAgICBtZXRhLnJlbGF0aXZlUGF0aCA9IG1ldGEucmVsYXRpdmVQYXRoLnNsaWNlKHBhcmVudFBhdGgubGVuZ3RoKTtcbiAgICB9XG4gICAgbGV0IHBhdGggPSBqb2luUGF0aHMoW3BhcmVudFBhdGgsIG1ldGEucmVsYXRpdmVQYXRoXSk7XG4gICAgbGV0IHJvdXRlc01ldGEgPSBwYXJlbnRzTWV0YS5jb25jYXQobWV0YSk7XG4gICAgLy8gQWRkIHRoZSBjaGlsZHJlbiBiZWZvcmUgYWRkaW5nIHRoaXMgcm91dGUgdG8gdGhlIGFycmF5IHNvIHdlIHRyYXZlcnNlIHRoZVxuICAgIC8vIHJvdXRlIHRyZWUgZGVwdGgtZmlyc3QgYW5kIGNoaWxkIHJvdXRlcyBhcHBlYXIgYmVmb3JlIHRoZWlyIHBhcmVudHMgaW5cbiAgICAvLyB0aGUgXCJmbGF0dGVuZWRcIiB2ZXJzaW9uLlxuICAgIGlmIChyb3V0ZS5jaGlsZHJlbiAmJiByb3V0ZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAvLyBPdXIgdHlwZXMga25vdyBiZXR0ZXIsIGJ1dCBydW50aW1lIEpTIG1heSBub3QhXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICByb3V0ZS5pbmRleCAhPT0gdHJ1ZSwgXCJJbmRleCByb3V0ZXMgbXVzdCBub3QgaGF2ZSBjaGlsZCByb3V0ZXMuIFBsZWFzZSByZW1vdmUgXCIgKyAoXCJhbGwgY2hpbGQgcm91dGVzIGZyb20gcm91dGUgcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiLlwiKSk7XG4gICAgICBmbGF0dGVuUm91dGVzKHJvdXRlLmNoaWxkcmVuLCBicmFuY2hlcywgcm91dGVzTWV0YSwgcGF0aCk7XG4gICAgfVxuICAgIC8vIFJvdXRlcyB3aXRob3V0IGEgcGF0aCBzaG91bGRuJ3QgZXZlciBtYXRjaCBieSB0aGVtc2VsdmVzIHVubGVzcyB0aGV5IGFyZVxuICAgIC8vIGluZGV4IHJvdXRlcywgc28gZG9uJ3QgYWRkIHRoZW0gdG8gdGhlIGxpc3Qgb2YgcG9zc2libGUgYnJhbmNoZXMuXG4gICAgaWYgKHJvdXRlLnBhdGggPT0gbnVsbCAmJiAhcm91dGUuaW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYnJhbmNoZXMucHVzaCh7XG4gICAgICBwYXRoLFxuICAgICAgc2NvcmU6IGNvbXB1dGVTY29yZShwYXRoLCByb3V0ZS5pbmRleCksXG4gICAgICByb3V0ZXNNZXRhXG4gICAgfSk7XG4gIH07XG4gIHJvdXRlcy5mb3JFYWNoKChyb3V0ZSwgaW5kZXgpID0+IHtcbiAgICB2YXIgX3JvdXRlJHBhdGg7XG4gICAgLy8gY29hcnNlLWdyYWluIGNoZWNrIGZvciBvcHRpb25hbCBwYXJhbXNcbiAgICBpZiAocm91dGUucGF0aCA9PT0gXCJcIiB8fCAhKChfcm91dGUkcGF0aCA9IHJvdXRlLnBhdGgpICE9IG51bGwgJiYgX3JvdXRlJHBhdGguaW5jbHVkZXMoXCI/XCIpKSkge1xuICAgICAgZmxhdHRlblJvdXRlKHJvdXRlLCBpbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGV4cGxvZGVkIG9mIGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHJvdXRlLnBhdGgpKSB7XG4gICAgICAgIGZsYXR0ZW5Sb3V0ZShyb3V0ZSwgaW5kZXgsIGV4cGxvZGVkKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYnJhbmNoZXM7XG59XG4vKipcbiAqIENvbXB1dGVzIGFsbCBjb21iaW5hdGlvbnMgb2Ygb3B0aW9uYWwgcGF0aCBzZWdtZW50cyBmb3IgYSBnaXZlbiBwYXRoLFxuICogZXhjbHVkaW5nIGNvbWJpbmF0aW9ucyB0aGF0IGFyZSBhbWJpZ3VvdXMgYW5kIG9mIGxvd2VyIHByaW9yaXR5LlxuICpcbiAqIEZvciBleGFtcGxlLCBgL29uZS86dHdvPy90aHJlZS86Zm91cj8vOmZpdmU/YCBleHBsb2RlcyB0bzpcbiAqIC0gYC9vbmUvdGhyZWVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWVgXG4gKiAtIGAvb25lL3RocmVlLzpmb3VyYFxuICogLSBgL29uZS90aHJlZS86Zml2ZWBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zm91cmBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zml2ZWBcbiAqIC0gYC9vbmUvdGhyZWUvOmZvdXIvOmZpdmVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWUvOmZvdXIvOmZpdmVgXG4gKi9cbmZ1bmN0aW9uIGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHBhdGgpIHtcbiAgbGV0IHNlZ21lbnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gIGlmIChzZWdtZW50cy5sZW5ndGggPT09IDApIHJldHVybiBbXTtcbiAgbGV0IFtmaXJzdCwgLi4ucmVzdF0gPSBzZWdtZW50cztcbiAgLy8gT3B0aW9uYWwgcGF0aCBzZWdtZW50cyBhcmUgZGVub3RlZCBieSBhIHRyYWlsaW5nIGA/YFxuICBsZXQgaXNPcHRpb25hbCA9IGZpcnN0LmVuZHNXaXRoKFwiP1wiKTtcbiAgLy8gQ29tcHV0ZSB0aGUgY29ycmVzcG9uZGluZyByZXF1aXJlZCBzZWdtZW50OiBgZm9vP2AgLT4gYGZvb2BcbiAgbGV0IHJlcXVpcmVkID0gZmlyc3QucmVwbGFjZSgvXFw/JC8sIFwiXCIpO1xuICBpZiAocmVzdC5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJbnRlcHJldCBlbXB0eSBzdHJpbmcgYXMgb21pdHRpbmcgYW4gb3B0aW9uYWwgc2VnbWVudFxuICAgIC8vIGBbXCJvbmVcIiwgXCJcIiwgXCJ0aHJlZVwiXWAgY29ycmVzcG9uZHMgdG8gb21pdHRpbmcgYDp0d29gIGZyb20gYC9vbmUvOnR3bz8vdGhyZWVgIC0+IGAvb25lL3RocmVlYFxuICAgIHJldHVybiBpc09wdGlvbmFsID8gW3JlcXVpcmVkLCBcIlwiXSA6IFtyZXF1aXJlZF07XG4gIH1cbiAgbGV0IHJlc3RFeHBsb2RlZCA9IGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHJlc3Quam9pbihcIi9cIikpO1xuICBsZXQgcmVzdWx0ID0gW107XG4gIC8vIEFsbCBjaGlsZCBwYXRocyB3aXRoIHRoZSBwcmVmaXguICBEbyB0aGlzIGZvciBhbGwgY2hpbGRyZW4gYmVmb3JlIHRoZVxuICAvLyBvcHRpb25hbCB2ZXJzaW9uIGZvciBhbGwgY2hpbGRyZW4gc28gd2UgZ2V0IGNvbnNpc3RlbnQgb3JkZXJpbmcgd2hlcmUgdGhlXG4gIC8vIHBhcmVudCBvcHRpb25hbCBhc3BlY3QgaXMgcHJlZmVycmVkIGFzIHJlcXVpcmVkLiAgT3RoZXJ3aXNlLCB3ZSBjYW4gZ2V0XG4gIC8vIGNoaWxkIHNlY3Rpb25zIGludGVyc3BlcnNlZCB3aGVyZSBkZWVwZXIgb3B0aW9uYWwgc2VnbWVudHMgYXJlIGhpZ2hlciB0aGFuXG4gIC8vIHBhcmVudCBvcHRpb25hbCBzZWdtZW50cywgd2hlcmUgZm9yIGV4YW1wbGUsIC86dHdvIHdvdWxkIGV4cGxvZGVzIF9lYXJsaWVyX1xuICAvLyB0aGVuIC86b25lLiAgQnkgYWx3YXlzIGluY2x1ZGluZyB0aGUgcGFyZW50IGFzIHJlcXVpcmVkIF9mb3IgYWxsIGNoaWxkcmVuX1xuICAvLyBmaXJzdCwgd2UgYXZvaWQgdGhpcyBpc3N1ZVxuICByZXN1bHQucHVzaCguLi5yZXN0RXhwbG9kZWQubWFwKHN1YnBhdGggPT4gc3VicGF0aCA9PT0gXCJcIiA/IHJlcXVpcmVkIDogW3JlcXVpcmVkLCBzdWJwYXRoXS5qb2luKFwiL1wiKSkpO1xuICAvLyBUaGVuIGlmIHRoaXMgaXMgYW4gb3B0aW9uYWwgdmFsdWUsIGFkZCBhbGwgY2hpbGQgdmVyc2lvbnMgd2l0aG91dFxuICBpZiAoaXNPcHRpb25hbCkge1xuICAgIHJlc3VsdC5wdXNoKC4uLnJlc3RFeHBsb2RlZCk7XG4gIH1cbiAgLy8gZm9yIGFic29sdXRlIHBhdGhzLCBlbnN1cmUgYC9gIGluc3RlYWQgb2YgZW1wdHkgc2VnbWVudFxuICByZXR1cm4gcmVzdWx0Lm1hcChleHBsb2RlZCA9PiBwYXRoLnN0YXJ0c1dpdGgoXCIvXCIpICYmIGV4cGxvZGVkID09PSBcIlwiID8gXCIvXCIgOiBleHBsb2RlZCk7XG59XG5mdW5jdGlvbiByYW5rUm91dGVCcmFuY2hlcyhicmFuY2hlcykge1xuICBicmFuY2hlcy5zb3J0KChhLCBiKSA9PiBhLnNjb3JlICE9PSBiLnNjb3JlID8gYi5zY29yZSAtIGEuc2NvcmUgLy8gSGlnaGVyIHNjb3JlIGZpcnN0XG4gIDogY29tcGFyZUluZGV4ZXMoYS5yb3V0ZXNNZXRhLm1hcChtZXRhID0+IG1ldGEuY2hpbGRyZW5JbmRleCksIGIucm91dGVzTWV0YS5tYXAobWV0YSA9PiBtZXRhLmNoaWxkcmVuSW5kZXgpKSk7XG59XG5jb25zdCBwYXJhbVJlID0gL146XFx3KyQvO1xuY29uc3QgZHluYW1pY1NlZ21lbnRWYWx1ZSA9IDM7XG5jb25zdCBpbmRleFJvdXRlVmFsdWUgPSAyO1xuY29uc3QgZW1wdHlTZWdtZW50VmFsdWUgPSAxO1xuY29uc3Qgc3RhdGljU2VnbWVudFZhbHVlID0gMTA7XG5jb25zdCBzcGxhdFBlbmFsdHkgPSAtMjtcbmNvbnN0IGlzU3BsYXQgPSBzID0+IHMgPT09IFwiKlwiO1xuZnVuY3Rpb24gY29tcHV0ZVNjb3JlKHBhdGgsIGluZGV4KSB7XG4gIGxldCBzZWdtZW50cyA9IHBhdGguc3BsaXQoXCIvXCIpO1xuICBsZXQgaW5pdGlhbFNjb3JlID0gc2VnbWVudHMubGVuZ3RoO1xuICBpZiAoc2VnbWVudHMuc29tZShpc1NwbGF0KSkge1xuICAgIGluaXRpYWxTY29yZSArPSBzcGxhdFBlbmFsdHk7XG4gIH1cbiAgaWYgKGluZGV4KSB7XG4gICAgaW5pdGlhbFNjb3JlICs9IGluZGV4Um91dGVWYWx1ZTtcbiAgfVxuICByZXR1cm4gc2VnbWVudHMuZmlsdGVyKHMgPT4gIWlzU3BsYXQocykpLnJlZHVjZSgoc2NvcmUsIHNlZ21lbnQpID0+IHNjb3JlICsgKHBhcmFtUmUudGVzdChzZWdtZW50KSA/IGR5bmFtaWNTZWdtZW50VmFsdWUgOiBzZWdtZW50ID09PSBcIlwiID8gZW1wdHlTZWdtZW50VmFsdWUgOiBzdGF0aWNTZWdtZW50VmFsdWUpLCBpbml0aWFsU2NvcmUpO1xufVxuZnVuY3Rpb24gY29tcGFyZUluZGV4ZXMoYSwgYikge1xuICBsZXQgc2libGluZ3MgPSBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5zbGljZSgwLCAtMSkuZXZlcnkoKG4sIGkpID0+IG4gPT09IGJbaV0pO1xuICByZXR1cm4gc2libGluZ3MgP1xuICAvLyBJZiB0d28gcm91dGVzIGFyZSBzaWJsaW5ncywgd2Ugc2hvdWxkIHRyeSB0byBtYXRjaCB0aGUgZWFybGllciBzaWJsaW5nXG4gIC8vIGZpcnN0LiBUaGlzIGFsbG93cyBwZW9wbGUgdG8gaGF2ZSBmaW5lLWdyYWluZWQgY29udHJvbCBvdmVyIHRoZSBtYXRjaGluZ1xuICAvLyBiZWhhdmlvciBieSBzaW1wbHkgcHV0dGluZyByb3V0ZXMgd2l0aCBpZGVudGljYWwgcGF0aHMgaW4gdGhlIG9yZGVyIHRoZXlcbiAgLy8gd2FudCB0aGVtIHRyaWVkLlxuICBhW2EubGVuZ3RoIC0gMV0gLSBiW2IubGVuZ3RoIC0gMV0gOlxuICAvLyBPdGhlcndpc2UsIGl0IGRvZXNuJ3QgcmVhbGx5IG1ha2Ugc2Vuc2UgdG8gcmFuayBub24tc2libGluZ3MgYnkgaW5kZXgsXG4gIC8vIHNvIHRoZXkgc29ydCBlcXVhbGx5LlxuICAwO1xufVxuZnVuY3Rpb24gbWF0Y2hSb3V0ZUJyYW5jaChicmFuY2gsIHBhdGhuYW1lKSB7XG4gIGxldCB7XG4gICAgcm91dGVzTWV0YVxuICB9ID0gYnJhbmNoO1xuICBsZXQgbWF0Y2hlZFBhcmFtcyA9IHt9O1xuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gXCIvXCI7XG4gIGxldCBtYXRjaGVzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcm91dGVzTWV0YS5sZW5ndGg7ICsraSkge1xuICAgIGxldCBtZXRhID0gcm91dGVzTWV0YVtpXTtcbiAgICBsZXQgZW5kID0gaSA9PT0gcm91dGVzTWV0YS5sZW5ndGggLSAxO1xuICAgIGxldCByZW1haW5pbmdQYXRobmFtZSA9IG1hdGNoZWRQYXRobmFtZSA9PT0gXCIvXCIgPyBwYXRobmFtZSA6IHBhdGhuYW1lLnNsaWNlKG1hdGNoZWRQYXRobmFtZS5sZW5ndGgpIHx8IFwiL1wiO1xuICAgIGxldCBtYXRjaCA9IG1hdGNoUGF0aCh7XG4gICAgICBwYXRoOiBtZXRhLnJlbGF0aXZlUGF0aCxcbiAgICAgIGNhc2VTZW5zaXRpdmU6IG1ldGEuY2FzZVNlbnNpdGl2ZSxcbiAgICAgIGVuZFxuICAgIH0sIHJlbWFpbmluZ1BhdGhuYW1lKTtcbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgICBPYmplY3QuYXNzaWduKG1hdGNoZWRQYXJhbXMsIG1hdGNoLnBhcmFtcyk7XG4gICAgbGV0IHJvdXRlID0gbWV0YS5yb3V0ZTtcbiAgICBtYXRjaGVzLnB1c2goe1xuICAgICAgLy8gVE9ETzogQ2FuIHRoaXMgYXMgYmUgYXZvaWRlZD9cbiAgICAgIHBhcmFtczogbWF0Y2hlZFBhcmFtcyxcbiAgICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVdKSxcbiAgICAgIHBhdGhuYW1lQmFzZTogbm9ybWFsaXplUGF0aG5hbWUoam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lQmFzZV0pKSxcbiAgICAgIHJvdXRlXG4gICAgfSk7XG4gICAgaWYgKG1hdGNoLnBhdGhuYW1lQmFzZSAhPT0gXCIvXCIpIHtcbiAgICAgIG1hdGNoZWRQYXRobmFtZSA9IGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG4vKipcbiAqIFJldHVybnMgYSBwYXRoIHdpdGggcGFyYW1zIGludGVycG9sYXRlZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL2dlbmVyYXRlLXBhdGhcbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKG9yaWdpbmFsUGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG4gIGxldCBwYXRoID0gb3JpZ2luYWxQYXRoO1xuICBpZiAocGF0aC5lbmRzV2l0aChcIipcIikgJiYgcGF0aCAhPT0gXCIqXCIgJiYgIXBhdGguZW5kc1dpdGgoXCIvKlwiKSkge1xuICAgIHdhcm5pbmcoZmFsc2UsIFwiUm91dGUgcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiIHdpbGwgYmUgdHJlYXRlZCBhcyBpZiBpdCB3ZXJlIFwiICsgKFwiXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIiBiZWNhdXNlIHRoZSBgKmAgY2hhcmFjdGVyIG11c3QgXCIpICsgXCJhbHdheXMgZm9sbG93IGEgYC9gIGluIHRoZSBwYXR0ZXJuLiBUbyBnZXQgcmlkIG9mIHRoaXMgd2FybmluZywgXCIgKyAoXCJwbGVhc2UgY2hhbmdlIHRoZSByb3V0ZSBwYXRoIHRvIFxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIuXCIpKTtcbiAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKTtcbiAgfVxuICAvLyBlbnN1cmUgYC9gIGlzIGFkZGVkIGF0IHRoZSBiZWdpbm5pbmcgaWYgdGhlIHBhdGggaXMgYWJzb2x1dGVcbiAgY29uc3QgcHJlZml4ID0gcGF0aC5zdGFydHNXaXRoKFwiL1wiKSA/IFwiL1wiIDogXCJcIjtcbiAgY29uc3Qgc3RyaW5naWZ5ID0gcCA9PiBwID09IG51bGwgPyBcIlwiIDogdHlwZW9mIHAgPT09IFwic3RyaW5nXCIgPyBwIDogU3RyaW5nKHApO1xuICBjb25zdCBzZWdtZW50cyA9IHBhdGguc3BsaXQoL1xcLysvKS5tYXAoKHNlZ21lbnQsIGluZGV4LCBhcnJheSkgPT4ge1xuICAgIGNvbnN0IGlzTGFzdFNlZ21lbnQgPSBpbmRleCA9PT0gYXJyYXkubGVuZ3RoIC0gMTtcbiAgICAvLyBvbmx5IGFwcGx5IHRoZSBzcGxhdCBpZiBpdCdzIHRoZSBsYXN0IHNlZ21lbnRcbiAgICBpZiAoaXNMYXN0U2VnbWVudCAmJiBzZWdtZW50ID09PSBcIipcIikge1xuICAgICAgY29uc3Qgc3RhciA9IFwiKlwiO1xuICAgICAgLy8gQXBwbHkgdGhlIHNwbGF0XG4gICAgICByZXR1cm4gc3RyaW5naWZ5KHBhcmFtc1tzdGFyXSk7XG4gICAgfVxuICAgIGNvbnN0IGtleU1hdGNoID0gc2VnbWVudC5tYXRjaCgvXjooXFx3KykoXFw/PykkLyk7XG4gICAgaWYgKGtleU1hdGNoKSB7XG4gICAgICBjb25zdCBbLCBrZXksIG9wdGlvbmFsXSA9IGtleU1hdGNoO1xuICAgICAgbGV0IHBhcmFtID0gcGFyYW1zW2tleV07XG4gICAgICBpbnZhcmlhbnQob3B0aW9uYWwgPT09IFwiP1wiIHx8IHBhcmFtICE9IG51bGwsIFwiTWlzc2luZyBcXFwiOlwiICsga2V5ICsgXCJcXFwiIHBhcmFtXCIpO1xuICAgICAgcmV0dXJuIHN0cmluZ2lmeShwYXJhbSk7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBhbnkgb3B0aW9uYWwgbWFya2VycyBmcm9tIG9wdGlvbmFsIHN0YXRpYyBzZWdtZW50c1xuICAgIHJldHVybiBzZWdtZW50LnJlcGxhY2UoL1xcPyQvZywgXCJcIik7XG4gIH0pXG4gIC8vIFJlbW92ZSBlbXB0eSBzZWdtZW50c1xuICAuZmlsdGVyKHNlZ21lbnQgPT4gISFzZWdtZW50KTtcbiAgcmV0dXJuIHByZWZpeCArIHNlZ21lbnRzLmpvaW4oXCIvXCIpO1xufVxuLyoqXG4gKiBQZXJmb3JtcyBwYXR0ZXJuIG1hdGNoaW5nIG9uIGEgVVJMIHBhdGhuYW1lIGFuZCByZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0XG4gKiB0aGUgbWF0Y2guXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9tYXRjaC1wYXRoXG4gKi9cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXR0ZXJuLCBwYXRobmFtZSkge1xuICBpZiAodHlwZW9mIHBhdHRlcm4gPT09IFwic3RyaW5nXCIpIHtcbiAgICBwYXR0ZXJuID0ge1xuICAgICAgcGF0aDogcGF0dGVybixcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGZhbHNlLFxuICAgICAgZW5kOiB0cnVlXG4gICAgfTtcbiAgfVxuICBsZXQgW21hdGNoZXIsIHBhcmFtTmFtZXNdID0gY29tcGlsZVBhdGgocGF0dGVybi5wYXRoLCBwYXR0ZXJuLmNhc2VTZW5zaXRpdmUsIHBhdHRlcm4uZW5kKTtcbiAgbGV0IG1hdGNoID0gcGF0aG5hbWUubWF0Y2gobWF0Y2hlcik7XG4gIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gbWF0Y2hbMF07XG4gIGxldCBwYXRobmFtZUJhc2UgPSBtYXRjaGVkUGF0aG5hbWUucmVwbGFjZSgvKC4pXFwvKyQvLCBcIiQxXCIpO1xuICBsZXQgY2FwdHVyZUdyb3VwcyA9IG1hdGNoLnNsaWNlKDEpO1xuICBsZXQgcGFyYW1zID0gcGFyYW1OYW1lcy5yZWR1Y2UoKG1lbW8sIHBhcmFtTmFtZSwgaW5kZXgpID0+IHtcbiAgICAvLyBXZSBuZWVkIHRvIGNvbXB1dGUgdGhlIHBhdGhuYW1lQmFzZSBoZXJlIHVzaW5nIHRoZSByYXcgc3BsYXQgdmFsdWVcbiAgICAvLyBpbnN0ZWFkIG9mIHVzaW5nIHBhcmFtc1tcIipcIl0gbGF0ZXIgYmVjYXVzZSBpdCB3aWxsIGJlIGRlY29kZWQgdGhlblxuICAgIGlmIChwYXJhbU5hbWUgPT09IFwiKlwiKSB7XG4gICAgICBsZXQgc3BsYXRWYWx1ZSA9IGNhcHR1cmVHcm91cHNbaW5kZXhdIHx8IFwiXCI7XG4gICAgICBwYXRobmFtZUJhc2UgPSBtYXRjaGVkUGF0aG5hbWUuc2xpY2UoMCwgbWF0Y2hlZFBhdGhuYW1lLmxlbmd0aCAtIHNwbGF0VmFsdWUubGVuZ3RoKS5yZXBsYWNlKC8oLilcXC8rJC8sIFwiJDFcIik7XG4gICAgfVxuICAgIG1lbW9bcGFyYW1OYW1lXSA9IHNhZmVseURlY29kZVVSSUNvbXBvbmVudChjYXB0dXJlR3JvdXBzW2luZGV4XSB8fCBcIlwiLCBwYXJhbU5hbWUpO1xuICAgIHJldHVybiBtZW1vO1xuICB9LCB7fSk7XG4gIHJldHVybiB7XG4gICAgcGFyYW1zLFxuICAgIHBhdGhuYW1lOiBtYXRjaGVkUGF0aG5hbWUsXG4gICAgcGF0aG5hbWVCYXNlLFxuICAgIHBhdHRlcm5cbiAgfTtcbn1cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgsIGNhc2VTZW5zaXRpdmUsIGVuZCkge1xuICBpZiAoY2FzZVNlbnNpdGl2ZSA9PT0gdm9pZCAwKSB7XG4gICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlO1xuICB9XG4gIGlmIChlbmQgPT09IHZvaWQgMCkge1xuICAgIGVuZCA9IHRydWU7XG4gIH1cbiAgd2FybmluZyhwYXRoID09PSBcIipcIiB8fCAhcGF0aC5lbmRzV2l0aChcIipcIikgfHwgcGF0aC5lbmRzV2l0aChcIi8qXCIpLCBcIlJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIiB3aWxsIGJlIHRyZWF0ZWQgYXMgaWYgaXQgd2VyZSBcIiArIChcIlxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIgYmVjYXVzZSB0aGUgYCpgIGNoYXJhY3RlciBtdXN0IFwiKSArIFwiYWx3YXlzIGZvbGxvdyBhIGAvYCBpbiB0aGUgcGF0dGVybi4gVG8gZ2V0IHJpZCBvZiB0aGlzIHdhcm5pbmcsIFwiICsgKFwicGxlYXNlIGNoYW5nZSB0aGUgcm91dGUgcGF0aCB0byBcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiLlwiKSk7XG4gIGxldCBwYXJhbU5hbWVzID0gW107XG4gIGxldCByZWdleHBTb3VyY2UgPSBcIl5cIiArIHBhdGgucmVwbGFjZSgvXFwvKlxcKj8kLywgXCJcIikgLy8gSWdub3JlIHRyYWlsaW5nIC8gYW5kIC8qLCB3ZSdsbCBoYW5kbGUgaXQgYmVsb3dcbiAgLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpIC8vIE1ha2Ugc3VyZSBpdCBoYXMgYSBsZWFkaW5nIC9cbiAgLnJlcGxhY2UoL1tcXFxcLiorXiQ/e318KClbXFxdXS9nLCBcIlxcXFwkJlwiKSAvLyBFc2NhcGUgc3BlY2lhbCByZWdleCBjaGFyc1xuICAucmVwbGFjZSgvXFwvOihcXHcrKS9nLCAoXywgcGFyYW1OYW1lKSA9PiB7XG4gICAgcGFyYW1OYW1lcy5wdXNoKHBhcmFtTmFtZSk7XG4gICAgcmV0dXJuIFwiLyhbXlxcXFwvXSspXCI7XG4gIH0pO1xuICBpZiAocGF0aC5lbmRzV2l0aChcIipcIikpIHtcbiAgICBwYXJhbU5hbWVzLnB1c2goXCIqXCIpO1xuICAgIHJlZ2V4cFNvdXJjZSArPSBwYXRoID09PSBcIipcIiB8fCBwYXRoID09PSBcIi8qXCIgPyBcIiguKikkXCIgLy8gQWxyZWFkeSBtYXRjaGVkIHRoZSBpbml0aWFsIC8sIGp1c3QgbWF0Y2ggdGhlIHJlc3RcbiAgICA6IFwiKD86XFxcXC8oLispfFxcXFwvKikkXCI7IC8vIERvbid0IGluY2x1ZGUgdGhlIC8gaW4gcGFyYW1zW1wiKlwiXVxuICB9IGVsc2UgaWYgKGVuZCkge1xuICAgIC8vIFdoZW4gbWF0Y2hpbmcgdG8gdGhlIGVuZCwgaWdub3JlIHRyYWlsaW5nIHNsYXNoZXNcbiAgICByZWdleHBTb3VyY2UgKz0gXCJcXFxcLyokXCI7XG4gIH0gZWxzZSBpZiAocGF0aCAhPT0gXCJcIiAmJiBwYXRoICE9PSBcIi9cIikge1xuICAgIC8vIElmIG91ciBwYXRoIGlzIG5vbi1lbXB0eSBhbmQgY29udGFpbnMgYW55dGhpbmcgYmV5b25kIGFuIGluaXRpYWwgc2xhc2gsXG4gICAgLy8gdGhlbiB3ZSBoYXZlIF9zb21lXyBmb3JtIG9mIHBhdGggaW4gb3VyIHJlZ2V4IHNvIHdlIHNob3VsZCBleHBlY3QgdG9cbiAgICAvLyBtYXRjaCBvbmx5IGlmIHdlIGZpbmQgdGhlIGVuZCBvZiB0aGlzIHBhdGggc2VnbWVudC4gIExvb2sgZm9yIGFuIG9wdGlvbmFsXG4gICAgLy8gbm9uLWNhcHR1cmVkIHRyYWlsaW5nIHNsYXNoICh0byBtYXRjaCBhIHBvcnRpb24gb2YgdGhlIFVSTCkgb3IgdGhlIGVuZFxuICAgIC8vIG9mIHRoZSBwYXRoIChpZiB3ZSd2ZSBtYXRjaGVkIHRvIHRoZSBlbmQpLiAgV2UgdXNlZCB0byBkbyB0aGlzIHdpdGggYVxuICAgIC8vIHdvcmQgYm91bmRhcnkgYnV0IHRoYXQgZ2l2ZXMgZmFsc2UgcG9zaXRpdmVzIG9uIHJvdXRlcyBsaWtlXG4gICAgLy8gL3VzZXItcHJlZmVyZW5jZXMgc2luY2UgYC1gIGNvdW50cyBhcyBhIHdvcmQgYm91bmRhcnkuXG4gICAgcmVnZXhwU291cmNlICs9IFwiKD86KD89XFxcXC98JCkpXCI7XG4gIH0gZWxzZSA7XG4gIGxldCBtYXRjaGVyID0gbmV3IFJlZ0V4cChyZWdleHBTb3VyY2UsIGNhc2VTZW5zaXRpdmUgPyB1bmRlZmluZWQgOiBcImlcIik7XG4gIHJldHVybiBbbWF0Y2hlciwgcGFyYW1OYW1lc107XG59XG5mdW5jdGlvbiBzYWZlbHlEZWNvZGVVUkkodmFsdWUpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJKHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB3YXJuaW5nKGZhbHNlLCBcIlRoZSBVUkwgcGF0aCBcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiBjb3VsZCBub3QgYmUgZGVjb2RlZCBiZWNhdXNlIGl0IGlzIGlzIGEgXCIgKyBcIm1hbGZvcm1lZCBVUkwgc2VnbWVudC4gVGhpcyBpcyBwcm9iYWJseSBkdWUgdG8gYSBiYWQgcGVyY2VudCBcIiArIChcImVuY29kaW5nIChcIiArIGVycm9yICsgXCIpLlwiKSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5mdW5jdGlvbiBzYWZlbHlEZWNvZGVVUklDb21wb25lbnQodmFsdWUsIHBhcmFtTmFtZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdhcm5pbmcoZmFsc2UsIFwiVGhlIHZhbHVlIGZvciB0aGUgVVJMIHBhcmFtIFxcXCJcIiArIHBhcmFtTmFtZSArIFwiXFxcIiB3aWxsIG5vdCBiZSBkZWNvZGVkIGJlY2F1c2VcIiArIChcIiB0aGUgc3RyaW5nIFxcXCJcIiArIHZhbHVlICsgXCJcXFwiIGlzIGEgbWFsZm9ybWVkIFVSTCBzZWdtZW50LiBUaGlzIGlzIHByb2JhYmx5XCIpICsgKFwiIGR1ZSB0byBhIGJhZCBwZXJjZW50IGVuY29kaW5nIChcIiArIGVycm9yICsgXCIpLlwiKSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aG5hbWUsIGJhc2VuYW1lKSB7XG4gIGlmIChiYXNlbmFtZSA9PT0gXCIvXCIpIHJldHVybiBwYXRobmFtZTtcbiAgaWYgKCFwYXRobmFtZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoYmFzZW5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvLyBXZSB3YW50IHRvIGxlYXZlIHRyYWlsaW5nIHNsYXNoIGJlaGF2aW9yIGluIHRoZSB1c2VyJ3MgY29udHJvbCwgc28gaWYgdGhleVxuICAvLyBzcGVjaWZ5IGEgYmFzZW5hbWUgd2l0aCBhIHRyYWlsaW5nIHNsYXNoLCB3ZSBzaG91bGQgc3VwcG9ydCBpdFxuICBsZXQgc3RhcnRJbmRleCA9IGJhc2VuYW1lLmVuZHNXaXRoKFwiL1wiKSA/IGJhc2VuYW1lLmxlbmd0aCAtIDEgOiBiYXNlbmFtZS5sZW5ndGg7XG4gIGxldCBuZXh0Q2hhciA9IHBhdGhuYW1lLmNoYXJBdChzdGFydEluZGV4KTtcbiAgaWYgKG5leHRDaGFyICYmIG5leHRDaGFyICE9PSBcIi9cIikge1xuICAgIC8vIHBhdGhuYW1lIGRvZXMgbm90IHN0YXJ0IHdpdGggYmFzZW5hbWUvXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIHBhdGhuYW1lLnNsaWNlKHN0YXJ0SW5kZXgpIHx8IFwiL1wiO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgcmVzb2x2ZWQgcGF0aCBvYmplY3QgcmVsYXRpdmUgdG8gdGhlIGdpdmVuIHBhdGhuYW1lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvcmVzb2x2ZS1wYXRoXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVQYXRoKHRvLCBmcm9tUGF0aG5hbWUpIHtcbiAgaWYgKGZyb21QYXRobmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgZnJvbVBhdGhuYW1lID0gXCIvXCI7XG4gIH1cbiAgbGV0IHtcbiAgICBwYXRobmFtZTogdG9QYXRobmFtZSxcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiXG4gIH0gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG87XG4gIGxldCBwYXRobmFtZSA9IHRvUGF0aG5hbWUgPyB0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIvXCIpID8gdG9QYXRobmFtZSA6IHJlc29sdmVQYXRobmFtZSh0b1BhdGhuYW1lLCBmcm9tUGF0aG5hbWUpIDogZnJvbVBhdGhuYW1lO1xuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lLFxuICAgIHNlYXJjaDogbm9ybWFsaXplU2VhcmNoKHNlYXJjaCksXG4gICAgaGFzaDogbm9ybWFsaXplSGFzaChoYXNoKVxuICB9O1xufVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHJlbGF0aXZlUGF0aCwgZnJvbVBhdGhuYW1lKSB7XG4gIGxldCBzZWdtZW50cyA9IGZyb21QYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpLnNwbGl0KFwiL1wiKTtcbiAgbGV0IHJlbGF0aXZlU2VnbWVudHMgPSByZWxhdGl2ZVBhdGguc3BsaXQoXCIvXCIpO1xuICByZWxhdGl2ZVNlZ21lbnRzLmZvckVhY2goc2VnbWVudCA9PiB7XG4gICAgaWYgKHNlZ21lbnQgPT09IFwiLi5cIikge1xuICAgICAgLy8gS2VlcCB0aGUgcm9vdCBcIlwiIHNlZ21lbnQgc28gdGhlIHBhdGhuYW1lIHN0YXJ0cyBhdCAvXG4gICAgICBpZiAoc2VnbWVudHMubGVuZ3RoID4gMSkgc2VnbWVudHMucG9wKCk7XG4gICAgfSBlbHNlIGlmIChzZWdtZW50ICE9PSBcIi5cIikge1xuICAgICAgc2VnbWVudHMucHVzaChzZWdtZW50KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc2VnbWVudHMubGVuZ3RoID4gMSA/IHNlZ21lbnRzLmpvaW4oXCIvXCIpIDogXCIvXCI7XG59XG5mdW5jdGlvbiBnZXRJbnZhbGlkUGF0aEVycm9yKGNoYXIsIGZpZWxkLCBkZXN0LCBwYXRoKSB7XG4gIHJldHVybiBcIkNhbm5vdCBpbmNsdWRlIGEgJ1wiICsgY2hhciArIFwiJyBjaGFyYWN0ZXIgaW4gYSBtYW51YWxseSBzcGVjaWZpZWQgXCIgKyAoXCJgdG8uXCIgKyBmaWVsZCArIFwiYCBmaWVsZCBbXCIgKyBKU09OLnN0cmluZ2lmeShwYXRoKSArIFwiXS4gIFBsZWFzZSBzZXBhcmF0ZSBpdCBvdXQgdG8gdGhlIFwiKSArIChcImB0by5cIiArIGRlc3QgKyBcImAgZmllbGQuIEFsdGVybmF0aXZlbHkgeW91IG1heSBwcm92aWRlIHRoZSBmdWxsIHBhdGggYXMgXCIpICsgXCJhIHN0cmluZyBpbiA8TGluayB0bz1cXFwiLi4uXFxcIj4gYW5kIHRoZSByb3V0ZXIgd2lsbCBwYXJzZSBpdCBmb3IgeW91LlwiO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICpcbiAqIFdoZW4gcHJvY2Vzc2luZyByZWxhdGl2ZSBuYXZpZ2F0aW9uIHdlIHdhbnQgdG8gaWdub3JlIGFuY2VzdG9yIHJvdXRlcyB0aGF0XG4gKiBkbyBub3QgY29udHJpYnV0ZSB0byB0aGUgcGF0aCwgc3VjaCB0aGF0IGluZGV4L3BhdGhsZXNzIGxheW91dCByb3V0ZXMgZG9uJ3RcbiAqIGludGVyZmVyZS5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgd2hlbiBtb3ZpbmcgYSByb3V0ZSBlbGVtZW50IGludG8gYW4gaW5kZXggcm91dGUgYW5kL29yIGFcbiAqIHBhdGhsZXNzIGxheW91dCByb3V0ZSwgcmVsYXRpdmUgbGluayBiZWhhdmlvciBjb250YWluZWQgd2l0aGluIHNob3VsZCBzdGF5XG4gKiB0aGUgc2FtZS4gIEJvdGggb2YgdGhlIGZvbGxvd2luZyBleGFtcGxlcyBzaG91bGQgbGluayBiYWNrIHRvIHRoZSByb290OlxuICpcbiAqICAgPFJvdXRlIHBhdGg9XCIvXCI+XG4gKiAgICAgPFJvdXRlIHBhdGg9XCJhY2NvdW50c1wiIGVsZW1lbnQ9ezxMaW5rIHRvPVwiLi5cIn0+XG4gKiAgIDwvUm91dGU+XG4gKlxuICogICA8Um91dGUgcGF0aD1cIi9cIj5cbiAqICAgICA8Um91dGUgcGF0aD1cImFjY291bnRzXCI+XG4gKiAgICAgICA8Um91dGUgZWxlbWVudD17PEFjY291bnRzTGF5b3V0IC8+fT4gICAgICAgLy8gPC0tIERvZXMgbm90IGNvbnRyaWJ1dGVcbiAqICAgICAgICAgPFJvdXRlIGluZGV4IGVsZW1lbnQ9ezxMaW5rIHRvPVwiLi5cIn0gLz4gIC8vIDwtLSBEb2VzIG5vdCBjb250cmlidXRlXG4gKiAgICAgICA8L1JvdXRlXG4gKiAgICAgPC9Sb3V0ZT5cbiAqICAgPC9Sb3V0ZT5cbiAqL1xuZnVuY3Rpb24gZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcykge1xuICByZXR1cm4gbWF0Y2hlcy5maWx0ZXIoKG1hdGNoLCBpbmRleCkgPT4gaW5kZXggPT09IDAgfHwgbWF0Y2gucm91dGUucGF0aCAmJiBtYXRjaC5yb3V0ZS5wYXRoLmxlbmd0aCA+IDApO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZXNvbHZlVG8odG9BcmcsIHJvdXRlUGF0aG5hbWVzLCBsb2NhdGlvblBhdGhuYW1lLCBpc1BhdGhSZWxhdGl2ZSkge1xuICBpZiAoaXNQYXRoUmVsYXRpdmUgPT09IHZvaWQgMCkge1xuICAgIGlzUGF0aFJlbGF0aXZlID0gZmFsc2U7XG4gIH1cbiAgbGV0IHRvO1xuICBpZiAodHlwZW9mIHRvQXJnID09PSBcInN0cmluZ1wiKSB7XG4gICAgdG8gPSBwYXJzZVBhdGgodG9BcmcpO1xuICB9IGVsc2Uge1xuICAgIHRvID0gX2V4dGVuZHMoe30sIHRvQXJnKTtcbiAgICBpbnZhcmlhbnQoIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcyhcIj9cIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCI/XCIsIFwicGF0aG5hbWVcIiwgXCJzZWFyY2hcIiwgdG8pKTtcbiAgICBpbnZhcmlhbnQoIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcyhcIiNcIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCIjXCIsIFwicGF0aG5hbWVcIiwgXCJoYXNoXCIsIHRvKSk7XG4gICAgaW52YXJpYW50KCF0by5zZWFyY2ggfHwgIXRvLnNlYXJjaC5pbmNsdWRlcyhcIiNcIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCIjXCIsIFwic2VhcmNoXCIsIFwiaGFzaFwiLCB0bykpO1xuICB9XG4gIGxldCBpc0VtcHR5UGF0aCA9IHRvQXJnID09PSBcIlwiIHx8IHRvLnBhdGhuYW1lID09PSBcIlwiO1xuICBsZXQgdG9QYXRobmFtZSA9IGlzRW1wdHlQYXRoID8gXCIvXCIgOiB0by5wYXRobmFtZTtcbiAgbGV0IGZyb207XG4gIC8vIFJvdXRpbmcgaXMgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgcGF0aG5hbWUgaWYgZXhwbGljaXRseSByZXF1ZXN0ZWQuXG4gIC8vXG4gIC8vIElmIGEgcGF0aG5hbWUgaXMgZXhwbGljaXRseSBwcm92aWRlZCBpbiBgdG9gLCBpdCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlXG4gIC8vIHJvdXRlIGNvbnRleHQuIFRoaXMgaXMgZXhwbGFpbmVkIGluIGBOb3RlIG9uIGA8TGluayB0bz5gIHZhbHVlc2AgaW4gb3VyXG4gIC8vIG1pZ3JhdGlvbiBndWlkZSBmcm9tIHY1IGFzIGEgbWVhbnMgb2YgZGlzYW1iaWd1YXRpb24gYmV0d2VlbiBgdG9gIHZhbHVlc1xuICAvLyB0aGF0IGJlZ2luIHdpdGggYC9gIGFuZCB0aG9zZSB0aGF0IGRvIG5vdC4gSG93ZXZlciwgdGhpcyBpcyBwcm9ibGVtYXRpYyBmb3JcbiAgLy8gYHRvYCB2YWx1ZXMgdGhhdCBkbyBub3QgcHJvdmlkZSBhIHBhdGhuYW1lLiBgdG9gIGNhbiBzaW1wbHkgYmUgYSBzZWFyY2ggb3JcbiAgLy8gaGFzaCBzdHJpbmcsIGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkIGFzc3VtZSB0aGF0IHRoZSBuYXZpZ2F0aW9uIGlzIHJlbGF0aXZlXG4gIC8vIHRvIHRoZSBjdXJyZW50IGxvY2F0aW9uJ3MgcGF0aG5hbWUgYW5kICpub3QqIHRoZSByb3V0ZSBwYXRobmFtZS5cbiAgaWYgKGlzUGF0aFJlbGF0aXZlIHx8IHRvUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIGZyb20gPSBsb2NhdGlvblBhdGhuYW1lO1xuICB9IGVsc2Uge1xuICAgIGxldCByb3V0ZVBhdGhuYW1lSW5kZXggPSByb3V0ZVBhdGhuYW1lcy5sZW5ndGggLSAxO1xuICAgIGlmICh0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIuLlwiKSkge1xuICAgICAgbGV0IHRvU2VnbWVudHMgPSB0b1BhdGhuYW1lLnNwbGl0KFwiL1wiKTtcbiAgICAgIC8vIEVhY2ggbGVhZGluZyAuLiBzZWdtZW50IG1lYW5zIFwiZ28gdXAgb25lIHJvdXRlXCIgaW5zdGVhZCBvZiBcImdvIHVwIG9uZVxuICAgICAgLy8gVVJMIHNlZ21lbnRcIi4gIFRoaXMgaXMgYSBrZXkgZGlmZmVyZW5jZSBmcm9tIGhvdyA8YSBocmVmPiB3b3JrcyBhbmQgYVxuICAgICAgLy8gbWFqb3IgcmVhc29uIHdlIGNhbGwgdGhpcyBhIFwidG9cIiB2YWx1ZSBpbnN0ZWFkIG9mIGEgXCJocmVmXCIuXG4gICAgICB3aGlsZSAodG9TZWdtZW50c1swXSA9PT0gXCIuLlwiKSB7XG4gICAgICAgIHRvU2VnbWVudHMuc2hpZnQoKTtcbiAgICAgICAgcm91dGVQYXRobmFtZUluZGV4IC09IDE7XG4gICAgICB9XG4gICAgICB0by5wYXRobmFtZSA9IHRvU2VnbWVudHMuam9pbihcIi9cIik7XG4gICAgfVxuICAgIC8vIElmIHRoZXJlIGFyZSBtb3JlIFwiLi5cIiBzZWdtZW50cyB0aGFuIHBhcmVudCByb3V0ZXMsIHJlc29sdmUgcmVsYXRpdmUgdG9cbiAgICAvLyB0aGUgcm9vdCAvIFVSTC5cbiAgICBmcm9tID0gcm91dGVQYXRobmFtZUluZGV4ID49IDAgPyByb3V0ZVBhdGhuYW1lc1tyb3V0ZVBhdGhuYW1lSW5kZXhdIDogXCIvXCI7XG4gIH1cbiAgbGV0IHBhdGggPSByZXNvbHZlUGF0aCh0bywgZnJvbSk7XG4gIC8vIEVuc3VyZSB0aGUgcGF0aG5hbWUgaGFzIGEgdHJhaWxpbmcgc2xhc2ggaWYgdGhlIG9yaWdpbmFsIFwidG9cIiBoYWQgb25lXG4gIGxldCBoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2ggPSB0b1BhdGhuYW1lICYmIHRvUGF0aG5hbWUgIT09IFwiL1wiICYmIHRvUGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpO1xuICAvLyBPciBpZiB0aGlzIHdhcyBhIGxpbmsgdG8gdGhlIGN1cnJlbnQgcGF0aCB3aGljaCBoYXMgYSB0cmFpbGluZyBzbGFzaFxuICBsZXQgaGFzQ3VycmVudFRyYWlsaW5nU2xhc2ggPSAoaXNFbXB0eVBhdGggfHwgdG9QYXRobmFtZSA9PT0gXCIuXCIpICYmIGxvY2F0aW9uUGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpO1xuICBpZiAoIXBhdGgucGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpICYmIChoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2ggfHwgaGFzQ3VycmVudFRyYWlsaW5nU2xhc2gpKSB7XG4gICAgcGF0aC5wYXRobmFtZSArPSBcIi9cIjtcbiAgfVxuICByZXR1cm4gcGF0aDtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0VG9QYXRobmFtZSh0bykge1xuICAvLyBFbXB0eSBzdHJpbmdzIHNob3VsZCBiZSB0cmVhdGVkIHRoZSBzYW1lIGFzIC8gcGF0aHNcbiAgcmV0dXJuIHRvID09PSBcIlwiIHx8IHRvLnBhdGhuYW1lID09PSBcIlwiID8gXCIvXCIgOiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pLnBhdGhuYW1lIDogdG8ucGF0aG5hbWU7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IGpvaW5QYXRocyA9IHBhdGhzID0+IHBhdGhzLmpvaW4oXCIvXCIpLnJlcGxhY2UoL1xcL1xcLysvZywgXCIvXCIpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBub3JtYWxpemVQYXRobmFtZSA9IHBhdGhuYW1lID0+IHBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgXCJcIikucmVwbGFjZSgvXlxcLyovLCBcIi9cIik7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IG5vcm1hbGl6ZVNlYXJjaCA9IHNlYXJjaCA9PiAhc2VhcmNoIHx8IHNlYXJjaCA9PT0gXCI/XCIgPyBcIlwiIDogc2VhcmNoLnN0YXJ0c1dpdGgoXCI/XCIpID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IG5vcm1hbGl6ZUhhc2ggPSBoYXNoID0+ICFoYXNoIHx8IGhhc2ggPT09IFwiI1wiID8gXCJcIiA6IGhhc2guc3RhcnRzV2l0aChcIiNcIikgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuLyoqXG4gKiBUaGlzIGlzIGEgc2hvcnRjdXQgZm9yIGNyZWF0aW5nIGBhcHBsaWNhdGlvbi9qc29uYCByZXNwb25zZXMuIENvbnZlcnRzIGBkYXRhYFxuICogdG8gSlNPTiBhbmQgc2V0cyB0aGUgYENvbnRlbnQtVHlwZWAgaGVhZGVyLlxuICovXG5jb25zdCBqc29uID0gZnVuY3Rpb24ganNvbihkYXRhLCBpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0ge307XG4gIH1cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IHR5cGVvZiBpbml0ID09PSBcIm51bWJlclwiID8ge1xuICAgIHN0YXR1czogaW5pdFxuICB9IDogaW5pdDtcbiAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhyZXNwb25zZUluaXQuaGVhZGVycyk7XG4gIGlmICghaGVhZGVycy5oYXMoXCJDb250ZW50LVR5cGVcIikpIHtcbiAgICBoZWFkZXJzLnNldChcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIik7XG4gIH1cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShkYXRhKSwgX2V4dGVuZHMoe30sIHJlc3BvbnNlSW5pdCwge1xuICAgIGhlYWRlcnNcbiAgfSkpO1xufTtcbmNsYXNzIEFib3J0ZWREZWZlcnJlZEVycm9yIGV4dGVuZHMgRXJyb3Ige31cbmNsYXNzIERlZmVycmVkRGF0YSB7XG4gIGNvbnN0cnVjdG9yKGRhdGEsIHJlc3BvbnNlSW5pdCkge1xuICAgIHRoaXMucGVuZGluZ0tleXNTZXQgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLmRlZmVycmVkS2V5cyA9IFtdO1xuICAgIGludmFyaWFudChkYXRhICYmIHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KGRhdGEpLCBcImRlZmVyKCkgb25seSBhY2NlcHRzIHBsYWluIG9iamVjdHNcIik7XG4gICAgLy8gU2V0IHVwIGFuIEFib3J0Q29udHJvbGxlciArIFByb21pc2Ugd2UgY2FuIHJhY2UgYWdhaW5zdCB0byBleGl0IGVhcmx5XG4gICAgLy8gY2FuY2VsbGF0aW9uXG4gICAgbGV0IHJlamVjdDtcbiAgICB0aGlzLmFib3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByKSA9PiByZWplY3QgPSByKTtcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IG9uQWJvcnQgPSAoKSA9PiByZWplY3QobmV3IEFib3J0ZWREZWZlcnJlZEVycm9yKFwiRGVmZXJyZWQgZGF0YSBhYm9ydGVkXCIpKTtcbiAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwgPSAoKSA9PiB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICB0aGlzLmRhdGEgPSBPYmplY3QuZW50cmllcyhkYXRhKS5yZWR1Y2UoKGFjYywgX3JlZikgPT4ge1xuICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWY7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgW2tleV06IHRoaXMudHJhY2tQcm9taXNlKGtleSwgdmFsdWUpXG4gICAgICB9KTtcbiAgICB9LCB7fSk7XG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgLy8gQWxsIGluY29taW5nIHZhbHVlcyB3ZXJlIHJlc29sdmVkXG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICB9XG4gICAgdGhpcy5pbml0ID0gcmVzcG9uc2VJbml0O1xuICB9XG4gIHRyYWNrUHJvbWlzZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICB0aGlzLmRlZmVycmVkS2V5cy5wdXNoKGtleSk7XG4gICAgdGhpcy5wZW5kaW5nS2V5c1NldC5hZGQoa2V5KTtcbiAgICAvLyBXZSBzdG9yZSBhIGxpdHRsZSB3cmFwcGVyIHByb21pc2UgdGhhdCB3aWxsIGJlIGV4dGVuZGVkIHdpdGhcbiAgICAvLyBfZGF0YS9fZXJyb3IgcHJvcHMgdXBvbiByZXNvbHZlL3JlamVjdFxuICAgIGxldCBwcm9taXNlID0gUHJvbWlzZS5yYWNlKFt2YWx1ZSwgdGhpcy5hYm9ydFByb21pc2VdKS50aGVuKGRhdGEgPT4gdGhpcy5vblNldHRsZShwcm9taXNlLCBrZXksIHVuZGVmaW5lZCwgZGF0YSksIGVycm9yID0+IHRoaXMub25TZXR0bGUocHJvbWlzZSwga2V5LCBlcnJvcikpO1xuICAgIC8vIFJlZ2lzdGVyIHJlamVjdGlvbiBsaXN0ZW5lcnMgdG8gYXZvaWQgdW5jYXVnaHQgcHJvbWlzZSByZWplY3Rpb25zIG9uXG4gICAgLy8gZXJyb3JzIG9yIGFib3J0ZWQgZGVmZXJyZWQgdmFsdWVzXG4gICAgcHJvbWlzZS5jYXRjaCgoKSA9PiB7fSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cbiAgb25TZXR0bGUocHJvbWlzZSwga2V5LCBlcnJvciwgZGF0YSkge1xuICAgIGlmICh0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQgJiYgZXJyb3IgaW5zdGFuY2VvZiBBYm9ydGVkRGVmZXJyZWRFcnJvcikge1xuICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsKCk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGVycm9yXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuICAgIHRoaXMucGVuZGluZ0tleXNTZXQuZGVsZXRlKGtleSk7XG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgLy8gTm90aGluZyBsZWZ0IHRvIGFib3J0IVxuICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsKCk7XG4gICAgfVxuICAgIC8vIElmIHRoZSBwcm9taXNlIHdhcyByZXNvbHZlZC9yZWplY3RlZCB3aXRoIHVuZGVmaW5lZCwgd2UnbGwgdGhyb3cgYW4gZXJyb3IgYXMgeW91XG4gICAgLy8gc2hvdWxkIGFsd2F5cyByZXNvbHZlIHdpdGggYSB2YWx1ZSBvciBudWxsXG4gICAgaWYgKGVycm9yID09PSB1bmRlZmluZWQgJiYgZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBsZXQgdW5kZWZpbmVkRXJyb3IgPSBuZXcgRXJyb3IoXCJEZWZlcnJlZCBkYXRhIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJlc29sdmVkL3JlamVjdGVkIHdpdGggYHVuZGVmaW5lZGAsIFwiICsgXCJ5b3UgbXVzdCByZXNvbHZlL3JlamVjdCB3aXRoIGEgdmFsdWUgb3IgYG51bGxgLlwiKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gdW5kZWZpbmVkRXJyb3JcbiAgICAgIH0pO1xuICAgICAgdGhpcy5lbWl0KGZhbHNlLCBrZXkpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHVuZGVmaW5lZEVycm9yKTtcbiAgICB9XG4gICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiBlcnJvclxuICAgICAgfSk7XG4gICAgICB0aGlzLmVtaXQoZmFsc2UsIGtleSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZGF0YVwiLCB7XG4gICAgICBnZXQ6ICgpID0+IGRhdGFcbiAgICB9KTtcbiAgICB0aGlzLmVtaXQoZmFsc2UsIGtleSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbiAgZW1pdChhYm9ydGVkLCBzZXR0bGVkS2V5KSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5mb3JFYWNoKHN1YnNjcmliZXIgPT4gc3Vic2NyaWJlcihhYm9ydGVkLCBzZXR0bGVkS2V5KSk7XG4gIH1cbiAgc3Vic2NyaWJlKGZuKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5hZGQoZm4pO1xuICAgIHJldHVybiAoKSA9PiB0aGlzLnN1YnNjcmliZXJzLmRlbGV0ZShmbik7XG4gIH1cbiAgY2FuY2VsKCkge1xuICAgIHRoaXMuY29udHJvbGxlci5hYm9ydCgpO1xuICAgIHRoaXMucGVuZGluZ0tleXNTZXQuZm9yRWFjaCgodiwgaykgPT4gdGhpcy5wZW5kaW5nS2V5c1NldC5kZWxldGUoaykpO1xuICAgIHRoaXMuZW1pdCh0cnVlKTtcbiAgfVxuICBhc3luYyByZXNvbHZlRGF0YShzaWduYWwpIHtcbiAgICBsZXQgYWJvcnRlZCA9IGZhbHNlO1xuICAgIGlmICghdGhpcy5kb25lKSB7XG4gICAgICBsZXQgb25BYm9ydCA9ICgpID0+IHRoaXMuY2FuY2VsKCk7XG4gICAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgICAgYWJvcnRlZCA9IGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICB0aGlzLnN1YnNjcmliZShhYm9ydGVkID0+IHtcbiAgICAgICAgICBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgICAgICAgIGlmIChhYm9ydGVkIHx8IHRoaXMuZG9uZSkge1xuICAgICAgICAgICAgcmVzb2x2ZShhYm9ydGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhYm9ydGVkO1xuICB9XG4gIGdldCBkb25lKCkge1xuICAgIHJldHVybiB0aGlzLnBlbmRpbmdLZXlzU2V0LnNpemUgPT09IDA7XG4gIH1cbiAgZ2V0IHVud3JhcHBlZERhdGEoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuZGF0YSAhPT0gbnVsbCAmJiB0aGlzLmRvbmUsIFwiQ2FuIG9ubHkgdW53cmFwIGRhdGEgb24gaW5pdGlhbGl6ZWQgYW5kIHNldHRsZWQgZGVmZXJyZWRzXCIpO1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLmRhdGEpLnJlZHVjZSgoYWNjLCBfcmVmMikgPT4ge1xuICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWYyO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgIFtrZXldOiB1bndyYXBUcmFja2VkUHJvbWlzZSh2YWx1ZSlcbiAgICAgIH0pO1xuICAgIH0sIHt9KTtcbiAgfVxuICBnZXQgcGVuZGluZ0tleXMoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5wZW5kaW5nS2V5c1NldCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzVHJhY2tlZFByb21pc2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSAmJiB2YWx1ZS5fdHJhY2tlZCA9PT0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHVud3JhcFRyYWNrZWRQcm9taXNlKHZhbHVlKSB7XG4gIGlmICghaXNUcmFja2VkUHJvbWlzZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHZhbHVlLl9lcnJvcikge1xuICAgIHRocm93IHZhbHVlLl9lcnJvcjtcbiAgfVxuICByZXR1cm4gdmFsdWUuX2RhdGE7XG59XG5jb25zdCBkZWZlciA9IGZ1bmN0aW9uIGRlZmVyKGRhdGEsIGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSB7fTtcbiAgfVxuICBsZXQgcmVzcG9uc2VJbml0ID0gdHlwZW9mIGluaXQgPT09IFwibnVtYmVyXCIgPyB7XG4gICAgc3RhdHVzOiBpbml0XG4gIH0gOiBpbml0O1xuICByZXR1cm4gbmV3IERlZmVycmVkRGF0YShkYXRhLCByZXNwb25zZUluaXQpO1xufTtcbi8qKlxuICogQSByZWRpcmVjdCByZXNwb25zZS4gU2V0cyB0aGUgc3RhdHVzIGNvZGUgYW5kIHRoZSBgTG9jYXRpb25gIGhlYWRlci5cbiAqIERlZmF1bHRzIHRvIFwiMzAyIEZvdW5kXCIuXG4gKi9cbmNvbnN0IHJlZGlyZWN0ID0gZnVuY3Rpb24gcmVkaXJlY3QodXJsLCBpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0gMzAyO1xuICB9XG4gIGxldCByZXNwb25zZUluaXQgPSBpbml0O1xuICBpZiAodHlwZW9mIHJlc3BvbnNlSW5pdCA9PT0gXCJudW1iZXJcIikge1xuICAgIHJlc3BvbnNlSW5pdCA9IHtcbiAgICAgIHN0YXR1czogcmVzcG9uc2VJbml0XG4gICAgfTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcmVzcG9uc2VJbml0LnN0YXR1cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJlc3BvbnNlSW5pdC5zdGF0dXMgPSAzMDI7XG4gIH1cbiAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhyZXNwb25zZUluaXQuaGVhZGVycyk7XG4gIGhlYWRlcnMuc2V0KFwiTG9jYXRpb25cIiwgdXJsKTtcbiAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCBfZXh0ZW5kcyh7fSwgcmVzcG9uc2VJbml0LCB7XG4gICAgaGVhZGVyc1xuICB9KSk7XG59O1xuLyoqXG4gKiBBIHJlZGlyZWN0IHJlc3BvbnNlIHRoYXQgd2lsbCBmb3JjZSBhIGRvY3VtZW50IHJlbG9hZCB0byB0aGUgbmV3IGxvY2F0aW9uLlxuICogU2V0cyB0aGUgc3RhdHVzIGNvZGUgYW5kIHRoZSBgTG9jYXRpb25gIGhlYWRlci5cbiAqIERlZmF1bHRzIHRvIFwiMzAyIEZvdW5kXCIuXG4gKi9cbmNvbnN0IHJlZGlyZWN0RG9jdW1lbnQgPSAodXJsLCBpbml0KSA9PiB7XG4gIGxldCByZXNwb25zZSA9IHJlZGlyZWN0KHVybCwgaW5pdCk7XG4gIHJlc3BvbnNlLmhlYWRlcnMuc2V0KFwiWC1SZW1peC1SZWxvYWQtRG9jdW1lbnRcIiwgXCJ0cnVlXCIpO1xuICByZXR1cm4gcmVzcG9uc2U7XG59O1xuLyoqXG4gKiBAcHJpdmF0ZVxuICogVXRpbGl0eSBjbGFzcyB3ZSB1c2UgdG8gaG9sZCBhdXRvLXVud3JhcHBlZCA0eHgvNXh4IFJlc3BvbnNlIGJvZGllc1xuICovXG5jbGFzcyBFcnJvclJlc3BvbnNlIHtcbiAgY29uc3RydWN0b3Ioc3RhdHVzLCBzdGF0dXNUZXh0LCBkYXRhLCBpbnRlcm5hbCkge1xuICAgIGlmIChpbnRlcm5hbCA9PT0gdm9pZCAwKSB7XG4gICAgICBpbnRlcm5hbCA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICB0aGlzLnN0YXR1c1RleHQgPSBzdGF0dXNUZXh0IHx8IFwiXCI7XG4gICAgdGhpcy5pbnRlcm5hbCA9IGludGVybmFsO1xuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGEudG9TdHJpbmcoKTtcbiAgICAgIHRoaXMuZXJyb3IgPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cbiAgfVxufVxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZXJyb3IgaXMgYW4gRXJyb3JSZXNwb25zZSBnZW5lcmF0ZWQgZnJvbSBhIDR4eC81eHhcbiAqIFJlc3BvbnNlIHRocm93biBmcm9tIGFuIGFjdGlvbi9sb2FkZXJcbiAqL1xuZnVuY3Rpb24gaXNSb3V0ZUVycm9yUmVzcG9uc2UoZXJyb3IpIHtcbiAgcmV0dXJuIGVycm9yICE9IG51bGwgJiYgdHlwZW9mIGVycm9yLnN0YXR1cyA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgZXJyb3Iuc3RhdHVzVGV4dCA9PT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgZXJyb3IuaW50ZXJuYWwgPT09IFwiYm9vbGVhblwiICYmIFwiZGF0YVwiIGluIGVycm9yO1xufVxuXG5jb25zdCB2YWxpZE11dGF0aW9uTWV0aG9kc0FyciA9IFtcInBvc3RcIiwgXCJwdXRcIiwgXCJwYXRjaFwiLCBcImRlbGV0ZVwiXTtcbmNvbnN0IHZhbGlkTXV0YXRpb25NZXRob2RzID0gbmV3IFNldCh2YWxpZE11dGF0aW9uTWV0aG9kc0Fycik7XG5jb25zdCB2YWxpZFJlcXVlc3RNZXRob2RzQXJyID0gW1wiZ2V0XCIsIC4uLnZhbGlkTXV0YXRpb25NZXRob2RzQXJyXTtcbmNvbnN0IHZhbGlkUmVxdWVzdE1ldGhvZHMgPSBuZXcgU2V0KHZhbGlkUmVxdWVzdE1ldGhvZHNBcnIpO1xuY29uc3QgcmVkaXJlY3RTdGF0dXNDb2RlcyA9IG5ldyBTZXQoWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XSk7XG5jb25zdCByZWRpcmVjdFByZXNlcnZlTWV0aG9kU3RhdHVzQ29kZXMgPSBuZXcgU2V0KFszMDcsIDMwOF0pO1xuY29uc3QgSURMRV9OQVZJR0FUSU9OID0ge1xuICBzdGF0ZTogXCJpZGxlXCIsXG4gIGxvY2F0aW9uOiB1bmRlZmluZWQsXG4gIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICBqc29uOiB1bmRlZmluZWQsXG4gIHRleHQ6IHVuZGVmaW5lZFxufTtcbmNvbnN0IElETEVfRkVUQ0hFUiA9IHtcbiAgc3RhdGU6IFwiaWRsZVwiLFxuICBkYXRhOiB1bmRlZmluZWQsXG4gIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICBqc29uOiB1bmRlZmluZWQsXG4gIHRleHQ6IHVuZGVmaW5lZFxufTtcbmNvbnN0IElETEVfQkxPQ0tFUiA9IHtcbiAgc3RhdGU6IFwidW5ibG9ja2VkXCIsXG4gIHByb2NlZWQ6IHVuZGVmaW5lZCxcbiAgcmVzZXQ6IHVuZGVmaW5lZCxcbiAgbG9jYXRpb246IHVuZGVmaW5lZFxufTtcbmNvbnN0IEFCU09MVVRFX1VSTF9SRUdFWCA9IC9eKD86W2Etel1bYS16MC05Ky4tXSo6fFxcL1xcLykvaTtcbmNvbnN0IGRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXMgPSByb3V0ZSA9PiAoe1xuICBoYXNFcnJvckJvdW5kYXJ5OiBCb29sZWFuKHJvdXRlLmhhc0Vycm9yQm91bmRhcnkpXG59KTtcbi8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBjcmVhdGVSb3V0ZXJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAqIENyZWF0ZSBhIHJvdXRlciBhbmQgbGlzdGVuIHRvIGhpc3RvcnkgUE9QIG5hdmlnYXRpb25zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlcihpbml0KSB7XG4gIGNvbnN0IHJvdXRlcldpbmRvdyA9IGluaXQud2luZG93ID8gaW5pdC53aW5kb3cgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdW5kZWZpbmVkO1xuICBjb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2Ygcm91dGVyV2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiByb3V0ZXJXaW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHJvdXRlcldpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiO1xuICBjb25zdCBpc1NlcnZlciA9ICFpc0Jyb3dzZXI7XG4gIGludmFyaWFudChpbml0LnJvdXRlcy5sZW5ndGggPiAwLCBcIllvdSBtdXN0IHByb3ZpZGUgYSBub24tZW1wdHkgcm91dGVzIGFycmF5IHRvIGNyZWF0ZVJvdXRlclwiKTtcbiAgbGV0IG1hcFJvdXRlUHJvcGVydGllcztcbiAgaWYgKGluaXQubWFwUm91dGVQcm9wZXJ0aWVzKSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gaW5pdC5tYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH0gZWxzZSBpZiAoaW5pdC5kZXRlY3RFcnJvckJvdW5kYXJ5KSB7XG4gICAgLy8gSWYgdGhleSBhcmUgc3RpbGwgdXNpbmcgdGhlIGRlcHJlY2F0ZWQgdmVyc2lvbiwgd3JhcCBpdCB3aXRoIHRoZSBuZXcgQVBJXG4gICAgbGV0IGRldGVjdEVycm9yQm91bmRhcnkgPSBpbml0LmRldGVjdEVycm9yQm91bmRhcnk7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gcm91dGUgPT4gKHtcbiAgICAgIGhhc0Vycm9yQm91bmRhcnk6IGRldGVjdEVycm9yQm91bmRhcnkocm91dGUpXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gZGVmYXVsdE1hcFJvdXRlUHJvcGVydGllcztcbiAgfVxuICAvLyBSb3V0ZXMga2V5ZWQgYnkgSURcbiAgbGV0IG1hbmlmZXN0ID0ge307XG4gIC8vIFJvdXRlcyBpbiB0cmVlIGZvcm1hdCBmb3IgbWF0Y2hpbmdcbiAgbGV0IGRhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKGluaXQucm91dGVzLCBtYXBSb3V0ZVByb3BlcnRpZXMsIHVuZGVmaW5lZCwgbWFuaWZlc3QpO1xuICBsZXQgaW5GbGlnaHREYXRhUm91dGVzO1xuICBsZXQgYmFzZW5hbWUgPSBpbml0LmJhc2VuYW1lIHx8IFwiL1wiO1xuICAvLyBDb25maWcgZHJpdmVuIGJlaGF2aW9yIGZsYWdzXG4gIGxldCBmdXR1cmUgPSBfZXh0ZW5kcyh7XG4gICAgdjdfbm9ybWFsaXplRm9ybU1ldGhvZDogZmFsc2UsXG4gICAgdjdfcHJlcGVuZEJhc2VuYW1lOiBmYWxzZVxuICB9LCBpbml0LmZ1dHVyZSk7XG4gIC8vIENsZWFudXAgZnVuY3Rpb24gZm9yIGhpc3RvcnlcbiAgbGV0IHVubGlzdGVuSGlzdG9yeSA9IG51bGw7XG4gIC8vIEV4dGVybmFsbHktcHJvdmlkZWQgZnVuY3Rpb25zIHRvIGNhbGwgb24gYWxsIHN0YXRlIGNoYW5nZXNcbiAgbGV0IHN1YnNjcmliZXJzID0gbmV3IFNldCgpO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIG9iamVjdCB0byBob2xkIHNjcm9sbCByZXN0b3JhdGlvbiBsb2NhdGlvbnMgZHVyaW5nIHJvdXRpbmdcbiAgbGV0IHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gbnVsbDtcbiAgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBmdW5jdGlvbiB0byBnZXQgc2Nyb2xsIHJlc3RvcmF0aW9uIGtleXNcbiAgbGV0IGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ID0gbnVsbDtcbiAgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBmdW5jdGlvbiB0byBnZXQgY3VycmVudCBzY3JvbGwgcG9zaXRpb25cbiAgbGV0IGdldFNjcm9sbFBvc2l0aW9uID0gbnVsbDtcbiAgLy8gT25lLXRpbWUgZmxhZyB0byBjb250cm9sIHRoZSBpbml0aWFsIGh5ZHJhdGlvbiBzY3JvbGwgcmVzdG9yYXRpb24uICBCZWNhdXNlXG4gIC8vIHdlIGRvbid0IGdldCB0aGUgc2F2ZWQgcG9zaXRpb25zIGZyb20gPFNjcm9sbFJlc3RvcmF0aW9uIC8+IHVudGlsIF9hZnRlcl9cbiAgLy8gdGhlIGluaXRpYWwgcmVuZGVyLCB3ZSBuZWVkIHRvIG1hbnVhbGx5IHRyaWdnZXIgYSBzZXBhcmF0ZSB1cGRhdGVTdGF0ZSB0b1xuICAvLyBzZW5kIGFsb25nIHRoZSByZXN0b3JlU2Nyb2xsUG9zaXRpb25cbiAgLy8gU2V0IHRvIHRydWUgaWYgd2UgaGF2ZSBgaHlkcmF0aW9uRGF0YWAgc2luY2Ugd2UgYXNzdW1lIHdlIHdlcmUgU1NSJ2QgYW5kIHRoYXRcbiAgLy8gU1NSIGRpZCB0aGUgaW5pdGlhbCBzY3JvbGwgcmVzdG9yYXRpb24uXG4gIGxldCBpbml0aWFsU2Nyb2xsUmVzdG9yZWQgPSBpbml0Lmh5ZHJhdGlvbkRhdGEgIT0gbnVsbDtcbiAgbGV0IGluaXRpYWxNYXRjaGVzID0gbWF0Y2hSb3V0ZXMoZGF0YVJvdXRlcywgaW5pdC5oaXN0b3J5LmxvY2F0aW9uLCBiYXNlbmFtZSk7XG4gIGxldCBpbml0aWFsRXJyb3JzID0gbnVsbDtcbiAgaWYgKGluaXRpYWxNYXRjaGVzID09IG51bGwpIHtcbiAgICAvLyBJZiB3ZSBkbyBub3QgbWF0Y2ggYSB1c2VyLXByb3ZpZGVkLXJvdXRlLCBmYWxsIGJhY2sgdG8gdGhlIHJvb3RcbiAgICAvLyB0byBhbGxvdyB0aGUgZXJyb3IgYm91bmRhcnkgdG8gdGFrZSBvdmVyXG4gICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgIHBhdGhuYW1lOiBpbml0Lmhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWVcbiAgICB9KTtcbiAgICBsZXQge1xuICAgICAgbWF0Y2hlcyxcbiAgICAgIHJvdXRlXG4gICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGluaXRpYWxFcnJvcnMgPSB7XG4gICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgIH07XG4gIH1cbiAgbGV0IGluaXRpYWxpemVkID1cbiAgLy8gQWxsIGluaXRpYWxNYXRjaGVzIG5lZWQgdG8gYmUgbG9hZGVkIGJlZm9yZSB3ZSdyZSByZWFkeS4gIElmIHdlIGhhdmUgbGF6eVxuICAvLyBmdW5jdGlvbnMgYXJvdW5kIHN0aWxsIHRoZW4gd2UnbGwgbmVlZCB0byBydW4gdGhlbSBpbiBpbml0aWFsaXplKClcbiAgIWluaXRpYWxNYXRjaGVzLnNvbWUobSA9PiBtLnJvdXRlLmxhenkpICYmIChcbiAgLy8gQW5kIHdlIGhhdmUgdG8gZWl0aGVyIGhhdmUgbm8gbG9hZGVycyBvciBoYXZlIGJlZW4gcHJvdmlkZWQgaHlkcmF0aW9uRGF0YVxuICAhaW5pdGlhbE1hdGNoZXMuc29tZShtID0+IG0ucm91dGUubG9hZGVyKSB8fCBpbml0Lmh5ZHJhdGlvbkRhdGEgIT0gbnVsbCk7XG4gIGxldCByb3V0ZXI7XG4gIGxldCBzdGF0ZSA9IHtcbiAgICBoaXN0b3J5QWN0aW9uOiBpbml0Lmhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBpbml0Lmhpc3RvcnkubG9jYXRpb24sXG4gICAgbWF0Y2hlczogaW5pdGlhbE1hdGNoZXMsXG4gICAgaW5pdGlhbGl6ZWQsXG4gICAgbmF2aWdhdGlvbjogSURMRV9OQVZJR0FUSU9OLFxuICAgIC8vIERvbid0IHJlc3RvcmUgb24gaW5pdGlhbCB1cGRhdGVTdGF0ZSgpIGlmIHdlIHdlcmUgU1NSJ2RcbiAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IGluaXQuaHlkcmF0aW9uRGF0YSAhPSBudWxsID8gZmFsc2UgOiBudWxsLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldDogZmFsc2UsXG4gICAgcmV2YWxpZGF0aW9uOiBcImlkbGVcIixcbiAgICBsb2FkZXJEYXRhOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmxvYWRlckRhdGEgfHwge30sXG4gICAgYWN0aW9uRGF0YTogaW5pdC5oeWRyYXRpb25EYXRhICYmIGluaXQuaHlkcmF0aW9uRGF0YS5hY3Rpb25EYXRhIHx8IG51bGwsXG4gICAgZXJyb3JzOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmVycm9ycyB8fCBpbml0aWFsRXJyb3JzLFxuICAgIGZldGNoZXJzOiBuZXcgTWFwKCksXG4gICAgYmxvY2tlcnM6IG5ldyBNYXAoKVxuICB9O1xuICAvLyAtLSBTdGF0ZWZ1bCBpbnRlcm5hbCB2YXJpYWJsZXMgdG8gbWFuYWdlIG5hdmlnYXRpb25zIC0tXG4gIC8vIEN1cnJlbnQgbmF2aWdhdGlvbiBpbiBwcm9ncmVzcyAodG8gYmUgY29tbWl0dGVkIGluIGNvbXBsZXRlTmF2aWdhdGlvbilcbiAgbGV0IHBlbmRpbmdBY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAvLyBTaG91bGQgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBwcmV2ZW50IHRoZSBzY3JvbGwgcmVzZXQgaWYgc2Nyb2xsIGNhbm5vdFxuICAvLyBiZSByZXN0b3JlZD9cbiAgbGV0IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSBmYWxzZTtcbiAgLy8gQWJvcnRDb250cm9sbGVyIGZvciB0aGUgYWN0aXZlIG5hdmlnYXRpb25cbiAgbGV0IHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcjtcbiAgLy8gV2UgdXNlIHRoaXMgdG8gYXZvaWQgdG91Y2hpbmcgaGlzdG9yeSBpbiBjb21wbGV0ZU5hdmlnYXRpb24gaWYgYVxuICAvLyByZXZhbGlkYXRpb24gaXMgZW50aXJlbHkgdW5pbnRlcnJ1cHRlZFxuICBsZXQgaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uID0gZmFsc2U7XG4gIC8vIFVzZSB0aGlzIGludGVybmFsIGZsYWcgdG8gZm9yY2UgcmV2YWxpZGF0aW9uIG9mIGFsbCBsb2FkZXJzOlxuICAvLyAgLSBzdWJtaXNzaW9ucyAoY29tcGxldGVkIG9yIGludGVycnVwdGVkKVxuICAvLyAgLSB1c2VSZXZhbGlkYXRvcigpXG4gIC8vICAtIFgtUmVtaXgtUmV2YWxpZGF0ZSAoZnJvbSByZWRpcmVjdClcbiAgbGV0IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgLy8gVXNlIHRoaXMgaW50ZXJuYWwgYXJyYXkgdG8gY2FwdHVyZSByb3V0ZXMgdGhhdCByZXF1aXJlIHJldmFsaWRhdGlvbiBkdWVcbiAgLy8gdG8gYSBjYW5jZWxsZWQgZGVmZXJyZWQgb24gYWN0aW9uIHN1Ym1pc3Npb25cbiAgbGV0IGNhbmNlbGxlZERlZmVycmVkUm91dGVzID0gW107XG4gIC8vIFVzZSB0aGlzIGludGVybmFsIGFycmF5IHRvIGNhcHR1cmUgZmV0Y2hlciBsb2FkcyB0aGF0IHdlcmUgY2FuY2VsbGVkIGJ5IGFuXG4gIC8vIGFjdGlvbiBuYXZpZ2F0aW9uIGFuZCByZXF1aXJlIHJldmFsaWRhdGlvblxuICBsZXQgY2FuY2VsbGVkRmV0Y2hlckxvYWRzID0gW107XG4gIC8vIEFib3J0Q29udHJvbGxlcnMgZm9yIGFueSBpbi1mbGlnaHQgZmV0Y2hlcnNcbiAgbGV0IGZldGNoQ29udHJvbGxlcnMgPSBuZXcgTWFwKCk7XG4gIC8vIFRyYWNrIGxvYWRzIGJhc2VkIG9uIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IHN0YXJ0ZWRcbiAgbGV0IGluY3JlbWVudGluZ0xvYWRJZCA9IDA7XG4gIC8vIFRyYWNrIHRoZSBvdXRzdGFuZGluZyBwZW5kaW5nIG5hdmlnYXRpb24gZGF0YSBsb2FkIHRvIGJlIGNvbXBhcmVkIGFnYWluc3RcbiAgLy8gdGhlIGdsb2JhbGx5IGluY3JlbWVudGluZyBsb2FkIHdoZW4gYSBmZXRjaGVyIGxvYWQgbGFuZHMgYWZ0ZXIgYSBjb21wbGV0ZWRcbiAgLy8gbmF2aWdhdGlvblxuICBsZXQgcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPSAtMTtcbiAgLy8gRmV0Y2hlcnMgdGhhdCB0cmlnZ2VyZWQgZGF0YSByZWxvYWRzIGFzIGEgcmVzdWx0IG9mIHRoZWlyIGFjdGlvbnNcbiAgbGV0IGZldGNoUmVsb2FkSWRzID0gbmV3IE1hcCgpO1xuICAvLyBGZXRjaGVycyB0aGF0IHRyaWdnZXJlZCByZWRpcmVjdCBuYXZpZ2F0aW9uc1xuICBsZXQgZmV0Y2hSZWRpcmVjdElkcyA9IG5ldyBTZXQoKTtcbiAgLy8gTW9zdCByZWNlbnQgaHJlZi9tYXRjaCBmb3IgZmV0Y2hlci5sb2FkIGNhbGxzIGZvciBmZXRjaGVyc1xuICBsZXQgZmV0Y2hMb2FkTWF0Y2hlcyA9IG5ldyBNYXAoKTtcbiAgLy8gU3RvcmUgRGVmZXJyZWREYXRhIGluc3RhbmNlcyBmb3IgYWN0aXZlIHJvdXRlIG1hdGNoZXMuICBXaGVuIGFcbiAgLy8gcm91dGUgbG9hZGVyIHJldHVybnMgZGVmZXIoKSB3ZSBzdGljayBvbmUgaW4gaGVyZS4gIFRoZW4sIHdoZW4gYSBuZXN0ZWRcbiAgLy8gcHJvbWlzZSByZXNvbHZlcyB3ZSB1cGRhdGUgbG9hZGVyRGF0YS4gIElmIGEgbmV3IG5hdmlnYXRpb24gc3RhcnRzIHdlXG4gIC8vIGNhbmNlbCBhY3RpdmUgZGVmZXJyZWRzIGZvciBlbGltaW5hdGVkIHJvdXRlcy5cbiAgbGV0IGFjdGl2ZURlZmVycmVkcyA9IG5ldyBNYXAoKTtcbiAgLy8gU3RvcmUgYmxvY2tlciBmdW5jdGlvbnMgaW4gYSBzZXBhcmF0ZSBNYXAgb3V0c2lkZSBvZiByb3V0ZXIgc3RhdGUgc2luY2VcbiAgLy8gd2UgZG9uJ3QgbmVlZCB0byB1cGRhdGUgVUkgc3RhdGUgaWYgdGhleSBjaGFuZ2VcbiAgbGV0IGJsb2NrZXJGdW5jdGlvbnMgPSBuZXcgTWFwKCk7XG4gIC8vIEZsYWcgdG8gaWdub3JlIHRoZSBuZXh0IGhpc3RvcnkgdXBkYXRlLCBzbyB3ZSBjYW4gcmV2ZXJ0IHRoZSBVUkwgY2hhbmdlIG9uXG4gIC8vIGEgUE9QIG5hdmlnYXRpb24gdGhhdCB3YXMgYmxvY2tlZCBieSB0aGUgdXNlciB3aXRob3V0IHRvdWNoaW5nIHJvdXRlciBzdGF0ZVxuICBsZXQgaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUgPSBmYWxzZTtcbiAgLy8gSW5pdGlhbGl6ZSB0aGUgcm91dGVyLCBhbGwgc2lkZSBlZmZlY3RzIHNob3VsZCBiZSBraWNrZWQgb2ZmIGZyb20gaGVyZS5cbiAgLy8gSW1wbGVtZW50ZWQgYXMgYSBGbHVlbnQgQVBJIGZvciBlYXNlIG9mOlxuICAvLyAgIGxldCByb3V0ZXIgPSBjcmVhdGVSb3V0ZXIoaW5pdCkuaW5pdGlhbGl6ZSgpO1xuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIC8vIElmIGhpc3RvcnkgaW5mb3JtcyB1cyBvZiBhIFBPUCBuYXZpZ2F0aW9uLCBzdGFydCB0aGUgbmF2aWdhdGlvbiBidXQgZG8gbm90IHVwZGF0ZVxuICAgIC8vIHN0YXRlLiAgV2UnbGwgdXBkYXRlIG91ciBvd24gc3RhdGUgb25jZSB0aGUgbmF2aWdhdGlvbiBjb21wbGV0ZXNcbiAgICB1bmxpc3Rlbkhpc3RvcnkgPSBpbml0Lmhpc3RvcnkubGlzdGVuKF9yZWYgPT4ge1xuICAgICAgbGV0IHtcbiAgICAgICAgYWN0aW9uOiBoaXN0b3J5QWN0aW9uLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgZGVsdGFcbiAgICAgIH0gPSBfcmVmO1xuICAgICAgLy8gSWdub3JlIHRoaXMgZXZlbnQgaWYgaXQgd2FzIGp1c3QgdXMgcmVzZXR0aW5nIHRoZSBVUkwgZnJvbSBhXG4gICAgICAvLyBibG9ja2VkIFBPUCBuYXZpZ2F0aW9uXG4gICAgICBpZiAoaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUpIHtcbiAgICAgICAgaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgd2FybmluZyhibG9ja2VyRnVuY3Rpb25zLnNpemUgPT09IDAgfHwgZGVsdGEgIT0gbnVsbCwgXCJZb3UgYXJlIHRyeWluZyB0byB1c2UgYSBibG9ja2VyIG9uIGEgUE9QIG5hdmlnYXRpb24gdG8gYSBsb2NhdGlvbiBcIiArIFwidGhhdCB3YXMgbm90IGNyZWF0ZWQgYnkgQHJlbWl4LXJ1bi9yb3V0ZXIuIFRoaXMgd2lsbCBmYWlsIHNpbGVudGx5IGluIFwiICsgXCJwcm9kdWN0aW9uLiBUaGlzIGNhbiBoYXBwZW4gaWYgeW91IGFyZSBuYXZpZ2F0aW5nIG91dHNpZGUgdGhlIHJvdXRlciBcIiArIFwidmlhIGB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGVgL2B3aW5kb3cubG9jYXRpb24uaGFzaGAgaW5zdGVhZCBvZiB1c2luZyBcIiArIFwicm91dGVyIG5hdmlnYXRpb24gQVBJcy4gIFRoaXMgY2FuIGFsc28gaGFwcGVuIGlmIHlvdSBhcmUgdXNpbmcgXCIgKyBcImNyZWF0ZUhhc2hSb3V0ZXIgYW5kIHRoZSB1c2VyIG1hbnVhbGx5IGNoYW5nZXMgdGhlIFVSTC5cIik7XG4gICAgICBsZXQgYmxvY2tlcktleSA9IHNob3VsZEJsb2NrTmF2aWdhdGlvbih7XG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG5leHRMb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICAgIH0pO1xuICAgICAgaWYgKGJsb2NrZXJLZXkgJiYgZGVsdGEgIT0gbnVsbCkge1xuICAgICAgICAvLyBSZXN0b3JlIHRoZSBVUkwgdG8gbWF0Y2ggdGhlIGN1cnJlbnQgVUksIGJ1dCBkb24ndCB1cGRhdGUgcm91dGVyIHN0YXRlXG4gICAgICAgIGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgaW5pdC5oaXN0b3J5LmdvKGRlbHRhICogLTEpO1xuICAgICAgICAvLyBQdXQgdGhlIGJsb2NrZXIgaW50byBhIGJsb2NrZWQgc3RhdGVcbiAgICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgICAgc3RhdGU6IFwiYmxvY2tlZFwiLFxuICAgICAgICAgIGxvY2F0aW9uLFxuICAgICAgICAgIHByb2NlZWQoKSB7XG4gICAgICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgICAgICAgc3RhdGU6IFwicHJvY2VlZGluZ1wiLFxuICAgICAgICAgICAgICBwcm9jZWVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIHJlc2V0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIGxvY2F0aW9uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIFJlLWRvIHRoZSBzYW1lIFBPUCBuYXZpZ2F0aW9uIHdlIGp1c3QgYmxvY2tlZFxuICAgICAgICAgICAgaW5pdC5oaXN0b3J5LmdvKGRlbHRhKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlc2V0KCkge1xuICAgICAgICAgICAgbGV0IGJsb2NrZXJzID0gbmV3IE1hcChzdGF0ZS5ibG9ja2Vycyk7XG4gICAgICAgICAgICBibG9ja2Vycy5zZXQoYmxvY2tlcktleSwgSURMRV9CTE9DS0VSKTtcbiAgICAgICAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgICAgICAgYmxvY2tlcnNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGFydE5hdmlnYXRpb24oaGlzdG9yeUFjdGlvbiwgbG9jYXRpb24pO1xuICAgIH0pO1xuICAgIC8vIEtpY2sgb2ZmIGluaXRpYWwgZGF0YSBsb2FkIGlmIG5lZWRlZC4gIFVzZSBQb3AgdG8gYXZvaWQgbW9kaWZ5aW5nIGhpc3RvcnlcbiAgICAvLyBOb3RlIHdlIGRvbid0IGRvIGFueSBoYW5kbGluZyBvZiBsYXp5IGhlcmUuICBGb3IgU1BBJ3MgaXQnbGwgZ2V0IGhhbmRsZWRcbiAgICAvLyBpbiB0aGUgbm9ybWFsIG5hdmlnYXRpb24gZmxvdy4gIEZvciBTU1IgaXQncyBleHBlY3RlZCB0aGF0IGxhenkgbW9kdWxlcyBhcmVcbiAgICAvLyByZXNvbHZlZCBwcmlvciB0byByb3V0ZXIgY3JlYXRpb24gc2luY2Ugd2UgY2FuJ3QgZ28gaW50byBhIGZhbGxiYWNrRWxlbWVudFxuICAgIC8vIFVJIGZvciBTU1InZCBhcHBzXG4gICAgaWYgKCFzdGF0ZS5pbml0aWFsaXplZCkge1xuICAgICAgc3RhcnROYXZpZ2F0aW9uKEFjdGlvbi5Qb3AsIHN0YXRlLmxvY2F0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIHJvdXRlcjtcbiAgfVxuICAvLyBDbGVhbiB1cCBhIHJvdXRlciBhbmQgaXQncyBzaWRlIGVmZmVjdHNcbiAgZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICBpZiAodW5saXN0ZW5IaXN0b3J5KSB7XG4gICAgICB1bmxpc3Rlbkhpc3RvcnkoKTtcbiAgICB9XG4gICAgc3Vic2NyaWJlcnMuY2xlYXIoKTtcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG4gICAgc3RhdGUuZmV0Y2hlcnMuZm9yRWFjaCgoXywga2V5KSA9PiBkZWxldGVGZXRjaGVyKGtleSkpO1xuICAgIHN0YXRlLmJsb2NrZXJzLmZvckVhY2goKF8sIGtleSkgPT4gZGVsZXRlQmxvY2tlcihrZXkpKTtcbiAgfVxuICAvLyBTdWJzY3JpYmUgdG8gc3RhdGUgdXBkYXRlcyBmb3IgdGhlIHJvdXRlclxuICBmdW5jdGlvbiBzdWJzY3JpYmUoZm4pIHtcbiAgICBzdWJzY3JpYmVycy5hZGQoZm4pO1xuICAgIHJldHVybiAoKSA9PiBzdWJzY3JpYmVycy5kZWxldGUoZm4pO1xuICB9XG4gIC8vIFVwZGF0ZSBvdXIgc3RhdGUgYW5kIG5vdGlmeSB0aGUgY2FsbGluZyBjb250ZXh0IG9mIHRoZSBjaGFuZ2VcbiAgZnVuY3Rpb24gdXBkYXRlU3RhdGUobmV3U3RhdGUpIHtcbiAgICBzdGF0ZSA9IF9leHRlbmRzKHt9LCBzdGF0ZSwgbmV3U3RhdGUpO1xuICAgIHN1YnNjcmliZXJzLmZvckVhY2goc3Vic2NyaWJlciA9PiBzdWJzY3JpYmVyKHN0YXRlKSk7XG4gIH1cbiAgLy8gQ29tcGxldGUgYSBuYXZpZ2F0aW9uIHJldHVybmluZyB0aGUgc3RhdGUubmF2aWdhdGlvbiBiYWNrIHRvIHRoZSBJRExFX05BVklHQVRJT05cbiAgLy8gYW5kIHNldHRpbmcgc3RhdGUuW2hpc3RvcnlBY3Rpb24vbG9jYXRpb24vbWF0Y2hlc10gdG8gdGhlIG5ldyByb3V0ZS5cbiAgLy8gLSBMb2NhdGlvbiBpcyBhIHJlcXVpcmVkIHBhcmFtXG4gIC8vIC0gTmF2aWdhdGlvbiB3aWxsIGFsd2F5cyBiZSBzZXQgdG8gSURMRV9OQVZJR0FUSU9OXG4gIC8vIC0gQ2FuIHBhc3MgYW55IG90aGVyIHN0YXRlIGluIG5ld1N0YXRlXG4gIGZ1bmN0aW9uIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwgbmV3U3RhdGUpIHtcbiAgICB2YXIgX2xvY2F0aW9uJHN0YXRlLCBfbG9jYXRpb24kc3RhdGUyO1xuICAgIC8vIERlZHVjZSBpZiB3ZSdyZSBpbiBhIGxvYWRpbmcvYWN0aW9uUmVsb2FkIHN0YXRlOlxuICAgIC8vIC0gV2UgaGF2ZSBjb21taXR0ZWQgYWN0aW9uRGF0YSBpbiB0aGUgc3RvcmVcbiAgICAvLyAtIFRoZSBjdXJyZW50IG5hdmlnYXRpb24gd2FzIGEgbXV0YXRpb24gc3VibWlzc2lvblxuICAgIC8vIC0gV2UncmUgcGFzdCB0aGUgc3VibWl0dGluZyBzdGF0ZSBhbmQgaW50byB0aGUgbG9hZGluZyBzdGF0ZVxuICAgIC8vIC0gVGhlIGxvY2F0aW9uIGJlaW5nIGxvYWRlZCBpcyBub3QgdGhlIHJlc3VsdCBvZiBhIHJlZGlyZWN0XG4gICAgbGV0IGlzQWN0aW9uUmVsb2FkID0gc3RhdGUuYWN0aW9uRGF0YSAhPSBudWxsICYmIHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCAhPSBudWxsICYmIGlzTXV0YXRpb25NZXRob2Qoc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kKSAmJiBzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImxvYWRpbmdcIiAmJiAoKF9sb2NhdGlvbiRzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2xvY2F0aW9uJHN0YXRlLl9pc1JlZGlyZWN0KSAhPT0gdHJ1ZTtcbiAgICBsZXQgYWN0aW9uRGF0YTtcbiAgICBpZiAobmV3U3RhdGUuYWN0aW9uRGF0YSkge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKG5ld1N0YXRlLmFjdGlvbkRhdGEpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYWN0aW9uRGF0YSA9IG5ld1N0YXRlLmFjdGlvbkRhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBFbXB0eSBhY3Rpb25EYXRhIC0+IGNsZWFyIHByaW9yIGFjdGlvbkRhdGEgZHVlIHRvIGFuIGFjdGlvbiBlcnJvclxuICAgICAgICBhY3Rpb25EYXRhID0gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzQWN0aW9uUmVsb2FkKSB7XG4gICAgICAvLyBLZWVwIHRoZSBjdXJyZW50IGRhdGEgaWYgd2UncmUgd3JhcHBpbmcgdXAgdGhlIGFjdGlvbiByZWxvYWRcbiAgICAgIGFjdGlvbkRhdGEgPSBzdGF0ZS5hY3Rpb25EYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDbGVhciBhY3Rpb25EYXRhIG9uIGFueSBvdGhlciBjb21wbGV0ZWQgbmF2aWdhdGlvbnNcbiAgICAgIGFjdGlvbkRhdGEgPSBudWxsO1xuICAgIH1cbiAgICAvLyBBbHdheXMgcHJlc2VydmUgYW55IGV4aXN0aW5nIGxvYWRlckRhdGEgZnJvbSByZS11c2VkIHJvdXRlc1xuICAgIGxldCBsb2FkZXJEYXRhID0gbmV3U3RhdGUubG9hZGVyRGF0YSA/IG1lcmdlTG9hZGVyRGF0YShzdGF0ZS5sb2FkZXJEYXRhLCBuZXdTdGF0ZS5sb2FkZXJEYXRhLCBuZXdTdGF0ZS5tYXRjaGVzIHx8IFtdLCBuZXdTdGF0ZS5lcnJvcnMpIDogc3RhdGUubG9hZGVyRGF0YTtcbiAgICAvLyBPbiBhIHN1Y2Nlc3NmdWwgbmF2aWdhdGlvbiB3ZSBjYW4gYXNzdW1lIHdlIGdvdCB0aHJvdWdoIGFsbCBibG9ja2Vyc1xuICAgIC8vIHNvIHdlIGNhbiBzdGFydCBmcmVzaFxuICAgIGxldCBibG9ja2VycyA9IHN0YXRlLmJsb2NrZXJzO1xuICAgIGlmIChibG9ja2Vycy5zaXplID4gMCkge1xuICAgICAgYmxvY2tlcnMgPSBuZXcgTWFwKGJsb2NrZXJzKTtcbiAgICAgIGJsb2NrZXJzLmZvckVhY2goKF8sIGspID0+IGJsb2NrZXJzLnNldChrLCBJRExFX0JMT0NLRVIpKTtcbiAgICB9XG4gICAgLy8gQWx3YXlzIHJlc3BlY3QgdGhlIHVzZXIgZmxhZy4gIE90aGVyd2lzZSBkb24ndCByZXNldCBvbiBtdXRhdGlvblxuICAgIC8vIHN1Ym1pc3Npb24gbmF2aWdhdGlvbnMgdW5sZXNzIHRoZXkgcmVkaXJlY3RcbiAgICBsZXQgcHJldmVudFNjcm9sbFJlc2V0ID0gcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSB8fCBzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QgIT0gbnVsbCAmJiBpc011dGF0aW9uTWV0aG9kKHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCkgJiYgKChfbG9jYXRpb24kc3RhdGUyID0gbG9jYXRpb24uc3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfbG9jYXRpb24kc3RhdGUyLl9pc1JlZGlyZWN0KSAhPT0gdHJ1ZTtcbiAgICBpZiAoaW5GbGlnaHREYXRhUm91dGVzKSB7XG4gICAgICBkYXRhUm91dGVzID0gaW5GbGlnaHREYXRhUm91dGVzO1xuICAgICAgaW5GbGlnaHREYXRhUm91dGVzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSA7IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5Qb3ApIDsgZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlB1c2gpIHtcbiAgICAgIGluaXQuaGlzdG9yeS5wdXNoKGxvY2F0aW9uLCBsb2NhdGlvbi5zdGF0ZSk7XG4gICAgfSBlbHNlIGlmIChwZW5kaW5nQWN0aW9uID09PSBBY3Rpb24uUmVwbGFjZSkge1xuICAgICAgaW5pdC5oaXN0b3J5LnJlcGxhY2UobG9jYXRpb24sIGxvY2F0aW9uLnN0YXRlKTtcbiAgICB9XG4gICAgdXBkYXRlU3RhdGUoX2V4dGVuZHMoe30sIG5ld1N0YXRlLCB7XG4gICAgICBhY3Rpb25EYXRhLFxuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGhpc3RvcnlBY3Rpb246IHBlbmRpbmdBY3Rpb24sXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGluaXRpYWxpemVkOiB0cnVlLFxuICAgICAgbmF2aWdhdGlvbjogSURMRV9OQVZJR0FUSU9OLFxuICAgICAgcmV2YWxpZGF0aW9uOiBcImlkbGVcIixcbiAgICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihsb2NhdGlvbiwgbmV3U3RhdGUubWF0Y2hlcyB8fCBzdGF0ZS5tYXRjaGVzKSxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIGJsb2NrZXJzXG4gICAgfSkpO1xuICAgIC8vIFJlc2V0IHN0YXRlZnVsIG5hdmlnYXRpb24gdmFyc1xuICAgIHBlbmRpbmdBY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgIHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSBmYWxzZTtcbiAgICBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSBmYWxzZTtcbiAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gZmFsc2U7XG4gICAgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMgPSBbXTtcbiAgICBjYW5jZWxsZWRGZXRjaGVyTG9hZHMgPSBbXTtcbiAgfVxuICAvLyBUcmlnZ2VyIGEgbmF2aWdhdGlvbiBldmVudCwgd2hpY2ggY2FuIGVpdGhlciBiZSBhIG51bWVyaWNhbCBQT1Agb3IgYSBQVVNIXG4gIC8vIHJlcGxhY2Ugd2l0aCBhbiBvcHRpb25hbCBzdWJtaXNzaW9uXG4gIGFzeW5jIGZ1bmN0aW9uIG5hdmlnYXRlKHRvLCBvcHRzKSB7XG4gICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgaW5pdC5oaXN0b3J5LmdvKHRvKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplVG8oc3RhdGUubG9jYXRpb24sIHN0YXRlLm1hdGNoZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcHJlcGVuZEJhc2VuYW1lLCB0bywgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mcm9tUm91dGVJZCwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5yZWxhdGl2ZSk7XG4gICAgbGV0IHtcbiAgICAgIHBhdGgsXG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgZXJyb3JcbiAgICB9ID0gbm9ybWFsaXplTmF2aWdhdGVPcHRpb25zKGZ1dHVyZS52N19ub3JtYWxpemVGb3JtTWV0aG9kLCBmYWxzZSwgbm9ybWFsaXplZFBhdGgsIG9wdHMpO1xuICAgIGxldCBjdXJyZW50TG9jYXRpb24gPSBzdGF0ZS5sb2NhdGlvbjtcbiAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oc3RhdGUubG9jYXRpb24sIHBhdGgsIG9wdHMgJiYgb3B0cy5zdGF0ZSk7XG4gICAgLy8gV2hlbiB1c2luZyBuYXZpZ2F0ZSBhcyBhIFBVU0gvUkVQTEFDRSB3ZSBhcmVuJ3QgcmVhZGluZyBhbiBhbHJlYWR5LWVuY29kZWRcbiAgICAvLyBVUkwgZnJvbSB3aW5kb3cubG9jYXRpb24sIHNvIHdlIG5lZWQgdG8gZW5jb2RlIGl0IGhlcmUgc28gdGhlIGJlaGF2aW9yXG4gICAgLy8gcmVtYWlucyB0aGUgc2FtZSBhcyBQT1AgYW5kIG5vbi1kYXRhLXJvdXRlciB1c2FnZXMuICBuZXcgVVJMKCkgZG9lcyBhbGxcbiAgICAvLyB0aGUgc2FtZSBlbmNvZGluZyB3ZSdkIGdldCBmcm9tIGEgaGlzdG9yeS5wdXNoU3RhdGUvd2luZG93LmxvY2F0aW9uIHJlYWRcbiAgICAvLyB3aXRob3V0IGhhdmluZyB0byB0b3VjaCBoaXN0b3J5XG4gICAgbmV4dExvY2F0aW9uID0gX2V4dGVuZHMoe30sIG5leHRMb2NhdGlvbiwgaW5pdC5oaXN0b3J5LmVuY29kZUxvY2F0aW9uKG5leHRMb2NhdGlvbikpO1xuICAgIGxldCB1c2VyUmVwbGFjZSA9IG9wdHMgJiYgb3B0cy5yZXBsYWNlICE9IG51bGwgPyBvcHRzLnJlcGxhY2UgOiB1bmRlZmluZWQ7XG4gICAgbGV0IGhpc3RvcnlBY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICBpZiAodXNlclJlcGxhY2UgPT09IHRydWUpIHtcbiAgICAgIGhpc3RvcnlBY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICB9IGVsc2UgaWYgKHVzZXJSZXBsYWNlID09PSBmYWxzZSkgOyBlbHNlIGlmIChzdWJtaXNzaW9uICE9IG51bGwgJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpICYmIHN1Ym1pc3Npb24uZm9ybUFjdGlvbiA9PT0gc3RhdGUubG9jYXRpb24ucGF0aG5hbWUgKyBzdGF0ZS5sb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIC8vIEJ5IGRlZmF1bHQgb24gc3VibWlzc2lvbnMgdG8gdGhlIGN1cnJlbnQgbG9jYXRpb24gd2UgUkVQTEFDRSBzbyB0aGF0XG4gICAgICAvLyB1c2VycyBkb24ndCBoYXZlIHRvIGRvdWJsZS1jbGljayB0aGUgYmFjayBidXR0b24gdG8gZ2V0IHRvIHRoZSBwcmlvclxuICAgICAgLy8gbG9jYXRpb24uICBJZiB0aGUgdXNlciByZWRpcmVjdHMgdG8gYSBkaWZmZXJlbnQgbG9jYXRpb24gZnJvbSB0aGVcbiAgICAgIC8vIGFjdGlvbi9sb2FkZXIgdGhpcyB3aWxsIGJlIGlnbm9yZWQgYW5kIHRoZSByZWRpcmVjdCB3aWxsIGJlIGEgUFVTSFxuICAgICAgaGlzdG9yeUFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIH1cbiAgICBsZXQgcHJldmVudFNjcm9sbFJlc2V0ID0gb3B0cyAmJiBcInByZXZlbnRTY3JvbGxSZXNldFwiIGluIG9wdHMgPyBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgYmxvY2tlcktleSA9IHNob3VsZEJsb2NrTmF2aWdhdGlvbih7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSk7XG4gICAgaWYgKGJsb2NrZXJLZXkpIHtcbiAgICAgIC8vIFB1dCB0aGUgYmxvY2tlciBpbnRvIGEgYmxvY2tlZCBzdGF0ZVxuICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgIHN0YXRlOiBcImJsb2NrZWRcIixcbiAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgcHJvY2VlZCgpIHtcbiAgICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgICAgIHN0YXRlOiBcInByb2NlZWRpbmdcIixcbiAgICAgICAgICAgIHByb2NlZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHJlc2V0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgLy8gU2VuZCB0aGUgc2FtZSBuYXZpZ2F0aW9uIHRocm91Z2hcbiAgICAgICAgICBuYXZpZ2F0ZSh0bywgb3B0cyk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc2V0KCkge1xuICAgICAgICAgIGxldCBibG9ja2VycyA9IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpO1xuICAgICAgICAgIGJsb2NrZXJzLnNldChibG9ja2VyS2V5LCBJRExFX0JMT0NLRVIpO1xuICAgICAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgICAgIGJsb2NrZXJzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIG5leHRMb2NhdGlvbiwge1xuICAgICAgc3VibWlzc2lvbixcbiAgICAgIC8vIFNlbmQgdGhyb3VnaCB0aGUgZm9ybURhdGEgc2VyaWFsaXphdGlvbiBlcnJvciBpZiB3ZSBoYXZlIG9uZSBzbyB3ZSBjYW5cbiAgICAgIC8vIHJlbmRlciBhdCB0aGUgcmlnaHQgZXJyb3IgYm91bmRhcnkgYWZ0ZXIgd2UgbWF0Y2ggcm91dGVzXG4gICAgICBwZW5kaW5nRXJyb3I6IGVycm9yLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgcmVwbGFjZTogb3B0cyAmJiBvcHRzLnJlcGxhY2VcbiAgICB9KTtcbiAgfVxuICAvLyBSZXZhbGlkYXRlIGFsbCBjdXJyZW50IGxvYWRlcnMuICBJZiBhIG5hdmlnYXRpb24gaXMgaW4gcHJvZ3Jlc3Mgb3IgaWYgdGhpc1xuICAvLyBpcyBpbnRlcnJ1cHRlZCBieSBhIG5hdmlnYXRpb24sIGFsbG93IHRoaXMgdG8gXCJzdWNjZWVkXCIgYnkgY2FsbGluZyBhbGxcbiAgLy8gbG9hZGVycyBkdXJpbmcgdGhlIG5leHQgbG9hZGVyIHJvdW5kXG4gIGZ1bmN0aW9uIHJldmFsaWRhdGUoKSB7XG4gICAgaW50ZXJydXB0QWN0aXZlTG9hZHMoKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICByZXZhbGlkYXRpb246IFwibG9hZGluZ1wiXG4gICAgfSk7XG4gICAgLy8gSWYgd2UncmUgY3VycmVudGx5IHN1Ym1pdHRpbmcgYW4gYWN0aW9uLCB3ZSBkb24ndCBuZWVkIHRvIHN0YXJ0IGEgbmV3XG4gICAgLy8gbmF2aWdhdGlvbiwgd2UnbGwganVzdCBsZXQgdGhlIGZvbGxvdyB1cCBsb2FkZXIgZXhlY3V0aW9uIGNhbGwgYWxsIGxvYWRlcnNcbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJzdWJtaXR0aW5nXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gSWYgd2UncmUgY3VycmVudGx5IGluIGFuIGlkbGUgc3RhdGUsIHN0YXJ0IGEgbmV3IG5hdmlnYXRpb24gZm9yIHRoZSBjdXJyZW50XG4gICAgLy8gYWN0aW9uL2xvY2F0aW9uIGFuZCBtYXJrIGl0IGFzIHVuaW50ZXJydXB0ZWQsIHdoaWNoIHdpbGwgc2tpcCB0aGUgaGlzdG9yeVxuICAgIC8vIHVwZGF0ZSBpbiBjb21wbGV0ZU5hdmlnYXRpb25cbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJpZGxlXCIpIHtcbiAgICAgIHN0YXJ0TmF2aWdhdGlvbihzdGF0ZS5oaXN0b3J5QWN0aW9uLCBzdGF0ZS5sb2NhdGlvbiwge1xuICAgICAgICBzdGFydFVuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb246IHRydWVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBPdGhlcndpc2UsIGlmIHdlJ3JlIGN1cnJlbnRseSBpbiBhIGxvYWRpbmcgc3RhdGUsIGp1c3Qgc3RhcnQgYSBuZXdcbiAgICAvLyBuYXZpZ2F0aW9uIHRvIHRoZSBuYXZpZ2F0aW9uLmxvY2F0aW9uIGJ1dCBkbyBub3QgdHJpZ2dlciBhbiB1bmludGVycnVwdGVkXG4gICAgLy8gcmV2YWxpZGF0aW9uIHNvIHRoYXQgaGlzdG9yeSBjb3JyZWN0bHkgdXBkYXRlcyBvbmNlIHRoZSBuYXZpZ2F0aW9uIGNvbXBsZXRlc1xuICAgIHN0YXJ0TmF2aWdhdGlvbihwZW5kaW5nQWN0aW9uIHx8IHN0YXRlLmhpc3RvcnlBY3Rpb24sIHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24sIHtcbiAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbjogc3RhdGUubmF2aWdhdGlvblxuICAgIH0pO1xuICB9XG4gIC8vIFN0YXJ0IGEgbmF2aWdhdGlvbiB0byB0aGUgZ2l2ZW4gYWN0aW9uL2xvY2F0aW9uLiAgQ2FuIG9wdGlvbmFsbHkgcHJvdmlkZSBhXG4gIC8vIG92ZXJyaWRlTmF2aWdhdGlvbiB3aGljaCB3aWxsIG92ZXJyaWRlIHRoZSBub3JtYWxMb2FkIGluIHRoZSBjYXNlIG9mIGEgcmVkaXJlY3RcbiAgLy8gbmF2aWdhdGlvblxuICBhc3luYyBmdW5jdGlvbiBzdGFydE5hdmlnYXRpb24oaGlzdG9yeUFjdGlvbiwgbG9jYXRpb24sIG9wdHMpIHtcbiAgICAvLyBBYm9ydCBhbnkgaW4tcHJvZ3Jlc3MgbmF2aWdhdGlvbnMgYW5kIHN0YXJ0IGEgbmV3IG9uZS4gVW5zZXQgYW55IG9uZ29pbmdcbiAgICAvLyB1bmludGVycnVwdGVkIHJldmFsaWRhdGlvbnMgdW5sZXNzIHRvbGQgb3RoZXJ3aXNlLCBzaW5jZSB3ZSB3YW50IHRoaXNcbiAgICAvLyBuZXcgbmF2aWdhdGlvbiB0byB1cGRhdGUgaGlzdG9yeSBub3JtYWxseVxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuICAgIHBlbmRpbmdBY3Rpb24gPSBoaXN0b3J5QWN0aW9uO1xuICAgIGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiA9IChvcHRzICYmIG9wdHMuc3RhcnRVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSA9PT0gdHJ1ZTtcbiAgICAvLyBTYXZlIHRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbiBldmVyeSB0aW1lIHdlIHN0YXJ0IGEgbmV3IG5hdmlnYXRpb24sXG4gICAgLy8gYW5kIHRyYWNrIHdoZXRoZXIgd2Ugc2hvdWxkIHJlc2V0IHNjcm9sbCBvbiBjb21wbGV0aW9uXG4gICAgc2F2ZVNjcm9sbFBvc2l0aW9uKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzKTtcbiAgICBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gKG9wdHMgJiYgb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQpID09PSB0cnVlO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBsb2FkaW5nTmF2aWdhdGlvbiA9IG9wdHMgJiYgb3B0cy5vdmVycmlkZU5hdmlnYXRpb247XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgbG9jYXRpb24sIGJhc2VuYW1lKTtcbiAgICAvLyBTaG9ydCBjaXJjdWl0IHdpdGggYSA0MDQgb24gdGhlIHJvb3QgZXJyb3IgYm91bmRhcnkgaWYgd2UgbWF0Y2ggbm90aGluZ1xuICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICAgIGxldCB7XG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgcm91dGVcbiAgICAgIH0gPSBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKHJvdXRlc1RvVXNlKTtcbiAgICAgIC8vIENhbmNlbCBhbGwgcGVuZGluZyBkZWZlcnJlZCBvbiA0MDRzIHNpbmNlIHdlIGRvbid0IGtlZXAgYW55IHJvdXRlc1xuICAgICAgY2FuY2VsQWN0aXZlRGVmZXJyZWRzKCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgaXQncyBvbmx5IGEgaGFzaCBjaGFuZ2UgYW5kIG5vdCBhIHJldmFsaWRhdGlvbiBvclxuICAgIC8vIG11dGF0aW9uIHN1Ym1pc3Npb24uXG4gICAgLy9cbiAgICAvLyBJZ25vcmUgb24gaW5pdGlhbCBwYWdlIGxvYWRzIGJlY2F1c2Ugc2luY2UgdGhlIGluaXRpYWwgbG9hZCB3aWxsIGFsd2F5c1xuICAgIC8vIGJlIFwic2FtZSBoYXNoXCIuICBGb3IgZXhhbXBsZSwgb24gL3BhZ2UjaGFzaCBhbmQgc3VibWl0IGEgPEZvcm0gbWV0aG9kPVwicG9zdFwiPlxuICAgIC8vIHdoaWNoIHdpbGwgZGVmYXVsdCB0byBhIG5hdmlnYXRpb24gdG8gL3BhZ2VcbiAgICBpZiAoc3RhdGUuaW5pdGlhbGl6ZWQgJiYgIWlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgJiYgaXNIYXNoQ2hhbmdlT25seShzdGF0ZS5sb2NhdGlvbiwgbG9jYXRpb24pICYmICEob3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChvcHRzLnN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpKSB7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlc1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIENyZWF0ZSBhIGNvbnRyb2xsZXIvUmVxdWVzdCBmb3IgdGhpcyBuYXZpZ2F0aW9uXG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCByZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBsb2NhdGlvbiwgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLnNpZ25hbCwgb3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24pO1xuICAgIGxldCBwZW5kaW5nQWN0aW9uRGF0YTtcbiAgICBsZXQgcGVuZGluZ0Vycm9yO1xuICAgIGlmIChvcHRzICYmIG9wdHMucGVuZGluZ0Vycm9yKSB7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgcGVuZGluZ0Vycm9yLCBpdCBtZWFucyB0aGUgdXNlciBhdHRlbXB0ZWQgYSBHRVQgc3VibWlzc2lvblxuICAgICAgLy8gd2l0aCBiaW5hcnkgRm9ybURhdGEgc28gYXNzaWduIGhlcmUgYW5kIHNraXAgdG8gaGFuZGxlTG9hZGVycy4gIFRoYXRcbiAgICAgIC8vIHdheSB3ZSBoYW5kbGUgY2FsbGluZyBsb2FkZXJzIGFib3ZlIHRoZSBib3VuZGFyeSBldGMuICBJdCdzIG5vdCByZWFsbHlcbiAgICAgIC8vIGRpZmZlcmVudCBmcm9tIGFuIGFjdGlvbkVycm9yIGluIHRoYXQgc2Vuc2UuXG4gICAgICBwZW5kaW5nRXJyb3IgPSB7XG4gICAgICAgIFtmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMpLnJvdXRlLmlkXTogb3B0cy5wZW5kaW5nRXJyb3JcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChvcHRzICYmIG9wdHMuc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKG9wdHMuc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgICAgLy8gQ2FsbCBhY3Rpb24gaWYgd2UgcmVjZWl2ZWQgYW4gYWN0aW9uIHN1Ym1pc3Npb25cbiAgICAgIGxldCBhY3Rpb25PdXRwdXQgPSBhd2FpdCBoYW5kbGVBY3Rpb24ocmVxdWVzdCwgbG9jYXRpb24sIG9wdHMuc3VibWlzc2lvbiwgbWF0Y2hlcywge1xuICAgICAgICByZXBsYWNlOiBvcHRzLnJlcGxhY2VcbiAgICAgIH0pO1xuICAgICAgaWYgKGFjdGlvbk91dHB1dC5zaG9ydENpcmN1aXRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBwZW5kaW5nQWN0aW9uRGF0YSA9IGFjdGlvbk91dHB1dC5wZW5kaW5nQWN0aW9uRGF0YTtcbiAgICAgIHBlbmRpbmdFcnJvciA9IGFjdGlvbk91dHB1dC5wZW5kaW5nQWN0aW9uRXJyb3I7XG4gICAgICBsb2FkaW5nTmF2aWdhdGlvbiA9IGdldExvYWRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBvcHRzLnN1Ym1pc3Npb24pO1xuICAgICAgLy8gQ3JlYXRlIGEgR0VUIHJlcXVlc3QgZm9yIHRoZSBsb2FkZXJzXG4gICAgICByZXF1ZXN0ID0gbmV3IFJlcXVlc3QocmVxdWVzdC51cmwsIHtcbiAgICAgICAgc2lnbmFsOiByZXF1ZXN0LnNpZ25hbFxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIENhbGwgbG9hZGVyc1xuICAgIGxldCB7XG4gICAgICBzaG9ydENpcmN1aXRlZCxcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9ID0gYXdhaXQgaGFuZGxlTG9hZGVycyhyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgbG9hZGluZ05hdmlnYXRpb24sIG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uLCBvcHRzICYmIG9wdHMuZmV0Y2hlclN1Ym1pc3Npb24sIG9wdHMgJiYgb3B0cy5yZXBsYWNlLCBwZW5kaW5nQWN0aW9uRGF0YSwgcGVuZGluZ0Vycm9yKTtcbiAgICBpZiAoc2hvcnRDaXJjdWl0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQ2xlYW4gdXAgbm93IHRoYXQgdGhlIGFjdGlvbi9sb2FkZXJzIGhhdmUgY29tcGxldGVkLiAgRG9uJ3QgY2xlYW4gdXAgaWZcbiAgICAvLyB3ZSBzaG9ydCBjaXJjdWl0ZWQgYmVjYXVzZSBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgd2lsbCBoYXZlIGFscmVhZHlcbiAgICAvLyBiZWVuIGFzc2lnbmVkIHRvIGEgbmV3IGNvbnRyb2xsZXIgZm9yIHRoZSBuZXh0IG5hdmlnYXRpb25cbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwgX2V4dGVuZHMoe1xuICAgICAgbWF0Y2hlc1xuICAgIH0sIHBlbmRpbmdBY3Rpb25EYXRhID8ge1xuICAgICAgYWN0aW9uRGF0YTogcGVuZGluZ0FjdGlvbkRhdGFcbiAgICB9IDoge30sIHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9KSk7XG4gIH1cbiAgLy8gQ2FsbCB0aGUgYWN0aW9uIG1hdGNoZWQgYnkgdGhlIGxlYWYgcm91dGUgZm9yIHRoaXMgbmF2aWdhdGlvbiBhbmQgaGFuZGxlXG4gIC8vIHJlZGlyZWN0cy9lcnJvcnNcbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlQWN0aW9uKHJlcXVlc3QsIGxvY2F0aW9uLCBzdWJtaXNzaW9uLCBtYXRjaGVzLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpO1xuICAgIC8vIFB1dCB1cyBpbiBhIHN1Ym1pdHRpbmcgc3RhdGVcbiAgICBsZXQgbmF2aWdhdGlvbiA9IGdldFN1Ym1pdHRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBzdWJtaXNzaW9uKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBuYXZpZ2F0aW9uXG4gICAgfSk7XG4gICAgLy8gQ2FsbCBvdXIgYWN0aW9uIGFuZCBnZXQgdGhlIHJlc3VsdFxuICAgIGxldCByZXN1bHQ7XG4gICAgbGV0IGFjdGlvbk1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuICAgIGlmICghYWN0aW9uTWF0Y2gucm91dGUuYWN0aW9uICYmICFhY3Rpb25NYXRjaC5yb3V0ZS5sYXp5KSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yOiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICAgIHJvdXRlSWQ6IGFjdGlvbk1hdGNoLnJvdXRlLmlkXG4gICAgICAgIH0pXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJhY3Rpb25cIiwgcmVxdWVzdCwgYWN0aW9uTWF0Y2gsIG1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGJhc2VuYW1lKTtcbiAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IHJlcGxhY2U7XG4gICAgICBpZiAob3B0cyAmJiBvcHRzLnJlcGxhY2UgIT0gbnVsbCkge1xuICAgICAgICByZXBsYWNlID0gb3B0cy5yZXBsYWNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgdGhlIHVzZXIgZGlkbid0IGV4cGxpY2l0eSBpbmRpY2F0ZSByZXBsYWNlIGJlaGF2aW9yLCByZXBsYWNlIGlmXG4gICAgICAgIC8vIHdlIHJlZGlyZWN0ZWQgdG8gdGhlIGV4YWN0IHNhbWUgbG9jYXRpb24gd2UncmUgY3VycmVudGx5IGF0IHRvIGF2b2lkXG4gICAgICAgIC8vIGRvdWJsZSBiYWNrLWJ1dHRvbnNcbiAgICAgICAgcmVwbGFjZSA9IHJlc3VsdC5sb2NhdGlvbiA9PT0gc3RhdGUubG9jYXRpb24ucGF0aG5hbWUgKyBzdGF0ZS5sb2NhdGlvbi5zZWFyY2g7XG4gICAgICB9XG4gICAgICBhd2FpdCBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgcmVzdWx0LCB7XG4gICAgICAgIHN1Ym1pc3Npb24sXG4gICAgICAgIHJlcGxhY2VcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFN0b3JlIG9mZiB0aGUgcGVuZGluZyBlcnJvciAtIHdlIHVzZSBpdCB0byBkZXRlcm1pbmUgd2hpY2ggbG9hZGVyc1xuICAgICAgLy8gdG8gY2FsbCBhbmQgd2lsbCBjb21taXQgaXQgd2hlbiB3ZSBjb21wbGV0ZSB0aGUgbmF2aWdhdGlvblxuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGFjdGlvbk1hdGNoLnJvdXRlLmlkKTtcbiAgICAgIC8vIEJ5IGRlZmF1bHQsIGFsbCBzdWJtaXNzaW9ucyBhcmUgUkVQTEFDRSBuYXZpZ2F0aW9ucywgYnV0IGlmIHRoZVxuICAgICAgLy8gYWN0aW9uIHRocmV3IGFuIGVycm9yIHRoYXQnbGwgYmUgcmVuZGVyZWQgaW4gYW4gZXJyb3JFbGVtZW50LCB3ZSBmYWxsXG4gICAgICAvLyBiYWNrIHRvIFBVU0ggc28gdGhhdCB0aGUgdXNlciBjYW4gdXNlIHRoZSBiYWNrIGJ1dHRvbiB0byBnZXQgYmFjayB0b1xuICAgICAgLy8gdGhlIHByZS1zdWJtaXNzaW9uIGZvcm0gbG9jYXRpb24gdG8gdHJ5IGFnYWluXG4gICAgICBpZiAoKG9wdHMgJiYgb3B0cy5yZXBsYWNlKSAhPT0gdHJ1ZSkge1xuICAgICAgICBwZW5kaW5nQWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICAvLyBTZW5kIGJhY2sgYW4gZW1wdHkgb2JqZWN0IHdlIGNhbiB1c2UgdG8gY2xlYXIgb3V0IGFueSBwcmlvciBhY3Rpb25EYXRhXG4gICAgICAgIHBlbmRpbmdBY3Rpb25EYXRhOiB7fSxcbiAgICAgICAgcGVuZGluZ0FjdGlvbkVycm9yOiB7XG4gICAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZXJyb3JcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgICAgdHlwZTogXCJkZWZlci1hY3Rpb25cIlxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBwZW5kaW5nQWN0aW9uRGF0YToge1xuICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZGF0YVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgLy8gQ2FsbCBhbGwgYXBwbGljYWJsZSBsb2FkZXJzIGZvciB0aGUgZ2l2ZW4gbWF0Y2hlcywgaGFuZGxpbmcgcmVkaXJlY3RzLFxuICAvLyBlcnJvcnMsIGV0Yy5cbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlTG9hZGVycyhyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgb3ZlcnJpZGVOYXZpZ2F0aW9uLCBzdWJtaXNzaW9uLCBmZXRjaGVyU3VibWlzc2lvbiwgcmVwbGFjZSwgcGVuZGluZ0FjdGlvbkRhdGEsIHBlbmRpbmdFcnJvcikge1xuICAgIC8vIEZpZ3VyZSBvdXQgdGhlIHJpZ2h0IG5hdmlnYXRpb24gd2Ugd2FudCB0byB1c2UgZm9yIGRhdGEgbG9hZGluZ1xuICAgIGxldCBsb2FkaW5nTmF2aWdhdGlvbiA9IG92ZXJyaWRlTmF2aWdhdGlvbiB8fCBnZXRMb2FkaW5nTmF2aWdhdGlvbihsb2NhdGlvbiwgc3VibWlzc2lvbik7XG4gICAgLy8gSWYgdGhpcyB3YXMgYSByZWRpcmVjdCBmcm9tIGFuIGFjdGlvbiB3ZSBkb24ndCBoYXZlIGEgXCJzdWJtaXNzaW9uXCIgYnV0XG4gICAgLy8gd2UgaGF2ZSBpdCBvbiB0aGUgbG9hZGluZyBuYXZpZ2F0aW9uIHNvIHVzZSB0aGF0IGlmIGF2YWlsYWJsZVxuICAgIGxldCBhY3RpdmVTdWJtaXNzaW9uID0gc3VibWlzc2lvbiB8fCBmZXRjaGVyU3VibWlzc2lvbiB8fCBnZXRTdWJtaXNzaW9uRnJvbU5hdmlnYXRpb24obG9hZGluZ05hdmlnYXRpb24pO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBbbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdID0gZ2V0TWF0Y2hlc1RvTG9hZChpbml0Lmhpc3RvcnksIHN0YXRlLCBtYXRjaGVzLCBhY3RpdmVTdWJtaXNzaW9uLCBsb2NhdGlvbiwgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCwgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMsIGNhbmNlbGxlZEZldGNoZXJMb2FkcywgZmV0Y2hMb2FkTWF0Y2hlcywgZmV0Y2hSZWRpcmVjdElkcywgcm91dGVzVG9Vc2UsIGJhc2VuYW1lLCBwZW5kaW5nQWN0aW9uRGF0YSwgcGVuZGluZ0Vycm9yKTtcbiAgICAvLyBDYW5jZWwgcGVuZGluZyBkZWZlcnJlZHMgZm9yIG5vLWxvbmdlci1tYXRjaGVkIHJvdXRlcyBvciByb3V0ZXMgd2UncmVcbiAgICAvLyBhYm91dCB0byByZWxvYWQuICBOb3RlIHRoYXQgaWYgdGhpcyBpcyBhbiBhY3Rpb24gcmVsb2FkIHdlIHdvdWxkIGhhdmVcbiAgICAvLyBhbHJlYWR5IGNhbmNlbGxlZCBhbGwgcGVuZGluZyBkZWZlcnJlZHMgc28gdGhpcyB3b3VsZCBiZSBhIG5vLW9wXG4gICAgY2FuY2VsQWN0aXZlRGVmZXJyZWRzKHJvdXRlSWQgPT4gIShtYXRjaGVzICYmIG1hdGNoZXMuc29tZShtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpKSB8fCBtYXRjaGVzVG9Mb2FkICYmIG1hdGNoZXNUb0xvYWQuc29tZShtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpKTtcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA9ICsraW5jcmVtZW50aW5nTG9hZElkO1xuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1blxuICAgIGlmIChtYXRjaGVzVG9Mb2FkLmxlbmd0aCA9PT0gMCAmJiByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIGxldCB1cGRhdGVkRmV0Y2hlcnMgPSBtYXJrRmV0Y2hSZWRpcmVjdHNEb25lKCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIF9leHRlbmRzKHtcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIC8vIENvbW1pdCBwZW5kaW5nIGVycm9yIGlmIHdlJ3JlIHNob3J0IGNpcmN1aXRpbmdcbiAgICAgICAgZXJyb3JzOiBwZW5kaW5nRXJyb3IgfHwgbnVsbFxuICAgICAgfSwgcGVuZGluZ0FjdGlvbkRhdGEgPyB7XG4gICAgICAgIGFjdGlvbkRhdGE6IHBlbmRpbmdBY3Rpb25EYXRhXG4gICAgICB9IDoge30sIHVwZGF0ZWRGZXRjaGVycyA/IHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9IDoge30pKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgICAvLyBJZiB0aGlzIGlzIGFuIHVuaW50ZXJydXB0ZWQgcmV2YWxpZGF0aW9uLCB3ZSByZW1haW4gaW4gb3VyIGN1cnJlbnQgaWRsZVxuICAgIC8vIHN0YXRlLiAgSWYgbm90LCB3ZSBuZWVkIHRvIHN3aXRjaCB0byBvdXIgbG9hZGluZyBzdGF0ZSBhbmQgbG9hZCBkYXRhLFxuICAgIC8vIHByZXNlcnZpbmcgYW55IG5ldyBhY3Rpb24gZGF0YSBvciBleGlzdGluZyBhY3Rpb24gZGF0YSAoaW4gdGhlIGNhc2Ugb2ZcbiAgICAvLyBhIHJldmFsaWRhdGlvbiBpbnRlcnJ1cHRpbmcgYW4gYWN0aW9uUmVsb2FkKVxuICAgIGlmICghaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IHtcbiAgICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQocmYua2V5KTtcbiAgICAgICAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXIgPSBnZXRMb2FkaW5nRmV0Y2hlcih1bmRlZmluZWQsIGZldGNoZXIgPyBmZXRjaGVyLmRhdGEgOiB1bmRlZmluZWQpO1xuICAgICAgICBzdGF0ZS5mZXRjaGVycy5zZXQocmYua2V5LCByZXZhbGlkYXRpbmdGZXRjaGVyKTtcbiAgICAgIH0pO1xuICAgICAgbGV0IGFjdGlvbkRhdGEgPSBwZW5kaW5nQWN0aW9uRGF0YSB8fCBzdGF0ZS5hY3Rpb25EYXRhO1xuICAgICAgdXBkYXRlU3RhdGUoX2V4dGVuZHMoe1xuICAgICAgICBuYXZpZ2F0aW9uOiBsb2FkaW5nTmF2aWdhdGlvblxuICAgICAgfSwgYWN0aW9uRGF0YSA/IE9iamVjdC5rZXlzKGFjdGlvbkRhdGEpLmxlbmd0aCA9PT0gMCA/IHtcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbFxuICAgICAgfSA6IHtcbiAgICAgICAgYWN0aW9uRGF0YVxuICAgICAgfSA6IHt9LCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPiAwID8ge1xuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0gOiB7fSkpO1xuICAgIH1cbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IHtcbiAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhyZi5rZXkpKSB7XG4gICAgICAgIGFib3J0RmV0Y2hlcihyZi5rZXkpO1xuICAgICAgfVxuICAgICAgaWYgKHJmLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgLy8gRmV0Y2hlcnMgdXNlIGFuIGluZGVwZW5kZW50IEFib3J0Q29udHJvbGxlciBzbyB0aGF0IGFib3J0aW5nIGEgZmV0Y2hlclxuICAgICAgICAvLyAodmlhIGRlbGV0ZUZldGNoZXIpIGRvZXMgbm90IGFib3J0IHRoZSB0cmlnZ2VyaW5nIG5hdmlnYXRpb24gdGhhdFxuICAgICAgICAvLyB0cmlnZ2VyZWQgdGhlIHJldmFsaWRhdGlvblxuICAgICAgICBmZXRjaENvbnRyb2xsZXJzLnNldChyZi5rZXksIHJmLmNvbnRyb2xsZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIFByb3h5IG5hdmlnYXRpb24gYWJvcnQgdGhyb3VnaCB0byByZXZhbGlkYXRpb24gZmV0Y2hlcnNcbiAgICBsZXQgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zID0gKCkgPT4gcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChmID0+IGFib3J0RmV0Y2hlcihmLmtleSkpO1xuICAgIGlmIChwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIpIHtcbiAgICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyk7XG4gICAgfVxuICAgIGxldCB7XG4gICAgICByZXN1bHRzLFxuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIGZldGNoZXJSZXN1bHRzXG4gICAgfSA9IGF3YWl0IGNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YShzdGF0ZS5tYXRjaGVzLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVycywgcmVxdWVzdCk7XG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgICAvLyBDbGVhbiB1cCBfYWZ0ZXJfIGxvYWRlcnMgaGF2ZSBjb21wbGV0ZWQuICBEb24ndCBjbGVhbiB1cCBpZiB3ZSBzaG9ydFxuICAgIC8vIGNpcmN1aXRlZCBiZWNhdXNlIGZldGNoQ29udHJvbGxlcnMgd291bGQgaGF2ZSBiZWVuIGFib3J0ZWQgYW5kXG4gICAgLy8gcmVhc3NpZ25lZCB0byBuZXcgY29udHJvbGxlcnMgZm9yIHRoZSBuZXh0IG5hdmlnYXRpb25cbiAgICBpZiAocGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyKSB7XG4gICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMpO1xuICAgIH1cbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKHJmLmtleSkpO1xuICAgIC8vIElmIGFueSBsb2FkZXJzIHJldHVybmVkIGEgcmVkaXJlY3QgUmVzcG9uc2UsIHN0YXJ0IGEgbmV3IFJFUExBQ0UgbmF2aWdhdGlvblxuICAgIGxldCByZWRpcmVjdCA9IGZpbmRSZWRpcmVjdChyZXN1bHRzKTtcbiAgICBpZiAocmVkaXJlY3QpIHtcbiAgICAgIGlmIChyZWRpcmVjdC5pZHggPj0gbWF0Y2hlc1RvTG9hZC5sZW5ndGgpIHtcbiAgICAgICAgLy8gSWYgdGhpcyByZWRpcmVjdCBjYW1lIGZyb20gYSBmZXRjaGVyIG1ha2Ugc3VyZSB3ZSBtYXJrIGl0IGluXG4gICAgICAgIC8vIGZldGNoUmVkaXJlY3RJZHMgc28gaXQgZG9lc24ndCBnZXQgcmV2YWxpZGF0ZWQgb24gdGhlIG5leHQgc2V0IG9mXG4gICAgICAgIC8vIGxvYWRlciBleGVjdXRpb25zXG4gICAgICAgIGxldCBmZXRjaGVyS2V5ID0gcmV2YWxpZGF0aW5nRmV0Y2hlcnNbcmVkaXJlY3QuaWR4IC0gbWF0Y2hlc1RvTG9hZC5sZW5ndGhdLmtleTtcbiAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5hZGQoZmV0Y2hlcktleSk7XG4gICAgICB9XG4gICAgICBhd2FpdCBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgcmVkaXJlY3QucmVzdWx0LCB7XG4gICAgICAgIHJlcGxhY2VcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgYW5kIGNvbW1pdCBvdXRwdXQgZnJvbSBsb2FkZXJzXG4gICAgbGV0IHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9ID0gcHJvY2Vzc0xvYWRlckRhdGEoc3RhdGUsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIGxvYWRlclJlc3VsdHMsIHBlbmRpbmdFcnJvciwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIGZldGNoZXJSZXN1bHRzLCBhY3RpdmVEZWZlcnJlZHMpO1xuICAgIC8vIFdpcmUgdXAgc3Vic2NyaWJlcnMgdG8gdXBkYXRlIGxvYWRlckRhdGEgYXMgcHJvbWlzZXMgc2V0dGxlXG4gICAgYWN0aXZlRGVmZXJyZWRzLmZvckVhY2goKGRlZmVycmVkRGF0YSwgcm91dGVJZCkgPT4ge1xuICAgICAgZGVmZXJyZWREYXRhLnN1YnNjcmliZShhYm9ydGVkID0+IHtcbiAgICAgICAgLy8gTm90ZTogTm8gbmVlZCB0byB1cGRhdGVTdGF0ZSBoZXJlIHNpbmNlIHRoZSBUcmFja2VkUHJvbWlzZSBvblxuICAgICAgICAvLyBsb2FkZXJEYXRhIGlzIHN0YWJsZSBhY3Jvc3MgcmVzb2x2ZS9yZWplY3RcbiAgICAgICAgLy8gUmVtb3ZlIHRoaXMgaW5zdGFuY2UgaWYgd2Ugd2VyZSBhYm9ydGVkIG9yIGlmIHByb21pc2VzIGhhdmUgc2V0dGxlZFxuICAgICAgICBpZiAoYWJvcnRlZCB8fCBkZWZlcnJlZERhdGEuZG9uZSkge1xuICAgICAgICAgIGFjdGl2ZURlZmVycmVkcy5kZWxldGUocm91dGVJZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGxldCB1cGRhdGVkRmV0Y2hlcnMgPSBtYXJrRmV0Y2hSZWRpcmVjdHNEb25lKCk7XG4gICAgbGV0IGRpZEFib3J0RmV0Y2hMb2FkcyA9IGFib3J0U3RhbGVGZXRjaExvYWRzKHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkKTtcbiAgICBsZXQgc2hvdWxkVXBkYXRlRmV0Y2hlcnMgPSB1cGRhdGVkRmV0Y2hlcnMgfHwgZGlkQWJvcnRGZXRjaExvYWRzIHx8IHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA+IDA7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9LCBzaG91bGRVcGRhdGVGZXRjaGVycyA/IHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0gOiB7fSk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0RmV0Y2hlcihrZXkpIHtcbiAgICByZXR1cm4gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSkgfHwgSURMRV9GRVRDSEVSO1xuICB9XG4gIC8vIFRyaWdnZXIgYSBmZXRjaGVyIGxvYWQvc3VibWl0IGZvciB0aGUgZ2l2ZW4gZmV0Y2hlciBrZXlcbiAgZnVuY3Rpb24gZmV0Y2goa2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKSB7XG4gICAgaWYgKGlzU2VydmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyb3V0ZXIuZmV0Y2goKSB3YXMgY2FsbGVkIGR1cmluZyB0aGUgc2VydmVyIHJlbmRlciwgYnV0IGl0IHNob3VsZG4ndCBiZS4gXCIgKyBcIllvdSBhcmUgbGlrZWx5IGNhbGxpbmcgYSB1c2VGZXRjaGVyKCkgbWV0aG9kIGluIHRoZSBib2R5IG9mIHlvdXIgY29tcG9uZW50LiBcIiArIFwiVHJ5IG1vdmluZyBpdCB0byBhIHVzZUVmZmVjdCBvciBhIGNhbGxiYWNrLlwiKTtcbiAgICB9XG4gICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKGtleSkpIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBub3JtYWxpemVkUGF0aCA9IG5vcm1hbGl6ZVRvKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzLCBiYXNlbmFtZSwgZnV0dXJlLnY3X3ByZXBlbmRCYXNlbmFtZSwgaHJlZiwgcm91dGVJZCwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5yZWxhdGl2ZSk7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgbm9ybWFsaXplZFBhdGgsIGJhc2VuYW1lKTtcbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBub3JtYWxpemVkUGF0aFxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQge1xuICAgICAgcGF0aCxcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICBlcnJvclxuICAgIH0gPSBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMoZnV0dXJlLnY3X25vcm1hbGl6ZUZvcm1NZXRob2QsIHRydWUsIG5vcm1hbGl6ZWRQYXRoLCBvcHRzKTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgcGF0aCk7XG4gICAgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IChvcHRzICYmIG9wdHMucHJldmVudFNjcm9sbFJlc2V0KSA9PT0gdHJ1ZTtcbiAgICBpZiAoc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICAgIGhhbmRsZUZldGNoZXJBY3Rpb24oa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgbWF0Y2hlcywgc3VibWlzc2lvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFN0b3JlIG9mZiB0aGUgbWF0Y2ggc28gd2UgY2FuIGNhbGwgaXQncyBzaG91bGRSZXZhbGlkYXRlIG9uIHN1YnNlcXVlbnRcbiAgICAvLyByZXZhbGlkYXRpb25zXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5zZXQoa2V5LCB7XG4gICAgICByb3V0ZUlkLFxuICAgICAgcGF0aFxuICAgIH0pO1xuICAgIGhhbmRsZUZldGNoZXJMb2FkZXIoa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgbWF0Y2hlcywgc3VibWlzc2lvbik7XG4gIH1cbiAgLy8gQ2FsbCB0aGUgYWN0aW9uIGZvciB0aGUgbWF0Y2hlZCBmZXRjaGVyLnN1Ym1pdCgpLCBhbmQgdGhlbiBoYW5kbGUgcmVkaXJlY3RzLFxuICAvLyBlcnJvcnMsIGFuZCByZXZhbGlkYXRpb25cbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlRmV0Y2hlckFjdGlvbihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCByZXF1ZXN0TWF0Y2hlcywgc3VibWlzc2lvbikge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5kZWxldGUoa2V5KTtcbiAgICBpZiAoIW1hdGNoLnJvdXRlLmFjdGlvbiAmJiAhbWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBwYXRoLFxuICAgICAgICByb3V0ZUlkOiByb3V0ZUlkXG4gICAgICB9KTtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gUHV0IHRoaXMgZmV0Y2hlciBpbnRvIGl0J3Mgc3VibWl0dGluZyBzdGF0ZVxuICAgIGxldCBleGlzdGluZ0ZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICBsZXQgZmV0Y2hlciA9IGdldFN1Ym1pdHRpbmdGZXRjaGVyKHN1Ym1pc3Npb24sIGV4aXN0aW5nRmV0Y2hlcik7XG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7XG4gICAgLy8gQ2FsbCB0aGUgYWN0aW9uIGZvciB0aGUgZmV0Y2hlclxuICAgIGxldCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IGZldGNoUmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgcGF0aCwgYWJvcnRDb250cm9sbGVyLnNpZ25hbCwgc3VibWlzc2lvbik7XG4gICAgZmV0Y2hDb250cm9sbGVycy5zZXQoa2V5LCBhYm9ydENvbnRyb2xsZXIpO1xuICAgIGxldCBvcmlnaW5hdGluZ0xvYWRJZCA9IGluY3JlbWVudGluZ0xvYWRJZDtcbiAgICBsZXQgYWN0aW9uUmVzdWx0ID0gYXdhaXQgY2FsbExvYWRlck9yQWN0aW9uKFwiYWN0aW9uXCIsIGZldGNoUmVxdWVzdCwgbWF0Y2gsIHJlcXVlc3RNYXRjaGVzLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBiYXNlbmFtZSk7XG4gICAgaWYgKGZldGNoUmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgLy8gV2UgY2FuIGRlbGV0ZSB0aGlzIHNvIGxvbmcgYXMgd2Ugd2VyZW4ndCBhYm9ydGVkIGJ5IG91IG91ciBvd24gZmV0Y2hlclxuICAgICAgLy8gcmUtc3VibWl0IHdoaWNoIHdvdWxkIGhhdmUgcHV0IF9uZXdfIGNvbnRyb2xsZXIgaXMgaW4gZmV0Y2hDb250cm9sbGVyc1xuICAgICAgaWYgKGZldGNoQ29udHJvbGxlcnMuZ2V0KGtleSkgPT09IGFib3J0Q29udHJvbGxlcikge1xuICAgICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgaWYgKHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkID4gb3JpZ2luYXRpbmdMb2FkSWQpIHtcbiAgICAgICAgLy8gQSBuZXcgbmF2aWdhdGlvbiB3YXMga2lja2VkIG9mZiBhZnRlciBvdXIgYWN0aW9uIHN0YXJ0ZWQsIHNvIHRoYXRcbiAgICAgICAgLy8gc2hvdWxkIHRha2UgcHJlY2VkZW5jZSBvdmVyIHRoaXMgcmVkaXJlY3QgbmF2aWdhdGlvbi4gIFdlIGFscmVhZHlcbiAgICAgICAgLy8gc2V0IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgc28gYWxsIGxvYWRlcnMgZm9yIHRoZSBuZXcgcm91dGUgc2hvdWxkXG4gICAgICAgIC8vIGZpcmUgdW5sZXNzIG9wdGVkIG91dCB2aWEgc2hvdWxkUmV2YWxpZGF0ZVxuICAgICAgICBsZXQgZG9uZUZldGNoZXIgPSBnZXREb25lRmV0Y2hlcih1bmRlZmluZWQpO1xuICAgICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBkb25lRmV0Y2hlcik7XG4gICAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGtleSk7XG4gICAgICAgIGxldCBsb2FkaW5nRmV0Y2hlciA9IGdldExvYWRpbmdGZXRjaGVyKHN1Ym1pc3Npb24pO1xuICAgICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBsb2FkaW5nRmV0Y2hlcik7XG4gICAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgYWN0aW9uUmVzdWx0LCB7XG4gICAgICAgICAgc3VibWlzc2lvbixcbiAgICAgICAgICBpc0ZldGNoQWN0aW9uUmVkaXJlY3Q6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgYW55IG5vbi1yZWRpcmVjdCBlcnJvcnMgdGhyb3duXG4gICAgaWYgKGlzRXJyb3JSZXN1bHQoYWN0aW9uUmVzdWx0KSkge1xuICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgYWN0aW9uUmVzdWx0LmVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQoYWN0aW9uUmVzdWx0KSkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgICAgdHlwZTogXCJkZWZlci1hY3Rpb25cIlxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIFN0YXJ0IHRoZSBkYXRhIGxvYWQgZm9yIGN1cnJlbnQgbWF0Y2hlcywgb3IgdGhlIG5leHQgbG9jYXRpb24gaWYgd2UncmVcbiAgICAvLyBpbiB0aGUgbWlkZGxlIG9mIGEgbmF2aWdhdGlvblxuICAgIGxldCBuZXh0TG9jYXRpb24gPSBzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uIHx8IHN0YXRlLmxvY2F0aW9uO1xuICAgIGxldCByZXZhbGlkYXRpb25SZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBuZXh0TG9jYXRpb24sIGFib3J0Q29udHJvbGxlci5zaWduYWwpO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBtYXRjaGVzID0gc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSAhPT0gXCJpZGxlXCIgPyBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwgYmFzZW5hbWUpIDogc3RhdGUubWF0Y2hlcztcbiAgICBpbnZhcmlhbnQobWF0Y2hlcywgXCJEaWRuJ3QgZmluZCBhbnkgbWF0Y2hlcyBhZnRlciBmZXRjaGVyIGFjdGlvblwiKTtcbiAgICBsZXQgbG9hZElkID0gKytpbmNyZW1lbnRpbmdMb2FkSWQ7XG4gICAgZmV0Y2hSZWxvYWRJZHMuc2V0KGtleSwgbG9hZElkKTtcbiAgICBsZXQgbG9hZEZldGNoZXIgPSBnZXRMb2FkaW5nRmV0Y2hlcihzdWJtaXNzaW9uLCBhY3Rpb25SZXN1bHQuZGF0YSk7XG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgbG9hZEZldGNoZXIpO1xuICAgIGxldCBbbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdID0gZ2V0TWF0Y2hlc1RvTG9hZChpbml0Lmhpc3RvcnksIHN0YXRlLCBtYXRjaGVzLCBzdWJtaXNzaW9uLCBuZXh0TG9jYXRpb24sIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIGZldGNoTG9hZE1hdGNoZXMsIGZldGNoUmVkaXJlY3RJZHMsIHJvdXRlc1RvVXNlLCBiYXNlbmFtZSwge1xuICAgICAgW21hdGNoLnJvdXRlLmlkXTogYWN0aW9uUmVzdWx0LmRhdGFcbiAgICB9LCB1bmRlZmluZWQgLy8gTm8gbmVlZCB0byBzZW5kIHRocm91Z2ggZXJyb3JzIHNpbmNlIHdlIHNob3J0IGNpcmN1aXQgYWJvdmVcbiAgICApO1xuICAgIC8vIFB1dCBhbGwgcmV2YWxpZGF0aW5nIGZldGNoZXJzIGludG8gdGhlIGxvYWRpbmcgc3RhdGUsIGV4Y2VwdCBmb3IgdGhlXG4gICAgLy8gY3VycmVudCBmZXRjaGVyIHdoaWNoIHdlIHdhbnQgdG8ga2VlcCBpbiBpdCdzIGN1cnJlbnQgbG9hZGluZyBzdGF0ZSB3aGljaFxuICAgIC8vIGNvbnRhaW5zIGl0J3MgYWN0aW9uIHN1Ym1pc3Npb24gaW5mbyArIGFjdGlvbiBkYXRhXG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZmlsdGVyKHJmID0+IHJmLmtleSAhPT0ga2V5KS5mb3JFYWNoKHJmID0+IHtcbiAgICAgIGxldCBzdGFsZUtleSA9IHJmLmtleTtcbiAgICAgIGxldCBleGlzdGluZ0ZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoc3RhbGVLZXkpO1xuICAgICAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXIgPSBnZXRMb2FkaW5nRmV0Y2hlcih1bmRlZmluZWQsIGV4aXN0aW5nRmV0Y2hlciA/IGV4aXN0aW5nRmV0Y2hlci5kYXRhIDogdW5kZWZpbmVkKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChzdGFsZUtleSwgcmV2YWxpZGF0aW5nRmV0Y2hlcik7XG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoc3RhbGVLZXkpKSB7XG4gICAgICAgIGFib3J0RmV0Y2hlcihzdGFsZUtleSk7XG4gICAgICB9XG4gICAgICBpZiAocmYuY29udHJvbGxlcikge1xuICAgICAgICBmZXRjaENvbnRyb2xsZXJzLnNldChzdGFsZUtleSwgcmYuY29udHJvbGxlcik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7XG4gICAgbGV0IGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyA9ICgpID0+IHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2gocmYgPT4gYWJvcnRGZXRjaGVyKHJmLmtleSkpO1xuICAgIGFib3J0Q29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyk7XG4gICAgbGV0IHtcbiAgICAgIHJlc3VsdHMsXG4gICAgICBsb2FkZXJSZXN1bHRzLFxuICAgICAgZmV0Y2hlclJlc3VsdHNcbiAgICB9ID0gYXdhaXQgY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKHN0YXRlLm1hdGNoZXMsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCByZXZhbGlkYXRpb25SZXF1ZXN0KTtcbiAgICBpZiAoYWJvcnRDb250cm9sbGVyLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGFib3J0Q29udHJvbGxlci5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyk7XG4gICAgZmV0Y2hSZWxvYWRJZHMuZGVsZXRlKGtleSk7XG4gICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHIgPT4gZmV0Y2hDb250cm9sbGVycy5kZWxldGUoci5rZXkpKTtcbiAgICBsZXQgcmVkaXJlY3QgPSBmaW5kUmVkaXJlY3QocmVzdWx0cyk7XG4gICAgaWYgKHJlZGlyZWN0KSB7XG4gICAgICBpZiAocmVkaXJlY3QuaWR4ID49IG1hdGNoZXNUb0xvYWQubGVuZ3RoKSB7XG4gICAgICAgIC8vIElmIHRoaXMgcmVkaXJlY3QgY2FtZSBmcm9tIGEgZmV0Y2hlciBtYWtlIHN1cmUgd2UgbWFyayBpdCBpblxuICAgICAgICAvLyBmZXRjaFJlZGlyZWN0SWRzIHNvIGl0IGRvZXNuJ3QgZ2V0IHJldmFsaWRhdGVkIG9uIHRoZSBuZXh0IHNldCBvZlxuICAgICAgICAvLyBsb2FkZXIgZXhlY3V0aW9uc1xuICAgICAgICBsZXQgZmV0Y2hlcktleSA9IHJldmFsaWRhdGluZ0ZldGNoZXJzW3JlZGlyZWN0LmlkeCAtIG1hdGNoZXNUb0xvYWQubGVuZ3RoXS5rZXk7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGZldGNoZXJLZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZWRpcmVjdC5yZXN1bHQpO1xuICAgIH1cbiAgICAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuICAgIGxldCB7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSA9IHByb2Nlc3NMb2FkZXJEYXRhKHN0YXRlLCBzdGF0ZS5tYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCB1bmRlZmluZWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKTtcbiAgICAvLyBTaW5jZSB3ZSBsZXQgcmV2YWxpZGF0aW9ucyBjb21wbGV0ZSBldmVuIGlmIHRoZSBzdWJtaXR0aW5nIGZldGNoZXIgd2FzXG4gICAgLy8gZGVsZXRlZCwgb25seSBwdXQgaXQgYmFjayB0byBpZGxlIGlmIGl0IGhhc24ndCBiZWVuIGRlbGV0ZWRcbiAgICBpZiAoc3RhdGUuZmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IGdldERvbmVGZXRjaGVyKGFjdGlvblJlc3VsdC5kYXRhKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gICAgbGV0IGRpZEFib3J0RmV0Y2hMb2FkcyA9IGFib3J0U3RhbGVGZXRjaExvYWRzKGxvYWRJZCk7XG4gICAgLy8gSWYgd2UgYXJlIGN1cnJlbnRseSBpbiBhIG5hdmlnYXRpb24gbG9hZGluZyBzdGF0ZSBhbmQgdGhpcyBmZXRjaGVyIGlzXG4gICAgLy8gbW9yZSByZWNlbnQgdGhhbiB0aGUgbmF2aWdhdGlvbiwgd2Ugd2FudCB0aGUgbmV3ZXIgZGF0YSBzbyBhYm9ydCB0aGVcbiAgICAvLyBuYXZpZ2F0aW9uIGFuZCBjb21wbGV0ZSBpdCB3aXRoIHRoZSBmZXRjaGVyIGRhdGFcbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIgJiYgbG9hZElkID4gcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQpIHtcbiAgICAgIGludmFyaWFudChwZW5kaW5nQWN0aW9uLCBcIkV4cGVjdGVkIHBlbmRpbmcgYWN0aW9uXCIpO1xuICAgICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyICYmIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgY29tcGxldGVOYXZpZ2F0aW9uKHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YSxcbiAgICAgICAgZXJyb3JzLFxuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBvdGhlcndpc2UganVzdCB1cGRhdGUgd2l0aCB0aGUgZmV0Y2hlciBkYXRhLCBwcmVzZXJ2aW5nIGFueSBleGlzdGluZ1xuICAgICAgLy8gbG9hZGVyRGF0YSBmb3IgbG9hZGVycyB0aGF0IGRpZCBub3QgbmVlZCB0byByZWxvYWQuICBXZSBoYXZlIHRvXG4gICAgICAvLyBtYW51YWxseSBtZXJnZSBoZXJlIHNpbmNlIHdlIGFyZW4ndCBnb2luZyB0aHJvdWdoIGNvbXBsZXRlTmF2aWdhdGlvblxuICAgICAgdXBkYXRlU3RhdGUoX2V4dGVuZHMoe1xuICAgICAgICBlcnJvcnMsXG4gICAgICAgIGxvYWRlckRhdGE6IG1lcmdlTG9hZGVyRGF0YShzdGF0ZS5sb2FkZXJEYXRhLCBsb2FkZXJEYXRhLCBtYXRjaGVzLCBlcnJvcnMpXG4gICAgICB9LCBkaWRBYm9ydEZldGNoTG9hZHMgfHwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoID4gMCA/IHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9IDoge30pKTtcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQ2FsbCB0aGUgbWF0Y2hlZCBsb2FkZXIgZm9yIGZldGNoZXIubG9hZCgpLCBoYW5kbGluZyByZWRpcmVjdHMsIGVycm9ycywgZXRjLlxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVGZXRjaGVyTG9hZGVyKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMsIHN1Ym1pc3Npb24pIHtcbiAgICBsZXQgZXhpc3RpbmdGZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgLy8gUHV0IHRoaXMgZmV0Y2hlciBpbnRvIGl0J3MgbG9hZGluZyBzdGF0ZVxuICAgIGxldCBsb2FkaW5nRmV0Y2hlciA9IGdldExvYWRpbmdGZXRjaGVyKHN1Ym1pc3Npb24sIGV4aXN0aW5nRmV0Y2hlciA/IGV4aXN0aW5nRmV0Y2hlci5kYXRhIDogdW5kZWZpbmVkKTtcbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBsb2FkaW5nRmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7XG4gICAgLy8gQ2FsbCB0aGUgbG9hZGVyIGZvciB0aGlzIGZldGNoZXIgcm91dGUgbWF0Y2hcbiAgICBsZXQgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBmZXRjaFJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIHBhdGgsIGFib3J0Q29udHJvbGxlci5zaWduYWwpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KGtleSwgYWJvcnRDb250cm9sbGVyKTtcbiAgICBsZXQgb3JpZ2luYXRpbmdMb2FkSWQgPSBpbmNyZW1lbnRpbmdMb2FkSWQ7XG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IGNhbGxMb2FkZXJPckFjdGlvbihcImxvYWRlclwiLCBmZXRjaFJlcXVlc3QsIG1hdGNoLCBtYXRjaGVzLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBiYXNlbmFtZSk7XG4gICAgLy8gRGVmZXJyZWQgaXNuJ3Qgc3VwcG9ydGVkIGZvciBmZXRjaGVyIGxvYWRzLCBhd2FpdCBldmVyeXRoaW5nIGFuZCB0cmVhdCBpdFxuICAgIC8vIGFzIGEgbm9ybWFsIGxvYWQuICByZXNvbHZlRGVmZXJyZWREYXRhIHdpbGwgcmV0dXJuIHVuZGVmaW5lZCBpZiB0aGlzXG4gICAgLy8gZmV0Y2hlciBnZXRzIGFib3J0ZWQsIHNvIHdlIGp1c3QgbGVhdmUgcmVzdWx0IHVudG91Y2hlZCBhbmQgc2hvcnQgY2lyY3VpdFxuICAgIC8vIGJlbG93IGlmIHRoYXQgaGFwcGVuc1xuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHJlc3VsdCA9IChhd2FpdCByZXNvbHZlRGVmZXJyZWREYXRhKHJlc3VsdCwgZmV0Y2hSZXF1ZXN0LnNpZ25hbCwgdHJ1ZSkpIHx8IHJlc3VsdDtcbiAgICB9XG4gICAgLy8gV2UgY2FuIGRlbGV0ZSB0aGlzIHNvIGxvbmcgYXMgd2Ugd2VyZW4ndCBhYm9ydGVkIGJ5IG91ciBvdXIgb3duIGZldGNoZXJcbiAgICAvLyByZS1sb2FkIHdoaWNoIHdvdWxkIGhhdmUgcHV0IF9uZXdfIGNvbnRyb2xsZXIgaXMgaW4gZmV0Y2hDb250cm9sbGVyc1xuICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmdldChrZXkpID09PSBhYm9ydENvbnRyb2xsZXIpIHtcbiAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgfVxuICAgIGlmIChmZXRjaFJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gSWYgdGhlIGxvYWRlciB0aHJldyBhIHJlZGlyZWN0IFJlc3BvbnNlLCBzdGFydCBhIG5ldyBSRVBMQUNFIG5hdmlnYXRpb25cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBpZiAocGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPiBvcmlnaW5hdGluZ0xvYWRJZCkge1xuICAgICAgICAvLyBBIG5ldyBuYXZpZ2F0aW9uIHdhcyBraWNrZWQgb2ZmIGFmdGVyIG91ciBsb2FkZXIgc3RhcnRlZCwgc28gdGhhdFxuICAgICAgICAvLyBzaG91bGQgdGFrZSBwcmVjZWRlbmNlIG92ZXIgdGhpcyByZWRpcmVjdCBuYXZpZ2F0aW9uXG4gICAgICAgIGxldCBkb25lRmV0Y2hlciA9IGdldERvbmVGZXRjaGVyKHVuZGVmaW5lZCk7XG4gICAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5hZGQoa2V5KTtcbiAgICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUHJvY2VzcyBhbnkgbm9uLXJlZGlyZWN0IGVycm9ycyB0aHJvd25cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgcm91dGVJZCk7XG4gICAgICBzdGF0ZS5mZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgICAgIC8vIFRPRE86IEluIHJlbWl4LCB0aGlzIHdvdWxkIHJlc2V0IHRvIElETEVfTkFWSUdBVElPTiBpZiBpdCB3YXMgYSBjYXRjaCAtXG4gICAgICAvLyBkbyB3ZSBuZWVkIHRvIGJlaGF2ZSBhbnkgZGlmZmVyZW50bHkgd2l0aCBvdXIgbm9uLXJlZGlyZWN0IGVycm9ycz9cbiAgICAgIC8vIFdoYXQgaWYgaXQgd2FzIGEgbm9uLXJlZGlyZWN0IFJlc3BvbnNlP1xuICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycyksXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoIWlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSwgXCJVbmhhbmRsZWQgZmV0Y2hlciBkZWZlcnJlZCBkYXRhXCIpO1xuICAgIC8vIFB1dCB0aGUgZmV0Y2hlciBiYWNrIGludG8gYW4gaWRsZSBzdGF0ZVxuICAgIGxldCBkb25lRmV0Y2hlciA9IGdldERvbmVGZXRjaGVyKHJlc3VsdC5kYXRhKTtcbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBkb25lRmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gaGFuZGxlIHJlZGlyZWN0cyByZXR1cm5lZCBmcm9tIGFuIGFjdGlvbiBvciBsb2FkZXIuXG4gICAqIE5vcm1hbGx5LCBhIHJlZGlyZWN0IFwicmVwbGFjZXNcIiB0aGUgbmF2aWdhdGlvbiB0aGF0IHRyaWdnZXJlZCBpdC4gIFNvLCBmb3JcbiAgICogZXhhbXBsZTpcbiAgICpcbiAgICogIC0gdXNlciBpcyBvbiAvYVxuICAgKiAgLSB1c2VyIGNsaWNrcyBhIGxpbmsgdG8gL2JcbiAgICogIC0gbG9hZGVyIGZvciAvYiByZWRpcmVjdHMgdG8gL2NcbiAgICpcbiAgICogSW4gYSBub24tSlMgYXBwIHRoZSBicm93c2VyIHdvdWxkIHRyYWNrIHRoZSBpbi1mbGlnaHQgbmF2aWdhdGlvbiB0byAvYiBhbmRcbiAgICogdGhlbiByZXBsYWNlIGl0IHdpdGggL2Mgd2hlbiBpdCBlbmNvdW50ZXJlZCB0aGUgcmVkaXJlY3QgcmVzcG9uc2UuICBJblxuICAgKiB0aGUgZW5kIGl0IHdvdWxkIG9ubHkgZXZlciB1cGRhdGUgdGhlIFVSTCBiYXIgd2l0aCAvYy5cbiAgICpcbiAgICogSW4gY2xpZW50LXNpZGUgcm91dGluZyB1c2luZyBwdXNoU3RhdGUvcmVwbGFjZVN0YXRlLCB3ZSBhaW0gdG8gZW11bGF0ZVxuICAgKiB0aGlzIGJlaGF2aW9yIGFuZCB3ZSBhbHNvIGRvIG5vdCB1cGRhdGUgaGlzdG9yeSB1bnRpbCB0aGUgZW5kIG9mIHRoZVxuICAgKiBuYXZpZ2F0aW9uIChpbmNsdWRpbmcgcHJvY2Vzc2VkIHJlZGlyZWN0cykuICBUaGlzIG1lYW5zIHRoYXQgd2UgbmV2ZXJcbiAgICogYWN0dWFsbHkgdG91Y2ggaGlzdG9yeSB1bnRpbCB3ZSd2ZSBwcm9jZXNzZWQgcmVkaXJlY3RzLCBzbyB3ZSBqdXN0IHVzZVxuICAgKiB0aGUgaGlzdG9yeSBhY3Rpb24gZnJvbSB0aGUgb3JpZ2luYWwgbmF2aWdhdGlvbiAoUFVTSCBvciBSRVBMQUNFKS5cbiAgICovXG4gIGFzeW5jIGZ1bmN0aW9uIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZWRpcmVjdCwgX3RlbXApIHtcbiAgICBsZXQge1xuICAgICAgc3VibWlzc2lvbixcbiAgICAgIHJlcGxhY2UsXG4gICAgICBpc0ZldGNoQWN0aW9uUmVkaXJlY3RcbiAgICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gICAgaWYgKHJlZGlyZWN0LnJldmFsaWRhdGUpIHtcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSB0cnVlO1xuICAgIH1cbiAgICBsZXQgcmVkaXJlY3RMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHN0YXRlLmxvY2F0aW9uLCByZWRpcmVjdC5sb2NhdGlvbiwgLy8gVE9ETzogVGhpcyBjYW4gYmUgcmVtb3ZlZCBvbmNlIHdlIGdldCByaWQgb2YgdXNlVHJhbnNpdGlvbiBpbiBSZW1peCB2MlxuICAgIF9leHRlbmRzKHtcbiAgICAgIF9pc1JlZGlyZWN0OiB0cnVlXG4gICAgfSwgaXNGZXRjaEFjdGlvblJlZGlyZWN0ID8ge1xuICAgICAgX2lzRmV0Y2hBY3Rpb25SZWRpcmVjdDogdHJ1ZVxuICAgIH0gOiB7fSkpO1xuICAgIGludmFyaWFudChyZWRpcmVjdExvY2F0aW9uLCBcIkV4cGVjdGVkIGEgbG9jYXRpb24gb24gdGhlIHJlZGlyZWN0IG5hdmlnYXRpb25cIik7XG4gICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgbGV0IGlzRG9jdW1lbnRSZWxvYWQgPSBmYWxzZTtcbiAgICAgIGlmIChyZWRpcmVjdC5yZWxvYWREb2N1bWVudCkge1xuICAgICAgICAvLyBIYXJkIHJlbG9hZCBpZiB0aGUgcmVzcG9uc2UgY29udGFpbmVkIFgtUmVtaXgtUmVsb2FkLURvY3VtZW50XG4gICAgICAgIGlzRG9jdW1lbnRSZWxvYWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChBQlNPTFVURV9VUkxfUkVHRVgudGVzdChyZWRpcmVjdC5sb2NhdGlvbikpIHtcbiAgICAgICAgY29uc3QgdXJsID0gaW5pdC5oaXN0b3J5LmNyZWF0ZVVSTChyZWRpcmVjdC5sb2NhdGlvbik7XG4gICAgICAgIGlzRG9jdW1lbnRSZWxvYWQgPVxuICAgICAgICAvLyBIYXJkIHJlbG9hZCBpZiBpdCdzIGFuIGFic29sdXRlIFVSTCB0byBhIG5ldyBvcmlnaW5cbiAgICAgICAgdXJsLm9yaWdpbiAhPT0gcm91dGVyV2luZG93LmxvY2F0aW9uLm9yaWdpbiB8fFxuICAgICAgICAvLyBIYXJkIHJlbG9hZCBpZiBpdCdzIGFuIGFic29sdXRlIFVSTCB0aGF0IGRvZXMgbm90IG1hdGNoIG91ciBiYXNlbmFtZVxuICAgICAgICBzdHJpcEJhc2VuYW1lKHVybC5wYXRobmFtZSwgYmFzZW5hbWUpID09IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoaXNEb2N1bWVudFJlbG9hZCkge1xuICAgICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICAgIHJvdXRlcldpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHJlZGlyZWN0LmxvY2F0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByb3V0ZXJXaW5kb3cubG9jYXRpb24uYXNzaWduKHJlZGlyZWN0LmxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFRoZXJlJ3Mgbm8gbmVlZCB0byBhYm9ydCBvbiByZWRpcmVjdHMsIHNpbmNlIHdlIGRvbid0IGRldGVjdCB0aGVcbiAgICAvLyByZWRpcmVjdCB1bnRpbCB0aGUgYWN0aW9uL2xvYWRlcnMgaGF2ZSBzZXR0bGVkXG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtcbiAgICBsZXQgcmVkaXJlY3RIaXN0b3J5QWN0aW9uID0gcmVwbGFjZSA9PT0gdHJ1ZSA/IEFjdGlvbi5SZXBsYWNlIDogQWN0aW9uLlB1c2g7XG4gICAgLy8gVXNlIHRoZSBpbmNvbWluZyBzdWJtaXNzaW9uIGlmIHByb3ZpZGVkLCBmYWxsYmFjayBvbiB0aGUgYWN0aXZlIG9uZSBpblxuICAgIC8vIHN0YXRlLm5hdmlnYXRpb25cbiAgICBsZXQgYWN0aXZlU3VibWlzc2lvbiA9IHN1Ym1pc3Npb24gfHwgZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uKHN0YXRlLm5hdmlnYXRpb24pO1xuICAgIC8vIElmIHRoaXMgd2FzIGEgMzA3LzMwOCBzdWJtaXNzaW9uIHdlIHdhbnQgdG8gcHJlc2VydmUgdGhlIEhUVFAgbWV0aG9kIGFuZFxuICAgIC8vIHJlLXN1Ym1pdCB0aGUgR0VUL1BPU1QvUFVUL1BBVENIL0RFTEVURSBhcyBhIHN1Ym1pc3Npb24gbmF2aWdhdGlvbiB0byB0aGVcbiAgICAvLyByZWRpcmVjdGVkIGxvY2F0aW9uXG4gICAgaWYgKHJlZGlyZWN0UHJlc2VydmVNZXRob2RTdGF0dXNDb2Rlcy5oYXMocmVkaXJlY3Quc3RhdHVzKSAmJiBhY3RpdmVTdWJtaXNzaW9uICYmIGlzTXV0YXRpb25NZXRob2QoYWN0aXZlU3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgICAgYXdhaXQgc3RhcnROYXZpZ2F0aW9uKHJlZGlyZWN0SGlzdG9yeUFjdGlvbiwgcmVkaXJlY3RMb2NhdGlvbiwge1xuICAgICAgICBzdWJtaXNzaW9uOiBfZXh0ZW5kcyh7fSwgYWN0aXZlU3VibWlzc2lvbiwge1xuICAgICAgICAgIGZvcm1BY3Rpb246IHJlZGlyZWN0LmxvY2F0aW9uXG4gICAgICAgIH0pLFxuICAgICAgICAvLyBQcmVzZXJ2ZSB0aGlzIGZsYWcgYWNyb3NzIHJlZGlyZWN0c1xuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaXNGZXRjaEFjdGlvblJlZGlyZWN0KSB7XG4gICAgICAvLyBGb3IgYSBmZXRjaCBhY3Rpb24gcmVkaXJlY3QsIHdlIGtpY2sgb2ZmIGEgbmV3IGxvYWRpbmcgbmF2aWdhdGlvblxuICAgICAgLy8gd2l0aG91dCB0aGUgZmV0Y2hlciBzdWJtaXNzaW9uLCBidXQgd2Ugc2VuZCBpdCBhbG9uZyBmb3Igc2hvdWxkUmV2YWxpZGF0ZVxuICAgICAgYXdhaXQgc3RhcnROYXZpZ2F0aW9uKHJlZGlyZWN0SGlzdG9yeUFjdGlvbiwgcmVkaXJlY3RMb2NhdGlvbiwge1xuICAgICAgICBvdmVycmlkZU5hdmlnYXRpb246IGdldExvYWRpbmdOYXZpZ2F0aW9uKHJlZGlyZWN0TG9jYXRpb24pLFxuICAgICAgICBmZXRjaGVyU3VibWlzc2lvbjogYWN0aXZlU3VibWlzc2lvbixcbiAgICAgICAgLy8gUHJlc2VydmUgdGhpcyBmbGFnIGFjcm9zcyByZWRpcmVjdHNcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgd2UgaGF2ZSBhIHN1Ym1pc3Npb24sIHdlIHdpbGwgcHJlc2VydmUgaXQgdGhyb3VnaCB0aGUgcmVkaXJlY3QgbmF2aWdhdGlvblxuICAgICAgbGV0IG92ZXJyaWRlTmF2aWdhdGlvbiA9IGdldExvYWRpbmdOYXZpZ2F0aW9uKHJlZGlyZWN0TG9jYXRpb24sIGFjdGl2ZVN1Ym1pc3Npb24pO1xuICAgICAgYXdhaXQgc3RhcnROYXZpZ2F0aW9uKHJlZGlyZWN0SGlzdG9yeUFjdGlvbiwgcmVkaXJlY3RMb2NhdGlvbiwge1xuICAgICAgICBvdmVycmlkZU5hdmlnYXRpb24sXG4gICAgICAgIC8vIFByZXNlcnZlIHRoaXMgZmxhZyBhY3Jvc3MgcmVkaXJlY3RzXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIGNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YShjdXJyZW50TWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgZmV0Y2hlcnNUb0xvYWQsIHJlcXVlc3QpIHtcbiAgICAvLyBDYWxsIGFsbCBuYXZpZ2F0aW9uIGxvYWRlcnMgYW5kIHJldmFsaWRhdGluZyBmZXRjaGVyIGxvYWRlcnMgaW4gcGFyYWxsZWwsXG4gICAgLy8gdGhlbiBzbGljZSBvZmYgdGhlIHJlc3VsdHMgaW50byBzZXBhcmF0ZSBhcnJheXMgc28gd2UgY2FuIGhhbmRsZSB0aGVtXG4gICAgLy8gYWNjb3JkaW5nbHlcbiAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFsuLi5tYXRjaGVzVG9Mb2FkLm1hcChtYXRjaCA9PiBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgcmVxdWVzdCwgbWF0Y2gsIG1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGJhc2VuYW1lKSksIC4uLmZldGNoZXJzVG9Mb2FkLm1hcChmID0+IHtcbiAgICAgIGlmIChmLm1hdGNoZXMgJiYgZi5tYXRjaCAmJiBmLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxMb2FkZXJPckFjdGlvbihcImxvYWRlclwiLCBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIGYucGF0aCwgZi5jb250cm9sbGVyLnNpZ25hbCksIGYubWF0Y2gsIGYubWF0Y2hlcywgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgYmFzZW5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGVycm9yID0ge1xuICAgICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgICAgICBwYXRobmFtZTogZi5wYXRoXG4gICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgfVxuICAgIH0pXSk7XG4gICAgbGV0IGxvYWRlclJlc3VsdHMgPSByZXN1bHRzLnNsaWNlKDAsIG1hdGNoZXNUb0xvYWQubGVuZ3RoKTtcbiAgICBsZXQgZmV0Y2hlclJlc3VsdHMgPSByZXN1bHRzLnNsaWNlKG1hdGNoZXNUb0xvYWQubGVuZ3RoKTtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChbcmVzb2x2ZURlZmVycmVkUmVzdWx0cyhjdXJyZW50TWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgbG9hZGVyUmVzdWx0cywgbG9hZGVyUmVzdWx0cy5tYXAoKCkgPT4gcmVxdWVzdC5zaWduYWwpLCBmYWxzZSwgc3RhdGUubG9hZGVyRGF0YSksIHJlc29sdmVEZWZlcnJlZFJlc3VsdHMoY3VycmVudE1hdGNoZXMsIGZldGNoZXJzVG9Mb2FkLm1hcChmID0+IGYubWF0Y2gpLCBmZXRjaGVyUmVzdWx0cywgZmV0Y2hlcnNUb0xvYWQubWFwKGYgPT4gZi5jb250cm9sbGVyID8gZi5jb250cm9sbGVyLnNpZ25hbCA6IG51bGwpLCB0cnVlKV0pO1xuICAgIHJldHVybiB7XG4gICAgICByZXN1bHRzLFxuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIGZldGNoZXJSZXN1bHRzXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpIHtcbiAgICAvLyBFdmVyeSBpbnRlcnJ1cHRpb24gdHJpZ2dlcnMgYSByZXZhbGlkYXRpb25cbiAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gdHJ1ZTtcbiAgICAvLyBDYW5jZWwgcGVuZGluZyByb3V0ZS1sZXZlbCBkZWZlcnJlZHMgYW5kIG1hcmsgY2FuY2VsbGVkIHJvdXRlcyBmb3JcbiAgICAvLyByZXZhbGlkYXRpb25cbiAgICBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcy5wdXNoKC4uLmNhbmNlbEFjdGl2ZURlZmVycmVkcygpKTtcbiAgICAvLyBBYm9ydCBpbi1mbGlnaHQgZmV0Y2hlciBsb2Fkc1xuICAgIGZldGNoTG9hZE1hdGNoZXMuZm9yRWFjaCgoXywga2V5KSA9PiB7XG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSkge1xuICAgICAgICBjYW5jZWxsZWRGZXRjaGVyTG9hZHMucHVzaChrZXkpO1xuICAgICAgICBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBlcnJvcikge1xuICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShzdGF0ZS5tYXRjaGVzLCByb3V0ZUlkKTtcbiAgICBkZWxldGVGZXRjaGVyKGtleSk7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZXJyb3JzOiB7XG4gICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogZXJyb3JcbiAgICAgIH0sXG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBkZWxldGVGZXRjaGVyKGtleSkge1xuICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgLy8gRG9uJ3QgYWJvcnQgdGhlIGNvbnRyb2xsZXIgaWYgdGhpcyBpcyBhIGRlbGV0aW9uIG9mIGEgZmV0Y2hlci5zdWJtaXQoKVxuICAgIC8vIGluIGl0J3MgbG9hZGluZyBwaGFzZSBzaW5jZSAtIHdlIGRvbid0IHdhbnQgdG8gYWJvcnQgdGhlIGNvcnJlc3BvbmRpbmdcbiAgICAvLyByZXZhbGlkYXRpb24gYW5kIHdhbnQgdGhlbSB0byBjb21wbGV0ZSBhbmQgbGFuZFxuICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpICYmICEoZmV0Y2hlciAmJiBmZXRjaGVyLnN0YXRlID09PSBcImxvYWRpbmdcIiAmJiBmZXRjaFJlbG9hZElkcy5oYXMoa2V5KSkpIHtcbiAgICAgIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgIH1cbiAgICBmZXRjaExvYWRNYXRjaGVzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoUmVkaXJlY3RJZHMuZGVsZXRlKGtleSk7XG4gICAgc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gIH1cbiAgZnVuY3Rpb24gYWJvcnRGZXRjaGVyKGtleSkge1xuICAgIGxldCBjb250cm9sbGVyID0gZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KTtcbiAgICBpbnZhcmlhbnQoY29udHJvbGxlciwgXCJFeHBlY3RlZCBmZXRjaCBjb250cm9sbGVyOiBcIiArIGtleSk7XG4gICAgY29udHJvbGxlci5hYm9ydCgpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gIH1cbiAgZnVuY3Rpb24gbWFya0ZldGNoZXJzRG9uZShrZXlzKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIGtleXMpIHtcbiAgICAgIGxldCBmZXRjaGVyID0gZ2V0RmV0Y2hlcihrZXkpO1xuICAgICAgbGV0IGRvbmVGZXRjaGVyID0gZ2V0RG9uZUZldGNoZXIoZmV0Y2hlci5kYXRhKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpIHtcbiAgICBsZXQgZG9uZUtleXMgPSBbXTtcbiAgICBsZXQgdXBkYXRlZEZldGNoZXJzID0gZmFsc2U7XG4gICAgZm9yIChsZXQga2V5IG9mIGZldGNoUmVkaXJlY3RJZHMpIHtcbiAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgICBpbnZhcmlhbnQoZmV0Y2hlciwgXCJFeHBlY3RlZCBmZXRjaGVyOiBcIiArIGtleSk7XG4gICAgICBpZiAoZmV0Y2hlci5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIpIHtcbiAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5kZWxldGUoa2V5KTtcbiAgICAgICAgZG9uZUtleXMucHVzaChrZXkpO1xuICAgICAgICB1cGRhdGVkRmV0Y2hlcnMgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBtYXJrRmV0Y2hlcnNEb25lKGRvbmVLZXlzKTtcbiAgICByZXR1cm4gdXBkYXRlZEZldGNoZXJzO1xuICB9XG4gIGZ1bmN0aW9uIGFib3J0U3RhbGVGZXRjaExvYWRzKGxhbmRlZElkKSB7XG4gICAgbGV0IHllZXRlZEtleXMgPSBbXTtcbiAgICBmb3IgKGxldCBba2V5LCBpZF0gb2YgZmV0Y2hSZWxvYWRJZHMpIHtcbiAgICAgIGlmIChpZCA8IGxhbmRlZElkKSB7XG4gICAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgICAgIGludmFyaWFudChmZXRjaGVyLCBcIkV4cGVjdGVkIGZldGNoZXI6IFwiICsga2V5KTtcbiAgICAgICAgaWYgKGZldGNoZXIuc3RhdGUgPT09IFwibG9hZGluZ1wiKSB7XG4gICAgICAgICAgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgICAgICAgZmV0Y2hSZWxvYWRJZHMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgeWVldGVkS2V5cy5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgbWFya0ZldGNoZXJzRG9uZSh5ZWV0ZWRLZXlzKTtcbiAgICByZXR1cm4geWVldGVkS2V5cy5sZW5ndGggPiAwO1xuICB9XG4gIGZ1bmN0aW9uIGdldEJsb2NrZXIoa2V5LCBmbikge1xuICAgIGxldCBibG9ja2VyID0gc3RhdGUuYmxvY2tlcnMuZ2V0KGtleSkgfHwgSURMRV9CTE9DS0VSO1xuICAgIGlmIChibG9ja2VyRnVuY3Rpb25zLmdldChrZXkpICE9PSBmbikge1xuICAgICAgYmxvY2tlckZ1bmN0aW9ucy5zZXQoa2V5LCBmbik7XG4gICAgfVxuICAgIHJldHVybiBibG9ja2VyO1xuICB9XG4gIGZ1bmN0aW9uIGRlbGV0ZUJsb2NrZXIoa2V5KSB7XG4gICAgc3RhdGUuYmxvY2tlcnMuZGVsZXRlKGtleSk7XG4gICAgYmxvY2tlckZ1bmN0aW9ucy5kZWxldGUoa2V5KTtcbiAgfVxuICAvLyBVdGlsaXR5IGZ1bmN0aW9uIHRvIHVwZGF0ZSBibG9ja2VycywgZW5zdXJpbmcgdmFsaWQgc3RhdGUgdHJhbnNpdGlvbnNcbiAgZnVuY3Rpb24gdXBkYXRlQmxvY2tlcihrZXksIG5ld0Jsb2NrZXIpIHtcbiAgICBsZXQgYmxvY2tlciA9IHN0YXRlLmJsb2NrZXJzLmdldChrZXkpIHx8IElETEVfQkxPQ0tFUjtcbiAgICAvLyBQb29yIG1hbnMgc3RhdGUgbWFjaGluZSA6KVxuICAgIC8vIGh0dHBzOi8vbWVybWFpZC5saXZlL2VkaXQjcGFrbzplTnFWa2M5T3d6QU14bDhsOG5uakFZckV0RElPSEVCSWd3dktKVFJlR3kzX2xEcElxTzI3azZhd01HMFhjckxsbno4N253ZG9uRVNvZ0tYWEJ1RTc5cnE3NVhaTzMteUhkczBSSlZ1djcwWXJQbFVyQ0VlMkhmck9SUzNydWJxWmZ1aHRwZzVDOXdrNXRaNFZLY1JVcTg4cTlaOFJTMC00OGNFMWlISmtMMHVnYkh1Rkx1czlMNnNwWnk4blg5TVAyQ05kb21WYXBvc3F1M2ZHYXlUOFQ4LWpKUXdoZXBvX1V0cGdCUWFERVVvbTA0ZFpoQU4xYUpCRGxVS0pCeEUxY2VCMlNtajBNbG4tSUJXNUFGVTJkd1Vpa3R0XzJRYXEyZEJmYUtkRXVwODVVVjdZZC1kS2psbmthYmwyUHZyMERUa1RyZU1cbiAgICBpbnZhcmlhbnQoYmxvY2tlci5zdGF0ZSA9PT0gXCJ1bmJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInByb2NlZWRpbmdcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInVuYmxvY2tlZFwiIHx8IGJsb2NrZXIuc3RhdGUgPT09IFwicHJvY2VlZGluZ1wiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwidW5ibG9ja2VkXCIsIFwiSW52YWxpZCBibG9ja2VyIHN0YXRlIHRyYW5zaXRpb246IFwiICsgYmxvY2tlci5zdGF0ZSArIFwiIC0+IFwiICsgbmV3QmxvY2tlci5zdGF0ZSk7XG4gICAgbGV0IGJsb2NrZXJzID0gbmV3IE1hcChzdGF0ZS5ibG9ja2Vycyk7XG4gICAgYmxvY2tlcnMuc2V0KGtleSwgbmV3QmxvY2tlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgYmxvY2tlcnNcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBzaG91bGRCbG9ja05hdmlnYXRpb24oX3JlZjIpIHtcbiAgICBsZXQge1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0gPSBfcmVmMjtcbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9ucy5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFdlIG9ueSBzdXBwb3J0IGEgc2luZ2xlIGFjdGl2ZSBibG9ja2VyIGF0IHRoZSBtb21lbnQgc2luY2Ugd2UgZG9uJ3QgaGF2ZVxuICAgIC8vIGFueSBjb21wZWxsaW5nIHVzZSBjYXNlcyBmb3IgbXVsdGktYmxvY2tlciB5ZXRcbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9ucy5zaXplID4gMSkge1xuICAgICAgd2FybmluZyhmYWxzZSwgXCJBIHJvdXRlciBvbmx5IHN1cHBvcnRzIG9uZSBibG9ja2VyIGF0IGEgdGltZVwiKTtcbiAgICB9XG4gICAgbGV0IGVudHJpZXMgPSBBcnJheS5mcm9tKGJsb2NrZXJGdW5jdGlvbnMuZW50cmllcygpKTtcbiAgICBsZXQgW2Jsb2NrZXJLZXksIGJsb2NrZXJGdW5jdGlvbl0gPSBlbnRyaWVzW2VudHJpZXMubGVuZ3RoIC0gMV07XG4gICAgbGV0IGJsb2NrZXIgPSBzdGF0ZS5ibG9ja2Vycy5nZXQoYmxvY2tlcktleSk7XG4gICAgaWYgKGJsb2NrZXIgJiYgYmxvY2tlci5zdGF0ZSA9PT0gXCJwcm9jZWVkaW5nXCIpIHtcbiAgICAgIC8vIElmIHRoZSBibG9ja2VyIGlzIGN1cnJlbnRseSBwcm9jZWVkaW5nLCB3ZSBkb24ndCBuZWVkIHRvIHJlLWNoZWNrXG4gICAgICAvLyBpdCBhbmQgY2FuIGxldCB0aGlzIG5hdmlnYXRpb24gY29udGludWVcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQXQgdGhpcyBwb2ludCwgd2Uga25vdyB3ZSdyZSB1bmJsb2NrZWQvYmxvY2tlZCBzbyB3ZSBuZWVkIHRvIGNoZWNrIHRoZVxuICAgIC8vIHVzZXItcHJvdmlkZWQgYmxvY2tlciBmdW5jdGlvblxuICAgIGlmIChibG9ja2VyRnVuY3Rpb24oe1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0pKSB7XG4gICAgICByZXR1cm4gYmxvY2tlcktleTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY2FuY2VsQWN0aXZlRGVmZXJyZWRzKHByZWRpY2F0ZSkge1xuICAgIGxldCBjYW5jZWxsZWRSb3V0ZUlkcyA9IFtdO1xuICAgIGFjdGl2ZURlZmVycmVkcy5mb3JFYWNoKChkZmQsIHJvdXRlSWQpID0+IHtcbiAgICAgIGlmICghcHJlZGljYXRlIHx8IHByZWRpY2F0ZShyb3V0ZUlkKSkge1xuICAgICAgICAvLyBDYW5jZWwgdGhlIGRlZmVycmVkIC0gYnV0IGRvIG5vdCByZW1vdmUgZnJvbSBhY3RpdmVEZWZlcnJlZHMgaGVyZSAtXG4gICAgICAgIC8vIHdlIHJlbHkgb24gdGhlIHN1YnNjcmliZXJzIHRvIGRvIHRoYXQgc28gb3VyIHRlc3RzIGNhbiBhc3NlcnQgcHJvcGVyXG4gICAgICAgIC8vIGNsZWFudXAgdmlhIF9pbnRlcm5hbEFjdGl2ZURlZmVycmVkc1xuICAgICAgICBkZmQuY2FuY2VsKCk7XG4gICAgICAgIGNhbmNlbGxlZFJvdXRlSWRzLnB1c2gocm91dGVJZCk7XG4gICAgICAgIGFjdGl2ZURlZmVycmVkcy5kZWxldGUocm91dGVJZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNhbmNlbGxlZFJvdXRlSWRzO1xuICB9XG4gIC8vIE9wdCBpbiB0byBjYXB0dXJpbmcgYW5kIHJlcG9ydGluZyBzY3JvbGwgcG9zaXRpb25zIGR1cmluZyBuYXZpZ2F0aW9ucyxcbiAgLy8gdXNlZCBieSB0aGUgPFNjcm9sbFJlc3RvcmF0aW9uPiBjb21wb25lbnRcbiAgZnVuY3Rpb24gZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24ocG9zaXRpb25zLCBnZXRQb3NpdGlvbiwgZ2V0S2V5KSB7XG4gICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBwb3NpdGlvbnM7XG4gICAgZ2V0U2Nyb2xsUG9zaXRpb24gPSBnZXRQb3NpdGlvbjtcbiAgICBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IGdldEtleSB8fCBudWxsO1xuICAgIC8vIFBlcmZvcm0gaW5pdGlhbCBoeWRyYXRpb24gc2Nyb2xsIHJlc3RvcmF0aW9uLCBzaW5jZSB3ZSBtaXNzIHRoZSBib2F0IG9uXG4gICAgLy8gdGhlIGluaXRpYWwgdXBkYXRlU3RhdGUoKSBiZWNhdXNlIHdlJ3ZlIG5vdCB5ZXQgcmVuZGVyZWQgPFNjcm9sbFJlc3RvcmF0aW9uLz5cbiAgICAvLyBhbmQgdGhlcmVmb3JlIGhhdmUgbm8gc2F2ZWRTY3JvbGxQb3NpdGlvbnMgYXZhaWxhYmxlXG4gICAgaWYgKCFpbml0aWFsU2Nyb2xsUmVzdG9yZWQgJiYgc3RhdGUubmF2aWdhdGlvbiA9PT0gSURMRV9OQVZJR0FUSU9OKSB7XG4gICAgICBpbml0aWFsU2Nyb2xsUmVzdG9yZWQgPSB0cnVlO1xuICAgICAgbGV0IHkgPSBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzKTtcbiAgICAgIGlmICh5ICE9IG51bGwpIHtcbiAgICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogeVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gbnVsbDtcbiAgICAgIGdldFNjcm9sbFBvc2l0aW9uID0gbnVsbDtcbiAgICAgIGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ID0gbnVsbDtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGdldFNjcm9sbEtleShsb2NhdGlvbiwgbWF0Y2hlcykge1xuICAgIGlmIChnZXRTY3JvbGxSZXN0b3JhdGlvbktleSkge1xuICAgICAgbGV0IGtleSA9IGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5KGxvY2F0aW9uLCBtYXRjaGVzLm1hcChtID0+IGNyZWF0ZVVzZU1hdGNoZXNNYXRjaChtLCBzdGF0ZS5sb2FkZXJEYXRhKSkpO1xuICAgICAgcmV0dXJuIGtleSB8fCBsb2NhdGlvbi5rZXk7XG4gICAgfVxuICAgIHJldHVybiBsb2NhdGlvbi5rZXk7XG4gIH1cbiAgZnVuY3Rpb24gc2F2ZVNjcm9sbFBvc2l0aW9uKGxvY2F0aW9uLCBtYXRjaGVzKSB7XG4gICAgaWYgKHNhdmVkU2Nyb2xsUG9zaXRpb25zICYmIGdldFNjcm9sbFBvc2l0aW9uKSB7XG4gICAgICBsZXQga2V5ID0gZ2V0U2Nyb2xsS2V5KGxvY2F0aW9uLCBtYXRjaGVzKTtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV0gPSBnZXRTY3JvbGxQb3NpdGlvbigpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKGxvY2F0aW9uLCBtYXRjaGVzKSB7XG4gICAgaWYgKHNhdmVkU2Nyb2xsUG9zaXRpb25zKSB7XG4gICAgICBsZXQga2V5ID0gZ2V0U2Nyb2xsS2V5KGxvY2F0aW9uLCBtYXRjaGVzKTtcbiAgICAgIGxldCB5ID0gc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgeSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4geTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gX2ludGVybmFsU2V0Um91dGVzKG5ld1JvdXRlcykge1xuICAgIG1hbmlmZXN0ID0ge307XG4gICAgaW5GbGlnaHREYXRhUm91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhuZXdSb3V0ZXMsIG1hcFJvdXRlUHJvcGVydGllcywgdW5kZWZpbmVkLCBtYW5pZmVzdCk7XG4gIH1cbiAgcm91dGVyID0ge1xuICAgIGdldCBiYXNlbmFtZSgpIHtcbiAgICAgIHJldHVybiBiYXNlbmFtZTtcbiAgICB9LFxuICAgIGdldCBzdGF0ZSgpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9LFxuICAgIGdldCByb3V0ZXMoKSB7XG4gICAgICByZXR1cm4gZGF0YVJvdXRlcztcbiAgICB9LFxuICAgIGluaXRpYWxpemUsXG4gICAgc3Vic2NyaWJlLFxuICAgIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uLFxuICAgIG5hdmlnYXRlLFxuICAgIGZldGNoLFxuICAgIHJldmFsaWRhdGUsXG4gICAgLy8gUGFzc3Rocm91Z2ggdG8gaGlzdG9yeS1hd2FyZSBjcmVhdGVIcmVmIHVzZWQgYnkgdXNlSHJlZiBzbyB3ZSBnZXQgcHJvcGVyXG4gICAgLy8gaGFzaC1hd2FyZSBVUkxzIGluIERPTSBwYXRoc1xuICAgIGNyZWF0ZUhyZWY6IHRvID0+IGluaXQuaGlzdG9yeS5jcmVhdGVIcmVmKHRvKSxcbiAgICBlbmNvZGVMb2NhdGlvbjogdG8gPT4gaW5pdC5oaXN0b3J5LmVuY29kZUxvY2F0aW9uKHRvKSxcbiAgICBnZXRGZXRjaGVyLFxuICAgIGRlbGV0ZUZldGNoZXIsXG4gICAgZGlzcG9zZSxcbiAgICBnZXRCbG9ja2VyLFxuICAgIGRlbGV0ZUJsb2NrZXIsXG4gICAgX2ludGVybmFsRmV0Y2hDb250cm9sbGVyczogZmV0Y2hDb250cm9sbGVycyxcbiAgICBfaW50ZXJuYWxBY3RpdmVEZWZlcnJlZHM6IGFjdGl2ZURlZmVycmVkcyxcbiAgICAvLyBUT0RPOiBSZW1vdmUgc2V0Um91dGVzLCBpdCdzIHRlbXBvcmFyeSB0byBhdm9pZCBkZWFsaW5nIHdpdGhcbiAgICAvLyB1cGRhdGluZyB0aGUgdHJlZSB3aGlsZSB2YWxpZGF0aW5nIHRoZSB1cGRhdGUgYWxnb3JpdGhtLlxuICAgIF9pbnRlcm5hbFNldFJvdXRlc1xuICB9O1xuICByZXR1cm4gcm91dGVyO1xufVxuLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIGNyZWF0ZVN0YXRpY0hhbmRsZXJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5jb25zdCBVTlNBRkVfREVGRVJSRURfU1lNQk9MID0gU3ltYm9sKFwiZGVmZXJyZWRcIik7XG5mdW5jdGlvbiBjcmVhdGVTdGF0aWNIYW5kbGVyKHJvdXRlcywgb3B0cykge1xuICBpbnZhcmlhbnQocm91dGVzLmxlbmd0aCA+IDAsIFwiWW91IG11c3QgcHJvdmlkZSBhIG5vbi1lbXB0eSByb3V0ZXMgYXJyYXkgdG8gY3JlYXRlU3RhdGljSGFuZGxlclwiKTtcbiAgbGV0IG1hbmlmZXN0ID0ge307XG4gIGxldCBiYXNlbmFtZSA9IChvcHRzID8gb3B0cy5iYXNlbmFtZSA6IG51bGwpIHx8IFwiL1wiO1xuICBsZXQgbWFwUm91dGVQcm9wZXJ0aWVzO1xuICBpZiAob3B0cyAhPSBudWxsICYmIG9wdHMubWFwUm91dGVQcm9wZXJ0aWVzKSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gb3B0cy5tYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH0gZWxzZSBpZiAob3B0cyAhPSBudWxsICYmIG9wdHMuZGV0ZWN0RXJyb3JCb3VuZGFyeSkge1xuICAgIC8vIElmIHRoZXkgYXJlIHN0aWxsIHVzaW5nIHRoZSBkZXByZWNhdGVkIHZlcnNpb24sIHdyYXAgaXQgd2l0aCB0aGUgbmV3IEFQSVxuICAgIGxldCBkZXRlY3RFcnJvckJvdW5kYXJ5ID0gb3B0cy5kZXRlY3RFcnJvckJvdW5kYXJ5O1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IHJvdXRlID0+ICh7XG4gICAgICBoYXNFcnJvckJvdW5kYXJ5OiBkZXRlY3RFcnJvckJvdW5kYXJ5KHJvdXRlKVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IGRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH1cbiAgbGV0IGRhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKHJvdXRlcywgbWFwUm91dGVQcm9wZXJ0aWVzLCB1bmRlZmluZWQsIG1hbmlmZXN0KTtcbiAgLyoqXG4gICAqIFRoZSBxdWVyeSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgZG9jdW1lbnQgcmVxdWVzdHMsIGluIHdoaWNoIHdlIHdhbnQgdG9cbiAgICogY2FsbCBhbiBvcHRpb25hbCBhY3Rpb24gYW5kIHBvdGVudGlhbGx5IG11bHRpcGxlIGxvYWRlcnMgZm9yIGFsbCBuZXN0ZWRcbiAgICogcm91dGVzLiAgSXQgcmV0dXJucyBhIFN0YXRpY0hhbmRsZXJDb250ZXh0IG9iamVjdCwgd2hpY2ggaXMgdmVyeSBzaW1pbGFyXG4gICAqIHRvIHRoZSByb3V0ZXIgc3RhdGUgKGxvY2F0aW9uLCBsb2FkZXJEYXRhLCBhY3Rpb25EYXRhLCBlcnJvcnMsIGV0Yy4pIGFuZFxuICAgKiBhbHNvIGFkZHMgU1NSLXNwZWNpZmljIGluZm9ybWF0aW9uIHN1Y2ggYXMgdGhlIHN0YXR1c0NvZGUgYW5kIGhlYWRlcnNcbiAgICogZnJvbSBhY3Rpb24vbG9hZGVycyBSZXNwb25zZXMuXG4gICAqXG4gICAqIEl0IF9zaG91bGRfIG5ldmVyIHRocm93IGFuZCBzaG91bGQgcmVwb3J0IGFsbCBlcnJvcnMgdGhyb3VnaCB0aGVcbiAgICogcmV0dXJuZWQgY29udGV4dC5lcnJvcnMgb2JqZWN0LCBwcm9wZXJseSBhc3NvY2lhdGluZyBlcnJvcnMgdG8gdGhlaXIgZXJyb3JcbiAgICogYm91bmRhcnkuICBBZGRpdGlvbmFsbHksIGl0IHRyYWNrcyBfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB3aGljaCBjYW4gYmVcbiAgICogdXNlZCB0byBlbXVsYXRlIFJlYWN0IGVycm9yIGJvdW5kYXJpZXMgZHVyaW5nIFNTciBieSBwZXJmb3JtaW5nIGEgc2Vjb25kXG4gICAqIHBhc3Mgb25seSBkb3duIHRvIHRoZSBib3VuZGFyeUlkLlxuICAgKlxuICAgKiBUaGUgb25lIGV4Y2VwdGlvbiB3aGVyZSB3ZSBkbyBub3QgcmV0dXJuIGEgU3RhdGljSGFuZGxlckNvbnRleHQgaXMgd2hlbiBhXG4gICAqIHJlZGlyZWN0IHJlc3BvbnNlIGlzIHJldHVybmVkIG9yIHRocm93biBmcm9tIGFueSBhY3Rpb24vbG9hZGVyLiAgV2VcbiAgICogcHJvcGFnYXRlIHRoYXQgb3V0IGFuZCByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBzbyB0aGUgSFRUUCBzZXJ2ZXIgY2FuXG4gICAqIHJldHVybiBpdCBkaXJlY3RseS5cbiAgICovXG4gIGFzeW5jIGZ1bmN0aW9uIHF1ZXJ5KHJlcXVlc3QsIF90ZW1wMikge1xuICAgIGxldCB7XG4gICAgICByZXF1ZXN0Q29udGV4dFxuICAgIH0gPSBfdGVtcDIgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAyO1xuICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICBsZXQgbWV0aG9kID0gcmVxdWVzdC5tZXRob2Q7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oXCJcIiwgY3JlYXRlUGF0aCh1cmwpLCBudWxsLCBcImRlZmF1bHRcIik7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBsb2NhdGlvbiwgYmFzZW5hbWUpO1xuICAgIC8vIFNTUiBzdXBwb3J0cyBIRUFEIHJlcXVlc3RzIHdoaWxlIFNQQSBkb2Vzbid0XG4gICAgaWYgKCFpc1ZhbGlkTWV0aG9kKG1ldGhvZCkgJiYgbWV0aG9kICE9PSBcIkhFQURcIikge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kXG4gICAgICB9KTtcbiAgICAgIGxldCB7XG4gICAgICAgIG1hdGNoZXM6IG1ldGhvZE5vdEFsbG93ZWRNYXRjaGVzLFxuICAgICAgICByb3V0ZVxuICAgICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIG1hdGNoZXM6IG1ldGhvZE5vdEFsbG93ZWRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgfSxcbiAgICAgICAgc3RhdHVzQ29kZTogZXJyb3Iuc3RhdHVzLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCFtYXRjaGVzKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pO1xuICAgICAgbGV0IHtcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICByb3V0ZVxuICAgICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXR1c0NvZGU6IGVycm9yLnN0YXR1cyxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9LFxuICAgICAgICBhY3RpdmVEZWZlcnJlZHM6IG51bGxcbiAgICAgIH07XG4gICAgfVxuICAgIGxldCByZXN1bHQgPSBhd2FpdCBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0KTtcbiAgICBpZiAoaXNSZXNwb25zZShyZXN1bHQpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvLyBXaGVuIHJldHVybmluZyBTdGF0aWNIYW5kbGVyQ29udGV4dCwgd2UgcGF0Y2ggYmFjayBpbiB0aGUgbG9jYXRpb24gaGVyZVxuICAgIC8vIHNpbmNlIHdlIG5lZWQgaXQgZm9yIFJlYWN0IENvbnRleHQuICBCdXQgdGhpcyBoZWxwcyBrZWVwIG91ciBzdWJtaXQgYW5kXG4gICAgLy8gbG9hZFJvdXRlRGF0YSBvcGVyYXRpbmcgb24gYSBSZXF1ZXN0IGluc3RlYWQgb2YgYSBMb2NhdGlvblxuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBsb2NhdGlvbixcbiAgICAgIGJhc2VuYW1lXG4gICAgfSwgcmVzdWx0KTtcbiAgfVxuICAvKipcbiAgICogVGhlIHF1ZXJ5Um91dGUoKSBtZXRob2QgaXMgaW50ZW5kZWQgZm9yIHRhcmdldGVkIHJvdXRlIHJlcXVlc3RzLCBlaXRoZXJcbiAgICogZm9yIGZldGNoID9fZGF0YSByZXF1ZXN0cyBvciByZXNvdXJjZSByb3V0ZSByZXF1ZXN0cy4gIEluIHRoaXMgY2FzZSwgd2VcbiAgICogYXJlIG9ubHkgZXZlciBjYWxsaW5nIGEgc2luZ2xlIGFjdGlvbiBvciBsb2FkZXIsIGFuZCB3ZSBhcmUgcmV0dXJuaW5nIHRoZVxuICAgKiByZXR1cm5lZCB2YWx1ZSBkaXJlY3RseS4gIEluIG1vc3QgY2FzZXMsIHRoaXMgd2lsbCBiZSBhIFJlc3BvbnNlIHJldHVybmVkXG4gICAqIGZyb20gdGhlIGFjdGlvbi9sb2FkZXIsIGJ1dCBpdCBtYXkgYmUgYSBwcmltaXRpdmUgb3Igb3RoZXIgdmFsdWUgYXMgd2VsbCAtXG4gICAqIGFuZCBpbiBzdWNoIGNhc2VzIHRoZSBjYWxsaW5nIGNvbnRleHQgc2hvdWxkIGhhbmRsZSB0aGF0IGFjY29yZGluZ2x5LlxuICAgKlxuICAgKiBXZSBkbyByZXNwZWN0IHRoZSB0aHJvdy9yZXR1cm4gZGlmZmVyZW50aWF0aW9uLCBzbyBpZiBhbiBhY3Rpb24vbG9hZGVyXG4gICAqIHRocm93cywgdGhlbiB0aGlzIG1ldGhvZCB3aWxsIHRocm93IHRoZSB2YWx1ZS4gIFRoaXMgaXMgaW1wb3J0YW50IHNvIHdlXG4gICAqIGNhbiBkbyBwcm9wZXIgYm91bmRhcnkgaWRlbnRpZmljYXRpb24gaW4gUmVtaXggd2hlcmUgYSB0aHJvd24gUmVzcG9uc2VcbiAgICogbXVzdCBnbyB0byB0aGUgQ2F0Y2ggQm91bmRhcnkgYnV0IGEgcmV0dXJuZWQgUmVzcG9uc2UgaXMgaGFwcHktcGF0aC5cbiAgICpcbiAgICogT25lIHRoaW5nIHRvIG5vdGUgaXMgdGhhdCBhbnkgUm91dGVyLWluaXRpYXRlZCBFcnJvcnMgdGhhdCBtYWtlIHNlbnNlXG4gICAqIHRvIGFzc29jaWF0ZSB3aXRoIGEgc3RhdHVzIGNvZGUgd2lsbCBiZSB0aHJvd24gYXMgYW4gRXJyb3JSZXNwb25zZVxuICAgKiBpbnN0YW5jZSB3aGljaCBpbmNsdWRlIHRoZSByYXcgRXJyb3IsIHN1Y2ggdGhhdCB0aGUgY2FsbGluZyBjb250ZXh0IGNhblxuICAgKiBzZXJpYWxpemUgdGhlIGVycm9yIGFzIHRoZXkgc2VlIGZpdCB3aGlsZSBpbmNsdWRpbmcgdGhlIHByb3BlciByZXNwb25zZVxuICAgKiBjb2RlLiAgRXhhbXBsZXMgaGVyZSBhcmUgNDA0IGFuZCA0MDUgZXJyb3JzIHRoYXQgb2NjdXIgcHJpb3IgdG8gcmVhY2hpbmdcbiAgICogYW55IHVzZXItZGVmaW5lZCBsb2FkZXJzLlxuICAgKi9cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnlSb3V0ZShyZXF1ZXN0LCBfdGVtcDMpIHtcbiAgICBsZXQge1xuICAgICAgcm91dGVJZCxcbiAgICAgIHJlcXVlc3RDb250ZXh0XG4gICAgfSA9IF90ZW1wMyA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDM7XG4gICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGxldCBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcIlwiLCBjcmVhdGVQYXRoKHVybCksIG51bGwsIFwiZGVmYXVsdFwiKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uLCBiYXNlbmFtZSk7XG4gICAgLy8gU1NSIHN1cHBvcnRzIEhFQUQgcmVxdWVzdHMgd2hpbGUgU1BBIGRvZXNuJ3RcbiAgICBpZiAoIWlzVmFsaWRNZXRob2QobWV0aG9kKSAmJiBtZXRob2QgIT09IFwiSEVBRFwiICYmIG1ldGhvZCAhPT0gXCJPUFRJT05TXCIpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghbWF0Y2hlcykge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IG1hdGNoID0gcm91dGVJZCA/IG1hdGNoZXMuZmluZChtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpIDogZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuICAgIGlmIChyb3V0ZUlkICYmICFtYXRjaCkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDMsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICByb3V0ZUlkXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFtYXRjaCkge1xuICAgICAgLy8gVGhpcyBzaG91bGQgbmV2ZXIgaGl0IEkgZG9uJ3QgdGhpbms/XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgcXVlcnlJbXBsKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgbWF0Y2gpO1xuICAgIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGxldCBlcnJvciA9IHJlc3VsdC5lcnJvcnMgPyBPYmplY3QudmFsdWVzKHJlc3VsdC5lcnJvcnMpWzBdIDogdW5kZWZpbmVkO1xuICAgIGlmIChlcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBJZiB3ZSBnb3QgYmFjayByZXN1bHQuZXJyb3JzLCB0aGF0IG1lYW5zIHRoZSBsb2FkZXIvYWN0aW9uIHRocmV3XG4gICAgICAvLyBfc29tZXRoaW5nXyB0aGF0IHdhc24ndCBhIFJlc3BvbnNlLCBidXQgaXQncyBub3QgZ3VhcmFudGVlZC9yZXF1aXJlZFxuICAgICAgLy8gdG8gYmUgYW4gYGluc3RhbmNlb2YgRXJyb3JgIGVpdGhlciwgc28gd2UgaGF2ZSB0byB1c2UgdGhyb3cgaGVyZSB0b1xuICAgICAgLy8gcHJlc2VydmUgdGhlIFwiZXJyb3JcIiBzdGF0ZSBvdXRzaWRlIG9mIHF1ZXJ5SW1wbC5cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICAvLyBQaWNrIG9mZiB0aGUgcmlnaHQgc3RhdGUgdmFsdWUgdG8gcmV0dXJuXG4gICAgaWYgKHJlc3VsdC5hY3Rpb25EYXRhKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhyZXN1bHQuYWN0aW9uRGF0YSlbMF07XG4gICAgfVxuICAgIGlmIChyZXN1bHQubG9hZGVyRGF0YSkge1xuICAgICAgdmFyIF9yZXN1bHQkYWN0aXZlRGVmZXJyZTtcbiAgICAgIGxldCBkYXRhID0gT2JqZWN0LnZhbHVlcyhyZXN1bHQubG9hZGVyRGF0YSlbMF07XG4gICAgICBpZiAoKF9yZXN1bHQkYWN0aXZlRGVmZXJyZSA9IHJlc3VsdC5hY3RpdmVEZWZlcnJlZHMpICE9IG51bGwgJiYgX3Jlc3VsdCRhY3RpdmVEZWZlcnJlW21hdGNoLnJvdXRlLmlkXSkge1xuICAgICAgICBkYXRhW1VOU0FGRV9ERUZFUlJFRF9TWU1CT0xdID0gcmVzdWx0LmFjdGl2ZURlZmVycmVkc1ttYXRjaC5yb3V0ZS5pZF07XG4gICAgICB9XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBhc3luYyBmdW5jdGlvbiBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoKSB7XG4gICAgaW52YXJpYW50KHJlcXVlc3Quc2lnbmFsLCBcInF1ZXJ5KCkvcXVlcnlSb3V0ZSgpIHJlcXVlc3RzIG11c3QgY29udGFpbiBhbiBBYm9ydENvbnRyb2xsZXIgc2lnbmFsXCIpO1xuICAgIHRyeSB7XG4gICAgICBpZiAoaXNNdXRhdGlvbk1ldGhvZChyZXF1ZXN0Lm1ldGhvZC50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgc3VibWl0KHJlcXVlc3QsIG1hdGNoZXMsIHJvdXRlTWF0Y2ggfHwgZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pLCByZXF1ZXN0Q29udGV4dCwgcm91dGVNYXRjaCAhPSBudWxsKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBsb2FkUm91dGVEYXRhKHJlcXVlc3QsIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoKTtcbiAgICAgIHJldHVybiBpc1Jlc3BvbnNlKHJlc3VsdCkgPyByZXN1bHQgOiBfZXh0ZW5kcyh7fSwgcmVzdWx0LCB7XG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB0aHJldy9yZXR1cm5lZCBhIFJlc3BvbnNlIGluIGNhbGxMb2FkZXJPckFjdGlvbiwgd2UgdGhyb3dcbiAgICAgIC8vIGl0IHRvIGJhaWwgb3V0IGFuZCB0aGVuIHJldHVybiBvciB0aHJvdyBoZXJlIGJhc2VkIG9uIHdoZXRoZXIgdGhlIHVzZXJcbiAgICAgIC8vIHJldHVybmVkIG9yIHRocmV3XG4gICAgICBpZiAoaXNRdWVyeVJvdXRlUmVzcG9uc2UoZSkpIHtcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcikge1xuICAgICAgICAgIHRocm93IGUucmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGUucmVzcG9uc2U7XG4gICAgICB9XG4gICAgICAvLyBSZWRpcmVjdHMgYXJlIGFsd2F5cyByZXR1cm5lZCBzaW5jZSB0aGV5IGRvbid0IHByb3BhZ2F0ZSB0byBjYXRjaFxuICAgICAgLy8gYm91bmRhcmllc1xuICAgICAgaWYgKGlzUmVkaXJlY3RSZXNwb25zZShlKSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICAgIH1cbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIHN1Ym1pdChyZXF1ZXN0LCBtYXRjaGVzLCBhY3Rpb25NYXRjaCwgcmVxdWVzdENvbnRleHQsIGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBpZiAoIWFjdGlvbk1hdGNoLnJvdXRlLmFjdGlvbiAmJiAhYWN0aW9uTWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgcGF0aG5hbWU6IG5ldyBVUkwocmVxdWVzdC51cmwpLnBhdGhuYW1lLFxuICAgICAgICByb3V0ZUlkOiBhY3Rpb25NYXRjaC5yb3V0ZS5pZFxuICAgICAgfSk7XG4gICAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJhY3Rpb25cIiwgcmVxdWVzdCwgYWN0aW9uTWF0Y2gsIG1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGJhc2VuYW1lLCB7XG4gICAgICAgIGlzU3RhdGljUmVxdWVzdDogdHJ1ZSxcbiAgICAgICAgaXNSb3V0ZVJlcXVlc3QsXG4gICAgICAgIHJlcXVlc3RDb250ZXh0XG4gICAgICB9KTtcbiAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgIGxldCBtZXRob2QgPSBpc1JvdXRlUmVxdWVzdCA/IFwicXVlcnlSb3V0ZVwiIDogXCJxdWVyeVwiO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWV0aG9kICsgXCIoKSBjYWxsIGFib3J0ZWRcIik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFVoaGhoIC0gdGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuLCB3ZSBzaG91bGQgYWx3YXlzIHRocm93IHRoZXNlIGZyb21cbiAgICAgIC8vIGNhbGxMb2FkZXJPckFjdGlvbiwgYnV0IHRoZSB0eXBlIG5hcnJvd2luZyBoZXJlIGtlZXBzIFRTIGhhcHB5IGFuZCB3ZVxuICAgICAgLy8gY2FuIGdldCBiYWNrIG9uIHRoZSBcInRocm93IGFsbCByZWRpcmVjdCByZXNwb25zZXNcIiB0cmFpbiBoZXJlIHNob3VsZFxuICAgICAgLy8gdGhpcyBldmVyIGhhcHBlbiA6L1xuICAgICAgdGhyb3cgbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiByZXN1bHQuc3RhdHVzLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgTG9jYXRpb246IHJlc3VsdC5sb2NhdGlvblxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgICAgdHlwZTogXCJkZWZlci1hY3Rpb25cIlxuICAgICAgfSk7XG4gICAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgIC8vIE5vdGU6IFRoaXMgc2hvdWxkIG9ubHkgYmUgbm9uLVJlc3BvbnNlIHZhbHVlcyBpZiB3ZSBnZXQgaGVyZSwgc2luY2VcbiAgICAgIC8vIGlzUm91dGVSZXF1ZXN0IHNob3VsZCB0aHJvdyBhbnkgUmVzcG9uc2UgcmVjZWl2ZWQgaW4gY2FsbExvYWRlck9yQWN0aW9uXG4gICAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAgIHRocm93IHJlc3VsdC5lcnJvcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1hdGNoZXM6IFthY3Rpb25NYXRjaF0sXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBhY3Rpb25EYXRhOiB7XG4gICAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmRhdGFcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3JzOiBudWxsLFxuICAgICAgICAvLyBOb3RlOiBzdGF0dXNDb2RlICsgaGVhZGVycyBhcmUgdW51c2VkIGhlcmUgc2luY2UgcXVlcnlSb3V0ZSB3aWxsXG4gICAgICAgIC8vIHJldHVybiB0aGUgcmF3IFJlc3BvbnNlIG9yIHZhbHVlXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9LFxuICAgICAgICBhY3RpdmVEZWZlcnJlZHM6IG51bGxcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFN0b3JlIG9mZiB0aGUgcGVuZGluZyBlcnJvciAtIHdlIHVzZSBpdCB0byBkZXRlcm1pbmUgd2hpY2ggbG9hZGVyc1xuICAgICAgLy8gdG8gY2FsbCBhbmQgd2lsbCBjb21taXQgaXQgd2hlbiB3ZSBjb21wbGV0ZSB0aGUgbmF2aWdhdGlvblxuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGFjdGlvbk1hdGNoLnJvdXRlLmlkKTtcbiAgICAgIGxldCBjb250ZXh0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgdW5kZWZpbmVkLCB7XG4gICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICB9KTtcbiAgICAgIC8vIGFjdGlvbiBzdGF0dXMgY29kZXMgdGFrZSBwcmVjZWRlbmNlIG92ZXIgbG9hZGVyIHN0YXR1cyBjb2Rlc1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCB7XG4gICAgICAgIHN0YXR1c0NvZGU6IGlzUm91dGVFcnJvclJlc3BvbnNlKHJlc3VsdC5lcnJvcikgPyByZXN1bHQuZXJyb3Iuc3RhdHVzIDogNTAwLFxuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiBfZXh0ZW5kcyh7fSwgcmVzdWx0LmhlYWRlcnMgPyB7XG4gICAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmhlYWRlcnNcbiAgICAgICAgfSA6IHt9KVxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIENyZWF0ZSBhIEdFVCByZXF1ZXN0IGZvciB0aGUgbG9hZGVyc1xuICAgIGxldCBsb2FkZXJSZXF1ZXN0ID0gbmV3IFJlcXVlc3QocmVxdWVzdC51cmwsIHtcbiAgICAgIGhlYWRlcnM6IHJlcXVlc3QuaGVhZGVycyxcbiAgICAgIHJlZGlyZWN0OiByZXF1ZXN0LnJlZGlyZWN0LFxuICAgICAgc2lnbmFsOiByZXF1ZXN0LnNpZ25hbFxuICAgIH0pO1xuICAgIGxldCBjb250ZXh0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShsb2FkZXJSZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCByZXN1bHQuc3RhdHVzQ29kZSA/IHtcbiAgICAgIHN0YXR1c0NvZGU6IHJlc3VsdC5zdGF0dXNDb2RlXG4gICAgfSA6IHt9LCB7XG4gICAgICBhY3Rpb25EYXRhOiB7XG4gICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICB9LFxuICAgICAgYWN0aW9uSGVhZGVyczogX2V4dGVuZHMoe30sIHJlc3VsdC5oZWFkZXJzID8ge1xuICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuaGVhZGVyc1xuICAgICAgfSA6IHt9KVxuICAgIH0pO1xuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIGxvYWRSb3V0ZURhdGEocmVxdWVzdCwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIHJvdXRlTWF0Y2gsIHBlbmRpbmdBY3Rpb25FcnJvcikge1xuICAgIGxldCBpc1JvdXRlUmVxdWVzdCA9IHJvdXRlTWF0Y2ggIT0gbnVsbDtcbiAgICAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW4gKHF1ZXJ5Um91dGUoKSlcbiAgICBpZiAoaXNSb3V0ZVJlcXVlc3QgJiYgIShyb3V0ZU1hdGNoICE9IG51bGwgJiYgcm91dGVNYXRjaC5yb3V0ZS5sb2FkZXIpICYmICEocm91dGVNYXRjaCAhPSBudWxsICYmIHJvdXRlTWF0Y2gucm91dGUubGF6eSkpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBuZXcgVVJMKHJlcXVlc3QudXJsKS5wYXRobmFtZSxcbiAgICAgICAgcm91dGVJZDogcm91dGVNYXRjaCA9PSBudWxsID8gdm9pZCAwIDogcm91dGVNYXRjaC5yb3V0ZS5pZFxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCByZXF1ZXN0TWF0Y2hlcyA9IHJvdXRlTWF0Y2ggPyBbcm91dGVNYXRjaF0gOiBnZXRMb2FkZXJNYXRjaGVzVW50aWxCb3VuZGFyeShtYXRjaGVzLCBPYmplY3Qua2V5cyhwZW5kaW5nQWN0aW9uRXJyb3IgfHwge30pWzBdKTtcbiAgICBsZXQgbWF0Y2hlc1RvTG9hZCA9IHJlcXVlc3RNYXRjaGVzLmZpbHRlcihtID0+IG0ucm91dGUubG9hZGVyIHx8IG0ucm91dGUubGF6eSk7XG4gICAgLy8gU2hvcnQgY2lyY3VpdCBpZiB3ZSBoYXZlIG5vIGxvYWRlcnMgdG8gcnVuIChxdWVyeSgpKVxuICAgIGlmIChtYXRjaGVzVG9Mb2FkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgLy8gQWRkIGEgbnVsbCBmb3IgYWxsIG1hdGNoZWQgcm91dGVzIGZvciBwcm9wZXIgcmV2YWxpZGF0aW9uIG9uIHRoZSBjbGllbnRcbiAgICAgICAgbG9hZGVyRGF0YTogbWF0Y2hlcy5yZWR1Y2UoKGFjYywgbSkgPT4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgICBbbS5yb3V0ZS5pZF06IG51bGxcbiAgICAgICAgfSksIHt9KSxcbiAgICAgICAgZXJyb3JzOiBwZW5kaW5nQWN0aW9uRXJyb3IgfHwgbnVsbCxcbiAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH1cbiAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFsuLi5tYXRjaGVzVG9Mb2FkLm1hcChtYXRjaCA9PiBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgcmVxdWVzdCwgbWF0Y2gsIG1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGJhc2VuYW1lLCB7XG4gICAgICBpc1N0YXRpY1JlcXVlc3Q6IHRydWUsXG4gICAgICBpc1JvdXRlUmVxdWVzdCxcbiAgICAgIHJlcXVlc3RDb250ZXh0XG4gICAgfSkpXSk7XG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIGxldCBtZXRob2QgPSBpc1JvdXRlUmVxdWVzdCA/IFwicXVlcnlSb3V0ZVwiIDogXCJxdWVyeVwiO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArIFwiKCkgY2FsbCBhYm9ydGVkXCIpO1xuICAgIH1cbiAgICAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuICAgIGxldCBhY3RpdmVEZWZlcnJlZHMgPSBuZXcgTWFwKCk7XG4gICAgbGV0IGNvbnRleHQgPSBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdBY3Rpb25FcnJvciwgYWN0aXZlRGVmZXJyZWRzKTtcbiAgICAvLyBBZGQgYSBudWxsIGZvciBhbnkgbm9uLWxvYWRlciBtYXRjaGVzIGZvciBwcm9wZXIgcmV2YWxpZGF0aW9uIG9uIHRoZSBjbGllbnRcbiAgICBsZXQgZXhlY3V0ZWRMb2FkZXJzID0gbmV3IFNldChtYXRjaGVzVG9Mb2FkLm1hcChtYXRjaCA9PiBtYXRjaC5yb3V0ZS5pZCkpO1xuICAgIG1hdGNoZXMuZm9yRWFjaChtYXRjaCA9PiB7XG4gICAgICBpZiAoIWV4ZWN1dGVkTG9hZGVycy5oYXMobWF0Y2gucm91dGUuaWQpKSB7XG4gICAgICAgIGNvbnRleHQubG9hZGVyRGF0YVttYXRjaC5yb3V0ZS5pZF0gPSBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dCwge1xuICAgICAgbWF0Y2hlcyxcbiAgICAgIGFjdGl2ZURlZmVycmVkczogYWN0aXZlRGVmZXJyZWRzLnNpemUgPiAwID8gT2JqZWN0LmZyb21FbnRyaWVzKGFjdGl2ZURlZmVycmVkcy5lbnRyaWVzKCkpIDogbnVsbFxuICAgIH0pO1xuICB9XG4gIHJldHVybiB7XG4gICAgZGF0YVJvdXRlcyxcbiAgICBxdWVyeSxcbiAgICBxdWVyeVJvdXRlXG4gIH07XG59XG4vLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gSGVscGVyc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8qKlxuICogR2l2ZW4gYW4gZXhpc3RpbmcgU3RhdGljSGFuZGxlckNvbnRleHQgYW5kIGFuIGVycm9yIHRocm93biBhdCByZW5kZXIgdGltZSxcbiAqIHByb3ZpZGUgYW4gdXBkYXRlZCBTdGF0aWNIYW5kbGVyQ29udGV4dCBzdWl0YWJsZSBmb3IgYSBzZWNvbmQgU1NSIHJlbmRlclxuICovXG5mdW5jdGlvbiBnZXRTdGF0aWNDb250ZXh0RnJvbUVycm9yKHJvdXRlcywgY29udGV4dCwgZXJyb3IpIHtcbiAgbGV0IG5ld0NvbnRleHQgPSBfZXh0ZW5kcyh7fSwgY29udGV4dCwge1xuICAgIHN0YXR1c0NvZGU6IDUwMCxcbiAgICBlcnJvcnM6IHtcbiAgICAgIFtjb250ZXh0Ll9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkIHx8IHJvdXRlc1swXS5pZF06IGVycm9yXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG5ld0NvbnRleHQ7XG59XG5mdW5jdGlvbiBpc1N1Ym1pc3Npb25OYXZpZ2F0aW9uKG9wdHMpIHtcbiAgcmV0dXJuIG9wdHMgIT0gbnVsbCAmJiAoXCJmb3JtRGF0YVwiIGluIG9wdHMgJiYgb3B0cy5mb3JtRGF0YSAhPSBudWxsIHx8IFwiYm9keVwiIGluIG9wdHMgJiYgb3B0cy5ib2R5ICE9PSB1bmRlZmluZWQpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplVG8obG9jYXRpb24sIG1hdGNoZXMsIGJhc2VuYW1lLCBwcmVwZW5kQmFzZW5hbWUsIHRvLCBmcm9tUm91dGVJZCwgcmVsYXRpdmUpIHtcbiAgbGV0IGNvbnRleHR1YWxNYXRjaGVzO1xuICBsZXQgYWN0aXZlUm91dGVNYXRjaDtcbiAgaWYgKGZyb21Sb3V0ZUlkICE9IG51bGwgJiYgcmVsYXRpdmUgIT09IFwicGF0aFwiKSB7XG4gICAgLy8gR3JhYiBtYXRjaGVzIHVwIHRvIHRoZSBjYWxsaW5nIHJvdXRlIHNvIG91ciByb3V0ZS1yZWxhdGl2ZSBsb2dpYyBpc1xuICAgIC8vIHJlbGF0aXZlIHRvIHRoZSBjb3JyZWN0IHNvdXJjZSByb3V0ZS4gIFdoZW4gdXNpbmcgcmVsYXRpdmU6cGF0aCxcbiAgICAvLyBmcm9tUm91dGVJZCBpcyBpZ25vcmVkIHNpbmNlIHRoYXQgaXMgYWx3YXlzIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50XG4gICAgLy8gbG9jYXRpb24gcGF0aFxuICAgIGNvbnRleHR1YWxNYXRjaGVzID0gW107XG4gICAgZm9yIChsZXQgbWF0Y2ggb2YgbWF0Y2hlcykge1xuICAgICAgY29udGV4dHVhbE1hdGNoZXMucHVzaChtYXRjaCk7XG4gICAgICBpZiAobWF0Y2gucm91dGUuaWQgPT09IGZyb21Sb3V0ZUlkKSB7XG4gICAgICAgIGFjdGl2ZVJvdXRlTWF0Y2ggPSBtYXRjaDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnRleHR1YWxNYXRjaGVzID0gbWF0Y2hlcztcbiAgICBhY3RpdmVSb3V0ZU1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdO1xuICB9XG4gIC8vIFJlc29sdmUgdGhlIHJlbGF0aXZlIHBhdGhcbiAgbGV0IHBhdGggPSByZXNvbHZlVG8odG8gPyB0byA6IFwiLlwiLCBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhjb250ZXh0dWFsTWF0Y2hlcykubWFwKG0gPT4gbS5wYXRobmFtZUJhc2UpLCBzdHJpcEJhc2VuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgbG9jYXRpb24ucGF0aG5hbWUsIHJlbGF0aXZlID09PSBcInBhdGhcIik7XG4gIC8vIFdoZW4gYHRvYCBpcyBub3Qgc3BlY2lmaWVkIHdlIGluaGVyaXQgc2VhcmNoL2hhc2ggZnJvbSB0aGUgY3VycmVudFxuICAvLyBsb2NhdGlvbiwgdW5saWtlIHdoZW4gdG89XCIuXCIgYW5kIHdlIGp1c3QgaW5oZXJpdCB0aGUgcGF0aC5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVtaXgvaXNzdWVzLzkyN1xuICBpZiAodG8gPT0gbnVsbCkge1xuICAgIHBhdGguc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoO1xuICAgIHBhdGguaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIH1cbiAgLy8gQWRkIGFuID9pbmRleCBwYXJhbSBmb3IgbWF0Y2hlZCBpbmRleCByb3V0ZXMgaWYgd2UgZG9uJ3QgYWxyZWFkeSBoYXZlIG9uZVxuICBpZiAoKHRvID09IG51bGwgfHwgdG8gPT09IFwiXCIgfHwgdG8gPT09IFwiLlwiKSAmJiBhY3RpdmVSb3V0ZU1hdGNoICYmIGFjdGl2ZVJvdXRlTWF0Y2gucm91dGUuaW5kZXggJiYgIWhhc05ha2VkSW5kZXhRdWVyeShwYXRoLnNlYXJjaCkpIHtcbiAgICBwYXRoLnNlYXJjaCA9IHBhdGguc2VhcmNoID8gcGF0aC5zZWFyY2gucmVwbGFjZSgvXlxcPy8sIFwiP2luZGV4JlwiKSA6IFwiP2luZGV4XCI7XG4gIH1cbiAgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZS4gIElmXG4gIC8vIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2UgdGhlIHJhdyBiYXNlbmFtZSB3aGljaCBhbGxvd3NcbiAgLy8gdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlIHByZXNlbmNlIG9mIGEgdHJhaWxpbmcgc2xhc2hcbiAgLy8gb24gcm9vdCBhY3Rpb25zXG4gIGlmIChwcmVwZW5kQmFzZW5hbWUgJiYgYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgcGF0aC5wYXRobmFtZSA9IHBhdGgucGF0aG5hbWUgPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoLnBhdGhuYW1lXSk7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZVBhdGgocGF0aCk7XG59XG4vLyBOb3JtYWxpemUgbmF2aWdhdGlvbiBvcHRpb25zIGJ5IGNvbnZlcnRpbmcgZm9ybU1ldGhvZD1HRVQgZm9ybURhdGEgb2JqZWN0cyB0b1xuLy8gVVJMU2VhcmNoUGFyYW1zIHNvIHRoZXkgYmVoYXZlIGlkZW50aWNhbGx5IHRvIGxpbmtzIHdpdGggcXVlcnkgcGFyYW1zXG5mdW5jdGlvbiBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMobm9ybWFsaXplRm9ybU1ldGhvZCwgaXNGZXRjaGVyLCBwYXRoLCBvcHRzKSB7XG4gIC8vIFJldHVybiBsb2NhdGlvbiB2ZXJiYXRpbSBvbiBub24tc3VibWlzc2lvbiBuYXZpZ2F0aW9uc1xuICBpZiAoIW9wdHMgfHwgIWlzU3VibWlzc2lvbk5hdmlnYXRpb24ob3B0cykpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aFxuICAgIH07XG4gIH1cbiAgaWYgKG9wdHMuZm9ybU1ldGhvZCAmJiAhaXNWYWxpZE1ldGhvZChvcHRzLmZvcm1NZXRob2QpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsXG4gICAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kOiBvcHRzLmZvcm1NZXRob2RcbiAgICAgIH0pXG4gICAgfTtcbiAgfVxuICBsZXQgZ2V0SW52YWxpZEJvZHlFcnJvciA9ICgpID0+ICh7XG4gICAgcGF0aCxcbiAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgIHR5cGU6IFwiaW52YWxpZC1ib2R5XCJcbiAgICB9KVxuICB9KTtcbiAgLy8gQ3JlYXRlIGEgU3VibWlzc2lvbiBvbiBub24tR0VUIG5hdmlnYXRpb25zXG4gIGxldCByYXdGb3JtTWV0aG9kID0gb3B0cy5mb3JtTWV0aG9kIHx8IFwiZ2V0XCI7XG4gIGxldCBmb3JtTWV0aG9kID0gbm9ybWFsaXplRm9ybU1ldGhvZCA/IHJhd0Zvcm1NZXRob2QudG9VcHBlckNhc2UoKSA6IHJhd0Zvcm1NZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgbGV0IGZvcm1BY3Rpb24gPSBzdHJpcEhhc2hGcm9tUGF0aChwYXRoKTtcbiAgaWYgKG9wdHMuYm9keSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKG9wdHMuZm9ybUVuY1R5cGUgPT09IFwidGV4dC9wbGFpblwiKSB7XG4gICAgICAvLyB0ZXh0IG9ubHkgc3VwcG9ydCBQT1NUL1BVVC9QQVRDSC9ERUxFVEUgc3VibWlzc2lvbnNcbiAgICAgIGlmICghaXNNdXRhdGlvbk1ldGhvZChmb3JtTWV0aG9kKSkge1xuICAgICAgICByZXR1cm4gZ2V0SW52YWxpZEJvZHlFcnJvcigpO1xuICAgICAgfVxuICAgICAgbGV0IHRleHQgPSB0eXBlb2Ygb3B0cy5ib2R5ID09PSBcInN0cmluZ1wiID8gb3B0cy5ib2R5IDogb3B0cy5ib2R5IGluc3RhbmNlb2YgRm9ybURhdGEgfHwgb3B0cy5ib2R5IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zID9cbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI3BsYWluLXRleHQtZm9ybS1kYXRhXG4gICAgICBBcnJheS5mcm9tKG9wdHMuYm9keS5lbnRyaWVzKCkpLnJlZHVjZSgoYWNjLCBfcmVmMykgPT4ge1xuICAgICAgICBsZXQgW25hbWUsIHZhbHVlXSA9IF9yZWYzO1xuICAgICAgICByZXR1cm4gXCJcIiArIGFjYyArIG5hbWUgKyBcIj1cIiArIHZhbHVlICsgXCJcXG5cIjtcbiAgICAgIH0sIFwiXCIpIDogU3RyaW5nKG9wdHMuYm9keSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRoLFxuICAgICAgICBzdWJtaXNzaW9uOiB7XG4gICAgICAgICAgZm9ybU1ldGhvZCxcbiAgICAgICAgICBmb3JtQWN0aW9uLFxuICAgICAgICAgIGZvcm1FbmNUeXBlOiBvcHRzLmZvcm1FbmNUeXBlLFxuICAgICAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICAgICAganNvbjogdW5kZWZpbmVkLFxuICAgICAgICAgIHRleHRcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKG9wdHMuZm9ybUVuY1R5cGUgPT09IFwiYXBwbGljYXRpb24vanNvblwiKSB7XG4gICAgICAvLyBqc29uIG9ubHkgc3VwcG9ydHMgUE9TVC9QVVQvUEFUQ0gvREVMRVRFIHN1Ym1pc3Npb25zXG4gICAgICBpZiAoIWlzTXV0YXRpb25NZXRob2QoZm9ybU1ldGhvZCkpIHtcbiAgICAgICAgcmV0dXJuIGdldEludmFsaWRCb2R5RXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBqc29uID0gdHlwZW9mIG9wdHMuYm9keSA9PT0gXCJzdHJpbmdcIiA/IEpTT04ucGFyc2Uob3B0cy5ib2R5KSA6IG9wdHMuYm9keTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwYXRoLFxuICAgICAgICAgIHN1Ym1pc3Npb246IHtcbiAgICAgICAgICAgIGZvcm1NZXRob2QsXG4gICAgICAgICAgICBmb3JtQWN0aW9uLFxuICAgICAgICAgICAgZm9ybUVuY1R5cGU6IG9wdHMuZm9ybUVuY1R5cGUsXG4gICAgICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICAgICAganNvbixcbiAgICAgICAgICAgIHRleHQ6IHVuZGVmaW5lZFxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGdldEludmFsaWRCb2R5RXJyb3IoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaW52YXJpYW50KHR5cGVvZiBGb3JtRGF0YSA9PT0gXCJmdW5jdGlvblwiLCBcIkZvcm1EYXRhIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudFwiKTtcbiAgbGV0IHNlYXJjaFBhcmFtcztcbiAgbGV0IGZvcm1EYXRhO1xuICBpZiAob3B0cy5mb3JtRGF0YSkge1xuICAgIHNlYXJjaFBhcmFtcyA9IGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKG9wdHMuZm9ybURhdGEpO1xuICAgIGZvcm1EYXRhID0gb3B0cy5mb3JtRGF0YTtcbiAgfSBlbHNlIGlmIChvcHRzLmJvZHkgaW5zdGFuY2VvZiBGb3JtRGF0YSkge1xuICAgIHNlYXJjaFBhcmFtcyA9IGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKG9wdHMuYm9keSk7XG4gICAgZm9ybURhdGEgPSBvcHRzLmJvZHk7XG4gIH0gZWxzZSBpZiAob3B0cy5ib2R5IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zKSB7XG4gICAgc2VhcmNoUGFyYW1zID0gb3B0cy5ib2R5O1xuICAgIGZvcm1EYXRhID0gY29udmVydFNlYXJjaFBhcmFtc1RvRm9ybURhdGEoc2VhcmNoUGFyYW1zKTtcbiAgfSBlbHNlIGlmIChvcHRzLmJvZHkgPT0gbnVsbCkge1xuICAgIHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKG9wdHMuYm9keSk7XG4gICAgICBmb3JtRGF0YSA9IGNvbnZlcnRTZWFyY2hQYXJhbXNUb0Zvcm1EYXRhKHNlYXJjaFBhcmFtcyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGdldEludmFsaWRCb2R5RXJyb3IoKTtcbiAgICB9XG4gIH1cbiAgbGV0IHN1Ym1pc3Npb24gPSB7XG4gICAgZm9ybU1ldGhvZCxcbiAgICBmb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlOiBvcHRzICYmIG9wdHMuZm9ybUVuY1R5cGUgfHwgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICBmb3JtRGF0YSxcbiAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgdGV4dDogdW5kZWZpbmVkXG4gIH07XG4gIGlmIChpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aCxcbiAgICAgIHN1Ym1pc3Npb25cbiAgICB9O1xuICB9XG4gIC8vIEZsYXR0ZW4gc3VibWlzc2lvbiBvbnRvIFVSTFNlYXJjaFBhcmFtcyBmb3IgR0VUIHN1Ym1pc3Npb25zXG4gIGxldCBwYXJzZWRQYXRoID0gcGFyc2VQYXRoKHBhdGgpO1xuICAvLyBPbiBHRVQgbmF2aWdhdGlvbiBzdWJtaXNzaW9ucyB3ZSBjYW4gZHJvcCB0aGUgP2luZGV4IHBhcmFtIGZyb20gdGhlXG4gIC8vIHJlc3VsdGluZyBsb2NhdGlvbiBzaW5jZSBhbGwgbG9hZGVycyB3aWxsIHJ1bi4gIEJ1dCBmZXRjaGVyIEdFVCBzdWJtaXNzaW9uc1xuICAvLyBvbmx5IHJ1biBhIHNpbmdsZSBsb2FkZXIgc28gd2UgbmVlZCB0byBwcmVzZXJ2ZSBhbnkgaW5jb21pbmcgP2luZGV4IHBhcmFtc1xuICBpZiAoaXNGZXRjaGVyICYmIHBhcnNlZFBhdGguc2VhcmNoICYmIGhhc05ha2VkSW5kZXhRdWVyeShwYXJzZWRQYXRoLnNlYXJjaCkpIHtcbiAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKFwiaW5kZXhcIiwgXCJcIik7XG4gIH1cbiAgcGFyc2VkUGF0aC5zZWFyY2ggPSBcIj9cIiArIHNlYXJjaFBhcmFtcztcbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBjcmVhdGVQYXRoKHBhcnNlZFBhdGgpLFxuICAgIHN1Ym1pc3Npb25cbiAgfTtcbn1cbi8vIEZpbHRlciBvdXQgYWxsIHJvdXRlcyBiZWxvdyBhbnkgY2F1Z2h0IGVycm9yIGFzIHRoZXkgYXJlbid0IGdvaW5nIHRvXG4vLyByZW5kZXIgc28gd2UgZG9uJ3QgbmVlZCB0byBsb2FkIHRoZW1cbmZ1bmN0aW9uIGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIGJvdW5kYXJ5SWQpIHtcbiAgbGV0IGJvdW5kYXJ5TWF0Y2hlcyA9IG1hdGNoZXM7XG4gIGlmIChib3VuZGFyeUlkKSB7XG4gICAgbGV0IGluZGV4ID0gbWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkID09PSBib3VuZGFyeUlkKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgYm91bmRhcnlNYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgwLCBpbmRleCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBib3VuZGFyeU1hdGNoZXM7XG59XG5mdW5jdGlvbiBnZXRNYXRjaGVzVG9Mb2FkKGhpc3RvcnksIHN0YXRlLCBtYXRjaGVzLCBzdWJtaXNzaW9uLCBsb2NhdGlvbiwgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCwgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMsIGNhbmNlbGxlZEZldGNoZXJMb2FkcywgZmV0Y2hMb2FkTWF0Y2hlcywgZmV0Y2hSZWRpcmVjdElkcywgcm91dGVzVG9Vc2UsIGJhc2VuYW1lLCBwZW5kaW5nQWN0aW9uRGF0YSwgcGVuZGluZ0Vycm9yKSB7XG4gIGxldCBhY3Rpb25SZXN1bHQgPSBwZW5kaW5nRXJyb3IgPyBPYmplY3QudmFsdWVzKHBlbmRpbmdFcnJvcilbMF0gOiBwZW5kaW5nQWN0aW9uRGF0YSA/IE9iamVjdC52YWx1ZXMocGVuZGluZ0FjdGlvbkRhdGEpWzBdIDogdW5kZWZpbmVkO1xuICBsZXQgY3VycmVudFVybCA9IGhpc3RvcnkuY3JlYXRlVVJMKHN0YXRlLmxvY2F0aW9uKTtcbiAgbGV0IG5leHRVcmwgPSBoaXN0b3J5LmNyZWF0ZVVSTChsb2NhdGlvbik7XG4gIC8vIFBpY2sgbmF2aWdhdGlvbiBtYXRjaGVzIHRoYXQgYXJlIG5ldC1uZXcgb3IgcXVhbGlmeSBmb3IgcmV2YWxpZGF0aW9uXG4gIGxldCBib3VuZGFyeUlkID0gcGVuZGluZ0Vycm9yID8gT2JqZWN0LmtleXMocGVuZGluZ0Vycm9yKVswXSA6IHVuZGVmaW5lZDtcbiAgbGV0IGJvdW5kYXJ5TWF0Y2hlcyA9IGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIGJvdW5kYXJ5SWQpO1xuICBsZXQgbmF2aWdhdGlvbk1hdGNoZXMgPSBib3VuZGFyeU1hdGNoZXMuZmlsdGVyKChtYXRjaCwgaW5kZXgpID0+IHtcbiAgICBpZiAobWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgLy8gV2UgaGF2ZW4ndCBsb2FkZWQgdGhpcyByb3V0ZSB5ZXQgc28gd2UgZG9uJ3Qga25vdyBpZiBpdCdzIGdvdCBhIGxvYWRlciFcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAobWF0Y2gucm91dGUubG9hZGVyID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gQWx3YXlzIGNhbGwgdGhlIGxvYWRlciBvbiBuZXcgcm91dGUgaW5zdGFuY2VzIGFuZCBwZW5kaW5nIGRlZmVyIGNhbmNlbGxhdGlvbnNcbiAgICBpZiAoaXNOZXdMb2FkZXIoc3RhdGUubG9hZGVyRGF0YSwgc3RhdGUubWF0Y2hlc1tpbmRleF0sIG1hdGNoKSB8fCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcy5zb21lKGlkID0+IGlkID09PSBtYXRjaC5yb3V0ZS5pZCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBUaGlzIGlzIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGZvciB3aGVuIHdlIHJldmFsaWRhdGUuICBJZiB0aGUgcm91dGVcbiAgICAvLyBwcm92aWRlcyBpdCdzIG93biBpbXBsZW1lbnRhdGlvbiwgdGhlbiB3ZSBnaXZlIHRoZW0gZnVsbCBjb250cm9sIGJ1dFxuICAgIC8vIHByb3ZpZGUgdGhpcyB2YWx1ZSBzbyB0aGV5IGNhbiBsZXZlcmFnZSBpdCBpZiBuZWVkZWQgYWZ0ZXIgdGhleSBjaGVja1xuICAgIC8vIHRoZWlyIG93biBzcGVjaWZpYyB1c2UgY2FzZXNcbiAgICBsZXQgY3VycmVudFJvdXRlTWF0Y2ggPSBzdGF0ZS5tYXRjaGVzW2luZGV4XTtcbiAgICBsZXQgbmV4dFJvdXRlTWF0Y2ggPSBtYXRjaDtcbiAgICByZXR1cm4gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihtYXRjaCwgX2V4dGVuZHMoe1xuICAgICAgY3VycmVudFVybCxcbiAgICAgIGN1cnJlbnRQYXJhbXM6IGN1cnJlbnRSb3V0ZU1hdGNoLnBhcmFtcyxcbiAgICAgIG5leHRVcmwsXG4gICAgICBuZXh0UGFyYW1zOiBuZXh0Um91dGVNYXRjaC5wYXJhbXNcbiAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICBhY3Rpb25SZXN1bHQsXG4gICAgICBkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZTpcbiAgICAgIC8vIEZvcmNlZCByZXZhbGlkYXRpb24gZHVlIHRvIHN1Ym1pc3Npb24sIHVzZVJldmFsaWRhdG9yLCBvciBYLVJlbWl4LVJldmFsaWRhdGVcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgfHxcbiAgICAgIC8vIENsaWNrZWQgdGhlIHNhbWUgbGluaywgcmVzdWJtaXR0ZWQgYSBHRVQgZm9ybVxuICAgICAgY3VycmVudFVybC5wYXRobmFtZSArIGN1cnJlbnRVcmwuc2VhcmNoID09PSBuZXh0VXJsLnBhdGhuYW1lICsgbmV4dFVybC5zZWFyY2ggfHxcbiAgICAgIC8vIFNlYXJjaCBwYXJhbXMgYWZmZWN0IGFsbCBsb2FkZXJzXG4gICAgICBjdXJyZW50VXJsLnNlYXJjaCAhPT0gbmV4dFVybC5zZWFyY2ggfHwgaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRSb3V0ZU1hdGNoLCBuZXh0Um91dGVNYXRjaClcbiAgICB9KSk7XG4gIH0pO1xuICAvLyBQaWNrIGZldGNoZXIubG9hZHMgdGhhdCBuZWVkIHRvIGJlIHJldmFsaWRhdGVkXG4gIGxldCByZXZhbGlkYXRpbmdGZXRjaGVycyA9IFtdO1xuICBmZXRjaExvYWRNYXRjaGVzLmZvckVhY2goKGYsIGtleSkgPT4ge1xuICAgIC8vIERvbid0IHJldmFsaWRhdGUgaWYgZmV0Y2hlciB3b24ndCBiZSBwcmVzZW50IGluIHRoZSBzdWJzZXF1ZW50IHJlbmRlclxuICAgIGlmICghbWF0Y2hlcy5zb21lKG0gPT4gbS5yb3V0ZS5pZCA9PT0gZi5yb3V0ZUlkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgZmV0Y2hlck1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgZi5wYXRoLCBiYXNlbmFtZSk7XG4gICAgLy8gSWYgdGhlIGZldGNoZXIgcGF0aCBubyBsb25nZXIgbWF0Y2hlcywgcHVzaCBpdCBpbiB3aXRoIG51bGwgbWF0Y2hlcyBzb1xuICAgIC8vIHdlIGNhbiB0cmlnZ2VyIGEgNDA0IGluIGNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YS4gIE5vdGUgdGhpcyBpc1xuICAgIC8vIGN1cnJlbnRseSBvbmx5IGEgdXNlLWNhc2UgZm9yIFJlbWl4IEhNUiB3aGVyZSB0aGUgcm91dGUgdHJlZSBjYW4gY2hhbmdlXG4gICAgLy8gYXQgcnVudGltZSBhbmQgcmVtb3ZlIGEgcm91dGUgcHJldmlvdXNseSBsb2FkZWQgdmlhIGEgZmV0Y2hlclxuICAgIGlmICghZmV0Y2hlck1hdGNoZXMpIHtcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLnB1c2goe1xuICAgICAgICBrZXksXG4gICAgICAgIHJvdXRlSWQ6IGYucm91dGVJZCxcbiAgICAgICAgcGF0aDogZi5wYXRoLFxuICAgICAgICBtYXRjaGVzOiBudWxsLFxuICAgICAgICBtYXRjaDogbnVsbCxcbiAgICAgICAgY29udHJvbGxlcjogbnVsbFxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFJldmFsaWRhdGluZyBmZXRjaGVycyBhcmUgZGVjb3VwbGVkIGZyb20gdGhlIHJvdXRlIG1hdGNoZXMgc2luY2UgdGhleVxuICAgIC8vIGxvYWQgZnJvbSBhIHN0YXRpYyBocmVmLiAgVGhleSByZXZhbGlkYXRlIGJhc2VkIG9uIGV4cGxpY2l0IHJldmFsaWRhdGlvblxuICAgIC8vIChzdWJtaXNzaW9uLCB1c2VSZXZhbGlkYXRvciwgb3IgWC1SZW1peC1SZXZhbGlkYXRlKVxuICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgbGV0IGZldGNoZXJNYXRjaCA9IGdldFRhcmdldE1hdGNoKGZldGNoZXJNYXRjaGVzLCBmLnBhdGgpO1xuICAgIGxldCBzaG91bGRSZXZhbGlkYXRlID0gZmFsc2U7XG4gICAgaWYgKGZldGNoUmVkaXJlY3RJZHMuaGFzKGtleSkpIHtcbiAgICAgIC8vIE5ldmVyIHRyaWdnZXIgYSByZXZhbGlkYXRpb24gb2YgYW4gYWN0aXZlbHkgcmVkaXJlY3RpbmcgZmV0Y2hlclxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoY2FuY2VsbGVkRmV0Y2hlckxvYWRzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgIC8vIEFsd2F5cyByZXZhbGlkYXRlIGlmIHRoZSBmZXRjaGVyIHdhcyBjYW5jZWxsZWRcbiAgICAgIHNob3VsZFJldmFsaWRhdGUgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoZmV0Y2hlciAmJiBmZXRjaGVyLnN0YXRlICE9PSBcImlkbGVcIiAmJiBmZXRjaGVyLmRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gSWYgdGhlIGZldGNoZXIgaGFzbid0IGV2ZXIgY29tcGxldGVkIGxvYWRpbmcgeWV0LCB0aGVuIHRoaXMgaXNuJ3QgYVxuICAgICAgLy8gcmV2YWxpZGF0aW9uLCBpdCB3b3VsZCBqdXN0IGJlIGEgYnJhbmQgbmV3IGxvYWQgaWYgYW4gZXhwbGljaXRcbiAgICAgIC8vIHJldmFsaWRhdGlvbiBpcyByZXF1aXJlZFxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZSA9IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSBmYWxsIGJhY2sgb24gYW55IHVzZXItZGVmaW5lZCBzaG91bGRSZXZhbGlkYXRlLCBkZWZhdWx0aW5nXG4gICAgICAvLyB0byBleHBsaWNpdCByZXZhbGlkYXRpb25zIG9ubHlcbiAgICAgIHNob3VsZFJldmFsaWRhdGUgPSBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKGZldGNoZXJNYXRjaCwgX2V4dGVuZHMoe1xuICAgICAgICBjdXJyZW50VXJsLFxuICAgICAgICBjdXJyZW50UGFyYW1zOiBzdGF0ZS5tYXRjaGVzW3N0YXRlLm1hdGNoZXMubGVuZ3RoIC0gMV0ucGFyYW1zLFxuICAgICAgICBuZXh0VXJsLFxuICAgICAgICBuZXh0UGFyYW1zOiBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucGFyYW1zXG4gICAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICAgIGFjdGlvblJlc3VsdCxcbiAgICAgICAgZGVmYXVsdFNob3VsZFJldmFsaWRhdGU6IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWRcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgaWYgKHNob3VsZFJldmFsaWRhdGUpIHtcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLnB1c2goe1xuICAgICAgICBrZXksXG4gICAgICAgIHJvdXRlSWQ6IGYucm91dGVJZCxcbiAgICAgICAgcGF0aDogZi5wYXRoLFxuICAgICAgICBtYXRjaGVzOiBmZXRjaGVyTWF0Y2hlcyxcbiAgICAgICAgbWF0Y2g6IGZldGNoZXJNYXRjaCxcbiAgICAgICAgY29udHJvbGxlcjogbmV3IEFib3J0Q29udHJvbGxlcigpXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gW25hdmlnYXRpb25NYXRjaGVzLCByZXZhbGlkYXRpbmdGZXRjaGVyc107XG59XG5mdW5jdGlvbiBpc05ld0xvYWRlcihjdXJyZW50TG9hZGVyRGF0YSwgY3VycmVudE1hdGNoLCBtYXRjaCkge1xuICBsZXQgaXNOZXcgPVxuICAvLyBbYV0gLT4gW2EsIGJdXG4gICFjdXJyZW50TWF0Y2ggfHxcbiAgLy8gW2EsIGJdIC0+IFthLCBjXVxuICBtYXRjaC5yb3V0ZS5pZCAhPT0gY3VycmVudE1hdGNoLnJvdXRlLmlkO1xuICAvLyBIYW5kbGUgdGhlIGNhc2UgdGhhdCB3ZSBkb24ndCBoYXZlIGRhdGEgZm9yIGEgcmUtdXNlZCByb3V0ZSwgcG90ZW50aWFsbHlcbiAgLy8gZnJvbSBhIHByaW9yIGVycm9yIG9yIGZyb20gYSBjYW5jZWxsZWQgcGVuZGluZyBkZWZlcnJlZFxuICBsZXQgaXNNaXNzaW5nRGF0YSA9IGN1cnJlbnRMb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9PT0gdW5kZWZpbmVkO1xuICAvLyBBbHdheXMgbG9hZCBpZiB0aGlzIGlzIGEgbmV0LW5ldyByb3V0ZSBvciB3ZSBkb24ndCB5ZXQgaGF2ZSBkYXRhXG4gIHJldHVybiBpc05ldyB8fCBpc01pc3NpbmdEYXRhO1xufVxuZnVuY3Rpb24gaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRNYXRjaCwgbWF0Y2gpIHtcbiAgbGV0IGN1cnJlbnRQYXRoID0gY3VycmVudE1hdGNoLnJvdXRlLnBhdGg7XG4gIHJldHVybiAoXG4gICAgLy8gcGFyYW0gY2hhbmdlIGZvciB0aGlzIG1hdGNoLCAvdXNlcnMvMTIzIC0+IC91c2Vycy80NTZcbiAgICBjdXJyZW50TWF0Y2gucGF0aG5hbWUgIT09IG1hdGNoLnBhdGhuYW1lIHx8XG4gICAgLy8gc3BsYXQgcGFyYW0gY2hhbmdlZCwgd2hpY2ggaXMgbm90IHByZXNlbnQgaW4gbWF0Y2gucGF0aFxuICAgIC8vIGUuZy4gL2ZpbGVzL2ltYWdlcy9hdmF0YXIuanBnIC0+IGZpbGVzL2ZpbmFuY2VzLnhsc1xuICAgIGN1cnJlbnRQYXRoICE9IG51bGwgJiYgY3VycmVudFBhdGguZW5kc1dpdGgoXCIqXCIpICYmIGN1cnJlbnRNYXRjaC5wYXJhbXNbXCIqXCJdICE9PSBtYXRjaC5wYXJhbXNbXCIqXCJdXG4gICk7XG59XG5mdW5jdGlvbiBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKGxvYWRlck1hdGNoLCBhcmcpIHtcbiAgaWYgKGxvYWRlck1hdGNoLnJvdXRlLnNob3VsZFJldmFsaWRhdGUpIHtcbiAgICBsZXQgcm91dGVDaG9pY2UgPSBsb2FkZXJNYXRjaC5yb3V0ZS5zaG91bGRSZXZhbGlkYXRlKGFyZyk7XG4gICAgaWYgKHR5cGVvZiByb3V0ZUNob2ljZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIHJldHVybiByb3V0ZUNob2ljZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFyZy5kZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZTtcbn1cbi8qKlxuICogRXhlY3V0ZSByb3V0ZS5sYXp5KCkgbWV0aG9kcyB0byBsYXppbHkgbG9hZCByb3V0ZSBtb2R1bGVzIChsb2FkZXIsIGFjdGlvbixcbiAqIHNob3VsZFJldmFsaWRhdGUpIGFuZCB1cGRhdGUgdGhlIHJvdXRlTWFuaWZlc3QgaW4gcGxhY2Ugd2hpY2ggc2hhcmVzIG9iamVjdHNcbiAqIHdpdGggZGF0YVJvdXRlcyBzbyB0aG9zZSBnZXQgdXBkYXRlZCBhcyB3ZWxsLlxuICovXG5hc3luYyBmdW5jdGlvbiBsb2FkTGF6eVJvdXRlTW9kdWxlKHJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMsIG1hbmlmZXN0KSB7XG4gIGlmICghcm91dGUubGF6eSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgbGF6eVJvdXRlID0gYXdhaXQgcm91dGUubGF6eSgpO1xuICAvLyBJZiB0aGUgbGF6eSByb3V0ZSBmdW5jdGlvbiB3YXMgZXhlY3V0ZWQgYW5kIHJlbW92ZWQgYnkgYW5vdGhlciBwYXJhbGxlbFxuICAvLyBjYWxsIHRoZW4gd2UgY2FuIHJldHVybiAtIGZpcnN0IGxhenkoKSB0byBmaW5pc2ggd2lucyBiZWNhdXNlIHRoZSByZXR1cm5cbiAgLy8gdmFsdWUgb2YgbGF6eSBpcyBleHBlY3RlZCB0byBiZSBzdGF0aWNcbiAgaWYgKCFyb3V0ZS5sYXp5KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCByb3V0ZVRvVXBkYXRlID0gbWFuaWZlc3Rbcm91dGUuaWRdO1xuICBpbnZhcmlhbnQocm91dGVUb1VwZGF0ZSwgXCJObyByb3V0ZSBmb3VuZCBpbiBtYW5pZmVzdFwiKTtcbiAgLy8gVXBkYXRlIHRoZSByb3V0ZSBpbiBwbGFjZS4gIFRoaXMgc2hvdWxkIGJlIHNhZmUgYmVjYXVzZSB0aGVyZSdzIG5vIHdheVxuICAvLyB3ZSBjb3VsZCB5ZXQgYmUgc2l0dGluZyBvbiB0aGlzIHJvdXRlIGFzIHdlIGNhbid0IGdldCB0aGVyZSB3aXRob3V0XG4gIC8vIHJlc29sdmluZyBsYXp5KCkgZmlyc3QuXG4gIC8vXG4gIC8vIFRoaXMgaXMgZGlmZmVyZW50IHRoYW4gdGhlIEhNUiBcInVwZGF0ZVwiIHVzZS1jYXNlIHdoZXJlIHdlIG1heSBhY3RpdmVseSBiZVxuICAvLyBvbiB0aGUgcm91dGUgYmVpbmcgdXBkYXRlZC4gIFRoZSBtYWluIGNvbmNlcm4gYm9pbHMgZG93biB0byBcImRvZXMgdGhpc1xuICAvLyBtdXRhdGlvbiBhZmZlY3QgYW55IG9uZ29pbmcgbmF2aWdhdGlvbnMgb3IgYW55IGN1cnJlbnQgc3RhdGUubWF0Y2hlc1xuICAvLyB2YWx1ZXM/XCIuICBJZiBub3QsIGl0IHNob3VsZCBiZSBzYWZlIHRvIHVwZGF0ZSBpbiBwbGFjZS5cbiAgbGV0IHJvdXRlVXBkYXRlcyA9IHt9O1xuICBmb3IgKGxldCBsYXp5Um91dGVQcm9wZXJ0eSBpbiBsYXp5Um91dGUpIHtcbiAgICBsZXQgc3RhdGljUm91dGVWYWx1ZSA9IHJvdXRlVG9VcGRhdGVbbGF6eVJvdXRlUHJvcGVydHldO1xuICAgIGxldCBpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQgPSBzdGF0aWNSb3V0ZVZhbHVlICE9PSB1bmRlZmluZWQgJiZcbiAgICAvLyBUaGlzIHByb3BlcnR5IGlzbid0IHN0YXRpYyBzaW5jZSBpdCBzaG91bGQgYWx3YXlzIGJlIHVwZGF0ZWQgYmFzZWRcbiAgICAvLyBvbiB0aGUgcm91dGUgdXBkYXRlc1xuICAgIGxhenlSb3V0ZVByb3BlcnR5ICE9PSBcImhhc0Vycm9yQm91bmRhcnlcIjtcbiAgICB3YXJuaW5nKCFpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQsIFwiUm91dGUgXFxcIlwiICsgcm91dGVUb1VwZGF0ZS5pZCArIFwiXFxcIiBoYXMgYSBzdGF0aWMgcHJvcGVydHkgXFxcIlwiICsgbGF6eVJvdXRlUHJvcGVydHkgKyBcIlxcXCIgXCIgKyBcImRlZmluZWQgYnV0IGl0cyBsYXp5IGZ1bmN0aW9uIGlzIGFsc28gcmV0dXJuaW5nIGEgdmFsdWUgZm9yIHRoaXMgcHJvcGVydHkuIFwiICsgKFwiVGhlIGxhenkgcm91dGUgcHJvcGVydHkgXFxcIlwiICsgbGF6eVJvdXRlUHJvcGVydHkgKyBcIlxcXCIgd2lsbCBiZSBpZ25vcmVkLlwiKSk7XG4gICAgaWYgKCFpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQgJiYgIWltbXV0YWJsZVJvdXRlS2V5cy5oYXMobGF6eVJvdXRlUHJvcGVydHkpKSB7XG4gICAgICByb3V0ZVVwZGF0ZXNbbGF6eVJvdXRlUHJvcGVydHldID0gbGF6eVJvdXRlW2xhenlSb3V0ZVByb3BlcnR5XTtcbiAgICB9XG4gIH1cbiAgLy8gTXV0YXRlIHRoZSByb3V0ZSB3aXRoIHRoZSBwcm92aWRlZCB1cGRhdGVzLiAgRG8gdGhpcyBmaXJzdCBzbyB3ZSBwYXNzXG4gIC8vIHRoZSB1cGRhdGVkIHZlcnNpb24gdG8gbWFwUm91dGVQcm9wZXJ0aWVzXG4gIE9iamVjdC5hc3NpZ24ocm91dGVUb1VwZGF0ZSwgcm91dGVVcGRhdGVzKTtcbiAgLy8gTXV0YXRlIHRoZSBgaGFzRXJyb3JCb3VuZGFyeWAgcHJvcGVydHkgb24gdGhlIHJvdXRlIGJhc2VkIG9uIHRoZSByb3V0ZVxuICAvLyB1cGRhdGVzIGFuZCByZW1vdmUgdGhlIGBsYXp5YCBmdW5jdGlvbiBzbyB3ZSBkb24ndCByZXNvbHZlIHRoZSBsYXp5XG4gIC8vIHJvdXRlIGFnYWluLlxuICBPYmplY3QuYXNzaWduKHJvdXRlVG9VcGRhdGUsIF9leHRlbmRzKHt9LCBtYXBSb3V0ZVByb3BlcnRpZXMocm91dGVUb1VwZGF0ZSksIHtcbiAgICBsYXp5OiB1bmRlZmluZWRcbiAgfSkpO1xufVxuYXN5bmMgZnVuY3Rpb24gY2FsbExvYWRlck9yQWN0aW9uKHR5cGUsIHJlcXVlc3QsIG1hdGNoLCBtYXRjaGVzLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBiYXNlbmFtZSwgb3B0cykge1xuICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0cyA9IHt9O1xuICB9XG4gIGxldCByZXN1bHRUeXBlO1xuICBsZXQgcmVzdWx0O1xuICBsZXQgb25SZWplY3Q7XG4gIGxldCBydW5IYW5kbGVyID0gaGFuZGxlciA9PiB7XG4gICAgLy8gU2V0dXAgYSBwcm9taXNlIHdlIGNhbiByYWNlIGFnYWluc3Qgc28gdGhhdCBhYm9ydCBzaWduYWxzIHNob3J0IGNpcmN1aXRcbiAgICBsZXQgcmVqZWN0O1xuICAgIGxldCBhYm9ydFByb21pc2UgPSBuZXcgUHJvbWlzZSgoXywgcikgPT4gcmVqZWN0ID0gcik7XG4gICAgb25SZWplY3QgPSAoKSA9PiByZWplY3QoKTtcbiAgICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25SZWplY3QpO1xuICAgIHJldHVybiBQcm9taXNlLnJhY2UoW2hhbmRsZXIoe1xuICAgICAgcmVxdWVzdCxcbiAgICAgIHBhcmFtczogbWF0Y2gucGFyYW1zLFxuICAgICAgY29udGV4dDogb3B0cy5yZXF1ZXN0Q29udGV4dFxuICAgIH0pLCBhYm9ydFByb21pc2VdKTtcbiAgfTtcbiAgdHJ5IHtcbiAgICBsZXQgaGFuZGxlciA9IG1hdGNoLnJvdXRlW3R5cGVdO1xuICAgIGlmIChtYXRjaC5yb3V0ZS5sYXp5KSB7XG4gICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAvLyBSdW4gc3RhdGljYWxseSBkZWZpbmVkIGhhbmRsZXIgaW4gcGFyYWxsZWwgd2l0aCBsYXp5KClcbiAgICAgICAgbGV0IHZhbHVlcyA9IGF3YWl0IFByb21pc2UuYWxsKFtydW5IYW5kbGVyKGhhbmRsZXIpLCBsb2FkTGF6eVJvdXRlTW9kdWxlKG1hdGNoLnJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMsIG1hbmlmZXN0KV0pO1xuICAgICAgICByZXN1bHQgPSB2YWx1ZXNbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBMb2FkIGxhenkgcm91dGUgbW9kdWxlLCB0aGVuIHJ1biBhbnkgcmV0dXJuZWQgaGFuZGxlclxuICAgICAgICBhd2FpdCBsb2FkTGF6eVJvdXRlTW9kdWxlKG1hdGNoLnJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMsIG1hbmlmZXN0KTtcbiAgICAgICAgaGFuZGxlciA9IG1hdGNoLnJvdXRlW3R5cGVdO1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIC8vIEhhbmRsZXIgc3RpbGwgcnVuIGV2ZW4gaWYgd2UgZ290IGludGVycnVwdGVkIHRvIG1haW50YWluIGNvbnNpc3RlbmN5XG4gICAgICAgICAgLy8gd2l0aCB1bi1hYm9ydGFibGUgYmVoYXZpb3Igb2YgaGFuZGxlciBleGVjdXRpb24gb24gbm9uLWxhenkgb3JcbiAgICAgICAgICAvLyBwcmV2aW91c2x5LWxhenktbG9hZGVkIHJvdXRlc1xuICAgICAgICAgIHJlc3VsdCA9IGF3YWl0IHJ1bkhhbmRsZXIoaGFuZGxlcik7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJhY3Rpb25cIikge1xuICAgICAgICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICAgICAgICBsZXQgcGF0aG5hbWUgPSB1cmwucGF0aG5hbWUgKyB1cmwuc2VhcmNoO1xuICAgICAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICAgICAgcGF0aG5hbWUsXG4gICAgICAgICAgICByb3V0ZUlkOiBtYXRjaC5yb3V0ZS5pZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGxhenkoKSByb3V0ZSBoYXMgbm8gbG9hZGVyIHRvIHJ1bi4gIFNob3J0IGNpcmN1aXQgaGVyZSBzbyB3ZSBkb24ndFxuICAgICAgICAgIC8vIGhpdCB0aGUgaW52YXJpYW50IGJlbG93IHRoYXQgZXJyb3JzIG9uIHJldHVybmluZyB1bmRlZmluZWQuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgICAgICAgIGRhdGE6IHVuZGVmaW5lZFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFoYW5kbGVyKSB7XG4gICAgICBsZXQgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgICBsZXQgcGF0aG5hbWUgPSB1cmwucGF0aG5hbWUgKyB1cmwuc2VhcmNoO1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBydW5IYW5kbGVyKGhhbmRsZXIpO1xuICAgIH1cbiAgICBpbnZhcmlhbnQocmVzdWx0ICE9PSB1bmRlZmluZWQsIFwiWW91IGRlZmluZWQgXCIgKyAodHlwZSA9PT0gXCJhY3Rpb25cIiA/IFwiYW4gYWN0aW9uXCIgOiBcImEgbG9hZGVyXCIpICsgXCIgZm9yIHJvdXRlIFwiICsgKFwiXFxcIlwiICsgbWF0Y2gucm91dGUuaWQgKyBcIlxcXCIgYnV0IGRpZG4ndCByZXR1cm4gYW55dGhpbmcgZnJvbSB5b3VyIGBcIiArIHR5cGUgKyBcImAgXCIpICsgXCJmdW5jdGlvbi4gUGxlYXNlIHJldHVybiBhIHZhbHVlIG9yIGBudWxsYC5cIik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXN1bHRUeXBlID0gUmVzdWx0VHlwZS5lcnJvcjtcbiAgICByZXN1bHQgPSBlO1xuICB9IGZpbmFsbHkge1xuICAgIGlmIChvblJlamVjdCkge1xuICAgICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uUmVqZWN0KTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgIGxldCBzdGF0dXMgPSByZXN1bHQuc3RhdHVzO1xuICAgIC8vIFByb2Nlc3MgcmVkaXJlY3RzXG4gICAgaWYgKHJlZGlyZWN0U3RhdHVzQ29kZXMuaGFzKHN0YXR1cykpIHtcbiAgICAgIGxldCBsb2NhdGlvbiA9IHJlc3VsdC5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpO1xuICAgICAgaW52YXJpYW50KGxvY2F0aW9uLCBcIlJlZGlyZWN0cyByZXR1cm5lZC90aHJvd24gZnJvbSBsb2FkZXJzL2FjdGlvbnMgbXVzdCBoYXZlIGEgTG9jYXRpb24gaGVhZGVyXCIpO1xuICAgICAgLy8gU3VwcG9ydCByZWxhdGl2ZSByb3V0aW5nIGluIGludGVybmFsIHJlZGlyZWN0c1xuICAgICAgaWYgKCFBQlNPTFVURV9VUkxfUkVHRVgudGVzdChsb2NhdGlvbikpIHtcbiAgICAgICAgbG9jYXRpb24gPSBub3JtYWxpemVUbyhuZXcgVVJMKHJlcXVlc3QudXJsKSwgbWF0Y2hlcy5zbGljZSgwLCBtYXRjaGVzLmluZGV4T2YobWF0Y2gpICsgMSksIGJhc2VuYW1lLCB0cnVlLCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2UgaWYgKCFvcHRzLmlzU3RhdGljUmVxdWVzdCkge1xuICAgICAgICAvLyBTdHJpcCBvZmYgdGhlIHByb3RvY29sK29yaWdpbiBmb3Igc2FtZS1vcmlnaW4gKyBzYW1lLWJhc2VuYW1lIGFic29sdXRlXG4gICAgICAgIC8vIHJlZGlyZWN0cy4gSWYgdGhpcyBpcyBhIHN0YXRpYyByZXF1ZXN0LCB3ZSBjYW4gbGV0IGl0IGdvIGJhY2sgdG8gdGhlXG4gICAgICAgIC8vIGJyb3dzZXIgYXMtaXNcbiAgICAgICAgbGV0IGN1cnJlbnRVcmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICAgICAgbGV0IHVybCA9IGxvY2F0aW9uLnN0YXJ0c1dpdGgoXCIvL1wiKSA/IG5ldyBVUkwoY3VycmVudFVybC5wcm90b2NvbCArIGxvY2F0aW9uKSA6IG5ldyBVUkwobG9jYXRpb24pO1xuICAgICAgICBsZXQgaXNTYW1lQmFzZW5hbWUgPSBzdHJpcEJhc2VuYW1lKHVybC5wYXRobmFtZSwgYmFzZW5hbWUpICE9IG51bGw7XG4gICAgICAgIGlmICh1cmwub3JpZ2luID09PSBjdXJyZW50VXJsLm9yaWdpbiAmJiBpc1NhbWVCYXNlbmFtZSkge1xuICAgICAgICAgIGxvY2F0aW9uID0gdXJsLnBhdGhuYW1lICsgdXJsLnNlYXJjaCArIHVybC5oYXNoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBEb24ndCBwcm9jZXNzIHJlZGlyZWN0cyBpbiB0aGUgcm91dGVyIGR1cmluZyBzdGF0aWMgcmVxdWVzdHMgcmVxdWVzdHMuXG4gICAgICAvLyBJbnN0ZWFkLCB0aHJvdyB0aGUgUmVzcG9uc2UgYW5kIGxldCB0aGUgc2VydmVyIGhhbmRsZSBpdCB3aXRoIGFuIEhUVFBcbiAgICAgIC8vIHJlZGlyZWN0LiAgV2UgYWxzbyB1cGRhdGUgdGhlIExvY2F0aW9uIGhlYWRlciBpbiBwbGFjZSBpbiB0aGlzIGZsb3cgc29cbiAgICAgIC8vIGJhc2VuYW1lIGFuZCByZWxhdGl2ZSByb3V0aW5nIGlzIHRha2VuIGludG8gYWNjb3VudFxuICAgICAgaWYgKG9wdHMuaXNTdGF0aWNSZXF1ZXN0KSB7XG4gICAgICAgIHJlc3VsdC5oZWFkZXJzLnNldChcIkxvY2F0aW9uXCIsIGxvY2F0aW9uKTtcbiAgICAgICAgdGhyb3cgcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5yZWRpcmVjdCxcbiAgICAgICAgc3RhdHVzLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgcmV2YWxpZGF0ZTogcmVzdWx0LmhlYWRlcnMuZ2V0KFwiWC1SZW1peC1SZXZhbGlkYXRlXCIpICE9PSBudWxsLFxuICAgICAgICByZWxvYWREb2N1bWVudDogcmVzdWx0LmhlYWRlcnMuZ2V0KFwiWC1SZW1peC1SZWxvYWQtRG9jdW1lbnRcIikgIT09IG51bGxcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIEZvciBTU1Igc2luZ2xlLXJvdXRlIHJlcXVlc3RzLCB3ZSB3YW50IHRvIGhhbmQgUmVzcG9uc2VzIGJhY2sgZGlyZWN0bHlcbiAgICAvLyB3aXRob3V0IHVud3JhcHBpbmcuICBXZSBkbyB0aGlzIHdpdGggdGhlIFF1ZXJ5Um91dGVSZXNwb25zZSB3cmFwcGVyXG4gICAgLy8gaW50ZXJmYWNlIHNvIHdlIGNhbiBrbm93IHdoZXRoZXIgaXQgd2FzIHJldHVybmVkIG9yIHRocm93blxuICAgIGlmIChvcHRzLmlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICBsZXQgcXVlcnlSb3V0ZVJlc3BvbnNlID0ge1xuICAgICAgICB0eXBlOiByZXN1bHRUeXBlID09PSBSZXN1bHRUeXBlLmVycm9yID8gUmVzdWx0VHlwZS5lcnJvciA6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgICAgcmVzcG9uc2U6IHJlc3VsdFxuICAgICAgfTtcbiAgICAgIHRocm93IHF1ZXJ5Um91dGVSZXNwb25zZTtcbiAgICB9XG4gICAgbGV0IGRhdGE7XG4gICAgbGV0IGNvbnRlbnRUeXBlID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpO1xuICAgIC8vIENoZWNrIGJldHdlZW4gd29yZCBib3VuZGFyaWVzIGluc3RlYWQgb2Ygc3RhcnRzV2l0aCgpIGR1ZSB0byB0aGUgbGFzdFxuICAgIC8vIHBhcmFncmFwaCBvZiBodHRwczovL2h0dHB3Zy5vcmcvc3BlY3MvcmZjOTExMC5odG1sI2ZpZWxkLmNvbnRlbnQtdHlwZVxuICAgIGlmIChjb250ZW50VHlwZSAmJiAvXFxiYXBwbGljYXRpb25cXC9qc29uXFxiLy50ZXN0KGNvbnRlbnRUeXBlKSkge1xuICAgICAgZGF0YSA9IGF3YWl0IHJlc3VsdC5qc29uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSBhd2FpdCByZXN1bHQudGV4dCgpO1xuICAgIH1cbiAgICBpZiAocmVzdWx0VHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogcmVzdWx0VHlwZSxcbiAgICAgICAgZXJyb3I6IG5ldyBFcnJvclJlc3BvbnNlKHN0YXR1cywgcmVzdWx0LnN0YXR1c1RleHQsIGRhdGEpLFxuICAgICAgICBoZWFkZXJzOiByZXN1bHQuaGVhZGVyc1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgIGRhdGEsXG4gICAgICBzdGF0dXNDb2RlOiByZXN1bHQuc3RhdHVzLFxuICAgICAgaGVhZGVyczogcmVzdWx0LmhlYWRlcnNcbiAgICB9O1xuICB9XG4gIGlmIChyZXN1bHRUeXBlID09PSBSZXN1bHRUeXBlLmVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IHJlc3VsdFR5cGUsXG4gICAgICBlcnJvcjogcmVzdWx0XG4gICAgfTtcbiAgfVxuICBpZiAoaXNEZWZlcnJlZERhdGEocmVzdWx0KSkge1xuICAgIHZhciBfcmVzdWx0JGluaXQsIF9yZXN1bHQkaW5pdDI7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGVmZXJyZWQsXG4gICAgICBkZWZlcnJlZERhdGE6IHJlc3VsdCxcbiAgICAgIHN0YXR1c0NvZGU6IChfcmVzdWx0JGluaXQgPSByZXN1bHQuaW5pdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZXN1bHQkaW5pdC5zdGF0dXMsXG4gICAgICBoZWFkZXJzOiAoKF9yZXN1bHQkaW5pdDIgPSByZXN1bHQuaW5pdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZXN1bHQkaW5pdDIuaGVhZGVycykgJiYgbmV3IEhlYWRlcnMocmVzdWx0LmluaXQuaGVhZGVycylcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgIGRhdGE6IHJlc3VsdFxuICB9O1xufVxuLy8gVXRpbGl0eSBtZXRob2QgZm9yIGNyZWF0aW5nIHRoZSBSZXF1ZXN0IGluc3RhbmNlcyBmb3IgbG9hZGVycy9hY3Rpb25zIGR1cmluZ1xuLy8gY2xpZW50LXNpZGUgbmF2aWdhdGlvbnMgYW5kIGZldGNoZXMuICBEdXJpbmcgU1NSIHdlIHdpbGwgYWx3YXlzIGhhdmUgYVxuLy8gUmVxdWVzdCBpbnN0YW5jZSBmcm9tIHRoZSBzdGF0aWMgaGFuZGxlciAocXVlcnkvcXVlcnlSb3V0ZSlcbmZ1bmN0aW9uIGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGhpc3RvcnksIGxvY2F0aW9uLCBzaWduYWwsIHN1Ym1pc3Npb24pIHtcbiAgbGV0IHVybCA9IGhpc3RvcnkuY3JlYXRlVVJMKHN0cmlwSGFzaEZyb21QYXRoKGxvY2F0aW9uKSkudG9TdHJpbmcoKTtcbiAgbGV0IGluaXQgPSB7XG4gICAgc2lnbmFsXG4gIH07XG4gIGlmIChzdWJtaXNzaW9uICYmIGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgIGxldCB7XG4gICAgICBmb3JtTWV0aG9kLFxuICAgICAgZm9ybUVuY1R5cGVcbiAgICB9ID0gc3VibWlzc2lvbjtcbiAgICAvLyBEaWRuJ3QgdGhpbmsgd2UgbmVlZGVkIHRoaXMgYnV0IGl0IHR1cm5zIG91dCB1bmxpa2Ugb3RoZXIgbWV0aG9kcywgcGF0Y2hcbiAgICAvLyB3b24ndCBiZSBwcm9wZXJseSBub3JtYWxpemVkIHRvIHVwcGVyY2FzZSBhbmQgcmVzdWx0cyBpbiBhIDQwNSBlcnJvci5cbiAgICAvLyBTZWU6IGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LW1ldGhvZFxuICAgIGluaXQubWV0aG9kID0gZm9ybU1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuICAgIGlmIChmb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi9qc29uXCIpIHtcbiAgICAgIGluaXQuaGVhZGVycyA9IG5ldyBIZWFkZXJzKHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogZm9ybUVuY1R5cGVcbiAgICAgIH0pO1xuICAgICAgaW5pdC5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoc3VibWlzc2lvbi5qc29uKTtcbiAgICB9IGVsc2UgaWYgKGZvcm1FbmNUeXBlID09PSBcInRleHQvcGxhaW5cIikge1xuICAgICAgLy8gQ29udGVudC1UeXBlIGlzIGluZmVycmVkIChodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jZG9tLXJlcXVlc3QpXG4gICAgICBpbml0LmJvZHkgPSBzdWJtaXNzaW9uLnRleHQ7XG4gICAgfSBlbHNlIGlmIChmb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiAmJiBzdWJtaXNzaW9uLmZvcm1EYXRhKSB7XG4gICAgICAvLyBDb250ZW50LVR5cGUgaXMgaW5mZXJyZWQgKGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNkb20tcmVxdWVzdClcbiAgICAgIGluaXQuYm9keSA9IGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKHN1Ym1pc3Npb24uZm9ybURhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDb250ZW50LVR5cGUgaXMgaW5mZXJyZWQgKGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNkb20tcmVxdWVzdClcbiAgICAgIGluaXQuYm9keSA9IHN1Ym1pc3Npb24uZm9ybURhdGE7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgUmVxdWVzdCh1cmwsIGluaXQpO1xufVxuZnVuY3Rpb24gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMoZm9ybURhdGEpIHtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIGZvcm1EYXRhLmVudHJpZXMoKSkge1xuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2NvbnZlcnRpbmctYW4tZW50cnktbGlzdC10by1hLWxpc3Qtb2YtbmFtZS12YWx1ZS1wYWlyc1xuICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZSA6IHZhbHVlLm5hbWUpO1xuICB9XG4gIHJldHVybiBzZWFyY2hQYXJhbXM7XG59XG5mdW5jdGlvbiBjb252ZXJ0U2VhcmNoUGFyYW1zVG9Gb3JtRGF0YShzZWFyY2hQYXJhbXMpIHtcbiAgbGV0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBzZWFyY2hQYXJhbXMuZW50cmllcygpKSB7XG4gICAgZm9ybURhdGEuYXBwZW5kKGtleSwgdmFsdWUpO1xuICB9XG4gIHJldHVybiBmb3JtRGF0YTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NSb3V0ZUxvYWRlckRhdGEobWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0Vycm9yLCBhY3RpdmVEZWZlcnJlZHMpIHtcbiAgLy8gRmlsbCBpbiBsb2FkZXJEYXRhL2Vycm9ycyBmcm9tIG91ciBsb2FkZXJzXG4gIGxldCBsb2FkZXJEYXRhID0ge307XG4gIGxldCBlcnJvcnMgPSBudWxsO1xuICBsZXQgc3RhdHVzQ29kZTtcbiAgbGV0IGZvdW5kRXJyb3IgPSBmYWxzZTtcbiAgbGV0IGxvYWRlckhlYWRlcnMgPSB7fTtcbiAgLy8gUHJvY2VzcyBsb2FkZXIgcmVzdWx0cyBpbnRvIHN0YXRlLmxvYWRlckRhdGEvc3RhdGUuZXJyb3JzXG4gIHJlc3VsdHMuZm9yRWFjaCgocmVzdWx0LCBpbmRleCkgPT4ge1xuICAgIGxldCBpZCA9IG1hdGNoZXNUb0xvYWRbaW5kZXhdLnJvdXRlLmlkO1xuICAgIGludmFyaWFudCghaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpLCBcIkNhbm5vdCBoYW5kbGUgcmVkaXJlY3QgcmVzdWx0cyBpbiBwcm9jZXNzTG9hZGVyRGF0YVwiKTtcbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBMb29rIHVwd2FyZHMgZnJvbSB0aGUgbWF0Y2hlZCByb3V0ZSBmb3IgdGhlIGNsb3Nlc3QgYW5jZXN0b3JcbiAgICAgIC8vIGVycm9yIGJvdW5kYXJ5LCBkZWZhdWx0aW5nIHRvIHRoZSByb290IG1hdGNoXG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgaWQpO1xuICAgICAgbGV0IGVycm9yID0gcmVzdWx0LmVycm9yO1xuICAgICAgLy8gSWYgd2UgaGF2ZSBhIHBlbmRpbmcgYWN0aW9uIGVycm9yLCB3ZSByZXBvcnQgaXQgYXQgdGhlIGhpZ2hlc3Qtcm91dGVcbiAgICAgIC8vIHRoYXQgdGhyb3dzIGEgbG9hZGVyIGVycm9yLCBhbmQgdGhlbiBjbGVhciBpdCBvdXQgdG8gaW5kaWNhdGUgdGhhdFxuICAgICAgLy8gaXQgd2FzIGNvbnN1bWVkXG4gICAgICBpZiAocGVuZGluZ0Vycm9yKSB7XG4gICAgICAgIGVycm9yID0gT2JqZWN0LnZhbHVlcyhwZW5kaW5nRXJyb3IpWzBdO1xuICAgICAgICBwZW5kaW5nRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBlcnJvcnMgPSBlcnJvcnMgfHwge307XG4gICAgICAvLyBQcmVmZXIgaGlnaGVyIGVycm9yIHZhbHVlcyBpZiBsb3dlciBlcnJvcnMgYnViYmxlIHRvIHRoZSBzYW1lIGJvdW5kYXJ5XG4gICAgICBpZiAoZXJyb3JzW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdID09IG51bGwpIHtcbiAgICAgICAgZXJyb3JzW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdID0gZXJyb3I7XG4gICAgICB9XG4gICAgICAvLyBDbGVhciBvdXIgYW55IHByaW9yIGxvYWRlckRhdGEgZm9yIHRoZSB0aHJvd2luZyByb3V0ZVxuICAgICAgbG9hZGVyRGF0YVtpZF0gPSB1bmRlZmluZWQ7XG4gICAgICAvLyBPbmNlIHdlIGZpbmQgb3VyIGZpcnN0IChoaWdoZXN0KSBlcnJvciwgd2Ugc2V0IHRoZSBzdGF0dXMgY29kZSBhbmRcbiAgICAgIC8vIHByZXZlbnQgZGVlcGVyIHN0YXR1cyBjb2RlcyBmcm9tIG92ZXJyaWRpbmdcbiAgICAgIGlmICghZm91bmRFcnJvcikge1xuICAgICAgICBmb3VuZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgc3RhdHVzQ29kZSA9IGlzUm91dGVFcnJvclJlc3BvbnNlKHJlc3VsdC5lcnJvcikgPyByZXN1bHQuZXJyb3Iuc3RhdHVzIDogNTAwO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzLnNldChpZCwgcmVzdWx0LmRlZmVycmVkRGF0YSk7XG4gICAgICAgIGxvYWRlckRhdGFbaWRdID0gcmVzdWx0LmRlZmVycmVkRGF0YS5kYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9hZGVyRGF0YVtpZF0gPSByZXN1bHQuZGF0YTtcbiAgICAgIH1cbiAgICAgIC8vIEVycm9yIHN0YXR1cyBjb2RlcyBhbHdheXMgb3ZlcnJpZGUgc3VjY2VzcyBzdGF0dXMgY29kZXMsIGJ1dCBpZiBhbGxcbiAgICAgIC8vIGxvYWRlcnMgYXJlIHN1Y2Nlc3NmdWwgd2UgdGFrZSB0aGUgZGVlcGVzdCBzdGF0dXMgY29kZS5cbiAgICAgIGlmIChyZXN1bHQuc3RhdHVzQ29kZSAhPSBudWxsICYmIHJlc3VsdC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgIWZvdW5kRXJyb3IpIHtcbiAgICAgICAgc3RhdHVzQ29kZSA9IHJlc3VsdC5zdGF0dXNDb2RlO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgLy8gSWYgd2UgZGlkbid0IGNvbnN1bWUgdGhlIHBlbmRpbmcgYWN0aW9uIGVycm9yIChpLmUuLCBhbGwgbG9hZGVyc1xuICAvLyByZXNvbHZlZCksIHRoZW4gY29uc3VtZSBpdCBoZXJlLiAgQWxzbyBjbGVhciBvdXQgYW55IGxvYWRlckRhdGEgZm9yIHRoZVxuICAvLyB0aHJvd2luZyByb3V0ZVxuICBpZiAocGVuZGluZ0Vycm9yKSB7XG4gICAgZXJyb3JzID0gcGVuZGluZ0Vycm9yO1xuICAgIGxvYWRlckRhdGFbT2JqZWN0LmtleXMocGVuZGluZ0Vycm9yKVswXV0gPSB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBsb2FkZXJEYXRhLFxuICAgIGVycm9ycyxcbiAgICBzdGF0dXNDb2RlOiBzdGF0dXNDb2RlIHx8IDIwMCxcbiAgICBsb2FkZXJIZWFkZXJzXG4gIH07XG59XG5mdW5jdGlvbiBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0Vycm9yLCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcykge1xuICBsZXQge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzXG4gIH0gPSBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdFcnJvciwgYWN0aXZlRGVmZXJyZWRzKTtcbiAgLy8gUHJvY2VzcyByZXN1bHRzIGZyb20gb3VyIHJldmFsaWRhdGluZyBmZXRjaGVyc1xuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgbGV0IHtcbiAgICAgIGtleSxcbiAgICAgIG1hdGNoLFxuICAgICAgY29udHJvbGxlclxuICAgIH0gPSByZXZhbGlkYXRpbmdGZXRjaGVyc1tpbmRleF07XG4gICAgaW52YXJpYW50KGZldGNoZXJSZXN1bHRzICE9PSB1bmRlZmluZWQgJiYgZmV0Y2hlclJlc3VsdHNbaW5kZXhdICE9PSB1bmRlZmluZWQsIFwiRGlkIG5vdCBmaW5kIGNvcnJlc3BvbmRpbmcgZmV0Y2hlciByZXN1bHRcIik7XG4gICAgbGV0IHJlc3VsdCA9IGZldGNoZXJSZXN1bHRzW2luZGV4XTtcbiAgICAvLyBQcm9jZXNzIGZldGNoZXIgbm9uLXJlZGlyZWN0IGVycm9yc1xuICAgIGlmIChjb250cm9sbGVyICYmIGNvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIC8vIE5vdGhpbmcgdG8gZG8gZm9yIGFib3J0ZWQgZmV0Y2hlcnNcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgbWF0Y2ggPT0gbnVsbCA/IHZvaWQgMCA6IG1hdGNoLnJvdXRlLmlkKTtcbiAgICAgIGlmICghKGVycm9ycyAmJiBlcnJvcnNbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF0pKSB7XG4gICAgICAgIGVycm9ycyA9IF9leHRlbmRzKHt9LCBlcnJvcnMsIHtcbiAgICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5lcnJvclxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICAgIH0gZWxzZSBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTaG91bGQgbmV2ZXIgZ2V0IGhlcmUsIHJlZGlyZWN0cyBzaG91bGQgZ2V0IHByb2Nlc3NlZCBhYm92ZSwgYnV0IHdlXG4gICAgICAvLyBrZWVwIHRoaXMgdG8gdHlwZSBuYXJyb3cgdG8gYSBzdWNjZXNzIHJlc3VsdCBpbiB0aGUgZWxzZVxuICAgICAgaW52YXJpYW50KGZhbHNlLCBcIlVuaGFuZGxlZCBmZXRjaGVyIHJldmFsaWRhdGlvbiByZWRpcmVjdFwiKTtcbiAgICB9IGVsc2UgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU2hvdWxkIG5ldmVyIGdldCBoZXJlLCBkZWZlcnJlZCBkYXRhIHNob3VsZCBiZSBhd2FpdGVkIGZvciBmZXRjaGVyc1xuICAgICAgLy8gaW4gcmVzb2x2ZURlZmVycmVkUmVzdWx0c1xuICAgICAgaW52YXJpYW50KGZhbHNlLCBcIlVuaGFuZGxlZCBmZXRjaGVyIGRlZmVycmVkIGRhdGFcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IGdldERvbmVGZXRjaGVyKHJlc3VsdC5kYXRhKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBsb2FkZXJEYXRhLFxuICAgIGVycm9yc1xuICB9O1xufVxuZnVuY3Rpb24gbWVyZ2VMb2FkZXJEYXRhKGxvYWRlckRhdGEsIG5ld0xvYWRlckRhdGEsIG1hdGNoZXMsIGVycm9ycykge1xuICBsZXQgbWVyZ2VkTG9hZGVyRGF0YSA9IF9leHRlbmRzKHt9LCBuZXdMb2FkZXJEYXRhKTtcbiAgZm9yIChsZXQgbWF0Y2ggb2YgbWF0Y2hlcykge1xuICAgIGxldCBpZCA9IG1hdGNoLnJvdXRlLmlkO1xuICAgIGlmIChuZXdMb2FkZXJEYXRhLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgaWYgKG5ld0xvYWRlckRhdGFbaWRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbWVyZ2VkTG9hZGVyRGF0YVtpZF0gPSBuZXdMb2FkZXJEYXRhW2lkXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGxvYWRlckRhdGFbaWRdICE9PSB1bmRlZmluZWQgJiYgbWF0Y2gucm91dGUubG9hZGVyKSB7XG4gICAgICAvLyBQcmVzZXJ2ZSBleGlzdGluZyBrZXlzIG5vdCBpbmNsdWRlZCBpbiBuZXdMb2FkZXJEYXRhIGFuZCB3aGVyZSBhIGxvYWRlclxuICAgICAgLy8gd2Fzbid0IHJlbW92ZWQgYnkgSE1SXG4gICAgICBtZXJnZWRMb2FkZXJEYXRhW2lkXSA9IGxvYWRlckRhdGFbaWRdO1xuICAgIH1cbiAgICBpZiAoZXJyb3JzICYmIGVycm9ycy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgIC8vIERvbid0IGtlZXAgYW55IGxvYWRlciBkYXRhIGJlbG93IHRoZSBib3VuZGFyeVxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtZXJnZWRMb2FkZXJEYXRhO1xufVxuLy8gRmluZCB0aGUgbmVhcmVzdCBlcnJvciBib3VuZGFyeSwgbG9va2luZyB1cHdhcmRzIGZyb20gdGhlIGxlYWYgcm91dGUgKG9yIHRoZVxuLy8gcm91dGUgc3BlY2lmaWVkIGJ5IHJvdXRlSWQpIGZvciB0aGUgY2xvc2VzdCBhbmNlc3RvciBlcnJvciBib3VuZGFyeSxcbi8vIGRlZmF1bHRpbmcgdG8gdGhlIHJvb3QgbWF0Y2hcbmZ1bmN0aW9uIGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgcm91dGVJZCkge1xuICBsZXQgZWxpZ2libGVNYXRjaGVzID0gcm91dGVJZCA/IG1hdGNoZXMuc2xpY2UoMCwgbWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSArIDEpIDogWy4uLm1hdGNoZXNdO1xuICByZXR1cm4gZWxpZ2libGVNYXRjaGVzLnJldmVyc2UoKS5maW5kKG0gPT4gbS5yb3V0ZS5oYXNFcnJvckJvdW5kYXJ5ID09PSB0cnVlKSB8fCBtYXRjaGVzWzBdO1xufVxuZnVuY3Rpb24gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhyb3V0ZXMpIHtcbiAgLy8gUHJlZmVyIGEgcm9vdCBsYXlvdXQgcm91dGUgaWYgcHJlc2VudCwgb3RoZXJ3aXNlIHNoaW0gaW4gYSByb3V0ZSBvYmplY3RcbiAgbGV0IHJvdXRlID0gcm91dGVzLmZpbmQociA9PiByLmluZGV4IHx8ICFyLnBhdGggfHwgci5wYXRoID09PSBcIi9cIikgfHwge1xuICAgIGlkOiBcIl9fc2hpbS1lcnJvci1yb3V0ZV9fXCJcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBtYXRjaGVzOiBbe1xuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIHBhdGhuYW1lOiBcIlwiLFxuICAgICAgcGF0aG5hbWVCYXNlOiBcIlwiLFxuICAgICAgcm91dGVcbiAgICB9XSxcbiAgICByb3V0ZVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcihzdGF0dXMsIF90ZW1wNCkge1xuICBsZXQge1xuICAgIHBhdGhuYW1lLFxuICAgIHJvdXRlSWQsXG4gICAgbWV0aG9kLFxuICAgIHR5cGVcbiAgfSA9IF90ZW1wNCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDQ7XG4gIGxldCBzdGF0dXNUZXh0ID0gXCJVbmtub3duIFNlcnZlciBFcnJvclwiO1xuICBsZXQgZXJyb3JNZXNzYWdlID0gXCJVbmtub3duIEByZW1peC1ydW4vcm91dGVyIGVycm9yXCI7XG4gIGlmIChzdGF0dXMgPT09IDQwMCkge1xuICAgIHN0YXR1c1RleHQgPSBcIkJhZCBSZXF1ZXN0XCI7XG4gICAgaWYgKG1ldGhvZCAmJiBwYXRobmFtZSAmJiByb3V0ZUlkKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIllvdSBtYWRlIGEgXCIgKyBtZXRob2QgKyBcIiByZXF1ZXN0IHRvIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiIGJ1dCBcIiArIChcImRpZCBub3QgcHJvdmlkZSBhIGBsb2FkZXJgIGZvciByb3V0ZSBcXFwiXCIgKyByb3V0ZUlkICsgXCJcXFwiLCBcIikgKyBcInNvIHRoZXJlIGlzIG5vIHdheSB0byBoYW5kbGUgdGhlIHJlcXVlc3QuXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBcImRlZmVyLWFjdGlvblwiKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcImRlZmVyKCkgaXMgbm90IHN1cHBvcnRlZCBpbiBhY3Rpb25zXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBcImludmFsaWQtYm9keVwiKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIlVuYWJsZSB0byBlbmNvZGUgc3VibWlzc2lvbiBib2R5XCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDAzKSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiRm9yYmlkZGVuXCI7XG4gICAgZXJyb3JNZXNzYWdlID0gXCJSb3V0ZSBcXFwiXCIgKyByb3V0ZUlkICsgXCJcXFwiIGRvZXMgbm90IG1hdGNoIFVSTCBcXFwiXCIgKyBwYXRobmFtZSArIFwiXFxcIlwiO1xuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDA0KSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiTm90IEZvdW5kXCI7XG4gICAgZXJyb3JNZXNzYWdlID0gXCJObyByb3V0ZSBtYXRjaGVzIFVSTCBcXFwiXCIgKyBwYXRobmFtZSArIFwiXFxcIlwiO1xuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDA1KSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiTWV0aG9kIE5vdCBBbGxvd2VkXCI7XG4gICAgaWYgKG1ldGhvZCAmJiBwYXRobmFtZSAmJiByb3V0ZUlkKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIllvdSBtYWRlIGEgXCIgKyBtZXRob2QudG9VcHBlckNhc2UoKSArIFwiIHJlcXVlc3QgdG8gXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCIgYnV0IFwiICsgKFwiZGlkIG5vdCBwcm92aWRlIGFuIGBhY3Rpb25gIGZvciByb3V0ZSBcXFwiXCIgKyByb3V0ZUlkICsgXCJcXFwiLCBcIikgKyBcInNvIHRoZXJlIGlzIG5vIHdheSB0byBoYW5kbGUgdGhlIHJlcXVlc3QuXCI7XG4gICAgfSBlbHNlIGlmIChtZXRob2QpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCByZXF1ZXN0IG1ldGhvZCBcXFwiXCIgKyBtZXRob2QudG9VcHBlckNhc2UoKSArIFwiXFxcIlwiO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IEVycm9yUmVzcG9uc2Uoc3RhdHVzIHx8IDUwMCwgc3RhdHVzVGV4dCwgbmV3IEVycm9yKGVycm9yTWVzc2FnZSksIHRydWUpO1xufVxuLy8gRmluZCBhbnkgcmV0dXJuZWQgcmVkaXJlY3QgZXJyb3JzLCBzdGFydGluZyBmcm9tIHRoZSBsb3dlc3QgbWF0Y2hcbmZ1bmN0aW9uIGZpbmRSZWRpcmVjdChyZXN1bHRzKSB7XG4gIGZvciAobGV0IGkgPSByZXN1bHRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdWx0LFxuICAgICAgICBpZHg6IGlcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzdHJpcEhhc2hGcm9tUGF0aChwYXRoKSB7XG4gIGxldCBwYXJzZWRQYXRoID0gdHlwZW9mIHBhdGggPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgocGF0aCkgOiBwYXRoO1xuICByZXR1cm4gY3JlYXRlUGF0aChfZXh0ZW5kcyh7fSwgcGFyc2VkUGF0aCwge1xuICAgIGhhc2g6IFwiXCJcbiAgfSkpO1xufVxuZnVuY3Rpb24gaXNIYXNoQ2hhbmdlT25seShhLCBiKSB7XG4gIGlmIChhLnBhdGhuYW1lICE9PSBiLnBhdGhuYW1lIHx8IGEuc2VhcmNoICE9PSBiLnNlYXJjaCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoYS5oYXNoID09PSBcIlwiKSB7XG4gICAgLy8gL3BhZ2UgLT4gL3BhZ2UjaGFzaFxuICAgIHJldHVybiBiLmhhc2ggIT09IFwiXCI7XG4gIH0gZWxzZSBpZiAoYS5oYXNoID09PSBiLmhhc2gpIHtcbiAgICAvLyAvcGFnZSNoYXNoIC0+IC9wYWdlI2hhc2hcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChiLmhhc2ggIT09IFwiXCIpIHtcbiAgICAvLyAvcGFnZSNoYXNoIC0+IC9wYWdlI290aGVyXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gSWYgdGhlIGhhc2ggaXMgcmVtb3ZlZCB0aGUgYnJvd3NlciB3aWxsIHJlLXBlcmZvcm0gYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXJcbiAgLy8gL3BhZ2UjaGFzaCAtPiAvcGFnZVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gcmVzdWx0LnR5cGUgPT09IFJlc3VsdFR5cGUuZGVmZXJyZWQ7XG59XG5mdW5jdGlvbiBpc0Vycm9yUmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gcmVzdWx0LnR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3I7XG59XG5mdW5jdGlvbiBpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gKHJlc3VsdCAmJiByZXN1bHQudHlwZSkgPT09IFJlc3VsdFR5cGUucmVkaXJlY3Q7XG59XG5mdW5jdGlvbiBpc0RlZmVycmVkRGF0YSh2YWx1ZSkge1xuICBsZXQgZGVmZXJyZWQgPSB2YWx1ZTtcbiAgcmV0dXJuIGRlZmVycmVkICYmIHR5cGVvZiBkZWZlcnJlZCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgZGVmZXJyZWQuZGF0YSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgZGVmZXJyZWQuc3Vic2NyaWJlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGRlZmVycmVkLmNhbmNlbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBkZWZlcnJlZC5yZXNvbHZlRGF0YSA9PT0gXCJmdW5jdGlvblwiO1xufVxuZnVuY3Rpb24gaXNSZXNwb25zZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUuc3RhdHVzID09PSBcIm51bWJlclwiICYmIHR5cGVvZiB2YWx1ZS5zdGF0dXNUZXh0ID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiB2YWx1ZS5oZWFkZXJzID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2YWx1ZS5ib2R5ICE9PSBcInVuZGVmaW5lZFwiO1xufVxuZnVuY3Rpb24gaXNSZWRpcmVjdFJlc3BvbnNlKHJlc3VsdCkge1xuICBpZiAoIWlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBsZXQgc3RhdHVzID0gcmVzdWx0LnN0YXR1cztcbiAgbGV0IGxvY2F0aW9uID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIik7XG4gIHJldHVybiBzdGF0dXMgPj0gMzAwICYmIHN0YXR1cyA8PSAzOTkgJiYgbG9jYXRpb24gIT0gbnVsbDtcbn1cbmZ1bmN0aW9uIGlzUXVlcnlSb3V0ZVJlc3BvbnNlKG9iaikge1xuICByZXR1cm4gb2JqICYmIGlzUmVzcG9uc2Uob2JqLnJlc3BvbnNlKSAmJiAob2JqLnR5cGUgPT09IFJlc3VsdFR5cGUuZGF0YSB8fCBvYmoudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcik7XG59XG5mdW5jdGlvbiBpc1ZhbGlkTWV0aG9kKG1ldGhvZCkge1xuICByZXR1cm4gdmFsaWRSZXF1ZXN0TWV0aG9kcy5oYXMobWV0aG9kLnRvTG93ZXJDYXNlKCkpO1xufVxuZnVuY3Rpb24gaXNNdXRhdGlvbk1ldGhvZChtZXRob2QpIHtcbiAgcmV0dXJuIHZhbGlkTXV0YXRpb25NZXRob2RzLmhhcyhtZXRob2QudG9Mb3dlckNhc2UoKSk7XG59XG5hc3luYyBmdW5jdGlvbiByZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBzaWduYWxzLCBpc0ZldGNoZXIsIGN1cnJlbnRMb2FkZXJEYXRhKSB7XG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByZXN1bHRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGxldCByZXN1bHQgPSByZXN1bHRzW2luZGV4XTtcbiAgICBsZXQgbWF0Y2ggPSBtYXRjaGVzVG9Mb2FkW2luZGV4XTtcbiAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgbWF0Y2gsIHRoZW4gd2UgY2FuIGhhdmUgYSBkZWZlcnJlZCByZXN1bHQgdG8gZG9cbiAgICAvLyBhbnl0aGluZyB3aXRoLiAgVGhpcyBpcyBmb3IgcmV2YWxpZGF0aW5nIGZldGNoZXJzIHdoZXJlIHRoZSByb3V0ZSB3YXNcbiAgICAvLyByZW1vdmVkIGR1cmluZyBITVJcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgbGV0IGN1cnJlbnRNYXRjaCA9IGN1cnJlbnRNYXRjaGVzLmZpbmQobSA9PiBtLnJvdXRlLmlkID09PSBtYXRjaC5yb3V0ZS5pZCk7XG4gICAgbGV0IGlzUmV2YWxpZGF0aW5nTG9hZGVyID0gY3VycmVudE1hdGNoICE9IG51bGwgJiYgIWlzTmV3Um91dGVJbnN0YW5jZShjdXJyZW50TWF0Y2gsIG1hdGNoKSAmJiAoY3VycmVudExvYWRlckRhdGEgJiYgY3VycmVudExvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdKSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkgJiYgKGlzRmV0Y2hlciB8fCBpc1JldmFsaWRhdGluZ0xvYWRlcikpIHtcbiAgICAgIC8vIE5vdGU6IHdlIGRvIG5vdCBoYXZlIHRvIHRvdWNoIGFjdGl2ZURlZmVycmVkcyBoZXJlIHNpbmNlIHdlIHJhY2UgdGhlbVxuICAgICAgLy8gYWdhaW5zdCB0aGUgc2lnbmFsIGluIHJlc29sdmVEZWZlcnJlZERhdGEgYW5kIHRoZXknbGwgZ2V0IGFib3J0ZWRcbiAgICAgIC8vIHRoZXJlIGlmIG5lZWRlZFxuICAgICAgbGV0IHNpZ25hbCA9IHNpZ25hbHNbaW5kZXhdO1xuICAgICAgaW52YXJpYW50KHNpZ25hbCwgXCJFeHBlY3RlZCBhbiBBYm9ydFNpZ25hbCBmb3IgcmV2YWxpZGF0aW5nIGZldGNoZXIgZGVmZXJyZWQgcmVzdWx0XCIpO1xuICAgICAgYXdhaXQgcmVzb2x2ZURlZmVycmVkRGF0YShyZXN1bHQsIHNpZ25hbCwgaXNGZXRjaGVyKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHRzW2luZGV4XSA9IHJlc3VsdCB8fCByZXN1bHRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5hc3luYyBmdW5jdGlvbiByZXNvbHZlRGVmZXJyZWREYXRhKHJlc3VsdCwgc2lnbmFsLCB1bndyYXApIHtcbiAgaWYgKHVud3JhcCA9PT0gdm9pZCAwKSB7XG4gICAgdW53cmFwID0gZmFsc2U7XG4gIH1cbiAgbGV0IGFib3J0ZWQgPSBhd2FpdCByZXN1bHQuZGVmZXJyZWREYXRhLnJlc29sdmVEYXRhKHNpZ25hbCk7XG4gIGlmIChhYm9ydGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh1bndyYXApIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgICAgICBkYXRhOiByZXN1bHQuZGVmZXJyZWREYXRhLnVud3JhcHBlZERhdGFcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gSGFuZGxlIGFueSBUcmFja2VkUHJvbWlzZS5fZXJyb3IgdmFsdWVzIGVuY291bnRlcmVkIHdoaWxlIHVud3JhcHBpbmdcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yOiBlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICBkYXRhOiByZXN1bHQuZGVmZXJyZWREYXRhLmRhdGFcbiAgfTtcbn1cbmZ1bmN0aW9uIGhhc05ha2VkSW5kZXhRdWVyeShzZWFyY2gpIHtcbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXMoc2VhcmNoKS5nZXRBbGwoXCJpbmRleFwiKS5zb21lKHYgPT4gdiA9PT0gXCJcIik7XG59XG4vLyBOb3RlOiBUaGlzIHNob3VsZCBtYXRjaCB0aGUgZm9ybWF0IGV4cG9ydGVkIGJ5IHVzZU1hdGNoZXMsIHNvIGlmIHlvdSBjaGFuZ2Vcbi8vIHRoaXMgcGxlYXNlIGFsc28gY2hhbmdlIHRoYXQgOikgIEV2ZW50dWFsbHkgd2UnbGwgRFJZIHRoaXMgdXBcbmZ1bmN0aW9uIGNyZWF0ZVVzZU1hdGNoZXNNYXRjaChtYXRjaCwgbG9hZGVyRGF0YSkge1xuICBsZXQge1xuICAgIHJvdXRlLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtc1xuICB9ID0gbWF0Y2g7XG4gIHJldHVybiB7XG4gICAgaWQ6IHJvdXRlLmlkLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtcyxcbiAgICBkYXRhOiBsb2FkZXJEYXRhW3JvdXRlLmlkXSxcbiAgICBoYW5kbGU6IHJvdXRlLmhhbmRsZVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pIHtcbiAgbGV0IHNlYXJjaCA9IHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbikuc2VhcmNoIDogbG9jYXRpb24uc2VhcmNoO1xuICBpZiAobWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLmluZGV4ICYmIGhhc05ha2VkSW5kZXhRdWVyeShzZWFyY2ggfHwgXCJcIikpIHtcbiAgICAvLyBSZXR1cm4gdGhlIGxlYWYgaW5kZXggcm91dGUgd2hlbiBpbmRleCBpcyBwcmVzZW50XG4gICAgcmV0dXJuIG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgfVxuICAvLyBPdGhlcndpc2UgZ3JhYiB0aGUgZGVlcGVzdCBcInBhdGggY29udHJpYnV0aW5nXCIgbWF0Y2ggKGlnbm9yaW5nIGluZGV4IGFuZFxuICAvLyBwYXRobGVzcyBsYXlvdXQgcm91dGVzKVxuICBsZXQgcGF0aE1hdGNoZXMgPSBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKTtcbiAgcmV0dXJuIHBhdGhNYXRjaGVzW3BhdGhNYXRjaGVzLmxlbmd0aCAtIDFdO1xufVxuZnVuY3Rpb24gZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uKG5hdmlnYXRpb24pIHtcbiAgbGV0IHtcbiAgICBmb3JtTWV0aG9kLFxuICAgIGZvcm1BY3Rpb24sXG4gICAgZm9ybUVuY1R5cGUsXG4gICAgdGV4dCxcbiAgICBmb3JtRGF0YSxcbiAgICBqc29uXG4gIH0gPSBuYXZpZ2F0aW9uO1xuICBpZiAoIWZvcm1NZXRob2QgfHwgIWZvcm1BY3Rpb24gfHwgIWZvcm1FbmNUeXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0ZXh0ICE9IG51bGwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICB0ZXh0XG4gICAgfTtcbiAgfSBlbHNlIGlmIChmb3JtRGF0YSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YSxcbiAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgIHRleHQ6IHVuZGVmaW5lZFxuICAgIH07XG4gIH0gZWxzZSBpZiAoanNvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAganNvbixcbiAgICAgIHRleHQ6IHVuZGVmaW5lZFxuICAgIH07XG4gIH1cbn1cbmZ1bmN0aW9uIGdldExvYWRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBzdWJtaXNzaW9uKSB7XG4gIGlmIChzdWJtaXNzaW9uKSB7XG4gICAgbGV0IG5hdmlnYXRpb24gPSB7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGZvcm1NZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb246IHN1Ym1pc3Npb24uZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGE6IHN1Ym1pc3Npb24uZm9ybURhdGEsXG4gICAgICBqc29uOiBzdWJtaXNzaW9uLmpzb24sXG4gICAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHRcbiAgICB9O1xuICAgIHJldHVybiBuYXZpZ2F0aW9uO1xuICB9IGVsc2Uge1xuICAgIGxldCBuYXZpZ2F0aW9uID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgIHRleHQ6IHVuZGVmaW5lZFxuICAgIH07XG4gICAgcmV0dXJuIG5hdmlnYXRpb247XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFN1Ym1pdHRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBzdWJtaXNzaW9uKSB7XG4gIGxldCBuYXZpZ2F0aW9uID0ge1xuICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIixcbiAgICBsb2NhdGlvbixcbiAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbi5mb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgIGpzb246IHN1Ym1pc3Npb24uanNvbixcbiAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHRcbiAgfTtcbiAgcmV0dXJuIG5hdmlnYXRpb247XG59XG5mdW5jdGlvbiBnZXRMb2FkaW5nRmV0Y2hlcihzdWJtaXNzaW9uLCBkYXRhKSB7XG4gIGlmIChzdWJtaXNzaW9uKSB7XG4gICAgbGV0IGZldGNoZXIgPSB7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uOiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZTogc3VibWlzc2lvbi5mb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgICAganNvbjogc3VibWlzc2lvbi5qc29uLFxuICAgICAgdGV4dDogc3VibWlzc2lvbi50ZXh0LFxuICAgICAgZGF0YSxcbiAgICAgIFwiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nIFwiOiB0cnVlXG4gICAgfTtcbiAgICByZXR1cm4gZmV0Y2hlcjtcbiAgfSBlbHNlIHtcbiAgICBsZXQgZmV0Y2hlciA9IHtcbiAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAganNvbjogdW5kZWZpbmVkLFxuICAgICAgdGV4dDogdW5kZWZpbmVkLFxuICAgICAgZGF0YSxcbiAgICAgIFwiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nIFwiOiB0cnVlXG4gICAgfTtcbiAgICByZXR1cm4gZmV0Y2hlcjtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0U3VibWl0dGluZ0ZldGNoZXIoc3VibWlzc2lvbiwgZXhpc3RpbmdGZXRjaGVyKSB7XG4gIGxldCBmZXRjaGVyID0ge1xuICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIixcbiAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbi5mb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgIGpzb246IHN1Ym1pc3Npb24uanNvbixcbiAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHQsXG4gICAgZGF0YTogZXhpc3RpbmdGZXRjaGVyID8gZXhpc3RpbmdGZXRjaGVyLmRhdGEgOiB1bmRlZmluZWQsXG4gICAgXCIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgXCI6IHRydWVcbiAgfTtcbiAgcmV0dXJuIGZldGNoZXI7XG59XG5mdW5jdGlvbiBnZXREb25lRmV0Y2hlcihkYXRhKSB7XG4gIGxldCBmZXRjaGVyID0ge1xuICAgIHN0YXRlOiBcImlkbGVcIixcbiAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgdGV4dDogdW5kZWZpbmVkLFxuICAgIGRhdGEsXG4gICAgXCIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgXCI6IHRydWVcbiAgfTtcbiAgcmV0dXJuIGZldGNoZXI7XG59XG4vLyNlbmRyZWdpb25cblxuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEFjdGlvbiwgRXJyb3JSZXNwb25zZSwgSURMRV9CTE9DS0VSLCBJRExFX0ZFVENIRVIsIElETEVfTkFWSUdBVElPTiwgVU5TQUZFX0RFRkVSUkVEX1NZTUJPTCwgRGVmZXJyZWREYXRhIGFzIFVOU0FGRV9EZWZlcnJlZERhdGEsIGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMgYXMgVU5TQUZFX2NvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMsIGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzIGFzIFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcywgaW52YXJpYW50IGFzIFVOU0FGRV9pbnZhcmlhbnQsIHdhcm5pbmcgYXMgVU5TQUZFX3dhcm5pbmcsIGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlUGF0aCwgY3JlYXRlUm91dGVyLCBjcmVhdGVTdGF0aWNIYW5kbGVyLCBkZWZlciwgZ2VuZXJhdGVQYXRoLCBnZXRTdGF0aWNDb250ZXh0RnJvbUVycm9yLCBnZXRUb1BhdGhuYW1lLCBpc0RlZmVycmVkRGF0YSwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpvaW5QYXRocywganNvbiwgbWF0Y2hQYXRoLCBtYXRjaFJvdXRlcywgbm9ybWFsaXplUGF0aG5hbWUsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlZGlyZWN0RG9jdW1lbnQsIHJlc29sdmVQYXRoLCByZXNvbHZlVG8sIHN0cmlwQmFzZW5hbWUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRlci5qcy5tYXBcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWFpbi5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWFpbi5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiLyoqXG4gKiBSZWFjdCBSb3V0ZXIgdjYuMTUuMFxuICpcbiAqIENvcHlyaWdodCAoYykgUmVtaXggU29mdHdhcmUgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRS5tZCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBVTlNBRkVfaW52YXJpYW50LCBqb2luUGF0aHMsIG1hdGNoUGF0aCwgVU5TQUZFX2dldFBhdGhDb250cmlidXRpbmdNYXRjaGVzLCBVTlNBRkVfd2FybmluZywgcmVzb2x2ZVRvLCBwYXJzZVBhdGgsIG1hdGNoUm91dGVzLCBBY3Rpb24sIHN0cmlwQmFzZW5hbWUsIElETEVfQkxPQ0tFUiwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGNyZWF0ZU1lbW9yeUhpc3RvcnksIEFib3J0ZWREZWZlcnJlZEVycm9yLCBjcmVhdGVSb3V0ZXIgfSBmcm9tICdAcmVtaXgtcnVuL3JvdXRlcic7XG5leHBvcnQgeyBBYm9ydGVkRGVmZXJyZWRFcnJvciwgQWN0aW9uIGFzIE5hdmlnYXRpb25UeXBlLCBjcmVhdGVQYXRoLCBkZWZlciwgZ2VuZXJhdGVQYXRoLCBpc1JvdXRlRXJyb3JSZXNwb25zZSwganNvbiwgbWF0Y2hQYXRoLCBtYXRjaFJvdXRlcywgcGFyc2VQYXRoLCByZWRpcmVjdCwgcmVkaXJlY3REb2N1bWVudCwgcmVzb2x2ZVBhdGggfSBmcm9tICdAcmVtaXgtcnVuL3JvdXRlcic7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG4vLyBDcmVhdGUgcmVhY3Qtc3BlY2lmaWMgdHlwZXMgZnJvbSB0aGUgYWdub3N0aWMgdHlwZXMgaW4gQHJlbWl4LXJ1bi9yb3V0ZXIgdG9cbi8vIGV4cG9ydCBmcm9tIHJlYWN0LXJvdXRlclxuY29uc3QgRGF0YVJvdXRlckNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgRGF0YVJvdXRlckNvbnRleHQuZGlzcGxheU5hbWUgPSBcIkRhdGFSb3V0ZXJcIjtcbn1cbmNvbnN0IERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgRGF0YVJvdXRlclN0YXRlQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiRGF0YVJvdXRlclN0YXRlXCI7XG59XG5jb25zdCBBd2FpdENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQXdhaXRDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJBd2FpdFwiO1xufVxuXG4vKipcbiAqIEEgTmF2aWdhdG9yIGlzIGEgXCJsb2NhdGlvbiBjaGFuZ2VyXCI7IGl0J3MgaG93IHlvdSBnZXQgdG8gZGlmZmVyZW50IGxvY2F0aW9ucy5cbiAqXG4gKiBFdmVyeSBoaXN0b3J5IGluc3RhbmNlIGNvbmZvcm1zIHRvIHRoZSBOYXZpZ2F0b3IgaW50ZXJmYWNlLCBidXQgdGhlXG4gKiBkaXN0aW5jdGlvbiBpcyB1c2VmdWwgcHJpbWFyaWx5IHdoZW4gaXQgY29tZXMgdG8gdGhlIGxvdy1sZXZlbCA8Um91dGVyPiBBUElcbiAqIHdoZXJlIGJvdGggdGhlIGxvY2F0aW9uIGFuZCBhIG5hdmlnYXRvciBtdXN0IGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgaW4gb3JkZXJcbiAqIHRvIGF2b2lkIFwidGVhcmluZ1wiIHRoYXQgbWF5IG9jY3VyIGluIGEgc3VzcGVuc2UtZW5hYmxlZCBhcHAgaWYgdGhlIGFjdGlvblxuICogYW5kL29yIGxvY2F0aW9uIHdlcmUgdG8gYmUgcmVhZCBkaXJlY3RseSBmcm9tIHRoZSBoaXN0b3J5IGluc3RhbmNlLlxuICovXG5cbmNvbnN0IE5hdmlnYXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdmlnYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJOYXZpZ2F0aW9uXCI7XG59XG5jb25zdCBMb2NhdGlvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTG9jYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJMb2NhdGlvblwiO1xufVxuY29uc3QgUm91dGVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICBvdXRsZXQ6IG51bGwsXG4gIG1hdGNoZXM6IFtdLFxuICBpc0RhdGFSb3V0ZTogZmFsc2Vcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlXCI7XG59XG5jb25zdCBSb3V0ZUVycm9yQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZUVycm9yQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiUm91dGVFcnJvclwiO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGZ1bGwgaHJlZiBmb3IgdGhlIGdpdmVuIFwidG9cIiB2YWx1ZS4gVGhpcyBpcyB1c2VmdWwgZm9yIGJ1aWxkaW5nXG4gKiBjdXN0b20gbGlua3MgdGhhdCBhcmUgYWxzbyBhY2Nlc3NpYmxlIGFuZCBwcmVzZXJ2ZSByaWdodC1jbGljayBiZWhhdmlvci5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1ocmVmXG4gKi9cbmZ1bmN0aW9uIHVzZUhyZWYodG8sIF90ZW1wKSB7XG4gIGxldCB7XG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZUhyZWYoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgaGFzaCxcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2hcbiAgfSA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICBsZXQgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZTtcblxuICAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yXG4gIC8vIHRvIGNyZWF0aW5nIHRoZSBocmVmLiAgSWYgdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiBqdXN0IHVzZSB0aGUgcmF3XG4gIC8vIGJhc2VuYW1lIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2VcbiAgLy8gb2YgYSB0cmFpbGluZyBzbGFzaCBvbiByb290IGxpbmtzXG4gIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBqb2luZWRQYXRobmFtZSA9IHBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aG5hbWVdKTtcbiAgfVxuICByZXR1cm4gbmF2aWdhdG9yLmNyZWF0ZUhyZWYoe1xuICAgIHBhdGhuYW1lOiBqb2luZWRQYXRobmFtZSxcbiAgICBzZWFyY2gsXG4gICAgaGFzaFxuICB9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGEgPFJvdXRlcj4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtaW4tcm91dGVyLWNvbnRleHRcbiAqL1xuZnVuY3Rpb24gdXNlSW5Sb3V0ZXJDb250ZXh0KCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpICE9IG51bGw7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBsb2NhdGlvbiBvYmplY3QsIHdoaWNoIHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgVVJMIGluIHdlYlxuICogYnJvd3NlcnMuXG4gKlxuICogTm90ZTogSWYgeW91J3JlIHVzaW5nIHRoaXMgaXQgbWF5IG1lYW4geW91J3JlIGRvaW5nIHNvbWUgb2YgeW91ciBvd25cbiAqIFwicm91dGluZ1wiIGluIHlvdXIgYXBwLCBhbmQgd2UnZCBsaWtlIHRvIGtub3cgd2hhdCB5b3VyIHVzZSBjYXNlIGlzLiBXZSBtYXlcbiAqIGJlIGFibGUgdG8gcHJvdmlkZSBzb21ldGhpbmcgaGlnaGVyLWxldmVsIHRvIGJldHRlciBzdWl0IHlvdXIgbmVlZHMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbG9jYXRpb25cbiAqL1xuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTG9jYXRpb24oKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLmxvY2F0aW9uO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBhY3Rpb24gd2hpY2ggZGVzY3JpYmVzIGhvdyB0aGUgcm91dGVyIGNhbWUgdG9cbiAqIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBlaXRoZXIgYnkgYSBwb3AsIHB1c2gsIG9yIHJlcGxhY2Ugb24gdGhlIGhpc3Rvcnkgc3RhY2suXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbmF2aWdhdGlvbi10eXBlXG4gKi9cbmZ1bmN0aW9uIHVzZU5hdmlnYXRpb25UeXBlKCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLm5hdmlnYXRpb25UeXBlO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBQYXRoTWF0Y2ggb2JqZWN0IGlmIHRoZSBnaXZlbiBwYXR0ZXJuIG1hdGNoZXMgdGhlIGN1cnJlbnQgVVJMLlxuICogVGhpcyBpcyB1c2VmdWwgZm9yIGNvbXBvbmVudHMgdGhhdCBuZWVkIHRvIGtub3cgXCJhY3RpdmVcIiBzdGF0ZSwgZS5nLlxuICogPE5hdkxpbms+LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW1hdGNoXG4gKi9cbmZ1bmN0aW9uIHVzZU1hdGNoKHBhdHRlcm4pIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VNYXRjaCgpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgcGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IG1hdGNoUGF0aChwYXR0ZXJuLCBwYXRobmFtZSksIFtwYXRobmFtZSwgcGF0dGVybl0pO1xufVxuXG4vKipcbiAqIFRoZSBpbnRlcmZhY2UgZm9yIHRoZSBuYXZpZ2F0ZSgpIGZ1bmN0aW9uIHJldHVybmVkIGZyb20gdXNlTmF2aWdhdGUoKS5cbiAqL1xuXG5jb25zdCBuYXZpZ2F0ZUVmZmVjdFdhcm5pbmcgPSBcIllvdSBzaG91bGQgY2FsbCBuYXZpZ2F0ZSgpIGluIGEgUmVhY3QudXNlRWZmZWN0KCksIG5vdCB3aGVuIFwiICsgXCJ5b3VyIGNvbXBvbmVudCBpcyBmaXJzdCByZW5kZXJlZC5cIjtcblxuLy8gTXV0ZSB3YXJuaW5ncyBmb3IgY2FsbHMgdG8gdXNlTmF2aWdhdGUgaW4gU1NSIGVudmlyb25tZW50c1xuZnVuY3Rpb24gdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChjYikge1xuICBsZXQgaXNTdGF0aWMgPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KS5zdGF0aWM7XG4gIGlmICghaXNTdGF0aWMpIHtcbiAgICAvLyBXZSBzaG91bGQgYmUgYWJsZSB0byBnZXQgcmlkIG9mIHRoaXMgb25jZSByZWFjdCAxOC4zIGlzIHJlbGVhc2VkXG4gICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC8yNjM5NVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdChjYik7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGltcGVyYXRpdmUgbWV0aG9kIGZvciBjaGFuZ2luZyB0aGUgbG9jYXRpb24uIFVzZWQgYnkgPExpbms+cywgYnV0XG4gKiBtYXkgYWxzbyBiZSB1c2VkIGJ5IG90aGVyIGVsZW1lbnRzIHRvIGNoYW5nZSB0aGUgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGUoKSB7XG4gIGxldCB7XG4gICAgaXNEYXRhUm91dGVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgLy8gQ29uZGl0aW9uYWwgdXNhZ2UgaXMgT0sgaGVyZSBiZWNhdXNlIHRoZSB1c2FnZSBvZiBhIGRhdGEgcm91dGVyIGlzIHN0YXRpY1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgcmV0dXJuIGlzRGF0YVJvdXRlID8gdXNlTmF2aWdhdGVTdGFibGUoKSA6IHVzZU5hdmlnYXRlVW5zdGFibGUoKTtcbn1cbmZ1bmN0aW9uIHVzZU5hdmlnYXRlVW5zdGFibGUoKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTmF2aWdhdGUoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlUGF0aG5hbWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKS5tYXAobWF0Y2ggPT4gbWF0Y2gucGF0aG5hbWVCYXNlKSk7XG4gIGxldCBhY3RpdmVSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBhY3RpdmVSZWYuY3VycmVudCA9IHRydWU7XG4gIH0pO1xuICBsZXQgbmF2aWdhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAodG8sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGFjdGl2ZVJlZi5jdXJyZW50LCBuYXZpZ2F0ZUVmZmVjdFdhcm5pbmcpIDogdm9pZCAwO1xuXG4gICAgLy8gU2hvcnQgY2lyY3VpdCBoZXJlIHNpbmNlIGlmIHRoaXMgaGFwcGVucyBvbiBmaXJzdCByZW5kZXIgdGhlIG5hdmlnYXRlXG4gICAgLy8gaXMgdXNlbGVzcyBiZWNhdXNlIHdlIGhhdmVuJ3Qgd2lyZWQgdXAgb3VyIGhpc3RvcnkgbGlzdGVuZXIgeWV0XG4gICAgaWYgKCFhY3RpdmVSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIG5hdmlnYXRvci5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBwYXRoID0gcmVzb2x2ZVRvKHRvLCBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksIGxvY2F0aW9uUGF0aG5hbWUsIG9wdGlvbnMucmVsYXRpdmUgPT09IFwicGF0aFwiKTtcblxuICAgIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUgcHJpb3JcbiAgICAvLyB0byBoYW5kaW5nIG9mZiB0byBoaXN0b3J5IChidXQgb25seSBpZiB3ZSdyZSBub3QgaW4gYSBkYXRhIHJvdXRlcixcbiAgICAvLyBvdGhlcndpc2UgaXQnbGwgcHJlcGVuZCB0aGUgYmFzZW5hbWUgaW5zaWRlIG9mIHRoZSByb3V0ZXIpLlxuICAgIC8vIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4gd2UgbmF2aWdhdGUgdG8gdGhlIHJhdyBiYXNlbmFtZVxuICAgIC8vIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2Ugb2YgYVxuICAgIC8vIHRyYWlsaW5nIHNsYXNoIG9uIHJvb3QgbGlua3NcbiAgICBpZiAoZGF0YVJvdXRlckNvbnRleHQgPT0gbnVsbCAmJiBiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICAgIH1cbiAgICAoISFvcHRpb25zLnJlcGxhY2UgPyBuYXZpZ2F0b3IucmVwbGFjZSA6IG5hdmlnYXRvci5wdXNoKShwYXRoLCBvcHRpb25zLnN0YXRlLCBvcHRpb25zKTtcbiAgfSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZSwgZGF0YVJvdXRlckNvbnRleHRdKTtcbiAgcmV0dXJuIG5hdmlnYXRlO1xufVxuY29uc3QgT3V0bGV0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGNvbnRleHQgKGlmIHByb3ZpZGVkKSBmb3IgdGhlIGNoaWxkIHJvdXRlIGF0IHRoaXMgbGV2ZWwgb2YgdGhlIHJvdXRlXG4gKiBoaWVyYXJjaHkuXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1vdXRsZXQtY29udGV4dFxuICovXG5mdW5jdGlvbiB1c2VPdXRsZXRDb250ZXh0KCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChPdXRsZXRDb250ZXh0KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS4gVXNlZCBpbnRlcm5hbGx5IGJ5IDxPdXRsZXQ+IHRvIHJlbmRlciBjaGlsZCByb3V0ZXMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2Utb3V0bGV0XG4gKi9cbmZ1bmN0aW9uIHVzZU91dGxldChjb250ZXh0KSB7XG4gIGxldCBvdXRsZXQgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCkub3V0bGV0O1xuICBpZiAob3V0bGV0KSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE91dGxldENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBjb250ZXh0XG4gICAgfSwgb3V0bGV0KTtcbiAgfVxuICByZXR1cm4gb3V0bGV0O1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IG9mIGtleS92YWx1ZSBwYWlycyBvZiB0aGUgZHluYW1pYyBwYXJhbXMgZnJvbSB0aGUgY3VycmVudFxuICogVVJMIHRoYXQgd2VyZSBtYXRjaGVkIGJ5IHRoZSByb3V0ZSBwYXRoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLXBhcmFtc1xuICovXG5mdW5jdGlvbiB1c2VQYXJhbXMoKSB7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVNYXRjaCA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9O1xufVxuXG4vKipcbiAqIFJlc29sdmVzIHRoZSBwYXRobmFtZSBvZiB0aGUgZ2l2ZW4gYHRvYCB2YWx1ZSBhZ2FpbnN0IHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLXJlc29sdmVkLXBhdGhcbiAqL1xuZnVuY3Rpb24gdXNlUmVzb2x2ZWRQYXRoKHRvLCBfdGVtcDIpIHtcbiAgbGV0IHtcbiAgICByZWxhdGl2ZVxuICB9ID0gX3RlbXAyID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMjtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZVBhdGhuYW1lc0pzb24gPSBKU09OLnN0cmluZ2lmeShVTlNBRkVfZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcykubWFwKG1hdGNoID0+IG1hdGNoLnBhdGhuYW1lQmFzZSkpO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiByZXNvbHZlVG8odG8sIEpTT04ucGFyc2Uocm91dGVQYXRobmFtZXNKc29uKSwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmUgPT09IFwicGF0aFwiKSwgW3RvLCByb3V0ZVBhdGhuYW1lc0pzb24sIGxvY2F0aW9uUGF0aG5hbWUsIHJlbGF0aXZlXSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZWxlbWVudCBvZiB0aGUgcm91dGUgdGhhdCBtYXRjaGVkIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBwcmVwYXJlZFxuICogd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0IHRvIHJlbmRlciB0aGUgcmVtYWluZGVyIG9mIHRoZSByb3V0ZSB0cmVlLiBSb3V0ZVxuICogZWxlbWVudHMgaW4gdGhlIHRyZWUgbXVzdCByZW5kZXIgYW4gPE91dGxldD4gdG8gcmVuZGVyIHRoZWlyIGNoaWxkIHJvdXRlJ3NcbiAqIGVsZW1lbnQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2Utcm91dGVzXG4gKi9cbmZ1bmN0aW9uIHVzZVJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uQXJnKSB7XG4gIHJldHVybiB1c2VSb3V0ZXNJbXBsKHJvdXRlcywgbG9jYXRpb25BcmcpO1xufVxuXG4vLyBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiB3aXRoIGFjY2VwdCBvcHRpb25hbCBwYXJhbSBmb3IgUm91dGVyUHJvdmlkZXIgdXNhZ2VcbmZ1bmN0aW9uIHVzZVJvdXRlc0ltcGwocm91dGVzLCBsb2NhdGlvbkFyZywgZGF0YVJvdXRlclN0YXRlKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlUm91dGVzKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIG1hdGNoZXM6IHBhcmVudE1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlTWF0Y2ggPSBwYXJlbnRNYXRjaGVzW3BhcmVudE1hdGNoZXMubGVuZ3RoIC0gMV07XG4gIGxldCBwYXJlbnRQYXJhbXMgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXJhbXMgOiB7fTtcbiAgbGV0IHBhcmVudFBhdGhuYW1lID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGF0aG5hbWUgOiBcIi9cIjtcbiAgbGV0IHBhcmVudFBhdGhuYW1lQmFzZSA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhdGhuYW1lQmFzZSA6IFwiL1wiO1xuICBsZXQgcGFyZW50Um91dGUgPSByb3V0ZU1hdGNoICYmIHJvdXRlTWF0Y2gucm91dGU7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAvLyBZb3Ugd29uJ3QgZ2V0IGEgd2FybmluZyBhYm91dCAyIGRpZmZlcmVudCA8Um91dGVzPiB1bmRlciBhIDxSb3V0ZT5cbiAgICAvLyB3aXRob3V0IGEgdHJhaWxpbmcgKiwgYnV0IHRoaXMgaXMgYSBiZXN0LWVmZm9ydCB3YXJuaW5nIGFueXdheSBzaW5jZSB3ZVxuICAgIC8vIGNhbm5vdCBldmVuIGdpdmUgdGhlIHdhcm5pbmcgdW5sZXNzIHRoZXkgbGFuZCBhdCB0aGUgcGFyZW50IHJvdXRlLlxuICAgIC8vXG4gICAgLy8gRXhhbXBsZTpcbiAgICAvL1xuICAgIC8vIDxSb3V0ZXM+XG4gICAgLy8gICB7LyogVGhpcyByb3V0ZSBwYXRoIE1VU1QgZW5kIHdpdGggLyogYmVjYXVzZSBvdGhlcndpc2VcbiAgICAvLyAgICAgICBpdCB3aWxsIG5ldmVyIG1hdGNoIC9ibG9nL3Bvc3QvMTIzICovfVxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nXCIgZWxlbWVudD17PEJsb2cgLz59IC8+XG4gICAgLy8gICA8Um91dGUgcGF0aD1cImJsb2cvZmVlZFwiIGVsZW1lbnQ9ezxCbG9nRmVlZCAvPn0gLz5cbiAgICAvLyA8L1JvdXRlcz5cbiAgICAvL1xuICAgIC8vIGZ1bmN0aW9uIEJsb2coKSB7XG4gICAgLy8gICByZXR1cm4gKFxuICAgIC8vICAgICA8Um91dGVzPlxuICAgIC8vICAgICAgIDxSb3V0ZSBwYXRoPVwicG9zdC86aWRcIiBlbGVtZW50PXs8UG9zdCAvPn0gLz5cbiAgICAvLyAgICAgPC9Sb3V0ZXM+XG4gICAgLy8gICApO1xuICAgIC8vIH1cbiAgICBsZXQgcGFyZW50UGF0aCA9IHBhcmVudFJvdXRlICYmIHBhcmVudFJvdXRlLnBhdGggfHwgXCJcIjtcbiAgICB3YXJuaW5nT25jZShwYXJlbnRQYXRobmFtZSwgIXBhcmVudFJvdXRlIHx8IHBhcmVudFBhdGguZW5kc1dpdGgoXCIqXCIpLCBcIllvdSByZW5kZXJlZCBkZXNjZW5kYW50IDxSb3V0ZXM+IChvciBjYWxsZWQgYHVzZVJvdXRlcygpYCkgYXQgXCIgKyAoXCJcXFwiXCIgKyBwYXJlbnRQYXRobmFtZSArIFwiXFxcIiAodW5kZXIgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4pIGJ1dCB0aGUgXCIpICsgXCJwYXJlbnQgcm91dGUgcGF0aCBoYXMgbm8gdHJhaWxpbmcgXFxcIipcXFwiLiBUaGlzIG1lYW5zIGlmIHlvdSBuYXZpZ2F0ZSBcIiArIFwiZGVlcGVyLCB0aGUgcGFyZW50IHdvbid0IG1hdGNoIGFueW1vcmUgYW5kIHRoZXJlZm9yZSB0aGUgY2hpbGQgXCIgKyBcInJvdXRlcyB3aWxsIG5ldmVyIHJlbmRlci5cXG5cXG5cIiArIChcIlBsZWFzZSBjaGFuZ2UgdGhlIHBhcmVudCA8Um91dGUgcGF0aD1cXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiPiB0byA8Um91dGUgXCIpICsgKFwicGF0aD1cXFwiXCIgKyAocGFyZW50UGF0aCA9PT0gXCIvXCIgPyBcIipcIiA6IHBhcmVudFBhdGggKyBcIi8qXCIpICsgXCJcXFwiPi5cIikpO1xuICB9XG4gIGxldCBsb2NhdGlvbkZyb21Db250ZXh0ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IGxvY2F0aW9uO1xuICBpZiAobG9jYXRpb25BcmcpIHtcbiAgICB2YXIgX3BhcnNlZExvY2F0aW9uQXJnJHBhO1xuICAgIGxldCBwYXJzZWRMb2NhdGlvbkFyZyA9IHR5cGVvZiBsb2NhdGlvbkFyZyA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbkFyZykgOiBsb2NhdGlvbkFyZztcbiAgICAhKHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgfHwgKChfcGFyc2VkTG9jYXRpb25BcmckcGEgPSBwYXJzZWRMb2NhdGlvbkFyZy5wYXRobmFtZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wYXJzZWRMb2NhdGlvbkFyZyRwYS5zdGFydHNXaXRoKHBhcmVudFBhdGhuYW1lQmFzZSkpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiV2hlbiBvdmVycmlkaW5nIHRoZSBsb2NhdGlvbiB1c2luZyBgPFJvdXRlcyBsb2NhdGlvbj5gIG9yIGB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbilgLCBcIiArIFwidGhlIGxvY2F0aW9uIHBhdGhuYW1lIG11c3QgYmVnaW4gd2l0aCB0aGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIFwiICsgKFwibWF0Y2hlZCBieSBhbGwgcGFyZW50IHJvdXRlcy4gVGhlIGN1cnJlbnQgcGF0aG5hbWUgYmFzZSBpcyBcXFwiXCIgKyBwYXJlbnRQYXRobmFtZUJhc2UgKyBcIlxcXCIgXCIpICsgKFwiYnV0IHBhdGhuYW1lIFxcXCJcIiArIHBhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lICsgXCJcXFwiIHdhcyBnaXZlbiBpbiB0aGUgYGxvY2F0aW9uYCBwcm9wLlwiKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBsb2NhdGlvbiA9IHBhcnNlZExvY2F0aW9uQXJnO1xuICB9IGVsc2Uge1xuICAgIGxvY2F0aW9uID0gbG9jYXRpb25Gcm9tQ29udGV4dDtcbiAgfVxuICBsZXQgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSB8fCBcIi9cIjtcbiAgbGV0IHJlbWFpbmluZ1BhdGhuYW1lID0gcGFyZW50UGF0aG5hbWVCYXNlID09PSBcIi9cIiA/IHBhdGhuYW1lIDogcGF0aG5hbWUuc2xpY2UocGFyZW50UGF0aG5hbWVCYXNlLmxlbmd0aCkgfHwgXCIvXCI7XG4gIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzLCB7XG4gICAgcGF0aG5hbWU6IHJlbWFpbmluZ1BhdGhuYW1lXG4gIH0pO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcocGFyZW50Um91dGUgfHwgbWF0Y2hlcyAhPSBudWxsLCBcIk5vIHJvdXRlcyBtYXRjaGVkIGxvY2F0aW9uIFxcXCJcIiArIGxvY2F0aW9uLnBhdGhuYW1lICsgbG9jYXRpb24uc2VhcmNoICsgbG9jYXRpb24uaGFzaCArIFwiXFxcIiBcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcobWF0Y2hlcyA9PSBudWxsIHx8IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5lbGVtZW50ICE9PSB1bmRlZmluZWQgfHwgbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLkNvbXBvbmVudCAhPT0gdW5kZWZpbmVkLCBcIk1hdGNoZWQgbGVhZiByb3V0ZSBhdCBsb2NhdGlvbiBcXFwiXCIgKyBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCArIGxvY2F0aW9uLmhhc2ggKyBcIlxcXCIgXCIgKyBcImRvZXMgbm90IGhhdmUgYW4gZWxlbWVudCBvciBDb21wb25lbnQuIFRoaXMgbWVhbnMgaXQgd2lsbCByZW5kZXIgYW4gPE91dGxldCAvPiB3aXRoIGEgXCIgKyBcIm51bGwgdmFsdWUgYnkgZGVmYXVsdCByZXN1bHRpbmcgaW4gYW4gXFxcImVtcHR5XFxcIiBwYWdlLlwiKSA6IHZvaWQgMDtcbiAgfVxuICBsZXQgcmVuZGVyZWRNYXRjaGVzID0gX3JlbmRlck1hdGNoZXMobWF0Y2hlcyAmJiBtYXRjaGVzLm1hcChtYXRjaCA9PiBPYmplY3QuYXNzaWduKHt9LCBtYXRjaCwge1xuICAgIHBhcmFtczogT2JqZWN0LmFzc2lnbih7fSwgcGFyZW50UGFyYW1zLCBtYXRjaC5wYXJhbXMpLFxuICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSxcbiAgICAvLyBSZS1lbmNvZGUgcGF0aG5hbWVzIHRoYXQgd2VyZSBkZWNvZGVkIGluc2lkZSBtYXRjaFJvdXRlc1xuICAgIG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbiA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihtYXRjaC5wYXRobmFtZSkucGF0aG5hbWUgOiBtYXRjaC5wYXRobmFtZV0pLFxuICAgIHBhdGhuYW1lQmFzZTogbWF0Y2gucGF0aG5hbWVCYXNlID09PSBcIi9cIiA/IHBhcmVudFBhdGhuYW1lQmFzZSA6IGpvaW5QYXRocyhbcGFyZW50UGF0aG5hbWVCYXNlLFxuICAgIC8vIFJlLWVuY29kZSBwYXRobmFtZXMgdGhhdCB3ZXJlIGRlY29kZWQgaW5zaWRlIG1hdGNoUm91dGVzXG4gICAgbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uID8gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uKG1hdGNoLnBhdGhuYW1lQmFzZSkucGF0aG5hbWUgOiBtYXRjaC5wYXRobmFtZUJhc2VdKVxuICB9KSksIHBhcmVudE1hdGNoZXMsIGRhdGFSb3V0ZXJTdGF0ZSk7XG5cbiAgLy8gV2hlbiBhIHVzZXIgcGFzc2VzIGluIGEgYGxvY2F0aW9uQXJnYCwgdGhlIGFzc29jaWF0ZWQgcm91dGVzIG5lZWQgdG9cbiAgLy8gYmUgd3JhcHBlZCBpbiBhIG5ldyBgTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyYCBpbiBvcmRlciBmb3IgYHVzZUxvY2F0aW9uYFxuICAvLyB0byB1c2UgdGhlIHNjb3BlZCBsb2NhdGlvbiBpbnN0ZWFkIG9mIHRoZSBnbG9iYWwgbG9jYXRpb24uXG4gIGlmIChsb2NhdGlvbkFyZyAmJiByZW5kZXJlZE1hdGNoZXMpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZToge1xuICAgICAgICBsb2NhdGlvbjogX2V4dGVuZHMoe1xuICAgICAgICAgIHBhdGhuYW1lOiBcIi9cIixcbiAgICAgICAgICBzZWFyY2g6IFwiXCIsXG4gICAgICAgICAgaGFzaDogXCJcIixcbiAgICAgICAgICBzdGF0ZTogbnVsbCxcbiAgICAgICAgICBrZXk6IFwiZGVmYXVsdFwiXG4gICAgICAgIH0sIGxvY2F0aW9uKSxcbiAgICAgICAgbmF2aWdhdGlvblR5cGU6IEFjdGlvbi5Qb3BcbiAgICAgIH1cbiAgICB9LCByZW5kZXJlZE1hdGNoZXMpO1xuICB9XG4gIHJldHVybiByZW5kZXJlZE1hdGNoZXM7XG59XG5mdW5jdGlvbiBEZWZhdWx0RXJyb3JDb21wb25lbnQoKSB7XG4gIGxldCBlcnJvciA9IHVzZVJvdXRlRXJyb3IoKTtcbiAgbGV0IG1lc3NhZ2UgPSBpc1JvdXRlRXJyb3JSZXNwb25zZShlcnJvcikgPyBlcnJvci5zdGF0dXMgKyBcIiBcIiArIGVycm9yLnN0YXR1c1RleHQgOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IEpTT04uc3RyaW5naWZ5KGVycm9yKTtcbiAgbGV0IHN0YWNrID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLnN0YWNrIDogbnVsbDtcbiAgbGV0IGxpZ2h0Z3JleSA9IFwicmdiYSgyMDAsMjAwLDIwMCwgMC41KVwiO1xuICBsZXQgcHJlU3R5bGVzID0ge1xuICAgIHBhZGRpbmc6IFwiMC41cmVtXCIsXG4gICAgYmFja2dyb3VuZENvbG9yOiBsaWdodGdyZXlcbiAgfTtcbiAgbGV0IGNvZGVTdHlsZXMgPSB7XG4gICAgcGFkZGluZzogXCIycHggNHB4XCIsXG4gICAgYmFja2dyb3VuZENvbG9yOiBsaWdodGdyZXlcbiAgfTtcbiAgbGV0IGRldkluZm8gPSBudWxsO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGhhbmRsZWQgYnkgUmVhY3QgUm91dGVyIGRlZmF1bHQgRXJyb3JCb3VuZGFyeTpcIiwgZXJyb3IpO1xuICAgIGRldkluZm8gPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIG51bGwsIFwiXFx1RDgzRFxcdURDQkYgSGV5IGRldmVsb3BlciBcXHVEODNEXFx1REM0QlwiKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIG51bGwsIFwiWW91IGNhbiBwcm92aWRlIGEgd2F5IGJldHRlciBVWCB0aGFuIHRoaXMgd2hlbiB5b3VyIGFwcCB0aHJvd3MgZXJyb3JzIGJ5IHByb3ZpZGluZyB5b3VyIG93biBcIiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjb2RlXCIsIHtcbiAgICAgIHN0eWxlOiBjb2RlU3R5bGVzXG4gICAgfSwgXCJFcnJvckJvdW5kYXJ5XCIpLCBcIiBvclwiLCBcIiBcIiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjb2RlXCIsIHtcbiAgICAgIHN0eWxlOiBjb2RlU3R5bGVzXG4gICAgfSwgXCJlcnJvckVsZW1lbnRcIiksIFwiIHByb3Agb24geW91ciByb3V0ZS5cIikpO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoMlwiLCBudWxsLCBcIlVuZXhwZWN0ZWQgQXBwbGljYXRpb24gRXJyb3IhXCIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImgzXCIsIHtcbiAgICBzdHlsZToge1xuICAgICAgZm9udFN0eWxlOiBcIml0YWxpY1wiXG4gICAgfVxuICB9LCBtZXNzYWdlKSwgc3RhY2sgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInByZVwiLCB7XG4gICAgc3R5bGU6IHByZVN0eWxlc1xuICB9LCBzdGFjaykgOiBudWxsLCBkZXZJbmZvKTtcbn1cbmNvbnN0IGRlZmF1bHRFcnJvckVsZW1lbnQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0RXJyb3JDb21wb25lbnQsIG51bGwpO1xuY2xhc3MgUmVuZGVyRXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBsb2NhdGlvbjogcHJvcHMubG9jYXRpb24sXG4gICAgICByZXZhbGlkYXRpb246IHByb3BzLnJldmFsaWRhdGlvbixcbiAgICAgIGVycm9yOiBwcm9wcy5lcnJvclxuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvcjogZXJyb3JcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSB7XG4gICAgLy8gV2hlbiB3ZSBnZXQgaW50byBhbiBlcnJvciBzdGF0ZSwgdGhlIHVzZXIgd2lsbCBsaWtlbHkgY2xpY2sgXCJiYWNrXCIgdG8gdGhlXG4gICAgLy8gcHJldmlvdXMgcGFnZSB0aGF0IGRpZG4ndCBoYXZlIGFuIGVycm9yLiBCZWNhdXNlIHRoaXMgd3JhcHMgdGhlIGVudGlyZVxuICAgIC8vIGFwcGxpY2F0aW9uLCB0aGF0IHdpbGwgaGF2ZSBubyBlZmZlY3QtLXRoZSBlcnJvciBwYWdlIGNvbnRpbnVlcyB0byBkaXNwbGF5LlxuICAgIC8vIFRoaXMgZ2l2ZXMgdXMgYSBtZWNoYW5pc20gdG8gcmVjb3ZlciBmcm9tIHRoZSBlcnJvciB3aGVuIHRoZSBsb2NhdGlvbiBjaGFuZ2VzLlxuICAgIC8vXG4gICAgLy8gV2hldGhlciB3ZSdyZSBpbiBhbiBlcnJvciBzdGF0ZSBvciBub3QsIHdlIHVwZGF0ZSB0aGUgbG9jYXRpb24gaW4gc3RhdGVcbiAgICAvLyBzbyB0aGF0IHdoZW4gd2UgYXJlIGluIGFuIGVycm9yIHN0YXRlLCBpdCBnZXRzIHJlc2V0IHdoZW4gYSBuZXcgbG9jYXRpb25cbiAgICAvLyBjb21lcyBpbiBhbmQgdGhlIHVzZXIgcmVjb3ZlcnMgZnJvbSB0aGUgZXJyb3IuXG4gICAgaWYgKHN0YXRlLmxvY2F0aW9uICE9PSBwcm9wcy5sb2NhdGlvbiB8fCBzdGF0ZS5yZXZhbGlkYXRpb24gIT09IFwiaWRsZVwiICYmIHByb3BzLnJldmFsaWRhdGlvbiA9PT0gXCJpZGxlXCIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiBwcm9wcy5lcnJvcixcbiAgICAgICAgbG9jYXRpb246IHByb3BzLmxvY2F0aW9uLFxuICAgICAgICByZXZhbGlkYXRpb246IHByb3BzLnJldmFsaWRhdGlvblxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSdyZSBub3QgY2hhbmdpbmcgbG9jYXRpb25zLCBwcmVzZXJ2ZSB0aGUgbG9jYXRpb24gYnV0IHN0aWxsIHN1cmZhY2VcbiAgICAvLyBhbnkgbmV3IGVycm9ycyB0aGF0IG1heSBjb21lIHRocm91Z2guIFdlIHJldGFpbiB0aGUgZXhpc3RpbmcgZXJyb3IsIHdlIGRvXG4gICAgLy8gdGhpcyBiZWNhdXNlIHRoZSBlcnJvciBwcm92aWRlZCBmcm9tIHRoZSBhcHAgc3RhdGUgbWF5IGJlIGNsZWFyZWQgd2l0aG91dFxuICAgIC8vIHRoZSBsb2NhdGlvbiBjaGFuZ2luZy5cbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IHByb3BzLmVycm9yIHx8IHN0YXRlLmVycm9yLFxuICAgICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgICAgcmV2YWxpZGF0aW9uOiBwcm9wcy5yZXZhbGlkYXRpb24gfHwgc3RhdGUucmV2YWxpZGF0aW9uXG4gICAgfTtcbiAgfVxuICBjb21wb25lbnREaWRDYXRjaChlcnJvciwgZXJyb3JJbmZvKSB7XG4gICAgY29uc29sZS5lcnJvcihcIlJlYWN0IFJvdXRlciBjYXVnaHQgdGhlIGZvbGxvd2luZyBlcnJvciBkdXJpbmcgcmVuZGVyXCIsIGVycm9yLCBlcnJvckluZm8pO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5lcnJvciA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMucHJvcHMucm91dGVDb250ZXh0XG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVFcnJvckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLmVycm9yLFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY29tcG9uZW50XG4gICAgfSkpIDogdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgfVxufVxuZnVuY3Rpb24gUmVuZGVyZWRSb3V0ZShfcmVmKSB7XG4gIGxldCB7XG4gICAgcm91dGVDb250ZXh0LFxuICAgIG1hdGNoLFxuICAgIGNoaWxkcmVuXG4gIH0gPSBfcmVmO1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJDb250ZXh0KTtcblxuICAvLyBUcmFjayBob3cgZGVlcCB3ZSBnb3QgaW4gb3VyIHJlbmRlciBwYXNzIHRvIGVtdWxhdGUgU1NSIGNvbXBvbmVudERpZENhdGNoXG4gIC8vIGluIGEgRGF0YVN0YXRpY1JvdXRlclxuICBpZiAoZGF0YVJvdXRlckNvbnRleHQgJiYgZGF0YVJvdXRlckNvbnRleHQuc3RhdGljICYmIGRhdGFSb3V0ZXJDb250ZXh0LnN0YXRpY0NvbnRleHQgJiYgKG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCB8fCBtYXRjaC5yb3V0ZS5FcnJvckJvdW5kYXJ5KSkge1xuICAgIGRhdGFSb3V0ZXJDb250ZXh0LnN0YXRpY0NvbnRleHQuX2RlZXBlc3RSZW5kZXJlZEJvdW5kYXJ5SWQgPSBtYXRjaC5yb3V0ZS5pZDtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHJvdXRlQ29udGV4dFxuICB9LCBjaGlsZHJlbik7XG59XG5mdW5jdGlvbiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzLCBwYXJlbnRNYXRjaGVzLCBkYXRhUm91dGVyU3RhdGUpIHtcbiAgdmFyIF9kYXRhUm91dGVyU3RhdGUyO1xuICBpZiAocGFyZW50TWF0Y2hlcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50TWF0Y2hlcyA9IFtdO1xuICB9XG4gIGlmIChkYXRhUm91dGVyU3RhdGUgPT09IHZvaWQgMCkge1xuICAgIGRhdGFSb3V0ZXJTdGF0ZSA9IG51bGw7XG4gIH1cbiAgaWYgKG1hdGNoZXMgPT0gbnVsbCkge1xuICAgIHZhciBfZGF0YVJvdXRlclN0YXRlO1xuICAgIGlmICgoX2RhdGFSb3V0ZXJTdGF0ZSA9IGRhdGFSb3V0ZXJTdGF0ZSkgIT0gbnVsbCAmJiBfZGF0YVJvdXRlclN0YXRlLmVycm9ycykge1xuICAgICAgLy8gRG9uJ3QgYmFpbCBpZiB3ZSBoYXZlIGRhdGEgcm91dGVyIGVycm9ycyBzbyB3ZSBjYW4gcmVuZGVyIHRoZW0gaW4gdGhlXG4gICAgICAvLyBib3VuZGFyeS4gIFVzZSB0aGUgcHJlLW1hdGNoZWQgKG9yIHNoaW1tZWQpIG1hdGNoZXNcbiAgICAgIG1hdGNoZXMgPSBkYXRhUm91dGVyU3RhdGUubWF0Y2hlcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIGxldCByZW5kZXJlZE1hdGNoZXMgPSBtYXRjaGVzO1xuXG4gIC8vIElmIHdlIGhhdmUgZGF0YSBlcnJvcnMsIHRyaW0gbWF0Y2hlcyB0byB0aGUgaGlnaGVzdCBlcnJvciBib3VuZGFyeVxuICBsZXQgZXJyb3JzID0gKF9kYXRhUm91dGVyU3RhdGUyID0gZGF0YVJvdXRlclN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2RhdGFSb3V0ZXJTdGF0ZTIuZXJyb3JzO1xuICBpZiAoZXJyb3JzICE9IG51bGwpIHtcbiAgICBsZXQgZXJyb3JJbmRleCA9IHJlbmRlcmVkTWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkICYmIChlcnJvcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yc1ttLnJvdXRlLmlkXSkpO1xuICAgICEoZXJyb3JJbmRleCA+PSAwKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiQ291bGQgbm90IGZpbmQgYSBtYXRjaGluZyByb3V0ZSBmb3IgZXJyb3JzIG9uIHJvdXRlIElEczogXCIgKyBPYmplY3Qua2V5cyhlcnJvcnMpLmpvaW4oXCIsXCIpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJlbmRlcmVkTWF0Y2hlcyA9IHJlbmRlcmVkTWF0Y2hlcy5zbGljZSgwLCBNYXRoLm1pbihyZW5kZXJlZE1hdGNoZXMubGVuZ3RoLCBlcnJvckluZGV4ICsgMSkpO1xuICB9XG4gIHJldHVybiByZW5kZXJlZE1hdGNoZXMucmVkdWNlUmlnaHQoKG91dGxldCwgbWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgbGV0IGVycm9yID0gbWF0Y2gucm91dGUuaWQgPyBlcnJvcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yc1ttYXRjaC5yb3V0ZS5pZF0gOiBudWxsO1xuICAgIC8vIE9ubHkgZGF0YSByb3V0ZXJzIGhhbmRsZSBlcnJvcnNcbiAgICBsZXQgZXJyb3JFbGVtZW50ID0gbnVsbDtcbiAgICBpZiAoZGF0YVJvdXRlclN0YXRlKSB7XG4gICAgICBlcnJvckVsZW1lbnQgPSBtYXRjaC5yb3V0ZS5lcnJvckVsZW1lbnQgfHwgZGVmYXVsdEVycm9yRWxlbWVudDtcbiAgICB9XG4gICAgbGV0IG1hdGNoZXMgPSBwYXJlbnRNYXRjaGVzLmNvbmNhdChyZW5kZXJlZE1hdGNoZXMuc2xpY2UoMCwgaW5kZXggKyAxKSk7XG4gICAgbGV0IGdldENoaWxkcmVuID0gKCkgPT4ge1xuICAgICAgbGV0IGNoaWxkcmVuO1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNoaWxkcmVuID0gZXJyb3JFbGVtZW50O1xuICAgICAgfSBlbHNlIGlmIChtYXRjaC5yb3V0ZS5Db21wb25lbnQpIHtcbiAgICAgICAgLy8gTm90ZTogVGhpcyBpcyBhIGRlLW9wdGltaXplZCBwYXRoIHNpbmNlIFJlYWN0IHdvbid0IHJlLXVzZSB0aGVcbiAgICAgICAgLy8gUmVhY3RFbGVtZW50IHNpbmNlIGl0J3MgaWRlbnRpdHkgY2hhbmdlcyB3aXRoIGVhY2ggbmV3XG4gICAgICAgIC8vIFJlYWN0LmNyZWF0ZUVsZW1lbnQgY2FsbC4gIFdlIGtlZXAgdGhpcyBzbyBmb2xrcyBjYW4gdXNlXG4gICAgICAgIC8vIGA8Um91dGUgQ29tcG9uZW50PXsuLi59PmAgaW4gYDxSb3V0ZXM+YCBidXQgZ2VuZXJhbGx5IGBDb21wb25lbnRgXG4gICAgICAgIC8vIHVzYWdlIGlzIG9ubHkgYWR2aXNlZCBpbiBgUm91dGVyUHJvdmlkZXJgIHdoZW4gd2UgY2FuIGNvbnZlcnQgaXQgdG9cbiAgICAgICAgLy8gYGVsZW1lbnRgIGFoZWFkIG9mIHRpbWUuXG4gICAgICAgIGNoaWxkcmVuID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQobWF0Y2gucm91dGUuQ29tcG9uZW50LCBudWxsKTtcbiAgICAgIH0gZWxzZSBpZiAobWF0Y2gucm91dGUuZWxlbWVudCkge1xuICAgICAgICBjaGlsZHJlbiA9IG1hdGNoLnJvdXRlLmVsZW1lbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGlsZHJlbiA9IG91dGxldDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZW5kZXJlZFJvdXRlLCB7XG4gICAgICAgIG1hdGNoOiBtYXRjaCxcbiAgICAgICAgcm91dGVDb250ZXh0OiB7XG4gICAgICAgICAgb3V0bGV0LFxuICAgICAgICAgIG1hdGNoZXMsXG4gICAgICAgICAgaXNEYXRhUm91dGU6IGRhdGFSb3V0ZXJTdGF0ZSAhPSBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyBPbmx5IHdyYXAgaW4gYW4gZXJyb3IgYm91bmRhcnkgd2l0aGluIGRhdGEgcm91dGVyIHVzYWdlcyB3aGVuIHdlIGhhdmUgYW5cbiAgICAvLyBFcnJvckJvdW5kYXJ5L2Vycm9yRWxlbWVudCBvbiB0aGlzIHJvdXRlLiAgT3RoZXJ3aXNlIGxldCBpdCBidWJibGUgdXAgdG9cbiAgICAvLyBhbiBhbmNlc3RvciBFcnJvckJvdW5kYXJ5L2Vycm9yRWxlbWVudFxuICAgIHJldHVybiBkYXRhUm91dGVyU3RhdGUgJiYgKG1hdGNoLnJvdXRlLkVycm9yQm91bmRhcnkgfHwgbWF0Y2gucm91dGUuZXJyb3JFbGVtZW50IHx8IGluZGV4ID09PSAwKSA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlbmRlckVycm9yQm91bmRhcnksIHtcbiAgICAgIGxvY2F0aW9uOiBkYXRhUm91dGVyU3RhdGUubG9jYXRpb24sXG4gICAgICByZXZhbGlkYXRpb246IGRhdGFSb3V0ZXJTdGF0ZS5yZXZhbGlkYXRpb24sXG4gICAgICBjb21wb25lbnQ6IGVycm9yRWxlbWVudCxcbiAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgIGNoaWxkcmVuOiBnZXRDaGlsZHJlbigpLFxuICAgICAgcm91dGVDb250ZXh0OiB7XG4gICAgICAgIG91dGxldDogbnVsbCxcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgaXNEYXRhUm91dGU6IHRydWVcbiAgICAgIH1cbiAgICB9KSA6IGdldENoaWxkcmVuKCk7XG4gIH0sIG51bGwpO1xufVxudmFyIERhdGFSb3V0ZXJIb29rID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChEYXRhUm91dGVySG9vaykge1xuICBEYXRhUm91dGVySG9va1tcIlVzZUJsb2NrZXJcIl0gPSBcInVzZUJsb2NrZXJcIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VSZXZhbGlkYXRvclwiXSA9IFwidXNlUmV2YWxpZGF0b3JcIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VOYXZpZ2F0ZVN0YWJsZVwiXSA9IFwidXNlTmF2aWdhdGVcIjtcbiAgcmV0dXJuIERhdGFSb3V0ZXJIb29rO1xufShEYXRhUm91dGVySG9vayB8fCB7fSk7XG52YXIgRGF0YVJvdXRlclN0YXRlSG9vayA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoRGF0YVJvdXRlclN0YXRlSG9vaykge1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlQmxvY2tlclwiXSA9IFwidXNlQmxvY2tlclwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlTG9hZGVyRGF0YVwiXSA9IFwidXNlTG9hZGVyRGF0YVwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlQWN0aW9uRGF0YVwiXSA9IFwidXNlQWN0aW9uRGF0YVwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlUm91dGVFcnJvclwiXSA9IFwidXNlUm91dGVFcnJvclwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlTmF2aWdhdGlvblwiXSA9IFwidXNlTmF2aWdhdGlvblwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlUm91dGVMb2FkZXJEYXRhXCJdID0gXCJ1c2VSb3V0ZUxvYWRlckRhdGFcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZU1hdGNoZXNcIl0gPSBcInVzZU1hdGNoZXNcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJldmFsaWRhdG9yXCJdID0gXCJ1c2VSZXZhbGlkYXRvclwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlTmF2aWdhdGVTdGFibGVcIl0gPSBcInVzZU5hdmlnYXRlXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSb3V0ZUlkXCJdID0gXCJ1c2VSb3V0ZUlkXCI7XG4gIHJldHVybiBEYXRhUm91dGVyU3RhdGVIb29rO1xufShEYXRhUm91dGVyU3RhdGVIb29rIHx8IHt9KTtcbmZ1bmN0aW9uIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpIHtcbiAgcmV0dXJuIGhvb2tOYW1lICsgXCIgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGRhdGEgcm91dGVyLiAgU2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlcnMvcGlja2luZy1hLXJvdXRlci5cIjtcbn1cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJDb250ZXh0KGhvb2tOYW1lKSB7XG4gIGxldCBjdHggPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJDb250ZXh0KTtcbiAgIWN0eCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gY3R4O1xufVxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlclN0YXRlKGhvb2tOYW1lKSB7XG4gIGxldCBzdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gICFzdGF0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gc3RhdGU7XG59XG5mdW5jdGlvbiB1c2VSb3V0ZUNvbnRleHQoaG9va05hbWUpIHtcbiAgbGV0IHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICAhcm91dGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHJvdXRlO1xufVxuXG4vLyBJbnRlcm5hbCB2ZXJzaW9uIHdpdGggaG9va05hbWUtYXdhcmUgZGVidWdnaW5nXG5mdW5jdGlvbiB1c2VDdXJyZW50Um91dGVJZChob29rTmFtZSkge1xuICBsZXQgcm91dGUgPSB1c2VSb3V0ZUNvbnRleHQoaG9va05hbWUpO1xuICBsZXQgdGhpc1JvdXRlID0gcm91dGUubWF0Y2hlc1tyb3V0ZS5tYXRjaGVzLmxlbmd0aCAtIDFdO1xuICAhdGhpc1JvdXRlLnJvdXRlLmlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgaG9va05hbWUgKyBcIiBjYW4gb25seSBiZSB1c2VkIG9uIHJvdXRlcyB0aGF0IGNvbnRhaW4gYSB1bmlxdWUgXFxcImlkXFxcIlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gdGhpc1JvdXRlLnJvdXRlLmlkO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIElEIGZvciB0aGUgbmVhcmVzdCBjb250ZXh0dWFsIHJvdXRlXG4gKi9cbmZ1bmN0aW9uIHVzZVJvdXRlSWQoKSB7XG4gIHJldHVybiB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlSWQpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiwgZGVmYXVsdGluZyB0byBhbiBcImlkbGVcIiBuYXZpZ2F0aW9uIHdoZW5cbiAqIG5vIG5hdmlnYXRpb24gaXMgaW4gcHJvZ3Jlc3NcbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGlvbigpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTmF2aWdhdGlvbik7XG4gIHJldHVybiBzdGF0ZS5uYXZpZ2F0aW9uO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSByZXZhbGlkYXRlIGZ1bmN0aW9uIGZvciBtYW51YWxseSB0cmlnZ2VyaW5nIHJldmFsaWRhdGlvbiwgYXMgd2VsbFxuICogYXMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgYW55IG1hbnVhbCByZXZhbGlkYXRpb25zXG4gKi9cbmZ1bmN0aW9uIHVzZVJldmFsaWRhdG9yKCkge1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VSZXZhbGlkYXRvcik7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJldmFsaWRhdG9yKTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICByZXZhbGlkYXRlOiBkYXRhUm91dGVyQ29udGV4dC5yb3V0ZXIucmV2YWxpZGF0ZSxcbiAgICBzdGF0ZTogc3RhdGUucmV2YWxpZGF0aW9uXG4gIH0pLCBbZGF0YVJvdXRlckNvbnRleHQucm91dGVyLnJldmFsaWRhdGUsIHN0YXRlLnJldmFsaWRhdGlvbl0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGFjdGl2ZSByb3V0ZSBtYXRjaGVzLCB1c2VmdWwgZm9yIGFjY2Vzc2luZyBsb2FkZXJEYXRhIGZvclxuICogcGFyZW50L2NoaWxkIHJvdXRlcyBvciB0aGUgcm91dGUgXCJoYW5kbGVcIiBwcm9wZXJ0eVxuICovXG5mdW5jdGlvbiB1c2VNYXRjaGVzKCkge1xuICBsZXQge1xuICAgIG1hdGNoZXMsXG4gICAgbG9hZGVyRGF0YVxuICB9ID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTWF0Y2hlcyk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IG1hdGNoZXMubWFwKG1hdGNoID0+IHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gbWF0Y2g7XG4gICAgLy8gTm90ZTogVGhpcyBzdHJ1Y3R1cmUgbWF0Y2hlcyB0aGF0IGNyZWF0ZWQgYnkgY3JlYXRlVXNlTWF0Y2hlc01hdGNoXG4gICAgLy8gaW4gdGhlIEByZW1peC1ydW4vcm91dGVyICwgc28gaWYgeW91IGNoYW5nZSB0aGlzIHBsZWFzZSBhbHNvIGNoYW5nZVxuICAgIC8vIHRoYXQgOikgIEV2ZW50dWFsbHkgd2UnbGwgRFJZIHRoaXMgdXBcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IG1hdGNoLnJvdXRlLmlkLFxuICAgICAgcGF0aG5hbWUsXG4gICAgICBwYXJhbXMsXG4gICAgICBkYXRhOiBsb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSxcbiAgICAgIGhhbmRsZTogbWF0Y2gucm91dGUuaGFuZGxlXG4gICAgfTtcbiAgfSksIFttYXRjaGVzLCBsb2FkZXJEYXRhXSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbG9hZGVyIGRhdGEgZm9yIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGxvYWRlclxuICovXG5mdW5jdGlvbiB1c2VMb2FkZXJEYXRhKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcbiAgbGV0IHJvdXRlSWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZUxvYWRlckRhdGEpO1xuICBpZiAoc3RhdGUuZXJyb3JzICYmIHN0YXRlLmVycm9yc1tyb3V0ZUlkXSAhPSBudWxsKSB7XG4gICAgY29uc29sZS5lcnJvcihcIllvdSBjYW5ub3QgYHVzZUxvYWRlckRhdGFgIGluIGFuIGVycm9yRWxlbWVudCAocm91dGVJZDogXCIgKyByb3V0ZUlkICsgXCIpXCIpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLmxvYWRlckRhdGFbcm91dGVJZF07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbG9hZGVyRGF0YSBmb3IgdGhlIGdpdmVuIHJvdXRlSWRcbiAqL1xuZnVuY3Rpb24gdXNlUm91dGVMb2FkZXJEYXRhKHJvdXRlSWQpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVMb2FkZXJEYXRhKTtcbiAgcmV0dXJuIHN0YXRlLmxvYWRlckRhdGFbcm91dGVJZF07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aW9uIGRhdGEgZm9yIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGFjdGlvblxuICovXG5mdW5jdGlvbiB1c2VBY3Rpb25EYXRhKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VBY3Rpb25EYXRhKTtcbiAgbGV0IHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICAhcm91dGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUFjdGlvbkRhdGEgbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dFwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gT2JqZWN0LnZhbHVlcygoc3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IHN0YXRlLmFjdGlvbkRhdGEpIHx8IHt9KVswXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGVycm9yLCB3aGljaCBjb3VsZCBiZSBhIGxvYWRlci9hY3Rpb25cbiAqIGVycm9yIG9yIGEgcmVuZGVyIGVycm9yLiAgVGhpcyBpcyBpbnRlbmRlZCB0byBiZSBjYWxsZWQgZnJvbSB5b3VyXG4gKiBFcnJvckJvdW5kYXJ5L2Vycm9yRWxlbWVudCB0byBkaXNwbGF5IGEgcHJvcGVyIGVycm9yIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIHVzZVJvdXRlRXJyb3IoKSB7XG4gIHZhciBfc3RhdGUkZXJyb3JzO1xuICBsZXQgZXJyb3IgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlRXJyb3JDb250ZXh0KTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVFcnJvcik7XG4gIGxldCByb3V0ZUlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUVycm9yKTtcblxuICAvLyBJZiB0aGlzIHdhcyBhIHJlbmRlciBlcnJvciwgd2UgcHV0IGl0IGluIGEgUm91dGVFcnJvciBjb250ZXh0IGluc2lkZVxuICAvLyBvZiBSZW5kZXJFcnJvckJvdW5kYXJ5XG4gIGlmIChlcnJvcikge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuXG4gIC8vIE90aGVyd2lzZSBsb29rIGZvciBlcnJvcnMgZnJvbSBvdXIgZGF0YSByb3V0ZXIgc3RhdGVcbiAgcmV0dXJuIChfc3RhdGUkZXJyb3JzID0gc3RhdGUuZXJyb3JzKSA9PSBudWxsID8gdm9pZCAwIDogX3N0YXRlJGVycm9yc1tyb3V0ZUlkXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBoYXBweS1wYXRoIGRhdGEgZnJvbSB0aGUgbmVhcmVzdCBhbmNlc3RvciA8QXdhaXQgLz4gdmFsdWVcbiAqL1xuZnVuY3Rpb24gdXNlQXN5bmNWYWx1ZSgpIHtcbiAgbGV0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChBd2FpdENvbnRleHQpO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLl9kYXRhO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVycm9yIGZyb20gdGhlIG5lYXJlc3QgYW5jZXN0b3IgPEF3YWl0IC8+IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHVzZUFzeW5jRXJyb3IoKSB7XG4gIGxldCB2YWx1ZSA9IFJlYWN0LnVzZUNvbnRleHQoQXdhaXRDb250ZXh0KTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB2b2lkIDAgOiB2YWx1ZS5fZXJyb3I7XG59XG5sZXQgYmxvY2tlcklkID0gMDtcblxuLyoqXG4gKiBBbGxvdyB0aGUgYXBwbGljYXRpb24gdG8gYmxvY2sgbmF2aWdhdGlvbnMgd2l0aGluIHRoZSBTUEEgYW5kIHByZXNlbnQgdGhlXG4gKiB1c2VyIGEgY29uZmlybWF0aW9uIGRpYWxvZyB0byBjb25maXJtIHRoZSBuYXZpZ2F0aW9uLiAgTW9zdGx5IHVzZWQgdG8gYXZvaWRcbiAqIHVzaW5nIGhhbGYtZmlsbGVkIGZvcm0gZGF0YS4gIFRoaXMgZG9lcyBub3QgaGFuZGxlIGhhcmQtcmVsb2FkcyBvclxuICogY3Jvc3Mtb3JpZ2luIG5hdmlnYXRpb25zLlxuICovXG5mdW5jdGlvbiB1c2VCbG9ja2VyKHNob3VsZEJsb2NrKSB7XG4gIGxldCB7XG4gICAgcm91dGVyLFxuICAgIGJhc2VuYW1lXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VCbG9ja2VyKTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlQmxvY2tlcik7XG4gIGxldCBbYmxvY2tlcktleSwgc2V0QmxvY2tlcktleV0gPSBSZWFjdC51c2VTdGF0ZShcIlwiKTtcbiAgbGV0IGJsb2NrZXJGdW5jdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrKGFyZyA9PiB7XG4gICAgaWYgKHR5cGVvZiBzaG91bGRCbG9jayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm4gISFzaG91bGRCbG9jaztcbiAgICB9XG4gICAgaWYgKGJhc2VuYW1lID09PSBcIi9cIikge1xuICAgICAgcmV0dXJuIHNob3VsZEJsb2NrKGFyZyk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhleSBwcm92aWRlZCB1cyBhIGZ1bmN0aW9uIGFuZCB3ZSd2ZSBnb3QgYW4gYWN0aXZlIGJhc2VuYW1lLCBzdHJpcFxuICAgIC8vIGl0IGZyb20gdGhlIGxvY2F0aW9ucyB3ZSBleHBvc2UgdG8gdGhlIHVzZXIgdG8gbWF0Y2ggdGhlIGJlaGF2aW9yIG9mXG4gICAgLy8gdXNlTG9jYXRpb25cbiAgICBsZXQge1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0gPSBhcmc7XG4gICAgcmV0dXJuIHNob3VsZEJsb2NrKHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbjogX2V4dGVuZHMoe30sIGN1cnJlbnRMb2NhdGlvbiwge1xuICAgICAgICBwYXRobmFtZTogc3RyaXBCYXNlbmFtZShjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUsIGJhc2VuYW1lKSB8fCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pLFxuICAgICAgbmV4dExvY2F0aW9uOiBfZXh0ZW5kcyh7fSwgbmV4dExvY2F0aW9uLCB7XG4gICAgICAgIHBhdGhuYW1lOiBzdHJpcEJhc2VuYW1lKG5leHRMb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IG5leHRMb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSksXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSk7XG4gIH0sIFtiYXNlbmFtZSwgc2hvdWxkQmxvY2tdKTtcblxuICAvLyBUaGlzIGVmZmVjdCBpcyBpbiBjaGFyZ2Ugb2YgYmxvY2tlciBrZXkgYXNzaWdubWVudCBhbmQgZGVsZXRpb24gKHdoaWNoIGlzXG4gIC8vIHRpZ2h0bHkgY291cGxlZCB0byB0aGUga2V5KVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBrZXkgPSBTdHJpbmcoKytibG9ja2VySWQpO1xuICAgIHNldEJsb2NrZXJLZXkoa2V5KTtcbiAgICByZXR1cm4gKCkgPT4gcm91dGVyLmRlbGV0ZUJsb2NrZXIoa2V5KTtcbiAgfSwgW3JvdXRlcl0pO1xuXG4gIC8vIFRoaXMgZWZmZWN0IGhhbmRsZXMgYXNzaWduaW5nIHRoZSBibG9ja2VyRnVuY3Rpb24uICBUaGlzIGlzIHRvIGhhbmRsZVxuICAvLyB1bnN0YWJsZSBibG9ja2VyIGZ1bmN0aW9uIGlkZW50aXRpZXMsIGFuZCBoYXBwZW5zIG9ubHkgYWZ0ZXIgdGhlIHByaW9yXG4gIC8vIGVmZmVjdCBzbyB3ZSBkb24ndCBnZXQgYW4gb3JwaGFuZWQgYmxvY2tlckZ1bmN0aW9uIGluIHRoZSByb3V0ZXIgd2l0aCBhXG4gIC8vIGtleSBvZiBcIlwiLiAgVW50aWwgdGhlbiB3ZSBqdXN0IGhhdmUgdGhlIElETEVfQkxPQ0tFUi5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYmxvY2tlcktleSAhPT0gXCJcIikge1xuICAgICAgcm91dGVyLmdldEJsb2NrZXIoYmxvY2tlcktleSwgYmxvY2tlckZ1bmN0aW9uKTtcbiAgICB9XG4gIH0sIFtyb3V0ZXIsIGJsb2NrZXJLZXksIGJsb2NrZXJGdW5jdGlvbl0pO1xuXG4gIC8vIFByZWZlciB0aGUgYmxvY2tlciBmcm9tIGBzdGF0ZWAgbm90IGByb3V0ZXIuc3RhdGVgIHNpbmNlIERhdGFSb3V0ZXJDb250ZXh0XG4gIC8vIGlzIG1lbW9pemVkIHNvIHRoaXMgZW5zdXJlcyB3ZSB1cGRhdGUgb24gYmxvY2tlciBzdGF0ZSB1cGRhdGVzXG4gIHJldHVybiBibG9ja2VyS2V5ICYmIHN0YXRlLmJsb2NrZXJzLmhhcyhibG9ja2VyS2V5KSA/IHN0YXRlLmJsb2NrZXJzLmdldChibG9ja2VyS2V5KSA6IElETEVfQkxPQ0tFUjtcbn1cblxuLyoqXG4gKiBTdGFibGUgdmVyc2lvbiBvZiB1c2VOYXZpZ2F0ZSB0aGF0IGlzIHVzZWQgd2hlbiB3ZSBhcmUgaW4gdGhlIGNvbnRleHQgb2ZcbiAqIGEgUm91dGVyUHJvdmlkZXIuXG4gKi9cbmZ1bmN0aW9uIHVzZU5hdmlnYXRlU3RhYmxlKCkge1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlTmF2aWdhdGVTdGFibGUpO1xuICBsZXQgaWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZU5hdmlnYXRlU3RhYmxlKTtcbiAgbGV0IGFjdGl2ZVJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGFjdGl2ZVJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgfSk7XG4gIGxldCBuYXZpZ2F0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICh0bywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoYWN0aXZlUmVmLmN1cnJlbnQsIG5hdmlnYXRlRWZmZWN0V2FybmluZykgOiB2b2lkIDA7XG5cbiAgICAvLyBTaG9ydCBjaXJjdWl0IGhlcmUgc2luY2UgaWYgdGhpcyBoYXBwZW5zIG9uIGZpcnN0IHJlbmRlciB0aGUgbmF2aWdhdGVcbiAgICAvLyBpcyB1c2VsZXNzIGJlY2F1c2Ugd2UgaGF2ZW4ndCB3aXJlZCB1cCBvdXIgcm91dGVyIHN1YnNjcmliZXIgeWV0XG4gICAgaWYgKCFhY3RpdmVSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJvdXRlci5uYXZpZ2F0ZSh0byk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvdXRlci5uYXZpZ2F0ZSh0bywgX2V4dGVuZHMoe1xuICAgICAgICBmcm9tUm91dGVJZDogaWRcbiAgICAgIH0sIG9wdGlvbnMpKTtcbiAgICB9XG4gIH0sIFtyb3V0ZXIsIGlkXSk7XG4gIHJldHVybiBuYXZpZ2F0ZTtcbn1cbmNvbnN0IGFscmVhZHlXYXJuZWQgPSB7fTtcbmZ1bmN0aW9uIHdhcm5pbmdPbmNlKGtleSwgY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQgJiYgIWFscmVhZHlXYXJuZWRba2V5XSkge1xuICAgIGFscmVhZHlXYXJuZWRba2V5XSA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIG1lc3NhZ2UpIDogdm9pZCAwO1xuICB9XG59XG5cbi8qKlxuICBXZWJwYWNrICsgUmVhY3QgMTcgZmFpbHMgdG8gY29tcGlsZSBvbiBhbnkgb2YgdGhlIGZvbGxvd2luZyBiZWNhdXNlIHdlYnBhY2tcbiAgY29tcGxhaW5zIHRoYXQgYHN0YXJ0VHJhbnNpdGlvbmAgZG9lc24ndCBleGlzdCBpbiBgUmVhY3RgOlxuICAqIGltcG9ydCB7IHN0YXJ0VHJhbnNpdGlvbiB9IGZyb20gXCJyZWFjdFwiXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3Quc3RhcnRUcmFuc2l0aW9uKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuICAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gZnJvbSBcInJlYWN0XCI7XG4gICAgXCJzdGFydFRyYW5zaXRpb25cIiBpbiBSZWFjdCA/IFJlYWN0W1wic3RhcnRUcmFuc2l0aW9uXCJdKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuXG4gIE1vdmluZyBpdCB0byBhIGNvbnN0YW50IHN1Y2ggYXMgdGhlIGZvbGxvd2luZyBzb2x2ZXMgdGhlIFdlYnBhY2svUmVhY3QgMTcgaXNzdWU6XG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBjb25zdCBTVEFSVF9UUkFOU0lUSU9OID0gXCJzdGFydFRyYW5zaXRpb25cIjtcbiAgICBTVEFSVF9UUkFOU0lUSU9OIGluIFJlYWN0ID8gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgSG93ZXZlciwgdGhhdCBpbnRyb2R1Y2VzIHdlYnBhY2svdGVyc2VyIG1pbmlmaWNhdGlvbiBpc3N1ZXMgaW4gcHJvZHVjdGlvbiBidWlsZHNcbiAgaW4gUmVhY3QgMTggd2hlcmUgbWluaWZpY2F0aW9uL29iZnVzY2F0aW9uIGVuZHMgdXAgcmVtb3ZpbmcgdGhlIGNhbGwgb2ZcbiAgUmVhY3Quc3RhcnRUcmFuc2l0aW9uIGVudGlyZWx5IGZyb20gdGhlIGZpcnN0IGhhbGYgb2YgdGhlIHRlcm5hcnkuICBHcmFiYmluZ1xuICB0aGlzIGV4cG9ydGVkIHJlZmVyZW5jZSBvbmNlIHVwIGZyb250IHJlc29sdmVzIHRoYXQgaXNzdWUuXG5cbiAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVhY3Qtcm91dGVyL2lzc3Vlcy8xMDU3OVxuKi9cbmNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuY29uc3Qgc3RhcnRUcmFuc2l0aW9uSW1wbCA9IFJlYWN0W1NUQVJUX1RSQU5TSVRJT05dO1xuXG4vKipcbiAqIEdpdmVuIGEgUmVtaXggUm91dGVyIGluc3RhbmNlLCByZW5kZXIgdGhlIGFwcHJvcHJpYXRlIFVJXG4gKi9cbmZ1bmN0aW9uIFJvdXRlclByb3ZpZGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBmYWxsYmFja0VsZW1lbnQsXG4gICAgcm91dGVyLFxuICAgIGZ1dHVyZVxuICB9ID0gX3JlZjtcbiAgLy8gTmVlZCB0byB1c2UgYSBsYXlvdXQgZWZmZWN0IGhlcmUgc28gd2UgYXJlIHN1YnNjcmliZWQgZWFybHkgZW5vdWdoIHRvXG4gIC8vIHBpY2sgdXAgb24gYW55IHJlbmRlci1kcml2ZW4gcmVkaXJlY3RzL25hdmlnYXRpb25zICh1c2VFZmZlY3QvPE5hdmlnYXRlPilcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHJvdXRlci5zdGF0ZSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSkgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHJvdXRlci5zdWJzY3JpYmUoc2V0U3RhdGUpLCBbcm91dGVyLCBzZXRTdGF0ZV0pO1xuICBsZXQgbmF2aWdhdG9yID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNyZWF0ZUhyZWY6IHJvdXRlci5jcmVhdGVIcmVmLFxuICAgICAgZW5jb2RlTG9jYXRpb246IHJvdXRlci5lbmNvZGVMb2NhdGlvbixcbiAgICAgIGdvOiBuID0+IHJvdXRlci5uYXZpZ2F0ZShuKSxcbiAgICAgIHB1c2g6ICh0bywgc3RhdGUsIG9wdHMpID0+IHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSksXG4gICAgICByZXBsYWNlOiAodG8sIHN0YXRlLCBvcHRzKSA9PiByb3V0ZXIubmF2aWdhdGUodG8sIHtcbiAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pXG4gICAgfTtcbiAgfSwgW3JvdXRlcl0pO1xuICBsZXQgYmFzZW5hbWUgPSByb3V0ZXIuYmFzZW5hbWUgfHwgXCIvXCI7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICByb3V0ZXIsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogZmFsc2UsXG4gICAgYmFzZW5hbWVcbiAgfSksIFtyb3V0ZXIsIG5hdmlnYXRvciwgYmFzZW5hbWVdKTtcblxuICAvLyBUaGUgZnJhZ21lbnQgYW5kIHtudWxsfSBoZXJlIGFyZSBpbXBvcnRhbnQhICBXZSBuZWVkIHRoZW0gdG8ga2VlcCBSZWFjdCAxOCdzXG4gIC8vIHVzZUlkIGhhcHB5IHdoZW4gd2UgYXJlIHNlcnZlci1yZW5kZXJpbmcgc2luY2Ugd2UgbWF5IGhhdmUgYSA8c2NyaXB0PiBoZXJlXG4gIC8vIGNvbnRhaW5pbmcgdGhlIGh5ZHJhdGVkIHNlcnZlci1zaWRlIHN0YXRpY0NvbnRleHQgKGZyb20gU3RhdGljUm91dGVyUHJvdmlkZXIpLlxuICAvLyB1c2VJZCByZWxpZXMgb24gdGhlIGNvbXBvbmVudCB0cmVlIHN0cnVjdHVyZSB0byBnZW5lcmF0ZSBkZXRlcm1pbmlzdGljIGlkJ3NcbiAgLy8gc28gd2UgbmVlZCB0byBlbnN1cmUgaXQgcmVtYWlucyB0aGUgc2FtZSBvbiB0aGUgY2xpZW50IGV2ZW4gdGhvdWdoXG4gIC8vIHdlIGRvbid0IG5lZWQgdGhlIDxzY3JpcHQ+IHRhZ1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGRhdGFSb3V0ZXJDb250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogc3RhdGVcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuaGlzdG9yeUFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IG5hdmlnYXRvclxuICB9LCBzdGF0ZS5pbml0aWFsaXplZCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXMsIHtcbiAgICByb3V0ZXM6IHJvdXRlci5yb3V0ZXMsXG4gICAgc3RhdGU6IHN0YXRlXG4gIH0pIDogZmFsbGJhY2tFbGVtZW50KSkpLCBudWxsKTtcbn1cbmZ1bmN0aW9uIERhdGFSb3V0ZXMoX3JlZjIpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXMsXG4gICAgc3RhdGVcbiAgfSA9IF9yZWYyO1xuICByZXR1cm4gdXNlUm91dGVzSW1wbChyb3V0ZXMsIHVuZGVmaW5lZCwgc3RhdGUpO1xufVxuLyoqXG4gKiBBIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGFsbCBlbnRyaWVzIGluIG1lbW9yeS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlci1jb21wb25lbnRzL21lbW9yeS1yb3V0ZXJcbiAqL1xuZnVuY3Rpb24gTWVtb3J5Um91dGVyKF9yZWYzKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgaW5pdGlhbEVudHJpZXMsXG4gICAgaW5pdGlhbEluZGV4LFxuICAgIGZ1dHVyZVxuICB9ID0gX3JlZjM7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXgsXG4gICAgICB2NUNvbXBhdDogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSkgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnksIHNldFN0YXRlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cbi8qKlxuICogQ2hhbmdlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBOb3RlOiBUaGlzIEFQSSBpcyBtb3N0bHkgdXNlZnVsIGluIFJlYWN0LkNvbXBvbmVudCBzdWJjbGFzc2VzIHRoYXQgYXJlIG5vdFxuICogYWJsZSB0byB1c2UgaG9va3MuIEluIGZ1bmN0aW9uYWwgY29tcG9uZW50cywgd2UgcmVjb21tZW5kIHlvdSB1c2UgdGhlXG4gKiBgdXNlTmF2aWdhdGVgIGhvb2sgaW5zdGVhZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gTmF2aWdhdGUoX3JlZjQpIHtcbiAgbGV0IHtcbiAgICB0byxcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHJlbGF0aXZlXG4gIH0gPSBfcmVmNDtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2ZcbiAgLy8gdGhlIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCI8TmF2aWdhdGU+IG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKCFSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KS5zdGF0aWMsIFwiPE5hdmlnYXRlPiBtdXN0IG5vdCBiZSB1c2VkIG9uIHRoZSBpbml0aWFsIHJlbmRlciBpbiBhIDxTdGF0aWNSb3V0ZXI+LiBcIiArIFwiVGhpcyBpcyBhIG5vLW9wLCBidXQgeW91IHNob3VsZCBtb2RpZnkgeW91ciBjb2RlIHNvIHRoZSA8TmF2aWdhdGU+IGlzIFwiICsgXCJvbmx5IGV2ZXIgcmVuZGVyZWQgaW4gcmVzcG9uc2UgdG8gc29tZSB1c2VyIGludGVyYWN0aW9uIG9yIHN0YXRlIGNoYW5nZS5cIikgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuXG4gIC8vIFJlc29sdmUgdGhlIHBhdGggb3V0c2lkZSBvZiB0aGUgZWZmZWN0IHNvIHRoYXQgd2hlbiBlZmZlY3RzIHJ1biB0d2ljZSBpblxuICAvLyBTdHJpY3RNb2RlIHRoZXkgbmF2aWdhdGUgdG8gdGhlIHNhbWUgcGxhY2VcbiAgbGV0IHBhdGggPSByZXNvbHZlVG8odG8sIFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKS5tYXAobWF0Y2ggPT4gbWF0Y2gucGF0aG5hbWVCYXNlKSwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmUgPT09IFwicGF0aFwiKTtcbiAgbGV0IGpzb25QYXRoID0gSlNPTi5zdHJpbmdpZnkocGF0aCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiBuYXZpZ2F0ZShKU09OLnBhcnNlKGpzb25QYXRoKSwge1xuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgcmVsYXRpdmVcbiAgfSksIFtuYXZpZ2F0ZSwganNvblBhdGgsIHJlbGF0aXZlLCByZXBsYWNlLCBzdGF0ZV0pO1xuICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogUmVuZGVycyB0aGUgY2hpbGQgcm91dGUncyBlbGVtZW50LCBpZiB0aGVyZSBpcyBvbmUuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL291dGxldFxuICovXG5mdW5jdGlvbiBPdXRsZXQocHJvcHMpIHtcbiAgcmV0dXJuIHVzZU91dGxldChwcm9wcy5jb250ZXh0KTtcbn1cbi8qKlxuICogRGVjbGFyZXMgYW4gZWxlbWVudCB0aGF0IHNob3VsZCBiZSByZW5kZXJlZCBhdCBhIGNlcnRhaW4gVVJMIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL3JvdXRlXG4gKi9cbmZ1bmN0aW9uIFJvdXRlKF9wcm9wcykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIkEgPFJvdXRlPiBpcyBvbmx5IGV2ZXIgdG8gYmUgdXNlZCBhcyB0aGUgY2hpbGQgb2YgPFJvdXRlcz4gZWxlbWVudCwgXCIgKyBcIm5ldmVyIHJlbmRlcmVkIGRpcmVjdGx5LiBQbGVhc2Ugd3JhcCB5b3VyIDxSb3V0ZT4gaW4gYSA8Um91dGVzPi5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA7XG59XG4vKipcbiAqIFByb3ZpZGVzIGxvY2F0aW9uIGNvbnRleHQgZm9yIHRoZSByZXN0IG9mIHRoZSBhcHAuXG4gKlxuICogTm90ZTogWW91IHVzdWFsbHkgd29uJ3QgcmVuZGVyIGEgPFJvdXRlcj4gZGlyZWN0bHkuIEluc3RlYWQsIHlvdSdsbCByZW5kZXIgYVxuICogcm91dGVyIHRoYXQgaXMgbW9yZSBzcGVjaWZpYyB0byB5b3VyIGVudmlyb25tZW50IHN1Y2ggYXMgYSA8QnJvd3NlclJvdXRlcj5cbiAqIGluIHdlYiBicm93c2VycyBvciBhIDxTdGF0aWNSb3V0ZXI+IGZvciBzZXJ2ZXIgcmVuZGVyaW5nLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVyLWNvbXBvbmVudHMvcm91dGVyXG4gKi9cbmZ1bmN0aW9uIFJvdXRlcihfcmVmNSkge1xuICBsZXQge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZVByb3AgPSBcIi9cIixcbiAgICBjaGlsZHJlbiA9IG51bGwsXG4gICAgbG9jYXRpb246IGxvY2F0aW9uUHJvcCxcbiAgICBuYXZpZ2F0aW9uVHlwZSA9IEFjdGlvbi5Qb3AsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogc3RhdGljUHJvcCA9IGZhbHNlXG4gIH0gPSBfcmVmNTtcbiAgISF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCByZW5kZXIgYSA8Um91dGVyPiBpbnNpZGUgYW5vdGhlciA8Um91dGVyPi5cIiArIFwiIFlvdSBzaG91bGQgbmV2ZXIgaGF2ZSBtb3JlIHRoYW4gb25lIGluIHlvdXIgYXBwLlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIC8vIFByZXNlcnZlIHRyYWlsaW5nIHNsYXNoZXMgb24gYmFzZW5hbWUsIHNvIHdlIGNhbiBsZXQgdGhlIHVzZXIgY29udHJvbFxuICAvLyB0aGUgZW5mb3JjZW1lbnQgb2YgdHJhaWxpbmcgc2xhc2hlcyB0aHJvdWdob3V0IHRoZSBhcHBcbiAgbGV0IGJhc2VuYW1lID0gYmFzZW5hbWVQcm9wLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpO1xuICBsZXQgbmF2aWdhdGlvbkNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogc3RhdGljUHJvcFxuICB9KSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHN0YXRpY1Byb3BdKTtcbiAgaWYgKHR5cGVvZiBsb2NhdGlvblByb3AgPT09IFwic3RyaW5nXCIpIHtcbiAgICBsb2NhdGlvblByb3AgPSBwYXJzZVBhdGgobG9jYXRpb25Qcm9wKTtcbiAgfVxuICBsZXQge1xuICAgIHBhdGhuYW1lID0gXCIvXCIsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIixcbiAgICBzdGF0ZSA9IG51bGwsXG4gICAga2V5ID0gXCJkZWZhdWx0XCJcbiAgfSA9IGxvY2F0aW9uUHJvcDtcbiAgbGV0IGxvY2F0aW9uQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGxldCB0cmFpbGluZ1BhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShwYXRobmFtZSwgYmFzZW5hbWUpO1xuICAgIGlmICh0cmFpbGluZ1BhdGhuYW1lID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgbG9jYXRpb246IHtcbiAgICAgICAgcGF0aG5hbWU6IHRyYWlsaW5nUGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCxcbiAgICAgICAgaGFzaCxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIGtleVxuICAgICAgfSxcbiAgICAgIG5hdmlnYXRpb25UeXBlXG4gICAgfTtcbiAgfSwgW2Jhc2VuYW1lLCBwYXRobmFtZSwgc2VhcmNoLCBoYXNoLCBzdGF0ZSwga2V5LCBuYXZpZ2F0aW9uVHlwZV0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhsb2NhdGlvbkNvbnRleHQgIT0gbnVsbCwgXCI8Um91dGVyIGJhc2VuYW1lPVxcXCJcIiArIGJhc2VuYW1lICsgXCJcXFwiPiBpcyBub3QgYWJsZSB0byBtYXRjaCB0aGUgVVJMIFwiICsgKFwiXFxcIlwiICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoICsgXCJcXFwiIGJlY2F1c2UgaXQgZG9lcyBub3Qgc3RhcnQgd2l0aCB0aGUgXCIpICsgXCJiYXNlbmFtZSwgc28gdGhlIDxSb3V0ZXI+IHdvbid0IHJlbmRlciBhbnl0aGluZy5cIikgOiB2b2lkIDA7XG4gIGlmIChsb2NhdGlvbkNvbnRleHQgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChOYXZpZ2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBuYXZpZ2F0aW9uQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMb2NhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgdmFsdWU6IGxvY2F0aW9uQ29udGV4dFxuICB9KSk7XG59XG4vKipcbiAqIEEgY29udGFpbmVyIGZvciBhIG5lc3RlZCB0cmVlIG9mIDxSb3V0ZT4gZWxlbWVudHMgdGhhdCByZW5kZXJzIHRoZSBicmFuY2hcbiAqIHRoYXQgYmVzdCBtYXRjaGVzIHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vY29tcG9uZW50cy9yb3V0ZXNcbiAqL1xuZnVuY3Rpb24gUm91dGVzKF9yZWY2KSB7XG4gIGxldCB7XG4gICAgY2hpbGRyZW4sXG4gICAgbG9jYXRpb25cbiAgfSA9IF9yZWY2O1xuICByZXR1cm4gdXNlUm91dGVzKGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihjaGlsZHJlbiksIGxvY2F0aW9uKTtcbn1cbi8qKlxuICogQ29tcG9uZW50IHRvIHVzZSBmb3IgcmVuZGVyaW5nIGxhemlseSBsb2FkZWQgZGF0YSBmcm9tIHJldHVybmluZyBkZWZlcigpXG4gKiBpbiBhIGxvYWRlciBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBBd2FpdChfcmVmNykge1xuICBsZXQge1xuICAgIGNoaWxkcmVuLFxuICAgIGVycm9yRWxlbWVudCxcbiAgICByZXNvbHZlXG4gIH0gPSBfcmVmNztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEF3YWl0RXJyb3JCb3VuZGFyeSwge1xuICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgZXJyb3JFbGVtZW50OiBlcnJvckVsZW1lbnRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVzb2x2ZUF3YWl0LCBudWxsLCBjaGlsZHJlbikpO1xufVxudmFyIEF3YWl0UmVuZGVyU3RhdHVzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChBd2FpdFJlbmRlclN0YXR1cykge1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcInBlbmRpbmdcIl0gPSAwXSA9IFwicGVuZGluZ1wiO1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcInN1Y2Nlc3NcIl0gPSAxXSA9IFwic3VjY2Vzc1wiO1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcImVycm9yXCJdID0gMl0gPSBcImVycm9yXCI7XG4gIHJldHVybiBBd2FpdFJlbmRlclN0YXR1cztcbn0oQXdhaXRSZW5kZXJTdGF0dXMgfHwge30pO1xuY29uc3QgbmV2ZXJTZXR0bGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKCgpID0+IHt9KTtcbmNsYXNzIEF3YWl0RXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBlcnJvcjogbnVsbFxuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvclxuICAgIH07XG4gIH1cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGVycm9ySW5mbykge1xuICAgIGNvbnNvbGUuZXJyb3IoXCI8QXdhaXQ+IGNhdWdodCB0aGUgZm9sbG93aW5nIGVycm9yIGR1cmluZyByZW5kZXJcIiwgZXJyb3IsIGVycm9ySW5mbyk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGxldCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGVycm9yRWxlbWVudCxcbiAgICAgIHJlc29sdmVcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBsZXQgcHJvbWlzZSA9IG51bGw7XG4gICAgbGV0IHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7XG4gICAgaWYgKCEocmVzb2x2ZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICAvLyBEaWRuJ3QgZ2V0IGEgcHJvbWlzZSAtIHByb3ZpZGUgYXMgYSByZXNvbHZlZCBwcm9taXNlXG4gICAgICBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2RhdGFcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHJlc29sdmVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5lcnJvcikge1xuICAgICAgLy8gQ2F1Z2h0IGEgcmVuZGVyIGVycm9yLCBwcm92aWRlIGl0IGFzIGEgcmVqZWN0ZWQgcHJvbWlzZVxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3I7XG4gICAgICBsZXQgcmVuZGVyRXJyb3IgPSB0aGlzLnN0YXRlLmVycm9yO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVqZWN0KCkuY2F0Y2goKCkgPT4ge30pOyAvLyBBdm9pZCB1bmhhbmRsZWQgcmVqZWN0aW9uIHdhcm5pbmdzXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfdHJhY2tlZFwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gdHJ1ZVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHJlbmRlckVycm9yXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHJlc29sdmUuX3RyYWNrZWQpIHtcbiAgICAgIC8vIEFscmVhZHkgdHJhY2tlZCBwcm9taXNlIC0gY2hlY2sgY29udGVudHNcbiAgICAgIHByb21pc2UgPSByZXNvbHZlO1xuICAgICAgc3RhdHVzID0gcHJvbWlzZS5fZXJyb3IgIT09IHVuZGVmaW5lZCA/IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yIDogcHJvbWlzZS5fZGF0YSAhPT0gdW5kZWZpbmVkID8gQXdhaXRSZW5kZXJTdGF0dXMuc3VjY2VzcyA6IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJhdyAodW50cmFja2VkKSBwcm9taXNlIC0gdHJhY2sgaXRcbiAgICAgIHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfdHJhY2tlZFwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gdHJ1ZVxuICAgICAgfSk7XG4gICAgICBwcm9taXNlID0gcmVzb2x2ZS50aGVuKGRhdGEgPT4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc29sdmUsIFwiX2RhdGFcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGRhdGFcbiAgICAgIH0pLCBlcnJvciA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGVycm9yXG4gICAgICB9KSk7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yICYmIHByb21pc2UuX2Vycm9yIGluc3RhbmNlb2YgQWJvcnRlZERlZmVycmVkRXJyb3IpIHtcbiAgICAgIC8vIEZyZWV6ZSB0aGUgVUkgYnkgdGhyb3dpbmcgYSBuZXZlciByZXNvbHZlZCBwcm9taXNlXG4gICAgICB0aHJvdyBuZXZlclNldHRsZWRQcm9taXNlO1xuICAgIH1cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvciAmJiAhZXJyb3JFbGVtZW50KSB7XG4gICAgICAvLyBObyBlcnJvckVsZW1lbnQsIHRocm93IHRvIHRoZSBuZWFyZXN0IHJvdXRlLWxldmVsIGVycm9yIGJvdW5kYXJ5XG4gICAgICB0aHJvdyBwcm9taXNlLl9lcnJvcjtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IpIHtcbiAgICAgIC8vIFJlbmRlciB2aWEgb3VyIGVycm9yRWxlbWVudFxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEF3YWl0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvbWlzZSxcbiAgICAgICAgY2hpbGRyZW46IGVycm9yRWxlbWVudFxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLnN1Y2Nlc3MpIHtcbiAgICAgIC8vIFJlbmRlciBjaGlsZHJlbiB3aXRoIHJlc29sdmVkIHZhbHVlXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQXdhaXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9taXNlLFxuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFRocm93IHRvIHRoZSBzdXNwZW5zZSBib3VuZGFyeVxuICAgIHRocm93IHByb21pc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogSW5kaXJlY3Rpb24gdG8gbGV2ZXJhZ2UgdXNlQXN5bmNWYWx1ZSBmb3IgYSByZW5kZXItcHJvcCBBUEkgb24gPEF3YWl0PlxuICovXG5mdW5jdGlvbiBSZXNvbHZlQXdhaXQoX3JlZjgpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlblxuICB9ID0gX3JlZjg7XG4gIGxldCBkYXRhID0gdXNlQXN5bmNWYWx1ZSgpO1xuICBsZXQgdG9SZW5kZXIgPSB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IGNoaWxkcmVuKGRhdGEpIDogY2hpbGRyZW47XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgdG9SZW5kZXIpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBVVElMU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIENyZWF0ZXMgYSByb3V0ZSBjb25maWcgZnJvbSBhIFJlYWN0IFwiY2hpbGRyZW5cIiBvYmplY3QsIHdoaWNoIGlzIHVzdWFsbHlcbiAqIGVpdGhlciBhIGA8Um91dGU+YCBlbGVtZW50IG9yIGFuIGFycmF5IG9mIHRoZW0uIFVzZWQgaW50ZXJuYWxseSBieVxuICogYDxSb3V0ZXM+YCB0byBjcmVhdGUgYSByb3V0ZSBjb25maWcgZnJvbSBpdHMgY2hpbGRyZW4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9jcmVhdGUtcm91dGVzLWZyb20tY2hpbGRyZW5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuLCBwYXJlbnRQYXRoKSB7XG4gIGlmIChwYXJlbnRQYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRQYXRoID0gW107XG4gIH1cbiAgbGV0IHJvdXRlcyA9IFtdO1xuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCAoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgIC8vIElnbm9yZSBub24tZWxlbWVudHMuIFRoaXMgYWxsb3dzIHBlb3BsZSB0byBtb3JlIGVhc2lseSBpbmxpbmVcbiAgICAgIC8vIGNvbmRpdGlvbmFscyBpbiB0aGVpciByb3V0ZSBjb25maWcuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB0cmVlUGF0aCA9IFsuLi5wYXJlbnRQYXRoLCBpbmRleF07XG4gICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gUmVhY3QuRnJhZ21lbnQpIHtcbiAgICAgIC8vIFRyYW5zcGFyZW50bHkgc3VwcG9ydCBSZWFjdC5GcmFnbWVudCBhbmQgaXRzIGNoaWxkcmVuLlxuICAgICAgcm91dGVzLnB1c2guYXBwbHkocm91dGVzLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oZWxlbWVudC5wcm9wcy5jaGlsZHJlbiwgdHJlZVBhdGgpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgIShlbGVtZW50LnR5cGUgPT09IFJvdXRlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiW1wiICsgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09IFwic3RyaW5nXCIgPyBlbGVtZW50LnR5cGUgOiBlbGVtZW50LnR5cGUubmFtZSkgKyBcIl0gaXMgbm90IGEgPFJvdXRlPiBjb21wb25lbnQuIEFsbCBjb21wb25lbnQgY2hpbGRyZW4gb2YgPFJvdXRlcz4gbXVzdCBiZSBhIDxSb3V0ZT4gb3IgPFJlYWN0LkZyYWdtZW50PlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICEoIWVsZW1lbnQucHJvcHMuaW5kZXggfHwgIWVsZW1lbnQucHJvcHMuY2hpbGRyZW4pID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJBbiBpbmRleCByb3V0ZSBjYW5ub3QgaGF2ZSBjaGlsZCByb3V0ZXMuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgbGV0IHJvdXRlID0ge1xuICAgICAgaWQ6IGVsZW1lbnQucHJvcHMuaWQgfHwgdHJlZVBhdGguam9pbihcIi1cIiksXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBlbGVtZW50LnByb3BzLmNhc2VTZW5zaXRpdmUsXG4gICAgICBlbGVtZW50OiBlbGVtZW50LnByb3BzLmVsZW1lbnQsXG4gICAgICBDb21wb25lbnQ6IGVsZW1lbnQucHJvcHMuQ29tcG9uZW50LFxuICAgICAgaW5kZXg6IGVsZW1lbnQucHJvcHMuaW5kZXgsXG4gICAgICBwYXRoOiBlbGVtZW50LnByb3BzLnBhdGgsXG4gICAgICBsb2FkZXI6IGVsZW1lbnQucHJvcHMubG9hZGVyLFxuICAgICAgYWN0aW9uOiBlbGVtZW50LnByb3BzLmFjdGlvbixcbiAgICAgIGVycm9yRWxlbWVudDogZWxlbWVudC5wcm9wcy5lcnJvckVsZW1lbnQsXG4gICAgICBFcnJvckJvdW5kYXJ5OiBlbGVtZW50LnByb3BzLkVycm9yQm91bmRhcnksXG4gICAgICBoYXNFcnJvckJvdW5kYXJ5OiBlbGVtZW50LnByb3BzLkVycm9yQm91bmRhcnkgIT0gbnVsbCB8fCBlbGVtZW50LnByb3BzLmVycm9yRWxlbWVudCAhPSBudWxsLFxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZTogZWxlbWVudC5wcm9wcy5zaG91bGRSZXZhbGlkYXRlLFxuICAgICAgaGFuZGxlOiBlbGVtZW50LnByb3BzLmhhbmRsZSxcbiAgICAgIGxhenk6IGVsZW1lbnQucHJvcHMubGF6eVxuICAgIH07XG4gICAgaWYgKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgIHJvdXRlLmNoaWxkcmVuID0gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sIHRyZWVQYXRoKTtcbiAgICB9XG4gICAgcm91dGVzLnB1c2gocm91dGUpO1xuICB9KTtcbiAgcmV0dXJuIHJvdXRlcztcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSByZXN1bHQgb2YgYG1hdGNoUm91dGVzKClgIGludG8gYSBSZWFjdCBlbGVtZW50LlxuICovXG5mdW5jdGlvbiByZW5kZXJNYXRjaGVzKG1hdGNoZXMpIHtcbiAgcmV0dXJuIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMpO1xufVxuXG5mdW5jdGlvbiBtYXBSb3V0ZVByb3BlcnRpZXMocm91dGUpIHtcbiAgbGV0IHVwZGF0ZXMgPSB7XG4gICAgLy8gTm90ZTogdGhpcyBjaGVjayBhbHNvIG9jY3VycyBpbiBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4gc28gdXBkYXRlXG4gICAgLy8gdGhlcmUgaWYgeW91IGNoYW5nZSB0aGlzIC0tIHBsZWFzZSBhbmQgdGhhbmsgeW91IVxuICAgIGhhc0Vycm9yQm91bmRhcnk6IHJvdXRlLkVycm9yQm91bmRhcnkgIT0gbnVsbCB8fCByb3V0ZS5lcnJvckVsZW1lbnQgIT0gbnVsbFxuICB9O1xuICBpZiAocm91dGUuQ29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKHJvdXRlLmVsZW1lbnQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgaW5jbHVkZSBib3RoIGBDb21wb25lbnRgIGFuZCBgZWxlbWVudGAgb24geW91ciByb3V0ZSAtIFwiICsgXCJgQ29tcG9uZW50YCB3aWxsIGJlIHVzZWQuXCIpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHVwZGF0ZXMsIHtcbiAgICAgIGVsZW1lbnQ6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KHJvdXRlLkNvbXBvbmVudCksXG4gICAgICBDb21wb25lbnQ6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9XG4gIGlmIChyb3V0ZS5FcnJvckJvdW5kYXJ5KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKHJvdXRlLmVycm9yRWxlbWVudCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCBpbmNsdWRlIGJvdGggYEVycm9yQm91bmRhcnlgIGFuZCBgZXJyb3JFbGVtZW50YCBvbiB5b3VyIHJvdXRlIC0gXCIgKyBcImBFcnJvckJvdW5kYXJ5YCB3aWxsIGJlIHVzZWQuXCIpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHVwZGF0ZXMsIHtcbiAgICAgIGVycm9yRWxlbWVudDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQocm91dGUuRXJyb3JCb3VuZGFyeSksXG4gICAgICBFcnJvckJvdW5kYXJ5OiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdXBkYXRlcztcbn1cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeVJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgZnV0dXJlOiBfZXh0ZW5kcyh7fSwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mdXR1cmUsIHtcbiAgICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogdHJ1ZVxuICAgIH0pLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXM6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXg6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaW5pdGlhbEluZGV4XG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhLFxuICAgIHJvdXRlcyxcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXNcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufVxuXG5leHBvcnQgeyBBd2FpdCwgTWVtb3J5Um91dGVyLCBOYXZpZ2F0ZSwgT3V0bGV0LCBSb3V0ZSwgUm91dGVyLCBSb3V0ZXJQcm92aWRlciwgUm91dGVzLCBEYXRhUm91dGVyQ29udGV4dCBhcyBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQsIERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQgYXMgVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsIExvY2F0aW9uQ29udGV4dCBhcyBVTlNBRkVfTG9jYXRpb25Db250ZXh0LCBOYXZpZ2F0aW9uQ29udGV4dCBhcyBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIFJvdXRlQ29udGV4dCBhcyBVTlNBRkVfUm91dGVDb250ZXh0LCBtYXBSb3V0ZVByb3BlcnRpZXMgYXMgVU5TQUZFX21hcFJvdXRlUHJvcGVydGllcywgdXNlUm91dGVJZCBhcyBVTlNBRkVfdXNlUm91dGVJZCwgdXNlUm91dGVzSW1wbCBhcyBVTlNBRkVfdXNlUm91dGVzSW1wbCwgY3JlYXRlTWVtb3J5Um91dGVyLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4sIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiBhcyBjcmVhdGVSb3V0ZXNGcm9tRWxlbWVudHMsIHJlbmRlck1hdGNoZXMsIHVzZUJsb2NrZXIgYXMgdW5zdGFibGVfdXNlQmxvY2tlciwgdXNlQWN0aW9uRGF0YSwgdXNlQXN5bmNFcnJvciwgdXNlQXN5bmNWYWx1ZSwgdXNlSHJlZiwgdXNlSW5Sb3V0ZXJDb250ZXh0LCB1c2VMb2FkZXJEYXRhLCB1c2VMb2NhdGlvbiwgdXNlTWF0Y2gsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRlLCB1c2VOYXZpZ2F0aW9uLCB1c2VOYXZpZ2F0aW9uVHlwZSwgdXNlT3V0bGV0LCB1c2VPdXRsZXRDb250ZXh0LCB1c2VQYXJhbXMsIHVzZVJlc29sdmVkUGF0aCwgdXNlUmV2YWxpZGF0b3IsIHVzZVJvdXRlRXJyb3IsIHVzZVJvdXRlTG9hZGVyRGF0YSwgdXNlUm91dGVzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIi8qKlxuICogUmVhY3QgUm91dGVyIERPTSB2Ni4xNS4wXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFVOU0FGRV9tYXBSb3V0ZVByb3BlcnRpZXMsIFJvdXRlciwgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCB1c2VIcmVmLCB1c2VSZXNvbHZlZFBhdGgsIHVzZUxvY2F0aW9uLCBVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCwgdXNlTmF2aWdhdGUsIGNyZWF0ZVBhdGgsIFVOU0FGRV91c2VSb3V0ZUlkLCBVTlNBRkVfUm91dGVDb250ZXh0LCB1c2VNYXRjaGVzLCB1c2VOYXZpZ2F0aW9uLCB1bnN0YWJsZV91c2VCbG9ja2VyLCBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEF3YWl0LCBNZW1vcnlSb3V0ZXIsIE5hdmlnYXRlLCBOYXZpZ2F0aW9uVHlwZSwgT3V0bGV0LCBSb3V0ZSwgUm91dGVyLCBSb3V0ZXJQcm92aWRlciwgUm91dGVzLCBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQsIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LCBVTlNBRkVfTG9jYXRpb25Db250ZXh0LCBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIFVOU0FGRV91c2VSb3V0ZUlkLCBjcmVhdGVNZW1vcnlSb3V0ZXIsIGNyZWF0ZVBhdGgsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiwgY3JlYXRlUm91dGVzRnJvbUVsZW1lbnRzLCBkZWZlciwgZ2VuZXJhdGVQYXRoLCBpc1JvdXRlRXJyb3JSZXNwb25zZSwganNvbiwgbWF0Y2hQYXRoLCBtYXRjaFJvdXRlcywgcGFyc2VQYXRoLCByZWRpcmVjdCwgcmVkaXJlY3REb2N1bWVudCwgcmVuZGVyTWF0Y2hlcywgcmVzb2x2ZVBhdGgsIHVuc3RhYmxlX3VzZUJsb2NrZXIsIHVzZUFjdGlvbkRhdGEsIHVzZUFzeW5jRXJyb3IsIHVzZUFzeW5jVmFsdWUsIHVzZUhyZWYsIHVzZUluUm91dGVyQ29udGV4dCwgdXNlTG9hZGVyRGF0YSwgdXNlTG9jYXRpb24sIHVzZU1hdGNoLCB1c2VNYXRjaGVzLCB1c2VOYXZpZ2F0ZSwgdXNlTmF2aWdhdGlvbiwgdXNlTmF2aWdhdGlvblR5cGUsIHVzZU91dGxldCwgdXNlT3V0bGV0Q29udGV4dCwgdXNlUGFyYW1zLCB1c2VSZXNvbHZlZFBhdGgsIHVzZVJldmFsaWRhdG9yLCB1c2VSb3V0ZUVycm9yLCB1c2VSb3V0ZUxvYWRlckRhdGEsIHVzZVJvdXRlcyB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgeyBzdHJpcEJhc2VuYW1lLCBVTlNBRkVfd2FybmluZywgY3JlYXRlUm91dGVyLCBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIEVycm9yUmVzcG9uc2UsIFVOU0FGRV9pbnZhcmlhbnQsIGpvaW5QYXRocyB9IGZyb20gJ0ByZW1peC1ydW4vcm91dGVyJztcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5jb25zdCBkZWZhdWx0TWV0aG9kID0gXCJnZXRcIjtcbmNvbnN0IGRlZmF1bHRFbmNUeXBlID0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIjtcbmZ1bmN0aW9uIGlzSHRtbEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0LnRhZ05hbWUgPT09IFwic3RyaW5nXCI7XG59XG5mdW5jdGlvbiBpc0J1dHRvbkVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJidXR0b25cIjtcbn1cbmZ1bmN0aW9uIGlzRm9ybUVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmb3JtXCI7XG59XG5mdW5jdGlvbiBpc0lucHV0RWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIGlzSHRtbEVsZW1lbnQob2JqZWN0KSAmJiBvYmplY3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCI7XG59XG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuZnVuY3Rpb24gc2hvdWxkUHJvY2Vzc0xpbmtDbGljayhldmVudCwgdGFyZ2V0KSB7XG4gIHJldHVybiBldmVudC5idXR0b24gPT09IDAgJiYgKFxuICAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiZcbiAgLy8gTGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gSWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gaW5pdGlhbGl6ZXIuXG4gKlxuICogVGhpcyBpcyBpZGVudGljYWwgdG8gYG5ldyBVUkxTZWFyY2hQYXJhbXMoaW5pdClgIGV4Y2VwdCBpdCBhbHNvXG4gKiBzdXBwb3J0cyBhcnJheXMgYXMgdmFsdWVzIGluIHRoZSBvYmplY3QgZm9ybSBvZiB0aGUgaW5pdGlhbGl6ZXJcbiAqIGluc3RlYWQgb2YganVzdCBzdHJpbmdzLiBUaGlzIGlzIGNvbnZlbmllbnQgd2hlbiB5b3UgbmVlZCBtdWx0aXBsZVxuICogdmFsdWVzIGZvciBhIGdpdmVuIGtleSwgYnV0IGRvbid0IHdhbnQgdG8gdXNlIGFuIGFycmF5IGluaXRpYWxpemVyLlxuICpcbiAqIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mOlxuICpcbiAqICAgbGV0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoW1xuICogICAgIFsnc29ydCcsICduYW1lJ10sXG4gKiAgICAgWydzb3J0JywgJ3ByaWNlJ11cbiAqICAgXSk7XG4gKlxuICogeW91IGNhbiBkbzpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMoe1xuICogICAgIHNvcnQ6IFsnbmFtZScsICdwcmljZSddXG4gKiAgIH0pO1xuICovXG5mdW5jdGlvbiBjcmVhdGVTZWFyY2hQYXJhbXMoaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IFwiXCI7XG4gIH1cbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXModHlwZW9mIGluaXQgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShpbml0KSB8fCBpbml0IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zID8gaW5pdCA6IE9iamVjdC5rZXlzKGluaXQpLnJlZHVjZSgobWVtbywga2V5KSA9PiB7XG4gICAgbGV0IHZhbHVlID0gaW5pdFtrZXldO1xuICAgIHJldHVybiBtZW1vLmNvbmNhdChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcCh2ID0+IFtrZXksIHZdKSA6IFtba2V5LCB2YWx1ZV1dKTtcbiAgfSwgW10pKTtcbn1cbmZ1bmN0aW9uIGdldFNlYXJjaFBhcmFtc0ZvckxvY2F0aW9uKGxvY2F0aW9uU2VhcmNoLCBkZWZhdWx0U2VhcmNoUGFyYW1zKSB7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMobG9jYXRpb25TZWFyY2gpO1xuICBpZiAoZGVmYXVsdFNlYXJjaFBhcmFtcykge1xuICAgIC8vIFVzZSBgZGVmYXVsdFNlYXJjaFBhcmFtcy5mb3JFYWNoKC4uLilgIGhlcmUgaW5zdGVhZCBvZiBpdGVyYXRpbmcgb2ZcbiAgICAvLyBgZGVmYXVsdFNlYXJjaFBhcmFtcy5rZXlzKClgIHRvIHdvcmstYXJvdW5kIGEgYnVnIGluIEZpcmVmb3ggcmVsYXRlZCB0b1xuICAgIC8vIHdlYiBleHRlbnNpb25zLiBSZWxldmFudCBCdWd6aWxsYSB0aWNrZXRzOlxuICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTE0MTQ2MDJcbiAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDIzOTg0XG4gICAgZGVmYXVsdFNlYXJjaFBhcmFtcy5mb3JFYWNoKChfLCBrZXkpID0+IHtcbiAgICAgIGlmICghc2VhcmNoUGFyYW1zLmhhcyhrZXkpKSB7XG4gICAgICAgIGRlZmF1bHRTZWFyY2hQYXJhbXMuZ2V0QWxsKGtleSkuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICAgICAgc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHNlYXJjaFBhcmFtcztcbn1cbi8vIE9uZS10aW1lIGNoZWNrIGZvciBzdWJtaXR0ZXIgc3VwcG9ydFxubGV0IF9mb3JtRGF0YVN1cHBvcnRzU3VibWl0dGVyID0gbnVsbDtcbmZ1bmN0aW9uIGlzRm9ybURhdGFTdWJtaXR0ZXJTdXBwb3J0ZWQoKSB7XG4gIGlmIChfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciA9PT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICBuZXcgRm9ybURhdGEoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIiksXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGlmIEZvcm1EYXRhIHN1cHBvcnRzIHRoZSBzdWJtaXR0ZXIgcGFyYW1ldGVyLCB0aGlzIHdpbGwgdGhyb3dcbiAgICAgIDApO1xuICAgICAgX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXIgPSBmYWxzZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlcjtcbn1cbmNvbnN0IHN1cHBvcnRlZEZvcm1FbmNUeXBlcyA9IG5ldyBTZXQoW1wiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsIFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiLCBcInRleHQvcGxhaW5cIl0pO1xuZnVuY3Rpb24gZ2V0Rm9ybUVuY1R5cGUoZW5jVHlwZSkge1xuICBpZiAoZW5jVHlwZSAhPSBudWxsICYmICFzdXBwb3J0ZWRGb3JtRW5jVHlwZXMuaGFzKGVuY1R5cGUpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiXFxcIlwiICsgZW5jVHlwZSArIFwiXFxcIiBpcyBub3QgYSB2YWxpZCBgZW5jVHlwZWAgZm9yIGA8Rm9ybT5gL2A8ZmV0Y2hlci5Gb3JtPmAgXCIgKyAoXCJhbmQgd2lsbCBkZWZhdWx0IHRvIFxcXCJcIiArIGRlZmF1bHRFbmNUeXBlICsgXCJcXFwiXCIpKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gZW5jVHlwZTtcbn1cbmZ1bmN0aW9uIGdldEZvcm1TdWJtaXNzaW9uSW5mbyh0YXJnZXQsIGJhc2VuYW1lKSB7XG4gIGxldCBtZXRob2Q7XG4gIGxldCBhY3Rpb247XG4gIGxldCBlbmNUeXBlO1xuICBsZXQgZm9ybURhdGE7XG4gIGxldCBib2R5O1xuICBpZiAoaXNGb3JtRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgLy8gV2hlbiBncmFiYmluZyB0aGUgYWN0aW9uIGZyb20gdGhlIGVsZW1lbnQsIGl0IHdpbGwgaGF2ZSBoYWQgdGhlIGJhc2VuYW1lXG4gICAgLy8gcHJlZml4ZWQgdG8gZW5zdXJlIG5vbi1KUyBzY2VuYXJpb3Mgd29yaywgc28gc3RyaXAgaXQgc2luY2Ugd2UnbGxcbiAgICAvLyByZS1wcmVmaXggaW4gdGhlIHJvdXRlclxuICAgIGxldCBhdHRyID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImFjdGlvblwiKTtcbiAgICBhY3Rpb24gPSBhdHRyID8gc3RyaXBCYXNlbmFtZShhdHRyLCBiYXNlbmFtZSkgOiBudWxsO1xuICAgIG1ldGhvZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJtZXRob2RcIikgfHwgZGVmYXVsdE1ldGhvZDtcbiAgICBlbmNUeXBlID0gZ2V0Rm9ybUVuY1R5cGUodGFyZ2V0LmdldEF0dHJpYnV0ZShcImVuY3R5cGVcIikpIHx8IGRlZmF1bHRFbmNUeXBlO1xuICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKHRhcmdldCk7XG4gIH0gZWxzZSBpZiAoaXNCdXR0b25FbGVtZW50KHRhcmdldCkgfHwgaXNJbnB1dEVsZW1lbnQodGFyZ2V0KSAmJiAodGFyZ2V0LnR5cGUgPT09IFwic3VibWl0XCIgfHwgdGFyZ2V0LnR5cGUgPT09IFwiaW1hZ2VcIikpIHtcbiAgICBsZXQgZm9ybSA9IHRhcmdldC5mb3JtO1xuICAgIGlmIChmb3JtID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzdWJtaXQgYSA8YnV0dG9uPiBvciA8aW5wdXQgdHlwZT1cXFwic3VibWl0XFxcIj4gd2l0aG91dCBhIDxmb3JtPlwiKTtcbiAgICB9XG4gICAgLy8gPGJ1dHRvbj4vPGlucHV0IHR5cGU9XCJzdWJtaXRcIj4gbWF5IG92ZXJyaWRlIGF0dHJpYnV0ZXMgb2YgPGZvcm0+XG4gICAgLy8gV2hlbiBncmFiYmluZyB0aGUgYWN0aW9uIGZyb20gdGhlIGVsZW1lbnQsIGl0IHdpbGwgaGF2ZSBoYWQgdGhlIGJhc2VuYW1lXG4gICAgLy8gcHJlZml4ZWQgdG8gZW5zdXJlIG5vbi1KUyBzY2VuYXJpb3Mgd29yaywgc28gc3RyaXAgaXQgc2luY2Ugd2UnbGxcbiAgICAvLyByZS1wcmVmaXggaW4gdGhlIHJvdXRlclxuICAgIGxldCBhdHRyID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1hY3Rpb25cIikgfHwgZm9ybS5nZXRBdHRyaWJ1dGUoXCJhY3Rpb25cIik7XG4gICAgYWN0aW9uID0gYXR0ciA/IHN0cmlwQmFzZW5hbWUoYXR0ciwgYmFzZW5hbWUpIDogbnVsbDtcbiAgICBtZXRob2QgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybW1ldGhvZFwiKSB8fCBmb3JtLmdldEF0dHJpYnV0ZShcIm1ldGhvZFwiKSB8fCBkZWZhdWx0TWV0aG9kO1xuICAgIGVuY1R5cGUgPSBnZXRGb3JtRW5jVHlwZSh0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybWVuY3R5cGVcIikpIHx8IGdldEZvcm1FbmNUeXBlKGZvcm0uZ2V0QXR0cmlidXRlKFwiZW5jdHlwZVwiKSkgfHwgZGVmYXVsdEVuY1R5cGU7XG4gICAgLy8gQnVpbGQgYSBGb3JtRGF0YSBvYmplY3QgcG9wdWxhdGVkIGZyb20gYSBmb3JtIGFuZCBzdWJtaXR0ZXJcbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShmb3JtLCB0YXJnZXQpO1xuICAgIC8vIElmIHRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgdGhlIGBGb3JtRGF0YShlbCwgc3VibWl0dGVyKWAgZm9ybWF0LFxuICAgIC8vIHRoZW4gdGFjayBvbiB0aGUgc3VibWl0dGVyIHZhbHVlIGF0IHRoZSBlbmQuICBUaGlzIGlzIGEgbGlnaHR3ZWlnaHRcbiAgICAvLyBzb2x1dGlvbiB0aGF0IGlzIG5vdCAxMDAlIHNwZWMgY29tcGxpYW50LiAgRm9yIGNvbXBsZXRlIHN1cHBvcnQgaW4gb2xkZXJcbiAgICAvLyBicm93c2VycywgY29uc2lkZXIgdXNpbmcgdGhlIGBmb3JtZGF0YS1zdWJtaXR0ZXItcG9seWZpbGxgIHBhY2thZ2VcbiAgICBpZiAoIWlzRm9ybURhdGFTdWJtaXR0ZXJTdXBwb3J0ZWQoKSkge1xuICAgICAgbGV0IHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgdmFsdWVcbiAgICAgIH0gPSB0YXJnZXQ7XG4gICAgICBpZiAodHlwZSA9PT0gXCJpbWFnZVwiKSB7XG4gICAgICAgIGxldCBwcmVmaXggPSBuYW1lID8gbmFtZSArIFwiLlwiIDogXCJcIjtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKHByZWZpeCArIFwieFwiLCBcIjBcIik7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChwcmVmaXggKyBcInlcIiwgXCIwXCIpO1xuICAgICAgfSBlbHNlIGlmIChuYW1lKSB7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzSHRtbEVsZW1lbnQodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzdWJtaXQgZWxlbWVudCB0aGF0IGlzIG5vdCA8Zm9ybT4sIDxidXR0b24+LCBvciBcIiArIFwiPGlucHV0IHR5cGU9XFxcInN1Ym1pdHxpbWFnZVxcXCI+XCIpO1xuICB9IGVsc2Uge1xuICAgIG1ldGhvZCA9IGRlZmF1bHRNZXRob2Q7XG4gICAgYWN0aW9uID0gbnVsbDtcbiAgICBlbmNUeXBlID0gZGVmYXVsdEVuY1R5cGU7XG4gICAgYm9keSA9IHRhcmdldDtcbiAgfVxuICAvLyBTZW5kIGJvZHkgZm9yIDxGb3JtIGVuY1R5cGU9XCJ0ZXh0L3BsYWluXCIgc28gd2UgZW5jb2RlIGl0IGludG8gdGV4dFxuICBpZiAoZm9ybURhdGEgJiYgZW5jVHlwZSA9PT0gXCJ0ZXh0L3BsYWluXCIpIHtcbiAgICBib2R5ID0gZm9ybURhdGE7XG4gICAgZm9ybURhdGEgPSB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBhY3Rpb24sXG4gICAgbWV0aG9kOiBtZXRob2QudG9Mb3dlckNhc2UoKSxcbiAgICBlbmNUeXBlLFxuICAgIGZvcm1EYXRhLFxuICAgIGJvZHlcbiAgfTtcbn1cblxuY29uc3QgX2V4Y2x1ZGVkID0gW1wib25DbGlja1wiLCBcInJlbGF0aXZlXCIsIFwicmVsb2FkRG9jdW1lbnRcIiwgXCJyZXBsYWNlXCIsIFwic3RhdGVcIiwgXCJ0YXJnZXRcIiwgXCJ0b1wiLCBcInByZXZlbnRTY3JvbGxSZXNldFwiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcImFyaWEtY3VycmVudFwiLCBcImNhc2VTZW5zaXRpdmVcIiwgXCJjbGFzc05hbWVcIiwgXCJlbmRcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwiY2hpbGRyZW5cIl0sXG4gIF9leGNsdWRlZDMgPSBbXCJyZWxvYWREb2N1bWVudFwiLCBcInJlcGxhY2VcIiwgXCJzdGF0ZVwiLCBcIm1ldGhvZFwiLCBcImFjdGlvblwiLCBcIm9uU3VibWl0XCIsIFwic3VibWl0XCIsIFwicmVsYXRpdmVcIiwgXCJwcmV2ZW50U2Nyb2xsUmVzZXRcIl07XG5mdW5jdGlvbiBjcmVhdGVCcm93c2VyUm91dGVyKHJvdXRlcywgb3B0cykge1xuICByZXR1cm4gY3JlYXRlUm91dGVyKHtcbiAgICBiYXNlbmFtZTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5iYXNlbmFtZSxcbiAgICBmdXR1cmU6IF9leHRlbmRzKHt9LCBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmZ1dHVyZSwge1xuICAgICAgdjdfcHJlcGVuZEJhc2VuYW1lOiB0cnVlXG4gICAgfSksXG4gICAgaGlzdG9yeTogY3JlYXRlQnJvd3Nlckhpc3Rvcnkoe1xuICAgICAgd2luZG93OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLndpbmRvd1xuICAgIH0pLFxuICAgIGh5ZHJhdGlvbkRhdGE6IChvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmh5ZHJhdGlvbkRhdGEpIHx8IHBhcnNlSHlkcmF0aW9uRGF0YSgpLFxuICAgIHJvdXRlcyxcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXM6IFVOU0FGRV9tYXBSb3V0ZVByb3BlcnRpZXNcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufVxuZnVuY3Rpb24gY3JlYXRlSGFzaFJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgZnV0dXJlOiBfZXh0ZW5kcyh7fSwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mdXR1cmUsIHtcbiAgICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogdHJ1ZVxuICAgIH0pLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZUhhc2hIaXN0b3J5KHtcbiAgICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhKSB8fCBwYXJzZUh5ZHJhdGlvbkRhdGEoKSxcbiAgICByb3V0ZXMsXG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzOiBVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzXG4gIH0pLmluaXRpYWxpemUoKTtcbn1cbmZ1bmN0aW9uIHBhcnNlSHlkcmF0aW9uRGF0YSgpIHtcbiAgdmFyIF93aW5kb3c7XG4gIGxldCBzdGF0ZSA9IChfd2luZG93ID0gd2luZG93KSA9PSBudWxsID8gdm9pZCAwIDogX3dpbmRvdy5fX3N0YXRpY1JvdXRlckh5ZHJhdGlvbkRhdGE7XG4gIGlmIChzdGF0ZSAmJiBzdGF0ZS5lcnJvcnMpIHtcbiAgICBzdGF0ZSA9IF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgZXJyb3JzOiBkZXNlcmlhbGl6ZUVycm9ycyhzdGF0ZS5lcnJvcnMpXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufVxuZnVuY3Rpb24gZGVzZXJpYWxpemVFcnJvcnMoZXJyb3JzKSB7XG4gIGlmICghZXJyb3JzKSByZXR1cm4gbnVsbDtcbiAgbGV0IGVudHJpZXMgPSBPYmplY3QuZW50cmllcyhlcnJvcnMpO1xuICBsZXQgc2VyaWFsaXplZCA9IHt9O1xuICBmb3IgKGxldCBba2V5LCB2YWxdIG9mIGVudHJpZXMpIHtcbiAgICAvLyBIZXkgeW91ISAgSWYgeW91IGNoYW5nZSB0aGlzLCBwbGVhc2UgY2hhbmdlIHRoZSBjb3JyZXNwb25kaW5nIGxvZ2ljIGluXG4gICAgLy8gc2VyaWFsaXplRXJyb3JzIGluIHJlYWN0LXJvdXRlci1kb20vc2VydmVyLnRzeCA6KVxuICAgIGlmICh2YWwgJiYgdmFsLl9fdHlwZSA9PT0gXCJSb3V0ZUVycm9yUmVzcG9uc2VcIikge1xuICAgICAgc2VyaWFsaXplZFtrZXldID0gbmV3IEVycm9yUmVzcG9uc2UodmFsLnN0YXR1cywgdmFsLnN0YXR1c1RleHQsIHZhbC5kYXRhLCB2YWwuaW50ZXJuYWwgPT09IHRydWUpO1xuICAgIH0gZWxzZSBpZiAodmFsICYmIHZhbC5fX3R5cGUgPT09IFwiRXJyb3JcIikge1xuICAgICAgLy8gQXR0ZW1wdCB0byByZWNvbnN0cnVjdCB0aGUgcmlnaHQgdHlwZSBvZiBFcnJvciAoaS5lLiwgUmVmZXJlbmNlRXJyb3IpXG4gICAgICBpZiAodmFsLl9fc3ViVHlwZSkge1xuICAgICAgICBsZXQgRXJyb3JDb25zdHJ1Y3RvciA9IHdpbmRvd1t2YWwuX19zdWJUeXBlXTtcbiAgICAgICAgaWYgKHR5cGVvZiBFcnJvckNvbnN0cnVjdG9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yQ29uc3RydWN0b3IodmFsLm1lc3NhZ2UpO1xuICAgICAgICAgICAgLy8gV2lwZSBhd2F5IHRoZSBjbGllbnQtc2lkZSBzdGFjayB0cmFjZS4gIE5vdGhpbmcgdG8gZmlsbCBpdCBpbiB3aXRoXG4gICAgICAgICAgICAvLyBiZWNhdXNlIHdlIGRvbid0IHNlcmlhbGl6ZSBTU1Igc3RhY2sgdHJhY2VzIGZvciBzZWN1cml0eSByZWFzb25zXG4gICAgICAgICAgICBlcnJvci5zdGFjayA9IFwiXCI7XG4gICAgICAgICAgICBzZXJpYWxpemVkW2tleV0gPSBlcnJvcjtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBuby1vcCAtIGZhbGwgdGhyb3VnaCBhbmQgY3JlYXRlIGEgbm9ybWFsIEVycm9yXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2VyaWFsaXplZFtrZXldID09IG51bGwpIHtcbiAgICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yKHZhbC5tZXNzYWdlKTtcbiAgICAgICAgLy8gV2lwZSBhd2F5IHRoZSBjbGllbnQtc2lkZSBzdGFjayB0cmFjZS4gIE5vdGhpbmcgdG8gZmlsbCBpdCBpbiB3aXRoXG4gICAgICAgIC8vIGJlY2F1c2Ugd2UgZG9uJ3Qgc2VyaWFsaXplIFNTUiBzdGFjayB0cmFjZXMgZm9yIHNlY3VyaXR5IHJlYXNvbnNcbiAgICAgICAgZXJyb3Iuc3RhY2sgPSBcIlwiO1xuICAgICAgICBzZXJpYWxpemVkW2tleV0gPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VyaWFsaXplZFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2VyaWFsaXplZDtcbn1cbi8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBDb21wb25lbnRzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLyoqXG4gIFdlYnBhY2sgKyBSZWFjdCAxNyBmYWlscyB0byBjb21waWxlIG9uIGFueSBvZiB0aGUgZm9sbG93aW5nIGJlY2F1c2Ugd2VicGFja1xuICBjb21wbGFpbnMgdGhhdCBgc3RhcnRUcmFuc2l0aW9uYCBkb2Vzbid0IGV4aXN0IGluIGBSZWFjdGA6XG4gICogaW1wb3J0IHsgc3RhcnRUcmFuc2l0aW9uIH0gZnJvbSBcInJlYWN0XCJcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QgPyBSZWFjdC5zdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3RbXCJzdGFydFRyYW5zaXRpb25cIl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgTW92aW5nIGl0IHRvIGEgY29uc3RhbnQgc3VjaCBhcyB0aGUgZm9sbG93aW5nIHNvbHZlcyB0aGUgV2VicGFjay9SZWFjdCAxNyBpc3N1ZTpcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIGNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuICAgIFNUQVJUX1RSQU5TSVRJT04gaW4gUmVhY3QgPyBSZWFjdFtTVEFSVF9UUkFOU0lUSU9OXSgoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcblxuICBIb3dldmVyLCB0aGF0IGludHJvZHVjZXMgd2VicGFjay90ZXJzZXIgbWluaWZpY2F0aW9uIGlzc3VlcyBpbiBwcm9kdWN0aW9uIGJ1aWxkc1xuICBpbiBSZWFjdCAxOCB3aGVyZSBtaW5pZmljYXRpb24vb2JmdXNjYXRpb24gZW5kcyB1cCByZW1vdmluZyB0aGUgY2FsbCBvZlxuICBSZWFjdC5zdGFydFRyYW5zaXRpb24gZW50aXJlbHkgZnJvbSB0aGUgZmlyc3QgaGFsZiBvZiB0aGUgdGVybmFyeS4gIEdyYWJiaW5nXG4gIHRoaXMgZXhwb3J0ZWQgcmVmZXJlbmNlIG9uY2UgdXAgZnJvbnQgcmVzb2x2ZXMgdGhhdCBpc3N1ZS5cblxuICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZWFjdC1yb3V0ZXIvaXNzdWVzLzEwNTc5XG4qL1xuY29uc3QgU1RBUlRfVFJBTlNJVElPTiA9IFwic3RhcnRUcmFuc2l0aW9uXCI7XG5jb25zdCBzdGFydFRyYW5zaXRpb25JbXBsID0gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl07XG4vKipcbiAqIEEgYDxSb3V0ZXI+YCBmb3IgdXNlIGluIHdlYiBicm93c2Vycy4gUHJvdmlkZXMgdGhlIGNsZWFuZXN0IFVSTHMuXG4gKi9cbmZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoX3JlZikge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGZ1dHVyZSxcbiAgICB3aW5kb3dcbiAgfSA9IF9yZWY7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHtcbiAgICAgIHdpbmRvdyxcbiAgICAgIHY1Q29tcGF0OiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlSW1wbF0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3U3RhdGUgPT4ge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvbiAmJiBzdGFydFRyYW5zaXRpb25JbXBsID8gc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKSA6IHNldFN0YXRlSW1wbChuZXdTdGF0ZSk7XG4gIH0sIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeSwgc2V0U3RhdGVdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5XG4gIH0pO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFN0b3JlcyB0aGUgbG9jYXRpb24gaW4gdGhlIGhhc2hcbiAqIHBvcnRpb24gb2YgdGhlIFVSTCBzbyBpdCBpcyBub3Qgc2VudCB0byB0aGUgc2VydmVyLlxuICovXG5mdW5jdGlvbiBIYXNoUm91dGVyKF9yZWYyKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgZnV0dXJlLFxuICAgIHdpbmRvd1xuICB9ID0gX3JlZjI7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUhhc2hIaXN0b3J5KHtcbiAgICAgIHdpbmRvdyxcbiAgICAgIHY1Q29tcGF0OiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlSW1wbF0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3U3RhdGUgPT4ge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvbiAmJiBzdGFydFRyYW5zaXRpb25JbXBsID8gc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKSA6IHNldFN0YXRlSW1wbChuZXdTdGF0ZSk7XG4gIH0sIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeSwgc2V0U3RhdGVdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5XG4gIH0pO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgdGhhdCBhY2NlcHRzIGEgcHJlLWluc3RhbnRpYXRlZCBoaXN0b3J5IG9iamVjdC4gSXQncyBpbXBvcnRhbnRcbiAqIHRvIG5vdGUgdGhhdCB1c2luZyB5b3VyIG93biBoaXN0b3J5IG9iamVjdCBpcyBoaWdobHkgZGlzY291cmFnZWQgYW5kIG1heSBhZGRcbiAqIHR3byB2ZXJzaW9ucyBvZiB0aGUgaGlzdG9yeSBsaWJyYXJ5IHRvIHlvdXIgYnVuZGxlcyB1bmxlc3MgeW91IHVzZSB0aGUgc2FtZVxuICogdmVyc2lvbiBvZiB0aGUgaGlzdG9yeSBsaWJyYXJ5IHRoYXQgUmVhY3QgUm91dGVyIHVzZXMgaW50ZXJuYWxseS5cbiAqL1xuZnVuY3Rpb24gSGlzdG9yeVJvdXRlcihfcmVmMykge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGZ1dHVyZSxcbiAgICBoaXN0b3J5XG4gIH0gPSBfcmVmMztcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBsZXQge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvblxuICB9ID0gZnV0dXJlIHx8IHt9O1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdTdGF0ZSA9PiB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGwgPyBzdGFydFRyYW5zaXRpb25JbXBsKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpIDogc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgfSwgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5LCBzZXRTdGF0ZV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhpc3RvcnlSb3V0ZXIuZGlzcGxheU5hbWUgPSBcInVuc3RhYmxlX0hpc3RvcnlSb3V0ZXJcIjtcbn1cbmNvbnN0IGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG5jb25zdCBBQlNPTFVURV9VUkxfUkVHRVggPSAvXig/OlthLXpdW2EtejAtOSsuLV0qOnxcXC9cXC8pL2k7XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuY29uc3QgTGluayA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpbmtXaXRoUmVmKF9yZWY0LCByZWYpIHtcbiAgbGV0IHtcbiAgICAgIG9uQ2xpY2ssXG4gICAgICByZWxhdGl2ZSxcbiAgICAgIHJlbG9hZERvY3VtZW50LFxuICAgICAgcmVwbGFjZSxcbiAgICAgIHN0YXRlLFxuICAgICAgdGFyZ2V0LFxuICAgICAgdG8sXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICB9ID0gX3JlZjQsXG4gICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY0LCBfZXhjbHVkZWQpO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIC8vIFJlbmRlcmVkIGludG8gPGEgaHJlZj4gZm9yIGFic29sdXRlIFVSTHNcbiAgbGV0IGFic29sdXRlSHJlZjtcbiAgbGV0IGlzRXh0ZXJuYWwgPSBmYWxzZTtcbiAgaWYgKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiAmJiBBQlNPTFVURV9VUkxfUkVHRVgudGVzdCh0bykpIHtcbiAgICAvLyBSZW5kZXIgdGhlIGFic29sdXRlIGhyZWYgc2VydmVyLSBhbmQgY2xpZW50LXNpZGVcbiAgICBhYnNvbHV0ZUhyZWYgPSB0bztcbiAgICAvLyBPbmx5IGNoZWNrIGZvciBleHRlcm5hbCBvcmlnaW5zIGNsaWVudC1zaWRlXG4gICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGN1cnJlbnRVcmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgbGV0IHRhcmdldFVybCA9IHRvLnN0YXJ0c1dpdGgoXCIvL1wiKSA/IG5ldyBVUkwoY3VycmVudFVybC5wcm90b2NvbCArIHRvKSA6IG5ldyBVUkwodG8pO1xuICAgICAgICBsZXQgcGF0aCA9IHN0cmlwQmFzZW5hbWUodGFyZ2V0VXJsLnBhdGhuYW1lLCBiYXNlbmFtZSk7XG4gICAgICAgIGlmICh0YXJnZXRVcmwub3JpZ2luID09PSBjdXJyZW50VXJsLm9yaWdpbiAmJiBwYXRoICE9IG51bGwpIHtcbiAgICAgICAgICAvLyBTdHJpcCB0aGUgcHJvdG9jb2wvb3JpZ2luL2Jhc2VuYW1lIGZvciBzYW1lLW9yaWdpbiBhYnNvbHV0ZSBVUkxzXG4gICAgICAgICAgdG8gPSBwYXRoICsgdGFyZ2V0VXJsLnNlYXJjaCArIHRhcmdldFVybC5oYXNoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlzRXh0ZXJuYWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIFdlIGNhbid0IGRvIGV4dGVybmFsIFVSTCBkZXRlY3Rpb24gd2l0aG91dCBhIHZhbGlkIFVSTFxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCI8TGluayB0bz1cXFwiXCIgKyB0byArIFwiXFxcIj4gY29udGFpbnMgYW4gaW52YWxpZCBVUkwgd2hpY2ggd2lsbCBwcm9iYWJseSBicmVhayBcIiArIFwid2hlbiBjbGlja2VkIC0gcGxlYXNlIHVwZGF0ZSB0byBhIHZhbGlkIFVSTCBwYXRoLlwiKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gUmVuZGVyZWQgaW50byA8YSBocmVmPiBmb3IgcmVsYXRpdmUgVVJMc1xuICBsZXQgaHJlZiA9IHVzZUhyZWYodG8sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgbGV0IGludGVybmFsT25DbGljayA9IHVzZUxpbmtDbGlja0hhbmRsZXIodG8sIHtcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHRhcmdldCxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgcmVsYXRpdmVcbiAgfSk7XG4gIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgaWYgKG9uQ2xpY2spIG9uQ2xpY2soZXZlbnQpO1xuICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgaW50ZXJuYWxPbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBhYnNvbHV0ZUhyZWYgfHwgaHJlZixcbiAgICAgIG9uQ2xpY2s6IGlzRXh0ZXJuYWwgfHwgcmVsb2FkRG9jdW1lbnQgPyBvbkNsaWNrIDogaGFuZGxlQ2xpY2ssXG4gICAgICByZWY6IHJlZixcbiAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgfSkpXG4gICk7XG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xufVxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuY29uc3QgTmF2TGluayA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE5hdkxpbmtXaXRoUmVmKF9yZWY1LCByZWYpIHtcbiAgbGV0IHtcbiAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50UHJvcCA9IFwicGFnZVwiLFxuICAgICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVQcm9wID0gXCJcIixcbiAgICAgIGVuZCA9IGZhbHNlLFxuICAgICAgc3R5bGU6IHN0eWxlUHJvcCxcbiAgICAgIHRvLFxuICAgICAgY2hpbGRyZW5cbiAgICB9ID0gX3JlZjUsXG4gICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY1LCBfZXhjbHVkZWQyKTtcbiAgbGV0IHBhdGggPSB1c2VSZXNvbHZlZFBhdGgodG8sIHtcbiAgICByZWxhdGl2ZTogcmVzdC5yZWxhdGl2ZVxuICB9KTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlclN0YXRlID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbmF2aWdhdG9yXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB0b1BhdGhuYW1lID0gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uID8gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uKHBhdGgpLnBhdGhuYW1lIDogcGF0aC5wYXRobmFtZTtcbiAgbGV0IGxvY2F0aW9uUGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZTtcbiAgbGV0IG5leHRMb2NhdGlvblBhdGhuYW1lID0gcm91dGVyU3RhdGUgJiYgcm91dGVyU3RhdGUubmF2aWdhdGlvbiAmJiByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uID8gcm91dGVyU3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbi5wYXRobmFtZSA6IG51bGw7XG4gIGlmICghY2FzZVNlbnNpdGl2ZSkge1xuICAgIGxvY2F0aW9uUGF0aG5hbWUgPSBsb2NhdGlvblBhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgbmV4dExvY2F0aW9uUGF0aG5hbWUgPSBuZXh0TG9jYXRpb25QYXRobmFtZSA/IG5leHRMb2NhdGlvblBhdGhuYW1lLnRvTG93ZXJDYXNlKCkgOiBudWxsO1xuICAgIHRvUGF0aG5hbWUgPSB0b1BhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gIH1cbiAgbGV0IGlzQWN0aXZlID0gbG9jYXRpb25QYXRobmFtZSA9PT0gdG9QYXRobmFtZSB8fCAhZW5kICYmIGxvY2F0aW9uUGF0aG5hbWUuc3RhcnRzV2l0aCh0b1BhdGhuYW1lKSAmJiBsb2NhdGlvblBhdGhuYW1lLmNoYXJBdCh0b1BhdGhuYW1lLmxlbmd0aCkgPT09IFwiL1wiO1xuICBsZXQgaXNQZW5kaW5nID0gbmV4dExvY2F0aW9uUGF0aG5hbWUgIT0gbnVsbCAmJiAobmV4dExvY2F0aW9uUGF0aG5hbWUgPT09IHRvUGF0aG5hbWUgfHwgIWVuZCAmJiBuZXh0TG9jYXRpb25QYXRobmFtZS5zdGFydHNXaXRoKHRvUGF0aG5hbWUpICYmIG5leHRMb2NhdGlvblBhdGhuYW1lLmNoYXJBdCh0b1BhdGhuYW1lLmxlbmd0aCkgPT09IFwiL1wiKTtcbiAgbGV0IGFyaWFDdXJyZW50ID0gaXNBY3RpdmUgPyBhcmlhQ3VycmVudFByb3AgOiB1bmRlZmluZWQ7XG4gIGxldCBjbGFzc05hbWU7XG4gIGlmICh0eXBlb2YgY2xhc3NOYW1lUHJvcCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lUHJvcCh7XG4gICAgICBpc0FjdGl2ZSxcbiAgICAgIGlzUGVuZGluZ1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIHRoZSBjbGFzc05hbWUgcHJvcCBpcyBub3QgYSBmdW5jdGlvbiwgd2UgdXNlIGEgZGVmYXVsdCBgYWN0aXZlYFxuICAgIC8vIGNsYXNzIGZvciA8TmF2TGluayAvPnMgdGhhdCBhcmUgYWN0aXZlLiBJbiB2NSBgYWN0aXZlYCB3YXMgdGhlIGRlZmF1bHRcbiAgICAvLyB2YWx1ZSBmb3IgYGFjdGl2ZUNsYXNzTmFtZWAsIGJ1dCB3ZSBhcmUgcmVtb3ZpbmcgdGhhdCBBUEkgYW5kIGNhbiBzdGlsbFxuICAgIC8vIHVzZSB0aGUgb2xkIGRlZmF1bHQgYmVoYXZpb3IgZm9yIGEgY2xlYW5lciB1cGdyYWRlIHBhdGggYW5kIGtlZXAgdGhlXG4gICAgLy8gc2ltcGxlIHN0eWxpbmcgcnVsZXMgd29ya2luZyBhcyB0aGV5IGN1cnJlbnRseSBkby5cbiAgICBjbGFzc05hbWUgPSBbY2xhc3NOYW1lUHJvcCwgaXNBY3RpdmUgPyBcImFjdGl2ZVwiIDogbnVsbCwgaXNQZW5kaW5nID8gXCJwZW5kaW5nXCIgOiBudWxsXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIik7XG4gIH1cbiAgbGV0IHN0eWxlID0gdHlwZW9mIHN0eWxlUHJvcCA9PT0gXCJmdW5jdGlvblwiID8gc3R5bGVQcm9wKHtcbiAgICBpc0FjdGl2ZSxcbiAgICBpc1BlbmRpbmdcbiAgfSkgOiBzdHlsZVByb3A7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50LFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIHJlZjogcmVmLFxuICAgIHN0eWxlOiBzdHlsZSxcbiAgICB0bzogdG9cbiAgfSksIHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gY2hpbGRyZW4oe1xuICAgIGlzQWN0aXZlLFxuICAgIGlzUGVuZGluZ1xuICB9KSA6IGNoaWxkcmVuKTtcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG59XG4vKipcbiAqIEEgYEByZW1peC1ydW4vcm91dGVyYC1hd2FyZSBgPGZvcm0+YC4gSXQgYmVoYXZlcyBsaWtlIGEgbm9ybWFsIGZvcm0gZXhjZXB0XG4gKiB0aGF0IHRoZSBpbnRlcmFjdGlvbiB3aXRoIHRoZSBzZXJ2ZXIgaXMgd2l0aCBgZmV0Y2hgIGluc3RlYWQgb2YgbmV3IGRvY3VtZW50XG4gKiByZXF1ZXN0cywgYWxsb3dpbmcgY29tcG9uZW50cyB0byBhZGQgbmljZXIgVVggdG8gdGhlIHBhZ2UgYXMgdGhlIGZvcm0gaXNcbiAqIHN1Ym1pdHRlZCBhbmQgcmV0dXJucyB3aXRoIGRhdGEuXG4gKi9cbmNvbnN0IEZvcm0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICBsZXQgc3VibWl0ID0gdXNlU3VibWl0KCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtSW1wbCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgc3VibWl0OiBzdWJtaXQsXG4gICAgcmVmOiByZWZcbiAgfSkpO1xufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEZvcm0uZGlzcGxheU5hbWUgPSBcIkZvcm1cIjtcbn1cbmNvbnN0IEZvcm1JbXBsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKF9yZWY2LCBmb3J3YXJkZWRSZWYpID0+IHtcbiAgbGV0IHtcbiAgICAgIHJlbG9hZERvY3VtZW50LFxuICAgICAgcmVwbGFjZSxcbiAgICAgIHN0YXRlLFxuICAgICAgbWV0aG9kID0gZGVmYXVsdE1ldGhvZCxcbiAgICAgIGFjdGlvbixcbiAgICAgIG9uU3VibWl0LFxuICAgICAgc3VibWl0LFxuICAgICAgcmVsYXRpdmUsXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICB9ID0gX3JlZjYsXG4gICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmNiwgX2V4Y2x1ZGVkMyk7XG4gIGxldCBmb3JtTWV0aG9kID0gbWV0aG9kLnRvTG93ZXJDYXNlKCkgPT09IFwiZ2V0XCIgPyBcImdldFwiIDogXCJwb3N0XCI7XG4gIGxldCBmb3JtQWN0aW9uID0gdXNlRm9ybUFjdGlvbihhY3Rpb24sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgbGV0IHN1Ym1pdEhhbmRsZXIgPSBldmVudCA9PiB7XG4gICAgb25TdWJtaXQgJiYgb25TdWJtaXQoZXZlbnQpO1xuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSByZXR1cm47XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBsZXQgc3VibWl0dGVyID0gZXZlbnQubmF0aXZlRXZlbnQuc3VibWl0dGVyO1xuICAgIGxldCBzdWJtaXRNZXRob2QgPSAoc3VibWl0dGVyID09IG51bGwgPyB2b2lkIDAgOiBzdWJtaXR0ZXIuZ2V0QXR0cmlidXRlKFwiZm9ybW1ldGhvZFwiKSkgfHwgbWV0aG9kO1xuICAgIHN1Ym1pdChzdWJtaXR0ZXIgfHwgZXZlbnQuY3VycmVudFRhcmdldCwge1xuICAgICAgbWV0aG9kOiBzdWJtaXRNZXRob2QsXG4gICAgICByZXBsYWNlLFxuICAgICAgc3RhdGUsXG4gICAgICByZWxhdGl2ZSxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldFxuICAgIH0pO1xuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIsIF9leHRlbmRzKHtcbiAgICByZWY6IGZvcndhcmRlZFJlZixcbiAgICBtZXRob2Q6IGZvcm1NZXRob2QsXG4gICAgYWN0aW9uOiBmb3JtQWN0aW9uLFxuICAgIG9uU3VibWl0OiByZWxvYWREb2N1bWVudCA/IG9uU3VibWl0IDogc3VibWl0SGFuZGxlclxuICB9LCBwcm9wcykpO1xufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEZvcm1JbXBsLmRpc3BsYXlOYW1lID0gXCJGb3JtSW1wbFwiO1xufVxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCB3aWxsIGVtdWxhdGUgdGhlIGJyb3dzZXIncyBzY3JvbGwgcmVzdG9yYXRpb24gb24gbG9jYXRpb25cbiAqIGNoYW5nZXMuXG4gKi9cbmZ1bmN0aW9uIFNjcm9sbFJlc3RvcmF0aW9uKF9yZWY3KSB7XG4gIGxldCB7XG4gICAgZ2V0S2V5LFxuICAgIHN0b3JhZ2VLZXlcbiAgfSA9IF9yZWY3O1xuICB1c2VTY3JvbGxSZXN0b3JhdGlvbih7XG4gICAgZ2V0S2V5LFxuICAgIHN0b3JhZ2VLZXlcbiAgfSk7XG4gIHJldHVybiBudWxsO1xufVxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTY3JvbGxSZXN0b3JhdGlvbi5kaXNwbGF5TmFtZSA9IFwiU2Nyb2xsUmVzdG9yYXRpb25cIjtcbn1cbi8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBIb29rc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbnZhciBEYXRhUm91dGVySG9vaztcbihmdW5jdGlvbiAoRGF0YVJvdXRlckhvb2spIHtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTY3JvbGxSZXN0b3JhdGlvblwiXSA9IFwidXNlU2Nyb2xsUmVzdG9yYXRpb25cIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTdWJtaXRcIl0gPSBcInVzZVN1Ym1pdFwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZVN1Ym1pdEZldGNoZXJcIl0gPSBcInVzZVN1Ym1pdEZldGNoZXJcIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VGZXRjaGVyXCJdID0gXCJ1c2VGZXRjaGVyXCI7XG59KShEYXRhUm91dGVySG9vayB8fCAoRGF0YVJvdXRlckhvb2sgPSB7fSkpO1xudmFyIERhdGFSb3V0ZXJTdGF0ZUhvb2s7XG4oZnVuY3Rpb24gKERhdGFSb3V0ZXJTdGF0ZUhvb2spIHtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUZldGNoZXJzXCJdID0gXCJ1c2VGZXRjaGVyc1wiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlU2Nyb2xsUmVzdG9yYXRpb25cIl0gPSBcInVzZVNjcm9sbFJlc3RvcmF0aW9uXCI7XG59KShEYXRhUm91dGVyU3RhdGVIb29rIHx8IChEYXRhUm91dGVyU3RhdGVIb29rID0ge30pKTtcbmZ1bmN0aW9uIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpIHtcbiAgcmV0dXJuIGhvb2tOYW1lICsgXCIgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGRhdGEgcm91dGVyLiAgU2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlcnMvcGlja2luZy1hLXJvdXRlci5cIjtcbn1cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJDb250ZXh0KGhvb2tOYW1lKSB7XG4gIGxldCBjdHggPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCk7XG4gICFjdHggPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGN0eDtcbn1cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJTdGF0ZShob29rTmFtZSkge1xuICBsZXQgc3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgIXN0YXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBzdGF0ZTtcbn1cbi8qKlxuICogSGFuZGxlcyB0aGUgY2xpY2sgYmVoYXZpb3IgZm9yIHJvdXRlciBgPExpbms+YCBjb21wb25lbnRzLiBUaGlzIGlzIHVzZWZ1bCBpZlxuICogeW91IG5lZWQgdG8gY3JlYXRlIGN1c3RvbSBgPExpbms+YCBjb21wb25lbnRzIHdpdGggdGhlIHNhbWUgY2xpY2sgYmVoYXZpb3Igd2VcbiAqIHVzZSBpbiBvdXIgZXhwb3J0ZWQgYDxMaW5rPmAuXG4gKi9cbmZ1bmN0aW9uIHVzZUxpbmtDbGlja0hhbmRsZXIodG8sIF90ZW1wKSB7XG4gIGxldCB7XG4gICAgdGFyZ2V0LFxuICAgIHJlcGxhY2U6IHJlcGxhY2VQcm9wLFxuICAgIHN0YXRlLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICByZWxhdGl2ZVxuICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvLCB7XG4gICAgcmVsYXRpdmVcbiAgfSk7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhldmVudCA9PiB7XG4gICAgaWYgKHNob3VsZFByb2Nlc3NMaW5rQ2xpY2soZXZlbnQsIHRhcmdldCkpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAvLyBJZiB0aGUgVVJMIGhhc24ndCBjaGFuZ2VkLCBhIHJlZ3VsYXIgPGE+IHdpbGwgZG8gYSByZXBsYWNlIGluc3RlYWQgb2ZcbiAgICAgIC8vIGEgcHVzaCwgc28gZG8gdGhlIHNhbWUgaGVyZSB1bmxlc3MgdGhlIHJlcGxhY2UgcHJvcCBpcyBleHBsaWNpdGx5IHNldFxuICAgICAgbGV0IHJlcGxhY2UgPSByZXBsYWNlUHJvcCAhPT0gdW5kZWZpbmVkID8gcmVwbGFjZVByb3AgOiBjcmVhdGVQYXRoKGxvY2F0aW9uKSA9PT0gY3JlYXRlUGF0aChwYXRoKTtcbiAgICAgIG5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHJlcGxhY2UsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICAgIHJlbGF0aXZlXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtsb2NhdGlvbiwgbmF2aWdhdGUsIHBhdGgsIHJlcGxhY2VQcm9wLCBzdGF0ZSwgdGFyZ2V0LCB0bywgcHJldmVudFNjcm9sbFJlc2V0LCByZWxhdGl2ZV0pO1xufVxuLyoqXG4gKiBBIGNvbnZlbmllbnQgd3JhcHBlciBmb3IgcmVhZGluZyBhbmQgd3JpdGluZyBzZWFyY2ggcGFyYW1ldGVycyB2aWEgdGhlXG4gKiBVUkxTZWFyY2hQYXJhbXMgaW50ZXJmYWNlLlxuICovXG5mdW5jdGlvbiB1c2VTZWFyY2hQYXJhbXMoZGVmYXVsdEluaXQpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcodHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gXCJ1bmRlZmluZWRcIiwgXCJZb3UgY2Fubm90IHVzZSB0aGUgYHVzZVNlYXJjaFBhcmFtc2AgaG9vayBpbiBhIGJyb3dzZXIgdGhhdCBkb2VzIG5vdCBcIiArIFwic3VwcG9ydCB0aGUgVVJMU2VhcmNoUGFyYW1zIEFQSS4gSWYgeW91IG5lZWQgdG8gc3VwcG9ydCBJbnRlcm5ldCBcIiArIFwiRXhwbG9yZXIgMTEsIHdlIHJlY29tbWVuZCB5b3UgbG9hZCBhIHBvbHlmaWxsIHN1Y2ggYXMgXCIgKyBcImh0dHBzOi8vZ2l0aHViLmNvbS91bmdhcC91cmwtc2VhcmNoLXBhcmFtc1xcblxcblwiICsgXCJJZiB5b3UncmUgdW5zdXJlIGhvdyB0byBsb2FkIHBvbHlmaWxscywgd2UgcmVjb21tZW5kIHlvdSBjaGVjayBvdXQgXCIgKyBcImh0dHBzOi8vcG9seWZpbGwuaW8vdjMvIHdoaWNoIHByb3ZpZGVzIHNvbWUgcmVjb21tZW5kYXRpb25zIGFib3V0IGhvdyBcIiArIFwidG8gbG9hZCBwb2x5ZmlsbHMgb25seSBmb3IgdXNlcnMgdGhhdCBuZWVkIHRoZW0sIGluc3RlYWQgb2YgZm9yIGV2ZXJ5IFwiICsgXCJ1c2VyLlwiKSA6IHZvaWQgMDtcbiAgbGV0IGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoY3JlYXRlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSk7XG4gIGxldCBoYXNTZXRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgc2VhcmNoUGFyYW1zID0gUmVhY3QudXNlTWVtbygoKSA9PlxuICAvLyBPbmx5IG1lcmdlIGluIHRoZSBkZWZhdWx0cyBpZiB3ZSBoYXZlbid0IHlldCBjYWxsZWQgc2V0U2VhcmNoUGFyYW1zLlxuICAvLyBPbmNlIHdlIGNhbGwgdGhhdCB3ZSB3YW50IHRob3NlIHRvIHRha2UgcHJlY2VkZW5jZSwgb3RoZXJ3aXNlIHlvdSBjYW4ndFxuICAvLyByZW1vdmUgYSBwYXJhbSB3aXRoIHNldFNlYXJjaFBhcmFtcyh7fSkgaWYgaXQgaGFzIGFuIGluaXRpYWwgdmFsdWVcbiAgZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24obG9jYXRpb24uc2VhcmNoLCBoYXNTZXRTZWFyY2hQYXJhbXNSZWYuY3VycmVudCA/IG51bGwgOiBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQpLCBbbG9jYXRpb24uc2VhcmNoXSk7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGxldCBzZXRTZWFyY2hQYXJhbXMgPSBSZWFjdC51c2VDYWxsYmFjaygobmV4dEluaXQsIG5hdmlnYXRlT3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IG5ld1NlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyh0eXBlb2YgbmV4dEluaXQgPT09IFwiZnVuY3Rpb25cIiA/IG5leHRJbml0KHNlYXJjaFBhcmFtcykgOiBuZXh0SW5pdCk7XG4gICAgaGFzU2V0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIG5hdmlnYXRlKFwiP1wiICsgbmV3U2VhcmNoUGFyYW1zLCBuYXZpZ2F0ZU9wdGlvbnMpO1xuICB9LCBbbmF2aWdhdGUsIHNlYXJjaFBhcmFtc10pO1xuICByZXR1cm4gW3NlYXJjaFBhcmFtcywgc2V0U2VhcmNoUGFyYW1zXTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlQ2xpZW50U2lkZVN1Ym1pc3Npb24oKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGNhbGxpbmcgc3VibWl0IGR1cmluZyB0aGUgc2VydmVyIHJlbmRlci4gXCIgKyBcIlRyeSBjYWxsaW5nIHN1Ym1pdCB3aXRoaW4gYSBgdXNlRWZmZWN0YCBvciBjYWxsYmFjayBpbnN0ZWFkLlwiKTtcbiAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBtYXkgYmUgdXNlZCB0byBwcm9ncmFtbWF0aWNhbGx5IHN1Ym1pdCBhIGZvcm0gKG9yXG4gKiBzb21lIGFyYml0cmFyeSBkYXRhKSB0byB0aGUgc2VydmVyLlxuICovXG5mdW5jdGlvbiB1c2VTdWJtaXQoKSB7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VTdWJtaXQpO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCBjdXJyZW50Um91dGVJZCA9IFVOU0FGRV91c2VSb3V0ZUlkKCk7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAodGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICB2YWxpZGF0ZUNsaWVudFNpZGVTdWJtaXNzaW9uKCk7XG4gICAgbGV0IHtcbiAgICAgIGFjdGlvbixcbiAgICAgIG1ldGhvZCxcbiAgICAgIGVuY1R5cGUsXG4gICAgICBmb3JtRGF0YSxcbiAgICAgIGJvZHlcbiAgICB9ID0gZ2V0Rm9ybVN1Ym1pc3Npb25JbmZvKHRhcmdldCwgYmFzZW5hbWUpO1xuICAgIHJvdXRlci5uYXZpZ2F0ZShvcHRpb25zLmFjdGlvbiB8fCBhY3Rpb24sIHtcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0aW9ucy5wcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICBmb3JtRGF0YSxcbiAgICAgIGJvZHksXG4gICAgICBmb3JtTWV0aG9kOiBvcHRpb25zLm1ldGhvZCB8fCBtZXRob2QsXG4gICAgICBmb3JtRW5jVHlwZTogb3B0aW9ucy5lbmNUeXBlIHx8IGVuY1R5cGUsXG4gICAgICByZXBsYWNlOiBvcHRpb25zLnJlcGxhY2UsXG4gICAgICBzdGF0ZTogb3B0aW9ucy5zdGF0ZSxcbiAgICAgIGZyb21Sb3V0ZUlkOiBjdXJyZW50Um91dGVJZFxuICAgIH0pO1xuICB9LCBbcm91dGVyLCBiYXNlbmFtZSwgY3VycmVudFJvdXRlSWRdKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgaW1wbGVtZW50YXRpb24gZm9yIGZldGNoZXIuc3VibWl0XG4gKi9cbmZ1bmN0aW9uIHVzZVN1Ym1pdEZldGNoZXIoZmV0Y2hlcktleSwgZmV0Y2hlclJvdXRlSWQpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVN1Ym1pdEZldGNoZXIpO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAodGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICB2YWxpZGF0ZUNsaWVudFNpZGVTdWJtaXNzaW9uKCk7XG4gICAgbGV0IHtcbiAgICAgIGFjdGlvbixcbiAgICAgIG1ldGhvZCxcbiAgICAgIGVuY1R5cGUsXG4gICAgICBmb3JtRGF0YSxcbiAgICAgIGJvZHlcbiAgICB9ID0gZ2V0Rm9ybVN1Ym1pc3Npb25JbmZvKHRhcmdldCwgYmFzZW5hbWUpO1xuICAgICEoZmV0Y2hlclJvdXRlSWQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIk5vIHJvdXRlSWQgYXZhaWxhYmxlIGZvciB1c2VGZXRjaGVyKClcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByb3V0ZXIuZmV0Y2goZmV0Y2hlcktleSwgZmV0Y2hlclJvdXRlSWQsIG9wdGlvbnMuYWN0aW9uIHx8IGFjdGlvbiwge1xuICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRpb25zLnByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIGZvcm1EYXRhLFxuICAgICAgYm9keSxcbiAgICAgIGZvcm1NZXRob2Q6IG9wdGlvbnMubWV0aG9kIHx8IG1ldGhvZCxcbiAgICAgIGZvcm1FbmNUeXBlOiBvcHRpb25zLmVuY1R5cGUgfHwgZW5jVHlwZVxuICAgIH0pO1xuICB9LCBbcm91dGVyLCBiYXNlbmFtZSwgZmV0Y2hlcktleSwgZmV0Y2hlclJvdXRlSWRdKTtcbn1cbi8vIHY3OiBFdmVudHVhbGx5IHdlIHNob3VsZCBkZXByZWNhdGUgdGhpcyBlbnRpcmVseSBpbiBmYXZvciBvZiB1c2luZyB0aGVcbi8vIHJvdXRlciBtZXRob2QgZGlyZWN0bHk/XG5mdW5jdGlvbiB1c2VGb3JtQWN0aW9uKGFjdGlvbiwgX3RlbXAyKSB7XG4gIGxldCB7XG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDI7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHJvdXRlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX1JvdXRlQ29udGV4dCk7XG4gICFyb3V0ZUNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZvcm1BY3Rpb24gbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dFwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgW21hdGNoXSA9IHJvdXRlQ29udGV4dC5tYXRjaGVzLnNsaWNlKC0xKTtcbiAgLy8gU2hhbGxvdyBjbG9uZSBwYXRoIHNvIHdlIGNhbiBtb2RpZnkgaXQgYmVsb3csIG90aGVyd2lzZSB3ZSBtb2RpZnkgdGhlXG4gIC8vIG9iamVjdCByZWZlcmVuY2VkIGJ5IHVzZU1lbW8gaW5zaWRlIHVzZVJlc29sdmVkUGF0aFxuICBsZXQgcGF0aCA9IF9leHRlbmRzKHt9LCB1c2VSZXNvbHZlZFBhdGgoYWN0aW9uID8gYWN0aW9uIDogXCIuXCIsIHtcbiAgICByZWxhdGl2ZVxuICB9KSk7XG4gIC8vIFByZXZpb3VzbHkgd2Ugc2V0IHRoZSBkZWZhdWx0IGFjdGlvbiB0byBcIi5cIi4gVGhlIHByb2JsZW0gd2l0aCB0aGlzIGlzIHRoYXRcbiAgLy8gYHVzZVJlc29sdmVkUGF0aChcIi5cIilgIGV4Y2x1ZGVzIHNlYXJjaCBwYXJhbXMgb2YgdGhlIHJlc29sdmVkIFVSTC4gVGhpcyBpc1xuICAvLyB0aGUgaW50ZW5kZWQgYmVoYXZpb3Igb2Ygd2hlbiBcIi5cIiBpcyBzcGVjaWZpY2FsbHkgcHJvdmlkZWQgYXNcbiAgLy8gdGhlIGZvcm0gYWN0aW9uLCBidXQgaW5jb25zaXN0ZW50IHcvIGJyb3dzZXJzIHdoZW4gdGhlIGFjdGlvbiBpcyBvbWl0dGVkLlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlbWl4L2lzc3Vlcy85MjdcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgaWYgKGFjdGlvbiA9PSBudWxsKSB7XG4gICAgLy8gU2FmZSB0byB3cml0ZSB0byB0aGlzIGRpcmVjdGx5IGhlcmUgc2luY2UgaWYgYWN0aW9uIHdhcyB1bmRlZmluZWQsIHdlXG4gICAgLy8gd291bGQgaGF2ZSBjYWxsZWQgdXNlUmVzb2x2ZWRQYXRoKFwiLlwiKSB3aGljaCB3aWxsIG5ldmVyIGluY2x1ZGUgYSBzZWFyY2hcbiAgICBwYXRoLnNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaDtcbiAgICAvLyBXaGVuIGdyYWJiaW5nIHNlYXJjaCBwYXJhbXMgZnJvbSB0aGUgVVJMLCByZW1vdmUgdGhlIGF1dG9tYXRpY2FsbHlcbiAgICAvLyBpbnNlcnRlZCA/aW5kZXggcGFyYW0gc28gd2UgbWF0Y2ggdGhlIHVzZVJlc29sdmVkUGF0aCBzZWFyY2ggYmVoYXZpb3JcbiAgICAvLyB3aGljaCB3b3VsZCBub3QgaW5jbHVkZSA/aW5kZXhcbiAgICBpZiAobWF0Y2gucm91dGUuaW5kZXgpIHtcbiAgICAgIGxldCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHBhdGguc2VhcmNoKTtcbiAgICAgIHBhcmFtcy5kZWxldGUoXCJpbmRleFwiKTtcbiAgICAgIHBhdGguc2VhcmNoID0gcGFyYW1zLnRvU3RyaW5nKCkgPyBcIj9cIiArIHBhcmFtcy50b1N0cmluZygpIDogXCJcIjtcbiAgICB9XG4gIH1cbiAgaWYgKCghYWN0aW9uIHx8IGFjdGlvbiA9PT0gXCIuXCIpICYmIG1hdGNoLnJvdXRlLmluZGV4KSB7XG4gICAgcGF0aC5zZWFyY2ggPSBwYXRoLnNlYXJjaCA/IHBhdGguc2VhcmNoLnJlcGxhY2UoL15cXD8vLCBcIj9pbmRleCZcIikgOiBcIj9pbmRleFwiO1xuICB9XG4gIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUgcHJpb3JcbiAgLy8gdG8gY3JlYXRpbmcgdGhlIGZvcm0gYWN0aW9uLiAgSWYgdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiBqdXN0IHVzZVxuICAvLyB0aGUgcmF3IGJhc2VuYW1lIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGVcbiAgLy8gcHJlc2VuY2Ugb2YgYSB0cmFpbGluZyBzbGFzaCBvbiByb290IGFjdGlvbnNcbiAgaWYgKGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICB9XG4gIHJldHVybiBjcmVhdGVQYXRoKHBhdGgpO1xufVxuZnVuY3Rpb24gY3JlYXRlRmV0Y2hlckZvcm0oZmV0Y2hlcktleSwgcm91dGVJZCkge1xuICBsZXQgRmV0Y2hlckZvcm0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICAgIGxldCBzdWJtaXQgPSB1c2VTdWJtaXRGZXRjaGVyKGZldGNoZXJLZXksIHJvdXRlSWQpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtSW1wbCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICByZWY6IHJlZixcbiAgICAgIHN1Ym1pdDogc3VibWl0XG4gICAgfSkpO1xuICB9KTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEZldGNoZXJGb3JtLmRpc3BsYXlOYW1lID0gXCJmZXRjaGVyLkZvcm1cIjtcbiAgfVxuICByZXR1cm4gRmV0Y2hlckZvcm07XG59XG5sZXQgZmV0Y2hlcklkID0gMDtcbi8qKlxuICogSW50ZXJhY3RzIHdpdGggcm91dGUgbG9hZGVycyBhbmQgYWN0aW9ucyB3aXRob3V0IGNhdXNpbmcgYSBuYXZpZ2F0aW9uLiBHcmVhdFxuICogZm9yIGFueSBpbnRlcmFjdGlvbiB0aGF0IHN0YXlzIG9uIHRoZSBzYW1lIHBhZ2UuXG4gKi9cbmZ1bmN0aW9uIHVzZUZldGNoZXIoKSB7XG4gIHZhciBfcm91dGUkbWF0Y2hlcztcbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZUZldGNoZXIpO1xuICBsZXQgcm91dGUgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9Sb3V0ZUNvbnRleHQpO1xuICAhcm91dGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZldGNoZXIgbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dFwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgcm91dGVJZCA9IChfcm91dGUkbWF0Y2hlcyA9IHJvdXRlLm1hdGNoZXNbcm91dGUubWF0Y2hlcy5sZW5ndGggLSAxXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yb3V0ZSRtYXRjaGVzLnJvdXRlLmlkO1xuICAhKHJvdXRlSWQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZldGNoZXIgY2FuIG9ubHkgYmUgdXNlZCBvbiByb3V0ZXMgdGhhdCBjb250YWluIGEgdW5pcXVlIFxcXCJpZFxcXCJcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IFtmZXRjaGVyS2V5XSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IFN0cmluZygrK2ZldGNoZXJJZCkpO1xuICBsZXQgW0Zvcm1dID0gUmVhY3QudXNlU3RhdGUoKCkgPT4ge1xuICAgICFyb3V0ZUlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJObyByb3V0ZUlkIGF2YWlsYWJsZSBmb3IgZmV0Y2hlci5Gb3JtKClcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gY3JlYXRlRmV0Y2hlckZvcm0oZmV0Y2hlcktleSwgcm91dGVJZCk7XG4gIH0pO1xuICBsZXQgW2xvYWRdID0gUmVhY3QudXNlU3RhdGUoKCkgPT4gaHJlZiA9PiB7XG4gICAgIXJvdXRlciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiTm8gcm91dGVyIGF2YWlsYWJsZSBmb3IgZmV0Y2hlci5sb2FkKClcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhcm91dGVJZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiTm8gcm91dGVJZCBhdmFpbGFibGUgZm9yIGZldGNoZXIubG9hZCgpXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcm91dGVyLmZldGNoKGZldGNoZXJLZXksIHJvdXRlSWQsIGhyZWYpO1xuICB9KTtcbiAgbGV0IHN1Ym1pdCA9IHVzZVN1Ym1pdEZldGNoZXIoZmV0Y2hlcktleSwgcm91dGVJZCk7XG4gIGxldCBmZXRjaGVyID0gcm91dGVyLmdldEZldGNoZXIoZmV0Y2hlcktleSk7XG4gIGxldCBmZXRjaGVyV2l0aENvbXBvbmVudHMgPSBSZWFjdC51c2VNZW1vKCgpID0+IF9leHRlbmRzKHtcbiAgICBGb3JtLFxuICAgIHN1Ym1pdCxcbiAgICBsb2FkXG4gIH0sIGZldGNoZXIpLCBbZmV0Y2hlciwgRm9ybSwgc3VibWl0LCBsb2FkXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gSXMgdGhpcyBidXN0ZWQgd2hlbiB0aGUgUmVhY3QgdGVhbSBnZXRzIHJlYWwgd2VpcmQgYW5kIGNhbGxzIGVmZmVjdHNcbiAgICAvLyB0d2ljZSBvbiBtb3VudD8gIFdlIHJlYWxseSBqdXN0IG5lZWQgdG8gZ2FyYmFnZSBjb2xsZWN0IGhlcmUgd2hlbiB0aGlzXG4gICAgLy8gZmV0Y2hlciBpcyBubyBsb25nZXIgYXJvdW5kLlxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoIXJvdXRlcikge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJObyByb3V0ZXIgYXZhaWxhYmxlIHRvIGNsZWFuIHVwIGZyb20gdXNlRmV0Y2hlcigpXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByb3V0ZXIuZGVsZXRlRmV0Y2hlcihmZXRjaGVyS2V5KTtcbiAgICB9O1xuICB9LCBbcm91dGVyLCBmZXRjaGVyS2V5XSk7XG4gIHJldHVybiBmZXRjaGVyV2l0aENvbXBvbmVudHM7XG59XG4vKipcbiAqIFByb3ZpZGVzIGFsbCBmZXRjaGVycyBjdXJyZW50bHkgb24gdGhlIHBhZ2UuIFVzZWZ1bCBmb3IgbGF5b3V0cyBhbmQgcGFyZW50XG4gKiByb3V0ZXMgdGhhdCBuZWVkIHRvIHByb3ZpZGUgcGVuZGluZy9vcHRpbWlzdGljIFVJIHJlZ2FyZGluZyB0aGUgZmV0Y2guXG4gKi9cbmZ1bmN0aW9uIHVzZUZldGNoZXJzKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VGZXRjaGVycyk7XG4gIHJldHVybiBbLi4uc3RhdGUuZmV0Y2hlcnMudmFsdWVzKCldO1xufVxuY29uc3QgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZID0gXCJyZWFjdC1yb3V0ZXItc2Nyb2xsLXBvc2l0aW9uc1wiO1xubGV0IHNhdmVkU2Nyb2xsUG9zaXRpb25zID0ge307XG4vKipcbiAqIFdoZW4gcmVuZGVyZWQgaW5zaWRlIGEgUm91dGVyUHJvdmlkZXIsIHdpbGwgcmVzdG9yZSBzY3JvbGwgcG9zaXRpb25zIG9uIG5hdmlnYXRpb25zXG4gKi9cbmZ1bmN0aW9uIHVzZVNjcm9sbFJlc3RvcmF0aW9uKF90ZW1wMykge1xuICBsZXQge1xuICAgIGdldEtleSxcbiAgICBzdG9yYWdlS2V5XG4gIH0gPSBfdGVtcDMgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAzO1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlU2Nyb2xsUmVzdG9yYXRpb24pO1xuICBsZXQge1xuICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbixcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXRcbiAgfSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVNjcm9sbFJlc3RvcmF0aW9uKTtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbWF0Y2hlcyA9IHVzZU1hdGNoZXMoKTtcbiAgbGV0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uKCk7XG4gIC8vIFRyaWdnZXIgbWFudWFsIHNjcm9sbCByZXN0b3JhdGlvbiB3aGlsZSB3ZSdyZSBhY3RpdmVcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwibWFudWFsXCI7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJhdXRvXCI7XG4gICAgfTtcbiAgfSwgW10pO1xuICAvLyBTYXZlIHBvc2l0aW9ucyBvbiBwYWdlaGlkZVxuICB1c2VQYWdlSGlkZShSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKG5hdmlnYXRpb24uc3RhdGUgPT09IFwiaWRsZVwiKSB7XG4gICAgICBsZXQga2V5ID0gKGdldEtleSA/IGdldEtleShsb2NhdGlvbiwgbWF0Y2hlcykgOiBudWxsKSB8fCBsb2NhdGlvbi5rZXk7XG4gICAgICBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldID0gd2luZG93LnNjcm9sbFk7XG4gICAgfVxuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oc3RvcmFnZUtleSB8fCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVksIEpTT04uc3RyaW5naWZ5KHNhdmVkU2Nyb2xsUG9zaXRpb25zKSk7XG4gICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcImF1dG9cIjtcbiAgfSwgW3N0b3JhZ2VLZXksIGdldEtleSwgbmF2aWdhdGlvbi5zdGF0ZSwgbG9jYXRpb24sIG1hdGNoZXNdKSk7XG4gIC8vIFJlYWQgaW4gYW55IHNhdmVkIHNjcm9sbCBsb2NhdGlvbnNcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgc2Vzc2lvblBvc2l0aW9ucyA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oc3RvcmFnZUtleSB8fCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVkpO1xuICAgICAgICBpZiAoc2Vzc2lvblBvc2l0aW9ucykge1xuICAgICAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gSlNPTi5wYXJzZShzZXNzaW9uUG9zaXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBuby1vcCwgdXNlIGRlZmF1bHQgZW1wdHkgb2JqZWN0XG4gICAgICB9XG4gICAgfSwgW3N0b3JhZ2VLZXldKTtcbiAgICAvLyBFbmFibGUgc2Nyb2xsIHJlc3RvcmF0aW9uIGluIHRoZSByb3V0ZXJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgbGV0IGdldEtleVdpdGhvdXRCYXNlbmFtZSA9IGdldEtleSAmJiBiYXNlbmFtZSAhPT0gXCIvXCIgPyAobG9jYXRpb24sIG1hdGNoZXMpID0+IGdldEtleSggLy8gU3RyaXAgdGhlIGJhc2VuYW1lIHRvIG1hdGNoIHVzZUxvY2F0aW9uKClcbiAgICAgIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICBwYXRobmFtZTogc3RyaXBCYXNlbmFtZShsb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KSwgbWF0Y2hlcykgOiBnZXRLZXk7XG4gICAgICBsZXQgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uID0gcm91dGVyID09IG51bGwgPyB2b2lkIDAgOiByb3V0ZXIuZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24oc2F2ZWRTY3JvbGxQb3NpdGlvbnMsICgpID0+IHdpbmRvdy5zY3JvbGxZLCBnZXRLZXlXaXRob3V0QmFzZW5hbWUpO1xuICAgICAgcmV0dXJuICgpID0+IGRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbiAmJiBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24oKTtcbiAgICB9LCBbcm91dGVyLCBiYXNlbmFtZSwgZ2V0S2V5XSk7XG4gICAgLy8gUmVzdG9yZSBzY3JvbGxpbmcgd2hlbiBzdGF0ZS5yZXN0b3JlU2Nyb2xsUG9zaXRpb24gY2hhbmdlc1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAvLyBFeHBsaWNpdCBmYWxzZSBtZWFucyBkb24ndCBkbyBhbnl0aGluZyAodXNlZCBmb3Igc3VibWlzc2lvbnMpXG4gICAgICBpZiAocmVzdG9yZVNjcm9sbFBvc2l0aW9uID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBiZWVuIGhlcmUgYmVmb3JlLCBzY3JvbGwgdG8gaXRcbiAgICAgIGlmICh0eXBlb2YgcmVzdG9yZVNjcm9sbFBvc2l0aW9uID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCByZXN0b3JlU2Nyb2xsUG9zaXRpb24pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyB0cnkgdG8gc2Nyb2xsIHRvIHRoZSBoYXNoXG4gICAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgICBsZXQgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkZWNvZGVVUklDb21wb25lbnQobG9jYXRpb24uaGFzaC5zbGljZSgxKSkpO1xuICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICBlbC5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRG9uJ3QgcmVzZXQgaWYgdGhpcyBuYXZpZ2F0aW9uIG9wdGVkIG91dFxuICAgICAgaWYgKHByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBvdGhlcndpc2UgZ28gdG8gdGhlIHRvcCBvbiBuZXcgbG9jYXRpb25zXG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgfSwgW2xvY2F0aW9uLCByZXN0b3JlU2Nyb2xsUG9zaXRpb24sIHByZXZlbnRTY3JvbGxSZXNldF0pO1xuICB9XG59XG4vKipcbiAqIFNldHVwIGEgY2FsbGJhY2sgdG8gYmUgZmlyZWQgb24gdGhlIHdpbmRvdydzIGBiZWZvcmV1bmxvYWRgIGV2ZW50LiBUaGlzIGlzXG4gKiB1c2VmdWwgZm9yIHNhdmluZyBzb21lIGRhdGEgdG8gYHdpbmRvdy5sb2NhbFN0b3JhZ2VgIGp1c3QgYmVmb3JlIHRoZSBwYWdlXG4gKiByZWZyZXNoZXMuXG4gKlxuICogTm90ZTogVGhlIGBjYWxsYmFja2AgYXJndW1lbnQgc2hvdWxkIGJlIGEgZnVuY3Rpb24gY3JlYXRlZCB3aXRoXG4gKiBgUmVhY3QudXNlQ2FsbGJhY2soKWAuXG4gKi9cbmZ1bmN0aW9uIHVzZUJlZm9yZVVubG9hZChjYWxsYmFjaywgb3B0aW9ucykge1xuICBsZXQge1xuICAgIGNhcHR1cmVcbiAgfSA9IG9wdGlvbnMgfHwge307XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IG9wdHMgPSBjYXB0dXJlICE9IG51bGwgPyB7XG4gICAgICBjYXB0dXJlXG4gICAgfSA6IHVuZGVmaW5lZDtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICB9O1xuICB9LCBbY2FsbGJhY2ssIGNhcHR1cmVdKTtcbn1cbi8qKlxuICogU2V0dXAgYSBjYWxsYmFjayB0byBiZSBmaXJlZCBvbiB0aGUgd2luZG93J3MgYHBhZ2VoaWRlYCBldmVudC4gVGhpcyBpc1xuICogdXNlZnVsIGZvciBzYXZpbmcgc29tZSBkYXRhIHRvIGB3aW5kb3cubG9jYWxTdG9yYWdlYCBqdXN0IGJlZm9yZSB0aGUgcGFnZVxuICogcmVmcmVzaGVzLiAgVGhpcyBldmVudCBpcyBiZXR0ZXIgc3VwcG9ydGVkIHRoYW4gYmVmb3JldW5sb2FkIGFjcm9zcyBicm93c2Vycy5cbiAqXG4gKiBOb3RlOiBUaGUgYGNhbGxiYWNrYCBhcmd1bWVudCBzaG91bGQgYmUgYSBmdW5jdGlvbiBjcmVhdGVkIHdpdGhcbiAqIGBSZWFjdC51c2VDYWxsYmFjaygpYC5cbiAqL1xuZnVuY3Rpb24gdXNlUGFnZUhpZGUoY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgbGV0IHtcbiAgICBjYXB0dXJlXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBvcHRzID0gY2FwdHVyZSAhPSBudWxsID8ge1xuICAgICAgY2FwdHVyZVxuICAgIH0gOiB1bmRlZmluZWQ7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIH07XG4gIH0sIFtjYWxsYmFjaywgY2FwdHVyZV0pO1xufVxuLyoqXG4gKiBXcmFwcGVyIGFyb3VuZCB1c2VCbG9ja2VyIHRvIHNob3cgYSB3aW5kb3cuY29uZmlybSBwcm9tcHQgdG8gdXNlcnMgaW5zdGVhZFxuICogb2YgYnVpbGRpbmcgYSBjdXN0b20gVUkgd2l0aCB1c2VCbG9ja2VyLlxuICpcbiAqIFdhcm5pbmc6IFRoaXMgaGFzICphIGxvdCBvZiByb3VnaCBlZGdlcyogYW5kIGJlaGF2ZXMgdmVyeSBkaWZmZXJlbnRseSAoYW5kXG4gKiB2ZXJ5IGluY29ycmVjdGx5IGluIHNvbWUgY2FzZXMpIGFjcm9zcyBicm93c2VycyBpZiB1c2VyIGNsaWNrIGFkZGl0aW9uXG4gKiBiYWNrL2ZvcndhcmQgbmF2aWdhdGlvbnMgd2hpbGUgdGhlIGNvbmZpcm0gaXMgb3Blbi4gIFVzZSBhdCB5b3VyIG93biByaXNrLlxuICovXG5mdW5jdGlvbiB1c2VQcm9tcHQoX3JlZjgpIHtcbiAgbGV0IHtcbiAgICB3aGVuLFxuICAgIG1lc3NhZ2VcbiAgfSA9IF9yZWY4O1xuICBsZXQgYmxvY2tlciA9IHVuc3RhYmxlX3VzZUJsb2NrZXIod2hlbik7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiKSB7XG4gICAgICBsZXQgcHJvY2VlZCA9IHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpO1xuICAgICAgaWYgKHByb2NlZWQpIHtcbiAgICAgICAgLy8gVGhpcyB0aW1lb3V0IGlzIG5lZWRlZCB0byBhdm9pZCBhIHdlaXJkIFwicmFjZVwiIG9uIFBPUCBuYXZpZ2F0aW9uc1xuICAgICAgICAvLyBiZXR3ZWVuIHRoZSBgd2luZG93Lmhpc3RvcnlgIHJldmVydCBuYXZpZ2F0aW9uIGFuZCB0aGUgcmVzdWx0IG9mXG4gICAgICAgIC8vIGB3aW5kb3cuY29uZmlybWBcbiAgICAgICAgc2V0VGltZW91dChibG9ja2VyLnByb2NlZWQsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmxvY2tlci5yZXNldCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2Jsb2NrZXIsIG1lc3NhZ2VdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgIXdoZW4pIHtcbiAgICAgIGJsb2NrZXIucmVzZXQoKTtcbiAgICB9XG4gIH0sIFtibG9ja2VyLCB3aGVuXSk7XG59XG4vLyNlbmRyZWdpb25cblxuZXhwb3J0IHsgQnJvd3NlclJvdXRlciwgRm9ybSwgSGFzaFJvdXRlciwgTGluaywgTmF2TGluaywgU2Nyb2xsUmVzdG9yYXRpb24sIHVzZVNjcm9sbFJlc3RvcmF0aW9uIGFzIFVOU0FGRV91c2VTY3JvbGxSZXN0b3JhdGlvbiwgY3JlYXRlQnJvd3NlclJvdXRlciwgY3JlYXRlSGFzaFJvdXRlciwgY3JlYXRlU2VhcmNoUGFyYW1zLCBIaXN0b3J5Um91dGVyIGFzIHVuc3RhYmxlX0hpc3RvcnlSb3V0ZXIsIHVzZVByb21wdCBhcyB1bnN0YWJsZV91c2VQcm9tcHQsIHVzZUJlZm9yZVVubG9hZCwgdXNlRmV0Y2hlciwgdXNlRmV0Y2hlcnMsIHVzZUZvcm1BY3Rpb24sIHVzZUxpbmtDbGlja0hhbmRsZXIsIHVzZVNlYXJjaFBhcmFtcywgdXNlU3VibWl0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQmFja1RvVG9wKCkge1xyXG4gIGNvbnN0IFt2aXNpYmxlLCBzZXRWaXNpYmxlXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGNvbnN0IGhhbmRsZVNjcm9sbFZpc2liaWxpdHkgPSAoKSA9PiB7XHJcbiAgICAgIHdpbmRvdy5wYWdlWU9mZnNldCA+IDMwMCA/IHNldFZpc2libGUodHJ1ZSkgOiBzZXRWaXNpYmxlKGZhbHNlKTtcclxuICAgIH07XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaGFuZGxlU2Nyb2xsVmlzaWJpbGl0eSk7XHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaGFuZGxlU2Nyb2xsVmlzaWJpbGl0eSk7XHJcbiAgICB9O1xyXG4gIH0sIFtdKTtcclxuICBjb25zdCBoYW5kbGVTY3JvbGxPblRvcCA9ICgpID0+IHtcclxuICAgIHdpbmRvdy5zY3JvbGxUbyh7IHRvcDogMCwgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2PlxyXG4gICAgICB7dmlzaWJsZSAmJiAoXHJcbiAgICAgICAgPHNwYW4+XHJcbiAgICAgICAgICA8ZGl2IG9uQ2xpY2s9e2hhbmRsZVNjcm9sbE9uVG9wfSBjbGFzc05hbWU9J2JhY2stdG8tdG9wJz5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2Fycm93dXAnPlxyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgXlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9zcGFuPlxyXG4gICAgICApfVxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufVxyXG4iLCJcclxuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBCYWNrVG9Ub3AgZnJvbSBcIi4vQmFja1RvVG9wXCI7XHJcblxyXG5cclxuXHJcblxyXG5cclxuY29uc3QgS2Fsb3JpamUgPSAoKSA9PiB7XHJcblxyXG5cclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMSwgc2V0SW5wdXRWYWx1ZTFdID0gdXNlU3RhdGUoXCJcIik7XHJcbiAgXHJcbiAgICBjb25zdCBbaW5wdXRWYWx1ZTIsIHNldElucHV0VmFsdWUyXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUzLCBzZXRJbnB1dFZhbHVlM10gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlNCwgc2V0SW5wdXRWYWx1ZTRdID0gdXNlU3RhdGUoXCJcIik7XHJcbiAgICBjb25zdCBbaW5wdXRWYWx1ZTUsIHNldElucHV0VmFsdWU1XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWU2LCBzZXRJbnB1dFZhbHVlNl0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlNywgc2V0SW5wdXRWYWx1ZTddID0gdXNlU3RhdGUoXCJcIik7XHJcbiAgICBjb25zdCBbaW5wdXRWYWx1ZTgsIHNldElucHV0VmFsdWU4XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWU5LCBzZXRJbnB1dFZhbHVlOV0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMTAsIHNldElucHV0VmFsdWUxMF0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMTEsIHNldElucHV0VmFsdWUxMV0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMTIsIHNldElucHV0VmFsdWUxMl0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMTMsIHNldElucHV0VmFsdWUxM10gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMTQsIHNldElucHV0VmFsdWUxNF0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMTUsIHNldElucHV0VmFsdWUxNV0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMTYsIHNldElucHV0VmFsdWUxNl0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMTcsIHNldElucHV0VmFsdWUxN10gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMTgsIHNldElucHV0VmFsdWUxOF0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMTksIHNldElucHV0VmFsdWUxOV0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMjAsIHNldElucHV0VmFsdWUyMF0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMjEsIHNldElucHV0VmFsdWUyMV0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMjIsIHNldElucHV0VmFsdWUyMl0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMjMsIHNldElucHV0VmFsdWUyM10gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMjQsIHNldElucHV0VmFsdWUyNF0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMjUsIHNldElucHV0VmFsdWUyNV0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMjYsIHNldElucHV0VmFsdWUyNl0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMjcsIHNldElucHV0VmFsdWUyN10gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMjgsIHNldElucHV0VmFsdWUyOF0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMjksIHNldElucHV0VmFsdWUyOV0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMzAsIHNldElucHV0VmFsdWUzMF0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMzEsIHNldElucHV0VmFsdWUzMV0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMzIsIHNldElucHV0VmFsdWUzMl0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMzMsIHNldElucHV0VmFsdWUzM10gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMzQsIHNldElucHV0VmFsdWUzNF0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMzUsIHNldElucHV0VmFsdWUzNV0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMzYsIHNldElucHV0VmFsdWUzNl0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMzcsIHNldElucHV0VmFsdWUzN10gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMzgsIHNldElucHV0VmFsdWUzOF0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlMzksIHNldElucHV0VmFsdWUzOV0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlNDAsIHNldElucHV0VmFsdWU0MF0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlNDEsIHNldElucHV0VmFsdWU0MV0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlNDIsIHNldElucHV0VmFsdWU0Ml0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlNDMsIHNldElucHV0VmFsdWU0M10gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlNDQsIHNldElucHV0VmFsdWU0NF0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlNDUsIHNldElucHV0VmFsdWU0NV0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlNDYsIHNldElucHV0VmFsdWU0Nl0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlNDcsIHNldElucHV0VmFsdWU0N10gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlNDgsIHNldElucHV0VmFsdWU0OF0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlNDksIHNldElucHV0VmFsdWU0OV0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpbnB1dFZhbHVlNTAsIHNldElucHV0VmFsdWU1MF0gPSB1c2VTdGF0ZShcIlwiKTtcclxuXHJcblxyXG5cclxuICAgIGNvbnN0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcclxuXHJcblxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUxID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMShlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZVZhbHVlMiA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTIoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTMgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElucHV0VmFsdWUzKGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWU0ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlNChlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZVZhbHVlNSA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTUoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTYgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElucHV0VmFsdWU2KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWU3ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlNyhlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZVZhbHVlOCA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTgoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTkgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElucHV0VmFsdWU5KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUxMCA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTEwKGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUxMSA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTExKGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUxMiA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTEyKGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUxMyA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTEzKGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUxNCA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTE0KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUxNSA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTE1KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUxNiA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTE2KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUxNyA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTE3KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUxOCA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTE4KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUxOSA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTE5KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUyMCA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTIwKGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUyMSA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTIxKGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUyMiA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTIyKGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUyMyA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTIzKGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUyNCA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTI0KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUyNSA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTI1KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUyNiA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTI2KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUyNyA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTI3KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUyOCA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTI4KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUyOSA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTI5KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUzMCA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTMwKGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUzMSA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTMxKGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUzMiA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTMyKGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUzMyA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTMzKGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUzNCA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTM0KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUzNSA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTM1KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUzNiA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTM2KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUzNyA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTM3KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUzOCA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTM4KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUzOSA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTM5KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWU0MCA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTQwKGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWU0MSA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTQxKGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgIGNvbnN0IGhhbmRsZUNoYW5nZVZhbHVlNDIgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElucHV0VmFsdWU0MihlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZVZhbHVlNDMgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElucHV0VmFsdWU0MyhlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZVZhbHVlNDQgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElucHV0VmFsdWU0NChlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZVZhbHVlNDUgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElucHV0VmFsdWU0NShlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZVZhbHVlNDYgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElucHV0VmFsdWU0NihlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZVZhbHVlNDcgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElucHV0VmFsdWU0NyhlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZVZhbHVlNDggPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElucHV0VmFsdWU0OChlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZVZhbHVlNDkgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElucHV0VmFsdWU0OShlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZVZhbHVlNTAgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElucHV0VmFsdWU1MChlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIHJldHVybiAoXHJcblxyXG4gICAgICAgIDw+XHJcblxyXG4gICAgICAgICAgICA8dGFibGUgY2xhc3NOYW1lPVwiaHJhbmFcIj5cclxuICAgICAgICAgICAgICAgIDx0aGVhZCA+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGggPkhyYW5hPC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoPmcgbWw8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGg+UHJvdGVpbjwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5VSDwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5NYXN0PC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkthbG9yaWplPC90aD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgPC90aGVhZD5cclxuICAgICAgICAgICAgICAgIDx0Ym9keSAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJoaWRyYXRpXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5QaXJpbmHEjTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMVwiIHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWUxfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMSAqIDAuMDc2KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwidWdIaWRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTEgKiAwLjc4KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibWFzdFwiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTEgKiAzLjUxKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cImhpZHJhdGlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPk92c2VuZSBwYWh1bGppY2U8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTJ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyICogMC4xMzkpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyICogMC42NDQpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMiAqIDMuNzQpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwiaGlkcmF0aVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+S3JvbXBpcjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWUzXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlM30gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTMgKiAwLjA5KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMyAqIDAuMikudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUzICogMC44NSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJoaWRyYXRpXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5LdWt1cnV6bmkgZ3JpejwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWU0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlNH0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTQgKiAwLjA3KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNCAqIDAuNzcpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0ICogMC4wMTUpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0ICogMy41KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cImhpZHJhdGlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPsWgcGFnZXRlIGR1cnVtPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlNX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWU1fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNSAqIDAuMTIpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU1ICogMC42MykudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTUgKiAwLjAxOCkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTUgKiAzLjM3KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cInByb3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPlNvxI1pdm88L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlNlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWU2fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTZ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU2ICogMC4yNSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTYgKiAwLjYpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU2ICogMC4wMSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTYgKiAzLjQpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwicHJvdFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+xb11dGkgZ3JhxaFhazwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWU3XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlN30gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTcgKiAwLjIyKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNyAqIDAuNTYpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU3ICogMC4wMSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTcgKiAzLjEpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwicHJvdFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+UGFzdWxqPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZThcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlOH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWU4fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlOCAqIDAuMjEpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU4ICogMC40NSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTggKiAwLjAxNikudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTggKiAyLjcpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwicHJvdFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+VHVuYSBrb256ZXJ2YTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWU5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlOX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTkgKiAwLjIzKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTkgKiAwLjIwOSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTkgKiAyLjg0KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cInByb3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPlBpbGV0aW5hPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTEwXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTEwfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTEwfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTAgKiAwLjIwOCkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxMCAqIDAuMDY4KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTAgKiAxLjQ1KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cInByb3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPsSGdXJlxIdhIHByc2E8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMTFcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMTF9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMTF9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxMSAqIDAuMTkpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTEgKiAwLjAxKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTEgKiAwLjk1KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cInByb3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPkdvdmVkaW5hIG5lbWFzbmE8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMTJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMTJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMTJ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxMiAqIDAuMTk1KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTEyICogMC4xMjUpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxMiAqIDEuMTkpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwicHJvdFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+SnVuZXRpbmEgKGJ1dCk8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMTNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMTN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMTN9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxMyAqIDAuMTk1KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTEzICogMC4xMjUpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxMyAqIDEuOTEpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwicHJvdFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+U3ZpbmpldGluYSBuZW1hc25hPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTE0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTE0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTE0fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTQgKiAwLjIpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTQgKiAwLjA5KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTQgKiAxLjYxKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cInByb3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPkphamUgY2VsbzwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWUxNVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUxNX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWUxNX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTE1ICogNikudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxNSAqIDUpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxNSAqIDU1ICogMS42MikudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJtbGVrb1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+TWFzbGFjPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTE2XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTE2fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTE2fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTYgKiAwLjAxKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTE2ICogMC44MykudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTE2ICogNy41KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cIm1sZWtvXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5NbGVrbyAyLjglPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTE3XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTE3fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTE3fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTcgKiAwLjAzKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxNyAqIDAuMDQ1KS50b0ZpeGVkKDEpfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTE3ICogMC4yOCkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTE3ICowLjU2KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cIm1sZWtvXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5NbGFkaSBzaXI8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMThcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMTh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMTh9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxOCAqIDAuMTI1KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxOCAqIDAuMDQpLnRvRml4ZWQoMSl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMTggKiAwLjA1NSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTE4ICogMS4xNSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJtbGVrb1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+Sm9ndXJ0IDIuOCU8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMTlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMTl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMTl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxOSAqIDAuMDMyKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxOSAqIDAuMDM1KS50b0ZpeGVkKDEpfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTE5ICogMC4wMjgpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUxOSAqIDAuNTIpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwibWxla29cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPlBhcm1lemFuPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTIwXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTIwfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTIwfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMjAgKiAwLjQzKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyMCAqIDAuMDMpLnRvRml4ZWQoMSl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMjAgKiAwLjM1KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMjAgKiA1KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cIm9pbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+TWFzbGlub3ZvIHVsamU8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMjFcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMjF9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMjF9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMjEgKiAxKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMjEgKiA4Ljg0KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cIm9pbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+TWFzbGluZSB6ZWxlbmU8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMjJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMjJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMjJ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMjIgKiAwLjE0KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMjIgKiAxLjQ2KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cIm9pbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+S29rb3Nvdm8gdWxqZTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWUyM1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUyM31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWUyM30gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyMyAqIDEpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyMyogOC45KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cIm9yYWhcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPktva29zPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTI0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTI0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTI0fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMjQgKiAwLjAzKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyNCAqIDAuMTUpLnRvRml4ZWQoMSl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMjQgKiAwLjMzNSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTI0ICogMy41NCkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJvcmFoXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5CYWRlbTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWUyNVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUyNX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWUyNX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTI1ICogMC4yMikudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMjUgKiAwLjIpLnRvRml4ZWQoMSl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMjUgKiAwLjU0KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMjUgKiA2LjM0KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cIm9yYWhcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPk9yYWg8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMjZcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMjZ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMjZ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMjYgKiAwLjYyMikudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTI2KiA2Ljc3KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cIm9yYWhcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPkxlxaFuaWs8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMjdcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMjd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMjd9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMjcgKiAwLjYwNSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTI3KiA2LjU3KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cIm9yYWhcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPlN1bmNva3JldCBzZW1lPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTI4XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTI4fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTI4fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMjggKiAwLjIpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTI4ICogMC4yKS50b0ZpeGVkKDEpfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTI4ICogMC41MTUpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyOCAqIDUuODQpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwib3JhaFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+TGFuIHNlbWU8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMjlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMjl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMjl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyOSAqIDAuMTgpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTI5ICogMC4yOCkudG9GaXhlZCgxKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyOSAqIDAuNDIpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUyOSAqIDUuMzQpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwidm9jZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+QmFuYW5hPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTMwXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTMwfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTMwfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMzAgKiAwLjAxKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUzMCAqIDAuMjMpLnRvRml4ZWQoMSl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMzAgKiAwLjg5KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cInZvY2VcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPkphYnVrYTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWUzMVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUzMX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWUzMX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMzEgKiAwLjEzKS50b0ZpeGVkKDEpfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTMxICogMC41KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cInZvY2VcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPk5hcmFuZMW+YTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWUzMlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUzMn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWUzMn0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMzIgKiAwLjExNykudG9GaXhlZCgxKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUzMiAqIDAuNDcpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+ICAgXHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwidm9jZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+RGluamE8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMzNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMzN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMzN9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTMzICogMC44MTYpLnRvRml4ZWQoMSl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMzMgKiAwLjM0KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cInZvY2VcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPkdyZWpwZnJ1dDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWUzNFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUzNH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWUzNH0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMzQgKiAwLjA3KS50b0ZpeGVkKDEpfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTM0ICogMC4yOCkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICBcclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJ2b2NlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5BbmFuYXM8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMzVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMzV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMzV9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTM1ICogMC4xMjYpLnRvRml4ZWQoMSl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMzUgKiAwLjQ4KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPiAgIFxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cInZvY2VcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPlN1dm8gZ3Jvxb5kamU8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMzZcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMzZ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMzZ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTM2ICogMC4wMTYpLnRvRml4ZWQoMSl9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUzNiAqIDAuNjYpLnRvRml4ZWQoMSl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUzNiAqIDAuMDEpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUzNiAqIDIuNykudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICBcclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJrdXB1c1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+S3VwdXM8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMzdcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMzd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMzd9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTM3ICogMC4wMikudG9GaXhlZCgxKX0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTM3ICogMC4wMykudG9GaXhlZCgxKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUzNyAqIDAuMjIpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+ICAgXHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwia3VwdXNcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hc2xvdlwiPsWgYXJnYXJlcGE8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMzhcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMzh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMzh9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTM4ICogMC4wMSkudG9GaXhlZCgxKX0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTM4ICogMC4wOSkudG9GaXhlZCgxKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUzOCAqIDAuNCkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICBcclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJrdXB1c1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+Q3Zla2xhPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTM5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTM5fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTM5fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWUzOSAqIDAuMDE2KS50b0ZpeGVkKDEpfSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMzkgKiAwLjEpLnRvRml4ZWQoMSl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlMzkgKiAwLjQzKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPiAgIFxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cImt1cHVzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5Ccm9rb2xpPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTQwXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTQwfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTQwfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0MCAqIDAuMDMpLnRvRml4ZWQoMSl9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0MCAqIDAuMDcpLnRvRml4ZWQoMSl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNDAgKiAwLjM0KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPiAgIFxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cImt1cHVzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5LZWxqPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTQxXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTQxfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTQxfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0MSAqIDAuMDIpLnRvRml4ZWQoMSl9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0MSAqIDAuMSkudG9GaXhlZCgxKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0MSAqIDAuNSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICBcclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJrdXB1c1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+xaBwYW5hdDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWU0MlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWU0Mn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWU0Mn0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNDIgKiAwLjAyOSkudG9GaXhlZCgxKX0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTQyICogMC4wMzYpLnRvRml4ZWQoMSl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNDIgKiAwLjIzKS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPiAgIFxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cImt1cHVzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5UaWt2aWNhPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTQzXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTQzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTQzfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0MyAqIDAuMDEpLnRvRml4ZWQoMSl9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0MyAqIDAuMDMpLnRvRml4ZWQoMSl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNDMgKiAwLjE2KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPiAgIFxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cImt1cHVzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5QcmF6aWx1azwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWU0NFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWU0NH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWU0NH0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNDQgKiAwLjAxKS50b0ZpeGVkKDEpfSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNDQgKiAwLjE0KS50b0ZpeGVkKDEpfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTQ0ICogMC42MSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICBcclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJrdXB1c1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+UGF0bGlkxb5hbjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWU0NVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWU0NX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWU0NX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNDUgKiAwLjAxMSkudG9GaXhlZCgxKX0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTQ1ICogMC4wMjkpLnRvRml4ZWQoMSl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNDUgKiAwLjE2KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPiAgIFxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cImt1cHVzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5QYXJhZGFqejwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWU0NlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWU0Nn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlVmFsdWU0Nn0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNDYgKiAwLjAwODgpLnRvRml4ZWQoMSl9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0NiAqIDAuMDM5KS50b0ZpeGVkKDEpfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTQ2ICogMC4xOCkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICBcclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJrdXB1c1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+UGFyYWRhanogc29rPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTQ3XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTQ3fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTQ3fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0NyAqIDAuMDA4KS50b0ZpeGVkKDEpfSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNDcgKiAwLjA1OSkudG9GaXhlZCgxKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0NyAqIDAuMjcpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+ICAgXHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwiYWxjb2hvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+VmlubyBjcm5vPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ2YWx1ZTQ4XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTQ4fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTQ4fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgeyhpbnB1dFZhbHVlNDggKiAwLjAyNikudG9GaXhlZCgxKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0OCAqIDAuODUpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+ICAgXHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwiYWxjb2hvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFzbG92XCI+UGl2byBzdmV0bG88L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlNDlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlNDl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlNDl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7KGlucHV0VmFsdWU0OSAqIDAuMDM1KS50b0ZpeGVkKDEpfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTQ5ICogMC40MykudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICBcclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJhbGNvaG9sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5SYWtpamE8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlNTBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlNTB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlNTB9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicHJvdGVpblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoaW5wdXRWYWx1ZTUwICogMy41KS50b0ZpeGVkKDEpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPiAgIFxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgICAgICAgICAgPHRmb290PlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXNsb3ZcIj5Va3Vwbm88L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInByb3RlaW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoTnVtYmVyKGlucHV0VmFsdWUxICogMC4wNzYpICsgTnVtYmVyKGlucHV0VmFsdWUyICogMC4xMzkpICsgTnVtYmVyKGlucHV0VmFsdWUzICogMC4wOSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTQgKiAwLjA3KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWU1ICogMC4wMTIpICsgTnVtYmVyKGlucHV0VmFsdWU2ICogMC4yNSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTcgKiAwLjIyKSArIE51bWJlcihpbnB1dFZhbHVlOCAqIDAuMjEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTkgKiAwLjAyMykgKyBOdW1iZXIoaW5wdXRWYWx1ZTEwICogMC4yMDgpICsgTnVtYmVyKGlucHV0VmFsdWUxMSAqIDAuMTkpICsgTnVtYmVyKGlucHV0VmFsdWUxMiAqIDAuMTk1KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWUxMyAqIDAuMTk1KSArIE51bWJlcihpbnB1dFZhbHVlMTQgKiAwLjIpICsgTnVtYmVyKGlucHV0VmFsdWUxNSAqIDYpICsgTnVtYmVyKGlucHV0VmFsdWUxNiAqIDAuMDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTE3ICogMC4wMykgKyBOdW1iZXIoaW5wdXRWYWx1ZTE4ICogMC4xMjUpICsgTnVtYmVyKGlucHV0VmFsdWUxOSAqIDAuMDMyKSArIE51bWJlcihpbnB1dFZhbHVlMjAgKiAwLjQzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWUyNCAqIDAuMDMpICsgTnVtYmVyKGlucHV0VmFsdWUyNSAqIDAuMjIpICsgTnVtYmVyKGlucHV0VmFsdWUyOCAqIDAuMikgKyBOdW1iZXIoaW5wdXRWYWx1ZTI5ICogMC4xOClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE51bWJlcihpbnB1dFZhbHVlMzAgKiAwLjAxKSArIE51bWJlcihpbnB1dFZhbHVlMzYgKiAwLjAxNikgKyBOdW1iZXIoaW5wdXRWYWx1ZTM3ICogMC4wMikgKyBOdW1iZXIoaW5wdXRWYWx1ZTM4ICogMC4wMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE51bWJlcihpbnB1dFZhbHVlMzkgKiAwLjAxNikgKyBOdW1iZXIoaW5wdXRWYWx1ZTQwICogMC4wMykgKyBOdW1iZXIoaW5wdXRWYWx1ZTQxICogMC4wMikgKyBOdW1iZXIoaW5wdXRWYWx1ZTQyICogMC4wMjkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTQzICogMC4wMSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTQ0ICogMC4wMSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTQ1ICogMC4wMTEpICsgTnVtYmVyKGlucHV0VmFsdWU0NiAqIDAuMDA4OClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE51bWJlcihpbnB1dFZhbHVlNDcgKiAwLjAwOCkpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KE51bWJlcihpbnB1dFZhbHVlMSAqIDAuNzgpICsgTnVtYmVyKGlucHV0VmFsdWUyICogMC42NDQpICsgTnVtYmVyKGlucHV0VmFsdWUzICogMC4yKSArIE51bWJlcihpbnB1dFZhbHVlNCAqIDAuNzcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTUgKiAwLjA2MykgKyBOdW1iZXIoaW5wdXRWYWx1ZTYgKiAwLjYpICsgTnVtYmVyKGlucHV0VmFsdWU3ICogMC41NikgKyBOdW1iZXIoaW5wdXRWYWx1ZTggKiAwLjQ1KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWUxNyAqIDAuMDQ1KSArIE51bWJlcihpbnB1dFZhbHVlMTggKiAwLjA0KSArIChpbnB1dFZhbHVlMTkgKiAwLjAzNSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTIwICogMC4wMylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE51bWJlcihpbnB1dFZhbHVlMjQgKiAwLjE1KSArIE51bWJlcihpbnB1dFZhbHVlMjUgKiAwLjIpICsgTnVtYmVyKGlucHV0VmFsdWUyOCAqIDAuMikgKyBOdW1iZXIoaW5wdXRWYWx1ZTI5ICogMC4yOClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE51bWJlcihpbnB1dFZhbHVlMzAgKiAwLjIzKSArIE51bWJlcihpbnB1dFZhbHVlMzEgKiAwLjEzKSArIE51bWJlcihpbnB1dFZhbHVlMzIgKiAwLjExNykgKyBOdW1iZXIoaW5wdXRWYWx1ZTMzICogMC44MTYpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTM0ICogMC4wNykgKyBOdW1iZXIoaW5wdXRWYWx1ZTM1ICogMC4xMjYpICsgTnVtYmVyKGlucHV0VmFsdWUzNiAqIDAuNjYpICsgTnVtYmVyKGlucHV0VmFsdWUzNyAqIDAuMDMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTM4ICogMC4wOSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTM5ICogMC4xKSArIE51bWJlcihpbnB1dFZhbHVlNDAgKiAwLjA3KSArIE51bWJlcihpbnB1dFZhbHVlNDEgKiAwLjEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTQyICogMC4wMzYpICsgTnVtYmVyKGlucHV0VmFsdWU0MyAqIDAuMDMpICsgTnVtYmVyKGlucHV0VmFsdWU0NCAqIDAuMTQpICsgTnVtYmVyKGlucHV0VmFsdWU0NSAqIDAuMDI5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWU0NiAqIDAuMDM5KSArIE51bWJlcihpbnB1dFZhbHVlNDcgKiAwLjA1OSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTQ4ICogMC4wMjYpKyBOdW1iZXIoaW5wdXRWYWx1ZTQ5ICogMC4wMzUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKS50b0ZpeGVkKDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KE51bWJlcihpbnB1dFZhbHVlNCAqIDAuMDE1KSArIE51bWJlcihpbnB1dFZhbHVlNSAqIDAuMDE4KSArIE51bWJlcihpbnB1dFZhbHVlNiAqIDAuMDEpICsgTnVtYmVyKGlucHV0VmFsdWU3ICogMC4wMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE51bWJlcihpbnB1dFZhbHVlOCAqIDAuMDE2KSArIE51bWJlcihpbnB1dFZhbHVlOSAqIDAuMjA5KSArIE51bWJlcihpbnB1dFZhbHVlMTAgKiAwLjA2OCkgKyBOdW1iZXIoaW5wdXRWYWx1ZTExICogMC4wMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE51bWJlcihpbnB1dFZhbHVlMTIgKiAwLjEyNSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTEzICogMC4xMjUpICsgTnVtYmVyKGlucHV0VmFsdWUxNCAqIDAuMDkpICsgTnVtYmVyKGlucHV0VmFsdWUxNSAqIDUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTE2ICogMC44MykgKyBOdW1iZXIoaW5wdXRWYWx1ZTE3ICogMC4yOCkgKyBOdW1iZXIoaW5wdXRWYWx1ZTE4ICogMC4wNTUpICsgTnVtYmVyKGlucHV0VmFsdWUxOSAqIDAuMDI4KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWUyMCAqIDAuMzUpICsgTnVtYmVyKGlucHV0VmFsdWUyMSAqIDEpICsgTnVtYmVyKGlucHV0VmFsdWUyMiAqIDAuMTQpICsgTnVtYmVyKGlucHV0VmFsdWUyMyAqIDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTI0ICogMC4zMzUpICsgTnVtYmVyKGlucHV0VmFsdWUyNSAqIDAuNTQpICsgTnVtYmVyKGlucHV0VmFsdWUyNiAqIDAuNjIyKSArIE51bWJlcihpbnB1dFZhbHVlMjcgKiAwLjYwNSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE51bWJlcihpbnB1dFZhbHVlMjggKiAwLjUxNSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTI5ICogMC40MikgKyBOdW1iZXIoaW5wdXRWYWx1ZTM2ICogMC4wMSkpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm90ZWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KE51bWJlcihpbnB1dFZhbHVlMSAqIDMuNTEpICsgTnVtYmVyKGlucHV0VmFsdWUyICogMy43NCkgKyBOdW1iZXIoaW5wdXRWYWx1ZTMgKiAwLjg1KSArIE51bWJlcihpbnB1dFZhbHVlNCAqIDMuNSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE51bWJlcihpbnB1dFZhbHVlNSAqIDMuMzcpICsgTnVtYmVyKGlucHV0VmFsdWU2ICogMy40KSArIE51bWJlcihpbnB1dFZhbHVlNyAqIDMuMSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTggKiAyLjcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTkgKiAyLjg0KSArIE51bWJlcihpbnB1dFZhbHVlMTAgKiAxLjQ1KSArIE51bWJlcihpbnB1dFZhbHVlMTEgKiAwLjk1KSArIE51bWJlcihpbnB1dFZhbHVlMTIgKiAxLjE5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWUxMyAqIDEuOTEpICsgTnVtYmVyKGlucHV0VmFsdWUxNCAqIDEuNjEpICsgTnVtYmVyKGlucHV0VmFsdWUxNSAqIDU1ICogMS42MikgKyBOdW1iZXIoaW5wdXRWYWx1ZTE2ICogNy41KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWUxNyAqMC41NikgKyBOdW1iZXIoaW5wdXRWYWx1ZTE4ICogMS4xNSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTE5ICogMC41MikgKyBOdW1iZXIoaW5wdXRWYWx1ZTIwICogNSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE51bWJlcihpbnB1dFZhbHVlMjEgKiA4Ljg0KSArIE51bWJlcihpbnB1dFZhbHVlMjIgKiAxLjQ2KSArIE51bWJlcihpbnB1dFZhbHVlMjMgKiA4LjkpICsgTnVtYmVyKGlucHV0VmFsdWUyNCAqIDMuNTQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTI1ICogNi4zNCkgKyBOdW1iZXIoaW5wdXRWYWx1ZTI2KiA2Ljc3KSArIE51bWJlcihpbnB1dFZhbHVlMjcqIDYuNTcpICsgTnVtYmVyKGlucHV0VmFsdWUyOCAqIDUuODQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTI5ICogNS4zNCkgKyBOdW1iZXIoaW5wdXRWYWx1ZTMwICogMC44OSkgKyBOdW1iZXIoaW5wdXRWYWx1ZTMxICogMC41KSArIE51bWJlcihpbnB1dFZhbHVlMzIgKiAwLjQ3KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWUzMyAqIDAuMzQpICsgTnVtYmVyKGlucHV0VmFsdWUzNCAqIDAuMjgpICsgTnVtYmVyKGlucHV0VmFsdWUzNSAqIDAuNDgpICsgTnVtYmVyKGlucHV0VmFsdWUzNiAqIDIuNylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE51bWJlcihpbnB1dFZhbHVlMzcgKiAwLjIyKSArIE51bWJlcihpbnB1dFZhbHVlMzggKiAwLjQpICsgTnVtYmVyKGlucHV0VmFsdWUzOSAqIDAuNDMpICsgTnVtYmVyKGlucHV0VmFsdWU0MCAqIDAuMzQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTQxICogMC41KSArIE51bWJlcihpbnB1dFZhbHVlNDIgKiAwLjIzKSArIE51bWJlcihpbnB1dFZhbHVlNDMgKiAwLjE2KSArIE51bWJlcihpbnB1dFZhbHVlNDQgKiAwLjYxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTnVtYmVyKGlucHV0VmFsdWU0NSAqIDAuMTYpICsgTnVtYmVyKGlucHV0VmFsdWU0NiAqIDAuMTgpICsgTnVtYmVyKGlucHV0VmFsdWU0NyAqIDAuMjcpICsgTnVtYmVyKGlucHV0VmFsdWU0OCAqIDAuODUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBOdW1iZXIoaW5wdXRWYWx1ZTQ5ICogMC40MykgKyBOdW1iZXIoaW5wdXRWYWx1ZTUwICogMy41KSkudG9GaXhlZCgxKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgPC90Zm9vdD5cclxuICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICAgICAgPGRpdj57PEJhY2tUb1RvcCAvPn08L2Rpdj5cclxuICAgICAgICA8Lz5cclxuICAgIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBLYWxvcmlqZTsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xyXG4vLyBpbXBvcnQgQ2FsY3VsYXRvciBmcm9tIFwiLi9DYWxjdWxhdG9yXCI7XHJcbmltcG9ydCBEaWdpdHJvbiBmcm9tIFwiLi9EaWdpdHJvblwiXHJcblxyXG5cclxuXHJcbmNvbnN0IE9kbm9zaSA9ICgpID0+IHtcclxuXHJcbiAgICBjb25zdCBbaW5wdXRWYWx1ZTEsIHNldElucHV0VmFsdWUxXSA9IHVzZVN0YXRlKCk7XHJcbiAgICBjb25zdCBbaW5wdXRWYWx1ZTIsIHNldElucHV0VmFsdWUyXSA9IHVzZVN0YXRlKCk7XHJcbiAgICBjb25zdCBbaW5wdXRWYWx1ZTMsIHNldElucHV0VmFsdWUzXSA9IHVzZVN0YXRlKCk7XHJcbiAgICBjb25zdCBbaW5wdXRWYWx1ZTQsIHNldElucHV0VmFsdWU0XSA9IHVzZVN0YXRlKCk7XHJcbiAgICBjb25zdCBbaW5wdXRWYWx1ZTUsIHNldElucHV0VmFsdWU1XSA9IHVzZVN0YXRlKCk7XHJcbiAgICBjb25zdCBbaW5wdXRWYWx1ZTYsIHNldElucHV0VmFsdWU2XSA9IHVzZVN0YXRlKCk7XHJcbiAgICBjb25zdCBbaW5wdXRWYWx1ZTcsIHNldElucHV0VmFsdWU3XSA9IHVzZVN0YXRlKCk7XHJcbiAgICBjb25zdCBbaW5wdXRWYWx1ZTgsIHNldElucHV0VmFsdWU4XSA9IHVzZVN0YXRlKCk7XHJcbiAgICBjb25zdCBbaW5wdXRWYWx1ZTksIHNldElucHV0VmFsdWU5XSA9IHVzZVN0YXRlKCk7XHJcbiAgICBjb25zdCBbaW5wdXRWYWx1ZTEwLCBzZXRJbnB1dFZhbHVlMTBdID0gdXNlU3RhdGUoKTtcclxuLy8gb2RhdmRlIG5hIGRvbGUgdWJhY2VubyAzZCBnbGVkYW5qZVxyXG4gICAgY29uc3QgbW9kZWxSZWYgPSBSZWFjdC51c2VSZWYoKTtcclxuICAgIGNvbnN0IFthbm5vdHMsIHNldEFubm90c10gPSB1c2VTdGF0ZShbXSk7XHJcblxyXG4gICAgY29uc3QgaGFuZGxlQ2xpY2sgPSAoZXZlbnQpID0+IHtcclxuICAgICAgY29uc3QgeyBjbGllbnRYLCBjbGllbnRZIH0gPSBldmVudDtcclxuICBcclxuICAgICAgaWYgKG1vZGVsUmVmLmN1cnJlbnQpIHtcclxuICAgICAgICBsZXQgaGl0ID0gbW9kZWxSZWYuY3VycmVudC5wb3NpdGlvbkFuZE5vcm1hbEZyb21Qb2ludChjbGllbnRYLCBjbGllbnRZKTtcclxuICAgICAgICBpZiAoaGl0KSB7XHJcbiAgICAgICAgICBzZXRBbm5vdHMoKGFubm90cykgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gWy4uLmFubm90cywgaGl0XTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICBcclxuICAgIGNvbnN0IGdldERhdGFQb3NpdGlvbiA9IChhbm5vdCkgPT4ge1xyXG4gICAgICByZXR1cm4gYCR7YW5ub3QucG9zaXRpb24ueH0gJHthbm5vdC5wb3NpdGlvbi55fSAke2Fubm90LnBvc2l0aW9uLnp9YDtcclxuICAgIH07XHJcbiAgXHJcbiAgICBjb25zdCBnZXREYXRhTm9ybWFsID0gKGFubm90KSA9PiB7XHJcbiAgICAgIHJldHVybiBgJHthbm5vdC5ub3JtYWwueH0gJHthbm5vdC5ub3JtYWwueX0gJHthbm5vdC5ub3JtYWwuen1gO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBrcmFqIGRvZGF0a2EgemEgM2RcclxuXHJcblxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUxID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMShlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZVZhbHVlMiA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTIoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTMgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElucHV0VmFsdWUzKGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWU0ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlNChlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZVZhbHVlNSA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTUoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTYgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElucHV0VmFsdWU2KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWU3ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlNyhlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZVZhbHVlOCA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTgoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VWYWx1ZTkgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElucHV0VmFsdWU5KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUxMCA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTEwKGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cIm9kbm9zaVwiPlxyXG4gICAgICAgICAgICAgICAgPHRoZWFkPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNvbFNwYW49ezd9Pk9kbm9zaTwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuXHJcbiAgICAgICAgICAgICAgICA8L3RoZWFkPlxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICA8dGJvZHk+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUxfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTF9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCA+cHJlbWE8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTJ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCA+aXN0byBqZSBrYW88L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlM1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWUzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTN9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCA+cHJlbWE8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicmVsYWNpamFcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoKGlucHV0VmFsdWUzICogaW5wdXRWYWx1ZTIpIC8gaW5wdXRWYWx1ZTEpLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWU0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlNH0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkID5wcmVtYTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWU1XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlNX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkID5pc3RvIGplIGthbzwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJyZWxhY2lqYVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeygoaW5wdXRWYWx1ZTQgKiBpbnB1dFZhbHVlNikgLyBpbnB1dFZhbHVlNSkudG9GaXhlZCgxKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCA+cHJlbWE8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlNlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWU2fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTZ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQgPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgPC90Ym9keT5cclxuICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICAgXHJcbiAgICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJvZG5vc2lcIj5cclxuICAgICAgICAgICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjb2xTcGFuPXs1fT5Qcm9jZW50aTwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICA8dGJvZHk+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWU3XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlN30gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPk9kPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlOFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWU4fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VWYWx1ZTh9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Jem5vc2k8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicmVsYWNpamFcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoKGlucHV0VmFsdWU3IC8gaW5wdXRWYWx1ZTgpICogMTAwKS50b0ZpeGVkKDEpfSAlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwcm9jXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidmFsdWU5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZTl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlOX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICVcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPk9kPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInZhbHVlMTBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMTB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMTB9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Jem5vc2k8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicmVsYWNpamFcIj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KChpbnB1dFZhbHVlOSAqIGlucHV0VmFsdWUxMCkgLyAxMDApLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgIDwvdGJvZHk+XHJcblxyXG4gICAgICAgICAgICA8L3RhYmxlPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhbGNcIj5cclxuICAgICAgICAgICAgICAgPERpZ2l0cm9uIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8YnI+PC9icj5cclxuICAgICAgICAgICB7LyogZG9kYXRhayB6YSAzZCBuYSBkb2xlICovfVxyXG4gICAgICAgICAgICAgPG1vZGVsLXZpZXdlclxyXG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9zZWFyY2gtYXItZWR1L3BlcmlvZGljLXRhYmxlL2VsZW1lbnRfMDA2X2NhcmJvbi9lbGVtZW50XzAwNl9jYXJib24uZ2xiXCJcclxuICAgICAgICAgICAgLy8gICBzcmM9XCJBdXRvbWF0QmllcGkuZ2xiXCJcclxuICAgICAgICAgICAgICBzaGFkb3ctaW50ZW5zaXR5PVwiMVwiXHJcbiAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICBjYW1lcmEtY29udHJvbHNcclxuICAgICAgICAgICAgICBhclxyXG4gICAgICAgICAgICAgIGFyLW1vZGVzPVwid2VieHJcIlxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUNsaWNrfVxyXG4gICAgICAgICAgICAgIHJlZj17KHJlZikgPT4ge1xyXG4gICAgICAgICAgICAgICAgbW9kZWxSZWYuY3VycmVudCA9IHJlZjtcclxuICAgICAgICAgICAgICB9fSBcclxuICAgICAgICAgICAgY2xhc3NOYW1lPVwibW9kdWxlVmlld1wiPlxyXG4gICAgICAgICAgICAgICAge2Fubm90cy5tYXAoKGFubm90LCBpZHgpID0+IChcclxuICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICBrZXk9e2Bob3RzcG90LSR7aWR4fWB9XHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJ2aWV3LWJ1dHRvblwiXHJcbiAgICAgICAgICBzbG90PXtgaG90c3BvdC0ke2lkeH1gfVxyXG4gICAgICAgICAgZGF0YS1wb3NpdGlvbj17Z2V0RGF0YVBvc2l0aW9uKGFubm90KX1cclxuICAgICAgICAgIGRhdGEtbm9ybWFsPXtnZXREYXRhTm9ybWFsKGFubm90KX1cclxuICAgICAgICA+PC9idXR0b24+XHJcbiAgICAgICkpfVxyXG4gICAgICAgIDwvbW9kZWwtdmlld2VyPlxyXG4gICAgICAgIHsvKiBrcmFqIGRvZGF0a2EgemEgM2QgKi99XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBcclxuICAgICAgICA8Lz5cclxuICAgIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBPZG5vc2k7IiwiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmNvbnN0IE1vdGlvbkNvbmZpZ0NvbnRleHQgPSBjcmVhdGVDb250ZXh0KHtcbiAgICB0cmFuc2Zvcm1QYWdlUG9pbnQ6IChwKSA9PiBwLFxuICAgIGlzU3RhdGljOiBmYWxzZSxcbiAgICByZWR1Y2VkTW90aW9uOiBcIm5ldmVyXCIsXG59KTtcblxuZXhwb3J0IHsgTW90aW9uQ29uZmlnQ29udGV4dCB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcblxuY29uc3QgTW90aW9uQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoe30pO1xuXG5leHBvcnQgeyBNb3Rpb25Db250ZXh0IH07XG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuY29uc3QgUHJlc2VuY2VDb250ZXh0ID0gY3JlYXRlQ29udGV4dChudWxsKTtcblxuZXhwb3J0IHsgUHJlc2VuY2VDb250ZXh0IH07XG4iLCJjb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG5cbmV4cG9ydCB7IGlzQnJvd3NlciB9O1xuIiwiaW1wb3J0IHsgdXNlTGF5b3V0RWZmZWN0LCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc0Jyb3dzZXIgfSBmcm9tICcuL2lzLWJyb3dzZXIubWpzJztcblxuY29uc3QgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IGlzQnJvd3NlciA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDtcblxuZXhwb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcblxuY29uc3QgTGF6eUNvbnRleHQgPSBjcmVhdGVDb250ZXh0KHsgc3RyaWN0OiBmYWxzZSB9KTtcblxuZXhwb3J0IHsgTGF6eUNvbnRleHQgfTtcbiIsImZ1bmN0aW9uIGlzUmVmT2JqZWN0KHJlZikge1xuICAgIHJldHVybiAodHlwZW9mIHJlZiA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVmLCBcImN1cnJlbnRcIikpO1xufVxuXG5leHBvcnQgeyBpc1JlZk9iamVjdCB9O1xuIiwiLyoqXG4gKiBEZWNpZGVzIGlmIHRoZSBzdXBwbGllZCB2YXJpYWJsZSBpcyB2YXJpYW50IGxhYmVsXG4gKi9cbmZ1bmN0aW9uIGlzVmFyaWFudExhYmVsKHYpIHtcbiAgICByZXR1cm4gdHlwZW9mIHYgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSh2KTtcbn1cblxuZXhwb3J0IHsgaXNWYXJpYW50TGFiZWwgfTtcbiIsImZ1bmN0aW9uIGlzQW5pbWF0aW9uQ29udHJvbHModikge1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygdi5zdGFydCA9PT0gXCJmdW5jdGlvblwiO1xufVxuXG5leHBvcnQgeyBpc0FuaW1hdGlvbkNvbnRyb2xzIH07XG4iLCJjb25zdCB2YXJpYW50UHJpb3JpdHlPcmRlciA9IFtcbiAgICBcImFuaW1hdGVcIixcbiAgICBcIndoaWxlSW5WaWV3XCIsXG4gICAgXCJ3aGlsZUZvY3VzXCIsXG4gICAgXCJ3aGlsZUhvdmVyXCIsXG4gICAgXCJ3aGlsZVRhcFwiLFxuICAgIFwid2hpbGVEcmFnXCIsXG4gICAgXCJleGl0XCIsXG5dO1xuY29uc3QgdmFyaWFudFByb3BzID0gW1wiaW5pdGlhbFwiLCAuLi52YXJpYW50UHJpb3JpdHlPcmRlcl07XG5cbmV4cG9ydCB7IHZhcmlhbnRQcmlvcml0eU9yZGVyLCB2YXJpYW50UHJvcHMgfTtcbiIsImltcG9ydCB7IGlzQW5pbWF0aW9uQ29udHJvbHMgfSBmcm9tICcuLi8uLi9hbmltYXRpb24vdXRpbHMvaXMtYW5pbWF0aW9uLWNvbnRyb2xzLm1qcyc7XG5pbXBvcnQgeyBpc1ZhcmlhbnRMYWJlbCB9IGZyb20gJy4vaXMtdmFyaWFudC1sYWJlbC5tanMnO1xuaW1wb3J0IHsgdmFyaWFudFByb3BzIH0gZnJvbSAnLi92YXJpYW50LXByb3BzLm1qcyc7XG5cbmZ1bmN0aW9uIGlzQ29udHJvbGxpbmdWYXJpYW50cyhwcm9wcykge1xuICAgIHJldHVybiAoaXNBbmltYXRpb25Db250cm9scyhwcm9wcy5hbmltYXRlKSB8fFxuICAgICAgICB2YXJpYW50UHJvcHMuc29tZSgobmFtZSkgPT4gaXNWYXJpYW50TGFiZWwocHJvcHNbbmFtZV0pKSk7XG59XG5mdW5jdGlvbiBpc1ZhcmlhbnROb2RlKHByb3BzKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4oaXNDb250cm9sbGluZ1ZhcmlhbnRzKHByb3BzKSB8fCBwcm9wcy52YXJpYW50cyk7XG59XG5cbmV4cG9ydCB7IGlzQ29udHJvbGxpbmdWYXJpYW50cywgaXNWYXJpYW50Tm9kZSB9O1xuIiwiaW1wb3J0IHsgdXNlQ29udGV4dCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE1vdGlvbkNvbnRleHQgfSBmcm9tICcuL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBnZXRDdXJyZW50VHJlZVZhcmlhbnRzIH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5mdW5jdGlvbiB1c2VDcmVhdGVNb3Rpb25Db250ZXh0KHByb3BzKSB7XG4gICAgY29uc3QgeyBpbml0aWFsLCBhbmltYXRlIH0gPSBnZXRDdXJyZW50VHJlZVZhcmlhbnRzKHByb3BzLCB1c2VDb250ZXh0KE1vdGlvbkNvbnRleHQpKTtcbiAgICByZXR1cm4gdXNlTWVtbygoKSA9PiAoeyBpbml0aWFsLCBhbmltYXRlIH0pLCBbdmFyaWFudExhYmVsc0FzRGVwZW5kZW5jeShpbml0aWFsKSwgdmFyaWFudExhYmVsc0FzRGVwZW5kZW5jeShhbmltYXRlKV0pO1xufVxuZnVuY3Rpb24gdmFyaWFudExhYmVsc0FzRGVwZW5kZW5jeShwcm9wKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocHJvcCkgPyBwcm9wLmpvaW4oXCIgXCIpIDogcHJvcDtcbn1cblxuZXhwb3J0IHsgdXNlQ3JlYXRlTW90aW9uQ29udGV4dCB9O1xuIiwiY29uc3QgZmVhdHVyZVByb3BzID0ge1xuICAgIGFuaW1hdGlvbjogW1xuICAgICAgICBcImFuaW1hdGVcIixcbiAgICAgICAgXCJ2YXJpYW50c1wiLFxuICAgICAgICBcIndoaWxlSG92ZXJcIixcbiAgICAgICAgXCJ3aGlsZVRhcFwiLFxuICAgICAgICBcImV4aXRcIixcbiAgICAgICAgXCJ3aGlsZUluVmlld1wiLFxuICAgICAgICBcIndoaWxlRm9jdXNcIixcbiAgICAgICAgXCJ3aGlsZURyYWdcIixcbiAgICBdLFxuICAgIGV4aXQ6IFtcImV4aXRcIl0sXG4gICAgZHJhZzogW1wiZHJhZ1wiLCBcImRyYWdDb250cm9sc1wiXSxcbiAgICBmb2N1czogW1wid2hpbGVGb2N1c1wiXSxcbiAgICBob3ZlcjogW1wid2hpbGVIb3ZlclwiLCBcIm9uSG92ZXJTdGFydFwiLCBcIm9uSG92ZXJFbmRcIl0sXG4gICAgdGFwOiBbXCJ3aGlsZVRhcFwiLCBcIm9uVGFwXCIsIFwib25UYXBTdGFydFwiLCBcIm9uVGFwQ2FuY2VsXCJdLFxuICAgIHBhbjogW1wib25QYW5cIiwgXCJvblBhblN0YXJ0XCIsIFwib25QYW5TZXNzaW9uU3RhcnRcIiwgXCJvblBhbkVuZFwiXSxcbiAgICBpblZpZXc6IFtcIndoaWxlSW5WaWV3XCIsIFwib25WaWV3cG9ydEVudGVyXCIsIFwib25WaWV3cG9ydExlYXZlXCJdLFxuICAgIGxheW91dDogW1wibGF5b3V0XCIsIFwibGF5b3V0SWRcIl0sXG59O1xuY29uc3QgZmVhdHVyZURlZmluaXRpb25zID0ge307XG5mb3IgKGNvbnN0IGtleSBpbiBmZWF0dXJlUHJvcHMpIHtcbiAgICBmZWF0dXJlRGVmaW5pdGlvbnNba2V5XSA9IHtcbiAgICAgICAgaXNFbmFibGVkOiAocHJvcHMpID0+IGZlYXR1cmVQcm9wc1trZXldLnNvbWUoKG5hbWUpID0+ICEhcHJvcHNbbmFtZV0pLFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGZlYXR1cmVEZWZpbml0aW9ucyB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcblxuY29uc3QgTGF5b3V0R3JvdXBDb250ZXh0ID0gY3JlYXRlQ29udGV4dCh7fSk7XG5cbmV4cG9ydCB7IExheW91dEdyb3VwQ29udGV4dCB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBJbnRlcm5hbCwgZXhwb3J0ZWQgb25seSBmb3IgdXNhZ2UgaW4gRnJhbWVyXG4gKi9cbmNvbnN0IFN3aXRjaExheW91dEdyb3VwQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoe30pO1xuXG5leHBvcnQgeyBTd2l0Y2hMYXlvdXRHcm91cENvbnRleHQgfTtcbiIsImNvbnN0IG1vdGlvbkNvbXBvbmVudFN5bWJvbCA9IFN5bWJvbC5mb3IoXCJtb3Rpb25Db21wb25lbnRTeW1ib2xcIik7XG5cbmV4cG9ydCB7IG1vdGlvbkNvbXBvbmVudFN5bWJvbCB9O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZm9yd2FyZFJlZiwgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE1vdGlvbkNvbmZpZ0NvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L01vdGlvbkNvbmZpZ0NvbnRleHQubWpzJztcbmltcG9ydCB7IE1vdGlvbkNvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L01vdGlvbkNvbnRleHQvaW5kZXgubWpzJztcbmltcG9ydCB7IHVzZVZpc3VhbEVsZW1lbnQgfSBmcm9tICcuL3V0aWxzL3VzZS12aXN1YWwtZWxlbWVudC5tanMnO1xuaW1wb3J0IHsgdXNlTW90aW9uUmVmIH0gZnJvbSAnLi91dGlscy91c2UtbW90aW9uLXJlZi5tanMnO1xuaW1wb3J0IHsgdXNlQ3JlYXRlTW90aW9uQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQvTW90aW9uQ29udGV4dC9jcmVhdGUubWpzJztcbmltcG9ydCB7IGxvYWRGZWF0dXJlcyB9IGZyb20gJy4vZmVhdHVyZXMvbG9hZC1mZWF0dXJlcy5tanMnO1xuaW1wb3J0IHsgaXNCcm93c2VyIH0gZnJvbSAnLi4vdXRpbHMvaXMtYnJvd3Nlci5tanMnO1xuaW1wb3J0IHsgTGF5b3V0R3JvdXBDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9MYXlvdXRHcm91cENvbnRleHQubWpzJztcbmltcG9ydCB7IExhenlDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9MYXp5Q29udGV4dC5tanMnO1xuaW1wb3J0IHsgU3dpdGNoTGF5b3V0R3JvdXBDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9Td2l0Y2hMYXlvdXRHcm91cENvbnRleHQubWpzJztcbmltcG9ydCB7IG1vdGlvbkNvbXBvbmVudFN5bWJvbCB9IGZyb20gJy4vdXRpbHMvc3ltYm9sLm1qcyc7XG5cbi8qKlxuICogQ3JlYXRlIGEgYG1vdGlvbmAgY29tcG9uZW50LlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhIENvbXBvbmVudCBhcmd1bWVudCwgd2hpY2ggY2FuIGJlIGVpdGhlciBhIHN0cmluZyAoaWUgXCJkaXZcIlxuICogZm9yIGBtb3Rpb24uZGl2YCksIG9yIGFuIGFjdHVhbCBSZWFjdCBjb21wb25lbnQuXG4gKlxuICogQWxvbmdzaWRlIHRoaXMgaXMgYSBjb25maWcgb3B0aW9uIHdoaWNoIHByb3ZpZGVzIGEgd2F5IG9mIHJlbmRlcmluZyB0aGUgcHJvdmlkZWRcbiAqIGNvbXBvbmVudCBcIm9mZmxpbmVcIiwgb3Igb3V0c2lkZSB0aGUgUmVhY3QgcmVuZGVyIGN5Y2xlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVNb3Rpb25Db21wb25lbnQoeyBwcmVsb2FkZWRGZWF0dXJlcywgY3JlYXRlVmlzdWFsRWxlbWVudCwgdXNlUmVuZGVyLCB1c2VWaXN1YWxTdGF0ZSwgQ29tcG9uZW50LCB9KSB7XG4gICAgcHJlbG9hZGVkRmVhdHVyZXMgJiYgbG9hZEZlYXR1cmVzKHByZWxvYWRlZEZlYXR1cmVzKTtcbiAgICBmdW5jdGlvbiBNb3Rpb25Db21wb25lbnQocHJvcHMsIGV4dGVybmFsUmVmKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB3ZSBuZWVkIHRvIG1lYXN1cmUgdGhlIGVsZW1lbnQgd2UgbG9hZCB0aGlzIGZ1bmN0aW9uYWxpdHkgaW4gYVxuICAgICAgICAgKiBzZXBhcmF0ZSBjbGFzcyBjb21wb25lbnQgaW4gb3JkZXIgdG8gZ2FpbiBhY2Nlc3MgdG8gZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUuXG4gICAgICAgICAqL1xuICAgICAgICBsZXQgTWVhc3VyZUxheW91dDtcbiAgICAgICAgY29uc3QgY29uZmlnQW5kUHJvcHMgPSB7XG4gICAgICAgICAgICAuLi51c2VDb250ZXh0KE1vdGlvbkNvbmZpZ0NvbnRleHQpLFxuICAgICAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgICAgICBsYXlvdXRJZDogdXNlTGF5b3V0SWQocHJvcHMpLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB7IGlzU3RhdGljIH0gPSBjb25maWdBbmRQcm9wcztcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHVzZUNyZWF0ZU1vdGlvbkNvbnRleHQocHJvcHMpO1xuICAgICAgICBjb25zdCB2aXN1YWxTdGF0ZSA9IHVzZVZpc3VhbFN0YXRlKHByb3BzLCBpc1N0YXRpYyk7XG4gICAgICAgIGlmICghaXNTdGF0aWMgJiYgaXNCcm93c2VyKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZSBhIFZpc3VhbEVsZW1lbnQgZm9yIHRoaXMgY29tcG9uZW50LiBBIFZpc3VhbEVsZW1lbnQgcHJvdmlkZXMgYSBjb21tb25cbiAgICAgICAgICAgICAqIGludGVyZmFjZSB0byByZW5kZXJlci1zcGVjaWZpYyBBUElzIChpZSBET00vVGhyZWUuanMgZXRjKSBhcyB3ZWxsIGFzXG4gICAgICAgICAgICAgKiBwcm92aWRpbmcgYSB3YXkgb2YgcmVuZGVyaW5nIHRvIHRoZXNlIEFQSXMgb3V0c2lkZSBvZiB0aGUgUmVhY3QgcmVuZGVyIGxvb3BcbiAgICAgICAgICAgICAqIGZvciBtb3JlIHBlcmZvcm1hbnQgYW5pbWF0aW9ucyBhbmQgaW50ZXJhY3Rpb25zXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnRleHQudmlzdWFsRWxlbWVudCA9IHVzZVZpc3VhbEVsZW1lbnQoQ29tcG9uZW50LCB2aXN1YWxTdGF0ZSwgY29uZmlnQW5kUHJvcHMsIGNyZWF0ZVZpc3VhbEVsZW1lbnQpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBMb2FkIE1vdGlvbiBnZXN0dXJlIGFuZCBhbmltYXRpb24gZmVhdHVyZXMuIFRoZXNlIGFyZSByZW5kZXJlZCBhcyByZW5kZXJsZXNzXG4gICAgICAgICAgICAgKiBjb21wb25lbnRzIHNvIGVhY2ggZmVhdHVyZSBjYW4gb3B0aW9uYWxseSBtYWtlIHVzZSBvZiBSZWFjdCBsaWZlY3ljbGUgbWV0aG9kcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgaW5pdGlhbExheW91dEdyb3VwQ29uZmlnID0gdXNlQ29udGV4dChTd2l0Y2hMYXlvdXRHcm91cENvbnRleHQpO1xuICAgICAgICAgICAgY29uc3QgaXNTdHJpY3QgPSB1c2VDb250ZXh0KExhenlDb250ZXh0KS5zdHJpY3Q7XG4gICAgICAgICAgICBpZiAoY29udGV4dC52aXN1YWxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgTWVhc3VyZUxheW91dCA9IGNvbnRleHQudmlzdWFsRWxlbWVudC5sb2FkRmVhdHVyZXMoXG4gICAgICAgICAgICAgICAgLy8gTm90ZTogUGFzcyB0aGUgZnVsbCBuZXcgY29tYmluZWQgcHJvcHMgdG8gY29ycmVjdGx5IHJlLXJlbmRlciBkeW5hbWljIGZlYXR1cmUgY29tcG9uZW50cy5cbiAgICAgICAgICAgICAgICBjb25maWdBbmRQcm9wcywgaXNTdHJpY3QsIHByZWxvYWRlZEZlYXR1cmVzLCBpbml0aWFsTGF5b3V0R3JvdXBDb25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbW91bnQgb3JkZXIgYW5kIGhpZXJhcmNoeSBpcyBzcGVjaWZpYyB0byBlbnN1cmUgb3VyIGVsZW1lbnQgcmVmXG4gICAgICAgICAqIGlzIGh5ZHJhdGVkIGJ5IHRoZSB0aW1lIGZlYXR1cmVzIGZpcmUgdGhlaXIgZWZmZWN0cy5cbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChNb3Rpb25Db250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBjb250ZXh0IH0sXG4gICAgICAgICAgICBNZWFzdXJlTGF5b3V0ICYmIGNvbnRleHQudmlzdWFsRWxlbWVudCA/IChSZWFjdC5jcmVhdGVFbGVtZW50KE1lYXN1cmVMYXlvdXQsIHsgdmlzdWFsRWxlbWVudDogY29udGV4dC52aXN1YWxFbGVtZW50LCAuLi5jb25maWdBbmRQcm9wcyB9KSkgOiBudWxsLFxuICAgICAgICAgICAgdXNlUmVuZGVyKENvbXBvbmVudCwgcHJvcHMsIHVzZU1vdGlvblJlZih2aXN1YWxTdGF0ZSwgY29udGV4dC52aXN1YWxFbGVtZW50LCBleHRlcm5hbFJlZiksIHZpc3VhbFN0YXRlLCBpc1N0YXRpYywgY29udGV4dC52aXN1YWxFbGVtZW50KSkpO1xuICAgIH1cbiAgICBjb25zdCBGb3J3YXJkUmVmQ29tcG9uZW50ID0gZm9yd2FyZFJlZihNb3Rpb25Db21wb25lbnQpO1xuICAgIEZvcndhcmRSZWZDb21wb25lbnRbbW90aW9uQ29tcG9uZW50U3ltYm9sXSA9IENvbXBvbmVudDtcbiAgICByZXR1cm4gRm9yd2FyZFJlZkNvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIHVzZUxheW91dElkKHsgbGF5b3V0SWQgfSkge1xuICAgIGNvbnN0IGxheW91dEdyb3VwSWQgPSB1c2VDb250ZXh0KExheW91dEdyb3VwQ29udGV4dCkuaWQ7XG4gICAgcmV0dXJuIGxheW91dEdyb3VwSWQgJiYgbGF5b3V0SWQgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IGxheW91dEdyb3VwSWQgKyBcIi1cIiArIGxheW91dElkXG4gICAgICAgIDogbGF5b3V0SWQ7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZU1vdGlvbkNvbXBvbmVudCB9O1xuIiwiaW1wb3J0IHsgZmVhdHVyZURlZmluaXRpb25zIH0gZnJvbSAnLi9kZWZpbml0aW9ucy5tanMnO1xuXG5mdW5jdGlvbiBsb2FkRmVhdHVyZXMoZmVhdHVyZXMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBmZWF0dXJlcykge1xuICAgICAgICBmZWF0dXJlRGVmaW5pdGlvbnNba2V5XSA9IHtcbiAgICAgICAgICAgIC4uLmZlYXR1cmVEZWZpbml0aW9uc1trZXldLFxuICAgICAgICAgICAgLi4uZmVhdHVyZXNba2V5XSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IGxvYWRGZWF0dXJlcyB9O1xuIiwiaW1wb3J0IHsgaXNWYXJpYW50TGFiZWwgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXRpbHMvaXMtdmFyaWFudC1sYWJlbC5tanMnO1xuaW1wb3J0IHsgaXNDb250cm9sbGluZ1ZhcmlhbnRzIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3V0aWxzL2lzLWNvbnRyb2xsaW5nLXZhcmlhbnRzLm1qcyc7XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRUcmVlVmFyaWFudHMocHJvcHMsIGNvbnRleHQpIHtcbiAgICBpZiAoaXNDb250cm9sbGluZ1ZhcmlhbnRzKHByb3BzKSkge1xuICAgICAgICBjb25zdCB7IGluaXRpYWwsIGFuaW1hdGUgfSA9IHByb3BzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5pdGlhbDogaW5pdGlhbCA9PT0gZmFsc2UgfHwgaXNWYXJpYW50TGFiZWwoaW5pdGlhbClcbiAgICAgICAgICAgICAgICA/IGluaXRpYWxcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFuaW1hdGU6IGlzVmFyaWFudExhYmVsKGFuaW1hdGUpID8gYW5pbWF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHByb3BzLmluaGVyaXQgIT09IGZhbHNlID8gY29udGV4dCA6IHt9O1xufVxuXG5leHBvcnQgeyBnZXRDdXJyZW50VHJlZVZhcmlhbnRzIH07XG4iLCJpbXBvcnQgeyB1c2VDb250ZXh0LCB1c2VSZWYsIHVzZUluc2VydGlvbkVmZmVjdCwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUHJlc2VuY2VDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9QcmVzZW5jZUNvbnRleHQubWpzJztcbmltcG9ydCB7IE1vdGlvbkNvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L01vdGlvbkNvbnRleHQvaW5kZXgubWpzJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi8uLi91dGlscy91c2UtaXNvbW9ycGhpYy1lZmZlY3QubWpzJztcbmltcG9ydCB7IExhenlDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9MYXp5Q29udGV4dC5tanMnO1xuaW1wb3J0IHsgTW90aW9uQ29uZmlnQ29udGV4dCB9IGZyb20gJy4uLy4uL2NvbnRleHQvTW90aW9uQ29uZmlnQ29udGV4dC5tanMnO1xuXG5mdW5jdGlvbiB1c2VWaXN1YWxFbGVtZW50KENvbXBvbmVudCwgdmlzdWFsU3RhdGUsIHByb3BzLCBjcmVhdGVWaXN1YWxFbGVtZW50KSB7XG4gICAgY29uc3QgeyB2aXN1YWxFbGVtZW50OiBwYXJlbnQgfSA9IHVzZUNvbnRleHQoTW90aW9uQ29udGV4dCk7XG4gICAgY29uc3QgbGF6eUNvbnRleHQgPSB1c2VDb250ZXh0KExhenlDb250ZXh0KTtcbiAgICBjb25zdCBwcmVzZW5jZUNvbnRleHQgPSB1c2VDb250ZXh0KFByZXNlbmNlQ29udGV4dCk7XG4gICAgY29uc3QgcmVkdWNlZE1vdGlvbkNvbmZpZyA9IHVzZUNvbnRleHQoTW90aW9uQ29uZmlnQ29udGV4dCkucmVkdWNlZE1vdGlvbjtcbiAgICBjb25zdCB2aXN1YWxFbGVtZW50UmVmID0gdXNlUmVmKCk7XG4gICAgLyoqXG4gICAgICogSWYgd2UgaGF2ZW4ndCBwcmVsb2FkZWQgYSByZW5kZXJlciwgY2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgb25lIGxhenktbG9hZGVkXG4gICAgICovXG4gICAgY3JlYXRlVmlzdWFsRWxlbWVudCA9IGNyZWF0ZVZpc3VhbEVsZW1lbnQgfHwgbGF6eUNvbnRleHQucmVuZGVyZXI7XG4gICAgaWYgKCF2aXN1YWxFbGVtZW50UmVmLmN1cnJlbnQgJiYgY3JlYXRlVmlzdWFsRWxlbWVudCkge1xuICAgICAgICB2aXN1YWxFbGVtZW50UmVmLmN1cnJlbnQgPSBjcmVhdGVWaXN1YWxFbGVtZW50KENvbXBvbmVudCwge1xuICAgICAgICAgICAgdmlzdWFsU3RhdGUsXG4gICAgICAgICAgICBwYXJlbnQsXG4gICAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICAgIHByZXNlbmNlQ29udGV4dCxcbiAgICAgICAgICAgIGJsb2NrSW5pdGlhbEFuaW1hdGlvbjogcHJlc2VuY2VDb250ZXh0XG4gICAgICAgICAgICAgICAgPyBwcmVzZW5jZUNvbnRleHQuaW5pdGlhbCA9PT0gZmFsc2VcbiAgICAgICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgcmVkdWNlZE1vdGlvbkNvbmZpZyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHZpc3VhbEVsZW1lbnQgPSB2aXN1YWxFbGVtZW50UmVmLmN1cnJlbnQ7XG4gICAgdXNlSW5zZXJ0aW9uRWZmZWN0KCgpID0+IHtcbiAgICAgICAgdmlzdWFsRWxlbWVudCAmJiB2aXN1YWxFbGVtZW50LnVwZGF0ZShwcm9wcywgcHJlc2VuY2VDb250ZXh0KTtcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBDYWNoZSB0aGlzIHZhbHVlIGFzIHdlIHdhbnQgdG8ga25vdyB3aGV0aGVyIEhhbmRvZmZBcHBlYXJBbmltYXRpb25zXG4gICAgICogd2FzIHByZXNlbnQgb24gaW5pdGlhbCByZW5kZXIgLSBpdCB3aWxsIGJlIGRlbGV0ZWQgYWZ0ZXIgdGhpcy5cbiAgICAgKi9cbiAgICBjb25zdCBjYW5IYW5kb2ZmID0gdXNlUmVmKEJvb2xlYW4od2luZG93LkhhbmRvZmZBcHBlYXJBbmltYXRpb25zKSk7XG4gICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghdmlzdWFsRWxlbWVudClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmlzdWFsRWxlbWVudC5yZW5kZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElkZWFsbHkgdGhpcyBmdW5jdGlvbiB3b3VsZCBhbHdheXMgcnVuIGluIGEgdXNlRWZmZWN0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBIb3dldmVyLCBpZiB3ZSBoYXZlIG9wdGltaXNlZCBhcHBlYXIgYW5pbWF0aW9ucyB0byBoYW5kb2ZmIGZyb20sXG4gICAgICAgICAqIGl0IG5lZWRzIHRvIGhhcHBlbiBzeW5jaHJvbm91c2x5IHRvIGVuc3VyZSB0aGVyZSdzIG5vIGZsYXNoIG9mXG4gICAgICAgICAqIGluY29ycmVjdCBzdHlsZXMgaW4gdGhlIGV2ZW50IG9mIGEgaHlkcmF0aW9uIGVycm9yLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTbyBpZiB3ZSBkZXRlY3QgYSBzaXR1dGF0aW9uIHdoZXJlIG9wdGltaXNlZCBhcHBlYXIgYW5pbWF0aW9uc1xuICAgICAgICAgKiBhcmUgcnVubmluZywgd2UgdXNlIHVzZUxheW91dEVmZmVjdCB0byB0cmlnZ2VyIGFuaW1hdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoY2FuSGFuZG9mZi5jdXJyZW50ICYmIHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpIHtcbiAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUuYW5pbWF0ZUNoYW5nZXMoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghdmlzdWFsRWxlbWVudClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmlzdWFsRWxlbWVudC51cGRhdGVGZWF0dXJlcygpO1xuICAgICAgICBpZiAoIWNhbkhhbmRvZmYuY3VycmVudCAmJiB2aXN1YWxFbGVtZW50LmFuaW1hdGlvblN0YXRlKSB7XG4gICAgICAgICAgICB2aXN1YWxFbGVtZW50LmFuaW1hdGlvblN0YXRlLmFuaW1hdGVDaGFuZ2VzKCk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9uY2Ugd2UndmUgaGFuZGVkIG9mZiBhbmltYXRpb25zIHdlIGNhbiBkZWxldGUgSGFuZG9mZkFwcGVhckFuaW1hdGlvbnNcbiAgICAgICAgICogc28gY29tcG9uZW50cyBhZGRlZCBhZnRlciB0aGUgaW5pdGlhbCByZW5kZXIgY2FuIGFuaW1hdGUgY2hhbmdlc1xuICAgICAgICAgKiBpbiB1c2VFZmZlY3QgdnMgdXNlTGF5b3V0RWZmZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgd2luZG93LkhhbmRvZmZBcHBlYXJBbmltYXRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICBjYW5IYW5kb2ZmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICB9KTtcbiAgICByZXR1cm4gdmlzdWFsRWxlbWVudDtcbn1cblxuZXhwb3J0IHsgdXNlVmlzdWFsRWxlbWVudCB9O1xuIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc1JlZk9iamVjdCB9IGZyb20gJy4uLy4uL3V0aWxzL2lzLXJlZi1vYmplY3QubWpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgcmVmIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLCBoeWRyYXRlcyB0aGUgcHJvdmlkZWRcbiAqIGV4dGVybmFsIHJlZiBhbmQgVmlzdWFsRWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gdXNlTW90aW9uUmVmKHZpc3VhbFN0YXRlLCB2aXN1YWxFbGVtZW50LCBleHRlcm5hbFJlZikge1xuICAgIHJldHVybiB1c2VDYWxsYmFjaygoaW5zdGFuY2UpID0+IHtcbiAgICAgICAgaW5zdGFuY2UgJiYgdmlzdWFsU3RhdGUubW91bnQgJiYgdmlzdWFsU3RhdGUubW91bnQoaW5zdGFuY2UpO1xuICAgICAgICBpZiAodmlzdWFsRWxlbWVudCkge1xuICAgICAgICAgICAgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICA/IHZpc3VhbEVsZW1lbnQubW91bnQoaW5zdGFuY2UpXG4gICAgICAgICAgICAgICAgOiB2aXN1YWxFbGVtZW50LnVubW91bnQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXh0ZXJuYWxSZWYpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXh0ZXJuYWxSZWYgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGV4dGVybmFsUmVmKGluc3RhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUmVmT2JqZWN0KGV4dGVybmFsUmVmKSkge1xuICAgICAgICAgICAgICAgIGV4dGVybmFsUmVmLmN1cnJlbnQgPSBpbnN0YW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIE9ubHkgcGFzcyBhIG5ldyByZWYgY2FsbGJhY2sgdG8gUmVhY3QgaWYgd2UndmUgcmVjZWl2ZWQgYSB2aXN1YWwgZWxlbWVudFxuICAgICAqIGZhY3RvcnkuIE90aGVyd2lzZSB3ZSdsbCBiZSBtb3VudGluZy9yZW1vdW50aW5nIGV2ZXJ5IHRpbWUgZXh0ZXJuYWxSZWZcbiAgICAgKiBvciBvdGhlciBkZXBlbmRlbmNpZXMgY2hhbmdlLlxuICAgICAqL1xuICAgIFt2aXN1YWxFbGVtZW50XSk7XG59XG5cbmV4cG9ydCB7IHVzZU1vdGlvblJlZiB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlTW90aW9uQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbW90aW9uL2luZGV4Lm1qcyc7XG5cbi8qKlxuICogQ29udmVydCBhbnkgUmVhY3QgY29tcG9uZW50IGludG8gYSBgbW90aW9uYCBjb21wb25lbnQuIFRoZSBwcm92aWRlZCBjb21wb25lbnRcbiAqICoqbXVzdCoqIHVzZSBgUmVhY3QuZm9yd2FyZFJlZmAgdG8gdGhlIHVuZGVybHlpbmcgRE9NIGNvbXBvbmVudCB5b3Ugd2FudCB0byBhbmltYXRlLlxuICpcbiAqIGBgYGpzeFxuICogY29uc3QgQ29tcG9uZW50ID0gUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICogICByZXR1cm4gPGRpdiByZWY9e3JlZn0gLz5cbiAqIH0pXG4gKlxuICogY29uc3QgTW90aW9uQ29tcG9uZW50ID0gbW90aW9uKENvbXBvbmVudClcbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gY3JlYXRlTW90aW9uUHJveHkoY3JlYXRlQ29uZmlnKSB7XG4gICAgZnVuY3Rpb24gY3VzdG9tKENvbXBvbmVudCwgY3VzdG9tTW90aW9uQ29tcG9uZW50Q29uZmlnID0ge30pIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZU1vdGlvbkNvbXBvbmVudChjcmVhdGVDb25maWcoQ29tcG9uZW50LCBjdXN0b21Nb3Rpb25Db21wb25lbnRDb25maWcpKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gY3VzdG9tO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIGNhY2hlIG9mIGdlbmVyYXRlZCBgbW90aW9uYCBjb21wb25lbnRzLCBlLmcgYG1vdGlvbi5kaXZgLCBgbW90aW9uLmlucHV0YCBldGMuXG4gICAgICogUmF0aGVyIHRoYW4gZ2VuZXJhdGluZyB0aGVtIGFuZXcgZXZlcnkgcmVuZGVyLlxuICAgICAqL1xuICAgIGNvbnN0IGNvbXBvbmVudENhY2hlID0gbmV3IE1hcCgpO1xuICAgIHJldHVybiBuZXcgUHJveHkoY3VzdG9tLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsZWQgd2hlbiBgbW90aW9uYCBpcyByZWZlcmVuY2VkIHdpdGggYSBwcm9wOiBgbW90aW9uLmRpdmAsIGBtb3Rpb24uaW5wdXRgIGV0Yy5cbiAgICAgICAgICogVGhlIHByb3AgbmFtZSBpcyBwYXNzZWQgdGhyb3VnaCBhcyBga2V5YCBhbmQgd2UgY2FuIHVzZSB0aGF0IHRvIGdlbmVyYXRlIGEgYG1vdGlvbmBcbiAgICAgICAgICogRE9NIGNvbXBvbmVudCB3aXRoIHRoYXQgbmFtZS5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogKF90YXJnZXQsIGtleSkgPT4ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIGVsZW1lbnQgZG9lc24ndCBleGlzdCBpbiB0aGUgY29tcG9uZW50IGNhY2hlLCBjcmVhdGUgaXQgYW5kIGNhY2hlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoIWNvbXBvbmVudENhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50Q2FjaGUuc2V0KGtleSwgY3VzdG9tKGtleSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudENhY2hlLmdldChrZXkpO1xuICAgICAgICB9LFxuICAgIH0pO1xufVxuXG5leHBvcnQgeyBjcmVhdGVNb3Rpb25Qcm94eSB9O1xuIiwiLyoqXG4gKiBXZSBrZWVwIHRoZXNlIGxpc3RlZCBzZXBlcmF0ZWx5IGFzIHdlIHVzZSB0aGUgbG93ZXJjYXNlIHRhZyBuYW1lcyBhcyBwYXJ0XG4gKiBvZiB0aGUgcnVudGltZSBidW5kbGUgdG8gZGV0ZWN0IFNWRyBjb21wb25lbnRzXG4gKi9cbmNvbnN0IGxvd2VyY2FzZVNWR0VsZW1lbnRzID0gW1xuICAgIFwiYW5pbWF0ZVwiLFxuICAgIFwiY2lyY2xlXCIsXG4gICAgXCJkZWZzXCIsXG4gICAgXCJkZXNjXCIsXG4gICAgXCJlbGxpcHNlXCIsXG4gICAgXCJnXCIsXG4gICAgXCJpbWFnZVwiLFxuICAgIFwibGluZVwiLFxuICAgIFwiZmlsdGVyXCIsXG4gICAgXCJtYXJrZXJcIixcbiAgICBcIm1hc2tcIixcbiAgICBcIm1ldGFkYXRhXCIsXG4gICAgXCJwYXRoXCIsXG4gICAgXCJwYXR0ZXJuXCIsXG4gICAgXCJwb2x5Z29uXCIsXG4gICAgXCJwb2x5bGluZVwiLFxuICAgIFwicmVjdFwiLFxuICAgIFwic3RvcFwiLFxuICAgIFwic3dpdGNoXCIsXG4gICAgXCJzeW1ib2xcIixcbiAgICBcInN2Z1wiLFxuICAgIFwidGV4dFwiLFxuICAgIFwidHNwYW5cIixcbiAgICBcInVzZVwiLFxuICAgIFwidmlld1wiLFxuXTtcblxuZXhwb3J0IHsgbG93ZXJjYXNlU1ZHRWxlbWVudHMgfTtcbiIsImltcG9ydCB7IGxvd2VyY2FzZVNWR0VsZW1lbnRzIH0gZnJvbSAnLi4vLi4vc3ZnL2xvd2VyY2FzZS1lbGVtZW50cy5tanMnO1xuXG5mdW5jdGlvbiBpc1NWR0NvbXBvbmVudChDb21wb25lbnQpIHtcbiAgICBpZiAoXG4gICAgLyoqXG4gICAgICogSWYgaXQncyBub3QgYSBzdHJpbmcsIGl0J3MgYSBjdXN0b20gUmVhY3QgY29tcG9uZW50LiBDdXJyZW50bHkgd2Ugb25seSBzdXBwb3J0XG4gICAgICogSFRNTCBjdXN0b20gUmVhY3QgY29tcG9uZW50cy5cbiAgICAgKi9cbiAgICB0eXBlb2YgQ29tcG9uZW50ICE9PSBcInN0cmluZ1wiIHx8XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBpdCBjb250YWlucyBhIGRhc2gsIHRoZSBlbGVtZW50IGlzIGEgY3VzdG9tIEhUTUwgd2ViY29tcG9uZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgQ29tcG9uZW50LmluY2x1ZGVzKFwiLVwiKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsc2UgaWYgKFxuICAgIC8qKlxuICAgICAqIElmIGl0J3MgaW4gb3VyIGxpc3Qgb2YgbG93ZXJjYXNlIFNWRyB0YWdzLCBpdCdzIGFuIFNWRyBjb21wb25lbnRcbiAgICAgKi9cbiAgICBsb3dlcmNhc2VTVkdFbGVtZW50cy5pbmRleE9mKENvbXBvbmVudCkgPiAtMSB8fFxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgaXQgY29udGFpbnMgYSBjYXBpdGFsIGxldHRlciwgaXQncyBhbiBTVkcgY29tcG9uZW50XG4gICAgICAgICAqL1xuICAgICAgICAvW0EtWl0vLnRlc3QoQ29tcG9uZW50KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgeyBpc1NWR0NvbXBvbmVudCB9O1xuIiwiY29uc3Qgc2NhbGVDb3JyZWN0b3JzID0ge307XG5mdW5jdGlvbiBhZGRTY2FsZUNvcnJlY3Rvcihjb3JyZWN0b3JzKSB7XG4gICAgT2JqZWN0LmFzc2lnbihzY2FsZUNvcnJlY3RvcnMsIGNvcnJlY3RvcnMpO1xufVxuXG5leHBvcnQgeyBhZGRTY2FsZUNvcnJlY3Rvciwgc2NhbGVDb3JyZWN0b3JzIH07XG4iLCIvKipcbiAqIEdlbmVyYXRlIGEgbGlzdCBvZiBldmVyeSBwb3NzaWJsZSB0cmFuc2Zvcm0ga2V5LlxuICovXG5jb25zdCB0cmFuc2Zvcm1Qcm9wT3JkZXIgPSBbXG4gICAgXCJ0cmFuc2Zvcm1QZXJzcGVjdGl2ZVwiLFxuICAgIFwieFwiLFxuICAgIFwieVwiLFxuICAgIFwielwiLFxuICAgIFwidHJhbnNsYXRlWFwiLFxuICAgIFwidHJhbnNsYXRlWVwiLFxuICAgIFwidHJhbnNsYXRlWlwiLFxuICAgIFwic2NhbGVcIixcbiAgICBcInNjYWxlWFwiLFxuICAgIFwic2NhbGVZXCIsXG4gICAgXCJyb3RhdGVcIixcbiAgICBcInJvdGF0ZVhcIixcbiAgICBcInJvdGF0ZVlcIixcbiAgICBcInJvdGF0ZVpcIixcbiAgICBcInNrZXdcIixcbiAgICBcInNrZXdYXCIsXG4gICAgXCJza2V3WVwiLFxuXTtcbi8qKlxuICogQSBxdWljayBsb29rdXAgZm9yIHRyYW5zZm9ybSBwcm9wcy5cbiAqL1xuY29uc3QgdHJhbnNmb3JtUHJvcHMgPSBuZXcgU2V0KHRyYW5zZm9ybVByb3BPcmRlcik7XG5cbmV4cG9ydCB7IHRyYW5zZm9ybVByb3BPcmRlciwgdHJhbnNmb3JtUHJvcHMgfTtcbiIsImltcG9ydCB7IHNjYWxlQ29ycmVjdG9ycyB9IGZyb20gJy4uLy4uL3Byb2plY3Rpb24vc3R5bGVzL3NjYWxlLWNvcnJlY3Rpb24ubWpzJztcbmltcG9ydCB7IHRyYW5zZm9ybVByb3BzIH0gZnJvbSAnLi4vLi4vcmVuZGVyL2h0bWwvdXRpbHMvdHJhbnNmb3JtLm1qcyc7XG5cbmZ1bmN0aW9uIGlzRm9yY2VkTW90aW9uVmFsdWUoa2V5LCB7IGxheW91dCwgbGF5b3V0SWQgfSkge1xuICAgIHJldHVybiAodHJhbnNmb3JtUHJvcHMuaGFzKGtleSkgfHxcbiAgICAgICAga2V5LnN0YXJ0c1dpdGgoXCJvcmlnaW5cIikgfHxcbiAgICAgICAgKChsYXlvdXQgfHwgbGF5b3V0SWQgIT09IHVuZGVmaW5lZCkgJiZcbiAgICAgICAgICAgICghIXNjYWxlQ29ycmVjdG9yc1trZXldIHx8IGtleSA9PT0gXCJvcGFjaXR5XCIpKSk7XG59XG5cbmV4cG9ydCB7IGlzRm9yY2VkTW90aW9uVmFsdWUgfTtcbiIsImNvbnN0IGlzTW90aW9uVmFsdWUgPSAodmFsdWUpID0+IEJvb2xlYW4odmFsdWUgJiYgdmFsdWUuZ2V0VmVsb2NpdHkpO1xuXG5leHBvcnQgeyBpc01vdGlvblZhbHVlIH07XG4iLCJpbXBvcnQgeyB0cmFuc2Zvcm1Qcm9wT3JkZXIgfSBmcm9tICcuL3RyYW5zZm9ybS5tanMnO1xuXG5jb25zdCB0cmFuc2xhdGVBbGlhcyA9IHtcbiAgICB4OiBcInRyYW5zbGF0ZVhcIixcbiAgICB5OiBcInRyYW5zbGF0ZVlcIixcbiAgICB6OiBcInRyYW5zbGF0ZVpcIixcbiAgICB0cmFuc2Zvcm1QZXJzcGVjdGl2ZTogXCJwZXJzcGVjdGl2ZVwiLFxufTtcbmNvbnN0IG51bVRyYW5zZm9ybXMgPSB0cmFuc2Zvcm1Qcm9wT3JkZXIubGVuZ3RoO1xuLyoqXG4gKiBCdWlsZCBhIENTUyB0cmFuc2Zvcm0gc3R5bGUgZnJvbSBpbmRpdmlkdWFsIHgveS9zY2FsZSBldGMgcHJvcGVydGllcy5cbiAqXG4gKiBUaGlzIG91dHB1dHMgd2l0aCBhIGRlZmF1bHQgb3JkZXIgb2YgdHJhbnNmb3Jtcy9zY2FsZXMvcm90YXRpb25zLCB0aGlzIGNhbiBiZSBjdXN0b21pc2VkIGJ5XG4gKiBwcm92aWRpbmcgYSB0cmFuc2Zvcm1UZW1wbGF0ZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYnVpbGRUcmFuc2Zvcm0odHJhbnNmb3JtLCB7IGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uID0gdHJ1ZSwgYWxsb3dUcmFuc2Zvcm1Ob25lID0gdHJ1ZSwgfSwgdHJhbnNmb3JtSXNEZWZhdWx0LCB0cmFuc2Zvcm1UZW1wbGF0ZSkge1xuICAgIC8vIFRoZSB0cmFuc2Zvcm0gc3RyaW5nIHdlJ3JlIGdvaW5nIHRvIGJ1aWxkIGludG8uXG4gICAgbGV0IHRyYW5zZm9ybVN0cmluZyA9IFwiXCI7XG4gICAgLyoqXG4gICAgICogTG9vcCBvdmVyIGFsbCBwb3NzaWJsZSB0cmFuc2Zvcm1zIGluIG9yZGVyLCBhZGRpbmcgdGhlIG9uZXMgdGhhdFxuICAgICAqIGFyZSBwcmVzZW50IHRvIHRoZSB0cmFuc2Zvcm0gc3RyaW5nLlxuICAgICAqL1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVHJhbnNmb3JtczsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHRyYW5zZm9ybVByb3BPcmRlcltpXTtcbiAgICAgICAgaWYgKHRyYW5zZm9ybVtrZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybU5hbWUgPSB0cmFuc2xhdGVBbGlhc1trZXldIHx8IGtleTtcbiAgICAgICAgICAgIHRyYW5zZm9ybVN0cmluZyArPSBgJHt0cmFuc2Zvcm1OYW1lfSgke3RyYW5zZm9ybVtrZXldfSkgYDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5hYmxlSGFyZHdhcmVBY2NlbGVyYXRpb24gJiYgIXRyYW5zZm9ybS56KSB7XG4gICAgICAgIHRyYW5zZm9ybVN0cmluZyArPSBcInRyYW5zbGF0ZVooMClcIjtcbiAgICB9XG4gICAgdHJhbnNmb3JtU3RyaW5nID0gdHJhbnNmb3JtU3RyaW5nLnRyaW0oKTtcbiAgICAvLyBJZiB3ZSBoYXZlIGEgY3VzdG9tIGB0cmFuc2Zvcm1gIHRlbXBsYXRlLCBwYXNzIG91ciB0cmFuc2Zvcm0gdmFsdWVzIGFuZFxuICAgIC8vIGdlbmVyYXRlZCB0cmFuc2Zvcm1TdHJpbmcgdG8gdGhhdCBiZWZvcmUgcmV0dXJuaW5nXG4gICAgaWYgKHRyYW5zZm9ybVRlbXBsYXRlKSB7XG4gICAgICAgIHRyYW5zZm9ybVN0cmluZyA9IHRyYW5zZm9ybVRlbXBsYXRlKHRyYW5zZm9ybSwgdHJhbnNmb3JtSXNEZWZhdWx0ID8gXCJcIiA6IHRyYW5zZm9ybVN0cmluZyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGFsbG93VHJhbnNmb3JtTm9uZSAmJiB0cmFuc2Zvcm1Jc0RlZmF1bHQpIHtcbiAgICAgICAgdHJhbnNmb3JtU3RyaW5nID0gXCJub25lXCI7XG4gICAgfVxuICAgIHJldHVybiB0cmFuc2Zvcm1TdHJpbmc7XG59XG5cbmV4cG9ydCB7IGJ1aWxkVHJhbnNmb3JtIH07XG4iLCJjb25zdCBjaGVja1N0cmluZ1N0YXJ0c1dpdGggPSAodG9rZW4pID0+IChrZXkpID0+IHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgJiYga2V5LnN0YXJ0c1dpdGgodG9rZW4pO1xuY29uc3QgaXNDU1NWYXJpYWJsZU5hbWUgPSBjaGVja1N0cmluZ1N0YXJ0c1dpdGgoXCItLVwiKTtcbmNvbnN0IGlzQ1NTVmFyaWFibGVUb2tlbiA9IGNoZWNrU3RyaW5nU3RhcnRzV2l0aChcInZhcigtLVwiKTtcbmNvbnN0IGNzc1ZhcmlhYmxlUmVnZXggPSAvdmFyXFxzKlxcKFxccyotLVtcXHctXSsoXFxzKixcXHMqKD86KD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopKyk/XFxzKlxcKS9nO1xuXG5leHBvcnQgeyBjc3NWYXJpYWJsZVJlZ2V4LCBpc0NTU1ZhcmlhYmxlTmFtZSwgaXNDU1NWYXJpYWJsZVRva2VuIH07XG4iLCIvKipcbiAqIFByb3ZpZGVkIGEgdmFsdWUgYW5kIGEgVmFsdWVUeXBlLCByZXR1cm5zIHRoZSB2YWx1ZSBhcyB0aGF0IHZhbHVlIHR5cGUuXG4gKi9cbmNvbnN0IGdldFZhbHVlQXNUeXBlID0gKHZhbHVlLCB0eXBlKSA9PiB7XG4gICAgcmV0dXJuIHR5cGUgJiYgdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiXG4gICAgICAgID8gdHlwZS50cmFuc2Zvcm0odmFsdWUpXG4gICAgICAgIDogdmFsdWU7XG59O1xuXG5leHBvcnQgeyBnZXRWYWx1ZUFzVHlwZSB9O1xuIiwiY29uc3QgY2xhbXAgPSAobWluLCBtYXgsIHYpID0+IE1hdGgubWluKE1hdGgubWF4KHYsIG1pbiksIG1heCk7XG5cbmV4cG9ydCB7IGNsYW1wIH07XG4iLCJpbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2NsYW1wLm1qcyc7XG5cbmNvbnN0IG51bWJlciA9IHtcbiAgICB0ZXN0OiAodikgPT4gdHlwZW9mIHYgPT09IFwibnVtYmVyXCIsXG4gICAgcGFyc2U6IHBhcnNlRmxvYXQsXG4gICAgdHJhbnNmb3JtOiAodikgPT4gdixcbn07XG5jb25zdCBhbHBoYSA9IHtcbiAgICAuLi5udW1iZXIsXG4gICAgdHJhbnNmb3JtOiAodikgPT4gY2xhbXAoMCwgMSwgdiksXG59O1xuY29uc3Qgc2NhbGUgPSB7XG4gICAgLi4ubnVtYmVyLFxuICAgIGRlZmF1bHQ6IDEsXG59O1xuXG5leHBvcnQgeyBhbHBoYSwgbnVtYmVyLCBzY2FsZSB9O1xuIiwiLyoqXG4gKiBUT0RPOiBXaGVuIHdlIG1vdmUgZnJvbSBzdHJpbmcgYXMgYSBzb3VyY2Ugb2YgdHJ1dGggdG8gZGF0YSBtb2RlbHNcbiAqIGV2ZXJ5dGhpbmcgaW4gdGhpcyBmb2xkZXIgc2hvdWxkIHByb2JhYmx5IGJlIHJlZmVycmVkIHRvIGFzIG1vZGVscyB2cyB0eXBlc1xuICovXG4vLyBJZiB0aGlzIG51bWJlciBpcyBhIGRlY2ltYWwsIG1ha2UgaXQganVzdCBmaXZlIGRlY2ltYWwgcGxhY2VzXG4vLyB0byBhdm9pZCBleHBvbmVudHNcbmNvbnN0IHNhbml0aXplID0gKHYpID0+IE1hdGgucm91bmQodiAqIDEwMDAwMCkgLyAxMDAwMDA7XG5jb25zdCBmbG9hdFJlZ2V4ID0gLygtKT8oW1xcZF0qXFwuP1tcXGRdKSsvZztcbmNvbnN0IGNvbG9yUmVnZXggPSAvKCNbMC05YS1mXXszLDh9fChyZ2J8aHNsKWE/XFwoKC0/W1xcZFxcLl0rJT9bLFxcc10rKXsyfSgtP1tcXGRcXC5dKyU/KVxccypbXFwsXFwvXT9cXHMqW1xcZFxcLl0qJT9cXCkpL2dpO1xuY29uc3Qgc2luZ2xlQ29sb3JSZWdleCA9IC9eKCNbMC05YS1mXXszLDh9fChyZ2J8aHNsKWE/XFwoKC0/W1xcZFxcLl0rJT9bLFxcc10rKXsyfSgtP1tcXGRcXC5dKyU/KVxccypbXFwsXFwvXT9cXHMqW1xcZFxcLl0qJT9cXCkpJC9pO1xuZnVuY3Rpb24gaXNTdHJpbmcodikge1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gXCJzdHJpbmdcIjtcbn1cblxuZXhwb3J0IHsgY29sb3JSZWdleCwgZmxvYXRSZWdleCwgaXNTdHJpbmcsIHNhbml0aXplLCBzaW5nbGVDb2xvclJlZ2V4IH07XG4iLCJpbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gJy4uL3V0aWxzLm1qcyc7XG5cbmNvbnN0IGNyZWF0ZVVuaXRUeXBlID0gKHVuaXQpID0+ICh7XG4gICAgdGVzdDogKHYpID0+IGlzU3RyaW5nKHYpICYmIHYuZW5kc1dpdGgodW5pdCkgJiYgdi5zcGxpdChcIiBcIikubGVuZ3RoID09PSAxLFxuICAgIHBhcnNlOiBwYXJzZUZsb2F0LFxuICAgIHRyYW5zZm9ybTogKHYpID0+IGAke3Z9JHt1bml0fWAsXG59KTtcbmNvbnN0IGRlZ3JlZXMgPSBjcmVhdGVVbml0VHlwZShcImRlZ1wiKTtcbmNvbnN0IHBlcmNlbnQgPSBjcmVhdGVVbml0VHlwZShcIiVcIik7XG5jb25zdCBweCA9IGNyZWF0ZVVuaXRUeXBlKFwicHhcIik7XG5jb25zdCB2aCA9IGNyZWF0ZVVuaXRUeXBlKFwidmhcIik7XG5jb25zdCB2dyA9IGNyZWF0ZVVuaXRUeXBlKFwidndcIik7XG5jb25zdCBwcm9ncmVzc1BlcmNlbnRhZ2UgPSB7XG4gICAgLi4ucGVyY2VudCxcbiAgICBwYXJzZTogKHYpID0+IHBlcmNlbnQucGFyc2UodikgLyAxMDAsXG4gICAgdHJhbnNmb3JtOiAodikgPT4gcGVyY2VudC50cmFuc2Zvcm0odiAqIDEwMCksXG59O1xuXG5leHBvcnQgeyBkZWdyZWVzLCBwZXJjZW50LCBwcm9ncmVzc1BlcmNlbnRhZ2UsIHB4LCB2aCwgdncgfTtcbiIsImltcG9ydCB7IG51bWJlciB9IGZyb20gJy4uLy4uLy4uL3ZhbHVlL3R5cGVzL251bWJlcnMvaW5kZXgubWpzJztcblxuY29uc3QgaW50ID0ge1xuICAgIC4uLm51bWJlcixcbiAgICB0cmFuc2Zvcm06IE1hdGgucm91bmQsXG59O1xuXG5leHBvcnQgeyBpbnQgfTtcbiIsImltcG9ydCB7IHNjYWxlLCBhbHBoYSB9IGZyb20gJy4uLy4uLy4uL3ZhbHVlL3R5cGVzL251bWJlcnMvaW5kZXgubWpzJztcbmltcG9ydCB7IHB4LCBkZWdyZWVzLCBwcm9ncmVzc1BlcmNlbnRhZ2UgfSBmcm9tICcuLi8uLi8uLi92YWx1ZS90eXBlcy9udW1iZXJzL3VuaXRzLm1qcyc7XG5pbXBvcnQgeyBpbnQgfSBmcm9tICcuL3R5cGUtaW50Lm1qcyc7XG5cbmNvbnN0IG51bWJlclZhbHVlVHlwZXMgPSB7XG4gICAgLy8gQm9yZGVyIHByb3BzXG4gICAgYm9yZGVyV2lkdGg6IHB4LFxuICAgIGJvcmRlclRvcFdpZHRoOiBweCxcbiAgICBib3JkZXJSaWdodFdpZHRoOiBweCxcbiAgICBib3JkZXJCb3R0b21XaWR0aDogcHgsXG4gICAgYm9yZGVyTGVmdFdpZHRoOiBweCxcbiAgICBib3JkZXJSYWRpdXM6IHB4LFxuICAgIHJhZGl1czogcHgsXG4gICAgYm9yZGVyVG9wTGVmdFJhZGl1czogcHgsXG4gICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IHB4LFxuICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiBweCxcbiAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiBweCxcbiAgICAvLyBQb3NpdGlvbmluZyBwcm9wc1xuICAgIHdpZHRoOiBweCxcbiAgICBtYXhXaWR0aDogcHgsXG4gICAgaGVpZ2h0OiBweCxcbiAgICBtYXhIZWlnaHQ6IHB4LFxuICAgIHNpemU6IHB4LFxuICAgIHRvcDogcHgsXG4gICAgcmlnaHQ6IHB4LFxuICAgIGJvdHRvbTogcHgsXG4gICAgbGVmdDogcHgsXG4gICAgLy8gU3BhY2luZyBwcm9wc1xuICAgIHBhZGRpbmc6IHB4LFxuICAgIHBhZGRpbmdUb3A6IHB4LFxuICAgIHBhZGRpbmdSaWdodDogcHgsXG4gICAgcGFkZGluZ0JvdHRvbTogcHgsXG4gICAgcGFkZGluZ0xlZnQ6IHB4LFxuICAgIG1hcmdpbjogcHgsXG4gICAgbWFyZ2luVG9wOiBweCxcbiAgICBtYXJnaW5SaWdodDogcHgsXG4gICAgbWFyZ2luQm90dG9tOiBweCxcbiAgICBtYXJnaW5MZWZ0OiBweCxcbiAgICAvLyBUcmFuc2Zvcm0gcHJvcHNcbiAgICByb3RhdGU6IGRlZ3JlZXMsXG4gICAgcm90YXRlWDogZGVncmVlcyxcbiAgICByb3RhdGVZOiBkZWdyZWVzLFxuICAgIHJvdGF0ZVo6IGRlZ3JlZXMsXG4gICAgc2NhbGUsXG4gICAgc2NhbGVYOiBzY2FsZSxcbiAgICBzY2FsZVk6IHNjYWxlLFxuICAgIHNjYWxlWjogc2NhbGUsXG4gICAgc2tldzogZGVncmVlcyxcbiAgICBza2V3WDogZGVncmVlcyxcbiAgICBza2V3WTogZGVncmVlcyxcbiAgICBkaXN0YW5jZTogcHgsXG4gICAgdHJhbnNsYXRlWDogcHgsXG4gICAgdHJhbnNsYXRlWTogcHgsXG4gICAgdHJhbnNsYXRlWjogcHgsXG4gICAgeDogcHgsXG4gICAgeTogcHgsXG4gICAgejogcHgsXG4gICAgcGVyc3BlY3RpdmU6IHB4LFxuICAgIHRyYW5zZm9ybVBlcnNwZWN0aXZlOiBweCxcbiAgICBvcGFjaXR5OiBhbHBoYSxcbiAgICBvcmlnaW5YOiBwcm9ncmVzc1BlcmNlbnRhZ2UsXG4gICAgb3JpZ2luWTogcHJvZ3Jlc3NQZXJjZW50YWdlLFxuICAgIG9yaWdpblo6IHB4LFxuICAgIC8vIE1pc2NcbiAgICB6SW5kZXg6IGludCxcbiAgICAvLyBTVkdcbiAgICBmaWxsT3BhY2l0eTogYWxwaGEsXG4gICAgc3Ryb2tlT3BhY2l0eTogYWxwaGEsXG4gICAgbnVtT2N0YXZlczogaW50LFxufTtcblxuZXhwb3J0IHsgbnVtYmVyVmFsdWVUeXBlcyB9O1xuIiwiaW1wb3J0IHsgYnVpbGRUcmFuc2Zvcm0gfSBmcm9tICcuL2J1aWxkLXRyYW5zZm9ybS5tanMnO1xuaW1wb3J0IHsgaXNDU1NWYXJpYWJsZU5hbWUgfSBmcm9tICcuLi8uLi9kb20vdXRpbHMvaXMtY3NzLXZhcmlhYmxlLm1qcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm1Qcm9wcyB9IGZyb20gJy4vdHJhbnNmb3JtLm1qcyc7XG5pbXBvcnQgeyBnZXRWYWx1ZUFzVHlwZSB9IGZyb20gJy4uLy4uL2RvbS92YWx1ZS10eXBlcy9nZXQtYXMtdHlwZS5tanMnO1xuaW1wb3J0IHsgbnVtYmVyVmFsdWVUeXBlcyB9IGZyb20gJy4uLy4uL2RvbS92YWx1ZS10eXBlcy9udW1iZXIubWpzJztcblxuZnVuY3Rpb24gYnVpbGRIVE1MU3R5bGVzKHN0YXRlLCBsYXRlc3RWYWx1ZXMsIG9wdGlvbnMsIHRyYW5zZm9ybVRlbXBsYXRlKSB7XG4gICAgY29uc3QgeyBzdHlsZSwgdmFycywgdHJhbnNmb3JtLCB0cmFuc2Zvcm1PcmlnaW4gfSA9IHN0YXRlO1xuICAgIC8vIFRyYWNrIHdoZXRoZXIgd2UgZW5jb3VudGVyIGFueSB0cmFuc2Zvcm0gb3IgdHJhbnNmb3JtT3JpZ2luIHZhbHVlcy5cbiAgICBsZXQgaGFzVHJhbnNmb3JtID0gZmFsc2U7XG4gICAgbGV0IGhhc1RyYW5zZm9ybU9yaWdpbiA9IGZhbHNlO1xuICAgIC8vIERvZXMgdGhlIGNhbGN1bGF0ZWQgdHJhbnNmb3JtIGVzc2VudGlhbGx5IGVxdWFsIFwibm9uZVwiP1xuICAgIGxldCB0cmFuc2Zvcm1Jc05vbmUgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIExvb3Agb3ZlciBhbGwgb3VyIGxhdGVzdCBhbmltYXRlZCB2YWx1ZXMgYW5kIGRlY2lkZSB3aGV0aGVyIHRvIGhhbmRsZSB0aGVtXG4gICAgICogYXMgYSBzdHlsZSBvciBDU1MgdmFyaWFibGUuXG4gICAgICpcbiAgICAgKiBUcmFuc2Zvcm1zIGFuZCB0cmFuc2Zvcm0gb3JpZ2lucyBhcmUga2VwdCBzZXBlcmF0ZWx5IGZvciBmdXJ0aGVyIHByb2Nlc3NpbmcuXG4gICAgICovXG4gICAgZm9yIChjb25zdCBrZXkgaW4gbGF0ZXN0VmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gbGF0ZXN0VmFsdWVzW2tleV07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGlzIGlzIGEgQ1NTIHZhcmlhYmxlIHdlIGRvbid0IGRvIGFueSBmdXJ0aGVyIHByb2Nlc3NpbmcuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoaXNDU1NWYXJpYWJsZU5hbWUoa2V5KSkge1xuICAgICAgICAgICAgdmFyc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDb252ZXJ0IHRoZSB2YWx1ZSB0byBpdHMgZGVmYXVsdCB2YWx1ZSB0eXBlLCBpZSAwIC0+IFwiMHB4XCJcbiAgICAgICAgY29uc3QgdmFsdWVUeXBlID0gbnVtYmVyVmFsdWVUeXBlc1trZXldO1xuICAgICAgICBjb25zdCB2YWx1ZUFzVHlwZSA9IGdldFZhbHVlQXNUeXBlKHZhbHVlLCB2YWx1ZVR5cGUpO1xuICAgICAgICBpZiAodHJhbnNmb3JtUHJvcHMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYSB0cmFuc2Zvcm0sIGZsYWcgdG8gZW5hYmxlIGZ1cnRoZXIgdHJhbnNmb3JtIHByb2Nlc3NpbmdcbiAgICAgICAgICAgIGhhc1RyYW5zZm9ybSA9IHRydWU7XG4gICAgICAgICAgICB0cmFuc2Zvcm1ba2V5XSA9IHZhbHVlQXNUeXBlO1xuICAgICAgICAgICAgLy8gSWYgd2UgYWxyZWFkeSBrbm93IHdlIGhhdmUgYSBub24tZGVmYXVsdCB0cmFuc2Zvcm0sIGVhcmx5IHJldHVyblxuICAgICAgICAgICAgaWYgKCF0cmFuc2Zvcm1Jc05vbmUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAvLyBPdGhlcndpc2UgY2hlY2sgdG8gc2VlIGlmIHRoaXMgaXMgYSBkZWZhdWx0IHRyYW5zZm9ybVxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSAodmFsdWVUeXBlLmRlZmF1bHQgfHwgMCkpXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtSXNOb25lID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJvcmlnaW5cIikpIHtcbiAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYSB0cmFuc2Zvcm0gb3JpZ2luLCBmbGFnIGFuZCBlbmFibGUgZnVydGhlciB0cmFuc2Zvcm0tb3JpZ2luIHByb2Nlc3NpbmdcbiAgICAgICAgICAgIGhhc1RyYW5zZm9ybU9yaWdpbiA9IHRydWU7XG4gICAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW5ba2V5XSA9IHZhbHVlQXNUeXBlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3R5bGVba2V5XSA9IHZhbHVlQXNUeXBlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghbGF0ZXN0VmFsdWVzLnRyYW5zZm9ybSkge1xuICAgICAgICBpZiAoaGFzVHJhbnNmb3JtIHx8IHRyYW5zZm9ybVRlbXBsYXRlKSB7XG4gICAgICAgICAgICBzdHlsZS50cmFuc2Zvcm0gPSBidWlsZFRyYW5zZm9ybShzdGF0ZS50cmFuc2Zvcm0sIG9wdGlvbnMsIHRyYW5zZm9ybUlzTm9uZSwgdHJhbnNmb3JtVGVtcGxhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0eWxlLnRyYW5zZm9ybSkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB3ZSBoYXZlIHByZXZpb3VzbHkgY3JlYXRlZCBhIHRyYW5zZm9ybSBidXQgY3VycmVudGx5IGRvbid0IGhhdmUgYW55LFxuICAgICAgICAgICAgICogcmVzZXQgdHJhbnNmb3JtIHN0eWxlIHRvIG5vbmUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHN0eWxlLnRyYW5zZm9ybSA9IFwibm9uZVwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJ1aWxkIGEgdHJhbnNmb3JtT3JpZ2luIHN0eWxlLiBVc2VzIHRoZSBzYW1lIGRlZmF1bHRzIGFzIHRoZSBicm93c2VyIGZvclxuICAgICAqIHVuZGVmaW5lZCBvcmlnaW5zLlxuICAgICAqL1xuICAgIGlmIChoYXNUcmFuc2Zvcm1PcmlnaW4pIHtcbiAgICAgICAgY29uc3QgeyBvcmlnaW5YID0gXCI1MCVcIiwgb3JpZ2luWSA9IFwiNTAlXCIsIG9yaWdpblogPSAwLCB9ID0gdHJhbnNmb3JtT3JpZ2luO1xuICAgICAgICBzdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBgJHtvcmlnaW5YfSAke29yaWdpbll9ICR7b3JpZ2luWn1gO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgYnVpbGRIVE1MU3R5bGVzIH07XG4iLCJjb25zdCBjcmVhdGVIdG1sUmVuZGVyU3RhdGUgPSAoKSA9PiAoe1xuICAgIHN0eWxlOiB7fSxcbiAgICB0cmFuc2Zvcm06IHt9LFxuICAgIHRyYW5zZm9ybU9yaWdpbjoge30sXG4gICAgdmFyczoge30sXG59KTtcblxuZXhwb3J0IHsgY3JlYXRlSHRtbFJlbmRlclN0YXRlIH07XG4iLCJpbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNGb3JjZWRNb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uL21vdGlvbi91dGlscy9pcy1mb3JjZWQtbW90aW9uLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vdmFsdWUvdXRpbHMvaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyBidWlsZEhUTUxTdHlsZXMgfSBmcm9tICcuL3V0aWxzL2J1aWxkLXN0eWxlcy5tanMnO1xuaW1wb3J0IHsgY3JlYXRlSHRtbFJlbmRlclN0YXRlIH0gZnJvbSAnLi91dGlscy9jcmVhdGUtcmVuZGVyLXN0YXRlLm1qcyc7XG5cbmZ1bmN0aW9uIGNvcHlSYXdWYWx1ZXNPbmx5KHRhcmdldCwgc291cmNlLCBwcm9wcykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoIWlzTW90aW9uVmFsdWUoc291cmNlW2tleV0pICYmICFpc0ZvcmNlZE1vdGlvblZhbHVlKGtleSwgcHJvcHMpKSB7XG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdXNlSW5pdGlhbE1vdGlvblZhbHVlcyh7IHRyYW5zZm9ybVRlbXBsYXRlIH0sIHZpc3VhbFN0YXRlLCBpc1N0YXRpYykge1xuICAgIHJldHVybiB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBjcmVhdGVIdG1sUmVuZGVyU3RhdGUoKTtcbiAgICAgICAgYnVpbGRIVE1MU3R5bGVzKHN0YXRlLCB2aXN1YWxTdGF0ZSwgeyBlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbjogIWlzU3RhdGljIH0sIHRyYW5zZm9ybVRlbXBsYXRlKTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnZhcnMsIHN0YXRlLnN0eWxlKTtcbiAgICB9LCBbdmlzdWFsU3RhdGVdKTtcbn1cbmZ1bmN0aW9uIHVzZVN0eWxlKHByb3BzLCB2aXN1YWxTdGF0ZSwgaXNTdGF0aWMpIHtcbiAgICBjb25zdCBzdHlsZVByb3AgPSBwcm9wcy5zdHlsZSB8fCB7fTtcbiAgICBjb25zdCBzdHlsZSA9IHt9O1xuICAgIC8qKlxuICAgICAqIENvcHkgbm9uLU1vdGlvbiBWYWx1ZXMgc3RyYWlnaHQgaW50byBzdHlsZVxuICAgICAqL1xuICAgIGNvcHlSYXdWYWx1ZXNPbmx5KHN0eWxlLCBzdHlsZVByb3AsIHByb3BzKTtcbiAgICBPYmplY3QuYXNzaWduKHN0eWxlLCB1c2VJbml0aWFsTW90aW9uVmFsdWVzKHByb3BzLCB2aXN1YWxTdGF0ZSwgaXNTdGF0aWMpKTtcbiAgICByZXR1cm4gcHJvcHMudHJhbnNmb3JtVmFsdWVzID8gcHJvcHMudHJhbnNmb3JtVmFsdWVzKHN0eWxlKSA6IHN0eWxlO1xufVxuZnVuY3Rpb24gdXNlSFRNTFByb3BzKHByb3BzLCB2aXN1YWxTdGF0ZSwgaXNTdGF0aWMpIHtcbiAgICAvLyBUaGUgYGFueWAgaXNuJ3QgaWRlYWwgYnV0IGl0IGlzIHRoZSB0eXBlIG9mIGNyZWF0ZUVsZW1lbnQgcHJvcHMgYXJndW1lbnRcbiAgICBjb25zdCBodG1sUHJvcHMgPSB7fTtcbiAgICBjb25zdCBzdHlsZSA9IHVzZVN0eWxlKHByb3BzLCB2aXN1YWxTdGF0ZSwgaXNTdGF0aWMpO1xuICAgIGlmIChwcm9wcy5kcmFnICYmIHByb3BzLmRyYWdMaXN0ZW5lciAhPT0gZmFsc2UpIHtcbiAgICAgICAgLy8gRGlzYWJsZSB0aGUgZ2hvc3QgZWxlbWVudCB3aGVuIGEgdXNlciBkcmFnc1xuICAgICAgICBodG1sUHJvcHMuZHJhZ2dhYmxlID0gZmFsc2U7XG4gICAgICAgIC8vIERpc2FibGUgdGV4dCBzZWxlY3Rpb25cbiAgICAgICAgc3R5bGUudXNlclNlbGVjdCA9XG4gICAgICAgICAgICBzdHlsZS5XZWJraXRVc2VyU2VsZWN0ID1cbiAgICAgICAgICAgICAgICBzdHlsZS5XZWJraXRUb3VjaENhbGxvdXQgPVxuICAgICAgICAgICAgICAgICAgICBcIm5vbmVcIjtcbiAgICAgICAgLy8gRGlzYWJsZSBzY3JvbGxpbmcgb24gdGhlIGRyYWdnYWJsZSBkaXJlY3Rpb25cbiAgICAgICAgc3R5bGUudG91Y2hBY3Rpb24gPVxuICAgICAgICAgICAgcHJvcHMuZHJhZyA9PT0gdHJ1ZVxuICAgICAgICAgICAgICAgID8gXCJub25lXCJcbiAgICAgICAgICAgICAgICA6IGBwYW4tJHtwcm9wcy5kcmFnID09PSBcInhcIiA/IFwieVwiIDogXCJ4XCJ9YDtcbiAgICB9XG4gICAgaWYgKHByb3BzLnRhYkluZGV4ID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgKHByb3BzLm9uVGFwIHx8IHByb3BzLm9uVGFwU3RhcnQgfHwgcHJvcHMud2hpbGVUYXApKSB7XG4gICAgICAgIGh0bWxQcm9wcy50YWJJbmRleCA9IDA7XG4gICAgfVxuICAgIGh0bWxQcm9wcy5zdHlsZSA9IHN0eWxlO1xuICAgIHJldHVybiBodG1sUHJvcHM7XG59XG5cbmV4cG9ydCB7IGNvcHlSYXdWYWx1ZXNPbmx5LCB1c2VIVE1MUHJvcHMgfTtcbiIsIi8qKlxuICogQSBsaXN0IG9mIGFsbCB2YWxpZCBNb3Rpb25Qcm9wcy5cbiAqXG4gKiBAcHJpdmF0ZVJlbWFya3NcbiAqIFRoaXMgZG9lc24ndCB0aHJvdyBpZiBhIGBNb3Rpb25Qcm9wYCBuYW1lIGlzIG1pc3NpbmcgLSBpdCBzaG91bGQuXG4gKi9cbmNvbnN0IHZhbGlkTW90aW9uUHJvcHMgPSBuZXcgU2V0KFtcbiAgICBcImFuaW1hdGVcIixcbiAgICBcImV4aXRcIixcbiAgICBcInZhcmlhbnRzXCIsXG4gICAgXCJpbml0aWFsXCIsXG4gICAgXCJzdHlsZVwiLFxuICAgIFwidmFsdWVzXCIsXG4gICAgXCJ2YXJpYW50c1wiLFxuICAgIFwidHJhbnNpdGlvblwiLFxuICAgIFwidHJhbnNmb3JtVGVtcGxhdGVcIixcbiAgICBcInRyYW5zZm9ybVZhbHVlc1wiLFxuICAgIFwiY3VzdG9tXCIsXG4gICAgXCJpbmhlcml0XCIsXG4gICAgXCJvbkxheW91dEFuaW1hdGlvblN0YXJ0XCIsXG4gICAgXCJvbkxheW91dEFuaW1hdGlvbkNvbXBsZXRlXCIsXG4gICAgXCJvbkxheW91dE1lYXN1cmVcIixcbiAgICBcIm9uQmVmb3JlTGF5b3V0TWVhc3VyZVwiLFxuICAgIFwib25BbmltYXRpb25TdGFydFwiLFxuICAgIFwib25BbmltYXRpb25Db21wbGV0ZVwiLFxuICAgIFwib25VcGRhdGVcIixcbiAgICBcIm9uRHJhZ1N0YXJ0XCIsXG4gICAgXCJvbkRyYWdcIixcbiAgICBcIm9uRHJhZ0VuZFwiLFxuICAgIFwib25NZWFzdXJlRHJhZ0NvbnN0cmFpbnRzXCIsXG4gICAgXCJvbkRpcmVjdGlvbkxvY2tcIixcbiAgICBcIm9uRHJhZ1RyYW5zaXRpb25FbmRcIixcbiAgICBcIl9kcmFnWFwiLFxuICAgIFwiX2RyYWdZXCIsXG4gICAgXCJvbkhvdmVyU3RhcnRcIixcbiAgICBcIm9uSG92ZXJFbmRcIixcbiAgICBcIm9uVmlld3BvcnRFbnRlclwiLFxuICAgIFwib25WaWV3cG9ydExlYXZlXCIsXG4gICAgXCJpZ25vcmVTdHJpY3RcIixcbiAgICBcInZpZXdwb3J0XCIsXG5dKTtcbi8qKlxuICogQ2hlY2sgd2hldGhlciBhIHByb3AgbmFtZSBpcyBhIHZhbGlkIGBNb3Rpb25Qcm9wYCBrZXkuXG4gKlxuICogQHBhcmFtIGtleSAtIE5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIGNoZWNrXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaXMga2V5IGlzIGEgdmFsaWQgYE1vdGlvblByb3BgLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gaXNWYWxpZE1vdGlvblByb3Aoa2V5KSB7XG4gICAgcmV0dXJuIChrZXkuc3RhcnRzV2l0aChcIndoaWxlXCIpIHx8XG4gICAgICAgIChrZXkuc3RhcnRzV2l0aChcImRyYWdcIikgJiYga2V5ICE9PSBcImRyYWdnYWJsZVwiKSB8fFxuICAgICAgICBrZXkuc3RhcnRzV2l0aChcImxheW91dFwiKSB8fFxuICAgICAgICBrZXkuc3RhcnRzV2l0aChcIm9uVGFwXCIpIHx8XG4gICAgICAgIGtleS5zdGFydHNXaXRoKFwib25QYW5cIikgfHxcbiAgICAgICAgdmFsaWRNb3Rpb25Qcm9wcy5oYXMoa2V5KSk7XG59XG5cbmV4cG9ydCB7IGlzVmFsaWRNb3Rpb25Qcm9wIH07XG4iLCJpbXBvcnQgeyBpc1ZhbGlkTW90aW9uUHJvcCB9IGZyb20gJy4uLy4uLy4uL21vdGlvbi91dGlscy92YWxpZC1wcm9wLm1qcyc7XG5cbmxldCBzaG91bGRGb3J3YXJkID0gKGtleSkgPT4gIWlzVmFsaWRNb3Rpb25Qcm9wKGtleSk7XG5mdW5jdGlvbiBsb2FkRXh0ZXJuYWxJc1ZhbGlkUHJvcChpc1ZhbGlkUHJvcCkge1xuICAgIGlmICghaXNWYWxpZFByb3ApXG4gICAgICAgIHJldHVybjtcbiAgICAvLyBFeHBsaWNpdGx5IGZpbHRlciBvdXIgZXZlbnRzXG4gICAgc2hvdWxkRm9yd2FyZCA9IChrZXkpID0+IGtleS5zdGFydHNXaXRoKFwib25cIikgPyAhaXNWYWxpZE1vdGlvblByb3Aoa2V5KSA6IGlzVmFsaWRQcm9wKGtleSk7XG59XG4vKipcbiAqIEVtb3Rpb24gYW5kIFN0eWxlZCBDb21wb25lbnRzIGJvdGggYWxsb3cgdXNlcnMgdG8gcGFzcyB0aHJvdWdoIGFyYml0cmFyeSBwcm9wcyB0byB0aGVpciBjb21wb25lbnRzXG4gKiB0byBkeW5hbWljYWxseSBnZW5lcmF0ZSBDU1MuIFRoZXkgYm90aCB1c2UgdGhlIGBAZW1vdGlvbi9pcy1wcm9wLXZhbGlkYCBwYWNrYWdlIHRvIGRldGVybWluZSB3aGljaFxuICogb2YgdGhlc2Ugc2hvdWxkIGJlIHBhc3NlZCB0byB0aGUgdW5kZXJseWluZyBET00gbm9kZS5cbiAqXG4gKiBIb3dldmVyLCB3aGVuIHN0eWxpbmcgYSBNb3Rpb24gY29tcG9uZW50IGBzdHlsZWQobW90aW9uLmRpdilgLCBib3RoIHBhY2thZ2VzIHBhc3MgdGhyb3VnaCAqYWxsKiBwcm9wc1xuICogYXMgaXQncyBzZWVuIGFzIGFuIGFyYml0cmFyeSBjb21wb25lbnQgcmF0aGVyIHRoYW4gYSBET00gbm9kZS4gTW90aW9uIG9ubHkgYWxsb3dzIGFyYml0cmFyeSBwcm9wc1xuICogcGFzc2VkIHRocm91Z2ggdGhlIGBjdXN0b21gIHByb3Agc28gaXQgZG9lc24ndCAqbmVlZCogdGhlIHBheWxvYWQgb3IgY29tcHV0YXRpb25hbCBvdmVyaGVhZCBvZlxuICogYEBlbW90aW9uL2lzLXByb3AtdmFsaWRgLCBob3dldmVyIHRvIGZpeCB0aGlzIHByb2JsZW0gd2UgbmVlZCB0byB1c2UgaXQuXG4gKlxuICogQnkgbWFraW5nIGl0IGFuIG9wdGlvbmFsRGVwZW5kZW5jeSB3ZSBjYW4gb2ZmZXIgdGhpcyBmdW5jdGlvbmFsaXR5IG9ubHkgaW4gdGhlIHNpdHVhdGlvbnMgd2hlcmUgaXQnc1xuICogYWN0dWFsbHkgcmVxdWlyZWQuXG4gKi9cbnRyeSB7XG4gICAgLyoqXG4gICAgICogV2UgYXR0ZW1wdCB0byBpbXBvcnQgdGhpcyBwYWNrYWdlIGJ1dCByZXF1aXJlIHdvbid0IGJlIGRlZmluZWQgaW4gZXNtIGVudmlyb25tZW50cywgaW4gdGhhdCBjYXNlXG4gICAgICogaXNQcm9wVmFsaWQgd2lsbCBoYXZlIHRvIGJlIHByb3ZpZGVkIHZpYSBgTW90aW9uQ29udGV4dGAuIEluIGEgNi4wLjAgdGhpcyBzaG91bGQgcHJvYmFibHkgYmUgcmVtb3ZlZFxuICAgICAqIGluIGZhdm91ciBvZiBleHBsaWNpdCBpbmplY3Rpb24uXG4gICAgICovXG4gICAgbG9hZEV4dGVybmFsSXNWYWxpZFByb3AocmVxdWlyZShcIkBlbW90aW9uL2lzLXByb3AtdmFsaWRcIikuZGVmYXVsdCk7XG59XG5jYXRjaCAoX2EpIHtcbiAgICAvLyBXZSBkb24ndCBuZWVkIHRvIGFjdHVhbGx5IGRvIGFueXRoaW5nIGhlcmUgLSB0aGUgZmFsbGJhY2sgaXMgdGhlIGV4aXN0aW5nIGBpc1Byb3BWYWxpZGAuXG59XG5mdW5jdGlvbiBmaWx0ZXJQcm9wcyhwcm9wcywgaXNEb20sIGZvcndhcmRNb3Rpb25Qcm9wcykge1xuICAgIGNvbnN0IGZpbHRlcmVkUHJvcHMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xuICAgICAgICAvKipcbiAgICAgICAgICogdmFsdWVzIGlzIGNvbnNpZGVyZWQgYSB2YWxpZCBwcm9wIGJ5IEVtb3Rpb24sIHNvIGlmIGl0J3MgcHJlc2VudFxuICAgICAgICAgKiB0aGlzIHdpbGwgYmUgcmVuZGVyZWQgb3V0IHRvIHRoZSBET00gdW5sZXNzIGV4cGxpY2l0bHkgZmlsdGVyZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIFdlIGNoZWNrIHRoZSB0eXBlIGFzIGl0IGNvdWxkIGJlIHVzZWQgd2l0aCB0aGUgYGZlQ29sb3JNYXRyaXhgXG4gICAgICAgICAqIGVsZW1lbnQsIHdoaWNoIHdlIHN1cHBvcnQuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoa2V5ID09PSBcInZhbHVlc1wiICYmIHR5cGVvZiBwcm9wcy52YWx1ZXMgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKHNob3VsZEZvcndhcmQoa2V5KSB8fFxuICAgICAgICAgICAgKGZvcndhcmRNb3Rpb25Qcm9wcyA9PT0gdHJ1ZSAmJiBpc1ZhbGlkTW90aW9uUHJvcChrZXkpKSB8fFxuICAgICAgICAgICAgKCFpc0RvbSAmJiAhaXNWYWxpZE1vdGlvblByb3Aoa2V5KSkgfHxcbiAgICAgICAgICAgIC8vIElmIHRyeWluZyB0byB1c2UgbmF0aXZlIEhUTUwgZHJhZyBldmVudHMsIGZvcndhcmQgZHJhZyBsaXN0ZW5lcnNcbiAgICAgICAgICAgIChwcm9wc1tcImRyYWdnYWJsZVwiXSAmJiBrZXkuc3RhcnRzV2l0aChcIm9uRHJhZ1wiKSkpIHtcbiAgICAgICAgICAgIGZpbHRlcmVkUHJvcHNba2V5XSA9IHByb3BzW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZpbHRlcmVkUHJvcHM7XG59XG5cbmV4cG9ydCB7IGZpbHRlclByb3BzLCBsb2FkRXh0ZXJuYWxJc1ZhbGlkUHJvcCB9O1xuIiwiaW1wb3J0IHsgcHggfSBmcm9tICcuLi8uLi8uLi92YWx1ZS90eXBlcy9udW1iZXJzL3VuaXRzLm1qcyc7XG5cbmZ1bmN0aW9uIGNhbGNPcmlnaW4ob3JpZ2luLCBvZmZzZXQsIHNpemUpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9yaWdpbiA9PT0gXCJzdHJpbmdcIlxuICAgICAgICA/IG9yaWdpblxuICAgICAgICA6IHB4LnRyYW5zZm9ybShvZmZzZXQgKyBzaXplICogb3JpZ2luKTtcbn1cbi8qKlxuICogVGhlIFNWRyB0cmFuc2Zvcm0gb3JpZ2luIGRlZmF1bHRzIGFyZSBkaWZmZXJlbnQgdG8gQ1NTIGFuZCBpcyBsZXNzIGludHVpdGl2ZSxcbiAqIHNvIHdlIHVzZSB0aGUgbWVhc3VyZWQgZGltZW5zaW9ucyBvZiB0aGUgU1ZHIHRvIHJlY29uY2lsZSB0aGVzZS5cbiAqL1xuZnVuY3Rpb24gY2FsY1NWR1RyYW5zZm9ybU9yaWdpbihkaW1lbnNpb25zLCBvcmlnaW5YLCBvcmlnaW5ZKSB7XG4gICAgY29uc3QgcHhPcmlnaW5YID0gY2FsY09yaWdpbihvcmlnaW5YLCBkaW1lbnNpb25zLngsIGRpbWVuc2lvbnMud2lkdGgpO1xuICAgIGNvbnN0IHB4T3JpZ2luWSA9IGNhbGNPcmlnaW4ob3JpZ2luWSwgZGltZW5zaW9ucy55LCBkaW1lbnNpb25zLmhlaWdodCk7XG4gICAgcmV0dXJuIGAke3B4T3JpZ2luWH0gJHtweE9yaWdpbll9YDtcbn1cblxuZXhwb3J0IHsgY2FsY1NWR1RyYW5zZm9ybU9yaWdpbiB9O1xuIiwiaW1wb3J0IHsgcHggfSBmcm9tICcuLi8uLi8uLi92YWx1ZS90eXBlcy9udW1iZXJzL3VuaXRzLm1qcyc7XG5cbmNvbnN0IGRhc2hLZXlzID0ge1xuICAgIG9mZnNldDogXCJzdHJva2UtZGFzaG9mZnNldFwiLFxuICAgIGFycmF5OiBcInN0cm9rZS1kYXNoYXJyYXlcIixcbn07XG5jb25zdCBjYW1lbEtleXMgPSB7XG4gICAgb2Zmc2V0OiBcInN0cm9rZURhc2hvZmZzZXRcIixcbiAgICBhcnJheTogXCJzdHJva2VEYXNoYXJyYXlcIixcbn07XG4vKipcbiAqIEJ1aWxkIFNWRyBwYXRoIHByb3BlcnRpZXMuIFVzZXMgdGhlIHBhdGgncyBtZWFzdXJlZCBsZW5ndGggdG8gY29udmVydFxuICogb3VyIGN1c3RvbSBwYXRoTGVuZ3RoLCBwYXRoU3BhY2luZyBhbmQgcGF0aE9mZnNldCBpbnRvIHN0cm9rZS1kYXNob2Zmc2V0XG4gKiBhbmQgc3Ryb2tlLWRhc2hhcnJheSBhdHRyaWJ1dGVzLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbXV0YXRpdmUgdG8gcmVkdWNlIHBlci1mcmFtZSBHQy5cbiAqL1xuZnVuY3Rpb24gYnVpbGRTVkdQYXRoKGF0dHJzLCBsZW5ndGgsIHNwYWNpbmcgPSAxLCBvZmZzZXQgPSAwLCB1c2VEYXNoQ2FzZSA9IHRydWUpIHtcbiAgICAvLyBOb3JtYWxpc2UgcGF0aCBsZW5ndGggYnkgc2V0dGluZyBTVkcgYXR0cmlidXRlIHBhdGhMZW5ndGggdG8gMVxuICAgIGF0dHJzLnBhdGhMZW5ndGggPSAxO1xuICAgIC8vIFdlIHVzZSBkYXNoIGNhc2Ugd2hlbiBzZXR0aW5nIGF0dHJpYnV0ZXMgZGlyZWN0bHkgdG8gdGhlIERPTSBub2RlIGFuZCBjYW1lbCBjYXNlXG4gICAgLy8gd2hlbiBkZWZpbmluZyBwcm9wcyBvbiBhIFJlYWN0IGNvbXBvbmVudC5cbiAgICBjb25zdCBrZXlzID0gdXNlRGFzaENhc2UgPyBkYXNoS2V5cyA6IGNhbWVsS2V5cztcbiAgICAvLyBCdWlsZCB0aGUgZGFzaCBvZmZzZXRcbiAgICBhdHRyc1trZXlzLm9mZnNldF0gPSBweC50cmFuc2Zvcm0oLW9mZnNldCk7XG4gICAgLy8gQnVpbGQgdGhlIGRhc2ggYXJyYXlcbiAgICBjb25zdCBwYXRoTGVuZ3RoID0gcHgudHJhbnNmb3JtKGxlbmd0aCk7XG4gICAgY29uc3QgcGF0aFNwYWNpbmcgPSBweC50cmFuc2Zvcm0oc3BhY2luZyk7XG4gICAgYXR0cnNba2V5cy5hcnJheV0gPSBgJHtwYXRoTGVuZ3RofSAke3BhdGhTcGFjaW5nfWA7XG59XG5cbmV4cG9ydCB7IGJ1aWxkU1ZHUGF0aCB9O1xuIiwiaW1wb3J0IHsgYnVpbGRIVE1MU3R5bGVzIH0gZnJvbSAnLi4vLi4vaHRtbC91dGlscy9idWlsZC1zdHlsZXMubWpzJztcbmltcG9ydCB7IGNhbGNTVkdUcmFuc2Zvcm1PcmlnaW4gfSBmcm9tICcuL3RyYW5zZm9ybS1vcmlnaW4ubWpzJztcbmltcG9ydCB7IGJ1aWxkU1ZHUGF0aCB9IGZyb20gJy4vcGF0aC5tanMnO1xuXG4vKipcbiAqIEJ1aWxkIFNWRyB2aXN1YWwgYXR0cmJ1dGVzLCBsaWtlIGN4IGFuZCBzdHlsZS50cmFuc2Zvcm1cbiAqL1xuZnVuY3Rpb24gYnVpbGRTVkdBdHRycyhzdGF0ZSwgeyBhdHRyWCwgYXR0clksIGF0dHJTY2FsZSwgb3JpZ2luWCwgb3JpZ2luWSwgcGF0aExlbmd0aCwgcGF0aFNwYWNpbmcgPSAxLCBwYXRoT2Zmc2V0ID0gMCwgXG4vLyBUaGlzIGlzIG9iamVjdCBjcmVhdGlvbiwgd2hpY2ggd2UgdHJ5IHRvIGF2b2lkIHBlci1mcmFtZS5cbi4uLmxhdGVzdCB9LCBvcHRpb25zLCBpc1NWR1RhZywgdHJhbnNmb3JtVGVtcGxhdGUpIHtcbiAgICBidWlsZEhUTUxTdHlsZXMoc3RhdGUsIGxhdGVzdCwgb3B0aW9ucywgdHJhbnNmb3JtVGVtcGxhdGUpO1xuICAgIC8qKlxuICAgICAqIEZvciBzdmcgdGFncyB3ZSBqdXN0IHdhbnQgdG8gbWFrZSBzdXJlIHZpZXdCb3ggaXMgYW5pbWF0YWJsZSBhbmQgdHJlYXQgYWxsIHRoZSBzdHlsZXNcbiAgICAgKiBhcyBub3JtYWwgSFRNTCB0YWdzLlxuICAgICAqL1xuICAgIGlmIChpc1NWR1RhZykge1xuICAgICAgICBpZiAoc3RhdGUuc3R5bGUudmlld0JveCkge1xuICAgICAgICAgICAgc3RhdGUuYXR0cnMudmlld0JveCA9IHN0YXRlLnN0eWxlLnZpZXdCb3g7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzdGF0ZS5hdHRycyA9IHN0YXRlLnN0eWxlO1xuICAgIHN0YXRlLnN0eWxlID0ge307XG4gICAgY29uc3QgeyBhdHRycywgc3R5bGUsIGRpbWVuc2lvbnMgfSA9IHN0YXRlO1xuICAgIC8qKlxuICAgICAqIEhvd2V2ZXIsIHdlIGFwcGx5IHRyYW5zZm9ybXMgYXMgQ1NTIHRyYW5zZm9ybXMuIFNvIGlmIHdlIGRldGVjdCBhIHRyYW5zZm9ybSB3ZSB0YWtlIGl0IGZyb20gYXR0cnNcbiAgICAgKiBhbmQgY29weSBpdCBpbnRvIHN0eWxlLlxuICAgICAqL1xuICAgIGlmIChhdHRycy50cmFuc2Zvcm0pIHtcbiAgICAgICAgaWYgKGRpbWVuc2lvbnMpXG4gICAgICAgICAgICBzdHlsZS50cmFuc2Zvcm0gPSBhdHRycy50cmFuc2Zvcm07XG4gICAgICAgIGRlbGV0ZSBhdHRycy50cmFuc2Zvcm07XG4gICAgfVxuICAgIC8vIFBhcnNlIHRyYW5zZm9ybU9yaWdpblxuICAgIGlmIChkaW1lbnNpb25zICYmXG4gICAgICAgIChvcmlnaW5YICE9PSB1bmRlZmluZWQgfHwgb3JpZ2luWSAhPT0gdW5kZWZpbmVkIHx8IHN0eWxlLnRyYW5zZm9ybSkpIHtcbiAgICAgICAgc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gY2FsY1NWR1RyYW5zZm9ybU9yaWdpbihkaW1lbnNpb25zLCBvcmlnaW5YICE9PSB1bmRlZmluZWQgPyBvcmlnaW5YIDogMC41LCBvcmlnaW5ZICE9PSB1bmRlZmluZWQgPyBvcmlnaW5ZIDogMC41KTtcbiAgICB9XG4gICAgLy8gUmVuZGVyIGF0dHJYL2F0dHJZL2F0dHJTY2FsZSBhcyBhdHRyaWJ1dGVzXG4gICAgaWYgKGF0dHJYICE9PSB1bmRlZmluZWQpXG4gICAgICAgIGF0dHJzLnggPSBhdHRyWDtcbiAgICBpZiAoYXR0clkgIT09IHVuZGVmaW5lZClcbiAgICAgICAgYXR0cnMueSA9IGF0dHJZO1xuICAgIGlmIChhdHRyU2NhbGUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgYXR0cnMuc2NhbGUgPSBhdHRyU2NhbGU7XG4gICAgLy8gQnVpbGQgU1ZHIHBhdGggaWYgb25lIGhhcyBiZWVuIGRlZmluZWRcbiAgICBpZiAocGF0aExlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGJ1aWxkU1ZHUGF0aChhdHRycywgcGF0aExlbmd0aCwgcGF0aFNwYWNpbmcsIHBhdGhPZmZzZXQsIGZhbHNlKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IGJ1aWxkU1ZHQXR0cnMgfTtcbiIsImltcG9ydCB7IGNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSB9IGZyb20gJy4uLy4uL2h0bWwvdXRpbHMvY3JlYXRlLXJlbmRlci1zdGF0ZS5tanMnO1xuXG5jb25zdCBjcmVhdGVTdmdSZW5kZXJTdGF0ZSA9ICgpID0+ICh7XG4gICAgLi4uY3JlYXRlSHRtbFJlbmRlclN0YXRlKCksXG4gICAgYXR0cnM6IHt9LFxufSk7XG5cbmV4cG9ydCB7IGNyZWF0ZVN2Z1JlbmRlclN0YXRlIH07XG4iLCJjb25zdCBpc1NWR1RhZyA9ICh0YWcpID0+IHR5cGVvZiB0YWcgPT09IFwic3RyaW5nXCIgJiYgdGFnLnRvTG93ZXJDYXNlKCkgPT09IFwic3ZnXCI7XG5cbmV4cG9ydCB7IGlzU1ZHVGFnIH07XG4iLCJpbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY29weVJhd1ZhbHVlc09ubHkgfSBmcm9tICcuLi9odG1sL3VzZS1wcm9wcy5tanMnO1xuaW1wb3J0IHsgYnVpbGRTVkdBdHRycyB9IGZyb20gJy4vdXRpbHMvYnVpbGQtYXR0cnMubWpzJztcbmltcG9ydCB7IGNyZWF0ZVN2Z1JlbmRlclN0YXRlIH0gZnJvbSAnLi91dGlscy9jcmVhdGUtcmVuZGVyLXN0YXRlLm1qcyc7XG5pbXBvcnQgeyBpc1NWR1RhZyB9IGZyb20gJy4vdXRpbHMvaXMtc3ZnLXRhZy5tanMnO1xuXG5mdW5jdGlvbiB1c2VTVkdQcm9wcyhwcm9wcywgdmlzdWFsU3RhdGUsIF9pc1N0YXRpYywgQ29tcG9uZW50KSB7XG4gICAgY29uc3QgdmlzdWFsUHJvcHMgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBjcmVhdGVTdmdSZW5kZXJTdGF0ZSgpO1xuICAgICAgICBidWlsZFNWR0F0dHJzKHN0YXRlLCB2aXN1YWxTdGF0ZSwgeyBlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbjogZmFsc2UgfSwgaXNTVkdUYWcoQ29tcG9uZW50KSwgcHJvcHMudHJhbnNmb3JtVGVtcGxhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3RhdGUuYXR0cnMsXG4gICAgICAgICAgICBzdHlsZTogeyAuLi5zdGF0ZS5zdHlsZSB9LFxuICAgICAgICB9O1xuICAgIH0sIFt2aXN1YWxTdGF0ZV0pO1xuICAgIGlmIChwcm9wcy5zdHlsZSkge1xuICAgICAgICBjb25zdCByYXdTdHlsZXMgPSB7fTtcbiAgICAgICAgY29weVJhd1ZhbHVlc09ubHkocmF3U3R5bGVzLCBwcm9wcy5zdHlsZSwgcHJvcHMpO1xuICAgICAgICB2aXN1YWxQcm9wcy5zdHlsZSA9IHsgLi4ucmF3U3R5bGVzLCAuLi52aXN1YWxQcm9wcy5zdHlsZSB9O1xuICAgIH1cbiAgICByZXR1cm4gdmlzdWFsUHJvcHM7XG59XG5cbmV4cG9ydCB7IHVzZVNWR1Byb3BzIH07XG4iLCJpbXBvcnQgeyB1c2VNZW1vLCBjcmVhdGVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlSFRNTFByb3BzIH0gZnJvbSAnLi4vaHRtbC91c2UtcHJvcHMubWpzJztcbmltcG9ydCB7IGZpbHRlclByb3BzIH0gZnJvbSAnLi91dGlscy9maWx0ZXItcHJvcHMubWpzJztcbmltcG9ydCB7IGlzU1ZHQ29tcG9uZW50IH0gZnJvbSAnLi91dGlscy9pcy1zdmctY29tcG9uZW50Lm1qcyc7XG5pbXBvcnQgeyB1c2VTVkdQcm9wcyB9IGZyb20gJy4uL3N2Zy91c2UtcHJvcHMubWpzJztcbmltcG9ydCB7IGlzTW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi92YWx1ZS91dGlscy9pcy1tb3Rpb24tdmFsdWUubWpzJztcblxuZnVuY3Rpb24gY3JlYXRlVXNlUmVuZGVyKGZvcndhcmRNb3Rpb25Qcm9wcyA9IGZhbHNlKSB7XG4gICAgY29uc3QgdXNlUmVuZGVyID0gKENvbXBvbmVudCwgcHJvcHMsIHJlZiwgeyBsYXRlc3RWYWx1ZXMgfSwgaXNTdGF0aWMpID0+IHtcbiAgICAgICAgY29uc3QgdXNlVmlzdWFsUHJvcHMgPSBpc1NWR0NvbXBvbmVudChDb21wb25lbnQpXG4gICAgICAgICAgICA/IHVzZVNWR1Byb3BzXG4gICAgICAgICAgICA6IHVzZUhUTUxQcm9wcztcbiAgICAgICAgY29uc3QgdmlzdWFsUHJvcHMgPSB1c2VWaXN1YWxQcm9wcyhwcm9wcywgbGF0ZXN0VmFsdWVzLCBpc1N0YXRpYywgQ29tcG9uZW50KTtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRQcm9wcyA9IGZpbHRlclByb3BzKHByb3BzLCB0eXBlb2YgQ29tcG9uZW50ID09PSBcInN0cmluZ1wiLCBmb3J3YXJkTW90aW9uUHJvcHMpO1xuICAgICAgICBjb25zdCBlbGVtZW50UHJvcHMgPSB7XG4gICAgICAgICAgICAuLi5maWx0ZXJlZFByb3BzLFxuICAgICAgICAgICAgLi4udmlzdWFsUHJvcHMsXG4gICAgICAgICAgICByZWYsXG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBjb21wb25lbnQgaGFzIGJlZW4gaGFuZGVkIGEgbW90aW9uIHZhbHVlIGFzIGl0cyBjaGlsZCxcbiAgICAgICAgICogbWVtb2lzZSBpdHMgaW5pdGlhbCB2YWx1ZSBhbmQgcmVuZGVyIHRoYXQuIFN1YnNlcXVlbnQgdXBkYXRlc1xuICAgICAgICAgKiB3aWxsIGJlIGhhbmRsZWQgYnkgdGhlIG9uQ2hhbmdlIGhhbmRsZXJcbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHByb3BzO1xuICAgICAgICBjb25zdCByZW5kZXJlZENoaWxkcmVuID0gdXNlTWVtbygoKSA9PiAoaXNNb3Rpb25WYWx1ZShjaGlsZHJlbikgPyBjaGlsZHJlbi5nZXQoKSA6IGNoaWxkcmVuKSwgW2NoaWxkcmVuXSk7XG4gICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KENvbXBvbmVudCwge1xuICAgICAgICAgICAgLi4uZWxlbWVudFByb3BzLFxuICAgICAgICAgICAgY2hpbGRyZW46IHJlbmRlcmVkQ2hpbGRyZW4sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIHVzZVJlbmRlcjtcbn1cblxuZXhwb3J0IHsgY3JlYXRlVXNlUmVuZGVyIH07XG4iLCIvKipcbiAqIENvbnZlcnQgY2FtZWxDYXNlIHRvIGRhc2gtY2FzZSBwcm9wZXJ0aWVzLlxuICovXG5jb25zdCBjYW1lbFRvRGFzaCA9IChzdHIpID0+IHN0ci5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCBcIiQxLSQyXCIpLnRvTG93ZXJDYXNlKCk7XG5cbmV4cG9ydCB7IGNhbWVsVG9EYXNoIH07XG4iLCJmdW5jdGlvbiByZW5kZXJIVE1MKGVsZW1lbnQsIHsgc3R5bGUsIHZhcnMgfSwgc3R5bGVQcm9wLCBwcm9qZWN0aW9uKSB7XG4gICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCBzdHlsZSwgcHJvamVjdGlvbiAmJiBwcm9qZWN0aW9uLmdldFByb2plY3Rpb25TdHlsZXMoc3R5bGVQcm9wKSk7XG4gICAgLy8gTG9vcCBvdmVyIGFueSBDU1MgdmFyaWFibGVzIGFuZCBhc3NpZ24gdGhvc2UuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gdmFycykge1xuICAgICAgICBlbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFyc1trZXldKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IHJlbmRlckhUTUwgfTtcbiIsIi8qKlxuICogQSBzZXQgb2YgYXR0cmlidXRlIG5hbWVzIHRoYXQgYXJlIGFsd2F5cyByZWFkL3dyaXR0ZW4gYXMgY2FtZWwgY2FzZS5cbiAqL1xuY29uc3QgY2FtZWxDYXNlQXR0cmlidXRlcyA9IG5ldyBTZXQoW1xuICAgIFwiYmFzZUZyZXF1ZW5jeVwiLFxuICAgIFwiZGlmZnVzZUNvbnN0YW50XCIsXG4gICAgXCJrZXJuZWxNYXRyaXhcIixcbiAgICBcImtlcm5lbFVuaXRMZW5ndGhcIixcbiAgICBcImtleVNwbGluZXNcIixcbiAgICBcImtleVRpbWVzXCIsXG4gICAgXCJsaW1pdGluZ0NvbmVBbmdsZVwiLFxuICAgIFwibWFya2VySGVpZ2h0XCIsXG4gICAgXCJtYXJrZXJXaWR0aFwiLFxuICAgIFwibnVtT2N0YXZlc1wiLFxuICAgIFwidGFyZ2V0WFwiLFxuICAgIFwidGFyZ2V0WVwiLFxuICAgIFwic3VyZmFjZVNjYWxlXCIsXG4gICAgXCJzcGVjdWxhckNvbnN0YW50XCIsXG4gICAgXCJzcGVjdWxhckV4cG9uZW50XCIsXG4gICAgXCJzdGREZXZpYXRpb25cIixcbiAgICBcInRhYmxlVmFsdWVzXCIsXG4gICAgXCJ2aWV3Qm94XCIsXG4gICAgXCJncmFkaWVudFRyYW5zZm9ybVwiLFxuICAgIFwicGF0aExlbmd0aFwiLFxuICAgIFwic3RhcnRPZmZzZXRcIixcbiAgICBcInRleHRMZW5ndGhcIixcbiAgICBcImxlbmd0aEFkanVzdFwiLFxuXSk7XG5cbmV4cG9ydCB7IGNhbWVsQ2FzZUF0dHJpYnV0ZXMgfTtcbiIsImltcG9ydCB7IGNhbWVsVG9EYXNoIH0gZnJvbSAnLi4vLi4vZG9tL3V0aWxzL2NhbWVsLXRvLWRhc2gubWpzJztcbmltcG9ydCB7IHJlbmRlckhUTUwgfSBmcm9tICcuLi8uLi9odG1sL3V0aWxzL3JlbmRlci5tanMnO1xuaW1wb3J0IHsgY2FtZWxDYXNlQXR0cmlidXRlcyB9IGZyb20gJy4vY2FtZWwtY2FzZS1hdHRycy5tanMnO1xuXG5mdW5jdGlvbiByZW5kZXJTVkcoZWxlbWVudCwgcmVuZGVyU3RhdGUsIF9zdHlsZVByb3AsIHByb2plY3Rpb24pIHtcbiAgICByZW5kZXJIVE1MKGVsZW1lbnQsIHJlbmRlclN0YXRlLCB1bmRlZmluZWQsIHByb2plY3Rpb24pO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHJlbmRlclN0YXRlLmF0dHJzKSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCFjYW1lbENhc2VBdHRyaWJ1dGVzLmhhcyhrZXkpID8gY2FtZWxUb0Rhc2goa2V5KSA6IGtleSwgcmVuZGVyU3RhdGUuYXR0cnNba2V5XSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyByZW5kZXJTVkcgfTtcbiIsImltcG9ydCB7IGlzRm9yY2VkTW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi8uLi9tb3Rpb24vdXRpbHMvaXMtZm9yY2VkLW1vdGlvbi12YWx1ZS5tanMnO1xuaW1wb3J0IHsgaXNNb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uLy4uL3ZhbHVlL3V0aWxzL2lzLW1vdGlvbi12YWx1ZS5tanMnO1xuXG5mdW5jdGlvbiBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMocHJvcHMsIHByZXZQcm9wcykge1xuICAgIGNvbnN0IHsgc3R5bGUgfSA9IHByb3BzO1xuICAgIGNvbnN0IG5ld1ZhbHVlcyA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHN0eWxlKSB7XG4gICAgICAgIGlmIChpc01vdGlvblZhbHVlKHN0eWxlW2tleV0pIHx8XG4gICAgICAgICAgICAocHJldlByb3BzLnN0eWxlICYmIGlzTW90aW9uVmFsdWUocHJldlByb3BzLnN0eWxlW2tleV0pKSB8fFxuICAgICAgICAgICAgaXNGb3JjZWRNb3Rpb25WYWx1ZShrZXksIHByb3BzKSkge1xuICAgICAgICAgICAgbmV3VmFsdWVzW2tleV0gPSBzdHlsZVtrZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdWYWx1ZXM7XG59XG5cbmV4cG9ydCB7IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyB9O1xuIiwiaW1wb3J0IHsgaXNNb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uLy4uL3ZhbHVlL3V0aWxzL2lzLW1vdGlvbi12YWx1ZS5tanMnO1xuaW1wb3J0IHsgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzIGFzIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyQxIH0gZnJvbSAnLi4vLi4vaHRtbC91dGlscy9zY3JhcGUtbW90aW9uLXZhbHVlcy5tanMnO1xuaW1wb3J0IHsgdHJhbnNmb3JtUHJvcE9yZGVyIH0gZnJvbSAnLi4vLi4vaHRtbC91dGlscy90cmFuc2Zvcm0ubWpzJztcblxuZnVuY3Rpb24gc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzKHByb3BzLCBwcmV2UHJvcHMpIHtcbiAgICBjb25zdCBuZXdWYWx1ZXMgPSBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMkMShwcm9wcywgcHJldlByb3BzKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xuICAgICAgICBpZiAoaXNNb3Rpb25WYWx1ZShwcm9wc1trZXldKSB8fCBpc01vdGlvblZhbHVlKHByZXZQcm9wc1trZXldKSkge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0S2V5ID0gdHJhbnNmb3JtUHJvcE9yZGVyLmluZGV4T2Yoa2V5KSAhPT0gLTFcbiAgICAgICAgICAgICAgICA/IFwiYXR0clwiICsga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cmluZygxKVxuICAgICAgICAgICAgICAgIDoga2V5O1xuICAgICAgICAgICAgbmV3VmFsdWVzW3RhcmdldEtleV0gPSBwcm9wc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdWYWx1ZXM7XG59XG5cbmV4cG9ydCB7IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyB9O1xuIiwiZnVuY3Rpb24gcmVzb2x2ZVZhcmlhbnRGcm9tUHJvcHMocHJvcHMsIGRlZmluaXRpb24sIGN1c3RvbSwgY3VycmVudFZhbHVlcyA9IHt9LCBjdXJyZW50VmVsb2NpdHkgPSB7fSkge1xuICAgIC8qKlxuICAgICAqIElmIHRoZSB2YXJpYW50IGRlZmluaXRpb24gaXMgYSBmdW5jdGlvbiwgcmVzb2x2ZS5cbiAgICAgKi9cbiAgICBpZiAodHlwZW9mIGRlZmluaXRpb24gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBkZWZpbml0aW9uID0gZGVmaW5pdGlvbihjdXN0b20gIT09IHVuZGVmaW5lZCA/IGN1c3RvbSA6IHByb3BzLmN1c3RvbSwgY3VycmVudFZhbHVlcywgY3VycmVudFZlbG9jaXR5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgdGhlIHZhcmlhbnQgZGVmaW5pdGlvbiBpcyBhIHZhcmlhbnQgbGFiZWwsIG9yXG4gICAgICogdGhlIGZ1bmN0aW9uIHJldHVybmVkIGEgdmFyaWFudCBsYWJlbCwgcmVzb2x2ZS5cbiAgICAgKi9cbiAgICBpZiAodHlwZW9mIGRlZmluaXRpb24gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgZGVmaW5pdGlvbiA9IHByb3BzLnZhcmlhbnRzICYmIHByb3BzLnZhcmlhbnRzW2RlZmluaXRpb25dO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdCB0aGlzIHBvaW50IHdlJ3ZlIHJlc29sdmVkIGJvdGggZnVuY3Rpb25zIGFuZCB2YXJpYW50IGxhYmVscyxcbiAgICAgKiBidXQgdGhlIHJlc29sdmVkIHZhcmlhbnQgbGFiZWwgbWlnaHQgaXRzZWxmIGhhdmUgYmVlbiBhIGZ1bmN0aW9uLlxuICAgICAqIElmIHNvLCByZXNvbHZlLiBUaGlzIGNhbiBvbmx5IGhhdmUgcmV0dXJuZWQgYSB2YWxpZCB0YXJnZXQgb2JqZWN0LlxuICAgICAqL1xuICAgIGlmICh0eXBlb2YgZGVmaW5pdGlvbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGRlZmluaXRpb24gPSBkZWZpbml0aW9uKGN1c3RvbSAhPT0gdW5kZWZpbmVkID8gY3VzdG9tIDogcHJvcHMuY3VzdG9tLCBjdXJyZW50VmFsdWVzLCBjdXJyZW50VmVsb2NpdHkpO1xuICAgIH1cbiAgICByZXR1cm4gZGVmaW5pdGlvbjtcbn1cblxuZXhwb3J0IHsgcmVzb2x2ZVZhcmlhbnRGcm9tUHJvcHMgfTtcbiIsImNvbnN0IGlzS2V5ZnJhbWVzVGFyZ2V0ID0gKHYpID0+IHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2KTtcbn07XG5cbmV4cG9ydCB7IGlzS2V5ZnJhbWVzVGFyZ2V0IH07XG4iLCJpbXBvcnQgeyBpc0tleWZyYW1lc1RhcmdldCB9IGZyb20gJy4uL2FuaW1hdGlvbi91dGlscy9pcy1rZXlmcmFtZXMtdGFyZ2V0Lm1qcyc7XG5cbmNvbnN0IGlzQ3VzdG9tVmFsdWUgPSAodikgPT4ge1xuICAgIHJldHVybiBCb29sZWFuKHYgJiYgdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdi5taXggJiYgdi50b1ZhbHVlKTtcbn07XG5jb25zdCByZXNvbHZlRmluYWxWYWx1ZUluS2V5ZnJhbWVzID0gKHYpID0+IHtcbiAgICAvLyBUT0RPIG1heWJlIHRocm93IGlmIHYubGVuZ3RoIC0gMSBpcyBwbGFjZWhvbGRlciB0b2tlbj9cbiAgICByZXR1cm4gaXNLZXlmcmFtZXNUYXJnZXQodikgPyB2W3YubGVuZ3RoIC0gMV0gfHwgMCA6IHY7XG59O1xuXG5leHBvcnQgeyBpc0N1c3RvbVZhbHVlLCByZXNvbHZlRmluYWxWYWx1ZUluS2V5ZnJhbWVzIH07XG4iLCJpbXBvcnQgeyBpc0N1c3RvbVZhbHVlIH0gZnJvbSAnLi4vLi4vdXRpbHMvcmVzb2x2ZS12YWx1ZS5tanMnO1xuaW1wb3J0IHsgaXNNb3Rpb25WYWx1ZSB9IGZyb20gJy4vaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5cbi8qKlxuICogSWYgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIGEgTW90aW9uVmFsdWUsIHRoaXMgcmV0dXJucyB0aGUgYWN0dWFsIHZhbHVlLCBvdGhlcndpc2UganVzdCB0aGUgdmFsdWUgaXRzZWxmXG4gKlxuICogVE9ETzogUmVtb3ZlIGFuZCBtb3ZlIHRvIGxpYnJhcnlcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZU1vdGlvblZhbHVlKHZhbHVlKSB7XG4gICAgY29uc3QgdW53cmFwcGVkVmFsdWUgPSBpc01vdGlvblZhbHVlKHZhbHVlKSA/IHZhbHVlLmdldCgpIDogdmFsdWU7XG4gICAgcmV0dXJuIGlzQ3VzdG9tVmFsdWUodW53cmFwcGVkVmFsdWUpXG4gICAgICAgID8gdW53cmFwcGVkVmFsdWUudG9WYWx1ZSgpXG4gICAgICAgIDogdW53cmFwcGVkVmFsdWU7XG59XG5cbmV4cG9ydCB7IHJlc29sdmVNb3Rpb25WYWx1ZSB9O1xuIiwiaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzQW5pbWF0aW9uQ29udHJvbHMgfSBmcm9tICcuLi8uLi9hbmltYXRpb24vdXRpbHMvaXMtYW5pbWF0aW9uLWNvbnRyb2xzLm1qcyc7XG5pbXBvcnQgeyBQcmVzZW5jZUNvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L1ByZXNlbmNlQ29udGV4dC5tanMnO1xuaW1wb3J0IHsgcmVzb2x2ZVZhcmlhbnRGcm9tUHJvcHMgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXRpbHMvcmVzb2x2ZS12YXJpYW50cy5tanMnO1xuaW1wb3J0IHsgdXNlQ29uc3RhbnQgfSBmcm9tICcuLi8uLi91dGlscy91c2UtY29uc3RhbnQubWpzJztcbmltcG9ydCB7IHJlc29sdmVNb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uL3ZhbHVlL3V0aWxzL3Jlc29sdmUtbW90aW9uLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyBNb3Rpb25Db250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9Nb3Rpb25Db250ZXh0L2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBpc0NvbnRyb2xsaW5nVmFyaWFudHMsIGlzVmFyaWFudE5vZGUgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXRpbHMvaXMtY29udHJvbGxpbmctdmFyaWFudHMubWpzJztcblxuZnVuY3Rpb24gbWFrZVN0YXRlKHsgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzLCBjcmVhdGVSZW5kZXJTdGF0ZSwgb25Nb3VudCwgfSwgcHJvcHMsIGNvbnRleHQsIHByZXNlbmNlQ29udGV4dCkge1xuICAgIGNvbnN0IHN0YXRlID0ge1xuICAgICAgICBsYXRlc3RWYWx1ZXM6IG1ha2VMYXRlc3RWYWx1ZXMocHJvcHMsIGNvbnRleHQsIHByZXNlbmNlQ29udGV4dCwgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzKSxcbiAgICAgICAgcmVuZGVyU3RhdGU6IGNyZWF0ZVJlbmRlclN0YXRlKCksXG4gICAgfTtcbiAgICBpZiAob25Nb3VudCkge1xuICAgICAgICBzdGF0ZS5tb3VudCA9IChpbnN0YW5jZSkgPT4gb25Nb3VudChwcm9wcywgaW5zdGFuY2UsIHN0YXRlKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlO1xufVxuY29uc3QgbWFrZVVzZVZpc3VhbFN0YXRlID0gKGNvbmZpZykgPT4gKHByb3BzLCBpc1N0YXRpYykgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KE1vdGlvbkNvbnRleHQpO1xuICAgIGNvbnN0IHByZXNlbmNlQ29udGV4dCA9IHVzZUNvbnRleHQoUHJlc2VuY2VDb250ZXh0KTtcbiAgICBjb25zdCBtYWtlID0gKCkgPT4gbWFrZVN0YXRlKGNvbmZpZywgcHJvcHMsIGNvbnRleHQsIHByZXNlbmNlQ29udGV4dCk7XG4gICAgcmV0dXJuIGlzU3RhdGljID8gbWFrZSgpIDogdXNlQ29uc3RhbnQobWFrZSk7XG59O1xuZnVuY3Rpb24gbWFrZUxhdGVzdFZhbHVlcyhwcm9wcywgY29udGV4dCwgcHJlc2VuY2VDb250ZXh0LCBzY3JhcGVNb3Rpb25WYWx1ZXMpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSB7fTtcbiAgICBjb25zdCBtb3Rpb25WYWx1ZXMgPSBzY3JhcGVNb3Rpb25WYWx1ZXMocHJvcHMsIHt9KTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBtb3Rpb25WYWx1ZXMpIHtcbiAgICAgICAgdmFsdWVzW2tleV0gPSByZXNvbHZlTW90aW9uVmFsdWUobW90aW9uVmFsdWVzW2tleV0pO1xuICAgIH1cbiAgICBsZXQgeyBpbml0aWFsLCBhbmltYXRlIH0gPSBwcm9wcztcbiAgICBjb25zdCBpc0NvbnRyb2xsaW5nVmFyaWFudHMkMSA9IGlzQ29udHJvbGxpbmdWYXJpYW50cyhwcm9wcyk7XG4gICAgY29uc3QgaXNWYXJpYW50Tm9kZSQxID0gaXNWYXJpYW50Tm9kZShwcm9wcyk7XG4gICAgaWYgKGNvbnRleHQgJiZcbiAgICAgICAgaXNWYXJpYW50Tm9kZSQxICYmXG4gICAgICAgICFpc0NvbnRyb2xsaW5nVmFyaWFudHMkMSAmJlxuICAgICAgICBwcm9wcy5pbmhlcml0ICE9PSBmYWxzZSkge1xuICAgICAgICBpZiAoaW5pdGlhbCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgaW5pdGlhbCA9IGNvbnRleHQuaW5pdGlhbDtcbiAgICAgICAgaWYgKGFuaW1hdGUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIGFuaW1hdGUgPSBjb250ZXh0LmFuaW1hdGU7XG4gICAgfVxuICAgIGxldCBpc0luaXRpYWxBbmltYXRpb25CbG9ja2VkID0gcHJlc2VuY2VDb250ZXh0XG4gICAgICAgID8gcHJlc2VuY2VDb250ZXh0LmluaXRpYWwgPT09IGZhbHNlXG4gICAgICAgIDogZmFsc2U7XG4gICAgaXNJbml0aWFsQW5pbWF0aW9uQmxvY2tlZCA9IGlzSW5pdGlhbEFuaW1hdGlvbkJsb2NrZWQgfHwgaW5pdGlhbCA9PT0gZmFsc2U7XG4gICAgY29uc3QgdmFyaWFudFRvU2V0ID0gaXNJbml0aWFsQW5pbWF0aW9uQmxvY2tlZCA/IGFuaW1hdGUgOiBpbml0aWFsO1xuICAgIGlmICh2YXJpYW50VG9TZXQgJiZcbiAgICAgICAgdHlwZW9mIHZhcmlhbnRUb1NldCAhPT0gXCJib29sZWFuXCIgJiZcbiAgICAgICAgIWlzQW5pbWF0aW9uQ29udHJvbHModmFyaWFudFRvU2V0KSkge1xuICAgICAgICBjb25zdCBsaXN0ID0gQXJyYXkuaXNBcnJheSh2YXJpYW50VG9TZXQpID8gdmFyaWFudFRvU2V0IDogW3ZhcmlhbnRUb1NldF07XG4gICAgICAgIGxpc3QuZm9yRWFjaCgoZGVmaW5pdGlvbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWQgPSByZXNvbHZlVmFyaWFudEZyb21Qcm9wcyhwcm9wcywgZGVmaW5pdGlvbik7XG4gICAgICAgICAgICBpZiAoIXJlc29sdmVkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IHsgdHJhbnNpdGlvbkVuZCwgdHJhbnNpdGlvbiwgLi4udGFyZ2V0IH0gPSByZXNvbHZlZDtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRhcmdldCkge1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZVRhcmdldCA9IHRhcmdldFtrZXldO1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlVGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogVGFrZSBmaW5hbCBrZXlmcmFtZSBpZiB0aGUgaW5pdGlhbCBhbmltYXRpb24gaXMgYmxvY2tlZCBiZWNhdXNlXG4gICAgICAgICAgICAgICAgICAgICAqIHdlIHdhbnQgdG8gaW5pdGlhbGlzZSBhdCB0aGUgZW5kIG9mIHRoYXQgYmxvY2tlZCBhbmltYXRpb24uXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGlzSW5pdGlhbEFuaW1hdGlvbkJsb2NrZWRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdmFsdWVUYXJnZXQubGVuZ3RoIC0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAwO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZVRhcmdldCA9IHZhbHVlVGFyZ2V0W2luZGV4XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlVGFyZ2V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlc1trZXldID0gdmFsdWVUYXJnZXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdHJhbnNpdGlvbkVuZClcbiAgICAgICAgICAgICAgICB2YWx1ZXNba2V5XSA9IHRyYW5zaXRpb25FbmRba2V5XTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG59XG5cbmV4cG9ydCB7IG1ha2VVc2VWaXN1YWxTdGF0ZSB9O1xuIiwiaW1wb3J0IHsgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjb25zdGFudCB2YWx1ZSBvdmVyIHRoZSBsaWZlY3ljbGUgb2YgYSBjb21wb25lbnQuXG4gKlxuICogRXZlbiBpZiBgdXNlTWVtb2AgaXMgcHJvdmlkZWQgYW4gZW1wdHkgYXJyYXkgYXMgaXRzIGZpbmFsIGFyZ3VtZW50LCBpdCBkb2Vzbid0IG9mZmVyXG4gKiBhIGd1YXJhbnRlZSB0aGF0IGl0IHdvbid0IHJlLXJ1biBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucyBsYXRlciBvbi4gQnkgdXNpbmcgYHVzZUNvbnN0YW50YFxuICogeW91IGNhbiBlbnN1cmUgdGhhdCBpbml0aWFsaXNlcnMgZG9uJ3QgZXhlY3V0ZSB0d2ljZSBvciBtb3JlLlxuICovXG5mdW5jdGlvbiB1c2VDb25zdGFudChpbml0KSB7XG4gICAgY29uc3QgcmVmID0gdXNlUmVmKG51bGwpO1xuICAgIGlmIChyZWYuY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgICByZWYuY3VycmVudCA9IGluaXQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlZi5jdXJyZW50O1xufVxuXG5leHBvcnQgeyB1c2VDb25zdGFudCB9O1xuIiwiY29uc3Qgbm9vcCA9IChhbnkpID0+IGFueTtcblxuZXhwb3J0IHsgbm9vcCB9O1xuIiwiY2xhc3MgUXVldWUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm9yZGVyID0gW107XG4gICAgICAgIHRoaXMuc2NoZWR1bGVkID0gbmV3IFNldCgpO1xuICAgIH1cbiAgICBhZGQocHJvY2Vzcykge1xuICAgICAgICBpZiAoIXRoaXMuc2NoZWR1bGVkLmhhcyhwcm9jZXNzKSkge1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZWQuYWRkKHByb2Nlc3MpO1xuICAgICAgICAgICAgdGhpcy5vcmRlci5wdXNoKHByb2Nlc3MpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlKHByb2Nlc3MpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLm9yZGVyLmluZGV4T2YocHJvY2Vzcyk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMub3JkZXIuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVkLmRlbGV0ZShwcm9jZXNzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5vcmRlci5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLnNjaGVkdWxlZC5jbGVhcigpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlbmRlclN0ZXAocnVuTmV4dEZyYW1lKSB7XG4gICAgLyoqXG4gICAgICogV2UgY3JlYXRlIGFuZCByZXVzZSB0d28gcXVldWVzLCBvbmUgdG8gcXVldWUgam9icyBmb3IgdGhlIGN1cnJlbnQgZnJhbWVcbiAgICAgKiBhbmQgb25lIGZvciB0aGUgbmV4dC4gV2UgcmV1c2UgdG8gYXZvaWQgdHJpZ2dlcmluZyBHQyBhZnRlciB4IGZyYW1lcy5cbiAgICAgKi9cbiAgICBsZXQgdGhpc0ZyYW1lID0gbmV3IFF1ZXVlKCk7XG4gICAgbGV0IG5leHRGcmFtZSA9IG5ldyBRdWV1ZSgpO1xuICAgIGxldCBudW1Ub1J1biA9IDA7XG4gICAgLyoqXG4gICAgICogVHJhY2sgd2hldGhlciB3ZSdyZSBjdXJyZW50bHkgcHJvY2Vzc2luZyBqb2JzIGluIHRoaXMgc3RlcC4gVGhpcyB3YXlcbiAgICAgKiB3ZSBjYW4gZGVjaWRlIHdoZXRoZXIgdG8gc2NoZWR1bGUgbmV3IGpvYnMgZm9yIHRoaXMgZnJhbWUgb3IgbmV4dC5cbiAgICAgKi9cbiAgICBsZXQgaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgbGV0IGZsdXNoTmV4dEZyYW1lID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogQSBzZXQgb2YgcHJvY2Vzc2VzIHdoaWNoIHdlcmUgbWFya2VkIGtlZXBBbGl2ZSB3aGVuIHNjaGVkdWxlZC5cbiAgICAgKi9cbiAgICBjb25zdCB0b0tlZXBBbGl2ZSA9IG5ldyBXZWFrU2V0KCk7XG4gICAgY29uc3Qgc3RlcCA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNjaGVkdWxlIGEgcHJvY2VzcyB0byBydW4gb24gdGhlIG5leHQgZnJhbWUuXG4gICAgICAgICAqL1xuICAgICAgICBzY2hlZHVsZTogKGNhbGxiYWNrLCBrZWVwQWxpdmUgPSBmYWxzZSwgaW1tZWRpYXRlID0gZmFsc2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFkZFRvQ3VycmVudEZyYW1lID0gaW1tZWRpYXRlICYmIGlzUHJvY2Vzc2luZztcbiAgICAgICAgICAgIGNvbnN0IHF1ZXVlID0gYWRkVG9DdXJyZW50RnJhbWUgPyB0aGlzRnJhbWUgOiBuZXh0RnJhbWU7XG4gICAgICAgICAgICBpZiAoa2VlcEFsaXZlKVxuICAgICAgICAgICAgICAgIHRvS2VlcEFsaXZlLmFkZChjYWxsYmFjayk7XG4gICAgICAgICAgICBpZiAocXVldWUuYWRkKGNhbGxiYWNrKSAmJiBhZGRUb0N1cnJlbnRGcmFtZSAmJiBpc1Byb2Nlc3NpbmcpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSdyZSBhZGRpbmcgaXQgdG8gdGhlIGN1cnJlbnRseSBydW5uaW5nIHF1ZXVlLCB1cGRhdGUgaXRzIG1lYXN1cmVkIHNpemVcbiAgICAgICAgICAgICAgICBudW1Ub1J1biA9IHRoaXNGcmFtZS5vcmRlci5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2s7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYW5jZWwgdGhlIHByb3ZpZGVkIGNhbGxiYWNrIGZyb20gcnVubmluZyBvbiB0aGUgbmV4dCBmcmFtZS5cbiAgICAgICAgICovXG4gICAgICAgIGNhbmNlbDogKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICBuZXh0RnJhbWUucmVtb3ZlKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIHRvS2VlcEFsaXZlLmRlbGV0ZShjYWxsYmFjayk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFeGVjdXRlIGFsbCBzY2hlZHVsZSBjYWxsYmFja3MuXG4gICAgICAgICAqL1xuICAgICAgICBwcm9jZXNzOiAoZnJhbWVEYXRhKSA9PiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlJ3JlIGFscmVhZHkgcHJvY2Vzc2luZyB3ZSd2ZSBwcm9iYWJseSBiZWVuIHRyaWdnZXJlZCBieSBhIGZsdXNoU3luY1xuICAgICAgICAgICAgICogaW5zaWRlIGFuIGV4aXN0aW5nIHByb2Nlc3MuIEluc3RlYWQgb2YgZXhlY3V0aW5nLCBtYXJrIGZsdXNoTmV4dEZyYW1lXG4gICAgICAgICAgICAgKiBhcyB0cnVlIGFuZCBlbnN1cmUgd2UgZmx1c2ggdGhlIGZvbGxvd2luZyBmcmFtZSBhdCB0aGUgZW5kIG9mIHRoaXMgb25lLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoaXNQcm9jZXNzaW5nKSB7XG4gICAgICAgICAgICAgICAgZmx1c2hOZXh0RnJhbWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlzUHJvY2Vzc2luZyA9IHRydWU7XG4gICAgICAgICAgICBbdGhpc0ZyYW1lLCBuZXh0RnJhbWVdID0gW25leHRGcmFtZSwgdGhpc0ZyYW1lXTtcbiAgICAgICAgICAgIC8vIENsZWFyIHRoZSBuZXh0IGZyYW1lIHF1ZXVlXG4gICAgICAgICAgICBuZXh0RnJhbWUuY2xlYXIoKTtcbiAgICAgICAgICAgIC8vIEV4ZWN1dGUgdGhpcyBmcmFtZVxuICAgICAgICAgICAgbnVtVG9SdW4gPSB0aGlzRnJhbWUub3JkZXIubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKG51bVRvUnVuKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1Ub1J1bjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gdGhpc0ZyYW1lLm9yZGVyW2ldO1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmcmFtZURhdGEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9LZWVwQWxpdmUuaGFzKGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcC5zY2hlZHVsZShjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICBydW5OZXh0RnJhbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGZsdXNoTmV4dEZyYW1lKSB7XG4gICAgICAgICAgICAgICAgZmx1c2hOZXh0RnJhbWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzdGVwLnByb2Nlc3MoZnJhbWVEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiBzdGVwO1xufVxuXG5leHBvcnQgeyBjcmVhdGVSZW5kZXJTdGVwIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVSZW5kZXJTdGVwIH0gZnJvbSAnLi9yZW5kZXItc3RlcC5tanMnO1xuXG5jb25zdCBzdGVwc09yZGVyID0gW1xuICAgIFwicHJlcGFyZVwiLFxuICAgIFwicmVhZFwiLFxuICAgIFwidXBkYXRlXCIsXG4gICAgXCJwcmVSZW5kZXJcIixcbiAgICBcInJlbmRlclwiLFxuICAgIFwicG9zdFJlbmRlclwiLFxuXTtcbmNvbnN0IG1heEVsYXBzZWQgPSA0MDtcbmZ1bmN0aW9uIGNyZWF0ZVJlbmRlckJhdGNoZXIoc2NoZWR1bGVOZXh0QmF0Y2gsIGFsbG93S2VlcEFsaXZlKSB7XG4gICAgbGV0IHJ1bk5leHRGcmFtZSA9IGZhbHNlO1xuICAgIGxldCB1c2VEZWZhdWx0RWxhcHNlZCA9IHRydWU7XG4gICAgY29uc3Qgc3RhdGUgPSB7XG4gICAgICAgIGRlbHRhOiAwLFxuICAgICAgICB0aW1lc3RhbXA6IDAsXG4gICAgICAgIGlzUHJvY2Vzc2luZzogZmFsc2UsXG4gICAgfTtcbiAgICBjb25zdCBzdGVwcyA9IHN0ZXBzT3JkZXIucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgICAgICBhY2Nba2V5XSA9IGNyZWF0ZVJlbmRlclN0ZXAoKCkgPT4gKHJ1bk5leHRGcmFtZSA9IHRydWUpKTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gICAgY29uc3QgcHJvY2Vzc1N0ZXAgPSAoc3RlcElkKSA9PiBzdGVwc1tzdGVwSWRdLnByb2Nlc3Moc3RhdGUpO1xuICAgIGNvbnN0IHByb2Nlc3NCYXRjaCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgIHJ1bk5leHRGcmFtZSA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5kZWx0YSA9IHVzZURlZmF1bHRFbGFwc2VkXG4gICAgICAgICAgICA/IDEwMDAgLyA2MFxuICAgICAgICAgICAgOiBNYXRoLm1heChNYXRoLm1pbih0aW1lc3RhbXAgLSBzdGF0ZS50aW1lc3RhbXAsIG1heEVsYXBzZWQpLCAxKTtcbiAgICAgICAgc3RhdGUudGltZXN0YW1wID0gdGltZXN0YW1wO1xuICAgICAgICBzdGF0ZS5pc1Byb2Nlc3NpbmcgPSB0cnVlO1xuICAgICAgICBzdGVwc09yZGVyLmZvckVhY2gocHJvY2Vzc1N0ZXApO1xuICAgICAgICBzdGF0ZS5pc1Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKHJ1bk5leHRGcmFtZSAmJiBhbGxvd0tlZXBBbGl2ZSkge1xuICAgICAgICAgICAgdXNlRGVmYXVsdEVsYXBzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHNjaGVkdWxlTmV4dEJhdGNoKHByb2Nlc3NCYXRjaCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHdha2UgPSAoKSA9PiB7XG4gICAgICAgIHJ1bk5leHRGcmFtZSA9IHRydWU7XG4gICAgICAgIHVzZURlZmF1bHRFbGFwc2VkID0gdHJ1ZTtcbiAgICAgICAgaWYgKCFzdGF0ZS5pc1Byb2Nlc3NpbmcpIHtcbiAgICAgICAgICAgIHNjaGVkdWxlTmV4dEJhdGNoKHByb2Nlc3NCYXRjaCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHNjaGVkdWxlID0gc3RlcHNPcmRlci5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHN0ZXAgPSBzdGVwc1trZXldO1xuICAgICAgICBhY2Nba2V5XSA9IChwcm9jZXNzLCBrZWVwQWxpdmUgPSBmYWxzZSwgaW1tZWRpYXRlID0gZmFsc2UpID0+IHtcbiAgICAgICAgICAgIGlmICghcnVuTmV4dEZyYW1lKVxuICAgICAgICAgICAgICAgIHdha2UoKTtcbiAgICAgICAgICAgIHJldHVybiBzdGVwLnNjaGVkdWxlKHByb2Nlc3MsIGtlZXBBbGl2ZSwgaW1tZWRpYXRlKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gICAgY29uc3QgY2FuY2VsID0gKHByb2Nlc3MpID0+IHN0ZXBzT3JkZXIuZm9yRWFjaCgoa2V5KSA9PiBzdGVwc1trZXldLmNhbmNlbChwcm9jZXNzKSk7XG4gICAgcmV0dXJuIHsgc2NoZWR1bGUsIGNhbmNlbCwgc3RhdGUsIHN0ZXBzIH07XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVJlbmRlckJhdGNoZXIsIHN0ZXBzT3JkZXIgfTtcbiIsImltcG9ydCB7IG5vb3AgfSBmcm9tICcuLi91dGlscy9ub29wLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVSZW5kZXJCYXRjaGVyIH0gZnJvbSAnLi9iYXRjaGVyLm1qcyc7XG5cbmNvbnN0IHsgc2NoZWR1bGU6IGZyYW1lLCBjYW5jZWw6IGNhbmNlbEZyYW1lLCBzdGF0ZTogZnJhbWVEYXRhLCBzdGVwcywgfSA9IGNyZWF0ZVJlbmRlckJhdGNoZXIodHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZSAhPT0gXCJ1bmRlZmluZWRcIiA/IHJlcXVlc3RBbmltYXRpb25GcmFtZSA6IG5vb3AsIHRydWUpO1xuXG5leHBvcnQgeyBjYW5jZWxGcmFtZSwgZnJhbWUsIGZyYW1lRGF0YSwgc3RlcHMgfTtcbiIsImltcG9ydCB7IHJlbmRlclNWRyB9IGZyb20gJy4vdXRpbHMvcmVuZGVyLm1qcyc7XG5pbXBvcnQgeyBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMgfSBmcm9tICcuL3V0aWxzL3NjcmFwZS1tb3Rpb24tdmFsdWVzLm1qcyc7XG5pbXBvcnQgeyBtYWtlVXNlVmlzdWFsU3RhdGUgfSBmcm9tICcuLi8uLi9tb3Rpb24vdXRpbHMvdXNlLXZpc3VhbC1zdGF0ZS5tanMnO1xuaW1wb3J0IHsgY3JlYXRlU3ZnUmVuZGVyU3RhdGUgfSBmcm9tICcuL3V0aWxzL2NyZWF0ZS1yZW5kZXItc3RhdGUubWpzJztcbmltcG9ydCB7IGJ1aWxkU1ZHQXR0cnMgfSBmcm9tICcuL3V0aWxzL2J1aWxkLWF0dHJzLm1qcyc7XG5pbXBvcnQgeyBpc1NWR1RhZyB9IGZyb20gJy4vdXRpbHMvaXMtc3ZnLXRhZy5tanMnO1xuaW1wb3J0IHsgZnJhbWUgfSBmcm9tICcuLi8uLi9mcmFtZWxvb3AvZnJhbWUubWpzJztcblxuY29uc3Qgc3ZnTW90aW9uQ29uZmlnID0ge1xuICAgIHVzZVZpc3VhbFN0YXRlOiBtYWtlVXNlVmlzdWFsU3RhdGUoe1xuICAgICAgICBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHM6IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyxcbiAgICAgICAgY3JlYXRlUmVuZGVyU3RhdGU6IGNyZWF0ZVN2Z1JlbmRlclN0YXRlLFxuICAgICAgICBvbk1vdW50OiAocHJvcHMsIGluc3RhbmNlLCB7IHJlbmRlclN0YXRlLCBsYXRlc3RWYWx1ZXMgfSkgPT4ge1xuICAgICAgICAgICAgZnJhbWUucmVhZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyU3RhdGUuZGltZW5zaW9ucyA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaW5zdGFuY2UuZ2V0QkJveCA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGluc3RhbmNlLmdldEJCb3goKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaW5zdGFuY2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1vc3QgbGlrZWx5IHRyeWluZyB0byBtZWFzdXJlIGFuIHVucmVuZGVyZWQgZWxlbWVudCB1bmRlciBGaXJlZm94XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlclN0YXRlLmRpbWVuc2lvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZnJhbWUucmVuZGVyKCgpID0+IHtcbiAgICAgICAgICAgICAgICBidWlsZFNWR0F0dHJzKHJlbmRlclN0YXRlLCBsYXRlc3RWYWx1ZXMsIHsgZW5hYmxlSGFyZHdhcmVBY2NlbGVyYXRpb246IGZhbHNlIH0sIGlzU1ZHVGFnKGluc3RhbmNlLnRhZ05hbWUpLCBwcm9wcy50cmFuc2Zvcm1UZW1wbGF0ZSk7XG4gICAgICAgICAgICAgICAgcmVuZGVyU1ZHKGluc3RhbmNlLCByZW5kZXJTdGF0ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICB9KSxcbn07XG5cbmV4cG9ydCB7IHN2Z01vdGlvbkNvbmZpZyB9O1xuIiwiaW1wb3J0IHsgbWFrZVVzZVZpc3VhbFN0YXRlIH0gZnJvbSAnLi4vLi4vbW90aW9uL3V0aWxzL3VzZS12aXN1YWwtc3RhdGUubWpzJztcbmltcG9ydCB7IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyB9IGZyb20gJy4vdXRpbHMvc2NyYXBlLW1vdGlvbi12YWx1ZXMubWpzJztcbmltcG9ydCB7IGNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSB9IGZyb20gJy4vdXRpbHMvY3JlYXRlLXJlbmRlci1zdGF0ZS5tanMnO1xuXG5jb25zdCBodG1sTW90aW9uQ29uZmlnID0ge1xuICAgIHVzZVZpc3VhbFN0YXRlOiBtYWtlVXNlVmlzdWFsU3RhdGUoe1xuICAgICAgICBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMsXG4gICAgICAgIGNyZWF0ZVJlbmRlclN0YXRlOiBjcmVhdGVIdG1sUmVuZGVyU3RhdGUsXG4gICAgfSksXG59O1xuXG5leHBvcnQgeyBodG1sTW90aW9uQ29uZmlnIH07XG4iLCJmdW5jdGlvbiBhZGREb21FdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyA9IHsgcGFzc2l2ZTogdHJ1ZSB9KSB7XG4gICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICByZXR1cm4gKCkgPT4gdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyKTtcbn1cblxuZXhwb3J0IHsgYWRkRG9tRXZlbnQgfTtcbiIsImNvbnN0IGlzUHJpbWFyeVBvaW50ZXIgPSAoZXZlbnQpID0+IHtcbiAgICBpZiAoZXZlbnQucG9pbnRlclR5cGUgPT09IFwibW91c2VcIikge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGV2ZW50LmJ1dHRvbiAhPT0gXCJudW1iZXJcIiB8fCBldmVudC5idXR0b24gPD0gMDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBpc1ByaW1hcnkgaXMgdHJ1ZSBmb3IgYWxsIG1pY2UgYnV0dG9ucywgd2hlcmVhcyBldmVyeSB0b3VjaCBwb2ludFxuICAgICAgICAgKiBpcyByZWdhcmRlZCBhcyBpdHMgb3duIGlucHV0LiBTbyBzdWJzZXF1ZW50IGNvbmN1cnJlbnQgdG91Y2ggcG9pbnRzXG4gICAgICAgICAqIHdpbGwgYmUgZmFsc2UuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNwZWNpZmljYWxseSBtYXRjaCBhZ2FpbnN0IGZhbHNlIGhlcmUgYXMgaW5jb21wbGV0ZSB2ZXJzaW9ucyBvZlxuICAgICAgICAgKiBQb2ludGVyRXZlbnRzIGluIHZlcnkgb2xkIGJyb3dzZXIgbWlnaHQgaGF2ZSBpdCBzZXQgYXMgdW5kZWZpbmVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIGV2ZW50LmlzUHJpbWFyeSAhPT0gZmFsc2U7XG4gICAgfVxufTtcblxuZXhwb3J0IHsgaXNQcmltYXJ5UG9pbnRlciB9O1xuIiwiaW1wb3J0IHsgaXNQcmltYXJ5UG9pbnRlciB9IGZyb20gJy4vdXRpbHMvaXMtcHJpbWFyeS1wb2ludGVyLm1qcyc7XG5cbmZ1bmN0aW9uIGV4dHJhY3RFdmVudEluZm8oZXZlbnQsIHBvaW50VHlwZSA9IFwicGFnZVwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcG9pbnQ6IHtcbiAgICAgICAgICAgIHg6IGV2ZW50W3BvaW50VHlwZSArIFwiWFwiXSxcbiAgICAgICAgICAgIHk6IGV2ZW50W3BvaW50VHlwZSArIFwiWVwiXSxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuY29uc3QgYWRkUG9pbnRlckluZm8gPSAoaGFuZGxlcikgPT4ge1xuICAgIHJldHVybiAoZXZlbnQpID0+IGlzUHJpbWFyeVBvaW50ZXIoZXZlbnQpICYmIGhhbmRsZXIoZXZlbnQsIGV4dHJhY3RFdmVudEluZm8oZXZlbnQpKTtcbn07XG5cbmV4cG9ydCB7IGFkZFBvaW50ZXJJbmZvLCBleHRyYWN0RXZlbnRJbmZvIH07XG4iLCJpbXBvcnQgeyBhZGREb21FdmVudCB9IGZyb20gJy4vYWRkLWRvbS1ldmVudC5tanMnO1xuaW1wb3J0IHsgYWRkUG9pbnRlckluZm8gfSBmcm9tICcuL2V2ZW50LWluZm8ubWpzJztcblxuZnVuY3Rpb24gYWRkUG9pbnRlckV2ZW50KHRhcmdldCwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGFkZERvbUV2ZW50KHRhcmdldCwgZXZlbnROYW1lLCBhZGRQb2ludGVySW5mbyhoYW5kbGVyKSwgb3B0aW9ucyk7XG59XG5cbmV4cG9ydCB7IGFkZFBvaW50ZXJFdmVudCB9O1xuIiwiLyoqXG4gKiBQaXBlXG4gKiBDb21wb3NlIG90aGVyIHRyYW5zZm9ybWVycyB0byBydW4gbGluZWFyaWx5XG4gKiBwaXBlKG1pbigyMCksIG1heCg0MCkpXG4gKiBAcGFyYW0gIHsuLi5mdW5jdGlvbnN9IHRyYW5zZm9ybWVyc1xuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmNvbnN0IGNvbWJpbmVGdW5jdGlvbnMgPSAoYSwgYikgPT4gKHYpID0+IGIoYSh2KSk7XG5jb25zdCBwaXBlID0gKC4uLnRyYW5zZm9ybWVycykgPT4gdHJhbnNmb3JtZXJzLnJlZHVjZShjb21iaW5lRnVuY3Rpb25zKTtcblxuZXhwb3J0IHsgcGlwZSB9O1xuIiwiZnVuY3Rpb24gY3JlYXRlTG9jayhuYW1lKSB7XG4gICAgbGV0IGxvY2sgPSBudWxsO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG9wZW5Mb2NrID0gKCkgPT4ge1xuICAgICAgICAgICAgbG9jayA9IG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChsb2NrID09PSBudWxsKSB7XG4gICAgICAgICAgICBsb2NrID0gbmFtZTtcbiAgICAgICAgICAgIHJldHVybiBvcGVuTG9jaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbn1cbmNvbnN0IGdsb2JhbEhvcml6b250YWxMb2NrID0gY3JlYXRlTG9jayhcImRyYWdIb3Jpem9udGFsXCIpO1xuY29uc3QgZ2xvYmFsVmVydGljYWxMb2NrID0gY3JlYXRlTG9jayhcImRyYWdWZXJ0aWNhbFwiKTtcbmZ1bmN0aW9uIGdldEdsb2JhbExvY2soZHJhZykge1xuICAgIGxldCBsb2NrID0gZmFsc2U7XG4gICAgaWYgKGRyYWcgPT09IFwieVwiKSB7XG4gICAgICAgIGxvY2sgPSBnbG9iYWxWZXJ0aWNhbExvY2soKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZHJhZyA9PT0gXCJ4XCIpIHtcbiAgICAgICAgbG9jayA9IGdsb2JhbEhvcml6b250YWxMb2NrKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBvcGVuSG9yaXpvbnRhbCA9IGdsb2JhbEhvcml6b250YWxMb2NrKCk7XG4gICAgICAgIGNvbnN0IG9wZW5WZXJ0aWNhbCA9IGdsb2JhbFZlcnRpY2FsTG9jaygpO1xuICAgICAgICBpZiAob3Blbkhvcml6b250YWwgJiYgb3BlblZlcnRpY2FsKSB7XG4gICAgICAgICAgICBsb2NrID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIG9wZW5Ib3Jpem9udGFsKCk7XG4gICAgICAgICAgICAgICAgb3BlblZlcnRpY2FsKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gUmVsZWFzZSB0aGUgbG9ja3MgYmVjYXVzZSB3ZSBkb24ndCB1c2UgdGhlbVxuICAgICAgICAgICAgaWYgKG9wZW5Ib3Jpem9udGFsKVxuICAgICAgICAgICAgICAgIG9wZW5Ib3Jpem9udGFsKCk7XG4gICAgICAgICAgICBpZiAob3BlblZlcnRpY2FsKVxuICAgICAgICAgICAgICAgIG9wZW5WZXJ0aWNhbCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsb2NrO1xufVxuZnVuY3Rpb24gaXNEcmFnQWN0aXZlKCkge1xuICAgIC8vIENoZWNrIHRoZSBnZXN0dXJlIGxvY2sgLSBpZiB3ZSBnZXQgaXQsIGl0IG1lYW5zIG5vIGRyYWcgZ2VzdHVyZSBpcyBhY3RpdmVcbiAgICAvLyBhbmQgd2UgY2FuIHNhZmVseSBmaXJlIHRoZSB0YXAgZ2VzdHVyZS5cbiAgICBjb25zdCBvcGVuR2VzdHVyZUxvY2sgPSBnZXRHbG9iYWxMb2NrKHRydWUpO1xuICAgIGlmICghb3Blbkdlc3R1cmVMb2NrKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBvcGVuR2VzdHVyZUxvY2soKTtcbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUxvY2ssIGdldEdsb2JhbExvY2ssIGlzRHJhZ0FjdGl2ZSB9O1xuIiwiY2xhc3MgRmVhdHVyZSB7XG4gICAgY29uc3RydWN0b3Iobm9kZSkge1xuICAgICAgICB0aGlzLmlzTW91bnRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5vZGUgPSBub2RlO1xuICAgIH1cbiAgICB1cGRhdGUoKSB7IH1cbn1cblxuZXhwb3J0IHsgRmVhdHVyZSB9O1xuIiwiaW1wb3J0IHsgYWRkUG9pbnRlckV2ZW50IH0gZnJvbSAnLi4vZXZlbnRzL2FkZC1wb2ludGVyLWV2ZW50Lm1qcyc7XG5pbXBvcnQgeyBwaXBlIH0gZnJvbSAnLi4vdXRpbHMvcGlwZS5tanMnO1xuaW1wb3J0IHsgaXNEcmFnQWN0aXZlIH0gZnJvbSAnLi9kcmFnL3V0aWxzL2xvY2subWpzJztcbmltcG9ydCB7IEZlYXR1cmUgfSBmcm9tICcuLi9tb3Rpb24vZmVhdHVyZXMvRmVhdHVyZS5tanMnO1xuaW1wb3J0IHsgZnJhbWUgfSBmcm9tICcuLi9mcmFtZWxvb3AvZnJhbWUubWpzJztcblxuZnVuY3Rpb24gYWRkSG92ZXJFdmVudChub2RlLCBpc0FjdGl2ZSkge1xuICAgIGNvbnN0IGV2ZW50TmFtZSA9IFwicG9pbnRlclwiICsgKGlzQWN0aXZlID8gXCJlbnRlclwiIDogXCJsZWF2ZVwiKTtcbiAgICBjb25zdCBjYWxsYmFja05hbWUgPSBcIm9uSG92ZXJcIiArIChpc0FjdGl2ZSA/IFwiU3RhcnRcIiA6IFwiRW5kXCIpO1xuICAgIGNvbnN0IGhhbmRsZUV2ZW50ID0gKGV2ZW50LCBpbmZvKSA9PiB7XG4gICAgICAgIGlmIChldmVudC50eXBlID09PSBcInRvdWNoXCIgfHwgaXNEcmFnQWN0aXZlKCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHByb3BzID0gbm9kZS5nZXRQcm9wcygpO1xuICAgICAgICBpZiAobm9kZS5hbmltYXRpb25TdGF0ZSAmJiBwcm9wcy53aGlsZUhvdmVyKSB7XG4gICAgICAgICAgICBub2RlLmFuaW1hdGlvblN0YXRlLnNldEFjdGl2ZShcIndoaWxlSG92ZXJcIiwgaXNBY3RpdmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wc1tjYWxsYmFja05hbWVdKSB7XG4gICAgICAgICAgICBmcmFtZS51cGRhdGUoKCkgPT4gcHJvcHNbY2FsbGJhY2tOYW1lXShldmVudCwgaW5mbykpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gYWRkUG9pbnRlckV2ZW50KG5vZGUuY3VycmVudCwgZXZlbnROYW1lLCBoYW5kbGVFdmVudCwge1xuICAgICAgICBwYXNzaXZlOiAhbm9kZS5nZXRQcm9wcygpW2NhbGxiYWNrTmFtZV0sXG4gICAgfSk7XG59XG5jbGFzcyBIb3Zlckdlc3R1cmUgZXh0ZW5kcyBGZWF0dXJlIHtcbiAgICBtb3VudCgpIHtcbiAgICAgICAgdGhpcy51bm1vdW50ID0gcGlwZShhZGRIb3ZlckV2ZW50KHRoaXMubm9kZSwgdHJ1ZSksIGFkZEhvdmVyRXZlbnQodGhpcy5ub2RlLCBmYWxzZSkpO1xuICAgIH1cbiAgICB1bm1vdW50KCkgeyB9XG59XG5cbmV4cG9ydCB7IEhvdmVyR2VzdHVyZSB9O1xuIiwiLyoqXG4gKiBSZWN1cnNpdmVseSB0cmF2ZXJzZSB1cCB0aGUgdHJlZSB0byBjaGVjayB3aGV0aGVyIHRoZSBwcm92aWRlZCBjaGlsZCBub2RlXG4gKiBpcyB0aGUgcGFyZW50IG9yIGEgZGVzY2VuZGFudCBvZiBpdC5cbiAqXG4gKiBAcGFyYW0gcGFyZW50IC0gRWxlbWVudCB0byBmaW5kXG4gKiBAcGFyYW0gY2hpbGQgLSBFbGVtZW50IHRvIHRlc3QgYWdhaW5zdCBwYXJlbnRcbiAqL1xuY29uc3QgaXNOb2RlT3JDaGlsZCA9IChwYXJlbnQsIGNoaWxkKSA9PiB7XG4gICAgaWYgKCFjaGlsZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsc2UgaWYgKHBhcmVudCA9PT0gY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gaXNOb2RlT3JDaGlsZChwYXJlbnQsIGNoaWxkLnBhcmVudEVsZW1lbnQpO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IGlzTm9kZU9yQ2hpbGQgfTtcbiIsImltcG9ydCB7IGV4dHJhY3RFdmVudEluZm8gfSBmcm9tICcuLi9ldmVudHMvZXZlbnQtaW5mby5tanMnO1xuaW1wb3J0IHsgYWRkRG9tRXZlbnQgfSBmcm9tICcuLi9ldmVudHMvYWRkLWRvbS1ldmVudC5tanMnO1xuaW1wb3J0IHsgYWRkUG9pbnRlckV2ZW50IH0gZnJvbSAnLi4vZXZlbnRzL2FkZC1wb2ludGVyLWV2ZW50Lm1qcyc7XG5pbXBvcnQgeyBGZWF0dXJlIH0gZnJvbSAnLi4vbW90aW9uL2ZlYXR1cmVzL0ZlYXR1cmUubWpzJztcbmltcG9ydCB7IHBpcGUgfSBmcm9tICcuLi91dGlscy9waXBlLm1qcyc7XG5pbXBvcnQgeyBpc0RyYWdBY3RpdmUgfSBmcm9tICcuL2RyYWcvdXRpbHMvbG9jay5tanMnO1xuaW1wb3J0IHsgaXNOb2RlT3JDaGlsZCB9IGZyb20gJy4vdXRpbHMvaXMtbm9kZS1vci1jaGlsZC5tanMnO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uL3V0aWxzL25vb3AubWpzJztcbmltcG9ydCB7IGZyYW1lIH0gZnJvbSAnLi4vZnJhbWVsb29wL2ZyYW1lLm1qcyc7XG5cbmZ1bmN0aW9uIGZpcmVTeW50aGV0aWNQb2ludGVyRXZlbnQobmFtZSwgaGFuZGxlcikge1xuICAgIGlmICghaGFuZGxlcilcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHN5bnRoZXRpY1BvaW50ZXJFdmVudCA9IG5ldyBQb2ludGVyRXZlbnQoXCJwb2ludGVyXCIgKyBuYW1lKTtcbiAgICBoYW5kbGVyKHN5bnRoZXRpY1BvaW50ZXJFdmVudCwgZXh0cmFjdEV2ZW50SW5mbyhzeW50aGV0aWNQb2ludGVyRXZlbnQpKTtcbn1cbmNsYXNzIFByZXNzR2VzdHVyZSBleHRlbmRzIEZlYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnJlbW92ZVN0YXJ0TGlzdGVuZXJzID0gbm9vcDtcbiAgICAgICAgdGhpcy5yZW1vdmVFbmRMaXN0ZW5lcnMgPSBub29wO1xuICAgICAgICB0aGlzLnJlbW92ZUFjY2Vzc2libGVMaXN0ZW5lcnMgPSBub29wO1xuICAgICAgICB0aGlzLnN0YXJ0UG9pbnRlclByZXNzID0gKHN0YXJ0RXZlbnQsIHN0YXJ0SW5mbykgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVFbmRMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUHJlc3NpbmcpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLm5vZGUuZ2V0UHJvcHMoKTtcbiAgICAgICAgICAgIGNvbnN0IGVuZFBvaW50ZXJQcmVzcyA9IChlbmRFdmVudCwgZW5kSW5mbykgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jaGVja1ByZXNzRW5kKCkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBjb25zdCB7IG9uVGFwLCBvblRhcENhbmNlbCB9ID0gdGhpcy5ub2RlLmdldFByb3BzKCk7XG4gICAgICAgICAgICAgICAgZnJhbWUudXBkYXRlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFdlIG9ubHkgY291bnQgdGhpcyBhcyBhIHRhcCBnZXN0dXJlIGlmIHRoZSBldmVudC50YXJnZXQgaXMgdGhlIHNhbWVcbiAgICAgICAgICAgICAgICAgICAgICogYXMsIG9yIGEgY2hpbGQgb2YsIHRoaXMgY29tcG9uZW50J3MgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgIWlzTm9kZU9yQ2hpbGQodGhpcy5ub2RlLmN1cnJlbnQsIGVuZEV2ZW50LnRhcmdldClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gb25UYXBDYW5jZWwgJiYgb25UYXBDYW5jZWwoZW5kRXZlbnQsIGVuZEluZm8pXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG9uVGFwICYmIG9uVGFwKGVuZEV2ZW50LCBlbmRJbmZvKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZW1vdmVQb2ludGVyVXBMaXN0ZW5lciA9IGFkZFBvaW50ZXJFdmVudCh3aW5kb3csIFwicG9pbnRlcnVwXCIsIGVuZFBvaW50ZXJQcmVzcywgeyBwYXNzaXZlOiAhKHByb3BzLm9uVGFwIHx8IHByb3BzW1wib25Qb2ludGVyVXBcIl0pIH0pO1xuICAgICAgICAgICAgY29uc3QgcmVtb3ZlUG9pbnRlckNhbmNlbExpc3RlbmVyID0gYWRkUG9pbnRlckV2ZW50KHdpbmRvdywgXCJwb2ludGVyY2FuY2VsXCIsIChjYW5jZWxFdmVudCwgY2FuY2VsSW5mbykgPT4gdGhpcy5jYW5jZWxQcmVzcyhjYW5jZWxFdmVudCwgY2FuY2VsSW5mbyksIHsgcGFzc2l2ZTogIShwcm9wcy5vblRhcENhbmNlbCB8fCBwcm9wc1tcIm9uUG9pbnRlckNhbmNlbFwiXSkgfSk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUVuZExpc3RlbmVycyA9IHBpcGUocmVtb3ZlUG9pbnRlclVwTGlzdGVuZXIsIHJlbW92ZVBvaW50ZXJDYW5jZWxMaXN0ZW5lcik7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0UHJlc3Moc3RhcnRFdmVudCwgc3RhcnRJbmZvKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zdGFydEFjY2Vzc2libGVQcmVzcyA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZUtleWRvd24gPSAoa2V5ZG93bkV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGtleWRvd25FdmVudC5rZXkgIT09IFwiRW50ZXJcIiB8fCB0aGlzLmlzUHJlc3NpbmcpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGVLZXl1cCA9IChrZXl1cEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXl1cEV2ZW50LmtleSAhPT0gXCJFbnRlclwiIHx8ICF0aGlzLmNoZWNrUHJlc3NFbmQoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgZmlyZVN5bnRoZXRpY1BvaW50ZXJFdmVudChcInVwXCIsIChldmVudCwgaW5mbykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBvblRhcCB9ID0gdGhpcy5ub2RlLmdldFByb3BzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob25UYXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFtZS51cGRhdGUoKCkgPT4gb25UYXAoZXZlbnQsIGluZm8pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUVuZExpc3RlbmVycygpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRW5kTGlzdGVuZXJzID0gYWRkRG9tRXZlbnQodGhpcy5ub2RlLmN1cnJlbnQsIFwia2V5dXBcIiwgaGFuZGxlS2V5dXApO1xuICAgICAgICAgICAgICAgIGZpcmVTeW50aGV0aWNQb2ludGVyRXZlbnQoXCJkb3duXCIsIChldmVudCwgaW5mbykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0UHJlc3MoZXZlbnQsIGluZm8pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZUtleWRvd25MaXN0ZW5lciA9IGFkZERvbUV2ZW50KHRoaXMubm9kZS5jdXJyZW50LCBcImtleWRvd25cIiwgaGFuZGxlS2V5ZG93bik7XG4gICAgICAgICAgICBjb25zdCBoYW5kbGVCbHVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1ByZXNzaW5nKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgZmlyZVN5bnRoZXRpY1BvaW50ZXJFdmVudChcImNhbmNlbFwiLCAoY2FuY2VsRXZlbnQsIGNhbmNlbEluZm8pID0+IHRoaXMuY2FuY2VsUHJlc3MoY2FuY2VsRXZlbnQsIGNhbmNlbEluZm8pKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZW1vdmVCbHVyTGlzdGVuZXIgPSBhZGREb21FdmVudCh0aGlzLm5vZGUuY3VycmVudCwgXCJibHVyXCIsIGhhbmRsZUJsdXIpO1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVBY2Nlc3NpYmxlTGlzdGVuZXJzID0gcGlwZShyZW1vdmVLZXlkb3duTGlzdGVuZXIsIHJlbW92ZUJsdXJMaXN0ZW5lcik7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHN0YXJ0UHJlc3MoZXZlbnQsIGluZm8pIHtcbiAgICAgICAgdGhpcy5pc1ByZXNzaW5nID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgeyBvblRhcFN0YXJ0LCB3aGlsZVRhcCB9ID0gdGhpcy5ub2RlLmdldFByb3BzKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbnN1cmUgd2UgdHJpZ2dlciBhbmltYXRpb25zIGJlZm9yZSBmaXJpbmcgZXZlbnQgY2FsbGJhY2tcbiAgICAgICAgICovXG4gICAgICAgIGlmICh3aGlsZVRhcCAmJiB0aGlzLm5vZGUuYW5pbWF0aW9uU3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZS5hbmltYXRpb25TdGF0ZS5zZXRBY3RpdmUoXCJ3aGlsZVRhcFwiLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob25UYXBTdGFydCkge1xuICAgICAgICAgICAgZnJhbWUudXBkYXRlKCgpID0+IG9uVGFwU3RhcnQoZXZlbnQsIGluZm8pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjaGVja1ByZXNzRW5kKCkge1xuICAgICAgICB0aGlzLnJlbW92ZUVuZExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLmlzUHJlc3NpbmcgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLm5vZGUuZ2V0UHJvcHMoKTtcbiAgICAgICAgaWYgKHByb3BzLndoaWxlVGFwICYmIHRoaXMubm9kZS5hbmltYXRpb25TdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5ub2RlLmFuaW1hdGlvblN0YXRlLnNldEFjdGl2ZShcIndoaWxlVGFwXCIsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIWlzRHJhZ0FjdGl2ZSgpO1xuICAgIH1cbiAgICBjYW5jZWxQcmVzcyhldmVudCwgaW5mbykge1xuICAgICAgICBpZiAoIXRoaXMuY2hlY2tQcmVzc0VuZCgpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB7IG9uVGFwQ2FuY2VsIH0gPSB0aGlzLm5vZGUuZ2V0UHJvcHMoKTtcbiAgICAgICAgaWYgKG9uVGFwQ2FuY2VsKSB7XG4gICAgICAgICAgICBmcmFtZS51cGRhdGUoKCkgPT4gb25UYXBDYW5jZWwoZXZlbnQsIGluZm8pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtb3VudCgpIHtcbiAgICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLm5vZGUuZ2V0UHJvcHMoKTtcbiAgICAgICAgY29uc3QgcmVtb3ZlUG9pbnRlckxpc3RlbmVyID0gYWRkUG9pbnRlckV2ZW50KHRoaXMubm9kZS5jdXJyZW50LCBcInBvaW50ZXJkb3duXCIsIHRoaXMuc3RhcnRQb2ludGVyUHJlc3MsIHsgcGFzc2l2ZTogIShwcm9wcy5vblRhcFN0YXJ0IHx8IHByb3BzW1wib25Qb2ludGVyU3RhcnRcIl0pIH0pO1xuICAgICAgICBjb25zdCByZW1vdmVGb2N1c0xpc3RlbmVyID0gYWRkRG9tRXZlbnQodGhpcy5ub2RlLmN1cnJlbnQsIFwiZm9jdXNcIiwgdGhpcy5zdGFydEFjY2Vzc2libGVQcmVzcyk7XG4gICAgICAgIHRoaXMucmVtb3ZlU3RhcnRMaXN0ZW5lcnMgPSBwaXBlKHJlbW92ZVBvaW50ZXJMaXN0ZW5lciwgcmVtb3ZlRm9jdXNMaXN0ZW5lcik7XG4gICAgfVxuICAgIHVubW91bnQoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlU3RhcnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5yZW1vdmVFbmRMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5yZW1vdmVBY2Nlc3NpYmxlTGlzdGVuZXJzKCk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBQcmVzc0dlc3R1cmUgfTtcbiIsIi8qKlxuICogTWFwIGFuIEludGVyc2VjdGlvbkhhbmRsZXIgY2FsbGJhY2sgdG8gYW4gZWxlbWVudC4gV2Ugb25seSBldmVyIG1ha2Ugb25lIGhhbmRsZXIgZm9yIG9uZVxuICogZWxlbWVudCwgc28gZXZlbiB0aG91Z2ggdGhlc2UgaGFuZGxlcnMgbWlnaHQgYWxsIGJlIHRyaWdnZXJlZCBieSBkaWZmZXJlbnRcbiAqIG9ic2VydmVycywgd2UgY2FuIGtlZXAgdGhlbSBpbiB0aGUgc2FtZSBtYXAuXG4gKi9cbmNvbnN0IG9ic2VydmVyQ2FsbGJhY2tzID0gbmV3IFdlYWtNYXAoKTtcbi8qKlxuICogTXVsdGlwbGUgb2JzZXJ2ZXJzIGNhbiBiZSBjcmVhdGVkIGZvciBtdWx0aXBsZSBlbGVtZW50L2RvY3VtZW50IHJvb3RzLiBFYWNoIHdpdGhcbiAqIGRpZmZlcmVudCBzZXR0aW5ncy4gU28gaGVyZSB3ZSBzdG9yZSBkaWN0aW9uYXJpZXMgb2Ygb2JzZXJ2ZXJzIHRvIGVhY2ggcm9vdCxcbiAqIHVzaW5nIHNlcmlhbGlzZWQgc2V0dGluZ3MgKHRocmVzaG9sZC9tYXJnaW4pIGFzIGxvb2t1cCBrZXlzLlxuICovXG5jb25zdCBvYnNlcnZlcnMgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgZmlyZU9ic2VydmVyQ2FsbGJhY2sgPSAoZW50cnkpID0+IHtcbiAgICBjb25zdCBjYWxsYmFjayA9IG9ic2VydmVyQ2FsbGJhY2tzLmdldChlbnRyeS50YXJnZXQpO1xuICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKGVudHJ5KTtcbn07XG5jb25zdCBmaXJlQWxsT2JzZXJ2ZXJDYWxsYmFja3MgPSAoZW50cmllcykgPT4ge1xuICAgIGVudHJpZXMuZm9yRWFjaChmaXJlT2JzZXJ2ZXJDYWxsYmFjayk7XG59O1xuZnVuY3Rpb24gaW5pdEludGVyc2VjdGlvbk9ic2VydmVyKHsgcm9vdCwgLi4ub3B0aW9ucyB9KSB7XG4gICAgY29uc3QgbG9va3VwUm9vdCA9IHJvb3QgfHwgZG9jdW1lbnQ7XG4gICAgLyoqXG4gICAgICogSWYgd2UgZG9uJ3QgaGF2ZSBhbiBvYnNlcnZlciBsb29rdXAgbWFwIGZvciB0aGlzIHJvb3QsIGNyZWF0ZSBvbmUuXG4gICAgICovXG4gICAgaWYgKCFvYnNlcnZlcnMuaGFzKGxvb2t1cFJvb3QpKSB7XG4gICAgICAgIG9ic2VydmVycy5zZXQobG9va3VwUm9vdCwge30pO1xuICAgIH1cbiAgICBjb25zdCByb290T2JzZXJ2ZXJzID0gb2JzZXJ2ZXJzLmdldChsb29rdXBSb290KTtcbiAgICBjb25zdCBrZXkgPSBKU09OLnN0cmluZ2lmeShvcHRpb25zKTtcbiAgICAvKipcbiAgICAgKiBJZiB3ZSBkb24ndCBoYXZlIGFuIG9ic2VydmVyIGZvciB0aGlzIGNvbWJpbmF0aW9uIG9mIHJvb3QgYW5kIHNldHRpbmdzLFxuICAgICAqIGNyZWF0ZSBvbmUuXG4gICAgICovXG4gICAgaWYgKCFyb290T2JzZXJ2ZXJzW2tleV0pIHtcbiAgICAgICAgcm9vdE9ic2VydmVyc1trZXldID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGZpcmVBbGxPYnNlcnZlckNhbGxiYWNrcywgeyByb290LCAuLi5vcHRpb25zIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcm9vdE9ic2VydmVyc1trZXldO1xufVxuZnVuY3Rpb24gb2JzZXJ2ZUludGVyc2VjdGlvbihlbGVtZW50LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHJvb3RJbnRlcmVzZWN0aW9uT2JzZXJ2ZXIgPSBpbml0SW50ZXJzZWN0aW9uT2JzZXJ2ZXIob3B0aW9ucyk7XG4gICAgb2JzZXJ2ZXJDYWxsYmFja3Muc2V0KGVsZW1lbnQsIGNhbGxiYWNrKTtcbiAgICByb290SW50ZXJlc2VjdGlvbk9ic2VydmVyLm9ic2VydmUoZWxlbWVudCk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgb2JzZXJ2ZXJDYWxsYmFja3MuZGVsZXRlKGVsZW1lbnQpO1xuICAgICAgICByb290SW50ZXJlc2VjdGlvbk9ic2VydmVyLnVub2JzZXJ2ZShlbGVtZW50KTtcbiAgICB9O1xufVxuXG5leHBvcnQgeyBvYnNlcnZlSW50ZXJzZWN0aW9uIH07XG4iLCJpbXBvcnQgeyBGZWF0dXJlIH0gZnJvbSAnLi4vRmVhdHVyZS5tanMnO1xuaW1wb3J0IHsgb2JzZXJ2ZUludGVyc2VjdGlvbiB9IGZyb20gJy4vb2JzZXJ2ZXJzLm1qcyc7XG5cbmNvbnN0IHRocmVzaG9sZE5hbWVzID0ge1xuICAgIHNvbWU6IDAsXG4gICAgYWxsOiAxLFxufTtcbmNsYXNzIEluVmlld0ZlYXR1cmUgZXh0ZW5kcyBGZWF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5oYXNFbnRlcmVkVmlldyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzSW5WaWV3ID0gZmFsc2U7XG4gICAgfVxuICAgIHN0YXJ0T2JzZXJ2ZXIoKSB7XG4gICAgICAgIHRoaXMudW5tb3VudCgpO1xuICAgICAgICBjb25zdCB7IHZpZXdwb3J0ID0ge30gfSA9IHRoaXMubm9kZS5nZXRQcm9wcygpO1xuICAgICAgICBjb25zdCB7IHJvb3QsIG1hcmdpbjogcm9vdE1hcmdpbiwgYW1vdW50ID0gXCJzb21lXCIsIG9uY2UgfSA9IHZpZXdwb3J0O1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgcm9vdDogcm9vdCA/IHJvb3QuY3VycmVudCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHJvb3RNYXJnaW4sXG4gICAgICAgICAgICB0aHJlc2hvbGQ6IHR5cGVvZiBhbW91bnQgPT09IFwibnVtYmVyXCIgPyBhbW91bnQgOiB0aHJlc2hvbGROYW1lc1thbW91bnRdLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBvbkludGVyc2VjdGlvblVwZGF0ZSA9IChlbnRyeSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBpc0ludGVyc2VjdGluZyB9ID0gZW50cnk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoZXJlJ3MgYmVlbiBubyBjaGFuZ2UgaW4gdGhlIHZpZXdwb3J0IHN0YXRlLCBlYXJseSByZXR1cm4uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0aGlzLmlzSW5WaWV3ID09PSBpc0ludGVyc2VjdGluZylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmlzSW5WaWV3ID0gaXNJbnRlcnNlY3Rpbmc7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEhhbmRsZSBoYXNFbnRlcmVkVmlldy4gSWYgdGhpcyBpcyBvbmx5IG1lYW50IHRvIHJ1biBvbmNlLCBhbmRcbiAgICAgICAgICAgICAqIGVsZW1lbnQgaXNuJ3QgdmlzaWJsZSwgZWFybHkgcmV0dXJuLiBPdGhlcndpc2Ugc2V0IGhhc0VudGVyZWRWaWV3IHRvIHRydWUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChvbmNlICYmICFpc0ludGVyc2VjdGluZyAmJiB0aGlzLmhhc0VudGVyZWRWaWV3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhc0VudGVyZWRWaWV3ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm5vZGUuYW5pbWF0aW9uU3RhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGUuYW5pbWF0aW9uU3RhdGUuc2V0QWN0aXZlKFwid2hpbGVJblZpZXdcIiwgaXNJbnRlcnNlY3RpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVc2UgdGhlIGxhdGVzdCBjb21taXR0ZWQgcHJvcHMgcmF0aGVyIHRoYW4gdGhlIG9uZXMgaW4gc2NvcGVcbiAgICAgICAgICAgICAqIHdoZW4gdGhpcyBvYnNlcnZlciBpcyBjcmVhdGVkXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IHsgb25WaWV3cG9ydEVudGVyLCBvblZpZXdwb3J0TGVhdmUgfSA9IHRoaXMubm9kZS5nZXRQcm9wcygpO1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBpc0ludGVyc2VjdGluZyA/IG9uVmlld3BvcnRFbnRlciA6IG9uVmlld3BvcnRMZWF2ZTtcbiAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKGVudHJ5KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG9ic2VydmVJbnRlcnNlY3Rpb24odGhpcy5ub2RlLmN1cnJlbnQsIG9wdGlvbnMsIG9uSW50ZXJzZWN0aW9uVXBkYXRlKTtcbiAgICB9XG4gICAgbW91bnQoKSB7XG4gICAgICAgIHRoaXMuc3RhcnRPYnNlcnZlcigpO1xuICAgIH1cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHsgcHJvcHMsIHByZXZQcm9wcyB9ID0gdGhpcy5ub2RlO1xuICAgICAgICBjb25zdCBoYXNPcHRpb25zQ2hhbmdlZCA9IFtcImFtb3VudFwiLCBcIm1hcmdpblwiLCBcInJvb3RcIl0uc29tZShoYXNWaWV3cG9ydE9wdGlvbkNoYW5nZWQocHJvcHMsIHByZXZQcm9wcykpO1xuICAgICAgICBpZiAoaGFzT3B0aW9uc0NoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRPYnNlcnZlcigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVubW91bnQoKSB7IH1cbn1cbmZ1bmN0aW9uIGhhc1ZpZXdwb3J0T3B0aW9uQ2hhbmdlZCh7IHZpZXdwb3J0ID0ge30gfSwgeyB2aWV3cG9ydDogcHJldlZpZXdwb3J0ID0ge30gfSA9IHt9KSB7XG4gICAgcmV0dXJuIChuYW1lKSA9PiB2aWV3cG9ydFtuYW1lXSAhPT0gcHJldlZpZXdwb3J0W25hbWVdO1xufVxuXG5leHBvcnQgeyBJblZpZXdGZWF0dXJlIH07XG4iLCJpbXBvcnQgeyBIb3Zlckdlc3R1cmUgfSBmcm9tICcuLi8uLi9nZXN0dXJlcy9ob3Zlci5tanMnO1xuaW1wb3J0IHsgRm9jdXNHZXN0dXJlIH0gZnJvbSAnLi4vLi4vZ2VzdHVyZXMvZm9jdXMubWpzJztcbmltcG9ydCB7IFByZXNzR2VzdHVyZSB9IGZyb20gJy4uLy4uL2dlc3R1cmVzL3ByZXNzLm1qcyc7XG5pbXBvcnQgeyBJblZpZXdGZWF0dXJlIH0gZnJvbSAnLi92aWV3cG9ydC9pbmRleC5tanMnO1xuXG5jb25zdCBnZXN0dXJlQW5pbWF0aW9ucyA9IHtcbiAgICBpblZpZXc6IHtcbiAgICAgICAgRmVhdHVyZTogSW5WaWV3RmVhdHVyZSxcbiAgICB9LFxuICAgIHRhcDoge1xuICAgICAgICBGZWF0dXJlOiBQcmVzc0dlc3R1cmUsXG4gICAgfSxcbiAgICBmb2N1czoge1xuICAgICAgICBGZWF0dXJlOiBGb2N1c0dlc3R1cmUsXG4gICAgfSxcbiAgICBob3Zlcjoge1xuICAgICAgICBGZWF0dXJlOiBIb3Zlckdlc3R1cmUsXG4gICAgfSxcbn07XG5cbmV4cG9ydCB7IGdlc3R1cmVBbmltYXRpb25zIH07XG4iLCJpbXBvcnQgeyBhZGREb21FdmVudCB9IGZyb20gJy4uL2V2ZW50cy9hZGQtZG9tLWV2ZW50Lm1qcyc7XG5pbXBvcnQgeyBGZWF0dXJlIH0gZnJvbSAnLi4vbW90aW9uL2ZlYXR1cmVzL0ZlYXR1cmUubWpzJztcbmltcG9ydCB7IHBpcGUgfSBmcm9tICcuLi91dGlscy9waXBlLm1qcyc7XG5cbmNsYXNzIEZvY3VzR2VzdHVyZSBleHRlbmRzIEZlYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgfVxuICAgIG9uRm9jdXMoKSB7XG4gICAgICAgIGxldCBpc0ZvY3VzVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhpcyBlbGVtZW50IGRvZXNuJ3QgbWF0Y2ggZm9jdXMtdmlzaWJsZSB0aGVuIGRvbid0XG4gICAgICAgICAqIGFwcGx5IHdoaWxlSG92ZXIuIEJ1dCwgaWYgbWF0Y2hlcyB0aHJvd3MgdGhhdCBmb2N1cy12aXNpYmxlXG4gICAgICAgICAqIGlzIG5vdCBhIHZhbGlkIHNlbGVjdG9yIHRoZW4gaW4gdGhhdCBicm93c2VyIG91dGxpbmUgc3R5bGVzIHdpbGwgYmUgYXBwbGllZFxuICAgICAgICAgKiB0byB0aGUgZWxlbWVudCBieSBkZWZhdWx0IGFuZCB3ZSB3YW50IHRvIG1hdGNoIHRoYXQgYmVoYXZpb3VyIHdpdGggd2hpbGVGb2N1cy5cbiAgICAgICAgICovXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpc0ZvY3VzVmlzaWJsZSA9IHRoaXMubm9kZS5jdXJyZW50Lm1hdGNoZXMoXCI6Zm9jdXMtdmlzaWJsZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaXNGb2N1c1Zpc2libGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNGb2N1c1Zpc2libGUgfHwgIXRoaXMubm9kZS5hbmltYXRpb25TdGF0ZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5ub2RlLmFuaW1hdGlvblN0YXRlLnNldEFjdGl2ZShcIndoaWxlRm9jdXNcIiwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xuICAgIH1cbiAgICBvbkJsdXIoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0FjdGl2ZSB8fCAhdGhpcy5ub2RlLmFuaW1hdGlvblN0YXRlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLm5vZGUuYW5pbWF0aW9uU3RhdGUuc2V0QWN0aXZlKFwid2hpbGVGb2N1c1wiLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICB9XG4gICAgbW91bnQoKSB7XG4gICAgICAgIHRoaXMudW5tb3VudCA9IHBpcGUoYWRkRG9tRXZlbnQodGhpcy5ub2RlLmN1cnJlbnQsIFwiZm9jdXNcIiwgKCkgPT4gdGhpcy5vbkZvY3VzKCkpLCBhZGREb21FdmVudCh0aGlzLm5vZGUuY3VycmVudCwgXCJibHVyXCIsICgpID0+IHRoaXMub25CbHVyKCkpKTtcbiAgICB9XG4gICAgdW5tb3VudCgpIHsgfVxufVxuXG5leHBvcnQgeyBGb2N1c0dlc3R1cmUgfTtcbiIsImZ1bmN0aW9uIHNoYWxsb3dDb21wYXJlKG5leHQsIHByZXYpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocHJldikpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBwcmV2TGVuZ3RoID0gcHJldi5sZW5ndGg7XG4gICAgaWYgKHByZXZMZW5ndGggIT09IG5leHQubGVuZ3RoKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmV2TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHByZXZbaV0gIT09IG5leHRbaV0pXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgeyBzaGFsbG93Q29tcGFyZSB9O1xuIiwiaW1wb3J0IHsgcmVzb2x2ZVZhcmlhbnRGcm9tUHJvcHMgfSBmcm9tICcuL3Jlc29sdmUtdmFyaWFudHMubWpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBsYXRlc3Qgc3RhdGUgb2YgZXZlcnkgTW90aW9uVmFsdWUgb24gYSBWaXN1YWxFbGVtZW50XG4gKi9cbmZ1bmN0aW9uIGdldEN1cnJlbnQodmlzdWFsRWxlbWVudCkge1xuICAgIGNvbnN0IGN1cnJlbnQgPSB7fTtcbiAgICB2aXN1YWxFbGVtZW50LnZhbHVlcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiAoY3VycmVudFtrZXldID0gdmFsdWUuZ2V0KCkpKTtcbiAgICByZXR1cm4gY3VycmVudDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgbGF0ZXN0IHZlbG9jaXR5IG9mIGV2ZXJ5IE1vdGlvblZhbHVlIG9uIGEgVmlzdWFsRWxlbWVudFxuICovXG5mdW5jdGlvbiBnZXRWZWxvY2l0eSh2aXN1YWxFbGVtZW50KSB7XG4gICAgY29uc3QgdmVsb2NpdHkgPSB7fTtcbiAgICB2aXN1YWxFbGVtZW50LnZhbHVlcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiAodmVsb2NpdHlba2V5XSA9IHZhbHVlLmdldFZlbG9jaXR5KCkpKTtcbiAgICByZXR1cm4gdmVsb2NpdHk7XG59XG5mdW5jdGlvbiByZXNvbHZlVmFyaWFudCh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uLCBjdXN0b20pIHtcbiAgICBjb25zdCBwcm9wcyA9IHZpc3VhbEVsZW1lbnQuZ2V0UHJvcHMoKTtcbiAgICByZXR1cm4gcmVzb2x2ZVZhcmlhbnRGcm9tUHJvcHMocHJvcHMsIGRlZmluaXRpb24sIGN1c3RvbSAhPT0gdW5kZWZpbmVkID8gY3VzdG9tIDogcHJvcHMuY3VzdG9tLCBnZXRDdXJyZW50KHZpc3VhbEVsZW1lbnQpLCBnZXRWZWxvY2l0eSh2aXN1YWxFbGVtZW50KSk7XG59XG5cbmV4cG9ydCB7IHJlc29sdmVWYXJpYW50IH07XG4iLCJpbXBvcnQgeyBjYW1lbFRvRGFzaCB9IGZyb20gJy4uLy4uL3JlbmRlci9kb20vdXRpbHMvY2FtZWwtdG8tZGFzaC5tanMnO1xuXG5jb25zdCBvcHRpbWl6ZWRBcHBlYXJEYXRhSWQgPSBcImZyYW1lckFwcGVhcklkXCI7XG5jb25zdCBvcHRpbWl6ZWRBcHBlYXJEYXRhQXR0cmlidXRlID0gXCJkYXRhLVwiICsgY2FtZWxUb0Rhc2gob3B0aW1pemVkQXBwZWFyRGF0YUlkKTtcblxuZXhwb3J0IHsgb3B0aW1pemVkQXBwZWFyRGF0YUF0dHJpYnV0ZSwgb3B0aW1pemVkQXBwZWFyRGF0YUlkIH07XG4iLCJpbXBvcnQgeyBub29wIH0gZnJvbSAnLi9ub29wLm1qcyc7XG5cbmxldCB3YXJuaW5nID0gbm9vcDtcbmxldCBpbnZhcmlhbnQgPSBub29wO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHdhcm5pbmcgPSAoY2hlY2ssIG1lc3NhZ2UpID0+IHtcbiAgICAgICAgaWYgKCFjaGVjayAmJiB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBpbnZhcmlhbnQgPSAoY2hlY2ssIG1lc3NhZ2UpID0+IHtcbiAgICAgICAgaWYgKCFjaGVjaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZXhwb3J0IHsgaW52YXJpYW50LCB3YXJuaW5nIH07XG4iLCIvKipcbiAqIENvbnZlcnRzIHNlY29uZHMgdG8gbWlsbGlzZWNvbmRzXG4gKlxuICogQHBhcmFtIHNlY29uZHMgLSBUaW1lIGluIHNlY29uZHMuXG4gKiBAcmV0dXJuIG1pbGxpc2Vjb25kcyAtIENvbnZlcnRlZCB0aW1lIGluIG1pbGxpc2Vjb25kcy5cbiAqL1xuY29uc3Qgc2Vjb25kc1RvTWlsbGlzZWNvbmRzID0gKHNlY29uZHMpID0+IHNlY29uZHMgKiAxMDAwO1xuY29uc3QgbWlsbGlzZWNvbmRzVG9TZWNvbmRzID0gKG1pbGxpc2Vjb25kcykgPT4gbWlsbGlzZWNvbmRzIC8gMTAwMDtcblxuZXhwb3J0IHsgbWlsbGlzZWNvbmRzVG9TZWNvbmRzLCBzZWNvbmRzVG9NaWxsaXNlY29uZHMgfTtcbiIsImNvbnN0IGlzQmV6aWVyRGVmaW5pdGlvbiA9IChlYXNpbmcpID0+IEFycmF5LmlzQXJyYXkoZWFzaW5nKSAmJiB0eXBlb2YgZWFzaW5nWzBdID09PSBcIm51bWJlclwiO1xuXG5leHBvcnQgeyBpc0JlemllckRlZmluaXRpb24gfTtcbiIsImltcG9ydCB7IGlzQmV6aWVyRGVmaW5pdGlvbiB9IGZyb20gJy4uLy4uLy4uL2Vhc2luZy91dGlscy9pcy1iZXppZXItZGVmaW5pdGlvbi5tanMnO1xuXG5mdW5jdGlvbiBpc1dhYXBpU3VwcG9ydGVkRWFzaW5nKGVhc2luZykge1xuICAgIHJldHVybiBCb29sZWFuKCFlYXNpbmcgfHxcbiAgICAgICAgKHR5cGVvZiBlYXNpbmcgPT09IFwic3RyaW5nXCIgJiYgc3VwcG9ydGVkV2FhcGlFYXNpbmdbZWFzaW5nXSkgfHxcbiAgICAgICAgaXNCZXppZXJEZWZpbml0aW9uKGVhc2luZykgfHxcbiAgICAgICAgKEFycmF5LmlzQXJyYXkoZWFzaW5nKSAmJiBlYXNpbmcuZXZlcnkoaXNXYWFwaVN1cHBvcnRlZEVhc2luZykpKTtcbn1cbmNvbnN0IGN1YmljQmV6aWVyQXNTdHJpbmcgPSAoW2EsIGIsIGMsIGRdKSA9PiBgY3ViaWMtYmV6aWVyKCR7YX0sICR7Yn0sICR7Y30sICR7ZH0pYDtcbmNvbnN0IHN1cHBvcnRlZFdhYXBpRWFzaW5nID0ge1xuICAgIGxpbmVhcjogXCJsaW5lYXJcIixcbiAgICBlYXNlOiBcImVhc2VcIixcbiAgICBlYXNlSW46IFwiZWFzZS1pblwiLFxuICAgIGVhc2VPdXQ6IFwiZWFzZS1vdXRcIixcbiAgICBlYXNlSW5PdXQ6IFwiZWFzZS1pbi1vdXRcIixcbiAgICBjaXJjSW46IGN1YmljQmV6aWVyQXNTdHJpbmcoWzAsIDAuNjUsIDAuNTUsIDFdKSxcbiAgICBjaXJjT3V0OiBjdWJpY0JlemllckFzU3RyaW5nKFswLjU1LCAwLCAxLCAwLjQ1XSksXG4gICAgYmFja0luOiBjdWJpY0JlemllckFzU3RyaW5nKFswLjMxLCAwLjAxLCAwLjY2LCAtMC41OV0pLFxuICAgIGJhY2tPdXQ6IGN1YmljQmV6aWVyQXNTdHJpbmcoWzAuMzMsIDEuNTMsIDAuNjksIDAuOTldKSxcbn07XG5mdW5jdGlvbiBtYXBFYXNpbmdUb05hdGl2ZUVhc2luZyhlYXNpbmcpIHtcbiAgICBpZiAoIWVhc2luZylcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICByZXR1cm4gaXNCZXppZXJEZWZpbml0aW9uKGVhc2luZylcbiAgICAgICAgPyBjdWJpY0JlemllckFzU3RyaW5nKGVhc2luZylcbiAgICAgICAgOiBBcnJheS5pc0FycmF5KGVhc2luZylcbiAgICAgICAgICAgID8gZWFzaW5nLm1hcChtYXBFYXNpbmdUb05hdGl2ZUVhc2luZylcbiAgICAgICAgICAgIDogc3VwcG9ydGVkV2FhcGlFYXNpbmdbZWFzaW5nXTtcbn1cblxuZXhwb3J0IHsgY3ViaWNCZXppZXJBc1N0cmluZywgaXNXYWFwaVN1cHBvcnRlZEVhc2luZywgbWFwRWFzaW5nVG9OYXRpdmVFYXNpbmcsIHN1cHBvcnRlZFdhYXBpRWFzaW5nIH07XG4iLCJpbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vdXRpbHMvbm9vcC5tanMnO1xuXG4vKlxuICBCZXppZXIgZnVuY3Rpb24gZ2VuZXJhdG9yXG4gIFRoaXMgaGFzIGJlZW4gbW9kaWZpZWQgZnJvbSBHYcOrdGFuIFJlbmF1ZGVhdSdzIEJlemllckVhc2luZ1xuICBodHRwczovL2dpdGh1Yi5jb20vZ3JlL2Jlemllci1lYXNpbmcvYmxvYi9tYXN0ZXIvc3JjL2luZGV4LmpzXG4gIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmUvYmV6aWVyLWVhc2luZy9ibG9iL21hc3Rlci9MSUNFTlNFXG4gIFxuICBJJ3ZlIHJlbW92ZWQgdGhlIG5ld3RvblJhcGhzb25JdGVyYXRlIGFsZ28gYmVjYXVzZSBpbiBiZW5jaG1hcmtpbmcgaXRcbiAgd2Fzbid0IG5vdGljaWFibHkgZmFzdGVyIHRoYW4gYmluYXJ5U3ViZGl2aXNpb24sIGluZGVlZCByZW1vdmluZyBpdFxuICB1c3VhbGx5IGltcHJvdmVkIHRpbWVzLCBkZXBlbmRpbmcgb24gdGhlIGN1cnZlLlxuICBJIGFsc28gcmVtb3ZlZCB0aGUgbG9va3VwIHRhYmxlLCBhcyBmb3IgdGhlIGFkZGVkIGJ1bmRsZSBzaXplIGFuZCBsb29wIHdlJ3JlXG4gIG9ubHkgY3V0dGluZyB+NCBvciBzbyBzdWJkaXZpc2lvbiBpdGVyYXRpb25zLiBJIGJ1bXBlZCB0aGUgbWF4IGl0ZXJhdGlvbnMgdXBcbiAgdG8gMTIgdG8gY29tcGVuc2F0ZSBhbmQgdGhpcyBzdGlsbCB0ZW5kZWQgdG8gYmUgZmFzdGVyIGZvciBubyBwZXJjZWl2YWJsZVxuICBsb3NzIGluIGFjY3VyYWN5LlxuICBVc2FnZVxuICAgIGNvbnN0IGVhc2VPdXQgPSBjdWJpY0JlemllciguMTcsLjY3LC44MywuNjcpO1xuICAgIGNvbnN0IHggPSBlYXNlT3V0KDAuNSk7IC8vIHJldHVybnMgMC42MjcuLi5cbiovXG4vLyBSZXR1cm5zIHgodCkgZ2l2ZW4gdCwgeDEsIGFuZCB4Miwgb3IgeSh0KSBnaXZlbiB0LCB5MSwgYW5kIHkyLlxuY29uc3QgY2FsY0JlemllciA9ICh0LCBhMSwgYTIpID0+ICgoKDEuMCAtIDMuMCAqIGEyICsgMy4wICogYTEpICogdCArICgzLjAgKiBhMiAtIDYuMCAqIGExKSkgKiB0ICsgMy4wICogYTEpICpcbiAgICB0O1xuY29uc3Qgc3ViZGl2aXNpb25QcmVjaXNpb24gPSAwLjAwMDAwMDE7XG5jb25zdCBzdWJkaXZpc2lvbk1heEl0ZXJhdGlvbnMgPSAxMjtcbmZ1bmN0aW9uIGJpbmFyeVN1YmRpdmlkZSh4LCBsb3dlckJvdW5kLCB1cHBlckJvdW5kLCBtWDEsIG1YMikge1xuICAgIGxldCBjdXJyZW50WDtcbiAgICBsZXQgY3VycmVudFQ7XG4gICAgbGV0IGkgPSAwO1xuICAgIGRvIHtcbiAgICAgICAgY3VycmVudFQgPSBsb3dlckJvdW5kICsgKHVwcGVyQm91bmQgLSBsb3dlckJvdW5kKSAvIDIuMDtcbiAgICAgICAgY3VycmVudFggPSBjYWxjQmV6aWVyKGN1cnJlbnRULCBtWDEsIG1YMikgLSB4O1xuICAgICAgICBpZiAoY3VycmVudFggPiAwLjApIHtcbiAgICAgICAgICAgIHVwcGVyQm91bmQgPSBjdXJyZW50VDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvd2VyQm91bmQgPSBjdXJyZW50VDtcbiAgICAgICAgfVxuICAgIH0gd2hpbGUgKE1hdGguYWJzKGN1cnJlbnRYKSA+IHN1YmRpdmlzaW9uUHJlY2lzaW9uICYmXG4gICAgICAgICsraSA8IHN1YmRpdmlzaW9uTWF4SXRlcmF0aW9ucyk7XG4gICAgcmV0dXJuIGN1cnJlbnRUO1xufVxuZnVuY3Rpb24gY3ViaWNCZXppZXIobVgxLCBtWTEsIG1YMiwgbVkyKSB7XG4gICAgLy8gSWYgdGhpcyBpcyBhIGxpbmVhciBncmFkaWVudCwgcmV0dXJuIGxpbmVhciBlYXNpbmdcbiAgICBpZiAobVgxID09PSBtWTEgJiYgbVgyID09PSBtWTIpXG4gICAgICAgIHJldHVybiBub29wO1xuICAgIGNvbnN0IGdldFRGb3JYID0gKGFYKSA9PiBiaW5hcnlTdWJkaXZpZGUoYVgsIDAsIDEsIG1YMSwgbVgyKTtcbiAgICAvLyBJZiBhbmltYXRpb24gaXMgYXQgc3RhcnQvZW5kLCByZXR1cm4gdCB3aXRob3V0IGVhc2luZ1xuICAgIHJldHVybiAodCkgPT4gdCA9PT0gMCB8fCB0ID09PSAxID8gdCA6IGNhbGNCZXppZXIoZ2V0VEZvclgodCksIG1ZMSwgbVkyKTtcbn1cblxuZXhwb3J0IHsgY3ViaWNCZXppZXIgfTtcbiIsImltcG9ydCB7IGN1YmljQmV6aWVyIH0gZnJvbSAnLi9jdWJpYy1iZXppZXIubWpzJztcblxuY29uc3QgZWFzZUluID0gY3ViaWNCZXppZXIoMC40MiwgMCwgMSwgMSk7XG5jb25zdCBlYXNlT3V0ID0gY3ViaWNCZXppZXIoMCwgMCwgMC41OCwgMSk7XG5jb25zdCBlYXNlSW5PdXQgPSBjdWJpY0JlemllcigwLjQyLCAwLCAwLjU4LCAxKTtcblxuZXhwb3J0IHsgZWFzZUluLCBlYXNlSW5PdXQsIGVhc2VPdXQgfTtcbiIsImNvbnN0IGlzRWFzaW5nQXJyYXkgPSAoZWFzZSkgPT4ge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGVhc2UpICYmIHR5cGVvZiBlYXNlWzBdICE9PSBcIm51bWJlclwiO1xufTtcblxuZXhwb3J0IHsgaXNFYXNpbmdBcnJheSB9O1xuIiwiLy8gQWNjZXB0cyBhbiBlYXNpbmcgZnVuY3Rpb24gYW5kIHJldHVybnMgYSBuZXcgb25lIHRoYXQgb3V0cHV0cyBtaXJyb3JlZCB2YWx1ZXMgZm9yXG4vLyB0aGUgc2Vjb25kIGhhbGYgb2YgdGhlIGFuaW1hdGlvbi4gVHVybnMgZWFzZUluIGludG8gZWFzZUluT3V0LlxuY29uc3QgbWlycm9yRWFzaW5nID0gKGVhc2luZykgPT4gKHApID0+IHAgPD0gMC41ID8gZWFzaW5nKDIgKiBwKSAvIDIgOiAoMiAtIGVhc2luZygyICogKDEgLSBwKSkpIC8gMjtcblxuZXhwb3J0IHsgbWlycm9yRWFzaW5nIH07XG4iLCIvLyBBY2NlcHRzIGFuIGVhc2luZyBmdW5jdGlvbiBhbmQgcmV0dXJucyBhIG5ldyBvbmUgdGhhdCBvdXRwdXRzIHJldmVyc2VkIHZhbHVlcy5cbi8vIFR1cm5zIGVhc2VJbiBpbnRvIGVhc2VPdXQuXG5jb25zdCByZXZlcnNlRWFzaW5nID0gKGVhc2luZykgPT4gKHApID0+IDEgLSBlYXNpbmcoMSAtIHApO1xuXG5leHBvcnQgeyByZXZlcnNlRWFzaW5nIH07XG4iLCJpbXBvcnQgeyBtaXJyb3JFYXNpbmcgfSBmcm9tICcuL21vZGlmaWVycy9taXJyb3IubWpzJztcbmltcG9ydCB7IHJldmVyc2VFYXNpbmcgfSBmcm9tICcuL21vZGlmaWVycy9yZXZlcnNlLm1qcyc7XG5cbmNvbnN0IGNpcmNJbiA9IChwKSA9PiAxIC0gTWF0aC5zaW4oTWF0aC5hY29zKHApKTtcbmNvbnN0IGNpcmNPdXQgPSByZXZlcnNlRWFzaW5nKGNpcmNJbik7XG5jb25zdCBjaXJjSW5PdXQgPSBtaXJyb3JFYXNpbmcoY2lyY091dCk7XG5cbmV4cG9ydCB7IGNpcmNJbiwgY2lyY0luT3V0LCBjaXJjT3V0IH07XG4iLCJpbXBvcnQgeyBjdWJpY0JlemllciB9IGZyb20gJy4vY3ViaWMtYmV6aWVyLm1qcyc7XG5pbXBvcnQgeyBtaXJyb3JFYXNpbmcgfSBmcm9tICcuL21vZGlmaWVycy9taXJyb3IubWpzJztcbmltcG9ydCB7IHJldmVyc2VFYXNpbmcgfSBmcm9tICcuL21vZGlmaWVycy9yZXZlcnNlLm1qcyc7XG5cbmNvbnN0IGJhY2tPdXQgPSBjdWJpY0JlemllcigwLjMzLCAxLjUzLCAwLjY5LCAwLjk5KTtcbmNvbnN0IGJhY2tJbiA9IHJldmVyc2VFYXNpbmcoYmFja091dCk7XG5jb25zdCBiYWNrSW5PdXQgPSBtaXJyb3JFYXNpbmcoYmFja0luKTtcblxuZXhwb3J0IHsgYmFja0luLCBiYWNrSW5PdXQsIGJhY2tPdXQgfTtcbiIsImltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJy4uLy4uL3V0aWxzL2Vycm9ycy5tanMnO1xuaW1wb3J0IHsgY3ViaWNCZXppZXIgfSBmcm9tICcuLi9jdWJpYy1iZXppZXIubWpzJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuLi8uLi91dGlscy9ub29wLm1qcyc7XG5pbXBvcnQgeyBlYXNlSW4sIGVhc2VJbk91dCwgZWFzZU91dCB9IGZyb20gJy4uL2Vhc2UubWpzJztcbmltcG9ydCB7IGNpcmNJbiwgY2lyY0luT3V0LCBjaXJjT3V0IH0gZnJvbSAnLi4vY2lyYy5tanMnO1xuaW1wb3J0IHsgYmFja0luLCBiYWNrSW5PdXQsIGJhY2tPdXQgfSBmcm9tICcuLi9iYWNrLm1qcyc7XG5pbXBvcnQgeyBhbnRpY2lwYXRlIH0gZnJvbSAnLi4vYW50aWNpcGF0ZS5tanMnO1xuXG5jb25zdCBlYXNpbmdMb29rdXAgPSB7XG4gICAgbGluZWFyOiBub29wLFxuICAgIGVhc2VJbixcbiAgICBlYXNlSW5PdXQsXG4gICAgZWFzZU91dCxcbiAgICBjaXJjSW4sXG4gICAgY2lyY0luT3V0LFxuICAgIGNpcmNPdXQsXG4gICAgYmFja0luLFxuICAgIGJhY2tJbk91dCxcbiAgICBiYWNrT3V0LFxuICAgIGFudGljaXBhdGUsXG59O1xuY29uc3QgZWFzaW5nRGVmaW5pdGlvblRvRnVuY3Rpb24gPSAoZGVmaW5pdGlvbikgPT4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGRlZmluaXRpb24pKSB7XG4gICAgICAgIC8vIElmIGN1YmljIGJlemllciBkZWZpbml0aW9uLCBjcmVhdGUgYmV6aWVyIGN1cnZlXG4gICAgICAgIGludmFyaWFudChkZWZpbml0aW9uLmxlbmd0aCA9PT0gNCwgYEN1YmljIGJlemllciBhcnJheXMgbXVzdCBjb250YWluIGZvdXIgbnVtZXJpY2FsIHZhbHVlcy5gKTtcbiAgICAgICAgY29uc3QgW3gxLCB5MSwgeDIsIHkyXSA9IGRlZmluaXRpb247XG4gICAgICAgIHJldHVybiBjdWJpY0Jlemllcih4MSwgeTEsIHgyLCB5Mik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkZWZpbml0aW9uID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIC8vIEVsc2UgbG9va3VwIGZyb20gdGFibGVcbiAgICAgICAgaW52YXJpYW50KGVhc2luZ0xvb2t1cFtkZWZpbml0aW9uXSAhPT0gdW5kZWZpbmVkLCBgSW52YWxpZCBlYXNpbmcgdHlwZSAnJHtkZWZpbml0aW9ufSdgKTtcbiAgICAgICAgcmV0dXJuIGVhc2luZ0xvb2t1cFtkZWZpbml0aW9uXTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmluaXRpb247XG59O1xuXG5leHBvcnQgeyBlYXNpbmdEZWZpbml0aW9uVG9GdW5jdGlvbiB9O1xuIiwiaW1wb3J0IHsgYmFja0luIH0gZnJvbSAnLi9iYWNrLm1qcyc7XG5cbmNvbnN0IGFudGljaXBhdGUgPSAocCkgPT4gKHAgKj0gMikgPCAxID8gMC41ICogYmFja0luKHApIDogMC41ICogKDIgLSBNYXRoLnBvdygyLCAtMTAgKiAocCAtIDEpKSk7XG5cbmV4cG9ydCB7IGFudGljaXBhdGUgfTtcbiIsImltcG9ydCB7IGlzU3RyaW5nLCBzaW5nbGVDb2xvclJlZ2V4LCBmbG9hdFJlZ2V4IH0gZnJvbSAnLi4vdXRpbHMubWpzJztcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3ZpZGVkIHN0cmluZyBpcyBhIGNvbG9yLCBpZSByZ2JhKDAsMCwwLDApIG9yICMwMDAsXG4gKiBidXQgZmFsc2UgaWYgYSBudW1iZXIgb3IgbXVsdGlwbGUgY29sb3JzXG4gKi9cbmNvbnN0IGlzQ29sb3JTdHJpbmcgPSAodHlwZSwgdGVzdFByb3ApID0+ICh2KSA9PiB7XG4gICAgcmV0dXJuIEJvb2xlYW4oKGlzU3RyaW5nKHYpICYmIHNpbmdsZUNvbG9yUmVnZXgudGVzdCh2KSAmJiB2LnN0YXJ0c1dpdGgodHlwZSkpIHx8XG4gICAgICAgICh0ZXN0UHJvcCAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodiwgdGVzdFByb3ApKSk7XG59O1xuY29uc3Qgc3BsaXRDb2xvciA9IChhTmFtZSwgYk5hbWUsIGNOYW1lKSA9PiAodikgPT4ge1xuICAgIGlmICghaXNTdHJpbmcodikpXG4gICAgICAgIHJldHVybiB2O1xuICAgIGNvbnN0IFthLCBiLCBjLCBhbHBoYV0gPSB2Lm1hdGNoKGZsb2F0UmVnZXgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIFthTmFtZV06IHBhcnNlRmxvYXQoYSksXG4gICAgICAgIFtiTmFtZV06IHBhcnNlRmxvYXQoYiksXG4gICAgICAgIFtjTmFtZV06IHBhcnNlRmxvYXQoYyksXG4gICAgICAgIGFscGhhOiBhbHBoYSAhPT0gdW5kZWZpbmVkID8gcGFyc2VGbG9hdChhbHBoYSkgOiAxLFxuICAgIH07XG59O1xuXG5leHBvcnQgeyBpc0NvbG9yU3RyaW5nLCBzcGxpdENvbG9yIH07XG4iLCJpbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2NsYW1wLm1qcyc7XG5pbXBvcnQgeyBudW1iZXIsIGFscGhhIH0gZnJvbSAnLi4vbnVtYmVycy9pbmRleC5tanMnO1xuaW1wb3J0IHsgc2FuaXRpemUgfSBmcm9tICcuLi91dGlscy5tanMnO1xuaW1wb3J0IHsgaXNDb2xvclN0cmluZywgc3BsaXRDb2xvciB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuY29uc3QgY2xhbXBSZ2JVbml0ID0gKHYpID0+IGNsYW1wKDAsIDI1NSwgdik7XG5jb25zdCByZ2JVbml0ID0ge1xuICAgIC4uLm51bWJlcixcbiAgICB0cmFuc2Zvcm06ICh2KSA9PiBNYXRoLnJvdW5kKGNsYW1wUmdiVW5pdCh2KSksXG59O1xuY29uc3QgcmdiYSA9IHtcbiAgICB0ZXN0OiBpc0NvbG9yU3RyaW5nKFwicmdiXCIsIFwicmVkXCIpLFxuICAgIHBhcnNlOiBzcGxpdENvbG9yKFwicmVkXCIsIFwiZ3JlZW5cIiwgXCJibHVlXCIpLFxuICAgIHRyYW5zZm9ybTogKHsgcmVkLCBncmVlbiwgYmx1ZSwgYWxwaGE6IGFscGhhJDEgPSAxIH0pID0+IFwicmdiYShcIiArXG4gICAgICAgIHJnYlVuaXQudHJhbnNmb3JtKHJlZCkgK1xuICAgICAgICBcIiwgXCIgK1xuICAgICAgICByZ2JVbml0LnRyYW5zZm9ybShncmVlbikgK1xuICAgICAgICBcIiwgXCIgK1xuICAgICAgICByZ2JVbml0LnRyYW5zZm9ybShibHVlKSArXG4gICAgICAgIFwiLCBcIiArXG4gICAgICAgIHNhbml0aXplKGFscGhhLnRyYW5zZm9ybShhbHBoYSQxKSkgK1xuICAgICAgICBcIilcIixcbn07XG5cbmV4cG9ydCB7IHJnYlVuaXQsIHJnYmEgfTtcbiIsImltcG9ydCB7IHJnYmEgfSBmcm9tICcuL3JnYmEubWpzJztcbmltcG9ydCB7IGlzQ29sb3JTdHJpbmcgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIHBhcnNlSGV4KHYpIHtcbiAgICBsZXQgciA9IFwiXCI7XG4gICAgbGV0IGcgPSBcIlwiO1xuICAgIGxldCBiID0gXCJcIjtcbiAgICBsZXQgYSA9IFwiXCI7XG4gICAgLy8gSWYgd2UgaGF2ZSA2IGNoYXJhY3RlcnMsIGllICNGRjAwMDBcbiAgICBpZiAodi5sZW5ndGggPiA1KSB7XG4gICAgICAgIHIgPSB2LnN1YnN0cmluZygxLCAzKTtcbiAgICAgICAgZyA9IHYuc3Vic3RyaW5nKDMsIDUpO1xuICAgICAgICBiID0gdi5zdWJzdHJpbmcoNSwgNyk7XG4gICAgICAgIGEgPSB2LnN1YnN0cmluZyg3LCA5KTtcbiAgICAgICAgLy8gT3Igd2UgaGF2ZSAzIGNoYXJhY3RlcnMsIGllICNGMDBcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHIgPSB2LnN1YnN0cmluZygxLCAyKTtcbiAgICAgICAgZyA9IHYuc3Vic3RyaW5nKDIsIDMpO1xuICAgICAgICBiID0gdi5zdWJzdHJpbmcoMywgNCk7XG4gICAgICAgIGEgPSB2LnN1YnN0cmluZyg0LCA1KTtcbiAgICAgICAgciArPSByO1xuICAgICAgICBnICs9IGc7XG4gICAgICAgIGIgKz0gYjtcbiAgICAgICAgYSArPSBhO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICByZWQ6IHBhcnNlSW50KHIsIDE2KSxcbiAgICAgICAgZ3JlZW46IHBhcnNlSW50KGcsIDE2KSxcbiAgICAgICAgYmx1ZTogcGFyc2VJbnQoYiwgMTYpLFxuICAgICAgICBhbHBoYTogYSA/IHBhcnNlSW50KGEsIDE2KSAvIDI1NSA6IDEsXG4gICAgfTtcbn1cbmNvbnN0IGhleCA9IHtcbiAgICB0ZXN0OiBpc0NvbG9yU3RyaW5nKFwiI1wiKSxcbiAgICBwYXJzZTogcGFyc2VIZXgsXG4gICAgdHJhbnNmb3JtOiByZ2JhLnRyYW5zZm9ybSxcbn07XG5cbmV4cG9ydCB7IGhleCB9O1xuIiwiaW1wb3J0IHsgYWxwaGEgfSBmcm9tICcuLi9udW1iZXJzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBwZXJjZW50IH0gZnJvbSAnLi4vbnVtYmVycy91bml0cy5tanMnO1xuaW1wb3J0IHsgc2FuaXRpemUgfSBmcm9tICcuLi91dGlscy5tanMnO1xuaW1wb3J0IHsgaXNDb2xvclN0cmluZywgc3BsaXRDb2xvciB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuY29uc3QgaHNsYSA9IHtcbiAgICB0ZXN0OiBpc0NvbG9yU3RyaW5nKFwiaHNsXCIsIFwiaHVlXCIpLFxuICAgIHBhcnNlOiBzcGxpdENvbG9yKFwiaHVlXCIsIFwic2F0dXJhdGlvblwiLCBcImxpZ2h0bmVzc1wiKSxcbiAgICB0cmFuc2Zvcm06ICh7IGh1ZSwgc2F0dXJhdGlvbiwgbGlnaHRuZXNzLCBhbHBoYTogYWxwaGEkMSA9IDEgfSkgPT4ge1xuICAgICAgICByZXR1cm4gKFwiaHNsYShcIiArXG4gICAgICAgICAgICBNYXRoLnJvdW5kKGh1ZSkgK1xuICAgICAgICAgICAgXCIsIFwiICtcbiAgICAgICAgICAgIHBlcmNlbnQudHJhbnNmb3JtKHNhbml0aXplKHNhdHVyYXRpb24pKSArXG4gICAgICAgICAgICBcIiwgXCIgK1xuICAgICAgICAgICAgcGVyY2VudC50cmFuc2Zvcm0oc2FuaXRpemUobGlnaHRuZXNzKSkgK1xuICAgICAgICAgICAgXCIsIFwiICtcbiAgICAgICAgICAgIHNhbml0aXplKGFscGhhLnRyYW5zZm9ybShhbHBoYSQxKSkgK1xuICAgICAgICAgICAgXCIpXCIpO1xuICAgIH0sXG59O1xuXG5leHBvcnQgeyBoc2xhIH07XG4iLCJpbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gJy4uL3V0aWxzLm1qcyc7XG5pbXBvcnQgeyBoZXggfSBmcm9tICcuL2hleC5tanMnO1xuaW1wb3J0IHsgaHNsYSB9IGZyb20gJy4vaHNsYS5tanMnO1xuaW1wb3J0IHsgcmdiYSB9IGZyb20gJy4vcmdiYS5tanMnO1xuXG5jb25zdCBjb2xvciA9IHtcbiAgICB0ZXN0OiAodikgPT4gcmdiYS50ZXN0KHYpIHx8IGhleC50ZXN0KHYpIHx8IGhzbGEudGVzdCh2KSxcbiAgICBwYXJzZTogKHYpID0+IHtcbiAgICAgICAgaWYgKHJnYmEudGVzdCh2KSkge1xuICAgICAgICAgICAgcmV0dXJuIHJnYmEucGFyc2Uodik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaHNsYS50ZXN0KHYpKSB7XG4gICAgICAgICAgICByZXR1cm4gaHNsYS5wYXJzZSh2KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBoZXgucGFyc2Uodik7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHRyYW5zZm9ybTogKHYpID0+IHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKHYpXG4gICAgICAgICAgICA/IHZcbiAgICAgICAgICAgIDogdi5oYXNPd25Qcm9wZXJ0eShcInJlZFwiKVxuICAgICAgICAgICAgICAgID8gcmdiYS50cmFuc2Zvcm0odilcbiAgICAgICAgICAgICAgICA6IGhzbGEudHJhbnNmb3JtKHYpO1xuICAgIH0sXG59O1xuXG5leHBvcnQgeyBjb2xvciB9O1xuIiwiLypcbiAgVmFsdWUgaW4gcmFuZ2UgZnJvbSBwcm9ncmVzc1xuXG4gIEdpdmVuIGEgbG93ZXIgbGltaXQgYW5kIGFuIHVwcGVyIGxpbWl0LCB3ZSByZXR1cm4gdGhlIHZhbHVlIHdpdGhpblxuICB0aGF0IHJhbmdlIGFzIGV4cHJlc3NlZCBieSBwcm9ncmVzcyAodXN1YWxseSBhIG51bWJlciBmcm9tIDAgdG8gMSlcblxuICBTbyBwcm9ncmVzcyA9IDAuNSB3b3VsZCBjaGFuZ2VcblxuICBmcm9tIC0tLS0tLS0tIHRvXG5cbiAgdG9cblxuICBmcm9tIC0tLS0gdG9cblxuICBFLmcuIGZyb20gPSAxMCwgdG8gPSAyMCwgcHJvZ3Jlc3MgPSAwLjUgPT4gMTVcblxuICBAcGFyYW0gW251bWJlcl06IExvd2VyIGxpbWl0IG9mIHJhbmdlXG4gIEBwYXJhbSBbbnVtYmVyXTogVXBwZXIgbGltaXQgb2YgcmFuZ2VcbiAgQHBhcmFtIFtudW1iZXJdOiBUaGUgcHJvZ3Jlc3MgYmV0d2VlbiBsb3dlciBhbmQgdXBwZXIgbGltaXRzIGV4cHJlc3NlZCAwLTFcbiAgQHJldHVybiBbbnVtYmVyXTogVmFsdWUgYXMgY2FsY3VsYXRlZCBmcm9tIHByb2dyZXNzIHdpdGhpbiByYW5nZSAobm90IGxpbWl0ZWQgd2l0aGluIHJhbmdlKVxuKi9cbmNvbnN0IG1peCA9IChmcm9tLCB0bywgcHJvZ3Jlc3MpID0+IC1wcm9ncmVzcyAqIGZyb20gKyBwcm9ncmVzcyAqIHRvICsgZnJvbTtcblxuZXhwb3J0IHsgbWl4IH07XG4iLCIvLyBBZGFwdGVkIGZyb20gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vbWphY2tzb24vNTMxMTI1NlxuZnVuY3Rpb24gaHVlVG9SZ2IocCwgcSwgdCkge1xuICAgIGlmICh0IDwgMClcbiAgICAgICAgdCArPSAxO1xuICAgIGlmICh0ID4gMSlcbiAgICAgICAgdCAtPSAxO1xuICAgIGlmICh0IDwgMSAvIDYpXG4gICAgICAgIHJldHVybiBwICsgKHEgLSBwKSAqIDYgKiB0O1xuICAgIGlmICh0IDwgMSAvIDIpXG4gICAgICAgIHJldHVybiBxO1xuICAgIGlmICh0IDwgMiAvIDMpXG4gICAgICAgIHJldHVybiBwICsgKHEgLSBwKSAqICgyIC8gMyAtIHQpICogNjtcbiAgICByZXR1cm4gcDtcbn1cbmZ1bmN0aW9uIGhzbGFUb1JnYmEoeyBodWUsIHNhdHVyYXRpb24sIGxpZ2h0bmVzcywgYWxwaGEgfSkge1xuICAgIGh1ZSAvPSAzNjA7XG4gICAgc2F0dXJhdGlvbiAvPSAxMDA7XG4gICAgbGlnaHRuZXNzIC89IDEwMDtcbiAgICBsZXQgcmVkID0gMDtcbiAgICBsZXQgZ3JlZW4gPSAwO1xuICAgIGxldCBibHVlID0gMDtcbiAgICBpZiAoIXNhdHVyYXRpb24pIHtcbiAgICAgICAgcmVkID0gZ3JlZW4gPSBibHVlID0gbGlnaHRuZXNzO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgcSA9IGxpZ2h0bmVzcyA8IDAuNVxuICAgICAgICAgICAgPyBsaWdodG5lc3MgKiAoMSArIHNhdHVyYXRpb24pXG4gICAgICAgICAgICA6IGxpZ2h0bmVzcyArIHNhdHVyYXRpb24gLSBsaWdodG5lc3MgKiBzYXR1cmF0aW9uO1xuICAgICAgICBjb25zdCBwID0gMiAqIGxpZ2h0bmVzcyAtIHE7XG4gICAgICAgIHJlZCA9IGh1ZVRvUmdiKHAsIHEsIGh1ZSArIDEgLyAzKTtcbiAgICAgICAgZ3JlZW4gPSBodWVUb1JnYihwLCBxLCBodWUpO1xuICAgICAgICBibHVlID0gaHVlVG9SZ2IocCwgcSwgaHVlIC0gMSAvIDMpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICByZWQ6IE1hdGgucm91bmQocmVkICogMjU1KSxcbiAgICAgICAgZ3JlZW46IE1hdGgucm91bmQoZ3JlZW4gKiAyNTUpLFxuICAgICAgICBibHVlOiBNYXRoLnJvdW5kKGJsdWUgKiAyNTUpLFxuICAgICAgICBhbHBoYSxcbiAgICB9O1xufVxuXG5leHBvcnQgeyBoc2xhVG9SZ2JhIH07XG4iLCJpbXBvcnQgeyBtaXggfSBmcm9tICcuL21peC5tanMnO1xuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnLi9lcnJvcnMubWpzJztcbmltcG9ydCB7IGhzbGFUb1JnYmEgfSBmcm9tICcuL2hzbGEtdG8tcmdiYS5tanMnO1xuaW1wb3J0IHsgaGV4IH0gZnJvbSAnLi4vdmFsdWUvdHlwZXMvY29sb3IvaGV4Lm1qcyc7XG5pbXBvcnQgeyByZ2JhIH0gZnJvbSAnLi4vdmFsdWUvdHlwZXMvY29sb3IvcmdiYS5tanMnO1xuaW1wb3J0IHsgaHNsYSB9IGZyb20gJy4uL3ZhbHVlL3R5cGVzL2NvbG9yL2hzbGEubWpzJztcblxuLy8gTGluZWFyIGNvbG9yIHNwYWNlIGJsZW5kaW5nXG4vLyBFeHBsYWluZWQgaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1MS25xRUNjZzZHd1xuLy8gRGVtb25zdHJhdGVkIGh0dHA6Ly9jb2RlcGVuLmlvL29zdWJsYWtlL3Blbi94R1ZWYU5cbmNvbnN0IG1peExpbmVhckNvbG9yID0gKGZyb20sIHRvLCB2KSA9PiB7XG4gICAgY29uc3QgZnJvbUV4cG8gPSBmcm9tICogZnJvbTtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgubWF4KDAsIHYgKiAodG8gKiB0byAtIGZyb21FeHBvKSArIGZyb21FeHBvKSk7XG59O1xuY29uc3QgY29sb3JUeXBlcyA9IFtoZXgsIHJnYmEsIGhzbGFdO1xuY29uc3QgZ2V0Q29sb3JUeXBlID0gKHYpID0+IGNvbG9yVHlwZXMuZmluZCgodHlwZSkgPT4gdHlwZS50ZXN0KHYpKTtcbmZ1bmN0aW9uIGFzUkdCQShjb2xvcikge1xuICAgIGNvbnN0IHR5cGUgPSBnZXRDb2xvclR5cGUoY29sb3IpO1xuICAgIGludmFyaWFudChCb29sZWFuKHR5cGUpLCBgJyR7Y29sb3J9JyBpcyBub3QgYW4gYW5pbWF0YWJsZSBjb2xvci4gVXNlIHRoZSBlcXVpdmFsZW50IGNvbG9yIGNvZGUgaW5zdGVhZC5gKTtcbiAgICBsZXQgbW9kZWwgPSB0eXBlLnBhcnNlKGNvbG9yKTtcbiAgICBpZiAodHlwZSA9PT0gaHNsYSkge1xuICAgICAgICAvLyBUT0RPIFJlbW92ZSB0aGlzIGNhc3QgLSBuZWVkZWQgc2luY2UgRnJhbWVyIE1vdGlvbidzIHN0cmljdGVyIHR5cGluZ1xuICAgICAgICBtb2RlbCA9IGhzbGFUb1JnYmEobW9kZWwpO1xuICAgIH1cbiAgICByZXR1cm4gbW9kZWw7XG59XG5jb25zdCBtaXhDb2xvciA9IChmcm9tLCB0bykgPT4ge1xuICAgIGNvbnN0IGZyb21SR0JBID0gYXNSR0JBKGZyb20pO1xuICAgIGNvbnN0IHRvUkdCQSA9IGFzUkdCQSh0byk7XG4gICAgY29uc3QgYmxlbmRlZCA9IHsgLi4uZnJvbVJHQkEgfTtcbiAgICByZXR1cm4gKHYpID0+IHtcbiAgICAgICAgYmxlbmRlZC5yZWQgPSBtaXhMaW5lYXJDb2xvcihmcm9tUkdCQS5yZWQsIHRvUkdCQS5yZWQsIHYpO1xuICAgICAgICBibGVuZGVkLmdyZWVuID0gbWl4TGluZWFyQ29sb3IoZnJvbVJHQkEuZ3JlZW4sIHRvUkdCQS5ncmVlbiwgdik7XG4gICAgICAgIGJsZW5kZWQuYmx1ZSA9IG1peExpbmVhckNvbG9yKGZyb21SR0JBLmJsdWUsIHRvUkdCQS5ibHVlLCB2KTtcbiAgICAgICAgYmxlbmRlZC5hbHBoYSA9IG1peChmcm9tUkdCQS5hbHBoYSwgdG9SR0JBLmFscGhhLCB2KTtcbiAgICAgICAgcmV0dXJuIHJnYmEudHJhbnNmb3JtKGJsZW5kZWQpO1xuICAgIH07XG59O1xuXG5leHBvcnQgeyBtaXhDb2xvciwgbWl4TGluZWFyQ29sb3IgfTtcbiIsImltcG9ydCB7IGNzc1ZhcmlhYmxlUmVnZXggfSBmcm9tICcuLi8uLi8uLi9yZW5kZXIvZG9tL3V0aWxzL2lzLWNzcy12YXJpYWJsZS5tanMnO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL25vb3AubWpzJztcbmltcG9ydCB7IGNvbG9yIH0gZnJvbSAnLi4vY29sb3IvaW5kZXgubWpzJztcbmltcG9ydCB7IG51bWJlciB9IGZyb20gJy4uL251bWJlcnMvaW5kZXgubWpzJztcbmltcG9ydCB7IGNvbG9yUmVnZXgsIGZsb2F0UmVnZXgsIGlzU3RyaW5nLCBzYW5pdGl6ZSB9IGZyb20gJy4uL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIHRlc3Qodikge1xuICAgIHZhciBfYSwgX2I7XG4gICAgcmV0dXJuIChpc05hTih2KSAmJlxuICAgICAgICBpc1N0cmluZyh2KSAmJlxuICAgICAgICAoKChfYSA9IHYubWF0Y2goZmxvYXRSZWdleCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZW5ndGgpIHx8IDApICtcbiAgICAgICAgICAgICgoKF9iID0gdi5tYXRjaChjb2xvclJlZ2V4KSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmxlbmd0aCkgfHwgMCkgPlxuICAgICAgICAgICAgMCk7XG59XG5jb25zdCBjc3NWYXJUb2tlbmlzZXIgPSB7XG4gICAgcmVnZXg6IGNzc1ZhcmlhYmxlUmVnZXgsXG4gICAgY291bnRLZXk6IFwiVmFyc1wiLFxuICAgIHRva2VuOiBcIiR7dn1cIixcbiAgICBwYXJzZTogbm9vcCxcbn07XG5jb25zdCBjb2xvclRva2VuaXNlciA9IHtcbiAgICByZWdleDogY29sb3JSZWdleCxcbiAgICBjb3VudEtleTogXCJDb2xvcnNcIixcbiAgICB0b2tlbjogXCIke2N9XCIsXG4gICAgcGFyc2U6IGNvbG9yLnBhcnNlLFxufTtcbmNvbnN0IG51bWJlclRva2VuaXNlciA9IHtcbiAgICByZWdleDogZmxvYXRSZWdleCxcbiAgICBjb3VudEtleTogXCJOdW1iZXJzXCIsXG4gICAgdG9rZW46IFwiJHtufVwiLFxuICAgIHBhcnNlOiBudW1iZXIucGFyc2UsXG59O1xuZnVuY3Rpb24gdG9rZW5pc2UoaW5mbywgeyByZWdleCwgY291bnRLZXksIHRva2VuLCBwYXJzZSB9KSB7XG4gICAgY29uc3QgbWF0Y2hlcyA9IGluZm8udG9rZW5pc2VkLm1hdGNoKHJlZ2V4KTtcbiAgICBpZiAoIW1hdGNoZXMpXG4gICAgICAgIHJldHVybjtcbiAgICBpbmZvW1wibnVtXCIgKyBjb3VudEtleV0gPSBtYXRjaGVzLmxlbmd0aDtcbiAgICBpbmZvLnRva2VuaXNlZCA9IGluZm8udG9rZW5pc2VkLnJlcGxhY2UocmVnZXgsIHRva2VuKTtcbiAgICBpbmZvLnZhbHVlcy5wdXNoKC4uLm1hdGNoZXMubWFwKHBhcnNlKSk7XG59XG5mdW5jdGlvbiBhbmFseXNlQ29tcGxleFZhbHVlKHZhbHVlKSB7XG4gICAgY29uc3Qgb3JpZ2luYWxWYWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgY29uc3QgaW5mbyA9IHtcbiAgICAgICAgdmFsdWU6IG9yaWdpbmFsVmFsdWUsXG4gICAgICAgIHRva2VuaXNlZDogb3JpZ2luYWxWYWx1ZSxcbiAgICAgICAgdmFsdWVzOiBbXSxcbiAgICAgICAgbnVtVmFyczogMCxcbiAgICAgICAgbnVtQ29sb3JzOiAwLFxuICAgICAgICBudW1OdW1iZXJzOiAwLFxuICAgIH07XG4gICAgaWYgKGluZm8udmFsdWUuaW5jbHVkZXMoXCJ2YXIoLS1cIikpXG4gICAgICAgIHRva2VuaXNlKGluZm8sIGNzc1ZhclRva2VuaXNlcik7XG4gICAgdG9rZW5pc2UoaW5mbywgY29sb3JUb2tlbmlzZXIpO1xuICAgIHRva2VuaXNlKGluZm8sIG51bWJlclRva2VuaXNlcik7XG4gICAgcmV0dXJuIGluZm87XG59XG5mdW5jdGlvbiBwYXJzZUNvbXBsZXhWYWx1ZSh2KSB7XG4gICAgcmV0dXJuIGFuYWx5c2VDb21wbGV4VmFsdWUodikudmFsdWVzO1xufVxuZnVuY3Rpb24gY3JlYXRlVHJhbnNmb3JtZXIoc291cmNlKSB7XG4gICAgY29uc3QgeyB2YWx1ZXMsIG51bUNvbG9ycywgbnVtVmFycywgdG9rZW5pc2VkIH0gPSBhbmFseXNlQ29tcGxleFZhbHVlKHNvdXJjZSk7XG4gICAgY29uc3QgbnVtVmFsdWVzID0gdmFsdWVzLmxlbmd0aDtcbiAgICByZXR1cm4gKHYpID0+IHtcbiAgICAgICAgbGV0IG91dHB1dCA9IHRva2VuaXNlZDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1WYWx1ZXM7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgPCBudW1WYXJzKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoY3NzVmFyVG9rZW5pc2VyLnRva2VuLCB2W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGkgPCBudW1WYXJzICsgbnVtQ29sb3JzKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoY29sb3JUb2tlbmlzZXIudG9rZW4sIGNvbG9yLnRyYW5zZm9ybSh2W2ldKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZShudW1iZXJUb2tlbmlzZXIudG9rZW4sIHNhbml0aXplKHZbaV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG59XG5jb25zdCBjb252ZXJ0TnVtYmVyc1RvWmVybyA9ICh2KSA9PiB0eXBlb2YgdiA9PT0gXCJudW1iZXJcIiA/IDAgOiB2O1xuZnVuY3Rpb24gZ2V0QW5pbWF0YWJsZU5vbmUodikge1xuICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlQ29tcGxleFZhbHVlKHYpO1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVHJhbnNmb3JtZXIodik7XG4gICAgcmV0dXJuIHRyYW5zZm9ybWVyKHBhcnNlZC5tYXAoY29udmVydE51bWJlcnNUb1plcm8pKTtcbn1cbmNvbnN0IGNvbXBsZXggPSB7XG4gICAgdGVzdCxcbiAgICBwYXJzZTogcGFyc2VDb21wbGV4VmFsdWUsXG4gICAgY3JlYXRlVHJhbnNmb3JtZXIsXG4gICAgZ2V0QW5pbWF0YWJsZU5vbmUsXG59O1xuXG5leHBvcnQgeyBhbmFseXNlQ29tcGxleFZhbHVlLCBjb21wbGV4IH07XG4iLCJpbXBvcnQgeyBtaXggfSBmcm9tICcuL21peC5tanMnO1xuaW1wb3J0IHsgbWl4Q29sb3IgfSBmcm9tICcuL21peC1jb2xvci5tanMnO1xuaW1wb3J0IHsgcGlwZSB9IGZyb20gJy4vcGlwZS5tanMnO1xuaW1wb3J0IHsgd2FybmluZyB9IGZyb20gJy4vZXJyb3JzLm1qcyc7XG5pbXBvcnQgeyBjb2xvciB9IGZyb20gJy4uL3ZhbHVlL3R5cGVzL2NvbG9yL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBjb21wbGV4LCBhbmFseXNlQ29tcGxleFZhbHVlIH0gZnJvbSAnLi4vdmFsdWUvdHlwZXMvY29tcGxleC9pbmRleC5tanMnO1xuXG5jb25zdCBtaXhJbW1lZGlhdGUgPSAob3JpZ2luLCB0YXJnZXQpID0+IChwKSA9PiBgJHtwID4gMCA/IHRhcmdldCA6IG9yaWdpbn1gO1xuZnVuY3Rpb24gZ2V0TWl4ZXIob3JpZ2luLCB0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG9yaWdpbiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4gKHYpID0+IG1peChvcmlnaW4sIHRhcmdldCwgdik7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvbG9yLnRlc3Qob3JpZ2luKSkge1xuICAgICAgICByZXR1cm4gbWl4Q29sb3Iob3JpZ2luLCB0YXJnZXQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbi5zdGFydHNXaXRoKFwidmFyKFwiKVxuICAgICAgICAgICAgPyBtaXhJbW1lZGlhdGUob3JpZ2luLCB0YXJnZXQpXG4gICAgICAgICAgICA6IG1peENvbXBsZXgob3JpZ2luLCB0YXJnZXQpO1xuICAgIH1cbn1cbmNvbnN0IG1peEFycmF5ID0gKGZyb20sIHRvKSA9PiB7XG4gICAgY29uc3Qgb3V0cHV0ID0gWy4uLmZyb21dO1xuICAgIGNvbnN0IG51bVZhbHVlcyA9IG91dHB1dC5sZW5ndGg7XG4gICAgY29uc3QgYmxlbmRWYWx1ZSA9IGZyb20ubWFwKChmcm9tVGhpcywgaSkgPT4gZ2V0TWl4ZXIoZnJvbVRoaXMsIHRvW2ldKSk7XG4gICAgcmV0dXJuICh2KSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVmFsdWVzOyBpKyspIHtcbiAgICAgICAgICAgIG91dHB1dFtpXSA9IGJsZW5kVmFsdWVbaV0odik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xufTtcbmNvbnN0IG1peE9iamVjdCA9IChvcmlnaW4sIHRhcmdldCkgPT4ge1xuICAgIGNvbnN0IG91dHB1dCA9IHsgLi4ub3JpZ2luLCAuLi50YXJnZXQgfTtcbiAgICBjb25zdCBibGVuZFZhbHVlID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb3V0cHV0KSB7XG4gICAgICAgIGlmIChvcmlnaW5ba2V5XSAhPT0gdW5kZWZpbmVkICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGJsZW5kVmFsdWVba2V5XSA9IGdldE1peGVyKG9yaWdpbltrZXldLCB0YXJnZXRba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICh2KSA9PiB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGJsZW5kVmFsdWUpIHtcbiAgICAgICAgICAgIG91dHB1dFtrZXldID0gYmxlbmRWYWx1ZVtrZXldKHYpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcbn07XG5jb25zdCBtaXhDb21wbGV4ID0gKG9yaWdpbiwgdGFyZ2V0KSA9PiB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSBjb21wbGV4LmNyZWF0ZVRyYW5zZm9ybWVyKHRhcmdldCk7XG4gICAgY29uc3Qgb3JpZ2luU3RhdHMgPSBhbmFseXNlQ29tcGxleFZhbHVlKG9yaWdpbik7XG4gICAgY29uc3QgdGFyZ2V0U3RhdHMgPSBhbmFseXNlQ29tcGxleFZhbHVlKHRhcmdldCk7XG4gICAgY29uc3QgY2FuSW50ZXJwb2xhdGUgPSBvcmlnaW5TdGF0cy5udW1WYXJzID09PSB0YXJnZXRTdGF0cy5udW1WYXJzICYmXG4gICAgICAgIG9yaWdpblN0YXRzLm51bUNvbG9ycyA9PT0gdGFyZ2V0U3RhdHMubnVtQ29sb3JzICYmXG4gICAgICAgIG9yaWdpblN0YXRzLm51bU51bWJlcnMgPj0gdGFyZ2V0U3RhdHMubnVtTnVtYmVycztcbiAgICBpZiAoY2FuSW50ZXJwb2xhdGUpIHtcbiAgICAgICAgcmV0dXJuIHBpcGUobWl4QXJyYXkob3JpZ2luU3RhdHMudmFsdWVzLCB0YXJnZXRTdGF0cy52YWx1ZXMpLCB0ZW1wbGF0ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB3YXJuaW5nKHRydWUsIGBDb21wbGV4IHZhbHVlcyAnJHtvcmlnaW59JyBhbmQgJyR7dGFyZ2V0fScgdG9vIGRpZmZlcmVudCB0byBtaXguIEVuc3VyZSBhbGwgY29sb3JzIGFyZSBvZiB0aGUgc2FtZSB0eXBlLCBhbmQgdGhhdCBlYWNoIGNvbnRhaW5zIHRoZSBzYW1lIHF1YW50aXR5IG9mIG51bWJlciBhbmQgY29sb3IgdmFsdWVzLiBGYWxsaW5nIGJhY2sgdG8gaW5zdGFudCB0cmFuc2l0aW9uLmApO1xuICAgICAgICByZXR1cm4gbWl4SW1tZWRpYXRlKG9yaWdpbiwgdGFyZ2V0KTtcbiAgICB9XG59O1xuXG5leHBvcnQgeyBtaXhBcnJheSwgbWl4Q29tcGxleCwgbWl4T2JqZWN0IH07XG4iLCIvKlxuICBQcm9ncmVzcyB3aXRoaW4gZ2l2ZW4gcmFuZ2VcblxuICBHaXZlbiBhIGxvd2VyIGxpbWl0IGFuZCBhbiB1cHBlciBsaW1pdCwgd2UgcmV0dXJuIHRoZSBwcm9ncmVzc1xuICAoZXhwcmVzc2VkIGFzIGEgbnVtYmVyIDAtMSkgcmVwcmVzZW50ZWQgYnkgdGhlIGdpdmVuIHZhbHVlLCBhbmRcbiAgbGltaXQgdGhhdCBwcm9ncmVzcyB0byB3aXRoaW4gMC0xLlxuXG4gIEBwYXJhbSBbbnVtYmVyXTogTG93ZXIgbGltaXRcbiAgQHBhcmFtIFtudW1iZXJdOiBVcHBlciBsaW1pdFxuICBAcGFyYW0gW251bWJlcl06IFZhbHVlIHRvIGZpbmQgcHJvZ3Jlc3Mgd2l0aGluIGdpdmVuIHJhbmdlXG4gIEByZXR1cm4gW251bWJlcl06IFByb2dyZXNzIG9mIHZhbHVlIHdpdGhpbiByYW5nZSBhcyBleHByZXNzZWQgMC0xXG4qL1xuY29uc3QgcHJvZ3Jlc3MgPSAoZnJvbSwgdG8sIHZhbHVlKSA9PiB7XG4gICAgY29uc3QgdG9Gcm9tRGlmZmVyZW5jZSA9IHRvIC0gZnJvbTtcbiAgICByZXR1cm4gdG9Gcm9tRGlmZmVyZW5jZSA9PT0gMCA/IDEgOiAodmFsdWUgLSBmcm9tKSAvIHRvRnJvbURpZmZlcmVuY2U7XG59O1xuXG5leHBvcnQgeyBwcm9ncmVzcyB9O1xuIiwiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnLi9lcnJvcnMubWpzJztcbmltcG9ydCB7IGNvbG9yIH0gZnJvbSAnLi4vdmFsdWUvdHlwZXMvY29sb3IvaW5kZXgubWpzJztcbmltcG9ydCB7IGNsYW1wIH0gZnJvbSAnLi9jbGFtcC5tanMnO1xuaW1wb3J0IHsgbWl4IH0gZnJvbSAnLi9taXgubWpzJztcbmltcG9ydCB7IG1peENvbG9yIH0gZnJvbSAnLi9taXgtY29sb3IubWpzJztcbmltcG9ydCB7IG1peENvbXBsZXgsIG1peEFycmF5LCBtaXhPYmplY3QgfSBmcm9tICcuL21peC1jb21wbGV4Lm1qcyc7XG5pbXBvcnQgeyBwaXBlIH0gZnJvbSAnLi9waXBlLm1qcyc7XG5pbXBvcnQgeyBwcm9ncmVzcyB9IGZyb20gJy4vcHJvZ3Jlc3MubWpzJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuL25vb3AubWpzJztcblxuY29uc3QgbWl4TnVtYmVyID0gKGZyb20sIHRvKSA9PiAocCkgPT4gbWl4KGZyb20sIHRvLCBwKTtcbmZ1bmN0aW9uIGRldGVjdE1peGVyRmFjdG9yeSh2KSB7XG4gICAgaWYgKHR5cGVvZiB2ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBtaXhOdW1iZXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBjb2xvci50ZXN0KHYpID8gbWl4Q29sb3IgOiBtaXhDb21wbGV4O1xuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgICAgIHJldHVybiBtaXhBcnJheTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHYgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgcmV0dXJuIG1peE9iamVjdDtcbiAgICB9XG4gICAgcmV0dXJuIG1peE51bWJlcjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU1peGVycyhvdXRwdXQsIGVhc2UsIGN1c3RvbU1peGVyKSB7XG4gICAgY29uc3QgbWl4ZXJzID0gW107XG4gICAgY29uc3QgbWl4ZXJGYWN0b3J5ID0gY3VzdG9tTWl4ZXIgfHwgZGV0ZWN0TWl4ZXJGYWN0b3J5KG91dHB1dFswXSk7XG4gICAgY29uc3QgbnVtTWl4ZXJzID0gb3V0cHV0Lmxlbmd0aCAtIDE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1NaXhlcnM7IGkrKykge1xuICAgICAgICBsZXQgbWl4ZXIgPSBtaXhlckZhY3Rvcnkob3V0cHV0W2ldLCBvdXRwdXRbaSArIDFdKTtcbiAgICAgICAgaWYgKGVhc2UpIHtcbiAgICAgICAgICAgIGNvbnN0IGVhc2luZ0Z1bmN0aW9uID0gQXJyYXkuaXNBcnJheShlYXNlKSA/IGVhc2VbaV0gfHwgbm9vcCA6IGVhc2U7XG4gICAgICAgICAgICBtaXhlciA9IHBpcGUoZWFzaW5nRnVuY3Rpb24sIG1peGVyKTtcbiAgICAgICAgfVxuICAgICAgICBtaXhlcnMucHVzaChtaXhlcik7XG4gICAgfVxuICAgIHJldHVybiBtaXhlcnM7XG59XG4vKipcbiAqIENyZWF0ZSBhIGZ1bmN0aW9uIHRoYXQgbWFwcyBmcm9tIGEgbnVtZXJpY2FsIGlucHV0IGFycmF5IHRvIGEgZ2VuZXJpYyBvdXRwdXQgYXJyYXkuXG4gKlxuICogQWNjZXB0czpcbiAqICAgLSBOdW1iZXJzXG4gKiAgIC0gQ29sb3JzIChoZXgsIGhzbCwgaHNsYSwgcmdiLCByZ2JhKVxuICogICAtIENvbXBsZXggKGNvbWJpbmF0aW9ucyBvZiBvbmUgb3IgbW9yZSBudW1iZXJzIG9yIHN0cmluZ3MpXG4gKlxuICogYGBganN4XG4gKiBjb25zdCBtaXhDb2xvciA9IGludGVycG9sYXRlKFswLCAxXSwgWycjZmZmJywgJyMwMDAnXSlcbiAqXG4gKiBtaXhDb2xvcigwLjUpIC8vICdyZ2JhKDEyOCwgMTI4LCAxMjgsIDEpJ1xuICogYGBgXG4gKlxuICogVE9ETyBSZXZpc3QgdGhpcyBhcHByb2FjaCBvbmNlIHdlJ3ZlIG1vdmVkIHRvIGRhdGEgbW9kZWxzIGZvciB2YWx1ZXMsXG4gKiBwcm9iYWJseSBub3QgbmVlZGVkIHRvIHByZWdlbmVyYXRlIG1peGVyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGludGVycG9sYXRlKGlucHV0LCBvdXRwdXQsIHsgY2xhbXA6IGlzQ2xhbXAgPSB0cnVlLCBlYXNlLCBtaXhlciB9ID0ge30pIHtcbiAgICBjb25zdCBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aDtcbiAgICBpbnZhcmlhbnQoaW5wdXRMZW5ndGggPT09IG91dHB1dC5sZW5ndGgsIFwiQm90aCBpbnB1dCBhbmQgb3V0cHV0IHJhbmdlcyBtdXN0IGJlIHRoZSBzYW1lIGxlbmd0aFwiKTtcbiAgICAvKipcbiAgICAgKiBJZiB3ZSdyZSBvbmx5IHByb3ZpZGVkIGEgc2luZ2xlIGlucHV0LCB3ZSBjYW4ganVzdCBtYWtlIGEgZnVuY3Rpb25cbiAgICAgKiB0aGF0IHJldHVybnMgdGhlIG91dHB1dC5cbiAgICAgKi9cbiAgICBpZiAoaW5wdXRMZW5ndGggPT09IDEpXG4gICAgICAgIHJldHVybiAoKSA9PiBvdXRwdXRbMF07XG4gICAgLy8gSWYgaW5wdXQgcnVucyBoaWdoZXN0IC0+IGxvd2VzdCwgcmV2ZXJzZSBib3RoIGFycmF5c1xuICAgIGlmIChpbnB1dFswXSA+IGlucHV0W2lucHV0TGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgaW5wdXQgPSBbLi4uaW5wdXRdLnJldmVyc2UoKTtcbiAgICAgICAgb3V0cHV0ID0gWy4uLm91dHB1dF0ucmV2ZXJzZSgpO1xuICAgIH1cbiAgICBjb25zdCBtaXhlcnMgPSBjcmVhdGVNaXhlcnMob3V0cHV0LCBlYXNlLCBtaXhlcik7XG4gICAgY29uc3QgbnVtTWl4ZXJzID0gbWl4ZXJzLmxlbmd0aDtcbiAgICBjb25zdCBpbnRlcnBvbGF0b3IgPSAodikgPT4ge1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGlmIChudW1NaXhlcnMgPiAxKSB7XG4gICAgICAgICAgICBmb3IgKDsgaSA8IGlucHV0Lmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh2IDwgaW5wdXRbaSArIDFdKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcm9ncmVzc0luUmFuZ2UgPSBwcm9ncmVzcyhpbnB1dFtpXSwgaW5wdXRbaSArIDFdLCB2KTtcbiAgICAgICAgcmV0dXJuIG1peGVyc1tpXShwcm9ncmVzc0luUmFuZ2UpO1xuICAgIH07XG4gICAgcmV0dXJuIGlzQ2xhbXBcbiAgICAgICAgPyAodikgPT4gaW50ZXJwb2xhdG9yKGNsYW1wKGlucHV0WzBdLCBpbnB1dFtpbnB1dExlbmd0aCAtIDFdLCB2KSlcbiAgICAgICAgOiBpbnRlcnBvbGF0b3I7XG59XG5cbmV4cG9ydCB7IGludGVycG9sYXRlIH07XG4iLCJpbXBvcnQgeyBlYXNlSW5PdXQgfSBmcm9tICcuLi8uLi9lYXNpbmcvZWFzZS5tanMnO1xuaW1wb3J0IHsgaXNFYXNpbmdBcnJheSB9IGZyb20gJy4uLy4uL2Vhc2luZy91dGlscy9pcy1lYXNpbmctYXJyYXkubWpzJztcbmltcG9ydCB7IGVhc2luZ0RlZmluaXRpb25Ub0Z1bmN0aW9uIH0gZnJvbSAnLi4vLi4vZWFzaW5nL3V0aWxzL21hcC5tanMnO1xuaW1wb3J0IHsgaW50ZXJwb2xhdGUgfSBmcm9tICcuLi8uLi91dGlscy9pbnRlcnBvbGF0ZS5tanMnO1xuaW1wb3J0IHsgZGVmYXVsdE9mZnNldCB9IGZyb20gJy4uLy4uL3V0aWxzL29mZnNldHMvZGVmYXVsdC5tanMnO1xuaW1wb3J0IHsgY29udmVydE9mZnNldFRvVGltZXMgfSBmcm9tICcuLi8uLi91dGlscy9vZmZzZXRzL3RpbWUubWpzJztcblxuZnVuY3Rpb24gZGVmYXVsdEVhc2luZyh2YWx1ZXMsIGVhc2luZykge1xuICAgIHJldHVybiB2YWx1ZXMubWFwKCgpID0+IGVhc2luZyB8fCBlYXNlSW5PdXQpLnNwbGljZSgwLCB2YWx1ZXMubGVuZ3RoIC0gMSk7XG59XG5mdW5jdGlvbiBrZXlmcmFtZXMoeyBkdXJhdGlvbiA9IDMwMCwga2V5ZnJhbWVzOiBrZXlmcmFtZVZhbHVlcywgdGltZXMsIGVhc2UgPSBcImVhc2VJbk91dFwiLCB9KSB7XG4gICAgLyoqXG4gICAgICogRWFzaW5nIGZ1bmN0aW9ucyBjYW4gYmUgZXh0ZXJuYWxseSBkZWZpbmVkIGFzIHN0cmluZ3MuIEhlcmUgd2UgY29udmVydCB0aGVtXG4gICAgICogaW50byBhY3R1YWwgZnVuY3Rpb25zLlxuICAgICAqL1xuICAgIGNvbnN0IGVhc2luZ0Z1bmN0aW9ucyA9IGlzRWFzaW5nQXJyYXkoZWFzZSlcbiAgICAgICAgPyBlYXNlLm1hcChlYXNpbmdEZWZpbml0aW9uVG9GdW5jdGlvbilcbiAgICAgICAgOiBlYXNpbmdEZWZpbml0aW9uVG9GdW5jdGlvbihlYXNlKTtcbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIHRoZSBJdGVyYXRvci1zcGVjIHJldHVybiB2YWx1ZS4gV2UgZW5zdXJlIGl0J3MgbXV0YWJsZSByYXRoZXIgdGhhbiB1c2luZyBhIGdlbmVyYXRvclxuICAgICAqIHRvIHJlZHVjZSBHQyBkdXJpbmcgYW5pbWF0aW9uLlxuICAgICAqL1xuICAgIGNvbnN0IHN0YXRlID0ge1xuICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IGtleWZyYW1lVmFsdWVzWzBdLFxuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgdGltZXMgYXJyYXkgYmFzZWQgb24gdGhlIHByb3ZpZGVkIDAtMSBvZmZzZXRzXG4gICAgICovXG4gICAgY29uc3QgYWJzb2x1dGVUaW1lcyA9IGNvbnZlcnRPZmZzZXRUb1RpbWVzKFxuICAgIC8vIE9ubHkgdXNlIHRoZSBwcm92aWRlZCBvZmZzZXRzIGlmIHRoZXkncmUgdGhlIGNvcnJlY3QgbGVuZ3RoXG4gICAgLy8gVE9ETyBNYXliZSB3ZSBzaG91bGQgd2FybiBoZXJlIGlmIHRoZXJlJ3MgYSBsZW5ndGggbWlzbWF0Y2hcbiAgICB0aW1lcyAmJiB0aW1lcy5sZW5ndGggPT09IGtleWZyYW1lVmFsdWVzLmxlbmd0aFxuICAgICAgICA/IHRpbWVzXG4gICAgICAgIDogZGVmYXVsdE9mZnNldChrZXlmcmFtZVZhbHVlcyksIGR1cmF0aW9uKTtcbiAgICBjb25zdCBtYXBUaW1lVG9LZXlmcmFtZSA9IGludGVycG9sYXRlKGFic29sdXRlVGltZXMsIGtleWZyYW1lVmFsdWVzLCB7XG4gICAgICAgIGVhc2U6IEFycmF5LmlzQXJyYXkoZWFzaW5nRnVuY3Rpb25zKVxuICAgICAgICAgICAgPyBlYXNpbmdGdW5jdGlvbnNcbiAgICAgICAgICAgIDogZGVmYXVsdEVhc2luZyhrZXlmcmFtZVZhbHVlcywgZWFzaW5nRnVuY3Rpb25zKSxcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBjYWxjdWxhdGVkRHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgICBuZXh0OiAodCkgPT4ge1xuICAgICAgICAgICAgc3RhdGUudmFsdWUgPSBtYXBUaW1lVG9LZXlmcmFtZSh0KTtcbiAgICAgICAgICAgIHN0YXRlLmRvbmUgPSB0ID49IGR1cmF0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICB9LFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGRlZmF1bHRFYXNpbmcsIGtleWZyYW1lcyB9O1xuIiwiZnVuY3Rpb24gY29udmVydE9mZnNldFRvVGltZXMob2Zmc2V0LCBkdXJhdGlvbikge1xuICAgIHJldHVybiBvZmZzZXQubWFwKChvKSA9PiBvICogZHVyYXRpb24pO1xufVxuXG5leHBvcnQgeyBjb252ZXJ0T2Zmc2V0VG9UaW1lcyB9O1xuIiwiaW1wb3J0IHsgZmlsbE9mZnNldCB9IGZyb20gJy4vZmlsbC5tanMnO1xuXG5mdW5jdGlvbiBkZWZhdWx0T2Zmc2V0KGFycikge1xuICAgIGNvbnN0IG9mZnNldCA9IFswXTtcbiAgICBmaWxsT2Zmc2V0KG9mZnNldCwgYXJyLmxlbmd0aCAtIDEpO1xuICAgIHJldHVybiBvZmZzZXQ7XG59XG5cbmV4cG9ydCB7IGRlZmF1bHRPZmZzZXQgfTtcbiIsImltcG9ydCB7IG1peCB9IGZyb20gJy4uL21peC5tanMnO1xuaW1wb3J0IHsgcHJvZ3Jlc3MgfSBmcm9tICcuLi9wcm9ncmVzcy5tanMnO1xuXG5mdW5jdGlvbiBmaWxsT2Zmc2V0KG9mZnNldCwgcmVtYWluaW5nKSB7XG4gICAgY29uc3QgbWluID0gb2Zmc2V0W29mZnNldC5sZW5ndGggLSAxXTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSByZW1haW5pbmc7IGkrKykge1xuICAgICAgICBjb25zdCBvZmZzZXRQcm9ncmVzcyA9IHByb2dyZXNzKDAsIHJlbWFpbmluZywgaSk7XG4gICAgICAgIG9mZnNldC5wdXNoKG1peChtaW4sIDEsIG9mZnNldFByb2dyZXNzKSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBmaWxsT2Zmc2V0IH07XG4iLCIvKlxuICBDb252ZXJ0IHZlbG9jaXR5IGludG8gdmVsb2NpdHkgcGVyIHNlY29uZFxuXG4gIEBwYXJhbSBbbnVtYmVyXTogVW5pdCBwZXIgZnJhbWVcbiAgQHBhcmFtIFtudW1iZXJdOiBGcmFtZSBkdXJhdGlvbiBpbiBtc1xuKi9cbmZ1bmN0aW9uIHZlbG9jaXR5UGVyU2Vjb25kKHZlbG9jaXR5LCBmcmFtZUR1cmF0aW9uKSB7XG4gICAgcmV0dXJuIGZyYW1lRHVyYXRpb24gPyB2ZWxvY2l0eSAqICgxMDAwIC8gZnJhbWVEdXJhdGlvbikgOiAwO1xufVxuXG5leHBvcnQgeyB2ZWxvY2l0eVBlclNlY29uZCB9O1xuIiwiaW1wb3J0IHsgdmVsb2NpdHlQZXJTZWNvbmQgfSBmcm9tICcuLi8uLi8uLi91dGlscy92ZWxvY2l0eS1wZXItc2Vjb25kLm1qcyc7XG5cbmNvbnN0IHZlbG9jaXR5U2FtcGxlRHVyYXRpb24gPSA1OyAvLyBtc1xuZnVuY3Rpb24gY2FsY0dlbmVyYXRvclZlbG9jaXR5KHJlc29sdmVWYWx1ZSwgdCwgY3VycmVudCkge1xuICAgIGNvbnN0IHByZXZUID0gTWF0aC5tYXgodCAtIHZlbG9jaXR5U2FtcGxlRHVyYXRpb24sIDApO1xuICAgIHJldHVybiB2ZWxvY2l0eVBlclNlY29uZChjdXJyZW50IC0gcmVzb2x2ZVZhbHVlKHByZXZUKSwgdCAtIHByZXZUKTtcbn1cblxuZXhwb3J0IHsgY2FsY0dlbmVyYXRvclZlbG9jaXR5IH07XG4iLCJpbXBvcnQgeyB3YXJuaW5nIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvZXJyb3JzLm1qcyc7XG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2NsYW1wLm1qcyc7XG5pbXBvcnQgeyBzZWNvbmRzVG9NaWxsaXNlY29uZHMsIG1pbGxpc2Vjb25kc1RvU2Vjb25kcyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3RpbWUtY29udmVyc2lvbi5tanMnO1xuXG5jb25zdCBzYWZlTWluID0gMC4wMDE7XG5jb25zdCBtaW5EdXJhdGlvbiA9IDAuMDE7XG5jb25zdCBtYXhEdXJhdGlvbiA9IDEwLjA7XG5jb25zdCBtaW5EYW1waW5nID0gMC4wNTtcbmNvbnN0IG1heERhbXBpbmcgPSAxO1xuZnVuY3Rpb24gZmluZFNwcmluZyh7IGR1cmF0aW9uID0gODAwLCBib3VuY2UgPSAwLjI1LCB2ZWxvY2l0eSA9IDAsIG1hc3MgPSAxLCB9KSB7XG4gICAgbGV0IGVudmVsb3BlO1xuICAgIGxldCBkZXJpdmF0aXZlO1xuICAgIHdhcm5pbmcoZHVyYXRpb24gPD0gc2Vjb25kc1RvTWlsbGlzZWNvbmRzKG1heER1cmF0aW9uKSwgXCJTcHJpbmcgZHVyYXRpb24gbXVzdCBiZSAxMCBzZWNvbmRzIG9yIGxlc3NcIik7XG4gICAgbGV0IGRhbXBpbmdSYXRpbyA9IDEgLSBib3VuY2U7XG4gICAgLyoqXG4gICAgICogUmVzdHJpY3QgZGFtcGluZ1JhdGlvIGFuZCBkdXJhdGlvbiB0byB3aXRoaW4gYWNjZXB0YWJsZSByYW5nZXMuXG4gICAgICovXG4gICAgZGFtcGluZ1JhdGlvID0gY2xhbXAobWluRGFtcGluZywgbWF4RGFtcGluZywgZGFtcGluZ1JhdGlvKTtcbiAgICBkdXJhdGlvbiA9IGNsYW1wKG1pbkR1cmF0aW9uLCBtYXhEdXJhdGlvbiwgbWlsbGlzZWNvbmRzVG9TZWNvbmRzKGR1cmF0aW9uKSk7XG4gICAgaWYgKGRhbXBpbmdSYXRpbyA8IDEpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVuZGVyZGFtcGVkIHNwcmluZ1xuICAgICAgICAgKi9cbiAgICAgICAgZW52ZWxvcGUgPSAodW5kYW1wZWRGcmVxKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBleHBvbmVudGlhbERlY2F5ID0gdW5kYW1wZWRGcmVxICogZGFtcGluZ1JhdGlvO1xuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSBleHBvbmVudGlhbERlY2F5ICogZHVyYXRpb247XG4gICAgICAgICAgICBjb25zdCBhID0gZXhwb25lbnRpYWxEZWNheSAtIHZlbG9jaXR5O1xuICAgICAgICAgICAgY29uc3QgYiA9IGNhbGNBbmd1bGFyRnJlcSh1bmRhbXBlZEZyZXEsIGRhbXBpbmdSYXRpbyk7XG4gICAgICAgICAgICBjb25zdCBjID0gTWF0aC5leHAoLWRlbHRhKTtcbiAgICAgICAgICAgIHJldHVybiBzYWZlTWluIC0gKGEgLyBiKSAqIGM7XG4gICAgICAgIH07XG4gICAgICAgIGRlcml2YXRpdmUgPSAodW5kYW1wZWRGcmVxKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBleHBvbmVudGlhbERlY2F5ID0gdW5kYW1wZWRGcmVxICogZGFtcGluZ1JhdGlvO1xuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSBleHBvbmVudGlhbERlY2F5ICogZHVyYXRpb247XG4gICAgICAgICAgICBjb25zdCBkID0gZGVsdGEgKiB2ZWxvY2l0eSArIHZlbG9jaXR5O1xuICAgICAgICAgICAgY29uc3QgZSA9IE1hdGgucG93KGRhbXBpbmdSYXRpbywgMikgKiBNYXRoLnBvdyh1bmRhbXBlZEZyZXEsIDIpICogZHVyYXRpb247XG4gICAgICAgICAgICBjb25zdCBmID0gTWF0aC5leHAoLWRlbHRhKTtcbiAgICAgICAgICAgIGNvbnN0IGcgPSBjYWxjQW5ndWxhckZyZXEoTWF0aC5wb3codW5kYW1wZWRGcmVxLCAyKSwgZGFtcGluZ1JhdGlvKTtcbiAgICAgICAgICAgIGNvbnN0IGZhY3RvciA9IC1lbnZlbG9wZSh1bmRhbXBlZEZyZXEpICsgc2FmZU1pbiA+IDAgPyAtMSA6IDE7XG4gICAgICAgICAgICByZXR1cm4gKGZhY3RvciAqICgoZCAtIGUpICogZikpIC8gZztcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcml0aWNhbGx5LWRhbXBlZCBzcHJpbmdcbiAgICAgICAgICovXG4gICAgICAgIGVudmVsb3BlID0gKHVuZGFtcGVkRnJlcSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYSA9IE1hdGguZXhwKC11bmRhbXBlZEZyZXEgKiBkdXJhdGlvbik7XG4gICAgICAgICAgICBjb25zdCBiID0gKHVuZGFtcGVkRnJlcSAtIHZlbG9jaXR5KSAqIGR1cmF0aW9uICsgMTtcbiAgICAgICAgICAgIHJldHVybiAtc2FmZU1pbiArIGEgKiBiO1xuICAgICAgICB9O1xuICAgICAgICBkZXJpdmF0aXZlID0gKHVuZGFtcGVkRnJlcSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYSA9IE1hdGguZXhwKC11bmRhbXBlZEZyZXEgKiBkdXJhdGlvbik7XG4gICAgICAgICAgICBjb25zdCBiID0gKHZlbG9jaXR5IC0gdW5kYW1wZWRGcmVxKSAqIChkdXJhdGlvbiAqIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiBhICogYjtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgaW5pdGlhbEd1ZXNzID0gNSAvIGR1cmF0aW9uO1xuICAgIGNvbnN0IHVuZGFtcGVkRnJlcSA9IGFwcHJveGltYXRlUm9vdChlbnZlbG9wZSwgZGVyaXZhdGl2ZSwgaW5pdGlhbEd1ZXNzKTtcbiAgICBkdXJhdGlvbiA9IHNlY29uZHNUb01pbGxpc2Vjb25kcyhkdXJhdGlvbik7XG4gICAgaWYgKGlzTmFOKHVuZGFtcGVkRnJlcSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0aWZmbmVzczogMTAwLFxuICAgICAgICAgICAgZGFtcGluZzogMTAsXG4gICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHN0aWZmbmVzcyA9IE1hdGgucG93KHVuZGFtcGVkRnJlcSwgMikgKiBtYXNzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RpZmZuZXNzLFxuICAgICAgICAgICAgZGFtcGluZzogZGFtcGluZ1JhdGlvICogMiAqIE1hdGguc3FydChtYXNzICogc3RpZmZuZXNzKSxcbiAgICAgICAgICAgIGR1cmF0aW9uLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmNvbnN0IHJvb3RJdGVyYXRpb25zID0gMTI7XG5mdW5jdGlvbiBhcHByb3hpbWF0ZVJvb3QoZW52ZWxvcGUsIGRlcml2YXRpdmUsIGluaXRpYWxHdWVzcykge1xuICAgIGxldCByZXN1bHQgPSBpbml0aWFsR3Vlc3M7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCByb290SXRlcmF0aW9uczsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCAtIGVudmVsb3BlKHJlc3VsdCkgLyBkZXJpdmF0aXZlKHJlc3VsdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjYWxjQW5ndWxhckZyZXEodW5kYW1wZWRGcmVxLCBkYW1waW5nUmF0aW8pIHtcbiAgICByZXR1cm4gdW5kYW1wZWRGcmVxICogTWF0aC5zcXJ0KDEgLSBkYW1waW5nUmF0aW8gKiBkYW1waW5nUmF0aW8pO1xufVxuXG5leHBvcnQgeyBjYWxjQW5ndWxhckZyZXEsIGZpbmRTcHJpbmcsIG1heERhbXBpbmcsIG1heER1cmF0aW9uLCBtaW5EYW1waW5nLCBtaW5EdXJhdGlvbiB9O1xuIiwiaW1wb3J0IHsgbWlsbGlzZWNvbmRzVG9TZWNvbmRzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdGltZS1jb252ZXJzaW9uLm1qcyc7XG5pbXBvcnQgeyBjYWxjR2VuZXJhdG9yVmVsb2NpdHkgfSBmcm9tICcuLi91dGlscy92ZWxvY2l0eS5tanMnO1xuaW1wb3J0IHsgZmluZFNwcmluZywgY2FsY0FuZ3VsYXJGcmVxIH0gZnJvbSAnLi9maW5kLm1qcyc7XG5cbmNvbnN0IGR1cmF0aW9uS2V5cyA9IFtcImR1cmF0aW9uXCIsIFwiYm91bmNlXCJdO1xuY29uc3QgcGh5c2ljc0tleXMgPSBbXCJzdGlmZm5lc3NcIiwgXCJkYW1waW5nXCIsIFwibWFzc1wiXTtcbmZ1bmN0aW9uIGlzU3ByaW5nVHlwZShvcHRpb25zLCBrZXlzKSB7XG4gICAgcmV0dXJuIGtleXMuc29tZSgoa2V5KSA9PiBvcHRpb25zW2tleV0gIT09IHVuZGVmaW5lZCk7XG59XG5mdW5jdGlvbiBnZXRTcHJpbmdPcHRpb25zKG9wdGlvbnMpIHtcbiAgICBsZXQgc3ByaW5nT3B0aW9ucyA9IHtcbiAgICAgICAgdmVsb2NpdHk6IDAuMCxcbiAgICAgICAgc3RpZmZuZXNzOiAxMDAsXG4gICAgICAgIGRhbXBpbmc6IDEwLFxuICAgICAgICBtYXNzOiAxLjAsXG4gICAgICAgIGlzUmVzb2x2ZWRGcm9tRHVyYXRpb246IGZhbHNlLFxuICAgICAgICAuLi5vcHRpb25zLFxuICAgIH07XG4gICAgLy8gc3RpZmZuZXNzL2RhbXBpbmcvbWFzcyBvdmVycmlkZXMgZHVyYXRpb24vYm91bmNlXG4gICAgaWYgKCFpc1NwcmluZ1R5cGUob3B0aW9ucywgcGh5c2ljc0tleXMpICYmXG4gICAgICAgIGlzU3ByaW5nVHlwZShvcHRpb25zLCBkdXJhdGlvbktleXMpKSB7XG4gICAgICAgIGNvbnN0IGRlcml2ZWQgPSBmaW5kU3ByaW5nKG9wdGlvbnMpO1xuICAgICAgICBzcHJpbmdPcHRpb25zID0ge1xuICAgICAgICAgICAgLi4uc3ByaW5nT3B0aW9ucyxcbiAgICAgICAgICAgIC4uLmRlcml2ZWQsXG4gICAgICAgICAgICB2ZWxvY2l0eTogMC4wLFxuICAgICAgICAgICAgbWFzczogMS4wLFxuICAgICAgICB9O1xuICAgICAgICBzcHJpbmdPcHRpb25zLmlzUmVzb2x2ZWRGcm9tRHVyYXRpb24gPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gc3ByaW5nT3B0aW9ucztcbn1cbmZ1bmN0aW9uIHNwcmluZyh7IGtleWZyYW1lcywgcmVzdERlbHRhLCByZXN0U3BlZWQsIC4uLm9wdGlvbnMgfSkge1xuICAgIGNvbnN0IG9yaWdpbiA9IGtleWZyYW1lc1swXTtcbiAgICBjb25zdCB0YXJnZXQgPSBrZXlmcmFtZXNba2V5ZnJhbWVzLmxlbmd0aCAtIDFdO1xuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgdGhlIEl0ZXJhdG9yLXNwZWMgcmV0dXJuIHZhbHVlLiBXZSBlbnN1cmUgaXQncyBtdXRhYmxlIHJhdGhlciB0aGFuIHVzaW5nIGEgZ2VuZXJhdG9yXG4gICAgICogdG8gcmVkdWNlIEdDIGR1cmluZyBhbmltYXRpb24uXG4gICAgICovXG4gICAgY29uc3Qgc3RhdGUgPSB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb3JpZ2luIH07XG4gICAgY29uc3QgeyBzdGlmZm5lc3MsIGRhbXBpbmcsIG1hc3MsIHZlbG9jaXR5LCBkdXJhdGlvbiwgaXNSZXNvbHZlZEZyb21EdXJhdGlvbiwgfSA9IGdldFNwcmluZ09wdGlvbnMob3B0aW9ucyk7XG4gICAgY29uc3QgaW5pdGlhbFZlbG9jaXR5ID0gdmVsb2NpdHkgPyAtbWlsbGlzZWNvbmRzVG9TZWNvbmRzKHZlbG9jaXR5KSA6IDAuMDtcbiAgICBjb25zdCBkYW1waW5nUmF0aW8gPSBkYW1waW5nIC8gKDIgKiBNYXRoLnNxcnQoc3RpZmZuZXNzICogbWFzcykpO1xuICAgIGNvbnN0IGluaXRpYWxEZWx0YSA9IHRhcmdldCAtIG9yaWdpbjtcbiAgICBjb25zdCB1bmRhbXBlZEFuZ3VsYXJGcmVxID0gbWlsbGlzZWNvbmRzVG9TZWNvbmRzKE1hdGguc3FydChzdGlmZm5lc3MgLyBtYXNzKSk7XG4gICAgLyoqXG4gICAgICogSWYgd2UncmUgd29ya2luZyBvbiBhIGdyYW51bGFyIHNjYWxlLCB1c2Ugc21hbGxlciBkZWZhdWx0cyBmb3IgZGV0ZXJtaW5pbmdcbiAgICAgKiB3aGVuIHRoZSBzcHJpbmcgaXMgZmluaXNoZWQuXG4gICAgICpcbiAgICAgKiBUaGVzZSBkZWZhdWx0cyBoYXZlIGJlZW4gc2VsZWN0ZWQgZW1wcmljYWxseSBiYXNlZCBvbiB3aGF0IHN0cmlrZXMgYSBnb29kXG4gICAgICogcmF0aW8gYmV0d2VlbiBmZWVsaW5nIGdvb2QgYW5kIGZpbmlzaGluZyBhcyBzb29uIGFzIGNoYW5nZXMgYXJlIGltcGVyY2VwdGlibGUuXG4gICAgICovXG4gICAgY29uc3QgaXNHcmFudWxhclNjYWxlID0gTWF0aC5hYnMoaW5pdGlhbERlbHRhKSA8IDU7XG4gICAgcmVzdFNwZWVkIHx8IChyZXN0U3BlZWQgPSBpc0dyYW51bGFyU2NhbGUgPyAwLjAxIDogMik7XG4gICAgcmVzdERlbHRhIHx8IChyZXN0RGVsdGEgPSBpc0dyYW51bGFyU2NhbGUgPyAwLjAwNSA6IDAuNSk7XG4gICAgbGV0IHJlc29sdmVTcHJpbmc7XG4gICAgaWYgKGRhbXBpbmdSYXRpbyA8IDEpIHtcbiAgICAgICAgY29uc3QgYW5ndWxhckZyZXEgPSBjYWxjQW5ndWxhckZyZXEodW5kYW1wZWRBbmd1bGFyRnJlcSwgZGFtcGluZ1JhdGlvKTtcbiAgICAgICAgLy8gVW5kZXJkYW1wZWQgc3ByaW5nXG4gICAgICAgIHJlc29sdmVTcHJpbmcgPSAodCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZW52ZWxvcGUgPSBNYXRoLmV4cCgtZGFtcGluZ1JhdGlvICogdW5kYW1wZWRBbmd1bGFyRnJlcSAqIHQpO1xuICAgICAgICAgICAgcmV0dXJuICh0YXJnZXQgLVxuICAgICAgICAgICAgICAgIGVudmVsb3BlICpcbiAgICAgICAgICAgICAgICAgICAgKCgoaW5pdGlhbFZlbG9jaXR5ICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhbXBpbmdSYXRpbyAqIHVuZGFtcGVkQW5ndWxhckZyZXEgKiBpbml0aWFsRGVsdGEpIC9cbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXJGcmVxKSAqXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnNpbihhbmd1bGFyRnJlcSAqIHQpICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxEZWx0YSAqIE1hdGguY29zKGFuZ3VsYXJGcmVxICogdCkpKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZGFtcGluZ1JhdGlvID09PSAxKSB7XG4gICAgICAgIC8vIENyaXRpY2FsbHkgZGFtcGVkIHNwcmluZ1xuICAgICAgICByZXNvbHZlU3ByaW5nID0gKHQpID0+IHRhcmdldCAtXG4gICAgICAgICAgICBNYXRoLmV4cCgtdW5kYW1wZWRBbmd1bGFyRnJlcSAqIHQpICpcbiAgICAgICAgICAgICAgICAoaW5pdGlhbERlbHRhICtcbiAgICAgICAgICAgICAgICAgICAgKGluaXRpYWxWZWxvY2l0eSArIHVuZGFtcGVkQW5ndWxhckZyZXEgKiBpbml0aWFsRGVsdGEpICogdCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBPdmVyZGFtcGVkIHNwcmluZ1xuICAgICAgICBjb25zdCBkYW1wZWRBbmd1bGFyRnJlcSA9IHVuZGFtcGVkQW5ndWxhckZyZXEgKiBNYXRoLnNxcnQoZGFtcGluZ1JhdGlvICogZGFtcGluZ1JhdGlvIC0gMSk7XG4gICAgICAgIHJlc29sdmVTcHJpbmcgPSAodCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZW52ZWxvcGUgPSBNYXRoLmV4cCgtZGFtcGluZ1JhdGlvICogdW5kYW1wZWRBbmd1bGFyRnJlcSAqIHQpO1xuICAgICAgICAgICAgLy8gV2hlbiBwZXJmb3JtaW5nIHNpbmggb3IgY29zaCB2YWx1ZXMgY2FuIGhpdCBJbmZpbml0eSBzbyB3ZSBjYXAgdGhlbSBoZXJlXG4gICAgICAgICAgICBjb25zdCBmcmVxRm9yVCA9IE1hdGgubWluKGRhbXBlZEFuZ3VsYXJGcmVxICogdCwgMzAwKTtcbiAgICAgICAgICAgIHJldHVybiAodGFyZ2V0IC1cbiAgICAgICAgICAgICAgICAoZW52ZWxvcGUgKlxuICAgICAgICAgICAgICAgICAgICAoKGluaXRpYWxWZWxvY2l0eSArXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1waW5nUmF0aW8gKiB1bmRhbXBlZEFuZ3VsYXJGcmVxICogaW5pdGlhbERlbHRhKSAqXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnNpbmgoZnJlcUZvclQpICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhbXBlZEFuZ3VsYXJGcmVxICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsRGVsdGEgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguY29zaChmcmVxRm9yVCkpKSAvXG4gICAgICAgICAgICAgICAgICAgIGRhbXBlZEFuZ3VsYXJGcmVxKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2FsY3VsYXRlZER1cmF0aW9uOiBpc1Jlc29sdmVkRnJvbUR1cmF0aW9uID8gZHVyYXRpb24gfHwgbnVsbCA6IG51bGwsXG4gICAgICAgIG5leHQ6ICh0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gcmVzb2x2ZVNwcmluZyh0KTtcbiAgICAgICAgICAgIGlmICghaXNSZXNvbHZlZEZyb21EdXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50VmVsb2NpdHkgPSBpbml0aWFsVmVsb2NpdHk7XG4gICAgICAgICAgICAgICAgaWYgKHQgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFdlIG9ubHkgbmVlZCB0byBjYWxjdWxhdGUgdmVsb2NpdHkgZm9yIHVuZGVyLWRhbXBlZCBzcHJpbmdzXG4gICAgICAgICAgICAgICAgICAgICAqIGFzIG92ZXItIGFuZCBjcml0aWNhbGx5LWRhbXBlZCBzcHJpbmdzIGNhbid0IG92ZXJzaG9vdCwgc29cbiAgICAgICAgICAgICAgICAgICAgICogY2hlY2tpbmcgb25seSBmb3IgZGlzcGxhY2VtZW50IGlzIGVub3VnaC5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYW1waW5nUmF0aW8gPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VmVsb2NpdHkgPSBjYWxjR2VuZXJhdG9yVmVsb2NpdHkocmVzb2x2ZVNwcmluZywgdCwgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VmVsb2NpdHkgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGlzQmVsb3dWZWxvY2l0eVRocmVzaG9sZCA9IE1hdGguYWJzKGN1cnJlbnRWZWxvY2l0eSkgPD0gcmVzdFNwZWVkO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzQmVsb3dEaXNwbGFjZW1lbnRUaHJlc2hvbGQgPSBNYXRoLmFicyh0YXJnZXQgLSBjdXJyZW50KSA8PSByZXN0RGVsdGE7XG4gICAgICAgICAgICAgICAgc3RhdGUuZG9uZSA9XG4gICAgICAgICAgICAgICAgICAgIGlzQmVsb3dWZWxvY2l0eVRocmVzaG9sZCAmJiBpc0JlbG93RGlzcGxhY2VtZW50VGhyZXNob2xkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuZG9uZSA9IHQgPj0gZHVyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGF0ZS52YWx1ZSA9IHN0YXRlLmRvbmUgPyB0YXJnZXQgOiBjdXJyZW50O1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICB9LFxuICAgIH07XG59XG5cbmV4cG9ydCB7IHNwcmluZyB9O1xuIiwiaW1wb3J0IHsgc3ByaW5nIH0gZnJvbSAnLi9zcHJpbmcvaW5kZXgubWpzJztcbmltcG9ydCB7IGNhbGNHZW5lcmF0b3JWZWxvY2l0eSB9IGZyb20gJy4vdXRpbHMvdmVsb2NpdHkubWpzJztcblxuZnVuY3Rpb24gaW5lcnRpYSh7IGtleWZyYW1lcywgdmVsb2NpdHkgPSAwLjAsIHBvd2VyID0gMC44LCB0aW1lQ29uc3RhbnQgPSAzMjUsIGJvdW5jZURhbXBpbmcgPSAxMCwgYm91bmNlU3RpZmZuZXNzID0gNTAwLCBtb2RpZnlUYXJnZXQsIG1pbiwgbWF4LCByZXN0RGVsdGEgPSAwLjUsIHJlc3RTcGVlZCwgfSkge1xuICAgIGNvbnN0IG9yaWdpbiA9IGtleWZyYW1lc1swXTtcbiAgICBjb25zdCBzdGF0ZSA9IHtcbiAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBvcmlnaW4sXG4gICAgfTtcbiAgICBjb25zdCBpc091dE9mQm91bmRzID0gKHYpID0+IChtaW4gIT09IHVuZGVmaW5lZCAmJiB2IDwgbWluKSB8fCAobWF4ICE9PSB1bmRlZmluZWQgJiYgdiA+IG1heCk7XG4gICAgY29uc3QgbmVhcmVzdEJvdW5kYXJ5ID0gKHYpID0+IHtcbiAgICAgICAgaWYgKG1pbiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIG1heDtcbiAgICAgICAgaWYgKG1heCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIG1pbjtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKG1pbiAtIHYpIDwgTWF0aC5hYnMobWF4IC0gdikgPyBtaW4gOiBtYXg7XG4gICAgfTtcbiAgICBsZXQgYW1wbGl0dWRlID0gcG93ZXIgKiB2ZWxvY2l0eTtcbiAgICBjb25zdCBpZGVhbCA9IG9yaWdpbiArIGFtcGxpdHVkZTtcbiAgICBjb25zdCB0YXJnZXQgPSBtb2RpZnlUYXJnZXQgPT09IHVuZGVmaW5lZCA/IGlkZWFsIDogbW9kaWZ5VGFyZ2V0KGlkZWFsKTtcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgdGFyZ2V0IGhhcyBjaGFuZ2VkIHdlIG5lZWQgdG8gcmUtY2FsY3VsYXRlIHRoZSBhbXBsaXR1ZGUsIG90aGVyd2lzZVxuICAgICAqIHRoZSBhbmltYXRpb24gd2lsbCBzdGFydCBmcm9tIHRoZSB3cm9uZyBwb3NpdGlvbi5cbiAgICAgKi9cbiAgICBpZiAodGFyZ2V0ICE9PSBpZGVhbClcbiAgICAgICAgYW1wbGl0dWRlID0gdGFyZ2V0IC0gb3JpZ2luO1xuICAgIGNvbnN0IGNhbGNEZWx0YSA9ICh0KSA9PiAtYW1wbGl0dWRlICogTWF0aC5leHAoLXQgLyB0aW1lQ29uc3RhbnQpO1xuICAgIGNvbnN0IGNhbGNMYXRlc3QgPSAodCkgPT4gdGFyZ2V0ICsgY2FsY0RlbHRhKHQpO1xuICAgIGNvbnN0IGFwcGx5RnJpY3Rpb24gPSAodCkgPT4ge1xuICAgICAgICBjb25zdCBkZWx0YSA9IGNhbGNEZWx0YSh0KTtcbiAgICAgICAgY29uc3QgbGF0ZXN0ID0gY2FsY0xhdGVzdCh0KTtcbiAgICAgICAgc3RhdGUuZG9uZSA9IE1hdGguYWJzKGRlbHRhKSA8PSByZXN0RGVsdGE7XG4gICAgICAgIHN0YXRlLnZhbHVlID0gc3RhdGUuZG9uZSA/IHRhcmdldCA6IGxhdGVzdDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIElkZWFsbHkgdGhpcyB3b3VsZCByZXNvbHZlIGZvciB0IGluIGEgc3RhdGVsZXNzIHdheSwgd2UgY291bGRcbiAgICAgKiBkbyB0aGF0IGJ5IGFsd2F5cyBwcmVjYWxjdWxhdGluZyB0aGUgYW5pbWF0aW9uIGJ1dCBhcyB3ZSBrbm93XG4gICAgICogdGhpcyB3aWxsIGJlIGRvbmUgYW55d2F5IHdlIGNhbiBhc3N1bWUgdGhhdCBzcHJpbmcgd2lsbFxuICAgICAqIGJlIGRpc2NvdmVyZWQgZHVyaW5nIHRoYXQuXG4gICAgICovXG4gICAgbGV0IHRpbWVSZWFjaGVkQm91bmRhcnk7XG4gICAgbGV0IHNwcmluZyQxO1xuICAgIGNvbnN0IGNoZWNrQ2F0Y2hCb3VuZGFyeSA9ICh0KSA9PiB7XG4gICAgICAgIGlmICghaXNPdXRPZkJvdW5kcyhzdGF0ZS52YWx1ZSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRpbWVSZWFjaGVkQm91bmRhcnkgPSB0O1xuICAgICAgICBzcHJpbmckMSA9IHNwcmluZyh7XG4gICAgICAgICAgICBrZXlmcmFtZXM6IFtzdGF0ZS52YWx1ZSwgbmVhcmVzdEJvdW5kYXJ5KHN0YXRlLnZhbHVlKV0sXG4gICAgICAgICAgICB2ZWxvY2l0eTogY2FsY0dlbmVyYXRvclZlbG9jaXR5KGNhbGNMYXRlc3QsIHQsIHN0YXRlLnZhbHVlKSxcbiAgICAgICAgICAgIGRhbXBpbmc6IGJvdW5jZURhbXBpbmcsXG4gICAgICAgICAgICBzdGlmZm5lc3M6IGJvdW5jZVN0aWZmbmVzcyxcbiAgICAgICAgICAgIHJlc3REZWx0YSxcbiAgICAgICAgICAgIHJlc3RTcGVlZCxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjaGVja0NhdGNoQm91bmRhcnkoMCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2FsY3VsYXRlZER1cmF0aW9uOiBudWxsLFxuICAgICAgICBuZXh0OiAodCkgPT4ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXZSBuZWVkIHRvIHJlc29sdmUgdGhlIGZyaWN0aW9uIHRvIGZpZ3VyZSBvdXQgaWYgd2UgbmVlZCBhXG4gICAgICAgICAgICAgKiBzcHJpbmcgYnV0IHdlIGRvbid0IHdhbnQgdG8gZG8gdGhpcyB0d2ljZSBwZXIgZnJhbWUuIFNvIGhlcmVcbiAgICAgICAgICAgICAqIHdlIGZsYWcgaWYgd2UgdXBkYXRlZCBmb3IgdGhpcyBmcmFtZSBhbmQgbGF0ZXIgaWYgd2UgZGlkXG4gICAgICAgICAgICAgKiB3ZSBjYW4gc2tpcCBkb2luZyBpdCBhZ2Fpbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbGV0IGhhc1VwZGF0ZWRGcmFtZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzcHJpbmckMSAmJiB0aW1lUmVhY2hlZEJvdW5kYXJ5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBoYXNVcGRhdGVkRnJhbWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGFwcGx5RnJpY3Rpb24odCk7XG4gICAgICAgICAgICAgICAgY2hlY2tDYXRjaEJvdW5kYXJ5KHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB3ZSBoYXZlIGEgc3ByaW5nIGFuZCB0aGUgcHJvdmlkZWQgdCBpcyBiZXlvbmQgdGhlIG1vbWVudCB0aGUgZnJpY3Rpb25cbiAgICAgICAgICAgICAqIGFuaW1hdGlvbiBjcm9zc2VkIHRoZSBtaW4vbWF4IGJvdW5kYXJ5LCB1c2UgdGhlIHNwcmluZy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHRpbWVSZWFjaGVkQm91bmRhcnkgIT09IHVuZGVmaW5lZCAmJiB0ID4gdGltZVJlYWNoZWRCb3VuZGFyeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzcHJpbmckMS5uZXh0KHQgLSB0aW1lUmVhY2hlZEJvdW5kYXJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICFoYXNVcGRhdGVkRnJhbWUgJiYgYXBwbHlGcmljdGlvbih0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcbn1cblxuZXhwb3J0IHsgaW5lcnRpYSB9O1xuIiwiaW1wb3J0IHsgZnJhbWUsIGNhbmNlbEZyYW1lLCBmcmFtZURhdGEgfSBmcm9tICcuLi8uLi8uLi9mcmFtZWxvb3AvZnJhbWUubWpzJztcblxuY29uc3QgZnJhbWVsb29wRHJpdmVyID0gKHVwZGF0ZSkgPT4ge1xuICAgIGNvbnN0IHBhc3NUaW1lc3RhbXAgPSAoeyB0aW1lc3RhbXAgfSkgPT4gdXBkYXRlKHRpbWVzdGFtcCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6ICgpID0+IGZyYW1lLnVwZGF0ZShwYXNzVGltZXN0YW1wLCB0cnVlKSxcbiAgICAgICAgc3RvcDogKCkgPT4gY2FuY2VsRnJhbWUocGFzc1RpbWVzdGFtcCksXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB3ZSdyZSBwcm9jZXNzaW5nIHRoaXMgZnJhbWUgd2UgY2FuIHVzZSB0aGVcbiAgICAgICAgICogZnJhbWVsb2NrZWQgdGltZXN0YW1wIHRvIGtlZXAgdGhpbmdzIGluIHN5bmMuXG4gICAgICAgICAqL1xuICAgICAgICBub3c6ICgpID0+IGZyYW1lRGF0YS5pc1Byb2Nlc3NpbmcgPyBmcmFtZURhdGEudGltZXN0YW1wIDogcGVyZm9ybWFuY2Uubm93KCksXG4gICAgfTtcbn07XG5cbmV4cG9ydCB7IGZyYW1lbG9vcERyaXZlciB9O1xuIiwiLyoqXG4gKiBJbXBsZW1lbnQgYSBwcmFjdGljYWwgbWF4IGR1cmF0aW9uIGZvciBrZXlmcmFtZSBnZW5lcmF0aW9uXG4gKiB0byBwcmV2ZW50IGluZmluaXRlIGxvb3BzXG4gKi9cbmNvbnN0IG1heEdlbmVyYXRvckR1cmF0aW9uID0gMjAwMDA7XG5mdW5jdGlvbiBjYWxjR2VuZXJhdG9yRHVyYXRpb24oZ2VuZXJhdG9yKSB7XG4gICAgbGV0IGR1cmF0aW9uID0gMDtcbiAgICBjb25zdCB0aW1lU3RlcCA9IDUwO1xuICAgIGxldCBzdGF0ZSA9IGdlbmVyYXRvci5uZXh0KGR1cmF0aW9uKTtcbiAgICB3aGlsZSAoIXN0YXRlLmRvbmUgJiYgZHVyYXRpb24gPCBtYXhHZW5lcmF0b3JEdXJhdGlvbikge1xuICAgICAgICBkdXJhdGlvbiArPSB0aW1lU3RlcDtcbiAgICAgICAgc3RhdGUgPSBnZW5lcmF0b3IubmV4dChkdXJhdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBkdXJhdGlvbiA+PSBtYXhHZW5lcmF0b3JEdXJhdGlvbiA/IEluZmluaXR5IDogZHVyYXRpb247XG59XG5cbmV4cG9ydCB7IGNhbGNHZW5lcmF0b3JEdXJhdGlvbiwgbWF4R2VuZXJhdG9yRHVyYXRpb24gfTtcbiIsImltcG9ydCB7IGtleWZyYW1lcyB9IGZyb20gJy4uLy4uL2dlbmVyYXRvcnMva2V5ZnJhbWVzLm1qcyc7XG5pbXBvcnQgeyBzcHJpbmcgfSBmcm9tICcuLi8uLi9nZW5lcmF0b3JzL3NwcmluZy9pbmRleC5tanMnO1xuaW1wb3J0IHsgaW5lcnRpYSB9IGZyb20gJy4uLy4uL2dlbmVyYXRvcnMvaW5lcnRpYS5tanMnO1xuaW1wb3J0IHsgZnJhbWVsb29wRHJpdmVyIH0gZnJvbSAnLi9kcml2ZXItZnJhbWVsb29wLm1qcyc7XG5pbXBvcnQgeyBpbnRlcnBvbGF0ZSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2ludGVycG9sYXRlLm1qcyc7XG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2NsYW1wLm1qcyc7XG5pbXBvcnQgeyBtaWxsaXNlY29uZHNUb1NlY29uZHMsIHNlY29uZHNUb01pbGxpc2Vjb25kcyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3RpbWUtY29udmVyc2lvbi5tanMnO1xuaW1wb3J0IHsgY2FsY0dlbmVyYXRvckR1cmF0aW9uIH0gZnJvbSAnLi4vLi4vZ2VuZXJhdG9ycy91dGlscy9jYWxjLWR1cmF0aW9uLm1qcyc7XG5cbmNvbnN0IHR5cGVzID0ge1xuICAgIGRlY2F5OiBpbmVydGlhLFxuICAgIGluZXJ0aWEsXG4gICAgdHdlZW46IGtleWZyYW1lcyxcbiAgICBrZXlmcmFtZXM6IGtleWZyYW1lcyxcbiAgICBzcHJpbmcsXG59O1xuLyoqXG4gKiBBbmltYXRlIGEgc2luZ2xlIHZhbHVlIG9uIHRoZSBtYWluIHRocmVhZC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHdyaXR0ZW4sIHdoZXJlIGZ1bmN0aW9uYWxpdHkgb3ZlcmxhcHMsXG4gKiB0byBiZSBsYXJnZWx5IHNwZWMtY29tcGxpYW50IHdpdGggV0FBUEkgdG8gYWxsb3cgZnVuZ2liaWxpdHlcbiAqIGJldHdlZW4gdGhlIHR3by5cbiAqL1xuZnVuY3Rpb24gYW5pbWF0ZVZhbHVlKHsgYXV0b3BsYXkgPSB0cnVlLCBkZWxheSA9IDAsIGRyaXZlciA9IGZyYW1lbG9vcERyaXZlciwga2V5ZnJhbWVzOiBrZXlmcmFtZXMkMSwgdHlwZSA9IFwia2V5ZnJhbWVzXCIsIHJlcGVhdCA9IDAsIHJlcGVhdERlbGF5ID0gMCwgcmVwZWF0VHlwZSA9IFwibG9vcFwiLCBvblBsYXksIG9uU3RvcCwgb25Db21wbGV0ZSwgb25VcGRhdGUsIC4uLm9wdGlvbnMgfSkge1xuICAgIGxldCBzcGVlZCA9IDE7XG4gICAgbGV0IGhhc1N0b3BwZWQgPSBmYWxzZTtcbiAgICBsZXQgcmVzb2x2ZUZpbmlzaGVkUHJvbWlzZTtcbiAgICBsZXQgY3VycmVudEZpbmlzaGVkUHJvbWlzZTtcbiAgICAvKipcbiAgICAgKiBSZXNvbHZlIHRoZSBjdXJyZW50IFByb21pc2UgZXZlcnkgdGltZSB3ZSBlbnRlciB0aGVcbiAgICAgKiBmaW5pc2hlZCBzdGF0ZS4gVGhpcyBpcyBXQUFQSS1jb21wYXRpYmxlIGJlaGF2aW91ci5cbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVGaW5pc2hlZFByb21pc2UgPSAoKSA9PiB7XG4gICAgICAgIGN1cnJlbnRGaW5pc2hlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZUZpbmlzaGVkUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gQ3JlYXRlIHRoZSBmaXJzdCBmaW5pc2hlZCBwcm9taXNlXG4gICAgdXBkYXRlRmluaXNoZWRQcm9taXNlKCk7XG4gICAgbGV0IGFuaW1hdGlvbkRyaXZlcjtcbiAgICBjb25zdCBnZW5lcmF0b3JGYWN0b3J5ID0gdHlwZXNbdHlwZV0gfHwga2V5ZnJhbWVzO1xuICAgIC8qKlxuICAgICAqIElmIHRoaXMgaXNuJ3QgdGhlIGtleWZyYW1lcyBnZW5lcmF0b3IgYW5kIHdlJ3ZlIGJlZW4gcHJvdmlkZWRcbiAgICAgKiBzdHJpbmdzIGFzIGtleWZyYW1lcywgd2UgbmVlZCB0byBpbnRlcnBvbGF0ZSB0aGVzZS5cbiAgICAgKiBUT0RPOiBTdXBwb3J0IHZlbG9jaXR5IGZvciB1bml0cyBhbmQgY29tcGxleCB2YWx1ZSB0eXBlcy9cbiAgICAgKi9cbiAgICBsZXQgbWFwTnVtYmVyc1RvS2V5ZnJhbWVzO1xuICAgIGlmIChnZW5lcmF0b3JGYWN0b3J5ICE9PSBrZXlmcmFtZXMgJiZcbiAgICAgICAgdHlwZW9mIGtleWZyYW1lcyQxWzBdICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgIG1hcE51bWJlcnNUb0tleWZyYW1lcyA9IGludGVycG9sYXRlKFswLCAxMDBdLCBrZXlmcmFtZXMkMSwge1xuICAgICAgICAgICAgY2xhbXA6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgICAga2V5ZnJhbWVzJDEgPSBbMCwgMTAwXTtcbiAgICB9XG4gICAgY29uc3QgZ2VuZXJhdG9yID0gZ2VuZXJhdG9yRmFjdG9yeSh7IC4uLm9wdGlvbnMsIGtleWZyYW1lczoga2V5ZnJhbWVzJDEgfSk7XG4gICAgbGV0IG1pcnJvcmVkR2VuZXJhdG9yO1xuICAgIGlmIChyZXBlYXRUeXBlID09PSBcIm1pcnJvclwiKSB7XG4gICAgICAgIG1pcnJvcmVkR2VuZXJhdG9yID0gZ2VuZXJhdG9yRmFjdG9yeSh7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAga2V5ZnJhbWVzOiBbLi4ua2V5ZnJhbWVzJDFdLnJldmVyc2UoKSxcbiAgICAgICAgICAgIHZlbG9jaXR5OiAtKG9wdGlvbnMudmVsb2NpdHkgfHwgMCksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgcGxheVN0YXRlID0gXCJpZGxlXCI7XG4gICAgbGV0IGhvbGRUaW1lID0gbnVsbDtcbiAgICBsZXQgc3RhcnRUaW1lID0gbnVsbDtcbiAgICBsZXQgY2FuY2VsVGltZSA9IG51bGw7XG4gICAgLyoqXG4gICAgICogSWYgZHVyYXRpb24gaXMgdW5kZWZpbmVkIGFuZCB3ZSBoYXZlIHJlcGVhdCBvcHRpb25zLFxuICAgICAqIHdlIG5lZWQgdG8gY2FsY3VsYXRlIGEgZHVyYXRpb24gZnJvbSB0aGUgZ2VuZXJhdG9yLlxuICAgICAqXG4gICAgICogV2Ugc2V0IGl0IHRvIHRoZSBnZW5lcmF0b3IgaXRzZWxmIHRvIGNhY2hlIHRoZSBkdXJhdGlvbi5cbiAgICAgKiBBbnkgdGltZWxpbmUgcmVzb2x2ZXIgd2lsbCBuZWVkIHRvIGhhdmUgYWxyZWFkeSBwcmVjYWxjdWxhdGVkXG4gICAgICogdGhlIGR1cmF0aW9uIGJ5IHRoaXMgc3RlcC5cbiAgICAgKi9cbiAgICBpZiAoZ2VuZXJhdG9yLmNhbGN1bGF0ZWREdXJhdGlvbiA9PT0gbnVsbCAmJiByZXBlYXQpIHtcbiAgICAgICAgZ2VuZXJhdG9yLmNhbGN1bGF0ZWREdXJhdGlvbiA9IGNhbGNHZW5lcmF0b3JEdXJhdGlvbihnZW5lcmF0b3IpO1xuICAgIH1cbiAgICBjb25zdCB7IGNhbGN1bGF0ZWREdXJhdGlvbiB9ID0gZ2VuZXJhdG9yO1xuICAgIGxldCByZXNvbHZlZER1cmF0aW9uID0gSW5maW5pdHk7XG4gICAgbGV0IHRvdGFsRHVyYXRpb24gPSBJbmZpbml0eTtcbiAgICBpZiAoY2FsY3VsYXRlZER1cmF0aW9uICE9PSBudWxsKSB7XG4gICAgICAgIHJlc29sdmVkRHVyYXRpb24gPSBjYWxjdWxhdGVkRHVyYXRpb24gKyByZXBlYXREZWxheTtcbiAgICAgICAgdG90YWxEdXJhdGlvbiA9IHJlc29sdmVkRHVyYXRpb24gKiAocmVwZWF0ICsgMSkgLSByZXBlYXREZWxheTtcbiAgICB9XG4gICAgbGV0IGN1cnJlbnRUaW1lID0gMDtcbiAgICBjb25zdCB0aWNrID0gKHRpbWVzdGFtcCkgPT4ge1xuICAgICAgICBpZiAoc3RhcnRUaW1lID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvKipcbiAgICAgICAgICogcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHRpbWVzdGFtcHMgY2FuIGNvbWUgdGhyb3VnaCBhcyBsb3dlciB0aGFuXG4gICAgICAgICAqIHRoZSBzdGFydFRpbWUgYXMgc2V0IGJ5IHBlcmZvcm1hbmNlLm5vdygpLiBIZXJlIHdlIHByZXZlbnQgdGhpcyxcbiAgICAgICAgICogdGhvdWdoIGluIHRoZSBmdXR1cmUgaXQgY291bGQgYmUgcG9zc2libGUgdG8gbWFrZSBzZXR0aW5nIHN0YXJ0VGltZVxuICAgICAgICAgKiBhIHBlbmRpbmcgb3BlcmF0aW9uIHRoYXQgZ2V0cyByZXNvbHZlZCBoZXJlLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHNwZWVkID4gMClcbiAgICAgICAgICAgIHN0YXJ0VGltZSA9IE1hdGgubWluKHN0YXJ0VGltZSwgdGltZXN0YW1wKTtcbiAgICAgICAgaWYgKHNwZWVkIDwgMClcbiAgICAgICAgICAgIHN0YXJ0VGltZSA9IE1hdGgubWluKHRpbWVzdGFtcCAtIHRvdGFsRHVyYXRpb24gLyBzcGVlZCwgc3RhcnRUaW1lKTtcbiAgICAgICAgaWYgKGhvbGRUaW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjdXJyZW50VGltZSA9IGhvbGRUaW1lO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gUm91bmRpbmcgdGhlIHRpbWUgYmVjYXVzZSBmbG9hdGluZyBwb2ludCBhcml0aG1ldGljIGlzIG5vdCBhbHdheXMgYWNjdXJhdGUsIGUuZy4gMzAwMC4zNjcgLSAxMDAwLjM2NyA9XG4gICAgICAgICAgICAvLyAyMDAwLjAwMDAwMDAwMDAwMDIuIFRoaXMgaXMgYSBwcm9ibGVtIHdoZW4gd2UgYXJlIGNvbXBhcmluZyB0aGUgY3VycmVudFRpbWUgd2l0aCB0aGUgZHVyYXRpb24sIGZvclxuICAgICAgICAgICAgLy8gZXhhbXBsZS5cbiAgICAgICAgICAgIGN1cnJlbnRUaW1lID0gTWF0aC5yb3VuZCh0aW1lc3RhbXAgLSBzdGFydFRpbWUpICogc3BlZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmViYXNlIG9uIGRlbGF5XG4gICAgICAgIGNvbnN0IHRpbWVXaXRob3V0RGVsYXkgPSBjdXJyZW50VGltZSAtIGRlbGF5ICogKHNwZWVkID49IDAgPyAxIDogLTEpO1xuICAgICAgICBjb25zdCBpc0luRGVsYXlQaGFzZSA9IHNwZWVkID49IDAgPyB0aW1lV2l0aG91dERlbGF5IDwgMCA6IHRpbWVXaXRob3V0RGVsYXkgPiB0b3RhbER1cmF0aW9uO1xuICAgICAgICBjdXJyZW50VGltZSA9IE1hdGgubWF4KHRpbWVXaXRob3V0RGVsYXksIDApO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhpcyBhbmltYXRpb24gaGFzIGZpbmlzaGVkLCBzZXQgdGhlIGN1cnJlbnQgdGltZVxuICAgICAgICAgKiB0byB0aGUgdG90YWwgZHVyYXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICBpZiAocGxheVN0YXRlID09PSBcImZpbmlzaGVkXCIgJiYgaG9sZFRpbWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lID0gdG90YWxEdXJhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZWxhcHNlZCA9IGN1cnJlbnRUaW1lO1xuICAgICAgICBsZXQgZnJhbWVHZW5lcmF0b3IgPSBnZW5lcmF0b3I7XG4gICAgICAgIGlmIChyZXBlYXQpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2V0IHRoZSBjdXJyZW50IHByb2dyZXNzICgwLTEpIG9mIHRoZSBhbmltYXRpb24uIElmIHQgaXMgPlxuICAgICAgICAgICAgICogdGhhbiBkdXJhdGlvbiB3ZSdsbCBnZXQgdmFsdWVzIGxpa2UgMi41IChtaWR3YXkgdGhyb3VnaCB0aGVcbiAgICAgICAgICAgICAqIHRoaXJkIGl0ZXJhdGlvbilcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBjdXJyZW50VGltZSAvIHJlc29sdmVkRHVyYXRpb247XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdldCB0aGUgY3VycmVudCBpdGVyYXRpb24gKDAgaW5kZXhlZCkuIEZvciBpbnN0YW5jZSB0aGUgZmxvb3Igb2ZcbiAgICAgICAgICAgICAqIDIuNSBpcyAyLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBsZXQgY3VycmVudEl0ZXJhdGlvbiA9IE1hdGguZmxvb3IocHJvZ3Jlc3MpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBHZXQgdGhlIGN1cnJlbnQgcHJvZ3Jlc3Mgb2YgdGhlIGl0ZXJhdGlvbiBieSB0YWtpbmcgdGhlIHJlbWFpbmRlclxuICAgICAgICAgICAgICogc28gMi41IGlzIDAuNSB0aHJvdWdoIGl0ZXJhdGlvbiAyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGxldCBpdGVyYXRpb25Qcm9ncmVzcyA9IHByb2dyZXNzICUgMS4wO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiBpdGVyYXRpb24gcHJvZ3Jlc3MgaXMgMSB3ZSBjb3VudCB0aGF0IGFzIHRoZSBlbmRcbiAgICAgICAgICAgICAqIG9mIHRoZSBwcmV2aW91cyBpdGVyYXRpb24uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICghaXRlcmF0aW9uUHJvZ3Jlc3MgJiYgcHJvZ3Jlc3MgPj0gMSkge1xuICAgICAgICAgICAgICAgIGl0ZXJhdGlvblByb2dyZXNzID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGl0ZXJhdGlvblByb2dyZXNzID09PSAxICYmIGN1cnJlbnRJdGVyYXRpb24tLTtcbiAgICAgICAgICAgIGN1cnJlbnRJdGVyYXRpb24gPSBNYXRoLm1pbihjdXJyZW50SXRlcmF0aW9uLCByZXBlYXQgKyAxKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmV2ZXJzZSBwcm9ncmVzcyBpZiB3ZSdyZSBub3QgcnVubmluZyBpbiBcIm5vcm1hbFwiIGRpcmVjdGlvblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCBpdGVyYXRpb25Jc09kZCA9IEJvb2xlYW4oY3VycmVudEl0ZXJhdGlvbiAlIDIpO1xuICAgICAgICAgICAgaWYgKGl0ZXJhdGlvbklzT2RkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlcGVhdFR5cGUgPT09IFwicmV2ZXJzZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdGlvblByb2dyZXNzID0gMSAtIGl0ZXJhdGlvblByb2dyZXNzO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVwZWF0RGVsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdGlvblByb2dyZXNzIC09IHJlcGVhdERlbGF5IC8gcmVzb2x2ZWREdXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXBlYXRUeXBlID09PSBcIm1pcnJvclwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lR2VuZXJhdG9yID0gbWlycm9yZWRHZW5lcmF0b3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHAgPSBjbGFtcCgwLCAxLCBpdGVyYXRpb25Qcm9ncmVzcyk7XG4gICAgICAgICAgICBpZiAoY3VycmVudFRpbWUgPiB0b3RhbER1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgcCA9IHJlcGVhdFR5cGUgPT09IFwicmV2ZXJzZVwiICYmIGl0ZXJhdGlvbklzT2RkID8gMSA6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbGFwc2VkID0gcCAqIHJlc29sdmVkRHVyYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHdlJ3JlIGluIG5lZ2F0aXZlIHRpbWUsIHNldCBzdGF0ZSBhcyB0aGUgaW5pdGlhbCBrZXlmcmFtZS5cbiAgICAgICAgICogVGhpcyBwcmV2ZW50cyBkZWxheTogeCwgZHVyYXRpb246IDAgYW5pbWF0aW9ucyBmcm9tIGZpbmlzaGluZ1xuICAgICAgICAgKiBpbnN0YW50bHkuXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBzdGF0ZSA9IGlzSW5EZWxheVBoYXNlXG4gICAgICAgICAgICA/IHsgZG9uZTogZmFsc2UsIHZhbHVlOiBrZXlmcmFtZXMkMVswXSB9XG4gICAgICAgICAgICA6IGZyYW1lR2VuZXJhdG9yLm5leHQoZWxhcHNlZCk7XG4gICAgICAgIGlmIChtYXBOdW1iZXJzVG9LZXlmcmFtZXMpIHtcbiAgICAgICAgICAgIHN0YXRlLnZhbHVlID0gbWFwTnVtYmVyc1RvS2V5ZnJhbWVzKHN0YXRlLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgeyBkb25lIH0gPSBzdGF0ZTtcbiAgICAgICAgaWYgKCFpc0luRGVsYXlQaGFzZSAmJiBjYWxjdWxhdGVkRHVyYXRpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGRvbmUgPSBzcGVlZCA+PSAwID8gY3VycmVudFRpbWUgPj0gdG90YWxEdXJhdGlvbiA6IGN1cnJlbnRUaW1lIDw9IDA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNBbmltYXRpb25GaW5pc2hlZCA9IGhvbGRUaW1lID09PSBudWxsICYmXG4gICAgICAgICAgICAocGxheVN0YXRlID09PSBcImZpbmlzaGVkXCIgfHwgKHBsYXlTdGF0ZSA9PT0gXCJydW5uaW5nXCIgJiYgZG9uZSkpO1xuICAgICAgICBpZiAob25VcGRhdGUpIHtcbiAgICAgICAgICAgIG9uVXBkYXRlKHN0YXRlLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBbmltYXRpb25GaW5pc2hlZCkge1xuICAgICAgICAgICAgZmluaXNoKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH07XG4gICAgY29uc3Qgc3RvcEFuaW1hdGlvbkRyaXZlciA9ICgpID0+IHtcbiAgICAgICAgYW5pbWF0aW9uRHJpdmVyICYmIGFuaW1hdGlvbkRyaXZlci5zdG9wKCk7XG4gICAgICAgIGFuaW1hdGlvbkRyaXZlciA9IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIGNvbnN0IGNhbmNlbCA9ICgpID0+IHtcbiAgICAgICAgcGxheVN0YXRlID0gXCJpZGxlXCI7XG4gICAgICAgIHN0b3BBbmltYXRpb25Ecml2ZXIoKTtcbiAgICAgICAgcmVzb2x2ZUZpbmlzaGVkUHJvbWlzZSgpO1xuICAgICAgICB1cGRhdGVGaW5pc2hlZFByb21pc2UoKTtcbiAgICAgICAgc3RhcnRUaW1lID0gY2FuY2VsVGltZSA9IG51bGw7XG4gICAgfTtcbiAgICBjb25zdCBmaW5pc2ggPSAoKSA9PiB7XG4gICAgICAgIHBsYXlTdGF0ZSA9IFwiZmluaXNoZWRcIjtcbiAgICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKCk7XG4gICAgICAgIHN0b3BBbmltYXRpb25Ecml2ZXIoKTtcbiAgICAgICAgcmVzb2x2ZUZpbmlzaGVkUHJvbWlzZSgpO1xuICAgIH07XG4gICAgY29uc3QgcGxheSA9ICgpID0+IHtcbiAgICAgICAgaWYgKGhhc1N0b3BwZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICghYW5pbWF0aW9uRHJpdmVyKVxuICAgICAgICAgICAgYW5pbWF0aW9uRHJpdmVyID0gZHJpdmVyKHRpY2spO1xuICAgICAgICBjb25zdCBub3cgPSBhbmltYXRpb25Ecml2ZXIubm93KCk7XG4gICAgICAgIG9uUGxheSAmJiBvblBsYXkoKTtcbiAgICAgICAgaWYgKGhvbGRUaW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgICBzdGFydFRpbWUgPSBub3cgLSBob2xkVGltZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghc3RhcnRUaW1lIHx8IHBsYXlTdGF0ZSA9PT0gXCJmaW5pc2hlZFwiKSB7XG4gICAgICAgICAgICBzdGFydFRpbWUgPSBub3c7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBsYXlTdGF0ZSA9PT0gXCJmaW5pc2hlZFwiKSB7XG4gICAgICAgICAgICB1cGRhdGVGaW5pc2hlZFByb21pc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBjYW5jZWxUaW1lID0gc3RhcnRUaW1lO1xuICAgICAgICBob2xkVGltZSA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgcGxheVN0YXRlIHRvIHJ1bm5pbmcgb25seSBhZnRlciB3ZSd2ZSB1c2VkIGl0IGluXG4gICAgICAgICAqIHRoZSBwcmV2aW91cyBsb2dpYy5cbiAgICAgICAgICovXG4gICAgICAgIHBsYXlTdGF0ZSA9IFwicnVubmluZ1wiO1xuICAgICAgICBhbmltYXRpb25Ecml2ZXIuc3RhcnQoKTtcbiAgICB9O1xuICAgIGlmIChhdXRvcGxheSkge1xuICAgICAgICBwbGF5KCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRyb2xzID0ge1xuICAgICAgICB0aGVuKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRGaW5pc2hlZFByb21pc2UudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgdGltZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBtaWxsaXNlY29uZHNUb1NlY29uZHMoY3VycmVudFRpbWUpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgdGltZShuZXdUaW1lKSB7XG4gICAgICAgICAgICBuZXdUaW1lID0gc2Vjb25kc1RvTWlsbGlzZWNvbmRzKG5ld1RpbWUpO1xuICAgICAgICAgICAgY3VycmVudFRpbWUgPSBuZXdUaW1lO1xuICAgICAgICAgICAgaWYgKGhvbGRUaW1lICE9PSBudWxsIHx8ICFhbmltYXRpb25Ecml2ZXIgfHwgc3BlZWQgPT09IDApIHtcbiAgICAgICAgICAgICAgICBob2xkVGltZSA9IG5ld1RpbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGFydFRpbWUgPSBhbmltYXRpb25Ecml2ZXIubm93KCkgLSBuZXdUaW1lIC8gc3BlZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBkdXJhdGlvbigpIHtcbiAgICAgICAgICAgIGNvbnN0IGR1cmF0aW9uID0gZ2VuZXJhdG9yLmNhbGN1bGF0ZWREdXJhdGlvbiA9PT0gbnVsbFxuICAgICAgICAgICAgICAgID8gY2FsY0dlbmVyYXRvckR1cmF0aW9uKGdlbmVyYXRvcilcbiAgICAgICAgICAgICAgICA6IGdlbmVyYXRvci5jYWxjdWxhdGVkRHVyYXRpb247XG4gICAgICAgICAgICByZXR1cm4gbWlsbGlzZWNvbmRzVG9TZWNvbmRzKGR1cmF0aW9uKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IHNwZWVkKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNwZWVkO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgc3BlZWQobmV3U3BlZWQpIHtcbiAgICAgICAgICAgIGlmIChuZXdTcGVlZCA9PT0gc3BlZWQgfHwgIWFuaW1hdGlvbkRyaXZlcilcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBzcGVlZCA9IG5ld1NwZWVkO1xuICAgICAgICAgICAgY29udHJvbHMudGltZSA9IG1pbGxpc2Vjb25kc1RvU2Vjb25kcyhjdXJyZW50VGltZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBzdGF0ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBwbGF5U3RhdGU7XG4gICAgICAgIH0sXG4gICAgICAgIHBsYXksXG4gICAgICAgIHBhdXNlOiAoKSA9PiB7XG4gICAgICAgICAgICBwbGF5U3RhdGUgPSBcInBhdXNlZFwiO1xuICAgICAgICAgICAgaG9sZFRpbWUgPSBjdXJyZW50VGltZTtcbiAgICAgICAgfSxcbiAgICAgICAgc3RvcDogKCkgPT4ge1xuICAgICAgICAgICAgaGFzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAocGxheVN0YXRlID09PSBcImlkbGVcIilcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBwbGF5U3RhdGUgPSBcImlkbGVcIjtcbiAgICAgICAgICAgIG9uU3RvcCAmJiBvblN0b3AoKTtcbiAgICAgICAgICAgIGNhbmNlbCgpO1xuICAgICAgICB9LFxuICAgICAgICBjYW5jZWw6ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChjYW5jZWxUaW1lICE9PSBudWxsKVxuICAgICAgICAgICAgICAgIHRpY2soY2FuY2VsVGltZSk7XG4gICAgICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgfSxcbiAgICAgICAgY29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgICAgIHBsYXlTdGF0ZSA9IFwiZmluaXNoZWRcIjtcbiAgICAgICAgfSxcbiAgICAgICAgc2FtcGxlOiAoZWxhcHNlZCkgPT4ge1xuICAgICAgICAgICAgc3RhcnRUaW1lID0gMDtcbiAgICAgICAgICAgIHJldHVybiB0aWNrKGVsYXBzZWQpO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIGNvbnRyb2xzO1xufVxuXG5leHBvcnQgeyBhbmltYXRlVmFsdWUgfTtcbiIsImltcG9ydCB7IGFuaW1hdGVTdHlsZSB9IGZyb20gJy4vaW5kZXgubWpzJztcbmltcG9ydCB7IGlzV2FhcGlTdXBwb3J0ZWRFYXNpbmcgfSBmcm9tICcuL2Vhc2luZy5tanMnO1xuaW1wb3J0IHsgZ2V0RmluYWxLZXlmcmFtZSB9IGZyb20gJy4vdXRpbHMvZ2V0LWZpbmFsLWtleWZyYW1lLm1qcyc7XG5pbXBvcnQgeyBhbmltYXRlVmFsdWUgfSBmcm9tICcuLi9qcy9pbmRleC5tanMnO1xuaW1wb3J0IHsgbWlsbGlzZWNvbmRzVG9TZWNvbmRzLCBzZWNvbmRzVG9NaWxsaXNlY29uZHMgfSBmcm9tICcuLi8uLi8uLi91dGlscy90aW1lLWNvbnZlcnNpb24ubWpzJztcbmltcG9ydCB7IG1lbW8gfSBmcm9tICcuLi8uLi8uLi91dGlscy9tZW1vLm1qcyc7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvbm9vcC5tanMnO1xuaW1wb3J0IHsgZnJhbWVEYXRhLCBmcmFtZSwgY2FuY2VsRnJhbWUgfSBmcm9tICcuLi8uLi8uLi9mcmFtZWxvb3AvZnJhbWUubWpzJztcblxuY29uc3Qgc3VwcG9ydHNXYWFwaSA9IG1lbW8oKCkgPT4gT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoRWxlbWVudC5wcm90b3R5cGUsIFwiYW5pbWF0ZVwiKSk7XG4vKipcbiAqIEEgbGlzdCBvZiB2YWx1ZXMgdGhhdCBjYW4gYmUgaGFyZHdhcmUtYWNjZWxlcmF0ZWQuXG4gKi9cbmNvbnN0IGFjY2VsZXJhdGVkVmFsdWVzID0gbmV3IFNldChbXG4gICAgXCJvcGFjaXR5XCIsXG4gICAgXCJjbGlwUGF0aFwiLFxuICAgIFwiZmlsdGVyXCIsXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBcImJhY2tncm91bmRDb2xvclwiLFxuXSk7XG4vKipcbiAqIDEwbXMgaXMgY2hvc2VuIGhlcmUgYXMgaXQgc3RyaWtlcyBhIGJhbGFuY2UgYmV0d2VlbiBzbW9vdGhcbiAqIHJlc3VsdHMgKG1vcmUgdGhhbiBvbmUga2V5ZnJhbWUgcGVyIGZyYW1lIGF0IDYwZnBzKSBhbmRcbiAqIGtleWZyYW1lIHF1YW50aXR5LlxuICovXG5jb25zdCBzYW1wbGVEZWx0YSA9IDEwOyAvL21zXG4vKipcbiAqIEltcGxlbWVudCBhIHByYWN0aWNhbCBtYXggZHVyYXRpb24gZm9yIGtleWZyYW1lIGdlbmVyYXRpb25cbiAqIHRvIHByZXZlbnQgaW5maW5pdGUgbG9vcHNcbiAqL1xuY29uc3QgbWF4RHVyYXRpb24gPSAyMDAwMDtcbmNvbnN0IHJlcXVpcmVzUHJlZ2VuZXJhdGVkS2V5ZnJhbWVzID0gKHZhbHVlTmFtZSwgb3B0aW9ucykgPT4gb3B0aW9ucy50eXBlID09PSBcInNwcmluZ1wiIHx8XG4gICAgdmFsdWVOYW1lID09PSBcImJhY2tncm91bmRDb2xvclwiIHx8XG4gICAgIWlzV2FhcGlTdXBwb3J0ZWRFYXNpbmcob3B0aW9ucy5lYXNlKTtcbmZ1bmN0aW9uIGNyZWF0ZUFjY2VsZXJhdGVkQW5pbWF0aW9uKHZhbHVlLCB2YWx1ZU5hbWUsIHsgb25VcGRhdGUsIG9uQ29tcGxldGUsIC4uLm9wdGlvbnMgfSkge1xuICAgIGNvbnN0IGNhbkFjY2VsZXJhdGVBbmltYXRpb24gPSBzdXBwb3J0c1dhYXBpKCkgJiZcbiAgICAgICAgYWNjZWxlcmF0ZWRWYWx1ZXMuaGFzKHZhbHVlTmFtZSkgJiZcbiAgICAgICAgIW9wdGlvbnMucmVwZWF0RGVsYXkgJiZcbiAgICAgICAgb3B0aW9ucy5yZXBlYXRUeXBlICE9PSBcIm1pcnJvclwiICYmXG4gICAgICAgIG9wdGlvbnMuZGFtcGluZyAhPT0gMCAmJlxuICAgICAgICBvcHRpb25zLnR5cGUgIT09IFwiaW5lcnRpYVwiO1xuICAgIGlmICghY2FuQWNjZWxlcmF0ZUFuaW1hdGlvbilcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIC8qKlxuICAgICAqIFRPRE86IFVuaWZ5IHdpdGgganMvaW5kZXhcbiAgICAgKi9cbiAgICBsZXQgaGFzU3RvcHBlZCA9IGZhbHNlO1xuICAgIGxldCByZXNvbHZlRmluaXNoZWRQcm9taXNlO1xuICAgIGxldCBjdXJyZW50RmluaXNoZWRQcm9taXNlO1xuICAgIC8qKlxuICAgICAqIFJlc29sdmUgdGhlIGN1cnJlbnQgUHJvbWlzZSBldmVyeSB0aW1lIHdlIGVudGVyIHRoZVxuICAgICAqIGZpbmlzaGVkIHN0YXRlLiBUaGlzIGlzIFdBQVBJLWNvbXBhdGlibGUgYmVoYXZpb3VyLlxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZUZpbmlzaGVkUHJvbWlzZSA9ICgpID0+IHtcbiAgICAgICAgY3VycmVudEZpbmlzaGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlRmluaXNoZWRQcm9taXNlID0gcmVzb2x2ZTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyBDcmVhdGUgdGhlIGZpcnN0IGZpbmlzaGVkIHByb21pc2VcbiAgICB1cGRhdGVGaW5pc2hlZFByb21pc2UoKTtcbiAgICBsZXQgeyBrZXlmcmFtZXMsIGR1cmF0aW9uID0gMzAwLCBlYXNlLCB0aW1lcyB9ID0gb3B0aW9ucztcbiAgICAvKipcbiAgICAgKiBJZiB0aGlzIGFuaW1hdGlvbiBuZWVkcyBwcmUtZ2VuZXJhdGVkIGtleWZyYW1lcyB0aGVuIGdlbmVyYXRlLlxuICAgICAqL1xuICAgIGlmIChyZXF1aXJlc1ByZWdlbmVyYXRlZEtleWZyYW1lcyh2YWx1ZU5hbWUsIG9wdGlvbnMpKSB7XG4gICAgICAgIGNvbnN0IHNhbXBsZUFuaW1hdGlvbiA9IGFuaW1hdGVWYWx1ZSh7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgcmVwZWF0OiAwLFxuICAgICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgc3RhdGUgPSB7IGRvbmU6IGZhbHNlLCB2YWx1ZToga2V5ZnJhbWVzWzBdIH07XG4gICAgICAgIGNvbnN0IHByZWdlbmVyYXRlZEtleWZyYW1lcyA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogQmFpbCBhZnRlciAyMCBzZWNvbmRzIG9mIHByZS1nZW5lcmF0ZWQga2V5ZnJhbWVzIGFzIGl0J3MgbGlrZWx5XG4gICAgICAgICAqIHdlJ3JlIGhlYWRpbmcgZm9yIGFuIGluZmluaXRlIGxvb3AuXG4gICAgICAgICAqL1xuICAgICAgICBsZXQgdCA9IDA7XG4gICAgICAgIHdoaWxlICghc3RhdGUuZG9uZSAmJiB0IDwgbWF4RHVyYXRpb24pIHtcbiAgICAgICAgICAgIHN0YXRlID0gc2FtcGxlQW5pbWF0aW9uLnNhbXBsZSh0KTtcbiAgICAgICAgICAgIHByZWdlbmVyYXRlZEtleWZyYW1lcy5wdXNoKHN0YXRlLnZhbHVlKTtcbiAgICAgICAgICAgIHQgKz0gc2FtcGxlRGVsdGE7XG4gICAgICAgIH1cbiAgICAgICAgdGltZXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGtleWZyYW1lcyA9IHByZWdlbmVyYXRlZEtleWZyYW1lcztcbiAgICAgICAgZHVyYXRpb24gPSB0IC0gc2FtcGxlRGVsdGE7XG4gICAgICAgIGVhc2UgPSBcImxpbmVhclwiO1xuICAgIH1cbiAgICBjb25zdCBhbmltYXRpb24gPSBhbmltYXRlU3R5bGUodmFsdWUub3duZXIuY3VycmVudCwgdmFsdWVOYW1lLCBrZXlmcmFtZXMsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGN1cnJlbnRseSBub3QgY2FsbGVkIGlmIGVhc2UgaXMgcHJvdmlkZWRcbiAgICAgICAgICogYXMgYSBmdW5jdGlvbiBzbyB0aGUgY2FzdCBpcyBzYWZlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBIb3dldmVyIGl0IHdvdWxkIGJlIHBvc3NpYmxlIGZvciBhIGZ1dHVyZSByZWZpbmVtZW50IHRvIHBvcnRcbiAgICAgICAgICogaW4gZWFzaW5nIHByZWdlbmVyYXRpb24gZnJvbSBNb3Rpb24gT25lIGZvciBicm93c2VycyB0aGF0XG4gICAgICAgICAqIHN1cHBvcnQgdGhlIHVwY29taW5nIGBsaW5lYXIoKWAgZWFzaW5nIGZ1bmN0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgZWFzZTogZWFzZSxcbiAgICAgICAgdGltZXMsXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogV0FBUEkgYW5pbWF0aW9ucyBkb24ndCByZXNvbHZlIHN0YXJ0VGltZSBzeW5jaHJvbm91c2x5LiBCdXQgYSBibG9ja2VkXG4gICAgICogdGhyZWFkIGNvdWxkIGRlbGF5IHRoZSBzdGFydFRpbWUgcmVzb2x1dGlvbiBieSBhIG5vdGljZWFibGUgYW1vdW50LlxuICAgICAqIEZvciBzeW5jaGluZyBoYW5kb2ZmIGFuaW1hdGlvbnMgd2l0aCB0aGUgbmV3IE1vdGlvbiBhbmltYXRpb24gd2Ugd2FudFxuICAgICAqIHRvIGVuc3VyZSBzdGFydFRpbWUgaXMgc3luY2hyb25vdXNseSBzZXQuXG4gICAgICovXG4gICAgaWYgKG9wdGlvbnMuc3luY1N0YXJ0KSB7XG4gICAgICAgIGFuaW1hdGlvbi5zdGFydFRpbWUgPSBmcmFtZURhdGEuaXNQcm9jZXNzaW5nXG4gICAgICAgICAgICA/IGZyYW1lRGF0YS50aW1lc3RhbXBcbiAgICAgICAgICAgIDogZG9jdW1lbnQudGltZWxpbmVcbiAgICAgICAgICAgICAgICA/IGRvY3VtZW50LnRpbWVsaW5lLmN1cnJlbnRUaW1lXG4gICAgICAgICAgICAgICAgOiBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICB9XG4gICAgY29uc3QgY2FuY2VsQW5pbWF0aW9uID0gKCkgPT4gYW5pbWF0aW9uLmNhbmNlbCgpO1xuICAgIGNvbnN0IHNhZmVDYW5jZWwgPSAoKSA9PiB7XG4gICAgICAgIGZyYW1lLnVwZGF0ZShjYW5jZWxBbmltYXRpb24pO1xuICAgICAgICByZXNvbHZlRmluaXNoZWRQcm9taXNlKCk7XG4gICAgICAgIHVwZGF0ZUZpbmlzaGVkUHJvbWlzZSgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUHJlZmVyIHRoZSBgb25maW5pc2hgIHByb3AgYXMgaXQncyBtb3JlIHdpZGVseSBzdXBwb3J0ZWQgdGhhblxuICAgICAqIHRoZSBgZmluaXNoZWRgIHByb21pc2UuXG4gICAgICpcbiAgICAgKiBIZXJlLCB3ZSBzeW5jaHJvbm91c2x5IHNldCB0aGUgcHJvdmlkZWQgTW90aW9uVmFsdWUgdG8gdGhlIGVuZFxuICAgICAqIGtleWZyYW1lLiBJZiB3ZSBkaWRuJ3QsIHdoZW4gdGhlIFdBQVBJIGFuaW1hdGlvbiBpcyBmaW5pc2hlZCBpdCB3b3VsZFxuICAgICAqIGJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudCB3aGljaCB3b3VsZCB0aGVuIHJldmVydCB0byBpdHMgb2xkIHN0eWxlcy5cbiAgICAgKi9cbiAgICBhbmltYXRpb24ub25maW5pc2ggPSAoKSA9PiB7XG4gICAgICAgIHZhbHVlLnNldChnZXRGaW5hbEtleWZyYW1lKGtleWZyYW1lcywgb3B0aW9ucykpO1xuICAgICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUoKTtcbiAgICAgICAgc2FmZUNhbmNlbCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQW5pbWF0aW9uIGludGVycnVwdCBjYWxsYmFjay5cbiAgICAgKi9cbiAgICBjb25zdCBjb250cm9scyA9IHtcbiAgICAgICAgdGhlbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50RmluaXNoZWRQcm9taXNlLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSxcbiAgICAgICAgYXR0YWNoVGltZWxpbmUodGltZWxpbmUpIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbi50aW1lbGluZSA9IHRpbWVsaW5lO1xuICAgICAgICAgICAgYW5pbWF0aW9uLm9uZmluaXNoID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBub29wO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgdGltZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBtaWxsaXNlY29uZHNUb1NlY29uZHMoYW5pbWF0aW9uLmN1cnJlbnRUaW1lIHx8IDApO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgdGltZShuZXdUaW1lKSB7XG4gICAgICAgICAgICBhbmltYXRpb24uY3VycmVudFRpbWUgPSBzZWNvbmRzVG9NaWxsaXNlY29uZHMobmV3VGltZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBzcGVlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiBhbmltYXRpb24ucGxheWJhY2tSYXRlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgc3BlZWQobmV3U3BlZWQpIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbi5wbGF5YmFja1JhdGUgPSBuZXdTcGVlZDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IGR1cmF0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG1pbGxpc2Vjb25kc1RvU2Vjb25kcyhkdXJhdGlvbik7XG4gICAgICAgIH0sXG4gICAgICAgIHBsYXk6ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChoYXNTdG9wcGVkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGFuaW1hdGlvbi5wbGF5KCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbmNlbCBhbnkgcGVuZGluZyBjYW5jZWwgdGFza3NcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY2FuY2VsRnJhbWUoY2FuY2VsQW5pbWF0aW9uKTtcbiAgICAgICAgfSxcbiAgICAgICAgcGF1c2U6ICgpID0+IGFuaW1hdGlvbi5wYXVzZSgpLFxuICAgICAgICBzdG9wOiAoKSA9PiB7XG4gICAgICAgICAgICBoYXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChhbmltYXRpb24ucGxheVN0YXRlID09PSBcImlkbGVcIilcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdBQVBJIGRvZXNuJ3QgbmF0aXZlbHkgaGF2ZSBhbnkgaW50ZXJydXB0aW9uIGNhcGFiaWxpdGllcy5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBSYXRoZXIgdGhhbiByZWFkIGNvbW1pdGVkIHN0eWxlcyBiYWNrIG91dCBvZiB0aGUgRE9NLCB3ZSBjYW5cbiAgICAgICAgICAgICAqIGNyZWF0ZSBhIHJlbmRlcmxlc3MgSlMgYW5pbWF0aW9uIGFuZCBzYW1wbGUgaXQgdHdpY2UgdG8gY2FsY3VsYXRlXG4gICAgICAgICAgICAgKiBpdHMgY3VycmVudCB2YWx1ZSwgXCJwcmV2aW91c1wiIHZhbHVlLCBhbmQgdGhlcmVmb3JlIGFsbG93XG4gICAgICAgICAgICAgKiBNb3Rpb24gdG8gY2FsY3VsYXRlIHZlbG9jaXR5IGZvciBhbnkgc3Vic2VxdWVudCBhbmltYXRpb24uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IHsgY3VycmVudFRpbWUgfSA9IGFuaW1hdGlvbjtcbiAgICAgICAgICAgIGlmIChjdXJyZW50VGltZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNhbXBsZUFuaW1hdGlvbiA9IGFuaW1hdGVWYWx1ZSh7XG4gICAgICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB2YWx1ZS5zZXRXaXRoVmVsb2NpdHkoc2FtcGxlQW5pbWF0aW9uLnNhbXBsZShjdXJyZW50VGltZSAtIHNhbXBsZURlbHRhKS52YWx1ZSwgc2FtcGxlQW5pbWF0aW9uLnNhbXBsZShjdXJyZW50VGltZSkudmFsdWUsIHNhbXBsZURlbHRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNhZmVDYW5jZWwoKTtcbiAgICAgICAgfSxcbiAgICAgICAgY29tcGxldGU6ICgpID0+IGFuaW1hdGlvbi5maW5pc2goKSxcbiAgICAgICAgY2FuY2VsOiBzYWZlQ2FuY2VsLFxuICAgIH07XG4gICAgcmV0dXJuIGNvbnRyb2xzO1xufVxuXG5leHBvcnQgeyBjcmVhdGVBY2NlbGVyYXRlZEFuaW1hdGlvbiB9O1xuIiwiZnVuY3Rpb24gbWVtbyhjYWxsYmFjaykge1xuICAgIGxldCByZXN1bHQ7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2soKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufVxuXG5leHBvcnQgeyBtZW1vIH07XG4iLCJpbXBvcnQgeyB0cmFuc2Zvcm1Qcm9wcyB9IGZyb20gJy4uLy4uL3JlbmRlci9odG1sL3V0aWxzL3RyYW5zZm9ybS5tanMnO1xuXG5jb25zdCB1bmRlckRhbXBlZFNwcmluZyA9IHtcbiAgICB0eXBlOiBcInNwcmluZ1wiLFxuICAgIHN0aWZmbmVzczogNTAwLFxuICAgIGRhbXBpbmc6IDI1LFxuICAgIHJlc3RTcGVlZDogMTAsXG59O1xuY29uc3QgY3JpdGljYWxseURhbXBlZFNwcmluZyA9ICh0YXJnZXQpID0+ICh7XG4gICAgdHlwZTogXCJzcHJpbmdcIixcbiAgICBzdGlmZm5lc3M6IDU1MCxcbiAgICBkYW1waW5nOiB0YXJnZXQgPT09IDAgPyAyICogTWF0aC5zcXJ0KDU1MCkgOiAzMCxcbiAgICByZXN0U3BlZWQ6IDEwLFxufSk7XG5jb25zdCBrZXlmcmFtZXNUcmFuc2l0aW9uID0ge1xuICAgIHR5cGU6IFwia2V5ZnJhbWVzXCIsXG4gICAgZHVyYXRpb246IDAuOCxcbn07XG4vKipcbiAqIERlZmF1bHQgZWFzaW5nIGN1cnZlIGlzIGEgc2xpZ2h0bHkgc2hhbGxvd2VyIHZlcnNpb24gb2ZcbiAqIHRoZSBkZWZhdWx0IGJyb3dzZXIgZWFzaW5nIGN1cnZlLlxuICovXG5jb25zdCBlYXNlID0ge1xuICAgIHR5cGU6IFwia2V5ZnJhbWVzXCIsXG4gICAgZWFzZTogWzAuMjUsIDAuMSwgMC4zNSwgMV0sXG4gICAgZHVyYXRpb246IDAuMyxcbn07XG5jb25zdCBnZXREZWZhdWx0VHJhbnNpdGlvbiA9ICh2YWx1ZUtleSwgeyBrZXlmcmFtZXMgfSkgPT4ge1xuICAgIGlmIChrZXlmcmFtZXMubGVuZ3RoID4gMikge1xuICAgICAgICByZXR1cm4ga2V5ZnJhbWVzVHJhbnNpdGlvbjtcbiAgICB9XG4gICAgZWxzZSBpZiAodHJhbnNmb3JtUHJvcHMuaGFzKHZhbHVlS2V5KSkge1xuICAgICAgICByZXR1cm4gdmFsdWVLZXkuc3RhcnRzV2l0aChcInNjYWxlXCIpXG4gICAgICAgICAgICA/IGNyaXRpY2FsbHlEYW1wZWRTcHJpbmcoa2V5ZnJhbWVzWzFdKVxuICAgICAgICAgICAgOiB1bmRlckRhbXBlZFNwcmluZztcbiAgICB9XG4gICAgcmV0dXJuIGVhc2U7XG59O1xuXG5leHBvcnQgeyBnZXREZWZhdWx0VHJhbnNpdGlvbiB9O1xuIiwiaW1wb3J0IHsgY29tcGxleCB9IGZyb20gJy4uLy4uL3ZhbHVlL3R5cGVzL2NvbXBsZXgvaW5kZXgubWpzJztcblxuLyoqXG4gKiBDaGVjayBpZiBhIHZhbHVlIGlzIGFuaW1hdGFibGUuIEV4YW1wbGVzOlxuICpcbiAqIOKchTogMTAwLCBcIjEwMHB4XCIsIFwiI2ZmZlwiXG4gKiDinYw6IFwiYmxvY2tcIiwgXCJ1cmwoMi5qcGcpXCJcbiAqIEBwYXJhbSB2YWx1ZVxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBpc0FuaW1hdGFibGUgPSAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgIC8vIElmIHRoZSBsaXN0IG9mIGtleXMgdGF0IG1pZ2h0IGJlIG5vbi1hbmltYXRhYmxlIGdyb3dzLCByZXBsYWNlIHdpdGggU2V0XG4gICAgaWYgKGtleSA9PT0gXCJ6SW5kZXhcIilcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIC8vIElmIGl0J3MgYSBudW1iZXIgb3IgYSBrZXlmcmFtZXMgYXJyYXksIHdlIGNhbiBhbmltYXRlIGl0LiBXZSBtaWdodCBhdCBzb21lIHBvaW50XG4gICAgLy8gbmVlZCB0byBkbyBhIGRlZXAgaXNBbmltYXRhYmxlIGNoZWNrIG9mIGtleWZyYW1lcywgb3IgbGV0IFBvcG1vdGlvbiBoYW5kbGUgdGhpcyxcbiAgICAvLyBidXQgZm9yIG5vdyBsZXRzIGxlYXZlIGl0IGxpa2UgdGhpcyBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgfHwgQXJyYXkuaXNBcnJheSh2YWx1ZSkpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgLy8gSXQncyBhbmltYXRhYmxlIGlmIHdlIGhhdmUgYSBzdHJpbmdcbiAgICAgICAgKGNvbXBsZXgudGVzdCh2YWx1ZSkgfHwgdmFsdWUgPT09IFwiMFwiKSAmJiAvLyBBbmQgaXQgY29udGFpbnMgbnVtYmVycyBhbmQvb3IgY29sb3JzXG4gICAgICAgICF2YWx1ZS5zdGFydHNXaXRoKFwidXJsKFwiKSAvLyBVbmxlc3MgaXQgc3RhcnRzIHdpdGggXCJ1cmwoXCJcbiAgICApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbmV4cG9ydCB7IGlzQW5pbWF0YWJsZSB9O1xuIiwiaW1wb3J0IHsgY29tcGxleCB9IGZyb20gJy4vaW5kZXgubWpzJztcbmltcG9ydCB7IGZsb2F0UmVnZXggfSBmcm9tICcuLi91dGlscy5tanMnO1xuXG4vKipcbiAqIFByb3BlcnRpZXMgdGhhdCBzaG91bGQgZGVmYXVsdCB0byAxIG9yIDEwMCVcbiAqL1xuY29uc3QgbWF4RGVmYXVsdHMgPSBuZXcgU2V0KFtcImJyaWdodG5lc3NcIiwgXCJjb250cmFzdFwiLCBcInNhdHVyYXRlXCIsIFwib3BhY2l0eVwiXSk7XG5mdW5jdGlvbiBhcHBseURlZmF1bHRGaWx0ZXIodikge1xuICAgIGNvbnN0IFtuYW1lLCB2YWx1ZV0gPSB2LnNsaWNlKDAsIC0xKS5zcGxpdChcIihcIik7XG4gICAgaWYgKG5hbWUgPT09IFwiZHJvcC1zaGFkb3dcIilcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgY29uc3QgW251bWJlcl0gPSB2YWx1ZS5tYXRjaChmbG9hdFJlZ2V4KSB8fCBbXTtcbiAgICBpZiAoIW51bWJlcilcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgY29uc3QgdW5pdCA9IHZhbHVlLnJlcGxhY2UobnVtYmVyLCBcIlwiKTtcbiAgICBsZXQgZGVmYXVsdFZhbHVlID0gbWF4RGVmYXVsdHMuaGFzKG5hbWUpID8gMSA6IDA7XG4gICAgaWYgKG51bWJlciAhPT0gdmFsdWUpXG4gICAgICAgIGRlZmF1bHRWYWx1ZSAqPSAxMDA7XG4gICAgcmV0dXJuIG5hbWUgKyBcIihcIiArIGRlZmF1bHRWYWx1ZSArIHVuaXQgKyBcIilcIjtcbn1cbmNvbnN0IGZ1bmN0aW9uUmVnZXggPSAvKFthLXotXSopXFwoLio/XFwpL2c7XG5jb25zdCBmaWx0ZXIgPSB7XG4gICAgLi4uY29tcGxleCxcbiAgICBnZXRBbmltYXRhYmxlTm9uZTogKHYpID0+IHtcbiAgICAgICAgY29uc3QgZnVuY3Rpb25zID0gdi5tYXRjaChmdW5jdGlvblJlZ2V4KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9ucyA/IGZ1bmN0aW9ucy5tYXAoYXBwbHlEZWZhdWx0RmlsdGVyKS5qb2luKFwiIFwiKSA6IHY7XG4gICAgfSxcbn07XG5cbmV4cG9ydCB7IGZpbHRlciB9O1xuIiwiaW1wb3J0IHsgY29sb3IgfSBmcm9tICcuLi8uLi8uLi92YWx1ZS90eXBlcy9jb2xvci9pbmRleC5tanMnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAnLi4vLi4vLi4vdmFsdWUvdHlwZXMvY29tcGxleC9maWx0ZXIubWpzJztcbmltcG9ydCB7IG51bWJlclZhbHVlVHlwZXMgfSBmcm9tICcuL251bWJlci5tanMnO1xuXG4vKipcbiAqIEEgbWFwIG9mIGRlZmF1bHQgdmFsdWUgdHlwZXMgZm9yIGNvbW1vbiB2YWx1ZXNcbiAqL1xuY29uc3QgZGVmYXVsdFZhbHVlVHlwZXMgPSB7XG4gICAgLi4ubnVtYmVyVmFsdWVUeXBlcyxcbiAgICAvLyBDb2xvciBwcm9wc1xuICAgIGNvbG9yLFxuICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IsXG4gICAgb3V0bGluZUNvbG9yOiBjb2xvcixcbiAgICBmaWxsOiBjb2xvcixcbiAgICBzdHJva2U6IGNvbG9yLFxuICAgIC8vIEJvcmRlciBwcm9wc1xuICAgIGJvcmRlckNvbG9yOiBjb2xvcixcbiAgICBib3JkZXJUb3BDb2xvcjogY29sb3IsXG4gICAgYm9yZGVyUmlnaHRDb2xvcjogY29sb3IsXG4gICAgYm9yZGVyQm90dG9tQ29sb3I6IGNvbG9yLFxuICAgIGJvcmRlckxlZnRDb2xvcjogY29sb3IsXG4gICAgZmlsdGVyLFxuICAgIFdlYmtpdEZpbHRlcjogZmlsdGVyLFxufTtcbi8qKlxuICogR2V0cyB0aGUgZGVmYXVsdCBWYWx1ZVR5cGUgZm9yIHRoZSBwcm92aWRlZCB2YWx1ZSBrZXlcbiAqL1xuY29uc3QgZ2V0RGVmYXVsdFZhbHVlVHlwZSA9IChrZXkpID0+IGRlZmF1bHRWYWx1ZVR5cGVzW2tleV07XG5cbmV4cG9ydCB7IGRlZmF1bHRWYWx1ZVR5cGVzLCBnZXREZWZhdWx0VmFsdWVUeXBlIH07XG4iLCJpbXBvcnQgeyBjb21wbGV4IH0gZnJvbSAnLi4vLi4vLi4vdmFsdWUvdHlwZXMvY29tcGxleC9pbmRleC5tanMnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAnLi4vLi4vLi4vdmFsdWUvdHlwZXMvY29tcGxleC9maWx0ZXIubWpzJztcbmltcG9ydCB7IGdldERlZmF1bHRWYWx1ZVR5cGUgfSBmcm9tICcuL2RlZmF1bHRzLm1qcyc7XG5cbmZ1bmN0aW9uIGdldEFuaW1hdGFibGVOb25lKGtleSwgdmFsdWUpIHtcbiAgICBsZXQgZGVmYXVsdFZhbHVlVHlwZSA9IGdldERlZmF1bHRWYWx1ZVR5cGUoa2V5KTtcbiAgICBpZiAoZGVmYXVsdFZhbHVlVHlwZSAhPT0gZmlsdGVyKVxuICAgICAgICBkZWZhdWx0VmFsdWVUeXBlID0gY29tcGxleDtcbiAgICAvLyBJZiB2YWx1ZSBpcyBub3QgcmVjb2duaXNlZCBhcyBhbmltYXRhYmxlLCBpZSBcIm5vbmVcIiwgY3JlYXRlIGFuIGFuaW1hdGFibGUgdmVyc2lvbiBvcmlnaW4gYmFzZWQgb24gdGhlIHRhcmdldFxuICAgIHJldHVybiBkZWZhdWx0VmFsdWVUeXBlLmdldEFuaW1hdGFibGVOb25lXG4gICAgICAgID8gZGVmYXVsdFZhbHVlVHlwZS5nZXRBbmltYXRhYmxlTm9uZSh2YWx1ZSlcbiAgICAgICAgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCB7IGdldEFuaW1hdGFibGVOb25lIH07XG4iLCIvKipcbiAqIENoZWNrIGlmIHRoZSB2YWx1ZSBpcyBhIHplcm8gdmFsdWUgc3RyaW5nIGxpa2UgXCIwcHhcIiBvciBcIjAlXCJcbiAqL1xuY29uc3QgaXNaZXJvVmFsdWVTdHJpbmcgPSAodikgPT4gL14wW14uXFxzXSskLy50ZXN0KHYpO1xuXG5leHBvcnQgeyBpc1plcm9WYWx1ZVN0cmluZyB9O1xuIiwiaW1wb3J0IHsgaXNaZXJvVmFsdWVTdHJpbmcgfSBmcm9tICcuLi8uLi91dGlscy9pcy16ZXJvLXZhbHVlLXN0cmluZy5tanMnO1xuXG5mdW5jdGlvbiBpc05vbmUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gMDtcbiAgICB9XG4gICAgZWxzZSBpZiAodmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBcIm5vbmVcIiB8fCB2YWx1ZSA9PT0gXCIwXCIgfHwgaXNaZXJvVmFsdWVTdHJpbmcodmFsdWUpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgaXNOb25lIH07XG4iLCIvKipcbiAqIERlY2lkZSB3aGV0aGVyIGEgdHJhbnNpdGlvbiBpcyBkZWZpbmVkIG9uIGEgZ2l2ZW4gVHJhbnNpdGlvbi5cbiAqIFRoaXMgZmlsdGVycyBvdXQgb3JjaGVzdHJhdGlvbiBvcHRpb25zIGFuZCByZXR1cm5zIHRydWVcbiAqIGlmIGFueSBvcHRpb25zIGFyZSBsZWZ0LlxuICovXG5mdW5jdGlvbiBpc1RyYW5zaXRpb25EZWZpbmVkKHsgd2hlbiwgZGVsYXk6IF9kZWxheSwgZGVsYXlDaGlsZHJlbiwgc3RhZ2dlckNoaWxkcmVuLCBzdGFnZ2VyRGlyZWN0aW9uLCByZXBlYXQsIHJlcGVhdFR5cGUsIHJlcGVhdERlbGF5LCBmcm9tLCBlbGFwc2VkLCAuLi50cmFuc2l0aW9uIH0pIHtcbiAgICByZXR1cm4gISFPYmplY3Qua2V5cyh0cmFuc2l0aW9uKS5sZW5ndGg7XG59XG5mdW5jdGlvbiBnZXRWYWx1ZVRyYW5zaXRpb24odHJhbnNpdGlvbiwga2V5KSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25ba2V5XSB8fCB0cmFuc2l0aW9uW1wiZGVmYXVsdFwiXSB8fCB0cmFuc2l0aW9uO1xufVxuXG5leHBvcnQgeyBnZXRWYWx1ZVRyYW5zaXRpb24sIGlzVHJhbnNpdGlvbkRlZmluZWQgfTtcbiIsImltcG9ydCB7IHdhcm5pbmcgfSBmcm9tICcuLi8uLi91dGlscy9lcnJvcnMubWpzJztcbmltcG9ydCB7IHNlY29uZHNUb01pbGxpc2Vjb25kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3RpbWUtY29udmVyc2lvbi5tanMnO1xuaW1wb3J0IHsgaW5zdGFudEFuaW1hdGlvblN0YXRlIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXNlLWluc3RhbnQtdHJhbnNpdGlvbi1zdGF0ZS5tanMnO1xuaW1wb3J0IHsgY3JlYXRlQWNjZWxlcmF0ZWRBbmltYXRpb24gfSBmcm9tICcuLi9hbmltYXRvcnMvd2FhcGkvY3JlYXRlLWFjY2VsZXJhdGVkLWFuaW1hdGlvbi5tanMnO1xuaW1wb3J0IHsgY3JlYXRlSW5zdGFudEFuaW1hdGlvbiB9IGZyb20gJy4uL2FuaW1hdG9ycy9pbnN0YW50Lm1qcyc7XG5pbXBvcnQgeyBnZXREZWZhdWx0VHJhbnNpdGlvbiB9IGZyb20gJy4uL3V0aWxzL2RlZmF1bHQtdHJhbnNpdGlvbnMubWpzJztcbmltcG9ydCB7IGlzQW5pbWF0YWJsZSB9IGZyb20gJy4uL3V0aWxzL2lzLWFuaW1hdGFibGUubWpzJztcbmltcG9ydCB7IGdldEtleWZyYW1lcyB9IGZyb20gJy4uL3V0aWxzL2tleWZyYW1lcy5tanMnO1xuaW1wb3J0IHsgZ2V0VmFsdWVUcmFuc2l0aW9uLCBpc1RyYW5zaXRpb25EZWZpbmVkIH0gZnJvbSAnLi4vdXRpbHMvdHJhbnNpdGlvbnMubWpzJztcbmltcG9ydCB7IGFuaW1hdGVWYWx1ZSB9IGZyb20gJy4uL2FuaW1hdG9ycy9qcy9pbmRleC5tanMnO1xuXG5jb25zdCBhbmltYXRlTW90aW9uVmFsdWUgPSAodmFsdWVOYW1lLCB2YWx1ZSwgdGFyZ2V0LCB0cmFuc2l0aW9uID0ge30pID0+IHtcbiAgICByZXR1cm4gKG9uQ29tcGxldGUpID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWVUcmFuc2l0aW9uID0gZ2V0VmFsdWVUcmFuc2l0aW9uKHRyYW5zaXRpb24sIHZhbHVlTmFtZSkgfHwge307XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNb3N0IHRyYW5zaXRpb24gdmFsdWVzIGFyZSBjdXJyZW50bHkgY29tcGxldGVseSBvdmVyd3JpdHRlbiBieSB2YWx1ZS1zcGVjaWZpY1xuICAgICAgICAgKiB0cmFuc2l0aW9ucy4gSW4gdGhlIGZ1dHVyZSBpdCdkIGJlIG5pY2VyIHRvIGJsZW5kIHRoZXNlIHRyYW5zaXRpb25zLiBCdXQgZm9yIG5vd1xuICAgICAgICAgKiBkZWxheSBhY3R1YWxseSBkb2VzIGluaGVyaXQgZnJvbSB0aGUgcm9vdCB0cmFuc2l0aW9uIGlmIG5vdCB2YWx1ZS1zcGVjaWZpYy5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IGRlbGF5ID0gdmFsdWVUcmFuc2l0aW9uLmRlbGF5IHx8IHRyYW5zaXRpb24uZGVsYXkgfHwgMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVsYXBzZWQgaXNuJ3QgYSBwdWJsaWMgdHJhbnNpdGlvbiBvcHRpb24gYnV0IGNhbiBiZSBwYXNzZWQgdGhyb3VnaCBmcm9tXG4gICAgICAgICAqIG9wdGltaXplZCBhcHBlYXIgZWZmZWN0cyBpbiBtaWxsaXNlY29uZHMuXG4gICAgICAgICAqL1xuICAgICAgICBsZXQgeyBlbGFwc2VkID0gMCB9ID0gdHJhbnNpdGlvbjtcbiAgICAgICAgZWxhcHNlZCA9IGVsYXBzZWQgLSBzZWNvbmRzVG9NaWxsaXNlY29uZHMoZGVsYXkpO1xuICAgICAgICBjb25zdCBrZXlmcmFtZXMgPSBnZXRLZXlmcmFtZXModmFsdWUsIHZhbHVlTmFtZSwgdGFyZ2V0LCB2YWx1ZVRyYW5zaXRpb24pO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2sgaWYgd2UncmUgYWJsZSB0byBhbmltYXRlIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmQga2V5ZnJhbWVzLFxuICAgICAgICAgKiBhbmQgdGhyb3cgYSB3YXJuaW5nIGlmIHdlJ3JlIGF0dGVtcHRpbmcgdG8gYW5pbWF0ZSBiZXR3ZWVuIG9uZSB0aGF0J3NcbiAgICAgICAgICogYW5pbWF0YWJsZSBhbmQgYW5vdGhlciB0aGF0IGlzbid0LlxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3Qgb3JpZ2luS2V5ZnJhbWUgPSBrZXlmcmFtZXNbMF07XG4gICAgICAgIGNvbnN0IHRhcmdldEtleWZyYW1lID0ga2V5ZnJhbWVzW2tleWZyYW1lcy5sZW5ndGggLSAxXTtcbiAgICAgICAgY29uc3QgaXNPcmlnaW5BbmltYXRhYmxlID0gaXNBbmltYXRhYmxlKHZhbHVlTmFtZSwgb3JpZ2luS2V5ZnJhbWUpO1xuICAgICAgICBjb25zdCBpc1RhcmdldEFuaW1hdGFibGUgPSBpc0FuaW1hdGFibGUodmFsdWVOYW1lLCB0YXJnZXRLZXlmcmFtZSk7XG4gICAgICAgIHdhcm5pbmcoaXNPcmlnaW5BbmltYXRhYmxlID09PSBpc1RhcmdldEFuaW1hdGFibGUsIGBZb3UgYXJlIHRyeWluZyB0byBhbmltYXRlICR7dmFsdWVOYW1lfSBmcm9tIFwiJHtvcmlnaW5LZXlmcmFtZX1cIiB0byBcIiR7dGFyZ2V0S2V5ZnJhbWV9XCIuICR7b3JpZ2luS2V5ZnJhbWV9IGlzIG5vdCBhbiBhbmltYXRhYmxlIHZhbHVlIC0gdG8gZW5hYmxlIHRoaXMgYW5pbWF0aW9uIHNldCAke29yaWdpbktleWZyYW1lfSB0byBhIHZhbHVlIGFuaW1hdGFibGUgdG8gJHt0YXJnZXRLZXlmcmFtZX0gdmlhIHRoZSBcXGBzdHlsZVxcYCBwcm9wZXJ0eS5gKTtcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBrZXlmcmFtZXMsXG4gICAgICAgICAgICB2ZWxvY2l0eTogdmFsdWUuZ2V0VmVsb2NpdHkoKSxcbiAgICAgICAgICAgIGVhc2U6IFwiZWFzZU91dFwiLFxuICAgICAgICAgICAgLi4udmFsdWVUcmFuc2l0aW9uLFxuICAgICAgICAgICAgZGVsYXk6IC1lbGFwc2VkLFxuICAgICAgICAgICAgb25VcGRhdGU6ICh2KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFsdWUuc2V0KHYpO1xuICAgICAgICAgICAgICAgIHZhbHVlVHJhbnNpdGlvbi5vblVwZGF0ZSAmJiB2YWx1ZVRyYW5zaXRpb24ub25VcGRhdGUodik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIG9uQ29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB2YWx1ZVRyYW5zaXRpb24ub25Db21wbGV0ZSAmJiB2YWx1ZVRyYW5zaXRpb24ub25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoZXJlJ3Mgbm8gdHJhbnNpdGlvbiBkZWZpbmVkIGZvciB0aGlzIHZhbHVlLCB3ZSBjYW4gZ2VuZXJhdGVcbiAgICAgICAgICogdW5xaXVlIHRyYW5zaXRpb24gc2V0dGluZ3MgZm9yIHRoaXMgdmFsdWUuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoIWlzVHJhbnNpdGlvbkRlZmluZWQodmFsdWVUcmFuc2l0aW9uKSkge1xuICAgICAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgIC4uLmdldERlZmF1bHRUcmFuc2l0aW9uKHZhbHVlTmFtZSwgb3B0aW9ucyksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCb3RoIFdBQVBJIGFuZCBvdXIgaW50ZXJuYWwgYW5pbWF0aW9uIGZ1bmN0aW9ucyB1c2UgZHVyYXRpb25zXG4gICAgICAgICAqIGFzIGRlZmluZWQgYnkgbWlsbGlzZWNvbmRzLCB3aGlsZSBvdXIgZXh0ZXJuYWwgQVBJIGRlZmluZXMgdGhlbVxuICAgICAgICAgKiBhcyBzZWNvbmRzLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKG9wdGlvbnMuZHVyYXRpb24pIHtcbiAgICAgICAgICAgIG9wdGlvbnMuZHVyYXRpb24gPSBzZWNvbmRzVG9NaWxsaXNlY29uZHMob3B0aW9ucy5kdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMucmVwZWF0RGVsYXkpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucmVwZWF0RGVsYXkgPSBzZWNvbmRzVG9NaWxsaXNlY29uZHMob3B0aW9ucy5yZXBlYXREZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc09yaWdpbkFuaW1hdGFibGUgfHxcbiAgICAgICAgICAgICFpc1RhcmdldEFuaW1hdGFibGUgfHxcbiAgICAgICAgICAgIGluc3RhbnRBbmltYXRpb25TdGF0ZS5jdXJyZW50IHx8XG4gICAgICAgICAgICB2YWx1ZVRyYW5zaXRpb24udHlwZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgd2UgY2FuJ3QgYW5pbWF0ZSB0aGlzIHZhbHVlLCBvciB0aGUgZ2xvYmFsIGluc3RhbnQgYW5pbWF0aW9uIGZsYWcgaXMgc2V0LFxuICAgICAgICAgICAgICogb3IgdGhpcyBpcyBzaW1wbHkgZGVmaW5lZCBhcyBhbiBpbnN0YW50IHRyYW5zaXRpb24sIHJldHVybiBhbiBpbnN0YW50IHRyYW5zaXRpb24uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnN0YW50QW5pbWF0aW9uKGluc3RhbnRBbmltYXRpb25TdGF0ZS5jdXJyZW50XG4gICAgICAgICAgICAgICAgPyB7IC4uLm9wdGlvbnMsIGRlbGF5OiAwIH1cbiAgICAgICAgICAgICAgICA6IG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbmltYXRlIHZpYSBXQUFQSSBpZiBwb3NzaWJsZS5cbiAgICAgICAgICovXG4gICAgICAgIGlmICh2YWx1ZS5vd25lciAmJlxuICAgICAgICAgICAgdmFsdWUub3duZXIuY3VycmVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmXG4gICAgICAgICAgICAhdmFsdWUub3duZXIuZ2V0UHJvcHMoKS5vblVwZGF0ZSkge1xuICAgICAgICAgICAgY29uc3QgYWNjZWxlcmF0ZWRBbmltYXRpb24gPSBjcmVhdGVBY2NlbGVyYXRlZEFuaW1hdGlvbih2YWx1ZSwgdmFsdWVOYW1lLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGlmIChhY2NlbGVyYXRlZEFuaW1hdGlvbilcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjZWxlcmF0ZWRBbmltYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHdlIGRpZG4ndCBjcmVhdGUgYW4gYWNjZWxlcmF0ZWQgYW5pbWF0aW9uLCBjcmVhdGUgYSBKUyBhbmltYXRpb25cbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiBhbmltYXRlVmFsdWUob3B0aW9ucyk7XG4gICAgfTtcbn07XG5cbmV4cG9ydCB7IGFuaW1hdGVNb3Rpb25WYWx1ZSB9O1xuIiwiaW1wb3J0IHsgZ2V0QW5pbWF0YWJsZU5vbmUgfSBmcm9tICcuLi8uLi9yZW5kZXIvZG9tL3ZhbHVlLXR5cGVzL2FuaW1hdGFibGUtbm9uZS5tanMnO1xuaW1wb3J0IHsgaXNBbmltYXRhYmxlIH0gZnJvbSAnLi9pcy1hbmltYXRhYmxlLm1qcyc7XG5pbXBvcnQgeyBpc05vbmUgfSBmcm9tICcuL2lzLW5vbmUubWpzJztcblxuZnVuY3Rpb24gZ2V0S2V5ZnJhbWVzKHZhbHVlLCB2YWx1ZU5hbWUsIHRhcmdldCwgdHJhbnNpdGlvbikge1xuICAgIGNvbnN0IGlzVGFyZ2V0QW5pbWF0YWJsZSA9IGlzQW5pbWF0YWJsZSh2YWx1ZU5hbWUsIHRhcmdldCk7XG4gICAgbGV0IGtleWZyYW1lcztcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpKSB7XG4gICAgICAgIGtleWZyYW1lcyA9IFsuLi50YXJnZXRdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAga2V5ZnJhbWVzID0gW251bGwsIHRhcmdldF07XG4gICAgfVxuICAgIGNvbnN0IGRlZmF1bHRPcmlnaW4gPSB0cmFuc2l0aW9uLmZyb20gIT09IHVuZGVmaW5lZCA/IHRyYW5zaXRpb24uZnJvbSA6IHZhbHVlLmdldCgpO1xuICAgIGxldCBhbmltYXRhYmxlVGVtcGxhdGVWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICBjb25zdCBub25lS2V5ZnJhbWVJbmRleGVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlmcmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpbGwgbnVsbC93aWxkY2FyZCBrZXlmcmFtZXNcbiAgICAgICAgICovXG4gICAgICAgIGlmIChrZXlmcmFtZXNbaV0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIGtleWZyYW1lc1tpXSA9IGkgPT09IDAgPyBkZWZhdWx0T3JpZ2luIDoga2V5ZnJhbWVzW2kgLSAxXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOb25lKGtleWZyYW1lc1tpXSkpIHtcbiAgICAgICAgICAgIG5vbmVLZXlmcmFtZUluZGV4ZXMucHVzaChpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPOiBDbGVhbiB0aGlzIGNvbmRpdGlvbmFsLCBpdCB3b3JrcyBmb3Igbm93XG4gICAgICAgIGlmICh0eXBlb2Yga2V5ZnJhbWVzW2ldID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICBrZXlmcmFtZXNbaV0gIT09IFwibm9uZVwiICYmXG4gICAgICAgICAgICBrZXlmcmFtZXNbaV0gIT09IFwiMFwiKSB7XG4gICAgICAgICAgICBhbmltYXRhYmxlVGVtcGxhdGVWYWx1ZSA9IGtleWZyYW1lc1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNUYXJnZXRBbmltYXRhYmxlICYmXG4gICAgICAgIG5vbmVLZXlmcmFtZUluZGV4ZXMubGVuZ3RoICYmXG4gICAgICAgIGFuaW1hdGFibGVUZW1wbGF0ZVZhbHVlKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9uZUtleWZyYW1lSW5kZXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBub25lS2V5ZnJhbWVJbmRleGVzW2ldO1xuICAgICAgICAgICAga2V5ZnJhbWVzW2luZGV4XSA9IGdldEFuaW1hdGFibGVOb25lKHZhbHVlTmFtZSwgYW5pbWF0YWJsZVRlbXBsYXRlVmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBrZXlmcmFtZXM7XG59XG5cbmV4cG9ydCB7IGdldEtleWZyYW1lcyB9O1xuIiwiaW1wb3J0IHsgYW5pbWF0ZVZhbHVlIH0gZnJvbSAnLi9qcy9pbmRleC5tanMnO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uLy4uL3V0aWxzL25vb3AubWpzJztcblxuZnVuY3Rpb24gY3JlYXRlSW5zdGFudEFuaW1hdGlvbih7IGtleWZyYW1lcywgZGVsYXksIG9uVXBkYXRlLCBvbkNvbXBsZXRlLCB9KSB7XG4gICAgY29uc3Qgc2V0VmFsdWUgPSAoKSA9PiB7XG4gICAgICAgIG9uVXBkYXRlICYmIG9uVXBkYXRlKGtleWZyYW1lc1trZXlmcmFtZXMubGVuZ3RoIC0gMV0pO1xuICAgICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRPRE86IEFzIHRoaXMgQVBJIGdyb3dzIGl0IGNvdWxkIG1ha2Ugc2Vuc2UgdG8gYWx3YXlzIHJldHVyblxuICAgICAgICAgKiBhbmltYXRlVmFsdWUuIFRoaXMgd2lsbCBiZSBhIGJpZ2dlciBwcm9qZWN0IGFzIGFuaW1hdGVWYWx1ZVxuICAgICAgICAgKiBpcyBmcmFtZS1sb2NrZWQgd2hlcmVhcyB0aGlzIGZ1bmN0aW9uIHJlc29sdmVzIGluc3RhbnRseS5cbiAgICAgICAgICogVGhpcyBpcyBhIGJlaGF2aW91cmFsIGNoYW5nZSBhbmQgYWxzbyBoYXMgcmFtaWZpY2F0aW9ucyByZWdhcmRpbmdcbiAgICAgICAgICogYXNzdW1wdGlvbnMgd2l0aGluIHRlc3RzLlxuICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpbWU6IDAsXG4gICAgICAgICAgICBzcGVlZDogMSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAwLFxuICAgICAgICAgICAgcGxheTogKG5vb3ApLFxuICAgICAgICAgICAgcGF1c2U6IChub29wKSxcbiAgICAgICAgICAgIHN0b3A6IChub29wKSxcbiAgICAgICAgICAgIHRoZW46IChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYW5jZWw6IChub29wKSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiAobm9vcCksXG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gZGVsYXlcbiAgICAgICAgPyBhbmltYXRlVmFsdWUoe1xuICAgICAgICAgICAga2V5ZnJhbWVzOiBbMCwgMV0sXG4gICAgICAgICAgICBkdXJhdGlvbjogMCxcbiAgICAgICAgICAgIGRlbGF5LFxuICAgICAgICAgICAgb25Db21wbGV0ZTogc2V0VmFsdWUsXG4gICAgICAgIH0pXG4gICAgICAgIDogc2V0VmFsdWUoKTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlSW5zdGFudEFuaW1hdGlvbiB9O1xuIiwiaW1wb3J0IHsgbWFwRWFzaW5nVG9OYXRpdmVFYXNpbmcgfSBmcm9tICcuL2Vhc2luZy5tanMnO1xuXG5mdW5jdGlvbiBhbmltYXRlU3R5bGUoZWxlbWVudCwgdmFsdWVOYW1lLCBrZXlmcmFtZXMsIHsgZGVsYXkgPSAwLCBkdXJhdGlvbiwgcmVwZWF0ID0gMCwgcmVwZWF0VHlwZSA9IFwibG9vcFwiLCBlYXNlLCB0aW1lcywgfSA9IHt9KSB7XG4gICAgY29uc3Qga2V5ZnJhbWVPcHRpb25zID0geyBbdmFsdWVOYW1lXToga2V5ZnJhbWVzIH07XG4gICAgaWYgKHRpbWVzKVxuICAgICAgICBrZXlmcmFtZU9wdGlvbnMub2Zmc2V0ID0gdGltZXM7XG4gICAgY29uc3QgZWFzaW5nID0gbWFwRWFzaW5nVG9OYXRpdmVFYXNpbmcoZWFzZSk7XG4gICAgLyoqXG4gICAgICogSWYgdGhpcyBpcyBhbiBlYXNpbmcgYXJyYXksIGFwcGx5IHRvIGtleWZyYW1lcywgbm90IGFuaW1hdGlvbiBhcyBhIHdob2xlXG4gICAgICovXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZWFzaW5nKSlcbiAgICAgICAga2V5ZnJhbWVPcHRpb25zLmVhc2luZyA9IGVhc2luZztcbiAgICByZXR1cm4gZWxlbWVudC5hbmltYXRlKGtleWZyYW1lT3B0aW9ucywge1xuICAgICAgICBkZWxheSxcbiAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIGVhc2luZzogIUFycmF5LmlzQXJyYXkoZWFzaW5nKSA/IGVhc2luZyA6IFwibGluZWFyXCIsXG4gICAgICAgIGZpbGw6IFwiYm90aFwiLFxuICAgICAgICBpdGVyYXRpb25zOiByZXBlYXQgKyAxLFxuICAgICAgICBkaXJlY3Rpb246IHJlcGVhdFR5cGUgPT09IFwicmV2ZXJzZVwiID8gXCJhbHRlcm5hdGVcIiA6IFwibm9ybWFsXCIsXG4gICAgfSk7XG59XG5cbmV4cG9ydCB7IGFuaW1hdGVTdHlsZSB9O1xuIiwiZnVuY3Rpb24gZ2V0RmluYWxLZXlmcmFtZShrZXlmcmFtZXMsIHsgcmVwZWF0LCByZXBlYXRUeXBlID0gXCJsb29wXCIgfSkge1xuICAgIGNvbnN0IGluZGV4ID0gcmVwZWF0ICYmIHJlcGVhdFR5cGUgIT09IFwibG9vcFwiICYmIHJlcGVhdCAlIDIgPT09IDFcbiAgICAgICAgPyAwXG4gICAgICAgIDoga2V5ZnJhbWVzLmxlbmd0aCAtIDE7XG4gICAgcmV0dXJuIGtleWZyYW1lc1tpbmRleF07XG59XG5cbmV4cG9ydCB7IGdldEZpbmFsS2V5ZnJhbWUgfTtcbiIsImltcG9ydCB7IGlzTW90aW9uVmFsdWUgfSBmcm9tICcuLi91dGlscy9pcy1tb3Rpb24tdmFsdWUubWpzJztcblxuZnVuY3Rpb24gaXNXaWxsQ2hhbmdlTW90aW9uVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gQm9vbGVhbihpc01vdGlvblZhbHVlKHZhbHVlKSAmJiB2YWx1ZS5hZGQpO1xufVxuXG5leHBvcnQgeyBpc1dpbGxDaGFuZ2VNb3Rpb25WYWx1ZSB9O1xuIiwiLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBhIG51bWVyaWNhbCBzdHJpbmcsIGllIGEgc3RyaW5nIHRoYXQgaXMgcHVyZWx5IGEgbnVtYmVyIGVnIFwiMTAwXCIgb3IgXCItMTAwLjFcIlxuICovXG5jb25zdCBpc051bWVyaWNhbFN0cmluZyA9ICh2KSA9PiAvXlxcLT9cXGQqXFwuP1xcZCskLy50ZXN0KHYpO1xuXG5leHBvcnQgeyBpc051bWVyaWNhbFN0cmluZyB9O1xuIiwiZnVuY3Rpb24gYWRkVW5pcXVlSXRlbShhcnIsIGl0ZW0pIHtcbiAgICBpZiAoYXJyLmluZGV4T2YoaXRlbSkgPT09IC0xKVxuICAgICAgICBhcnIucHVzaChpdGVtKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUl0ZW0oYXJyLCBpdGVtKSB7XG4gICAgY29uc3QgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSlcbiAgICAgICAgYXJyLnNwbGljZShpbmRleCwgMSk7XG59XG4vLyBBZGFwdGVkIGZyb20gYXJyYXktbW92ZVxuZnVuY3Rpb24gbW92ZUl0ZW0oWy4uLmFycl0sIGZyb21JbmRleCwgdG9JbmRleCkge1xuICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBmcm9tSW5kZXggPCAwID8gYXJyLmxlbmd0aCArIGZyb21JbmRleCA6IGZyb21JbmRleDtcbiAgICBpZiAoc3RhcnRJbmRleCA+PSAwICYmIHN0YXJ0SW5kZXggPCBhcnIubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGVuZEluZGV4ID0gdG9JbmRleCA8IDAgPyBhcnIubGVuZ3RoICsgdG9JbmRleCA6IHRvSW5kZXg7XG4gICAgICAgIGNvbnN0IFtpdGVtXSA9IGFyci5zcGxpY2UoZnJvbUluZGV4LCAxKTtcbiAgICAgICAgYXJyLnNwbGljZShlbmRJbmRleCwgMCwgaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG59XG5cbmV4cG9ydCB7IGFkZFVuaXF1ZUl0ZW0sIG1vdmVJdGVtLCByZW1vdmVJdGVtIH07XG4iLCJpbXBvcnQgeyBhZGRVbmlxdWVJdGVtLCByZW1vdmVJdGVtIH0gZnJvbSAnLi9hcnJheS5tanMnO1xuXG5jbGFzcyBTdWJzY3JpcHRpb25NYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gW107XG4gICAgfVxuICAgIGFkZChoYW5kbGVyKSB7XG4gICAgICAgIGFkZFVuaXF1ZUl0ZW0odGhpcy5zdWJzY3JpcHRpb25zLCBoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHJlbW92ZUl0ZW0odGhpcy5zdWJzY3JpcHRpb25zLCBoYW5kbGVyKTtcbiAgICB9XG4gICAgbm90aWZ5KGEsIGIsIGMpIHtcbiAgICAgICAgY29uc3QgbnVtU3Vic2NyaXB0aW9ucyA9IHRoaXMuc3Vic2NyaXB0aW9ucy5sZW5ndGg7XG4gICAgICAgIGlmICghbnVtU3Vic2NyaXB0aW9ucylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKG51bVN1YnNjcmlwdGlvbnMgPT09IDEpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhlcmUncyBvbmx5IGEgc2luZ2xlIGhhbmRsZXIgd2UgY2FuIGp1c3QgY2FsbCBpdCB3aXRob3V0IGludm9raW5nIGEgbG9vcC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zWzBdKGEsIGIsIGMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1TdWJzY3JpcHRpb25zOyBpKyspIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBDaGVjayB3aGV0aGVyIHRoZSBoYW5kbGVyIGV4aXN0cyBiZWZvcmUgZmlyaW5nIGFzIGl0J3MgcG9zc2libGVcbiAgICAgICAgICAgICAgICAgKiB0aGUgc3Vic2NyaXB0aW9ucyB3ZXJlIG1vZGlmaWVkIGR1cmluZyB0aGlzIGxvb3AgcnVubmluZy5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5zdWJzY3JpcHRpb25zW2ldO1xuICAgICAgICAgICAgICAgIGhhbmRsZXIgJiYgaGFuZGxlcihhLCBiLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdWJzY3JpcHRpb25zLmxlbmd0aDtcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5sZW5ndGggPSAwO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgU3Vic2NyaXB0aW9uTWFuYWdlciB9O1xuIiwiaW1wb3J0IHsgU3Vic2NyaXB0aW9uTWFuYWdlciB9IGZyb20gJy4uL3V0aWxzL3N1YnNjcmlwdGlvbi1tYW5hZ2VyLm1qcyc7XG5pbXBvcnQgeyB2ZWxvY2l0eVBlclNlY29uZCB9IGZyb20gJy4uL3V0aWxzL3ZlbG9jaXR5LXBlci1zZWNvbmQubWpzJztcbmltcG9ydCB7IHdhcm5PbmNlIH0gZnJvbSAnLi4vdXRpbHMvd2Fybi1vbmNlLm1qcyc7XG5pbXBvcnQgeyBmcmFtZSwgZnJhbWVEYXRhIH0gZnJvbSAnLi4vZnJhbWVsb29wL2ZyYW1lLm1qcyc7XG5cbmNvbnN0IGlzRmxvYXQgPSAodmFsdWUpID0+IHtcbiAgICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKTtcbn07XG5jb25zdCBjb2xsZWN0TW90aW9uVmFsdWVzID0ge1xuICAgIGN1cnJlbnQ6IHVuZGVmaW5lZCxcbn07XG4vKipcbiAqIGBNb3Rpb25WYWx1ZWAgaXMgdXNlZCB0byB0cmFjayB0aGUgc3RhdGUgYW5kIHZlbG9jaXR5IG9mIG1vdGlvbiB2YWx1ZXMuXG4gKlxuICogQHB1YmxpY1xuICovXG5jbGFzcyBNb3Rpb25WYWx1ZSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGluaXQgLSBUaGUgaW5pdGlhdGluZyB2YWx1ZVxuICAgICAqIEBwYXJhbSBjb25maWcgLSBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9wdGlvbnNcbiAgICAgKlxuICAgICAqIC0gIGB0cmFuc2Zvcm1lcmA6IEEgZnVuY3Rpb24gdG8gdHJhbnNmb3JtIGluY29taW5nIHZhbHVlcyB3aXRoLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaW5pdCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIHdpbGwgYmUgcmVwbGFjZWQgYnkgdGhlIGJ1aWxkIHN0ZXAgd2l0aCB0aGUgbGF0ZXN0IHZlcnNpb24gbnVtYmVyLlxuICAgICAgICAgKiBXaGVuIE1vdGlvblZhbHVlcyBhcmUgcHJvdmlkZWQgdG8gbW90aW9uIGNvbXBvbmVudHMsIHdhcm4gaWYgdmVyc2lvbnMgYXJlIG1peGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52ZXJzaW9uID0gXCIxMC4xNi40XCI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEdXJhdGlvbiwgaW4gbWlsbGlzZWNvbmRzLCBzaW5jZSBsYXN0IHVwZGF0aW5nIGZyYW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudGltZURlbHRhID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRpbWVzdGFtcCBvZiB0aGUgbGFzdCB0aW1lIHRoaXMgYE1vdGlvblZhbHVlYCB3YXMgdXBkYXRlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxhc3RVcGRhdGVkID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyYWNrcyB3aGV0aGVyIHRoaXMgdmFsdWUgY2FuIG91dHB1dCBhIHZlbG9jaXR5LiBDdXJyZW50bHkgdGhpcyBpcyBvbmx5IHRydWVcbiAgICAgICAgICogaWYgdGhlIHZhbHVlIGlzIG51bWVyaWNhbCwgYnV0IHdlIG1pZ2h0IGJlIGFibGUgdG8gd2lkZW4gdGhlIHNjb3BlIGhlcmUgYW5kIHN1cHBvcnRcbiAgICAgICAgICogb3RoZXIgdmFsdWUgdHlwZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jYW5UcmFja1ZlbG9jaXR5ID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBvYmplY3QgY29udGFpbmluZyBhIFN1YnNjcmlwdGlvbk1hbmFnZXIgZm9yIGVhY2ggYWN0aXZlIGV2ZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ldmVudHMgPSB7fTtcbiAgICAgICAgdGhpcy51cGRhdGVBbmROb3RpZnkgPSAodiwgcmVuZGVyID0gdHJ1ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcmV2ID0gdGhpcy5jdXJyZW50O1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gdjtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aW1lc3RhbXBcbiAgICAgICAgICAgIGNvbnN0IHsgZGVsdGEsIHRpbWVzdGFtcCB9ID0gZnJhbWVEYXRhO1xuICAgICAgICAgICAgaWYgKHRoaXMubGFzdFVwZGF0ZWQgIT09IHRpbWVzdGFtcCkge1xuICAgICAgICAgICAgICAgIHRoaXMudGltZURlbHRhID0gZGVsdGE7XG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0VXBkYXRlZCA9IHRpbWVzdGFtcDtcbiAgICAgICAgICAgICAgICBmcmFtZS5wb3N0UmVuZGVyKHRoaXMuc2NoZWR1bGVWZWxvY2l0eUNoZWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB1cGRhdGUgc3Vic2NyaWJlcnNcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgIT09IHRoaXMuY3VycmVudCAmJiB0aGlzLmV2ZW50cy5jaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cy5jaGFuZ2Uubm90aWZ5KHRoaXMuY3VycmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVcGRhdGUgdmVsb2NpdHkgc3Vic2NyaWJlcnNcbiAgICAgICAgICAgIGlmICh0aGlzLmV2ZW50cy52ZWxvY2l0eUNoYW5nZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzLnZlbG9jaXR5Q2hhbmdlLm5vdGlmeSh0aGlzLmdldFZlbG9jaXR5KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXBkYXRlIHJlbmRlciBzdWJzY3JpYmVyc1xuICAgICAgICAgICAgaWYgKHJlbmRlciAmJiB0aGlzLmV2ZW50cy5yZW5kZXJSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudHMucmVuZGVyUmVxdWVzdC5ub3RpZnkodGhpcy5jdXJyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNjaGVkdWxlIGEgdmVsb2NpdHkgY2hlY2sgZm9yIHRoZSBuZXh0IGZyYW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIGlzIGFuIGluc3RhbmNlZCBhbmQgYm91bmQgZnVuY3Rpb24gdG8gcHJldmVudCBnZW5lcmF0aW5nIGEgbmV3XG4gICAgICAgICAqIGZ1bmN0aW9uIG9uY2UgcGVyIGZyYW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2NoZWR1bGVWZWxvY2l0eUNoZWNrID0gKCkgPT4gZnJhbWUucG9zdFJlbmRlcih0aGlzLnZlbG9jaXR5Q2hlY2spO1xuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlcyBgcHJldmAgd2l0aCBgY3VycmVudGAgaWYgdGhlIHZhbHVlIGhhc24ndCBiZWVuIHVwZGF0ZWQgdGhpcyBmcmFtZS5cbiAgICAgICAgICogVGhpcyBlbnN1cmVzIHZlbG9jaXR5IGNhbGN1bGF0aW9ucyByZXR1cm4gYDBgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIGlzIGFuIGluc3RhbmNlZCBhbmQgYm91bmQgZnVuY3Rpb24gdG8gcHJldmVudCBnZW5lcmF0aW5nIGEgbmV3XG4gICAgICAgICAqIGZ1bmN0aW9uIG9uY2UgcGVyIGZyYW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudmVsb2NpdHlDaGVjayA9ICh7IHRpbWVzdGFtcCB9KSA9PiB7XG4gICAgICAgICAgICBpZiAodGltZXN0YW1wICE9PSB0aGlzLmxhc3RVcGRhdGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcmV2ID0gdGhpcy5jdXJyZW50O1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmV2ZW50cy52ZWxvY2l0eUNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cy52ZWxvY2l0eUNoYW5nZS5ub3RpZnkodGhpcy5nZXRWZWxvY2l0eSgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFzQW5pbWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcmV2ID0gdGhpcy5jdXJyZW50ID0gaW5pdDtcbiAgICAgICAgdGhpcy5jYW5UcmFja1ZlbG9jaXR5ID0gaXNGbG9hdCh0aGlzLmN1cnJlbnQpO1xuICAgICAgICB0aGlzLm93bmVyID0gb3B0aW9ucy5vd25lcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBub3RpZmllZCB3aGVuIHRoZSBgTW90aW9uVmFsdWVgIGlzIHVwZGF0ZWQuXG4gICAgICpcbiAgICAgKiBJdCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsIHdpbGwgY2FuY2VsIHRoZSBzdWJzY3JpcHRpb24uXG4gICAgICpcbiAgICAgKiBXaGVuIGNhbGxpbmcgYG9uQ2hhbmdlYCBpbnNpZGUgYSBSZWFjdCBjb21wb25lbnQsIGl0IHNob3VsZCBiZSB3cmFwcGVkIHdpdGggdGhlXG4gICAgICogYHVzZUVmZmVjdGAgaG9vay4gQXMgaXQgcmV0dXJucyBhbiB1bnN1YnNjcmliZSBmdW5jdGlvbiwgdGhpcyBzaG91bGQgYmUgcmV0dXJuZWRcbiAgICAgKiBmcm9tIHRoZSBgdXNlRWZmZWN0YCBmdW5jdGlvbiB0byBlbnN1cmUgeW91IGRvbid0IGFkZCBkdXBsaWNhdGUgc3Vic2NyaWJlcnMuLlxuICAgICAqXG4gICAgICogYGBganN4XG4gICAgICogZXhwb3J0IGNvbnN0IE15Q29tcG9uZW50ID0gKCkgPT4ge1xuICAgICAqICAgY29uc3QgeCA9IHVzZU1vdGlvblZhbHVlKDApXG4gICAgICogICBjb25zdCB5ID0gdXNlTW90aW9uVmFsdWUoMClcbiAgICAgKiAgIGNvbnN0IG9wYWNpdHkgPSB1c2VNb3Rpb25WYWx1ZSgxKVxuICAgICAqXG4gICAgICogICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAqICAgICBmdW5jdGlvbiB1cGRhdGVPcGFjaXR5KCkge1xuICAgICAqICAgICAgIGNvbnN0IG1heFhZID0gTWF0aC5tYXgoeC5nZXQoKSwgeS5nZXQoKSlcbiAgICAgKiAgICAgICBjb25zdCBuZXdPcGFjaXR5ID0gdHJhbnNmb3JtKG1heFhZLCBbMCwgMTAwXSwgWzEsIDBdKVxuICAgICAqICAgICAgIG9wYWNpdHkuc2V0KG5ld09wYWNpdHkpXG4gICAgICogICAgIH1cbiAgICAgKlxuICAgICAqICAgICBjb25zdCB1bnN1YnNjcmliZVggPSB4Lm9uKFwiY2hhbmdlXCIsIHVwZGF0ZU9wYWNpdHkpXG4gICAgICogICAgIGNvbnN0IHVuc3Vic2NyaWJlWSA9IHkub24oXCJjaGFuZ2VcIiwgdXBkYXRlT3BhY2l0eSlcbiAgICAgKlxuICAgICAqICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAqICAgICAgIHVuc3Vic2NyaWJlWCgpXG4gICAgICogICAgICAgdW5zdWJzY3JpYmVZKClcbiAgICAgKiAgICAgfVxuICAgICAqICAgfSwgW10pXG4gICAgICpcbiAgICAgKiAgIHJldHVybiA8bW90aW9uLmRpdiBzdHlsZT17eyB4IH19IC8+XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHN1YnNjcmliZXIgLSBBIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgdGhlIGxhdGVzdCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyBBIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLCB3aWxsIGNhbmNlbCB0aGlzIHN1YnNjcmlwdGlvbi5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgb25DaGFuZ2Uoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIHdhcm5PbmNlKGZhbHNlLCBgdmFsdWUub25DaGFuZ2UoY2FsbGJhY2spIGlzIGRlcHJlY2F0ZWQuIFN3aXRjaCB0byB2YWx1ZS5vbihcImNoYW5nZVwiLCBjYWxsYmFjaykuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMub24oXCJjaGFuZ2VcIiwgc3Vic2NyaXB0aW9uKTtcbiAgICB9XG4gICAgb24oZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIXRoaXMuZXZlbnRzW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0gPSBuZXcgU3Vic2NyaXB0aW9uTWFuYWdlcigpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gdGhpcy5ldmVudHNbZXZlbnROYW1lXS5hZGQoY2FsbGJhY2spO1xuICAgICAgICBpZiAoZXZlbnROYW1lID09PSBcImNoYW5nZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSWYgd2UgaGF2ZSBubyBtb3JlIGNoYW5nZSBsaXN0ZW5lcnMgYnkgdGhlIHN0YXJ0XG4gICAgICAgICAgICAgICAgICogb2YgdGhlIG5leHQgZnJhbWUsIHN0b3AgYWN0aXZlIGFuaW1hdGlvbnMuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgZnJhbWUucmVhZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5ldmVudHMuY2hhbmdlLmdldFNpemUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuc3Vic2NyaWJlO1xuICAgIH1cbiAgICBjbGVhckxpc3RlbmVycygpIHtcbiAgICAgICAgZm9yIChjb25zdCBldmVudE1hbmFnZXJzIGluIHRoaXMuZXZlbnRzKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50c1tldmVudE1hbmFnZXJzXS5jbGVhcigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF0dGFjaGVzIGEgcGFzc2l2ZSBlZmZlY3QgdG8gdGhlIGBNb3Rpb25WYWx1ZWAuXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBhdHRhY2gocGFzc2l2ZUVmZmVjdCwgc3RvcFBhc3NpdmVFZmZlY3QpIHtcbiAgICAgICAgdGhpcy5wYXNzaXZlRWZmZWN0ID0gcGFzc2l2ZUVmZmVjdDtcbiAgICAgICAgdGhpcy5zdG9wUGFzc2l2ZUVmZmVjdCA9IHN0b3BQYXNzaXZlRWZmZWN0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdGF0ZSBvZiB0aGUgYE1vdGlvblZhbHVlYC5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICpcbiAgICAgKiBgYGBqc3hcbiAgICAgKiBjb25zdCB4ID0gdXNlTW90aW9uVmFsdWUoMClcbiAgICAgKiB4LnNldCgxMClcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBsYXRlc3QgLSBMYXRlc3QgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSByZW5kZXIgLSBXaGV0aGVyIHRvIG5vdGlmeSByZW5kZXIgc3Vic2NyaWJlcnMuIERlZmF1bHRzIHRvIGB0cnVlYFxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHNldCh2LCByZW5kZXIgPSB0cnVlKSB7XG4gICAgICAgIGlmICghcmVuZGVyIHx8ICF0aGlzLnBhc3NpdmVFZmZlY3QpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQW5kTm90aWZ5KHYsIHJlbmRlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBhc3NpdmVFZmZlY3QodiwgdGhpcy51cGRhdGVBbmROb3RpZnkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldFdpdGhWZWxvY2l0eShwcmV2LCBjdXJyZW50LCBkZWx0YSkge1xuICAgICAgICB0aGlzLnNldChjdXJyZW50KTtcbiAgICAgICAgdGhpcy5wcmV2ID0gcHJldjtcbiAgICAgICAgdGhpcy50aW1lRGVsdGEgPSBkZWx0YTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBzdGF0ZSBvZiB0aGUgYE1vdGlvblZhbHVlYCwgc3RvcHBpbmcgYW55IGFjdGl2ZSBhbmltYXRpb25zLFxuICAgICAqIGVmZmVjdHMsIGFuZCByZXNldHMgdmVsb2NpdHkgdG8gYDBgLlxuICAgICAqL1xuICAgIGp1bXAodikge1xuICAgICAgICB0aGlzLnVwZGF0ZUFuZE5vdGlmeSh2KTtcbiAgICAgICAgdGhpcy5wcmV2ID0gdjtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIGlmICh0aGlzLnN0b3BQYXNzaXZlRWZmZWN0KVxuICAgICAgICAgICAgdGhpcy5zdG9wUGFzc2l2ZUVmZmVjdCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsYXRlc3Qgc3RhdGUgb2YgYE1vdGlvblZhbHVlYFxuICAgICAqXG4gICAgICogQHJldHVybnMgLSBUaGUgbGF0ZXN0IHN0YXRlIG9mIGBNb3Rpb25WYWx1ZWBcbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBnZXQoKSB7XG4gICAgICAgIGlmIChjb2xsZWN0TW90aW9uVmFsdWVzLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGNvbGxlY3RNb3Rpb25WYWx1ZXMuY3VycmVudC5wdXNoKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBnZXRQcmV2aW91cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJldjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGF0ZXN0IHZlbG9jaXR5IG9mIGBNb3Rpb25WYWx1ZWBcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIC0gVGhlIGxhdGVzdCB2ZWxvY2l0eSBvZiBgTW90aW9uVmFsdWVgLiBSZXR1cm5zIGAwYCBpZiB0aGUgc3RhdGUgaXMgbm9uLW51bWVyaWNhbC5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBnZXRWZWxvY2l0eSgpIHtcbiAgICAgICAgLy8gVGhpcyBjb3VsZCBiZSBpc0Zsb2F0KHRoaXMucHJldikgJiYgaXNGbG9hdCh0aGlzLmN1cnJlbnQpLCBidXQgdGhhdCB3b3VsZCBiZSB3YXN0ZWZ1bFxuICAgICAgICByZXR1cm4gdGhpcy5jYW5UcmFja1ZlbG9jaXR5XG4gICAgICAgICAgICA/IC8vIFRoZXNlIGNhc3RzIGNvdWxkIGJlIGF2b2lkZWQgaWYgcGFyc2VGbG9hdCB3b3VsZCBiZSB0eXBlZCBiZXR0ZXJcbiAgICAgICAgICAgICAgICB2ZWxvY2l0eVBlclNlY29uZChwYXJzZUZsb2F0KHRoaXMuY3VycmVudCkgLVxuICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KHRoaXMucHJldiksIHRoaXMudGltZURlbHRhKVxuICAgICAgICAgICAgOiAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgYSBuZXcgYW5pbWF0aW9uIHRvIGNvbnRyb2wgdGhpcyBgTW90aW9uVmFsdWVgLiBPbmx5IG9uZVxuICAgICAqIGFuaW1hdGlvbiBjYW4gZHJpdmUgYSBgTW90aW9uVmFsdWVgIGF0IG9uZSB0aW1lLlxuICAgICAqXG4gICAgICogYGBganN4XG4gICAgICogdmFsdWUuc3RhcnQoKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGFuaW1hdGlvbiAtIEEgZnVuY3Rpb24gdGhhdCBzdGFydHMgdGhlIHByb3ZpZGVkIGFuaW1hdGlvblxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgc3RhcnQoc3RhcnRBbmltYXRpb24pIHtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5oYXNBbmltYXRlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbiA9IHN0YXJ0QW5pbWF0aW9uKHJlc29sdmUpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZXZlbnRzLmFuaW1hdGlvblN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudHMuYW5pbWF0aW9uU3RhcnQubm90aWZ5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuZXZlbnRzLmFuaW1hdGlvbkNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudHMuYW5pbWF0aW9uQ29tcGxldGUubm90aWZ5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNsZWFyQW5pbWF0aW9uKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdG9wIHRoZSBjdXJyZW50bHkgYWN0aXZlIGFuaW1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzdG9wKCkge1xuICAgICAgICBpZiAodGhpcy5hbmltYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uLnN0b3AoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmV2ZW50cy5hbmltYXRpb25DYW5jZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cy5hbmltYXRpb25DYW5jZWwubm90aWZ5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbGVhckFuaW1hdGlvbigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIHZhbHVlIGlzIGN1cnJlbnRseSBhbmltYXRpbmcuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgaXNBbmltYXRpbmcoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuYW5pbWF0aW9uO1xuICAgIH1cbiAgICBjbGVhckFuaW1hdGlvbigpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuYW5pbWF0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXN0cm95IGFuZCBjbGVhbiB1cCBzdWJzY3JpYmVycyB0byB0aGlzIGBNb3Rpb25WYWx1ZWAuXG4gICAgICpcbiAgICAgKiBUaGUgYE1vdGlvblZhbHVlYCBob29rcyBsaWtlIGB1c2VNb3Rpb25WYWx1ZWAgYW5kIGB1c2VUcmFuc2Zvcm1gIGF1dG9tYXRpY2FsbHlcbiAgICAgKiBoYW5kbGUgdGhlIGxpZmVjeWNsZSBvZiB0aGUgcmV0dXJuZWQgYE1vdGlvblZhbHVlYCwgc28gdGhpcyBtZXRob2QgaXMgb25seSBuZWNlc3NhcnkgaWYgeW91J3ZlIG1hbnVhbGx5XG4gICAgICogY3JlYXRlZCBhIGBNb3Rpb25WYWx1ZWAgdmlhIHRoZSBgbW90aW9uVmFsdWVgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuY2xlYXJMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIGlmICh0aGlzLnN0b3BQYXNzaXZlRWZmZWN0KSB7XG4gICAgICAgICAgICB0aGlzLnN0b3BQYXNzaXZlRWZmZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBtb3Rpb25WYWx1ZShpbml0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBNb3Rpb25WYWx1ZShpbml0LCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IHsgTW90aW9uVmFsdWUsIGNvbGxlY3RNb3Rpb25WYWx1ZXMsIG1vdGlvblZhbHVlIH07XG4iLCIvKipcbiAqIFRlc3RzIGEgcHJvdmlkZWQgdmFsdWUgYWdhaW5zdCBhIFZhbHVlVHlwZVxuICovXG5jb25zdCB0ZXN0VmFsdWVUeXBlID0gKHYpID0+ICh0eXBlKSA9PiB0eXBlLnRlc3Qodik7XG5cbmV4cG9ydCB7IHRlc3RWYWx1ZVR5cGUgfTtcbiIsImltcG9ydCB7IG51bWJlciB9IGZyb20gJy4uLy4uLy4uL3ZhbHVlL3R5cGVzL251bWJlcnMvaW5kZXgubWpzJztcbmltcG9ydCB7IHB4LCBwZXJjZW50LCBkZWdyZWVzLCB2dywgdmggfSBmcm9tICcuLi8uLi8uLi92YWx1ZS90eXBlcy9udW1iZXJzL3VuaXRzLm1qcyc7XG5pbXBvcnQgeyB0ZXN0VmFsdWVUeXBlIH0gZnJvbSAnLi90ZXN0Lm1qcyc7XG5pbXBvcnQgeyBhdXRvIH0gZnJvbSAnLi90eXBlLWF1dG8ubWpzJztcblxuLyoqXG4gKiBBIGxpc3Qgb2YgdmFsdWUgdHlwZXMgY29tbW9ubHkgdXNlZCBmb3IgZGltZW5zaW9uc1xuICovXG5jb25zdCBkaW1lbnNpb25WYWx1ZVR5cGVzID0gW251bWJlciwgcHgsIHBlcmNlbnQsIGRlZ3JlZXMsIHZ3LCB2aCwgYXV0b107XG4vKipcbiAqIFRlc3RzIGEgZGltZW5zaW9uYWwgdmFsdWUgYWdhaW5zdCB0aGUgbGlzdCBvZiBkaW1lbnNpb24gVmFsdWVUeXBlc1xuICovXG5jb25zdCBmaW5kRGltZW5zaW9uVmFsdWVUeXBlID0gKHYpID0+IGRpbWVuc2lvblZhbHVlVHlwZXMuZmluZCh0ZXN0VmFsdWVUeXBlKHYpKTtcblxuZXhwb3J0IHsgZGltZW5zaW9uVmFsdWVUeXBlcywgZmluZERpbWVuc2lvblZhbHVlVHlwZSB9O1xuIiwiLyoqXG4gKiBWYWx1ZVR5cGUgZm9yIFwiYXV0b1wiXG4gKi9cbmNvbnN0IGF1dG8gPSB7XG4gICAgdGVzdDogKHYpID0+IHYgPT09IFwiYXV0b1wiLFxuICAgIHBhcnNlOiAodikgPT4gdixcbn07XG5cbmV4cG9ydCB7IGF1dG8gfTtcbiIsImltcG9ydCB7IGNvbG9yIH0gZnJvbSAnLi4vLi4vLi4vdmFsdWUvdHlwZXMvY29sb3IvaW5kZXgubWpzJztcbmltcG9ydCB7IGNvbXBsZXggfSBmcm9tICcuLi8uLi8uLi92YWx1ZS90eXBlcy9jb21wbGV4L2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBkaW1lbnNpb25WYWx1ZVR5cGVzIH0gZnJvbSAnLi9kaW1lbnNpb25zLm1qcyc7XG5pbXBvcnQgeyB0ZXN0VmFsdWVUeXBlIH0gZnJvbSAnLi90ZXN0Lm1qcyc7XG5cbi8qKlxuICogQSBsaXN0IG9mIGFsbCBWYWx1ZVR5cGVzXG4gKi9cbmNvbnN0IHZhbHVlVHlwZXMgPSBbLi4uZGltZW5zaW9uVmFsdWVUeXBlcywgY29sb3IsIGNvbXBsZXhdO1xuLyoqXG4gKiBUZXN0cyBhIHZhbHVlIGFnYWluc3QgdGhlIGxpc3Qgb2YgVmFsdWVUeXBlc1xuICovXG5jb25zdCBmaW5kVmFsdWVUeXBlID0gKHYpID0+IHZhbHVlVHlwZXMuZmluZCh0ZXN0VmFsdWVUeXBlKHYpKTtcblxuZXhwb3J0IHsgZmluZFZhbHVlVHlwZSB9O1xuIiwiaW1wb3J0IHsgaXNOdW1lcmljYWxTdHJpbmcgfSBmcm9tICcuLi8uLi91dGlscy9pcy1udW1lcmljYWwtc3RyaW5nLm1qcyc7XG5pbXBvcnQgeyBpc1plcm9WYWx1ZVN0cmluZyB9IGZyb20gJy4uLy4uL3V0aWxzL2lzLXplcm8tdmFsdWUtc3RyaW5nLm1qcyc7XG5pbXBvcnQgeyByZXNvbHZlRmluYWxWYWx1ZUluS2V5ZnJhbWVzIH0gZnJvbSAnLi4vLi4vdXRpbHMvcmVzb2x2ZS12YWx1ZS5tanMnO1xuaW1wb3J0IHsgbW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi92YWx1ZS9pbmRleC5tanMnO1xuaW1wb3J0IHsgY29tcGxleCB9IGZyb20gJy4uLy4uL3ZhbHVlL3R5cGVzL2NvbXBsZXgvaW5kZXgubWpzJztcbmltcG9ydCB7IGdldEFuaW1hdGFibGVOb25lIH0gZnJvbSAnLi4vZG9tL3ZhbHVlLXR5cGVzL2FuaW1hdGFibGUtbm9uZS5tanMnO1xuaW1wb3J0IHsgZmluZFZhbHVlVHlwZSB9IGZyb20gJy4uL2RvbS92YWx1ZS10eXBlcy9maW5kLm1qcyc7XG5pbXBvcnQgeyByZXNvbHZlVmFyaWFudCB9IGZyb20gJy4vcmVzb2x2ZS1keW5hbWljLXZhcmlhbnRzLm1qcyc7XG5cbi8qKlxuICogU2V0IFZpc3VhbEVsZW1lbnQncyBNb3Rpb25WYWx1ZSwgY3JlYXRpbmcgYSBuZXcgTW90aW9uVmFsdWUgZm9yIGl0IGlmXG4gKiBpdCBkb2Vzbid0IGV4aXN0LlxuICovXG5mdW5jdGlvbiBzZXRNb3Rpb25WYWx1ZSh2aXN1YWxFbGVtZW50LCBrZXksIHZhbHVlKSB7XG4gICAgaWYgKHZpc3VhbEVsZW1lbnQuaGFzVmFsdWUoa2V5KSkge1xuICAgICAgICB2aXN1YWxFbGVtZW50LmdldFZhbHVlKGtleSkuc2V0KHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZpc3VhbEVsZW1lbnQuYWRkVmFsdWUoa2V5LCBtb3Rpb25WYWx1ZSh2YWx1ZSkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldFRhcmdldCh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uKSB7XG4gICAgY29uc3QgcmVzb2x2ZWQgPSByZXNvbHZlVmFyaWFudCh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uKTtcbiAgICBsZXQgeyB0cmFuc2l0aW9uRW5kID0ge30sIHRyYW5zaXRpb24gPSB7fSwgLi4udGFyZ2V0IH0gPSByZXNvbHZlZCA/IHZpc3VhbEVsZW1lbnQubWFrZVRhcmdldEFuaW1hdGFibGUocmVzb2x2ZWQsIGZhbHNlKSA6IHt9O1xuICAgIHRhcmdldCA9IHsgLi4udGFyZ2V0LCAuLi50cmFuc2l0aW9uRW5kIH07XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcmVzb2x2ZUZpbmFsVmFsdWVJbktleWZyYW1lcyh0YXJnZXRba2V5XSk7XG4gICAgICAgIHNldE1vdGlvblZhbHVlKHZpc3VhbEVsZW1lbnQsIGtleSwgdmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldFZhcmlhbnRzKHZpc3VhbEVsZW1lbnQsIHZhcmlhbnRMYWJlbHMpIHtcbiAgICBjb25zdCByZXZlcnNlZExhYmVscyA9IFsuLi52YXJpYW50TGFiZWxzXS5yZXZlcnNlKCk7XG4gICAgcmV2ZXJzZWRMYWJlbHMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHZhcmlhbnQgPSB2aXN1YWxFbGVtZW50LmdldFZhcmlhbnQoa2V5KTtcbiAgICAgICAgdmFyaWFudCAmJiBzZXRUYXJnZXQodmlzdWFsRWxlbWVudCwgdmFyaWFudCk7XG4gICAgICAgIGlmICh2aXN1YWxFbGVtZW50LnZhcmlhbnRDaGlsZHJlbikge1xuICAgICAgICAgICAgdmlzdWFsRWxlbWVudC52YXJpYW50Q2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRWYXJpYW50cyhjaGlsZCwgdmFyaWFudExhYmVscyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gc2V0VmFsdWVzKHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShkZWZpbml0aW9uKSkge1xuICAgICAgICByZXR1cm4gc2V0VmFyaWFudHModmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkZWZpbml0aW9uID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBzZXRWYXJpYW50cyh2aXN1YWxFbGVtZW50LCBbZGVmaW5pdGlvbl0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc2V0VGFyZ2V0KHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNoZWNrVGFyZ2V0Rm9yTmV3VmFsdWVzKHZpc3VhbEVsZW1lbnQsIHRhcmdldCwgb3JpZ2luKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCBuZXdWYWx1ZUtleXMgPSBPYmplY3Qua2V5cyh0YXJnZXQpLmZpbHRlcigoa2V5KSA9PiAhdmlzdWFsRWxlbWVudC5oYXNWYWx1ZShrZXkpKTtcbiAgICBjb25zdCBudW1OZXdWYWx1ZXMgPSBuZXdWYWx1ZUtleXMubGVuZ3RoO1xuICAgIGlmICghbnVtTmV3VmFsdWVzKVxuICAgICAgICByZXR1cm47XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1OZXdWYWx1ZXM7IGkrKykge1xuICAgICAgICBjb25zdCBrZXkgPSBuZXdWYWx1ZUtleXNbaV07XG4gICAgICAgIGNvbnN0IHRhcmdldFZhbHVlID0gdGFyZ2V0W2tleV07XG4gICAgICAgIGxldCB2YWx1ZSA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGUgdGFyZ2V0IGlzIGEgc2VyaWVzIG9mIGtleWZyYW1lcywgd2UgY2FuIHVzZSB0aGUgZmlyc3QgdmFsdWVcbiAgICAgICAgICogaW4gdGhlIGFycmF5LiBJZiB0aGlzIGZpcnN0IHZhbHVlIGlzIG51bGwsIHdlJ2xsIHN0aWxsIG5lZWQgdG8gcmVhZCBmcm9tIHRoZSBET00uXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXRWYWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdGFyZ2V0VmFsdWVbMF07XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoZSB0YXJnZXQgaXNuJ3Qga2V5ZnJhbWVzLCBvciB0aGUgZmlyc3Qga2V5ZnJhbWUgd2FzIG51bGwsIHdlIG5lZWQgdG9cbiAgICAgICAgICogZmlyc3QgY2hlY2sgaWYgYW4gb3JpZ2luIHZhbHVlIHdhcyBleHBsaWNpdGx5IGRlZmluZWQgaW4gdGhlIHRyYW5zaXRpb24gYXMgXCJmcm9tXCIsXG4gICAgICAgICAqIGlmIG5vdCByZWFkIHRoZSB2YWx1ZSBmcm9tIHRoZSBET00uIEFzIGFuIGFic29sdXRlIGZhbGxiYWNrLCB0YWtlIHRoZSBkZWZpbmVkIHRhcmdldCB2YWx1ZS5cbiAgICAgICAgICovXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdmFsdWUgPSAoX2IgPSAoX2EgPSBvcmlnaW5ba2V5XSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdmlzdWFsRWxlbWVudC5yZWFkVmFsdWUoa2V5KSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdGFyZ2V0W2tleV07XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHZhbHVlIGlzIHN0aWxsIHVuZGVmaW5lZCBvciBudWxsLCBpZ25vcmUgaXQuIFByZWZlcmFibHkgdGhpcyB3b3VsZCB0aHJvdyxcbiAgICAgICAgICogYnV0IHRoaXMgd2FzIGNhdXNpbmcgaXNzdWVzIGluIEZyYW1lci5cbiAgICAgICAgICovXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgIChpc051bWVyaWNhbFN0cmluZyh2YWx1ZSkgfHwgaXNaZXJvVmFsdWVTdHJpbmcodmFsdWUpKSkge1xuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIG51bWJlciByZWFkIGFzIGEgc3RyaW5nLCBpZSBcIjBcIiBvciBcIjIwMFwiLCBjb252ZXJ0IGl0IHRvIGEgbnVtYmVyXG4gICAgICAgICAgICB2YWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFmaW5kVmFsdWVUeXBlKHZhbHVlKSAmJiBjb21wbGV4LnRlc3QodGFyZ2V0VmFsdWUpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGdldEFuaW1hdGFibGVOb25lKGtleSwgdGFyZ2V0VmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHZpc3VhbEVsZW1lbnQuYWRkVmFsdWUoa2V5LCBtb3Rpb25WYWx1ZSh2YWx1ZSwgeyBvd25lcjogdmlzdWFsRWxlbWVudCB9KSk7XG4gICAgICAgIGlmIChvcmlnaW5ba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvcmlnaW5ba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbClcbiAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQuc2V0QmFzZVRhcmdldChrZXksIHZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRPcmlnaW5Gcm9tVHJhbnNpdGlvbihrZXksIHRyYW5zaXRpb24pIHtcbiAgICBpZiAoIXRyYW5zaXRpb24pXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCB2YWx1ZVRyYW5zaXRpb24gPSB0cmFuc2l0aW9uW2tleV0gfHwgdHJhbnNpdGlvbltcImRlZmF1bHRcIl0gfHwgdHJhbnNpdGlvbjtcbiAgICByZXR1cm4gdmFsdWVUcmFuc2l0aW9uLmZyb207XG59XG5mdW5jdGlvbiBnZXRPcmlnaW4odGFyZ2V0LCB0cmFuc2l0aW9uLCB2aXN1YWxFbGVtZW50KSB7XG4gICAgY29uc3Qgb3JpZ2luID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IHRyYW5zaXRpb25PcmlnaW4gPSBnZXRPcmlnaW5Gcm9tVHJhbnNpdGlvbihrZXksIHRyYW5zaXRpb24pO1xuICAgICAgICBpZiAodHJhbnNpdGlvbk9yaWdpbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvcmlnaW5ba2V5XSA9IHRyYW5zaXRpb25PcmlnaW47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHZpc3VhbEVsZW1lbnQuZ2V0VmFsdWUoa2V5KTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIG9yaWdpbltrZXldID0gdmFsdWUuZ2V0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9yaWdpbjtcbn1cblxuZXhwb3J0IHsgY2hlY2tUYXJnZXRGb3JOZXdWYWx1ZXMsIGdldE9yaWdpbiwgZ2V0T3JpZ2luRnJvbVRyYW5zaXRpb24sIHNldFRhcmdldCwgc2V0VmFsdWVzIH07XG4iLCJpbXBvcnQgeyB0cmFuc2Zvcm1Qcm9wcyB9IGZyb20gJy4uLy4uL3JlbmRlci9odG1sL3V0aWxzL3RyYW5zZm9ybS5tanMnO1xuaW1wb3J0IHsgb3B0aW1pemVkQXBwZWFyRGF0YUF0dHJpYnV0ZSB9IGZyb20gJy4uL29wdGltaXplZC1hcHBlYXIvZGF0YS1pZC5tanMnO1xuaW1wb3J0IHsgYW5pbWF0ZU1vdGlvblZhbHVlIH0gZnJvbSAnLi9tb3Rpb24tdmFsdWUubWpzJztcbmltcG9ydCB7IGlzV2lsbENoYW5nZU1vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vdmFsdWUvdXNlLXdpbGwtY2hhbmdlL2lzLm1qcyc7XG5pbXBvcnQgeyBzZXRUYXJnZXQgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXRpbHMvc2V0dGVycy5tanMnO1xuaW1wb3J0IHsgZnJhbWUgfSBmcm9tICcuLi8uLi9mcmFtZWxvb3AvZnJhbWUubWpzJztcblxuLyoqXG4gKiBEZWNpZGUgd2hldGhlciB3ZSBzaG91bGQgYmxvY2sgdGhpcyBhbmltYXRpb24uIFByZXZpb3VzbHksIHdlIGFjaGlldmVkIHRoaXNcbiAqIGp1c3QgYnkgY2hlY2tpbmcgd2hldGhlciB0aGUga2V5IHdhcyBsaXN0ZWQgaW4gcHJvdGVjdGVkS2V5cywgYnV0IHRoaXNcbiAqIHBvc2VkIHByb2JsZW1zIGlmIGFuIGFuaW1hdGlvbiB3YXMgdHJpZ2dlcmVkIGJ5IGFmdGVyQ2hpbGRyZW4gYW5kIHByb3RlY3RlZEtleXNcbiAqIGhhZCBiZWVuIHNldCB0byB0cnVlIGluIHRoZSBtZWFudGltZS5cbiAqL1xuZnVuY3Rpb24gc2hvdWxkQmxvY2tBbmltYXRpb24oeyBwcm90ZWN0ZWRLZXlzLCBuZWVkc0FuaW1hdGluZyB9LCBrZXkpIHtcbiAgICBjb25zdCBzaG91bGRCbG9jayA9IHByb3RlY3RlZEtleXMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBuZWVkc0FuaW1hdGluZ1trZXldICE9PSB0cnVlO1xuICAgIG5lZWRzQW5pbWF0aW5nW2tleV0gPSBmYWxzZTtcbiAgICByZXR1cm4gc2hvdWxkQmxvY2s7XG59XG5mdW5jdGlvbiBhbmltYXRlVGFyZ2V0KHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24sIHsgZGVsYXkgPSAwLCB0cmFuc2l0aW9uT3ZlcnJpZGUsIHR5cGUgfSA9IHt9KSB7XG4gICAgbGV0IHsgdHJhbnNpdGlvbiA9IHZpc3VhbEVsZW1lbnQuZ2V0RGVmYXVsdFRyYW5zaXRpb24oKSwgdHJhbnNpdGlvbkVuZCwgLi4udGFyZ2V0IH0gPSB2aXN1YWxFbGVtZW50Lm1ha2VUYXJnZXRBbmltYXRhYmxlKGRlZmluaXRpb24pO1xuICAgIGNvbnN0IHdpbGxDaGFuZ2UgPSB2aXN1YWxFbGVtZW50LmdldFZhbHVlKFwid2lsbENoYW5nZVwiKTtcbiAgICBpZiAodHJhbnNpdGlvbk92ZXJyaWRlKVxuICAgICAgICB0cmFuc2l0aW9uID0gdHJhbnNpdGlvbk92ZXJyaWRlO1xuICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBbXTtcbiAgICBjb25zdCBhbmltYXRpb25UeXBlU3RhdGUgPSB0eXBlICYmXG4gICAgICAgIHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUgJiZcbiAgICAgICAgdmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZS5nZXRTdGF0ZSgpW3R5cGVdO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHRhcmdldCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHZpc3VhbEVsZW1lbnQuZ2V0VmFsdWUoa2V5KTtcbiAgICAgICAgY29uc3QgdmFsdWVUYXJnZXQgPSB0YXJnZXRba2V5XTtcbiAgICAgICAgaWYgKCF2YWx1ZSB8fFxuICAgICAgICAgICAgdmFsdWVUYXJnZXQgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgKGFuaW1hdGlvblR5cGVTdGF0ZSAmJlxuICAgICAgICAgICAgICAgIHNob3VsZEJsb2NrQW5pbWF0aW9uKGFuaW1hdGlvblR5cGVTdGF0ZSwga2V5KSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlVHJhbnNpdGlvbiA9IHtcbiAgICAgICAgICAgIGRlbGF5LFxuICAgICAgICAgICAgZWxhcHNlZDogMCxcbiAgICAgICAgICAgIC4uLnRyYW5zaXRpb24sXG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIGEgdmFsdWUgaXMgYmVpbmcgYW5pbWF0ZWQsIGNoZWNrXG4gICAgICAgICAqIHRvIHNlZSBpZiB3ZSdyZSBoYW5kbGluZyBvZmYgZnJvbSBhbiBleGlzdGluZyBhbmltYXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICBpZiAod2luZG93LkhhbmRvZmZBcHBlYXJBbmltYXRpb25zICYmICF2YWx1ZS5oYXNBbmltYXRlZCkge1xuICAgICAgICAgICAgY29uc3QgYXBwZWFySWQgPSB2aXN1YWxFbGVtZW50LmdldFByb3BzKClbb3B0aW1pemVkQXBwZWFyRGF0YUF0dHJpYnV0ZV07XG4gICAgICAgICAgICBpZiAoYXBwZWFySWQpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZVRyYW5zaXRpb24uZWxhcHNlZCA9IHdpbmRvdy5IYW5kb2ZmQXBwZWFyQW5pbWF0aW9ucyhhcHBlYXJJZCwga2V5LCB2YWx1ZSwgZnJhbWUpO1xuICAgICAgICAgICAgICAgIHZhbHVlVHJhbnNpdGlvbi5zeW5jU3RhcnQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhbHVlLnN0YXJ0KGFuaW1hdGVNb3Rpb25WYWx1ZShrZXksIHZhbHVlLCB2YWx1ZVRhcmdldCwgdmlzdWFsRWxlbWVudC5zaG91bGRSZWR1Y2VNb3Rpb24gJiYgdHJhbnNmb3JtUHJvcHMuaGFzKGtleSlcbiAgICAgICAgICAgID8geyB0eXBlOiBmYWxzZSB9XG4gICAgICAgICAgICA6IHZhbHVlVHJhbnNpdGlvbikpO1xuICAgICAgICBjb25zdCBhbmltYXRpb24gPSB2YWx1ZS5hbmltYXRpb247XG4gICAgICAgIGlmIChpc1dpbGxDaGFuZ2VNb3Rpb25WYWx1ZSh3aWxsQ2hhbmdlKSkge1xuICAgICAgICAgICAgd2lsbENoYW5nZS5hZGQoa2V5KTtcbiAgICAgICAgICAgIGFuaW1hdGlvbi50aGVuKCgpID0+IHdpbGxDaGFuZ2UucmVtb3ZlKGtleSkpO1xuICAgICAgICB9XG4gICAgICAgIGFuaW1hdGlvbnMucHVzaChhbmltYXRpb24pO1xuICAgIH1cbiAgICBpZiAodHJhbnNpdGlvbkVuZCkge1xuICAgICAgICBQcm9taXNlLmFsbChhbmltYXRpb25zKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25FbmQgJiYgc2V0VGFyZ2V0KHZpc3VhbEVsZW1lbnQsIHRyYW5zaXRpb25FbmQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFuaW1hdGlvbnM7XG59XG5cbmV4cG9ydCB7IGFuaW1hdGVUYXJnZXQgfTtcbiIsImltcG9ydCB7IHJlc29sdmVWYXJpYW50IH0gZnJvbSAnLi4vLi4vcmVuZGVyL3V0aWxzL3Jlc29sdmUtZHluYW1pYy12YXJpYW50cy5tanMnO1xuaW1wb3J0IHsgYW5pbWF0ZVRhcmdldCB9IGZyb20gJy4vdmlzdWFsLWVsZW1lbnQtdGFyZ2V0Lm1qcyc7XG5cbmZ1bmN0aW9uIGFuaW1hdGVWYXJpYW50KHZpc3VhbEVsZW1lbnQsIHZhcmlhbnQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHJlc29sdmVkID0gcmVzb2x2ZVZhcmlhbnQodmlzdWFsRWxlbWVudCwgdmFyaWFudCwgb3B0aW9ucy5jdXN0b20pO1xuICAgIGxldCB7IHRyYW5zaXRpb24gPSB2aXN1YWxFbGVtZW50LmdldERlZmF1bHRUcmFuc2l0aW9uKCkgfHwge30gfSA9IHJlc29sdmVkIHx8IHt9O1xuICAgIGlmIChvcHRpb25zLnRyYW5zaXRpb25PdmVycmlkZSkge1xuICAgICAgICB0cmFuc2l0aW9uID0gb3B0aW9ucy50cmFuc2l0aW9uT3ZlcnJpZGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIHdlIGhhdmUgYSB2YXJpYW50LCBjcmVhdGUgYSBjYWxsYmFjayB0aGF0IHJ1bnMgaXQgYXMgYW4gYW5pbWF0aW9uLlxuICAgICAqIE90aGVyd2lzZSwgd2UgcmVzb2x2ZSBhIFByb21pc2UgaW1tZWRpYXRlbHkgZm9yIGEgY29tcG9zYWJsZSBuby1vcC5cbiAgICAgKi9cbiAgICBjb25zdCBnZXRBbmltYXRpb24gPSByZXNvbHZlZFxuICAgICAgICA/ICgpID0+IFByb21pc2UuYWxsKGFuaW1hdGVUYXJnZXQodmlzdWFsRWxlbWVudCwgcmVzb2x2ZWQsIG9wdGlvbnMpKVxuICAgICAgICA6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIC8qKlxuICAgICAqIElmIHdlIGhhdmUgY2hpbGRyZW4sIGNyZWF0ZSBhIGNhbGxiYWNrIHRoYXQgcnVucyBhbGwgdGhlaXIgYW5pbWF0aW9ucy5cbiAgICAgKiBPdGhlcndpc2UsIHdlIHJlc29sdmUgYSBQcm9taXNlIGltbWVkaWF0ZWx5IGZvciBhIGNvbXBvc2FibGUgbm8tb3AuXG4gICAgICovXG4gICAgY29uc3QgZ2V0Q2hpbGRBbmltYXRpb25zID0gdmlzdWFsRWxlbWVudC52YXJpYW50Q2hpbGRyZW4gJiYgdmlzdWFsRWxlbWVudC52YXJpYW50Q2hpbGRyZW4uc2l6ZVxuICAgICAgICA/IChmb3J3YXJkRGVsYXkgPSAwKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGRlbGF5Q2hpbGRyZW4gPSAwLCBzdGFnZ2VyQ2hpbGRyZW4sIHN0YWdnZXJEaXJlY3Rpb24sIH0gPSB0cmFuc2l0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIGFuaW1hdGVDaGlsZHJlbih2aXN1YWxFbGVtZW50LCB2YXJpYW50LCBkZWxheUNoaWxkcmVuICsgZm9yd2FyZERlbGF5LCBzdGFnZ2VyQ2hpbGRyZW4sIHN0YWdnZXJEaXJlY3Rpb24sIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIDogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgLyoqXG4gICAgICogSWYgdGhlIHRyYW5zaXRpb24gZXhwbGljaXRseSBkZWZpbmVzIGEgXCJ3aGVuXCIgb3B0aW9uLCB3ZSBuZWVkIHRvIHJlc29sdmUgZWl0aGVyXG4gICAgICogdGhpcyBhbmltYXRpb24gb3IgYWxsIGNoaWxkcmVuIGFuaW1hdGlvbnMgYmVmb3JlIHBsYXlpbmcgdGhlIG90aGVyLlxuICAgICAqL1xuICAgIGNvbnN0IHsgd2hlbiB9ID0gdHJhbnNpdGlvbjtcbiAgICBpZiAod2hlbikge1xuICAgICAgICBjb25zdCBbZmlyc3QsIGxhc3RdID0gd2hlbiA9PT0gXCJiZWZvcmVDaGlsZHJlblwiXG4gICAgICAgICAgICA/IFtnZXRBbmltYXRpb24sIGdldENoaWxkQW5pbWF0aW9uc11cbiAgICAgICAgICAgIDogW2dldENoaWxkQW5pbWF0aW9ucywgZ2V0QW5pbWF0aW9uXTtcbiAgICAgICAgcmV0dXJuIGZpcnN0KCkudGhlbigoKSA9PiBsYXN0KCkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtnZXRBbmltYXRpb24oKSwgZ2V0Q2hpbGRBbmltYXRpb25zKG9wdGlvbnMuZGVsYXkpXSk7XG4gICAgfVxufVxuZnVuY3Rpb24gYW5pbWF0ZUNoaWxkcmVuKHZpc3VhbEVsZW1lbnQsIHZhcmlhbnQsIGRlbGF5Q2hpbGRyZW4gPSAwLCBzdGFnZ2VyQ2hpbGRyZW4gPSAwLCBzdGFnZ2VyRGlyZWN0aW9uID0gMSwgb3B0aW9ucykge1xuICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBbXTtcbiAgICBjb25zdCBtYXhTdGFnZ2VyRHVyYXRpb24gPSAodmlzdWFsRWxlbWVudC52YXJpYW50Q2hpbGRyZW4uc2l6ZSAtIDEpICogc3RhZ2dlckNoaWxkcmVuO1xuICAgIGNvbnN0IGdlbmVyYXRlU3RhZ2dlckR1cmF0aW9uID0gc3RhZ2dlckRpcmVjdGlvbiA9PT0gMVxuICAgICAgICA/IChpID0gMCkgPT4gaSAqIHN0YWdnZXJDaGlsZHJlblxuICAgICAgICA6IChpID0gMCkgPT4gbWF4U3RhZ2dlckR1cmF0aW9uIC0gaSAqIHN0YWdnZXJDaGlsZHJlbjtcbiAgICBBcnJheS5mcm9tKHZpc3VhbEVsZW1lbnQudmFyaWFudENoaWxkcmVuKVxuICAgICAgICAuc29ydChzb3J0QnlUcmVlT3JkZXIpXG4gICAgICAgIC5mb3JFYWNoKChjaGlsZCwgaSkgPT4ge1xuICAgICAgICBjaGlsZC5ub3RpZnkoXCJBbmltYXRpb25TdGFydFwiLCB2YXJpYW50KTtcbiAgICAgICAgYW5pbWF0aW9ucy5wdXNoKGFuaW1hdGVWYXJpYW50KGNoaWxkLCB2YXJpYW50LCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgZGVsYXk6IGRlbGF5Q2hpbGRyZW4gKyBnZW5lcmF0ZVN0YWdnZXJEdXJhdGlvbihpKSxcbiAgICAgICAgfSkudGhlbigoKSA9PiBjaGlsZC5ub3RpZnkoXCJBbmltYXRpb25Db21wbGV0ZVwiLCB2YXJpYW50KSkpO1xuICAgIH0pO1xuICAgIHJldHVybiBQcm9taXNlLmFsbChhbmltYXRpb25zKTtcbn1cbmZ1bmN0aW9uIHNvcnRCeVRyZWVPcmRlcihhLCBiKSB7XG4gICAgcmV0dXJuIGEuc29ydE5vZGVQb3NpdGlvbihiKTtcbn1cblxuZXhwb3J0IHsgYW5pbWF0ZVZhcmlhbnQsIHNvcnRCeVRyZWVPcmRlciB9O1xuIiwiaW1wb3J0IHsgaXNBbmltYXRpb25Db250cm9scyB9IGZyb20gJy4uLy4uL2FuaW1hdGlvbi91dGlscy9pcy1hbmltYXRpb24tY29udHJvbHMubWpzJztcbmltcG9ydCB7IGlzS2V5ZnJhbWVzVGFyZ2V0IH0gZnJvbSAnLi4vLi4vYW5pbWF0aW9uL3V0aWxzL2lzLWtleWZyYW1lcy10YXJnZXQubWpzJztcbmltcG9ydCB7IHNoYWxsb3dDb21wYXJlIH0gZnJvbSAnLi4vLi4vdXRpbHMvc2hhbGxvdy1jb21wYXJlLm1qcyc7XG5pbXBvcnQgeyBpc1ZhcmlhbnRMYWJlbCB9IGZyb20gJy4vaXMtdmFyaWFudC1sYWJlbC5tanMnO1xuaW1wb3J0IHsgcmVzb2x2ZVZhcmlhbnQgfSBmcm9tICcuL3Jlc29sdmUtZHluYW1pYy12YXJpYW50cy5tanMnO1xuaW1wb3J0IHsgdmFyaWFudFByaW9yaXR5T3JkZXIgfSBmcm9tICcuL3ZhcmlhbnQtcHJvcHMubWpzJztcbmltcG9ydCB7IGFuaW1hdGVWaXN1YWxFbGVtZW50IH0gZnJvbSAnLi4vLi4vYW5pbWF0aW9uL2ludGVyZmFjZXMvdmlzdWFsLWVsZW1lbnQubWpzJztcblxuY29uc3QgcmV2ZXJzZVByaW9yaXR5T3JkZXIgPSBbLi4udmFyaWFudFByaW9yaXR5T3JkZXJdLnJldmVyc2UoKTtcbmNvbnN0IG51bUFuaW1hdGlvblR5cGVzID0gdmFyaWFudFByaW9yaXR5T3JkZXIubGVuZ3RoO1xuZnVuY3Rpb24gYW5pbWF0ZUxpc3QodmlzdWFsRWxlbWVudCkge1xuICAgIHJldHVybiAoYW5pbWF0aW9ucykgPT4gUHJvbWlzZS5hbGwoYW5pbWF0aW9ucy5tYXAoKHsgYW5pbWF0aW9uLCBvcHRpb25zIH0pID0+IGFuaW1hdGVWaXN1YWxFbGVtZW50KHZpc3VhbEVsZW1lbnQsIGFuaW1hdGlvbiwgb3B0aW9ucykpKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUFuaW1hdGlvblN0YXRlKHZpc3VhbEVsZW1lbnQpIHtcbiAgICBsZXQgYW5pbWF0ZSA9IGFuaW1hdGVMaXN0KHZpc3VhbEVsZW1lbnQpO1xuICAgIGNvbnN0IHN0YXRlID0gY3JlYXRlU3RhdGUoKTtcbiAgICBsZXQgaXNJbml0aWFsUmVuZGVyID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgdXNlZCB0byByZWR1Y2UgdGhlIGFuaW1hdGlvbiBkZWZpbml0aW9ucyBmb3JcbiAgICAgKiBlYWNoIGFjdGl2ZSBhbmltYXRpb24gdHlwZSBpbnRvIGFuIG9iamVjdCBvZiByZXNvbHZlZCB2YWx1ZXMgZm9yIGl0LlxuICAgICAqL1xuICAgIGNvbnN0IGJ1aWxkUmVzb2x2ZWRUeXBlVmFsdWVzID0gKGFjYywgZGVmaW5pdGlvbikgPT4ge1xuICAgICAgICBjb25zdCByZXNvbHZlZCA9IHJlc29sdmVWYXJpYW50KHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24pO1xuICAgICAgICBpZiAocmVzb2x2ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgdHJhbnNpdGlvbiwgdHJhbnNpdGlvbkVuZCwgLi4udGFyZ2V0IH0gPSByZXNvbHZlZDtcbiAgICAgICAgICAgIGFjYyA9IHsgLi4uYWNjLCAuLi50YXJnZXQsIC4uLnRyYW5zaXRpb25FbmQgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhpcyBqdXN0IGFsbG93cyB1cyB0byBpbmplY3QgbW9ja2VkIGFuaW1hdGlvbiBmdW5jdGlvbnNcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRBbmltYXRlRnVuY3Rpb24obWFrZUFuaW1hdG9yKSB7XG4gICAgICAgIGFuaW1hdGUgPSBtYWtlQW5pbWF0b3IodmlzdWFsRWxlbWVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZW4gd2UgcmVjZWl2ZSBuZXcgcHJvcHMsIHdlIG5lZWQgdG86XG4gICAgICogMS4gQ3JlYXRlIGEgbGlzdCBvZiBwcm90ZWN0ZWQga2V5cyBmb3IgZWFjaCB0eXBlLiBUaGlzIGlzIGEgZGlyZWN0b3J5IG9mXG4gICAgICogICAgdmFsdWUga2V5cyB0aGF0IGFyZSBjdXJyZW50bHkgYmVpbmcgXCJoYW5kbGVkXCIgYnkgdHlwZXMgb2YgYSBoaWdoZXIgcHJpb3JpdHlcbiAgICAgKiAgICBzbyB0aGF0IHdoZW5ldmVyIGFuIGFuaW1hdGlvbiBpcyBwbGF5ZWQgb2YgYSBnaXZlbiB0eXBlLCB0aGVzZSB2YWx1ZXMgYXJlXG4gICAgICogICAgcHJvdGVjdGVkIGZyb20gYmVpbmcgYW5pbWF0ZWQuXG4gICAgICogMi4gRGV0ZXJtaW5lIGlmIGFuIGFuaW1hdGlvbiB0eXBlIG5lZWRzIGFuaW1hdGluZy5cbiAgICAgKiAzLiBEZXRlcm1pbmUgaWYgYW55IHZhbHVlcyBoYXZlIGJlZW4gcmVtb3ZlZCBmcm9tIGEgdHlwZSBhbmQgZmlndXJlIG91dFxuICAgICAqICAgIHdoYXQgdG8gYW5pbWF0ZSB0aG9zZSB0by5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhbmltYXRlQ2hhbmdlcyhvcHRpb25zLCBjaGFuZ2VkQWN0aXZlVHlwZSkge1xuICAgICAgICBjb25zdCBwcm9wcyA9IHZpc3VhbEVsZW1lbnQuZ2V0UHJvcHMoKTtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHZpc3VhbEVsZW1lbnQuZ2V0VmFyaWFudENvbnRleHQodHJ1ZSkgfHwge307XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGxpc3Qgb2YgYW5pbWF0aW9ucyB0aGF0IHdlJ2xsIGJ1aWxkIGludG8gYXMgd2UgaXRlcmF0ZSB0aHJvdWdoIHRoZSBhbmltYXRpb25cbiAgICAgICAgICogdHlwZXMuIFRoaXMgd2lsbCBnZXQgZXhlY3V0ZWQgYXQgdGhlIGVuZCBvZiB0aGUgZnVuY3Rpb24uXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBhbmltYXRpb25zID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBLZWVwIHRyYWNrIG9mIHdoaWNoIHZhbHVlcyBoYXZlIGJlZW4gcmVtb3ZlZC4gVGhlbiwgYXMgd2UgaGl0IGxvd2VyIHByaW9yaXR5XG4gICAgICAgICAqIGFuaW1hdGlvbiB0eXBlcywgd2UgY2FuIGNoZWNrIGlmIHRoZXkgY29udGFpbiByZW1vdmVkIHZhbHVlcyBhbmQgYW5pbWF0ZSB0byB0aGF0LlxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgcmVtb3ZlZEtleXMgPSBuZXcgU2V0KCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGRpY3Rpb25hcnkgb2YgYWxsIGVuY291bnRlcmVkIGtleXMuIFRoaXMgaXMgYW4gb2JqZWN0IHRvIGxldCB1cyBidWlsZCBpbnRvIGFuZFxuICAgICAgICAgKiBjb3B5IGl0IHdpdGhvdXQgaXRlcmF0aW9uLiBFYWNoIHRpbWUgd2UgaGl0IGFuIGFuaW1hdGlvbiB0eXBlIHdlIHNldCBpdHMgcHJvdGVjdGVkXG4gICAgICAgICAqIGtleXMgLSB0aGUga2V5cyBpdHMgbm90IGFsbG93ZWQgdG8gYW5pbWF0ZSAtIHRvIHRoZSBsYXRlc3QgdmVyc2lvbiBvZiB0aGlzIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIGxldCBlbmNvdW50ZXJlZEtleXMgPSB7fTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGEgdmFyaWFudCBoYXMgYmVlbiByZW1vdmVkIGF0IGEgZ2l2ZW4gaW5kZXgsIGFuZCB0aGlzIGNvbXBvbmVudCBpcyBjb250cm9sbGluZ1xuICAgICAgICAgKiB2YXJpYW50IGFuaW1hdGlvbnMsIHdlIHdhbnQgdG8gZW5zdXJlIGxvd2VyLXByaW9yaXR5IHZhcmlhbnRzIGFyZSBmb3JjZWQgdG8gYW5pbWF0ZS5cbiAgICAgICAgICovXG4gICAgICAgIGxldCByZW1vdmVkVmFyaWFudEluZGV4ID0gSW5maW5pdHk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJdGVyYXRlIHRocm91Z2ggYWxsIGFuaW1hdGlvbiB0eXBlcyBpbiByZXZlcnNlIHByaW9yaXR5IG9yZGVyLiBGb3IgZWFjaCwgd2Ugd2FudCB0b1xuICAgICAgICAgKiBkZXRlY3Qgd2hpY2ggdmFsdWVzIGl0J3MgaGFuZGxpbmcgYW5kIHdoZXRoZXIgb3Igbm90IHRoZXkndmUgY2hhbmdlZCAoYW5kIHRoZXJlZm9yZVxuICAgICAgICAgKiBuZWVkIHRvIGJlIGFuaW1hdGVkKS4gSWYgYW55IHZhbHVlcyBoYXZlIGJlZW4gcmVtb3ZlZCwgd2Ugd2FudCB0byBkZXRlY3QgdGhvc2UgaW5cbiAgICAgICAgICogbG93ZXIgcHJpb3JpdHkgcHJvcHMgYW5kIGZsYWcgZm9yIGFuaW1hdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQW5pbWF0aW9uVHlwZXM7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHJldmVyc2VQcmlvcml0eU9yZGVyW2ldO1xuICAgICAgICAgICAgY29uc3QgdHlwZVN0YXRlID0gc3RhdGVbdHlwZV07XG4gICAgICAgICAgICBjb25zdCBwcm9wID0gcHJvcHNbdHlwZV0gIT09IHVuZGVmaW5lZCA/IHByb3BzW3R5cGVdIDogY29udGV4dFt0eXBlXTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BJc1ZhcmlhbnQgPSBpc1ZhcmlhbnRMYWJlbChwcm9wKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhpcyB0eXBlIGhhcyAqanVzdCogY2hhbmdlZCBpc0FjdGl2ZSBzdGF0dXMsIHNldCBhY3RpdmVEZWx0YVxuICAgICAgICAgICAgICogdG8gdGhhdCBzdGF0dXMuIE90aGVyd2lzZSBzZXQgdG8gbnVsbC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgYWN0aXZlRGVsdGEgPSB0eXBlID09PSBjaGFuZ2VkQWN0aXZlVHlwZSA/IHR5cGVTdGF0ZS5pc0FjdGl2ZSA6IG51bGw7XG4gICAgICAgICAgICBpZiAoYWN0aXZlRGVsdGEgPT09IGZhbHNlKVxuICAgICAgICAgICAgICAgIHJlbW92ZWRWYXJpYW50SW5kZXggPSBpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIHByb3AgaXMgYW4gaW5oZXJpdGVkIHZhcmlhbnQsIHJhdGhlciB0aGFuIGJlZW4gc2V0IGRpcmVjdGx5IG9uIHRoZVxuICAgICAgICAgICAgICogY29tcG9uZW50IGl0c2VsZiwgd2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgYWxsb3cgdGhlIHBhcmVudCB0byB0cmlnZ2VyIGFuaW1hdGlvbnMuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVE9ETzogQ2FuIHByb2JhYmx5IGNoYW5nZSB0aGlzIHRvIGEgIWlzQ29udHJvbGxpbmdWYXJpYW50cyBjaGVja1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBsZXQgaXNJbmhlcml0ZWQgPSBwcm9wID09PSBjb250ZXh0W3R5cGVdICYmIHByb3AgIT09IHByb3BzW3R5cGVdICYmIHByb3BJc1ZhcmlhbnQ7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChpc0luaGVyaXRlZCAmJlxuICAgICAgICAgICAgICAgIGlzSW5pdGlhbFJlbmRlciAmJlxuICAgICAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQubWFudWFsbHlBbmltYXRlT25Nb3VudCkge1xuICAgICAgICAgICAgICAgIGlzSW5oZXJpdGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNldCBhbGwgZW5jb3VudGVyZWQga2V5cyBzbyBmYXIgYXMgdGhlIHByb3RlY3RlZCBrZXlzIGZvciB0aGlzIHR5cGUuIFRoaXMgd2lsbFxuICAgICAgICAgICAgICogYmUgYW55IGtleSB0aGF0IGhhcyBiZWVuIGFuaW1hdGVkIG9yIG90aGVyd2lzZSBoYW5kbGVkIGJ5IGFjdGl2ZSwgaGlnaGVyLXByaW9ydGl5IHR5cGVzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0eXBlU3RhdGUucHJvdGVjdGVkS2V5cyA9IHsgLi4uZW5jb3VudGVyZWRLZXlzIH07XG4gICAgICAgICAgICAvLyBDaGVjayBpZiB3ZSBjYW4gc2tpcCBhbmFseXNpbmcgdGhpcyBwcm9wIGVhcmx5XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAvLyBJZiBpdCBpc24ndCBhY3RpdmUgYW5kIGhhc24ndCAqanVzdCogYmVlbiBzZXQgYXMgaW5hY3RpdmVcbiAgICAgICAgICAgICghdHlwZVN0YXRlLmlzQWN0aXZlICYmIGFjdGl2ZURlbHRhID09PSBudWxsKSB8fFxuICAgICAgICAgICAgICAgIC8vIElmIHdlIGRpZG4ndCBhbmQgZG9uJ3QgaGF2ZSBhbnkgZGVmaW5lZCBwcm9wIGZvciB0aGlzIGFuaW1hdGlvbiB0eXBlXG4gICAgICAgICAgICAgICAgKCFwcm9wICYmICF0eXBlU3RhdGUucHJldlByb3ApIHx8XG4gICAgICAgICAgICAgICAgLy8gT3IgaWYgdGhlIHByb3AgZG9lc24ndCBkZWZpbmUgYW4gYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgaXNBbmltYXRpb25Db250cm9scyhwcm9wKSB8fFxuICAgICAgICAgICAgICAgIHR5cGVvZiBwcm9wID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBcyB3ZSBnbyBsb29rIHRocm91Z2ggdGhlIHZhbHVlcyBkZWZpbmVkIG9uIHRoaXMgdHlwZSwgaWYgd2UgZGV0ZWN0XG4gICAgICAgICAgICAgKiBhIGNoYW5nZWQgdmFsdWUgb3IgYSB2YWx1ZSB0aGF0IHdhcyByZW1vdmVkIGluIGEgaGlnaGVyIHByaW9yaXR5LCB3ZSBzZXRcbiAgICAgICAgICAgICAqIHRoaXMgdG8gdHJ1ZSBhbmQgYWRkIHRoaXMgcHJvcCB0byB0aGUgYW5pbWF0aW9uIGxpc3QuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IHZhcmlhbnREaWRDaGFuZ2UgPSBjaGVja1ZhcmlhbnRzRGlkQ2hhbmdlKHR5cGVTdGF0ZS5wcmV2UHJvcCwgcHJvcCk7XG4gICAgICAgICAgICBsZXQgc2hvdWxkQW5pbWF0ZVR5cGUgPSB2YXJpYW50RGlkQ2hhbmdlIHx8XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UncmUgbWFraW5nIHRoaXMgdmFyaWFudCBhY3RpdmUsIHdlIHdhbnQgdG8gYWx3YXlzIG1ha2UgaXQgYWN0aXZlXG4gICAgICAgICAgICAgICAgKHR5cGUgPT09IGNoYW5nZWRBY3RpdmVUeXBlICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVTdGF0ZS5pc0FjdGl2ZSAmJlxuICAgICAgICAgICAgICAgICAgICAhaXNJbmhlcml0ZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgcHJvcElzVmFyaWFudCkgfHxcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSByZW1vdmVkIGEgaGlnaGVyLXByaW9yaXR5IHZhcmlhbnQgKGkgaXMgaW4gcmV2ZXJzZSBvcmRlcilcbiAgICAgICAgICAgICAgICAoaSA+IHJlbW92ZWRWYXJpYW50SW5kZXggJiYgcHJvcElzVmFyaWFudCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFzIGFuaW1hdGlvbnMgY2FuIGJlIHNldCBhcyB2YXJpYW50IGxpc3RzLCB2YXJpYW50cyBvciB0YXJnZXQgb2JqZWN0cywgd2VcbiAgICAgICAgICAgICAqIGNvZXJjZSBldmVyeXRoaW5nIHRvIGFuIGFycmF5IGlmIGl0IGlzbid0IG9uZSBhbHJlYWR5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IGRlZmluaXRpb25MaXN0ID0gQXJyYXkuaXNBcnJheShwcm9wKSA/IHByb3AgOiBbcHJvcF07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEJ1aWxkIGFuIG9iamVjdCBvZiBhbGwgdGhlIHJlc29sdmVkIHZhbHVlcy4gV2UnbGwgdXNlIHRoaXMgaW4gdGhlIHN1YnNlcXVlbnRcbiAgICAgICAgICAgICAqIGFuaW1hdGVDaGFuZ2VzIGNhbGxzIHRvIGRldGVybWluZSB3aGV0aGVyIGEgdmFsdWUgaGFzIGNoYW5nZWQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGxldCByZXNvbHZlZFZhbHVlcyA9IGRlZmluaXRpb25MaXN0LnJlZHVjZShidWlsZFJlc29sdmVkVHlwZVZhbHVlcywge30pO1xuICAgICAgICAgICAgaWYgKGFjdGl2ZURlbHRhID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICByZXNvbHZlZFZhbHVlcyA9IHt9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBOb3cgd2UgbmVlZCB0byBsb29wIHRocm91Z2ggYWxsIHRoZSBrZXlzIGluIHRoZSBwcmV2IHByb3AgYW5kIHRoaXMgcHJvcCxcbiAgICAgICAgICAgICAqIGFuZCBkZWNpZGU6XG4gICAgICAgICAgICAgKiAxLiBJZiB0aGUgdmFsdWUgaGFzIGNoYW5nZWQsIGFuZCBuZWVkcyBhbmltYXRpbmdcbiAgICAgICAgICAgICAqIDIuIElmIGl0IGhhcyBiZWVuIHJlbW92ZWQsIGFuZCBuZWVkcyBhZGRpbmcgdG8gdGhlIHJlbW92ZWRLZXlzIHNldFxuICAgICAgICAgICAgICogMy4gSWYgaXQgaGFzIGJlZW4gcmVtb3ZlZCBpbiBhIGhpZ2hlciBwcmlvcml0eSB0eXBlIGFuZCBuZWVkcyBhbmltYXRpbmdcbiAgICAgICAgICAgICAqIDQuIElmIGl0IGhhc24ndCBiZWVuIHJlbW92ZWQgaW4gYSBoaWdoZXIgcHJpb3JpdHkgYnV0IGhhc24ndCBjaGFuZ2VkLCBhbmRcbiAgICAgICAgICAgICAqICAgIG5lZWRzIGFkZGluZyB0byB0aGUgdHlwZSdzIHByb3RlY3RlZEtleXMgbGlzdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgeyBwcmV2UmVzb2x2ZWRWYWx1ZXMgPSB7fSB9ID0gdHlwZVN0YXRlO1xuICAgICAgICAgICAgY29uc3QgYWxsS2V5cyA9IHtcbiAgICAgICAgICAgICAgICAuLi5wcmV2UmVzb2x2ZWRWYWx1ZXMsXG4gICAgICAgICAgICAgICAgLi4ucmVzb2x2ZWRWYWx1ZXMsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgbWFya1RvQW5pbWF0ZSA9IChrZXkpID0+IHtcbiAgICAgICAgICAgICAgICBzaG91bGRBbmltYXRlVHlwZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmVtb3ZlZEtleXMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICAgICAgdHlwZVN0YXRlLm5lZWRzQW5pbWF0aW5nW2tleV0gPSB0cnVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGFsbEtleXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gcmVzb2x2ZWRWYWx1ZXNba2V5XTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2ID0gcHJldlJlc29sdmVkVmFsdWVzW2tleV07XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBoYW5kbGVkIHRoaXMgd2UgY2FuIGp1c3Qgc2tpcCBhaGVhZFxuICAgICAgICAgICAgICAgIGlmIChlbmNvdW50ZXJlZEtleXMuaGFzT3duUHJvcGVydHkoa2V5KSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSWYgdGhlIHZhbHVlIGhhcyBjaGFuZ2VkLCB3ZSBwcm9iYWJseSB3YW50IHRvIGFuaW1hdGUgaXQuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaWYgKG5leHQgIT09IHByZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIElmIGJvdGggdmFsdWVzIGFyZSBrZXlmcmFtZXMsIHdlIG5lZWQgdG8gc2hhbGxvdyBjb21wYXJlIHRoZW0gdG9cbiAgICAgICAgICAgICAgICAgICAgICogZGV0ZWN0IHdoZXRoZXIgYW55IHZhbHVlIGhhcyBjaGFuZ2VkLiBJZiBpdCBoYXMsIHdlIGFuaW1hdGUgaXQuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNLZXlmcmFtZXNUYXJnZXQobmV4dCkgJiYgaXNLZXlmcmFtZXNUYXJnZXQocHJldikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2hhbGxvd0NvbXBhcmUobmV4dCwgcHJldikgfHwgdmFyaWFudERpZENoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtUb0FuaW1hdGUoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIElmIGl0IGhhc24ndCBjaGFuZ2VkLCB3ZSB3YW50IHRvIGVuc3VyZSBpdCBkb2Vzbid0IGFuaW1hdGUgYnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBhZGRpbmcgaXQgdG8gdGhlIGxpc3Qgb2YgcHJvdGVjdGVkIGtleXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZVN0YXRlLnByb3RlY3RlZEtleXNba2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBuZXh0IGlzIGRlZmluZWQgYW5kIGRvZXNuJ3QgZXF1YWwgcHJldiwgaXQgbmVlZHMgYW5pbWF0aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrVG9BbmltYXRlKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBpdCdzIHVuZGVmaW5lZCwgaXQncyBiZWVuIHJlbW92ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkS2V5cy5hZGQoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChuZXh0ICE9PSB1bmRlZmluZWQgJiYgcmVtb3ZlZEtleXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIElmIG5leHQgaGFzbid0IGNoYW5nZWQgYW5kIGl0IGlzbid0IHVuZGVmaW5lZCwgd2Ugd2FudCB0byBjaGVjayBpZiBpdCdzXG4gICAgICAgICAgICAgICAgICAgICAqIGJlZW4gcmVtb3ZlZCBieSBhIGhpZ2hlciBwcmlvcml0eVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgbWFya1RvQW5pbWF0ZShrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIElmIGl0IGhhc24ndCBjaGFuZ2VkLCB3ZSBhZGQgaXQgdG8gdGhlIGxpc3Qgb2YgcHJvdGVjdGVkIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICAgKiB0byBlbnN1cmUgaXQgZG9lc24ndCBnZXQgYW5pbWF0ZWQuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICB0eXBlU3RhdGUucHJvdGVjdGVkS2V5c1trZXldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVwZGF0ZSB0aGUgdHlwZVN0YXRlIHNvIG5leHQgdGltZSBhbmltYXRlQ2hhbmdlcyBpcyBjYWxsZWQgd2UgY2FuIGNvbXBhcmUgdGhlXG4gICAgICAgICAgICAgKiBsYXRlc3QgcHJvcCBhbmQgcmVzb2x2ZWRWYWx1ZXMgdG8gdGhlc2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHR5cGVTdGF0ZS5wcmV2UHJvcCA9IHByb3A7XG4gICAgICAgICAgICB0eXBlU3RhdGUucHJldlJlc29sdmVkVmFsdWVzID0gcmVzb2x2ZWRWYWx1ZXM7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0eXBlU3RhdGUuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICBlbmNvdW50ZXJlZEtleXMgPSB7IC4uLmVuY291bnRlcmVkS2V5cywgLi4ucmVzb2x2ZWRWYWx1ZXMgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0luaXRpYWxSZW5kZXIgJiYgdmlzdWFsRWxlbWVudC5ibG9ja0luaXRpYWxBbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgICBzaG91bGRBbmltYXRlVHlwZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIGlzIGFuIGluaGVyaXRlZCBwcm9wIHdlIHdhbnQgdG8gaGFyZC1ibG9jayBhbmltYXRpb25zXG4gICAgICAgICAgICAgKiBUT0RPOiBUZXN0IGFzIHRoaXMgc2hvdWxkIHByb2JhYmx5IHN0aWxsIGhhbmRsZSBhbmltYXRpb25zIHRyaWdnZXJlZFxuICAgICAgICAgICAgICogYnkgcmVtb3ZlZCB2YWx1ZXM/XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChzaG91bGRBbmltYXRlVHlwZSAmJiAhaXNJbmhlcml0ZWQpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25zLnB1c2goLi4uZGVmaW5pdGlvbkxpc3QubWFwKChhbmltYXRpb24pID0+ICh7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogYW5pbWF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7IHR5cGUsIC4uLm9wdGlvbnMgfSxcbiAgICAgICAgICAgICAgICB9KSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGVyZSBhcmUgc29tZSByZW1vdmVkIHZhbHVlIHRoYXQgaGF2ZW4ndCBiZWVuIGRlYWx0IHdpdGgsXG4gICAgICAgICAqIHdlIG5lZWQgdG8gY3JlYXRlIGEgbmV3IGFuaW1hdGlvbiB0aGF0IGZhbGxzIGJhY2sgZWl0aGVyIHRvIHRoZSB2YWx1ZVxuICAgICAgICAgKiBkZWZpbmVkIGluIHRoZSBzdHlsZSBwcm9wLCBvciB0aGUgbGFzdCByZWFkIHZhbHVlLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHJlbW92ZWRLZXlzLnNpemUpIHtcbiAgICAgICAgICAgIGNvbnN0IGZhbGxiYWNrQW5pbWF0aW9uID0ge307XG4gICAgICAgICAgICByZW1vdmVkS2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBmYWxsYmFja1RhcmdldCA9IHZpc3VhbEVsZW1lbnQuZ2V0QmFzZVRhcmdldChrZXkpO1xuICAgICAgICAgICAgICAgIGlmIChmYWxsYmFja1RhcmdldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrQW5pbWF0aW9uW2tleV0gPSBmYWxsYmFja1RhcmdldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGFuaW1hdGlvbnMucHVzaCh7IGFuaW1hdGlvbjogZmFsbGJhY2tBbmltYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNob3VsZEFuaW1hdGUgPSBCb29sZWFuKGFuaW1hdGlvbnMubGVuZ3RoKTtcbiAgICAgICAgaWYgKGlzSW5pdGlhbFJlbmRlciAmJlxuICAgICAgICAgICAgcHJvcHMuaW5pdGlhbCA9PT0gZmFsc2UgJiZcbiAgICAgICAgICAgICF2aXN1YWxFbGVtZW50Lm1hbnVhbGx5QW5pbWF0ZU9uTW91bnQpIHtcbiAgICAgICAgICAgIHNob3VsZEFuaW1hdGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpc0luaXRpYWxSZW5kZXIgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHNob3VsZEFuaW1hdGUgPyBhbmltYXRlKGFuaW1hdGlvbnMpIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoYW5nZSB3aGV0aGVyIGEgY2VydGFpbiBhbmltYXRpb24gdHlwZSBpcyBhY3RpdmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0QWN0aXZlKHR5cGUsIGlzQWN0aXZlLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgLy8gSWYgdGhlIGFjdGl2ZSBzdGF0ZSBoYXNuJ3QgY2hhbmdlZCwgd2UgY2FuIHNhZmVseSBkbyBub3RoaW5nIGhlcmVcbiAgICAgICAgaWYgKHN0YXRlW3R5cGVdLmlzQWN0aXZlID09PSBpc0FjdGl2ZSlcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgLy8gUHJvcGFnYXRlIGFjdGl2ZSBjaGFuZ2UgdG8gY2hpbGRyZW5cbiAgICAgICAgKF9hID0gdmlzdWFsRWxlbWVudC52YXJpYW50Q2hpbGRyZW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5mb3JFYWNoKChjaGlsZCkgPT4geyB2YXIgX2E7IHJldHVybiAoX2EgPSBjaGlsZC5hbmltYXRpb25TdGF0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldEFjdGl2ZSh0eXBlLCBpc0FjdGl2ZSk7IH0pO1xuICAgICAgICBzdGF0ZVt0eXBlXS5pc0FjdGl2ZSA9IGlzQWN0aXZlO1xuICAgICAgICBjb25zdCBhbmltYXRpb25zID0gYW5pbWF0ZUNoYW5nZXMob3B0aW9ucywgdHlwZSk7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHN0YXRlKSB7XG4gICAgICAgICAgICBzdGF0ZVtrZXldLnByb3RlY3RlZEtleXMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYW5pbWF0aW9ucztcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYW5pbWF0ZUNoYW5nZXMsXG4gICAgICAgIHNldEFjdGl2ZSxcbiAgICAgICAgc2V0QW5pbWF0ZUZ1bmN0aW9uLFxuICAgICAgICBnZXRTdGF0ZTogKCkgPT4gc3RhdGUsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNoZWNrVmFyaWFudHNEaWRDaGFuZ2UocHJldiwgbmV4dCkge1xuICAgIGlmICh0eXBlb2YgbmV4dCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gbmV4dCAhPT0gcHJldjtcbiAgICB9XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShuZXh0KSkge1xuICAgICAgICByZXR1cm4gIXNoYWxsb3dDb21wYXJlKG5leHQsIHByZXYpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBjcmVhdGVUeXBlU3RhdGUoaXNBY3RpdmUgPSBmYWxzZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGlzQWN0aXZlLFxuICAgICAgICBwcm90ZWN0ZWRLZXlzOiB7fSxcbiAgICAgICAgbmVlZHNBbmltYXRpbmc6IHt9LFxuICAgICAgICBwcmV2UmVzb2x2ZWRWYWx1ZXM6IHt9LFxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhbmltYXRlOiBjcmVhdGVUeXBlU3RhdGUodHJ1ZSksXG4gICAgICAgIHdoaWxlSW5WaWV3OiBjcmVhdGVUeXBlU3RhdGUoKSxcbiAgICAgICAgd2hpbGVIb3ZlcjogY3JlYXRlVHlwZVN0YXRlKCksXG4gICAgICAgIHdoaWxlVGFwOiBjcmVhdGVUeXBlU3RhdGUoKSxcbiAgICAgICAgd2hpbGVEcmFnOiBjcmVhdGVUeXBlU3RhdGUoKSxcbiAgICAgICAgd2hpbGVGb2N1czogY3JlYXRlVHlwZVN0YXRlKCksXG4gICAgICAgIGV4aXQ6IGNyZWF0ZVR5cGVTdGF0ZSgpLFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGNoZWNrVmFyaWFudHNEaWRDaGFuZ2UsIGNyZWF0ZUFuaW1hdGlvblN0YXRlIH07XG4iLCJpbXBvcnQgeyByZXNvbHZlVmFyaWFudCB9IGZyb20gJy4uLy4uL3JlbmRlci91dGlscy9yZXNvbHZlLWR5bmFtaWMtdmFyaWFudHMubWpzJztcbmltcG9ydCB7IGFuaW1hdGVUYXJnZXQgfSBmcm9tICcuL3Zpc3VhbC1lbGVtZW50LXRhcmdldC5tanMnO1xuaW1wb3J0IHsgYW5pbWF0ZVZhcmlhbnQgfSBmcm9tICcuL3Zpc3VhbC1lbGVtZW50LXZhcmlhbnQubWpzJztcblxuZnVuY3Rpb24gYW5pbWF0ZVZpc3VhbEVsZW1lbnQodmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgdmlzdWFsRWxlbWVudC5ub3RpZnkoXCJBbmltYXRpb25TdGFydFwiLCBkZWZpbml0aW9uKTtcbiAgICBsZXQgYW5pbWF0aW9uO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGRlZmluaXRpb24pKSB7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBkZWZpbml0aW9uLm1hcCgodmFyaWFudCkgPT4gYW5pbWF0ZVZhcmlhbnQodmlzdWFsRWxlbWVudCwgdmFyaWFudCwgb3B0aW9ucykpO1xuICAgICAgICBhbmltYXRpb24gPSBQcm9taXNlLmFsbChhbmltYXRpb25zKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGRlZmluaXRpb24gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgYW5pbWF0aW9uID0gYW5pbWF0ZVZhcmlhbnQodmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbiwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCByZXNvbHZlZERlZmluaXRpb24gPSB0eXBlb2YgZGVmaW5pdGlvbiA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IHJlc29sdmVWYXJpYW50KHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24sIG9wdGlvbnMuY3VzdG9tKVxuICAgICAgICAgICAgOiBkZWZpbml0aW9uO1xuICAgICAgICBhbmltYXRpb24gPSBQcm9taXNlLmFsbChhbmltYXRlVGFyZ2V0KHZpc3VhbEVsZW1lbnQsIHJlc29sdmVkRGVmaW5pdGlvbiwgb3B0aW9ucykpO1xuICAgIH1cbiAgICByZXR1cm4gYW5pbWF0aW9uLnRoZW4oKCkgPT4gdmlzdWFsRWxlbWVudC5ub3RpZnkoXCJBbmltYXRpb25Db21wbGV0ZVwiLCBkZWZpbml0aW9uKSk7XG59XG5cbmV4cG9ydCB7IGFuaW1hdGVWaXN1YWxFbGVtZW50IH07XG4iLCJpbXBvcnQgeyBGZWF0dXJlIH0gZnJvbSAnLi4vRmVhdHVyZS5tanMnO1xuXG5sZXQgaWQgPSAwO1xuY2xhc3MgRXhpdEFuaW1hdGlvbkZlYXR1cmUgZXh0ZW5kcyBGZWF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5pZCA9IGlkKys7XG4gICAgfVxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLm5vZGUucHJlc2VuY2VDb250ZXh0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB7IGlzUHJlc2VudCwgb25FeGl0Q29tcGxldGUsIGN1c3RvbSB9ID0gdGhpcy5ub2RlLnByZXNlbmNlQ29udGV4dDtcbiAgICAgICAgY29uc3QgeyBpc1ByZXNlbnQ6IHByZXZJc1ByZXNlbnQgfSA9IHRoaXMubm9kZS5wcmV2UHJlc2VuY2VDb250ZXh0IHx8IHt9O1xuICAgICAgICBpZiAoIXRoaXMubm9kZS5hbmltYXRpb25TdGF0ZSB8fCBpc1ByZXNlbnQgPT09IHByZXZJc1ByZXNlbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBleGl0QW5pbWF0aW9uID0gdGhpcy5ub2RlLmFuaW1hdGlvblN0YXRlLnNldEFjdGl2ZShcImV4aXRcIiwgIWlzUHJlc2VudCwgeyBjdXN0b206IGN1c3RvbSAhPT0gbnVsbCAmJiBjdXN0b20gIT09IHZvaWQgMCA/IGN1c3RvbSA6IHRoaXMubm9kZS5nZXRQcm9wcygpLmN1c3RvbSB9KTtcbiAgICAgICAgaWYgKG9uRXhpdENvbXBsZXRlICYmICFpc1ByZXNlbnQpIHtcbiAgICAgICAgICAgIGV4aXRBbmltYXRpb24udGhlbigoKSA9PiBvbkV4aXRDb21wbGV0ZSh0aGlzLmlkKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbW91bnQoKSB7XG4gICAgICAgIGNvbnN0IHsgcmVnaXN0ZXIgfSA9IHRoaXMubm9kZS5wcmVzZW5jZUNvbnRleHQgfHwge307XG4gICAgICAgIGlmIChyZWdpc3Rlcikge1xuICAgICAgICAgICAgdGhpcy51bm1vdW50ID0gcmVnaXN0ZXIodGhpcy5pZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdW5tb3VudCgpIHsgfVxufVxuXG5leHBvcnQgeyBFeGl0QW5pbWF0aW9uRmVhdHVyZSB9O1xuIiwiaW1wb3J0IHsgQW5pbWF0aW9uRmVhdHVyZSB9IGZyb20gJy4vYW5pbWF0aW9uL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBFeGl0QW5pbWF0aW9uRmVhdHVyZSB9IGZyb20gJy4vYW5pbWF0aW9uL2V4aXQubWpzJztcblxuY29uc3QgYW5pbWF0aW9ucyA9IHtcbiAgICBhbmltYXRpb246IHtcbiAgICAgICAgRmVhdHVyZTogQW5pbWF0aW9uRmVhdHVyZSxcbiAgICB9LFxuICAgIGV4aXQ6IHtcbiAgICAgICAgRmVhdHVyZTogRXhpdEFuaW1hdGlvbkZlYXR1cmUsXG4gICAgfSxcbn07XG5cbmV4cG9ydCB7IGFuaW1hdGlvbnMgfTtcbiIsImltcG9ydCB7IGlzQW5pbWF0aW9uQ29udHJvbHMgfSBmcm9tICcuLi8uLi8uLi9hbmltYXRpb24vdXRpbHMvaXMtYW5pbWF0aW9uLWNvbnRyb2xzLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVBbmltYXRpb25TdGF0ZSB9IGZyb20gJy4uLy4uLy4uL3JlbmRlci91dGlscy9hbmltYXRpb24tc3RhdGUubWpzJztcbmltcG9ydCB7IEZlYXR1cmUgfSBmcm9tICcuLi9GZWF0dXJlLm1qcyc7XG5cbmNsYXNzIEFuaW1hdGlvbkZlYXR1cmUgZXh0ZW5kcyBGZWF0dXJlIHtcbiAgICAvKipcbiAgICAgKiBXZSBkeW5hbWljYWxseSBnZW5lcmF0ZSB0aGUgQW5pbWF0aW9uU3RhdGUgbWFuYWdlciBhcyBpdCBjb250YWlucyBhIHJlZmVyZW5jZVxuICAgICAqIHRvIHRoZSB1bmRlcmx5aW5nIGFuaW1hdGlvbiBsaWJyYXJ5LiBXZSBvbmx5IHdhbnQgdG8gbG9hZCB0aGF0IGlmIHdlIGxvYWQgdGhpcyxcbiAgICAgKiBzbyBwZW9wbGUgY2FuIG9wdGlvbmFsbHkgY29kZSBzcGxpdCBpdCBvdXQgdXNpbmcgdGhlIGBtYCBjb21wb25lbnQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iobm9kZSkge1xuICAgICAgICBzdXBlcihub2RlKTtcbiAgICAgICAgbm9kZS5hbmltYXRpb25TdGF0ZSB8fCAobm9kZS5hbmltYXRpb25TdGF0ZSA9IGNyZWF0ZUFuaW1hdGlvblN0YXRlKG5vZGUpKTtcbiAgICB9XG4gICAgdXBkYXRlQW5pbWF0aW9uQ29udHJvbHNTdWJzY3JpcHRpb24oKSB7XG4gICAgICAgIGNvbnN0IHsgYW5pbWF0ZSB9ID0gdGhpcy5ub2RlLmdldFByb3BzKCk7XG4gICAgICAgIHRoaXMudW5tb3VudCgpO1xuICAgICAgICBpZiAoaXNBbmltYXRpb25Db250cm9scyhhbmltYXRlKSkge1xuICAgICAgICAgICAgdGhpcy51bm1vdW50ID0gYW5pbWF0ZS5zdWJzY3JpYmUodGhpcy5ub2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmUgYW55IHByb3ZpZGVkIEFuaW1hdGlvbkNvbnRyb2xzIHRvIHRoZSBjb21wb25lbnQncyBWaXN1YWxFbGVtZW50XG4gICAgICovXG4gICAgbW91bnQoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlQW5pbWF0aW9uQ29udHJvbHNTdWJzY3JpcHRpb24oKTtcbiAgICB9XG4gICAgdXBkYXRlKCkge1xuICAgICAgICBjb25zdCB7IGFuaW1hdGUgfSA9IHRoaXMubm9kZS5nZXRQcm9wcygpO1xuICAgICAgICBjb25zdCB7IGFuaW1hdGU6IHByZXZBbmltYXRlIH0gPSB0aGlzLm5vZGUucHJldlByb3BzIHx8IHt9O1xuICAgICAgICBpZiAoYW5pbWF0ZSAhPT0gcHJldkFuaW1hdGUpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQW5pbWF0aW9uQ29udHJvbHNTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1bm1vdW50KCkgeyB9XG59XG5cbmV4cG9ydCB7IEFuaW1hdGlvbkZlYXR1cmUgfTtcbiIsImNvbnN0IGRpc3RhbmNlID0gKGEsIGIpID0+IE1hdGguYWJzKGEgLSBiKTtcbmZ1bmN0aW9uIGRpc3RhbmNlMkQoYSwgYikge1xuICAgIC8vIE11bHRpLWRpbWVuc2lvbmFsXG4gICAgY29uc3QgeERlbHRhID0gZGlzdGFuY2UoYS54LCBiLngpO1xuICAgIGNvbnN0IHlEZWx0YSA9IGRpc3RhbmNlKGEueSwgYi55KTtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHhEZWx0YSAqKiAyICsgeURlbHRhICoqIDIpO1xufVxuXG5leHBvcnQgeyBkaXN0YW5jZSwgZGlzdGFuY2UyRCB9O1xuIiwiaW1wb3J0IHsgZXh0cmFjdEV2ZW50SW5mbyB9IGZyb20gJy4uLy4uL2V2ZW50cy9ldmVudC1pbmZvLm1qcyc7XG5pbXBvcnQgeyBzZWNvbmRzVG9NaWxsaXNlY29uZHMsIG1pbGxpc2Vjb25kc1RvU2Vjb25kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3RpbWUtY29udmVyc2lvbi5tanMnO1xuaW1wb3J0IHsgYWRkUG9pbnRlckV2ZW50IH0gZnJvbSAnLi4vLi4vZXZlbnRzL2FkZC1wb2ludGVyLWV2ZW50Lm1qcyc7XG5pbXBvcnQgeyBwaXBlIH0gZnJvbSAnLi4vLi4vdXRpbHMvcGlwZS5tanMnO1xuaW1wb3J0IHsgZGlzdGFuY2UyRCB9IGZyb20gJy4uLy4uL3V0aWxzL2Rpc3RhbmNlLm1qcyc7XG5pbXBvcnQgeyBpc1ByaW1hcnlQb2ludGVyIH0gZnJvbSAnLi4vLi4vZXZlbnRzL3V0aWxzL2lzLXByaW1hcnktcG9pbnRlci5tanMnO1xuaW1wb3J0IHsgZnJhbWUsIGNhbmNlbEZyYW1lLCBmcmFtZURhdGEgfSBmcm9tICcuLi8uLi9mcmFtZWxvb3AvZnJhbWUubWpzJztcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgUGFuU2Vzc2lvbiB7XG4gICAgY29uc3RydWN0b3IoZXZlbnQsIGhhbmRsZXJzLCB7IHRyYW5zZm9ybVBhZ2VQb2ludCB9ID0ge30pIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFydEV2ZW50ID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sYXN0TW92ZUV2ZW50ID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sYXN0TW92ZUV2ZW50SW5mbyA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaGFuZGxlcnMgPSB7fTtcbiAgICAgICAgdGhpcy51cGRhdGVQb2ludCA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghKHRoaXMubGFzdE1vdmVFdmVudCAmJiB0aGlzLmxhc3RNb3ZlRXZlbnRJbmZvKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCBpbmZvID0gZ2V0UGFuSW5mbyh0aGlzLmxhc3RNb3ZlRXZlbnRJbmZvLCB0aGlzLmhpc3RvcnkpO1xuICAgICAgICAgICAgY29uc3QgaXNQYW5TdGFydGVkID0gdGhpcy5zdGFydEV2ZW50ICE9PSBudWxsO1xuICAgICAgICAgICAgLy8gT25seSBzdGFydCBwYW5uaW5nIGlmIHRoZSBvZmZzZXQgaXMgbGFyZ2VyIHRoYW4gMyBwaXhlbHMuIElmIHdlIG1ha2UgaXRcbiAgICAgICAgICAgIC8vIGFueSBsYXJnZXIgdGhhbiB0aGlzIHdlJ2xsIHdhbnQgdG8gcmVzZXQgdGhlIHBvaW50ZXIgaGlzdG9yeVxuICAgICAgICAgICAgLy8gb24gdGhlIGZpcnN0IHVwZGF0ZSB0byBhdm9pZCB2aXN1YWwgc25hcHBpbmcgdG8gdGhlIGN1cnNvZS5cbiAgICAgICAgICAgIGNvbnN0IGlzRGlzdGFuY2VQYXN0VGhyZXNob2xkID0gZGlzdGFuY2UyRChpbmZvLm9mZnNldCwgeyB4OiAwLCB5OiAwIH0pID49IDM7XG4gICAgICAgICAgICBpZiAoIWlzUGFuU3RhcnRlZCAmJiAhaXNEaXN0YW5jZVBhc3RUaHJlc2hvbGQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgeyBwb2ludCB9ID0gaW5mbztcbiAgICAgICAgICAgIGNvbnN0IHsgdGltZXN0YW1wIH0gPSBmcmFtZURhdGE7XG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaCh7IC4uLnBvaW50LCB0aW1lc3RhbXAgfSk7XG4gICAgICAgICAgICBjb25zdCB7IG9uU3RhcnQsIG9uTW92ZSB9ID0gdGhpcy5oYW5kbGVycztcbiAgICAgICAgICAgIGlmICghaXNQYW5TdGFydGVkKSB7XG4gICAgICAgICAgICAgICAgb25TdGFydCAmJiBvblN0YXJ0KHRoaXMubGFzdE1vdmVFdmVudCwgaW5mbyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydEV2ZW50ID0gdGhpcy5sYXN0TW92ZUV2ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb25Nb3ZlICYmIG9uTW92ZSh0aGlzLmxhc3RNb3ZlRXZlbnQsIGluZm8pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhbmRsZVBvaW50ZXJNb3ZlID0gKGV2ZW50LCBpbmZvKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmxhc3RNb3ZlRXZlbnQgPSBldmVudDtcbiAgICAgICAgICAgIHRoaXMubGFzdE1vdmVFdmVudEluZm8gPSB0cmFuc2Zvcm1Qb2ludChpbmZvLCB0aGlzLnRyYW5zZm9ybVBhZ2VQb2ludCk7XG4gICAgICAgICAgICAvLyBUaHJvdHRsZSBtb3VzZSBtb3ZlIGV2ZW50IHRvIG9uY2UgcGVyIGZyYW1lXG4gICAgICAgICAgICBmcmFtZS51cGRhdGUodGhpcy51cGRhdGVQb2ludCwgdHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlUG9pbnRlclVwID0gKGV2ZW50LCBpbmZvKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVuZCgpO1xuICAgICAgICAgICAgaWYgKCEodGhpcy5sYXN0TW92ZUV2ZW50ICYmIHRoaXMubGFzdE1vdmVFdmVudEluZm8pKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IHsgb25FbmQsIG9uU2Vzc2lvbkVuZCB9ID0gdGhpcy5oYW5kbGVycztcbiAgICAgICAgICAgIGNvbnN0IHBhbkluZm8gPSBnZXRQYW5JbmZvKGV2ZW50LnR5cGUgPT09IFwicG9pbnRlcmNhbmNlbFwiXG4gICAgICAgICAgICAgICAgPyB0aGlzLmxhc3RNb3ZlRXZlbnRJbmZvXG4gICAgICAgICAgICAgICAgOiB0cmFuc2Zvcm1Qb2ludChpbmZvLCB0aGlzLnRyYW5zZm9ybVBhZ2VQb2ludCksIHRoaXMuaGlzdG9yeSk7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGFydEV2ZW50ICYmIG9uRW5kKSB7XG4gICAgICAgICAgICAgICAgb25FbmQoZXZlbnQsIHBhbkluZm8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb25TZXNzaW9uRW5kICYmIG9uU2Vzc2lvbkVuZChldmVudCwgcGFuSW5mbyk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIElmIHdlIGhhdmUgbW9yZSB0aGFuIG9uZSB0b3VjaCwgZG9uJ3Qgc3RhcnQgZGV0ZWN0aW5nIHRoaXMgZ2VzdHVyZVxuICAgICAgICBpZiAoIWlzUHJpbWFyeVBvaW50ZXIoZXZlbnQpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmhhbmRsZXJzID0gaGFuZGxlcnM7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtUGFnZVBvaW50ID0gdHJhbnNmb3JtUGFnZVBvaW50O1xuICAgICAgICBjb25zdCBpbmZvID0gZXh0cmFjdEV2ZW50SW5mbyhldmVudCk7XG4gICAgICAgIGNvbnN0IGluaXRpYWxJbmZvID0gdHJhbnNmb3JtUG9pbnQoaW5mbywgdGhpcy50cmFuc2Zvcm1QYWdlUG9pbnQpO1xuICAgICAgICBjb25zdCB7IHBvaW50IH0gPSBpbml0aWFsSW5mbztcbiAgICAgICAgY29uc3QgeyB0aW1lc3RhbXAgfSA9IGZyYW1lRGF0YTtcbiAgICAgICAgdGhpcy5oaXN0b3J5ID0gW3sgLi4ucG9pbnQsIHRpbWVzdGFtcCB9XTtcbiAgICAgICAgY29uc3QgeyBvblNlc3Npb25TdGFydCB9ID0gaGFuZGxlcnM7XG4gICAgICAgIG9uU2Vzc2lvblN0YXJ0ICYmXG4gICAgICAgICAgICBvblNlc3Npb25TdGFydChldmVudCwgZ2V0UGFuSW5mbyhpbml0aWFsSW5mbywgdGhpcy5oaXN0b3J5KSk7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzID0gcGlwZShhZGRQb2ludGVyRXZlbnQod2luZG93LCBcInBvaW50ZXJtb3ZlXCIsIHRoaXMuaGFuZGxlUG9pbnRlck1vdmUpLCBhZGRQb2ludGVyRXZlbnQod2luZG93LCBcInBvaW50ZXJ1cFwiLCB0aGlzLmhhbmRsZVBvaW50ZXJVcCksIGFkZFBvaW50ZXJFdmVudCh3aW5kb3csIFwicG9pbnRlcmNhbmNlbFwiLCB0aGlzLmhhbmRsZVBvaW50ZXJVcCkpO1xuICAgIH1cbiAgICB1cGRhdGVIYW5kbGVycyhoYW5kbGVycykge1xuICAgICAgICB0aGlzLmhhbmRsZXJzID0gaGFuZGxlcnM7XG4gICAgfVxuICAgIGVuZCgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMgJiYgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgICAgY2FuY2VsRnJhbWUodGhpcy51cGRhdGVQb2ludCk7XG4gICAgfVxufVxuZnVuY3Rpb24gdHJhbnNmb3JtUG9pbnQoaW5mbywgdHJhbnNmb3JtUGFnZVBvaW50KSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybVBhZ2VQb2ludCA/IHsgcG9pbnQ6IHRyYW5zZm9ybVBhZ2VQb2ludChpbmZvLnBvaW50KSB9IDogaW5mbztcbn1cbmZ1bmN0aW9uIHN1YnRyYWN0UG9pbnQoYSwgYikge1xuICAgIHJldHVybiB7IHg6IGEueCAtIGIueCwgeTogYS55IC0gYi55IH07XG59XG5mdW5jdGlvbiBnZXRQYW5JbmZvKHsgcG9pbnQgfSwgaGlzdG9yeSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHBvaW50LFxuICAgICAgICBkZWx0YTogc3VidHJhY3RQb2ludChwb2ludCwgbGFzdERldmljZVBvaW50KGhpc3RvcnkpKSxcbiAgICAgICAgb2Zmc2V0OiBzdWJ0cmFjdFBvaW50KHBvaW50LCBzdGFydERldmljZVBvaW50KGhpc3RvcnkpKSxcbiAgICAgICAgdmVsb2NpdHk6IGdldFZlbG9jaXR5KGhpc3RvcnksIDAuMSksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHN0YXJ0RGV2aWNlUG9pbnQoaGlzdG9yeSkge1xuICAgIHJldHVybiBoaXN0b3J5WzBdO1xufVxuZnVuY3Rpb24gbGFzdERldmljZVBvaW50KGhpc3RvcnkpIHtcbiAgICByZXR1cm4gaGlzdG9yeVtoaXN0b3J5Lmxlbmd0aCAtIDFdO1xufVxuZnVuY3Rpb24gZ2V0VmVsb2NpdHkoaGlzdG9yeSwgdGltZURlbHRhKSB7XG4gICAgaWYgKGhpc3RvcnkubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4geyB4OiAwLCB5OiAwIH07XG4gICAgfVxuICAgIGxldCBpID0gaGlzdG9yeS5sZW5ndGggLSAxO1xuICAgIGxldCB0aW1lc3RhbXBlZFBvaW50ID0gbnVsbDtcbiAgICBjb25zdCBsYXN0UG9pbnQgPSBsYXN0RGV2aWNlUG9pbnQoaGlzdG9yeSk7XG4gICAgd2hpbGUgKGkgPj0gMCkge1xuICAgICAgICB0aW1lc3RhbXBlZFBvaW50ID0gaGlzdG9yeVtpXTtcbiAgICAgICAgaWYgKGxhc3RQb2ludC50aW1lc3RhbXAgLSB0aW1lc3RhbXBlZFBvaW50LnRpbWVzdGFtcCA+XG4gICAgICAgICAgICBzZWNvbmRzVG9NaWxsaXNlY29uZHModGltZURlbHRhKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaS0tO1xuICAgIH1cbiAgICBpZiAoIXRpbWVzdGFtcGVkUG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIHsgeDogMCwgeTogMCB9O1xuICAgIH1cbiAgICBjb25zdCB0aW1lID0gbWlsbGlzZWNvbmRzVG9TZWNvbmRzKGxhc3RQb2ludC50aW1lc3RhbXAgLSB0aW1lc3RhbXBlZFBvaW50LnRpbWVzdGFtcCk7XG4gICAgaWYgKHRpbWUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHsgeDogMCwgeTogMCB9O1xuICAgIH1cbiAgICBjb25zdCBjdXJyZW50VmVsb2NpdHkgPSB7XG4gICAgICAgIHg6IChsYXN0UG9pbnQueCAtIHRpbWVzdGFtcGVkUG9pbnQueCkgLyB0aW1lLFxuICAgICAgICB5OiAobGFzdFBvaW50LnkgLSB0aW1lc3RhbXBlZFBvaW50LnkpIC8gdGltZSxcbiAgICB9O1xuICAgIGlmIChjdXJyZW50VmVsb2NpdHkueCA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgY3VycmVudFZlbG9jaXR5LnggPSAwO1xuICAgIH1cbiAgICBpZiAoY3VycmVudFZlbG9jaXR5LnkgPT09IEluZmluaXR5KSB7XG4gICAgICAgIGN1cnJlbnRWZWxvY2l0eS55ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGN1cnJlbnRWZWxvY2l0eTtcbn1cblxuZXhwb3J0IHsgUGFuU2Vzc2lvbiB9O1xuIiwiaW1wb3J0IHsgbWl4IH0gZnJvbSAnLi4vLi4vdXRpbHMvbWl4Lm1qcyc7XG5cbmZ1bmN0aW9uIGNhbGNMZW5ndGgoYXhpcykge1xuICAgIHJldHVybiBheGlzLm1heCAtIGF4aXMubWluO1xufVxuZnVuY3Rpb24gaXNOZWFyKHZhbHVlLCB0YXJnZXQgPSAwLCBtYXhEaXN0YW5jZSA9IDAuMDEpIHtcbiAgICByZXR1cm4gTWF0aC5hYnModmFsdWUgLSB0YXJnZXQpIDw9IG1heERpc3RhbmNlO1xufVxuZnVuY3Rpb24gY2FsY0F4aXNEZWx0YShkZWx0YSwgc291cmNlLCB0YXJnZXQsIG9yaWdpbiA9IDAuNSkge1xuICAgIGRlbHRhLm9yaWdpbiA9IG9yaWdpbjtcbiAgICBkZWx0YS5vcmlnaW5Qb2ludCA9IG1peChzb3VyY2UubWluLCBzb3VyY2UubWF4LCBkZWx0YS5vcmlnaW4pO1xuICAgIGRlbHRhLnNjYWxlID0gY2FsY0xlbmd0aCh0YXJnZXQpIC8gY2FsY0xlbmd0aChzb3VyY2UpO1xuICAgIGlmIChpc05lYXIoZGVsdGEuc2NhbGUsIDEsIDAuMDAwMSkgfHwgaXNOYU4oZGVsdGEuc2NhbGUpKVxuICAgICAgICBkZWx0YS5zY2FsZSA9IDE7XG4gICAgZGVsdGEudHJhbnNsYXRlID1cbiAgICAgICAgbWl4KHRhcmdldC5taW4sIHRhcmdldC5tYXgsIGRlbHRhLm9yaWdpbikgLSBkZWx0YS5vcmlnaW5Qb2ludDtcbiAgICBpZiAoaXNOZWFyKGRlbHRhLnRyYW5zbGF0ZSkgfHwgaXNOYU4oZGVsdGEudHJhbnNsYXRlKSlcbiAgICAgICAgZGVsdGEudHJhbnNsYXRlID0gMDtcbn1cbmZ1bmN0aW9uIGNhbGNCb3hEZWx0YShkZWx0YSwgc291cmNlLCB0YXJnZXQsIG9yaWdpbikge1xuICAgIGNhbGNBeGlzRGVsdGEoZGVsdGEueCwgc291cmNlLngsIHRhcmdldC54LCBvcmlnaW4gPyBvcmlnaW4ub3JpZ2luWCA6IHVuZGVmaW5lZCk7XG4gICAgY2FsY0F4aXNEZWx0YShkZWx0YS55LCBzb3VyY2UueSwgdGFyZ2V0LnksIG9yaWdpbiA/IG9yaWdpbi5vcmlnaW5ZIDogdW5kZWZpbmVkKTtcbn1cbmZ1bmN0aW9uIGNhbGNSZWxhdGl2ZUF4aXModGFyZ2V0LCByZWxhdGl2ZSwgcGFyZW50KSB7XG4gICAgdGFyZ2V0Lm1pbiA9IHBhcmVudC5taW4gKyByZWxhdGl2ZS5taW47XG4gICAgdGFyZ2V0Lm1heCA9IHRhcmdldC5taW4gKyBjYWxjTGVuZ3RoKHJlbGF0aXZlKTtcbn1cbmZ1bmN0aW9uIGNhbGNSZWxhdGl2ZUJveCh0YXJnZXQsIHJlbGF0aXZlLCBwYXJlbnQpIHtcbiAgICBjYWxjUmVsYXRpdmVBeGlzKHRhcmdldC54LCByZWxhdGl2ZS54LCBwYXJlbnQueCk7XG4gICAgY2FsY1JlbGF0aXZlQXhpcyh0YXJnZXQueSwgcmVsYXRpdmUueSwgcGFyZW50LnkpO1xufVxuZnVuY3Rpb24gY2FsY1JlbGF0aXZlQXhpc1Bvc2l0aW9uKHRhcmdldCwgbGF5b3V0LCBwYXJlbnQpIHtcbiAgICB0YXJnZXQubWluID0gbGF5b3V0Lm1pbiAtIHBhcmVudC5taW47XG4gICAgdGFyZ2V0Lm1heCA9IHRhcmdldC5taW4gKyBjYWxjTGVuZ3RoKGxheW91dCk7XG59XG5mdW5jdGlvbiBjYWxjUmVsYXRpdmVQb3NpdGlvbih0YXJnZXQsIGxheW91dCwgcGFyZW50KSB7XG4gICAgY2FsY1JlbGF0aXZlQXhpc1Bvc2l0aW9uKHRhcmdldC54LCBsYXlvdXQueCwgcGFyZW50LngpO1xuICAgIGNhbGNSZWxhdGl2ZUF4aXNQb3NpdGlvbih0YXJnZXQueSwgbGF5b3V0LnksIHBhcmVudC55KTtcbn1cblxuZXhwb3J0IHsgY2FsY0F4aXNEZWx0YSwgY2FsY0JveERlbHRhLCBjYWxjTGVuZ3RoLCBjYWxjUmVsYXRpdmVBeGlzLCBjYWxjUmVsYXRpdmVBeGlzUG9zaXRpb24sIGNhbGNSZWxhdGl2ZUJveCwgY2FsY1JlbGF0aXZlUG9zaXRpb24sIGlzTmVhciB9O1xuIiwiaW1wb3J0IHsgcHJvZ3Jlc3MgfSBmcm9tICcuLi8uLi8uLi91dGlscy9wcm9ncmVzcy5tanMnO1xuaW1wb3J0IHsgY2FsY0xlbmd0aCB9IGZyb20gJy4uLy4uLy4uL3Byb2plY3Rpb24vZ2VvbWV0cnkvZGVsdGEtY2FsYy5tanMnO1xuaW1wb3J0IHsgY2xhbXAgfSBmcm9tICcuLi8uLi8uLi91dGlscy9jbGFtcC5tanMnO1xuaW1wb3J0IHsgbWl4IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvbWl4Lm1qcyc7XG5cbi8qKlxuICogQXBwbHkgY29uc3RyYWludHMgdG8gYSBwb2ludC4gVGhlc2UgY29uc3RyYWludHMgYXJlIGJvdGggcGh5c2ljYWwgYWxvbmcgYW5cbiAqIGF4aXMsIGFuZCBhbiBlbGFzdGljIGZhY3RvciB0aGF0IGRldGVybWluZXMgaG93IG11Y2ggdG8gY29uc3RyYWluIHRoZSBwb2ludFxuICogYnkgaWYgaXQgZG9lcyBsaWUgb3V0c2lkZSB0aGUgZGVmaW5lZCBwYXJhbWV0ZXJzLlxuICovXG5mdW5jdGlvbiBhcHBseUNvbnN0cmFpbnRzKHBvaW50LCB7IG1pbiwgbWF4IH0sIGVsYXN0aWMpIHtcbiAgICBpZiAobWluICE9PSB1bmRlZmluZWQgJiYgcG9pbnQgPCBtaW4pIHtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIG1pbiBwb2ludCBkZWZpbmVkLCBhbmQgdGhpcyBpcyBvdXRzaWRlIG9mIHRoYXQsIGNvbnN0cmFpblxuICAgICAgICBwb2ludCA9IGVsYXN0aWMgPyBtaXgobWluLCBwb2ludCwgZWxhc3RpYy5taW4pIDogTWF0aC5tYXgocG9pbnQsIG1pbik7XG4gICAgfVxuICAgIGVsc2UgaWYgKG1heCAhPT0gdW5kZWZpbmVkICYmIHBvaW50ID4gbWF4KSB7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSBtYXggcG9pbnQgZGVmaW5lZCwgYW5kIHRoaXMgaXMgb3V0c2lkZSBvZiB0aGF0LCBjb25zdHJhaW5cbiAgICAgICAgcG9pbnQgPSBlbGFzdGljID8gbWl4KG1heCwgcG9pbnQsIGVsYXN0aWMubWF4KSA6IE1hdGgubWluKHBvaW50LCBtYXgpO1xuICAgIH1cbiAgICByZXR1cm4gcG9pbnQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZSBjb25zdHJhaW50cyBpbiB0ZXJtcyBvZiB0aGUgdmlld3BvcnQgd2hlbiBkZWZpbmVkIHJlbGF0aXZlbHkgdG8gdGhlXG4gKiBtZWFzdXJlZCBheGlzLiBUaGlzIGlzIG1lYXN1cmVkIGZyb20gdGhlIG5lYXJlc3QgZWRnZSwgc28gYSBtYXggY29uc3RyYWludCBvZiAyMDBcbiAqIG9uIGFuIGF4aXMgd2l0aCBhIG1heCB2YWx1ZSBvZiAzMDAgd291bGQgcmV0dXJuIGEgY29uc3RyYWludCBvZiA1MDAgLSBheGlzIGxlbmd0aFxuICovXG5mdW5jdGlvbiBjYWxjUmVsYXRpdmVBeGlzQ29uc3RyYWludHMoYXhpcywgbWluLCBtYXgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBtaW46IG1pbiAhPT0gdW5kZWZpbmVkID8gYXhpcy5taW4gKyBtaW4gOiB1bmRlZmluZWQsXG4gICAgICAgIG1heDogbWF4ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gYXhpcy5tYXggKyBtYXggLSAoYXhpcy5tYXggLSBheGlzLm1pbilcbiAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgIH07XG59XG4vKipcbiAqIENhbGN1bGF0ZSBjb25zdHJhaW50cyBpbiB0ZXJtcyBvZiB0aGUgdmlld3BvcnQgd2hlblxuICogZGVmaW5lZCByZWxhdGl2ZWx5IHRvIHRoZSBtZWFzdXJlZCBib3VuZGluZyBib3guXG4gKi9cbmZ1bmN0aW9uIGNhbGNSZWxhdGl2ZUNvbnN0cmFpbnRzKGxheW91dEJveCwgeyB0b3AsIGxlZnQsIGJvdHRvbSwgcmlnaHQgfSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IGNhbGNSZWxhdGl2ZUF4aXNDb25zdHJhaW50cyhsYXlvdXRCb3gueCwgbGVmdCwgcmlnaHQpLFxuICAgICAgICB5OiBjYWxjUmVsYXRpdmVBeGlzQ29uc3RyYWludHMobGF5b3V0Qm94LnksIHRvcCwgYm90dG9tKSxcbiAgICB9O1xufVxuLyoqXG4gKiBDYWxjdWxhdGUgdmlld3BvcnQgY29uc3RyYWludHMgd2hlbiBkZWZpbmVkIGFzIGFub3RoZXIgdmlld3BvcnQtcmVsYXRpdmUgYXhpc1xuICovXG5mdW5jdGlvbiBjYWxjVmlld3BvcnRBeGlzQ29uc3RyYWludHMobGF5b3V0QXhpcywgY29uc3RyYWludHNBeGlzKSB7XG4gICAgbGV0IG1pbiA9IGNvbnN0cmFpbnRzQXhpcy5taW4gLSBsYXlvdXRBeGlzLm1pbjtcbiAgICBsZXQgbWF4ID0gY29uc3RyYWludHNBeGlzLm1heCAtIGxheW91dEF4aXMubWF4O1xuICAgIC8vIElmIHRoZSBjb25zdHJhaW50cyBheGlzIGlzIGFjdHVhbGx5IHNtYWxsZXIgdGhhbiB0aGUgbGF5b3V0IGF4aXMgdGhlbiB3ZSBjYW5cbiAgICAvLyBmbGlwIHRoZSBjb25zdHJhaW50c1xuICAgIGlmIChjb25zdHJhaW50c0F4aXMubWF4IC0gY29uc3RyYWludHNBeGlzLm1pbiA8XG4gICAgICAgIGxheW91dEF4aXMubWF4IC0gbGF5b3V0QXhpcy5taW4pIHtcbiAgICAgICAgW21pbiwgbWF4XSA9IFttYXgsIG1pbl07XG4gICAgfVxuICAgIHJldHVybiB7IG1pbiwgbWF4IH07XG59XG4vKipcbiAqIENhbGN1bGF0ZSB2aWV3cG9ydCBjb25zdHJhaW50cyB3aGVuIGRlZmluZWQgYXMgYW5vdGhlciB2aWV3cG9ydC1yZWxhdGl2ZSBib3hcbiAqL1xuZnVuY3Rpb24gY2FsY1ZpZXdwb3J0Q29uc3RyYWludHMobGF5b3V0Qm94LCBjb25zdHJhaW50c0JveCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IGNhbGNWaWV3cG9ydEF4aXNDb25zdHJhaW50cyhsYXlvdXRCb3gueCwgY29uc3RyYWludHNCb3gueCksXG4gICAgICAgIHk6IGNhbGNWaWV3cG9ydEF4aXNDb25zdHJhaW50cyhsYXlvdXRCb3gueSwgY29uc3RyYWludHNCb3gueSksXG4gICAgfTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlIGEgdHJhbnNmb3JtIG9yaWdpbiByZWxhdGl2ZSB0byB0aGUgc291cmNlIGF4aXMsIGJldHdlZW4gMC0xLCB0aGF0IHJlc3VsdHNcbiAqIGluIGFuIGFzdGhldGljYWxseSBwbGVhc2luZyBzY2FsZS90cmFuc2Zvcm0gbmVlZGVkIHRvIHByb2plY3QgZnJvbSBzb3VyY2UgdG8gdGFyZ2V0LlxuICovXG5mdW5jdGlvbiBjYWxjT3JpZ2luKHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgbGV0IG9yaWdpbiA9IDAuNTtcbiAgICBjb25zdCBzb3VyY2VMZW5ndGggPSBjYWxjTGVuZ3RoKHNvdXJjZSk7XG4gICAgY29uc3QgdGFyZ2V0TGVuZ3RoID0gY2FsY0xlbmd0aCh0YXJnZXQpO1xuICAgIGlmICh0YXJnZXRMZW5ndGggPiBzb3VyY2VMZW5ndGgpIHtcbiAgICAgICAgb3JpZ2luID0gcHJvZ3Jlc3ModGFyZ2V0Lm1pbiwgdGFyZ2V0Lm1heCAtIHNvdXJjZUxlbmd0aCwgc291cmNlLm1pbik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNvdXJjZUxlbmd0aCA+IHRhcmdldExlbmd0aCkge1xuICAgICAgICBvcmlnaW4gPSBwcm9ncmVzcyhzb3VyY2UubWluLCBzb3VyY2UubWF4IC0gdGFyZ2V0TGVuZ3RoLCB0YXJnZXQubWluKTtcbiAgICB9XG4gICAgcmV0dXJuIGNsYW1wKDAsIDEsIG9yaWdpbik7XG59XG4vKipcbiAqIFJlYmFzZSB0aGUgY2FsY3VsYXRlZCB2aWV3cG9ydCBjb25zdHJhaW50cyByZWxhdGl2ZSB0byB0aGUgbGF5b3V0Lm1pbiBwb2ludC5cbiAqL1xuZnVuY3Rpb24gcmViYXNlQXhpc0NvbnN0cmFpbnRzKGxheW91dCwgY29uc3RyYWludHMpIHtcbiAgICBjb25zdCByZWxhdGl2ZUNvbnN0cmFpbnRzID0ge307XG4gICAgaWYgKGNvbnN0cmFpbnRzLm1pbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlbGF0aXZlQ29uc3RyYWludHMubWluID0gY29uc3RyYWludHMubWluIC0gbGF5b3V0Lm1pbjtcbiAgICB9XG4gICAgaWYgKGNvbnN0cmFpbnRzLm1heCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlbGF0aXZlQ29uc3RyYWludHMubWF4ID0gY29uc3RyYWludHMubWF4IC0gbGF5b3V0Lm1pbjtcbiAgICB9XG4gICAgcmV0dXJuIHJlbGF0aXZlQ29uc3RyYWludHM7XG59XG5jb25zdCBkZWZhdWx0RWxhc3RpYyA9IDAuMzU7XG4vKipcbiAqIEFjY2VwdHMgYSBkcmFnRWxhc3RpYyBwcm9wIGFuZCByZXR1cm5zIHJlc29sdmVkIGVsYXN0aWMgdmFsdWVzIGZvciBlYWNoIGF4aXMuXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVEcmFnRWxhc3RpYyhkcmFnRWxhc3RpYyA9IGRlZmF1bHRFbGFzdGljKSB7XG4gICAgaWYgKGRyYWdFbGFzdGljID09PSBmYWxzZSkge1xuICAgICAgICBkcmFnRWxhc3RpYyA9IDA7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRyYWdFbGFzdGljID09PSB0cnVlKSB7XG4gICAgICAgIGRyYWdFbGFzdGljID0gZGVmYXVsdEVsYXN0aWM7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHJlc29sdmVBeGlzRWxhc3RpYyhkcmFnRWxhc3RpYywgXCJsZWZ0XCIsIFwicmlnaHRcIiksXG4gICAgICAgIHk6IHJlc29sdmVBeGlzRWxhc3RpYyhkcmFnRWxhc3RpYywgXCJ0b3BcIiwgXCJib3R0b21cIiksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVBeGlzRWxhc3RpYyhkcmFnRWxhc3RpYywgbWluTGFiZWwsIG1heExhYmVsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWluOiByZXNvbHZlUG9pbnRFbGFzdGljKGRyYWdFbGFzdGljLCBtaW5MYWJlbCksXG4gICAgICAgIG1heDogcmVzb2x2ZVBvaW50RWxhc3RpYyhkcmFnRWxhc3RpYywgbWF4TGFiZWwpLFxuICAgIH07XG59XG5mdW5jdGlvbiByZXNvbHZlUG9pbnRFbGFzdGljKGRyYWdFbGFzdGljLCBsYWJlbCkge1xuICAgIHJldHVybiB0eXBlb2YgZHJhZ0VsYXN0aWMgPT09IFwibnVtYmVyXCJcbiAgICAgICAgPyBkcmFnRWxhc3RpY1xuICAgICAgICA6IGRyYWdFbGFzdGljW2xhYmVsXSB8fCAwO1xufVxuXG5leHBvcnQgeyBhcHBseUNvbnN0cmFpbnRzLCBjYWxjT3JpZ2luLCBjYWxjUmVsYXRpdmVBeGlzQ29uc3RyYWludHMsIGNhbGNSZWxhdGl2ZUNvbnN0cmFpbnRzLCBjYWxjVmlld3BvcnRBeGlzQ29uc3RyYWludHMsIGNhbGNWaWV3cG9ydENvbnN0cmFpbnRzLCBkZWZhdWx0RWxhc3RpYywgcmViYXNlQXhpc0NvbnN0cmFpbnRzLCByZXNvbHZlQXhpc0VsYXN0aWMsIHJlc29sdmVEcmFnRWxhc3RpYywgcmVzb2x2ZVBvaW50RWxhc3RpYyB9O1xuIiwiY29uc3QgY3JlYXRlQXhpc0RlbHRhID0gKCkgPT4gKHtcbiAgICB0cmFuc2xhdGU6IDAsXG4gICAgc2NhbGU6IDEsXG4gICAgb3JpZ2luOiAwLFxuICAgIG9yaWdpblBvaW50OiAwLFxufSk7XG5jb25zdCBjcmVhdGVEZWx0YSA9ICgpID0+ICh7XG4gICAgeDogY3JlYXRlQXhpc0RlbHRhKCksXG4gICAgeTogY3JlYXRlQXhpc0RlbHRhKCksXG59KTtcbmNvbnN0IGNyZWF0ZUF4aXMgPSAoKSA9PiAoeyBtaW46IDAsIG1heDogMCB9KTtcbmNvbnN0IGNyZWF0ZUJveCA9ICgpID0+ICh7XG4gICAgeDogY3JlYXRlQXhpcygpLFxuICAgIHk6IGNyZWF0ZUF4aXMoKSxcbn0pO1xuXG5leHBvcnQgeyBjcmVhdGVBeGlzLCBjcmVhdGVBeGlzRGVsdGEsIGNyZWF0ZUJveCwgY3JlYXRlRGVsdGEgfTtcbiIsImZ1bmN0aW9uIGVhY2hBeGlzKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIFtjYWxsYmFjayhcInhcIiksIGNhbGxiYWNrKFwieVwiKV07XG59XG5cbmV4cG9ydCB7IGVhY2hBeGlzIH07XG4iLCIvKipcbiAqIEJvdW5kaW5nIGJveGVzIHRlbmQgdG8gYmUgZGVmaW5lZCBhcyB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20uIEZvciB2YXJpb3VzIG9wZXJhdGlvbnNcbiAqIGl0J3MgZWFzaWVyIHRvIGNvbnNpZGVyIGVhY2ggYXhpcyBpbmRpdmlkdWFsbHkuIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIGJvdW5kaW5nIGJveFxuICogYXMgYSBtYXAgb2Ygc2luZ2xlLWF4aXMgbWluL21heCB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRCb3VuZGluZ0JveFRvQm94KHsgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tLCB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogeyBtaW46IGxlZnQsIG1heDogcmlnaHQgfSxcbiAgICAgICAgeTogeyBtaW46IHRvcCwgbWF4OiBib3R0b20gfSxcbiAgICB9O1xufVxuZnVuY3Rpb24gY29udmVydEJveFRvQm91bmRpbmdCb3goeyB4LCB5IH0pIHtcbiAgICByZXR1cm4geyB0b3A6IHkubWluLCByaWdodDogeC5tYXgsIGJvdHRvbTogeS5tYXgsIGxlZnQ6IHgubWluIH07XG59XG4vKipcbiAqIEFwcGxpZXMgYSBUcmFuc2Zvcm1Qb2ludCBmdW5jdGlvbiB0byBhIGJvdW5kaW5nIGJveC4gVHJhbnNmb3JtUG9pbnQgaXMgdXN1YWxseSBhIGZ1bmN0aW9uXG4gKiBwcm92aWRlZCBieSBGcmFtZXIgdG8gYWxsb3cgbWVhc3VyZWQgcG9pbnRzIHRvIGJlIGNvcnJlY3RlZCBmb3IgZGV2aWNlIHNjYWxpbmcuIFRoaXMgaXMgdXNlZFxuICogd2hlbiBtZWFzdXJpbmcgRE9NIGVsZW1lbnRzIGFuZCBET00gZXZlbnQgcG9pbnRzLlxuICovXG5mdW5jdGlvbiB0cmFuc2Zvcm1Cb3hQb2ludHMocG9pbnQsIHRyYW5zZm9ybVBvaW50KSB7XG4gICAgaWYgKCF0cmFuc2Zvcm1Qb2ludClcbiAgICAgICAgcmV0dXJuIHBvaW50O1xuICAgIGNvbnN0IHRvcExlZnQgPSB0cmFuc2Zvcm1Qb2ludCh7IHg6IHBvaW50LmxlZnQsIHk6IHBvaW50LnRvcCB9KTtcbiAgICBjb25zdCBib3R0b21SaWdodCA9IHRyYW5zZm9ybVBvaW50KHsgeDogcG9pbnQucmlnaHQsIHk6IHBvaW50LmJvdHRvbSB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IHRvcExlZnQueSxcbiAgICAgICAgbGVmdDogdG9wTGVmdC54LFxuICAgICAgICBib3R0b206IGJvdHRvbVJpZ2h0LnksXG4gICAgICAgIHJpZ2h0OiBib3R0b21SaWdodC54LFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGNvbnZlcnRCb3VuZGluZ0JveFRvQm94LCBjb252ZXJ0Qm94VG9Cb3VuZGluZ0JveCwgdHJhbnNmb3JtQm94UG9pbnRzIH07XG4iLCJmdW5jdGlvbiBpc0lkZW50aXR5U2NhbGUoc2NhbGUpIHtcbiAgICByZXR1cm4gc2NhbGUgPT09IHVuZGVmaW5lZCB8fCBzY2FsZSA9PT0gMTtcbn1cbmZ1bmN0aW9uIGhhc1NjYWxlKHsgc2NhbGUsIHNjYWxlWCwgc2NhbGVZIH0pIHtcbiAgICByZXR1cm4gKCFpc0lkZW50aXR5U2NhbGUoc2NhbGUpIHx8XG4gICAgICAgICFpc0lkZW50aXR5U2NhbGUoc2NhbGVYKSB8fFxuICAgICAgICAhaXNJZGVudGl0eVNjYWxlKHNjYWxlWSkpO1xufVxuZnVuY3Rpb24gaGFzVHJhbnNmb3JtKHZhbHVlcykge1xuICAgIHJldHVybiAoaGFzU2NhbGUodmFsdWVzKSB8fFxuICAgICAgICBoYXMyRFRyYW5zbGF0ZSh2YWx1ZXMpIHx8XG4gICAgICAgIHZhbHVlcy56IHx8XG4gICAgICAgIHZhbHVlcy5yb3RhdGUgfHxcbiAgICAgICAgdmFsdWVzLnJvdGF0ZVggfHxcbiAgICAgICAgdmFsdWVzLnJvdGF0ZVkpO1xufVxuZnVuY3Rpb24gaGFzMkRUcmFuc2xhdGUodmFsdWVzKSB7XG4gICAgcmV0dXJuIGlzMkRUcmFuc2xhdGUodmFsdWVzLngpIHx8IGlzMkRUcmFuc2xhdGUodmFsdWVzLnkpO1xufVxuZnVuY3Rpb24gaXMyRFRyYW5zbGF0ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB2YWx1ZSAhPT0gXCIwJVwiO1xufVxuXG5leHBvcnQgeyBoYXMyRFRyYW5zbGF0ZSwgaGFzU2NhbGUsIGhhc1RyYW5zZm9ybSB9O1xuIiwiaW1wb3J0IHsgbWl4IH0gZnJvbSAnLi4vLi4vdXRpbHMvbWl4Lm1qcyc7XG5pbXBvcnQgeyBoYXNUcmFuc2Zvcm0gfSBmcm9tICcuLi91dGlscy9oYXMtdHJhbnNmb3JtLm1qcyc7XG5cbi8qKlxuICogU2NhbGVzIGEgcG9pbnQgYmFzZWQgb24gYSBmYWN0b3IgYW5kIGFuIG9yaWdpblBvaW50XG4gKi9cbmZ1bmN0aW9uIHNjYWxlUG9pbnQocG9pbnQsIHNjYWxlLCBvcmlnaW5Qb2ludCkge1xuICAgIGNvbnN0IGRpc3RhbmNlRnJvbU9yaWdpbiA9IHBvaW50IC0gb3JpZ2luUG9pbnQ7XG4gICAgY29uc3Qgc2NhbGVkID0gc2NhbGUgKiBkaXN0YW5jZUZyb21PcmlnaW47XG4gICAgcmV0dXJuIG9yaWdpblBvaW50ICsgc2NhbGVkO1xufVxuLyoqXG4gKiBBcHBsaWVzIGEgdHJhbnNsYXRlL3NjYWxlIGRlbHRhIHRvIGEgcG9pbnRcbiAqL1xuZnVuY3Rpb24gYXBwbHlQb2ludERlbHRhKHBvaW50LCB0cmFuc2xhdGUsIHNjYWxlLCBvcmlnaW5Qb2ludCwgYm94U2NhbGUpIHtcbiAgICBpZiAoYm94U2NhbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwb2ludCA9IHNjYWxlUG9pbnQocG9pbnQsIGJveFNjYWxlLCBvcmlnaW5Qb2ludCk7XG4gICAgfVxuICAgIHJldHVybiBzY2FsZVBvaW50KHBvaW50LCBzY2FsZSwgb3JpZ2luUG9pbnQpICsgdHJhbnNsYXRlO1xufVxuLyoqXG4gKiBBcHBsaWVzIGEgdHJhbnNsYXRlL3NjYWxlIGRlbHRhIHRvIGFuIGF4aXNcbiAqL1xuZnVuY3Rpb24gYXBwbHlBeGlzRGVsdGEoYXhpcywgdHJhbnNsYXRlID0gMCwgc2NhbGUgPSAxLCBvcmlnaW5Qb2ludCwgYm94U2NhbGUpIHtcbiAgICBheGlzLm1pbiA9IGFwcGx5UG9pbnREZWx0YShheGlzLm1pbiwgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luUG9pbnQsIGJveFNjYWxlKTtcbiAgICBheGlzLm1heCA9IGFwcGx5UG9pbnREZWx0YShheGlzLm1heCwgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luUG9pbnQsIGJveFNjYWxlKTtcbn1cbi8qKlxuICogQXBwbGllcyBhIHRyYW5zbGF0ZS9zY2FsZSBkZWx0YSB0byBhIGJveFxuICovXG5mdW5jdGlvbiBhcHBseUJveERlbHRhKGJveCwgeyB4LCB5IH0pIHtcbiAgICBhcHBseUF4aXNEZWx0YShib3gueCwgeC50cmFuc2xhdGUsIHguc2NhbGUsIHgub3JpZ2luUG9pbnQpO1xuICAgIGFwcGx5QXhpc0RlbHRhKGJveC55LCB5LnRyYW5zbGF0ZSwgeS5zY2FsZSwgeS5vcmlnaW5Qb2ludCk7XG59XG4vKipcbiAqIEFwcGx5IGEgdHJlZSBvZiBkZWx0YXMgdG8gYSBib3guIFdlIGRvIHRoaXMgdG8gY2FsY3VsYXRlIHRoZSBlZmZlY3Qgb2YgYWxsIHRoZSB0cmFuc2Zvcm1zXG4gKiBpbiBhIHRyZWUgdXBvbiBvdXIgYm94IGJlZm9yZSB0aGVuIGNhbGN1bGF0aW5nIGhvdyB0byBwcm9qZWN0IGl0IGludG8gb3VyIGRlc2lyZWQgdmlld3BvcnQtcmVsYXRpdmUgYm94XG4gKlxuICogVGhpcyBpcyB0aGUgZmluYWwgbmVzdGVkIGxvb3Agd2l0aGluIHVwZGF0ZUxheW91dERlbHRhIGZvciBmdXR1cmUgcmVmYWN0b3JpbmdcbiAqL1xuZnVuY3Rpb24gYXBwbHlUcmVlRGVsdGFzKGJveCwgdHJlZVNjYWxlLCB0cmVlUGF0aCwgaXNTaGFyZWRUcmFuc2l0aW9uID0gZmFsc2UpIHtcbiAgICBjb25zdCB0cmVlTGVuZ3RoID0gdHJlZVBhdGgubGVuZ3RoO1xuICAgIGlmICghdHJlZUxlbmd0aClcbiAgICAgICAgcmV0dXJuO1xuICAgIC8vIFJlc2V0IHRoZSB0cmVlU2NhbGVcbiAgICB0cmVlU2NhbGUueCA9IHRyZWVTY2FsZS55ID0gMTtcbiAgICBsZXQgbm9kZTtcbiAgICBsZXQgZGVsdGE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmVlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbm9kZSA9IHRyZWVQYXRoW2ldO1xuICAgICAgICBkZWx0YSA9IG5vZGUucHJvamVjdGlvbkRlbHRhO1xuICAgICAgICAvKipcbiAgICAgICAgICogVE9ETzogUHJlZmVyIHRvIHJlbW92ZSB0aGlzLCBidXQgY3VycmVudGx5IHdlIGhhdmUgbW90aW9uIGNvbXBvbmVudHMgd2l0aFxuICAgICAgICAgKiBkaXNwbGF5OiBjb250ZW50cyBpbiBGcmFtZXIuXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IG5vZGUuaW5zdGFuY2U7XG4gICAgICAgIGlmIChpbnN0YW5jZSAmJlxuICAgICAgICAgICAgaW5zdGFuY2Uuc3R5bGUgJiZcbiAgICAgICAgICAgIGluc3RhbmNlLnN0eWxlLmRpc3BsYXkgPT09IFwiY29udGVudHNcIikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU2hhcmVkVHJhbnNpdGlvbiAmJlxuICAgICAgICAgICAgbm9kZS5vcHRpb25zLmxheW91dFNjcm9sbCAmJlxuICAgICAgICAgICAgbm9kZS5zY3JvbGwgJiZcbiAgICAgICAgICAgIG5vZGUgIT09IG5vZGUucm9vdCkge1xuICAgICAgICAgICAgdHJhbnNmb3JtQm94KGJveCwge1xuICAgICAgICAgICAgICAgIHg6IC1ub2RlLnNjcm9sbC5vZmZzZXQueCxcbiAgICAgICAgICAgICAgICB5OiAtbm9kZS5zY3JvbGwub2Zmc2V0LnksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVsdGEpIHtcbiAgICAgICAgICAgIC8vIEluY29wb3JhdGUgZWFjaCBhbmNlc3RvcidzIHNjYWxlIGludG8gYSBjdWxtdWxhdGl2ZSB0cmVlU2NhbGUgZm9yIHRoaXMgY29tcG9uZW50XG4gICAgICAgICAgICB0cmVlU2NhbGUueCAqPSBkZWx0YS54LnNjYWxlO1xuICAgICAgICAgICAgdHJlZVNjYWxlLnkgKj0gZGVsdGEueS5zY2FsZTtcbiAgICAgICAgICAgIC8vIEFwcGx5IGVhY2ggYW5jZXN0b3IncyBjYWxjdWxhdGVkIGRlbHRhIGludG8gdGhpcyBjb21wb25lbnQncyByZWNvcmRlZCBsYXlvdXQgYm94XG4gICAgICAgICAgICBhcHBseUJveERlbHRhKGJveCwgZGVsdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1NoYXJlZFRyYW5zaXRpb24gJiYgaGFzVHJhbnNmb3JtKG5vZGUubGF0ZXN0VmFsdWVzKSkge1xuICAgICAgICAgICAgdHJhbnNmb3JtQm94KGJveCwgbm9kZS5sYXRlc3RWYWx1ZXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNuYXAgdHJlZSBzY2FsZSBiYWNrIHRvIDEgaWYgaXQncyB3aXRoaW4gYSBub24tcGVyY2VpdmFibGUgdGhyZXNob2xkLlxuICAgICAqIFRoaXMgd2lsbCBoZWxwIHJlZHVjZSB1c2VsZXNzIHNjYWxlcyBnZXR0aW5nIHJlbmRlcmVkLlxuICAgICAqL1xuICAgIHRyZWVTY2FsZS54ID0gc25hcFRvRGVmYXVsdCh0cmVlU2NhbGUueCk7XG4gICAgdHJlZVNjYWxlLnkgPSBzbmFwVG9EZWZhdWx0KHRyZWVTY2FsZS55KTtcbn1cbmZ1bmN0aW9uIHNuYXBUb0RlZmF1bHQoc2NhbGUpIHtcbiAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihzY2FsZSkpXG4gICAgICAgIHJldHVybiBzY2FsZTtcbiAgICByZXR1cm4gc2NhbGUgPiAxLjAwMDAwMDAwMDAwMDEgfHwgc2NhbGUgPCAwLjk5OTk5OTk5OTk5OSA/IHNjYWxlIDogMTtcbn1cbmZ1bmN0aW9uIHRyYW5zbGF0ZUF4aXMoYXhpcywgZGlzdGFuY2UpIHtcbiAgICBheGlzLm1pbiA9IGF4aXMubWluICsgZGlzdGFuY2U7XG4gICAgYXhpcy5tYXggPSBheGlzLm1heCArIGRpc3RhbmNlO1xufVxuLyoqXG4gKiBBcHBseSBhIHRyYW5zZm9ybSB0byBhbiBheGlzIGZyb20gdGhlIGxhdGVzdCByZXNvbHZlZCBtb3Rpb24gdmFsdWVzLlxuICogVGhpcyBmdW5jdGlvbiBiYXNpY2FsbHkgYWN0cyBhcyBhIGJyaWRnZSBiZXR3ZWVuIGEgZmxhdCBtb3Rpb24gdmFsdWUgbWFwXG4gKiBhbmQgYXBwbHlBeGlzRGVsdGFcbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtQXhpcyhheGlzLCB0cmFuc2Zvcm1zLCBba2V5LCBzY2FsZUtleSwgb3JpZ2luS2V5XSkge1xuICAgIGNvbnN0IGF4aXNPcmlnaW4gPSB0cmFuc2Zvcm1zW29yaWdpbktleV0gIT09IHVuZGVmaW5lZCA/IHRyYW5zZm9ybXNbb3JpZ2luS2V5XSA6IDAuNTtcbiAgICBjb25zdCBvcmlnaW5Qb2ludCA9IG1peChheGlzLm1pbiwgYXhpcy5tYXgsIGF4aXNPcmlnaW4pO1xuICAgIC8vIEFwcGx5IHRoZSBheGlzIGRlbHRhIHRvIHRoZSBmaW5hbCBheGlzXG4gICAgYXBwbHlBeGlzRGVsdGEoYXhpcywgdHJhbnNmb3Jtc1trZXldLCB0cmFuc2Zvcm1zW3NjYWxlS2V5XSwgb3JpZ2luUG9pbnQsIHRyYW5zZm9ybXMuc2NhbGUpO1xufVxuLyoqXG4gKiBUaGUgbmFtZXMgb2YgdGhlIG1vdGlvbiB2YWx1ZXMgd2Ugd2FudCB0byBhcHBseSBhcyB0cmFuc2xhdGlvbiwgc2NhbGUgYW5kIG9yaWdpbi5cbiAqL1xuY29uc3QgeEtleXMgPSBbXCJ4XCIsIFwic2NhbGVYXCIsIFwib3JpZ2luWFwiXTtcbmNvbnN0IHlLZXlzID0gW1wieVwiLCBcInNjYWxlWVwiLCBcIm9yaWdpbllcIl07XG4vKipcbiAqIEFwcGx5IGEgdHJhbnNmb3JtIHRvIGEgYm94IGZyb20gdGhlIGxhdGVzdCByZXNvbHZlZCBtb3Rpb24gdmFsdWVzLlxuICovXG5mdW5jdGlvbiB0cmFuc2Zvcm1Cb3goYm94LCB0cmFuc2Zvcm0pIHtcbiAgICB0cmFuc2Zvcm1BeGlzKGJveC54LCB0cmFuc2Zvcm0sIHhLZXlzKTtcbiAgICB0cmFuc2Zvcm1BeGlzKGJveC55LCB0cmFuc2Zvcm0sIHlLZXlzKTtcbn1cblxuZXhwb3J0IHsgYXBwbHlBeGlzRGVsdGEsIGFwcGx5Qm94RGVsdGEsIGFwcGx5UG9pbnREZWx0YSwgYXBwbHlUcmVlRGVsdGFzLCBzY2FsZVBvaW50LCB0cmFuc2Zvcm1BeGlzLCB0cmFuc2Zvcm1Cb3gsIHRyYW5zbGF0ZUF4aXMgfTtcbiIsImltcG9ydCB7IGNvbnZlcnRCb3VuZGluZ0JveFRvQm94LCB0cmFuc2Zvcm1Cb3hQb2ludHMgfSBmcm9tICcuLi9nZW9tZXRyeS9jb252ZXJzaW9uLm1qcyc7XG5pbXBvcnQgeyB0cmFuc2xhdGVBeGlzIH0gZnJvbSAnLi4vZ2VvbWV0cnkvZGVsdGEtYXBwbHkubWpzJztcblxuZnVuY3Rpb24gbWVhc3VyZVZpZXdwb3J0Qm94KGluc3RhbmNlLCB0cmFuc2Zvcm1Qb2ludCkge1xuICAgIHJldHVybiBjb252ZXJ0Qm91bmRpbmdCb3hUb0JveCh0cmFuc2Zvcm1Cb3hQb2ludHMoaW5zdGFuY2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHRyYW5zZm9ybVBvaW50KSk7XG59XG5mdW5jdGlvbiBtZWFzdXJlUGFnZUJveChlbGVtZW50LCByb290UHJvamVjdGlvbk5vZGUsIHRyYW5zZm9ybVBhZ2VQb2ludCkge1xuICAgIGNvbnN0IHZpZXdwb3J0Qm94ID0gbWVhc3VyZVZpZXdwb3J0Qm94KGVsZW1lbnQsIHRyYW5zZm9ybVBhZ2VQb2ludCk7XG4gICAgY29uc3QgeyBzY3JvbGwgfSA9IHJvb3RQcm9qZWN0aW9uTm9kZTtcbiAgICBpZiAoc2Nyb2xsKSB7XG4gICAgICAgIHRyYW5zbGF0ZUF4aXModmlld3BvcnRCb3gueCwgc2Nyb2xsLm9mZnNldC54KTtcbiAgICAgICAgdHJhbnNsYXRlQXhpcyh2aWV3cG9ydEJveC55LCBzY3JvbGwub2Zmc2V0LnkpO1xuICAgIH1cbiAgICByZXR1cm4gdmlld3BvcnRCb3g7XG59XG5cbmV4cG9ydCB7IG1lYXN1cmVQYWdlQm94LCBtZWFzdXJlVmlld3BvcnRCb3ggfTtcbiIsImltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJy4uLy4uL3V0aWxzL2Vycm9ycy5tanMnO1xuaW1wb3J0IHsgUGFuU2Vzc2lvbiB9IGZyb20gJy4uL3Bhbi9QYW5TZXNzaW9uLm1qcyc7XG5pbXBvcnQgeyBnZXRHbG9iYWxMb2NrIH0gZnJvbSAnLi91dGlscy9sb2NrLm1qcyc7XG5pbXBvcnQgeyBpc1JlZk9iamVjdCB9IGZyb20gJy4uLy4uL3V0aWxzL2lzLXJlZi1vYmplY3QubWpzJztcbmltcG9ydCB7IGFkZFBvaW50ZXJFdmVudCB9IGZyb20gJy4uLy4uL2V2ZW50cy9hZGQtcG9pbnRlci1ldmVudC5tanMnO1xuaW1wb3J0IHsgYXBwbHlDb25zdHJhaW50cywgY2FsY1JlbGF0aXZlQ29uc3RyYWludHMsIHJlc29sdmVEcmFnRWxhc3RpYywgY2FsY1ZpZXdwb3J0Q29uc3RyYWludHMsIGRlZmF1bHRFbGFzdGljLCByZWJhc2VBeGlzQ29uc3RyYWludHMsIGNhbGNPcmlnaW4gfSBmcm9tICcuL3V0aWxzL2NvbnN0cmFpbnRzLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVCb3ggfSBmcm9tICcuLi8uLi9wcm9qZWN0aW9uL2dlb21ldHJ5L21vZGVscy5tanMnO1xuaW1wb3J0IHsgZWFjaEF4aXMgfSBmcm9tICcuLi8uLi9wcm9qZWN0aW9uL3V0aWxzL2VhY2gtYXhpcy5tanMnO1xuaW1wb3J0IHsgbWVhc3VyZVBhZ2VCb3ggfSBmcm9tICcuLi8uLi9wcm9qZWN0aW9uL3V0aWxzL21lYXN1cmUubWpzJztcbmltcG9ydCB7IGV4dHJhY3RFdmVudEluZm8gfSBmcm9tICcuLi8uLi9ldmVudHMvZXZlbnQtaW5mby5tanMnO1xuaW1wb3J0IHsgY29udmVydEJveFRvQm91bmRpbmdCb3gsIGNvbnZlcnRCb3VuZGluZ0JveFRvQm94IH0gZnJvbSAnLi4vLi4vcHJvamVjdGlvbi9nZW9tZXRyeS9jb252ZXJzaW9uLm1qcyc7XG5pbXBvcnQgeyBhZGREb21FdmVudCB9IGZyb20gJy4uLy4uL2V2ZW50cy9hZGQtZG9tLWV2ZW50Lm1qcyc7XG5pbXBvcnQgeyBjYWxjTGVuZ3RoIH0gZnJvbSAnLi4vLi4vcHJvamVjdGlvbi9nZW9tZXRyeS9kZWx0YS1jYWxjLm1qcyc7XG5pbXBvcnQgeyBtaXggfSBmcm9tICcuLi8uLi91dGlscy9taXgubWpzJztcbmltcG9ydCB7IHBlcmNlbnQgfSBmcm9tICcuLi8uLi92YWx1ZS90eXBlcy9udW1iZXJzL3VuaXRzLm1qcyc7XG5pbXBvcnQgeyBhbmltYXRlTW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi9hbmltYXRpb24vaW50ZXJmYWNlcy9tb3Rpb24tdmFsdWUubWpzJztcbmltcG9ydCB7IGZyYW1lIH0gZnJvbSAnLi4vLi4vZnJhbWVsb29wL2ZyYW1lLm1qcyc7XG5cbmNvbnN0IGVsZW1lbnREcmFnQ29udHJvbHMgPSBuZXcgV2Vha01hcCgpO1xuLyoqXG4gKlxuICovXG4vLyBsZXQgbGF0ZXN0UG9pbnRlckV2ZW50OiBQb2ludGVyRXZlbnRcbmNsYXNzIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMge1xuICAgIGNvbnN0cnVjdG9yKHZpc3VhbEVsZW1lbnQpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIGRyYWcgZ2VzdHVyZSBsb2NrLCBlbnN1cmluZyBvbmx5IG9uZSBjb21wb25lbnRcbiAgICAgICAgLy8gY2FuIFwiY2FwdHVyZVwiIHRoZSBkcmFnIG9mIG9uZSBvciBib3RoIGF4ZXMuXG4gICAgICAgIC8vIFRPRE86IExvb2sgaW50byBtb3ZpbmcgdGhpcyBpbnRvIHBhbnNlc3Npb24/XG4gICAgICAgIHRoaXMub3Blbkdsb2JhbExvY2sgPSBudWxsO1xuICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jdXJyZW50RGlyZWN0aW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5vcmlnaW5Qb2ludCA9IHsgeDogMCwgeTogMCB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHBlcm1pdHRlZCBib3VuZGFyaWVzIG9mIHRyYXZlbCwgaW4gcGl4ZWxzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb25zdHJhaW50cyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmhhc011dGF0ZWRDb25zdHJhaW50cyA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHBlci1heGlzIHJlc29sdmVkIGVsYXN0aWMgdmFsdWVzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5lbGFzdGljID0gY3JlYXRlQm94KCk7XG4gICAgICAgIHRoaXMudmlzdWFsRWxlbWVudCA9IHZpc3VhbEVsZW1lbnQ7XG4gICAgfVxuICAgIHN0YXJ0KG9yaWdpbkV2ZW50LCB7IHNuYXBUb0N1cnNvciA9IGZhbHNlIH0gPSB7fSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogRG9uJ3Qgc3RhcnQgZHJhZ2dpbmcgaWYgdGhpcyBjb21wb25lbnQgaXMgZXhpdGluZ1xuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgeyBwcmVzZW5jZUNvbnRleHQgfSA9IHRoaXMudmlzdWFsRWxlbWVudDtcbiAgICAgICAgaWYgKHByZXNlbmNlQ29udGV4dCAmJiBwcmVzZW5jZUNvbnRleHQuaXNQcmVzZW50ID09PSBmYWxzZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3Qgb25TZXNzaW9uU3RhcnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIC8vIFN0b3AgYW55IGFuaW1hdGlvbnMgb24gYm90aCBheGlzIHZhbHVlcyBpbW1lZGlhdGVseS4gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gdGhyb3cgYW5kIGNhdGNoXG4gICAgICAgICAgICAvLyB0aGUgY29tcG9uZW50LlxuICAgICAgICAgICAgdGhpcy5zdG9wQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICBpZiAoc25hcFRvQ3Vyc29yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zbmFwVG9DdXJzb3IoZXh0cmFjdEV2ZW50SW5mbyhldmVudCwgXCJwYWdlXCIpLnBvaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgb25TdGFydCA9IChldmVudCwgaW5mbykgPT4ge1xuICAgICAgICAgICAgLy8gQXR0ZW1wdCB0byBncmFiIHRoZSBnbG9iYWwgZHJhZyBnZXN0dXJlIGxvY2sgLSBtYXliZSBtYWtlIHRoaXMgcGFydCBvZiBQYW5TZXNzaW9uXG4gICAgICAgICAgICBjb25zdCB7IGRyYWcsIGRyYWdQcm9wYWdhdGlvbiwgb25EcmFnU3RhcnQgfSA9IHRoaXMuZ2V0UHJvcHMoKTtcbiAgICAgICAgICAgIGlmIChkcmFnICYmICFkcmFnUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcGVuR2xvYmFsTG9jaylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGVuR2xvYmFsTG9jaygpO1xuICAgICAgICAgICAgICAgIHRoaXMub3Blbkdsb2JhbExvY2sgPSBnZXRHbG9iYWxMb2NrKGRyYWcpO1xuICAgICAgICAgICAgICAgIC8vIElmIHdlIGRvbiAndCBoYXZlIHRoZSBsb2NrLCBkb24ndCBzdGFydCBkcmFnZ2luZ1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcGVuR2xvYmFsTG9jaylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudERpcmVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmVDb25zdHJhaW50cygpO1xuICAgICAgICAgICAgaWYgKHRoaXMudmlzdWFsRWxlbWVudC5wcm9qZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52aXN1YWxFbGVtZW50LnByb2plY3Rpb24uaXNBbmltYXRpb25CbG9ja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnZpc3VhbEVsZW1lbnQucHJvamVjdGlvbi50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlY29yZCBnZXN0dXJlIG9yaWdpblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBlYWNoQXhpcygoYXhpcykgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50ID0gdGhpcy5nZXRBeGlzTW90aW9uVmFsdWUoYXhpcykuZ2V0KCkgfHwgMDtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBJZiB0aGUgTW90aW9uVmFsdWUgaXMgYSBwZXJjZW50YWdlIHZhbHVlIGNvbnZlcnQgdG8gcHhcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAocGVyY2VudC50ZXN0KGN1cnJlbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcHJvamVjdGlvbiB9ID0gdGhpcy52aXN1YWxFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJvamVjdGlvbiAmJiBwcm9qZWN0aW9uLmxheW91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVhc3VyZWRBeGlzID0gcHJvamVjdGlvbi5sYXlvdXQubGF5b3V0Qm94W2F4aXNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lYXN1cmVkQXhpcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGNhbGNMZW5ndGgobWVhc3VyZWRBeGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gbGVuZ3RoICogKHBhcnNlRmxvYXQoY3VycmVudCkgLyAxMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMub3JpZ2luUG9pbnRbYXhpc10gPSBjdXJyZW50O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBGaXJlIG9uRHJhZ1N0YXJ0IGV2ZW50XG4gICAgICAgICAgICBpZiAob25EcmFnU3RhcnQpIHtcbiAgICAgICAgICAgICAgICBmcmFtZS51cGRhdGUoKCkgPT4gb25EcmFnU3RhcnQoZXZlbnQsIGluZm8pLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IGFuaW1hdGlvblN0YXRlIH0gPSB0aGlzLnZpc3VhbEVsZW1lbnQ7XG4gICAgICAgICAgICBhbmltYXRpb25TdGF0ZSAmJiBhbmltYXRpb25TdGF0ZS5zZXRBY3RpdmUoXCJ3aGlsZURyYWdcIiwgdHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IG9uTW92ZSA9IChldmVudCwgaW5mbykgPT4ge1xuICAgICAgICAgICAgLy8gbGF0ZXN0UG9pbnRlckV2ZW50ID0gZXZlbnRcbiAgICAgICAgICAgIGNvbnN0IHsgZHJhZ1Byb3BhZ2F0aW9uLCBkcmFnRGlyZWN0aW9uTG9jaywgb25EaXJlY3Rpb25Mb2NrLCBvbkRyYWcsIH0gPSB0aGlzLmdldFByb3BzKCk7XG4gICAgICAgICAgICAvLyBJZiB3ZSBkaWRuJ3Qgc3VjY2Vzc2Z1bGx5IHJlY2VpdmUgdGhlIGdlc3R1cmUgbG9jaywgZWFybHkgcmV0dXJuLlxuICAgICAgICAgICAgaWYgKCFkcmFnUHJvcGFnYXRpb24gJiYgIXRoaXMub3Blbkdsb2JhbExvY2spXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgeyBvZmZzZXQgfSA9IGluZm87XG4gICAgICAgICAgICAvLyBBdHRlbXB0IHRvIGRldGVjdCBkcmFnIGRpcmVjdGlvbiBpZiBkaXJlY3Rpb25Mb2NrIGlzIHRydWVcbiAgICAgICAgICAgIGlmIChkcmFnRGlyZWN0aW9uTG9jayAmJiB0aGlzLmN1cnJlbnREaXJlY3Rpb24gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnREaXJlY3Rpb24gPSBnZXRDdXJyZW50RGlyZWN0aW9uKG9mZnNldCk7XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UndmUgc3VjY2Vzc2Z1bGx5IHNldCBhIGRpcmVjdGlvbiwgbm90aWZ5IGxpc3RlbmVyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudERpcmVjdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBvbkRpcmVjdGlvbkxvY2sgJiYgb25EaXJlY3Rpb25Mb2NrKHRoaXMuY3VycmVudERpcmVjdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBlYWNoIHBvaW50IHdpdGggdGhlIGxhdGVzdCBwb3NpdGlvblxuICAgICAgICAgICAgdGhpcy51cGRhdGVBeGlzKFwieFwiLCBpbmZvLnBvaW50LCBvZmZzZXQpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVBeGlzKFwieVwiLCBpbmZvLnBvaW50LCBvZmZzZXQpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZGVhbGx5IHdlIHdvdWxkIGxlYXZlIHRoZSByZW5kZXJlciB0byBmaXJlIG5hdHVyYWxseSBhdCB0aGUgZW5kIG9mXG4gICAgICAgICAgICAgKiB0aGlzIGZyYW1lIGJ1dCBpZiB0aGUgZWxlbWVudCBpcyBhYm91dCB0byBjaGFuZ2UgbGF5b3V0IGFzIHRoZSByZXN1bHRcbiAgICAgICAgICAgICAqIG9mIGEgcmUtcmVuZGVyIHdlIHdhbnQgdG8gZW5zdXJlIHRoZSBicm93c2VyIGNhbiByZWFkIHRoZSBsYXRlc3RcbiAgICAgICAgICAgICAqIGJvdW5kaW5nIGJveCB0byBlbnN1cmUgdGhlIHBvaW50ZXIgYW5kIGVsZW1lbnQgZG9uJ3QgZmFsbCBvdXQgb2Ygc3luYy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy52aXN1YWxFbGVtZW50LnJlbmRlcigpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGlzIG11c3QgZmlyZSBhZnRlciB0aGUgcmVuZGVyIGNhbGwgYXMgaXQgbWlnaHQgdHJpZ2dlciBhIHN0YXRlXG4gICAgICAgICAgICAgKiBjaGFuZ2Ugd2hpY2ggaXRzZWxmIG1pZ2h0IHRyaWdnZXIgYSBsYXlvdXQgdXBkYXRlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBvbkRyYWcgJiYgb25EcmFnKGV2ZW50LCBpbmZvKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgb25TZXNzaW9uRW5kID0gKGV2ZW50LCBpbmZvKSA9PiB0aGlzLnN0b3AoZXZlbnQsIGluZm8pO1xuICAgICAgICB0aGlzLnBhblNlc3Npb24gPSBuZXcgUGFuU2Vzc2lvbihvcmlnaW5FdmVudCwge1xuICAgICAgICAgICAgb25TZXNzaW9uU3RhcnQsXG4gICAgICAgICAgICBvblN0YXJ0LFxuICAgICAgICAgICAgb25Nb3ZlLFxuICAgICAgICAgICAgb25TZXNzaW9uRW5kLFxuICAgICAgICB9LCB7IHRyYW5zZm9ybVBhZ2VQb2ludDogdGhpcy52aXN1YWxFbGVtZW50LmdldFRyYW5zZm9ybVBhZ2VQb2ludCgpIH0pO1xuICAgIH1cbiAgICBzdG9wKGV2ZW50LCBpbmZvKSB7XG4gICAgICAgIGNvbnN0IGlzRHJhZ2dpbmcgPSB0aGlzLmlzRHJhZ2dpbmc7XG4gICAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgICAgIGlmICghaXNEcmFnZ2luZylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgeyB2ZWxvY2l0eSB9ID0gaW5mbztcbiAgICAgICAgdGhpcy5zdGFydEFuaW1hdGlvbih2ZWxvY2l0eSk7XG4gICAgICAgIGNvbnN0IHsgb25EcmFnRW5kIH0gPSB0aGlzLmdldFByb3BzKCk7XG4gICAgICAgIGlmIChvbkRyYWdFbmQpIHtcbiAgICAgICAgICAgIGZyYW1lLnVwZGF0ZSgoKSA9PiBvbkRyYWdFbmQoZXZlbnQsIGluZm8pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYW5jZWwoKSB7XG4gICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICBjb25zdCB7IHByb2plY3Rpb24sIGFuaW1hdGlvblN0YXRlIH0gPSB0aGlzLnZpc3VhbEVsZW1lbnQ7XG4gICAgICAgIGlmIChwcm9qZWN0aW9uKSB7XG4gICAgICAgICAgICBwcm9qZWN0aW9uLmlzQW5pbWF0aW9uQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFuU2Vzc2lvbiAmJiB0aGlzLnBhblNlc3Npb24uZW5kKCk7XG4gICAgICAgIHRoaXMucGFuU2Vzc2lvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgeyBkcmFnUHJvcGFnYXRpb24gfSA9IHRoaXMuZ2V0UHJvcHMoKTtcbiAgICAgICAgaWYgKCFkcmFnUHJvcGFnYXRpb24gJiYgdGhpcy5vcGVuR2xvYmFsTG9jaykge1xuICAgICAgICAgICAgdGhpcy5vcGVuR2xvYmFsTG9jaygpO1xuICAgICAgICAgICAgdGhpcy5vcGVuR2xvYmFsTG9jayA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgYW5pbWF0aW9uU3RhdGUgJiYgYW5pbWF0aW9uU3RhdGUuc2V0QWN0aXZlKFwid2hpbGVEcmFnXCIsIGZhbHNlKTtcbiAgICB9XG4gICAgdXBkYXRlQXhpcyhheGlzLCBfcG9pbnQsIG9mZnNldCkge1xuICAgICAgICBjb25zdCB7IGRyYWcgfSA9IHRoaXMuZ2V0UHJvcHMoKTtcbiAgICAgICAgLy8gSWYgd2UncmUgbm90IGRyYWdnaW5nIHRoaXMgYXhpcywgZG8gYW4gZWFybHkgcmV0dXJuLlxuICAgICAgICBpZiAoIW9mZnNldCB8fCAhc2hvdWxkRHJhZyhheGlzLCBkcmFnLCB0aGlzLmN1cnJlbnREaXJlY3Rpb24pKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBheGlzVmFsdWUgPSB0aGlzLmdldEF4aXNNb3Rpb25WYWx1ZShheGlzKTtcbiAgICAgICAgbGV0IG5leHQgPSB0aGlzLm9yaWdpblBvaW50W2F4aXNdICsgb2Zmc2V0W2F4aXNdO1xuICAgICAgICAvLyBBcHBseSBjb25zdHJhaW50c1xuICAgICAgICBpZiAodGhpcy5jb25zdHJhaW50cyAmJiB0aGlzLmNvbnN0cmFpbnRzW2F4aXNdKSB7XG4gICAgICAgICAgICBuZXh0ID0gYXBwbHlDb25zdHJhaW50cyhuZXh0LCB0aGlzLmNvbnN0cmFpbnRzW2F4aXNdLCB0aGlzLmVsYXN0aWNbYXhpc10pO1xuICAgICAgICB9XG4gICAgICAgIGF4aXNWYWx1ZS5zZXQobmV4dCk7XG4gICAgfVxuICAgIHJlc29sdmVDb25zdHJhaW50cygpIHtcbiAgICAgICAgY29uc3QgeyBkcmFnQ29uc3RyYWludHMsIGRyYWdFbGFzdGljIH0gPSB0aGlzLmdldFByb3BzKCk7XG4gICAgICAgIGNvbnN0IHsgbGF5b3V0IH0gPSB0aGlzLnZpc3VhbEVsZW1lbnQucHJvamVjdGlvbiB8fCB7fTtcbiAgICAgICAgY29uc3QgcHJldkNvbnN0cmFpbnRzID0gdGhpcy5jb25zdHJhaW50cztcbiAgICAgICAgaWYgKGRyYWdDb25zdHJhaW50cyAmJiBpc1JlZk9iamVjdChkcmFnQ29uc3RyYWludHMpKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuY29uc3RyYWludHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnN0cmFpbnRzID0gdGhpcy5yZXNvbHZlUmVmQ29uc3RyYWludHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkcmFnQ29uc3RyYWludHMgJiYgbGF5b3V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25zdHJhaW50cyA9IGNhbGNSZWxhdGl2ZUNvbnN0cmFpbnRzKGxheW91dC5sYXlvdXRCb3gsIGRyYWdDb25zdHJhaW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnN0cmFpbnRzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbGFzdGljID0gcmVzb2x2ZURyYWdFbGFzdGljKGRyYWdFbGFzdGljKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHdlJ3JlIG91dHB1dHRpbmcgdG8gZXh0ZXJuYWwgTW90aW9uVmFsdWVzLCB3ZSB3YW50IHRvIHJlYmFzZSB0aGUgbWVhc3VyZWQgY29uc3RyYWludHNcbiAgICAgICAgICogZnJvbSB2aWV3cG9ydC1yZWxhdGl2ZSB0byBjb21wb25lbnQtcmVsYXRpdmUuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAocHJldkNvbnN0cmFpbnRzICE9PSB0aGlzLmNvbnN0cmFpbnRzICYmXG4gICAgICAgICAgICBsYXlvdXQgJiZcbiAgICAgICAgICAgIHRoaXMuY29uc3RyYWludHMgJiZcbiAgICAgICAgICAgICF0aGlzLmhhc011dGF0ZWRDb25zdHJhaW50cykge1xuICAgICAgICAgICAgZWFjaEF4aXMoKGF4aXMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXRBeGlzTW90aW9uVmFsdWUoYXhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25zdHJhaW50c1theGlzXSA9IHJlYmFzZUF4aXNDb25zdHJhaW50cyhsYXlvdXQubGF5b3V0Qm94W2F4aXNdLCB0aGlzLmNvbnN0cmFpbnRzW2F4aXNdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXNvbHZlUmVmQ29uc3RyYWludHMoKSB7XG4gICAgICAgIGNvbnN0IHsgZHJhZ0NvbnN0cmFpbnRzOiBjb25zdHJhaW50cywgb25NZWFzdXJlRHJhZ0NvbnN0cmFpbnRzIH0gPSB0aGlzLmdldFByb3BzKCk7XG4gICAgICAgIGlmICghY29uc3RyYWludHMgfHwgIWlzUmVmT2JqZWN0KGNvbnN0cmFpbnRzKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3QgY29uc3RyYWludHNFbGVtZW50ID0gY29uc3RyYWludHMuY3VycmVudDtcbiAgICAgICAgaW52YXJpYW50KGNvbnN0cmFpbnRzRWxlbWVudCAhPT0gbnVsbCwgXCJJZiBgZHJhZ0NvbnN0cmFpbnRzYCBpcyBzZXQgYXMgYSBSZWFjdCByZWYsIHRoYXQgcmVmIG11c3QgYmUgcGFzc2VkIHRvIGFub3RoZXIgY29tcG9uZW50J3MgYHJlZmAgcHJvcC5cIik7XG4gICAgICAgIGNvbnN0IHsgcHJvamVjdGlvbiB9ID0gdGhpcy52aXN1YWxFbGVtZW50O1xuICAgICAgICAvLyBUT0RPXG4gICAgICAgIGlmICghcHJvamVjdGlvbiB8fCAhcHJvamVjdGlvbi5sYXlvdXQpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IGNvbnN0cmFpbnRzQm94ID0gbWVhc3VyZVBhZ2VCb3goY29uc3RyYWludHNFbGVtZW50LCBwcm9qZWN0aW9uLnJvb3QsIHRoaXMudmlzdWFsRWxlbWVudC5nZXRUcmFuc2Zvcm1QYWdlUG9pbnQoKSk7XG4gICAgICAgIGxldCBtZWFzdXJlZENvbnN0cmFpbnRzID0gY2FsY1ZpZXdwb3J0Q29uc3RyYWludHMocHJvamVjdGlvbi5sYXlvdXQubGF5b3V0Qm94LCBjb25zdHJhaW50c0JveCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGVyZSdzIGFuIG9uTWVhc3VyZURyYWdDb25zdHJhaW50cyBsaXN0ZW5lciB3ZSBjYWxsIGl0IGFuZFxuICAgICAgICAgKiBpZiBkaWZmZXJlbnQgY29uc3RyYWludHMgYXJlIHJldHVybmVkLCBzZXQgY29uc3RyYWludHMgdG8gdGhhdFxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKG9uTWVhc3VyZURyYWdDb25zdHJhaW50cykge1xuICAgICAgICAgICAgY29uc3QgdXNlckNvbnN0cmFpbnRzID0gb25NZWFzdXJlRHJhZ0NvbnN0cmFpbnRzKGNvbnZlcnRCb3hUb0JvdW5kaW5nQm94KG1lYXN1cmVkQ29uc3RyYWludHMpKTtcbiAgICAgICAgICAgIHRoaXMuaGFzTXV0YXRlZENvbnN0cmFpbnRzID0gISF1c2VyQ29uc3RyYWludHM7XG4gICAgICAgICAgICBpZiAodXNlckNvbnN0cmFpbnRzKSB7XG4gICAgICAgICAgICAgICAgbWVhc3VyZWRDb25zdHJhaW50cyA9IGNvbnZlcnRCb3VuZGluZ0JveFRvQm94KHVzZXJDb25zdHJhaW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lYXN1cmVkQ29uc3RyYWludHM7XG4gICAgfVxuICAgIHN0YXJ0QW5pbWF0aW9uKHZlbG9jaXR5KSB7XG4gICAgICAgIGNvbnN0IHsgZHJhZywgZHJhZ01vbWVudHVtLCBkcmFnRWxhc3RpYywgZHJhZ1RyYW5zaXRpb24sIGRyYWdTbmFwVG9PcmlnaW4sIG9uRHJhZ1RyYW5zaXRpb25FbmQsIH0gPSB0aGlzLmdldFByb3BzKCk7XG4gICAgICAgIGNvbnN0IGNvbnN0cmFpbnRzID0gdGhpcy5jb25zdHJhaW50cyB8fCB7fTtcbiAgICAgICAgY29uc3QgbW9tZW50dW1BbmltYXRpb25zID0gZWFjaEF4aXMoKGF4aXMpID0+IHtcbiAgICAgICAgICAgIGlmICghc2hvdWxkRHJhZyhheGlzLCBkcmFnLCB0aGlzLmN1cnJlbnREaXJlY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHRyYW5zaXRpb24gPSAoY29uc3RyYWludHMgJiYgY29uc3RyYWludHNbYXhpc10pIHx8IHt9O1xuICAgICAgICAgICAgaWYgKGRyYWdTbmFwVG9PcmlnaW4pXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbiA9IHsgbWluOiAwLCBtYXg6IDAgfTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogT3ZlcmRhbXAgdGhlIGJvdW5kYXJ5IHNwcmluZyBpZiBgZHJhZ0VsYXN0aWNgIGlzIGRpc2FibGVkLiBUaGVyZSdzIHN0aWxsIGEgZnJhbWVcbiAgICAgICAgICAgICAqIG9mIHNwcmluZyBhbmltYXRpb25zIHNvIHdlIHNob3VsZCBsb29rIGludG8gYWRkaW5nIGEgZGlzYWJsZSBzcHJpbmcgb3B0aW9uIHRvIGBpbmVydGlhYC5cbiAgICAgICAgICAgICAqIFdlIGNvdWxkIGRvIHNvbWV0aGluZyBoZXJlIHdoZXJlIHdlIGFmZmVjdCB0aGUgYGJvdW5jZVN0aWZmbmVzc2AgYW5kIGBib3VuY2VEYW1waW5nYFxuICAgICAgICAgICAgICogdXNpbmcgdGhlIHZhbHVlIG9mIGBkcmFnRWxhc3RpY2AuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IGJvdW5jZVN0aWZmbmVzcyA9IGRyYWdFbGFzdGljID8gMjAwIDogMTAwMDAwMDtcbiAgICAgICAgICAgIGNvbnN0IGJvdW5jZURhbXBpbmcgPSBkcmFnRWxhc3RpYyA/IDQwIDogMTAwMDAwMDA7XG4gICAgICAgICAgICBjb25zdCBpbmVydGlhID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiaW5lcnRpYVwiLFxuICAgICAgICAgICAgICAgIHZlbG9jaXR5OiBkcmFnTW9tZW50dW0gPyB2ZWxvY2l0eVtheGlzXSA6IDAsXG4gICAgICAgICAgICAgICAgYm91bmNlU3RpZmZuZXNzLFxuICAgICAgICAgICAgICAgIGJvdW5jZURhbXBpbmcsXG4gICAgICAgICAgICAgICAgdGltZUNvbnN0YW50OiA3NTAsXG4gICAgICAgICAgICAgICAgcmVzdERlbHRhOiAxLFxuICAgICAgICAgICAgICAgIHJlc3RTcGVlZDogMTAsXG4gICAgICAgICAgICAgICAgLi4uZHJhZ1RyYW5zaXRpb24sXG4gICAgICAgICAgICAgICAgLi4udHJhbnNpdGlvbixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBJZiB3ZSdyZSBub3QgYW5pbWF0aW5nIG9uIGFuIGV4dGVybmFsbHktcHJvdmlkZWQgYE1vdGlvblZhbHVlYCB3ZSBjYW4gdXNlIHRoZVxuICAgICAgICAgICAgLy8gY29tcG9uZW50J3MgYW5pbWF0aW9uIGNvbnRyb2xzIHdoaWNoIHdpbGwgaGFuZGxlIGludGVyYWN0aW9ucyB3aXRoIHdoaWxlSG92ZXIgKGV0YyksXG4gICAgICAgICAgICAvLyBvdGhlcndpc2Ugd2UganVzdCBoYXZlIHRvIGFuaW1hdGUgdGhlIGBNb3Rpb25WYWx1ZWAgaXRzZWxmLlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnRBeGlzVmFsdWVBbmltYXRpb24oYXhpcywgaW5lcnRpYSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBSdW4gYWxsIGFuaW1hdGlvbnMgYW5kIHRoZW4gcmVzb2x2ZSB0aGUgbmV3IGRyYWcgY29uc3RyYWludHMuXG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChtb21lbnR1bUFuaW1hdGlvbnMpLnRoZW4ob25EcmFnVHJhbnNpdGlvbkVuZCk7XG4gICAgfVxuICAgIHN0YXJ0QXhpc1ZhbHVlQW5pbWF0aW9uKGF4aXMsIHRyYW5zaXRpb24pIHtcbiAgICAgICAgY29uc3QgYXhpc1ZhbHVlID0gdGhpcy5nZXRBeGlzTW90aW9uVmFsdWUoYXhpcyk7XG4gICAgICAgIHJldHVybiBheGlzVmFsdWUuc3RhcnQoYW5pbWF0ZU1vdGlvblZhbHVlKGF4aXMsIGF4aXNWYWx1ZSwgMCwgdHJhbnNpdGlvbikpO1xuICAgIH1cbiAgICBzdG9wQW5pbWF0aW9uKCkge1xuICAgICAgICBlYWNoQXhpcygoYXhpcykgPT4gdGhpcy5nZXRBeGlzTW90aW9uVmFsdWUoYXhpcykuc3RvcCgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRHJhZyB3b3JrcyBkaWZmZXJlbnRseSBkZXBlbmRpbmcgb24gd2hpY2ggcHJvcHMgYXJlIHByb3ZpZGVkLlxuICAgICAqXG4gICAgICogLSBJZiBfZHJhZ1ggYW5kIF9kcmFnWSBhcmUgcHJvdmlkZWQsIHdlIG91dHB1dCB0aGUgZ2VzdHVyZSBkZWx0YSBkaXJlY3RseSB0byB0aG9zZSBtb3Rpb24gdmFsdWVzLlxuICAgICAqIC0gT3RoZXJ3aXNlLCB3ZSBhcHBseSB0aGUgZGVsdGEgdG8gdGhlIHgveSBtb3Rpb24gdmFsdWVzLlxuICAgICAqL1xuICAgIGdldEF4aXNNb3Rpb25WYWx1ZShheGlzKSB7XG4gICAgICAgIGNvbnN0IGRyYWdLZXkgPSBcIl9kcmFnXCIgKyBheGlzLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IHByb3BzID0gdGhpcy52aXN1YWxFbGVtZW50LmdldFByb3BzKCk7XG4gICAgICAgIGNvbnN0IGV4dGVybmFsTW90aW9uVmFsdWUgPSBwcm9wc1tkcmFnS2V5XTtcbiAgICAgICAgcmV0dXJuIGV4dGVybmFsTW90aW9uVmFsdWVcbiAgICAgICAgICAgID8gZXh0ZXJuYWxNb3Rpb25WYWx1ZVxuICAgICAgICAgICAgOiB0aGlzLnZpc3VhbEVsZW1lbnQuZ2V0VmFsdWUoYXhpcywgKHByb3BzLmluaXRpYWwgPyBwcm9wcy5pbml0aWFsW2F4aXNdIDogdW5kZWZpbmVkKSB8fCAwKTtcbiAgICB9XG4gICAgc25hcFRvQ3Vyc29yKHBvaW50KSB7XG4gICAgICAgIGVhY2hBeGlzKChheGlzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGRyYWcgfSA9IHRoaXMuZ2V0UHJvcHMoKTtcbiAgICAgICAgICAgIC8vIElmIHdlJ3JlIG5vdCBkcmFnZ2luZyB0aGlzIGF4aXMsIGRvIGFuIGVhcmx5IHJldHVybi5cbiAgICAgICAgICAgIGlmICghc2hvdWxkRHJhZyhheGlzLCBkcmFnLCB0aGlzLmN1cnJlbnREaXJlY3Rpb24pKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IHsgcHJvamVjdGlvbiB9ID0gdGhpcy52aXN1YWxFbGVtZW50O1xuICAgICAgICAgICAgY29uc3QgYXhpc1ZhbHVlID0gdGhpcy5nZXRBeGlzTW90aW9uVmFsdWUoYXhpcyk7XG4gICAgICAgICAgICBpZiAocHJvamVjdGlvbiAmJiBwcm9qZWN0aW9uLmxheW91dCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgbWluLCBtYXggfSA9IHByb2plY3Rpb24ubGF5b3V0LmxheW91dEJveFtheGlzXTtcbiAgICAgICAgICAgICAgICBheGlzVmFsdWUuc2V0KHBvaW50W2F4aXNdIC0gbWl4KG1pbiwgbWF4LCAwLjUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIHZpZXdwb3J0IHJlc2l6ZXMgd2Ugd2FudCB0byBjaGVjayBpZiB0aGUgbWVhc3VyZWQgY29uc3RyYWludHNcbiAgICAgKiBoYXZlIGNoYW5nZWQgYW5kLCBpZiBzbywgcmVwb3NpdGlvbiB0aGUgZWxlbWVudCB3aXRoaW4gdGhvc2UgbmV3IGNvbnN0cmFpbnRzXG4gICAgICogcmVsYXRpdmUgdG8gd2hlcmUgaXQgd2FzIGJlZm9yZSB0aGUgcmVzaXplLlxuICAgICAqL1xuICAgIHNjYWxlUG9zaXRpb25XaXRoaW5Db25zdHJhaW50cygpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZpc3VhbEVsZW1lbnQuY3VycmVudClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgeyBkcmFnLCBkcmFnQ29uc3RyYWludHMgfSA9IHRoaXMuZ2V0UHJvcHMoKTtcbiAgICAgICAgY29uc3QgeyBwcm9qZWN0aW9uIH0gPSB0aGlzLnZpc3VhbEVsZW1lbnQ7XG4gICAgICAgIGlmICghaXNSZWZPYmplY3QoZHJhZ0NvbnN0cmFpbnRzKSB8fCAhcHJvamVjdGlvbiB8fCAhdGhpcy5jb25zdHJhaW50cylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0b3AgY3VycmVudCBhbmltYXRpb25zIGFzIHRoZXJlIGNhbiBiZSB2aXN1YWwgZ2xpdGNoaW5nIGlmIHdlIHRyeSB0byBkb1xuICAgICAgICAgKiB0aGlzIG1pZC1hbmltYXRpb25cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RvcEFuaW1hdGlvbigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVjb3JkIHRoZSByZWxhdGl2ZSBwb3NpdGlvbiBvZiB0aGUgZHJhZ2dlZCBlbGVtZW50IHJlbGF0aXZlIHRvIHRoZVxuICAgICAgICAgKiBjb25zdHJhaW50cyBib3ggYW5kIHNhdmUgYXMgYSBwcm9ncmVzcyB2YWx1ZS5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IGJveFByb2dyZXNzID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIGVhY2hBeGlzKChheGlzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBheGlzVmFsdWUgPSB0aGlzLmdldEF4aXNNb3Rpb25WYWx1ZShheGlzKTtcbiAgICAgICAgICAgIGlmIChheGlzVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXRlc3QgPSBheGlzVmFsdWUuZ2V0KCk7XG4gICAgICAgICAgICAgICAgYm94UHJvZ3Jlc3NbYXhpc10gPSBjYWxjT3JpZ2luKHsgbWluOiBsYXRlc3QsIG1heDogbGF0ZXN0IH0sIHRoaXMuY29uc3RyYWludHNbYXhpc10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVwZGF0ZSB0aGUgbGF5b3V0IG9mIHRoaXMgZWxlbWVudCBhbmQgcmVzb2x2ZSB0aGUgbGF0ZXN0IGRyYWcgY29uc3RyYWludHNcbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IHsgdHJhbnNmb3JtVGVtcGxhdGUgfSA9IHRoaXMudmlzdWFsRWxlbWVudC5nZXRQcm9wcygpO1xuICAgICAgICB0aGlzLnZpc3VhbEVsZW1lbnQuY3VycmVudC5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1UZW1wbGF0ZVxuICAgICAgICAgICAgPyB0cmFuc2Zvcm1UZW1wbGF0ZSh7fSwgXCJcIilcbiAgICAgICAgICAgIDogXCJub25lXCI7XG4gICAgICAgIHByb2plY3Rpb24ucm9vdCAmJiBwcm9qZWN0aW9uLnJvb3QudXBkYXRlU2Nyb2xsKCk7XG4gICAgICAgIHByb2plY3Rpb24udXBkYXRlTGF5b3V0KCk7XG4gICAgICAgIHRoaXMucmVzb2x2ZUNvbnN0cmFpbnRzKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGb3IgZWFjaCBheGlzLCBjYWxjdWxhdGUgdGhlIGN1cnJlbnQgcHJvZ3Jlc3Mgb2YgdGhlIGxheW91dCBheGlzXG4gICAgICAgICAqIHdpdGhpbiB0aGUgbmV3IGNvbnN0cmFpbnRzLlxuICAgICAgICAgKi9cbiAgICAgICAgZWFjaEF4aXMoKGF4aXMpID0+IHtcbiAgICAgICAgICAgIGlmICghc2hvdWxkRHJhZyhheGlzLCBkcmFnLCBudWxsKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGN1bGF0ZSBhIG5ldyB0cmFuc2Zvcm0gYmFzZWQgb24gdGhlIHByZXZpb3VzIGJveCBwcm9ncmVzc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCBheGlzVmFsdWUgPSB0aGlzLmdldEF4aXNNb3Rpb25WYWx1ZShheGlzKTtcbiAgICAgICAgICAgIGNvbnN0IHsgbWluLCBtYXggfSA9IHRoaXMuY29uc3RyYWludHNbYXhpc107XG4gICAgICAgICAgICBheGlzVmFsdWUuc2V0KG1peChtaW4sIG1heCwgYm94UHJvZ3Jlc3NbYXhpc10pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFkZExpc3RlbmVycygpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZpc3VhbEVsZW1lbnQuY3VycmVudClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgZWxlbWVudERyYWdDb250cm9scy5zZXQodGhpcy52aXN1YWxFbGVtZW50LCB0aGlzKTtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMudmlzdWFsRWxlbWVudC5jdXJyZW50O1xuICAgICAgICAvKipcbiAgICAgICAgICogQXR0YWNoIGEgcG9pbnRlcmRvd24gZXZlbnQgbGlzdGVuZXIgb24gdGhpcyBET00gZWxlbWVudCB0byBpbml0aWF0ZSBkcmFnIHRyYWNraW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3Qgc3RvcFBvaW50ZXJMaXN0ZW5lciA9IGFkZFBvaW50ZXJFdmVudChlbGVtZW50LCBcInBvaW50ZXJkb3duXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBkcmFnLCBkcmFnTGlzdGVuZXIgPSB0cnVlIH0gPSB0aGlzLmdldFByb3BzKCk7XG4gICAgICAgICAgICBkcmFnICYmIGRyYWdMaXN0ZW5lciAmJiB0aGlzLnN0YXJ0KGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IG1lYXN1cmVEcmFnQ29uc3RyYWludHMgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGRyYWdDb25zdHJhaW50cyB9ID0gdGhpcy5nZXRQcm9wcygpO1xuICAgICAgICAgICAgaWYgKGlzUmVmT2JqZWN0KGRyYWdDb25zdHJhaW50cykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnN0cmFpbnRzID0gdGhpcy5yZXNvbHZlUmVmQ29uc3RyYWludHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgeyBwcm9qZWN0aW9uIH0gPSB0aGlzLnZpc3VhbEVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IHN0b3BNZWFzdXJlTGF5b3V0TGlzdGVuZXIgPSBwcm9qZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoXCJtZWFzdXJlXCIsIG1lYXN1cmVEcmFnQ29uc3RyYWludHMpO1xuICAgICAgICBpZiAocHJvamVjdGlvbiAmJiAhcHJvamVjdGlvbi5sYXlvdXQpIHtcbiAgICAgICAgICAgIHByb2plY3Rpb24ucm9vdCAmJiBwcm9qZWN0aW9uLnJvb3QudXBkYXRlU2Nyb2xsKCk7XG4gICAgICAgICAgICBwcm9qZWN0aW9uLnVwZGF0ZUxheW91dCgpO1xuICAgICAgICB9XG4gICAgICAgIG1lYXN1cmVEcmFnQ29uc3RyYWludHMoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEF0dGFjaCBhIHdpbmRvdyByZXNpemUgbGlzdGVuZXIgdG8gc2NhbGUgdGhlIGRyYWdnYWJsZSB0YXJnZXQgd2l0aGluIGl0cyBkZWZpbmVkXG4gICAgICAgICAqIGNvbnN0cmFpbnRzIGFzIHRoZSB3aW5kb3cgcmVzaXplcy5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IHN0b3BSZXNpemVMaXN0ZW5lciA9IGFkZERvbUV2ZW50KHdpbmRvdywgXCJyZXNpemVcIiwgKCkgPT4gdGhpcy5zY2FsZVBvc2l0aW9uV2l0aGluQ29uc3RyYWludHMoKSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGUgZWxlbWVudCdzIGxheW91dCBjaGFuZ2VzLCBjYWxjdWxhdGUgdGhlIGRlbHRhIGFuZCBhcHBseSB0aGF0IHRvXG4gICAgICAgICAqIHRoZSBkcmFnIGdlc3R1cmUncyBvcmlnaW4gcG9pbnQuXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBzdG9wTGF5b3V0VXBkYXRlTGlzdGVuZXIgPSBwcm9qZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoXCJkaWRVcGRhdGVcIiwgKCh7IGRlbHRhLCBoYXNMYXlvdXRDaGFuZ2VkIH0pID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRHJhZ2dpbmcgJiYgaGFzTGF5b3V0Q2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIGVhY2hBeGlzKChheGlzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vdGlvblZhbHVlID0gdGhpcy5nZXRBeGlzTW90aW9uVmFsdWUoYXhpcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbW90aW9uVmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3JpZ2luUG9pbnRbYXhpc10gKz0gZGVsdGFbYXhpc10udHJhbnNsYXRlO1xuICAgICAgICAgICAgICAgICAgICBtb3Rpb25WYWx1ZS5zZXQobW90aW9uVmFsdWUuZ2V0KCkgKyBkZWx0YVtheGlzXS50cmFuc2xhdGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMudmlzdWFsRWxlbWVudC5yZW5kZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc3RvcFJlc2l6ZUxpc3RlbmVyKCk7XG4gICAgICAgICAgICBzdG9wUG9pbnRlckxpc3RlbmVyKCk7XG4gICAgICAgICAgICBzdG9wTWVhc3VyZUxheW91dExpc3RlbmVyKCk7XG4gICAgICAgICAgICBzdG9wTGF5b3V0VXBkYXRlTGlzdGVuZXIgJiYgc3RvcExheW91dFVwZGF0ZUxpc3RlbmVyKCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldFByb3BzKCkge1xuICAgICAgICBjb25zdCBwcm9wcyA9IHRoaXMudmlzdWFsRWxlbWVudC5nZXRQcm9wcygpO1xuICAgICAgICBjb25zdCB7IGRyYWcgPSBmYWxzZSwgZHJhZ0RpcmVjdGlvbkxvY2sgPSBmYWxzZSwgZHJhZ1Byb3BhZ2F0aW9uID0gZmFsc2UsIGRyYWdDb25zdHJhaW50cyA9IGZhbHNlLCBkcmFnRWxhc3RpYyA9IGRlZmF1bHRFbGFzdGljLCBkcmFnTW9tZW50dW0gPSB0cnVlLCB9ID0gcHJvcHM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5wcm9wcyxcbiAgICAgICAgICAgIGRyYWcsXG4gICAgICAgICAgICBkcmFnRGlyZWN0aW9uTG9jayxcbiAgICAgICAgICAgIGRyYWdQcm9wYWdhdGlvbixcbiAgICAgICAgICAgIGRyYWdDb25zdHJhaW50cyxcbiAgICAgICAgICAgIGRyYWdFbGFzdGljLFxuICAgICAgICAgICAgZHJhZ01vbWVudHVtLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNob3VsZERyYWcoZGlyZWN0aW9uLCBkcmFnLCBjdXJyZW50RGlyZWN0aW9uKSB7XG4gICAgcmV0dXJuICgoZHJhZyA9PT0gdHJ1ZSB8fCBkcmFnID09PSBkaXJlY3Rpb24pICYmXG4gICAgICAgIChjdXJyZW50RGlyZWN0aW9uID09PSBudWxsIHx8IGN1cnJlbnREaXJlY3Rpb24gPT09IGRpcmVjdGlvbikpO1xufVxuLyoqXG4gKiBCYXNlZCBvbiBhbiB4L3kgb2Zmc2V0IGRldGVybWluZSB0aGUgY3VycmVudCBkcmFnIGRpcmVjdGlvbi4gSWYgYm90aCBheGlzJyBvZmZzZXRzIGFyZSBsb3dlclxuICogdGhhbiB0aGUgcHJvdmlkZWQgdGhyZXNob2xkLCByZXR1cm4gYG51bGxgLlxuICpcbiAqIEBwYXJhbSBvZmZzZXQgLSBUaGUgeC95IG9mZnNldCBmcm9tIG9yaWdpbi5cbiAqIEBwYXJhbSBsb2NrVGhyZXNob2xkIC0gKE9wdGlvbmFsKSAtIHRoZSBtaW5pbXVtIGFic29sdXRlIG9mZnNldCBiZWZvcmUgd2UgY2FuIGRldGVybWluZSBhIGRyYWcgZGlyZWN0aW9uLlxuICovXG5mdW5jdGlvbiBnZXRDdXJyZW50RGlyZWN0aW9uKG9mZnNldCwgbG9ja1RocmVzaG9sZCA9IDEwKSB7XG4gICAgbGV0IGRpcmVjdGlvbiA9IG51bGw7XG4gICAgaWYgKE1hdGguYWJzKG9mZnNldC55KSA+IGxvY2tUaHJlc2hvbGQpIHtcbiAgICAgICAgZGlyZWN0aW9uID0gXCJ5XCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKE1hdGguYWJzKG9mZnNldC54KSA+IGxvY2tUaHJlc2hvbGQpIHtcbiAgICAgICAgZGlyZWN0aW9uID0gXCJ4XCI7XG4gICAgfVxuICAgIHJldHVybiBkaXJlY3Rpb247XG59XG5cbmV4cG9ydCB7IFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMsIGVsZW1lbnREcmFnQ29udHJvbHMgfTtcbiIsImltcG9ydCB7IFBhblNlc3Npb24gfSBmcm9tICcuL1BhblNlc3Npb24ubWpzJztcbmltcG9ydCB7IGFkZFBvaW50ZXJFdmVudCB9IGZyb20gJy4uLy4uL2V2ZW50cy9hZGQtcG9pbnRlci1ldmVudC5tanMnO1xuaW1wb3J0IHsgRmVhdHVyZSB9IGZyb20gJy4uLy4uL21vdGlvbi9mZWF0dXJlcy9GZWF0dXJlLm1qcyc7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vLi4vdXRpbHMvbm9vcC5tanMnO1xuaW1wb3J0IHsgZnJhbWUgfSBmcm9tICcuLi8uLi9mcmFtZWxvb3AvZnJhbWUubWpzJztcblxuY29uc3QgYXN5bmNIYW5kbGVyID0gKGhhbmRsZXIpID0+IChldmVudCwgaW5mbykgPT4ge1xuICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgIGZyYW1lLnVwZGF0ZSgoKSA9PiBoYW5kbGVyKGV2ZW50LCBpbmZvKSk7XG4gICAgfVxufTtcbmNsYXNzIFBhbkdlc3R1cmUgZXh0ZW5kcyBGZWF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5yZW1vdmVQb2ludGVyRG93bkxpc3RlbmVyID0gbm9vcDtcbiAgICB9XG4gICAgb25Qb2ludGVyRG93bihwb2ludGVyRG93bkV2ZW50KSB7XG4gICAgICAgIHRoaXMuc2Vzc2lvbiA9IG5ldyBQYW5TZXNzaW9uKHBvaW50ZXJEb3duRXZlbnQsIHRoaXMuY3JlYXRlUGFuSGFuZGxlcnMoKSwgeyB0cmFuc2Zvcm1QYWdlUG9pbnQ6IHRoaXMubm9kZS5nZXRUcmFuc2Zvcm1QYWdlUG9pbnQoKSB9KTtcbiAgICB9XG4gICAgY3JlYXRlUGFuSGFuZGxlcnMoKSB7XG4gICAgICAgIGNvbnN0IHsgb25QYW5TZXNzaW9uU3RhcnQsIG9uUGFuU3RhcnQsIG9uUGFuLCBvblBhbkVuZCB9ID0gdGhpcy5ub2RlLmdldFByb3BzKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvblNlc3Npb25TdGFydDogYXN5bmNIYW5kbGVyKG9uUGFuU2Vzc2lvblN0YXJ0KSxcbiAgICAgICAgICAgIG9uU3RhcnQ6IGFzeW5jSGFuZGxlcihvblBhblN0YXJ0KSxcbiAgICAgICAgICAgIG9uTW92ZTogb25QYW4sXG4gICAgICAgICAgICBvbkVuZDogKGV2ZW50LCBpbmZvKSA9PiB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuc2Vzc2lvbjtcbiAgICAgICAgICAgICAgICBpZiAob25QYW5FbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWUudXBkYXRlKCgpID0+IG9uUGFuRW5kKGV2ZW50LCBpbmZvKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgbW91bnQoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlUG9pbnRlckRvd25MaXN0ZW5lciA9IGFkZFBvaW50ZXJFdmVudCh0aGlzLm5vZGUuY3VycmVudCwgXCJwb2ludGVyZG93blwiLCAoZXZlbnQpID0+IHRoaXMub25Qb2ludGVyRG93bihldmVudCkpO1xuICAgIH1cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIHRoaXMuc2Vzc2lvbiAmJiB0aGlzLnNlc3Npb24udXBkYXRlSGFuZGxlcnModGhpcy5jcmVhdGVQYW5IYW5kbGVycygpKTtcbiAgICB9XG4gICAgdW5tb3VudCgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVQb2ludGVyRG93bkxpc3RlbmVyKCk7XG4gICAgICAgIHRoaXMuc2Vzc2lvbiAmJiB0aGlzLnNlc3Npb24uZW5kKCk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBQYW5HZXN0dXJlIH07XG4iLCIvKipcbiAqIFRoaXMgc2hvdWxkIG9ubHkgZXZlciBiZSBtb2RpZmllZCBvbiB0aGUgY2xpZW50IG90aGVyd2lzZSBpdCdsbFxuICogcGVyc2lzdCB0aHJvdWdoIHNlcnZlciByZXF1ZXN0cy4gSWYgd2UgbmVlZCBpbnN0YW5jZWQgc3RhdGVzIHdlXG4gKiBjb3VsZCBsYXp5LWluaXQgdmlhIHJvb3QuXG4gKi9cbmNvbnN0IGdsb2JhbFByb2plY3Rpb25TdGF0ZSA9IHtcbiAgICAvKipcbiAgICAgKiBHbG9iYWwgZmxhZyBhcyB0byB3aGV0aGVyIHRoZSB0cmVlIGhhcyBhbmltYXRlZCBzaW5jZSB0aGUgbGFzdCB0aW1lXG4gICAgICogd2UgcmVzaXplZCB0aGUgd2luZG93XG4gICAgICovXG4gICAgaGFzQW5pbWF0ZWRTaW5jZVJlc2l6ZTogdHJ1ZSxcbiAgICAvKipcbiAgICAgKiBXZSBzZXQgdGhpcyB0byB0cnVlIG9uY2UsIG9uIHRoZSBmaXJzdCB1cGRhdGUuIEFueSBub2RlcyBhZGRlZCB0byB0aGUgdHJlZSBiZXlvbmQgdGhhdFxuICAgICAqIHVwZGF0ZSB3aWxsIGJlIGdpdmVuIGEgYGRhdGEtcHJvamVjdGlvbi1pZGAgYXR0cmlidXRlLlxuICAgICAqL1xuICAgIGhhc0V2ZXJVcGRhdGVkOiBmYWxzZSxcbn07XG5cbmV4cG9ydCB7IGdsb2JhbFByb2plY3Rpb25TdGF0ZSB9O1xuIiwiaW1wb3J0IHsgcHggfSBmcm9tICcuLi8uLi92YWx1ZS90eXBlcy9udW1iZXJzL3VuaXRzLm1qcyc7XG5cbmZ1bmN0aW9uIHBpeGVsc1RvUGVyY2VudChwaXhlbHMsIGF4aXMpIHtcbiAgICBpZiAoYXhpcy5tYXggPT09IGF4aXMubWluKVxuICAgICAgICByZXR1cm4gMDtcbiAgICByZXR1cm4gKHBpeGVscyAvIChheGlzLm1heCAtIGF4aXMubWluKSkgKiAxMDA7XG59XG4vKipcbiAqIFdlIGFsd2F5cyBjb3JyZWN0IGJvcmRlclJhZGl1cyBhcyBhIHBlcmNlbnRhZ2UgcmF0aGVyIHRoYW4gcGl4ZWxzIHRvIHJlZHVjZSBwYWludHMuXG4gKiBGb3IgZXhhbXBsZSwgaWYgeW91IGFyZSBwcm9qZWN0aW5nIGEgYm94IHRoYXQgaXMgMTAwcHggd2lkZSB3aXRoIGEgMTBweCBib3JkZXJSYWRpdXNcbiAqIGludG8gYSBib3ggdGhhdCBpcyAyMDBweCB3aWRlIHdpdGggYSAyMHB4IGJvcmRlclJhZGl1cywgdGhhdCBpcyBhY3R1YWxseSBhIDEwJVxuICogYm9yZGVyUmFkaXVzIGluIGJvdGggc3RhdGVzLiBJZiB3ZSBhbmltYXRlIGJldHdlZW4gdGhlIHR3byBpbiBwaXhlbHMgdGhhdCB3aWxsIHRyaWdnZXJcbiAqIGEgcGFpbnQgZWFjaCB0aW1lLiBJZiB3ZSBhbmltYXRlIGJldHdlZW4gdGhlIHR3byBpbiBwZXJjZW50YWdlIHdlJ2xsIGF2b2lkIGEgcGFpbnQuXG4gKi9cbmNvbnN0IGNvcnJlY3RCb3JkZXJSYWRpdXMgPSB7XG4gICAgY29ycmVjdDogKGxhdGVzdCwgbm9kZSkgPT4ge1xuICAgICAgICBpZiAoIW5vZGUudGFyZ2V0KVxuICAgICAgICAgICAgcmV0dXJuIGxhdGVzdDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGxhdGVzdCBpcyBhIHN0cmluZywgaWYgaXQncyBhIHBlcmNlbnRhZ2Ugd2UgY2FuIHJldHVybiBpbW1lZGlhdGVseSBhcyBpdCdzXG4gICAgICAgICAqIGdvaW5nIHRvIGJlIHN0cmV0Y2hlZCBhcHByb3ByaWF0ZWx5LiBPdGhlcndpc2UsIGlmIGl0J3MgYSBwaXhlbCwgY29udmVydCBpdCB0byBhIG51bWJlci5cbiAgICAgICAgICovXG4gICAgICAgIGlmICh0eXBlb2YgbGF0ZXN0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBpZiAocHgudGVzdChsYXRlc3QpKSB7XG4gICAgICAgICAgICAgICAgbGF0ZXN0ID0gcGFyc2VGbG9hdChsYXRlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhdGVzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgbGF0ZXN0IGlzIGEgbnVtYmVyLCBpdCdzIGEgcGl4ZWwgdmFsdWUuIFdlIHVzZSB0aGUgY3VycmVudCB2aWV3cG9ydEJveCB0byBjYWxjdWxhdGUgdGhhdFxuICAgICAgICAgKiBwaXhlbCB2YWx1ZSBhcyBhIHBlcmNlbnRhZ2Ugb2YgZWFjaCBheGlzXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCB4ID0gcGl4ZWxzVG9QZXJjZW50KGxhdGVzdCwgbm9kZS50YXJnZXQueCk7XG4gICAgICAgIGNvbnN0IHkgPSBwaXhlbHNUb1BlcmNlbnQobGF0ZXN0LCBub2RlLnRhcmdldC55KTtcbiAgICAgICAgcmV0dXJuIGAke3h9JSAke3l9JWA7XG4gICAgfSxcbn07XG5cbmV4cG9ydCB7IGNvcnJlY3RCb3JkZXJSYWRpdXMsIHBpeGVsc1RvUGVyY2VudCB9O1xuIiwiaW1wb3J0IHsgbWl4IH0gZnJvbSAnLi4vLi4vdXRpbHMvbWl4Lm1qcyc7XG5pbXBvcnQgeyBjb21wbGV4IH0gZnJvbSAnLi4vLi4vdmFsdWUvdHlwZXMvY29tcGxleC9pbmRleC5tanMnO1xuXG5jb25zdCBjb3JyZWN0Qm94U2hhZG93ID0ge1xuICAgIGNvcnJlY3Q6IChsYXRlc3QsIHsgdHJlZVNjYWxlLCBwcm9qZWN0aW9uRGVsdGEgfSkgPT4ge1xuICAgICAgICBjb25zdCBvcmlnaW5hbCA9IGxhdGVzdDtcbiAgICAgICAgY29uc3Qgc2hhZG93ID0gY29tcGxleC5wYXJzZShsYXRlc3QpO1xuICAgICAgICAvLyBUT0RPOiBEb2Vzbid0IHN1cHBvcnQgbXVsdGlwbGUgc2hhZG93c1xuICAgICAgICBpZiAoc2hhZG93Lmxlbmd0aCA+IDUpXG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWw7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gY29tcGxleC5jcmVhdGVUcmFuc2Zvcm1lcihsYXRlc3QpO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSB0eXBlb2Ygc2hhZG93WzBdICE9PSBcIm51bWJlclwiID8gMSA6IDA7XG4gICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgb3ZlcmFsbCBjb250ZXh0IHNjYWxlXG4gICAgICAgIGNvbnN0IHhTY2FsZSA9IHByb2plY3Rpb25EZWx0YS54LnNjYWxlICogdHJlZVNjYWxlLng7XG4gICAgICAgIGNvbnN0IHlTY2FsZSA9IHByb2plY3Rpb25EZWx0YS55LnNjYWxlICogdHJlZVNjYWxlLnk7XG4gICAgICAgIHNoYWRvd1swICsgb2Zmc2V0XSAvPSB4U2NhbGU7XG4gICAgICAgIHNoYWRvd1sxICsgb2Zmc2V0XSAvPSB5U2NhbGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZGVhbGx5IHdlJ2QgY29ycmVjdCB4IGFuZCB5IHNjYWxlcyBpbmRpdmlkdWFsbHksIGJ1dCBiZWNhdXNlIGJsdXIgYW5kXG4gICAgICAgICAqIHNwcmVhZCBhcHBseSB0byBib3RoIHdlIGhhdmUgdG8gdGFrZSBhIHNjYWxlIGF2ZXJhZ2UgYW5kIGFwcGx5IHRoYXQgaW5zdGVhZC5cbiAgICAgICAgICogV2UgY291bGQgcG90ZW50aWFsbHkgaW1wcm92ZSB0aGUgb3V0Y29tZSBvZiB0aGlzIGJ5IGluY29ycG9yYXRpbmcgdGhlIHJhdGlvIGJldHdlZW5cbiAgICAgICAgICogdGhlIHR3byBzY2FsZXMuXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBhdmVyYWdlU2NhbGUgPSBtaXgoeFNjYWxlLCB5U2NhbGUsIDAuNSk7XG4gICAgICAgIC8vIEJsdXJcbiAgICAgICAgaWYgKHR5cGVvZiBzaGFkb3dbMiArIG9mZnNldF0gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICBzaGFkb3dbMiArIG9mZnNldF0gLz0gYXZlcmFnZVNjYWxlO1xuICAgICAgICAvLyBTcHJlYWRcbiAgICAgICAgaWYgKHR5cGVvZiBzaGFkb3dbMyArIG9mZnNldF0gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICBzaGFkb3dbMyArIG9mZnNldF0gLz0gYXZlcmFnZVNjYWxlO1xuICAgICAgICByZXR1cm4gdGVtcGxhdGUoc2hhZG93KTtcbiAgICB9LFxufTtcblxuZXhwb3J0IHsgY29ycmVjdEJveFNoYWRvdyB9O1xuIiwiaW1wb3J0IFJlYWN0X19kZWZhdWx0LCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VQcmVzZW5jZSB9IGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudHMvQW5pbWF0ZVByZXNlbmNlL3VzZS1wcmVzZW5jZS5tanMnO1xuaW1wb3J0IHsgTGF5b3V0R3JvdXBDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vY29udGV4dC9MYXlvdXRHcm91cENvbnRleHQubWpzJztcbmltcG9ydCB7IFN3aXRjaExheW91dEdyb3VwQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2NvbnRleHQvU3dpdGNoTGF5b3V0R3JvdXBDb250ZXh0Lm1qcyc7XG5pbXBvcnQgeyBnbG9iYWxQcm9qZWN0aW9uU3RhdGUgfSBmcm9tICcuLi8uLi8uLi9wcm9qZWN0aW9uL25vZGUvc3RhdGUubWpzJztcbmltcG9ydCB7IGNvcnJlY3RCb3JkZXJSYWRpdXMgfSBmcm9tICcuLi8uLi8uLi9wcm9qZWN0aW9uL3N0eWxlcy9zY2FsZS1ib3JkZXItcmFkaXVzLm1qcyc7XG5pbXBvcnQgeyBjb3JyZWN0Qm94U2hhZG93IH0gZnJvbSAnLi4vLi4vLi4vcHJvamVjdGlvbi9zdHlsZXMvc2NhbGUtYm94LXNoYWRvdy5tanMnO1xuaW1wb3J0IHsgYWRkU2NhbGVDb3JyZWN0b3IgfSBmcm9tICcuLi8uLi8uLi9wcm9qZWN0aW9uL3N0eWxlcy9zY2FsZS1jb3JyZWN0aW9uLm1qcyc7XG5pbXBvcnQgeyBmcmFtZSB9IGZyb20gJy4uLy4uLy4uL2ZyYW1lbG9vcC9mcmFtZS5tanMnO1xuXG5jbGFzcyBNZWFzdXJlTGF5b3V0V2l0aENvbnRleHQgZXh0ZW5kcyBSZWFjdF9fZGVmYXVsdC5Db21wb25lbnQge1xuICAgIC8qKlxuICAgICAqIFRoaXMgb25seSBtb3VudHMgcHJvamVjdGlvbiBub2RlcyBmb3IgY29tcG9uZW50cyB0aGF0XG4gICAgICogbmVlZCBtZWFzdXJpbmcsIHdlIG1pZ2h0IHdhbnQgdG8gZG8gaXQgZm9yIGFsbCBjb21wb25lbnRzXG4gICAgICogaW4gb3JkZXIgdG8gaW5jb3Jwb3JhdGUgdHJhbnNmb3Jtc1xuICAgICAqL1xuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBjb25zdCB7IHZpc3VhbEVsZW1lbnQsIGxheW91dEdyb3VwLCBzd2l0Y2hMYXlvdXRHcm91cCwgbGF5b3V0SWQgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHsgcHJvamVjdGlvbiB9ID0gdmlzdWFsRWxlbWVudDtcbiAgICAgICAgYWRkU2NhbGVDb3JyZWN0b3IoZGVmYXVsdFNjYWxlQ29ycmVjdG9ycyk7XG4gICAgICAgIGlmIChwcm9qZWN0aW9uKSB7XG4gICAgICAgICAgICBpZiAobGF5b3V0R3JvdXAuZ3JvdXApXG4gICAgICAgICAgICAgICAgbGF5b3V0R3JvdXAuZ3JvdXAuYWRkKHByb2plY3Rpb24pO1xuICAgICAgICAgICAgaWYgKHN3aXRjaExheW91dEdyb3VwICYmIHN3aXRjaExheW91dEdyb3VwLnJlZ2lzdGVyICYmIGxheW91dElkKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoTGF5b3V0R3JvdXAucmVnaXN0ZXIocHJvamVjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcm9qZWN0aW9uLnJvb3QuZGlkVXBkYXRlKCk7XG4gICAgICAgICAgICBwcm9qZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25Db21wbGV0ZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zYWZlVG9SZW1vdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcHJvamVjdGlvbi5zZXRPcHRpb25zKHtcbiAgICAgICAgICAgICAgICAuLi5wcm9qZWN0aW9uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgb25FeGl0Q29tcGxldGU6ICgpID0+IHRoaXMuc2FmZVRvUmVtb3ZlKCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBnbG9iYWxQcm9qZWN0aW9uU3RhdGUuaGFzRXZlclVwZGF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgICAgY29uc3QgeyBsYXlvdXREZXBlbmRlbmN5LCB2aXN1YWxFbGVtZW50LCBkcmFnLCBpc1ByZXNlbnQgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHByb2plY3Rpb24gPSB2aXN1YWxFbGVtZW50LnByb2plY3Rpb247XG4gICAgICAgIGlmICghcHJvamVjdGlvbilcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogVE9ETzogV2UgdXNlIHRoaXMgZGF0YSBpbiByZWxlZ2F0ZSB0byBkZXRlcm1pbmUgd2hldGhlciB0b1xuICAgICAgICAgKiBwcm9tb3RlIGEgcHJldmlvdXMgZWxlbWVudC4gVGhlcmUncyBubyBndWFyYW50ZWUgaXRzIHByZXNlbmNlIGRhdGFcbiAgICAgICAgICogd2lsbCBoYXZlIHVwZGF0ZWQgYnkgdGhpcyBwb2ludCAtIGlmIGEgYnVnIGxpa2UgdGhpcyBhcmlzZXMgaXQgd2lsbFxuICAgICAgICAgKiBoYXZlIHRvIGJlIHRoYXQgd2UgbWFya0ZvclJlbGVnYXRpb24gYW5kIHRoZW4gZmluZCBhIG5ldyBsZWFkIHNvbWUgb3RoZXIgd2F5LFxuICAgICAgICAgKiBwZXJoYXBzIGluIGRpZFVwZGF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgcHJvamVjdGlvbi5pc1ByZXNlbnQgPSBpc1ByZXNlbnQ7XG4gICAgICAgIGlmIChkcmFnIHx8XG4gICAgICAgICAgICBwcmV2UHJvcHMubGF5b3V0RGVwZW5kZW5jeSAhPT0gbGF5b3V0RGVwZW5kZW5jeSB8fFxuICAgICAgICAgICAgbGF5b3V0RGVwZW5kZW5jeSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwcm9qZWN0aW9uLndpbGxVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2FmZVRvUmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXZQcm9wcy5pc1ByZXNlbnQgIT09IGlzUHJlc2VudCkge1xuICAgICAgICAgICAgaWYgKGlzUHJlc2VudCkge1xuICAgICAgICAgICAgICAgIHByb2plY3Rpb24ucHJvbW90ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIXByb2plY3Rpb24ucmVsZWdhdGUoKSkge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIHRoZXJlJ3MgYW5vdGhlciBzdGFjayBtZW1iZXIgdGFraW5nIG92ZXIgZnJvbSB0aGlzIG9uZSxcbiAgICAgICAgICAgICAgICAgKiBpdCdzIGluIGNoYXJnZSBvZiB0aGUgZXhpdCBhbmltYXRpb24gYW5kIHRoZXJlZm9yZSBzaG91bGRcbiAgICAgICAgICAgICAgICAgKiBiZSBpbiBjaGFyZ2Ugb2YgdGhlIHNhZmUgdG8gcmVtb3ZlLiBPdGhlcndpc2Ugd2UgY2FsbCBpdCBoZXJlLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGZyYW1lLnBvc3RSZW5kZXIoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFjayA9IHByb2plY3Rpb24uZ2V0U3RhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGFjayB8fCAhc3RhY2subWVtYmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2FmZVRvUmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICBjb25zdCB7IHByb2plY3Rpb24gfSA9IHRoaXMucHJvcHMudmlzdWFsRWxlbWVudDtcbiAgICAgICAgaWYgKHByb2plY3Rpb24pIHtcbiAgICAgICAgICAgIHByb2plY3Rpb24ucm9vdC5kaWRVcGRhdGUoKTtcbiAgICAgICAgICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXByb2plY3Rpb24uY3VycmVudEFuaW1hdGlvbiAmJiBwcm9qZWN0aW9uLmlzTGVhZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2FmZVRvUmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIGNvbnN0IHsgdmlzdWFsRWxlbWVudCwgbGF5b3V0R3JvdXAsIHN3aXRjaExheW91dEdyb3VwOiBwcm9tb3RlQ29udGV4dCwgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHsgcHJvamVjdGlvbiB9ID0gdmlzdWFsRWxlbWVudDtcbiAgICAgICAgaWYgKHByb2plY3Rpb24pIHtcbiAgICAgICAgICAgIHByb2plY3Rpb24uc2NoZWR1bGVDaGVja0FmdGVyVW5tb3VudCgpO1xuICAgICAgICAgICAgaWYgKGxheW91dEdyb3VwICYmIGxheW91dEdyb3VwLmdyb3VwKVxuICAgICAgICAgICAgICAgIGxheW91dEdyb3VwLmdyb3VwLnJlbW92ZShwcm9qZWN0aW9uKTtcbiAgICAgICAgICAgIGlmIChwcm9tb3RlQ29udGV4dCAmJiBwcm9tb3RlQ29udGV4dC5kZXJlZ2lzdGVyKVxuICAgICAgICAgICAgICAgIHByb21vdGVDb250ZXh0LmRlcmVnaXN0ZXIocHJvamVjdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2FmZVRvUmVtb3ZlKCkge1xuICAgICAgICBjb25zdCB7IHNhZmVUb1JlbW92ZSB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgc2FmZVRvUmVtb3ZlICYmIHNhZmVUb1JlbW92ZSgpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbmZ1bmN0aW9uIE1lYXN1cmVMYXlvdXQocHJvcHMpIHtcbiAgICBjb25zdCBbaXNQcmVzZW50LCBzYWZlVG9SZW1vdmVdID0gdXNlUHJlc2VuY2UoKTtcbiAgICBjb25zdCBsYXlvdXRHcm91cCA9IHVzZUNvbnRleHQoTGF5b3V0R3JvdXBDb250ZXh0KTtcbiAgICByZXR1cm4gKFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTWVhc3VyZUxheW91dFdpdGhDb250ZXh0LCB7IC4uLnByb3BzLCBsYXlvdXRHcm91cDogbGF5b3V0R3JvdXAsIHN3aXRjaExheW91dEdyb3VwOiB1c2VDb250ZXh0KFN3aXRjaExheW91dEdyb3VwQ29udGV4dCksIGlzUHJlc2VudDogaXNQcmVzZW50LCBzYWZlVG9SZW1vdmU6IHNhZmVUb1JlbW92ZSB9KSk7XG59XG5jb25zdCBkZWZhdWx0U2NhbGVDb3JyZWN0b3JzID0ge1xuICAgIGJvcmRlclJhZGl1czoge1xuICAgICAgICAuLi5jb3JyZWN0Qm9yZGVyUmFkaXVzLFxuICAgICAgICBhcHBseVRvOiBbXG4gICAgICAgICAgICBcImJvcmRlclRvcExlZnRSYWRpdXNcIixcbiAgICAgICAgICAgIFwiYm9yZGVyVG9wUmlnaHRSYWRpdXNcIixcbiAgICAgICAgICAgIFwiYm9yZGVyQm90dG9tTGVmdFJhZGl1c1wiLFxuICAgICAgICAgICAgXCJib3JkZXJCb3R0b21SaWdodFJhZGl1c1wiLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgYm9yZGVyVG9wTGVmdFJhZGl1czogY29ycmVjdEJvcmRlclJhZGl1cyxcbiAgICBib3JkZXJUb3BSaWdodFJhZGl1czogY29ycmVjdEJvcmRlclJhZGl1cyxcbiAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiBjb3JyZWN0Qm9yZGVyUmFkaXVzLFxuICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiBjb3JyZWN0Qm9yZGVyUmFkaXVzLFxuICAgIGJveFNoYWRvdzogY29ycmVjdEJveFNoYWRvdyxcbn07XG5cbmV4cG9ydCB7IE1lYXN1cmVMYXlvdXQgfTtcbiIsImltcG9ydCB7IHVzZUNvbnRleHQsIHVzZUlkLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBQcmVzZW5jZUNvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L1ByZXNlbmNlQ29udGV4dC5tanMnO1xuXG4vKipcbiAqIFdoZW4gYSBjb21wb25lbnQgaXMgdGhlIGNoaWxkIG9mIGBBbmltYXRlUHJlc2VuY2VgLCBpdCBjYW4gdXNlIGB1c2VQcmVzZW5jZWBcbiAqIHRvIGFjY2VzcyBpbmZvcm1hdGlvbiBhYm91dCB3aGV0aGVyIGl0J3Mgc3RpbGwgcHJlc2VudCBpbiB0aGUgUmVhY3QgdHJlZS5cbiAqXG4gKiBgYGBqc3hcbiAqIGltcG9ydCB7IHVzZVByZXNlbmNlIH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIlxuICpcbiAqIGV4cG9ydCBjb25zdCBDb21wb25lbnQgPSAoKSA9PiB7XG4gKiAgIGNvbnN0IFtpc1ByZXNlbnQsIHNhZmVUb1JlbW92ZV0gPSB1c2VQcmVzZW5jZSgpXG4gKlxuICogICB1c2VFZmZlY3QoKCkgPT4ge1xuICogICAgICFpc1ByZXNlbnQgJiYgc2V0VGltZW91dChzYWZlVG9SZW1vdmUsIDEwMDApXG4gKiAgIH0sIFtpc1ByZXNlbnRdKVxuICpcbiAqICAgcmV0dXJuIDxkaXYgLz5cbiAqIH1cbiAqIGBgYFxuICpcbiAqIElmIGBpc1ByZXNlbnRgIGlzIGBmYWxzZWAsIGl0IG1lYW5zIHRoYXQgYSBjb21wb25lbnQgaGFzIGJlZW4gcmVtb3ZlZCB0aGUgdHJlZSwgYnV0XG4gKiBgQW5pbWF0ZVByZXNlbmNlYCB3b24ndCByZWFsbHkgcmVtb3ZlIGl0IHVudGlsIGBzYWZlVG9SZW1vdmVgIGhhcyBiZWVuIGNhbGxlZC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHVzZVByZXNlbmNlKCkge1xuICAgIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KFByZXNlbmNlQ29udGV4dCk7XG4gICAgaWYgKGNvbnRleHQgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBbdHJ1ZSwgbnVsbF07XG4gICAgY29uc3QgeyBpc1ByZXNlbnQsIG9uRXhpdENvbXBsZXRlLCByZWdpc3RlciB9ID0gY29udGV4dDtcbiAgICAvLyBJdCdzIHNhZmUgdG8gY2FsbCB0aGUgZm9sbG93aW5nIGhvb2tzIGNvbmRpdGlvbmFsbHkgKGFmdGVyIGFuIGVhcmx5IHJldHVybikgYmVjYXVzZSB0aGUgY29udGV4dCB3aWxsIGFsd2F5c1xuICAgIC8vIGVpdGhlciBiZSBudWxsIG9yIG5vbi1udWxsIGZvciB0aGUgbGlmZXNwYW4gb2YgdGhlIGNvbXBvbmVudC5cbiAgICBjb25zdCBpZCA9IHVzZUlkKCk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHJlZ2lzdGVyKGlkKSwgW10pO1xuICAgIGNvbnN0IHNhZmVUb1JlbW92ZSA9ICgpID0+IG9uRXhpdENvbXBsZXRlICYmIG9uRXhpdENvbXBsZXRlKGlkKTtcbiAgICByZXR1cm4gIWlzUHJlc2VudCAmJiBvbkV4aXRDb21wbGV0ZSA/IFtmYWxzZSwgc2FmZVRvUmVtb3ZlXSA6IFt0cnVlXTtcbn1cbi8qKlxuICogU2ltaWxhciB0byBgdXNlUHJlc2VuY2VgLCBleGNlcHQgYHVzZUlzUHJlc2VudGAgc2ltcGx5IHJldHVybnMgd2hldGhlciBvciBub3QgdGhlIGNvbXBvbmVudCBpcyBwcmVzZW50LlxuICogVGhlcmUgaXMgbm8gYHNhZmVUb1JlbW92ZWAgZnVuY3Rpb24uXG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyB1c2VJc1ByZXNlbnQgfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiXG4gKlxuICogZXhwb3J0IGNvbnN0IENvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3QgaXNQcmVzZW50ID0gdXNlSXNQcmVzZW50KClcbiAqXG4gKiAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gKiAgICAgIWlzUHJlc2VudCAmJiBjb25zb2xlLmxvZyhcIkkndmUgYmVlbiByZW1vdmVkIVwiKVxuICogICB9LCBbaXNQcmVzZW50XSlcbiAqXG4gKiAgIHJldHVybiA8ZGl2IC8+XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHVzZUlzUHJlc2VudCgpIHtcbiAgICByZXR1cm4gaXNQcmVzZW50KHVzZUNvbnRleHQoUHJlc2VuY2VDb250ZXh0KSk7XG59XG5mdW5jdGlvbiBpc1ByZXNlbnQoY29udGV4dCkge1xuICAgIHJldHVybiBjb250ZXh0ID09PSBudWxsID8gdHJ1ZSA6IGNvbnRleHQuaXNQcmVzZW50O1xufVxuXG5leHBvcnQgeyBpc1ByZXNlbnQsIHVzZUlzUHJlc2VudCwgdXNlUHJlc2VuY2UgfTtcbiIsImltcG9ydCB7IGNpcmNPdXQgfSBmcm9tICcuLi8uLi9lYXNpbmcvY2lyYy5tanMnO1xuaW1wb3J0IHsgcHJvZ3Jlc3MgfSBmcm9tICcuLi8uLi91dGlscy9wcm9ncmVzcy5tanMnO1xuaW1wb3J0IHsgbWl4IH0gZnJvbSAnLi4vLi4vdXRpbHMvbWl4Lm1qcyc7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vLi4vdXRpbHMvbm9vcC5tanMnO1xuaW1wb3J0IHsgcGVyY2VudCwgcHggfSBmcm9tICcuLi8uLi92YWx1ZS90eXBlcy9udW1iZXJzL3VuaXRzLm1qcyc7XG5cbmNvbnN0IGJvcmRlcnMgPSBbXCJUb3BMZWZ0XCIsIFwiVG9wUmlnaHRcIiwgXCJCb3R0b21MZWZ0XCIsIFwiQm90dG9tUmlnaHRcIl07XG5jb25zdCBudW1Cb3JkZXJzID0gYm9yZGVycy5sZW5ndGg7XG5jb25zdCBhc051bWJlciA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gcGFyc2VGbG9hdCh2YWx1ZSkgOiB2YWx1ZTtcbmNvbnN0IGlzUHggPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiB8fCBweC50ZXN0KHZhbHVlKTtcbmZ1bmN0aW9uIG1peFZhbHVlcyh0YXJnZXQsIGZvbGxvdywgbGVhZCwgcHJvZ3Jlc3MsIHNob3VsZENyb3NzZmFkZU9wYWNpdHksIGlzT25seU1lbWJlcikge1xuICAgIGlmIChzaG91bGRDcm9zc2ZhZGVPcGFjaXR5KSB7XG4gICAgICAgIHRhcmdldC5vcGFjaXR5ID0gbWl4KDAsIFxuICAgICAgICAvLyBUT0RPIFJlaW5zdGF0ZSB0aGlzIGlmIG9ubHkgY2hpbGRcbiAgICAgICAgbGVhZC5vcGFjaXR5ICE9PSB1bmRlZmluZWQgPyBsZWFkLm9wYWNpdHkgOiAxLCBlYXNlQ3Jvc3NmYWRlSW4ocHJvZ3Jlc3MpKTtcbiAgICAgICAgdGFyZ2V0Lm9wYWNpdHlFeGl0ID0gbWl4KGZvbGxvdy5vcGFjaXR5ICE9PSB1bmRlZmluZWQgPyBmb2xsb3cub3BhY2l0eSA6IDEsIDAsIGVhc2VDcm9zc2ZhZGVPdXQocHJvZ3Jlc3MpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPbmx5TWVtYmVyKSB7XG4gICAgICAgIHRhcmdldC5vcGFjaXR5ID0gbWl4KGZvbGxvdy5vcGFjaXR5ICE9PSB1bmRlZmluZWQgPyBmb2xsb3cub3BhY2l0eSA6IDEsIGxlYWQub3BhY2l0eSAhPT0gdW5kZWZpbmVkID8gbGVhZC5vcGFjaXR5IDogMSwgcHJvZ3Jlc3MpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNaXggYm9yZGVyIHJhZGl1c1xuICAgICAqL1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQm9yZGVyczsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGJvcmRlckxhYmVsID0gYGJvcmRlciR7Ym9yZGVyc1tpXX1SYWRpdXNgO1xuICAgICAgICBsZXQgZm9sbG93UmFkaXVzID0gZ2V0UmFkaXVzKGZvbGxvdywgYm9yZGVyTGFiZWwpO1xuICAgICAgICBsZXQgbGVhZFJhZGl1cyA9IGdldFJhZGl1cyhsZWFkLCBib3JkZXJMYWJlbCk7XG4gICAgICAgIGlmIChmb2xsb3dSYWRpdXMgPT09IHVuZGVmaW5lZCAmJiBsZWFkUmFkaXVzID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgZm9sbG93UmFkaXVzIHx8IChmb2xsb3dSYWRpdXMgPSAwKTtcbiAgICAgICAgbGVhZFJhZGl1cyB8fCAobGVhZFJhZGl1cyA9IDApO1xuICAgICAgICBjb25zdCBjYW5NaXggPSBmb2xsb3dSYWRpdXMgPT09IDAgfHxcbiAgICAgICAgICAgIGxlYWRSYWRpdXMgPT09IDAgfHxcbiAgICAgICAgICAgIGlzUHgoZm9sbG93UmFkaXVzKSA9PT0gaXNQeChsZWFkUmFkaXVzKTtcbiAgICAgICAgaWYgKGNhbk1peCkge1xuICAgICAgICAgICAgdGFyZ2V0W2JvcmRlckxhYmVsXSA9IE1hdGgubWF4KG1peChhc051bWJlcihmb2xsb3dSYWRpdXMpLCBhc051bWJlcihsZWFkUmFkaXVzKSwgcHJvZ3Jlc3MpLCAwKTtcbiAgICAgICAgICAgIGlmIChwZXJjZW50LnRlc3QobGVhZFJhZGl1cykgfHwgcGVyY2VudC50ZXN0KGZvbGxvd1JhZGl1cykpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRbYm9yZGVyTGFiZWxdICs9IFwiJVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0W2JvcmRlckxhYmVsXSA9IGxlYWRSYWRpdXM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogTWl4IHJvdGF0aW9uXG4gICAgICovXG4gICAgaWYgKGZvbGxvdy5yb3RhdGUgfHwgbGVhZC5yb3RhdGUpIHtcbiAgICAgICAgdGFyZ2V0LnJvdGF0ZSA9IG1peChmb2xsb3cucm90YXRlIHx8IDAsIGxlYWQucm90YXRlIHx8IDAsIHByb2dyZXNzKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRSYWRpdXModmFsdWVzLCByYWRpdXNOYW1lKSB7XG4gICAgcmV0dXJuIHZhbHVlc1tyYWRpdXNOYW1lXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gdmFsdWVzW3JhZGl1c05hbWVdXG4gICAgICAgIDogdmFsdWVzLmJvcmRlclJhZGl1cztcbn1cbi8vIC8qKlxuLy8gICogV2Ugb25seSB3YW50IHRvIG1peCB0aGUgYmFja2dyb3VuZCBjb2xvciBpZiB0aGVyZSdzIGEgZm9sbG93IGVsZW1lbnRcbi8vICAqIHRoYXQgd2UncmUgbm90IGNyb3NzZmFkaW5nIG9wYWNpdHkgYmV0d2Vlbi4gRm9yIGluc3RhbmNlIHdpdGggc3dpdGNoXG4vLyAgKiBBbmltYXRlU2hhcmVkTGF5b3V0IGFuaW1hdGlvbnMsIHRoaXMgaGVscHMgdGhlIGlsbHVzaW9uIG9mIGEgY29udGludW91c1xuLy8gICogZWxlbWVudCBiZWluZyBhbmltYXRlZCBidXQgYWxzbyBjdXRzIGRvd24gb24gdGhlIG51bWJlciBvZiBwYWludHMgdHJpZ2dlcmVkXG4vLyAgKiBmb3IgZWxlbWVudHMgd2hlcmUgb3BhY2l0eSBpcyBkb2luZyB0aGF0IHdvcmsgZm9yIHVzLlxuLy8gICovXG4vLyBpZiAoXG4vLyAgICAgIWhhc0ZvbGxvd0VsZW1lbnQgJiZcbi8vICAgICBsYXRlc3RMZWFkVmFsdWVzLmJhY2tncm91bmRDb2xvciAmJlxuLy8gICAgIGxhdGVzdEZvbGxvd1ZhbHVlcy5iYWNrZ3JvdW5kQ29sb3Jcbi8vICkge1xuLy8gICAgIC8qKlxuLy8gICAgICAqIFRoaXMgaXNuJ3QgaWRlYWwgcGVyZm9ybWFuY2Utd2lzZSBhcyBtaXhDb2xvciBpcyBjcmVhdGluZyBhIG5ldyBmdW5jdGlvbiBldmVyeSBmcmFtZS5cbi8vICAgICAgKiBXZSBjb3VsZCBwcm9iYWJseSBjcmVhdGUgYSBtaXhlciB0aGF0IHJ1bnMgYXQgdGhlIHN0YXJ0IG9mIHRoZSBhbmltYXRpb24gYnV0XG4vLyAgICAgICogdGhlIGlkZWEgYmVoaW5kIHRoZSBjcm9zc2ZhZGVyIGlzIHRoYXQgaXQgcnVucyBkeW5hbWljYWxseSBiZXR3ZWVuIHR3byBwb3RlbnRpYWxseVxuLy8gICAgICAqIGNoYW5naW5nIHRhcmdldHMgKGllIG9wYWNpdHkgb3IgYm9yZGVyUmFkaXVzIG1heSBiZSBhbmltYXRpbmcgaW5kZXBlbmRlbnRseSB2aWEgdmFyaWFudHMpXG4vLyAgICAgICovXG4vLyAgICAgbGVhZFN0YXRlLmJhY2tncm91bmRDb2xvciA9IGZvbGxvd1N0YXRlLmJhY2tncm91bmRDb2xvciA9IG1peENvbG9yKFxuLy8gICAgICAgICBsYXRlc3RGb2xsb3dWYWx1ZXMuYmFja2dyb3VuZENvbG9yIGFzIHN0cmluZyxcbi8vICAgICAgICAgbGF0ZXN0TGVhZFZhbHVlcy5iYWNrZ3JvdW5kQ29sb3IgYXMgc3RyaW5nXG4vLyAgICAgKShwKVxuLy8gfVxuY29uc3QgZWFzZUNyb3NzZmFkZUluID0gY29tcHJlc3MoMCwgMC41LCBjaXJjT3V0KTtcbmNvbnN0IGVhc2VDcm9zc2ZhZGVPdXQgPSBjb21wcmVzcygwLjUsIDAuOTUsIG5vb3ApO1xuZnVuY3Rpb24gY29tcHJlc3MobWluLCBtYXgsIGVhc2luZykge1xuICAgIHJldHVybiAocCkgPT4ge1xuICAgICAgICAvLyBDb3VsZCByZXBsYWNlIGlmcyB3aXRoIGNsYW1wXG4gICAgICAgIGlmIChwIDwgbWluKVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIGlmIChwID4gbWF4KVxuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIHJldHVybiBlYXNpbmcocHJvZ3Jlc3MobWluLCBtYXgsIHApKTtcbiAgICB9O1xufVxuXG5leHBvcnQgeyBtaXhWYWx1ZXMgfTtcbiIsIi8qKlxuICogUmVzZXQgYW4gYXhpcyB0byB0aGUgcHJvdmlkZWQgb3JpZ2luIGJveC5cbiAqXG4gKiBUaGlzIGlzIGEgbXV0YXRpdmUgb3BlcmF0aW9uLlxuICovXG5mdW5jdGlvbiBjb3B5QXhpc0ludG8oYXhpcywgb3JpZ2luQXhpcykge1xuICAgIGF4aXMubWluID0gb3JpZ2luQXhpcy5taW47XG4gICAgYXhpcy5tYXggPSBvcmlnaW5BeGlzLm1heDtcbn1cbi8qKlxuICogUmVzZXQgYSBib3ggdG8gdGhlIHByb3ZpZGVkIG9yaWdpbiBib3guXG4gKlxuICogVGhpcyBpcyBhIG11dGF0aXZlIG9wZXJhdGlvbi5cbiAqL1xuZnVuY3Rpb24gY29weUJveEludG8oYm94LCBvcmlnaW5Cb3gpIHtcbiAgICBjb3B5QXhpc0ludG8oYm94LngsIG9yaWdpbkJveC54KTtcbiAgICBjb3B5QXhpc0ludG8oYm94LnksIG9yaWdpbkJveC55KTtcbn1cblxuZXhwb3J0IHsgY29weUF4aXNJbnRvLCBjb3B5Qm94SW50byB9O1xuIiwiaW1wb3J0IHsgbWl4IH0gZnJvbSAnLi4vLi4vdXRpbHMvbWl4Lm1qcyc7XG5pbXBvcnQgeyBwZXJjZW50IH0gZnJvbSAnLi4vLi4vdmFsdWUvdHlwZXMvbnVtYmVycy91bml0cy5tanMnO1xuaW1wb3J0IHsgc2NhbGVQb2ludCB9IGZyb20gJy4vZGVsdGEtYXBwbHkubWpzJztcblxuLyoqXG4gKiBSZW1vdmUgYSBkZWx0YSBmcm9tIGEgcG9pbnQuIFRoaXMgaXMgZXNzZW50aWFsbHkgdGhlIHN0ZXBzIG9mIGFwcGx5UG9pbnREZWx0YSBpbiByZXZlcnNlXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZVBvaW50RGVsdGEocG9pbnQsIHRyYW5zbGF0ZSwgc2NhbGUsIG9yaWdpblBvaW50LCBib3hTY2FsZSkge1xuICAgIHBvaW50IC09IHRyYW5zbGF0ZTtcbiAgICBwb2ludCA9IHNjYWxlUG9pbnQocG9pbnQsIDEgLyBzY2FsZSwgb3JpZ2luUG9pbnQpO1xuICAgIGlmIChib3hTY2FsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBvaW50ID0gc2NhbGVQb2ludChwb2ludCwgMSAvIGJveFNjYWxlLCBvcmlnaW5Qb2ludCk7XG4gICAgfVxuICAgIHJldHVybiBwb2ludDtcbn1cbi8qKlxuICogUmVtb3ZlIGEgZGVsdGEgZnJvbSBhbiBheGlzLiBUaGlzIGlzIGVzc2VudGlhbGx5IHRoZSBzdGVwcyBvZiBhcHBseUF4aXNEZWx0YSBpbiByZXZlcnNlXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUF4aXNEZWx0YShheGlzLCB0cmFuc2xhdGUgPSAwLCBzY2FsZSA9IDEsIG9yaWdpbiA9IDAuNSwgYm94U2NhbGUsIG9yaWdpbkF4aXMgPSBheGlzLCBzb3VyY2VBeGlzID0gYXhpcykge1xuICAgIGlmIChwZXJjZW50LnRlc3QodHJhbnNsYXRlKSkge1xuICAgICAgICB0cmFuc2xhdGUgPSBwYXJzZUZsb2F0KHRyYW5zbGF0ZSk7XG4gICAgICAgIGNvbnN0IHJlbGF0aXZlUHJvZ3Jlc3MgPSBtaXgoc291cmNlQXhpcy5taW4sIHNvdXJjZUF4aXMubWF4LCB0cmFuc2xhdGUgLyAxMDApO1xuICAgICAgICB0cmFuc2xhdGUgPSByZWxhdGl2ZVByb2dyZXNzIC0gc291cmNlQXhpcy5taW47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdHJhbnNsYXRlICE9PSBcIm51bWJlclwiKVxuICAgICAgICByZXR1cm47XG4gICAgbGV0IG9yaWdpblBvaW50ID0gbWl4KG9yaWdpbkF4aXMubWluLCBvcmlnaW5BeGlzLm1heCwgb3JpZ2luKTtcbiAgICBpZiAoYXhpcyA9PT0gb3JpZ2luQXhpcylcbiAgICAgICAgb3JpZ2luUG9pbnQgLT0gdHJhbnNsYXRlO1xuICAgIGF4aXMubWluID0gcmVtb3ZlUG9pbnREZWx0YShheGlzLm1pbiwgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luUG9pbnQsIGJveFNjYWxlKTtcbiAgICBheGlzLm1heCA9IHJlbW92ZVBvaW50RGVsdGEoYXhpcy5tYXgsIHRyYW5zbGF0ZSwgc2NhbGUsIG9yaWdpblBvaW50LCBib3hTY2FsZSk7XG59XG4vKipcbiAqIFJlbW92ZSBhIHRyYW5zZm9ybXMgZnJvbSBhbiBheGlzLiBUaGlzIGlzIGVzc2VudGlhbGx5IHRoZSBzdGVwcyBvZiBhcHBseUF4aXNUcmFuc2Zvcm1zIGluIHJldmVyc2VcbiAqIGFuZCBhY3RzIGFzIGEgYnJpZGdlIGJldHdlZW4gbW90aW9uIHZhbHVlcyBhbmQgcmVtb3ZlQXhpc0RlbHRhXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUF4aXNUcmFuc2Zvcm1zKGF4aXMsIHRyYW5zZm9ybXMsIFtrZXksIHNjYWxlS2V5LCBvcmlnaW5LZXldLCBvcmlnaW4sIHNvdXJjZUF4aXMpIHtcbiAgICByZW1vdmVBeGlzRGVsdGEoYXhpcywgdHJhbnNmb3Jtc1trZXldLCB0cmFuc2Zvcm1zW3NjYWxlS2V5XSwgdHJhbnNmb3Jtc1tvcmlnaW5LZXldLCB0cmFuc2Zvcm1zLnNjYWxlLCBvcmlnaW4sIHNvdXJjZUF4aXMpO1xufVxuLyoqXG4gKiBUaGUgbmFtZXMgb2YgdGhlIG1vdGlvbiB2YWx1ZXMgd2Ugd2FudCB0byBhcHBseSBhcyB0cmFuc2xhdGlvbiwgc2NhbGUgYW5kIG9yaWdpbi5cbiAqL1xuY29uc3QgeEtleXMgPSBbXCJ4XCIsIFwic2NhbGVYXCIsIFwib3JpZ2luWFwiXTtcbmNvbnN0IHlLZXlzID0gW1wieVwiLCBcInNjYWxlWVwiLCBcIm9yaWdpbllcIl07XG4vKipcbiAqIFJlbW92ZSBhIHRyYW5zZm9ybXMgZnJvbSBhbiBib3guIFRoaXMgaXMgZXNzZW50aWFsbHkgdGhlIHN0ZXBzIG9mIGFwcGx5QXhpc0JveCBpbiByZXZlcnNlXG4gKiBhbmQgYWN0cyBhcyBhIGJyaWRnZSBiZXR3ZWVuIG1vdGlvbiB2YWx1ZXMgYW5kIHJlbW92ZUF4aXNEZWx0YVxuICovXG5mdW5jdGlvbiByZW1vdmVCb3hUcmFuc2Zvcm1zKGJveCwgdHJhbnNmb3Jtcywgb3JpZ2luQm94LCBzb3VyY2VCb3gpIHtcbiAgICByZW1vdmVBeGlzVHJhbnNmb3Jtcyhib3gueCwgdHJhbnNmb3JtcywgeEtleXMsIG9yaWdpbkJveCA/IG9yaWdpbkJveC54IDogdW5kZWZpbmVkLCBzb3VyY2VCb3ggPyBzb3VyY2VCb3gueCA6IHVuZGVmaW5lZCk7XG4gICAgcmVtb3ZlQXhpc1RyYW5zZm9ybXMoYm94LnksIHRyYW5zZm9ybXMsIHlLZXlzLCBvcmlnaW5Cb3ggPyBvcmlnaW5Cb3gueSA6IHVuZGVmaW5lZCwgc291cmNlQm94ID8gc291cmNlQm94LnkgOiB1bmRlZmluZWQpO1xufVxuXG5leHBvcnQgeyByZW1vdmVBeGlzRGVsdGEsIHJlbW92ZUF4aXNUcmFuc2Zvcm1zLCByZW1vdmVCb3hUcmFuc2Zvcm1zLCByZW1vdmVQb2ludERlbHRhIH07XG4iLCJpbXBvcnQgeyBjYWxjTGVuZ3RoIH0gZnJvbSAnLi9kZWx0YS1jYWxjLm1qcyc7XG5cbmZ1bmN0aW9uIGlzQXhpc0RlbHRhWmVybyhkZWx0YSkge1xuICAgIHJldHVybiBkZWx0YS50cmFuc2xhdGUgPT09IDAgJiYgZGVsdGEuc2NhbGUgPT09IDE7XG59XG5mdW5jdGlvbiBpc0RlbHRhWmVybyhkZWx0YSkge1xuICAgIHJldHVybiBpc0F4aXNEZWx0YVplcm8oZGVsdGEueCkgJiYgaXNBeGlzRGVsdGFaZXJvKGRlbHRhLnkpO1xufVxuZnVuY3Rpb24gYm94RXF1YWxzKGEsIGIpIHtcbiAgICByZXR1cm4gKGEueC5taW4gPT09IGIueC5taW4gJiZcbiAgICAgICAgYS54Lm1heCA9PT0gYi54Lm1heCAmJlxuICAgICAgICBhLnkubWluID09PSBiLnkubWluICYmXG4gICAgICAgIGEueS5tYXggPT09IGIueS5tYXgpO1xufVxuZnVuY3Rpb24gYm94RXF1YWxzUm91bmRlZChhLCBiKSB7XG4gICAgcmV0dXJuIChNYXRoLnJvdW5kKGEueC5taW4pID09PSBNYXRoLnJvdW5kKGIueC5taW4pICYmXG4gICAgICAgIE1hdGgucm91bmQoYS54Lm1heCkgPT09IE1hdGgucm91bmQoYi54Lm1heCkgJiZcbiAgICAgICAgTWF0aC5yb3VuZChhLnkubWluKSA9PT0gTWF0aC5yb3VuZChiLnkubWluKSAmJlxuICAgICAgICBNYXRoLnJvdW5kKGEueS5tYXgpID09PSBNYXRoLnJvdW5kKGIueS5tYXgpKTtcbn1cbmZ1bmN0aW9uIGFzcGVjdFJhdGlvKGJveCkge1xuICAgIHJldHVybiBjYWxjTGVuZ3RoKGJveC54KSAvIGNhbGNMZW5ndGgoYm94LnkpO1xufVxuXG5leHBvcnQgeyBhc3BlY3RSYXRpbywgYm94RXF1YWxzLCBib3hFcXVhbHNSb3VuZGVkLCBpc0RlbHRhWmVybyB9O1xuIiwiaW1wb3J0IHsgYWRkVW5pcXVlSXRlbSwgcmVtb3ZlSXRlbSB9IGZyb20gJy4uLy4uL3V0aWxzL2FycmF5Lm1qcyc7XG5cbmNsYXNzIE5vZGVTdGFjayB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubWVtYmVycyA9IFtdO1xuICAgIH1cbiAgICBhZGQobm9kZSkge1xuICAgICAgICBhZGRVbmlxdWVJdGVtKHRoaXMubWVtYmVycywgbm9kZSk7XG4gICAgICAgIG5vZGUuc2NoZWR1bGVSZW5kZXIoKTtcbiAgICB9XG4gICAgcmVtb3ZlKG5vZGUpIHtcbiAgICAgICAgcmVtb3ZlSXRlbSh0aGlzLm1lbWJlcnMsIG5vZGUpO1xuICAgICAgICBpZiAobm9kZSA9PT0gdGhpcy5wcmV2TGVhZCkge1xuICAgICAgICAgICAgdGhpcy5wcmV2TGVhZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZSA9PT0gdGhpcy5sZWFkKSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2TGVhZCA9IHRoaXMubWVtYmVyc1t0aGlzLm1lbWJlcnMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBpZiAocHJldkxlYWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb21vdGUocHJldkxlYWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJlbGVnYXRlKG5vZGUpIHtcbiAgICAgICAgY29uc3QgaW5kZXhPZk5vZGUgPSB0aGlzLm1lbWJlcnMuZmluZEluZGV4KChtZW1iZXIpID0+IG5vZGUgPT09IG1lbWJlcik7XG4gICAgICAgIGlmIChpbmRleE9mTm9kZSA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpbmQgdGhlIG5leHQgcHJvamVjdGlvbiBub2RlIHRoYXQgaXMgcHJlc2VudFxuICAgICAgICAgKi9cbiAgICAgICAgbGV0IHByZXZMZWFkO1xuICAgICAgICBmb3IgKGxldCBpID0gaW5kZXhPZk5vZGU7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBjb25zdCBtZW1iZXIgPSB0aGlzLm1lbWJlcnNbaV07XG4gICAgICAgICAgICBpZiAobWVtYmVyLmlzUHJlc2VudCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBwcmV2TGVhZCA9IG1lbWJlcjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocHJldkxlYWQpIHtcbiAgICAgICAgICAgIHRoaXMucHJvbW90ZShwcmV2TGVhZCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcm9tb3RlKG5vZGUsIHByZXNlcnZlRm9sbG93T3BhY2l0eSkge1xuICAgICAgICBjb25zdCBwcmV2TGVhZCA9IHRoaXMubGVhZDtcbiAgICAgICAgaWYgKG5vZGUgPT09IHByZXZMZWFkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLnByZXZMZWFkID0gcHJldkxlYWQ7XG4gICAgICAgIHRoaXMubGVhZCA9IG5vZGU7XG4gICAgICAgIG5vZGUuc2hvdygpO1xuICAgICAgICBpZiAocHJldkxlYWQpIHtcbiAgICAgICAgICAgIHByZXZMZWFkLmluc3RhbmNlICYmIHByZXZMZWFkLnNjaGVkdWxlUmVuZGVyKCk7XG4gICAgICAgICAgICBub2RlLnNjaGVkdWxlUmVuZGVyKCk7XG4gICAgICAgICAgICBub2RlLnJlc3VtZUZyb20gPSBwcmV2TGVhZDtcbiAgICAgICAgICAgIGlmIChwcmVzZXJ2ZUZvbGxvd09wYWNpdHkpIHtcbiAgICAgICAgICAgICAgICBub2RlLnJlc3VtZUZyb20ucHJlc2VydmVPcGFjaXR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcmV2TGVhZC5zbmFwc2hvdCkge1xuICAgICAgICAgICAgICAgIG5vZGUuc25hcHNob3QgPSBwcmV2TGVhZC5zbmFwc2hvdDtcbiAgICAgICAgICAgICAgICBub2RlLnNuYXBzaG90LmxhdGVzdFZhbHVlcyA9XG4gICAgICAgICAgICAgICAgICAgIHByZXZMZWFkLmFuaW1hdGlvblZhbHVlcyB8fCBwcmV2TGVhZC5sYXRlc3RWYWx1ZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobm9kZS5yb290ICYmIG5vZGUucm9vdC5pc1VwZGF0aW5nKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5pc0xheW91dERpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgY3Jvc3NmYWRlIH0gPSBub2RlLm9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY3Jvc3NmYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHByZXZMZWFkLmhpZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVE9ETzpcbiAgICAgICAgICAgICAqICAgLSBUZXN0IGJvcmRlciByYWRpdXMgd2hlbiBwcmV2aW91cyBub2RlIHdhcyBkZWxldGVkXG4gICAgICAgICAgICAgKiAgIC0gYm94U2hhZG93IG1peGluZ1xuICAgICAgICAgICAgICogICAtIFNoYXJlZCBiZXR3ZWVuIGVsZW1lbnQgQSBpbiBzY3JvbGxlZCBjb250YWluZXIgYW5kIGVsZW1lbnQgQiAoc2Nyb2xsIHN0YXlzIHRoZSBzYW1lIG9yIGNoYW5nZXMpXG4gICAgICAgICAgICAgKiAgIC0gU2hhcmVkIGJldHdlZW4gZWxlbWVudCBBIGluIHRyYW5zZm9ybWVkIGNvbnRhaW5lciBhbmQgZWxlbWVudCBCICh0cmFuc2Zvcm0gc3RheXMgdGhlIHNhbWUgb3IgY2hhbmdlcylcbiAgICAgICAgICAgICAqICAgLSBTaGFyZWQgYmV0d2VlbiBlbGVtZW50IEEgaW4gc2Nyb2xsZWQgcGFnZSBhbmQgZWxlbWVudCBCIChzY3JvbGwgc3RheXMgdGhlIHNhbWUgb3IgY2hhbmdlcylcbiAgICAgICAgICAgICAqIC0tLVxuICAgICAgICAgICAgICogICAtIENyb3NzZmFkZSBvcGFjaXR5IG9mIHJvb3Qgbm9kZXNcbiAgICAgICAgICAgICAqICAgLSBsYXlvdXRJZCBjaGFuZ2VzIGFmdGVyIGFuaW1hdGlvblxuICAgICAgICAgICAgICogICAtIGxheW91dElkIGNoYW5nZXMgbWlkIGFuaW1hdGlvblxuICAgICAgICAgICAgICovXG4gICAgICAgIH1cbiAgICB9XG4gICAgZXhpdEFuaW1hdGlvbkNvbXBsZXRlKCkge1xuICAgICAgICB0aGlzLm1lbWJlcnMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBvcHRpb25zLCByZXN1bWluZ0Zyb20gfSA9IG5vZGU7XG4gICAgICAgICAgICBvcHRpb25zLm9uRXhpdENvbXBsZXRlICYmIG9wdGlvbnMub25FeGl0Q29tcGxldGUoKTtcbiAgICAgICAgICAgIGlmIChyZXN1bWluZ0Zyb20pIHtcbiAgICAgICAgICAgICAgICByZXN1bWluZ0Zyb20ub3B0aW9ucy5vbkV4aXRDb21wbGV0ZSAmJlxuICAgICAgICAgICAgICAgICAgICByZXN1bWluZ0Zyb20ub3B0aW9ucy5vbkV4aXRDb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2NoZWR1bGVSZW5kZXIoKSB7XG4gICAgICAgIHRoaXMubWVtYmVycy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgICAgICBub2RlLmluc3RhbmNlICYmIG5vZGUuc2NoZWR1bGVSZW5kZXIoZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYXIgYW55IGxlYWRzIHRoYXQgaGF2ZSBiZWVuIHJlbW92ZWQgdGhpcyByZW5kZXIgdG8gcHJldmVudCB0aGVtIGZyb20gYmVpbmdcbiAgICAgKiB1c2VkIGluIGZ1dHVyZSBhbmltYXRpb25zIGFuZCB0byBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuICAgICAqL1xuICAgIHJlbW92ZUxlYWRTbmFwc2hvdCgpIHtcbiAgICAgICAgaWYgKHRoaXMubGVhZCAmJiB0aGlzLmxlYWQuc25hcHNob3QpIHtcbiAgICAgICAgICAgIHRoaXMubGVhZC5zbmFwc2hvdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgTm9kZVN0YWNrIH07XG4iLCJmdW5jdGlvbiBidWlsZFByb2plY3Rpb25UcmFuc2Zvcm0oZGVsdGEsIHRyZWVTY2FsZSwgbGF0ZXN0VHJhbnNmb3JtKSB7XG4gICAgbGV0IHRyYW5zZm9ybSA9IFwiXCI7XG4gICAgLyoqXG4gICAgICogVGhlIHRyYW5zbGF0aW9ucyB3ZSB1c2UgdG8gY2FsY3VsYXRlIGFyZSBhbHdheXMgcmVsYXRpdmUgdG8gdGhlIHZpZXdwb3J0IGNvb3JkaW5hdGUgc3BhY2UuXG4gICAgICogQnV0IHdoZW4gd2UgYXBwbHkgc2NhbGVzLCB3ZSBhbHNvIHNjYWxlIHRoZSBjb29yZGluYXRlIHNwYWNlIG9mIGFuIGVsZW1lbnQgYW5kIGl0cyBjaGlsZHJlbi5cbiAgICAgKiBGb3IgaW5zdGFuY2UgaWYgd2UgaGF2ZSBhIHRyZWVTY2FsZSAodGhlIGN1bG1pbmF0aW9uIG9mIGFsbCBwYXJlbnQgc2NhbGVzKSBvZiAwLjUgYW5kIHdlIG5lZWRcbiAgICAgKiB0byBtb3ZlIGFuIGVsZW1lbnQgMTAwIHBpeGVscywgd2UgYWN0dWFsbHkgbmVlZCB0byBtb3ZlIGl0IDIwMCBpbiB3aXRoaW4gdGhhdCBzY2FsZWQgc3BhY2UuXG4gICAgICovXG4gICAgY29uc3QgeFRyYW5zbGF0ZSA9IGRlbHRhLngudHJhbnNsYXRlIC8gdHJlZVNjYWxlLng7XG4gICAgY29uc3QgeVRyYW5zbGF0ZSA9IGRlbHRhLnkudHJhbnNsYXRlIC8gdHJlZVNjYWxlLnk7XG4gICAgaWYgKHhUcmFuc2xhdGUgfHwgeVRyYW5zbGF0ZSkge1xuICAgICAgICB0cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt4VHJhbnNsYXRlfXB4LCAke3lUcmFuc2xhdGV9cHgsIDApIGA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGx5IHNjYWxlIGNvcnJlY3Rpb24gZm9yIHRoZSB0cmVlIHRyYW5zZm9ybS5cbiAgICAgKiBUaGlzIHdpbGwgYXBwbHkgc2NhbGUgdG8gdGhlIHNjcmVlbi1vcmllbnRhdGVkIGF4ZXMuXG4gICAgICovXG4gICAgaWYgKHRyZWVTY2FsZS54ICE9PSAxIHx8IHRyZWVTY2FsZS55ICE9PSAxKSB7XG4gICAgICAgIHRyYW5zZm9ybSArPSBgc2NhbGUoJHsxIC8gdHJlZVNjYWxlLnh9LCAkezEgLyB0cmVlU2NhbGUueX0pIGA7XG4gICAgfVxuICAgIGlmIChsYXRlc3RUcmFuc2Zvcm0pIHtcbiAgICAgICAgY29uc3QgeyByb3RhdGUsIHJvdGF0ZVgsIHJvdGF0ZVkgfSA9IGxhdGVzdFRyYW5zZm9ybTtcbiAgICAgICAgaWYgKHJvdGF0ZSlcbiAgICAgICAgICAgIHRyYW5zZm9ybSArPSBgcm90YXRlKCR7cm90YXRlfWRlZykgYDtcbiAgICAgICAgaWYgKHJvdGF0ZVgpXG4gICAgICAgICAgICB0cmFuc2Zvcm0gKz0gYHJvdGF0ZVgoJHtyb3RhdGVYfWRlZykgYDtcbiAgICAgICAgaWYgKHJvdGF0ZVkpXG4gICAgICAgICAgICB0cmFuc2Zvcm0gKz0gYHJvdGF0ZVkoJHtyb3RhdGVZfWRlZykgYDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwbHkgc2NhbGUgdG8gbWF0Y2ggdGhlIHNpemUgb2YgdGhlIGVsZW1lbnQgdG8gdGhlIHNpemUgd2Ugd2FudCBpdC5cbiAgICAgKiBUaGlzIHdpbGwgYXBwbHkgc2NhbGUgdG8gdGhlIGVsZW1lbnQtb3JpZW50YXRlZCBheGVzLlxuICAgICAqL1xuICAgIGNvbnN0IGVsZW1lbnRTY2FsZVggPSBkZWx0YS54LnNjYWxlICogdHJlZVNjYWxlLng7XG4gICAgY29uc3QgZWxlbWVudFNjYWxlWSA9IGRlbHRhLnkuc2NhbGUgKiB0cmVlU2NhbGUueTtcbiAgICBpZiAoZWxlbWVudFNjYWxlWCAhPT0gMSB8fCBlbGVtZW50U2NhbGVZICE9PSAxKSB7XG4gICAgICAgIHRyYW5zZm9ybSArPSBgc2NhbGUoJHtlbGVtZW50U2NhbGVYfSwgJHtlbGVtZW50U2NhbGVZfSlgO1xuICAgIH1cbiAgICByZXR1cm4gdHJhbnNmb3JtIHx8IFwibm9uZVwiO1xufVxuXG5leHBvcnQgeyBidWlsZFByb2plY3Rpb25UcmFuc2Zvcm0gfTtcbiIsImNvbnN0IGNvbXBhcmVCeURlcHRoID0gKGEsIGIpID0+IGEuZGVwdGggLSBiLmRlcHRoO1xuXG5leHBvcnQgeyBjb21wYXJlQnlEZXB0aCB9O1xuIiwiaW1wb3J0IHsgYWRkVW5pcXVlSXRlbSwgcmVtb3ZlSXRlbSB9IGZyb20gJy4uLy4uL3V0aWxzL2FycmF5Lm1qcyc7XG5pbXBvcnQgeyBjb21wYXJlQnlEZXB0aCB9IGZyb20gJy4vY29tcGFyZS1ieS1kZXB0aC5tanMnO1xuXG5jbGFzcyBGbGF0VHJlZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgdGhpcy5pc0RpcnR5ID0gZmFsc2U7XG4gICAgfVxuICAgIGFkZChjaGlsZCkge1xuICAgICAgICBhZGRVbmlxdWVJdGVtKHRoaXMuY2hpbGRyZW4sIGNoaWxkKTtcbiAgICAgICAgdGhpcy5pc0RpcnR5ID0gdHJ1ZTtcbiAgICB9XG4gICAgcmVtb3ZlKGNoaWxkKSB7XG4gICAgICAgIHJlbW92ZUl0ZW0odGhpcy5jaGlsZHJlbiwgY2hpbGQpO1xuICAgICAgICB0aGlzLmlzRGlydHkgPSB0cnVlO1xuICAgIH1cbiAgICBmb3JFYWNoKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuaXNEaXJ0eSAmJiB0aGlzLmNoaWxkcmVuLnNvcnQoY29tcGFyZUJ5RGVwdGgpO1xuICAgICAgICB0aGlzLmlzRGlydHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGNhbGxiYWNrKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEZsYXRUcmVlIH07XG4iLCJpbXBvcnQgeyBTdWJzY3JpcHRpb25NYW5hZ2VyIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3Vic2NyaXB0aW9uLW1hbmFnZXIubWpzJztcbmltcG9ydCB7IG1peFZhbHVlcyB9IGZyb20gJy4uL2FuaW1hdGlvbi9taXgtdmFsdWVzLm1qcyc7XG5pbXBvcnQgeyBjb3B5Qm94SW50byB9IGZyb20gJy4uL2dlb21ldHJ5L2NvcHkubWpzJztcbmltcG9ydCB7IHRyYW5zbGF0ZUF4aXMsIHRyYW5zZm9ybUJveCwgYXBwbHlCb3hEZWx0YSwgYXBwbHlUcmVlRGVsdGFzIH0gZnJvbSAnLi4vZ2VvbWV0cnkvZGVsdGEtYXBwbHkubWpzJztcbmltcG9ydCB7IGNhbGNSZWxhdGl2ZVBvc2l0aW9uLCBjYWxjUmVsYXRpdmVCb3gsIGNhbGNCb3hEZWx0YSwgY2FsY0xlbmd0aCwgaXNOZWFyIH0gZnJvbSAnLi4vZ2VvbWV0cnkvZGVsdGEtY2FsYy5tanMnO1xuaW1wb3J0IHsgcmVtb3ZlQm94VHJhbnNmb3JtcyB9IGZyb20gJy4uL2dlb21ldHJ5L2RlbHRhLXJlbW92ZS5tanMnO1xuaW1wb3J0IHsgY3JlYXRlQm94LCBjcmVhdGVEZWx0YSB9IGZyb20gJy4uL2dlb21ldHJ5L21vZGVscy5tanMnO1xuaW1wb3J0IHsgZ2V0VmFsdWVUcmFuc2l0aW9uIH0gZnJvbSAnLi4vLi4vYW5pbWF0aW9uL3V0aWxzL3RyYW5zaXRpb25zLm1qcyc7XG5pbXBvcnQgeyBib3hFcXVhbHNSb3VuZGVkLCBpc0RlbHRhWmVybywgYXNwZWN0UmF0aW8sIGJveEVxdWFscyB9IGZyb20gJy4uL2dlb21ldHJ5L3V0aWxzLm1qcyc7XG5pbXBvcnQgeyBOb2RlU3RhY2sgfSBmcm9tICcuLi9zaGFyZWQvc3RhY2subWpzJztcbmltcG9ydCB7IHNjYWxlQ29ycmVjdG9ycyB9IGZyb20gJy4uL3N0eWxlcy9zY2FsZS1jb3JyZWN0aW9uLm1qcyc7XG5pbXBvcnQgeyBidWlsZFByb2plY3Rpb25UcmFuc2Zvcm0gfSBmcm9tICcuLi9zdHlsZXMvdHJhbnNmb3JtLm1qcyc7XG5pbXBvcnQgeyBlYWNoQXhpcyB9IGZyb20gJy4uL3V0aWxzL2VhY2gtYXhpcy5tanMnO1xuaW1wb3J0IHsgaGFzVHJhbnNmb3JtLCBoYXNTY2FsZSwgaGFzMkRUcmFuc2xhdGUgfSBmcm9tICcuLi91dGlscy9oYXMtdHJhbnNmb3JtLm1qcyc7XG5pbXBvcnQgeyBGbGF0VHJlZSB9IGZyb20gJy4uLy4uL3JlbmRlci91dGlscy9mbGF0LXRyZWUubWpzJztcbmltcG9ydCB7IHJlc29sdmVNb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uL3ZhbHVlL3V0aWxzL3Jlc29sdmUtbW90aW9uLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyBnbG9iYWxQcm9qZWN0aW9uU3RhdGUgfSBmcm9tICcuL3N0YXRlLm1qcyc7XG5pbXBvcnQgeyBkZWxheSB9IGZyb20gJy4uLy4uL3V0aWxzL2RlbGF5Lm1qcyc7XG5pbXBvcnQgeyBtaXggfSBmcm9tICcuLi8uLi91dGlscy9taXgubWpzJztcbmltcG9ydCB7IHJlY29yZCB9IGZyb20gJy4uLy4uL2RlYnVnL3JlY29yZC5tanMnO1xuaW1wb3J0IHsgaXNTVkdFbGVtZW50IH0gZnJvbSAnLi4vLi4vcmVuZGVyL2RvbS91dGlscy9pcy1zdmctZWxlbWVudC5tanMnO1xuaW1wb3J0IHsgYW5pbWF0ZVNpbmdsZVZhbHVlIH0gZnJvbSAnLi4vLi4vYW5pbWF0aW9uL2ludGVyZmFjZXMvc2luZ2xlLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4uLy4uL3V0aWxzL2NsYW1wLm1qcyc7XG5pbXBvcnQgeyBjYW5jZWxGcmFtZSwgZnJhbWVEYXRhLCBzdGVwcywgZnJhbWUgfSBmcm9tICcuLi8uLi9mcmFtZWxvb3AvZnJhbWUubWpzJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuLi8uLi91dGlscy9ub29wLm1qcyc7XG5cbmNvbnN0IHRyYW5zZm9ybUF4ZXMgPSBbXCJcIiwgXCJYXCIsIFwiWVwiLCBcIlpcIl07XG4vKipcbiAqIFdlIHVzZSAxMDAwIGFzIHRoZSBhbmltYXRpb24gdGFyZ2V0IGFzIDAtMTAwMCBtYXBzIGJldHRlciB0byBwaXhlbHMgdGhhbiAwLTFcbiAqIHdoaWNoIGhhcyBhIG5vdGljZWFibGUgZGlmZmVyZW5jZSBpbiBzcHJpbmcgYW5pbWF0aW9uc1xuICovXG5jb25zdCBhbmltYXRpb25UYXJnZXQgPSAxMDAwO1xubGV0IGlkID0gMDtcbi8qKlxuICogVXNlIGEgbXV0YWJsZSBkYXRhIG9iamVjdCBmb3IgZGVidWcgZGF0YSBzbyBhcyB0byBub3QgY3JlYXRlIGEgbmV3XG4gKiBvYmplY3QgZXZlcnkgZnJhbWUuXG4gKi9cbmNvbnN0IHByb2plY3Rpb25GcmFtZURhdGEgPSB7XG4gICAgdHlwZTogXCJwcm9qZWN0aW9uRnJhbWVcIixcbiAgICB0b3RhbE5vZGVzOiAwLFxuICAgIHJlc29sdmVkVGFyZ2V0RGVsdGFzOiAwLFxuICAgIHJlY2FsY3VsYXRlZFByb2plY3Rpb246IDAsXG59O1xuZnVuY3Rpb24gY3JlYXRlUHJvamVjdGlvbk5vZGUoeyBhdHRhY2hSZXNpemVMaXN0ZW5lciwgZGVmYXVsdFBhcmVudCwgbWVhc3VyZVNjcm9sbCwgY2hlY2tJc1Njcm9sbFJvb3QsIHJlc2V0VHJhbnNmb3JtLCB9KSB7XG4gICAgcmV0dXJuIGNsYXNzIFByb2plY3Rpb25Ob2RlIHtcbiAgICAgICAgY29uc3RydWN0b3IobGF0ZXN0VmFsdWVzID0ge30sIHBhcmVudCA9IGRlZmF1bHRQYXJlbnQgPT09IG51bGwgfHwgZGVmYXVsdFBhcmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVmYXVsdFBhcmVudCgpKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEEgdW5pcXVlIElEIGdlbmVyYXRlZCBmb3IgZXZlcnkgcHJvamVjdGlvbiBub2RlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmlkID0gaWQrKztcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQW4gaWQgdGhhdCByZXByZXNlbnRzIGEgdW5pcXVlIHNlc3Npb24gaW5zdGlnYXRlZCBieSBzdGFydFVwZGF0ZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25JZCA9IDA7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEEgU2V0IGNvbnRhaW5pbmcgYWxsIHRoaXMgY29tcG9uZW50J3MgY2hpbGRyZW4uIFRoaXMgaXMgdXNlZCB0byBpdGVyYXRlXG4gICAgICAgICAgICAgKiB0aHJvdWdoIHRoZSBjaGlsZHJlbi5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBUT0RPOiBUaGlzIGNvdWxkIGJlIGZhc3RlciB0byBpdGVyYXRlIGFzIGEgZmxhdCBhcnJheSBzdG9yZWQgb24gdGhlIHJvb3Qgbm9kZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbiA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogT3B0aW9ucyBmb3IgdGhlIG5vZGUuIFdlIHVzZSB0aGlzIHRvIGNvbmZpZ3VyZSB3aGF0IGtpbmQgb2YgbGF5b3V0IGFuaW1hdGlvbnNcbiAgICAgICAgICAgICAqIHdlIHNob3VsZCBwZXJmb3JtIChpZiBhbnkpLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogV2UgdXNlIHRoaXMgdG8gZGV0ZWN0IHdoZW4gaXRzIHNhZmUgdG8gc2h1dCBkb3duIHBhcnQgb2YgYSBwcm9qZWN0aW9uIHRyZWUuXG4gICAgICAgICAgICAgKiBXZSBoYXZlIHRvIGtlZXAgcHJvamVjdGluZyBjaGlsZHJlbiBmb3Igc2NhbGUgY29ycmVjdGlvbiBhbmQgcmVsYXRpdmUgcHJvamVjdGlvblxuICAgICAgICAgICAgICogdW50aWwgYWxsIHRoZWlyIHBhcmVudHMgc3RvcCBwZXJmb3JtaW5nIGxheW91dCBhbmltYXRpb25zLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmlzVHJlZUFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5pc0FuaW1hdGlvbkJsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRmxhZyB0byB0cnVlIGlmIHdlIHRoaW5rIHRoaXMgbGF5b3V0IGhhcyBiZWVuIGNoYW5nZWQuIFdlIGNhbid0IGFsd2F5cyBrbm93IHRoaXMsXG4gICAgICAgICAgICAgKiBjdXJyZW50bHkgd2Ugc2V0IGl0IHRvIHRydWUgZXZlcnkgdGltZSBhIGNvbXBvbmVudCByZW5kZXJzLCBvciBpZiBpdCBoYXMgYSBsYXlvdXREZXBlbmRlbmN5XG4gICAgICAgICAgICAgKiBpZiB0aGF0IGhhcyBjaGFuZ2VkIGJldHdlZW4gcmVuZGVycy4gQWRkaXRpb25hbGx5LCBjb21wb25lbnRzIGNhbiBiZSBncm91cGVkIGJ5IExheW91dEdyb3VwXG4gICAgICAgICAgICAgKiBhbmQgaWYgb25lIG5vZGUgaXMgZGlydGllZCwgdGhleSBhbGwgYXJlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmlzTGF5b3V0RGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRmxhZyB0byB0cnVlIGlmIHdlIHRoaW5rIHRoZSBwcm9qZWN0aW9uIGNhbGN1bGF0aW9ucyBmb3IgdGhpcyBub2RlIG5lZWRzXG4gICAgICAgICAgICAgKiByZWNhbGN1bGF0aW5nIGFzIGEgcmVzdWx0IG9mIGFuIHVwZGF0ZWQgdHJhbnNmb3JtIG9yIGxheW91dCBhbmltYXRpb24uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuaXNQcm9qZWN0aW9uRGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRmxhZyB0byB0cnVlIGlmIHRoZSBsYXlvdXQgKm9yKiB0cmFuc2Zvcm0gaGFzIGNoYW5nZWQuIFRoaXMgdGhlbiBnZXRzIHByb3BhZ2F0ZWRcbiAgICAgICAgICAgICAqIHRocm91Z2hvdXQgdGhlIHByb2plY3Rpb24gdHJlZSwgZm9yY2luZyBhbnkgZWxlbWVudCBiZWxvdyB0byByZWNhbGN1bGF0ZSBvbiB0aGUgbmV4dCBmcmFtZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5pc1NoYXJlZFByb2plY3Rpb25EaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGbGFnIHRyYW5zZm9ybSBkaXJ0eS4gVGhpcyBnZXRzIHByb3BhZ2F0ZWQgdGhyb3VnaG91dCB0aGUgd2hvbGUgdHJlZSBidXQgaXMgb25seVxuICAgICAgICAgICAgICogcmVzcGVjdGVkIGJ5IHNoYXJlZCBub2Rlcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5pc1RyYW5zZm9ybURpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEJsb2NrIGxheW91dCB1cGRhdGVzIGZvciBpbnN0YW50IGxheW91dCB0cmFuc2l0aW9ucyB0aHJvdWdob3V0IHRoZSB0cmVlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU1hbnVhbGx5QmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVCbG9ja2VkQnlSZXNpemUgPSBmYWxzZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0IHRvIHRydWUgYmV0d2VlbiB0aGUgc3RhcnQgb2YgdGhlIGZpcnN0IGB3aWxsVXBkYXRlYCBjYWxsIGFuZCB0aGUgZW5kIG9mIHRoZSBgZGlkVXBkYXRlYFxuICAgICAgICAgICAgICogY2FsbC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5pc1VwZGF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgaXMgYW4gU1ZHIGVsZW1lbnQgd2UgY3VycmVudGx5IGRpc2FibGUgcHJvamVjdGlvbiB0cmFuc2Zvcm1zXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuaXNTVkcgPSBmYWxzZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRmxhZyB0byB0cnVlIChkdXJpbmcgcHJvbW90aW9uKSBpZiBhIG5vZGUgZG9pbmcgYW4gaW5zdGFudCBsYXlvdXQgdHJhbnNpdGlvbiBuZWVkcyB0byByZXNldFxuICAgICAgICAgICAgICogaXRzIHByb2plY3Rpb24gc3R5bGVzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLm5lZWRzUmVzZXQgPSBmYWxzZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRmxhZ3Mgd2hldGhlciB0aGlzIG5vZGUgc2hvdWxkIGhhdmUgaXRzIHRyYW5zZm9ybSByZXNldCBwcmlvciB0byBtZWFzdXJpbmcuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuc2hvdWxkUmVzZXRUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgY2FsY3VsYXRlZCBjb250ZXh0dWFsL2FjY3VtdWxhdGVkL3RyZWUgc2NhbGUuXG4gICAgICAgICAgICAgKiBUaGlzIHdpbGwgYmUgdXNlZCB0byBzY2FsZSBjYWxjdWxjYXRlZCBwcm9qZWN0aW9uIHRyYW5zZm9ybXMsIGFzIHRoZXNlIGFyZVxuICAgICAgICAgICAgICogY2FsY3VsYXRlZCBpbiBzY3JlZW4tc3BhY2UgYnV0IG5lZWQgdG8gYmUgc2NhbGVkIGZvciBlbGVtZW50cyB0byBsYXlvdXRseVxuICAgICAgICAgICAgICogbWFrZSBpdCB0byB0aGVpciBjYWxjdWxhdGVkIGRlc3RpbmF0aW9ucy5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBUT0RPOiBMYXp5LWluaXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy50cmVlU2NhbGUgPSB7IHg6IDEsIHk6IDEgfTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5ldmVudEhhbmRsZXJzID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgdGhpcy5oYXNUcmVlQW5pbWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIE5vdGU6IEN1cnJlbnRseSBvbmx5IHJ1bm5pbmcgb24gcm9vdCBub2RlXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5jaGVja1VwZGF0ZUZhaWxlZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1VwZGF0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNVcGRhdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQWxsU25hcHNob3RzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhpcyBpcyBhIG11bHRpLXN0ZXAgcHJvY2VzcyBhcyBzaGFyZWQgbm9kZXMgbWlnaHQgYmUgb2YgZGlmZmVyZW50IGRlcHRocy4gTm9kZXNcbiAgICAgICAgICAgICAqIGFyZSBzb3J0ZWQgYnkgZGVwdGggb3JkZXIsIHNvIHdlIG5lZWQgdG8gcmVzb2x2ZSB0aGUgZW50aXJlIHRyZWUgYmVmb3JlIG1vdmluZyB0b1xuICAgICAgICAgICAgICogdGhlIG5leHQgc3RlcC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy51cGRhdGVQcm9qZWN0aW9uID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFJlc2V0IGRlYnVnIGNvdW50cy4gTWFudWFsbHkgcmVzZXR0aW5nIHJhdGhlciB0aGFuIGNyZWF0aW5nIGEgbmV3XG4gICAgICAgICAgICAgICAgICogb2JqZWN0IGVhY2ggZnJhbWUuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgcHJvamVjdGlvbkZyYW1lRGF0YS50b3RhbE5vZGVzID1cbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbkZyYW1lRGF0YS5yZXNvbHZlZFRhcmdldERlbHRhcyA9XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0aW9uRnJhbWVEYXRhLnJlY2FsY3VsYXRlZFByb2plY3Rpb24gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDA7XG4gICAgICAgICAgICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKHByb3BhZ2F0ZURpcnR5Tm9kZXMpO1xuICAgICAgICAgICAgICAgIHRoaXMubm9kZXMuZm9yRWFjaChyZXNvbHZlVGFyZ2V0RGVsdGEpO1xuICAgICAgICAgICAgICAgIHRoaXMubm9kZXMuZm9yRWFjaChjYWxjUHJvamVjdGlvbik7XG4gICAgICAgICAgICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKGNsZWFuRGlydHlOb2Rlcyk7XG4gICAgICAgICAgICAgICAgcmVjb3JkKHByb2plY3Rpb25GcmFtZURhdGEpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuaGFzUHJvamVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmlzVmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvblByb2dyZXNzID0gMDtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2hhcmVkIGxheW91dFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAvLyBUT0RPIE9ubHkgcnVubmluZyBvbiByb290IG5vZGVcbiAgICAgICAgICAgIHRoaXMuc2hhcmVkTm9kZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICB0aGlzLmxhdGVzdFZhbHVlcyA9IGxhdGVzdFZhbHVlcztcbiAgICAgICAgICAgIHRoaXMucm9vdCA9IHBhcmVudCA/IHBhcmVudC5yb290IHx8IHBhcmVudCA6IHRoaXM7XG4gICAgICAgICAgICB0aGlzLnBhdGggPSBwYXJlbnQgPyBbLi4ucGFyZW50LnBhdGgsIHBhcmVudF0gOiBbXTtcbiAgICAgICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICAgICAgdGhpcy5kZXB0aCA9IHBhcmVudCA/IHBhcmVudC5kZXB0aCArIDEgOiAwO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhdGhbaV0uc2hvdWxkUmVzZXRUcmFuc2Zvcm0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucm9vdCA9PT0gdGhpcylcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVzID0gbmV3IEZsYXRUcmVlKCk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZXZlbnRIYW5kbGVycy5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50SGFuZGxlcnMuc2V0KG5hbWUsIG5ldyBTdWJzY3JpcHRpb25NYW5hZ2VyKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRIYW5kbGVycy5nZXQobmFtZSkuYWRkKGhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICAgIG5vdGlmeUxpc3RlbmVycyhuYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgICAgICBjb25zdCBzdWJzY3JpcHRpb25NYW5hZ2VyID0gdGhpcy5ldmVudEhhbmRsZXJzLmdldChuYW1lKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbk1hbmFnZXIgJiYgc3Vic2NyaXB0aW9uTWFuYWdlci5ub3RpZnkoLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgaGFzTGlzdGVuZXJzKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV2ZW50SGFuZGxlcnMuaGFzKG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMaWZlY3ljbGVzXG4gICAgICAgICAqL1xuICAgICAgICBtb3VudChpbnN0YW5jZSwgaXNMYXlvdXREaXJ0eSA9IHRoaXMucm9vdC5oYXNUcmVlQW5pbWF0ZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmluc3RhbmNlKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuaXNTVkcgPSBpc1NWR0VsZW1lbnQoaW5zdGFuY2UpO1xuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICAgICAgY29uc3QgeyBsYXlvdXRJZCwgbGF5b3V0LCB2aXN1YWxFbGVtZW50IH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgICAgICBpZiAodmlzdWFsRWxlbWVudCAmJiAhdmlzdWFsRWxlbWVudC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5tb3VudChpbnN0YW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJvb3Qubm9kZXMuYWRkKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuY2hpbGRyZW4uYWRkKHRoaXMpO1xuICAgICAgICAgICAgaWYgKGlzTGF5b3V0RGlydHkgJiYgKGxheW91dCB8fCBsYXlvdXRJZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzTGF5b3V0RGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGF0dGFjaFJlc2l6ZUxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNhbmNlbERlbGF5O1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc2l6ZVVuYmxvY2tVcGRhdGUgPSAoKSA9PiAodGhpcy5yb290LnVwZGF0ZUJsb2NrZWRCeVJlc2l6ZSA9IGZhbHNlKTtcbiAgICAgICAgICAgICAgICBhdHRhY2hSZXNpemVMaXN0ZW5lcihpbnN0YW5jZSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3QudXBkYXRlQmxvY2tlZEJ5UmVzaXplID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsRGVsYXkgJiYgY2FuY2VsRGVsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsRGVsYXkgPSBkZWxheShyZXNpemVVbmJsb2NrVXBkYXRlLCAyNTApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsUHJvamVjdGlvblN0YXRlLmhhc0FuaW1hdGVkU2luY2VSZXNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFByb2plY3Rpb25TdGF0ZS5oYXNBbmltYXRlZFNpbmNlUmVzaXplID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vZGVzLmZvckVhY2goZmluaXNoQW5pbWF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxheW91dElkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yb290LnJlZ2lzdGVyU2hhcmVkTm9kZShsYXlvdXRJZCwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBPbmx5IHJlZ2lzdGVyIHRoZSBoYW5kbGVyIGlmIGl0IHJlcXVpcmVzIGxheW91dCBhbmltYXRpb25cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYW5pbWF0ZSAhPT0gZmFsc2UgJiZcbiAgICAgICAgICAgICAgICB2aXN1YWxFbGVtZW50ICYmXG4gICAgICAgICAgICAgICAgKGxheW91dElkIHx8IGxheW91dCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXCJkaWRVcGRhdGVcIiwgKHsgZGVsdGEsIGhhc0xheW91dENoYW5nZWQsIGhhc1JlbGF0aXZlVGFyZ2V0Q2hhbmdlZCwgbGF5b3V0OiBuZXdMYXlvdXQsIH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNUcmVlQW5pbWF0aW9uQmxvY2tlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmVUYXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogQ2hlY2sgaGVyZSBpZiBhbiBhbmltYXRpb24gZXhpc3RzXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxheW91dFRyYW5zaXRpb24gPSB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5nZXREZWZhdWx0VHJhbnNpdGlvbigpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0TGF5b3V0VHJhbnNpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBvbkxheW91dEFuaW1hdGlvblN0YXJ0LCBvbkxheW91dEFuaW1hdGlvbkNvbXBsZXRlLCB9ID0gdmlzdWFsRWxlbWVudC5nZXRQcm9wcygpO1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogVGhlIHRhcmdldCBsYXlvdXQgb2YgdGhlIGVsZW1lbnQgbWlnaHQgc3RheSB0aGUgc2FtZSxcbiAgICAgICAgICAgICAgICAgICAgICogYnV0IGl0cyBwb3NpdGlvbiByZWxhdGl2ZSB0byBpdHMgcGFyZW50IGhhcyBjaGFuZ2VkLlxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0Q2hhbmdlZCA9ICF0aGlzLnRhcmdldExheW91dCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgIWJveEVxdWFsc1JvdW5kZWQodGhpcy50YXJnZXRMYXlvdXQsIG5ld0xheW91dCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc1JlbGF0aXZlVGFyZ2V0Q2hhbmdlZDtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIElmIHRoZSBsYXlvdXQgaGFzbid0IHNlZW1lZCB0byBoYXZlIGNoYW5nZWQsIGl0IG1pZ2h0IGJlIHRoYXQgdGhlXG4gICAgICAgICAgICAgICAgICAgICAqIGVsZW1lbnQgaXMgdmlzdWFsbHkgaW4gdGhlIHNhbWUgcGxhY2UgaW4gdGhlIGRvY3VtZW50IGJ1dCBpdHMgcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICogcmVsYXRpdmUgdG8gaXRzIHBhcmVudCBoYXMgaW5kZWVkIGNoYW5nZWQuIFNvIGhlcmUgd2UgY2hlY2sgZm9yIHRoYXQuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBoYXNPbmx5UmVsYXRpdmVUYXJnZXRDaGFuZ2VkID0gIWhhc0xheW91dENoYW5nZWQgJiYgaGFzUmVsYXRpdmVUYXJnZXRDaGFuZ2VkO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmxheW91dFJvb3QgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnJlc3VtZUZyb20gJiYgdGhpcy5yZXN1bWVGcm9tLmluc3RhbmNlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzT25seVJlbGF0aXZlVGFyZ2V0Q2hhbmdlZCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKGhhc0xheW91dENoYW5nZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGFyZ2V0Q2hhbmdlZCB8fCAhdGhpcy5jdXJyZW50QW5pbWF0aW9uKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlc3VtZUZyb20pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3VtaW5nRnJvbSA9IHRoaXMucmVzdW1lRnJvbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3VtaW5nRnJvbS5yZXN1bWluZ0Zyb20gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEFuaW1hdGlvbk9yaWdpbihkZWx0YSwgaGFzT25seVJlbGF0aXZlVGFyZ2V0Q2hhbmdlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmltYXRpb25PcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmdldFZhbHVlVHJhbnNpdGlvbihsYXlvdXRUcmFuc2l0aW9uLCBcImxheW91dFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblBsYXk6IG9uTGF5b3V0QW5pbWF0aW9uU3RhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZTogb25MYXlvdXRBbmltYXRpb25Db21wbGV0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmlzdWFsRWxlbWVudC5zaG91bGRSZWR1Y2VNb3Rpb24gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMubGF5b3V0Um9vdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbk9wdGlvbnMuZGVsYXkgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbk9wdGlvbnMudHlwZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydEFuaW1hdGlvbihhbmltYXRpb25PcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICogSWYgdGhlIGxheW91dCBoYXNuJ3QgY2hhbmdlZCBhbmQgd2UgaGF2ZSBhbiBhbmltYXRpb24gdGhhdCBoYXNuJ3Qgc3RhcnRlZCB5ZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBmaW5pc2ggaXQgaW1tZWRpYXRlbHkuIE90aGVyd2lzZSBpdCB3aWxsIGJlIGFuaW1hdGluZyBmcm9tIGEgbG9jYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAqIHRoYXQgd2FzIHByb2JhYmx5IG5ldmVyIGNvbW1pdGVkIHRvIHNjcmVlbiBhbmQgbG9vayBsaWtlIGEganVtcHkgYm94LlxuICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0xheW91dENoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5pc2hBbmltYXRpb24odGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0xlYWQoKSAmJiB0aGlzLm9wdGlvbnMub25FeGl0Q29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMub25FeGl0Q29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldExheW91dCA9IG5ld0xheW91dDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB1bm1vdW50KCkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmxheW91dElkICYmIHRoaXMud2lsbFVwZGF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5yb290Lm5vZGVzLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gdGhpcy5nZXRTdGFjaygpO1xuICAgICAgICAgICAgc3RhY2sgJiYgc3RhY2sucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuY2hpbGRyZW4uZGVsZXRlKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNhbmNlbEZyYW1lKHRoaXMudXBkYXRlUHJvamVjdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb25seSBvbiB0aGUgcm9vdFxuICAgICAgICBibG9ja1VwZGF0ZSgpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTWFudWFsbHlCbG9ja2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB1bmJsb2NrVXBkYXRlKCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVNYW51YWxseUJsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpc1VwZGF0ZUJsb2NrZWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVNYW51YWxseUJsb2NrZWQgfHwgdGhpcy51cGRhdGVCbG9ja2VkQnlSZXNpemU7XG4gICAgICAgIH1cbiAgICAgICAgaXNUcmVlQW5pbWF0aW9uQmxvY2tlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5pc0FuaW1hdGlvbkJsb2NrZWQgfHxcbiAgICAgICAgICAgICAgICAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuaXNUcmVlQW5pbWF0aW9uQmxvY2tlZCgpKSB8fFxuICAgICAgICAgICAgICAgIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBOb3RlOiBjdXJyZW50bHkgb25seSBydW5uaW5nIG9uIHJvb3Qgbm9kZVxuICAgICAgICBzdGFydFVwZGF0ZSgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVXBkYXRlQmxvY2tlZCgpKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuaXNVcGRhdGluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLm5vZGVzICYmIHRoaXMubm9kZXMuZm9yRWFjaChyZXNldFJvdGF0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uSWQrKztcbiAgICAgICAgfVxuICAgICAgICBnZXRUcmFuc2Zvcm1UZW1wbGF0ZSgpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgdmlzdWFsRWxlbWVudCB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgcmV0dXJuIHZpc3VhbEVsZW1lbnQgJiYgdmlzdWFsRWxlbWVudC5nZXRQcm9wcygpLnRyYW5zZm9ybVRlbXBsYXRlO1xuICAgICAgICB9XG4gICAgICAgIHdpbGxVcGRhdGUoc2hvdWxkTm90aWZ5TGlzdGVuZXJzID0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhpcy5yb290Lmhhc1RyZWVBbmltYXRlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGhpcy5yb290LmlzVXBkYXRlQmxvY2tlZCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLm9uRXhpdENvbXBsZXRlICYmIHRoaXMub3B0aW9ucy5vbkV4aXRDb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICF0aGlzLnJvb3QuaXNVcGRhdGluZyAmJiB0aGlzLnJvb3Quc3RhcnRVcGRhdGUoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzTGF5b3V0RGlydHkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5pc0xheW91dERpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMucGF0aFtpXTtcbiAgICAgICAgICAgICAgICBub2RlLnNob3VsZFJlc2V0VHJhbnNmb3JtID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBub2RlLnVwZGF0ZVNjcm9sbChcInNuYXBzaG90XCIpO1xuICAgICAgICAgICAgICAgIGlmIChub2RlLm9wdGlvbnMubGF5b3V0Um9vdCkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLndpbGxVcGRhdGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgbGF5b3V0SWQsIGxheW91dCB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgaWYgKGxheW91dElkID09PSB1bmRlZmluZWQgJiYgIWxheW91dClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1UZW1wbGF0ZSA9IHRoaXMuZ2V0VHJhbnNmb3JtVGVtcGxhdGUoKTtcbiAgICAgICAgICAgIHRoaXMucHJldlRyYW5zZm9ybVRlbXBsYXRlVmFsdWUgPSB0cmFuc2Zvcm1UZW1wbGF0ZVxuICAgICAgICAgICAgICAgID8gdHJhbnNmb3JtVGVtcGxhdGUodGhpcy5sYXRlc3RWYWx1ZXMsIFwiXCIpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNuYXBzaG90KCk7XG4gICAgICAgICAgICBzaG91bGROb3RpZnlMaXN0ZW5lcnMgJiYgdGhpcy5ub3RpZnlMaXN0ZW5lcnMoXCJ3aWxsVXBkYXRlXCIpO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVXYXNCbG9ja2VkID0gdGhpcy5pc1VwZGF0ZUJsb2NrZWQoKTtcbiAgICAgICAgICAgIC8vIFdoZW4gZG9pbmcgYW4gaW5zdGFudCB0cmFuc2l0aW9uLCB3ZSBza2lwIHRoZSBsYXlvdXQgdXBkYXRlLFxuICAgICAgICAgICAgLy8gYnV0IHNob3VsZCBzdGlsbCBjbGVhbiB1cCB0aGUgbWVhc3VyZW1lbnRzIHNvIHRoYXQgdGhlIG5leHRcbiAgICAgICAgICAgIC8vIHNuYXBzaG90IGNvdWxkIGJlIHRha2VuIGNvcnJlY3RseS5cbiAgICAgICAgICAgIGlmICh1cGRhdGVXYXNCbG9ja2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bmJsb2NrVXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhckFsbFNuYXBzaG90cygpO1xuICAgICAgICAgICAgICAgIHRoaXMubm9kZXMuZm9yRWFjaChjbGVhck1lYXN1cmVtZW50cyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzVXBkYXRpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVzLmZvckVhY2goY2xlYXJJc0xheW91dERpcnR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaXNVcGRhdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXcml0ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLm5vZGVzLmZvckVhY2gocmVzZXRUcmFuc2Zvcm1TdHlsZSk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlYWQgPT09PT09PT09PT09PT09PT09XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBsYXlvdXQgbWVhc3VyZW1lbnRzIG9mIHVwZGF0ZWQgY2hpbGRyZW5cbiAgICAgICAgICAgIHRoaXMubm9kZXMuZm9yRWFjaCh1cGRhdGVMYXlvdXQpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXcml0ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAvLyBOb3RpZnkgbGlzdGVuZXJzIHRoYXQgdGhlIGxheW91dCBpcyB1cGRhdGVkXG4gICAgICAgICAgICB0aGlzLm5vZGVzLmZvckVhY2gobm90aWZ5TGF5b3V0VXBkYXRlKTtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJBbGxTbmFwc2hvdHMoKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTWFudWFsbHkgZmx1c2ggYW55IHBlbmRpbmcgdXBkYXRlcy4gSWRlYWxseVxuICAgICAgICAgICAgICogd2UgY291bGQgbGVhdmUgdGhpcyB0byB0aGUgZm9sbG93aW5nIHJlcXVlc3RBbmltYXRpb25GcmFtZSBidXQgdGhpcyBzZWVtc1xuICAgICAgICAgICAgICogdG8gbGVhdmUgYSBmbGFzaCBvZiBpbmNvcnJlY3RseSBzdHlsZWQgY29udGVudC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3Qgbm93ID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgICBmcmFtZURhdGEuZGVsdGEgPSBjbGFtcCgwLCAxMDAwIC8gNjAsIG5vdyAtIGZyYW1lRGF0YS50aW1lc3RhbXApO1xuICAgICAgICAgICAgZnJhbWVEYXRhLnRpbWVzdGFtcCA9IG5vdztcbiAgICAgICAgICAgIGZyYW1lRGF0YS5pc1Byb2Nlc3NpbmcgPSB0cnVlO1xuICAgICAgICAgICAgc3RlcHMudXBkYXRlLnByb2Nlc3MoZnJhbWVEYXRhKTtcbiAgICAgICAgICAgIHN0ZXBzLnByZVJlbmRlci5wcm9jZXNzKGZyYW1lRGF0YSk7XG4gICAgICAgICAgICBzdGVwcy5yZW5kZXIucHJvY2VzcyhmcmFtZURhdGEpO1xuICAgICAgICAgICAgZnJhbWVEYXRhLmlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGRpZFVwZGF0ZSgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy51cGRhdGVTY2hlZHVsZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcXVldWVNaWNyb3Rhc2soKCkgPT4gdGhpcy51cGRhdGUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2xlYXJBbGxTbmFwc2hvdHMoKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGVzLmZvckVhY2goY2xlYXJTbmFwc2hvdCk7XG4gICAgICAgICAgICB0aGlzLnNoYXJlZE5vZGVzLmZvckVhY2gocmVtb3ZlTGVhZFNuYXBzaG90cyk7XG4gICAgICAgIH1cbiAgICAgICAgc2NoZWR1bGVVcGRhdGVQcm9qZWN0aW9uKCkge1xuICAgICAgICAgICAgZnJhbWUucHJlUmVuZGVyKHRoaXMudXBkYXRlUHJvamVjdGlvbiwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHNjaGVkdWxlQ2hlY2tBZnRlclVubW91bnQoKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoZSB1bm1vdW50aW5nIG5vZGUgaXMgaW4gYSBsYXlvdXRHcm91cCBhbmQgZGlkIHRyaWdnZXIgYSB3aWxsVXBkYXRlLFxuICAgICAgICAgICAgICogd2UgbWFudWFsbHkgY2FsbCBkaWRVcGRhdGUgdG8gZ2l2ZSBhIGNoYW5jZSB0byB0aGUgc2libGluZ3MgdG8gYW5pbWF0ZS5cbiAgICAgICAgICAgICAqIE90aGVyd2lzZSwgY2xlYW51cCBhbGwgc25hcHNob3RzIHRvIHByZXZlbnRzIGZ1dHVyZSBub2RlcyBmcm9tIHJldXNpbmcgdGhlbS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnJhbWUucG9zdFJlbmRlcigoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNMYXlvdXREaXJ0eSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3QuZGlkVXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3QuY2hlY2tVcGRhdGVGYWlsZWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlIG1lYXN1cmVtZW50c1xuICAgICAgICAgKi9cbiAgICAgICAgdXBkYXRlU25hcHNob3QoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zbmFwc2hvdCB8fCAhdGhpcy5pbnN0YW5jZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLnNuYXBzaG90ID0gdGhpcy5tZWFzdXJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlTGF5b3V0KCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmluc3RhbmNlKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIC8vIFRPRE86IEluY29ycG9yYXRlIGludG8gYSBmb3J3YXJkZWQgc2Nyb2xsIG9mZnNldFxuICAgICAgICAgICAgdGhpcy51cGRhdGVTY3JvbGwoKTtcbiAgICAgICAgICAgIGlmICghKHRoaXMub3B0aW9ucy5hbHdheXNNZWFzdXJlTGF5b3V0ICYmIHRoaXMuaXNMZWFkKCkpICYmXG4gICAgICAgICAgICAgICAgIXRoaXMuaXNMYXlvdXREaXJ0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogV2hlbiBhIG5vZGUgaXMgbW91bnRlZCwgaXQgc2ltcGx5IHJlc3VtZXMgZnJvbSB0aGUgcHJldkxlYWQnc1xuICAgICAgICAgICAgICogc25hcHNob3QgaW5zdGVhZCBvZiB0YWtpbmcgYSBuZXcgb25lLCBidXQgdGhlIGFuY2VzdG9ycyBzY3JvbGxcbiAgICAgICAgICAgICAqIG1pZ2h0IGhhdmUgdXBkYXRlZCB3aGlsZSB0aGUgcHJldkxlYWQgaXMgdW5tb3VudGVkLiBXZSBuZWVkIHRvXG4gICAgICAgICAgICAgKiB1cGRhdGUgdGhlIHNjcm9sbCBhZ2FpbiB0byBtYWtlIHN1cmUgdGhlIGxheW91dCB3ZSBtZWFzdXJlIGlzXG4gICAgICAgICAgICAgKiB1cCB0byBkYXRlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAodGhpcy5yZXN1bWVGcm9tICYmICF0aGlzLnJlc3VtZUZyb20uaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGF0aC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gdGhpcy5wYXRoW2ldO1xuICAgICAgICAgICAgICAgICAgICBub2RlLnVwZGF0ZVNjcm9sbCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHByZXZMYXlvdXQgPSB0aGlzLmxheW91dDtcbiAgICAgICAgICAgIHRoaXMubGF5b3V0ID0gdGhpcy5tZWFzdXJlKGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMubGF5b3V0Q29ycmVjdGVkID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICB0aGlzLmlzTGF5b3V0RGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMucHJvamVjdGlvbkRlbHRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5ub3RpZnlMaXN0ZW5lcnMoXCJtZWFzdXJlXCIsIHRoaXMubGF5b3V0LmxheW91dEJveCk7XG4gICAgICAgICAgICBjb25zdCB7IHZpc3VhbEVsZW1lbnQgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQgJiZcbiAgICAgICAgICAgICAgICB2aXN1YWxFbGVtZW50Lm5vdGlmeShcIkxheW91dE1lYXN1cmVcIiwgdGhpcy5sYXlvdXQubGF5b3V0Qm94LCBwcmV2TGF5b3V0ID8gcHJldkxheW91dC5sYXlvdXRCb3ggOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZVNjcm9sbChwaGFzZSA9IFwibWVhc3VyZVwiKSB7XG4gICAgICAgICAgICBsZXQgbmVlZHNNZWFzdXJlbWVudCA9IEJvb2xlYW4odGhpcy5vcHRpb25zLmxheW91dFNjcm9sbCAmJiB0aGlzLmluc3RhbmNlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNjcm9sbCAmJlxuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsLmFuaW1hdGlvbklkID09PSB0aGlzLnJvb3QuYW5pbWF0aW9uSWQgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbC5waGFzZSA9PT0gcGhhc2UpIHtcbiAgICAgICAgICAgICAgICBuZWVkc01lYXN1cmVtZW50ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmVlZHNNZWFzdXJlbWVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsID0ge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25JZDogdGhpcy5yb290LmFuaW1hdGlvbklkLFxuICAgICAgICAgICAgICAgICAgICBwaGFzZSxcbiAgICAgICAgICAgICAgICAgICAgaXNSb290OiBjaGVja0lzU2Nyb2xsUm9vdCh0aGlzLmluc3RhbmNlKSxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBtZWFzdXJlU2Nyb2xsKHRoaXMuaW5zdGFuY2UpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzZXRUcmFuc2Zvcm0oKSB7XG4gICAgICAgICAgICBpZiAoIXJlc2V0VHJhbnNmb3JtKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IGlzUmVzZXRSZXF1ZXN0ZWQgPSB0aGlzLmlzTGF5b3V0RGlydHkgfHwgdGhpcy5zaG91bGRSZXNldFRyYW5zZm9ybTtcbiAgICAgICAgICAgIGNvbnN0IGhhc1Byb2plY3Rpb24gPSB0aGlzLnByb2plY3Rpb25EZWx0YSAmJiAhaXNEZWx0YVplcm8odGhpcy5wcm9qZWN0aW9uRGVsdGEpO1xuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtVGVtcGxhdGUgPSB0aGlzLmdldFRyYW5zZm9ybVRlbXBsYXRlKCk7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1UZW1wbGF0ZVZhbHVlID0gdHJhbnNmb3JtVGVtcGxhdGVcbiAgICAgICAgICAgICAgICA/IHRyYW5zZm9ybVRlbXBsYXRlKHRoaXMubGF0ZXN0VmFsdWVzLCBcIlwiKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtVGVtcGxhdGVIYXNDaGFuZ2VkID0gdHJhbnNmb3JtVGVtcGxhdGVWYWx1ZSAhPT0gdGhpcy5wcmV2VHJhbnNmb3JtVGVtcGxhdGVWYWx1ZTtcbiAgICAgICAgICAgIGlmIChpc1Jlc2V0UmVxdWVzdGVkICYmXG4gICAgICAgICAgICAgICAgKGhhc1Byb2plY3Rpb24gfHxcbiAgICAgICAgICAgICAgICAgICAgaGFzVHJhbnNmb3JtKHRoaXMubGF0ZXN0VmFsdWVzKSB8fFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1UZW1wbGF0ZUhhc0NoYW5nZWQpKSB7XG4gICAgICAgICAgICAgICAgcmVzZXRUcmFuc2Zvcm0odGhpcy5pbnN0YW5jZSwgdHJhbnNmb3JtVGVtcGxhdGVWYWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG91bGRSZXNldFRyYW5zZm9ybSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVSZW5kZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBtZWFzdXJlKHJlbW92ZVRyYW5zZm9ybSA9IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhZ2VCb3ggPSB0aGlzLm1lYXN1cmVQYWdlQm94KCk7XG4gICAgICAgICAgICBsZXQgbGF5b3V0Qm94ID0gdGhpcy5yZW1vdmVFbGVtZW50U2Nyb2xsKHBhZ2VCb3gpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBNZWFzdXJlbWVudHMgdGFrZW4gZHVyaW5nIHRoZSBwcmUtcmVuZGVyIHN0YWdlXG4gICAgICAgICAgICAgKiBzdGlsbCBoYXZlIHRyYW5zZm9ybXMgYXBwbGllZCBzbyB3ZSByZW1vdmUgdGhlbVxuICAgICAgICAgICAgICogdmlhIGNhbGN1bGF0aW9uLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAocmVtb3ZlVHJhbnNmb3JtKSB7XG4gICAgICAgICAgICAgICAgbGF5b3V0Qm94ID0gdGhpcy5yZW1vdmVUcmFuc2Zvcm0obGF5b3V0Qm94KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJvdW5kQm94KGxheW91dEJveCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbklkOiB0aGlzLnJvb3QuYW5pbWF0aW9uSWQsXG4gICAgICAgICAgICAgICAgbWVhc3VyZWRCb3g6IHBhZ2VCb3gsXG4gICAgICAgICAgICAgICAgbGF5b3V0Qm94LFxuICAgICAgICAgICAgICAgIGxhdGVzdFZhbHVlczoge30sXG4gICAgICAgICAgICAgICAgc291cmNlOiB0aGlzLmlkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBtZWFzdXJlUGFnZUJveCgpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgdmlzdWFsRWxlbWVudCB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgaWYgKCF2aXN1YWxFbGVtZW50KVxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgIGNvbnN0IGJveCA9IHZpc3VhbEVsZW1lbnQubWVhc3VyZVZpZXdwb3J0Qm94KCk7XG4gICAgICAgICAgICAvLyBSZW1vdmUgdmlld3BvcnQgc2Nyb2xsIHRvIGdpdmUgcGFnZS1yZWxhdGl2ZSBjb29yZGluYXRlc1xuICAgICAgICAgICAgY29uc3QgeyBzY3JvbGwgfSA9IHRoaXMucm9vdDtcbiAgICAgICAgICAgIGlmIChzY3JvbGwpIHtcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGVBeGlzKGJveC54LCBzY3JvbGwub2Zmc2V0LngpO1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZUF4aXMoYm94LnksIHNjcm9sbC5vZmZzZXQueSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYm94O1xuICAgICAgICB9XG4gICAgICAgIHJlbW92ZUVsZW1lbnRTY3JvbGwoYm94KSB7XG4gICAgICAgICAgICBjb25zdCBib3hXaXRob3V0U2Nyb2xsID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICBjb3B5Qm94SW50byhib3hXaXRob3V0U2Nyb2xsLCBib3gpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQZXJmb3JtYW5jZSBUT0RPOiBLZWVwIGEgY3VtdWxhdGl2ZSBzY3JvbGwgb2Zmc2V0IGRvd24gdGhlIHRyZWVcbiAgICAgICAgICAgICAqIHJhdGhlciB0aGFuIGxvb3AgYmFjayB1cCB0aGUgcGF0aC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gdGhpcy5wYXRoW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgc2Nyb2xsLCBvcHRpb25zIH0gPSBub2RlO1xuICAgICAgICAgICAgICAgIGlmIChub2RlICE9PSB0aGlzLnJvb3QgJiYgc2Nyb2xsICYmIG9wdGlvbnMubGF5b3V0U2Nyb2xsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBJZiB0aGlzIGlzIGEgbmV3IHNjcm9sbCByb290LCB3ZSB3YW50IHRvIHJlbW92ZSBhbGwgcHJldmlvdXMgc2Nyb2xsc1xuICAgICAgICAgICAgICAgICAgICAgKiBmcm9tIHRoZSB2aWV3cG9ydCBib3guXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2Nyb2xsLmlzUm9vdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29weUJveEludG8oYm94V2l0aG91dFNjcm9sbCwgYm94KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgc2Nyb2xsOiByb290U2Nyb2xsIH0gPSB0aGlzLnJvb3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIFVuZG8gdGhlIGFwcGxpY2F0aW9uIG9mIHBhZ2Ugc2Nyb2xsIHRoYXQgd2FzIG9yaWdpbmFsbHkgYWRkZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIHRvIHRoZSBtZWFzdXJlZCBib3VuZGluZyBib3guXG4gICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb290U2Nyb2xsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlQXhpcyhib3hXaXRob3V0U2Nyb2xsLngsIC1yb290U2Nyb2xsLm9mZnNldC54KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVBeGlzKGJveFdpdGhvdXRTY3JvbGwueSwgLXJvb3RTY3JvbGwub2Zmc2V0LnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZUF4aXMoYm94V2l0aG91dFNjcm9sbC54LCBzY3JvbGwub2Zmc2V0LngpO1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVBeGlzKGJveFdpdGhvdXRTY3JvbGwueSwgc2Nyb2xsLm9mZnNldC55KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYm94V2l0aG91dFNjcm9sbDtcbiAgICAgICAgfVxuICAgICAgICBhcHBseVRyYW5zZm9ybShib3gsIHRyYW5zZm9ybU9ubHkgPSBmYWxzZSkge1xuICAgICAgICAgICAgY29uc3Qgd2l0aFRyYW5zZm9ybXMgPSBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgIGNvcHlCb3hJbnRvKHdpdGhUcmFuc2Zvcm1zLCBib3gpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gdGhpcy5wYXRoW2ldO1xuICAgICAgICAgICAgICAgIGlmICghdHJhbnNmb3JtT25seSAmJlxuICAgICAgICAgICAgICAgICAgICBub2RlLm9wdGlvbnMubGF5b3V0U2Nyb2xsICYmXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuc2Nyb2xsICYmXG4gICAgICAgICAgICAgICAgICAgIG5vZGUgIT09IG5vZGUucm9vdCkge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1Cb3god2l0aFRyYW5zZm9ybXMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IC1ub2RlLnNjcm9sbC5vZmZzZXQueCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IC1ub2RlLnNjcm9sbC5vZmZzZXQueSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghaGFzVHJhbnNmb3JtKG5vZGUubGF0ZXN0VmFsdWVzKSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtQm94KHdpdGhUcmFuc2Zvcm1zLCBub2RlLmxhdGVzdFZhbHVlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaGFzVHJhbnNmb3JtKHRoaXMubGF0ZXN0VmFsdWVzKSkge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybUJveCh3aXRoVHJhbnNmb3JtcywgdGhpcy5sYXRlc3RWYWx1ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHdpdGhUcmFuc2Zvcm1zO1xuICAgICAgICB9XG4gICAgICAgIHJlbW92ZVRyYW5zZm9ybShib3gpIHtcbiAgICAgICAgICAgIGNvbnN0IGJveFdpdGhvdXRUcmFuc2Zvcm0gPSBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgIGNvcHlCb3hJbnRvKGJveFdpdGhvdXRUcmFuc2Zvcm0sIGJveCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGF0aC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnBhdGhbaV07XG4gICAgICAgICAgICAgICAgaWYgKCFub2RlLmluc3RhbmNlKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc1RyYW5zZm9ybShub2RlLmxhdGVzdFZhbHVlcykpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGhhc1NjYWxlKG5vZGUubGF0ZXN0VmFsdWVzKSAmJiBub2RlLnVwZGF0ZVNuYXBzaG90KCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc291cmNlQm94ID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZUJveCA9IG5vZGUubWVhc3VyZVBhZ2VCb3goKTtcbiAgICAgICAgICAgICAgICBjb3B5Qm94SW50byhzb3VyY2VCb3gsIG5vZGVCb3gpO1xuICAgICAgICAgICAgICAgIHJlbW92ZUJveFRyYW5zZm9ybXMoYm94V2l0aG91dFRyYW5zZm9ybSwgbm9kZS5sYXRlc3RWYWx1ZXMsIG5vZGUuc25hcHNob3QgPyBub2RlLnNuYXBzaG90LmxheW91dEJveCA6IHVuZGVmaW5lZCwgc291cmNlQm94KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYXNUcmFuc2Zvcm0odGhpcy5sYXRlc3RWYWx1ZXMpKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQm94VHJhbnNmb3Jtcyhib3hXaXRob3V0VHJhbnNmb3JtLCB0aGlzLmxhdGVzdFZhbHVlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYm94V2l0aG91dFRyYW5zZm9ybTtcbiAgICAgICAgfVxuICAgICAgICBzZXRUYXJnZXREZWx0YShkZWx0YSkge1xuICAgICAgICAgICAgdGhpcy50YXJnZXREZWx0YSA9IGRlbHRhO1xuICAgICAgICAgICAgdGhpcy5yb290LnNjaGVkdWxlVXBkYXRlUHJvamVjdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5pc1Byb2plY3Rpb25EaXJ0eSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgY3Jvc3NmYWRlOiBvcHRpb25zLmNyb3NzZmFkZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5jcm9zc2ZhZGUgOiB0cnVlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjbGVhck1lYXN1cmVtZW50cygpIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5sYXlvdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLnNuYXBzaG90ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5wcmV2VHJhbnNmb3JtVGVtcGxhdGVWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0RGVsdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuaXNMYXlvdXREaXJ0eSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZvcmNlUmVsYXRpdmVQYXJlbnRUb1Jlc29sdmVUYXJnZXQoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucmVsYXRpdmVQYXJlbnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGUgcGFyZW50IHRhcmdldCBpc24ndCB1cC10by1kYXRlLCBmb3JjZSBpdCB0byB1cGRhdGUuXG4gICAgICAgICAgICAgKiBUaGlzIGlzIGFuIHVuZm9ydHVuYXRlIGRlLW9wdGltaXNhdGlvbiBhcyBpdCBtZWFucyBhbnkgdXBkYXRpbmcgcmVsYXRpdmVcbiAgICAgICAgICAgICAqIHByb2plY3Rpb24gd2lsbCBjYXVzZSBhbGwgdGhlIHJlbGF0aXZlIHBhcmVudHMgdG8gcmVjYWxjdWxhdGUgYmFja1xuICAgICAgICAgICAgICogdXAgdGhlIHRyZWUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0aGlzLnJlbGF0aXZlUGFyZW50LnJlc29sdmVkUmVsYXRpdmVUYXJnZXRBdCAhPT1cbiAgICAgICAgICAgICAgICBmcmFtZURhdGEudGltZXN0YW1wKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZVBhcmVudC5yZXNvbHZlVGFyZ2V0RGVsdGEodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZVRhcmdldERlbHRhKGZvcmNlUmVjYWxjdWxhdGlvbiA9IGZhbHNlKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE9uY2UgdGhlIGRpcnR5IHN0YXR1cyBvZiBub2RlcyBoYXMgYmVlbiBzcHJlYWQgdGhyb3VnaCB0aGUgdHJlZSwgd2UgYWxzb1xuICAgICAgICAgICAgICogbmVlZCB0byBjaGVjayBpZiB3ZSBoYXZlIGEgc2hhcmVkIG5vZGUgb2YgYSBkaWZmZXJlbnQgZGVwdGggdGhhdCBoYXMgaXRzZWxmXG4gICAgICAgICAgICAgKiBiZWVuIGRpcnRpZWQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IGxlYWQgPSB0aGlzLmdldExlYWQoKTtcbiAgICAgICAgICAgIHRoaXMuaXNQcm9qZWN0aW9uRGlydHkgfHwgKHRoaXMuaXNQcm9qZWN0aW9uRGlydHkgPSBsZWFkLmlzUHJvamVjdGlvbkRpcnR5KTtcbiAgICAgICAgICAgIHRoaXMuaXNUcmFuc2Zvcm1EaXJ0eSB8fCAodGhpcy5pc1RyYW5zZm9ybURpcnR5ID0gbGVhZC5pc1RyYW5zZm9ybURpcnR5KTtcbiAgICAgICAgICAgIHRoaXMuaXNTaGFyZWRQcm9qZWN0aW9uRGlydHkgfHwgKHRoaXMuaXNTaGFyZWRQcm9qZWN0aW9uRGlydHkgPSBsZWFkLmlzU2hhcmVkUHJvamVjdGlvbkRpcnR5KTtcbiAgICAgICAgICAgIGNvbnN0IGlzU2hhcmVkID0gQm9vbGVhbih0aGlzLnJlc3VtaW5nRnJvbSkgfHwgdGhpcyAhPT0gbGVhZDtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogV2UgZG9uJ3QgdXNlIHRyYW5zZm9ybSBmb3IgdGhpcyBzdGVwIG9mIHByb2Nlc3Npbmcgc28gd2UgZG9uJ3RcbiAgICAgICAgICAgICAqIG5lZWQgdG8gY2hlY2sgd2hldGhlciBhbnkgbm9kZXMgaGF2ZSBjaGFuZ2VkIHRyYW5zZm9ybS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgY2FuU2tpcCA9ICEoZm9yY2VSZWNhbGN1bGF0aW9uIHx8XG4gICAgICAgICAgICAgICAgKGlzU2hhcmVkICYmIHRoaXMuaXNTaGFyZWRQcm9qZWN0aW9uRGlydHkpIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5pc1Byb2plY3Rpb25EaXJ0eSB8fFxuICAgICAgICAgICAgICAgICgoX2EgPSB0aGlzLnBhcmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlzUHJvamVjdGlvbkRpcnR5KSB8fFxuICAgICAgICAgICAgICAgIHRoaXMuYXR0ZW1wdFRvUmVzb2x2ZVJlbGF0aXZlVGFyZ2V0KTtcbiAgICAgICAgICAgIGlmIChjYW5Ta2lwKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IHsgbGF5b3V0LCBsYXlvdXRJZCB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB3ZSBoYXZlIG5vIGxheW91dCwgd2UgY2FuJ3QgcGVyZm9ybSBwcm9qZWN0aW9uLCBzbyBlYXJseSByZXR1cm5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKCF0aGlzLmxheW91dCB8fCAhKGxheW91dCB8fCBsYXlvdXRJZCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5yZXNvbHZlZFJlbGF0aXZlVGFyZ2V0QXQgPSBmcmFtZURhdGEudGltZXN0YW1wO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB3ZSBkb24ndCBoYXZlIGEgdGFyZ2V0RGVsdGEgYnV0IGRvIGhhdmUgYSBsYXlvdXQsIHdlIGNhbiBhdHRlbXB0IHRvIHJlc29sdmVcbiAgICAgICAgICAgICAqIGEgcmVsYXRpdmVQYXJlbnQuIFRoaXMgd2lsbCBhbGxvdyBhIGNvbXBvbmVudCB0byBwZXJmb3JtIHNjYWxlIGNvcnJlY3Rpb25cbiAgICAgICAgICAgICAqIGV2ZW4gaWYgbm8gYW5pbWF0aW9uIGhhcyBzdGFydGVkLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAvLyBUT0RPIElmIHRoaXMgaXMgdW5zdWNjZXNzZnVsIHRoaXMgY3VycmVudGx5IGhhcHBlbnMgZXZlcnkgZnJhbWVcbiAgICAgICAgICAgIGlmICghdGhpcy50YXJnZXREZWx0YSAmJiAhdGhpcy5yZWxhdGl2ZVRhcmdldCkge1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IFRoaXMgaXMgYSBzZW1pLXJlcGV0aXRpb24gb2YgZnVydGhlciBkb3duIHRoaXMgZnVuY3Rpb24sIG1ha2UgRFJZXG4gICAgICAgICAgICAgICAgY29uc3QgcmVsYXRpdmVQYXJlbnQgPSB0aGlzLmdldENsb3Nlc3RQcm9qZWN0aW5nUGFyZW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlbGF0aXZlUGFyZW50ICYmXG4gICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlUGFyZW50LmxheW91dCAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvblByb2dyZXNzICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmVQYXJlbnQgPSByZWxhdGl2ZVBhcmVudDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JjZVJlbGF0aXZlUGFyZW50VG9SZXNvbHZlVGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmVUYXJnZXQgPSBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZVRhcmdldE9yaWdpbiA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgICAgICAgICBjYWxjUmVsYXRpdmVQb3NpdGlvbih0aGlzLnJlbGF0aXZlVGFyZ2V0T3JpZ2luLCB0aGlzLmxheW91dC5sYXlvdXRCb3gsIHJlbGF0aXZlUGFyZW50LmxheW91dC5sYXlvdXRCb3gpO1xuICAgICAgICAgICAgICAgICAgICBjb3B5Qm94SW50byh0aGlzLnJlbGF0aXZlVGFyZ2V0LCB0aGlzLnJlbGF0aXZlVGFyZ2V0T3JpZ2luKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmVQYXJlbnQgPSB0aGlzLnJlbGF0aXZlVGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgd2UgaGF2ZSBubyByZWxhdGl2ZSB0YXJnZXQgb3Igbm8gdGFyZ2V0IGRlbHRhIG91ciB0YXJnZXQgaXNuJ3QgdmFsaWRcbiAgICAgICAgICAgICAqIGZvciB0aGlzIGZyYW1lLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoIXRoaXMucmVsYXRpdmVUYXJnZXQgJiYgIXRoaXMudGFyZ2V0RGVsdGEpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBMYXp5LWluaXQgdGFyZ2V0IGRhdGEgc3RydWN0dXJlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICghdGhpcy50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldCA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0V2l0aFRyYW5zZm9ybXMgPSBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgd2UndmUgZ290IGEgcmVsYXRpdmUgYm94IGZvciB0aGlzIGNvbXBvbmVudCwgcmVzb2x2ZSBpdCBpbnRvIGEgdGFyZ2V0IHJlbGF0aXZlIHRvIHRoZSBwYXJlbnQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0aGlzLnJlbGF0aXZlVGFyZ2V0ICYmXG4gICAgICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZVRhcmdldE9yaWdpbiAmJlxuICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmVQYXJlbnQgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aXZlUGFyZW50LnRhcmdldCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VSZWxhdGl2ZVBhcmVudFRvUmVzb2x2ZVRhcmdldCgpO1xuICAgICAgICAgICAgICAgIGNhbGNSZWxhdGl2ZUJveCh0aGlzLnRhcmdldCwgdGhpcy5yZWxhdGl2ZVRhcmdldCwgdGhpcy5yZWxhdGl2ZVBhcmVudC50YXJnZXQpO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIHdlJ3ZlIG9ubHkgZ290IGEgdGFyZ2V0RGVsdGEsIHJlc29sdmUgaXQgaW50byBhIHRhcmdldFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy50YXJnZXREZWx0YSkge1xuICAgICAgICAgICAgICAgIGlmIChCb29sZWFuKHRoaXMucmVzdW1pbmdGcm9tKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBUaGlzIGlzIGNyZWF0aW5nIGEgbmV3IG9iamVjdCBldmVyeSBmcmFtZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldCA9IHRoaXMuYXBwbHlUcmFuc2Zvcm0odGhpcy5sYXlvdXQubGF5b3V0Qm94KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvcHlCb3hJbnRvKHRoaXMudGFyZ2V0LCB0aGlzLmxheW91dC5sYXlvdXRCb3gpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhcHBseUJveERlbHRhKHRoaXMudGFyZ2V0LCB0aGlzLnRhcmdldERlbHRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIG5vIHRhcmdldCwgdXNlIG93biBsYXlvdXQgYXMgdGFyZ2V0XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgY29weUJveEludG8odGhpcy50YXJnZXQsIHRoaXMubGF5b3V0LmxheW91dEJveCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlJ3ZlIGJlZW4gdG9sZCB0byBhdHRlbXB0IHRvIHJlc29sdmUgYSByZWxhdGl2ZSB0YXJnZXQsIGRvIHNvLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAodGhpcy5hdHRlbXB0VG9SZXNvbHZlUmVsYXRpdmVUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmF0dGVtcHRUb1Jlc29sdmVSZWxhdGl2ZVRhcmdldCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlbGF0aXZlUGFyZW50ID0gdGhpcy5nZXRDbG9zZXN0UHJvamVjdGluZ1BhcmVudCgpO1xuICAgICAgICAgICAgICAgIGlmIChyZWxhdGl2ZVBhcmVudCAmJlxuICAgICAgICAgICAgICAgICAgICBCb29sZWFuKHJlbGF0aXZlUGFyZW50LnJlc3VtaW5nRnJvbSkgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICBCb29sZWFuKHRoaXMucmVzdW1pbmdGcm9tKSAmJlxuICAgICAgICAgICAgICAgICAgICAhcmVsYXRpdmVQYXJlbnQub3B0aW9ucy5sYXlvdXRTY3JvbGwgJiZcbiAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVQYXJlbnQudGFyZ2V0ICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uUHJvZ3Jlc3MgIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZVBhcmVudCA9IHJlbGF0aXZlUGFyZW50O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcmNlUmVsYXRpdmVQYXJlbnRUb1Jlc29sdmVUYXJnZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZVRhcmdldCA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aXZlVGFyZ2V0T3JpZ2luID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICAgICAgICAgIGNhbGNSZWxhdGl2ZVBvc2l0aW9uKHRoaXMucmVsYXRpdmVUYXJnZXRPcmlnaW4sIHRoaXMudGFyZ2V0LCByZWxhdGl2ZVBhcmVudC50YXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICBjb3B5Qm94SW50byh0aGlzLnJlbGF0aXZlVGFyZ2V0LCB0aGlzLnJlbGF0aXZlVGFyZ2V0T3JpZ2luKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmVQYXJlbnQgPSB0aGlzLnJlbGF0aXZlVGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSW5jcmVhc2UgZGVidWcgY291bnRlciBmb3IgcmVzb2x2ZWQgdGFyZ2V0IGRlbHRhc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwcm9qZWN0aW9uRnJhbWVEYXRhLnJlc29sdmVkVGFyZ2V0RGVsdGFzKys7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0Q2xvc2VzdFByb2plY3RpbmdQYXJlbnQoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucGFyZW50IHx8XG4gICAgICAgICAgICAgICAgaGFzU2NhbGUodGhpcy5wYXJlbnQubGF0ZXN0VmFsdWVzKSB8fFxuICAgICAgICAgICAgICAgIGhhczJEVHJhbnNsYXRlKHRoaXMucGFyZW50LmxhdGVzdFZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucGFyZW50LmlzUHJvamVjdGluZygpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmdldENsb3Nlc3RQcm9qZWN0aW5nUGFyZW50KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaXNQcm9qZWN0aW5nKCkge1xuICAgICAgICAgICAgcmV0dXJuIEJvb2xlYW4oKHRoaXMucmVsYXRpdmVUYXJnZXQgfHxcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldERlbHRhIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmxheW91dFJvb3QpICYmXG4gICAgICAgICAgICAgICAgdGhpcy5sYXlvdXQpO1xuICAgICAgICB9XG4gICAgICAgIGNhbGNQcm9qZWN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgY29uc3QgbGVhZCA9IHRoaXMuZ2V0TGVhZCgpO1xuICAgICAgICAgICAgY29uc3QgaXNTaGFyZWQgPSBCb29sZWFuKHRoaXMucmVzdW1pbmdGcm9tKSB8fCB0aGlzICE9PSBsZWFkO1xuICAgICAgICAgICAgbGV0IGNhblNraXAgPSB0cnVlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIGlzIGEgbm9ybWFsIGxheW91dCBhbmltYXRpb24gYW5kIG5laXRoZXIgdGhpcyBub2RlIG5vciBpdHMgbmVhcmVzdCBwcm9qZWN0aW5nXG4gICAgICAgICAgICAgKiBpcyBkaXJ0eSB0aGVuIHdlIGNhbid0IHNraXAuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0aGlzLmlzUHJvamVjdGlvbkRpcnR5IHx8ICgoX2EgPSB0aGlzLnBhcmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlzUHJvamVjdGlvbkRpcnR5KSkge1xuICAgICAgICAgICAgICAgIGNhblNraXAgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhpcyBpcyBhIHNoYXJlZCBsYXlvdXQgYW5pbWF0aW9uIGFuZCB0aGlzIG5vZGUncyBzaGFyZWQgcHJvamVjdGlvbiBpcyBkaXJ0eSB0aGVuXG4gICAgICAgICAgICAgKiB3ZSBjYW4ndCBza2lwLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoaXNTaGFyZWQgJiZcbiAgICAgICAgICAgICAgICAodGhpcy5pc1NoYXJlZFByb2plY3Rpb25EaXJ0eSB8fCB0aGlzLmlzVHJhbnNmb3JtRGlydHkpKSB7XG4gICAgICAgICAgICAgICAgY2FuU2tpcCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB3ZSBoYXZlIHJlc29sdmVkIHRoZSB0YXJnZXQgdGhpcyBmcmFtZSB3ZSBtdXN0IHJlY2FsY3VsYXRlIHRoZVxuICAgICAgICAgICAgICogcHJvamVjdGlvbiB0byBlbnN1cmUgaXQgdmlzdWFsbHkgcmVwcmVzZW50cyB0aGUgaW50ZXJuYWwgY2FsY3VsYXRpb25zLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAodGhpcy5yZXNvbHZlZFJlbGF0aXZlVGFyZ2V0QXQgPT09IGZyYW1lRGF0YS50aW1lc3RhbXApIHtcbiAgICAgICAgICAgICAgICBjYW5Ta2lwID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FuU2tpcClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCB7IGxheW91dCwgbGF5b3V0SWQgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhpcyBzZWN0aW9uIG9mIHRoZSB0cmVlIGlzbid0IGFuaW1hdGluZyB3ZSBjYW5cbiAgICAgICAgICAgICAqIGRlbGV0ZSBvdXIgdGFyZ2V0IHNvdXJjZXMgZm9yIHRoZSBmb2xsb3dpbmcgZnJhbWUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuaXNUcmVlQW5pbWF0aW5nID0gQm9vbGVhbigodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuaXNUcmVlQW5pbWF0aW5nKSB8fFxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEFuaW1hdGlvbiB8fFxuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ0FuaW1hdGlvbik7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNUcmVlQW5pbWF0aW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXREZWx0YSA9IHRoaXMucmVsYXRpdmVUYXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMubGF5b3V0IHx8ICEobGF5b3V0IHx8IGxheW91dElkKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlc2V0IHRoZSBjb3JyZWN0ZWQgYm94IHdpdGggdGhlIGxhdGVzdCB2YWx1ZXMgZnJvbSBib3gsIGFzIHdlJ3JlIHRoZW4gZ29pbmdcbiAgICAgICAgICAgICAqIHRvIHBlcmZvcm0gbXV0YXRpdmUgb3BlcmF0aW9ucyBvbiBpdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29weUJveEludG8odGhpcy5sYXlvdXRDb3JyZWN0ZWQsIHRoaXMubGF5b3V0LmxheW91dEJveCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlY29yZCBwcmV2aW91cyB0cmVlIHNjYWxlcyBiZWZvcmUgdXBkYXRpbmcuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IHByZXZUcmVlU2NhbGVYID0gdGhpcy50cmVlU2NhbGUueDtcbiAgICAgICAgICAgIGNvbnN0IHByZXZUcmVlU2NhbGVZID0gdGhpcy50cmVlU2NhbGUueTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQXBwbHkgYWxsIHRoZSBwYXJlbnQgZGVsdGFzIHRvIHRoaXMgYm94IHRvIHByb2R1Y2UgdGhlIGNvcnJlY3RlZCBib3guIFRoaXNcbiAgICAgICAgICAgICAqIGlzIHRoZSBsYXlvdXQgYm94LCBhcyBpdCB3aWxsIGFwcGVhciBvbiBzY3JlZW4gYXMgYSByZXN1bHQgb2YgdGhlIHRyYW5zZm9ybXMgb2YgaXRzIHBhcmVudHMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGFwcGx5VHJlZURlbHRhcyh0aGlzLmxheW91dENvcnJlY3RlZCwgdGhpcy50cmVlU2NhbGUsIHRoaXMucGF0aCwgaXNTaGFyZWQpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIGxheWVyIG5lZWRzIHRvIHBlcmZvcm0gc2NhbGUgY29ycmVjdGlvbiBidXQgZG9lc24ndCBoYXZlIGEgdGFyZ2V0LFxuICAgICAgICAgICAgICogdXNlIHRoZSBsYXlvdXQgYXMgdGhlIHRhcmdldC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKGxlYWQubGF5b3V0ICYmXG4gICAgICAgICAgICAgICAgIWxlYWQudGFyZ2V0ICYmXG4gICAgICAgICAgICAgICAgKHRoaXMudHJlZVNjYWxlLnggIT09IDEgfHwgdGhpcy50cmVlU2NhbGUueSAhPT0gMSkpIHtcbiAgICAgICAgICAgICAgICBsZWFkLnRhcmdldCA9IGxlYWQubGF5b3V0LmxheW91dEJveDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgdGFyZ2V0IH0gPSBsZWFkO1xuICAgICAgICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBJZiB3ZSBkb24ndCBoYXZlIGEgdGFyZ2V0IHRvIHByb2plY3QgaW50bywgYnV0IHdlIHdlcmUgcHJldmlvdXNseVxuICAgICAgICAgICAgICAgICAqIHByb2plY3RpbmcsIHdlIHdhbnQgdG8gcmVtb3ZlIHRoZSBzdG9yZWQgdHJhbnNmb3JtIGFuZCBzY2hlZHVsZVxuICAgICAgICAgICAgICAgICAqIGEgcmVuZGVyIHRvIGVuc3VyZSB0aGUgZWxlbWVudHMgcmVmbGVjdCB0aGUgcmVtb3ZlZCB0cmFuc2Zvcm0uXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvamVjdGlvblRyYW5zZm9ybSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2plY3Rpb25EZWx0YSA9IGNyZWF0ZURlbHRhKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvamVjdGlvblRyYW5zZm9ybSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlUmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5wcm9qZWN0aW9uRGVsdGEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb2plY3Rpb25EZWx0YSA9IGNyZWF0ZURlbHRhKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9qZWN0aW9uRGVsdGFXaXRoVHJhbnNmb3JtID0gY3JlYXRlRGVsdGEoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHByZXZQcm9qZWN0aW9uVHJhbnNmb3JtID0gdGhpcy5wcm9qZWN0aW9uVHJhbnNmb3JtO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVcGRhdGUgdGhlIGRlbHRhIGJldHdlZW4gdGhlIGNvcnJlY3RlZCBib3ggYW5kIHRoZSB0YXJnZXQgYm94IGJlZm9yZSB1c2VyLXNldCB0cmFuc2Zvcm1zIHdlcmUgYXBwbGllZC5cbiAgICAgICAgICAgICAqIFRoaXMgd2lsbCBhbGxvdyB1cyB0byBjYWxjdWxhdGUgdGhlIGNvcnJlY3RlZCBib3JkZXJSYWRpdXMgYW5kIGJveFNoYWRvdyB0byBjb21wZW5zYXRlXG4gICAgICAgICAgICAgKiBmb3Igb3VyIGxheW91dCByZXByb2plY3Rpb24sIGJ1dCBzdGlsbCBhbGxvdyB0aGVtIHRvIGJlIHNjYWxlZCBjb3JyZWN0bHkgYnkgdGhlIHVzZXIuXG4gICAgICAgICAgICAgKiBJdCBtaWdodCBiZSB0aGF0IHRvIHNpbXBsaWZ5IHRoaXMgd2UgbWF5IHdhbnQgdG8gYWNjZXB0IHRoYXQgdXNlci1zZXQgc2NhbGUgaXMgYWxzbyBjb3JyZWN0ZWRcbiAgICAgICAgICAgICAqIGFuZCB3ZSB3b3VsZG4ndCBoYXZlIHRvIGtlZXAgYW5kIGNhbGMgYm90aCBkZWx0YXMsIE9SIHdlIGNvdWxkIHN1cHBvcnQgYSB1c2VyIHNldHRpbmdcbiAgICAgICAgICAgICAqIHRvIGFsbG93IHBlb3BsZSB0byBjaG9vc2Ugd2hldGhlciB0aGVzZSBzdHlsZXMgYXJlIGNvcnJlY3RlZCBiYXNlZCBvbiBqdXN0IHRoZVxuICAgICAgICAgICAgICogbGF5b3V0IHJlcHJvamVjdGlvbiBvciB0aGUgZmluYWwgYm91bmRpbmcgYm94LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjYWxjQm94RGVsdGEodGhpcy5wcm9qZWN0aW9uRGVsdGEsIHRoaXMubGF5b3V0Q29ycmVjdGVkLCB0YXJnZXQsIHRoaXMubGF0ZXN0VmFsdWVzKTtcbiAgICAgICAgICAgIHRoaXMucHJvamVjdGlvblRyYW5zZm9ybSA9IGJ1aWxkUHJvamVjdGlvblRyYW5zZm9ybSh0aGlzLnByb2plY3Rpb25EZWx0YSwgdGhpcy50cmVlU2NhbGUpO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvamVjdGlvblRyYW5zZm9ybSAhPT0gcHJldlByb2plY3Rpb25UcmFuc2Zvcm0gfHxcbiAgICAgICAgICAgICAgICB0aGlzLnRyZWVTY2FsZS54ICE9PSBwcmV2VHJlZVNjYWxlWCB8fFxuICAgICAgICAgICAgICAgIHRoaXMudHJlZVNjYWxlLnkgIT09IHByZXZUcmVlU2NhbGVZKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYXNQcm9qZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVSZW5kZXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeUxpc3RlbmVycyhcInByb2plY3Rpb25VcGRhdGVcIiwgdGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSW5jcmVhc2UgZGVidWcgY291bnRlciBmb3IgcmVjYWxjdWxhdGVkIHByb2plY3Rpb25zXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHByb2plY3Rpb25GcmFtZURhdGEucmVjYWxjdWxhdGVkUHJvamVjdGlvbisrO1xuICAgICAgICB9XG4gICAgICAgIGhpZGUoKSB7XG4gICAgICAgICAgICB0aGlzLmlzVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gVE9ETzogU2NoZWR1bGUgcmVuZGVyXG4gICAgICAgIH1cbiAgICAgICAgc2hvdygpIHtcbiAgICAgICAgICAgIHRoaXMuaXNWaXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIFRPRE86IFNjaGVkdWxlIHJlbmRlclxuICAgICAgICB9XG4gICAgICAgIHNjaGVkdWxlUmVuZGVyKG5vdGlmeUFsbCA9IHRydWUpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zY2hlZHVsZVJlbmRlciAmJiB0aGlzLm9wdGlvbnMuc2NoZWR1bGVSZW5kZXIoKTtcbiAgICAgICAgICAgIGlmIChub3RpZnlBbGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFjayA9IHRoaXMuZ2V0U3RhY2soKTtcbiAgICAgICAgICAgICAgICBzdGFjayAmJiBzdGFjay5zY2hlZHVsZVJlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucmVzdW1pbmdGcm9tICYmICF0aGlzLnJlc3VtaW5nRnJvbS5pbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzdW1pbmdGcm9tID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNldEFuaW1hdGlvbk9yaWdpbihkZWx0YSwgaGFzT25seVJlbGF0aXZlVGFyZ2V0Q2hhbmdlZCA9IGZhbHNlKSB7XG4gICAgICAgICAgICBjb25zdCBzbmFwc2hvdCA9IHRoaXMuc25hcHNob3Q7XG4gICAgICAgICAgICBjb25zdCBzbmFwc2hvdExhdGVzdFZhbHVlcyA9IHNuYXBzaG90XG4gICAgICAgICAgICAgICAgPyBzbmFwc2hvdC5sYXRlc3RWYWx1ZXNcbiAgICAgICAgICAgICAgICA6IHt9O1xuICAgICAgICAgICAgY29uc3QgbWl4ZWRWYWx1ZXMgPSB7IC4uLnRoaXMubGF0ZXN0VmFsdWVzIH07XG4gICAgICAgICAgICBjb25zdCB0YXJnZXREZWx0YSA9IGNyZWF0ZURlbHRhKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMucmVsYXRpdmVQYXJlbnQgfHxcbiAgICAgICAgICAgICAgICAhdGhpcy5yZWxhdGl2ZVBhcmVudC5vcHRpb25zLmxheW91dFJvb3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aXZlVGFyZ2V0ID0gdGhpcy5yZWxhdGl2ZVRhcmdldE9yaWdpbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYXR0ZW1wdFRvUmVzb2x2ZVJlbGF0aXZlVGFyZ2V0ID0gIWhhc09ubHlSZWxhdGl2ZVRhcmdldENoYW5nZWQ7XG4gICAgICAgICAgICBjb25zdCByZWxhdGl2ZUxheW91dCA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgY29uc3Qgc25hcHNob3RTb3VyY2UgPSBzbmFwc2hvdCA/IHNuYXBzaG90LnNvdXJjZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNvbnN0IGxheW91dFNvdXJjZSA9IHRoaXMubGF5b3V0ID8gdGhpcy5sYXlvdXQuc291cmNlIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgY29uc3QgaXNTaGFyZWRMYXlvdXRBbmltYXRpb24gPSBzbmFwc2hvdFNvdXJjZSAhPT0gbGF5b3V0U291cmNlO1xuICAgICAgICAgICAgY29uc3Qgc3RhY2sgPSB0aGlzLmdldFN0YWNrKCk7XG4gICAgICAgICAgICBjb25zdCBpc09ubHlNZW1iZXIgPSAhc3RhY2sgfHwgc3RhY2subWVtYmVycy5sZW5ndGggPD0gMTtcbiAgICAgICAgICAgIGNvbnN0IHNob3VsZENyb3NzZmFkZU9wYWNpdHkgPSBCb29sZWFuKGlzU2hhcmVkTGF5b3V0QW5pbWF0aW9uICYmXG4gICAgICAgICAgICAgICAgIWlzT25seU1lbWJlciAmJlxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5jcm9zc2ZhZGUgPT09IHRydWUgJiZcbiAgICAgICAgICAgICAgICAhdGhpcy5wYXRoLnNvbWUoaGFzT3BhY2l0eUNyb3NzZmFkZSkpO1xuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25Qcm9ncmVzcyA9IDA7XG4gICAgICAgICAgICBsZXQgcHJldlJlbGF0aXZlVGFyZ2V0O1xuICAgICAgICAgICAgdGhpcy5taXhUYXJnZXREZWx0YSA9IChsYXRlc3QpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9ncmVzcyA9IGxhdGVzdCAvIDEwMDA7XG4gICAgICAgICAgICAgICAgbWl4QXhpc0RlbHRhKHRhcmdldERlbHRhLngsIGRlbHRhLngsIHByb2dyZXNzKTtcbiAgICAgICAgICAgICAgICBtaXhBeGlzRGVsdGEodGFyZ2V0RGVsdGEueSwgZGVsdGEueSwgcHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0VGFyZ2V0RGVsdGEodGFyZ2V0RGVsdGEpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlbGF0aXZlVGFyZ2V0ICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmVUYXJnZXRPcmlnaW4gJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXlvdXQgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZVBhcmVudCAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aXZlUGFyZW50LmxheW91dCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxjUmVsYXRpdmVQb3NpdGlvbihyZWxhdGl2ZUxheW91dCwgdGhpcy5sYXlvdXQubGF5b3V0Qm94LCB0aGlzLnJlbGF0aXZlUGFyZW50LmxheW91dC5sYXlvdXRCb3gpO1xuICAgICAgICAgICAgICAgICAgICBtaXhCb3godGhpcy5yZWxhdGl2ZVRhcmdldCwgdGhpcy5yZWxhdGl2ZVRhcmdldE9yaWdpbiwgcmVsYXRpdmVMYXlvdXQsIHByb2dyZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIElmIHRoaXMgaXMgYW4gdW5jaGFuZ2VkIHJlbGF0aXZlIHRhcmdldCB3ZSBjYW4gY29uc2lkZXIgdGhlXG4gICAgICAgICAgICAgICAgICAgICAqIHByb2plY3Rpb24gbm90IGRpcnR5LlxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZSZWxhdGl2ZVRhcmdldCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgYm94RXF1YWxzKHRoaXMucmVsYXRpdmVUYXJnZXQsIHByZXZSZWxhdGl2ZVRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNQcm9qZWN0aW9uRGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIXByZXZSZWxhdGl2ZVRhcmdldClcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZSZWxhdGl2ZVRhcmdldCA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgICAgICAgICBjb3B5Qm94SW50byhwcmV2UmVsYXRpdmVUYXJnZXQsIHRoaXMucmVsYXRpdmVUYXJnZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNTaGFyZWRMYXlvdXRBbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25WYWx1ZXMgPSBtaXhlZFZhbHVlcztcbiAgICAgICAgICAgICAgICAgICAgbWl4VmFsdWVzKG1peGVkVmFsdWVzLCBzbmFwc2hvdExhdGVzdFZhbHVlcywgdGhpcy5sYXRlc3RWYWx1ZXMsIHByb2dyZXNzLCBzaG91bGRDcm9zc2ZhZGVPcGFjaXR5LCBpc09ubHlNZW1iZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnJvb3Quc2NoZWR1bGVVcGRhdGVQcm9qZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZVJlbmRlcigpO1xuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uUHJvZ3Jlc3MgPSBwcm9ncmVzcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLm1peFRhcmdldERlbHRhKHRoaXMub3B0aW9ucy5sYXlvdXRSb290ID8gMTAwMCA6IDApO1xuICAgICAgICB9XG4gICAgICAgIHN0YXJ0QW5pbWF0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5TGlzdGVuZXJzKFwiYW5pbWF0aW9uU3RhcnRcIik7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRBbmltYXRpb24gJiYgdGhpcy5jdXJyZW50QW5pbWF0aW9uLnN0b3AoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3VtaW5nRnJvbSAmJiB0aGlzLnJlc3VtaW5nRnJvbS5jdXJyZW50QW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bWluZ0Zyb20uY3VycmVudEFuaW1hdGlvbi5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5wZW5kaW5nQW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2FuY2VsRnJhbWUodGhpcy5wZW5kaW5nQW5pbWF0aW9uKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdBbmltYXRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFN0YXJ0IHRoZSBhbmltYXRpb24gaW4gdGhlIG5leHQgZnJhbWUgdG8gaGF2ZSBhIGZyYW1lIHdpdGggcHJvZ3Jlc3MgMCxcbiAgICAgICAgICAgICAqIHdoZXJlIHRoZSB0YXJnZXQgaXMgdGhlIHNhbWUgYXMgd2hlbiB0aGUgYW5pbWF0aW9uIHN0YXJ0ZWQsIHNvIHdlIGNhblxuICAgICAgICAgICAgICogY2FsY3VsYXRlIHRoZSByZWxhdGl2ZSBwb3NpdGlvbnMgY29ycmVjdGx5IGZvciBpbnN0YW50IHRyYW5zaXRpb25zLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdBbmltYXRpb24gPSBmcmFtZS51cGRhdGUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGdsb2JhbFByb2plY3Rpb25TdGF0ZS5oYXNBbmltYXRlZFNpbmNlUmVzaXplID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRBbmltYXRpb24gPSBhbmltYXRlU2luZ2xlVmFsdWUoMCwgYW5pbWF0aW9uVGFyZ2V0LCB7XG4gICAgICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIG9uVXBkYXRlOiAobGF0ZXN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1peFRhcmdldERlbHRhKGxhdGVzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uVXBkYXRlICYmIG9wdGlvbnMub25VcGRhdGUobGF0ZXN0KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vbkNvbXBsZXRlICYmIG9wdGlvbnMub25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0ZUFuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlc3VtaW5nRnJvbSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3VtaW5nRnJvbS5jdXJyZW50QW5pbWF0aW9uID0gdGhpcy5jdXJyZW50QW5pbWF0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdBbmltYXRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb21wbGV0ZUFuaW1hdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3VtaW5nRnJvbSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzdW1pbmdGcm9tLmN1cnJlbnRBbmltYXRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bWluZ0Zyb20ucHJlc2VydmVPcGFjaXR5ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc3RhY2sgPSB0aGlzLmdldFN0YWNrKCk7XG4gICAgICAgICAgICBzdGFjayAmJiBzdGFjay5leGl0QW5pbWF0aW9uQ29tcGxldGUoKTtcbiAgICAgICAgICAgIHRoaXMucmVzdW1pbmdGcm9tID1cbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRBbmltYXRpb24gPVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvblZhbHVlcyA9XG4gICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLm5vdGlmeUxpc3RlbmVycyhcImFuaW1hdGlvbkNvbXBsZXRlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmlzaEFuaW1hdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRBbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1peFRhcmdldERlbHRhICYmIHRoaXMubWl4VGFyZ2V0RGVsdGEoYW5pbWF0aW9uVGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRBbmltYXRpb24uc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jb21wbGV0ZUFuaW1hdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGFwcGx5VHJhbnNmb3Jtc1RvVGFyZ2V0KCkge1xuICAgICAgICAgICAgY29uc3QgbGVhZCA9IHRoaXMuZ2V0TGVhZCgpO1xuICAgICAgICAgICAgbGV0IHsgdGFyZ2V0V2l0aFRyYW5zZm9ybXMsIHRhcmdldCwgbGF5b3V0LCBsYXRlc3RWYWx1ZXMgfSA9IGxlYWQ7XG4gICAgICAgICAgICBpZiAoIXRhcmdldFdpdGhUcmFuc2Zvcm1zIHx8ICF0YXJnZXQgfHwgIWxheW91dClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlJ3JlIG9ubHkgYW5pbWF0aW5nIHBvc2l0aW9uLCBhbmQgdGhpcyBlbGVtZW50IGlzbid0IHRoZSBsZWFkIGVsZW1lbnQsXG4gICAgICAgICAgICAgKiB0aGVuIGluc3RlYWQgb2YgcHJvamVjdGluZyBpbnRvIHRoZSBsZWFkIGJveCB3ZSBpbnN0ZWFkIHdhbnQgdG8gY2FsY3VsYXRlXG4gICAgICAgICAgICAgKiBhIG5ldyB0YXJnZXQgdGhhdCBhbGlnbnMgdGhlIHR3byBib3hlcyBidXQgbWFpbnRhaW5zIHRoZSBsYXlvdXQgc2hhcGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0aGlzICE9PSBsZWFkICYmXG4gICAgICAgICAgICAgICAgdGhpcy5sYXlvdXQgJiZcbiAgICAgICAgICAgICAgICBsYXlvdXQgJiZcbiAgICAgICAgICAgICAgICBzaG91bGRBbmltYXRlUG9zaXRpb25Pbmx5KHRoaXMub3B0aW9ucy5hbmltYXRpb25UeXBlLCB0aGlzLmxheW91dC5sYXlvdXRCb3gsIGxheW91dC5sYXlvdXRCb3gpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGhpcy50YXJnZXQgfHwgY3JlYXRlQm94KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgeExlbmd0aCA9IGNhbGNMZW5ndGgodGhpcy5sYXlvdXQubGF5b3V0Qm94LngpO1xuICAgICAgICAgICAgICAgIHRhcmdldC54Lm1pbiA9IGxlYWQudGFyZ2V0LngubWluO1xuICAgICAgICAgICAgICAgIHRhcmdldC54Lm1heCA9IHRhcmdldC54Lm1pbiArIHhMZW5ndGg7XG4gICAgICAgICAgICAgICAgY29uc3QgeUxlbmd0aCA9IGNhbGNMZW5ndGgodGhpcy5sYXlvdXQubGF5b3V0Qm94LnkpO1xuICAgICAgICAgICAgICAgIHRhcmdldC55Lm1pbiA9IGxlYWQudGFyZ2V0LnkubWluO1xuICAgICAgICAgICAgICAgIHRhcmdldC55Lm1heCA9IHRhcmdldC55Lm1pbiArIHlMZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb3B5Qm94SW50byh0YXJnZXRXaXRoVHJhbnNmb3JtcywgdGFyZ2V0KTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQXBwbHkgdGhlIGxhdGVzdCB1c2VyLXNldCB0cmFuc2Zvcm1zIHRvIHRoZSB0YXJnZXRCb3ggdG8gcHJvZHVjZSB0aGUgdGFyZ2V0Qm94RmluYWwuXG4gICAgICAgICAgICAgKiBUaGlzIGlzIHRoZSBmaW5hbCBib3ggdGhhdCB3ZSB3aWxsIHRoZW4gcHJvamVjdCBpbnRvIGJ5IGNhbGN1bGF0aW5nIGEgdHJhbnNmb3JtIGRlbHRhIGFuZFxuICAgICAgICAgICAgICogYXBwbHlpbmcgaXQgdG8gdGhlIGNvcnJlY3RlZCBib3guXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRyYW5zZm9ybUJveCh0YXJnZXRXaXRoVHJhbnNmb3JtcywgbGF0ZXN0VmFsdWVzKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVXBkYXRlIHRoZSBkZWx0YSBiZXR3ZWVuIHRoZSBjb3JyZWN0ZWQgYm94IGFuZCB0aGUgZmluYWwgdGFyZ2V0IGJveCwgYWZ0ZXJcbiAgICAgICAgICAgICAqIHVzZXItc2V0IHRyYW5zZm9ybXMgYXJlIGFwcGxpZWQgdG8gaXQuIFRoaXMgd2lsbCBiZSB1c2VkIGJ5IHRoZSByZW5kZXJlciB0b1xuICAgICAgICAgICAgICogY3JlYXRlIGEgdHJhbnNmb3JtIHN0eWxlIHRoYXQgd2lsbCByZXByb2plY3QgdGhlIGVsZW1lbnQgZnJvbSBpdHMgbGF5b3V0IGxheW91dFxuICAgICAgICAgICAgICogaW50byB0aGUgZGVzaXJlZCBib3VuZGluZyBib3guXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNhbGNCb3hEZWx0YSh0aGlzLnByb2plY3Rpb25EZWx0YVdpdGhUcmFuc2Zvcm0sIHRoaXMubGF5b3V0Q29ycmVjdGVkLCB0YXJnZXRXaXRoVHJhbnNmb3JtcywgbGF0ZXN0VmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgICByZWdpc3RlclNoYXJlZE5vZGUobGF5b3V0SWQsIG5vZGUpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5zaGFyZWROb2Rlcy5oYXMobGF5b3V0SWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGFyZWROb2Rlcy5zZXQobGF5b3V0SWQsIG5ldyBOb2RlU3RhY2soKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzdGFjayA9IHRoaXMuc2hhcmVkTm9kZXMuZ2V0KGxheW91dElkKTtcbiAgICAgICAgICAgIHN0YWNrLmFkZChub2RlKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IG5vZGUub3B0aW9ucy5pbml0aWFsUHJvbW90aW9uQ29uZmlnO1xuICAgICAgICAgICAgbm9kZS5wcm9tb3RlKHtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBjb25maWcgPyBjb25maWcudHJhbnNpdGlvbiA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBwcmVzZXJ2ZUZvbGxvd09wYWNpdHk6IGNvbmZpZyAmJiBjb25maWcuc2hvdWxkUHJlc2VydmVGb2xsb3dPcGFjaXR5XG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlnLnNob3VsZFByZXNlcnZlRm9sbG93T3BhY2l0eShub2RlKVxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlzTGVhZCgpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gdGhpcy5nZXRTdGFjaygpO1xuICAgICAgICAgICAgcmV0dXJuIHN0YWNrID8gc3RhY2subGVhZCA9PT0gdGhpcyA6IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0TGVhZCgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IHsgbGF5b3V0SWQgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgICAgIHJldHVybiBsYXlvdXRJZCA/ICgoX2EgPSB0aGlzLmdldFN0YWNrKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZWFkKSB8fCB0aGlzIDogdGhpcztcbiAgICAgICAgfVxuICAgICAgICBnZXRQcmV2TGVhZCgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IHsgbGF5b3V0SWQgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgICAgIHJldHVybiBsYXlvdXRJZCA/IChfYSA9IHRoaXMuZ2V0U3RhY2soKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnByZXZMZWFkIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGdldFN0YWNrKCkge1xuICAgICAgICAgICAgY29uc3QgeyBsYXlvdXRJZCB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgaWYgKGxheW91dElkKVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJvb3Quc2hhcmVkTm9kZXMuZ2V0KGxheW91dElkKTtcbiAgICAgICAgfVxuICAgICAgICBwcm9tb3RlKHsgbmVlZHNSZXNldCwgdHJhbnNpdGlvbiwgcHJlc2VydmVGb2xsb3dPcGFjaXR5LCB9ID0ge30pIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gdGhpcy5nZXRTdGFjaygpO1xuICAgICAgICAgICAgaWYgKHN0YWNrKVxuICAgICAgICAgICAgICAgIHN0YWNrLnByb21vdGUodGhpcywgcHJlc2VydmVGb2xsb3dPcGFjaXR5KTtcbiAgICAgICAgICAgIGlmIChuZWVkc1Jlc2V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9qZWN0aW9uRGVsdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5uZWVkc1Jlc2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0cmFuc2l0aW9uKVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0T3B0aW9ucyh7IHRyYW5zaXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVsZWdhdGUoKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFjayA9IHRoaXMuZ2V0U3RhY2soKTtcbiAgICAgICAgICAgIGlmIChzdGFjaykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGFjay5yZWxlZ2F0ZSh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXNldFJvdGF0aW9uKCkge1xuICAgICAgICAgICAgY29uc3QgeyB2aXN1YWxFbGVtZW50IH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoIXZpc3VhbEVsZW1lbnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBubyBkZXRlY3RlZCByb3RhdGlvbiB2YWx1ZXMsIHdlIGNhbiBlYXJseSByZXR1cm4gd2l0aG91dCBhIGZvcmNlZCByZW5kZXIuXG4gICAgICAgICAgICBsZXQgaGFzUm90YXRlID0gZmFsc2U7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFuIHVucm9sbGVkIGNoZWNrIGZvciByb3RhdGlvbiB2YWx1ZXMuIE1vc3QgZWxlbWVudHMgZG9uJ3QgaGF2ZSBhbnkgcm90YXRpb24gYW5kXG4gICAgICAgICAgICAgKiBza2lwcGluZyB0aGUgbmVzdGVkIGxvb3AgYW5kIG5ldyBvYmplY3QgY3JlYXRpb24gaXMgNTAlIGZhc3Rlci5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgeyBsYXRlc3RWYWx1ZXMgfSA9IHZpc3VhbEVsZW1lbnQ7XG4gICAgICAgICAgICBpZiAobGF0ZXN0VmFsdWVzLnJvdGF0ZSB8fFxuICAgICAgICAgICAgICAgIGxhdGVzdFZhbHVlcy5yb3RhdGVYIHx8XG4gICAgICAgICAgICAgICAgbGF0ZXN0VmFsdWVzLnJvdGF0ZVkgfHxcbiAgICAgICAgICAgICAgICBsYXRlc3RWYWx1ZXMucm90YXRlWikge1xuICAgICAgICAgICAgICAgIGhhc1JvdGF0ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIHJvdGF0aW9uIHZhbHVlcywgd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnkgbW9yZS5cbiAgICAgICAgICAgIGlmICghaGFzUm90YXRlKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IHJlc2V0VmFsdWVzID0ge307XG4gICAgICAgICAgICAvLyBDaGVjayB0aGUgcm90YXRlIHZhbHVlIG9mIGFsbCBheGVzIGFuZCByZXNldCB0byAwXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyYW5zZm9ybUF4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBcInJvdGF0ZVwiICsgdHJhbnNmb3JtQXhlc1tpXTtcbiAgICAgICAgICAgICAgICAvLyBSZWNvcmQgdGhlIHJvdGF0aW9uIGFuZCB0aGVuIHRlbXBvcmFyaWx5IHNldCBpdCB0byAwXG4gICAgICAgICAgICAgICAgaWYgKGxhdGVzdFZhbHVlc1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0VmFsdWVzW2tleV0gPSBsYXRlc3RWYWx1ZXNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5zZXRTdGF0aWNWYWx1ZShrZXksIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEZvcmNlIGEgcmVuZGVyIG9mIHRoaXMgZWxlbWVudCB0byBhcHBseSB0aGUgdHJhbnNmb3JtIHdpdGggYWxsIHJvdGF0aW9uc1xuICAgICAgICAgICAgLy8gc2V0IHRvIDAuXG4gICAgICAgICAgICB2aXN1YWxFbGVtZW50LnJlbmRlcigpO1xuICAgICAgICAgICAgLy8gUHV0IGJhY2sgYWxsIHRoZSB2YWx1ZXMgd2UgcmVzZXRcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHJlc2V0VmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5zZXRTdGF0aWNWYWx1ZShrZXksIHJlc2V0VmFsdWVzW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU2NoZWR1bGUgYSByZW5kZXIgZm9yIHRoZSBuZXh0IGZyYW1lLiBUaGlzIGVuc3VyZXMgd2Ugd29uJ3QgdmlzdWFsbHlcbiAgICAgICAgICAgIC8vIHNlZSB0aGUgZWxlbWVudCB3aXRoIHRoZSByZXNldCByb3RhdGUgdmFsdWUgYXBwbGllZC5cbiAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQuc2NoZWR1bGVSZW5kZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBnZXRQcm9qZWN0aW9uU3R5bGVzKHN0eWxlUHJvcCA9IHt9KSB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgLy8gVE9ETzogUmV0dXJuIGxpZmVjeWNsZS1wZXJzaXN0ZW50IG9iamVjdFxuICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0ge307XG4gICAgICAgICAgICBpZiAoIXRoaXMuaW5zdGFuY2UgfHwgdGhpcy5pc1NWRylcbiAgICAgICAgICAgICAgICByZXR1cm4gc3R5bGVzO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHZpc2liaWxpdHk6IFwiaGlkZGVuXCIgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0eWxlcy52aXNpYmlsaXR5ID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybVRlbXBsYXRlID0gdGhpcy5nZXRUcmFuc2Zvcm1UZW1wbGF0ZSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMubmVlZHNSZXNldCkge1xuICAgICAgICAgICAgICAgIHRoaXMubmVlZHNSZXNldCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHN0eWxlcy5vcGFjaXR5ID0gXCJcIjtcbiAgICAgICAgICAgICAgICBzdHlsZXMucG9pbnRlckV2ZW50cyA9XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVNb3Rpb25WYWx1ZShzdHlsZVByb3AucG9pbnRlckV2ZW50cykgfHwgXCJcIjtcbiAgICAgICAgICAgICAgICBzdHlsZXMudHJhbnNmb3JtID0gdHJhbnNmb3JtVGVtcGxhdGVcbiAgICAgICAgICAgICAgICAgICAgPyB0cmFuc2Zvcm1UZW1wbGF0ZSh0aGlzLmxhdGVzdFZhbHVlcywgXCJcIilcbiAgICAgICAgICAgICAgICAgICAgOiBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3R5bGVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbGVhZCA9IHRoaXMuZ2V0TGVhZCgpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnByb2plY3Rpb25EZWx0YSB8fCAhdGhpcy5sYXlvdXQgfHwgIWxlYWQudGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZW1wdHlTdHlsZXMgPSB7fTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmxheW91dElkKSB7XG4gICAgICAgICAgICAgICAgICAgIGVtcHR5U3R5bGVzLm9wYWNpdHkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXRlc3RWYWx1ZXMub3BhY2l0eSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmxhdGVzdFZhbHVlcy5vcGFjaXR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAxO1xuICAgICAgICAgICAgICAgICAgICBlbXB0eVN0eWxlcy5wb2ludGVyRXZlbnRzID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVNb3Rpb25WYWx1ZShzdHlsZVByb3AucG9pbnRlckV2ZW50cykgfHwgXCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzUHJvamVjdGVkICYmICFoYXNUcmFuc2Zvcm0odGhpcy5sYXRlc3RWYWx1ZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVtcHR5U3R5bGVzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVRlbXBsYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRyYW5zZm9ybVRlbXBsYXRlKHt9LCBcIlwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYXNQcm9qZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5U3R5bGVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdmFsdWVzVG9SZW5kZXIgPSBsZWFkLmFuaW1hdGlvblZhbHVlcyB8fCBsZWFkLmxhdGVzdFZhbHVlcztcbiAgICAgICAgICAgIHRoaXMuYXBwbHlUcmFuc2Zvcm1zVG9UYXJnZXQoKTtcbiAgICAgICAgICAgIHN0eWxlcy50cmFuc2Zvcm0gPSBidWlsZFByb2plY3Rpb25UcmFuc2Zvcm0odGhpcy5wcm9qZWN0aW9uRGVsdGFXaXRoVHJhbnNmb3JtLCB0aGlzLnRyZWVTY2FsZSwgdmFsdWVzVG9SZW5kZXIpO1xuICAgICAgICAgICAgaWYgKHRyYW5zZm9ybVRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgICAgc3R5bGVzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVRlbXBsYXRlKHZhbHVlc1RvUmVuZGVyLCBzdHlsZXMudHJhbnNmb3JtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgeCwgeSB9ID0gdGhpcy5wcm9qZWN0aW9uRGVsdGE7XG4gICAgICAgICAgICBzdHlsZXMudHJhbnNmb3JtT3JpZ2luID0gYCR7eC5vcmlnaW4gKiAxMDB9JSAke3kub3JpZ2luICogMTAwfSUgMGA7XG4gICAgICAgICAgICBpZiAobGVhZC5hbmltYXRpb25WYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBJZiB0aGUgbGVhZCBjb21wb25lbnQgaXMgYW5pbWF0aW5nLCBhc3NpZ24gdGhpcyBlaXRoZXIgdGhlIGVudGVyaW5nL2xlYXZpbmdcbiAgICAgICAgICAgICAgICAgKiBvcGFjaXR5XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgc3R5bGVzLm9wYWNpdHkgPVxuICAgICAgICAgICAgICAgICAgICBsZWFkID09PSB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICA/IChfYiA9IChfYSA9IHZhbHVlc1RvUmVuZGVyLm9wYWNpdHkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMubGF0ZXN0VmFsdWVzLm9wYWNpdHkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDFcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5wcmVzZXJ2ZU9wYWNpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMubGF0ZXN0VmFsdWVzLm9wYWNpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHZhbHVlc1RvUmVuZGVyLm9wYWNpdHlFeGl0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogT3Igd2UncmUgbm90IGFuaW1hdGluZyBhdCBhbGwsIHNldCB0aGUgbGVhZCBjb21wb25lbnQgdG8gaXRzIGxheW91dFxuICAgICAgICAgICAgICAgICAqIG9wYWNpdHkgYW5kIG90aGVyIGNvbXBvbmVudHMgdG8gaGlkZGVuLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHN0eWxlcy5vcGFjaXR5ID1cbiAgICAgICAgICAgICAgICAgICAgbGVhZCA9PT0gdGhpc1xuICAgICAgICAgICAgICAgICAgICAgICAgPyB2YWx1ZXNUb1JlbmRlci5vcGFjaXR5ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHZhbHVlc1RvUmVuZGVyLm9wYWNpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdmFsdWVzVG9SZW5kZXIub3BhY2l0eUV4aXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdmFsdWVzVG9SZW5kZXIub3BhY2l0eUV4aXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFwcGx5IHNjYWxlIGNvcnJlY3Rpb25cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gc2NhbGVDb3JyZWN0b3JzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlc1RvUmVuZGVyW2tleV0gPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBjb3JyZWN0LCBhcHBseVRvIH0gPSBzY2FsZUNvcnJlY3RvcnNba2V5XTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBPbmx5IGFwcGx5IHNjYWxlIGNvcnJlY3Rpb24gdG8gdGhlIHZhbHVlIGlmIHdlIGhhdmUgYW5cbiAgICAgICAgICAgICAgICAgKiBhY3RpdmUgcHJvamVjdGlvbiB0cmFuc2Zvcm0uIE90aGVyd2lzZSB0aGVzZSB2YWx1ZXMgYmVjb21lXG4gICAgICAgICAgICAgICAgICogdnVsbmVyYWJsZSB0byBkaXN0b3J0aW9uIGlmIHRoZSBlbGVtZW50IGNoYW5nZXMgc2l6ZSB3aXRob3V0XG4gICAgICAgICAgICAgICAgICogYSBjb3JyZXNwb25kaW5nIGxheW91dCBhbmltYXRpb24uXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgY29uc3QgY29ycmVjdGVkID0gc3R5bGVzLnRyYW5zZm9ybSA9PT0gXCJub25lXCJcbiAgICAgICAgICAgICAgICAgICAgPyB2YWx1ZXNUb1JlbmRlcltrZXldXG4gICAgICAgICAgICAgICAgICAgIDogY29ycmVjdCh2YWx1ZXNUb1JlbmRlcltrZXldLCBsZWFkKTtcbiAgICAgICAgICAgICAgICBpZiAoYXBwbHlUbykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBudW0gPSBhcHBseVRvLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW07IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVzW2FwcGx5VG9baV1dID0gY29ycmVjdGVkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZXNba2V5XSA9IGNvcnJlY3RlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERpc2FibGUgcG9pbnRlciBldmVudHMgb24gZm9sbG93IGNvbXBvbmVudHMuIFRoaXMgaXMgdG8gZW5zdXJlXG4gICAgICAgICAgICAgKiB0aGF0IGlmIGEgZm9sbG93IGNvbXBvbmVudCBjb3ZlcnMgYSBsZWFkIGNvbXBvbmVudCBpdCBkb2Vzbid0IGJsb2NrXG4gICAgICAgICAgICAgKiBwb2ludGVyIGV2ZW50cyBvbiB0aGUgbGVhZC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5sYXlvdXRJZCkge1xuICAgICAgICAgICAgICAgIHN0eWxlcy5wb2ludGVyRXZlbnRzID1cbiAgICAgICAgICAgICAgICAgICAgbGVhZCA9PT0gdGhpc1xuICAgICAgICAgICAgICAgICAgICAgICAgPyByZXNvbHZlTW90aW9uVmFsdWUoc3R5bGVQcm9wLnBvaW50ZXJFdmVudHMpIHx8IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogXCJub25lXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3R5bGVzO1xuICAgICAgICB9XG4gICAgICAgIGNsZWFyU25hcHNob3QoKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VtZUZyb20gPSB0aGlzLnNuYXBzaG90ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIE9ubHkgcnVuIG9uIHJvb3RcbiAgICAgICAgcmVzZXRUcmVlKCkge1xuICAgICAgICAgICAgdGhpcy5yb290Lm5vZGVzLmZvckVhY2goKG5vZGUpID0+IHsgdmFyIF9hOyByZXR1cm4gKF9hID0gbm9kZS5jdXJyZW50QW5pbWF0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3RvcCgpOyB9KTtcbiAgICAgICAgICAgIHRoaXMucm9vdC5ub2Rlcy5mb3JFYWNoKGNsZWFyTWVhc3VyZW1lbnRzKTtcbiAgICAgICAgICAgIHRoaXMucm9vdC5zaGFyZWROb2Rlcy5jbGVhcigpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUxheW91dChub2RlKSB7XG4gICAgbm9kZS51cGRhdGVMYXlvdXQoKTtcbn1cbmZ1bmN0aW9uIG5vdGlmeUxheW91dFVwZGF0ZShub2RlKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHNuYXBzaG90ID0gKChfYSA9IG5vZGUucmVzdW1lRnJvbSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNuYXBzaG90KSB8fCBub2RlLnNuYXBzaG90O1xuICAgIGlmIChub2RlLmlzTGVhZCgpICYmXG4gICAgICAgIG5vZGUubGF5b3V0ICYmXG4gICAgICAgIHNuYXBzaG90ICYmXG4gICAgICAgIG5vZGUuaGFzTGlzdGVuZXJzKFwiZGlkVXBkYXRlXCIpKSB7XG4gICAgICAgIGNvbnN0IHsgbGF5b3V0Qm94OiBsYXlvdXQsIG1lYXN1cmVkQm94OiBtZWFzdXJlZExheW91dCB9ID0gbm9kZS5sYXlvdXQ7XG4gICAgICAgIGNvbnN0IHsgYW5pbWF0aW9uVHlwZSB9ID0gbm9kZS5vcHRpb25zO1xuICAgICAgICBjb25zdCBpc1NoYXJlZCA9IHNuYXBzaG90LnNvdXJjZSAhPT0gbm9kZS5sYXlvdXQuc291cmNlO1xuICAgICAgICAvLyBUT0RPIE1heWJlIHdlIHdhbnQgdG8gYWxzbyByZXNpemUgdGhlIGxheW91dCBzbmFwc2hvdCBzbyB3ZSBkb24ndCB0cmlnZ2VyXG4gICAgICAgIC8vIGFuaW1hdGlvbnMgZm9yIGluc3RhbmNlIGlmIGxheW91dD1cInNpemVcIiBhbmQgYW4gZWxlbWVudCBoYXMgb25seSBjaGFuZ2VkIHBvc2l0aW9uXG4gICAgICAgIGlmIChhbmltYXRpb25UeXBlID09PSBcInNpemVcIikge1xuICAgICAgICAgICAgZWFjaEF4aXMoKGF4aXMpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlzU25hcHNob3QgPSBpc1NoYXJlZFxuICAgICAgICAgICAgICAgICAgICA/IHNuYXBzaG90Lm1lYXN1cmVkQm94W2F4aXNdXG4gICAgICAgICAgICAgICAgICAgIDogc25hcHNob3QubGF5b3V0Qm94W2F4aXNdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGNhbGNMZW5ndGgoYXhpc1NuYXBzaG90KTtcbiAgICAgICAgICAgICAgICBheGlzU25hcHNob3QubWluID0gbGF5b3V0W2F4aXNdLm1pbjtcbiAgICAgICAgICAgICAgICBheGlzU25hcHNob3QubWF4ID0gYXhpc1NuYXBzaG90Lm1pbiArIGxlbmd0aDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNob3VsZEFuaW1hdGVQb3NpdGlvbk9ubHkoYW5pbWF0aW9uVHlwZSwgc25hcHNob3QubGF5b3V0Qm94LCBsYXlvdXQpKSB7XG4gICAgICAgICAgICBlYWNoQXhpcygoYXhpcykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aXNTbmFwc2hvdCA9IGlzU2hhcmVkXG4gICAgICAgICAgICAgICAgICAgID8gc25hcHNob3QubWVhc3VyZWRCb3hbYXhpc11cbiAgICAgICAgICAgICAgICAgICAgOiBzbmFwc2hvdC5sYXlvdXRCb3hbYXhpc107XG4gICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gY2FsY0xlbmd0aChsYXlvdXRbYXhpc10pO1xuICAgICAgICAgICAgICAgIGF4aXNTbmFwc2hvdC5tYXggPSBheGlzU25hcHNob3QubWluICsgbGVuZ3RoO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEVuc3VyZSByZWxhdGl2ZSB0YXJnZXQgZ2V0cyByZXNpemVkIGFuZCByZXJlbmRlcmVyZFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGlmIChub2RlLnJlbGF0aXZlVGFyZ2V0ICYmICFub2RlLmN1cnJlbnRBbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5pc1Byb2plY3Rpb25EaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUucmVsYXRpdmVUYXJnZXRbYXhpc10ubWF4ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucmVsYXRpdmVUYXJnZXRbYXhpc10ubWluICsgbGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxheW91dERlbHRhID0gY3JlYXRlRGVsdGEoKTtcbiAgICAgICAgY2FsY0JveERlbHRhKGxheW91dERlbHRhLCBsYXlvdXQsIHNuYXBzaG90LmxheW91dEJveCk7XG4gICAgICAgIGNvbnN0IHZpc3VhbERlbHRhID0gY3JlYXRlRGVsdGEoKTtcbiAgICAgICAgaWYgKGlzU2hhcmVkKSB7XG4gICAgICAgICAgICBjYWxjQm94RGVsdGEodmlzdWFsRGVsdGEsIG5vZGUuYXBwbHlUcmFuc2Zvcm0obWVhc3VyZWRMYXlvdXQsIHRydWUpLCBzbmFwc2hvdC5tZWFzdXJlZEJveCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjYWxjQm94RGVsdGEodmlzdWFsRGVsdGEsIGxheW91dCwgc25hcHNob3QubGF5b3V0Qm94KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoYXNMYXlvdXRDaGFuZ2VkID0gIWlzRGVsdGFaZXJvKGxheW91dERlbHRhKTtcbiAgICAgICAgbGV0IGhhc1JlbGF0aXZlVGFyZ2V0Q2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoIW5vZGUucmVzdW1lRnJvbSkge1xuICAgICAgICAgICAgY29uc3QgcmVsYXRpdmVQYXJlbnQgPSBub2RlLmdldENsb3Nlc3RQcm9qZWN0aW5nUGFyZW50KCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoZSByZWxhdGl2ZVBhcmVudCBpcyBpdHNlbGYgcmVzdW1pbmcgZnJvbSBhIGRpZmZlcmVudCBlbGVtZW50IHRoZW5cbiAgICAgICAgICAgICAqIHRoZSByZWxhdGl2ZSBzbmFwc2hvdCBpcyBub3QgcmVsYXZlbnRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHJlbGF0aXZlUGFyZW50ICYmICFyZWxhdGl2ZVBhcmVudC5yZXN1bWVGcm9tKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBzbmFwc2hvdDogcGFyZW50U25hcHNob3QsIGxheW91dDogcGFyZW50TGF5b3V0IH0gPSByZWxhdGl2ZVBhcmVudDtcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50U25hcHNob3QgJiYgcGFyZW50TGF5b3V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbGF0aXZlU25hcHNob3QgPSBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsY1JlbGF0aXZlUG9zaXRpb24ocmVsYXRpdmVTbmFwc2hvdCwgc25hcHNob3QubGF5b3V0Qm94LCBwYXJlbnRTbmFwc2hvdC5sYXlvdXRCb3gpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWxhdGl2ZUxheW91dCA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgICAgICAgICBjYWxjUmVsYXRpdmVQb3NpdGlvbihyZWxhdGl2ZUxheW91dCwgbGF5b3V0LCBwYXJlbnRMYXlvdXQubGF5b3V0Qm94KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFib3hFcXVhbHNSb3VuZGVkKHJlbGF0aXZlU25hcHNob3QsIHJlbGF0aXZlTGF5b3V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzUmVsYXRpdmVUYXJnZXRDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocmVsYXRpdmVQYXJlbnQub3B0aW9ucy5sYXlvdXRSb290KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnJlbGF0aXZlVGFyZ2V0ID0gcmVsYXRpdmVMYXlvdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnJlbGF0aXZlVGFyZ2V0T3JpZ2luID0gcmVsYXRpdmVTbmFwc2hvdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucmVsYXRpdmVQYXJlbnQgPSByZWxhdGl2ZVBhcmVudDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBub2RlLm5vdGlmeUxpc3RlbmVycyhcImRpZFVwZGF0ZVwiLCB7XG4gICAgICAgICAgICBsYXlvdXQsXG4gICAgICAgICAgICBzbmFwc2hvdCxcbiAgICAgICAgICAgIGRlbHRhOiB2aXN1YWxEZWx0YSxcbiAgICAgICAgICAgIGxheW91dERlbHRhLFxuICAgICAgICAgICAgaGFzTGF5b3V0Q2hhbmdlZCxcbiAgICAgICAgICAgIGhhc1JlbGF0aXZlVGFyZ2V0Q2hhbmdlZCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG5vZGUuaXNMZWFkKCkpIHtcbiAgICAgICAgY29uc3QgeyBvbkV4aXRDb21wbGV0ZSB9ID0gbm9kZS5vcHRpb25zO1xuICAgICAgICBvbkV4aXRDb21wbGV0ZSAmJiBvbkV4aXRDb21wbGV0ZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhcmluZyB0cmFuc2l0aW9uXG4gICAgICogVE9ETzogSW52ZXN0aWdhdGUgd2h5IHRoaXMgdHJhbnNpdGlvbiBpcyBiZWluZyBwYXNzZWQgaW4gYXMge3R5cGU6IGZhbHNlIH0gZnJvbSBGcmFtZXJcbiAgICAgKiBhbmQgd2h5IHdlIG5lZWQgaXQgYXQgYWxsXG4gICAgICovXG4gICAgbm9kZS5vcHRpb25zLnRyYW5zaXRpb24gPSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBwcm9wYWdhdGVEaXJ0eU5vZGVzKG5vZGUpIHtcbiAgICAvKipcbiAgICAgKiBJbmNyZWFzZSBkZWJ1ZyBjb3VudGVyIGZvciBub2RlcyBlbmNvdW50ZXJlZCB0aGlzIGZyYW1lXG4gICAgICovXG4gICAgcHJvamVjdGlvbkZyYW1lRGF0YS50b3RhbE5vZGVzKys7XG4gICAgaWYgKCFub2RlLnBhcmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgIC8qKlxuICAgICAqIElmIHRoaXMgbm9kZSBpc24ndCBwcm9qZWN0aW5nLCBwcm9wYWdhdGUgaXNQcm9qZWN0aW9uRGlydHkuIEl0IHdpbGwgaGF2ZVxuICAgICAqIG5vIHBlcmZvcm1hbmNlIGltcGFjdCBidXQgaXQgd2lsbCBhbGxvdyB0aGUgbmV4dCBjaGlsZCB0aGF0ICppcyogcHJvamVjdGluZ1xuICAgICAqIGJ1dCAqaXNuJ3QqIGRpcnR5IHRvIGp1c3QgY2hlY2sgaXRzIHBhcmVudCB0byBzZWUgaWYgKmFueSogYW5jZXN0b3IgbmVlZHNcbiAgICAgKiBjb3JyZWN0aW5nLlxuICAgICAqL1xuICAgIGlmICghbm9kZS5pc1Byb2plY3RpbmcoKSkge1xuICAgICAgICBub2RlLmlzUHJvamVjdGlvbkRpcnR5ID0gbm9kZS5wYXJlbnQuaXNQcm9qZWN0aW9uRGlydHk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFByb3BhZ2F0ZSBpc1NoYXJlZFByb2plY3Rpb25EaXJ0eSBhbmQgaXNUcmFuc2Zvcm1EaXJ0eVxuICAgICAqIHRocm91Z2hvdXQgdGhlIHdob2xlIHRyZWUuIEEgZnV0dXJlIHJldmlzaW9uIGNhbiB0YWtlIGFub3RoZXIgbG9vayBhdFxuICAgICAqIHRoaXMgYnV0IGZvciBzYWZldHkgd2Ugc3RpbGwgcmVjYWxjdWFsdGUgc2hhcmVkIG5vZGVzLlxuICAgICAqL1xuICAgIG5vZGUuaXNTaGFyZWRQcm9qZWN0aW9uRGlydHkgfHwgKG5vZGUuaXNTaGFyZWRQcm9qZWN0aW9uRGlydHkgPSBCb29sZWFuKG5vZGUuaXNQcm9qZWN0aW9uRGlydHkgfHxcbiAgICAgICAgbm9kZS5wYXJlbnQuaXNQcm9qZWN0aW9uRGlydHkgfHxcbiAgICAgICAgbm9kZS5wYXJlbnQuaXNTaGFyZWRQcm9qZWN0aW9uRGlydHkpKTtcbiAgICBub2RlLmlzVHJhbnNmb3JtRGlydHkgfHwgKG5vZGUuaXNUcmFuc2Zvcm1EaXJ0eSA9IG5vZGUucGFyZW50LmlzVHJhbnNmb3JtRGlydHkpO1xufVxuZnVuY3Rpb24gY2xlYW5EaXJ0eU5vZGVzKG5vZGUpIHtcbiAgICBub2RlLmlzUHJvamVjdGlvbkRpcnR5ID1cbiAgICAgICAgbm9kZS5pc1NoYXJlZFByb2plY3Rpb25EaXJ0eSA9XG4gICAgICAgICAgICBub2RlLmlzVHJhbnNmb3JtRGlydHkgPVxuICAgICAgICAgICAgICAgIGZhbHNlO1xufVxuZnVuY3Rpb24gY2xlYXJTbmFwc2hvdChub2RlKSB7XG4gICAgbm9kZS5jbGVhclNuYXBzaG90KCk7XG59XG5mdW5jdGlvbiBjbGVhck1lYXN1cmVtZW50cyhub2RlKSB7XG4gICAgbm9kZS5jbGVhck1lYXN1cmVtZW50cygpO1xufVxuZnVuY3Rpb24gY2xlYXJJc0xheW91dERpcnR5KG5vZGUpIHtcbiAgICBub2RlLmlzTGF5b3V0RGlydHkgPSBmYWxzZTtcbn1cbmZ1bmN0aW9uIHJlc2V0VHJhbnNmb3JtU3R5bGUobm9kZSkge1xuICAgIGNvbnN0IHsgdmlzdWFsRWxlbWVudCB9ID0gbm9kZS5vcHRpb25zO1xuICAgIGlmICh2aXN1YWxFbGVtZW50ICYmIHZpc3VhbEVsZW1lbnQuZ2V0UHJvcHMoKS5vbkJlZm9yZUxheW91dE1lYXN1cmUpIHtcbiAgICAgICAgdmlzdWFsRWxlbWVudC5ub3RpZnkoXCJCZWZvcmVMYXlvdXRNZWFzdXJlXCIpO1xuICAgIH1cbiAgICBub2RlLnJlc2V0VHJhbnNmb3JtKCk7XG59XG5mdW5jdGlvbiBmaW5pc2hBbmltYXRpb24obm9kZSkge1xuICAgIG5vZGUuZmluaXNoQW5pbWF0aW9uKCk7XG4gICAgbm9kZS50YXJnZXREZWx0YSA9IG5vZGUucmVsYXRpdmVUYXJnZXQgPSBub2RlLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICBub2RlLmlzUHJvamVjdGlvbkRpcnR5ID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVUYXJnZXREZWx0YShub2RlKSB7XG4gICAgbm9kZS5yZXNvbHZlVGFyZ2V0RGVsdGEoKTtcbn1cbmZ1bmN0aW9uIGNhbGNQcm9qZWN0aW9uKG5vZGUpIHtcbiAgICBub2RlLmNhbGNQcm9qZWN0aW9uKCk7XG59XG5mdW5jdGlvbiByZXNldFJvdGF0aW9uKG5vZGUpIHtcbiAgICBub2RlLnJlc2V0Um90YXRpb24oKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUxlYWRTbmFwc2hvdHMoc3RhY2spIHtcbiAgICBzdGFjay5yZW1vdmVMZWFkU25hcHNob3QoKTtcbn1cbmZ1bmN0aW9uIG1peEF4aXNEZWx0YShvdXRwdXQsIGRlbHRhLCBwKSB7XG4gICAgb3V0cHV0LnRyYW5zbGF0ZSA9IG1peChkZWx0YS50cmFuc2xhdGUsIDAsIHApO1xuICAgIG91dHB1dC5zY2FsZSA9IG1peChkZWx0YS5zY2FsZSwgMSwgcCk7XG4gICAgb3V0cHV0Lm9yaWdpbiA9IGRlbHRhLm9yaWdpbjtcbiAgICBvdXRwdXQub3JpZ2luUG9pbnQgPSBkZWx0YS5vcmlnaW5Qb2ludDtcbn1cbmZ1bmN0aW9uIG1peEF4aXMob3V0cHV0LCBmcm9tLCB0bywgcCkge1xuICAgIG91dHB1dC5taW4gPSBtaXgoZnJvbS5taW4sIHRvLm1pbiwgcCk7XG4gICAgb3V0cHV0Lm1heCA9IG1peChmcm9tLm1heCwgdG8ubWF4LCBwKTtcbn1cbmZ1bmN0aW9uIG1peEJveChvdXRwdXQsIGZyb20sIHRvLCBwKSB7XG4gICAgbWl4QXhpcyhvdXRwdXQueCwgZnJvbS54LCB0by54LCBwKTtcbiAgICBtaXhBeGlzKG91dHB1dC55LCBmcm9tLnksIHRvLnksIHApO1xufVxuZnVuY3Rpb24gaGFzT3BhY2l0eUNyb3NzZmFkZShub2RlKSB7XG4gICAgcmV0dXJuIChub2RlLmFuaW1hdGlvblZhbHVlcyAmJiBub2RlLmFuaW1hdGlvblZhbHVlcy5vcGFjaXR5RXhpdCAhPT0gdW5kZWZpbmVkKTtcbn1cbmNvbnN0IGRlZmF1bHRMYXlvdXRUcmFuc2l0aW9uID0ge1xuICAgIGR1cmF0aW9uOiAwLjQ1LFxuICAgIGVhc2U6IFswLjQsIDAsIDAuMSwgMV0sXG59O1xuY29uc3QgdXNlckFnZW50Q29udGFpbnMgPSAoc3RyaW5nKSA9PiB0eXBlb2YgbmF2aWdhdG9yICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHN0cmluZyk7XG4vKipcbiAqIE1lYXN1cmVkIGJvdW5kaW5nIGJveGVzIG11c3QgYmUgcm91bmRlZCBpbiBTYWZhcmkgYW5kXG4gKiBsZWZ0IHVudG91Y2hlZCBpbiBDaHJvbWUsIG90aGVyd2lzZSBub24taW50ZWdlciBsYXlvdXRzIHdpdGhpbiBzY2FsZWQtdXAgZWxlbWVudHNcbiAqIGNhbiBhcHBlYXIgdG8ganVtcC5cbiAqL1xuY29uc3Qgcm91bmRQb2ludCA9IHVzZXJBZ2VudENvbnRhaW5zKFwiYXBwbGV3ZWJraXQvXCIpICYmICF1c2VyQWdlbnRDb250YWlucyhcImNocm9tZS9cIilcbiAgICA/IE1hdGgucm91bmRcbiAgICA6IG5vb3A7XG5mdW5jdGlvbiByb3VuZEF4aXMoYXhpcykge1xuICAgIC8vIFJvdW5kIHRvIHRoZSBuZWFyZXN0IC41IHBpeGVscyB0byBzdXBwb3J0IHN1YnBpeGVsIGxheW91dHNcbiAgICBheGlzLm1pbiA9IHJvdW5kUG9pbnQoYXhpcy5taW4pO1xuICAgIGF4aXMubWF4ID0gcm91bmRQb2ludChheGlzLm1heCk7XG59XG5mdW5jdGlvbiByb3VuZEJveChib3gpIHtcbiAgICByb3VuZEF4aXMoYm94LngpO1xuICAgIHJvdW5kQXhpcyhib3gueSk7XG59XG5mdW5jdGlvbiBzaG91bGRBbmltYXRlUG9zaXRpb25Pbmx5KGFuaW1hdGlvblR5cGUsIHNuYXBzaG90LCBsYXlvdXQpIHtcbiAgICByZXR1cm4gKGFuaW1hdGlvblR5cGUgPT09IFwicG9zaXRpb25cIiB8fFxuICAgICAgICAoYW5pbWF0aW9uVHlwZSA9PT0gXCJwcmVzZXJ2ZS1hc3BlY3RcIiAmJlxuICAgICAgICAgICAgIWlzTmVhcihhc3BlY3RSYXRpbyhzbmFwc2hvdCksIGFzcGVjdFJhdGlvKGxheW91dCksIDAuMikpKTtcbn1cblxuZXhwb3J0IHsgY2xlYW5EaXJ0eU5vZGVzLCBjcmVhdGVQcm9qZWN0aW9uTm9kZSwgbWl4QXhpcywgbWl4QXhpc0RlbHRhLCBtaXhCb3gsIHByb3BhZ2F0ZURpcnR5Tm9kZXMgfTtcbiIsImZ1bmN0aW9uIHJlY29yZChkYXRhKSB7XG4gICAgaWYgKHdpbmRvdy5Nb3Rpb25EZWJ1Zykge1xuICAgICAgICB3aW5kb3cuTW90aW9uRGVidWcucmVjb3JkKGRhdGEpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgcmVjb3JkIH07XG4iLCJmdW5jdGlvbiBpc1NWR0VsZW1lbnQoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50IGluc3RhbmNlb2YgU1ZHRWxlbWVudCAmJiBlbGVtZW50LnRhZ05hbWUgIT09IFwic3ZnXCI7XG59XG5cbmV4cG9ydCB7IGlzU1ZHRWxlbWVudCB9O1xuIiwiaW1wb3J0IHsgZnJhbWUsIGNhbmNlbEZyYW1lIH0gZnJvbSAnLi4vZnJhbWVsb29wL2ZyYW1lLm1qcyc7XG5cbi8qKlxuICogVGltZW91dCBkZWZpbmVkIGluIG1zXG4gKi9cbmZ1bmN0aW9uIGRlbGF5KGNhbGxiYWNrLCB0aW1lb3V0KSB7XG4gICAgY29uc3Qgc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICBjb25zdCBjaGVja0VsYXBzZWQgPSAoeyB0aW1lc3RhbXAgfSkgPT4ge1xuICAgICAgICBjb25zdCBlbGFwc2VkID0gdGltZXN0YW1wIC0gc3RhcnQ7XG4gICAgICAgIGlmIChlbGFwc2VkID49IHRpbWVvdXQpIHtcbiAgICAgICAgICAgIGNhbmNlbEZyYW1lKGNoZWNrRWxhcHNlZCk7XG4gICAgICAgICAgICBjYWxsYmFjayhlbGFwc2VkIC0gdGltZW91dCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGZyYW1lLnJlYWQoY2hlY2tFbGFwc2VkLCB0cnVlKTtcbiAgICByZXR1cm4gKCkgPT4gY2FuY2VsRnJhbWUoY2hlY2tFbGFwc2VkKTtcbn1cblxuZXhwb3J0IHsgZGVsYXkgfTtcbiIsImltcG9ydCB7IGFuaW1hdGVNb3Rpb25WYWx1ZSB9IGZyb20gJy4vbW90aW9uLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyBtb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uL3ZhbHVlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vdmFsdWUvdXRpbHMvaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5cbmZ1bmN0aW9uIGFuaW1hdGVTaW5nbGVWYWx1ZSh2YWx1ZSwga2V5ZnJhbWVzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgbW90aW9uVmFsdWUkMSA9IGlzTW90aW9uVmFsdWUodmFsdWUpID8gdmFsdWUgOiBtb3Rpb25WYWx1ZSh2YWx1ZSk7XG4gICAgbW90aW9uVmFsdWUkMS5zdGFydChhbmltYXRlTW90aW9uVmFsdWUoXCJcIiwgbW90aW9uVmFsdWUkMSwga2V5ZnJhbWVzLCBvcHRpb25zKSk7XG4gICAgcmV0dXJuIG1vdGlvblZhbHVlJDEuYW5pbWF0aW9uO1xufVxuXG5leHBvcnQgeyBhbmltYXRlU2luZ2xlVmFsdWUgfTtcbiIsImltcG9ydCB7IGNyZWF0ZVByb2plY3Rpb25Ob2RlIH0gZnJvbSAnLi9jcmVhdGUtcHJvamVjdGlvbi1ub2RlLm1qcyc7XG5pbXBvcnQgeyBhZGREb21FdmVudCB9IGZyb20gJy4uLy4uL2V2ZW50cy9hZGQtZG9tLWV2ZW50Lm1qcyc7XG5cbmNvbnN0IERvY3VtZW50UHJvamVjdGlvbk5vZGUgPSBjcmVhdGVQcm9qZWN0aW9uTm9kZSh7XG4gICAgYXR0YWNoUmVzaXplTGlzdGVuZXI6IChyZWYsIG5vdGlmeSkgPT4gYWRkRG9tRXZlbnQocmVmLCBcInJlc2l6ZVwiLCBub3RpZnkpLFxuICAgIG1lYXN1cmVTY3JvbGw6ICgpID0+ICh7XG4gICAgICAgIHg6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0IHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCxcbiAgICAgICAgeTogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCxcbiAgICB9KSxcbiAgICBjaGVja0lzU2Nyb2xsUm9vdDogKCkgPT4gdHJ1ZSxcbn0pO1xuXG5leHBvcnQgeyBEb2N1bWVudFByb2plY3Rpb25Ob2RlIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVQcm9qZWN0aW9uTm9kZSB9IGZyb20gJy4vY3JlYXRlLXByb2plY3Rpb24tbm9kZS5tanMnO1xuaW1wb3J0IHsgRG9jdW1lbnRQcm9qZWN0aW9uTm9kZSB9IGZyb20gJy4vRG9jdW1lbnRQcm9qZWN0aW9uTm9kZS5tanMnO1xuXG5jb25zdCByb290UHJvamVjdGlvbk5vZGUgPSB7XG4gICAgY3VycmVudDogdW5kZWZpbmVkLFxufTtcbmNvbnN0IEhUTUxQcm9qZWN0aW9uTm9kZSA9IGNyZWF0ZVByb2plY3Rpb25Ob2RlKHtcbiAgICBtZWFzdXJlU2Nyb2xsOiAoaW5zdGFuY2UpID0+ICh7XG4gICAgICAgIHg6IGluc3RhbmNlLnNjcm9sbExlZnQsXG4gICAgICAgIHk6IGluc3RhbmNlLnNjcm9sbFRvcCxcbiAgICB9KSxcbiAgICBkZWZhdWx0UGFyZW50OiAoKSA9PiB7XG4gICAgICAgIGlmICghcm9vdFByb2plY3Rpb25Ob2RlLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRvY3VtZW50Tm9kZSA9IG5ldyBEb2N1bWVudFByb2plY3Rpb25Ob2RlKHt9KTtcbiAgICAgICAgICAgIGRvY3VtZW50Tm9kZS5tb3VudCh3aW5kb3cpO1xuICAgICAgICAgICAgZG9jdW1lbnROb2RlLnNldE9wdGlvbnMoeyBsYXlvdXRTY3JvbGw6IHRydWUgfSk7XG4gICAgICAgICAgICByb290UHJvamVjdGlvbk5vZGUuY3VycmVudCA9IGRvY3VtZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcm9vdFByb2plY3Rpb25Ob2RlLmN1cnJlbnQ7XG4gICAgfSxcbiAgICByZXNldFRyYW5zZm9ybTogKGluc3RhbmNlLCB2YWx1ZSkgPT4ge1xuICAgICAgICBpbnN0YW5jZS5zdHlsZS50cmFuc2Zvcm0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBcIm5vbmVcIjtcbiAgICB9LFxuICAgIGNoZWNrSXNTY3JvbGxSb290OiAoaW5zdGFuY2UpID0+IEJvb2xlYW4od2luZG93LmdldENvbXB1dGVkU3R5bGUoaW5zdGFuY2UpLnBvc2l0aW9uID09PSBcImZpeGVkXCIpLFxufSk7XG5cbmV4cG9ydCB7IEhUTUxQcm9qZWN0aW9uTm9kZSwgcm9vdFByb2plY3Rpb25Ob2RlIH07XG4iLCJpbXBvcnQgeyBEcmFnR2VzdHVyZSB9IGZyb20gJy4uLy4uL2dlc3R1cmVzL2RyYWcvaW5kZXgubWpzJztcbmltcG9ydCB7IFBhbkdlc3R1cmUgfSBmcm9tICcuLi8uLi9nZXN0dXJlcy9wYW4vaW5kZXgubWpzJztcbmltcG9ydCB7IE1lYXN1cmVMYXlvdXQgfSBmcm9tICcuL2xheW91dC9NZWFzdXJlTGF5b3V0Lm1qcyc7XG5pbXBvcnQgeyBIVE1MUHJvamVjdGlvbk5vZGUgfSBmcm9tICcuLi8uLi9wcm9qZWN0aW9uL25vZGUvSFRNTFByb2plY3Rpb25Ob2RlLm1qcyc7XG5cbmNvbnN0IGRyYWcgPSB7XG4gICAgcGFuOiB7XG4gICAgICAgIEZlYXR1cmU6IFBhbkdlc3R1cmUsXG4gICAgfSxcbiAgICBkcmFnOiB7XG4gICAgICAgIEZlYXR1cmU6IERyYWdHZXN0dXJlLFxuICAgICAgICBQcm9qZWN0aW9uTm9kZTogSFRNTFByb2plY3Rpb25Ob2RlLFxuICAgICAgICBNZWFzdXJlTGF5b3V0LFxuICAgIH0sXG59O1xuXG5leHBvcnQgeyBkcmFnIH07XG4iLCJpbXBvcnQgeyBGZWF0dXJlIH0gZnJvbSAnLi4vLi4vbW90aW9uL2ZlYXR1cmVzL0ZlYXR1cmUubWpzJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuLi8uLi91dGlscy9ub29wLm1qcyc7XG5pbXBvcnQgeyBWaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzIH0gZnJvbSAnLi9WaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzLm1qcyc7XG5cbmNsYXNzIERyYWdHZXN0dXJlIGV4dGVuZHMgRmVhdHVyZSB7XG4gICAgY29uc3RydWN0b3Iobm9kZSkge1xuICAgICAgICBzdXBlcihub2RlKTtcbiAgICAgICAgdGhpcy5yZW1vdmVHcm91cENvbnRyb2xzID0gbm9vcDtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMgPSBub29wO1xuICAgICAgICB0aGlzLmNvbnRyb2xzID0gbmV3IFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMobm9kZSk7XG4gICAgfVxuICAgIG1vdW50KCkge1xuICAgICAgICAvLyBJZiB3ZSd2ZSBiZWVuIHByb3ZpZGVkIGEgRHJhZ0NvbnRyb2xzIGZvciBtYW51YWwgY29udHJvbCBvdmVyIHRoZSBkcmFnIGdlc3R1cmUsXG4gICAgICAgIC8vIHN1YnNjcmliZSB0aGlzIGNvbXBvbmVudCB0byBpdCBvbiBtb3VudC5cbiAgICAgICAgY29uc3QgeyBkcmFnQ29udHJvbHMgfSA9IHRoaXMubm9kZS5nZXRQcm9wcygpO1xuICAgICAgICBpZiAoZHJhZ0NvbnRyb2xzKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUdyb3VwQ29udHJvbHMgPSBkcmFnQ29udHJvbHMuc3Vic2NyaWJlKHRoaXMuY29udHJvbHMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzID0gdGhpcy5jb250cm9scy5hZGRMaXN0ZW5lcnMoKSB8fCBub29wO1xuICAgIH1cbiAgICB1bm1vdW50KCkge1xuICAgICAgICB0aGlzLnJlbW92ZUdyb3VwQ29udHJvbHMoKTtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IERyYWdHZXN0dXJlIH07XG4iLCJpbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICcuLi8uLi8uLi91dGlscy9lcnJvcnMubWpzJztcbmltcG9ydCB7IGlzTnVtZXJpY2FsU3RyaW5nIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvaXMtbnVtZXJpY2FsLXN0cmluZy5tanMnO1xuaW1wb3J0IHsgaXNDU1NWYXJpYWJsZVRva2VuIH0gZnJvbSAnLi9pcy1jc3MtdmFyaWFibGUubWpzJztcblxuLyoqXG4gKiBQYXJzZSBGcmFtZXIncyBzcGVjaWFsIENTUyB2YXJpYWJsZSBmb3JtYXQgaW50byBhIENTUyB0b2tlbiBhbmQgYSBmYWxsYmFjay5cbiAqXG4gKiBgYGBcbiAqIGB2YXIoLS1mb28sICNmZmYpYCA9PiBbYC0tZm9vYCwgJyNmZmYnXVxuICogYGBgXG4gKlxuICogQHBhcmFtIGN1cnJlbnRcbiAqL1xuY29uc3Qgc3BsaXRDU1NWYXJpYWJsZVJlZ2V4ID0gL3ZhclxcKCgtLVthLXpBLVowLTktX10rKSw/ID8oW2EtekEtWjAtOSAoKSUjLiwtXSspP1xcKS87XG5mdW5jdGlvbiBwYXJzZUNTU1ZhcmlhYmxlKGN1cnJlbnQpIHtcbiAgICBjb25zdCBtYXRjaCA9IHNwbGl0Q1NTVmFyaWFibGVSZWdleC5leGVjKGN1cnJlbnQpO1xuICAgIGlmICghbWF0Y2gpXG4gICAgICAgIHJldHVybiBbLF07XG4gICAgY29uc3QgWywgdG9rZW4sIGZhbGxiYWNrXSA9IG1hdGNoO1xuICAgIHJldHVybiBbdG9rZW4sIGZhbGxiYWNrXTtcbn1cbmNvbnN0IG1heERlcHRoID0gNDtcbmZ1bmN0aW9uIGdldFZhcmlhYmxlVmFsdWUoY3VycmVudCwgZWxlbWVudCwgZGVwdGggPSAxKSB7XG4gICAgaW52YXJpYW50KGRlcHRoIDw9IG1heERlcHRoLCBgTWF4IENTUyB2YXJpYWJsZSBmYWxsYmFjayBkZXB0aCBkZXRlY3RlZCBpbiBwcm9wZXJ0eSBcIiR7Y3VycmVudH1cIi4gVGhpcyBtYXkgaW5kaWNhdGUgYSBjaXJjdWxhciBmYWxsYmFjayBkZXBlbmRlbmN5LmApO1xuICAgIGNvbnN0IFt0b2tlbiwgZmFsbGJhY2tdID0gcGFyc2VDU1NWYXJpYWJsZShjdXJyZW50KTtcbiAgICAvLyBObyBDU1MgdmFyaWFibGUgZGV0ZWN0ZWRcbiAgICBpZiAoIXRva2VuKVxuICAgICAgICByZXR1cm47XG4gICAgLy8gQXR0ZW1wdCB0byByZWFkIHRoaXMgQ1NTIHZhcmlhYmxlIG9mZiB0aGUgZWxlbWVudFxuICAgIGNvbnN0IHJlc29sdmVkID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZSh0b2tlbik7XG4gICAgaWYgKHJlc29sdmVkKSB7XG4gICAgICAgIGNvbnN0IHRyaW1tZWQgPSByZXNvbHZlZC50cmltKCk7XG4gICAgICAgIHJldHVybiBpc051bWVyaWNhbFN0cmluZyh0cmltbWVkKSA/IHBhcnNlRmxvYXQodHJpbW1lZCkgOiB0cmltbWVkO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0NTU1ZhcmlhYmxlVG9rZW4oZmFsbGJhY2spKSB7XG4gICAgICAgIC8vIFRoZSBmYWxsYmFjayBtaWdodCBpdHNlbGYgYmUgYSBDU1MgdmFyaWFibGUsIGluIHdoaWNoIGNhc2Ugd2UgYXR0ZW1wdCB0byByZXNvbHZlIGl0IHRvby5cbiAgICAgICAgcmV0dXJuIGdldFZhcmlhYmxlVmFsdWUoZmFsbGJhY2ssIGVsZW1lbnQsIGRlcHRoICsgMSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgfVxufVxuLyoqXG4gKiBSZXNvbHZlIENTUyB2YXJpYWJsZXMgZnJvbVxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiByZXNvbHZlQ1NTVmFyaWFibGVzKHZpc3VhbEVsZW1lbnQsIHsgLi4udGFyZ2V0IH0sIHRyYW5zaXRpb25FbmQpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gdmlzdWFsRWxlbWVudC5jdXJyZW50O1xuICAgIGlmICghKGVsZW1lbnQgaW5zdGFuY2VvZiBFbGVtZW50KSlcbiAgICAgICAgcmV0dXJuIHsgdGFyZ2V0LCB0cmFuc2l0aW9uRW5kIH07XG4gICAgLy8gSWYgYHRyYW5zaXRpb25FbmRgIGlzbid0IGB1bmRlZmluZWRgLCBjbG9uZSBpdC4gV2UgY291bGQgY2xvbmUgYHRhcmdldGAgYW5kIGB0cmFuc2l0aW9uRW5kYFxuICAgIC8vIG9ubHkgaWYgdGhleSBjaGFuZ2UgYnV0IEkgdGhpbmsgdGhpcyByZWFkcyBjbGVhcmVyIGFuZCB0aGlzIGlzbid0IGEgcGVyZm9ybWFuY2UtY3JpdGljYWwgcGF0aC5cbiAgICBpZiAodHJhbnNpdGlvbkVuZCkge1xuICAgICAgICB0cmFuc2l0aW9uRW5kID0geyAuLi50cmFuc2l0aW9uRW5kIH07XG4gICAgfVxuICAgIC8vIEdvIHRocm91Z2ggZXhpc3RpbmcgYE1vdGlvblZhbHVlYHMgYW5kIGVuc3VyZSBhbnkgZXhpc3RpbmcgQ1NTIHZhcmlhYmxlcyBhcmUgcmVzb2x2ZWRcbiAgICB2aXN1YWxFbGVtZW50LnZhbHVlcy5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gdmFsdWUuZ2V0KCk7XG4gICAgICAgIGlmICghaXNDU1NWYXJpYWJsZVRva2VuKGN1cnJlbnQpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCByZXNvbHZlZCA9IGdldFZhcmlhYmxlVmFsdWUoY3VycmVudCwgZWxlbWVudCk7XG4gICAgICAgIGlmIChyZXNvbHZlZClcbiAgICAgICAgICAgIHZhbHVlLnNldChyZXNvbHZlZCk7XG4gICAgfSk7XG4gICAgLy8gQ3ljbGUgdGhyb3VnaCBldmVyeSB0YXJnZXQgcHJvcGVydHkgYW5kIHJlc29sdmUgQ1NTIHZhcmlhYmxlcy4gQ3VycmVudGx5XG4gICAgLy8gd2Ugb25seSByZWFkIHNpbmdsZS12YXIgcHJvcGVydGllcyBsaWtlIGB2YXIoLS1mb28pYCwgbm90IGBjYWxjKHZhcigtLWZvbykgKyAyMHB4KWBcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0YXJnZXQpIHtcbiAgICAgICAgY29uc3QgY3VycmVudCA9IHRhcmdldFtrZXldO1xuICAgICAgICBpZiAoIWlzQ1NTVmFyaWFibGVUb2tlbihjdXJyZW50KSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCByZXNvbHZlZCA9IGdldFZhcmlhYmxlVmFsdWUoY3VycmVudCwgZWxlbWVudCk7XG4gICAgICAgIGlmICghcmVzb2x2ZWQpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgLy8gQ2xvbmUgdGFyZ2V0IGlmIGl0IGhhc24ndCBhbHJlYWR5IGJlZW5cbiAgICAgICAgdGFyZ2V0W2tleV0gPSByZXNvbHZlZDtcbiAgICAgICAgaWYgKCF0cmFuc2l0aW9uRW5kKVxuICAgICAgICAgICAgdHJhbnNpdGlvbkVuZCA9IHt9O1xuICAgICAgICAvLyBJZiB0aGUgdXNlciBoYXNuJ3QgYWxyZWFkeSBzZXQgdGhpcyBrZXkgb24gYHRyYW5zaXRpb25FbmRgLCBzZXQgaXQgdG8gdGhlIHVucmVzb2x2ZWRcbiAgICAgICAgLy8gQ1NTIHZhcmlhYmxlLiBUaGlzIHdpbGwgZW5zdXJlIHRoYXQgYWZ0ZXIgdGhlIGFuaW1hdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgcmVmbGVjdFxuICAgICAgICAvLyBjaGFuZ2VzIGluIHRoZSB2YWx1ZSBvZiB0aGUgQ1NTIHZhcmlhYmxlLlxuICAgICAgICBpZiAodHJhbnNpdGlvbkVuZFtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25FbmRba2V5XSA9IGN1cnJlbnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgdGFyZ2V0LCB0cmFuc2l0aW9uRW5kIH07XG59XG5cbmV4cG9ydCB7IHBhcnNlQ1NTVmFyaWFibGUsIHJlc29sdmVDU1NWYXJpYWJsZXMgfTtcbiIsImltcG9ydCB7IGlzS2V5ZnJhbWVzVGFyZ2V0IH0gZnJvbSAnLi4vLi4vLi4vYW5pbWF0aW9uL3V0aWxzL2lzLWtleWZyYW1lcy10YXJnZXQubWpzJztcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2Vycm9ycy5tanMnO1xuaW1wb3J0IHsgdHJhbnNmb3JtUHJvcE9yZGVyIH0gZnJvbSAnLi4vLi4vaHRtbC91dGlscy90cmFuc2Zvcm0ubWpzJztcbmltcG9ydCB7IGZpbmREaW1lbnNpb25WYWx1ZVR5cGUgfSBmcm9tICcuLi92YWx1ZS10eXBlcy9kaW1lbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBpc0Jyb3dzZXIgfSBmcm9tICcuLi8uLi8uLi91dGlscy9pcy1icm93c2VyLm1qcyc7XG5pbXBvcnQgeyBudW1iZXIgfSBmcm9tICcuLi8uLi8uLi92YWx1ZS90eXBlcy9udW1iZXJzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBweCB9IGZyb20gJy4uLy4uLy4uL3ZhbHVlL3R5cGVzL251bWJlcnMvdW5pdHMubWpzJztcblxuY29uc3QgcG9zaXRpb25hbEtleXMgPSBuZXcgU2V0KFtcbiAgICBcIndpZHRoXCIsXG4gICAgXCJoZWlnaHRcIixcbiAgICBcInRvcFwiLFxuICAgIFwibGVmdFwiLFxuICAgIFwicmlnaHRcIixcbiAgICBcImJvdHRvbVwiLFxuICAgIFwieFwiLFxuICAgIFwieVwiLFxuICAgIFwidHJhbnNsYXRlWFwiLFxuICAgIFwidHJhbnNsYXRlWVwiLFxuXSk7XG5jb25zdCBpc1Bvc2l0aW9uYWxLZXkgPSAoa2V5KSA9PiBwb3NpdGlvbmFsS2V5cy5oYXMoa2V5KTtcbmNvbnN0IGhhc1Bvc2l0aW9uYWxLZXkgPSAodGFyZ2V0KSA9PiB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRhcmdldCkuc29tZShpc1Bvc2l0aW9uYWxLZXkpO1xufTtcbmNvbnN0IGlzTnVtT3JQeFR5cGUgPSAodikgPT4gdiA9PT0gbnVtYmVyIHx8IHYgPT09IHB4O1xuY29uc3QgZ2V0UG9zRnJvbU1hdHJpeCA9IChtYXRyaXgsIHBvcykgPT4gcGFyc2VGbG9hdChtYXRyaXguc3BsaXQoXCIsIFwiKVtwb3NdKTtcbmNvbnN0IGdldFRyYW5zbGF0ZUZyb21NYXRyaXggPSAocG9zMiwgcG9zMykgPT4gKF9iYm94LCB7IHRyYW5zZm9ybSB9KSA9PiB7XG4gICAgaWYgKHRyYW5zZm9ybSA9PT0gXCJub25lXCIgfHwgIXRyYW5zZm9ybSlcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgY29uc3QgbWF0cml4M2QgPSB0cmFuc2Zvcm0ubWF0Y2goL15tYXRyaXgzZFxcKCguKylcXCkkLyk7XG4gICAgaWYgKG1hdHJpeDNkKSB7XG4gICAgICAgIHJldHVybiBnZXRQb3NGcm9tTWF0cml4KG1hdHJpeDNkWzFdLCBwb3MzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IG1hdHJpeCA9IHRyYW5zZm9ybS5tYXRjaCgvXm1hdHJpeFxcKCguKylcXCkkLyk7XG4gICAgICAgIGlmIChtYXRyaXgpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRQb3NGcm9tTWF0cml4KG1hdHJpeFsxXSwgcG9zMik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5jb25zdCB0cmFuc2Zvcm1LZXlzID0gbmV3IFNldChbXCJ4XCIsIFwieVwiLCBcInpcIl0pO1xuY29uc3Qgbm9uVHJhbnNsYXRpb25hbFRyYW5zZm9ybUtleXMgPSB0cmFuc2Zvcm1Qcm9wT3JkZXIuZmlsdGVyKChrZXkpID0+ICF0cmFuc2Zvcm1LZXlzLmhhcyhrZXkpKTtcbmZ1bmN0aW9uIHJlbW92ZU5vblRyYW5zbGF0aW9uYWxUcmFuc2Zvcm0odmlzdWFsRWxlbWVudCkge1xuICAgIGNvbnN0IHJlbW92ZWRUcmFuc2Zvcm1zID0gW107XG4gICAgbm9uVHJhbnNsYXRpb25hbFRyYW5zZm9ybUtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdmlzdWFsRWxlbWVudC5nZXRWYWx1ZShrZXkpO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVtb3ZlZFRyYW5zZm9ybXMucHVzaChba2V5LCB2YWx1ZS5nZXQoKV0pO1xuICAgICAgICAgICAgdmFsdWUuc2V0KGtleS5zdGFydHNXaXRoKFwic2NhbGVcIikgPyAxIDogMCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBBcHBseSBjaGFuZ2VzIHRvIGVsZW1lbnQgYmVmb3JlIG1lYXN1cmVtZW50XG4gICAgaWYgKHJlbW92ZWRUcmFuc2Zvcm1zLmxlbmd0aClcbiAgICAgICAgdmlzdWFsRWxlbWVudC5yZW5kZXIoKTtcbiAgICByZXR1cm4gcmVtb3ZlZFRyYW5zZm9ybXM7XG59XG5jb25zdCBwb3NpdGlvbmFsVmFsdWVzID0ge1xuICAgIC8vIERpbWVuc2lvbnNcbiAgICB3aWR0aDogKHsgeCB9LCB7IHBhZGRpbmdMZWZ0ID0gXCIwXCIsIHBhZGRpbmdSaWdodCA9IFwiMFwiIH0pID0+IHgubWF4IC0geC5taW4gLSBwYXJzZUZsb2F0KHBhZGRpbmdMZWZ0KSAtIHBhcnNlRmxvYXQocGFkZGluZ1JpZ2h0KSxcbiAgICBoZWlnaHQ6ICh7IHkgfSwgeyBwYWRkaW5nVG9wID0gXCIwXCIsIHBhZGRpbmdCb3R0b20gPSBcIjBcIiB9KSA9PiB5Lm1heCAtIHkubWluIC0gcGFyc2VGbG9hdChwYWRkaW5nVG9wKSAtIHBhcnNlRmxvYXQocGFkZGluZ0JvdHRvbSksXG4gICAgdG9wOiAoX2Jib3gsIHsgdG9wIH0pID0+IHBhcnNlRmxvYXQodG9wKSxcbiAgICBsZWZ0OiAoX2Jib3gsIHsgbGVmdCB9KSA9PiBwYXJzZUZsb2F0KGxlZnQpLFxuICAgIGJvdHRvbTogKHsgeSB9LCB7IHRvcCB9KSA9PiBwYXJzZUZsb2F0KHRvcCkgKyAoeS5tYXggLSB5Lm1pbiksXG4gICAgcmlnaHQ6ICh7IHggfSwgeyBsZWZ0IH0pID0+IHBhcnNlRmxvYXQobGVmdCkgKyAoeC5tYXggLSB4Lm1pbiksXG4gICAgLy8gVHJhbnNmb3JtXG4gICAgeDogZ2V0VHJhbnNsYXRlRnJvbU1hdHJpeCg0LCAxMyksXG4gICAgeTogZ2V0VHJhbnNsYXRlRnJvbU1hdHJpeCg1LCAxNCksXG59O1xuLy8gQWxpYXMgdHJhbnNsYXRlIGxvbmdmb3JtIG5hbWVzXG5wb3NpdGlvbmFsVmFsdWVzLnRyYW5zbGF0ZVggPSBwb3NpdGlvbmFsVmFsdWVzLng7XG5wb3NpdGlvbmFsVmFsdWVzLnRyYW5zbGF0ZVkgPSBwb3NpdGlvbmFsVmFsdWVzLnk7XG5jb25zdCBjb252ZXJ0Q2hhbmdlZFZhbHVlVHlwZXMgPSAodGFyZ2V0LCB2aXN1YWxFbGVtZW50LCBjaGFuZ2VkS2V5cykgPT4ge1xuICAgIGNvbnN0IG9yaWdpbkJib3ggPSB2aXN1YWxFbGVtZW50Lm1lYXN1cmVWaWV3cG9ydEJveCgpO1xuICAgIGNvbnN0IGVsZW1lbnQgPSB2aXN1YWxFbGVtZW50LmN1cnJlbnQ7XG4gICAgY29uc3QgZWxlbWVudENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICAgIGNvbnN0IHsgZGlzcGxheSB9ID0gZWxlbWVudENvbXB1dGVkU3R5bGU7XG4gICAgY29uc3Qgb3JpZ2luID0ge307XG4gICAgLy8gSWYgdGhlIGVsZW1lbnQgaXMgY3VycmVudGx5IHNldCB0byBkaXNwbGF5OiBcIm5vbmVcIiwgbWFrZSBpdCB2aXNpYmxlIGJlZm9yZVxuICAgIC8vIG1lYXN1cmluZyB0aGUgdGFyZ2V0IGJvdW5kaW5nIGJveFxuICAgIGlmIChkaXNwbGF5ID09PSBcIm5vbmVcIikge1xuICAgICAgICB2aXN1YWxFbGVtZW50LnNldFN0YXRpY1ZhbHVlKFwiZGlzcGxheVwiLCB0YXJnZXQuZGlzcGxheSB8fCBcImJsb2NrXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWNvcmQgb3JpZ2lucyBiZWZvcmUgd2UgcmVuZGVyIGFuZCB1cGRhdGUgc3R5bGVzXG4gICAgICovXG4gICAgY2hhbmdlZEtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIG9yaWdpbltrZXldID0gcG9zaXRpb25hbFZhbHVlc1trZXldKG9yaWdpbkJib3gsIGVsZW1lbnRDb21wdXRlZFN0eWxlKTtcbiAgICB9KTtcbiAgICAvLyBBcHBseSB0aGUgbGF0ZXN0IHZhbHVlcyAoYXMgc2V0IGluIGNoZWNrQW5kQ29udmVydENoYW5nZWRWYWx1ZVR5cGVzKVxuICAgIHZpc3VhbEVsZW1lbnQucmVuZGVyKCk7XG4gICAgY29uc3QgdGFyZ2V0QmJveCA9IHZpc3VhbEVsZW1lbnQubWVhc3VyZVZpZXdwb3J0Qm94KCk7XG4gICAgY2hhbmdlZEtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIC8vIFJlc3RvcmUgc3R5bGVzIHRvIHRoZWlyICoqY2FsY3VsYXRlZCBjb21wdXRlZCBzdHlsZSoqLCBub3QgdGhlaXIgYWN0dWFsXG4gICAgICAgIC8vIG9yaWdpbmFsbHkgc2V0IHN0eWxlLiBUaGlzIGFsbG93cyB1cyB0byBhbmltYXRlIGJldHdlZW4gZXF1aXZhbGVudCBwaXhlbCB1bml0cy5cbiAgICAgICAgY29uc3QgdmFsdWUgPSB2aXN1YWxFbGVtZW50LmdldFZhbHVlKGtleSk7XG4gICAgICAgIHZhbHVlICYmIHZhbHVlLmp1bXAob3JpZ2luW2tleV0pO1xuICAgICAgICB0YXJnZXRba2V5XSA9IHBvc2l0aW9uYWxWYWx1ZXNba2V5XSh0YXJnZXRCYm94LCBlbGVtZW50Q29tcHV0ZWRTdHlsZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRhcmdldDtcbn07XG5jb25zdCBjaGVja0FuZENvbnZlcnRDaGFuZ2VkVmFsdWVUeXBlcyA9ICh2aXN1YWxFbGVtZW50LCB0YXJnZXQsIG9yaWdpbiA9IHt9LCB0cmFuc2l0aW9uRW5kID0ge30pID0+IHtcbiAgICB0YXJnZXQgPSB7IC4uLnRhcmdldCB9O1xuICAgIHRyYW5zaXRpb25FbmQgPSB7IC4uLnRyYW5zaXRpb25FbmQgfTtcbiAgICBjb25zdCB0YXJnZXRQb3NpdGlvbmFsS2V5cyA9IE9iamVjdC5rZXlzKHRhcmdldCkuZmlsdGVyKGlzUG9zaXRpb25hbEtleSk7XG4gICAgLy8gV2Ugd2FudCB0byByZW1vdmUgYW55IHRyYW5zZm9ybSB2YWx1ZXMgdGhhdCBjb3VsZCBhZmZlY3QgdGhlIGVsZW1lbnQncyBib3VuZGluZyBib3ggYmVmb3JlXG4gICAgLy8gaXQncyBtZWFzdXJlZC4gV2UnbGwgcmVhcHBseSB0aGVzZSBsYXRlci5cbiAgICBsZXQgcmVtb3ZlZFRyYW5zZm9ybVZhbHVlcyA9IFtdO1xuICAgIGxldCBoYXNBdHRlbXB0ZWRUb1JlbW92ZVRyYW5zZm9ybVZhbHVlcyA9IGZhbHNlO1xuICAgIGNvbnN0IGNoYW5nZWRWYWx1ZVR5cGVLZXlzID0gW107XG4gICAgdGFyZ2V0UG9zaXRpb25hbEtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdmlzdWFsRWxlbWVudC5nZXRWYWx1ZShrZXkpO1xuICAgICAgICBpZiAoIXZpc3VhbEVsZW1lbnQuaGFzVmFsdWUoa2V5KSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbGV0IGZyb20gPSBvcmlnaW5ba2V5XTtcbiAgICAgICAgbGV0IGZyb21UeXBlID0gZmluZERpbWVuc2lvblZhbHVlVHlwZShmcm9tKTtcbiAgICAgICAgY29uc3QgdG8gPSB0YXJnZXRba2V5XTtcbiAgICAgICAgbGV0IHRvVHlwZTtcbiAgICAgICAgLy8gVE9ETzogVGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBiYXNpY2FsbHkgdGhyb3dzIGFuIGVycm9yXG4gICAgICAgIC8vIGlmIHlvdSB0cnkgYW5kIGRvIHZhbHVlIGNvbnZlcnNpb24gdmlhIGtleWZyYW1lcy4gVGhlcmUncyBwcm9iYWJseVxuICAgICAgICAvLyBhIHdheSBvZiBkb2luZyB0aGlzIGJ1dCB0aGUgcGVyZm9ybWFuY2UgaW1wbGljYXRpb25zIHdvdWxkIG5lZWQgZ3JlYXRlciBzY3J1dGlueSxcbiAgICAgICAgLy8gYXMgaXQnZCBiZSBkb2luZyBtdWx0aXBsZSByZXNpemUtcmVtZWFzdXJlIG9wZXJhdGlvbnMuXG4gICAgICAgIGlmIChpc0tleWZyYW1lc1RhcmdldCh0bykpIHtcbiAgICAgICAgICAgIGNvbnN0IG51bUtleWZyYW1lcyA9IHRvLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IGZyb21JbmRleCA9IHRvWzBdID09PSBudWxsID8gMSA6IDA7XG4gICAgICAgICAgICBmcm9tID0gdG9bZnJvbUluZGV4XTtcbiAgICAgICAgICAgIGZyb21UeXBlID0gZmluZERpbWVuc2lvblZhbHVlVHlwZShmcm9tKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBmcm9tSW5kZXg7IGkgPCBudW1LZXlmcmFtZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIERvbid0IGFsbG93IHdpbGRjYXJkIGtleWZyYW1lcyB0byBiZSB1c2VkIHRvIGRldGVjdFxuICAgICAgICAgICAgICAgICAqIGEgZGlmZmVyZW5jZSBpbiB2YWx1ZSB0eXBlcy5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAodG9baV0gPT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGlmICghdG9UeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvVHlwZSA9IGZpbmREaW1lbnNpb25WYWx1ZVR5cGUodG9baV0pO1xuICAgICAgICAgICAgICAgICAgICBpbnZhcmlhbnQodG9UeXBlID09PSBmcm9tVHlwZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKGlzTnVtT3JQeFR5cGUoZnJvbVR5cGUpICYmIGlzTnVtT3JQeFR5cGUodG9UeXBlKSksIFwiS2V5ZnJhbWVzIG11c3QgYmUgb2YgdGhlIHNhbWUgZGltZW5zaW9uIGFzIHRoZSBjdXJyZW50IHZhbHVlXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW52YXJpYW50KGZpbmREaW1lbnNpb25WYWx1ZVR5cGUodG9baV0pID09PSB0b1R5cGUsIFwiQWxsIGtleWZyYW1lcyBtdXN0IGJlIG9mIHRoZSBzYW1lIHR5cGVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdG9UeXBlID0gZmluZERpbWVuc2lvblZhbHVlVHlwZSh0byk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZyb21UeXBlICE9PSB0b1R5cGUpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXkncmUgYm90aCBqdXN0IG51bWJlciBvciBweCwgY29udmVydCB0aGVtIGJvdGggdG8gbnVtYmVycyByYXRoZXIgdGhhblxuICAgICAgICAgICAgLy8gcmVseWluZyBvbiByZXNpemUvcmVtZWFzdXJlIHRvIGNvbnZlcnQgKHdoaWNoIGlzIHdhc3RlZnVsIGluIHRoaXMgc2l0dWF0aW9uKVxuICAgICAgICAgICAgaWYgKGlzTnVtT3JQeFR5cGUoZnJvbVR5cGUpICYmIGlzTnVtT3JQeFR5cGUodG9UeXBlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSB2YWx1ZS5nZXQoKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUuc2V0KHBhcnNlRmxvYXQoY3VycmVudCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gcGFyc2VGbG9hdCh0byk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodG8pICYmIHRvVHlwZSA9PT0gcHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSB0by5tYXAocGFyc2VGbG9hdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKGZyb21UeXBlID09PSBudWxsIHx8IGZyb21UeXBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmcm9tVHlwZS50cmFuc2Zvcm0pICYmXG4gICAgICAgICAgICAgICAgKHRvVHlwZSA9PT0gbnVsbCB8fCB0b1R5cGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRvVHlwZS50cmFuc2Zvcm0pICYmXG4gICAgICAgICAgICAgICAgKGZyb20gPT09IDAgfHwgdG8gPT09IDApKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgb25lIG9yIHRoZSBvdGhlciB2YWx1ZSBpcyAwLCBpdCdzIHNhZmUgdG8gY29lcmNlIGl0IHRvIHRoZVxuICAgICAgICAgICAgICAgIC8vIHR5cGUgb2YgdGhlIG90aGVyIHdpdGhvdXQgbWVhc3VyZW1lbnRcbiAgICAgICAgICAgICAgICBpZiAoZnJvbSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZS5zZXQodG9UeXBlLnRyYW5zZm9ybShmcm9tKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IGZyb21UeXBlLnRyYW5zZm9ybSh0byk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UncmUgZ29pbmcgdG8gZG8gdmFsdWUgY29udmVyc2lvbiB2aWEgRE9NIG1lYXN1cmVtZW50cywgd2UgZmlyc3RcbiAgICAgICAgICAgICAgICAvLyBuZWVkIHRvIHJlbW92ZSBub24tcG9zaXRpb25hbCB0cmFuc2Zvcm0gdmFsdWVzIHRoYXQgY291bGQgYWZmZWN0IHRoZSBiYm94IG1lYXN1cmVtZW50cy5cbiAgICAgICAgICAgICAgICBpZiAoIWhhc0F0dGVtcHRlZFRvUmVtb3ZlVHJhbnNmb3JtVmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZWRUcmFuc2Zvcm1WYWx1ZXMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlTm9uVHJhbnNsYXRpb25hbFRyYW5zZm9ybSh2aXN1YWxFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaGFzQXR0ZW1wdGVkVG9SZW1vdmVUcmFuc2Zvcm1WYWx1ZXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjaGFuZ2VkVmFsdWVUeXBlS2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbkVuZFtrZXldID1cbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbkVuZFtrZXldICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdHJhbnNpdGlvbkVuZFtrZXldXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRhcmdldFtrZXldO1xuICAgICAgICAgICAgICAgIHZhbHVlLmp1bXAodG8pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGNoYW5nZWRWYWx1ZVR5cGVLZXlzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBzY3JvbGxZID0gY2hhbmdlZFZhbHVlVHlwZUtleXMuaW5kZXhPZihcImhlaWdodFwiKSA+PSAwXG4gICAgICAgICAgICA/IHdpbmRvdy5wYWdlWU9mZnNldFxuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICBjb25zdCBjb252ZXJ0ZWRUYXJnZXQgPSBjb252ZXJ0Q2hhbmdlZFZhbHVlVHlwZXModGFyZ2V0LCB2aXN1YWxFbGVtZW50LCBjaGFuZ2VkVmFsdWVUeXBlS2V5cyk7XG4gICAgICAgIC8vIElmIHdlIHJlbW92ZWQgdHJhbnNmb3JtIHZhbHVlcywgcmVhcHBseSB0aGVtIGJlZm9yZSB0aGUgbmV4dCByZW5kZXJcbiAgICAgICAgaWYgKHJlbW92ZWRUcmFuc2Zvcm1WYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZW1vdmVkVHJhbnNmb3JtVmFsdWVzLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQuZ2V0VmFsdWUoa2V5KS5zZXQodmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVhcHBseSBvcmlnaW5hbCB2YWx1ZXNcbiAgICAgICAgdmlzdWFsRWxlbWVudC5yZW5kZXIoKTtcbiAgICAgICAgLy8gUmVzdG9yZSBzY3JvbGwgcG9zaXRpb25cbiAgICAgICAgaWYgKGlzQnJvd3NlciAmJiBzY3JvbGxZICE9PSBudWxsKSB7XG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oeyB0b3A6IHNjcm9sbFkgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgdGFyZ2V0OiBjb252ZXJ0ZWRUYXJnZXQsIHRyYW5zaXRpb25FbmQgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB7IHRhcmdldCwgdHJhbnNpdGlvbkVuZCB9O1xuICAgIH1cbn07XG4vKipcbiAqIENvbnZlcnQgdmFsdWUgdHlwZXMgZm9yIHgveS93aWR0aC9oZWlnaHQvdG9wL2xlZnQvYm90dG9tL3JpZ2h0XG4gKlxuICogQWxsb3dzIGFuaW1hdGlvbiBiZXR3ZWVuIGAnYXV0bydgIC0+IGAnMTAwJSdgIG9yIGAwYCAtPiBgJ2NhbGMoNTAlIC0gMTB2dyknYFxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiB1bml0Q29udmVyc2lvbih2aXN1YWxFbGVtZW50LCB0YXJnZXQsIG9yaWdpbiwgdHJhbnNpdGlvbkVuZCkge1xuICAgIHJldHVybiBoYXNQb3NpdGlvbmFsS2V5KHRhcmdldClcbiAgICAgICAgPyBjaGVja0FuZENvbnZlcnRDaGFuZ2VkVmFsdWVUeXBlcyh2aXN1YWxFbGVtZW50LCB0YXJnZXQsIG9yaWdpbiwgdHJhbnNpdGlvbkVuZClcbiAgICAgICAgOiB7IHRhcmdldCwgdHJhbnNpdGlvbkVuZCB9O1xufVxuXG5leHBvcnQgeyBwb3NpdGlvbmFsVmFsdWVzLCB1bml0Q29udmVyc2lvbiB9O1xuIiwiaW1wb3J0IHsgcmVzb2x2ZUNTU1ZhcmlhYmxlcyB9IGZyb20gJy4vY3NzLXZhcmlhYmxlcy1jb252ZXJzaW9uLm1qcyc7XG5pbXBvcnQgeyB1bml0Q29udmVyc2lvbiB9IGZyb20gJy4vdW5pdC1jb252ZXJzaW9uLm1qcyc7XG5cbi8qKlxuICogUGFyc2UgYSBET00gdmFyaWFudCB0byBtYWtlIGl0IGFuaW1hdGFibGUuIFRoaXMgaW52b2x2ZXMgcmVzb2x2aW5nIENTUyB2YXJpYWJsZXNcbiAqIGFuZCBlbnN1cmluZyBhbmltYXRpb25zIGxpa2UgXCIyMCVcIiA9PiBcImNhbGMoNTB2dylcIiBhcmUgcGVyZm9ybWVkIGluIHBpeGVscy5cbiAqL1xuY29uc3QgcGFyc2VEb21WYXJpYW50ID0gKHZpc3VhbEVsZW1lbnQsIHRhcmdldCwgb3JpZ2luLCB0cmFuc2l0aW9uRW5kKSA9PiB7XG4gICAgY29uc3QgcmVzb2x2ZWQgPSByZXNvbHZlQ1NTVmFyaWFibGVzKHZpc3VhbEVsZW1lbnQsIHRhcmdldCwgdHJhbnNpdGlvbkVuZCk7XG4gICAgdGFyZ2V0ID0gcmVzb2x2ZWQudGFyZ2V0O1xuICAgIHRyYW5zaXRpb25FbmQgPSByZXNvbHZlZC50cmFuc2l0aW9uRW5kO1xuICAgIHJldHVybiB1bml0Q29udmVyc2lvbih2aXN1YWxFbGVtZW50LCB0YXJnZXQsIG9yaWdpbiwgdHJhbnNpdGlvbkVuZCk7XG59O1xuXG5leHBvcnQgeyBwYXJzZURvbVZhcmlhbnQgfTtcbiIsIi8vIERvZXMgdGhpcyBkZXZpY2UgcHJlZmVyIHJlZHVjZWQgbW90aW9uPyBSZXR1cm5zIGBudWxsYCBzZXJ2ZXItc2lkZS5cbmNvbnN0IHByZWZlcnNSZWR1Y2VkTW90aW9uID0geyBjdXJyZW50OiBudWxsIH07XG5jb25zdCBoYXNSZWR1Y2VkTW90aW9uTGlzdGVuZXIgPSB7IGN1cnJlbnQ6IGZhbHNlIH07XG5cbmV4cG9ydCB7IGhhc1JlZHVjZWRNb3Rpb25MaXN0ZW5lciwgcHJlZmVyc1JlZHVjZWRNb3Rpb24gfTtcbiIsImNvbnN0IHZpc3VhbEVsZW1lbnRTdG9yZSA9IG5ldyBXZWFrTWFwKCk7XG5cbmV4cG9ydCB7IHZpc3VhbEVsZW1lbnRTdG9yZSB9O1xuIiwiaW1wb3J0IHsgd2FybmluZywgaW52YXJpYW50IH0gZnJvbSAnLi4vdXRpbHMvZXJyb3JzLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVCb3ggfSBmcm9tICcuLi9wcm9qZWN0aW9uL2dlb21ldHJ5L21vZGVscy5tanMnO1xuaW1wb3J0IHsgaXNSZWZPYmplY3QgfSBmcm9tICcuLi91dGlscy9pcy1yZWYtb2JqZWN0Lm1qcyc7XG5pbXBvcnQgeyBpbml0UHJlZmVyc1JlZHVjZWRNb3Rpb24gfSBmcm9tICcuLi91dGlscy9yZWR1Y2VkLW1vdGlvbi9pbmRleC5tanMnO1xuaW1wb3J0IHsgaGFzUmVkdWNlZE1vdGlvbkxpc3RlbmVyLCBwcmVmZXJzUmVkdWNlZE1vdGlvbiB9IGZyb20gJy4uL3V0aWxzL3JlZHVjZWQtbW90aW9uL3N0YXRlLm1qcyc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb25NYW5hZ2VyIH0gZnJvbSAnLi4vdXRpbHMvc3Vic2NyaXB0aW9uLW1hbmFnZXIubWpzJztcbmltcG9ydCB7IG1vdGlvblZhbHVlIH0gZnJvbSAnLi4vdmFsdWUvaW5kZXgubWpzJztcbmltcG9ydCB7IGlzV2lsbENoYW5nZU1vdGlvblZhbHVlIH0gZnJvbSAnLi4vdmFsdWUvdXNlLXdpbGwtY2hhbmdlL2lzLm1qcyc7XG5pbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi4vdmFsdWUvdXRpbHMvaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm1Qcm9wcyB9IGZyb20gJy4vaHRtbC91dGlscy90cmFuc2Zvcm0ubWpzJztcbmltcG9ydCB7IGlzQ29udHJvbGxpbmdWYXJpYW50cywgaXNWYXJpYW50Tm9kZSB9IGZyb20gJy4vdXRpbHMvaXMtY29udHJvbGxpbmctdmFyaWFudHMubWpzJztcbmltcG9ydCB7IGlzVmFyaWFudExhYmVsIH0gZnJvbSAnLi91dGlscy9pcy12YXJpYW50LWxhYmVsLm1qcyc7XG5pbXBvcnQgeyB1cGRhdGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMgfSBmcm9tICcuL3V0aWxzL21vdGlvbi12YWx1ZXMubWpzJztcbmltcG9ydCB7IHJlc29sdmVWYXJpYW50RnJvbVByb3BzIH0gZnJvbSAnLi91dGlscy9yZXNvbHZlLXZhcmlhbnRzLm1qcyc7XG5pbXBvcnQgeyB3YXJuT25jZSB9IGZyb20gJy4uL3V0aWxzL3dhcm4tb25jZS5tanMnO1xuaW1wb3J0IHsgZmVhdHVyZURlZmluaXRpb25zIH0gZnJvbSAnLi4vbW90aW9uL2ZlYXR1cmVzL2RlZmluaXRpb25zLm1qcyc7XG5pbXBvcnQgeyB2YXJpYW50UHJvcHMgfSBmcm9tICcuL3V0aWxzL3ZhcmlhbnQtcHJvcHMubWpzJztcbmltcG9ydCB7IHZpc3VhbEVsZW1lbnRTdG9yZSB9IGZyb20gJy4vc3RvcmUubWpzJztcbmltcG9ydCB7IGZyYW1lLCBjYW5jZWxGcmFtZSB9IGZyb20gJy4uL2ZyYW1lbG9vcC9mcmFtZS5tanMnO1xuXG5jb25zdCBmZWF0dXJlTmFtZXMgPSBPYmplY3Qua2V5cyhmZWF0dXJlRGVmaW5pdGlvbnMpO1xuY29uc3QgbnVtRmVhdHVyZXMgPSBmZWF0dXJlTmFtZXMubGVuZ3RoO1xuY29uc3QgcHJvcEV2ZW50SGFuZGxlcnMgPSBbXG4gICAgXCJBbmltYXRpb25TdGFydFwiLFxuICAgIFwiQW5pbWF0aW9uQ29tcGxldGVcIixcbiAgICBcIlVwZGF0ZVwiLFxuICAgIFwiQmVmb3JlTGF5b3V0TWVhc3VyZVwiLFxuICAgIFwiTGF5b3V0TWVhc3VyZVwiLFxuICAgIFwiTGF5b3V0QW5pbWF0aW9uU3RhcnRcIixcbiAgICBcIkxheW91dEFuaW1hdGlvbkNvbXBsZXRlXCIsXG5dO1xuY29uc3QgbnVtVmFyaWFudFByb3BzID0gdmFyaWFudFByb3BzLmxlbmd0aDtcbi8qKlxuICogQSBWaXN1YWxFbGVtZW50IGlzIGFuIGltcGVyYXRpdmUgYWJzdHJhY3Rpb24gYXJvdW5kIFVJIGVsZW1lbnRzIHN1Y2ggYXNcbiAqIEhUTUxFbGVtZW50LCBTVkdFbGVtZW50LCBUaHJlZS5PYmplY3QzRCBldGMuXG4gKi9cbmNsYXNzIFZpc3VhbEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHsgcGFyZW50LCBwcm9wcywgcHJlc2VuY2VDb250ZXh0LCByZWR1Y2VkTW90aW9uQ29uZmlnLCB2aXN1YWxTdGF0ZSwgfSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCB1bmRlcmx5aW5nIEluc3RhbmNlLCBlLmcuIGEgSFRNTEVsZW1lbnRcbiAgICAgICAgICogb3IgVGhyZWUuTWVzaCBldGMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBzZXQgY29udGFpbmluZyByZWZlcmVuY2VzIHRvIHRoaXMgVmlzdWFsRWxlbWVudCdzIGNoaWxkcmVuLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IG5ldyBTZXQoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERldGVybWluZSB3aGF0IHJvbGUgdGhpcyB2aXN1YWwgZWxlbWVudCBzaG91bGQgdGFrZSBpbiB0aGUgdmFyaWFudCB0cmVlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pc1ZhcmlhbnROb2RlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNDb250cm9sbGluZ1ZhcmlhbnRzID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNpZGVzIHdoZXRoZXIgdGhpcyBWaXN1YWxFbGVtZW50IHNob3VsZCBhbmltYXRlIGluIHJlZHVjZWQgbW90aW9uXG4gICAgICAgICAqIG1vZGUuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRPRE86IFRoaXMgaXMgY3VycmVudGx5IHNldCBvbiBldmVyeSBpbmRpdmlkdWFsIFZpc3VhbEVsZW1lbnQgYnV0IGZlZWxzXG4gICAgICAgICAqIGxpa2UgaXQgY291bGQgYmUgc2V0IGdsb2JhbGx5LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zaG91bGRSZWR1Y2VNb3Rpb24gPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBtYXAgb2YgYWxsIG1vdGlvbiB2YWx1ZXMgYXR0YWNoZWQgdG8gdGhpcyB2aXN1YWwgZWxlbWVudC4gTW90aW9uXG4gICAgICAgICAqIHZhbHVlcyBhcmUgc291cmNlIG9mIHRydXRoIGZvciBhbnkgZ2l2ZW4gYW5pbWF0ZWQgdmFsdWUuIEEgbW90aW9uXG4gICAgICAgICAqIHZhbHVlIG1pZ2h0IGJlIHByb3ZpZGVkIGV4dGVybmFsbHkgYnkgdGhlIGNvbXBvbmVudCB2aWEgcHJvcHMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnZhbHVlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENsZWFudXAgZnVuY3Rpb25zIGZvciBhY3RpdmUgZmVhdHVyZXMgKGhvdmVyL3RhcC9leGl0IGV0YylcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZmVhdHVyZXMgPSB7fTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgbWFwIG9mIGV2ZXJ5IHN1YnNjcmlwdGlvbiB0aGF0IGJpbmRzIHRoZSBwcm92aWRlZCBvciBnZW5lcmF0ZWRcbiAgICAgICAgICogbW90aW9uIHZhbHVlcyBvbkNoYW5nZSBsaXN0ZW5lcnMgdG8gdGhpcyB2aXN1YWwgZWxlbWVudC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudmFsdWVTdWJzY3JpcHRpb25zID0gbmV3IE1hcCgpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQSByZWZlcmVuY2UgdG8gdGhlIHByZXZpb3VzbHktcHJvdmlkZWQgbW90aW9uIHZhbHVlcyBhcyByZXR1cm5lZFxuICAgICAgICAgKiBmcm9tIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcy4gV2UgdXNlIHRoZSBrZXlzIGluIGhlcmUgdG8gZGV0ZXJtaW5lXG4gICAgICAgICAqIGlmIGFueSBtb3Rpb24gdmFsdWVzIG5lZWQgdG8gYmUgcmVtb3ZlZCBhZnRlciBwcm9wcyBhcmUgdXBkYXRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucHJldk1vdGlvblZhbHVlcyA9IHt9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgYSBTdWJzY3JpcHRpb25NYW5hZ2VyIGZvciBlYWNoIGFjdGl2ZSBldmVudC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZXZlbnRzID0ge307XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBvYmplY3QgY29udGFpbmluZyBhbiB1bnN1YnNjcmliZSBmdW5jdGlvbiBmb3IgZWFjaCBwcm9wIGV2ZW50IHN1YnNjcmlwdGlvbi5cbiAgICAgICAgICogRm9yIGV4YW1wbGUsIGV2ZXJ5IFwiVXBkYXRlXCIgZXZlbnQgY2FuIGhhdmUgbXVsdGlwbGUgc3Vic2NyaWJlcnMgdmlhXG4gICAgICAgICAqIFZpc3VhbEVsZW1lbnQub24oKSwgYnV0IG9ubHkgb25lIG9mIHRob3NlIGNhbiBiZSBkZWZpbmVkIHZpYSB0aGUgb25VcGRhdGUgcHJvcC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucHJvcEV2ZW50U3Vic2NyaXB0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLm5vdGlmeVVwZGF0ZSA9ICgpID0+IHRoaXMubm90aWZ5KFwiVXBkYXRlXCIsIHRoaXMubGF0ZXN0VmFsdWVzKTtcbiAgICAgICAgdGhpcy5yZW5kZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuY3VycmVudClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJCdWlsZCgpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJJbnN0YW5jZSh0aGlzLmN1cnJlbnQsIHRoaXMucmVuZGVyU3RhdGUsIHRoaXMucHJvcHMuc3R5bGUsIHRoaXMucHJvamVjdGlvbik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2NoZWR1bGVSZW5kZXIgPSAoKSA9PiBmcmFtZS5yZW5kZXIodGhpcy5yZW5kZXIsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgY29uc3QgeyBsYXRlc3RWYWx1ZXMsIHJlbmRlclN0YXRlIH0gPSB2aXN1YWxTdGF0ZTtcbiAgICAgICAgdGhpcy5sYXRlc3RWYWx1ZXMgPSBsYXRlc3RWYWx1ZXM7XG4gICAgICAgIHRoaXMuYmFzZVRhcmdldCA9IHsgLi4ubGF0ZXN0VmFsdWVzIH07XG4gICAgICAgIHRoaXMuaW5pdGlhbFZhbHVlcyA9IHByb3BzLmluaXRpYWwgPyB7IC4uLmxhdGVzdFZhbHVlcyB9IDoge307XG4gICAgICAgIHRoaXMucmVuZGVyU3RhdGUgPSByZW5kZXJTdGF0ZTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5wcmVzZW5jZUNvbnRleHQgPSBwcmVzZW5jZUNvbnRleHQ7XG4gICAgICAgIHRoaXMuZGVwdGggPSBwYXJlbnQgPyBwYXJlbnQuZGVwdGggKyAxIDogMDtcbiAgICAgICAgdGhpcy5yZWR1Y2VkTW90aW9uQ29uZmlnID0gcmVkdWNlZE1vdGlvbkNvbmZpZztcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5pc0NvbnRyb2xsaW5nVmFyaWFudHMgPSBpc0NvbnRyb2xsaW5nVmFyaWFudHMocHJvcHMpO1xuICAgICAgICB0aGlzLmlzVmFyaWFudE5vZGUgPSBpc1ZhcmlhbnROb2RlKHByb3BzKTtcbiAgICAgICAgaWYgKHRoaXMuaXNWYXJpYW50Tm9kZSkge1xuICAgICAgICAgICAgdGhpcy52YXJpYW50Q2hpbGRyZW4gPSBuZXcgU2V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tYW51YWxseUFuaW1hdGVPbk1vdW50ID0gQm9vbGVhbihwYXJlbnQgJiYgcGFyZW50LmN1cnJlbnQpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQW55IG1vdGlvbiB2YWx1ZXMgdGhhdCBhcmUgcHJvdmlkZWQgdG8gdGhlIGVsZW1lbnQgd2hlbiBjcmVhdGVkXG4gICAgICAgICAqIGFyZW4ndCB5ZXQgYm91bmQgdG8gdGhlIGVsZW1lbnQsIGFzIHRoaXMgd291bGQgdGVjaG5pY2FsbHkgYmUgaW1wdXJlLlxuICAgICAgICAgKiBIb3dldmVyLCB3ZSBpdGVyYXRlIHRocm91Z2ggdGhlIG1vdGlvbiB2YWx1ZXMgYW5kIHNldCB0aGVtIHRvIHRoZVxuICAgICAgICAgKiBpbml0aWFsIHZhbHVlcyBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRPRE86IFRoaXMgaXMgaW1wdXJlIGFuZCB3ZSBzaG91bGQgbG9vayBhdCBjaGFuZ2luZyB0aGlzIHRvIHJ1biBvbiBtb3VudC5cbiAgICAgICAgICogRG9pbmcgc28gd2lsbCBicmVhayBzb21lIHRlc3RzIGJ1dCB0aGlzIGlzbid0IG5lY2Nlc3NhcmlseSBhIGJyZWFraW5nIGNoYW5nZSxcbiAgICAgICAgICogbW9yZSBhIHJlZmxlY3Rpb24gb2YgdGhlIHRlc3QuXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCB7IHdpbGxDaGFuZ2UsIC4uLmluaXRpYWxNb3Rpb25WYWx1ZXMgfSA9IHRoaXMuc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzKHByb3BzLCB7fSk7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGluaXRpYWxNb3Rpb25WYWx1ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gaW5pdGlhbE1vdGlvblZhbHVlc1trZXldO1xuICAgICAgICAgICAgaWYgKGxhdGVzdFZhbHVlc1trZXldICE9PSB1bmRlZmluZWQgJiYgaXNNb3Rpb25WYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZS5zZXQobGF0ZXN0VmFsdWVzW2tleV0sIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNXaWxsQ2hhbmdlTW90aW9uVmFsdWUod2lsbENoYW5nZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgd2lsbENoYW5nZS5hZGQoa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgdGFrZXMgUmVhY3QgcHJvcHMgYW5kIHJldHVybnMgZm91bmQgTW90aW9uVmFsdWVzLiBGb3IgZXhhbXBsZSwgSFRNTFxuICAgICAqIE1vdGlvblZhbHVlcyB3aWxsIGJlIGZvdW5kIHdpdGhpbiB0aGUgc3R5bGUgcHJvcCwgd2hlcmVhcyBmb3IgVGhyZWUuanMgd2l0aGluIGF0dHJpYnV0ZSBhcnJheXMuXG4gICAgICpcbiAgICAgKiBUaGlzIGlzbid0IGFuIGFic3RyYWN0IG1ldGhvZCBhcyBpdCBuZWVkcyBjYWxsaW5nIGluIHRoZSBjb25zdHJ1Y3RvciwgYnV0IGl0IGlzXG4gICAgICogaW50ZW5kZWQgdG8gYmUgb25lLlxuICAgICAqL1xuICAgIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyhfcHJvcHMsIF9wcmV2UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBtb3VudChpbnN0YW5jZSkge1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSBpbnN0YW5jZTtcbiAgICAgICAgdmlzdWFsRWxlbWVudFN0b3JlLnNldChpbnN0YW5jZSwgdGhpcyk7XG4gICAgICAgIGlmICh0aGlzLnByb2plY3Rpb24gJiYgIXRoaXMucHJvamVjdGlvbi5pbnN0YW5jZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9qZWN0aW9uLm1vdW50KGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wYXJlbnQgJiYgdGhpcy5pc1ZhcmlhbnROb2RlICYmICF0aGlzLmlzQ29udHJvbGxpbmdWYXJpYW50cykge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVGcm9tVmFyaWFudFRyZWUgPSB0aGlzLnBhcmVudC5hZGRWYXJpYW50Q2hpbGQodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52YWx1ZXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4gdGhpcy5iaW5kVG9Nb3Rpb25WYWx1ZShrZXksIHZhbHVlKSk7XG4gICAgICAgIGlmICghaGFzUmVkdWNlZE1vdGlvbkxpc3RlbmVyLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGluaXRQcmVmZXJzUmVkdWNlZE1vdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2hvdWxkUmVkdWNlTW90aW9uID1cbiAgICAgICAgICAgIHRoaXMucmVkdWNlZE1vdGlvbkNvbmZpZyA9PT0gXCJuZXZlclwiXG4gICAgICAgICAgICAgICAgPyBmYWxzZVxuICAgICAgICAgICAgICAgIDogdGhpcy5yZWR1Y2VkTW90aW9uQ29uZmlnID09PSBcImFsd2F5c1wiXG4gICAgICAgICAgICAgICAgICAgID8gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICA6IHByZWZlcnNSZWR1Y2VkTW90aW9uLmN1cnJlbnQ7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIHdhcm5PbmNlKHRoaXMuc2hvdWxkUmVkdWNlTW90aW9uICE9PSB0cnVlLCBcIllvdSBoYXZlIFJlZHVjZWQgTW90aW9uIGVuYWJsZWQgb24geW91ciBkZXZpY2UuIEFuaW1hdGlvbnMgbWF5IG5vdCBhcHBlYXIgYXMgZXhwZWN0ZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBhcmVudClcbiAgICAgICAgICAgIHRoaXMucGFyZW50LmNoaWxkcmVuLmFkZCh0aGlzKTtcbiAgICAgICAgdGhpcy51cGRhdGUodGhpcy5wcm9wcywgdGhpcy5wcmVzZW5jZUNvbnRleHQpO1xuICAgIH1cbiAgICB1bm1vdW50KCkge1xuICAgICAgICB2aXN1YWxFbGVtZW50U3RvcmUuZGVsZXRlKHRoaXMuY3VycmVudCk7XG4gICAgICAgIHRoaXMucHJvamVjdGlvbiAmJiB0aGlzLnByb2plY3Rpb24udW5tb3VudCgpO1xuICAgICAgICBjYW5jZWxGcmFtZSh0aGlzLm5vdGlmeVVwZGF0ZSk7XG4gICAgICAgIGNhbmNlbEZyYW1lKHRoaXMucmVuZGVyKTtcbiAgICAgICAgdGhpcy52YWx1ZVN1YnNjcmlwdGlvbnMuZm9yRWFjaCgocmVtb3ZlKSA9PiByZW1vdmUoKSk7XG4gICAgICAgIHRoaXMucmVtb3ZlRnJvbVZhcmlhbnRUcmVlICYmIHRoaXMucmVtb3ZlRnJvbVZhcmlhbnRUcmVlKCk7XG4gICAgICAgIHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LmNoaWxkcmVuLmRlbGV0ZSh0aGlzKTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5ldmVudHMpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzW2tleV0uY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmZlYXR1cmVzKSB7XG4gICAgICAgICAgICB0aGlzLmZlYXR1cmVzW2tleV0udW5tb3VudCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudCA9IG51bGw7XG4gICAgfVxuICAgIGJpbmRUb01vdGlvblZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgdmFsdWVJc1RyYW5zZm9ybSA9IHRyYW5zZm9ybVByb3BzLmhhcyhrZXkpO1xuICAgICAgICBjb25zdCByZW1vdmVPbkNoYW5nZSA9IHZhbHVlLm9uKFwiY2hhbmdlXCIsIChsYXRlc3RWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5sYXRlc3RWYWx1ZXNba2V5XSA9IGxhdGVzdFZhbHVlO1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vblVwZGF0ZSAmJlxuICAgICAgICAgICAgICAgIGZyYW1lLnVwZGF0ZSh0aGlzLm5vdGlmeVVwZGF0ZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgaWYgKHZhbHVlSXNUcmFuc2Zvcm0gJiYgdGhpcy5wcm9qZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9qZWN0aW9uLmlzVHJhbnNmb3JtRGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVtb3ZlT25SZW5kZXJSZXF1ZXN0ID0gdmFsdWUub24oXCJyZW5kZXJSZXF1ZXN0XCIsIHRoaXMuc2NoZWR1bGVSZW5kZXIpO1xuICAgICAgICB0aGlzLnZhbHVlU3Vic2NyaXB0aW9ucy5zZXQoa2V5LCAoKSA9PiB7XG4gICAgICAgICAgICByZW1vdmVPbkNoYW5nZSgpO1xuICAgICAgICAgICAgcmVtb3ZlT25SZW5kZXJSZXF1ZXN0KCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzb3J0Tm9kZVBvc2l0aW9uKG90aGVyKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGVzZSBub2RlcyBhcmVuJ3QgZXZlbiBvZiB0aGUgc2FtZSB0eXBlIHdlIGNhbid0IGNvbXBhcmUgdGhlaXIgZGVwdGguXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoIXRoaXMuY3VycmVudCB8fFxuICAgICAgICAgICAgIXRoaXMuc29ydEluc3RhbmNlTm9kZVBvc2l0aW9uIHx8XG4gICAgICAgICAgICB0aGlzLnR5cGUgIT09IG90aGVyLnR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnNvcnRJbnN0YW5jZU5vZGVQb3NpdGlvbih0aGlzLmN1cnJlbnQsIG90aGVyLmN1cnJlbnQpO1xuICAgIH1cbiAgICBsb2FkRmVhdHVyZXMoeyBjaGlsZHJlbiwgLi4ucmVuZGVyZWRQcm9wcyB9LCBpc1N0cmljdCwgcHJlbG9hZGVkRmVhdHVyZXMsIGluaXRpYWxMYXlvdXRHcm91cENvbmZpZykge1xuICAgICAgICBsZXQgUHJvamVjdGlvbk5vZGVDb25zdHJ1Y3RvcjtcbiAgICAgICAgbGV0IE1lYXN1cmVMYXlvdXQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB3ZSdyZSBpbiBkZXZlbG9wbWVudCBtb2RlLCBjaGVjayB0byBtYWtlIHN1cmUgd2UncmUgbm90IHJlbmRlcmluZyBhIG1vdGlvbiBjb21wb25lbnRcbiAgICAgICAgICogYXMgYSBjaGlsZCBvZiBMYXp5TW90aW9uLCBhcyB0aGlzIHdpbGwgYnJlYWsgdGhlIGZpbGUtc2l6ZSBiZW5lZml0cyBvZiB1c2luZyBpdC5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcbiAgICAgICAgICAgIHByZWxvYWRlZEZlYXR1cmVzICYmXG4gICAgICAgICAgICBpc1N0cmljdCkge1xuICAgICAgICAgICAgY29uc3Qgc3RyaWN0TWVzc2FnZSA9IFwiWW91IGhhdmUgcmVuZGVyZWQgYSBgbW90aW9uYCBjb21wb25lbnQgd2l0aGluIGEgYExhenlNb3Rpb25gIGNvbXBvbmVudC4gVGhpcyB3aWxsIGJyZWFrIHRyZWUgc2hha2luZy4gSW1wb3J0IGFuZCByZW5kZXIgYSBgbWAgY29tcG9uZW50IGluc3RlYWQuXCI7XG4gICAgICAgICAgICByZW5kZXJlZFByb3BzLmlnbm9yZVN0cmljdFxuICAgICAgICAgICAgICAgID8gd2FybmluZyhmYWxzZSwgc3RyaWN0TWVzc2FnZSlcbiAgICAgICAgICAgICAgICA6IGludmFyaWFudChmYWxzZSwgc3RyaWN0TWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1GZWF0dXJlczsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gZmVhdHVyZU5hbWVzW2ldO1xuICAgICAgICAgICAgY29uc3QgeyBpc0VuYWJsZWQsIEZlYXR1cmU6IEZlYXR1cmVDb25zdHJ1Y3RvciwgUHJvamVjdGlvbk5vZGUsIE1lYXN1cmVMYXlvdXQ6IE1lYXN1cmVMYXlvdXRDb21wb25lbnQsIH0gPSBmZWF0dXJlRGVmaW5pdGlvbnNbbmFtZV07XG4gICAgICAgICAgICBpZiAoUHJvamVjdGlvbk5vZGUpXG4gICAgICAgICAgICAgICAgUHJvamVjdGlvbk5vZGVDb25zdHJ1Y3RvciA9IFByb2plY3Rpb25Ob2RlO1xuICAgICAgICAgICAgaWYgKGlzRW5hYmxlZChyZW5kZXJlZFByb3BzKSkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5mZWF0dXJlc1tuYW1lXSAmJiBGZWF0dXJlQ29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mZWF0dXJlc1tuYW1lXSA9IG5ldyBGZWF0dXJlQ29uc3RydWN0b3IodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChNZWFzdXJlTGF5b3V0Q29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIE1lYXN1cmVMYXlvdXQgPSBNZWFzdXJlTGF5b3V0Q29tcG9uZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMucHJvamVjdGlvbiAmJiBQcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICB0aGlzLnByb2plY3Rpb24gPSBuZXcgUHJvamVjdGlvbk5vZGVDb25zdHJ1Y3Rvcih0aGlzLmxhdGVzdFZhbHVlcywgdGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQucHJvamVjdGlvbik7XG4gICAgICAgICAgICBjb25zdCB7IGxheW91dElkLCBsYXlvdXQsIGRyYWcsIGRyYWdDb25zdHJhaW50cywgbGF5b3V0U2Nyb2xsLCBsYXlvdXRSb290LCB9ID0gcmVuZGVyZWRQcm9wcztcbiAgICAgICAgICAgIHRoaXMucHJvamVjdGlvbi5zZXRPcHRpb25zKHtcbiAgICAgICAgICAgICAgICBsYXlvdXRJZCxcbiAgICAgICAgICAgICAgICBsYXlvdXQsXG4gICAgICAgICAgICAgICAgYWx3YXlzTWVhc3VyZUxheW91dDogQm9vbGVhbihkcmFnKSB8fFxuICAgICAgICAgICAgICAgICAgICAoZHJhZ0NvbnN0cmFpbnRzICYmIGlzUmVmT2JqZWN0KGRyYWdDb25zdHJhaW50cykpLFxuICAgICAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQ6IHRoaXMsXG4gICAgICAgICAgICAgICAgc2NoZWR1bGVSZW5kZXI6ICgpID0+IHRoaXMuc2NoZWR1bGVSZW5kZXIoKSxcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBUT0RPOiBVcGRhdGUgb3B0aW9ucyBpbiBhbiBlZmZlY3QuIFRoaXMgY291bGQgYmUgdHJpY2t5IGFzIGl0J2xsIGJlIHRvbyBsYXRlXG4gICAgICAgICAgICAgICAgICogdG8gdXBkYXRlIGJ5IHRoZSB0aW1lIGxheW91dCBhbmltYXRpb25zIHJ1bi5cbiAgICAgICAgICAgICAgICAgKiBXZSBhbHNvIG5lZWQgdG8gZml4IHRoaXMgc2FmZVRvUmVtb3ZlIGJ5IGxpbmtpbmcgaXQgdXAgdG8gdGhlIG9uZSByZXR1cm5lZCBieSB1c2VQcmVzZW5jZSxcbiAgICAgICAgICAgICAgICAgKiBlbnN1cmluZyBpdCBnZXRzIGNhbGxlZCBpZiB0aGVyZSdzIG5vIHBvdGVudGlhbCBsYXlvdXQgYW5pbWF0aW9ucy5cbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvblR5cGU6IHR5cGVvZiBsYXlvdXQgPT09IFwic3RyaW5nXCIgPyBsYXlvdXQgOiBcImJvdGhcIixcbiAgICAgICAgICAgICAgICBpbml0aWFsUHJvbW90aW9uQ29uZmlnOiBpbml0aWFsTGF5b3V0R3JvdXBDb25maWcsXG4gICAgICAgICAgICAgICAgbGF5b3V0U2Nyb2xsLFxuICAgICAgICAgICAgICAgIGxheW91dFJvb3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTWVhc3VyZUxheW91dDtcbiAgICB9XG4gICAgdXBkYXRlRmVhdHVyZXMoKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuZmVhdHVyZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGZlYXR1cmUgPSB0aGlzLmZlYXR1cmVzW2tleV07XG4gICAgICAgICAgICBpZiAoZmVhdHVyZS5pc01vdW50ZWQpIHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZS5tb3VudCgpO1xuICAgICAgICAgICAgICAgIGZlYXR1cmUuaXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB0cmlnZ2VyQnVpbGQoKSB7XG4gICAgICAgIHRoaXMuYnVpbGQodGhpcy5yZW5kZXJTdGF0ZSwgdGhpcy5sYXRlc3RWYWx1ZXMsIHRoaXMub3B0aW9ucywgdGhpcy5wcm9wcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1lYXN1cmUgdGhlIGN1cnJlbnQgdmlld3BvcnQgYm94IHdpdGggb3Igd2l0aG91dCB0cmFuc2Zvcm1zLlxuICAgICAqIE9ubHkgbWVhc3VyZXMgYXhpcy1hbGlnbmVkIGJveGVzLCByb3RhdGUgYW5kIHNrZXcgbXVzdCBiZSBtYW51YWxseVxuICAgICAqIHJlbW92ZWQgd2l0aCBhIHJlLXJlbmRlciB0byB3b3JrLlxuICAgICAqL1xuICAgIG1lYXN1cmVWaWV3cG9ydEJveCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFxuICAgICAgICAgICAgPyB0aGlzLm1lYXN1cmVJbnN0YW5jZVZpZXdwb3J0Qm94KHRoaXMuY3VycmVudCwgdGhpcy5wcm9wcylcbiAgICAgICAgICAgIDogY3JlYXRlQm94KCk7XG4gICAgfVxuICAgIGdldFN0YXRpY1ZhbHVlKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5sYXRlc3RWYWx1ZXNba2V5XTtcbiAgICB9XG4gICAgc2V0U3RhdGljVmFsdWUoa2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmxhdGVzdFZhbHVlc1trZXldID0gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ha2UgYSB0YXJnZXQgYW5pbWF0YWJsZSBieSBQb3Btb3Rpb24uIEZvciBpbnN0YW5jZSwgaWYgd2UncmVcbiAgICAgKiB0cnlpbmcgdG8gYW5pbWF0ZSB3aWR0aCBmcm9tIDEwMHB4IHRvIDEwMHZ3IHdlIG5lZWQgdG8gbWVhc3VyZSAxMDB2d1xuICAgICAqIGluIHBpeGVscyB0byBkZXRlcm1pbmUgd2hhdCB3ZSByZWFsbHkgbmVlZCB0byBhbmltYXRlIHRvLiBUaGlzIGlzIGFsc29cbiAgICAgKiBwbHVnZ2FibGUgdG8gc3VwcG9ydCBGcmFtZXIncyBjdXN0b20gdmFsdWUgdHlwZXMgbGlrZSBDb2xvcixcbiAgICAgKiBhbmQgQ1NTIHZhcmlhYmxlcy5cbiAgICAgKi9cbiAgICBtYWtlVGFyZ2V0QW5pbWF0YWJsZSh0YXJnZXQsIGNhbk11dGF0ZSA9IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFrZVRhcmdldEFuaW1hdGFibGVGcm9tSW5zdGFuY2UodGFyZ2V0LCB0aGlzLnByb3BzLCBjYW5NdXRhdGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIHByb3ZpZGVkIHByb3BzLiBFbnN1cmUgYW55IG5ld2x5LWFkZGVkIG1vdGlvbiB2YWx1ZXMgYXJlXG4gICAgICogYWRkZWQgdG8gb3VyIG1hcCwgb2xkIG9uZXMgcmVtb3ZlZCwgYW5kIGxpc3RlbmVycyB1cGRhdGVkLlxuICAgICAqL1xuICAgIHVwZGF0ZShwcm9wcywgcHJlc2VuY2VDb250ZXh0KSB7XG4gICAgICAgIGlmIChwcm9wcy50cmFuc2Zvcm1UZW1wbGF0ZSB8fCB0aGlzLnByb3BzLnRyYW5zZm9ybVRlbXBsYXRlKSB7XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlUmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcmV2UHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMucHJldlByZXNlbmNlQ29udGV4dCA9IHRoaXMucHJlc2VuY2VDb250ZXh0O1xuICAgICAgICB0aGlzLnByZXNlbmNlQ29udGV4dCA9IHByZXNlbmNlQ29udGV4dDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVwZGF0ZSBwcm9wIGV2ZW50IGhhbmRsZXJzIGllIG9uQW5pbWF0aW9uU3RhcnQsIG9uQW5pbWF0aW9uQ29tcGxldGVcbiAgICAgICAgICovXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcEV2ZW50SGFuZGxlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHByb3BFdmVudEhhbmRsZXJzW2ldO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcEV2ZW50U3Vic2NyaXB0aW9uc1trZXldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wRXZlbnRTdWJzY3JpcHRpb25zW2tleV0oKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5wcm9wRXZlbnRTdWJzY3JpcHRpb25zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsaXN0ZW5lciA9IHByb3BzW1wib25cIiArIGtleV07XG4gICAgICAgICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BFdmVudFN1YnNjcmlwdGlvbnNba2V5XSA9IHRoaXMub24oa2V5LCBsaXN0ZW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcmV2TW90aW9uVmFsdWVzID0gdXBkYXRlTW90aW9uVmFsdWVzRnJvbVByb3BzKHRoaXMsIHRoaXMuc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzKHByb3BzLCB0aGlzLnByZXZQcm9wcyksIHRoaXMucHJldk1vdGlvblZhbHVlcyk7XG4gICAgICAgIGlmICh0aGlzLmhhbmRsZUNoaWxkTW90aW9uVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlQ2hpbGRNb3Rpb25WYWx1ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldFByb3BzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdmFyaWFudCBkZWZpbml0aW9uIHdpdGggYSBnaXZlbiBuYW1lLlxuICAgICAqL1xuICAgIGdldFZhcmlhbnQobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy52YXJpYW50cyA/IHRoaXMucHJvcHMudmFyaWFudHNbbmFtZV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGRlZmluZWQgZGVmYXVsdCB0cmFuc2l0aW9uIG9uIHRoaXMgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGdldERlZmF1bHRUcmFuc2l0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy50cmFuc2l0aW9uO1xuICAgIH1cbiAgICBnZXRUcmFuc2Zvcm1QYWdlUG9pbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnRyYW5zZm9ybVBhZ2VQb2ludDtcbiAgICB9XG4gICAgZ2V0Q2xvc2VzdFZhcmlhbnROb2RlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhcmlhbnROb2RlXG4gICAgICAgICAgICA/IHRoaXNcbiAgICAgICAgICAgIDogdGhpcy5wYXJlbnRcbiAgICAgICAgICAgICAgICA/IHRoaXMucGFyZW50LmdldENsb3Nlc3RWYXJpYW50Tm9kZSgpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGdldFZhcmlhbnRDb250ZXh0KHN0YXJ0QXRQYXJlbnQgPSBmYWxzZSkge1xuICAgICAgICBpZiAoc3RhcnRBdFBhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50ID8gdGhpcy5wYXJlbnQuZ2V0VmFyaWFudENvbnRleHQoKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaXNDb250cm9sbGluZ1ZhcmlhbnRzKSB7XG4gICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5wYXJlbnRcbiAgICAgICAgICAgICAgICA/IHRoaXMucGFyZW50LmdldFZhcmlhbnRDb250ZXh0KCkgfHwge31cbiAgICAgICAgICAgICAgICA6IHt9O1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuaW5pdGlhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5pbml0aWFsID0gdGhpcy5wcm9wcy5pbml0aWFsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGV4dCA9IHt9O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVZhcmlhbnRQcm9wczsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gdmFyaWFudFByb3BzW2ldO1xuICAgICAgICAgICAgY29uc3QgcHJvcCA9IHRoaXMucHJvcHNbbmFtZV07XG4gICAgICAgICAgICBpZiAoaXNWYXJpYW50TGFiZWwocHJvcCkgfHwgcHJvcCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0W25hbWVdID0gcHJvcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGEgY2hpbGQgdmlzdWFsIGVsZW1lbnQgdG8gb3VyIHNldCBvZiBjaGlsZHJlbi5cbiAgICAgKi9cbiAgICBhZGRWYXJpYW50Q2hpbGQoY2hpbGQpIHtcbiAgICAgICAgY29uc3QgY2xvc2VzdFZhcmlhbnROb2RlID0gdGhpcy5nZXRDbG9zZXN0VmFyaWFudE5vZGUoKTtcbiAgICAgICAgaWYgKGNsb3Nlc3RWYXJpYW50Tm9kZSkge1xuICAgICAgICAgICAgY2xvc2VzdFZhcmlhbnROb2RlLnZhcmlhbnRDaGlsZHJlbiAmJlxuICAgICAgICAgICAgICAgIGNsb3Nlc3RWYXJpYW50Tm9kZS52YXJpYW50Q2hpbGRyZW4uYWRkKGNoaWxkKTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBjbG9zZXN0VmFyaWFudE5vZGUudmFyaWFudENoaWxkcmVuLmRlbGV0ZShjaGlsZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGEgbW90aW9uIHZhbHVlIGFuZCBiaW5kIGl0IHRvIHRoaXMgdmlzdWFsIGVsZW1lbnQuXG4gICAgICovXG4gICAgYWRkVmFsdWUoa2V5LCB2YWx1ZSkge1xuICAgICAgICAvLyBSZW1vdmUgZXhpc3RpbmcgdmFsdWUgaWYgaXQgZXhpc3RzXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdGhpcy52YWx1ZXMuZ2V0KGtleSkpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlVmFsdWUoa2V5KTtcbiAgICAgICAgICAgIHRoaXMuYmluZFRvTW90aW9uVmFsdWUoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52YWx1ZXMuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB0aGlzLmxhdGVzdFZhbHVlc1trZXldID0gdmFsdWUuZ2V0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIG1vdGlvbiB2YWx1ZSBhbmQgdW5iaW5kIGFueSBhY3RpdmUgc3Vic2NyaXB0aW9ucy5cbiAgICAgKi9cbiAgICByZW1vdmVWYWx1ZShrZXkpIHtcbiAgICAgICAgdGhpcy52YWx1ZXMuZGVsZXRlKGtleSk7XG4gICAgICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gdGhpcy52YWx1ZVN1YnNjcmlwdGlvbnMuZ2V0KGtleSk7XG4gICAgICAgIGlmICh1bnN1YnNjcmliZSkge1xuICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRoaXMudmFsdWVTdWJzY3JpcHRpb25zLmRlbGV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSB0aGlzLmxhdGVzdFZhbHVlc1trZXldO1xuICAgICAgICB0aGlzLnJlbW92ZVZhbHVlRnJvbVJlbmRlclN0YXRlKGtleSwgdGhpcy5yZW5kZXJTdGF0ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrIHdoZXRoZXIgd2UgaGF2ZSBhIG1vdGlvbiB2YWx1ZSBmb3IgdGhpcyBrZXlcbiAgICAgKi9cbiAgICBoYXNWYWx1ZShrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzLmhhcyhrZXkpO1xuICAgIH1cbiAgICBnZXRWYWx1ZShrZXksIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZXMgJiYgdGhpcy5wcm9wcy52YWx1ZXNba2V5XSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMudmFsdWVzW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy52YWx1ZXMuZ2V0KGtleSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG1vdGlvblZhbHVlKGRlZmF1bHRWYWx1ZSwgeyBvd25lcjogdGhpcyB9KTtcbiAgICAgICAgICAgIHRoaXMuYWRkVmFsdWUoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJZiB3ZSdyZSB0cnlpbmcgdG8gYW5pbWF0ZSB0byBhIHByZXZpb3VzbHkgdW5lbmNvdW50ZXJlZCB2YWx1ZSxcbiAgICAgKiB3ZSBuZWVkIHRvIGNoZWNrIGZvciBpdCBpbiBvdXIgc3RhdGUgYW5kIGFzIGEgbGFzdCByZXNvcnQgcmVhZCBpdFxuICAgICAqIGRpcmVjdGx5IGZyb20gdGhlIGluc3RhbmNlICh3aGljaCBtaWdodCBoYXZlIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucykuXG4gICAgICovXG4gICAgcmVhZFZhbHVlKGtleSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiB0aGlzLmxhdGVzdFZhbHVlc1trZXldICE9PSB1bmRlZmluZWQgfHwgIXRoaXMuY3VycmVudFxuICAgICAgICAgICAgPyB0aGlzLmxhdGVzdFZhbHVlc1trZXldXG4gICAgICAgICAgICA6IChfYSA9IHRoaXMuZ2V0QmFzZVRhcmdldEZyb21Qcm9wcyh0aGlzLnByb3BzLCBrZXkpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLnJlYWRWYWx1ZUZyb21JbnN0YW5jZSh0aGlzLmN1cnJlbnQsIGtleSwgdGhpcy5vcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBiYXNlIHRhcmdldCB0byBsYXRlciBhbmltYXRlIGJhY2sgdG8uIFRoaXMgaXMgY3VycmVudGx5XG4gICAgICogb25seSBoeWRyYXRlZCBvbiBjcmVhdGlvbiBhbmQgd2hlbiB3ZSBmaXJzdCByZWFkIGEgdmFsdWUuXG4gICAgICovXG4gICAgc2V0QmFzZVRhcmdldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuYmFzZVRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpbmQgdGhlIGJhc2UgdGFyZ2V0IGZvciBhIHZhbHVlIHRoYXRzIGJlZW4gcmVtb3ZlZCBmcm9tIGFsbCBhbmltYXRpb25cbiAgICAgKiBwcm9wcy5cbiAgICAgKi9cbiAgICBnZXRCYXNlVGFyZ2V0KGtleSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IHsgaW5pdGlhbCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgdmFsdWVGcm9tSW5pdGlhbCA9IHR5cGVvZiBpbml0aWFsID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBpbml0aWFsID09PSBcIm9iamVjdFwiXG4gICAgICAgICAgICA/IChfYSA9IHJlc29sdmVWYXJpYW50RnJvbVByb3BzKHRoaXMucHJvcHMsIGluaXRpYWwpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Fba2V5XVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGlzIHZhbHVlIHN0aWxsIGV4aXN0cyBpbiB0aGUgY3VycmVudCBpbml0aWFsIHZhcmlhbnQsIHJlYWQgdGhhdC5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChpbml0aWFsICYmIHZhbHVlRnJvbUluaXRpYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlRnJvbUluaXRpYWw7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFsdGVybmF0aXZlbHksIGlmIHRoaXMgVmlzdWFsRWxlbWVudCBjb25maWcgaGFzIGRlZmluZWQgYSBnZXRCYXNlVGFyZ2V0XG4gICAgICAgICAqIHNvIHdlIGNhbiByZWFkIHRoZSB2YWx1ZSBmcm9tIGFuIGFsdGVybmF0aXZlIHNvdXJjZSwgdHJ5IHRoYXQuXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLmdldEJhc2VUYXJnZXRGcm9tUHJvcHModGhpcy5wcm9wcywga2V5KTtcbiAgICAgICAgaWYgKHRhcmdldCAhPT0gdW5kZWZpbmVkICYmICFpc01vdGlvblZhbHVlKHRhcmdldCkpXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhlIHZhbHVlIHdhcyBpbml0aWFsbHkgZGVmaW5lZCBvbiBpbml0aWFsLCBidXQgaXQgZG9lc24ndCBhbnkgbW9yZSxcbiAgICAgICAgICogcmV0dXJuIHVuZGVmaW5lZC4gT3RoZXJ3aXNlIHJldHVybiB0aGUgdmFsdWUgYXMgaW5pdGlhbGx5IHJlYWQgZnJvbSB0aGUgRE9NLlxuICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIHRoaXMuaW5pdGlhbFZhbHVlc1trZXldICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHZhbHVlRnJvbUluaXRpYWwgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgIDogdGhpcy5iYXNlVGFyZ2V0W2tleV07XG4gICAgfVxuICAgIG9uKGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCF0aGlzLmV2ZW50c1tldmVudE5hbWVdKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50c1tldmVudE5hbWVdID0gbmV3IFN1YnNjcmlwdGlvbk1hbmFnZXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5ldmVudHNbZXZlbnROYW1lXS5hZGQoY2FsbGJhY2spO1xuICAgIH1cbiAgICBub3RpZnkoZXZlbnROYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIGlmICh0aGlzLmV2ZW50c1tldmVudE5hbWVdKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50c1tldmVudE5hbWVdLm5vdGlmeSguLi5hcmdzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgVmlzdWFsRWxlbWVudCB9O1xuIiwiaW1wb3J0IHsgaXNCcm93c2VyIH0gZnJvbSAnLi4vaXMtYnJvd3Nlci5tanMnO1xuaW1wb3J0IHsgaGFzUmVkdWNlZE1vdGlvbkxpc3RlbmVyLCBwcmVmZXJzUmVkdWNlZE1vdGlvbiB9IGZyb20gJy4vc3RhdGUubWpzJztcblxuZnVuY3Rpb24gaW5pdFByZWZlcnNSZWR1Y2VkTW90aW9uKCkge1xuICAgIGhhc1JlZHVjZWRNb3Rpb25MaXN0ZW5lci5jdXJyZW50ID0gdHJ1ZTtcbiAgICBpZiAoIWlzQnJvd3NlcilcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYSkge1xuICAgICAgICBjb25zdCBtb3Rpb25NZWRpYVF1ZXJ5ID0gd2luZG93Lm1hdGNoTWVkaWEoXCIocHJlZmVycy1yZWR1Y2VkLW1vdGlvbilcIik7XG4gICAgICAgIGNvbnN0IHNldFJlZHVjZWRNb3Rpb25QcmVmZXJlbmNlcyA9ICgpID0+IChwcmVmZXJzUmVkdWNlZE1vdGlvbi5jdXJyZW50ID0gbW90aW9uTWVkaWFRdWVyeS5tYXRjaGVzKTtcbiAgICAgICAgbW90aW9uTWVkaWFRdWVyeS5hZGRMaXN0ZW5lcihzZXRSZWR1Y2VkTW90aW9uUHJlZmVyZW5jZXMpO1xuICAgICAgICBzZXRSZWR1Y2VkTW90aW9uUHJlZmVyZW5jZXMoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHByZWZlcnNSZWR1Y2VkTW90aW9uLmN1cnJlbnQgPSBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IGluaXRQcmVmZXJzUmVkdWNlZE1vdGlvbiB9O1xuIiwiaW1wb3J0IHsgaXNXaWxsQ2hhbmdlTW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi92YWx1ZS91c2Utd2lsbC1jaGFuZ2UvaXMubWpzJztcbmltcG9ydCB7IHdhcm5PbmNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvd2Fybi1vbmNlLm1qcyc7XG5pbXBvcnQgeyBtb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uL3ZhbHVlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vdmFsdWUvdXRpbHMvaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5cbmZ1bmN0aW9uIHVwZGF0ZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyhlbGVtZW50LCBuZXh0LCBwcmV2KSB7XG4gICAgY29uc3QgeyB3aWxsQ2hhbmdlIH0gPSBuZXh0O1xuICAgIGZvciAoY29uc3Qga2V5IGluIG5leHQpIHtcbiAgICAgICAgY29uc3QgbmV4dFZhbHVlID0gbmV4dFtrZXldO1xuICAgICAgICBjb25zdCBwcmV2VmFsdWUgPSBwcmV2W2tleV07XG4gICAgICAgIGlmIChpc01vdGlvblZhbHVlKG5leHRWYWx1ZSkpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhpcyBpcyBhIG1vdGlvbiB2YWx1ZSBmb3VuZCBpbiBwcm9wcyBvciBzdHlsZSwgd2Ugd2FudCB0byBhZGQgaXRcbiAgICAgICAgICAgICAqIHRvIG91ciB2aXN1YWwgZWxlbWVudCdzIG1vdGlvbiB2YWx1ZSBtYXAuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGVsZW1lbnQuYWRkVmFsdWUoa2V5LCBuZXh0VmFsdWUpO1xuICAgICAgICAgICAgaWYgKGlzV2lsbENoYW5nZU1vdGlvblZhbHVlKHdpbGxDaGFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgd2lsbENoYW5nZS5hZGQoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2hlY2sgdGhlIHZlcnNpb24gb2YgdGhlIGluY29taW5nIG1vdGlvbiB2YWx1ZSB3aXRoIHRoaXMgdmVyc2lvblxuICAgICAgICAgICAgICogYW5kIHdhcm4gYWdhaW5zdCBtaXNtYXRjaGVzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIikge1xuICAgICAgICAgICAgICAgIHdhcm5PbmNlKG5leHRWYWx1ZS52ZXJzaW9uID09PSBcIjEwLjE2LjRcIiwgYEF0dGVtcHRpbmcgdG8gbWl4IEZyYW1lciBNb3Rpb24gdmVyc2lvbnMgJHtuZXh0VmFsdWUudmVyc2lvbn0gd2l0aCAxMC4xNi40IG1heSBub3Qgd29yayBhcyBleHBlY3RlZC5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc01vdGlvblZhbHVlKHByZXZWYWx1ZSkpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgd2UncmUgc3dhcHBpbmcgZnJvbSBhIG1vdGlvbiB2YWx1ZSB0byBhIHN0YXRpYyB2YWx1ZSxcbiAgICAgICAgICAgICAqIGNyZWF0ZSBhIG5ldyBtb3Rpb24gdmFsdWUgZnJvbSB0aGF0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGVsZW1lbnQuYWRkVmFsdWUoa2V5LCBtb3Rpb25WYWx1ZShuZXh0VmFsdWUsIHsgb3duZXI6IGVsZW1lbnQgfSkpO1xuICAgICAgICAgICAgaWYgKGlzV2lsbENoYW5nZU1vdGlvblZhbHVlKHdpbGxDaGFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgd2lsbENoYW5nZS5yZW1vdmUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcmV2VmFsdWUgIT09IG5leHRWYWx1ZSkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIGlzIGEgZmxhdCB2YWx1ZSB0aGF0IGhhcyBjaGFuZ2VkLCB1cGRhdGUgdGhlIG1vdGlvbiB2YWx1ZVxuICAgICAgICAgICAgICogb3IgY3JlYXRlIG9uZSBpZiBpdCBkb2Vzbid0IGV4aXN0LiBXZSBvbmx5IHdhbnQgdG8gZG8gdGhpcyBpZiB3ZSdyZVxuICAgICAgICAgICAgICogbm90IGhhbmRsaW5nIHRoZSB2YWx1ZSB3aXRoIG91ciBhbmltYXRpb24gc3RhdGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChlbGVtZW50Lmhhc1ZhbHVlKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZ1ZhbHVlID0gZWxlbWVudC5nZXRWYWx1ZShrZXkpO1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IE9ubHkgdXBkYXRlIHZhbHVlcyB0aGF0IGFyZW4ndCBiZWluZyBhbmltYXRlZCBvciBldmVuIGxvb2tlZCBhdFxuICAgICAgICAgICAgICAgICFleGlzdGluZ1ZhbHVlLmhhc0FuaW1hdGVkICYmIGV4aXN0aW5nVmFsdWUuc2V0KG5leHRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXRlc3RWYWx1ZSA9IGVsZW1lbnQuZ2V0U3RhdGljVmFsdWUoa2V5KTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFkZFZhbHVlKGtleSwgbW90aW9uVmFsdWUobGF0ZXN0VmFsdWUgIT09IHVuZGVmaW5lZCA/IGxhdGVzdFZhbHVlIDogbmV4dFZhbHVlLCB7IG93bmVyOiBlbGVtZW50IH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBIYW5kbGUgcmVtb3ZlZCB2YWx1ZXNcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwcmV2KSB7XG4gICAgICAgIGlmIChuZXh0W2tleV0gPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlVmFsdWUoa2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHQ7XG59XG5cbmV4cG9ydCB7IHVwZGF0ZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyB9O1xuIiwiaW1wb3J0IHsgZ2V0T3JpZ2luLCBjaGVja1RhcmdldEZvck5ld1ZhbHVlcyB9IGZyb20gJy4uL3V0aWxzL3NldHRlcnMubWpzJztcbmltcG9ydCB7IHBhcnNlRG9tVmFyaWFudCB9IGZyb20gJy4vdXRpbHMvcGFyc2UtZG9tLXZhcmlhbnQubWpzJztcbmltcG9ydCB7IFZpc3VhbEVsZW1lbnQgfSBmcm9tICcuLi9WaXN1YWxFbGVtZW50Lm1qcyc7XG5cbmNsYXNzIERPTVZpc3VhbEVsZW1lbnQgZXh0ZW5kcyBWaXN1YWxFbGVtZW50IHtcbiAgICBzb3J0SW5zdGFuY2VOb2RlUG9zaXRpb24oYSwgYikge1xuICAgICAgICAvKipcbiAgICAgICAgICogY29tcGFyZURvY3VtZW50UG9zaXRpb24gcmV0dXJucyBhIGJpdG1hc2ssIGJ5IHVzaW5nIHRoZSBiaXR3aXNlICZcbiAgICAgICAgICogd2UncmUgcmV0dXJuaW5nIHRydWUgaWYgMiBpbiB0aGF0IGJpdG1hc2sgaXMgc2V0IHRvIHRydWUuIDIgaXMgc2V0XG4gICAgICAgICAqIHRvIHRydWUgaWYgYiBwcmVjZWVkcyBhLlxuICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikgJiAyID8gMSA6IC0xO1xuICAgIH1cbiAgICBnZXRCYXNlVGFyZ2V0RnJvbVByb3BzKHByb3BzLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLnN0eWxlID8gcHJvcHMuc3R5bGVba2V5XSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmVtb3ZlVmFsdWVGcm9tUmVuZGVyU3RhdGUoa2V5LCB7IHZhcnMsIHN0eWxlIH0pIHtcbiAgICAgICAgZGVsZXRlIHZhcnNba2V5XTtcbiAgICAgICAgZGVsZXRlIHN0eWxlW2tleV07XG4gICAgfVxuICAgIG1ha2VUYXJnZXRBbmltYXRhYmxlRnJvbUluc3RhbmNlKHsgdHJhbnNpdGlvbiwgdHJhbnNpdGlvbkVuZCwgLi4udGFyZ2V0IH0sIHsgdHJhbnNmb3JtVmFsdWVzIH0sIGlzTW91bnRlZCkge1xuICAgICAgICBsZXQgb3JpZ2luID0gZ2V0T3JpZ2luKHRhcmdldCwgdHJhbnNpdGlvbiB8fCB7fSwgdGhpcyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBGcmFtZXIgaGFzIHByb3ZpZGVkIGEgZnVuY3Rpb24gdG8gY29udmVydCBgQ29sb3JgIGV0YyB2YWx1ZSB0eXBlcywgY29udmVydCB0aGVtXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodHJhbnNmb3JtVmFsdWVzKSB7XG4gICAgICAgICAgICBpZiAodHJhbnNpdGlvbkVuZClcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uRW5kID0gdHJhbnNmb3JtVmFsdWVzKHRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgICAgaWYgKHRhcmdldClcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSB0cmFuc2Zvcm1WYWx1ZXModGFyZ2V0KTtcbiAgICAgICAgICAgIGlmIChvcmlnaW4pXG4gICAgICAgICAgICAgICAgb3JpZ2luID0gdHJhbnNmb3JtVmFsdWVzKG9yaWdpbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTW91bnRlZCkge1xuICAgICAgICAgICAgY2hlY2tUYXJnZXRGb3JOZXdWYWx1ZXModGhpcywgdGFyZ2V0LCBvcmlnaW4pO1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gcGFyc2VEb21WYXJpYW50KHRoaXMsIHRhcmdldCwgb3JpZ2luLCB0cmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICAgIHRyYW5zaXRpb25FbmQgPSBwYXJzZWQudHJhbnNpdGlvbkVuZDtcbiAgICAgICAgICAgIHRhcmdldCA9IHBhcnNlZC50YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb24sXG4gICAgICAgICAgICB0cmFuc2l0aW9uRW5kLFxuICAgICAgICAgICAgLi4udGFyZ2V0LFxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IHsgRE9NVmlzdWFsRWxlbWVudCB9O1xuIiwiaW1wb3J0IHsgYnVpbGRIVE1MU3R5bGVzIH0gZnJvbSAnLi91dGlscy9idWlsZC1zdHlsZXMubWpzJztcbmltcG9ydCB7IGlzQ1NTVmFyaWFibGVOYW1lIH0gZnJvbSAnLi4vZG9tL3V0aWxzL2lzLWNzcy12YXJpYWJsZS5tanMnO1xuaW1wb3J0IHsgdHJhbnNmb3JtUHJvcHMgfSBmcm9tICcuL3V0aWxzL3RyYW5zZm9ybS5tanMnO1xuaW1wb3J0IHsgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzIH0gZnJvbSAnLi91dGlscy9zY3JhcGUtbW90aW9uLXZhbHVlcy5tanMnO1xuaW1wb3J0IHsgcmVuZGVySFRNTCB9IGZyb20gJy4vdXRpbHMvcmVuZGVyLm1qcyc7XG5pbXBvcnQgeyBnZXREZWZhdWx0VmFsdWVUeXBlIH0gZnJvbSAnLi4vZG9tL3ZhbHVlLXR5cGVzL2RlZmF1bHRzLm1qcyc7XG5pbXBvcnQgeyBtZWFzdXJlVmlld3BvcnRCb3ggfSBmcm9tICcuLi8uLi9wcm9qZWN0aW9uL3V0aWxzL21lYXN1cmUubWpzJztcbmltcG9ydCB7IERPTVZpc3VhbEVsZW1lbnQgfSBmcm9tICcuLi9kb20vRE9NVmlzdWFsRWxlbWVudC5tanMnO1xuaW1wb3J0IHsgaXNNb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uL3ZhbHVlL3V0aWxzL2lzLW1vdGlvbi12YWx1ZS5tanMnO1xuXG5mdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG59XG5jbGFzcyBIVE1MVmlzdWFsRWxlbWVudCBleHRlbmRzIERPTVZpc3VhbEVsZW1lbnQge1xuICAgIHJlYWRWYWx1ZUZyb21JbnN0YW5jZShpbnN0YW5jZSwga2V5KSB7XG4gICAgICAgIGlmICh0cmFuc2Zvcm1Qcm9wcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdFR5cGUgPSBnZXREZWZhdWx0VmFsdWVUeXBlKGtleSk7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFR5cGUgPyBkZWZhdWx0VHlwZS5kZWZhdWx0IHx8IDAgOiAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgY29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoaW5zdGFuY2UpO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSAoaXNDU1NWYXJpYWJsZU5hbWUoa2V5KVxuICAgICAgICAgICAgICAgID8gY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKGtleSlcbiAgICAgICAgICAgICAgICA6IGNvbXB1dGVkU3R5bGVba2V5XSkgfHwgMDtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS50cmltKCkgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtZWFzdXJlSW5zdGFuY2VWaWV3cG9ydEJveChpbnN0YW5jZSwgeyB0cmFuc2Zvcm1QYWdlUG9pbnQgfSkge1xuICAgICAgICByZXR1cm4gbWVhc3VyZVZpZXdwb3J0Qm94KGluc3RhbmNlLCB0cmFuc2Zvcm1QYWdlUG9pbnQpO1xuICAgIH1cbiAgICBidWlsZChyZW5kZXJTdGF0ZSwgbGF0ZXN0VmFsdWVzLCBvcHRpb25zLCBwcm9wcykge1xuICAgICAgICBidWlsZEhUTUxTdHlsZXMocmVuZGVyU3RhdGUsIGxhdGVzdFZhbHVlcywgb3B0aW9ucywgcHJvcHMudHJhbnNmb3JtVGVtcGxhdGUpO1xuICAgIH1cbiAgICBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMocHJvcHMsIHByZXZQcm9wcykge1xuICAgICAgICByZXR1cm4gc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzKHByb3BzLCBwcmV2UHJvcHMpO1xuICAgIH1cbiAgICBoYW5kbGVDaGlsZE1vdGlvblZhbHVlKCkge1xuICAgICAgICBpZiAodGhpcy5jaGlsZFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5jaGlsZFN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuY2hpbGRTdWJzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgaWYgKGlzTW90aW9uVmFsdWUoY2hpbGRyZW4pKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkU3Vic2NyaXB0aW9uID0gY2hpbGRyZW4ub24oXCJjaGFuZ2VcIiwgKGxhdGVzdCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnQpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC50ZXh0Q29udGVudCA9IGAke2xhdGVzdH1gO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVuZGVySW5zdGFuY2UoaW5zdGFuY2UsIHJlbmRlclN0YXRlLCBzdHlsZVByb3AsIHByb2plY3Rpb24pIHtcbiAgICAgICAgcmVuZGVySFRNTChpbnN0YW5jZSwgcmVuZGVyU3RhdGUsIHN0eWxlUHJvcCwgcHJvamVjdGlvbik7XG4gICAgfVxufVxuXG5leHBvcnQgeyBIVE1MVmlzdWFsRWxlbWVudCwgZ2V0Q29tcHV0ZWRTdHlsZSB9O1xuIiwiaW1wb3J0IHsgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzIH0gZnJvbSAnLi91dGlscy9zY3JhcGUtbW90aW9uLXZhbHVlcy5tanMnO1xuaW1wb3J0IHsgRE9NVmlzdWFsRWxlbWVudCB9IGZyb20gJy4uL2RvbS9ET01WaXN1YWxFbGVtZW50Lm1qcyc7XG5pbXBvcnQgeyBidWlsZFNWR0F0dHJzIH0gZnJvbSAnLi91dGlscy9idWlsZC1hdHRycy5tanMnO1xuaW1wb3J0IHsgY2FtZWxUb0Rhc2ggfSBmcm9tICcuLi9kb20vdXRpbHMvY2FtZWwtdG8tZGFzaC5tanMnO1xuaW1wb3J0IHsgY2FtZWxDYXNlQXR0cmlidXRlcyB9IGZyb20gJy4vdXRpbHMvY2FtZWwtY2FzZS1hdHRycy5tanMnO1xuaW1wb3J0IHsgdHJhbnNmb3JtUHJvcHMgfSBmcm9tICcuLi9odG1sL3V0aWxzL3RyYW5zZm9ybS5tanMnO1xuaW1wb3J0IHsgcmVuZGVyU1ZHIH0gZnJvbSAnLi91dGlscy9yZW5kZXIubWpzJztcbmltcG9ydCB7IGdldERlZmF1bHRWYWx1ZVR5cGUgfSBmcm9tICcuLi9kb20vdmFsdWUtdHlwZXMvZGVmYXVsdHMubWpzJztcbmltcG9ydCB7IGNyZWF0ZUJveCB9IGZyb20gJy4uLy4uL3Byb2plY3Rpb24vZ2VvbWV0cnkvbW9kZWxzLm1qcyc7XG5pbXBvcnQgeyBpc1NWR1RhZyB9IGZyb20gJy4vdXRpbHMvaXMtc3ZnLXRhZy5tanMnO1xuXG5jbGFzcyBTVkdWaXN1YWxFbGVtZW50IGV4dGVuZHMgRE9NVmlzdWFsRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuaXNTVkdUYWcgPSBmYWxzZTtcbiAgICB9XG4gICAgZ2V0QmFzZVRhcmdldEZyb21Qcm9wcyhwcm9wcywga2V5KSB7XG4gICAgICAgIHJldHVybiBwcm9wc1trZXldO1xuICAgIH1cbiAgICByZWFkVmFsdWVGcm9tSW5zdGFuY2UoaW5zdGFuY2UsIGtleSkge1xuICAgICAgICBpZiAodHJhbnNmb3JtUHJvcHMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRUeXBlID0gZ2V0RGVmYXVsdFZhbHVlVHlwZShrZXkpO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRUeXBlID8gZGVmYXVsdFR5cGUuZGVmYXVsdCB8fCAwIDogMDtcbiAgICAgICAgfVxuICAgICAgICBrZXkgPSAhY2FtZWxDYXNlQXR0cmlidXRlcy5oYXMoa2V5KSA/IGNhbWVsVG9EYXNoKGtleSkgOiBrZXk7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoa2V5KTtcbiAgICB9XG4gICAgbWVhc3VyZUluc3RhbmNlVmlld3BvcnRCb3goKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCb3goKTtcbiAgICB9XG4gICAgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzKHByb3BzLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyhwcm9wcywgcHJldlByb3BzKTtcbiAgICB9XG4gICAgYnVpbGQocmVuZGVyU3RhdGUsIGxhdGVzdFZhbHVlcywgb3B0aW9ucywgcHJvcHMpIHtcbiAgICAgICAgYnVpbGRTVkdBdHRycyhyZW5kZXJTdGF0ZSwgbGF0ZXN0VmFsdWVzLCBvcHRpb25zLCB0aGlzLmlzU1ZHVGFnLCBwcm9wcy50cmFuc2Zvcm1UZW1wbGF0ZSk7XG4gICAgfVxuICAgIHJlbmRlckluc3RhbmNlKGluc3RhbmNlLCByZW5kZXJTdGF0ZSwgc3R5bGVQcm9wLCBwcm9qZWN0aW9uKSB7XG4gICAgICAgIHJlbmRlclNWRyhpbnN0YW5jZSwgcmVuZGVyU3RhdGUsIHN0eWxlUHJvcCwgcHJvamVjdGlvbik7XG4gICAgfVxuICAgIG1vdW50KGluc3RhbmNlKSB7XG4gICAgICAgIHRoaXMuaXNTVkdUYWcgPSBpc1NWR1RhZyhpbnN0YW5jZS50YWdOYW1lKTtcbiAgICAgICAgc3VwZXIubW91bnQoaW5zdGFuY2UpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgU1ZHVmlzdWFsRWxlbWVudCB9O1xuIiwiaW1wb3J0IHsgSFRNTFZpc3VhbEVsZW1lbnQgfSBmcm9tICcuLi9odG1sL0hUTUxWaXN1YWxFbGVtZW50Lm1qcyc7XG5pbXBvcnQgeyBTVkdWaXN1YWxFbGVtZW50IH0gZnJvbSAnLi4vc3ZnL1NWR1Zpc3VhbEVsZW1lbnQubWpzJztcbmltcG9ydCB7IGlzU1ZHQ29tcG9uZW50IH0gZnJvbSAnLi91dGlscy9pcy1zdmctY29tcG9uZW50Lm1qcyc7XG5cbmNvbnN0IGNyZWF0ZURvbVZpc3VhbEVsZW1lbnQgPSAoQ29tcG9uZW50LCBvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIGlzU1ZHQ29tcG9uZW50KENvbXBvbmVudClcbiAgICAgICAgPyBuZXcgU1ZHVmlzdWFsRWxlbWVudChvcHRpb25zLCB7IGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uOiBmYWxzZSB9KVxuICAgICAgICA6IG5ldyBIVE1MVmlzdWFsRWxlbWVudChvcHRpb25zLCB7IGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uOiB0cnVlIH0pO1xufTtcblxuZXhwb3J0IHsgY3JlYXRlRG9tVmlzdWFsRWxlbWVudCB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlTW90aW9uQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbW90aW9uL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVNb3Rpb25Qcm94eSB9IGZyb20gJy4vbW90aW9uLXByb3h5Lm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVEb21Nb3Rpb25Db25maWcgfSBmcm9tICcuL3V0aWxzL2NyZWF0ZS1jb25maWcubWpzJztcbmltcG9ydCB7IGdlc3R1cmVBbmltYXRpb25zIH0gZnJvbSAnLi4vLi4vbW90aW9uL2ZlYXR1cmVzL2dlc3R1cmVzLm1qcyc7XG5pbXBvcnQgeyBhbmltYXRpb25zIH0gZnJvbSAnLi4vLi4vbW90aW9uL2ZlYXR1cmVzL2FuaW1hdGlvbnMubWpzJztcbmltcG9ydCB7IGRyYWcgfSBmcm9tICcuLi8uLi9tb3Rpb24vZmVhdHVyZXMvZHJhZy5tanMnO1xuaW1wb3J0IHsgY3JlYXRlRG9tVmlzdWFsRWxlbWVudCB9IGZyb20gJy4vY3JlYXRlLXZpc3VhbC1lbGVtZW50Lm1qcyc7XG5pbXBvcnQgeyBsYXlvdXQgfSBmcm9tICcuLi8uLi9tb3Rpb24vZmVhdHVyZXMvbGF5b3V0Lm1qcyc7XG5cbmNvbnN0IHByZWxvYWRlZEZlYXR1cmVzID0ge1xuICAgIC4uLmFuaW1hdGlvbnMsXG4gICAgLi4uZ2VzdHVyZUFuaW1hdGlvbnMsXG4gICAgLi4uZHJhZyxcbiAgICAuLi5sYXlvdXQsXG59O1xuLyoqXG4gKiBIVE1MICYgU1ZHIGNvbXBvbmVudHMsIG9wdGltaXNlZCBmb3IgdXNlIHdpdGggZ2VzdHVyZXMgYW5kIGFuaW1hdGlvbi4gVGhlc2UgY2FuIGJlIHVzZWQgYXNcbiAqIGRyb3AtaW4gcmVwbGFjZW1lbnRzIGZvciBhbnkgSFRNTCAmIFNWRyBjb21wb25lbnQsIGFsbCBDU1MgJiBTVkcgcHJvcGVydGllcyBhcmUgc3VwcG9ydGVkLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuY29uc3QgbW90aW9uID0gLypAX19QVVJFX18qLyBjcmVhdGVNb3Rpb25Qcm94eSgoQ29tcG9uZW50LCBjb25maWcpID0+IGNyZWF0ZURvbU1vdGlvbkNvbmZpZyhDb21wb25lbnQsIGNvbmZpZywgcHJlbG9hZGVkRmVhdHVyZXMsIGNyZWF0ZURvbVZpc3VhbEVsZW1lbnQpKTtcbi8qKlxuICogQ3JlYXRlIGEgRE9NIGBtb3Rpb25gIGNvbXBvbmVudCB3aXRoIHRoZSBwcm92aWRlZCBzdHJpbmcuIFRoaXMgaXMgcHJpbWFyaWx5IGludGVuZGVkXG4gKiBhcyBhIGZ1bGwgYWx0ZXJuYXRpdmUgdG8gYG1vdGlvbmAgZm9yIGNvbnN1bWVycyB3aG8gaGF2ZSB0byBzdXBwb3J0IGVudmlyb25tZW50cyB0aGF0IGRvbid0XG4gKiBzdXBwb3J0IGBQcm94eWAuXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogaW1wb3J0IHsgY3JlYXRlRG9tTW90aW9uQ29tcG9uZW50IH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIlxuICpcbiAqIGNvbnN0IG1vdGlvbiA9IHtcbiAqICAgZGl2OiBjcmVhdGVEb21Nb3Rpb25Db21wb25lbnQoJ2RpdicpXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURvbU1vdGlvbkNvbXBvbmVudChrZXkpIHtcbiAgICByZXR1cm4gY3JlYXRlTW90aW9uQ29tcG9uZW50KGNyZWF0ZURvbU1vdGlvbkNvbmZpZyhrZXksIHsgZm9yd2FyZE1vdGlvblByb3BzOiBmYWxzZSB9LCBwcmVsb2FkZWRGZWF0dXJlcywgY3JlYXRlRG9tVmlzdWFsRWxlbWVudCkpO1xufVxuXG5leHBvcnQgeyBjcmVhdGVEb21Nb3Rpb25Db21wb25lbnQsIG1vdGlvbiB9O1xuIiwiaW1wb3J0IHsgSFRNTFByb2plY3Rpb25Ob2RlIH0gZnJvbSAnLi4vLi4vcHJvamVjdGlvbi9ub2RlL0hUTUxQcm9qZWN0aW9uTm9kZS5tanMnO1xuaW1wb3J0IHsgTWVhc3VyZUxheW91dCB9IGZyb20gJy4vbGF5b3V0L01lYXN1cmVMYXlvdXQubWpzJztcblxuY29uc3QgbGF5b3V0ID0ge1xuICAgIGxheW91dDoge1xuICAgICAgICBQcm9qZWN0aW9uTm9kZTogSFRNTFByb2plY3Rpb25Ob2RlLFxuICAgICAgICBNZWFzdXJlTGF5b3V0LFxuICAgIH0sXG59O1xuXG5leHBvcnQgeyBsYXlvdXQgfTtcbiIsImltcG9ydCB7IGlzU1ZHQ29tcG9uZW50IH0gZnJvbSAnLi9pcy1zdmctY29tcG9uZW50Lm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVVc2VSZW5kZXIgfSBmcm9tICcuLi91c2UtcmVuZGVyLm1qcyc7XG5pbXBvcnQgeyBzdmdNb3Rpb25Db25maWcgfSBmcm9tICcuLi8uLi9zdmcvY29uZmlnLW1vdGlvbi5tanMnO1xuaW1wb3J0IHsgaHRtbE1vdGlvbkNvbmZpZyB9IGZyb20gJy4uLy4uL2h0bWwvY29uZmlnLW1vdGlvbi5tanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVEb21Nb3Rpb25Db25maWcoQ29tcG9uZW50LCB7IGZvcndhcmRNb3Rpb25Qcm9wcyA9IGZhbHNlIH0sIHByZWxvYWRlZEZlYXR1cmVzLCBjcmVhdGVWaXN1YWxFbGVtZW50KSB7XG4gICAgY29uc3QgYmFzZUNvbmZpZyA9IGlzU1ZHQ29tcG9uZW50KENvbXBvbmVudClcbiAgICAgICAgPyBzdmdNb3Rpb25Db25maWdcbiAgICAgICAgOiBodG1sTW90aW9uQ29uZmlnO1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLmJhc2VDb25maWcsXG4gICAgICAgIHByZWxvYWRlZEZlYXR1cmVzLFxuICAgICAgICB1c2VSZW5kZXI6IGNyZWF0ZVVzZVJlbmRlcihmb3J3YXJkTW90aW9uUHJvcHMpLFxuICAgICAgICBjcmVhdGVWaXN1YWxFbGVtZW50LFxuICAgICAgICBDb21wb25lbnQsXG4gICAgfTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlRG9tTW90aW9uQ29uZmlnIH07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgbW90aW9uIH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIlxyXG5cclxuXHJcbmNvbnN0IFRham1lciA9ICgpID0+IHtcclxuXHJcbiAgICBjb25zdCBbaXNPcGVuLCBzZXRPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKVxyXG4gICAgY29uc3QgW2lzT3BlbjEsIHNldE9wZW4xXSA9IHVzZVN0YXRlKGZhbHNlKVxyXG4gICAgY29uc3QgW2lzT3BlbjIsIHNldE9wZW4yXSA9IHVzZVN0YXRlKGZhbHNlKVxyXG4gICAgY29uc3QgW2lzT3BlbjMsIHNldE9wZW4zXSA9IHVzZVN0YXRlKGZhbHNlKVxyXG4gICAgY29uc3QgW2lzT3BlbjQsIHNldE9wZW40XSA9IHVzZVN0YXRlKGZhbHNlKVxyXG4gICAgY29uc3QgW2lzT3BlbjUsIHNldE9wZW41XSA9IHVzZVN0YXRlKGZhbHNlKVxyXG4gICAgY29uc3QgW2lzT3BlbjYsIHNldE9wZW42XSA9IHVzZVN0YXRlKGZhbHNlKVxyXG4gICAgY29uc3QgW2lzT3BlbjcsIHNldE9wZW43XSA9IHVzZVN0YXRlKGZhbHNlKVxyXG4gICAgY29uc3QgW2lzT3BlbjgsIHNldE9wZW44XSA9IHVzZVN0YXRlKGZhbHNlKVxyXG4gICAgY29uc3QgW2lzT3BlbjksIHNldE9wZW45XSA9IHVzZVN0YXRlKGZhbHNlKVxyXG5cclxuXHJcbiAgICBjb25zdCBbaW5wdXRWYWx1ZTEsIHNldElucHV0VmFsdWUxXSA9IHVzZVN0YXRlKDApO1xyXG4gICAgY29uc3QgW2lucHV0VmFsdWUyLCBzZXRJbnB1dFZhbHVlMl0gPSB1c2VTdGF0ZSgwKTtcclxuXHJcblxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVmFsdWUxID0gKGUpID0+IHtcclxuICAgICAgICBzZXRJbnB1dFZhbHVlMShlLnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZVZhbHVlMiA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXRWYWx1ZTIoZS50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sb3JCb3hcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bW90aW9uLmRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYm94XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheW91dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgaGVpZ2h0OiBpc09wZW4gPyBcIjMxNXB4XCIgOiBcIjBweFwiIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFzZTogXCJsaW5lYXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBlYXQ6IEluZmluaXR5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgb25DbGljaz17KCkgPT4gc2V0T3BlbighaXNPcGVuKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJveEJhdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID41IHNlazwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPG1vdGlvbi5kaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJveDFcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5b3V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBoZWlnaHQ6IGlzT3BlbjEgPyBcIjMxNXB4XCIgOiBcIjBweFwiIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFzZTogXCJsaW5lYXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMTAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwZWF0OiBJbmZpbml0eVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXsoKSA9PiBzZXRPcGVuMSghaXNPcGVuMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJib3hCYXRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA+MTAgc2VrPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPG1vdGlvbi5kaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJveDJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5b3V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBoZWlnaHQ6IGlzT3BlbjIgPyBcIjMxNXB4XCIgOiBcIjBweFwiIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFzZTogXCJsaW5lYXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBlYXQ6IEluZmluaXR5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAyMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXsoKSA9PiBzZXRPcGVuMighaXNPcGVuMil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJib3hCYXRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA+MjAgc2VrPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPG1vdGlvbi5kaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJveDNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5b3V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBoZWlnaHQ6IGlzT3BlbjMgPyBcIjMxNXB4XCIgOiBcIjBweFwiIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFzZTogXCJsaW5lYXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogaW5wdXRWYWx1ZTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwZWF0OiBJbmZpbml0eSxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IG9uQ2xpY2s9eygpID0+IHNldE9wZW4zKCFpc09wZW4zKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJveEJhdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID57aW5wdXRWYWx1ZTF9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPG1vdGlvbi5kaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJveDRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5b3V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBoZWlnaHQ6IGlzT3BlbjQgPyBcIjMxNXB4XCIgOiBcIjBweFwiIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFzZTogXCJsaW5lYXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogaW5wdXRWYWx1ZTIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwZWF0OiBJbmZpbml0eSxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IG9uQ2xpY2s9eygpID0+IHNldE9wZW40KCFpc09wZW40KX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJveEJhdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID57aW5wdXRWYWx1ZTJ9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dFRleHRcIiA+IFVwacWhaSBicm9qIHNla3VuZGkgPHNwYW4gLz5cclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIGNsYXNzTmFtZT1cImlucHV0UGxhY2VcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwiYnJvalwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMX0gLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dFRleHRcIiA+IFVwacWhaSBicm9qIHNla3VuZGkgPHNwYW4gLz5cclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIGNsYXNzTmFtZT1cImlucHV0UGxhY2VcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwiYnJvalwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlMn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVZhbHVlMn0gLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IFtzZXRPcGVuNCghaXNPcGVuNCksIHNldE9wZW4zKCFpc09wZW4zKSwgc2V0T3BlbjIoIWlzT3BlbjIpLFxyXG4gICAgICAgICAgICAgICAgICAgIHNldE9wZW4xKCFpc09wZW4xKSwgc2V0T3BlbighaXNPcGVuKV19XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYm94QmF0QWxsXCJcclxuICAgICAgICAgICAgICAgID5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3ZlPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8aHI+PC9ocj5cclxuICAgICAgICAgICAgICAgIDxoMT5DZW8gZGFuIHUgcHJvbGF6dSA8L2gxPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xvckJveFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxtb3Rpb24uZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJib3g0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheW91dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgaGVpZ2h0OiBpc09wZW41ID8gXCIzMDhweFwiIDogXCIwcHhcIiB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbj17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhc2U6IFwiZWFzZUluT3V0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzcHJpbmdcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBlYXQ6IEluZmluaXR5LFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEgc2VrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxtb3Rpb24uZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJib3gzXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheW91dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgaGVpZ2h0OiBpc09wZW42ID8gXCIzMTVweFwiIDogXCIwcHhcIiB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbj17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhc2U6IFwibGluZWFyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDE1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhdDogSW5maW5pdHksXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMTUgc2VrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxtb3Rpb24uZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJib3gyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheW91dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgaGVpZ2h0OiBpc09wZW43ID8gXCIzMTVweFwiIDogXCIwcHhcIiB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbj17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhc2U6IFwibGluZWFyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDYwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhdDogSW5maW5pdHksXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMSBtaW51dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bW90aW9uLmRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYm94MVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXlvdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IGhlaWdodDogaXNPcGVuOCA/IFwiMzE1cHhcIiA6IFwiMHB4XCIgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYXNlOiBcImxpbmVhclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAzNjAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhdDogSW5maW5pdHksXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMSBzYXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPG1vdGlvbi5kaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJveFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXlvdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IGhlaWdodDogaXNPcGVuOSA/IFwiMzE1cHhcIiA6IFwiMHB4XCIgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYXNlOiBcImxpbmVhclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA4NjQwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBlYXQ6IEluZmluaXR5LFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEgZGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IFtzZXRPcGVuNSghaXNPcGVuNSksIHNldE9wZW42KCFpc09wZW42KSwgc2V0T3BlbjcoIWlzT3BlbjcpLFxyXG4gICAgICAgICAgICAgICAgICAgIHNldE9wZW44KCFpc09wZW44KSwgc2V0T3BlbjkoIWlzT3BlbjkpXX1cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJib3hCYXRBbGxcIlxyXG4gICAgICAgICAgICAgICAgPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICBQT0tSRU5JIERBTjwvZGl2PlxyXG5cclxuXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuXHJcbiAgICAgICAgPC8+XHJcbiAgICApXHJcblxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IFRham1lcjsiLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IFJvdXRlcywgUm91dGUsIE5hdkxpbmssIEhhc2hSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuXHJcblxyXG5pbXBvcnQgS2Fsb3JpamUgZnJvbSBcIi4vS2Fsb3JpamVcIjtcclxuaW1wb3J0IE9kbm9zaSBmcm9tIFwiLi9PZG5vc2lcIjtcclxuaW1wb3J0IFRham1lciBmcm9tIFwiLi9UYWptZXJcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE5hdmlnYXRpb24oKSB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxIYXNoUm91dGVyIGJhc2VuYW1lPVwiL1wiPlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5hdkNvbnRhaW5lclwiPlxyXG5cclxuXHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgIDxOYXZMaW5rIHRvPScvJyBjbGFzc05hbWU9XCJsaW5rZXJcIlxyXG4gICAgICAgICAgICBzdHlsZT17KHsgaXNBY3RpdmUgfSkgPT4ge1xyXG4gICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBjb2xvcjogaXNBY3RpdmUgPyBcIndoaXRlXCIgOiBcInJnYig4MywgODUsIDgzKVwiLFxyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH19XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIE9ETk9TSVxyXG4gICAgICAgICAgPC9OYXZMaW5rPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICA8TmF2TGluayB0bz1cImthbG9yaWplXCIgY2xhc3NOYW1lPVwibGlua2VyXCJcclxuICAgICAgICAgICAgc3R5bGU9eyh7IGlzQWN0aXZlIH0pID0+IHtcclxuICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgY29sb3I6IGlzQWN0aXZlID8gXCJ3aGl0ZVwiIDogXCJyZ2IoODMsIDg1LCA4MylcIixcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9fVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICBLQUxPUklKRTwvTmF2TGluaz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgPE5hdkxpbmsgdG89XCJ0YWptZXJcIiBjbGFzc05hbWU9XCJsaW5rZXJcIlxyXG4gICAgICAgICAgICBzdHlsZT17KHsgaXNBY3RpdmUgfSkgPT4ge1xyXG4gICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBjb2xvcjogaXNBY3RpdmUgPyBcIndoaXRlXCIgOiBcInJnYig4MywgODUsIDgzKVwiLFxyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH19XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIFRBSk1FUlxyXG4gICAgICAgICAgPC9OYXZMaW5rPlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxSb3V0ZXM+XHJcbiAgICAgICAgPFJvdXRlIHBhdGg9XCIvXCIgZWxlbWVudD17PE9kbm9zaSAvPn0gLz5cclxuICAgICAgICA8Um91dGUgcGF0aD1cIi9rYWxvcmlqZVwiIGVsZW1lbnQ9ezxLYWxvcmlqZSAvPn0gLz5cclxuICAgICAgICA8Um91dGUgcGF0aD1cIi90YWptZXJcIiBlbGVtZW50PXs8VGFqbWVyIC8+fSAvPlxyXG4gICAgICA8L1JvdXRlcz5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJob21lXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbWdcIj48L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcblxyXG4gICAgPC9IYXNoUm91dGVyPlxyXG4gIClcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QsIHt1c2VTdGF0ZX0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBOYXZpZ2F0aW9uIGZyb20gXCIuL2NvbXBvbmVudHMvTmF2aWdhdGlvblwiO1xyXG5cclxuXHJcblxyXG5cclxuY29uc3QgQXBwID0gKCkgPT4ge1xyXG4gICAgY29uc3QgW3NlYXJjaFN0cmluZywgc2V0U2VhcmNoU3RyaW5nXSA9IHVzZVN0YXRlKCdFbnRlciBzZWFyY2ggY3JpdGVyaXVtIScpO1xyXG4gICByZXR1cm4gKFxyXG4gXHJcbiAgICAgICAgPE5hdmlnYXRpb24gLz5cclxuICBcclxuICAgICAgICApO1xyXG5cclxufVxyXG5leHBvcnQgZGVmYXVsdCBBcHA7XHJcblxyXG5cclxuICAgIFxyXG4gICAgIFxyXG5cclxuXHJcbiIsIlxyXG5cclxuXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbi8vIGltcG9ydCB7IGNyZWF0ZVJvb3QgfSBmcm9tICdyZWFjdC1kb20vY2xpZW50JztcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb20vY2xpZW50XCI7XHJcbmltcG9ydCBcIi4vc2Nzcy9tYWluLnNjc3NcIjtcclxuXHJcblxyXG5pbXBvcnQgQXBwIGZyb20gXCIuL0FwcFwiO1xyXG5cclxudmFyIHJvb3QgPSBSZWFjdERPTS5jcmVhdGVSb290KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKSk7XHJcbnJvb3QucmVuZGVyKDxBcHBcclxuICAgICBudW1iZXI9ezEwfVxyXG4gICAgIHRpdGxlPVwiU3RyaW5nIGZyb20gaW5kZXggZmlsZVwiIFxyXG4gICAgIHRleHQ9XCJUZXh0IGZyb20gaW5kZXggZmlsZVwiIC8+KTtcclxuXHJcbi8vIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKTtcclxuLy8gY29uc3Qgcm9vdCA9IGNyZWF0ZVJvb3QoY29udGFpbmVyKTsgLy8gY3JlYXRlUm9vdChjb250YWluZXIhKSBpZiB5b3UgdXNlIFR5cGVTY3JpcHRcclxuLy8gcm9vdC5yZW5kZXIoPEFwcCB0YWI9XCJob21lXCIgLz4pO1xyXG5cclxuXHJcblxyXG5cclxuIl0sIm5hbWVzIjpbIkRpZ2l0cm9uIiwiX0NvbXBvbmVudCIsIl9pbmhlcml0cyIsIl9zdXBlciIsIl9jcmVhdGVTdXBlciIsIl90aGlzIiwiX2NsYXNzQ2FsbENoZWNrIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJjYWxsIiwiYXBwbHkiLCJjb25jYXQiLCJfZGVmaW5lUHJvcGVydHkiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwicmVzdWx0IiwiYnV0dG9uIiwiY2FsY3VsYXRlIiwicmVzZXQiLCJiYWNrc3BhY2UiLCJzZXRTdGF0ZSIsInN0YXRlIiwiY2hlY2tSZXN1bHQiLCJpbmNsdWRlcyIsInJlcGxhY2UiLCJldmFsIiwiZSIsInNsaWNlIiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwidmFsdWUiLCJSZWFjdCIsImNsYXNzTmFtZSIsIkRpc3BsYXkiLCJ0aGlzIiwiS2V5UGFkQ29tcG9uZW50Iiwib25DbGljayIsIkNvbXBvbmVudCIsInByb3BzIiwibmFtZSIsInRhcmdldCIsImxhYmVsIiwic2l6ZSIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwiYWEiLCJjYSIsInAiLCJhIiwiYiIsImMiLCJkYSIsIlNldCIsImVhIiwiZmEiLCJoYSIsImFkZCIsImlhIiwid2luZG93IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiamEiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImthIiwibGEiLCJtYSIsInYiLCJkIiwiZiIsImciLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwidHlwZSIsInNhbml0aXplVVJMIiwicmVtb3ZlRW1wdHlTdHJpbmciLCJ6Iiwic3BsaXQiLCJmb3JFYWNoIiwidG9Mb3dlckNhc2UiLCJyYSIsInNhIiwidG9VcHBlckNhc2UiLCJ0YSIsInBhIiwiaXNOYU4iLCJxYSIsInRlc3QiLCJvYSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwieGxpbmtIcmVmIiwidWEiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsInZhIiwiU3ltYm9sIiwiZm9yIiwid2EiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJpdGVyYXRvciIsIkthIiwiTGEiLCJBIiwiYXNzaWduIiwiTWEiLCJFcnJvciIsInN0YWNrIiwidHJpbSIsIm1hdGNoIiwiTmEiLCJPYSIsInByZXBhcmVTdGFja1RyYWNlIiwiZGVmaW5lUHJvcGVydHkiLCJzZXQiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwibCIsImgiLCJkaXNwbGF5TmFtZSIsIlBhIiwidGFnIiwicmVuZGVyIiwiUWEiLCIkJHR5cGVvZiIsIl9jb250ZXh0IiwiX3BheWxvYWQiLCJfaW5pdCIsIlJhIiwiU2EiLCJUYSIsIm5vZGVOYW1lIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiY29uc3RydWN0b3IiLCJnZXQiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlVhIiwiV2EiLCJjaGVja2VkIiwiWGEiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsIllhIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJaYSIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJhYiIsImJiIiwiY2IiLCJkYiIsIm93bmVyRG9jdW1lbnQiLCJlYiIsImlzQXJyYXkiLCJmYiIsIm9wdGlvbnMiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiZ2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImNoaWxkcmVuIiwiaGIiLCJpYiIsImpiIiwidGV4dENvbnRlbnQiLCJrYiIsImxiIiwibWIiLCJuYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJvYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwicGIiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImFzcGVjdFJhdGlvIiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicWIiLCJyYiIsInNiIiwic3R5bGUiLCJpbmRleE9mIiwic2V0UHJvcGVydHkiLCJrZXlzIiwiY2hhckF0Iiwic3Vic3RyaW5nIiwidGIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwic291cmNlIiwidHJhY2siLCJ3YnIiLCJ1YiIsInZiIiwiaXMiLCJ3YiIsInhiIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiTmIiLCJtIiwib25FcnJvciIsIk9iIiwiUGIiLCJRYiIsIlJiIiwiU2IiLCJUYiIsIlZiIiwiYWx0ZXJuYXRlIiwicmV0dXJuIiwiZmxhZ3MiLCJXYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiWGIiLCJaYiIsImNoaWxkIiwic2libGluZyIsImN1cnJlbnQiLCJZYiIsIiRiIiwiYWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiYmMiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsImNjIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJkYyIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIkIiLCJ1bnN0YWJsZV9ub3ciLCJlYyIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiZmMiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsImdjIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJoYyIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiaWMiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsImpjIiwidW5zdGFibGVfSWRsZVByaW9yaXR5Iiwia2MiLCJsYyIsIm9jIiwiTWF0aCIsImNsejMyIiwicGMiLCJxYyIsImxvZyIsIkxOMiIsInJjIiwic2MiLCJ0YyIsInVjIiwicGVuZGluZ0xhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsInZjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJldmVudFRpbWVzIiwiQ2MiLCJDIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiTWFwIiwiUGMiLCJRYyIsIlJjIiwiU2MiLCJkZWxldGUiLCJwb2ludGVySWQiLCJUYyIsIm5hdGl2ZUV2ZW50IiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsInRhcmdldENvbnRhaW5lcnMiLCJWYyIsIldjIiwicHJpb3JpdHkiLCJpc0RlaHlkcmF0ZWQiLCJjb250YWluZXJJbmZvIiwiWGMiLCJZYyIsImRpc3BhdGNoRXZlbnQiLCJzaGlmdCIsIlpjIiwiJGMiLCJhZCIsImJkIiwiY2QiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImRkIiwiZWQiLCJ0cmFuc2l0aW9uIiwiZmQiLCJnZCIsImhkIiwiVWMiLCJzdG9wUHJvcGFnYXRpb24iLCJqZCIsImtkIiwibGQiLCJtZCIsIm5kIiwib2QiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJwZCIsInFkIiwicmQiLCJfcmVhY3ROYW1lIiwiX3RhcmdldEluc3QiLCJjdXJyZW50VGFyZ2V0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJ3ZCIsInhkIiwieWQiLCJzZCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSWQiLCJjbGlwYm9hcmREYXRhIiwiSmQiLCJMZCIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJRZCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNvZGUiLCJsb2NhdGlvbiIsInJlcGVhdCIsImxvY2FsZSIsIndoaWNoIiwiUmQiLCJUZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlZkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlhkIiwiWWQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIlpkIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsInVybCIsIndlZWsiLCJtZSIsIm5lIiwib2UiLCJldmVudCIsImxpc3RlbmVycyIsInBlIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwibm9kZSIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiTGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTWUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiTmUiLCJjb250ZW50RWRpdGFibGUiLCJPZSIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJkb2N1bWVudEVsZW1lbnQiLCJzdGFydCIsImVuZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwibWluIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJleHRlbmQiLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwiZWxlbWVudCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsIldlIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiWGUiLCJZZSIsIlplIiwiYW5pbWF0aW9uIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImVmIiwiZmYiLCJnZiIsImhmIiwibGYiLCJtZiIsIm5mIiwiVWIiLCJpbnN0YW5jZSIsImxpc3RlbmVyIiwiRCIsIm9mIiwiaGFzIiwicGYiLCJxZiIsInJmIiwicmFuZG9tIiwic2YiLCJiaW5kIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJuIiwidCIsIkoiLCJ4IiwidSIsInciLCJGIiwidGYiLCJ1ZiIsInBhcmVudFdpbmRvdyIsInZmIiwid2YiLCJuYSIsInhhIiwiJGEiLCJiYSIsImplIiwiY2hhciIsImtlIiwidW5zaGlmdCIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJfX2h0bWwiLCJGZiIsInNldFRpbWVvdXQiLCJHZiIsImNsZWFyVGltZW91dCIsIkhmIiwiUHJvbWlzZSIsIkpmIiwicXVldWVNaWNyb3Rhc2siLCJyZXNvbHZlIiwidGhlbiIsImNhdGNoIiwiSWYiLCJLZiIsIkxmIiwiTWYiLCJwcmV2aW91c1NpYmxpbmciLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiRSIsIkciLCJWZiIsIkgiLCJXZiIsIlhmIiwiWWYiLCJjb250ZXh0VHlwZXMiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJaZiIsImNoaWxkQ29udGV4dFR5cGVzIiwiJGYiLCJhZyIsImJnIiwiZ2V0Q2hpbGRDb250ZXh0IiwiY2ciLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJqZyIsImtnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJzZyIsInRnIiwidWciLCJ2ZyIsIndnIiwieGciLCJ5ZyIsIkkiLCJ6ZyIsIkFnIiwiQmciLCJlbGVtZW50VHlwZSIsImRlbGV0aW9ucyIsIkNnIiwicGVuZGluZ1Byb3BzIiwib3ZlcmZsb3ciLCJ0cmVlQ29udGV4dCIsInJldHJ5TGFuZSIsIkRnIiwibW9kZSIsIkVnIiwiRmciLCJHZyIsIm1lbW9pemVkUHJvcHMiLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwiZGVmYXVsdFByb3BzIiwiTWciLCJOZyIsIk9nIiwiUGciLCJRZyIsIlJnIiwiX2N1cnJlbnRWYWx1ZSIsIlNnIiwiY2hpbGRMYW5lcyIsIlRnIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJVZyIsIlZnIiwiY29udGV4dCIsIm1lbW9pemVkVmFsdWUiLCJuZXh0IiwiV2ciLCJYZyIsIllnIiwiaW50ZXJsZWF2ZWQiLCJaZyIsIiRnIiwiYWgiLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJiaCIsImNoIiwiZXZlbnRUaW1lIiwibGFuZSIsInBheWxvYWQiLCJjYWxsYmFjayIsImRoIiwiSyIsImVoIiwiZmgiLCJnaCIsInEiLCJyIiwieSIsImhoIiwiaWgiLCJqaCIsInJlZnMiLCJraCIsIm5oIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxzIiwiZW5xdWV1ZVNldFN0YXRlIiwiTCIsImxoIiwibWgiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwib2giLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsInBoIiwiY29udGV4dFR5cGUiLCJ1cGRhdGVyIiwicWgiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJyaCIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50Iiwic2giLCJyZWYiLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwidGgiLCJ1aCIsInZoIiwiaW5kZXgiLCJ3aCIsInhoIiwieWgiLCJpbXBsZW1lbnRhdGlvbiIsInpoIiwiQWgiLCJkb25lIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJJaCIsInRhZ05hbWUiLCJKaCIsIktoIiwiTGgiLCJNIiwiTWgiLCJyZXZlYWxPcmRlciIsIk5oIiwiT2giLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsIlBoIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlFoIiwiUmgiLCJOIiwiTyIsIlAiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIlEiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiYmFzZVF1ZXVlIiwicXVldWUiLCJkaSIsImVpIiwiZmkiLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiYWN0aW9uIiwiaGFzRWFnZXJTdGF0ZSIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiZ2kiLCJoaSIsImlpIiwiamkiLCJraSIsImdldFNuYXBzaG90IiwibGkiLCJtaSIsIlIiLCJuaSIsImxhc3RFZmZlY3QiLCJzdG9yZXMiLCJvaSIsInBpIiwicWkiLCJyaSIsImNyZWF0ZSIsImRlc3Ryb3kiLCJkZXBzIiwic2kiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsIkFpIiwiQmkiLCJDaSIsIkRpIiwiRWkiLCJGaSIsIkdpIiwiSGkiLCJJaSIsIkppIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlSW5zZXJ0aW9uRWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInVzZURlYnVnVmFsdWUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZUlkIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwiaWRlbnRpZmllclByZWZpeCIsIktpIiwibWVzc2FnZSIsImRpZ2VzdCIsIkxpIiwiTWkiLCJjb25zb2xlIiwiZXJyb3IiLCJOaSIsIldlYWtNYXAiLCJPaSIsIlBpIiwiUWkiLCJSaSIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImNvbXBvbmVudERpZENhdGNoIiwiU2kiLCJjb21wb25lbnRTdGFjayIsIlRpIiwicGluZ0NhY2hlIiwiVWkiLCJWaSIsIldpIiwiWGkiLCJSZWFjdEN1cnJlbnRPd25lciIsIllpIiwiWmkiLCIkaSIsImFqIiwiYmoiLCJjb21wYXJlIiwiY2oiLCJkaiIsImVqIiwiYmFzZUxhbmVzIiwiY2FjaGVQb29sIiwidHJhbnNpdGlvbnMiLCJmaiIsImdqIiwiaGoiLCJpaiIsImpqIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwia2oiLCJsaiIsInBlbmRpbmdDb250ZXh0IiwibWoiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIm5qIiwib2oiLCJwaiIsImZhbGxiYWNrIiwicWoiLCJyaiIsInRqIiwiZGF0YXNldCIsImRnc3QiLCJ1aiIsInZqIiwiX3JlYWN0UmV0cnkiLCJzaiIsInN1YnRyZWVGbGFncyIsIndqIiwieGoiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsImxhc3QiLCJ0YWlsIiwidGFpbE1vZGUiLCJ5aiIsIkVqIiwiUyIsIkZqIiwiR2oiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIiwib25jbGljayIsImNyZWF0ZUVsZW1lbnROUyIsImF1dG9Gb2N1cyIsImNyZWF0ZVRleHROb2RlIiwiVCIsIkhqIiwiSWoiLCJKaiIsIktqIiwiVSIsIkxqIiwiV2Vha1NldCIsIlYiLCJNaiIsIlciLCJOaiIsIk9qIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJVaiIsIlZqIiwiV2oiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiWGoiLCJYIiwiWWoiLCJaaiIsImFrIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImJrIiwiY2siLCJkayIsImVrIiwiZmsiLCJpc0hpZGRlbiIsImdrIiwiaGsiLCJkaXNwbGF5IiwiaWsiLCJqayIsImtrIiwibGsiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsInNyYyIsIldrIiwibWsiLCJjZWlsIiwibmsiLCJvayIsInBrIiwiWSIsIloiLCJxayIsInJrIiwic2siLCJ0ayIsInVrIiwiSW5maW5pdHkiLCJ2ayIsIndrIiwieGsiLCJ5ayIsInprIiwiQWsiLCJCayIsIkNrIiwiRGsiLCJFayIsImNhbGxiYWNrTm9kZSIsImV4cGlyYXRpb25UaW1lcyIsImV4cGlyZWRMYW5lcyIsIndjIiwiY2FsbGJhY2tQcmlvcml0eSIsImlnIiwiRmsiLCJHayIsIkhrIiwiSWsiLCJKayIsIktrIiwiTGsiLCJNayIsIk5rIiwiT2siLCJQayIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkTGFuZXMiLCJRayIsInRpbWVvdXRIYW5kbGUiLCJSayIsIlNrIiwiVGsiLCJVayIsIlZrIiwibXV0YWJsZVJlYWRMYW5lcyIsIkJjIiwiUGoiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm1jIiwib25SZWNvdmVyYWJsZUVycm9yIiwiWGsiLCJvblBvc3RDb21taXRGaWJlclJvb3QiLCJZayIsIlprIiwiYWwiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiYmwiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwiY2wiLCJjYWNoZSIsInBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXMiLCJlbCIsImZsIiwiZ2wiLCJobCIsImlsIiwiamwiLCJ6aiIsIiRrIiwibGwiLCJyZXBvcnRFcnJvciIsIm1sIiwiX2ludGVybmFsUm9vdCIsIm5sIiwib2wiLCJwbCIsInFsIiwic2wiLCJybCIsInVubW91bnQiLCJ1bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbiIsInNwbGljZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwidGwiLCJ1c2luZ0NsaWVudEVudHJ5UG9pbnQiLCJFdmVudHMiLCJ1bCIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInZlcnNpb24iLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwidmwiLCJyZW5kZXJlckNvbmZpZyIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoIiwib3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoIiwib3ZlcnJpZGVQcm9wcyIsIm92ZXJyaWRlUHJvcHNEZWxldGVQYXRoIiwib3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGgiLCJzZXRFcnJvckhhbmRsZXIiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsInJlY29uY2lsZXJWZXJzaW9uIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwid2wiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImRsIiwiY3JlYXRlUm9vdCIsInVuc3RhYmxlX3N0cmljdE1vZGUiLCJmaW5kRE9NTm9kZSIsImZsdXNoU3luYyIsImh5ZHJhdGUiLCJoeWRyYXRlUm9vdCIsImh5ZHJhdGVkU291cmNlcyIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY2hlY2tEQ0UiLCJlcnIiLCJmb3JjZVVwZGF0ZSIsIl9fc2VsZiIsIl9fc291cmNlIiwiZXNjYXBlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJkZWZhdWx0IiwiQ2hpbGRyZW4iLCJjb3VudCIsInRvQXJyYXkiLCJvbmx5IiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlB1cmVDb21wb25lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiX2RlZmF1bHRWYWx1ZSIsIl9nbG9iYWxOYW1lIiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJtZW1vIiwic3RhcnRUcmFuc2l0aW9uIiwidW5zdGFibGVfYWN0IiwicG9wIiwic29ydEluZGV4IiwicGVyZm9ybWFuY2UiLCJzZXRJbW1lZGlhdGUiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJuYXZpZ2F0b3IiLCJzY2hlZHVsaW5nIiwiaXNJbnB1dFBlbmRpbmciLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJmbG9vciIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJpbnNlcnQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZ2V0VGFyZ2V0Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJsZWFmUHJvdG90eXBlcyIsImdldFByb3RvIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJnZXRQcm90b3R5cGVPZiIsIm5zIiwiZGVmIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImRlZmluaXRpb24iLCJvIiwicHJvcCIsInRvU3RyaW5nVGFnIiwibmMiLCJBY3Rpb24iLCJfZXh0ZW5kcyIsImxvY2FscyIsIlBvcFN0YXRlRXZlbnRUeXBlIiwiaW52YXJpYW50Iiwid2FybmluZyIsImNvbmQiLCJ3YXJuIiwiZ2V0SGlzdG9yeVN0YXRlIiwidXNyIiwiaWR4IiwiY3JlYXRlTG9jYXRpb24iLCJ0byIsInBhdGhuYW1lIiwiaGFzaCIsInBhcnNlUGF0aCIsInN1YnN0ciIsIl9yZWYiLCJwYXRoIiwicGFyc2VkUGF0aCIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwiUmVzdWx0VHlwZSIsIm1hdGNoUm91dGVzIiwicm91dGVzIiwibG9jYXRpb25BcmciLCJiYXNlbmFtZSIsImJyYW5jaGVzIiwiZmxhdHRlblJvdXRlcyIsInNvcnQiLCJzY29yZSIsImV2ZXJ5IiwiY29tcGFyZUluZGV4ZXMiLCJyb3V0ZXNNZXRhIiwiY2hpbGRyZW5JbmRleCIsInJhbmtSb3V0ZUJyYW5jaGVzIiwibWF0Y2hlcyIsIm1hdGNoUm91dGVCcmFuY2giLCJzYWZlbHlEZWNvZGVVUkkiLCJwYXJlbnRzTWV0YSIsInBhcmVudFBhdGgiLCJmbGF0dGVuUm91dGUiLCJyb3V0ZSIsInJlbGF0aXZlUGF0aCIsImNhc2VTZW5zaXRpdmUiLCJzdGFydHNXaXRoIiwiY29tcHV0ZVNjb3JlIiwiX3JvdXRlJHBhdGgiLCJleHBsb2RlZCIsImV4cGxvZGVPcHRpb25hbFNlZ21lbnRzIiwic2VnbWVudHMiLCJmaXJzdCIsInJlc3QiLCJpc09wdGlvbmFsIiwiZW5kc1dpdGgiLCJyZXF1aXJlZCIsInJlc3RFeHBsb2RlZCIsInN1YnBhdGgiLCJwYXJhbVJlIiwiZHluYW1pY1NlZ21lbnRWYWx1ZSIsImluZGV4Um91dGVWYWx1ZSIsImVtcHR5U2VnbWVudFZhbHVlIiwic3RhdGljU2VnbWVudFZhbHVlIiwic3BsYXRQZW5hbHR5IiwiaXNTcGxhdCIsInMiLCJpbml0aWFsU2NvcmUiLCJzb21lIiwiZmlsdGVyIiwicmVkdWNlIiwic2VnbWVudCIsImJyYW5jaCIsIm1hdGNoZWRQYXJhbXMiLCJtYXRjaGVkUGF0aG5hbWUiLCJyZW1haW5pbmdQYXRobmFtZSIsInBhcmFtcyIsInBhdGhuYW1lQmFzZSIsIm5vcm1hbGl6ZVBhdGhuYW1lIiwicGF0dGVybiIsIm1hdGNoZXIiLCJwYXJhbU5hbWVzIiwicmVnZXhwU291cmNlIiwiXyIsInBhcmFtTmFtZSIsIlJlZ0V4cCIsImNvbXBpbGVQYXRoIiwiY2FwdHVyZUdyb3VwcyIsInNwbGF0VmFsdWUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzYWZlbHlEZWNvZGVVUklDb21wb25lbnQiLCJkZWNvZGVVUkkiLCJzdGFydEluZGV4IiwibmV4dENoYXIiLCJnZXRJbnZhbGlkUGF0aEVycm9yIiwiZmllbGQiLCJkZXN0IiwiZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMiLCJ0b0FyZyIsInJvdXRlUGF0aG5hbWVzIiwibG9jYXRpb25QYXRobmFtZSIsImlzUGF0aFJlbGF0aXZlIiwiZnJvbSIsImlzRW1wdHlQYXRoIiwidG9QYXRobmFtZSIsInJvdXRlUGF0aG5hbWVJbmRleCIsInRvU2VnbWVudHMiLCJmcm9tUGF0aG5hbWUiLCJyZXNvbHZlUGF0aG5hbWUiLCJub3JtYWxpemVTZWFyY2giLCJub3JtYWxpemVIYXNoIiwicmVzb2x2ZVBhdGgiLCJoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2giLCJoYXNDdXJyZW50VHJhaWxpbmdTbGFzaCIsInBhdGhzIiwidmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIiLCJ2YWxpZFJlcXVlc3RNZXRob2RzQXJyIiwiRGF0YVJvdXRlckNvbnRleHQiLCJEYXRhUm91dGVyU3RhdGVDb250ZXh0IiwiTmF2aWdhdGlvbkNvbnRleHQiLCJMb2NhdGlvbkNvbnRleHQiLCJSb3V0ZUNvbnRleHQiLCJvdXRsZXQiLCJpc0RhdGFSb3V0ZSIsIlJvdXRlRXJyb3JDb250ZXh0IiwidXNlSW5Sb3V0ZXJDb250ZXh0IiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsInN0YXRpYyIsInJvdXRlciIsImhvb2tOYW1lIiwiY3R4IiwidXNlRGF0YVJvdXRlckNvbnRleHQiLCJEYXRhUm91dGVySG9vayIsIlVzZU5hdmlnYXRlU3RhYmxlIiwidXNlQ3VycmVudFJvdXRlSWQiLCJEYXRhUm91dGVyU3RhdGVIb29rIiwiYWN0aXZlUmVmIiwibmF2aWdhdGUiLCJmcm9tUm91dGVJZCIsInVzZU5hdmlnYXRlU3RhYmxlIiwiZGF0YVJvdXRlckNvbnRleHQiLCJyb3V0ZVBhdGhuYW1lc0pzb24iLCJnbyIsInBhcnNlIiwicmVsYXRpdmUiLCJ1c2VOYXZpZ2F0ZVVuc3RhYmxlIiwiX3RlbXAyIiwidXNlUm91dGVzSW1wbCIsImRhdGFSb3V0ZXJTdGF0ZSIsInBhcmVudE1hdGNoZXMiLCJyb3V0ZU1hdGNoIiwicGFyZW50UGFyYW1zIiwicGFyZW50UGF0aG5hbWVCYXNlIiwibG9jYXRpb25Gcm9tQ29udGV4dCIsIl9wYXJzZWRMb2NhdGlvbkFyZyRwYSIsInBhcnNlZExvY2F0aW9uQXJnIiwicmVuZGVyZWRNYXRjaGVzIiwiX2RhdGFSb3V0ZXJTdGF0ZTIiLCJfZGF0YVJvdXRlclN0YXRlIiwiZXJyb3JzIiwiZXJyb3JJbmRleCIsImZpbmRJbmRleCIsInJlZHVjZVJpZ2h0IiwiZXJyb3JFbGVtZW50IiwiZGVmYXVsdEVycm9yRWxlbWVudCIsImdldENoaWxkcmVuIiwiUmVuZGVyZWRSb3V0ZSIsInJvdXRlQ29udGV4dCIsIkVycm9yQm91bmRhcnkiLCJSZW5kZXJFcnJvckJvdW5kYXJ5IiwicmV2YWxpZGF0aW9uIiwiY29tcG9uZW50IiwiX3JlbmRlck1hdGNoZXMiLCJlbmNvZGVMb2NhdGlvbiIsIm5hdmlnYXRpb25UeXBlIiwiUG9wIiwiRGVmYXVsdEVycm9yQ29tcG9uZW50IiwiX3N0YXRlJGVycm9ycyIsInVzZURhdGFSb3V0ZXJTdGF0ZSIsIlVzZVJvdXRlRXJyb3IiLCJyb3V0ZUlkIiwidXNlUm91dGVFcnJvciIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJpbnRlcm5hbCIsImlzUm91dGVFcnJvclJlc3BvbnNlIiwicHJlU3R5bGVzIiwicGFkZGluZyIsImJhY2tncm91bmRDb2xvciIsImZvbnRTdHlsZSIsInN1cGVyIiwiZXJyb3JJbmZvIiwic3RhdGljQ29udGV4dCIsIl9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkIiwidXNlUm91dGVDb250ZXh0IiwidGhpc1JvdXRlIiwiUm91dGUiLCJfcHJvcHMiLCJfcmVmNSIsImJhc2VuYW1lUHJvcCIsImxvY2F0aW9uUHJvcCIsInN0YXRpY1Byb3AiLCJuYXZpZ2F0aW9uQ29udGV4dCIsImxvY2F0aW9uQ29udGV4dCIsInRyYWlsaW5nUGF0aG5hbWUiLCJSb3V0ZXMiLCJfcmVmNiIsImNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiIsInRyZWVQYXRoIiwibG9hZGVyIiwiaGFzRXJyb3JCb3VuZGFyeSIsInNob3VsZFJldmFsaWRhdGUiLCJoYW5kbGUiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsIl9leGNsdWRlZCIsIl9leGNsdWRlZDIiLCJIYXNoUm91dGVyIiwiX3JlZjIiLCJmdXR1cmUiLCJoaXN0b3J5UmVmIiwiZ2V0TG9jYXRpb24iLCJjcmVhdGVIcmVmIiwidmFsaWRhdGVMb2NhdGlvbiIsInY1Q29tcGF0IiwiZ2xvYmFsSGlzdG9yeSIsImhpc3RvcnkiLCJnZXRJbmRleCIsImhhbmRsZVBvcCIsIm5leHRJbmRleCIsImRlbHRhIiwiY3JlYXRlVVJMIiwib3JpZ2luIiwiVVJMIiwicmVwbGFjZVN0YXRlIiwibGlzdGVuIiwiZm4iLCJQdXNoIiwiaGlzdG9yeVN0YXRlIiwicHVzaFN0YXRlIiwiRE9NRXhjZXB0aW9uIiwiUmVwbGFjZSIsImdldFVybEJhc2VkSGlzdG9yeSIsImdldEF0dHJpYnV0ZSIsInNldFN0YXRlSW1wbCIsInY3X3N0YXJ0VHJhbnNpdGlvbiIsIm5ld1N0YXRlIiwiaXNCcm93c2VyIiwiTGluayIsIl9yZWY0IiwiYWJzb2x1dGVIcmVmIiwicmVsb2FkRG9jdW1lbnQiLCJwcmV2ZW50U2Nyb2xsUmVzZXQiLCJpc0V4dGVybmFsIiwiY3VycmVudFVybCIsInRhcmdldFVybCIsInByb3RvY29sIiwiX3RlbXAiLCJqb2luZWRQYXRobmFtZSIsInVzZUhyZWYiLCJpbnRlcm5hbE9uQ2xpY2siLCJyZXBsYWNlUHJvcCIsImlzTW9kaWZpZWRFdmVudCIsInNob3VsZFByb2Nlc3NMaW5rQ2xpY2siLCJ1c2VMaW5rQ2xpY2tIYW5kbGVyIiwiTmF2TGluayIsImFyaWFDdXJyZW50UHJvcCIsImNsYXNzTmFtZVByb3AiLCJzdHlsZVByb3AiLCJyb3V0ZXJTdGF0ZSIsIm5leHRMb2NhdGlvblBhdGhuYW1lIiwibmF2aWdhdGlvbiIsImlzQWN0aXZlIiwiaXNQZW5kaW5nIiwiYXJpYUN1cnJlbnQiLCJCb29sZWFuIiwiQmFja1RvVG9wIiwiX3VzZVN0YXRlMiIsInZpc2libGUiLCJzZXRWaXNpYmxlIiwiaGFuZGxlU2Nyb2xsVmlzaWJpbGl0eSIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG8iLCJiZWhhdmlvciIsIl9zbGljZWRUb0FycmF5IiwiaW5wdXRWYWx1ZTEiLCJzZXRJbnB1dFZhbHVlMSIsIl91c2VTdGF0ZTQiLCJpbnB1dFZhbHVlMiIsInNldElucHV0VmFsdWUyIiwiX3VzZVN0YXRlNiIsImlucHV0VmFsdWUzIiwic2V0SW5wdXRWYWx1ZTMiLCJfdXNlU3RhdGU4IiwiaW5wdXRWYWx1ZTQiLCJzZXRJbnB1dFZhbHVlNCIsIl91c2VTdGF0ZTEwIiwiaW5wdXRWYWx1ZTUiLCJzZXRJbnB1dFZhbHVlNSIsIl91c2VTdGF0ZTEyIiwiaW5wdXRWYWx1ZTYiLCJzZXRJbnB1dFZhbHVlNiIsIl91c2VTdGF0ZTE0IiwiaW5wdXRWYWx1ZTciLCJzZXRJbnB1dFZhbHVlNyIsIl91c2VTdGF0ZTE2IiwiaW5wdXRWYWx1ZTgiLCJzZXRJbnB1dFZhbHVlOCIsIl91c2VTdGF0ZTE4IiwiaW5wdXRWYWx1ZTkiLCJzZXRJbnB1dFZhbHVlOSIsIl91c2VTdGF0ZTIwIiwiaW5wdXRWYWx1ZTEwIiwic2V0SW5wdXRWYWx1ZTEwIiwiX3VzZVN0YXRlMjIiLCJpbnB1dFZhbHVlMTEiLCJzZXRJbnB1dFZhbHVlMTEiLCJfdXNlU3RhdGUyNCIsImlucHV0VmFsdWUxMiIsInNldElucHV0VmFsdWUxMiIsIl91c2VTdGF0ZTI2IiwiaW5wdXRWYWx1ZTEzIiwic2V0SW5wdXRWYWx1ZTEzIiwiX3VzZVN0YXRlMjgiLCJpbnB1dFZhbHVlMTQiLCJzZXRJbnB1dFZhbHVlMTQiLCJfdXNlU3RhdGUzMCIsImlucHV0VmFsdWUxNSIsInNldElucHV0VmFsdWUxNSIsIl91c2VTdGF0ZTMyIiwiaW5wdXRWYWx1ZTE2Iiwic2V0SW5wdXRWYWx1ZTE2IiwiX3VzZVN0YXRlMzQiLCJpbnB1dFZhbHVlMTciLCJzZXRJbnB1dFZhbHVlMTciLCJfdXNlU3RhdGUzNiIsImlucHV0VmFsdWUxOCIsInNldElucHV0VmFsdWUxOCIsIl91c2VTdGF0ZTM4IiwiaW5wdXRWYWx1ZTE5Iiwic2V0SW5wdXRWYWx1ZTE5IiwiX3VzZVN0YXRlNDAiLCJpbnB1dFZhbHVlMjAiLCJzZXRJbnB1dFZhbHVlMjAiLCJfdXNlU3RhdGU0MiIsImlucHV0VmFsdWUyMSIsInNldElucHV0VmFsdWUyMSIsIl91c2VTdGF0ZTQ0IiwiaW5wdXRWYWx1ZTIyIiwic2V0SW5wdXRWYWx1ZTIyIiwiX3VzZVN0YXRlNDYiLCJpbnB1dFZhbHVlMjMiLCJzZXRJbnB1dFZhbHVlMjMiLCJfdXNlU3RhdGU0OCIsImlucHV0VmFsdWUyNCIsInNldElucHV0VmFsdWUyNCIsIl91c2VTdGF0ZTUwIiwiaW5wdXRWYWx1ZTI1Iiwic2V0SW5wdXRWYWx1ZTI1IiwiX3VzZVN0YXRlNTIiLCJpbnB1dFZhbHVlMjYiLCJzZXRJbnB1dFZhbHVlMjYiLCJfdXNlU3RhdGU1NCIsImlucHV0VmFsdWUyNyIsInNldElucHV0VmFsdWUyNyIsIl91c2VTdGF0ZTU2IiwiaW5wdXRWYWx1ZTI4Iiwic2V0SW5wdXRWYWx1ZTI4IiwiX3VzZVN0YXRlNTgiLCJpbnB1dFZhbHVlMjkiLCJzZXRJbnB1dFZhbHVlMjkiLCJfdXNlU3RhdGU2MCIsImlucHV0VmFsdWUzMCIsInNldElucHV0VmFsdWUzMCIsIl91c2VTdGF0ZTYyIiwiaW5wdXRWYWx1ZTMxIiwic2V0SW5wdXRWYWx1ZTMxIiwiX3VzZVN0YXRlNjQiLCJpbnB1dFZhbHVlMzIiLCJzZXRJbnB1dFZhbHVlMzIiLCJfdXNlU3RhdGU2NiIsImlucHV0VmFsdWUzMyIsInNldElucHV0VmFsdWUzMyIsIl91c2VTdGF0ZTY4IiwiaW5wdXRWYWx1ZTM0Iiwic2V0SW5wdXRWYWx1ZTM0IiwiX3VzZVN0YXRlNzAiLCJpbnB1dFZhbHVlMzUiLCJzZXRJbnB1dFZhbHVlMzUiLCJfdXNlU3RhdGU3MiIsImlucHV0VmFsdWUzNiIsInNldElucHV0VmFsdWUzNiIsIl91c2VTdGF0ZTc0IiwiaW5wdXRWYWx1ZTM3Iiwic2V0SW5wdXRWYWx1ZTM3IiwiX3VzZVN0YXRlNzYiLCJpbnB1dFZhbHVlMzgiLCJzZXRJbnB1dFZhbHVlMzgiLCJfdXNlU3RhdGU3OCIsImlucHV0VmFsdWUzOSIsInNldElucHV0VmFsdWUzOSIsIl91c2VTdGF0ZTgwIiwiaW5wdXRWYWx1ZTQwIiwic2V0SW5wdXRWYWx1ZTQwIiwiX3VzZVN0YXRlODIiLCJpbnB1dFZhbHVlNDEiLCJzZXRJbnB1dFZhbHVlNDEiLCJfdXNlU3RhdGU4NCIsImlucHV0VmFsdWU0MiIsInNldElucHV0VmFsdWU0MiIsIl91c2VTdGF0ZTg2IiwiaW5wdXRWYWx1ZTQzIiwic2V0SW5wdXRWYWx1ZTQzIiwiX3VzZVN0YXRlODgiLCJpbnB1dFZhbHVlNDQiLCJzZXRJbnB1dFZhbHVlNDQiLCJfdXNlU3RhdGU5MCIsImlucHV0VmFsdWU0NSIsInNldElucHV0VmFsdWU0NSIsIl91c2VTdGF0ZTkyIiwiaW5wdXRWYWx1ZTQ2Iiwic2V0SW5wdXRWYWx1ZTQ2IiwiX3VzZVN0YXRlOTQiLCJpbnB1dFZhbHVlNDciLCJzZXRJbnB1dFZhbHVlNDciLCJfdXNlU3RhdGU5NiIsImlucHV0VmFsdWU0OCIsInNldElucHV0VmFsdWU0OCIsIl91c2VTdGF0ZTk4IiwiaW5wdXRWYWx1ZTQ5Iiwic2V0SW5wdXRWYWx1ZTQ5IiwiX3VzZVN0YXRlMTAwIiwiaW5wdXRWYWx1ZTUwIiwic2V0SW5wdXRWYWx1ZTUwIiwidXNlTmF2aWdhdGUiLCJvbkNoYW5nZSIsInRvRml4ZWQiLCJOdW1iZXIiLCJtb2RlbFJlZiIsImFubm90cyIsInNldEFubm90cyIsImdldERhdGFQb3NpdGlvbiIsImFubm90IiwicG9zaXRpb24iLCJnZXREYXRhTm9ybWFsIiwibm9ybWFsIiwiY29sU3BhbiIsImFyIiwiaGl0IiwicG9zaXRpb25BbmROb3JtYWxGcm9tUG9pbnQiLCJzbG90IiwiTW90aW9uQ29uZmlnQ29udGV4dCIsInRyYW5zZm9ybVBhZ2VQb2ludCIsImlzU3RhdGljIiwicmVkdWNlZE1vdGlvbiIsIk1vdGlvbkNvbnRleHQiLCJMYXp5Q29udGV4dCIsInN0cmljdCIsImlzUmVmT2JqZWN0IiwiaXNWYXJpYW50TGFiZWwiLCJpc0FuaW1hdGlvbkNvbnRyb2xzIiwidmFyaWFudFByaW9yaXR5T3JkZXIiLCJ2YXJpYW50UHJvcHMiLCJpc0NvbnRyb2xsaW5nVmFyaWFudHMiLCJhbmltYXRlIiwiaXNWYXJpYW50Tm9kZSIsInZhcmlhbnRzIiwidmFyaWFudExhYmVsc0FzRGVwZW5kZW5jeSIsImZlYXR1cmVQcm9wcyIsImV4aXQiLCJkcmFnIiwiaG92ZXIiLCJ0YXAiLCJwYW4iLCJpblZpZXciLCJsYXlvdXQiLCJmZWF0dXJlRGVmaW5pdGlvbnMiLCJpc0VuYWJsZWQiLCJMYXlvdXRHcm91cENvbnRleHQiLCJTd2l0Y2hMYXlvdXRHcm91cENvbnRleHQiLCJtb3Rpb25Db21wb25lbnRTeW1ib2wiLCJwcmVsb2FkZWRGZWF0dXJlcyIsImNyZWF0ZVZpc3VhbEVsZW1lbnQiLCJ1c2VSZW5kZXIiLCJ1c2VWaXN1YWxTdGF0ZSIsImZlYXR1cmVzIiwibG9hZEZlYXR1cmVzIiwiRm9yd2FyZFJlZkNvbXBvbmVudCIsImV4dGVybmFsUmVmIiwiTWVhc3VyZUxheW91dCIsImNvbmZpZ0FuZFByb3BzIiwibGF5b3V0SWQiLCJ1c2VMYXlvdXRJZCIsImluaXRpYWwiLCJpbmhlcml0IiwiZ2V0Q3VycmVudFRyZWVWYXJpYW50cyIsInVzZUNyZWF0ZU1vdGlvbkNvbnRleHQiLCJ2aXN1YWxTdGF0ZSIsInZpc3VhbEVsZW1lbnQiLCJwYXJlbnQiLCJsYXp5Q29udGV4dCIsInByZXNlbmNlQ29udGV4dCIsInJlZHVjZWRNb3Rpb25Db25maWciLCJ2aXN1YWxFbGVtZW50UmVmIiwicmVuZGVyZXIiLCJibG9ja0luaXRpYWxBbmltYXRpb24iLCJjYW5IYW5kb2ZmIiwiSGFuZG9mZkFwcGVhckFuaW1hdGlvbnMiLCJhbmltYXRpb25TdGF0ZSIsImFuaW1hdGVDaGFuZ2VzIiwidXBkYXRlRmVhdHVyZXMiLCJ1c2VWaXN1YWxFbGVtZW50IiwiaW5pdGlhbExheW91dEdyb3VwQ29uZmlnIiwiaXNTdHJpY3QiLCJtb3VudCIsInVzZU1vdGlvblJlZiIsImxheW91dEdyb3VwSWQiLCJjcmVhdGVNb3Rpb25Qcm94eSIsImNyZWF0ZUNvbmZpZyIsImN1c3RvbSIsImN1c3RvbU1vdGlvbkNvbXBvbmVudENvbmZpZyIsIlByb3h5IiwiY29tcG9uZW50Q2FjaGUiLCJfdGFyZ2V0IiwibG93ZXJjYXNlU1ZHRWxlbWVudHMiLCJpc1NWR0NvbXBvbmVudCIsInNjYWxlQ29ycmVjdG9ycyIsInRyYW5zZm9ybVByb3BPcmRlciIsInRyYW5zZm9ybVByb3BzIiwiaXNGb3JjZWRNb3Rpb25WYWx1ZSIsImlzTW90aW9uVmFsdWUiLCJnZXRWZWxvY2l0eSIsInRyYW5zbGF0ZUFsaWFzIiwidHJhbnNmb3JtUGVyc3BlY3RpdmUiLCJudW1UcmFuc2Zvcm1zIiwiY2hlY2tTdHJpbmdTdGFydHNXaXRoIiwidG9rZW4iLCJpc0NTU1ZhcmlhYmxlTmFtZSIsImlzQ1NTVmFyaWFibGVUb2tlbiIsImdldFZhbHVlQXNUeXBlIiwidHJhbnNmb3JtIiwiY2xhbXAiLCJtYXgiLCJwYXJzZUZsb2F0IiwiYWxwaGEiLCJzY2FsZSIsInNhbml0aXplIiwicm91bmQiLCJmbG9hdFJlZ2V4IiwiY29sb3JSZWdleCIsInNpbmdsZUNvbG9yUmVnZXgiLCJpc1N0cmluZyIsImNyZWF0ZVVuaXRUeXBlIiwidW5pdCIsImRlZ3JlZXMiLCJwZXJjZW50IiwicHgiLCJ2dyIsInByb2dyZXNzUGVyY2VudGFnZSIsIm51bWJlclZhbHVlVHlwZXMiLCJib3JkZXJXaWR0aCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyUmlnaHRXaWR0aCIsImJvcmRlckJvdHRvbVdpZHRoIiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyUmFkaXVzIiwicmFkaXVzIiwiYm9yZGVyVG9wTGVmdFJhZGl1cyIsImJvcmRlclRvcFJpZ2h0UmFkaXVzIiwiYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMiLCJib3JkZXJCb3R0b21MZWZ0UmFkaXVzIiwibWF4V2lkdGgiLCJtYXhIZWlnaHQiLCJyaWdodCIsImJvdHRvbSIsInBhZGRpbmdUb3AiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJtYXJnaW4iLCJtYXJnaW5Ub3AiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpbkxlZnQiLCJyb3RhdGUiLCJyb3RhdGVYIiwicm90YXRlWSIsInJvdGF0ZVoiLCJzY2FsZVgiLCJzY2FsZVkiLCJzY2FsZVoiLCJza2V3Iiwic2tld1giLCJza2V3WSIsImRpc3RhbmNlIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJ0cmFuc2xhdGVaIiwicGVyc3BlY3RpdmUiLCJvcmlnaW5YIiwib3JpZ2luWSIsIm9yaWdpbloiLCJudW1PY3RhdmVzIiwiYnVpbGRIVE1MU3R5bGVzIiwibGF0ZXN0VmFsdWVzIiwidHJhbnNmb3JtVGVtcGxhdGUiLCJ2YXJzIiwidHJhbnNmb3JtT3JpZ2luIiwiaGFzVHJhbnNmb3JtIiwiaGFzVHJhbnNmb3JtT3JpZ2luIiwidHJhbnNmb3JtSXNOb25lIiwidmFsdWVUeXBlIiwidmFsdWVBc1R5cGUiLCJlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbiIsImFsbG93VHJhbnNmb3JtTm9uZSIsInRyYW5zZm9ybUlzRGVmYXVsdCIsInRyYW5zZm9ybVN0cmluZyIsImJ1aWxkVHJhbnNmb3JtIiwiY3JlYXRlSHRtbFJlbmRlclN0YXRlIiwiY29weVJhd1ZhbHVlc09ubHkiLCJ1c2VIVE1MUHJvcHMiLCJodG1sUHJvcHMiLCJ1c2VJbml0aWFsTW90aW9uVmFsdWVzIiwidHJhbnNmb3JtVmFsdWVzIiwidXNlU3R5bGUiLCJkcmFnTGlzdGVuZXIiLCJkcmFnZ2FibGUiLCJ1c2VyU2VsZWN0IiwiV2Via2l0VXNlclNlbGVjdCIsIldlYmtpdFRvdWNoQ2FsbG91dCIsInRvdWNoQWN0aW9uIiwidGFiSW5kZXgiLCJvblRhcCIsIm9uVGFwU3RhcnQiLCJ3aGlsZVRhcCIsInZhbGlkTW90aW9uUHJvcHMiLCJpc1ZhbGlkTW90aW9uUHJvcCIsInNob3VsZEZvcndhcmQiLCJpc1ZhbGlkUHJvcCIsInJlcXVpcmUiLCJfYSIsImNhbGNPcmlnaW4iLCJkYXNoS2V5cyIsImFycmF5IiwiY2FtZWxLZXlzIiwiYnVpbGRTVkdBdHRycyIsImF0dHJYIiwiYXR0clkiLCJhdHRyU2NhbGUiLCJwYXRoTGVuZ3RoIiwicGF0aFNwYWNpbmciLCJwYXRoT2Zmc2V0IiwibGF0ZXN0IiwiaXNTVkdUYWciLCJ2aWV3Qm94IiwiYXR0cnMiLCJkaW1lbnNpb25zIiwiY2FsY1NWR1RyYW5zZm9ybU9yaWdpbiIsInNwYWNpbmciLCJ1c2VEYXNoQ2FzZSIsImJ1aWxkU1ZHUGF0aCIsImNyZWF0ZVN2Z1JlbmRlclN0YXRlIiwidXNlU1ZHUHJvcHMiLCJfaXNTdGF0aWMiLCJ2aXN1YWxQcm9wcyIsInJhd1N0eWxlcyIsImNyZWF0ZVVzZVJlbmRlciIsImZvcndhcmRNb3Rpb25Qcm9wcyIsImZpbHRlcmVkUHJvcHMiLCJpc0RvbSIsInZhbHVlcyIsImZpbHRlclByb3BzIiwiZWxlbWVudFByb3BzIiwicmVuZGVyZWRDaGlsZHJlbiIsImNhbWVsVG9EYXNoIiwic3RyIiwicmVuZGVySFRNTCIsInByb2plY3Rpb24iLCJnZXRQcm9qZWN0aW9uU3R5bGVzIiwiY2FtZWxDYXNlQXR0cmlidXRlcyIsInJlbmRlclNWRyIsInJlbmRlclN0YXRlIiwiX3N0eWxlUHJvcCIsInNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyIsInByZXZQcm9wcyIsIm5ld1ZhbHVlcyIsInJlc29sdmVWYXJpYW50RnJvbVByb3BzIiwiY3VycmVudFZhbHVlcyIsImN1cnJlbnRWZWxvY2l0eSIsImlzS2V5ZnJhbWVzVGFyZ2V0IiwiaXNDdXN0b21WYWx1ZSIsIm1peCIsInRvVmFsdWUiLCJyZXNvbHZlRmluYWxWYWx1ZUluS2V5ZnJhbWVzIiwicmVzb2x2ZU1vdGlvblZhbHVlIiwidW53cmFwcGVkVmFsdWUiLCJtYWtlVXNlVmlzdWFsU3RhdGUiLCJjb25maWciLCJtYWtlIiwiY3JlYXRlUmVuZGVyU3RhdGUiLCJvbk1vdW50IiwibWFrZUxhdGVzdFZhbHVlcyIsIm1ha2VTdGF0ZSIsImluaXQiLCJ1c2VDb25zdGFudCIsInNjcmFwZU1vdGlvblZhbHVlcyIsIm1vdGlvblZhbHVlcyIsImlzQ29udHJvbGxpbmdWYXJpYW50cyQxIiwiaXNWYXJpYW50Tm9kZSQxIiwiaXNJbml0aWFsQW5pbWF0aW9uQmxvY2tlZCIsInZhcmlhbnRUb1NldCIsInJlc29sdmVkIiwidHJhbnNpdGlvbkVuZCIsInZhbHVlVGFyZ2V0Iiwibm9vcCIsImFueSIsIlF1ZXVlIiwic2NoZWR1bGVkIiwicHJvY2VzcyIsImNsZWFyIiwic3RlcHNPcmRlciIsInNjaGVkdWxlIiwiY2FuY2VsIiwiY2FuY2VsRnJhbWUiLCJmcmFtZURhdGEiLCJzdGVwcyIsInNjaGVkdWxlTmV4dEJhdGNoIiwiYWxsb3dLZWVwQWxpdmUiLCJydW5OZXh0RnJhbWUiLCJ1c2VEZWZhdWx0RWxhcHNlZCIsInRpbWVzdGFtcCIsImlzUHJvY2Vzc2luZyIsImFjYyIsInRoaXNGcmFtZSIsIm5leHRGcmFtZSIsIm51bVRvUnVuIiwiZmx1c2hOZXh0RnJhbWUiLCJ0b0tlZXBBbGl2ZSIsInN0ZXAiLCJrZWVwQWxpdmUiLCJpbW1lZGlhdGUiLCJhZGRUb0N1cnJlbnRGcmFtZSIsImNyZWF0ZVJlbmRlclN0ZXAiLCJwcm9jZXNzU3RlcCIsInN0ZXBJZCIsInByb2Nlc3NCYXRjaCIsImNyZWF0ZVJlbmRlckJhdGNoZXIiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzdmdNb3Rpb25Db25maWciLCJyZWFkIiwiZ2V0QkJveCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImh0bWxNb3Rpb25Db25maWciLCJhZGREb21FdmVudCIsImV2ZW50TmFtZSIsImhhbmRsZXIiLCJpc1ByaW1hcnlQb2ludGVyIiwiZXh0cmFjdEV2ZW50SW5mbyIsInBvaW50VHlwZSIsInBvaW50IiwiYWRkUG9pbnRlckluZm8iLCJhZGRQb2ludGVyRXZlbnQiLCJjb21iaW5lRnVuY3Rpb25zIiwicGlwZSIsInRyYW5zZm9ybWVycyIsImNyZWF0ZUxvY2siLCJsb2NrIiwiZ2xvYmFsSG9yaXpvbnRhbExvY2siLCJnbG9iYWxWZXJ0aWNhbExvY2siLCJnZXRHbG9iYWxMb2NrIiwib3Blbkhvcml6b250YWwiLCJvcGVuVmVydGljYWwiLCJpc0RyYWdBY3RpdmUiLCJvcGVuR2VzdHVyZUxvY2siLCJGZWF0dXJlIiwiYWRkSG92ZXJFdmVudCIsImNhbGxiYWNrTmFtZSIsImluZm8iLCJnZXRQcm9wcyIsIndoaWxlSG92ZXIiLCJzZXRBY3RpdmUiLCJpc05vZGVPckNoaWxkIiwicGFyZW50RWxlbWVudCIsImZpcmVTeW50aGV0aWNQb2ludGVyRXZlbnQiLCJzeW50aGV0aWNQb2ludGVyRXZlbnQiLCJQb2ludGVyRXZlbnQiLCJvYnNlcnZlckNhbGxiYWNrcyIsIm9ic2VydmVycyIsImZpcmVPYnNlcnZlckNhbGxiYWNrIiwiZW50cnkiLCJmaXJlQWxsT2JzZXJ2ZXJDYWxsYmFja3MiLCJlbnRyaWVzIiwidGhyZXNob2xkTmFtZXMiLCJhbGwiLCJnZXN0dXJlQW5pbWF0aW9ucyIsImhhc0VudGVyZWRWaWV3IiwiaXNJblZpZXciLCJzdGFydE9ic2VydmVyIiwidmlld3BvcnQiLCJyb290Iiwicm9vdE1hcmdpbiIsImFtb3VudCIsIm9uY2UiLCJ0aHJlc2hvbGQiLCJyb290SW50ZXJlc2VjdGlvbk9ic2VydmVyIiwibG9va3VwUm9vdCIsInJvb3RPYnNlcnZlcnMiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImluaXRJbnRlcnNlY3Rpb25PYnNlcnZlciIsIm9ic2VydmUiLCJ1bm9ic2VydmUiLCJvYnNlcnZlSW50ZXJzZWN0aW9uIiwiaXNJbnRlcnNlY3RpbmciLCJvblZpZXdwb3J0RW50ZXIiLCJvblZpZXdwb3J0TGVhdmUiLCJwcmV2Vmlld3BvcnQiLCJoYXNWaWV3cG9ydE9wdGlvbkNoYW5nZWQiLCJyZW1vdmVTdGFydExpc3RlbmVycyIsInJlbW92ZUVuZExpc3RlbmVycyIsInJlbW92ZUFjY2Vzc2libGVMaXN0ZW5lcnMiLCJzdGFydFBvaW50ZXJQcmVzcyIsInN0YXJ0RXZlbnQiLCJzdGFydEluZm8iLCJpc1ByZXNzaW5nIiwicmVtb3ZlUG9pbnRlclVwTGlzdGVuZXIiLCJlbmRFdmVudCIsImVuZEluZm8iLCJjaGVja1ByZXNzRW5kIiwib25UYXBDYW5jZWwiLCJyZW1vdmVQb2ludGVyQ2FuY2VsTGlzdGVuZXIiLCJjYW5jZWxFdmVudCIsImNhbmNlbEluZm8iLCJjYW5jZWxQcmVzcyIsInN0YXJ0UHJlc3MiLCJzdGFydEFjY2Vzc2libGVQcmVzcyIsInJlbW92ZUtleWRvd25MaXN0ZW5lciIsImtleWRvd25FdmVudCIsImtleXVwRXZlbnQiLCJyZW1vdmVCbHVyTGlzdGVuZXIiLCJyZW1vdmVQb2ludGVyTGlzdGVuZXIiLCJyZW1vdmVGb2N1c0xpc3RlbmVyIiwib25Gb2N1cyIsImlzRm9jdXNWaXNpYmxlIiwib25CbHVyIiwic2hhbGxvd0NvbXBhcmUiLCJwcmV2IiwicHJldkxlbmd0aCIsInJlc29sdmVWYXJpYW50IiwiZ2V0Q3VycmVudCIsInZlbG9jaXR5Iiwib3B0aW1pemVkQXBwZWFyRGF0YUF0dHJpYnV0ZSIsInNlY29uZHNUb01pbGxpc2Vjb25kcyIsInNlY29uZHMiLCJtaWxsaXNlY29uZHNUb1NlY29uZHMiLCJtaWxsaXNlY29uZHMiLCJpc0JlemllckRlZmluaXRpb24iLCJlYXNpbmciLCJpc1dhYXBpU3VwcG9ydGVkRWFzaW5nIiwic3VwcG9ydGVkV2FhcGlFYXNpbmciLCJjdWJpY0JlemllckFzU3RyaW5nIiwibGluZWFyIiwiZWFzZSIsImVhc2VJbiIsImVhc2VPdXQiLCJlYXNlSW5PdXQiLCJjaXJjSW4iLCJjaXJjT3V0IiwiYmFja0luIiwiYmFja091dCIsIm1hcEVhc2luZ1RvTmF0aXZlRWFzaW5nIiwiY2FsY0JlemllciIsImExIiwiYTIiLCJjdWJpY0JlemllciIsIm1YMSIsIm1ZMSIsIm1YMiIsIm1ZMiIsImxvd2VyQm91bmQiLCJ1cHBlckJvdW5kIiwiY3VycmVudFgiLCJjdXJyZW50VCIsImFicyIsImJpbmFyeVN1YmRpdmlkZSIsImlzRWFzaW5nQXJyYXkiLCJtaXJyb3JFYXNpbmciLCJyZXZlcnNlRWFzaW5nIiwic2luIiwiYWNvcyIsImNpcmNJbk91dCIsImJhY2tJbk91dCIsImVhc2luZ0xvb2t1cCIsImFudGljaXBhdGUiLCJwb3ciLCJlYXNpbmdEZWZpbml0aW9uVG9GdW5jdGlvbiIsIngxIiwieTEiLCJ4MiIsInkyIiwiaXNDb2xvclN0cmluZyIsInRlc3RQcm9wIiwic3BsaXRDb2xvciIsImFOYW1lIiwiYk5hbWUiLCJjTmFtZSIsInJnYlVuaXQiLCJjbGFtcFJnYlVuaXQiLCJyZ2JhIiwicmVkIiwiZ3JlZW4iLCJibHVlIiwiYWxwaGEkMSIsImhleCIsInBhcnNlSW50IiwiaHNsYSIsImh1ZSIsInNhdHVyYXRpb24iLCJsaWdodG5lc3MiLCJwcm9ncmVzcyIsImh1ZVRvUmdiIiwibWl4TGluZWFyQ29sb3IiLCJmcm9tRXhwbyIsInNxcnQiLCJjb2xvclR5cGVzIiwiYXNSR0JBIiwiZmluZCIsIm1vZGVsIiwiaHNsYVRvUmdiYSIsIm1peENvbG9yIiwiZnJvbVJHQkEiLCJ0b1JHQkEiLCJibGVuZGVkIiwiY3NzVmFyVG9rZW5pc2VyIiwicmVnZXgiLCJjb3VudEtleSIsImNvbG9yVG9rZW5pc2VyIiwibnVtYmVyVG9rZW5pc2VyIiwidG9rZW5pc2UiLCJ0b2tlbmlzZWQiLCJhbmFseXNlQ29tcGxleFZhbHVlIiwib3JpZ2luYWxWYWx1ZSIsIm51bVZhcnMiLCJudW1Db2xvcnMiLCJudW1OdW1iZXJzIiwicGFyc2VDb21wbGV4VmFsdWUiLCJjcmVhdGVUcmFuc2Zvcm1lciIsIm51bVZhbHVlcyIsIm91dHB1dCIsImNvbnZlcnROdW1iZXJzVG9aZXJvIiwiY29tcGxleCIsIl9iIiwiZ2V0QW5pbWF0YWJsZU5vbmUiLCJwYXJzZWQiLCJ0cmFuc2Zvcm1lciIsIm1peEltbWVkaWF0ZSIsImdldE1peGVyIiwibWl4Q29tcGxleCIsIm1peEFycmF5IiwiYmxlbmRWYWx1ZSIsImZyb21UaGlzIiwibWl4T2JqZWN0IiwidGVtcGxhdGUiLCJvcmlnaW5TdGF0cyIsInRhcmdldFN0YXRzIiwidG9Gcm9tRGlmZmVyZW5jZSIsIm1peE51bWJlciIsImludGVycG9sYXRlIiwiaXNDbGFtcCIsIm1peGVyIiwiaW5wdXRMZW5ndGgiLCJyZXZlcnNlIiwibWl4ZXJzIiwiY3VzdG9tTWl4ZXIiLCJtaXhlckZhY3RvcnkiLCJudW1NaXhlcnMiLCJlYXNpbmdGdW5jdGlvbiIsImNyZWF0ZU1peGVycyIsImludGVycG9sYXRvciIsInByb2dyZXNzSW5SYW5nZSIsImtleWZyYW1lcyIsImR1cmF0aW9uIiwia2V5ZnJhbWVWYWx1ZXMiLCJ0aW1lcyIsImVhc2luZ0Z1bmN0aW9ucyIsImFic29sdXRlVGltZXMiLCJjb252ZXJ0T2Zmc2V0VG9UaW1lcyIsImFyciIsInJlbWFpbmluZyIsIm9mZnNldFByb2dyZXNzIiwiZmlsbE9mZnNldCIsImRlZmF1bHRPZmZzZXQiLCJtYXBUaW1lVG9LZXlmcmFtZSIsImNhbGN1bGF0ZWREdXJhdGlvbiIsInZlbG9jaXR5UGVyU2Vjb25kIiwiZnJhbWVEdXJhdGlvbiIsInZlbG9jaXR5U2FtcGxlRHVyYXRpb24iLCJjYWxjR2VuZXJhdG9yVmVsb2NpdHkiLCJyZXNvbHZlVmFsdWUiLCJwcmV2VCIsInNhZmVNaW4iLCJtaW5EdXJhdGlvbiIsIm1heER1cmF0aW9uIiwibWluRGFtcGluZyIsIm1heERhbXBpbmciLCJyb290SXRlcmF0aW9ucyIsImNhbGNBbmd1bGFyRnJlcSIsInVuZGFtcGVkRnJlcSIsImRhbXBpbmdSYXRpbyIsImR1cmF0aW9uS2V5cyIsInBoeXNpY3NLZXlzIiwiaXNTcHJpbmdUeXBlIiwic3ByaW5nIiwicmVzdERlbHRhIiwicmVzdFNwZWVkIiwic3RpZmZuZXNzIiwiZGFtcGluZyIsIm1hc3MiLCJpc1Jlc29sdmVkRnJvbUR1cmF0aW9uIiwic3ByaW5nT3B0aW9ucyIsImRlcml2ZWQiLCJib3VuY2UiLCJlbnZlbG9wZSIsImRlcml2YXRpdmUiLCJleHBvbmVudGlhbERlY2F5IiwiZXhwIiwiaW5pdGlhbEd1ZXNzIiwiYXBwcm94aW1hdGVSb290IiwiZmluZFNwcmluZyIsImdldFNwcmluZ09wdGlvbnMiLCJpbml0aWFsVmVsb2NpdHkiLCJpbml0aWFsRGVsdGEiLCJ1bmRhbXBlZEFuZ3VsYXJGcmVxIiwiaXNHcmFudWxhclNjYWxlIiwicmVzb2x2ZVNwcmluZyIsImFuZ3VsYXJGcmVxIiwiY29zIiwiZGFtcGVkQW5ndWxhckZyZXEiLCJmcmVxRm9yVCIsInNpbmgiLCJjb3NoIiwiaXNCZWxvd1ZlbG9jaXR5VGhyZXNob2xkIiwiaXNCZWxvd0Rpc3BsYWNlbWVudFRocmVzaG9sZCIsImluZXJ0aWEiLCJwb3dlciIsInRpbWVDb25zdGFudCIsImJvdW5jZURhbXBpbmciLCJib3VuY2VTdGlmZm5lc3MiLCJtb2RpZnlUYXJnZXQiLCJuZWFyZXN0Qm91bmRhcnkiLCJhbXBsaXR1ZGUiLCJpZGVhbCIsImNhbGNEZWx0YSIsImNhbGNMYXRlc3QiLCJhcHBseUZyaWN0aW9uIiwidGltZVJlYWNoZWRCb3VuZGFyeSIsInNwcmluZyQxIiwiY2hlY2tDYXRjaEJvdW5kYXJ5IiwiaGFzVXBkYXRlZEZyYW1lIiwiZnJhbWVsb29wRHJpdmVyIiwicGFzc1RpbWVzdGFtcCIsInN0b3AiLCJtYXhHZW5lcmF0b3JEdXJhdGlvbiIsImNhbGNHZW5lcmF0b3JEdXJhdGlvbiIsImdlbmVyYXRvciIsInR5cGVzIiwiZGVjYXkiLCJ0d2VlbiIsImFuaW1hdGVWYWx1ZSIsImF1dG9wbGF5IiwiZHJpdmVyIiwia2V5ZnJhbWVzJDEiLCJyZXBlYXREZWxheSIsInJlcGVhdFR5cGUiLCJvblBsYXkiLCJvblN0b3AiLCJvbkNvbXBsZXRlIiwib25VcGRhdGUiLCJyZXNvbHZlRmluaXNoZWRQcm9taXNlIiwiY3VycmVudEZpbmlzaGVkUHJvbWlzZSIsInNwZWVkIiwiaGFzU3RvcHBlZCIsInVwZGF0ZUZpbmlzaGVkUHJvbWlzZSIsImFuaW1hdGlvbkRyaXZlciIsImdlbmVyYXRvckZhY3RvcnkiLCJtYXBOdW1iZXJzVG9LZXlmcmFtZXMiLCJtaXJyb3JlZEdlbmVyYXRvciIsInBsYXlTdGF0ZSIsImhvbGRUaW1lIiwiY2FuY2VsVGltZSIsInJlc29sdmVkRHVyYXRpb24iLCJ0b3RhbER1cmF0aW9uIiwiY3VycmVudFRpbWUiLCJ0aWNrIiwidGltZVdpdGhvdXREZWxheSIsImlzSW5EZWxheVBoYXNlIiwiZWxhcHNlZCIsImZyYW1lR2VuZXJhdG9yIiwiY3VycmVudEl0ZXJhdGlvbiIsIml0ZXJhdGlvblByb2dyZXNzIiwiaXRlcmF0aW9uSXNPZGQiLCJpc0FuaW1hdGlvbkZpbmlzaGVkIiwiZmluaXNoIiwic3RvcEFuaW1hdGlvbkRyaXZlciIsInBsYXkiLCJjb250cm9scyIsInJlamVjdCIsIm5ld1RpbWUiLCJuZXdTcGVlZCIsInBhdXNlIiwiY29tcGxldGUiLCJzYW1wbGUiLCJzdXBwb3J0c1dhYXBpIiwiRWxlbWVudCIsImFjY2VsZXJhdGVkVmFsdWVzIiwidW5kZXJEYW1wZWRTcHJpbmciLCJrZXlmcmFtZXNUcmFuc2l0aW9uIiwiZ2V0RGVmYXVsdFRyYW5zaXRpb24iLCJ2YWx1ZUtleSIsImlzQW5pbWF0YWJsZSIsIm1heERlZmF1bHRzIiwiYXBwbHlEZWZhdWx0RmlsdGVyIiwiZnVuY3Rpb25SZWdleCIsImZ1bmN0aW9ucyIsImRlZmF1bHRWYWx1ZVR5cGVzIiwib3V0bGluZUNvbG9yIiwiZmlsbCIsInN0cm9rZSIsImJvcmRlckNvbG9yIiwiYm9yZGVyVG9wQ29sb3IiLCJib3JkZXJSaWdodENvbG9yIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJib3JkZXJMZWZ0Q29sb3IiLCJXZWJraXRGaWx0ZXIiLCJnZXREZWZhdWx0VmFsdWVUeXBlIiwiZGVmYXVsdFZhbHVlVHlwZSIsImlzWmVyb1ZhbHVlU3RyaW5nIiwiaXNOb25lIiwiZ2V0VmFsdWVUcmFuc2l0aW9uIiwiYW5pbWF0ZU1vdGlvblZhbHVlIiwidmFsdWVOYW1lIiwidmFsdWVUcmFuc2l0aW9uIiwiaXNUYXJnZXRBbmltYXRhYmxlIiwiZGVmYXVsdE9yaWdpbiIsImFuaW1hdGFibGVUZW1wbGF0ZVZhbHVlIiwibm9uZUtleWZyYW1lSW5kZXhlcyIsImdldEtleWZyYW1lcyIsIm9yaWdpbktleWZyYW1lIiwidGFyZ2V0S2V5ZnJhbWUiLCJpc09yaWdpbkFuaW1hdGFibGUiLCJ3aGVuIiwiX2RlbGF5IiwiZGVsYXlDaGlsZHJlbiIsInN0YWdnZXJDaGlsZHJlbiIsInN0YWdnZXJEaXJlY3Rpb24iLCJpc1RyYW5zaXRpb25EZWZpbmVkIiwiY3JlYXRlSW5zdGFudEFuaW1hdGlvbiIsIm93bmVyIiwiSFRNTEVsZW1lbnQiLCJhY2NlbGVyYXRlZEFuaW1hdGlvbiIsInJlcXVpcmVzUHJlZ2VuZXJhdGVkS2V5ZnJhbWVzIiwic2FtcGxlQW5pbWF0aW9uIiwicHJlZ2VuZXJhdGVkS2V5ZnJhbWVzIiwia2V5ZnJhbWVPcHRpb25zIiwiaXRlcmF0aW9ucyIsImRpcmVjdGlvbiIsImFuaW1hdGVTdHlsZSIsInN5bmNTdGFydCIsInRpbWVsaW5lIiwiY2FuY2VsQW5pbWF0aW9uIiwic2FmZUNhbmNlbCIsIm9uZmluaXNoIiwiZ2V0RmluYWxLZXlmcmFtZSIsImF0dGFjaFRpbWVsaW5lIiwicGxheWJhY2tSYXRlIiwic2V0V2l0aFZlbG9jaXR5IiwiY3JlYXRlQWNjZWxlcmF0ZWRBbmltYXRpb24iLCJpc1dpbGxDaGFuZ2VNb3Rpb25WYWx1ZSIsImlzTnVtZXJpY2FsU3RyaW5nIiwiYWRkVW5pcXVlSXRlbSIsInJlbW92ZUl0ZW0iLCJTdWJzY3JpcHRpb25NYW5hZ2VyIiwic3Vic2NyaXB0aW9ucyIsIm5vdGlmeSIsIm51bVN1YnNjcmlwdGlvbnMiLCJnZXRTaXplIiwiY29sbGVjdE1vdGlvblZhbHVlcyIsIk1vdGlvblZhbHVlIiwidGltZURlbHRhIiwibGFzdFVwZGF0ZWQiLCJjYW5UcmFja1ZlbG9jaXR5IiwiZXZlbnRzIiwidXBkYXRlQW5kTm90aWZ5IiwicG9zdFJlbmRlciIsInNjaGVkdWxlVmVsb2NpdHlDaGVjayIsImNoYW5nZSIsInZlbG9jaXR5Q2hhbmdlIiwicmVuZGVyUmVxdWVzdCIsInZlbG9jaXR5Q2hlY2siLCJoYXNBbmltYXRlZCIsInN1YnNjcmlwdGlvbiIsIm9uIiwidW5zdWJzY3JpYmUiLCJjbGVhckxpc3RlbmVycyIsImV2ZW50TWFuYWdlcnMiLCJhdHRhY2giLCJwYXNzaXZlRWZmZWN0Iiwic3RvcFBhc3NpdmVFZmZlY3QiLCJqdW1wIiwiZ2V0UHJldmlvdXMiLCJzdGFydEFuaW1hdGlvbiIsImFuaW1hdGlvblN0YXJ0IiwiYW5pbWF0aW9uQ29tcGxldGUiLCJjbGVhckFuaW1hdGlvbiIsImFuaW1hdGlvbkNhbmNlbCIsImlzQW5pbWF0aW5nIiwibW90aW9uVmFsdWUiLCJ0ZXN0VmFsdWVUeXBlIiwiZGltZW5zaW9uVmFsdWVUeXBlcyIsImZpbmREaW1lbnNpb25WYWx1ZVR5cGUiLCJ2YWx1ZVR5cGVzIiwic2V0TW90aW9uVmFsdWUiLCJoYXNWYWx1ZSIsImFkZFZhbHVlIiwiZ2V0T3JpZ2luRnJvbVRyYW5zaXRpb24iLCJzaG91bGRCbG9ja0FuaW1hdGlvbiIsInByb3RlY3RlZEtleXMiLCJuZWVkc0FuaW1hdGluZyIsInNob3VsZEJsb2NrIiwiYW5pbWF0ZVRhcmdldCIsInRyYW5zaXRpb25PdmVycmlkZSIsIm1ha2VUYXJnZXRBbmltYXRhYmxlIiwid2lsbENoYW5nZSIsImFuaW1hdGlvbnMiLCJhbmltYXRpb25UeXBlU3RhdGUiLCJnZXRTdGF0ZSIsImFwcGVhcklkIiwic2hvdWxkUmVkdWNlTW90aW9uIiwic2V0VGFyZ2V0IiwiYW5pbWF0ZVZhcmlhbnQiLCJ2YXJpYW50IiwiZ2V0QW5pbWF0aW9uIiwiZ2V0Q2hpbGRBbmltYXRpb25zIiwidmFyaWFudENoaWxkcmVuIiwiZm9yd2FyZERlbGF5IiwibWF4U3RhZ2dlckR1cmF0aW9uIiwiZ2VuZXJhdGVTdGFnZ2VyRHVyYXRpb24iLCJzb3J0QnlUcmVlT3JkZXIiLCJhbmltYXRlQ2hpbGRyZW4iLCJzb3J0Tm9kZVBvc2l0aW9uIiwicmV2ZXJzZVByaW9yaXR5T3JkZXIiLCJudW1BbmltYXRpb25UeXBlcyIsImNyZWF0ZUFuaW1hdGlvblN0YXRlIiwicmVzb2x2ZWREZWZpbml0aW9uIiwiYW5pbWF0ZVZpc3VhbEVsZW1lbnQiLCJhbmltYXRlTGlzdCIsImNyZWF0ZVR5cGVTdGF0ZSIsIndoaWxlSW5WaWV3Iiwid2hpbGVEcmFnIiwid2hpbGVGb2N1cyIsImlzSW5pdGlhbFJlbmRlciIsImJ1aWxkUmVzb2x2ZWRUeXBlVmFsdWVzIiwiY2hhbmdlZEFjdGl2ZVR5cGUiLCJnZXRWYXJpYW50Q29udGV4dCIsInJlbW92ZWRLZXlzIiwiZW5jb3VudGVyZWRLZXlzIiwicmVtb3ZlZFZhcmlhbnRJbmRleCIsInR5cGVTdGF0ZSIsInByb3BJc1ZhcmlhbnQiLCJhY3RpdmVEZWx0YSIsImlzSW5oZXJpdGVkIiwibWFudWFsbHlBbmltYXRlT25Nb3VudCIsInByZXZQcm9wIiwidmFyaWFudERpZENoYW5nZSIsInNob3VsZEFuaW1hdGVUeXBlIiwiZGVmaW5pdGlvbkxpc3QiLCJyZXNvbHZlZFZhbHVlcyIsInByZXZSZXNvbHZlZFZhbHVlcyIsImFsbEtleXMiLCJtYXJrVG9BbmltYXRlIiwiZmFsbGJhY2tBbmltYXRpb24iLCJmYWxsYmFja1RhcmdldCIsImdldEJhc2VUYXJnZXQiLCJzaG91bGRBbmltYXRlIiwic2V0QW5pbWF0ZUZ1bmN0aW9uIiwibWFrZUFuaW1hdG9yIiwidXBkYXRlQW5pbWF0aW9uQ29udHJvbHNTdWJzY3JpcHRpb24iLCJzdWJzY3JpYmUiLCJwcmV2QW5pbWF0ZSIsImlzUHJlc2VudCIsIm9uRXhpdENvbXBsZXRlIiwicHJldklzUHJlc2VudCIsInByZXZQcmVzZW5jZUNvbnRleHQiLCJleGl0QW5pbWF0aW9uIiwicmVnaXN0ZXIiLCJQYW5TZXNzaW9uIiwiaGFuZGxlcnMiLCJsYXN0TW92ZUV2ZW50IiwibGFzdE1vdmVFdmVudEluZm8iLCJ1cGRhdGVQb2ludCIsImdldFBhbkluZm8iLCJpc1BhblN0YXJ0ZWQiLCJpc0Rpc3RhbmNlUGFzdFRocmVzaG9sZCIsInhEZWx0YSIsInlEZWx0YSIsImRpc3RhbmNlMkQiLCJvblN0YXJ0Iiwib25Nb3ZlIiwiaGFuZGxlUG9pbnRlck1vdmUiLCJ0cmFuc2Zvcm1Qb2ludCIsImhhbmRsZVBvaW50ZXJVcCIsIm9uRW5kIiwib25TZXNzaW9uRW5kIiwicGFuSW5mbyIsImluaXRpYWxJbmZvIiwib25TZXNzaW9uU3RhcnQiLCJyZW1vdmVMaXN0ZW5lcnMiLCJ1cGRhdGVIYW5kbGVycyIsInN1YnRyYWN0UG9pbnQiLCJsYXN0RGV2aWNlUG9pbnQiLCJzdGFydERldmljZVBvaW50IiwidGltZXN0YW1wZWRQb2ludCIsImxhc3RQb2ludCIsImNhbGNMZW5ndGgiLCJheGlzIiwiaXNOZWFyIiwibWF4RGlzdGFuY2UiLCJjYWxjQXhpc0RlbHRhIiwib3JpZ2luUG9pbnQiLCJ0cmFuc2xhdGUiLCJjYWxjQm94RGVsdGEiLCJjYWxjUmVsYXRpdmVBeGlzIiwiY2FsY1JlbGF0aXZlQXhpc1Bvc2l0aW9uIiwiY2FsY1JlbGF0aXZlUG9zaXRpb24iLCJjYWxjUmVsYXRpdmVBeGlzQ29uc3RyYWludHMiLCJjYWxjVmlld3BvcnRBeGlzQ29uc3RyYWludHMiLCJsYXlvdXRBeGlzIiwiY29uc3RyYWludHNBeGlzIiwiZGVmYXVsdEVsYXN0aWMiLCJyZXNvbHZlQXhpc0VsYXN0aWMiLCJkcmFnRWxhc3RpYyIsIm1pbkxhYmVsIiwibWF4TGFiZWwiLCJyZXNvbHZlUG9pbnRFbGFzdGljIiwiY3JlYXRlRGVsdGEiLCJjcmVhdGVCb3giLCJlYWNoQXhpcyIsImNvbnZlcnRCb3VuZGluZ0JveFRvQm94IiwiaXNJZGVudGl0eVNjYWxlIiwiaGFzU2NhbGUiLCJoYXMyRFRyYW5zbGF0ZSIsImlzMkRUcmFuc2xhdGUiLCJzY2FsZVBvaW50IiwiYXBwbHlQb2ludERlbHRhIiwiYm94U2NhbGUiLCJhcHBseUF4aXNEZWx0YSIsImFwcGx5Qm94RGVsdGEiLCJib3giLCJzbmFwVG9EZWZhdWx0IiwiaXNJbnRlZ2VyIiwidHJhbnNsYXRlQXhpcyIsInRyYW5zZm9ybUF4aXMiLCJ0cmFuc2Zvcm1zIiwic2NhbGVLZXkiLCJvcmlnaW5LZXkiLCJheGlzT3JpZ2luIiwieEtleXMiLCJ5S2V5cyIsInRyYW5zZm9ybUJveCIsIm1lYXN1cmVWaWV3cG9ydEJveCIsInRvcExlZnQiLCJib3R0b21SaWdodCIsInRyYW5zZm9ybUJveFBvaW50cyIsImVsZW1lbnREcmFnQ29udHJvbHMiLCJWaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzIiwib3Blbkdsb2JhbExvY2siLCJpc0RyYWdnaW5nIiwiY3VycmVudERpcmVjdGlvbiIsImNvbnN0cmFpbnRzIiwiaGFzTXV0YXRlZENvbnN0cmFpbnRzIiwiZWxhc3RpYyIsIm9yaWdpbkV2ZW50Iiwic25hcFRvQ3Vyc29yIiwicGFuU2Vzc2lvbiIsInN0b3BBbmltYXRpb24iLCJkcmFnUHJvcGFnYXRpb24iLCJvbkRyYWdTdGFydCIsInJlc29sdmVDb25zdHJhaW50cyIsImlzQW5pbWF0aW9uQmxvY2tlZCIsImdldEF4aXNNb3Rpb25WYWx1ZSIsIm1lYXN1cmVkQXhpcyIsImxheW91dEJveCIsImRyYWdEaXJlY3Rpb25Mb2NrIiwib25EaXJlY3Rpb25Mb2NrIiwib25EcmFnIiwibG9ja1RocmVzaG9sZCIsImdldEN1cnJlbnREaXJlY3Rpb24iLCJ1cGRhdGVBeGlzIiwiZ2V0VHJhbnNmb3JtUGFnZVBvaW50Iiwib25EcmFnRW5kIiwiX3BvaW50Iiwic2hvdWxkRHJhZyIsImF4aXNWYWx1ZSIsImFwcGx5Q29uc3RyYWludHMiLCJkcmFnQ29uc3RyYWludHMiLCJwcmV2Q29uc3RyYWludHMiLCJyZXNvbHZlUmVmQ29uc3RyYWludHMiLCJjYWxjUmVsYXRpdmVDb25zdHJhaW50cyIsInJlc29sdmVEcmFnRWxhc3RpYyIsInJlbGF0aXZlQ29uc3RyYWludHMiLCJyZWJhc2VBeGlzQ29uc3RyYWludHMiLCJvbk1lYXN1cmVEcmFnQ29uc3RyYWludHMiLCJjb25zdHJhaW50c0VsZW1lbnQiLCJjb25zdHJhaW50c0JveCIsInJvb3RQcm9qZWN0aW9uTm9kZSIsInZpZXdwb3J0Qm94Iiwic2Nyb2xsIiwibWVhc3VyZVBhZ2VCb3giLCJtZWFzdXJlZENvbnN0cmFpbnRzIiwiY2FsY1ZpZXdwb3J0Q29uc3RyYWludHMiLCJ1c2VyQ29uc3RyYWludHMiLCJjb252ZXJ0Qm94VG9Cb3VuZGluZ0JveCIsImRyYWdNb21lbnR1bSIsImRyYWdUcmFuc2l0aW9uIiwiZHJhZ1NuYXBUb09yaWdpbiIsIm9uRHJhZ1RyYW5zaXRpb25FbmQiLCJtb21lbnR1bUFuaW1hdGlvbnMiLCJzdGFydEF4aXNWYWx1ZUFuaW1hdGlvbiIsImRyYWdLZXkiLCJzY2FsZVBvc2l0aW9uV2l0aGluQ29uc3RyYWludHMiLCJib3hQcm9ncmVzcyIsInNvdXJjZUxlbmd0aCIsInRhcmdldExlbmd0aCIsInVwZGF0ZVNjcm9sbCIsInVwZGF0ZUxheW91dCIsImFkZExpc3RlbmVycyIsInN0b3BQb2ludGVyTGlzdGVuZXIiLCJtZWFzdXJlRHJhZ0NvbnN0cmFpbnRzIiwic3RvcE1lYXN1cmVMYXlvdXRMaXN0ZW5lciIsInN0b3BSZXNpemVMaXN0ZW5lciIsInN0b3BMYXlvdXRVcGRhdGVMaXN0ZW5lciIsImhhc0xheW91dENoYW5nZWQiLCJhc3luY0hhbmRsZXIiLCJnbG9iYWxQcm9qZWN0aW9uU3RhdGUiLCJoYXNBbmltYXRlZFNpbmNlUmVzaXplIiwiaGFzRXZlclVwZGF0ZWQiLCJwaXhlbHNUb1BlcmNlbnQiLCJwaXhlbHMiLCJjb3JyZWN0Qm9yZGVyUmFkaXVzIiwiY29ycmVjdCIsImNvcnJlY3RCb3hTaGFkb3ciLCJ0cmVlU2NhbGUiLCJwcm9qZWN0aW9uRGVsdGEiLCJvcmlnaW5hbCIsInNoYWRvdyIsInhTY2FsZSIsInlTY2FsZSIsImF2ZXJhZ2VTY2FsZSIsIk1lYXN1cmVMYXlvdXRXaXRoQ29udGV4dCIsImxheW91dEdyb3VwIiwic3dpdGNoTGF5b3V0R3JvdXAiLCJjb3JyZWN0b3JzIiwiZGVmYXVsdFNjYWxlQ29ycmVjdG9ycyIsImdyb3VwIiwiZGlkVXBkYXRlIiwic2FmZVRvUmVtb3ZlIiwic2V0T3B0aW9ucyIsImxheW91dERlcGVuZGVuY3kiLCJ3aWxsVXBkYXRlIiwicHJvbW90ZSIsInJlbGVnYXRlIiwiZ2V0U3RhY2siLCJtZW1iZXJzIiwiY3VycmVudEFuaW1hdGlvbiIsImlzTGVhZCIsInByb21vdGVDb250ZXh0Iiwic2NoZWR1bGVDaGVja0FmdGVyVW5tb3VudCIsImRlcmVnaXN0ZXIiLCJ1c2VQcmVzZW5jZSIsImFwcGx5VG8iLCJib3hTaGFkb3ciLCJib3JkZXJzIiwibnVtQm9yZGVycyIsImFzTnVtYmVyIiwiaXNQeCIsImdldFJhZGl1cyIsInJhZGl1c05hbWUiLCJlYXNlQ3Jvc3NmYWRlSW4iLCJjb21wcmVzcyIsImVhc2VDcm9zc2ZhZGVPdXQiLCJjb3B5QXhpc0ludG8iLCJvcmlnaW5BeGlzIiwiY29weUJveEludG8iLCJvcmlnaW5Cb3giLCJyZW1vdmVQb2ludERlbHRhIiwicmVtb3ZlQXhpc1RyYW5zZm9ybXMiLCJzb3VyY2VBeGlzIiwicmVtb3ZlQXhpc0RlbHRhIiwicmVtb3ZlQm94VHJhbnNmb3JtcyIsInNvdXJjZUJveCIsImlzQXhpc0RlbHRhWmVybyIsImlzRGVsdGFaZXJvIiwiYm94RXF1YWxzUm91bmRlZCIsIk5vZGVTdGFjayIsInNjaGVkdWxlUmVuZGVyIiwicHJldkxlYWQiLCJsZWFkIiwiaW5kZXhPZk5vZGUiLCJtZW1iZXIiLCJwcmVzZXJ2ZUZvbGxvd09wYWNpdHkiLCJzaG93IiwicmVzdW1lRnJvbSIsInByZXNlcnZlT3BhY2l0eSIsInNuYXBzaG90IiwiYW5pbWF0aW9uVmFsdWVzIiwiaXNVcGRhdGluZyIsImlzTGF5b3V0RGlydHkiLCJjcm9zc2ZhZGUiLCJoaWRlIiwiZXhpdEFuaW1hdGlvbkNvbXBsZXRlIiwicmVzdW1pbmdGcm9tIiwicmVtb3ZlTGVhZFNuYXBzaG90IiwiYnVpbGRQcm9qZWN0aW9uVHJhbnNmb3JtIiwibGF0ZXN0VHJhbnNmb3JtIiwieFRyYW5zbGF0ZSIsInlUcmFuc2xhdGUiLCJlbGVtZW50U2NhbGVYIiwiZWxlbWVudFNjYWxlWSIsImNvbXBhcmVCeURlcHRoIiwiZGVwdGgiLCJGbGF0VHJlZSIsImlzRGlydHkiLCJ0cmFuc2Zvcm1BeGVzIiwicHJvamVjdGlvbkZyYW1lRGF0YSIsInRvdGFsTm9kZXMiLCJyZXNvbHZlZFRhcmdldERlbHRhcyIsInJlY2FsY3VsYXRlZFByb2plY3Rpb24iLCJjcmVhdGVQcm9qZWN0aW9uTm9kZSIsImF0dGFjaFJlc2l6ZUxpc3RlbmVyIiwiZGVmYXVsdFBhcmVudCIsIm1lYXN1cmVTY3JvbGwiLCJjaGVja0lzU2Nyb2xsUm9vdCIsInJlc2V0VHJhbnNmb3JtIiwiYW5pbWF0aW9uSWQiLCJpc1RyZWVBbmltYXRpbmciLCJpc1Byb2plY3Rpb25EaXJ0eSIsImlzU2hhcmVkUHJvamVjdGlvbkRpcnR5IiwiaXNUcmFuc2Zvcm1EaXJ0eSIsInVwZGF0ZU1hbnVhbGx5QmxvY2tlZCIsInVwZGF0ZUJsb2NrZWRCeVJlc2l6ZSIsImlzU1ZHIiwibmVlZHNSZXNldCIsInNob3VsZFJlc2V0VHJhbnNmb3JtIiwiZXZlbnRIYW5kbGVycyIsImhhc1RyZWVBbmltYXRlZCIsInVwZGF0ZVNjaGVkdWxlZCIsImNoZWNrVXBkYXRlRmFpbGVkIiwiY2xlYXJBbGxTbmFwc2hvdHMiLCJ1cGRhdGVQcm9qZWN0aW9uIiwibm9kZXMiLCJwcm9wYWdhdGVEaXJ0eU5vZGVzIiwicmVzb2x2ZVRhcmdldERlbHRhIiwiY2FsY1Byb2plY3Rpb24iLCJjbGVhbkRpcnR5Tm9kZXMiLCJNb3Rpb25EZWJ1ZyIsInJlY29yZCIsImhhc1Byb2plY3RlZCIsImlzVmlzaWJsZSIsImFuaW1hdGlvblByb2dyZXNzIiwic2hhcmVkTm9kZXMiLCJub3RpZnlMaXN0ZW5lcnMiLCJzdWJzY3JpcHRpb25NYW5hZ2VyIiwiaGFzTGlzdGVuZXJzIiwiU1ZHRWxlbWVudCIsImNhbmNlbERlbGF5IiwicmVzaXplVW5ibG9ja1VwZGF0ZSIsInRpbWVvdXQiLCJjaGVja0VsYXBzZWQiLCJmaW5pc2hBbmltYXRpb24iLCJyZWdpc3RlclNoYXJlZE5vZGUiLCJoYXNSZWxhdGl2ZVRhcmdldENoYW5nZWQiLCJuZXdMYXlvdXQiLCJpc1RyZWVBbmltYXRpb25CbG9ja2VkIiwicmVsYXRpdmVUYXJnZXQiLCJsYXlvdXRUcmFuc2l0aW9uIiwiZGVmYXVsdExheW91dFRyYW5zaXRpb24iLCJvbkxheW91dEFuaW1hdGlvblN0YXJ0Iiwib25MYXlvdXRBbmltYXRpb25Db21wbGV0ZSIsInRhcmdldENoYW5nZWQiLCJ0YXJnZXRMYXlvdXQiLCJoYXNPbmx5UmVsYXRpdmVUYXJnZXRDaGFuZ2VkIiwibGF5b3V0Um9vdCIsInNldEFuaW1hdGlvbk9yaWdpbiIsImFuaW1hdGlvbk9wdGlvbnMiLCJibG9ja1VwZGF0ZSIsInVuYmxvY2tVcGRhdGUiLCJpc1VwZGF0ZUJsb2NrZWQiLCJzdGFydFVwZGF0ZSIsInJlc2V0Um90YXRpb24iLCJnZXRUcmFuc2Zvcm1UZW1wbGF0ZSIsInNob3VsZE5vdGlmeUxpc3RlbmVycyIsInByZXZUcmFuc2Zvcm1UZW1wbGF0ZVZhbHVlIiwidXBkYXRlU25hcHNob3QiLCJjbGVhck1lYXN1cmVtZW50cyIsImNsZWFySXNMYXlvdXREaXJ0eSIsInJlc2V0VHJhbnNmb3JtU3R5bGUiLCJub3RpZnlMYXlvdXRVcGRhdGUiLCJwcmVSZW5kZXIiLCJjbGVhclNuYXBzaG90IiwicmVtb3ZlTGVhZFNuYXBzaG90cyIsInNjaGVkdWxlVXBkYXRlUHJvamVjdGlvbiIsIm1lYXN1cmUiLCJhbHdheXNNZWFzdXJlTGF5b3V0IiwicHJldkxheW91dCIsImxheW91dENvcnJlY3RlZCIsInBoYXNlIiwibmVlZHNNZWFzdXJlbWVudCIsImxheW91dFNjcm9sbCIsImlzUm9vdCIsImlzUmVzZXRSZXF1ZXN0ZWQiLCJoYXNQcm9qZWN0aW9uIiwidHJhbnNmb3JtVGVtcGxhdGVWYWx1ZSIsInRyYW5zZm9ybVRlbXBsYXRlSGFzQ2hhbmdlZCIsInJlbW92ZVRyYW5zZm9ybSIsInBhZ2VCb3giLCJyZW1vdmVFbGVtZW50U2Nyb2xsIiwicm91bmRBeGlzIiwibWVhc3VyZWRCb3giLCJib3hXaXRob3V0U2Nyb2xsIiwicm9vdFNjcm9sbCIsImFwcGx5VHJhbnNmb3JtIiwidHJhbnNmb3JtT25seSIsIndpdGhUcmFuc2Zvcm1zIiwiYm94V2l0aG91dFRyYW5zZm9ybSIsInNldFRhcmdldERlbHRhIiwidGFyZ2V0RGVsdGEiLCJmb3JjZVJlbGF0aXZlUGFyZW50VG9SZXNvbHZlVGFyZ2V0IiwicmVsYXRpdmVQYXJlbnQiLCJyZXNvbHZlZFJlbGF0aXZlVGFyZ2V0QXQiLCJmb3JjZVJlY2FsY3VsYXRpb24iLCJnZXRMZWFkIiwiaXNTaGFyZWQiLCJhdHRlbXB0VG9SZXNvbHZlUmVsYXRpdmVUYXJnZXQiLCJnZXRDbG9zZXN0UHJvamVjdGluZ1BhcmVudCIsInJlbGF0aXZlVGFyZ2V0T3JpZ2luIiwidGFyZ2V0V2l0aFRyYW5zZm9ybXMiLCJpc1Byb2plY3RpbmciLCJjYW5Ta2lwIiwicGVuZGluZ0FuaW1hdGlvbiIsInByZXZUcmVlU2NhbGVYIiwicHJldlRyZWVTY2FsZVkiLCJpc1NoYXJlZFRyYW5zaXRpb24iLCJ0cmVlTGVuZ3RoIiwiYXBwbHlUcmVlRGVsdGFzIiwicHJvamVjdGlvblRyYW5zZm9ybSIsInByb2plY3Rpb25EZWx0YVdpdGhUcmFuc2Zvcm0iLCJwcmV2UHJvamVjdGlvblRyYW5zZm9ybSIsIm5vdGlmeUFsbCIsInNuYXBzaG90TGF0ZXN0VmFsdWVzIiwibWl4ZWRWYWx1ZXMiLCJyZWxhdGl2ZUxheW91dCIsImlzU2hhcmVkTGF5b3V0QW5pbWF0aW9uIiwiaXNPbmx5TWVtYmVyIiwic2hvdWxkQ3Jvc3NmYWRlT3BhY2l0eSIsImhhc09wYWNpdHlDcm9zc2ZhZGUiLCJwcmV2UmVsYXRpdmVUYXJnZXQiLCJtaXhUYXJnZXREZWx0YSIsIm1peEF4aXNEZWx0YSIsIm1peEF4aXMiLCJmb2xsb3ciLCJvcGFjaXR5RXhpdCIsImJvcmRlckxhYmVsIiwiZm9sbG93UmFkaXVzIiwibGVhZFJhZGl1cyIsIm1peFZhbHVlcyIsIm1vdGlvblZhbHVlJDEiLCJhbmltYXRlU2luZ2xlVmFsdWUiLCJjb21wbGV0ZUFuaW1hdGlvbiIsImFwcGx5VHJhbnNmb3Jtc1RvVGFyZ2V0Iiwic2hvdWxkQW5pbWF0ZVBvc2l0aW9uT25seSIsImFuaW1hdGlvblR5cGUiLCJ4TGVuZ3RoIiwieUxlbmd0aCIsImluaXRpYWxQcm9tb3Rpb25Db25maWciLCJzaG91bGRQcmVzZXJ2ZUZvbGxvd09wYWNpdHkiLCJnZXRQcmV2TGVhZCIsImhhc1JvdGF0ZSIsInJlc2V0VmFsdWVzIiwic2V0U3RhdGljVmFsdWUiLCJzdHlsZXMiLCJ2aXNpYmlsaXR5IiwicG9pbnRlckV2ZW50cyIsImVtcHR5U3R5bGVzIiwidmFsdWVzVG9SZW5kZXIiLCJjb3JyZWN0ZWQiLCJudW0iLCJyZXNldFRyZWUiLCJtZWFzdXJlZExheW91dCIsImF4aXNTbmFwc2hvdCIsImxheW91dERlbHRhIiwidmlzdWFsRGVsdGEiLCJwYXJlbnRTbmFwc2hvdCIsInBhcmVudExheW91dCIsInJlbGF0aXZlU25hcHNob3QiLCJvbkJlZm9yZUxheW91dE1lYXN1cmUiLCJ1c2VyQWdlbnRDb250YWlucyIsInN0cmluZyIsInVzZXJBZ2VudCIsInJvdW5kUG9pbnQiLCJEb2N1bWVudFByb2plY3Rpb25Ob2RlIiwiSFRNTFByb2plY3Rpb25Ob2RlIiwiZG9jdW1lbnROb2RlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInJlbW92ZVBvaW50ZXJEb3duTGlzdGVuZXIiLCJvblBvaW50ZXJEb3duIiwicG9pbnRlckRvd25FdmVudCIsInNlc3Npb24iLCJjcmVhdGVQYW5IYW5kbGVycyIsIm9uUGFuU2Vzc2lvblN0YXJ0Iiwib25QYW5TdGFydCIsIm9uUGFuIiwib25QYW5FbmQiLCJyZW1vdmVHcm91cENvbnRyb2xzIiwiZHJhZ0NvbnRyb2xzIiwiUHJvamVjdGlvbk5vZGUiLCJzcGxpdENTU1ZhcmlhYmxlUmVnZXgiLCJnZXRWYXJpYWJsZVZhbHVlIiwiZXhlYyIsInBhcnNlQ1NTVmFyaWFibGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwidHJpbW1lZCIsInBvc2l0aW9uYWxLZXlzIiwiaXNQb3NpdGlvbmFsS2V5IiwiaXNOdW1PclB4VHlwZSIsImdldFBvc0Zyb21NYXRyaXgiLCJtYXRyaXgiLCJwb3MiLCJnZXRUcmFuc2xhdGVGcm9tTWF0cml4IiwicG9zMiIsInBvczMiLCJfYmJveCIsIm1hdHJpeDNkIiwidHJhbnNmb3JtS2V5cyIsIm5vblRyYW5zbGF0aW9uYWxUcmFuc2Zvcm1LZXlzIiwicG9zaXRpb25hbFZhbHVlcyIsInVuaXRDb252ZXJzaW9uIiwiaGFzUG9zaXRpb25hbEtleSIsInRhcmdldFBvc2l0aW9uYWxLZXlzIiwicmVtb3ZlZFRyYW5zZm9ybVZhbHVlcyIsImhhc0F0dGVtcHRlZFRvUmVtb3ZlVHJhbnNmb3JtVmFsdWVzIiwiY2hhbmdlZFZhbHVlVHlwZUtleXMiLCJmcm9tVHlwZSIsInRvVHlwZSIsIm51bUtleWZyYW1lcyIsImZyb21JbmRleCIsInJlbW92ZWRUcmFuc2Zvcm1zIiwicmVtb3ZlTm9uVHJhbnNsYXRpb25hbFRyYW5zZm9ybSIsInNjcm9sbFkiLCJjb252ZXJ0ZWRUYXJnZXQiLCJjaGFuZ2VkS2V5cyIsIm9yaWdpbkJib3giLCJlbGVtZW50Q29tcHV0ZWRTdHlsZSIsInRhcmdldEJib3giLCJjb252ZXJ0Q2hhbmdlZFZhbHVlVHlwZXMiLCJjaGVja0FuZENvbnZlcnRDaGFuZ2VkVmFsdWVUeXBlcyIsInByZWZlcnNSZWR1Y2VkTW90aW9uIiwiaGFzUmVkdWNlZE1vdGlvbkxpc3RlbmVyIiwidmlzdWFsRWxlbWVudFN0b3JlIiwiZmVhdHVyZU5hbWVzIiwibnVtRmVhdHVyZXMiLCJwcm9wRXZlbnRIYW5kbGVycyIsIm51bVZhcmlhbnRQcm9wcyIsIlZpc3VhbEVsZW1lbnQiLCJ2YWx1ZVN1YnNjcmlwdGlvbnMiLCJwcmV2TW90aW9uVmFsdWVzIiwicHJvcEV2ZW50U3Vic2NyaXB0aW9ucyIsIm5vdGlmeVVwZGF0ZSIsInRyaWdnZXJCdWlsZCIsInJlbmRlckluc3RhbmNlIiwiYmFzZVRhcmdldCIsImluaXRpYWxWYWx1ZXMiLCJpbml0aWFsTW90aW9uVmFsdWVzIiwiX3ByZXZQcm9wcyIsInJlbW92ZUZyb21WYXJpYW50VHJlZSIsImFkZFZhcmlhbnRDaGlsZCIsImJpbmRUb01vdGlvblZhbHVlIiwibWF0Y2hNZWRpYSIsIm1vdGlvbk1lZGlhUXVlcnkiLCJzZXRSZWR1Y2VkTW90aW9uUHJlZmVyZW5jZXMiLCJhZGRMaXN0ZW5lciIsImluaXRQcmVmZXJzUmVkdWNlZE1vdGlvbiIsInZhbHVlSXNUcmFuc2Zvcm0iLCJyZW1vdmVPbkNoYW5nZSIsImxhdGVzdFZhbHVlIiwicmVtb3ZlT25SZW5kZXJSZXF1ZXN0Iiwib3RoZXIiLCJzb3J0SW5zdGFuY2VOb2RlUG9zaXRpb24iLCJyZW5kZXJlZFByb3BzIiwiUHJvamVjdGlvbk5vZGVDb25zdHJ1Y3RvciIsIkZlYXR1cmVDb25zdHJ1Y3RvciIsIk1lYXN1cmVMYXlvdXRDb21wb25lbnQiLCJmZWF0dXJlIiwiYnVpbGQiLCJtZWFzdXJlSW5zdGFuY2VWaWV3cG9ydEJveCIsImdldFN0YXRpY1ZhbHVlIiwiY2FuTXV0YXRlIiwibWFrZVRhcmdldEFuaW1hdGFibGVGcm9tSW5zdGFuY2UiLCJuZXh0VmFsdWUiLCJwcmV2VmFsdWUiLCJleGlzdGluZ1ZhbHVlIiwicmVtb3ZlVmFsdWUiLCJ1cGRhdGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMiLCJoYW5kbGVDaGlsZE1vdGlvblZhbHVlIiwiZ2V0VmFyaWFudCIsImdldENsb3Nlc3RWYXJpYW50Tm9kZSIsInN0YXJ0QXRQYXJlbnQiLCJjbG9zZXN0VmFyaWFudE5vZGUiLCJyZW1vdmVWYWx1ZUZyb21SZW5kZXJTdGF0ZSIsInJlYWRWYWx1ZSIsImdldEJhc2VUYXJnZXRGcm9tUHJvcHMiLCJyZWFkVmFsdWVGcm9tSW5zdGFuY2UiLCJzZXRCYXNlVGFyZ2V0IiwidmFsdWVGcm9tSW5pdGlhbCIsIkRPTVZpc3VhbEVsZW1lbnQiLCJ0cmFuc2l0aW9uT3JpZ2luIiwiZ2V0T3JpZ2luIiwibmV3VmFsdWVLZXlzIiwibnVtTmV3VmFsdWVzIiwidGFyZ2V0VmFsdWUiLCJjaGVja1RhcmdldEZvck5ld1ZhbHVlcyIsInJlc29sdmVDU1NWYXJpYWJsZXMiLCJwYXJzZURvbVZhcmlhbnQiLCJIVE1MVmlzdWFsRWxlbWVudCIsImRlZmF1bHRUeXBlIiwiY29tcHV0ZWRTdHlsZSIsImNoaWxkU3Vic2NyaXB0aW9uIiwiU1ZHVmlzdWFsRWxlbWVudCIsIm1vdGlvbiIsImlzT3BlbiIsInNldE9wZW4iLCJpc09wZW4xIiwic2V0T3BlbjEiLCJpc09wZW4yIiwic2V0T3BlbjIiLCJpc09wZW4zIiwic2V0T3BlbjMiLCJpc09wZW40Iiwic2V0T3BlbjQiLCJpc09wZW41Iiwic2V0T3BlbjUiLCJpc09wZW42Iiwic2V0T3BlbjYiLCJpc09wZW43Iiwic2V0T3BlbjciLCJpc09wZW44Iiwic2V0T3BlbjgiLCJpc09wZW45Iiwic2V0T3BlbjkiLCJkaXYiLCJOYXZpZ2F0aW9uIiwiX3JlZjMiLCJPZG5vc2kiLCJLYWxvcmlqZSIsIlRham1lciIsIlJlYWN0RE9NIiwiZ2V0RWxlbWVudEJ5SWQiLCJBcHAiLCJ0aXRsZSJdLCJzb3VyY2VSb290IjoiIn0=